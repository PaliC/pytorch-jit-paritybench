; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = srem i32 %15, 40, !dbg !15
  %17 = mul i32 %15, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen19 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen19, 10240, !dbg !17
  %19 = icmp slt i32 %16, 20, !dbg !18
  %20 = mul i32 %18, 10240, !dbg !19
  %srem.decomposed = sub i32 %.frozen19, %20, !dbg !19
  %21 = mul nsw i32 %18, 5120, !dbg !20
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %26 = icmp sgt i32 %16, 19, !dbg !24
  %27 = add nsw i32 %16, -20, !dbg !25
  %28 = shl nsw i32 %27, 8, !dbg !26
  %29 = add nsw i32 %21, %.decomposed, !dbg !27
  %30 = add nsw i32 %29, %28, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !29
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !30
  %34 = sext i32 %27 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !31
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26) #3, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %42 = bitcast i32 %41 to float, !dbg !34
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %44 = bitcast i32 %43 to float, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %46 = bitcast i32 %45 to float, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %26, i32 0, i1 %26) #3, !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = fadd float %42, 0x3F50624DE0000000, !dbg !35
  %50 = fadd float %44, 0x3F50624DE0000000, !dbg !35
  %51 = fadd float %46, 0x3F50624DE0000000, !dbg !35
  %52 = fadd float %48, 0x3F50624DE0000000, !dbg !35
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %53, 0, !dbg !36
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %54, 0, !dbg !36
  br i1 %.not.i, label %60, label %55, !dbg !36

55:                                               ; preds = %8
  br i1 %.not1.i, label %58, label %56, !dbg !36

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

60:                                               ; preds = %8
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %65, 0, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !36
  br i1 %.not.i1, label %72, label %67, !dbg !36

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !36

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %77, 0, !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %78, 0, !dbg !36
  br i1 %.not.i6, label %84, label %79, !dbg !36

79:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %82, label %80, !dbg !36

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

84:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %87, label %85, !dbg !36

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %80, %82, %85, %87
  %.0.i8 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %89, 0, !dbg !36
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %90, 0, !dbg !36
  br i1 %.not.i11, label %96, label %91, !dbg !36

91:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %94, label %92, !dbg !36

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

96:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %99, label %97, !dbg !36

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %92, %94, %97, %99
  %.0.i13 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !36
  %101 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !30
  %102 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !32
  %103 = insertelement <4 x i32> %102, i32 %38, i64 1, !dbg !32
  %104 = insertelement <4 x i32> %103, i32 %37, i64 2, !dbg !32
  %105 = insertelement <4 x i32> %104, i32 %36, i64 3, !dbg !32
  %106 = bitcast <4 x i32> %105 to <4 x float>, !dbg !32
  %107 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !23
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !38
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %26, i32 0, i1 %26) #3, !dbg !39
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %26, i32 0, i1 %26) #3, !dbg !39
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %26, i32 0, i1 %26) #3, !dbg !39
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %26, i32 0, i1 %26) #3, !dbg !39
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !40
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %26, i32 0, i1 %26) #3, !dbg !41
  %128 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !30
  %129 = insertelement <4 x i32> %128, i32 %107, i64 1, !dbg !30
  %130 = insertelement <4 x i32> %129, i32 %108, i64 2, !dbg !30
  %131 = insertelement <4 x i32> %130, i32 %109, i64 3, !dbg !30
  %132 = bitcast <4 x i32> %131 to <4 x float>, !dbg !30
  %133 = fsub <4 x float> %132, %106, !dbg !42
  %134 = insertelement <4 x float> poison, float %117, i64 0, !dbg !43
  %135 = insertelement <4 x float> %134, float %116, i64 1, !dbg !43
  %136 = insertelement <4 x float> %135, float %115, i64 2, !dbg !43
  %137 = insertelement <4 x float> %136, float %114, i64 3, !dbg !43
  %138 = fmul <4 x float> %133, %137, !dbg !43
  %139 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !39
  %140 = insertelement <4 x i32> %139, i32 %121, i64 1, !dbg !39
  %141 = insertelement <4 x i32> %140, i32 %120, i64 2, !dbg !39
  %142 = insertelement <4 x i32> %141, i32 %119, i64 3, !dbg !39
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !39
  %144 = fmul <4 x float> %138, %143, !dbg !44
  %145 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !41
  %146 = insertelement <4 x i32> %145, i32 %126, i64 1, !dbg !41
  %147 = insertelement <4 x i32> %146, i32 %125, i64 2, !dbg !41
  %148 = insertelement <4 x i32> %147, i32 %124, i64 3, !dbg !41
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !41
  %150 = fadd <4 x float> %144, %149, !dbg !45
  %151 = fcmp olt <4 x float> %150, zeroinitializer, !dbg !46
  %152 = extractelement <4 x i1> %151, i64 3, !dbg !50
  %153 = extractelement <4 x i1> %151, i64 2, !dbg !50
  %154 = extractelement <4 x i1> %151, i64 1, !dbg !50
  %155 = extractelement <4 x i1> %151, i64 0, !dbg !50
  %156 = sext i32 %14 to i64, !dbg !51
  %157 = getelementptr float, ptr addrspace(1) %6, i64 %156, !dbg !51
  %bc = bitcast <4 x float> %150 to <4 x i32>, !dbg !52
  %158 = extractelement <4 x i32> %bc, i64 3, !dbg !52
  %159 = select i1 %152, i32 0, i32 %158, !dbg !50
  %160 = select i1 %19, i32 %113, i32 %159, !dbg !53
  %bc16 = bitcast <4 x float> %150 to <4 x i32>, !dbg !52
  %161 = extractelement <4 x i32> %bc16, i64 2, !dbg !52
  %162 = select i1 %153, i32 0, i32 %161, !dbg !50
  %163 = select i1 %19, i32 %112, i32 %162, !dbg !53
  %bc17 = bitcast <4 x float> %150 to <4 x i32>, !dbg !52
  %164 = extractelement <4 x i32> %bc17, i64 1, !dbg !52
  %165 = select i1 %154, i32 0, i32 %164, !dbg !50
  %166 = select i1 %19, i32 %111, i32 %165, !dbg !53
  %bc18 = bitcast <4 x float> %150 to <4 x i32>, !dbg !52
  %167 = extractelement <4 x i32> %bc18, i64 0, !dbg !52
  %168 = select i1 %155, i32 0, i32 %167, !dbg !50
  %169 = select i1 %19, i32 %110, i32 %168, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %160, i32 %163, i32 %166, i32 %169, ptr addrspace(1) %157, i1 true) #3, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjfmvha7qaph7bxuif7x42zwijoqeqgcfrkqhrd5by23q5ba553f.py", directory: "inductor_cache/jf")
!4 = !{ptr @triton_poi_fused_cat_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_20", linkageName: "triton_poi_fused_cat_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 48, scope: !7)
!26 = !DILocation(line: 37, column: 40, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 64, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 44, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 27, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 44, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 44, scope: !7)
!42 = !DILocation(line: 39, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 54, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 58, column: 25, scope: !7)
!52 = !DILocation(line: 58, column: 37, scope: !7)
!53 = !DILocation(line: 57, column: 33, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
