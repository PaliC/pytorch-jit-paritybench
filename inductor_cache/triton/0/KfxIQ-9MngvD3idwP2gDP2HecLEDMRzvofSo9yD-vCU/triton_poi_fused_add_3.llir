; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 2, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 28, !dbg !12
  %9 = and i32 %7, 3, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 4, !dbg !14
  %12 = sext i32 %10 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 %11) #1, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !17
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %11) #1, !dbg !18
  %18 = bitcast i32 %17 to float, !dbg !18
  %19 = add i32 %10, 4, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #1, !dbg !23
  %26 = bitcast i32 %25 to float, !dbg !23
  %27 = add i32 %10, 8, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !26
  %31 = bitcast i32 %30 to float, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #1, !dbg !28
  %34 = bitcast i32 %33 to float, !dbg !28
  %35 = add i32 %10, 12, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #1, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %18) #1, !dbg !34
  %44 = fmul float %43, 2.500000e-01, !dbg !35
  %45 = fmul float %44, 0x3FF7154760000000, !dbg !36
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #1, !dbg !36
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %23, float %26) #1, !dbg !37
  %48 = fmul float %47, 2.500000e-01, !dbg !38
  %49 = fmul float %48, 0x3FF7154760000000, !dbg !39
  %50 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %49) #1, !dbg !39
  %51 = fadd float %46, %50, !dbg !40
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %34) #1, !dbg !41
  %53 = fmul float %52, 2.500000e-01, !dbg !42
  %54 = fmul float %53, 0x3FF7154760000000, !dbg !43
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #1, !dbg !43
  %56 = fadd float %51, %55, !dbg !44
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %42) #1, !dbg !45
  %58 = fmul float %57, 2.500000e-01, !dbg !46
  %59 = fmul float %58, 0x3FF7154760000000, !dbg !47
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #1, !dbg !47
  %61 = fadd float %56, %60, !dbg !48
  %62 = fadd float %61, 0x3E45798EE0000000, !dbg !49
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !50
  %64 = icmp eq i32 %8, 0, !dbg !51
  %65 = bitcast float %62 to i32, !dbg !51
  %66 = and i1 %64, %11, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %65, ptr addrspace(1) %63, i1 %66) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu3dzxrv6iwdpacwxp6eh5i6zfiur47qdbdzhjilndckhixbegbh.py", directory: "inductor_cache/u3")
!4 = !{ptr @triton_poi_fused_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_3", linkageName: "triton_poi_fused_add_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 34, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 39, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 40, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 36, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 41, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 41, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 23, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 24, scope: !7)
!40 = !DILocation(line: 40, column: 19, scope: !7)
!41 = !DILocation(line: 41, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 20, scope: !7)
!43 = !DILocation(line: 43, column: 24, scope: !7)
!44 = !DILocation(line: 44, column: 20, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 24, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
