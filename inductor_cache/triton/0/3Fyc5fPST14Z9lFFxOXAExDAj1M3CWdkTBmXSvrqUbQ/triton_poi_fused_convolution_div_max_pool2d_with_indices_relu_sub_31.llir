; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !11
  %8 = shl i32 %7, 10, !dbg !12
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %10 = shl i32 %9, 2, !dbg !13
  %11 = and i32 %10, 508, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = or disjoint i32 %11, 2, !dbg !13
  %14 = or disjoint i32 %11, 3, !dbg !13
  %15 = or disjoint i32 %11, 513, !dbg !13
  %16 = or disjoint i32 %11, 514, !dbg !13
  %17 = or disjoint i32 %11, 515, !dbg !13
  %18 = or disjoint i32 %8, %11, !dbg !14
  %19 = or disjoint i32 %8, %12, !dbg !14
  %20 = or disjoint i32 %8, %13, !dbg !14
  %21 = or disjoint i32 %8, %14, !dbg !14
  %22 = or disjoint i32 %18, 512, !dbg !14
  %23 = or disjoint i32 %8, %15, !dbg !14
  %24 = or disjoint i32 %8, %16, !dbg !14
  %25 = or disjoint i32 %8, %17, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %26 = sdiv i32 %.frozen, 256, !dbg !15
  %27 = mul i32 %26, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = shl i32 %18, 8, !dbg !17
  %29 = shl i32 %19, 8, !dbg !17
  %30 = shl i32 %20, 8, !dbg !17
  %31 = shl i32 %21, 8, !dbg !17
  %32 = shl i32 %22, 8, !dbg !17
  %33 = shl i32 %23, 8, !dbg !17
  %34 = shl i32 %24, 8, !dbg !17
  %35 = shl i32 %25, 8, !dbg !17
  %36 = shl i32 %26, 22, !dbg !18
  %37 = add i32 %36, %.decomposed, !dbg !19
  %38 = add i32 %37, %28, !dbg !20
  %39 = add i32 %37, %29, !dbg !20
  %40 = add i32 %37, %30, !dbg !20
  %41 = add i32 %37, %31, !dbg !20
  %42 = add i32 %37, %32, !dbg !20
  %43 = add i32 %37, %33, !dbg !20
  %44 = add i32 %37, %34, !dbg !20
  %45 = add i32 %37, %35, !dbg !20
  %46 = sext i32 %38 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = sext i32 %39 to i64, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !21
  %50 = sext i32 %40 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = sext i32 %41 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %42 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = sext i32 %43 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !21
  %58 = sext i32 %44 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = sext i32 %45 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !22
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !22
  %70 = sext i32 %.decomposed to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !24
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !24
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !24
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !24
  %76 = insertelement <8 x i32> poison, i32 %69, i64 0, !dbg !22
  %77 = insertelement <8 x i32> %76, i32 %68, i64 1, !dbg !22
  %78 = insertelement <8 x i32> %77, i32 %67, i64 2, !dbg !22
  %79 = insertelement <8 x i32> %78, i32 %66, i64 3, !dbg !22
  %80 = insertelement <8 x i32> %79, i32 %65, i64 4, !dbg !22
  %81 = insertelement <8 x i32> %80, i32 %64, i64 5, !dbg !22
  %82 = insertelement <8 x i32> %81, i32 %63, i64 6, !dbg !22
  %83 = insertelement <8 x i32> %82, i32 %62, i64 7, !dbg !22
  %84 = bitcast <8 x i32> %83 to <8 x float>, !dbg !22
  %85 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !25
  %86 = bitcast <8 x i32> %85 to <8 x float>, !dbg !25
  %87 = shufflevector <8 x float> %86, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !25
  %88 = fadd <8 x float> %87, %84, !dbg !25
  %89 = fcmp olt <8 x float> %88, zeroinitializer, !dbg !26
  %90 = extractelement <8 x i1> %89, i64 7, !dbg !30
  %91 = extractelement <8 x i1> %89, i64 6, !dbg !30
  %92 = extractelement <8 x i1> %89, i64 5, !dbg !30
  %93 = extractelement <8 x i1> %89, i64 4, !dbg !30
  %94 = extractelement <8 x i1> %89, i64 3, !dbg !30
  %95 = extractelement <8 x i1> %89, i64 2, !dbg !30
  %96 = extractelement <8 x i1> %89, i64 1, !dbg !30
  %97 = extractelement <8 x i1> %89, i64 0, !dbg !30
  %98 = shl i32 %6, 14, !dbg !31
  %99 = add i32 %18, %98, !dbg !32
  %100 = add i32 %98, %22, !dbg !32
  %101 = sext i32 %99 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !33
  %103 = sext i32 %100 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !33
  %bc = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %105 = extractelement <8 x i32> %bc, i64 7, !dbg !34
  %106 = select i1 %90, i32 0, i32 %105, !dbg !30
  %bc1 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %107 = extractelement <8 x i32> %bc1, i64 6, !dbg !34
  %108 = select i1 %91, i32 0, i32 %107, !dbg !30
  %bc2 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %109 = extractelement <8 x i32> %bc2, i64 5, !dbg !34
  %110 = select i1 %92, i32 0, i32 %109, !dbg !30
  %bc3 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %111 = extractelement <8 x i32> %bc3, i64 4, !dbg !34
  %112 = select i1 %93, i32 0, i32 %111, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %108, i32 %110, i32 %112, ptr addrspace(1) %102, i1 true) #1, !dbg !34
  %bc4 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %113 = extractelement <8 x i32> %bc4, i64 3, !dbg !34
  %114 = select i1 %94, i32 0, i32 %113, !dbg !30
  %bc5 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %115 = extractelement <8 x i32> %bc5, i64 2, !dbg !34
  %116 = select i1 %95, i32 0, i32 %115, !dbg !30
  %bc6 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %117 = extractelement <8 x i32> %bc6, i64 1, !dbg !34
  %118 = select i1 %96, i32 0, i32 %117, !dbg !30
  %bc7 = bitcast <8 x float> %88 to <8 x i32>, !dbg !34
  %119 = extractelement <8 x i32> %bc7, i64 0, !dbg !34
  %120 = select i1 %97, i32 0, i32 %119, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %116, i32 %118, i32 %120, ptr addrspace(1) %104, i1 true) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3tlvpfpun2rpl557cio53halkqpeo3ggqidzc7xtmy37zlkldj.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_31", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 52, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 36, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 47, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
