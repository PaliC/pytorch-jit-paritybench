; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = and i32 %11, 7, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = icmp slt i32 %17, 128, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 32, !dbg !16
  %22 = mul i32 %21, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl i32 %11, 4, !dbg !18
  %24 = and i32 %23, 2016, !dbg !18
  %25 = add nsw i32 %.decomposed, %24, !dbg !19
  %26 = shl i32 %21, 11, !dbg !20
  %27 = add i32 %25, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %45 = bitcast i32 %41 to float, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = bitcast i32 %51 to float, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = select i1 %18, float %35, float 0.000000e+00, !dbg !28
  %60 = select i1 %18, float %36, float 0.000000e+00, !dbg !28
  %61 = select i1 %18, float %37, float 0.000000e+00, !dbg !28
  %62 = select i1 %18, float %38, float 0.000000e+00, !dbg !28
  %63 = select i1 %18, float %45, float 0.000000e+00, !dbg !29
  %64 = select i1 %18, float %46, float 0.000000e+00, !dbg !29
  %65 = select i1 %18, float %47, float 0.000000e+00, !dbg !29
  %66 = select i1 %18, float %48, float 0.000000e+00, !dbg !29
  %67 = select i1 %18, float %55, float 0.000000e+00, !dbg !30
  %68 = select i1 %18, float %56, float 0.000000e+00, !dbg !30
  %69 = select i1 %18, float %57, float 0.000000e+00, !dbg !30
  %70 = select i1 %18, float %58, float 0.000000e+00, !dbg !30
  %71 = bitcast float %59 to i32, !dbg !31
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = bitcast float %63 to i32, !dbg !31
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 16, i32 31), !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = bitcast float %67 to i32, !dbg !31
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = fsub float %73, %59, !dbg !35
  %81 = fadd float %67, %79, !dbg !37
  %82 = fcmp oeq float %81, 0.000000e+00, !dbg !38
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %81) #3, !dbg !39
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !40
  %85 = fmul float %80, %84, !dbg !41
  %86 = fadd float %59, %85, !dbg !42
  %87 = fadd float %63, %76, !dbg !43
  %88 = fmul float %80, %80, !dbg !44
  %89 = fmul float %67, %88, !dbg !45
  %90 = fmul float %89, %84, !dbg !46
  %91 = fadd float %87, %90, !dbg !47
  %92 = bitcast float %86 to i32, !dbg !31
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !31
  %94 = bitcast i32 %93 to float, !dbg !31
  %95 = bitcast float %91 to i32, !dbg !31
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = bitcast float %81 to i32, !dbg !31
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = fsub float %94, %86, !dbg !35
  %102 = fadd float %81, %100, !dbg !37
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !38
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %102) #3, !dbg !39
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !40
  %106 = fmul float %101, %105, !dbg !41
  %107 = fadd float %86, %106, !dbg !42
  %108 = fadd float %91, %97, !dbg !43
  %109 = fmul float %101, %101, !dbg !44
  %110 = fmul float %81, %109, !dbg !45
  %111 = fmul float %105, %110, !dbg !46
  %112 = fadd float %108, %111, !dbg !47
  %113 = bitcast float %107 to i32, !dbg !31
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = bitcast float %112 to i32, !dbg !31
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = bitcast float %102 to i32, !dbg !31
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = fsub float %115, %107, !dbg !35
  %123 = fadd float %102, %121, !dbg !37
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !38
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %123) #3, !dbg !39
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !40
  %127 = fmul float %122, %126, !dbg !41
  %128 = fadd float %107, %127, !dbg !42
  %129 = fadd float %112, %118, !dbg !43
  %130 = fmul float %122, %122, !dbg !44
  %131 = fmul float %102, %130, !dbg !45
  %132 = fmul float %126, %131, !dbg !46
  %133 = fadd float %129, %132, !dbg !47
  %134 = bitcast float %128 to i32, !dbg !31
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !31
  %136 = bitcast i32 %135 to float, !dbg !31
  %137 = bitcast float %133 to i32, !dbg !31
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 2, i32 31), !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = bitcast float %123 to i32, !dbg !31
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = fsub float %136, %128, !dbg !35
  %144 = fadd float %123, %142, !dbg !37
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !38
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %144) #3, !dbg !39
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !40
  %148 = fmul float %143, %147, !dbg !41
  %149 = fadd float %128, %148, !dbg !42
  %150 = fadd float %133, %139, !dbg !43
  %151 = fmul float %143, %143, !dbg !44
  %152 = fmul float %123, %151, !dbg !45
  %153 = fmul float %147, %152, !dbg !46
  %154 = fadd float %150, %153, !dbg !47
  %155 = bitcast float %60 to i32, !dbg !31
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 16, i32 31), !dbg !31
  %157 = bitcast i32 %156 to float, !dbg !31
  %158 = bitcast float %64 to i32, !dbg !31
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !31
  %160 = bitcast i32 %159 to float, !dbg !31
  %161 = bitcast float %68 to i32, !dbg !31
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 16, i32 31), !dbg !31
  %163 = bitcast i32 %162 to float, !dbg !31
  %164 = fsub float %157, %60, !dbg !35
  %165 = fadd float %68, %163, !dbg !37
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !38
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %165) #3, !dbg !39
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !40
  %169 = fmul float %164, %168, !dbg !41
  %170 = fadd float %60, %169, !dbg !42
  %171 = fadd float %64, %160, !dbg !43
  %172 = fmul float %164, %164, !dbg !44
  %173 = fmul float %68, %172, !dbg !45
  %174 = fmul float %173, %168, !dbg !46
  %175 = fadd float %171, %174, !dbg !47
  %176 = bitcast float %170 to i32, !dbg !31
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !31
  %178 = bitcast i32 %177 to float, !dbg !31
  %179 = bitcast float %175 to i32, !dbg !31
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 8, i32 31), !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = bitcast float %165 to i32, !dbg !31
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = fsub float %178, %170, !dbg !35
  %186 = fadd float %165, %184, !dbg !37
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !38
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %186) #3, !dbg !39
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !40
  %190 = fmul float %185, %189, !dbg !41
  %191 = fadd float %170, %190, !dbg !42
  %192 = fadd float %175, %181, !dbg !43
  %193 = fmul float %185, %185, !dbg !44
  %194 = fmul float %165, %193, !dbg !45
  %195 = fmul float %189, %194, !dbg !46
  %196 = fadd float %192, %195, !dbg !47
  %197 = bitcast float %191 to i32, !dbg !31
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 4, i32 31), !dbg !31
  %199 = bitcast i32 %198 to float, !dbg !31
  %200 = bitcast float %196 to i32, !dbg !31
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 4, i32 31), !dbg !31
  %202 = bitcast i32 %201 to float, !dbg !31
  %203 = bitcast float %186 to i32, !dbg !31
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !31
  %205 = bitcast i32 %204 to float, !dbg !31
  %206 = fsub float %199, %191, !dbg !35
  %207 = fadd float %186, %205, !dbg !37
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !38
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %207) #3, !dbg !39
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !40
  %211 = fmul float %206, %210, !dbg !41
  %212 = fadd float %191, %211, !dbg !42
  %213 = fadd float %196, %202, !dbg !43
  %214 = fmul float %206, %206, !dbg !44
  %215 = fmul float %186, %214, !dbg !45
  %216 = fmul float %210, %215, !dbg !46
  %217 = fadd float %213, %216, !dbg !47
  %218 = bitcast float %212 to i32, !dbg !31
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 2, i32 31), !dbg !31
  %220 = bitcast i32 %219 to float, !dbg !31
  %221 = bitcast float %217 to i32, !dbg !31
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = bitcast float %207 to i32, !dbg !31
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 2, i32 31), !dbg !31
  %226 = bitcast i32 %225 to float, !dbg !31
  %227 = fsub float %220, %212, !dbg !35
  %228 = fadd float %207, %226, !dbg !37
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !38
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %228) #3, !dbg !39
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !40
  %232 = fmul float %227, %231, !dbg !41
  %233 = fadd float %212, %232, !dbg !42
  %234 = fadd float %217, %223, !dbg !43
  %235 = fmul float %227, %227, !dbg !44
  %236 = fmul float %207, %235, !dbg !45
  %237 = fmul float %231, %236, !dbg !46
  %238 = fadd float %234, %237, !dbg !47
  %239 = bitcast float %61 to i32, !dbg !31
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 16, i32 31), !dbg !31
  %241 = bitcast i32 %240 to float, !dbg !31
  %242 = bitcast float %65 to i32, !dbg !31
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 16, i32 31), !dbg !31
  %244 = bitcast i32 %243 to float, !dbg !31
  %245 = bitcast float %69 to i32, !dbg !31
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 16, i32 31), !dbg !31
  %247 = bitcast i32 %246 to float, !dbg !31
  %248 = fsub float %241, %61, !dbg !35
  %249 = fadd float %69, %247, !dbg !37
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !38
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #3, !dbg !39
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !40
  %253 = fmul float %248, %252, !dbg !41
  %254 = fadd float %61, %253, !dbg !42
  %255 = fadd float %65, %244, !dbg !43
  %256 = fmul float %248, %248, !dbg !44
  %257 = fmul float %69, %256, !dbg !45
  %258 = fmul float %257, %252, !dbg !46
  %259 = fadd float %255, %258, !dbg !47
  %260 = bitcast float %254 to i32, !dbg !31
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !31
  %262 = bitcast i32 %261 to float, !dbg !31
  %263 = bitcast float %259 to i32, !dbg !31
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !31
  %265 = bitcast i32 %264 to float, !dbg !31
  %266 = bitcast float %249 to i32, !dbg !31
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !31
  %268 = bitcast i32 %267 to float, !dbg !31
  %269 = fsub float %262, %254, !dbg !35
  %270 = fadd float %249, %268, !dbg !37
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !38
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #3, !dbg !39
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !40
  %274 = fmul float %269, %273, !dbg !41
  %275 = fadd float %254, %274, !dbg !42
  %276 = fadd float %259, %265, !dbg !43
  %277 = fmul float %269, %269, !dbg !44
  %278 = fmul float %249, %277, !dbg !45
  %279 = fmul float %273, %278, !dbg !46
  %280 = fadd float %276, %279, !dbg !47
  %281 = bitcast float %275 to i32, !dbg !31
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 4, i32 31), !dbg !31
  %283 = bitcast i32 %282 to float, !dbg !31
  %284 = bitcast float %280 to i32, !dbg !31
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !31
  %286 = bitcast i32 %285 to float, !dbg !31
  %287 = bitcast float %270 to i32, !dbg !31
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !31
  %289 = bitcast i32 %288 to float, !dbg !31
  %290 = fsub float %283, %275, !dbg !35
  %291 = fadd float %270, %289, !dbg !37
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !38
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #3, !dbg !39
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !40
  %295 = fmul float %290, %294, !dbg !41
  %296 = fadd float %275, %295, !dbg !42
  %297 = fadd float %280, %286, !dbg !43
  %298 = fmul float %290, %290, !dbg !44
  %299 = fmul float %270, %298, !dbg !45
  %300 = fmul float %294, %299, !dbg !46
  %301 = fadd float %297, %300, !dbg !47
  %302 = bitcast float %296 to i32, !dbg !31
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !31
  %304 = bitcast i32 %303 to float, !dbg !31
  %305 = bitcast float %301 to i32, !dbg !31
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !31
  %307 = bitcast i32 %306 to float, !dbg !31
  %308 = bitcast float %291 to i32, !dbg !31
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !31
  %310 = bitcast i32 %309 to float, !dbg !31
  %311 = fsub float %304, %296, !dbg !35
  %312 = fadd float %291, %310, !dbg !37
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !38
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #3, !dbg !39
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !40
  %316 = fmul float %311, %315, !dbg !41
  %317 = fadd float %296, %316, !dbg !42
  %318 = fadd float %301, %307, !dbg !43
  %319 = fmul float %311, %311, !dbg !44
  %320 = fmul float %291, %319, !dbg !45
  %321 = fmul float %315, %320, !dbg !46
  %322 = fadd float %318, %321, !dbg !47
  %323 = bitcast float %62 to i32, !dbg !31
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 16, i32 31), !dbg !31
  %325 = bitcast i32 %324 to float, !dbg !31
  %326 = bitcast float %66 to i32, !dbg !31
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 16, i32 31), !dbg !31
  %328 = bitcast i32 %327 to float, !dbg !31
  %329 = bitcast float %70 to i32, !dbg !31
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 16, i32 31), !dbg !31
  %331 = bitcast i32 %330 to float, !dbg !31
  %332 = fsub float %325, %62, !dbg !35
  %333 = fadd float %70, %331, !dbg !37
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !38
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #3, !dbg !39
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !40
  %337 = fmul float %332, %336, !dbg !41
  %338 = fadd float %62, %337, !dbg !42
  %339 = fadd float %66, %328, !dbg !43
  %340 = fmul float %332, %332, !dbg !44
  %341 = fmul float %70, %340, !dbg !45
  %342 = fmul float %341, %336, !dbg !46
  %343 = fadd float %339, %342, !dbg !47
  %344 = bitcast float %338 to i32, !dbg !31
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !31
  %346 = bitcast i32 %345 to float, !dbg !31
  %347 = bitcast float %343 to i32, !dbg !31
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 8, i32 31), !dbg !31
  %349 = bitcast i32 %348 to float, !dbg !31
  %350 = bitcast float %333 to i32, !dbg !31
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !31
  %352 = bitcast i32 %351 to float, !dbg !31
  %353 = fsub float %346, %338, !dbg !35
  %354 = fadd float %333, %352, !dbg !37
  %355 = fcmp oeq float %354, 0.000000e+00, !dbg !38
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %354) #3, !dbg !39
  %357 = select i1 %355, float 0.000000e+00, float %356, !dbg !40
  %358 = fmul float %353, %357, !dbg !41
  %359 = fadd float %338, %358, !dbg !42
  %360 = fadd float %343, %349, !dbg !43
  %361 = fmul float %353, %353, !dbg !44
  %362 = fmul float %333, %361, !dbg !45
  %363 = fmul float %357, %362, !dbg !46
  %364 = fadd float %360, %363, !dbg !47
  %365 = bitcast float %359 to i32, !dbg !31
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !31
  %367 = bitcast i32 %366 to float, !dbg !31
  %368 = bitcast float %364 to i32, !dbg !31
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 4, i32 31), !dbg !31
  %370 = bitcast i32 %369 to float, !dbg !31
  %371 = bitcast float %354 to i32, !dbg !31
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 4, i32 31), !dbg !31
  %373 = bitcast i32 %372 to float, !dbg !31
  %374 = fsub float %367, %359, !dbg !35
  %375 = fadd float %354, %373, !dbg !37
  %376 = fcmp oeq float %375, 0.000000e+00, !dbg !38
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %373, float %375) #3, !dbg !39
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !40
  %379 = fmul float %374, %378, !dbg !41
  %380 = fadd float %359, %379, !dbg !42
  %381 = fadd float %364, %370, !dbg !43
  %382 = fmul float %374, %374, !dbg !44
  %383 = fmul float %354, %382, !dbg !45
  %384 = fmul float %378, %383, !dbg !46
  %385 = fadd float %381, %384, !dbg !47
  %386 = bitcast float %380 to i32, !dbg !31
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 2, i32 31), !dbg !31
  %388 = bitcast i32 %387 to float, !dbg !31
  %389 = bitcast float %385 to i32, !dbg !31
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 2, i32 31), !dbg !31
  %391 = bitcast i32 %390 to float, !dbg !31
  %392 = bitcast float %375 to i32, !dbg !31
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 2, i32 31), !dbg !31
  %394 = bitcast i32 %393 to float, !dbg !31
  %395 = fsub float %388, %380, !dbg !35
  %396 = fadd float %375, %394, !dbg !37
  %397 = fcmp oeq float %396, 0.000000e+00, !dbg !38
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %396) #3, !dbg !39
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !40
  %400 = fmul float %395, %399, !dbg !41
  %401 = fadd float %380, %400, !dbg !42
  %402 = fadd float %385, %391, !dbg !43
  %403 = fmul float %395, %395, !dbg !44
  %404 = fmul float %375, %403, !dbg !45
  %405 = fmul float %399, %404, !dbg !46
  %406 = fadd float %402, %405, !dbg !47
  %407 = icmp samesign ult i32 %12, 2, !dbg !31
  %408 = and i32 %20, 3, !dbg !31
  %409 = shl nuw nsw i32 %14, 2, !dbg !31
  %410 = or disjoint i32 %409, %408, !dbg !31
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !31
  %412 = bitcast float %149 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 %407) #3, !dbg !31
  %413 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %410, !dbg !31
  %414 = bitcast float %154 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 %407) #3, !dbg !31
  %415 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %410, !dbg !31
  %416 = bitcast float %144 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %415, <1 x i32> %416, i1 %407) #3, !dbg !31
  %417 = or disjoint i32 %409, 4, !dbg !31
  %418 = or disjoint i32 %417, %408, !dbg !31
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !31
  %420 = bitcast float %233 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %420, i1 %407) #3, !dbg !31
  %421 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %418, !dbg !31
  %422 = bitcast float %238 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %421, <1 x i32> %422, i1 %407) #3, !dbg !31
  %423 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %418, !dbg !31
  %424 = bitcast float %228 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 %407) #3, !dbg !31
  %425 = or disjoint i32 %409, 8, !dbg !31
  %426 = or disjoint i32 %425, %408, !dbg !31
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !31
  %428 = bitcast float %317 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 %407) #3, !dbg !31
  %429 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %426, !dbg !31
  %430 = bitcast float %322 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 %407) #3, !dbg !31
  %431 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %426, !dbg !31
  %432 = bitcast float %312 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 %407) #3, !dbg !31
  %433 = or disjoint i32 %409, 12, !dbg !31
  %434 = or disjoint i32 %433, %408, !dbg !31
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i32 %434, !dbg !31
  %436 = bitcast float %401 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 %407) #3, !dbg !31
  %437 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %434, !dbg !31
  %438 = bitcast float %406 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 %407) #3, !dbg !31
  %439 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %434, !dbg !31
  %440 = bitcast float %396 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 %407) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %441 = icmp slt i32 %11, 32, !dbg !31
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %443 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %442, i1 %441) #3, !dbg !31
  %444 = bitcast i32 %443 to float, !dbg !31
  %445 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !31
  %446 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %445, i1 %441) #3, !dbg !31
  %447 = bitcast i32 %446 to float, !dbg !31
  %448 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %11, !dbg !31
  %449 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %448, i1 %441) #3, !dbg !31
  %450 = bitcast i32 %449 to float, !dbg !31
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 2, i32 31), !dbg !31
  %452 = bitcast i32 %451 to float, !dbg !31
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 2, i32 31), !dbg !31
  %454 = bitcast i32 %453 to float, !dbg !31
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 2, i32 31), !dbg !31
  %456 = bitcast i32 %455 to float, !dbg !31
  %457 = fsub float %452, %444, !dbg !35
  %458 = fadd float %450, %456, !dbg !37
  %459 = fcmp oeq float %458, 0.000000e+00, !dbg !38
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %456, float %458) #3, !dbg !39
  %461 = select i1 %459, float 0.000000e+00, float %460, !dbg !40
  %462 = fmul float %457, %461, !dbg !41
  %463 = fadd float %462, %444, !dbg !42
  %464 = fadd float %447, %454, !dbg !43
  %465 = fmul float %457, %457, !dbg !44
  %466 = fmul float %465, %450, !dbg !45
  %467 = fmul float %466, %461, !dbg !46
  %468 = fadd float %464, %467, !dbg !47
  %469 = bitcast float %463 to i32, !dbg !31
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !31
  %471 = bitcast i32 %470 to float, !dbg !31
  %472 = bitcast float %468 to i32, !dbg !31
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 1, i32 31), !dbg !31
  %474 = bitcast i32 %473 to float, !dbg !31
  %475 = bitcast float %458 to i32, !dbg !31
  %476 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %475, i32 1, i32 31), !dbg !31
  %477 = bitcast i32 %476 to float, !dbg !31
  %478 = fsub float %471, %463, !dbg !35
  %479 = fadd float %458, %477, !dbg !37
  %480 = fcmp oeq float %479, 0.000000e+00, !dbg !38
  %481 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %477, float %479) #3, !dbg !39
  %482 = select i1 %480, float 0.000000e+00, float %481, !dbg !40
  %483 = fmul float %478, %482, !dbg !41
  %484 = fadd float %463, %483, !dbg !42
  %485 = fadd float %468, %474, !dbg !43
  %486 = fmul float %478, %478, !dbg !44
  %487 = fmul float %458, %486, !dbg !45
  %488 = fmul float %482, %487, !dbg !46
  %489 = fadd float %485, %488, !dbg !47
  %490 = and i32 %11, 3, !dbg !31
  %491 = icmp eq i32 %490, 0, !dbg !31
  %492 = and i1 %441, %491, !dbg !31
  %493 = bitcast float %484 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %493, i1 %492) #3, !dbg !31
  %494 = bitcast float %489 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %494, i1 %492) #3, !dbg !31
  %495 = bitcast float %479 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %495, i1 %492) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %496 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !31
  %497 = load i32, ptr addrspace(3) %496, align 16, !dbg !31
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !31
  %499 = load i32, ptr addrspace(3) %498, align 16, !dbg !31
  %500 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !31
  %501 = load i32, ptr addrspace(3) %500, align 16, !dbg !31
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !31
  %503 = load i32, ptr addrspace(3) %502, align 16, !dbg !31
  %504 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %409, !dbg !31
  %505 = load i32, ptr addrspace(3) %504, align 16, !dbg !31
  %506 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %417, !dbg !31
  %507 = load i32, ptr addrspace(3) %506, align 16, !dbg !31
  %508 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %425, !dbg !31
  %509 = load i32, ptr addrspace(3) %508, align 16, !dbg !31
  %510 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %433, !dbg !31
  %511 = load i32, ptr addrspace(3) %510, align 16, !dbg !31
  %512 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %409, !dbg !31
  %513 = load i32, ptr addrspace(3) %512, align 16, !dbg !31
  %514 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %417, !dbg !31
  %515 = load i32, ptr addrspace(3) %514, align 16, !dbg !31
  %516 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %425, !dbg !31
  %517 = load i32, ptr addrspace(3) %516, align 16, !dbg !31
  %518 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %433, !dbg !31
  %519 = load i32, ptr addrspace(3) %518, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %520, i32 %497, i32 %499, i32 %501, i32 %503, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %522 = load i32, ptr addrspace(3) %521, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %520, i32 %505, i32 %507, i32 %509, i32 %511, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %523 = load i32, ptr addrspace(3) %521, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %520, i32 %513, i32 %515, i32 %517, i32 %519, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %524 = load i32, ptr addrspace(3) %521, align 4, !dbg !50
  %525 = sext i32 %17 to i64, !dbg !51
  %526 = getelementptr float, ptr addrspace(1) %3, i64 %525, !dbg !51
  %527 = lshr i32 %12, 3, !dbg !52
  %528 = shl nuw nsw i32 %408, 2, !dbg !52
  %529 = or disjoint i32 %528, %527, !dbg !52
  %530 = icmp eq i32 %529, 0, !dbg !52
  %531 = and i1 %530, %19, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %522, ptr addrspace(1) %526, i1 %531) #3, !dbg !52
  %532 = getelementptr float, ptr addrspace(1) %4, i64 %525, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %523, ptr addrspace(1) %532, i1 %531) #3, !dbg !54
  %533 = getelementptr float, ptr addrspace(1) %5, i64 %525, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %524, ptr addrspace(1) %533, i1 %531) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cks6boypizre33uqqbortgqkeipq4rl6h65dimahpooj2vrusj6d.py", directory: "inductor_cache/ks")
!4 = !{ptr @triton_per_fused_native_group_norm_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_11", linkageName: "triton_per_fused_native_group_norm_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 42, column: 67, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 43, column: 18, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 18, scope: !7)
!51 = !DILocation(line: 46, column: 25, scope: !7)
!52 = !DILocation(line: 46, column: 37, scope: !7)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 25, scope: !7)
!56 = !DILocation(line: 48, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 4, scope: !7)
