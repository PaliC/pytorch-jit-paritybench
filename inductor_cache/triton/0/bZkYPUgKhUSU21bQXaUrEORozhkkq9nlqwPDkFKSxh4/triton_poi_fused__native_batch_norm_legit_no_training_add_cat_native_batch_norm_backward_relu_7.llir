; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_native_batch_norm_backward_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 6, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 62, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 64, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 4, !dbg !15
  %22 = srem i32 %21, 4, !dbg !16
  %23 = mul i32 %21, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen9 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen9, 16, !dbg !18
  %25 = sext i32 %19 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #3, !dbg !22
  %30 = sext i32 %22 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %20) #3, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %20) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %20) #3, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !30
  %45 = icmp slt i32 %22, 2, !dbg !31
  %46 = mul i32 %24, 16, !dbg !32
  %srem.decomposed = sub i32 %.frozen9, %46, !dbg !32
  %47 = shl nsw i32 %24, 3, !dbg !33
  %48 = add nsw i32 %47, %srem.decomposed, !dbg !34
  %49 = sext i32 %48 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = and i1 %20, %45, !dbg !36
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !37
  %53 = icmp eq i32 %22, 2, !dbg !38
  %54 = shl nsw i32 %24, 2, !dbg !39
  %55 = add nsw i32 %54, %.decomposed, !dbg !40
  %56 = sext i32 %55 to i64, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !41
  %58 = and i1 %20, %53, !dbg !42
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !43
  %60 = icmp sgt i32 %22, 2, !dbg !44
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !45
  %62 = and i1 %20, %60, !dbg !46
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !47
  %64 = fadd float %36, 0x3EE4F8B580000000, !dbg !48
  %65 = fadd float %38, 0x3EE4F8B580000000, !dbg !48
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %66, 0, !dbg !49
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %67, 0, !dbg !49
  br i1 %.not.i, label %73, label %68, !dbg !49

68:                                               ; preds = %13
  br i1 %.not1.i, label %71, label %69, !dbg !49

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

73:                                               ; preds = %13
  br i1 %.not1.i, label %76, label %74, !dbg !49

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !49
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i4 = icmp eq i32 %78, 0, !dbg !49
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i7 = icmp eq i32 %79, 0, !dbg !49
  br i1 %.not.i4, label %85, label %80, !dbg !49

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %83, label %81, !dbg !49

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %88, label %86, !dbg !49

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !49
  br label %__nv_sqrtf.exit8, !dbg !49

__nv_sqrtf.exit8:                                 ; preds = %81, %83, %86, %88
  %.0.i6 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !49
  %90 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %91 = bitcast i32 %90 to float, !dbg !20
  %92 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %93 = bitcast i32 %92 to float, !dbg !22
  %94 = fadd float %91, %93, !dbg !50
  %95 = extractvalue { i32, i32 } %52, 1, !dbg !37
  %96 = extractvalue { i32, i32 } %59, 1, !dbg !43
  %97 = extractvalue { i32, i32 } %63, 1, !dbg !47
  %.v1 = select i1 %53, i32 %96, i32 %97, !dbg !51
  %.v3 = select i1 %45, i32 %95, i32 %.v1, !dbg !52
  %98 = bitcast i32 %.v3 to float, !dbg !52
  %99 = fadd float %94, %98, !dbg !53
  %100 = bitcast i32 %33 to float, !dbg !24
  %101 = fsub float %99, %100, !dbg !54
  %102 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %103 = bitcast i32 %102 to float, !dbg !20
  %104 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %105 = bitcast i32 %104 to float, !dbg !22
  %106 = fadd float %103, %105, !dbg !50
  %107 = extractvalue { i32, i32 } %52, 0, !dbg !37
  %108 = extractvalue { i32, i32 } %59, 0, !dbg !43
  %109 = extractvalue { i32, i32 } %63, 0, !dbg !47
  %.v = select i1 %53, i32 %108, i32 %109, !dbg !51
  %.v2 = select i1 %45, i32 %107, i32 %.v, !dbg !52
  %110 = bitcast i32 %.v2 to float, !dbg !52
  %111 = fadd float %106, %110, !dbg !53
  %112 = bitcast i32 %32 to float, !dbg !24
  %113 = fsub float %111, %112, !dbg !54
  %114 = bitcast i32 %44 to float, !dbg !30
  %115 = bitcast i32 %43 to float, !dbg !30
  %116 = bitcast i32 %41 to float, !dbg !28
  %117 = bitcast i32 %40 to float, !dbg !28
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !55
  %120 = fmul float %113, %118, !dbg !56
  %121 = fmul float %101, %119, !dbg !56
  %122 = fmul float %120, %117, !dbg !57
  %123 = fmul float %121, %116, !dbg !57
  %124 = fadd float %122, %115, !dbg !58
  %125 = fadd float %123, %114, !dbg !58
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !59
  %127 = fcmp olt float %125, 0.000000e+00, !dbg !59
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !63
  %129 = select i1 %127, float 0.000000e+00, float %125, !dbg !63
  %130 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !64
  %131 = bitcast float %111 to i32, !dbg !65
  %132 = bitcast float %99 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %20) #3, !dbg !65
  %133 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !66
  %134 = bitcast float %128 to i32, !dbg !67
  %135 = bitcast float %129 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 %20) #3, !dbg !67
  %136 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !68
  %137 = bitcast float %113 to i32, !dbg !69
  %138 = bitcast float %101 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %138, ptr addrspace(1) %136, i1 %20) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpy47qcn3blsf42sfrp3ko7nhpnquoyzg2iv234f2zhyeoui7y3f.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_native_batch_norm_backward_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_native_batch_norm_backward_relu_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_native_batch_norm_backward_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_native_batch_norm_backward_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 39, column: 46, scope: !7)
!34 = !DILocation(line: 39, column: 44, scope: !7)
!35 = !DILocation(line: 39, column: 30, scope: !7)
!36 = !DILocation(line: 39, column: 58, scope: !7)
!37 = !DILocation(line: 39, column: 51, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 38, scope: !7)
!40 = !DILocation(line: 44, column: 36, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 50, scope: !7)
!43 = !DILocation(line: 44, column: 43, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 51, scope: !7)
!47 = !DILocation(line: 48, column: 43, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 27, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 49, column: 34, scope: !7)
!52 = !DILocation(line: 50, column: 33, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 53, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 65, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 37, scope: !7)
!66 = !DILocation(line: 67, column: 25, scope: !7)
!67 = !DILocation(line: 67, column: 37, scope: !7)
!68 = !DILocation(line: 68, column: 25, scope: !7)
!69 = !DILocation(line: 68, column: 37, scope: !7)
!70 = !DILocation(line: 68, column: 4, scope: !7)
