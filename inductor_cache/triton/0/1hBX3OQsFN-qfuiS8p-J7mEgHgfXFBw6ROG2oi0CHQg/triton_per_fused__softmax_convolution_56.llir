; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_convolution_56(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 252, !dbg !11
  %12 = srem i32 %6, 4, !dbg !12
  %13 = shl i32 %6, 8, !dbg !13
  %14 = or disjoint i32 %13, %11, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = sext i32 %12 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %32 = bitcast i32 %31 to float, !dbg !18
  %33 = fadd float %22, %32, !dbg !19
  %34 = fadd float %23, %32, !dbg !19
  %35 = fadd float %24, %32, !dbg !19
  %36 = fadd float %25, %32, !dbg !19
  %37 = fcmp ogt float %33, %34, !dbg !20
  %38 = fcmp uno float %33, 0.000000e+00, !dbg !25
  %39 = or i1 %37, %38, !dbg !26
  %40 = select i1 %39, float %33, float %34, !dbg !27
  %41 = fcmp ogt float %40, %35, !dbg !20
  %42 = fcmp uno float %40, 0.000000e+00, !dbg !25
  %43 = or i1 %41, %42, !dbg !26
  %44 = select i1 %43, float %40, float %35, !dbg !27
  %45 = fcmp ogt float %44, %36, !dbg !20
  %46 = fcmp uno float %44, 0.000000e+00, !dbg !25
  %47 = or i1 %45, %46, !dbg !26
  %48 = select i1 %47, float %44, float %36, !dbg !27
  %49 = bitcast float %48 to i32, !dbg !28
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fcmp ogt float %48, %51, !dbg !20
  %53 = fcmp uno float %48, 0.000000e+00, !dbg !25
  %54 = or i1 %52, %53, !dbg !26
  %55 = select i1 %54, float %48, float %51, !dbg !27
  %56 = bitcast float %55 to i32, !dbg !28
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 8, i32 31), !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = fcmp ogt float %55, %58, !dbg !20
  %60 = fcmp uno float %55, 0.000000e+00, !dbg !25
  %61 = or i1 %59, %60, !dbg !26
  %62 = select i1 %61, float %55, float %58, !dbg !27
  %63 = bitcast float %62 to i32, !dbg !28
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = fcmp ogt float %62, %65, !dbg !20
  %67 = fcmp uno float %62, 0.000000e+00, !dbg !25
  %68 = or i1 %66, %67, !dbg !26
  %69 = select i1 %68, float %62, float %65, !dbg !27
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fcmp ogt float %69, %72, !dbg !20
  %74 = fcmp uno float %69, 0.000000e+00, !dbg !25
  %75 = or i1 %73, %74, !dbg !26
  %76 = select i1 %75, float %69, float %72, !dbg !27
  %77 = bitcast float %76 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fcmp ogt float %76, %79, !dbg !20
  %81 = fcmp uno float %76, 0.000000e+00, !dbg !25
  %82 = or i1 %80, %81, !dbg !26
  %83 = icmp eq i32 %8, 0, !dbg !28
  %84 = and i32 %9, 1, !dbg !28
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !28
  %86 = select i1 %82, i32 %77, i32 %78, !dbg !27
  %87 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %87, i1 %83) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = icmp slt i32 %7, 2, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !28
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #3, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fcmp ogt float %91, %93, !dbg !20
  %95 = fcmp uno float %91, 0.000000e+00, !dbg !25
  %96 = or i1 %95, %94, !dbg !26
  %97 = and i32 %7, 1, !dbg !28
  %98 = icmp eq i32 %97, 0, !dbg !28
  %99 = and i1 %88, %98, !dbg !28
  %100 = select i1 %96, i32 %90, i32 %92, !dbg !27
  %101 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %101, i1 %99) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %103 = fadd float %102, 0.000000e+00, !dbg !29
  %104 = fsub float %33, %103, !dbg !31
  %105 = fsub float %34, %103, !dbg !31
  %106 = fsub float %35, %103, !dbg !31
  %107 = fsub float %36, %103, !dbg !31
  %108 = fmul float %104, 0x3FF7154760000000, !dbg !32
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #3, !dbg !32
  %110 = fmul float %105, 0x3FF7154760000000, !dbg !32
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #3, !dbg !32
  %112 = fmul float %106, 0x3FF7154760000000, !dbg !32
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #3, !dbg !32
  %114 = fmul float %107, 0x3FF7154760000000, !dbg !32
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %116 = fadd float %109, %111, !dbg !37
  %117 = fadd float %116, %113, !dbg !37
  %118 = fadd float %117, %115, !dbg !37
  %119 = bitcast float %118 to i32, !dbg !33
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = fadd float %118, %121, !dbg !37
  %123 = bitcast float %122 to i32, !dbg !33
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !33
  %125 = bitcast i32 %124 to float, !dbg !33
  %126 = fadd float %122, %125, !dbg !37
  %127 = bitcast float %126 to i32, !dbg !33
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !33
  %129 = bitcast i32 %128 to float, !dbg !33
  %130 = fadd float %126, %129, !dbg !37
  %131 = bitcast float %130 to i32, !dbg !33
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !33
  %133 = bitcast i32 %132 to float, !dbg !33
  %134 = fadd float %130, %133, !dbg !37
  %135 = bitcast float %134 to i32, !dbg !33
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !33
  %137 = bitcast i32 %136 to float, !dbg !33
  %138 = fadd float %134, %137, !dbg !37
  %139 = bitcast float %138 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %139, i1 %83) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %140 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #3, !dbg !33
  %141 = bitcast i32 %140 to float, !dbg !33
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !33
  %143 = bitcast i32 %142 to float, !dbg !33
  %144 = fadd float %141, %143, !dbg !37
  %145 = bitcast float %144 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %145, i1 %99) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %146 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %147 = fadd float %146, 0.000000e+00, !dbg !39
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %147) #3, !dbg !41
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %147) #3, !dbg !41
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %147) #3, !dbg !41
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %147) #3, !dbg !41
  %152 = bitcast float %33 to i32, !dbg !42
  %153 = bitcast float %34 to i32, !dbg !42
  %154 = bitcast float %35 to i32, !dbg !42
  %155 = bitcast float %36 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %16, i1 true) #3, !dbg !42
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !43
  %157 = bitcast float %148 to i32, !dbg !44
  %158 = bitcast float %149 to i32, !dbg !44
  %159 = bitcast float %150 to i32, !dbg !44
  %160 = bitcast float %151 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %157, i32 %158, i32 %159, i32 %160, ptr addrspace(1) %156, i1 true) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cczea36a6msoqgwe4n754imz2a72iuhtsxefbfkwehw5ycrg66mi.py", directory: "inductor_cache/cz")
!4 = !{ptr @triton_per_fused__softmax_convolution_56, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_convolution_56, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_convolution_56", linkageName: "triton_per_fused__softmax_convolution_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 18, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 39, column: 70, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !21, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !21, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !24)
!28 = !DILocation(line: 131, column: 29, scope: !23, inlinedAt: !24)
!29 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 24, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 44, column: 59, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !36)
!38 = distinct !DILexicalBlockFile(scope: !34, file: !35, discriminator: 0)
!39 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !40)
!40 = !DILocation(line: 44, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 48, scope: !7)
!43 = !DILocation(line: 47, column: 25, scope: !7)
!44 = !DILocation(line: 47, column: 46, scope: !7)
!45 = !DILocation(line: 47, column: 4, scope: !7)
