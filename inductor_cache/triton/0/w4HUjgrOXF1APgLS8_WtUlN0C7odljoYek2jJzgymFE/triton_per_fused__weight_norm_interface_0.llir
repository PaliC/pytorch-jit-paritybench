; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = or disjoint i32 %11, 64, !dbg !12
  %16 = or disjoint i32 %11, 80, !dbg !12
  %17 = or disjoint i32 %11, 96, !dbg !12
  %18 = or disjoint i32 %11, 112, !dbg !12
  %19 = and i32 %9, 15, !dbg !12
  %20 = and i32 %9, 127, !dbg !12
  %21 = or disjoint i32 %8, %11, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = icmp slt i32 %21, 128, !dbg !14
  %30 = icmp slt i32 %22, 128, !dbg !14
  %31 = icmp slt i32 %23, 128, !dbg !14
  %32 = icmp slt i32 %24, 128, !dbg !14
  %33 = icmp slt i32 %25, 128, !dbg !14
  %34 = icmp slt i32 %26, 128, !dbg !14
  %35 = icmp slt i32 %27, 128, !dbg !14
  %36 = icmp slt i32 %28, 128, !dbg !14
  %37 = icmp ne i32 %19, 15, !dbg !15
  %38 = mul i32 %21, 15, !dbg !16
  %39 = mul i32 %22, 15, !dbg !16
  %40 = mul i32 %23, 15, !dbg !16
  %41 = mul i32 %24, 15, !dbg !16
  %42 = mul i32 %25, 15, !dbg !16
  %43 = mul i32 %26, 15, !dbg !16
  %44 = mul i32 %27, 15, !dbg !16
  %45 = mul i32 %28, 15, !dbg !16
  %46 = add i32 %38, %19, !dbg !17
  %47 = add i32 %39, %19, !dbg !17
  %48 = add i32 %40, %19, !dbg !17
  %49 = add i32 %41, %19, !dbg !17
  %50 = add i32 %42, %19, !dbg !17
  %51 = add i32 %43, %19, !dbg !17
  %52 = add i32 %44, %19, !dbg !17
  %53 = add i32 %45, %19, !dbg !17
  %54 = sext i32 %46 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !18
  %56 = sext i32 %47 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !18
  %58 = sext i32 %48 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !18
  %60 = sext i32 %49 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !18
  %62 = sext i32 %50 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !18
  %64 = sext i32 %51 to i64, !dbg !18
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !18
  %66 = sext i32 %52 to i64, !dbg !18
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !18
  %68 = sext i32 %53 to i64, !dbg !18
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !18
  %70 = and i1 %37, %29, !dbg !19
  %71 = and i1 %37, %30, !dbg !19
  %72 = and i1 %37, %31, !dbg !19
  %73 = and i1 %37, %32, !dbg !19
  %74 = and i1 %37, %33, !dbg !19
  %75 = and i1 %37, %34, !dbg !19
  %76 = and i1 %37, %35, !dbg !19
  %77 = and i1 %37, %36, !dbg !19
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %70, i32 0, i1 %70) #5, !dbg !20
  %79 = bitcast i32 %78 to float, !dbg !20
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %71, i32 0, i1 %71) #5, !dbg !20
  %81 = bitcast i32 %80 to float, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %72, i32 0, i1 %72) #5, !dbg !20
  %83 = bitcast i32 %82 to float, !dbg !20
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %73, i32 0, i1 %73) #5, !dbg !20
  %85 = bitcast i32 %84 to float, !dbg !20
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %74, i32 0, i1 %74) #5, !dbg !20
  %87 = bitcast i32 %86 to float, !dbg !20
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %75, i32 0, i1 %75) #5, !dbg !20
  %89 = bitcast i32 %88 to float, !dbg !20
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %76, i32 0, i1 %76) #5, !dbg !20
  %91 = bitcast i32 %90 to float, !dbg !20
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %77, i32 0, i1 %77) #5, !dbg !20
  %93 = bitcast i32 %92 to float, !dbg !20
  %94 = sext i32 %21 to i64, !dbg !21
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !21
  %96 = sext i32 %22 to i64, !dbg !21
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !21
  %98 = sext i32 %23 to i64, !dbg !21
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !21
  %100 = sext i32 %24 to i64, !dbg !21
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !21
  %102 = sext i32 %25 to i64, !dbg !21
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !21
  %104 = sext i32 %26 to i64, !dbg !21
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !21
  %106 = sext i32 %27 to i64, !dbg !21
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !21
  %108 = sext i32 %28 to i64, !dbg !21
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !21
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %29) #5, !dbg !22
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %30) #5, !dbg !22
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #5, !dbg !22
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %32) #5, !dbg !22
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %33) #5, !dbg !22
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %34) #5, !dbg !22
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %35) #5, !dbg !22
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %36) #5, !dbg !22
  %118 = fmul float %79, %79, !dbg !23
  %119 = fmul float %81, %81, !dbg !23
  %120 = fmul float %83, %83, !dbg !23
  %121 = fmul float %85, %85, !dbg !23
  %122 = fmul float %87, %87, !dbg !23
  %123 = fmul float %89, %89, !dbg !23
  %124 = fmul float %91, %91, !dbg !23
  %125 = fmul float %93, %93, !dbg !23
  %126 = select i1 %70, float %118, float 0.000000e+00, !dbg !24
  %127 = select i1 %71, float %119, float 0.000000e+00, !dbg !24
  %128 = select i1 %72, float %120, float 0.000000e+00, !dbg !24
  %129 = select i1 %73, float %121, float 0.000000e+00, !dbg !24
  %130 = select i1 %74, float %122, float 0.000000e+00, !dbg !24
  %131 = select i1 %75, float %123, float 0.000000e+00, !dbg !24
  %132 = select i1 %76, float %124, float 0.000000e+00, !dbg !24
  %133 = select i1 %77, float %125, float 0.000000e+00, !dbg !24
  %134 = bitcast float %126 to i32, !dbg !25
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = fadd float %126, %136, !dbg !29
  %138 = bitcast float %137 to i32, !dbg !25
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !25
  %140 = bitcast i32 %139 to float, !dbg !25
  %141 = fadd float %137, %140, !dbg !29
  %142 = bitcast float %141 to i32, !dbg !25
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !25
  %144 = bitcast i32 %143 to float, !dbg !25
  %145 = fadd float %141, %144, !dbg !29
  %146 = bitcast float %145 to i32, !dbg !25
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !25
  %148 = bitcast i32 %147 to float, !dbg !25
  %149 = fadd float %145, %148, !dbg !29
  %150 = bitcast float %127 to i32, !dbg !25
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 8, i32 31), !dbg !25
  %152 = bitcast i32 %151 to float, !dbg !25
  %153 = fadd float %127, %152, !dbg !29
  %154 = bitcast float %153 to i32, !dbg !25
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 4, i32 31), !dbg !25
  %156 = bitcast i32 %155 to float, !dbg !25
  %157 = fadd float %153, %156, !dbg !29
  %158 = bitcast float %157 to i32, !dbg !25
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 2, i32 31), !dbg !25
  %160 = bitcast i32 %159 to float, !dbg !25
  %161 = fadd float %157, %160, !dbg !29
  %162 = bitcast float %161 to i32, !dbg !25
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !25
  %164 = bitcast i32 %163 to float, !dbg !25
  %165 = fadd float %161, %164, !dbg !29
  %166 = bitcast float %128 to i32, !dbg !25
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 8, i32 31), !dbg !25
  %168 = bitcast i32 %167 to float, !dbg !25
  %169 = fadd float %128, %168, !dbg !29
  %170 = bitcast float %169 to i32, !dbg !25
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !25
  %172 = bitcast i32 %171 to float, !dbg !25
  %173 = fadd float %169, %172, !dbg !29
  %174 = bitcast float %173 to i32, !dbg !25
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !25
  %176 = bitcast i32 %175 to float, !dbg !25
  %177 = fadd float %173, %176, !dbg !29
  %178 = bitcast float %177 to i32, !dbg !25
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !25
  %180 = bitcast i32 %179 to float, !dbg !25
  %181 = fadd float %177, %180, !dbg !29
  %182 = bitcast float %129 to i32, !dbg !25
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 8, i32 31), !dbg !25
  %184 = bitcast i32 %183 to float, !dbg !25
  %185 = fadd float %129, %184, !dbg !29
  %186 = bitcast float %185 to i32, !dbg !25
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !25
  %188 = bitcast i32 %187 to float, !dbg !25
  %189 = fadd float %185, %188, !dbg !29
  %190 = bitcast float %189 to i32, !dbg !25
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !25
  %192 = bitcast i32 %191 to float, !dbg !25
  %193 = fadd float %189, %192, !dbg !29
  %194 = bitcast float %193 to i32, !dbg !25
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 1, i32 31), !dbg !25
  %196 = bitcast i32 %195 to float, !dbg !25
  %197 = fadd float %193, %196, !dbg !29
  %198 = bitcast float %130 to i32, !dbg !25
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 8, i32 31), !dbg !25
  %200 = bitcast i32 %199 to float, !dbg !25
  %201 = fadd float %130, %200, !dbg !29
  %202 = bitcast float %201 to i32, !dbg !25
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 4, i32 31), !dbg !25
  %204 = bitcast i32 %203 to float, !dbg !25
  %205 = fadd float %201, %204, !dbg !29
  %206 = bitcast float %205 to i32, !dbg !25
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !25
  %208 = bitcast i32 %207 to float, !dbg !25
  %209 = fadd float %205, %208, !dbg !29
  %210 = bitcast float %209 to i32, !dbg !25
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 1, i32 31), !dbg !25
  %212 = bitcast i32 %211 to float, !dbg !25
  %213 = fadd float %209, %212, !dbg !29
  %214 = bitcast float %131 to i32, !dbg !25
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !25
  %216 = bitcast i32 %215 to float, !dbg !25
  %217 = fadd float %131, %216, !dbg !29
  %218 = bitcast float %217 to i32, !dbg !25
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !25
  %220 = bitcast i32 %219 to float, !dbg !25
  %221 = fadd float %217, %220, !dbg !29
  %222 = bitcast float %221 to i32, !dbg !25
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !25
  %224 = bitcast i32 %223 to float, !dbg !25
  %225 = fadd float %221, %224, !dbg !29
  %226 = bitcast float %225 to i32, !dbg !25
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !25
  %228 = bitcast i32 %227 to float, !dbg !25
  %229 = fadd float %225, %228, !dbg !29
  %230 = bitcast float %132 to i32, !dbg !25
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !25
  %232 = bitcast i32 %231 to float, !dbg !25
  %233 = fadd float %132, %232, !dbg !29
  %234 = bitcast float %233 to i32, !dbg !25
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !25
  %236 = bitcast i32 %235 to float, !dbg !25
  %237 = fadd float %233, %236, !dbg !29
  %238 = bitcast float %237 to i32, !dbg !25
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !25
  %240 = bitcast i32 %239 to float, !dbg !25
  %241 = fadd float %237, %240, !dbg !29
  %242 = bitcast float %241 to i32, !dbg !25
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !25
  %244 = bitcast i32 %243 to float, !dbg !25
  %245 = fadd float %241, %244, !dbg !29
  %246 = bitcast float %133 to i32, !dbg !25
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !25
  %248 = bitcast i32 %247 to float, !dbg !25
  %249 = fadd float %133, %248, !dbg !29
  %250 = bitcast float %249 to i32, !dbg !25
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 4, i32 31), !dbg !25
  %252 = bitcast i32 %251 to float, !dbg !25
  %253 = fadd float %249, %252, !dbg !29
  %254 = bitcast float %253 to i32, !dbg !25
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 2, i32 31), !dbg !25
  %256 = bitcast i32 %255 to float, !dbg !25
  %257 = fadd float %253, %256, !dbg !29
  %258 = bitcast float %257 to i32, !dbg !25
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !25
  %260 = bitcast i32 %259 to float, !dbg !25
  %261 = fadd float %257, %260, !dbg !29
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %263 = bitcast float %149 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #5, !dbg !31
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %265 = bitcast float %165 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #5, !dbg !31
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %267 = bitcast float %181 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #5, !dbg !31
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %269 = bitcast float %197 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #5, !dbg !31
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %271 = bitcast float %213 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #5, !dbg !31
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !31
  %273 = bitcast float %229 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #5, !dbg !31
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !31
  %275 = bitcast float %245 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #5, !dbg !31
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !31
  %277 = bitcast float %261 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !31
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !31
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %280, 0, !dbg !31
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %281, 0, !dbg !31
  br i1 %.not.i, label %287, label %282, !dbg !31

282:                                              ; preds = %6
  br i1 %.not1.i, label %285, label %283, !dbg !31

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

287:                                              ; preds = %6
  br i1 %.not1.i, label %290, label %288, !dbg !31

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %283, %285, %288, %290
  %.0.i = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !31
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i2 = icmp eq i32 %292, 0, !dbg !31
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i5 = icmp eq i32 %293, 0, !dbg !31
  br i1 %.not.i2, label %299, label %294, !dbg !31

294:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %297, label %295, !dbg !31

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

299:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %302, label %300, !dbg !31

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %295, %297, %300, %302
  %.0.i4 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !31
  %304 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i7 = icmp eq i32 %304, 0, !dbg !31
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i10 = icmp eq i32 %305, 0, !dbg !31
  br i1 %.not.i7, label %311, label %306, !dbg !31

306:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %309, label %307, !dbg !31

307:                                              ; preds = %306
  %308 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

309:                                              ; preds = %306
  %310 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

311:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %314, label %312, !dbg !31

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

__nv_sqrtf.exit11:                                ; preds = %307, %309, %312, %314
  %.0.i9 = phi float [ %308, %307 ], [ %310, %309 ], [ %313, %312 ], [ %315, %314 ], !dbg !31
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i12 = icmp eq i32 %316, 0, !dbg !31
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i15 = icmp eq i32 %317, 0, !dbg !31
  br i1 %.not.i12, label %323, label %318, !dbg !31

318:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %321, label %319, !dbg !31

319:                                              ; preds = %318
  %320 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %181) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

321:                                              ; preds = %318
  %322 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %181) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

323:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %326, label %324, !dbg !31

324:                                              ; preds = %323
  %325 = tail call float @llvm.nvvm.sqrt.rn.f(float %181) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

326:                                              ; preds = %323
  %327 = tail call float @llvm.nvvm.sqrt.approx.f(float %181) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

__nv_sqrtf.exit16:                                ; preds = %319, %321, %324, %326
  %.0.i14 = phi float [ %320, %319 ], [ %322, %321 ], [ %325, %324 ], [ %327, %326 ], !dbg !31
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i17 = icmp eq i32 %328, 0, !dbg !31
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i20 = icmp eq i32 %329, 0, !dbg !31
  br i1 %.not.i17, label %335, label %330, !dbg !31

330:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %333, label %331, !dbg !31

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %197) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %197) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

335:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %338, label %336, !dbg !31

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %197) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %197) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

__nv_sqrtf.exit21:                                ; preds = %331, %333, %336, %338
  %.0.i19 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !31
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i22 = icmp eq i32 %340, 0, !dbg !31
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i25 = icmp eq i32 %341, 0, !dbg !31
  br i1 %.not.i22, label %347, label %342, !dbg !31

342:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %345, label %343, !dbg !31

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

347:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %350, label %348, !dbg !31

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

__nv_sqrtf.exit26:                                ; preds = %343, %345, %348, %350
  %.0.i24 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !31
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i27 = icmp eq i32 %352, 0, !dbg !31
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i30 = icmp eq i32 %353, 0, !dbg !31
  br i1 %.not.i27, label %359, label %354, !dbg !31

354:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %357, label %355, !dbg !31

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %229) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %229) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

359:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %362, label %360, !dbg !31

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %229) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %229) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

__nv_sqrtf.exit31:                                ; preds = %355, %357, %360, %362
  %.0.i29 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !31
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i32 = icmp eq i32 %364, 0, !dbg !31
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i35 = icmp eq i32 %365, 0, !dbg !31
  br i1 %.not.i32, label %371, label %366, !dbg !31

366:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %369, label %367, !dbg !31

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %245) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %245) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

371:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %374, label %372, !dbg !31

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.f(float %245) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.f(float %245) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

__nv_sqrtf.exit36:                                ; preds = %367, %369, %372, %374
  %.0.i34 = phi float [ %368, %367 ], [ %370, %369 ], [ %373, %372 ], [ %375, %374 ], !dbg !31
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i37 = icmp eq i32 %376, 0, !dbg !31
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i40 = icmp eq i32 %377, 0, !dbg !31
  br i1 %.not.i37, label %383, label %378, !dbg !31

378:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %381, label %379, !dbg !31

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

383:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %386, label %384, !dbg !31

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

__nv_sqrtf.exit41:                                ; preds = %379, %381, %384, %386
  %.0.i39 = phi float [ %380, %379 ], [ %382, %381 ], [ %385, %384 ], [ %387, %386 ], !dbg !31
  %388 = bitcast i32 %117 to float, !dbg !22
  %389 = bitcast i32 %116 to float, !dbg !22
  %390 = bitcast i32 %115 to float, !dbg !22
  %391 = bitcast i32 %114 to float, !dbg !22
  %392 = bitcast i32 %113 to float, !dbg !22
  %393 = bitcast i32 %112 to float, !dbg !22
  %394 = bitcast i32 %111 to float, !dbg !22
  %395 = bitcast i32 %110 to float, !dbg !22
  %396 = or disjoint i32 %8, %20, !dbg !13
  %397 = icmp slt i32 %396, 128, !dbg !14
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %.0.i4) #5, !dbg !32
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %.0.i9) #5, !dbg !32
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %.0.i14) #5, !dbg !32
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float %.0.i19) #5, !dbg !32
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %.0.i24) #5, !dbg !32
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float %.0.i29) #5, !dbg !32
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %.0.i34) #5, !dbg !32
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float %.0.i39) #5, !dbg !32
  %406 = fmul float %398, %79, !dbg !33
  %407 = fmul float %399, %81, !dbg !33
  %408 = fmul float %400, %83, !dbg !33
  %409 = fmul float %401, %85, !dbg !33
  %410 = fmul float %402, %87, !dbg !33
  %411 = fmul float %403, %89, !dbg !33
  %412 = fmul float %404, %91, !dbg !33
  %413 = fmul float %405, %93, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %414 = sext i32 %396 to i64, !dbg !35
  %415 = getelementptr float, ptr addrspace(1) %0, i64 %414, !dbg !35
  %416 = and i32 %9, 128, !dbg !36
  %417 = icmp eq i32 %416, 0, !dbg !36
  %418 = bitcast float %.0.i to i32, !dbg !36
  %419 = and i1 %417, %397, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %418, ptr addrspace(1) %415, i1 %419) #5, !dbg !36
  %420 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !37
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !37
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !37
  %423 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !37
  %424 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %425 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !37
  %426 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !37
  %427 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !37
  %428 = bitcast float %406 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %420, i1 %70) #5, !dbg !38
  %429 = bitcast float %407 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %421, i1 %71) #5, !dbg !38
  %430 = bitcast float %408 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %422, i1 %72) #5, !dbg !38
  %431 = bitcast float %409 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %423, i1 %73) #5, !dbg !38
  %432 = bitcast float %410 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %424, i1 %74) #5, !dbg !38
  %433 = bitcast float %411 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %425, i1 %75) #5, !dbg !38
  %434 = bitcast float %412 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %426, i1 %76) #5, !dbg !38
  %435 = bitcast float %413 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %427, i1 %77) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3z234fjtvgi6rocfmtfzhkseczfncbhgeh7qky3evfj2pin7gh.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
