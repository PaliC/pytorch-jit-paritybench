; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 16, !dbg !14
  %20 = srem i32 %19, 256, !dbg !15
  %21 = mul i32 %19, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %.frozen6 = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen6, 4096, !dbg !17
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %41 = icmp slt i32 %20, 64, !dbg !28
  %42 = mul i32 %22, 4096, !dbg !29
  %srem.decomposed = sub i32 %.frozen6, %42, !dbg !29
  %43 = shl nsw i32 %22, 10, !dbg !30
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !31
  %45 = sext i32 %44 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %48 = and i32 %20, -64, !dbg !34
  %49 = icmp eq i32 %48, 64, !dbg !34
  %50 = shl nsw i32 %20, 4, !dbg !35
  %51 = add nsw i32 %43, %.decomposed, !dbg !35
  %52 = add nsw i32 %51, -1024, !dbg !36
  %53 = add nsw i32 %52, %50, !dbg !37
  %54 = sext i32 %53 to i64, !dbg !38
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !38
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %55, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !40
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !41
  %59 = icmp eq i32 %48, 128, !dbg !42
  %60 = add nsw i32 %51, -2048, !dbg !43
  %61 = add nsw i32 %60, %50, !dbg !44
  %62 = sext i32 %61 to i64, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !45
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !46
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !47
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !49
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #3, !dbg !50
  %69 = icmp sgt i32 %20, 191, !dbg !51
  %70 = add nsw i32 %51, -3072, !dbg !52
  %71 = add nsw i32 %70, %50, !dbg !53
  %72 = sext i32 %71 to i64, !dbg !54
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !54
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !55
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !56
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !57
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !58
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !59
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !60
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #3, !dbg !61
  %81 = fadd float %29, 0x3EE4F8B580000000, !dbg !62
  %82 = fadd float %31, 0x3EE4F8B580000000, !dbg !62
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i = icmp eq i32 %83, 0, !dbg !63
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i = icmp eq i32 %84, 0, !dbg !63
  br i1 %.not.i, label %90, label %85, !dbg !63

85:                                               ; preds = %12
  br i1 %.not1.i, label %88, label %86, !dbg !63

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

90:                                               ; preds = %12
  br i1 %.not1.i, label %93, label %91, !dbg !63

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !63
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i1 = icmp eq i32 %95, 0, !dbg !63
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i4 = icmp eq i32 %96, 0, !dbg !63
  br i1 %.not.i1, label %102, label %97, !dbg !63

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %100, label %98, !dbg !63

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !63
  br label %__nv_sqrtf.exit5, !dbg !63

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !63
  br label %__nv_sqrtf.exit5, !dbg !63

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !63

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !63
  br label %__nv_sqrtf.exit5, !dbg !63

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !63
  br label %__nv_sqrtf.exit5, !dbg !63

__nv_sqrtf.exit5:                                 ; preds = %98, %100, %103, %105
  %.0.i3 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !63
  %107 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = extractvalue { i32, i32 } %56, 1, !dbg !39
  %110 = bitcast i32 %109 to float, !dbg !39
  %111 = extractvalue { i32, i32 } %58, 1, !dbg !41
  %112 = bitcast i32 %111 to float, !dbg !41
  %113 = fadd float %110, %112, !dbg !64
  %114 = extractvalue { i32, i32 } %66, 1, !dbg !48
  %115 = bitcast i32 %114 to float, !dbg !48
  %116 = extractvalue { i32, i32 } %68, 1, !dbg !50
  %117 = bitcast i32 %116 to float, !dbg !50
  %118 = fadd float %115, %117, !dbg !65
  %119 = extractvalue { i32, i32 } %64, 1, !dbg !46
  %120 = bitcast i32 %119 to float, !dbg !46
  %121 = fadd float %118, %120, !dbg !66
  %122 = extractvalue { i32, i32 } %78, 1, !dbg !59
  %123 = bitcast i32 %122 to float, !dbg !59
  %124 = extractvalue { i32, i32 } %80, 1, !dbg !61
  %125 = bitcast i32 %124 to float, !dbg !61
  %126 = fadd float %123, %125, !dbg !67
  %127 = extractvalue { i32, i32 } %76, 1, !dbg !57
  %128 = bitcast i32 %127 to float, !dbg !57
  %129 = fadd float %126, %128, !dbg !68
  %130 = extractvalue { i32, i32 } %74, 1, !dbg !55
  %131 = bitcast i32 %130 to float, !dbg !55
  %132 = fadd float %129, %131, !dbg !69
  %133 = select i1 %69, float %132, float 0.000000e+00, !dbg !70
  %134 = select i1 %59, float %121, float %133, !dbg !71
  %135 = select i1 %49, float %113, float %134, !dbg !71
  %136 = select i1 %41, float %108, float %135, !dbg !72
  %137 = bitcast i32 %26 to float, !dbg !19
  %138 = fsub float %136, %137, !dbg !73
  %139 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %140 = bitcast i32 %139 to float, !dbg !33
  %141 = extractvalue { i32, i32 } %56, 0, !dbg !39
  %142 = bitcast i32 %141 to float, !dbg !39
  %143 = extractvalue { i32, i32 } %58, 0, !dbg !41
  %144 = bitcast i32 %143 to float, !dbg !41
  %145 = fadd float %142, %144, !dbg !64
  %146 = extractvalue { i32, i32 } %66, 0, !dbg !48
  %147 = bitcast i32 %146 to float, !dbg !48
  %148 = extractvalue { i32, i32 } %68, 0, !dbg !50
  %149 = bitcast i32 %148 to float, !dbg !50
  %150 = fadd float %147, %149, !dbg !65
  %151 = extractvalue { i32, i32 } %64, 0, !dbg !46
  %152 = bitcast i32 %151 to float, !dbg !46
  %153 = fadd float %150, %152, !dbg !66
  %154 = extractvalue { i32, i32 } %78, 0, !dbg !59
  %155 = bitcast i32 %154 to float, !dbg !59
  %156 = extractvalue { i32, i32 } %80, 0, !dbg !61
  %157 = bitcast i32 %156 to float, !dbg !61
  %158 = fadd float %155, %157, !dbg !67
  %159 = extractvalue { i32, i32 } %76, 0, !dbg !57
  %160 = bitcast i32 %159 to float, !dbg !57
  %161 = fadd float %158, %160, !dbg !68
  %162 = extractvalue { i32, i32 } %74, 0, !dbg !55
  %163 = bitcast i32 %162 to float, !dbg !55
  %164 = fadd float %161, %163, !dbg !69
  %165 = select i1 %69, float %164, float 0.000000e+00, !dbg !70
  %166 = select i1 %59, float %153, float %165, !dbg !71
  %167 = select i1 %49, float %145, float %166, !dbg !71
  %168 = select i1 %41, float %140, float %167, !dbg !72
  %169 = bitcast i32 %25 to float, !dbg !19
  %170 = fsub float %168, %169, !dbg !73
  %171 = bitcast i32 %40 to float, !dbg !27
  %172 = bitcast i32 %39 to float, !dbg !27
  %173 = bitcast i32 %37 to float, !dbg !25
  %174 = bitcast i32 %36 to float, !dbg !25
  %175 = bitcast i32 %34 to float, !dbg !23
  %176 = bitcast i32 %33 to float, !dbg !23
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !74
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !74
  %179 = fmul float %170, %177, !dbg !75
  %180 = fmul float %138, %178, !dbg !75
  %181 = fmul float %179, %176, !dbg !76
  %182 = fmul float %180, %175, !dbg !76
  %183 = fadd float %181, %174, !dbg !77
  %184 = fadd float %182, %173, !dbg !77
  %185 = fcmp ogt float %183, 0.000000e+00, !dbg !78
  %186 = fcmp ogt float %184, 0.000000e+00, !dbg !78
  %187 = fmul float %183, %172, !dbg !79
  %188 = fmul float %184, %171, !dbg !79
  %189 = select i1 %185, float %183, float %187, !dbg !80
  %190 = select i1 %186, float %184, float %188, !dbg !80
  %191 = sext i32 %18 to i64, !dbg !81
  %192 = getelementptr float, ptr addrspace(1) %10, i64 %191, !dbg !81
  %193 = bitcast float %168 to i32, !dbg !82
  %194 = bitcast float %136 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %193, i32 %194, ptr addrspace(1) %192, i1 true) #3, !dbg !82
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !83
  %196 = bitcast float %189 to i32, !dbg !84
  %197 = bitcast float %190 to i32, !dbg !84
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %196, i32 %197, ptr addrspace(1) %195, i1 true) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4vpulik6z4ubinybgxt7lhdijs2lxfd2botbhgd3ewlv6eeupc2.py", directory: "inductor_cache/4v")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 50, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 38, column: 30, scope: !7)
!33 = !DILocation(line: 38, column: 55, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 40, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 43, column: 54, scope: !7)
!38 = !DILocation(line: 43, column: 31, scope: !7)
!39 = !DILocation(line: 43, column: 64, scope: !7)
!40 = !DILocation(line: 44, column: 31, scope: !7)
!41 = !DILocation(line: 44, column: 64, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 36, scope: !7)
!44 = !DILocation(line: 52, column: 55, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 65, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 65, scope: !7)
!49 = !DILocation(line: 54, column: 31, scope: !7)
!50 = !DILocation(line: 54, column: 65, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 36, scope: !7)
!53 = !DILocation(line: 62, column: 55, scope: !7)
!54 = !DILocation(line: 62, column: 31, scope: !7)
!55 = !DILocation(line: 62, column: 65, scope: !7)
!56 = !DILocation(line: 63, column: 31, scope: !7)
!57 = !DILocation(line: 63, column: 65, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 65, scope: !7)
!60 = !DILocation(line: 65, column: 31, scope: !7)
!61 = !DILocation(line: 65, column: 65, scope: !7)
!62 = !DILocation(line: 76, column: 20, scope: !7)
!63 = !DILocation(line: 77, column: 27, scope: !7)
!64 = !DILocation(line: 45, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 56, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 20, scope: !7)
!69 = !DILocation(line: 68, column: 20, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 0, scope: !7)
!72 = !DILocation(line: 73, column: 33, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 20, scope: !7)
!79 = !DILocation(line: 87, column: 20, scope: !7)
!80 = !DILocation(line: 88, column: 35, scope: !7)
!81 = !DILocation(line: 89, column: 25, scope: !7)
!82 = !DILocation(line: 89, column: 37, scope: !7)
!83 = !DILocation(line: 90, column: 28, scope: !7)
!84 = !DILocation(line: 90, column: 40, scope: !7)
!85 = !DILocation(line: 90, column: 4, scope: !7)
