; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__softmax_max_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %8, 3, !dbg !12
  %9 = and i32 %.lobit1, 31, !dbg !12
  %10 = and i32 %8, 31, !dbg !12
  %11 = or disjoint i32 %7, %9, !dbg !13
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = icmp slt i32 %11, 128, !dbg !14
  %14 = icmp slt i32 %12, 128, !dbg !14
  %15 = shl i32 %8, 2, !dbg !15
  %16 = and i32 %15, 28, !dbg !15
  %17 = shl i32 %11, 5, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #3, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = select i1 %13, float %26, float 0xFFF0000000000000, !dbg !20
  %31 = select i1 %13, float %27, float 0xFFF0000000000000, !dbg !20
  %32 = select i1 %13, float %28, float 0xFFF0000000000000, !dbg !20
  %33 = select i1 %13, float %29, float 0xFFF0000000000000, !dbg !20
  %34 = fcmp ogt float %30, %31, !dbg !21
  %35 = fcmp uno float %30, 0.000000e+00, !dbg !26
  %36 = or i1 %34, %35, !dbg !27
  %37 = select i1 %36, float %30, float %31, !dbg !28
  %38 = fcmp ogt float %37, %32, !dbg !21
  %39 = fcmp uno float %37, 0.000000e+00, !dbg !26
  %40 = or i1 %38, %39, !dbg !27
  %41 = select i1 %40, float %37, float %32, !dbg !28
  %42 = fcmp ogt float %41, %33, !dbg !21
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !26
  %44 = or i1 %42, %43, !dbg !27
  %45 = select i1 %44, float %41, float %33, !dbg !28
  %46 = bitcast float %45 to i32, !dbg !29
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = fcmp ogt float %45, %48, !dbg !21
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !26
  %51 = or i1 %49, %50, !dbg !27
  %52 = select i1 %51, float %45, float %48, !dbg !28
  %53 = bitcast float %52 to i32, !dbg !29
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 2, i32 31), !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fcmp ogt float %52, %55, !dbg !21
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !26
  %58 = or i1 %56, %57, !dbg !27
  %59 = select i1 %58, float %52, float %55, !dbg !28
  %60 = bitcast float %59 to i32, !dbg !29
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !29
  %62 = bitcast i32 %61 to float, !dbg !29
  %63 = fcmp ogt float %59, %62, !dbg !21
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !26
  %65 = or i1 %63, %64, !dbg !27
  %66 = select i1 %65, float %59, float %62, !dbg !28
  %67 = fsub float %66, %26, !dbg !30
  %68 = fsub float %66, %27, !dbg !30
  %69 = fsub float %66, %28, !dbg !30
  %70 = fsub float %66, %29, !dbg !30
  %71 = select i1 %13, float %67, float 0xFFF0000000000000, !dbg !31
  %72 = select i1 %13, float %68, float 0xFFF0000000000000, !dbg !31
  %73 = select i1 %13, float %69, float 0xFFF0000000000000, !dbg !31
  %74 = select i1 %13, float %70, float 0xFFF0000000000000, !dbg !31
  %75 = fcmp ogt float %71, %72, !dbg !32
  %76 = fcmp uno float %71, 0.000000e+00, !dbg !34
  %77 = or i1 %75, %76, !dbg !35
  %78 = select i1 %77, float %71, float %72, !dbg !36
  %79 = fcmp ogt float %78, %73, !dbg !32
  %80 = fcmp uno float %78, 0.000000e+00, !dbg !34
  %81 = or i1 %79, %80, !dbg !35
  %82 = select i1 %81, float %78, float %73, !dbg !36
  %83 = fcmp ogt float %82, %74, !dbg !32
  %84 = fcmp uno float %82, 0.000000e+00, !dbg !34
  %85 = or i1 %83, %84, !dbg !35
  %86 = select i1 %85, float %82, float %74, !dbg !36
  %87 = bitcast float %86 to i32, !dbg !37
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 4, i32 31), !dbg !37
  %89 = bitcast i32 %88 to float, !dbg !37
  %90 = fcmp ogt float %86, %89, !dbg !32
  %91 = fcmp uno float %86, 0.000000e+00, !dbg !34
  %92 = or i1 %90, %91, !dbg !35
  %93 = select i1 %92, float %86, float %89, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !37
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !37
  %96 = bitcast i32 %95 to float, !dbg !37
  %97 = fcmp ogt float %93, %96, !dbg !32
  %98 = fcmp uno float %93, 0.000000e+00, !dbg !34
  %99 = or i1 %97, %98, !dbg !35
  %100 = select i1 %99, float %93, float %96, !dbg !36
  %101 = bitcast float %100 to i32, !dbg !37
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !37
  %103 = bitcast i32 %102 to float, !dbg !37
  %104 = fcmp ogt float %100, %103, !dbg !32
  %105 = fcmp uno float %100, 0.000000e+00, !dbg !34
  %106 = or i1 %104, %105, !dbg !35
  %107 = select i1 %106, float %100, float %103, !dbg !36
  %108 = fsub float %67, %107, !dbg !38
  %109 = fsub float %68, %107, !dbg !38
  %110 = fsub float %69, %107, !dbg !38
  %111 = fsub float %70, %107, !dbg !38
  %112 = fmul float %108, 0x3FF7154760000000, !dbg !39
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #3, !dbg !39
  %114 = fmul float %109, 0x3FF7154760000000, !dbg !39
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #3, !dbg !39
  %116 = fmul float %110, 0x3FF7154760000000, !dbg !39
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #3, !dbg !39
  %118 = fmul float %111, 0x3FF7154760000000, !dbg !39
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #3, !dbg !39
  %120 = fadd float %113, %115, !dbg !40
  %121 = fadd float %120, %117, !dbg !40
  %122 = fadd float %121, %119, !dbg !40
  %123 = select i1 %13, float %122, float 0.000000e+00, !dbg !40
  %124 = bitcast float %123 to i32, !dbg !45
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !45
  %126 = bitcast i32 %125 to float, !dbg !45
  %127 = fadd float %123, %126, !dbg !40
  %128 = bitcast float %127 to i32, !dbg !45
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !45
  %130 = bitcast i32 %129 to float, !dbg !45
  %131 = fadd float %127, %130, !dbg !40
  %132 = bitcast float %131 to i32, !dbg !45
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !45
  %134 = bitcast i32 %133 to float, !dbg !45
  %135 = fadd float %131, %134, !dbg !40
  %136 = fcmp oeq float %30, %31, !dbg !46
  %137 = or i1 %136, %35, !dbg !48
  %138 = or i1 %34, %137, !dbg !48
  %139 = select i1 %138, float %30, float %31, !dbg !49
  %not. = xor i1 %138, true, !dbg !50
  %140 = zext i1 %not. to i32, !dbg !50
  %141 = fcmp ogt float %139, %32, !dbg !51
  %142 = fcmp oeq float %139, %32, !dbg !46
  %143 = fcmp uno float %139, 0.000000e+00, !dbg !52
  %144 = fcmp uno float %32, 0.000000e+00, !dbg !53
  %145 = xor i1 %144, true, !dbg !54
  %146 = and i1 %143, %145, !dbg !55
  %147 = or i1 %141, %146, !dbg !56
  %148 = and i1 %144, %143, !dbg !57
  %149 = or i1 %142, %148, !dbg !58
  %150 = or i1 %147, %149, !dbg !48
  %151 = select i1 %150, float %139, float %32, !dbg !49
  %.v = select i1 %150, i32 %140, i32 2, !dbg !50
  %152 = fcmp ogt float %151, %33, !dbg !51
  %153 = fcmp oeq float %151, %33, !dbg !46
  %154 = fcmp uno float %151, 0.000000e+00, !dbg !52
  %155 = fcmp uno float %33, 0.000000e+00, !dbg !53
  %156 = xor i1 %155, true, !dbg !54
  %157 = and i1 %154, %156, !dbg !55
  %158 = or i1 %152, %157, !dbg !56
  %159 = and i1 %155, %154, !dbg !57
  %160 = or i1 %153, %159, !dbg !58
  %161 = or i1 %158, %160, !dbg !48
  %162 = select i1 %161, float %151, float %33, !dbg !49
  %.v3 = select i1 %161, i32 %.v, i32 3, !dbg !50
  %163 = or disjoint i32 %.v3, %16, !dbg !50
  %164 = bitcast float %162 to i32, !dbg !59
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !59
  %166 = bitcast i32 %165 to float, !dbg !59
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 4, i32 31), !dbg !59
  %168 = fcmp ogt float %162, %166, !dbg !51
  %169 = fcmp oeq float %162, %166, !dbg !46
  %170 = fcmp uno float %162, 0.000000e+00, !dbg !52
  %171 = fcmp uno float %166, 0.000000e+00, !dbg !53
  %172 = xor i1 %171, true, !dbg !54
  %173 = and i1 %170, %172, !dbg !55
  %174 = or i1 %168, %173, !dbg !56
  %175 = and i1 %171, %170, !dbg !57
  %176 = or i1 %169, %175, !dbg !58
  %177 = icmp slt i32 %163, %167, !dbg !60
  %178 = and i1 %177, %176, !dbg !61
  %179 = or i1 %174, %178, !dbg !48
  %180 = select i1 %179, float %162, float %166, !dbg !49
  %181 = select i1 %179, i32 %163, i32 %167, !dbg !50
  %182 = bitcast float %180 to i32, !dbg !59
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !59
  %184 = bitcast i32 %183 to float, !dbg !59
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !59
  %186 = fcmp ogt float %180, %184, !dbg !51
  %187 = fcmp oeq float %180, %184, !dbg !46
  %188 = fcmp uno float %180, 0.000000e+00, !dbg !52
  %189 = fcmp uno float %184, 0.000000e+00, !dbg !53
  %190 = xor i1 %189, true, !dbg !54
  %191 = and i1 %188, %190, !dbg !55
  %192 = or i1 %186, %191, !dbg !56
  %193 = and i1 %189, %188, !dbg !57
  %194 = or i1 %187, %193, !dbg !58
  %195 = icmp slt i32 %181, %185, !dbg !60
  %196 = and i1 %195, %194, !dbg !61
  %197 = or i1 %192, %196, !dbg !48
  %198 = select i1 %197, float %180, float %184, !dbg !49
  %199 = select i1 %197, i32 %181, i32 %185, !dbg !50
  %200 = bitcast float %198 to i32, !dbg !59
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !59
  %202 = bitcast i32 %201 to float, !dbg !59
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 1, i32 31), !dbg !59
  %204 = fcmp ogt float %198, %202, !dbg !51
  %205 = fcmp oeq float %198, %202, !dbg !46
  %206 = fcmp uno float %198, 0.000000e+00, !dbg !52
  %207 = fcmp uno float %202, 0.000000e+00, !dbg !53
  %208 = xor i1 %207, true, !dbg !54
  %209 = and i1 %206, %208, !dbg !55
  %210 = or i1 %204, %209, !dbg !56
  %211 = and i1 %207, %206, !dbg !57
  %212 = or i1 %205, %211, !dbg !58
  %213 = icmp slt i32 %199, %203, !dbg !60
  %214 = and i1 %213, %212, !dbg !61
  %215 = or i1 %210, %214, !dbg !48
  %216 = select i1 %215, i32 %199, i32 %203, !dbg !50
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %135) #3, !dbg !62
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %135) #3, !dbg !62
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %135) #3, !dbg !62
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %135) #3, !dbg !62
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !63
  %222 = bitcast float %217 to i32, !dbg !64
  %223 = bitcast float %218 to i32, !dbg !64
  %224 = bitcast float %219 to i32, !dbg !64
  %225 = bitcast float %220 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %221, i1 %13) #3, !dbg !64
  %226 = sext i32 %12 to i64, !dbg !65
  %227 = getelementptr i64, ptr addrspace(1) %1, i64 %226, !dbg !65
  %228 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %9, !dbg !66
  %229 = insertelement <1 x i32> poison, i32 %216, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #3, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #3, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %230 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %10, !dbg !66
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !66
  %232 = sext i32 %231 to i64, !dbg !66
  %233 = and i32 %8, 224, !dbg !66
  %234 = icmp eq i32 %233, 0, !dbg !66
  %235 = and i1 %234, %14, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %232, ptr addrspace(1) %227, i1 %235) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfyu2k3ngx7ywnedt7sij4hzrnimnr2cdj5azo6a6upelbud6u2k.py", directory: "inductor_cache/fy")
!4 = !{ptr @triton_per_fused__softmax_max_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_max_sub_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_max_sub_1", linkageName: "triton_per_fused__softmax_max_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 33, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 38, column: 37, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !33)
!37 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !33)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 40, column: 24, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 43, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 153, column: 23, scope: !22, inlinedAt: !47)
!47 = !DILocation(line: 45, column: 70, scope: !7)
!48 = !DILocation(line: 162, column: 12, scope: !22, inlinedAt: !47)
!49 = !DILocation(line: 163, column: 35, scope: !22, inlinedAt: !47)
!50 = !DILocation(line: 163, column: 69, scope: !22, inlinedAt: !47)
!51 = !DILocation(line: 152, column: 21, scope: !22, inlinedAt: !47)
!52 = !DILocation(line: 155, column: 29, scope: !22, inlinedAt: !47)
!53 = !DILocation(line: 156, column: 29, scope: !22, inlinedAt: !47)
!54 = !DILocation(line: 157, column: 32, scope: !22, inlinedAt: !47)
!55 = !DILocation(line: 157, column: 28, scope: !22, inlinedAt: !47)
!56 = !DILocation(line: 157, column: 16, scope: !22, inlinedAt: !47)
!57 = !DILocation(line: 159, column: 29, scope: !22, inlinedAt: !47)
!58 = !DILocation(line: 159, column: 17, scope: !22, inlinedAt: !47)
!59 = !DILocation(line: 173, column: 42, scope: !24, inlinedAt: !47)
!60 = !DILocation(line: 162, column: 31, scope: !22, inlinedAt: !47)
!61 = !DILocation(line: 162, column: 21, scope: !22, inlinedAt: !47)
!62 = !DILocation(line: 47, column: 20, scope: !7)
!63 = !DILocation(line: 48, column: 25, scope: !7)
!64 = !DILocation(line: 48, column: 45, scope: !7)
!65 = !DILocation(line: 49, column: 25, scope: !7)
!66 = !DILocation(line: 49, column: 37, scope: !7)
!67 = !DILocation(line: 49, column: 4, scope: !7)
