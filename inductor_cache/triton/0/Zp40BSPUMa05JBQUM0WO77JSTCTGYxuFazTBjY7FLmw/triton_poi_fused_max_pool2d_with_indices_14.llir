; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 4, !dbg !13
  %18 = or disjoint i32 %13, 5, !dbg !13
  %19 = or disjoint i32 %13, 6, !dbg !13
  %20 = or disjoint i32 %13, 7, !dbg !13
  %21 = or disjoint i32 %6, %11, !dbg !13
  %22 = or disjoint i32 %6, %12, !dbg !13
  %23 = icmp slt i32 %13, 247808, !dbg !14
  %24 = icmp slt i32 %21, 247808, !dbg !14
  %25 = icmp slt i32 %22, 247808, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %26 = sdiv i32 %.frozen, 11, !dbg !15
  %27 = mul i32 %26, 11, !dbg !16
  %.decomposed = sub i32 %.frozen, %27, !dbg !16
  %.frozen18 = freeze i32 %14, !dbg !15
  %28 = sdiv i32 %.frozen18, 11, !dbg !15
  %29 = mul i32 %28, 11, !dbg !16
  %.decomposed19 = sub i32 %.frozen18, %29, !dbg !16
  %.frozen20 = freeze i32 %15, !dbg !15
  %30 = sdiv i32 %.frozen20, 11, !dbg !15
  %31 = mul i32 %30, 11, !dbg !16
  %.decomposed21 = sub i32 %.frozen20, %31, !dbg !16
  %.frozen22 = freeze i32 %16, !dbg !15
  %32 = sdiv i32 %.frozen22, 11, !dbg !15
  %33 = mul i32 %32, 11, !dbg !16
  %.decomposed23 = sub i32 %.frozen22, %33, !dbg !16
  %.frozen24 = freeze i32 %17, !dbg !15
  %34 = sdiv i32 %.frozen24, 11, !dbg !15
  %35 = mul i32 %34, 11, !dbg !16
  %.decomposed25 = sub i32 %.frozen24, %35, !dbg !16
  %.frozen26 = freeze i32 %18, !dbg !15
  %36 = sdiv i32 %.frozen26, 11, !dbg !15
  %37 = mul i32 %36, 11, !dbg !16
  %.decomposed27 = sub i32 %.frozen26, %37, !dbg !16
  %.frozen28 = freeze i32 %19, !dbg !15
  %38 = sdiv i32 %.frozen28, 11, !dbg !15
  %39 = mul i32 %38, 11, !dbg !16
  %.decomposed29 = sub i32 %.frozen28, %39, !dbg !16
  %.frozen30 = freeze i32 %20, !dbg !15
  %40 = sdiv i32 %.frozen30, 11, !dbg !15
  %41 = mul i32 %40, 11, !dbg !16
  %.decomposed31 = sub i32 %.frozen30, %41, !dbg !16
  %42 = shl nsw i32 %.decomposed, 1, !dbg !17
  %43 = shl nsw i32 %.decomposed19, 1, !dbg !17
  %44 = shl nsw i32 %.decomposed21, 1, !dbg !17
  %45 = shl nsw i32 %.decomposed23, 1, !dbg !17
  %46 = shl nsw i32 %.decomposed25, 1, !dbg !17
  %47 = shl nsw i32 %.decomposed27, 1, !dbg !17
  %48 = shl nsw i32 %.decomposed29, 1, !dbg !17
  %49 = shl nsw i32 %.decomposed31, 1, !dbg !17
  %50 = mul i32 %26, 44, !dbg !18
  %51 = mul i32 %28, 44, !dbg !18
  %52 = mul i32 %30, 44, !dbg !18
  %53 = mul i32 %32, 44, !dbg !18
  %54 = mul i32 %34, 44, !dbg !18
  %55 = mul i32 %36, 44, !dbg !18
  %56 = mul i32 %38, 44, !dbg !18
  %57 = mul i32 %40, 44, !dbg !18
  %58 = add i32 %42, %50, !dbg !19
  %59 = add i32 %43, %51, !dbg !19
  %60 = add i32 %44, %52, !dbg !19
  %61 = add i32 %45, %53, !dbg !19
  %62 = add i32 %46, %54, !dbg !19
  %63 = add i32 %47, %55, !dbg !19
  %64 = add i32 %48, %56, !dbg !19
  %65 = add i32 %49, %57, !dbg !19
  %66 = sext i32 %58 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = sext i32 %59 to i64, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !20
  %70 = sext i32 %60 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !20
  %72 = sext i32 %61 to i64, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !20
  %74 = sext i32 %62 to i64, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !20
  %76 = sext i32 %63 to i64, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !20
  %78 = sext i32 %64 to i64, !dbg !20
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !20
  %80 = sext i32 %65 to i64, !dbg !20
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !20
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #2, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %23) #2, !dbg !21
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %23) #2, !dbg !21
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #2, !dbg !21
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %23) #2, !dbg !21
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %23) #2, !dbg !21
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %23) #2, !dbg !21
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %23) #2, !dbg !21
  %90 = or disjoint i32 %58, 1, !dbg !22
  %91 = or disjoint i32 %59, 1, !dbg !22
  %92 = or disjoint i32 %60, 1, !dbg !22
  %93 = or disjoint i32 %61, 1, !dbg !22
  %94 = or disjoint i32 %62, 1, !dbg !22
  %95 = or disjoint i32 %63, 1, !dbg !22
  %96 = or disjoint i32 %64, 1, !dbg !22
  %97 = or disjoint i32 %65, 1, !dbg !22
  %98 = sext i32 %90 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !23
  %100 = sext i32 %91 to i64, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !23
  %102 = sext i32 %92 to i64, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !23
  %104 = sext i32 %93 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !23
  %106 = sext i32 %94 to i64, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !23
  %108 = sext i32 %95 to i64, !dbg !23
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !23
  %110 = sext i32 %96 to i64, !dbg !23
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !23
  %112 = sext i32 %97 to i64, !dbg !23
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !23
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %23) #2, !dbg !24
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %23) #2, !dbg !24
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %23) #2, !dbg !24
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %23) #2, !dbg !24
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #2, !dbg !24
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #2, !dbg !24
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %23) #2, !dbg !24
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %23) #2, !dbg !24
  %122 = add i32 %58, 22, !dbg !25
  %123 = add i32 %59, 22, !dbg !25
  %124 = add i32 %60, 22, !dbg !25
  %125 = add i32 %61, 22, !dbg !25
  %126 = add i32 %62, 22, !dbg !25
  %127 = add i32 %63, 22, !dbg !25
  %128 = add i32 %64, 22, !dbg !25
  %129 = add i32 %65, 22, !dbg !25
  %130 = sext i32 %122 to i64, !dbg !26
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !26
  %132 = sext i32 %123 to i64, !dbg !26
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !26
  %134 = sext i32 %124 to i64, !dbg !26
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !26
  %136 = sext i32 %125 to i64, !dbg !26
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !26
  %138 = sext i32 %126 to i64, !dbg !26
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !26
  %140 = sext i32 %127 to i64, !dbg !26
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !26
  %142 = sext i32 %128 to i64, !dbg !26
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !26
  %144 = sext i32 %129 to i64, !dbg !26
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !26
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %23) #2, !dbg !27
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %23) #2, !dbg !27
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #2, !dbg !27
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %23) #2, !dbg !27
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %23) #2, !dbg !27
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %23) #2, !dbg !27
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %23) #2, !dbg !27
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %23) #2, !dbg !27
  %154 = add i32 %58, 23, !dbg !28
  %155 = add i32 %59, 23, !dbg !28
  %156 = add i32 %60, 23, !dbg !28
  %157 = add i32 %61, 23, !dbg !28
  %158 = add i32 %62, 23, !dbg !28
  %159 = add i32 %63, 23, !dbg !28
  %160 = add i32 %64, 23, !dbg !28
  %161 = add i32 %65, 23, !dbg !28
  %162 = sext i32 %154 to i64, !dbg !29
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !29
  %164 = sext i32 %155 to i64, !dbg !29
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !29
  %166 = sext i32 %156 to i64, !dbg !29
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !29
  %168 = sext i32 %157 to i64, !dbg !29
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !29
  %170 = sext i32 %158 to i64, !dbg !29
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !29
  %172 = sext i32 %159 to i64, !dbg !29
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !29
  %174 = sext i32 %160 to i64, !dbg !29
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !29
  %176 = sext i32 %161 to i64, !dbg !29
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !29
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %23) #2, !dbg !30
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %23) #2, !dbg !30
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %23) #2, !dbg !30
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %23) #2, !dbg !30
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %23) #2, !dbg !30
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %23) #2, !dbg !30
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %23) #2, !dbg !30
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %23) #2, !dbg !30
  %186 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !21
  %187 = insertelement <4 x i32> %186, i32 %83, i64 1, !dbg !21
  %188 = insertelement <4 x i32> %187, i32 %84, i64 2, !dbg !21
  %189 = insertelement <4 x i32> %188, i32 %85, i64 3, !dbg !21
  %190 = bitcast <4 x i32> %189 to <4 x float>, !dbg !21
  %191 = insertelement <4 x i32> poison, i32 %114, i64 0, !dbg !24
  %192 = insertelement <4 x i32> %191, i32 %115, i64 1, !dbg !24
  %193 = insertelement <4 x i32> %192, i32 %116, i64 2, !dbg !24
  %194 = insertelement <4 x i32> %193, i32 %117, i64 3, !dbg !24
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !24
  %196 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !27
  %197 = insertelement <4 x i32> %196, i32 %147, i64 1, !dbg !27
  %198 = insertelement <4 x i32> %197, i32 %148, i64 2, !dbg !27
  %199 = insertelement <4 x i32> %198, i32 %149, i64 3, !dbg !27
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !27
  %201 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !30
  %202 = insertelement <4 x i32> %201, i32 %179, i64 1, !dbg !30
  %203 = insertelement <4 x i32> %202, i32 %180, i64 2, !dbg !30
  %204 = insertelement <4 x i32> %203, i32 %181, i64 3, !dbg !30
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !30
  %206 = fcmp ogt <4 x float> %195, %190, !dbg !31
  %207 = fcmp uno <4 x float> %195, zeroinitializer, !dbg !35
  %208 = or <4 x i1> %206, %207, !dbg !36
  %.v = select <4 x i1> %208, <4 x i32> %194, <4 x i32> %189, !dbg !37
  %209 = bitcast <4 x i32> %.v to <4 x float>, !dbg !37
  %210 = fcmp olt <4 x float> %209, %200, !dbg !38
  %211 = fcmp uno <4 x float> %200, zeroinitializer, !dbg !40
  %212 = or <4 x i1> %210, %211, !dbg !41
  %.v15 = select <4 x i1> %212, <4 x i32> %199, <4 x i32> %.v, !dbg !42
  %213 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !42
  %214 = fcmp olt <4 x float> %213, %205, !dbg !43
  %215 = extractelement <4 x i1> %214, i64 0, !dbg !45
  %216 = extractelement <4 x i1> %214, i64 1, !dbg !45
  %217 = extractelement <4 x i1> %214, i64 2, !dbg !45
  %218 = extractelement <4 x i1> %214, i64 3, !dbg !45
  %219 = zext <4 x i1> %206 to <4 x i8>, !dbg !46
  %220 = select <4 x i1> %210, <4 x i8> splat (i8 2), <4 x i8> %219, !dbg !47
  %221 = select <4 x i1> %214, <4 x i8> splat (i8 3), <4 x i8> %220, !dbg !48
  %222 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !21
  %223 = insertelement <4 x i32> %222, i32 %87, i64 1, !dbg !21
  %224 = insertelement <4 x i32> %223, i32 %88, i64 2, !dbg !21
  %225 = insertelement <4 x i32> %224, i32 %89, i64 3, !dbg !21
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !21
  %227 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !24
  %228 = insertelement <4 x i32> %227, i32 %119, i64 1, !dbg !24
  %229 = insertelement <4 x i32> %228, i32 %120, i64 2, !dbg !24
  %230 = insertelement <4 x i32> %229, i32 %121, i64 3, !dbg !24
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !24
  %232 = insertelement <4 x i32> poison, i32 %150, i64 0, !dbg !27
  %233 = insertelement <4 x i32> %232, i32 %151, i64 1, !dbg !27
  %234 = insertelement <4 x i32> %233, i32 %152, i64 2, !dbg !27
  %235 = insertelement <4 x i32> %234, i32 %153, i64 3, !dbg !27
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !27
  %237 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !30
  %238 = insertelement <4 x i32> %237, i32 %183, i64 1, !dbg !30
  %239 = insertelement <4 x i32> %238, i32 %184, i64 2, !dbg !30
  %240 = insertelement <4 x i32> %239, i32 %185, i64 3, !dbg !30
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !30
  %242 = fcmp ogt <4 x float> %231, %226, !dbg !31
  %243 = fcmp uno <4 x float> %231, zeroinitializer, !dbg !35
  %244 = or <4 x i1> %242, %243, !dbg !36
  %.v16 = select <4 x i1> %244, <4 x i32> %230, <4 x i32> %225, !dbg !37
  %245 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !37
  %246 = fcmp olt <4 x float> %245, %236, !dbg !38
  %247 = fcmp uno <4 x float> %236, zeroinitializer, !dbg !40
  %248 = or <4 x i1> %246, %247, !dbg !41
  %.v17 = select <4 x i1> %248, <4 x i32> %235, <4 x i32> %.v16, !dbg !42
  %249 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !42
  %250 = fcmp olt <4 x float> %249, %241, !dbg !43
  %251 = shufflevector <4 x float> %241, <4 x float> %205, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !49
  %252 = fcmp uno <8 x float> %251, zeroinitializer, !dbg !49
  %253 = extractelement <8 x i1> %252, i64 7, !dbg !45
  %254 = or i1 %215, %253, !dbg !45
  %255 = extractelement <8 x i1> %252, i64 6, !dbg !45
  %256 = or i1 %216, %255, !dbg !45
  %257 = extractelement <8 x i1> %252, i64 5, !dbg !45
  %258 = or i1 %217, %257, !dbg !45
  %259 = extractelement <8 x i1> %252, i64 4, !dbg !45
  %260 = or i1 %218, %259, !dbg !45
  %261 = extractelement <4 x i1> %250, i64 0, !dbg !45
  %262 = extractelement <8 x i1> %252, i64 3, !dbg !45
  %263 = or i1 %261, %262, !dbg !45
  %264 = extractelement <4 x i1> %250, i64 1, !dbg !45
  %265 = extractelement <8 x i1> %252, i64 2, !dbg !45
  %266 = or i1 %264, %265, !dbg !45
  %267 = extractelement <4 x i1> %250, i64 2, !dbg !45
  %268 = extractelement <8 x i1> %252, i64 1, !dbg !45
  %269 = or i1 %267, %268, !dbg !45
  %270 = extractelement <4 x i1> %250, i64 3, !dbg !45
  %271 = extractelement <8 x i1> %252, i64 0, !dbg !45
  %272 = or i1 %270, %271, !dbg !45
  %273 = zext <4 x i1> %242 to <4 x i8>, !dbg !46
  %274 = select <4 x i1> %246, <4 x i8> splat (i8 2), <4 x i8> %273, !dbg !47
  %275 = select <4 x i1> %250, <4 x i8> splat (i8 3), <4 x i8> %274, !dbg !48
  %276 = sext i32 %21 to i64, !dbg !50
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !50
  %278 = sext i32 %22 to i64, !dbg !50
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %278, !dbg !50
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !51
  %281 = extractelement <4 x i32> %.v15, i64 0, !dbg !51
  %282 = select i1 %254, i32 %178, i32 %281, !dbg !52
  %283 = extractelement <4 x i32> %.v15, i64 1, !dbg !51
  %284 = select i1 %256, i32 %179, i32 %283, !dbg !52
  %285 = extractelement <4 x i32> %.v15, i64 2, !dbg !51
  %286 = select i1 %258, i32 %180, i32 %285, !dbg !52
  %287 = extractelement <4 x i32> %.v15, i64 3, !dbg !51
  %288 = select i1 %260, i32 %181, i32 %287, !dbg !52
  %289 = extractelement <4 x i32> %.v17, i64 0, !dbg !51
  %290 = select i1 %263, i32 %182, i32 %289, !dbg !52
  %291 = extractelement <4 x i32> %.v17, i64 1, !dbg !51
  %292 = select i1 %266, i32 %183, i32 %291, !dbg !52
  %293 = extractelement <4 x i32> %.v17, i64 2, !dbg !51
  %294 = select i1 %269, i32 %184, i32 %293, !dbg !52
  %295 = extractelement <4 x i32> %.v17, i64 3, !dbg !51
  %296 = select i1 %272, i32 %185, i32 %295, !dbg !52
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %280, i32 %282, i32 %284, i32 %286, i32 %288, i1 true) #2, !dbg !51
  %297 = getelementptr inbounds i8, ptr addrspace(3) %280, i32 16, !dbg !51
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %297, i32 %290, i32 %292, i32 %294, i32 %296, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !51
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !51
  %300 = load <4 x i32>, ptr addrspace(3) %299, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %298, align 16, !dbg !51
  %301 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 4, !dbg !51
  %.extract8 = load i32, ptr addrspace(3) %301, align 4, !dbg !51
  %302 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 8, !dbg !51
  %.extract9 = load i32, ptr addrspace(3) %302, align 8, !dbg !51
  %303 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 12, !dbg !51
  %.extract10 = load i32, ptr addrspace(3) %303, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %277, i1 %24) #2, !dbg !51
  %.extract11 = extractelement <4 x i32> %300, i64 0, !dbg !51
  %.extract12 = extractelement <4 x i32> %300, i64 1, !dbg !51
  %.extract13 = extractelement <4 x i32> %300, i64 2, !dbg !51
  %.extract14 = extractelement <4 x i32> %300, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %279, i1 %25) #2, !dbg !51
  %304 = sext i32 %13 to i64, !dbg !53
  %305 = getelementptr i8, ptr addrspace(1) %2, i64 %304, !dbg !53
  %306 = bitcast <4 x i8> %221 to i32, !dbg !54
  %307 = bitcast <4 x i8> %275 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %306, i32 %307, ptr addrspace(1) %305, i1 %23) #2, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgtukqusmyah64g57rs3c52rwcxaokrtcug2u4elixpx7han6b5n.py", directory: "inductor_cache/gt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 49, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 50, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 50, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 31, column: 40, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 32, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !44)
!44 = !DILocation(line: 33, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !44)
!46 = !DILocation(line: 37, column: 33, scope: !7)
!47 = !DILocation(line: 40, column: 35, scope: !7)
!48 = !DILocation(line: 43, column: 35, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !44)
!50 = !DILocation(line: 44, column: 25, scope: !7)
!51 = !DILocation(line: 44, column: 36, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !44)
!53 = !DILocation(line: 45, column: 25, scope: !7)
!54 = !DILocation(line: 45, column: 37, scope: !7)
!55 = !DILocation(line: 45, column: 4, scope: !7)
