; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = or disjoint i32 %6, %12, !dbg !13
  %15 = or disjoint i32 %6, %9, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 6, !dbg !13
  %18 = or disjoint i32 %15, 7, !dbg !13
  %19 = sdiv i32 %15, 16, !dbg !14
  %20 = srem i32 %16, 16, !dbg !15
  %21 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !15
  %22 = insertelement <2 x i32> %21, i32 %17, i64 1, !dbg !15
  %23 = srem <2 x i32> %22, splat (i32 16), !dbg !15
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !16
  %25 = icmp sgt i32 %24, 1, !dbg !17
  %26 = icmp sgt i32 %20, 1, !dbg !17
  %27 = extractelement <2 x i32> %23, i64 1, !dbg !18
  %28 = icmp sgt i32 %27, 1, !dbg !17
  %29 = add i32 %15, -34, !dbg !19
  %30 = add i32 %15, -32, !dbg !19
  %31 = add i32 %15, -30, !dbg !19
  %32 = add i32 %15, -28, !dbg !19
  %33 = sext i32 %29 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = sext i32 %30 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %31 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %32 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = icmp sgt i32 %24, 0, !dbg !21
  %42 = icmp sgt i32 %20, 0, !dbg !21
  %43 = icmp sgt i32 %27, 0, !dbg !21
  %44 = add i32 %15, -33, !dbg !22
  %45 = add i32 %15, -31, !dbg !22
  %46 = add i32 %15, -29, !dbg !22
  %47 = add i32 %15, -27, !dbg !22
  %48 = add i32 %15, -26, !dbg !22
  %49 = sext i32 %44 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %45 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %46 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %47 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %48 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = icmp sgt i32 %24, -1, !dbg !24
  %60 = or disjoint i32 %24, 1, !dbg !25
  %61 = icmp sgt i32 %20, -1, !dbg !26
  %62 = icmp sgt i32 %27, -1, !dbg !26
  %63 = icmp slt i32 %60, 16, !dbg !27
  %64 = and i1 %59, %63, !dbg !28
  %65 = add i32 %15, -25, !dbg !29
  %66 = add i32 %15, -24, !dbg !29
  %67 = sext i32 %65 to i64, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !30
  %69 = sext i32 %66 to i64, !dbg !30
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !30
  %71 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !31
  %72 = shufflevector <2 x i32> %23, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !31
  %73 = shufflevector <4 x i32> %71, <4 x i32> %72, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !31
  %74 = shufflevector <4 x i32> %73, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 0>, !dbg !31
  %75 = or disjoint <4 x i32> %74, <i32 2, i32 2, i32 1, i32 1>, !dbg !31
  %76 = icmp slt <4 x i32> %75, splat (i32 16), !dbg !32
  %77 = extractelement <4 x i1> %76, i64 3, !dbg !28
  %78 = and i1 %61, %77, !dbg !28
  %79 = extractelement <4 x i1> %76, i64 2, !dbg !28
  %80 = and i1 %62, %79, !dbg !28
  %81 = extractelement <4 x i1> %76, i64 1, !dbg !18
  %82 = and i1 %59, %81, !dbg !18
  %83 = insertelement <4 x i32> poison, i32 %15, i64 0, !dbg !13
  %84 = shufflevector <4 x i32> %83, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %85 = or disjoint <4 x i32> %84, <i32 2, i32 5, i32 3, i32 1>, !dbg !13
  %86 = srem <4 x i32> %85, splat (i32 16), !dbg !15
  %87 = extractelement <4 x i32> %86, i64 0, !dbg !26
  %88 = icmp sgt i32 %87, 1, !dbg !17
  %89 = extractelement <4 x i32> %86, i64 3, !dbg !21
  %90 = icmp sgt i32 %89, 0, !dbg !21
  %91 = icmp sgt i32 %87, 0, !dbg !21
  %92 = extractelement <4 x i32> %86, i64 2, !dbg !21
  %93 = icmp sgt i32 %92, 0, !dbg !21
  %94 = extractelement <4 x i32> %86, i64 1, !dbg !21
  %95 = icmp sgt i32 %94, 0, !dbg !21
  %96 = or disjoint i32 %87, 1, !dbg !25
  %97 = icmp sgt i32 %87, -1, !dbg !26
  %98 = icmp slt i32 %96, 16, !dbg !27
  %99 = and i1 %97, %98, !dbg !28
  %100 = icmp ult <4 x i32> %86, <i32 14, i32 15, i32 15, i32 15>, !dbg !18
  %101 = extractelement <4 x i1> %76, i64 0, !dbg !18
  %102 = and i1 %61, %101, !dbg !18
  %103 = add nsw i32 %27, 2, !dbg !18
  %104 = icmp ult i32 %103, 16, !dbg !18
  %105 = add i32 %15, -18, !dbg !33
  %106 = add i32 %15, -16, !dbg !33
  %107 = add i32 %15, -14, !dbg !33
  %108 = add i32 %15, -12, !dbg !33
  %109 = sext i32 %105 to i64, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !34
  %111 = sext i32 %106 to i64, !dbg !34
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !34
  %113 = sext i32 %107 to i64, !dbg !34
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !34
  %115 = sext i32 %108 to i64, !dbg !34
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !34
  %117 = add i32 %15, -17, !dbg !35
  %118 = add i32 %15, -15, !dbg !35
  %119 = add i32 %15, -13, !dbg !35
  %120 = add i32 %15, -11, !dbg !35
  %121 = add i32 %15, -10, !dbg !35
  %122 = sext i32 %117 to i64, !dbg !36
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !36
  %124 = sext i32 %118 to i64, !dbg !36
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !36
  %126 = sext i32 %119 to i64, !dbg !36
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !36
  %128 = sext i32 %120 to i64, !dbg !36
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !36
  %130 = sext i32 %121 to i64, !dbg !36
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !36
  %132 = add i32 %15, -9, !dbg !37
  %133 = add i32 %15, -8, !dbg !37
  %134 = sext i32 %132 to i64, !dbg !38
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !38
  %136 = sext i32 %133 to i64, !dbg !38
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !38
  %138 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !15
  %139 = insertelement <2 x i32> %138, i32 %19, i64 1, !dbg !15
  %140 = srem <2 x i32> %139, splat (i32 16), !dbg !15
  %141 = extractelement <2 x i32> %140, i64 1, !dbg !39
  %142 = icmp sgt i32 %141, 1, !dbg !40
  %143 = and i1 %25, %142, !dbg !41
  %144 = and i1 %88, %142, !dbg !41
  %145 = and i1 %26, %142, !dbg !41
  %146 = and i1 %28, %142, !dbg !41
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143) #2, !dbg !42
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !42
  %149 = extractvalue { i32, i32 } %147, 1, !dbg !42
  %150 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %144, i32 -8388608, i1 %144, i32 -8388608, i1 %144) #2, !dbg !42
  %151 = extractvalue { i32, i32 } %150, 0, !dbg !42
  %152 = extractvalue { i32, i32 } %150, 1, !dbg !42
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %145, i32 -8388608, i1 %145, i32 -8388608, i1 %145) #2, !dbg !42
  %154 = extractvalue { i32, i32 } %153, 0, !dbg !42
  %155 = extractvalue { i32, i32 } %153, 1, !dbg !42
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %146, i32 -8388608, i1 %146, i32 -8388608, i1 %146) #2, !dbg !42
  %157 = extractvalue { i32, i32 } %156, 0, !dbg !42
  %158 = extractvalue { i32, i32 } %156, 1, !dbg !42
  %159 = and i1 %41, %142, !dbg !43
  %160 = and i1 %90, %142, !dbg !43
  %161 = and i1 %91, %142, !dbg !43
  %162 = and i1 %93, %142, !dbg !43
  %163 = and i1 %42, %142, !dbg !43
  %164 = and i1 %95, %142, !dbg !43
  %165 = and i1 %43, %142, !dbg !43
  %166 = icmp sgt <2 x i32> %140, <i32 0, i32 -1>, !dbg !21
  %167 = extractelement <2 x i1> %166, i64 0, !dbg !43
  %168 = and i1 %167, %142, !dbg !43
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %159, i32 -8388608, i1 %159) #2, !dbg !44
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %160, i32 -8388608, i1 %160) #2, !dbg !44
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %161, i32 -8388608, i1 %161) #2, !dbg !44
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %162, i32 -8388608, i1 %162) #2, !dbg !44
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %163, i32 -8388608, i1 %163) #2, !dbg !44
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %164, i32 -8388608, i1 %164) #2, !dbg !44
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %165, i32 -8388608, i1 %165) #2, !dbg !44
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %168, i32 -8388608, i1 %168) #2, !dbg !44
  %177 = and i1 %59, %142, !dbg !45
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177) #2, !dbg !46
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !46
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !46
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !46
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !46
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177, i32 -8388608, i1 %177) #2, !dbg !46
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !46
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !46
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !46
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !46
  %188 = extractelement <2 x i32> %140, i64 0, !dbg !28
  %189 = add nsw i32 %188, 1, !dbg !28
  %190 = icmp ult i32 %189, 16, !dbg !28
  %191 = and i1 %142, %64, !dbg !47
  %192 = extractelement <4 x i1> %100, i64 3, !dbg !48
  %193 = and i1 %192, %142, !dbg !47
  %194 = and i1 %99, %142, !dbg !47
  %195 = extractelement <4 x i1> %100, i64 2, !dbg !48
  %196 = and i1 %195, %142, !dbg !47
  %197 = and i1 %78, %142, !dbg !47
  %198 = extractelement <4 x i1> %100, i64 1, !dbg !48
  %199 = and i1 %198, %142, !dbg !47
  %200 = and i1 %80, %142, !dbg !47
  %201 = and i1 %190, %142, !dbg !47
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %191, i32 -8388608, i1 %191) #2, !dbg !49
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %193, i32 -8388608, i1 %193) #2, !dbg !49
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %194, i32 -8388608, i1 %194) #2, !dbg !49
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %196, i32 -8388608, i1 %196) #2, !dbg !49
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %197, i32 -8388608, i1 %197) #2, !dbg !49
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %199, i32 -8388608, i1 %199) #2, !dbg !49
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %200, i32 -8388608, i1 %200) #2, !dbg !49
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %201, i32 -8388608, i1 %201) #2, !dbg !49
  %210 = and i1 %142, %82, !dbg !50
  %211 = extractelement <4 x i1> %100, i64 0, !dbg !51
  %212 = and i1 %211, %142, !dbg !50
  %213 = and i1 %102, %142, !dbg !50
  %214 = and i1 %104, %142, !dbg !50
  %215 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %210, i32 -8388608, i1 %210, i32 -8388608, i1 %210) #2, !dbg !52
  %216 = extractvalue { i32, i32 } %215, 0, !dbg !52
  %217 = extractvalue { i32, i32 } %215, 1, !dbg !52
  %218 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %212, i32 -8388608, i1 %212, i32 -8388608, i1 %212) #2, !dbg !52
  %219 = extractvalue { i32, i32 } %218, 0, !dbg !52
  %220 = extractvalue { i32, i32 } %218, 1, !dbg !52
  %221 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %213, i32 -8388608, i1 %213, i32 -8388608, i1 %213) #2, !dbg !52
  %222 = extractvalue { i32, i32 } %221, 0, !dbg !52
  %223 = extractvalue { i32, i32 } %221, 1, !dbg !52
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %214, i32 -8388608, i1 %214, i32 -8388608, i1 %214) #2, !dbg !52
  %225 = extractvalue { i32, i32 } %224, 0, !dbg !52
  %226 = extractvalue { i32, i32 } %224, 1, !dbg !52
  %227 = icmp sgt i32 %141, 0, !dbg !53
  %228 = and i1 %25, %227, !dbg !54
  %229 = and i1 %88, %227, !dbg !54
  %230 = and i1 %26, %227, !dbg !54
  %231 = and i1 %28, %227, !dbg !54
  %232 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %110, i1 %228, i32 -8388608, i1 %228, i32 -8388608, i1 %228) #2, !dbg !55
  %233 = extractvalue { i32, i32 } %232, 0, !dbg !55
  %234 = extractvalue { i32, i32 } %232, 1, !dbg !55
  %235 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %112, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229) #2, !dbg !55
  %236 = extractvalue { i32, i32 } %235, 0, !dbg !55
  %237 = extractvalue { i32, i32 } %235, 1, !dbg !55
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %230, i32 -8388608, i1 %230, i32 -8388608, i1 %230) #2, !dbg !55
  %239 = extractvalue { i32, i32 } %238, 0, !dbg !55
  %240 = extractvalue { i32, i32 } %238, 1, !dbg !55
  %241 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 %231, i32 -8388608, i1 %231, i32 -8388608, i1 %231) #2, !dbg !55
  %242 = extractvalue { i32, i32 } %241, 0, !dbg !55
  %243 = extractvalue { i32, i32 } %241, 1, !dbg !55
  %244 = and i1 %41, %227, !dbg !56
  %245 = and i1 %90, %227, !dbg !56
  %246 = and i1 %91, %227, !dbg !56
  %247 = and i1 %93, %227, !dbg !56
  %248 = and i1 %42, %227, !dbg !56
  %249 = and i1 %95, %227, !dbg !56
  %250 = and i1 %43, %227, !dbg !56
  %251 = and i1 %167, %227, !dbg !56
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %244, i32 -8388608, i1 %244) #2, !dbg !57
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %245, i32 -8388608, i1 %245) #2, !dbg !57
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %246, i32 -8388608, i1 %246) #2, !dbg !57
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %247, i32 -8388608, i1 %247) #2, !dbg !57
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %248, i32 -8388608, i1 %248) #2, !dbg !57
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %249, i32 -8388608, i1 %249) #2, !dbg !57
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %250, i32 -8388608, i1 %250) #2, !dbg !57
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %251, i32 -8388608, i1 %251) #2, !dbg !57
  %260 = and i1 %59, %227, !dbg !58
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260) #2, !dbg !59
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !59
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !59
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !59
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !59
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260, i32 -8388608, i1 %260) #2, !dbg !59
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !59
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !59
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !59
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !59
  %271 = and i1 %227, %64, !dbg !60
  %272 = and i1 %192, %227, !dbg !60
  %273 = and i1 %99, %227, !dbg !60
  %274 = and i1 %195, %227, !dbg !60
  %275 = and i1 %78, %227, !dbg !60
  %276 = and i1 %198, %227, !dbg !60
  %277 = and i1 %80, %227, !dbg !60
  %278 = and i1 %190, %227, !dbg !60
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %271, i32 -8388608, i1 %271) #2, !dbg !61
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %272, i32 -8388608, i1 %272) #2, !dbg !61
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %273, i32 -8388608, i1 %273) #2, !dbg !61
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %274, i32 -8388608, i1 %274) #2, !dbg !61
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %275, i32 -8388608, i1 %275) #2, !dbg !61
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %276, i32 -8388608, i1 %276) #2, !dbg !61
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %277, i32 -8388608, i1 %277) #2, !dbg !61
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %278, i32 -8388608, i1 %278) #2, !dbg !61
  %287 = and i1 %227, %82, !dbg !62
  %288 = and i1 %211, %227, !dbg !62
  %289 = and i1 %102, %227, !dbg !62
  %290 = and i1 %104, %227, !dbg !62
  %291 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %287, i32 -8388608, i1 %287, i32 -8388608, i1 %287) #2, !dbg !63
  %292 = extractvalue { i32, i32 } %291, 0, !dbg !63
  %293 = extractvalue { i32, i32 } %291, 1, !dbg !63
  %294 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %116, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288) #2, !dbg !63
  %295 = extractvalue { i32, i32 } %294, 0, !dbg !63
  %296 = extractvalue { i32, i32 } %294, 1, !dbg !63
  %297 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #2, !dbg !63
  %298 = extractvalue { i32, i32 } %297, 0, !dbg !63
  %299 = extractvalue { i32, i32 } %297, 1, !dbg !63
  %300 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %137, i1 %290, i32 -8388608, i1 %290, i32 -8388608, i1 %290) #2, !dbg !63
  %301 = extractvalue { i32, i32 } %300, 0, !dbg !63
  %302 = extractvalue { i32, i32 } %300, 1, !dbg !63
  %303 = extractelement <2 x i1> %166, i64 1, !dbg !64
  %304 = and i1 %25, %303, !dbg !64
  %305 = and i1 %88, %303, !dbg !64
  %306 = and i1 %26, %303, !dbg !64
  %307 = and i1 %28, %303, !dbg !64
  %308 = add i32 %15, -2, !dbg !65
  %309 = sext i32 %308 to i64, !dbg !66
  %310 = getelementptr float, ptr addrspace(1) %0, i64 %309, !dbg !66
  %311 = extractelement <4 x i32> %85, i64 0, !dbg !66
  %312 = sext i32 %311 to i64, !dbg !66
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !66
  %314 = getelementptr i8, ptr addrspace(1) %313, i64 -8, !dbg !66
  %315 = sext i32 %16 to i64, !dbg !66
  %316 = getelementptr float, ptr addrspace(1) %0, i64 %315, !dbg !66
  %317 = getelementptr i8, ptr addrspace(1) %316, i64 -8, !dbg !66
  %318 = sext i32 %17 to i64, !dbg !66
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !66
  %320 = getelementptr i8, ptr addrspace(1) %319, i64 -8, !dbg !66
  %321 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %310, i1 %304, i32 -8388608, i1 %304, i32 -8388608, i1 %304) #2, !dbg !67
  %322 = extractvalue { i32, i32 } %321, 0, !dbg !67
  %323 = extractvalue { i32, i32 } %321, 1, !dbg !67
  %324 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %314, i1 %305, i32 -8388608, i1 %305, i32 -8388608, i1 %305) #2, !dbg !67
  %325 = extractvalue { i32, i32 } %324, 0, !dbg !67
  %326 = extractvalue { i32, i32 } %324, 1, !dbg !67
  %327 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %317, i1 %306, i32 -8388608, i1 %306, i32 -8388608, i1 %306) #2, !dbg !67
  %328 = extractvalue { i32, i32 } %327, 0, !dbg !67
  %329 = extractvalue { i32, i32 } %327, 1, !dbg !67
  %330 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %320, i1 %307, i32 -8388608, i1 %307, i32 -8388608, i1 %307) #2, !dbg !67
  %331 = extractvalue { i32, i32 } %330, 0, !dbg !67
  %332 = extractvalue { i32, i32 } %330, 1, !dbg !67
  %333 = and i1 %41, %303, !dbg !68
  %334 = and i1 %90, %303, !dbg !68
  %335 = and i1 %91, %303, !dbg !68
  %336 = and i1 %93, %303, !dbg !68
  %337 = and i1 %42, %303, !dbg !68
  %338 = and i1 %95, %303, !dbg !68
  %339 = and i1 %43, %303, !dbg !68
  %340 = and i1 %167, %303, !dbg !68
  %341 = add i32 %15, -1, !dbg !69
  %342 = sext i32 %341 to i64, !dbg !70
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !70
  %344 = extractelement <4 x i32> %85, i64 3, !dbg !70
  %345 = sext i32 %344 to i64, !dbg !70
  %346 = getelementptr float, ptr addrspace(1) %0, i64 %345, !dbg !70
  %347 = getelementptr i8, ptr addrspace(1) %346, i64 -4, !dbg !70
  %348 = getelementptr i8, ptr addrspace(1) %313, i64 -4, !dbg !70
  %349 = extractelement <4 x i32> %85, i64 2, !dbg !70
  %350 = sext i32 %349 to i64, !dbg !70
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !70
  %352 = getelementptr i8, ptr addrspace(1) %351, i64 -4, !dbg !70
  %353 = getelementptr i8, ptr addrspace(1) %316, i64 -4, !dbg !70
  %354 = extractelement <4 x i32> %85, i64 1, !dbg !70
  %355 = sext i32 %354 to i64, !dbg !70
  %356 = getelementptr float, ptr addrspace(1) %0, i64 %355, !dbg !70
  %357 = getelementptr i8, ptr addrspace(1) %356, i64 -4, !dbg !70
  %358 = getelementptr i8, ptr addrspace(1) %319, i64 -4, !dbg !70
  %359 = sext i32 %18 to i64, !dbg !70
  %360 = getelementptr float, ptr addrspace(1) %0, i64 %359, !dbg !70
  %361 = getelementptr i8, ptr addrspace(1) %360, i64 -4, !dbg !70
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %333, i32 -8388608, i1 %333) #2, !dbg !71
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %334, i32 -8388608, i1 %334) #2, !dbg !71
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %348, i1 %335, i32 -8388608, i1 %335) #2, !dbg !71
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %352, i1 %336, i32 -8388608, i1 %336) #2, !dbg !71
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %337, i32 -8388608, i1 %337) #2, !dbg !71
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %338, i32 -8388608, i1 %338) #2, !dbg !71
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %358, i1 %339, i32 -8388608, i1 %339) #2, !dbg !71
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %361, i1 %340, i32 -8388608, i1 %340) #2, !dbg !71
  %370 = or i32 %141, %24, !dbg !16
  %371 = icmp sgt i32 %370, -1, !dbg !16
  %372 = sext i32 %15 to i64, !dbg !72
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !72
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371) #2, !dbg !73
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !73
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !73
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !73
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !73
  %379 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %316, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371, i32 -8388608, i1 %371) #2, !dbg !73
  %380 = extractvalue { i32, i32, i32, i32 } %379, 0, !dbg !73
  %381 = extractvalue { i32, i32, i32, i32 } %379, 1, !dbg !73
  %382 = extractvalue { i32, i32, i32, i32 } %379, 2, !dbg !73
  %383 = extractvalue { i32, i32, i32, i32 } %379, 3, !dbg !73
  %384 = and i1 %303, %64, !dbg !74
  %385 = and i1 %192, %303, !dbg !74
  %386 = and i1 %99, %303, !dbg !74
  %387 = and i1 %195, %303, !dbg !74
  %388 = and i1 %78, %303, !dbg !74
  %389 = and i1 %198, %303, !dbg !74
  %390 = and i1 %80, %303, !dbg !74
  %391 = and i1 %190, %303, !dbg !74
  %392 = add i32 %15, 8, !dbg !75
  %393 = getelementptr i8, ptr addrspace(1) %346, i64 4, !dbg !76
  %394 = getelementptr i8, ptr addrspace(1) %351, i64 4, !dbg !76
  %395 = getelementptr i8, ptr addrspace(1) %356, i64 4, !dbg !76
  %396 = sext i32 %392 to i64, !dbg !76
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !76
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %346, i1 %384, i32 -8388608, i1 %384) #2, !dbg !77
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %393, i1 %385, i32 -8388608, i1 %385) #2, !dbg !77
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %386, i32 -8388608, i1 %386) #2, !dbg !77
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %394, i1 %387, i32 -8388608, i1 %387) #2, !dbg !77
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %356, i1 %388, i32 -8388608, i1 %388) #2, !dbg !77
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %389, i32 -8388608, i1 %389) #2, !dbg !77
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %360, i1 %390, i32 -8388608, i1 %390) #2, !dbg !77
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %397, i1 %391, i32 -8388608, i1 %391) #2, !dbg !77
  %406 = and i1 %303, %82, !dbg !78
  %407 = and i1 %211, %303, !dbg !78
  %408 = and i1 %102, %303, !dbg !78
  %409 = and i1 %104, %303, !dbg !78
  %410 = getelementptr i8, ptr addrspace(1) %313, i64 8, !dbg !79
  %411 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %313, i1 %406, i32 -8388608, i1 %406, i32 -8388608, i1 %406) #2, !dbg !80
  %412 = extractvalue { i32, i32 } %411, 0, !dbg !80
  %413 = extractvalue { i32, i32 } %411, 1, !dbg !80
  %414 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %410, i1 %407, i32 -8388608, i1 %407, i32 -8388608, i1 %407) #2, !dbg !80
  %415 = extractvalue { i32, i32 } %414, 0, !dbg !80
  %416 = extractvalue { i32, i32 } %414, 1, !dbg !80
  %417 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %319, i1 %408, i32 -8388608, i1 %408, i32 -8388608, i1 %408) #2, !dbg !80
  %418 = extractvalue { i32, i32 } %417, 0, !dbg !80
  %419 = extractvalue { i32, i32 } %417, 1, !dbg !80
  %420 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %397, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !80
  %421 = extractvalue { i32, i32 } %420, 0, !dbg !80
  %422 = extractvalue { i32, i32 } %420, 1, !dbg !80
  %423 = add nsw i32 %141, 1, !dbg !81
  %424 = icmp ult i32 %423, 16, !dbg !81
  %425 = and i1 %25, %424, !dbg !82
  %426 = and i1 %88, %424, !dbg !82
  %427 = and i1 %26, %424, !dbg !82
  %428 = and i1 %28, %424, !dbg !82
  %429 = add i32 %15, 14, !dbg !83
  %430 = add i32 %15, 16, !dbg !83
  %431 = add i32 %15, 18, !dbg !83
  %432 = add i32 %15, 20, !dbg !83
  %433 = sext i32 %429 to i64, !dbg !84
  %434 = getelementptr float, ptr addrspace(1) %0, i64 %433, !dbg !84
  %435 = sext i32 %430 to i64, !dbg !84
  %436 = getelementptr float, ptr addrspace(1) %0, i64 %435, !dbg !84
  %437 = sext i32 %431 to i64, !dbg !84
  %438 = getelementptr float, ptr addrspace(1) %0, i64 %437, !dbg !84
  %439 = sext i32 %432 to i64, !dbg !84
  %440 = getelementptr float, ptr addrspace(1) %0, i64 %439, !dbg !84
  %441 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %434, i1 %425, i32 -8388608, i1 %425, i32 -8388608, i1 %425) #2, !dbg !85
  %442 = extractvalue { i32, i32 } %441, 0, !dbg !85
  %443 = extractvalue { i32, i32 } %441, 1, !dbg !85
  %444 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %436, i1 %426, i32 -8388608, i1 %426, i32 -8388608, i1 %426) #2, !dbg !85
  %445 = extractvalue { i32, i32 } %444, 0, !dbg !85
  %446 = extractvalue { i32, i32 } %444, 1, !dbg !85
  %447 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %438, i1 %427, i32 -8388608, i1 %427, i32 -8388608, i1 %427) #2, !dbg !85
  %448 = extractvalue { i32, i32 } %447, 0, !dbg !85
  %449 = extractvalue { i32, i32 } %447, 1, !dbg !85
  %450 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %440, i1 %428, i32 -8388608, i1 %428, i32 -8388608, i1 %428) #2, !dbg !85
  %451 = extractvalue { i32, i32 } %450, 0, !dbg !85
  %452 = extractvalue { i32, i32 } %450, 1, !dbg !85
  %453 = and i1 %41, %424, !dbg !86
  %454 = and i1 %90, %424, !dbg !86
  %455 = and i1 %91, %424, !dbg !86
  %456 = and i1 %93, %424, !dbg !86
  %457 = and i1 %42, %424, !dbg !86
  %458 = and i1 %95, %424, !dbg !86
  %459 = and i1 %43, %424, !dbg !86
  %460 = and i1 %167, %424, !dbg !86
  %461 = add i32 %15, 15, !dbg !87
  %462 = add i32 %15, 17, !dbg !87
  %463 = add i32 %15, 19, !dbg !87
  %464 = add i32 %15, 21, !dbg !87
  %465 = add i32 %15, 22, !dbg !87
  %466 = sext i32 %461 to i64, !dbg !88
  %467 = getelementptr float, ptr addrspace(1) %0, i64 %466, !dbg !88
  %468 = sext i32 %462 to i64, !dbg !88
  %469 = getelementptr float, ptr addrspace(1) %0, i64 %468, !dbg !88
  %470 = sext i32 %463 to i64, !dbg !88
  %471 = getelementptr float, ptr addrspace(1) %0, i64 %470, !dbg !88
  %472 = sext i32 %464 to i64, !dbg !88
  %473 = getelementptr float, ptr addrspace(1) %0, i64 %472, !dbg !88
  %474 = sext i32 %465 to i64, !dbg !88
  %475 = getelementptr float, ptr addrspace(1) %0, i64 %474, !dbg !88
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %467, i1 %453, i32 -8388608, i1 %453) #2, !dbg !89
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %454, i32 -8388608, i1 %454) #2, !dbg !89
  %478 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %455, i32 -8388608, i1 %455) #2, !dbg !89
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %456, i32 -8388608, i1 %456) #2, !dbg !89
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %471, i1 %457, i32 -8388608, i1 %457) #2, !dbg !89
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %458, i32 -8388608, i1 %458) #2, !dbg !89
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %459, i32 -8388608, i1 %459) #2, !dbg !89
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 %460, i32 -8388608, i1 %460) #2, !dbg !89
  %484 = and i1 %59, %424, !dbg !90
  %485 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %436, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484) #2, !dbg !91
  %486 = extractvalue { i32, i32, i32, i32 } %485, 0, !dbg !91
  %487 = extractvalue { i32, i32, i32, i32 } %485, 1, !dbg !91
  %488 = extractvalue { i32, i32, i32, i32 } %485, 2, !dbg !91
  %489 = extractvalue { i32, i32, i32, i32 } %485, 3, !dbg !91
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %440, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484, i32 -8388608, i1 %484) #2, !dbg !91
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !91
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !91
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !91
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !91
  %495 = and i1 %424, %64, !dbg !92
  %496 = and i1 %192, %424, !dbg !92
  %497 = and i1 %99, %424, !dbg !92
  %498 = and i1 %195, %424, !dbg !92
  %499 = and i1 %78, %424, !dbg !92
  %500 = and i1 %198, %424, !dbg !92
  %501 = and i1 %80, %424, !dbg !92
  %502 = or i32 %423, %189, !dbg !92
  %503 = icmp ult i32 %502, 16, !dbg !92
  %504 = add i32 %15, 23, !dbg !93
  %505 = add i32 %15, 24, !dbg !93
  %506 = sext i32 %504 to i64, !dbg !94
  %507 = getelementptr float, ptr addrspace(1) %0, i64 %506, !dbg !94
  %508 = sext i32 %505 to i64, !dbg !94
  %509 = getelementptr float, ptr addrspace(1) %0, i64 %508, !dbg !94
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %495, i32 -8388608, i1 %495) #2, !dbg !95
  %511 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %496, i32 -8388608, i1 %496) #2, !dbg !95
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %471, i1 %497, i32 -8388608, i1 %497) #2, !dbg !95
  %513 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %498, i32 -8388608, i1 %498) #2, !dbg !95
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %473, i1 %499, i32 -8388608, i1 %499) #2, !dbg !95
  %515 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %475, i1 %500, i32 -8388608, i1 %500) #2, !dbg !95
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %507, i1 %501, i32 -8388608, i1 %501) #2, !dbg !95
  %517 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %509, i1 %503, i32 -8388608, i1 %503) #2, !dbg !95
  %518 = and i1 %424, %82, !dbg !96
  %519 = and i1 %211, %424, !dbg !96
  %520 = and i1 %102, %424, !dbg !96
  %521 = or i32 %423, %103, !dbg !96
  %522 = icmp ult i32 %521, 16, !dbg !96
  %523 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %438, i1 %518, i32 -8388608, i1 %518, i32 -8388608, i1 %518) #2, !dbg !97
  %524 = extractvalue { i32, i32 } %523, 0, !dbg !97
  %525 = extractvalue { i32, i32 } %523, 1, !dbg !97
  %526 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %440, i1 %519, i32 -8388608, i1 %519, i32 -8388608, i1 %519) #2, !dbg !97
  %527 = extractvalue { i32, i32 } %526, 0, !dbg !97
  %528 = extractvalue { i32, i32 } %526, 1, !dbg !97
  %529 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %475, i1 %520, i32 -8388608, i1 %520, i32 -8388608, i1 %520) #2, !dbg !97
  %530 = extractvalue { i32, i32 } %529, 0, !dbg !97
  %531 = extractvalue { i32, i32 } %529, 1, !dbg !97
  %532 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %509, i1 %522, i32 -8388608, i1 %522, i32 -8388608, i1 %522) #2, !dbg !97
  %533 = extractvalue { i32, i32 } %532, 0, !dbg !97
  %534 = extractvalue { i32, i32 } %532, 1, !dbg !97
  %535 = add nsw i32 %141, 2, !dbg !39
  %536 = icmp ult i32 %535, 16, !dbg !39
  %537 = and i1 %25, %536, !dbg !98
  %538 = and i1 %88, %536, !dbg !98
  %539 = and i1 %26, %536, !dbg !98
  %540 = and i1 %28, %536, !dbg !98
  %541 = add i32 %15, 30, !dbg !99
  %542 = add i32 %15, 32, !dbg !99
  %543 = add i32 %15, 34, !dbg !99
  %544 = add i32 %15, 36, !dbg !99
  %545 = sext i32 %541 to i64, !dbg !100
  %546 = getelementptr float, ptr addrspace(1) %0, i64 %545, !dbg !100
  %547 = sext i32 %542 to i64, !dbg !100
  %548 = getelementptr float, ptr addrspace(1) %0, i64 %547, !dbg !100
  %549 = sext i32 %543 to i64, !dbg !100
  %550 = getelementptr float, ptr addrspace(1) %0, i64 %549, !dbg !100
  %551 = sext i32 %544 to i64, !dbg !100
  %552 = getelementptr float, ptr addrspace(1) %0, i64 %551, !dbg !100
  %553 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %546, i1 %537, i32 -8388608, i1 %537, i32 -8388608, i1 %537) #2, !dbg !101
  %554 = extractvalue { i32, i32 } %553, 0, !dbg !101
  %555 = extractvalue { i32, i32 } %553, 1, !dbg !101
  %556 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %548, i1 %538, i32 -8388608, i1 %538, i32 -8388608, i1 %538) #2, !dbg !101
  %557 = extractvalue { i32, i32 } %556, 0, !dbg !101
  %558 = extractvalue { i32, i32 } %556, 1, !dbg !101
  %559 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %550, i1 %539, i32 -8388608, i1 %539, i32 -8388608, i1 %539) #2, !dbg !101
  %560 = extractvalue { i32, i32 } %559, 0, !dbg !101
  %561 = extractvalue { i32, i32 } %559, 1, !dbg !101
  %562 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %552, i1 %540, i32 -8388608, i1 %540, i32 -8388608, i1 %540) #2, !dbg !101
  %563 = extractvalue { i32, i32 } %562, 0, !dbg !101
  %564 = extractvalue { i32, i32 } %562, 1, !dbg !101
  %565 = and i1 %41, %536, !dbg !102
  %566 = and i1 %90, %536, !dbg !102
  %567 = and i1 %91, %536, !dbg !102
  %568 = and i1 %93, %536, !dbg !102
  %569 = and i1 %42, %536, !dbg !102
  %570 = and i1 %95, %536, !dbg !102
  %571 = and i1 %43, %536, !dbg !102
  %572 = and i1 %167, %536, !dbg !102
  %573 = add i32 %15, 31, !dbg !103
  %574 = add i32 %15, 33, !dbg !103
  %575 = add i32 %15, 35, !dbg !103
  %576 = add i32 %15, 37, !dbg !103
  %577 = add i32 %15, 38, !dbg !103
  %578 = sext i32 %573 to i64, !dbg !104
  %579 = getelementptr float, ptr addrspace(1) %0, i64 %578, !dbg !104
  %580 = sext i32 %574 to i64, !dbg !104
  %581 = getelementptr float, ptr addrspace(1) %0, i64 %580, !dbg !104
  %582 = sext i32 %575 to i64, !dbg !104
  %583 = getelementptr float, ptr addrspace(1) %0, i64 %582, !dbg !104
  %584 = sext i32 %576 to i64, !dbg !104
  %585 = getelementptr float, ptr addrspace(1) %0, i64 %584, !dbg !104
  %586 = sext i32 %577 to i64, !dbg !104
  %587 = getelementptr float, ptr addrspace(1) %0, i64 %586, !dbg !104
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %579, i1 %565, i32 -8388608, i1 %565) #2, !dbg !105
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %548, i1 %566, i32 -8388608, i1 %566) #2, !dbg !105
  %590 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %581, i1 %567, i32 -8388608, i1 %567) #2, !dbg !105
  %591 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %550, i1 %568, i32 -8388608, i1 %568) #2, !dbg !105
  %592 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %583, i1 %569, i32 -8388608, i1 %569) #2, !dbg !105
  %593 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %552, i1 %570, i32 -8388608, i1 %570) #2, !dbg !105
  %594 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %585, i1 %571, i32 -8388608, i1 %571) #2, !dbg !105
  %595 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %587, i1 %572, i32 -8388608, i1 %572) #2, !dbg !105
  %596 = and i1 %59, %536, !dbg !106
  %597 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %548, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596) #2, !dbg !107
  %598 = extractvalue { i32, i32, i32, i32 } %597, 0, !dbg !107
  %599 = extractvalue { i32, i32, i32, i32 } %597, 1, !dbg !107
  %600 = extractvalue { i32, i32, i32, i32 } %597, 2, !dbg !107
  %601 = extractvalue { i32, i32, i32, i32 } %597, 3, !dbg !107
  %602 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %552, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596, i32 -8388608, i1 %596) #2, !dbg !107
  %603 = extractvalue { i32, i32, i32, i32 } %602, 0, !dbg !107
  %604 = extractvalue { i32, i32, i32, i32 } %602, 1, !dbg !107
  %605 = extractvalue { i32, i32, i32, i32 } %602, 2, !dbg !107
  %606 = extractvalue { i32, i32, i32, i32 } %602, 3, !dbg !107
  %607 = and i1 %536, %64, !dbg !48
  %608 = and i1 %192, %536, !dbg !48
  %609 = and i1 %99, %536, !dbg !48
  %610 = and i1 %195, %536, !dbg !48
  %611 = and i1 %78, %536, !dbg !48
  %612 = and i1 %198, %536, !dbg !48
  %613 = and i1 %80, %536, !dbg !48
  %614 = or i32 %535, %189, !dbg !48
  %615 = icmp ult i32 %614, 16, !dbg !48
  %616 = add i32 %15, 39, !dbg !108
  %617 = add i32 %15, 40, !dbg !108
  %618 = sext i32 %616 to i64, !dbg !109
  %619 = getelementptr float, ptr addrspace(1) %0, i64 %618, !dbg !109
  %620 = sext i32 %617 to i64, !dbg !109
  %621 = getelementptr float, ptr addrspace(1) %0, i64 %620, !dbg !109
  %622 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %581, i1 %607, i32 -8388608, i1 %607) #2, !dbg !110
  %623 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %550, i1 %608, i32 -8388608, i1 %608) #2, !dbg !110
  %624 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %583, i1 %609, i32 -8388608, i1 %609) #2, !dbg !110
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %552, i1 %610, i32 -8388608, i1 %610) #2, !dbg !110
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %585, i1 %611, i32 -8388608, i1 %611) #2, !dbg !110
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %587, i1 %612, i32 -8388608, i1 %612) #2, !dbg !110
  %628 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %619, i1 %613, i32 -8388608, i1 %613) #2, !dbg !110
  %629 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %621, i1 %615, i32 -8388608, i1 %615) #2, !dbg !110
  %630 = and i1 %536, %82, !dbg !51
  %631 = and i1 %211, %536, !dbg !51
  %632 = and i1 %102, %536, !dbg !51
  %633 = or i32 %535, %103, !dbg !51
  %634 = icmp ult i32 %633, 16, !dbg !51
  %635 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %550, i1 %630, i32 -8388608, i1 %630, i32 -8388608, i1 %630) #2, !dbg !111
  %636 = extractvalue { i32, i32 } %635, 0, !dbg !111
  %637 = extractvalue { i32, i32 } %635, 1, !dbg !111
  %638 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %552, i1 %631, i32 -8388608, i1 %631, i32 -8388608, i1 %631) #2, !dbg !111
  %639 = extractvalue { i32, i32 } %638, 0, !dbg !111
  %640 = extractvalue { i32, i32 } %638, 1, !dbg !111
  %641 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %587, i1 %632, i32 -8388608, i1 %632, i32 -8388608, i1 %632) #2, !dbg !111
  %642 = extractvalue { i32, i32 } %641, 0, !dbg !111
  %643 = extractvalue { i32, i32 } %641, 1, !dbg !111
  %644 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %621, i1 %634, i32 -8388608, i1 %634, i32 -8388608, i1 %634) #2, !dbg !111
  %645 = extractvalue { i32, i32 } %644, 0, !dbg !111
  %646 = extractvalue { i32, i32 } %644, 1, !dbg !111
  %647 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !42
  %648 = insertelement <4 x i32> %647, i32 %149, i64 1, !dbg !42
  %649 = insertelement <4 x i32> %648, i32 %151, i64 2, !dbg !42
  %650 = insertelement <4 x i32> %649, i32 %152, i64 3, !dbg !42
  %651 = bitcast <4 x i32> %650 to <4 x float>, !dbg !42
  %652 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !44
  %653 = insertelement <4 x i32> %652, i32 %170, i64 1, !dbg !44
  %654 = insertelement <4 x i32> %653, i32 %171, i64 2, !dbg !44
  %655 = insertelement <4 x i32> %654, i32 %172, i64 3, !dbg !44
  %656 = bitcast <4 x i32> %655 to <4 x float>, !dbg !44
  %657 = fcmp ogt <4 x float> %656, %651, !dbg !112
  %658 = fcmp uno <4 x float> %656, zeroinitializer, !dbg !116
  %659 = or <4 x i1> %657, %658, !dbg !117
  %.v = select <4 x i1> %659, <4 x i32> %655, <4 x i32> %650, !dbg !118
  %660 = bitcast <4 x i32> %.v to <4 x float>, !dbg !118
  %661 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !46
  %662 = insertelement <4 x i32> %661, i32 %180, i64 1, !dbg !46
  %663 = insertelement <4 x i32> %662, i32 %181, i64 2, !dbg !46
  %664 = insertelement <4 x i32> %663, i32 %182, i64 3, !dbg !46
  %665 = bitcast <4 x i32> %664 to <4 x float>, !dbg !46
  %666 = fcmp olt <4 x float> %660, %665, !dbg !119
  %667 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !49
  %668 = insertelement <4 x i32> %667, i32 %203, i64 1, !dbg !49
  %669 = insertelement <4 x i32> %668, i32 %204, i64 2, !dbg !49
  %670 = insertelement <4 x i32> %669, i32 %205, i64 3, !dbg !49
  %671 = bitcast <4 x i32> %670 to <4 x float>, !dbg !49
  %672 = fcmp uno <4 x float> %665, zeroinitializer, !dbg !121
  %673 = or <4 x i1> %666, %672, !dbg !122
  %.v15 = select <4 x i1> %673, <4 x i32> %664, <4 x i32> %.v, !dbg !123
  %674 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !123
  %675 = fcmp olt <4 x float> %674, %671, !dbg !124
  %676 = fcmp uno <4 x float> %671, zeroinitializer, !dbg !126
  %677 = or <4 x i1> %676, %675, !dbg !127
  %.v16 = select <4 x i1> %677, <4 x i32> %670, <4 x i32> %.v15, !dbg !128
  %678 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !128
  %679 = zext <4 x i1> %657 to <4 x i8>, !dbg !129
  %680 = select <4 x i1> %666, <4 x i8> splat (i8 2), <4 x i8> %679, !dbg !130
  %681 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !42
  %682 = insertelement <4 x i32> %681, i32 %155, i64 1, !dbg !42
  %683 = insertelement <4 x i32> %682, i32 %157, i64 2, !dbg !42
  %684 = insertelement <4 x i32> %683, i32 %158, i64 3, !dbg !42
  %685 = bitcast <4 x i32> %684 to <4 x float>, !dbg !42
  %686 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !44
  %687 = insertelement <4 x i32> %686, i32 %174, i64 1, !dbg !44
  %688 = insertelement <4 x i32> %687, i32 %175, i64 2, !dbg !44
  %689 = insertelement <4 x i32> %688, i32 %176, i64 3, !dbg !44
  %690 = bitcast <4 x i32> %689 to <4 x float>, !dbg !44
  %691 = fcmp ogt <4 x float> %690, %685, !dbg !112
  %692 = fcmp uno <4 x float> %690, zeroinitializer, !dbg !116
  %693 = or <4 x i1> %691, %692, !dbg !117
  %.v17 = select <4 x i1> %693, <4 x i32> %689, <4 x i32> %684, !dbg !118
  %694 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !118
  %695 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !46
  %696 = insertelement <4 x i32> %695, i32 %185, i64 1, !dbg !46
  %697 = insertelement <4 x i32> %696, i32 %186, i64 2, !dbg !46
  %698 = insertelement <4 x i32> %697, i32 %187, i64 3, !dbg !46
  %699 = bitcast <4 x i32> %698 to <4 x float>, !dbg !46
  %700 = fcmp olt <4 x float> %694, %699, !dbg !119
  %701 = insertelement <4 x i32> poison, i32 %206, i64 0, !dbg !49
  %702 = insertelement <4 x i32> %701, i32 %207, i64 1, !dbg !49
  %703 = insertelement <4 x i32> %702, i32 %208, i64 2, !dbg !49
  %704 = insertelement <4 x i32> %703, i32 %209, i64 3, !dbg !49
  %705 = bitcast <4 x i32> %704 to <4 x float>, !dbg !49
  %706 = fcmp uno <4 x float> %699, zeroinitializer, !dbg !121
  %707 = or <4 x i1> %700, %706, !dbg !122
  %.v18 = select <4 x i1> %707, <4 x i32> %698, <4 x i32> %.v17, !dbg !123
  %708 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !123
  %709 = fcmp olt <4 x float> %708, %705, !dbg !124
  %710 = fcmp uno <4 x float> %705, zeroinitializer, !dbg !126
  %711 = or <4 x i1> %709, %710, !dbg !127
  %.v19 = select <4 x i1> %711, <4 x i32> %704, <4 x i32> %.v18, !dbg !128
  %712 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !128
  %713 = zext <4 x i1> %691 to <4 x i8>, !dbg !129
  %714 = select <4 x i1> %700, <4 x i8> splat (i8 2), <4 x i8> %713, !dbg !130
  %715 = insertelement <4 x i32> poison, i32 %216, i64 0, !dbg !52
  %716 = insertelement <4 x i32> %715, i32 %217, i64 1, !dbg !52
  %717 = insertelement <4 x i32> %716, i32 %219, i64 2, !dbg !52
  %718 = insertelement <4 x i32> %717, i32 %220, i64 3, !dbg !52
  %719 = bitcast <4 x i32> %718 to <4 x float>, !dbg !52
  %720 = fcmp uno <4 x float> %719, zeroinitializer, !dbg !131
  %721 = fcmp olt <4 x float> %678, %719, !dbg !133
  %722 = or <4 x i1> %721, %720, !dbg !134
  %.v20 = select <4 x i1> %722, <4 x i32> %718, <4 x i32> %.v16, !dbg !135
  %723 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !135
  %724 = insertelement <4 x i32> poison, i32 %233, i64 0, !dbg !55
  %725 = insertelement <4 x i32> %724, i32 %234, i64 1, !dbg !55
  %726 = insertelement <4 x i32> %725, i32 %236, i64 2, !dbg !55
  %727 = insertelement <4 x i32> %726, i32 %237, i64 3, !dbg !55
  %728 = bitcast <4 x i32> %727 to <4 x float>, !dbg !55
  %729 = fcmp olt <4 x float> %723, %728, !dbg !136
  %730 = fcmp uno <4 x float> %728, zeroinitializer, !dbg !138
  %731 = or <4 x i1> %729, %730, !dbg !139
  %.v21 = select <4 x i1> %731, <4 x i32> %727, <4 x i32> %.v20, !dbg !140
  %732 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !140
  %733 = insertelement <4 x i32> poison, i32 %252, i64 0, !dbg !57
  %734 = insertelement <4 x i32> %733, i32 %253, i64 1, !dbg !57
  %735 = insertelement <4 x i32> %734, i32 %254, i64 2, !dbg !57
  %736 = insertelement <4 x i32> %735, i32 %255, i64 3, !dbg !57
  %737 = bitcast <4 x i32> %736 to <4 x float>, !dbg !57
  %738 = fcmp olt <4 x float> %732, %737, !dbg !141
  %739 = fcmp uno <4 x float> %737, zeroinitializer, !dbg !143
  %740 = or <4 x i1> %738, %739, !dbg !144
  %.v22 = select <4 x i1> %740, <4 x i32> %736, <4 x i32> %.v21, !dbg !145
  %741 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !145
  %742 = insertelement <4 x i32> poison, i32 %262, i64 0, !dbg !59
  %743 = insertelement <4 x i32> %742, i32 %263, i64 1, !dbg !59
  %744 = insertelement <4 x i32> %743, i32 %264, i64 2, !dbg !59
  %745 = insertelement <4 x i32> %744, i32 %265, i64 3, !dbg !59
  %746 = bitcast <4 x i32> %745 to <4 x float>, !dbg !59
  %747 = fcmp olt <4 x float> %741, %746, !dbg !146
  %748 = fcmp uno <4 x float> %746, zeroinitializer, !dbg !148
  %749 = or <4 x i1> %747, %748, !dbg !149
  %.v23 = select <4 x i1> %749, <4 x i32> %745, <4 x i32> %.v22, !dbg !150
  %750 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !150
  %751 = insertelement <4 x i32> poison, i32 %279, i64 0, !dbg !61
  %752 = insertelement <4 x i32> %751, i32 %280, i64 1, !dbg !61
  %753 = insertelement <4 x i32> %752, i32 %281, i64 2, !dbg !61
  %754 = insertelement <4 x i32> %753, i32 %282, i64 3, !dbg !61
  %755 = bitcast <4 x i32> %754 to <4 x float>, !dbg !61
  %756 = fcmp olt <4 x float> %750, %755, !dbg !151
  %757 = fcmp uno <4 x float> %755, zeroinitializer, !dbg !153
  %758 = or <4 x i1> %757, %756, !dbg !154
  %.v24 = select <4 x i1> %758, <4 x i32> %754, <4 x i32> %.v23, !dbg !155
  %759 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !155
  %760 = insertelement <4 x i32> poison, i32 %292, i64 0, !dbg !63
  %761 = insertelement <4 x i32> %760, i32 %293, i64 1, !dbg !63
  %762 = insertelement <4 x i32> %761, i32 %295, i64 2, !dbg !63
  %763 = insertelement <4 x i32> %762, i32 %296, i64 3, !dbg !63
  %764 = bitcast <4 x i32> %763 to <4 x float>, !dbg !63
  %765 = fcmp olt <4 x float> %759, %764, !dbg !156
  %766 = fcmp uno <4 x float> %764, zeroinitializer, !dbg !158
  %767 = or <4 x i1> %765, %766, !dbg !159
  %.v25 = select <4 x i1> %767, <4 x i32> %763, <4 x i32> %.v24, !dbg !160
  %768 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !160
  %769 = insertelement <4 x i32> poison, i32 %322, i64 0, !dbg !67
  %770 = insertelement <4 x i32> %769, i32 %323, i64 1, !dbg !67
  %771 = insertelement <4 x i32> %770, i32 %325, i64 2, !dbg !67
  %772 = insertelement <4 x i32> %771, i32 %326, i64 3, !dbg !67
  %773 = bitcast <4 x i32> %772 to <4 x float>, !dbg !67
  %774 = fcmp olt <4 x float> %768, %773, !dbg !161
  %775 = fcmp uno <4 x float> %773, zeroinitializer, !dbg !163
  %776 = or <4 x i1> %774, %775, !dbg !164
  %.v26 = select <4 x i1> %776, <4 x i32> %772, <4 x i32> %.v25, !dbg !165
  %777 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !165
  %778 = insertelement <4 x i32> poison, i32 %362, i64 0, !dbg !71
  %779 = insertelement <4 x i32> %778, i32 %363, i64 1, !dbg !71
  %780 = insertelement <4 x i32> %779, i32 %364, i64 2, !dbg !71
  %781 = insertelement <4 x i32> %780, i32 %365, i64 3, !dbg !71
  %782 = bitcast <4 x i32> %781 to <4 x float>, !dbg !71
  %783 = fcmp olt <4 x float> %777, %782, !dbg !166
  %784 = fcmp uno <4 x float> %782, zeroinitializer, !dbg !168
  %785 = or <4 x i1> %783, %784, !dbg !169
  %.v27 = select <4 x i1> %785, <4 x i32> %781, <4 x i32> %.v26, !dbg !170
  %786 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !170
  %787 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !73
  %788 = insertelement <4 x i32> %787, i32 %376, i64 1, !dbg !73
  %789 = insertelement <4 x i32> %788, i32 %377, i64 2, !dbg !73
  %790 = insertelement <4 x i32> %789, i32 %378, i64 3, !dbg !73
  %791 = bitcast <4 x i32> %790 to <4 x float>, !dbg !73
  %792 = fcmp olt <4 x float> %786, %791, !dbg !171
  %793 = fcmp uno <4 x float> %791, zeroinitializer, !dbg !173
  %794 = or <4 x i1> %792, %793, !dbg !174
  %.v28 = select <4 x i1> %794, <4 x i32> %790, <4 x i32> %.v27, !dbg !175
  %795 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !175
  %796 = insertelement <4 x i32> poison, i32 %398, i64 0, !dbg !77
  %797 = insertelement <4 x i32> %796, i32 %399, i64 1, !dbg !77
  %798 = insertelement <4 x i32> %797, i32 %400, i64 2, !dbg !77
  %799 = insertelement <4 x i32> %798, i32 %401, i64 3, !dbg !77
  %800 = bitcast <4 x i32> %799 to <4 x float>, !dbg !77
  %801 = fcmp olt <4 x float> %795, %800, !dbg !176
  %802 = insertelement <4 x i32> poison, i32 %412, i64 0, !dbg !80
  %803 = insertelement <4 x i32> %802, i32 %413, i64 1, !dbg !80
  %804 = insertelement <4 x i32> %803, i32 %415, i64 2, !dbg !80
  %805 = insertelement <4 x i32> %804, i32 %416, i64 3, !dbg !80
  %806 = bitcast <4 x i32> %805 to <4 x float>, !dbg !80
  %807 = fcmp uno <4 x float> %800, zeroinitializer, !dbg !178
  %808 = or <4 x i1> %807, %801, !dbg !179
  %.v29 = select <4 x i1> %808, <4 x i32> %799, <4 x i32> %.v28, !dbg !180
  %809 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !180
  %810 = fcmp olt <4 x float> %809, %806, !dbg !181
  %811 = fcmp uno <4 x float> %806, zeroinitializer, !dbg !183
  %812 = or <4 x i1> %810, %811, !dbg !184
  %.v30 = select <4 x i1> %812, <4 x i32> %805, <4 x i32> %.v29, !dbg !185
  %813 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !185
  %814 = select <4 x i1> %675, <4 x i8> splat (i8 3), <4 x i8> %680, !dbg !186
  %815 = select <4 x i1> %721, <4 x i8> splat (i8 4), <4 x i8> %814, !dbg !187
  %816 = select <4 x i1> %729, <4 x i8> splat (i8 5), <4 x i8> %815, !dbg !188
  %817 = select <4 x i1> %738, <4 x i8> splat (i8 6), <4 x i8> %816, !dbg !189
  %818 = select <4 x i1> %747, <4 x i8> splat (i8 7), <4 x i8> %817, !dbg !190
  %819 = select <4 x i1> %756, <4 x i8> splat (i8 8), <4 x i8> %818, !dbg !191
  %820 = select <4 x i1> %765, <4 x i8> splat (i8 9), <4 x i8> %819, !dbg !192
  %821 = select <4 x i1> %774, <4 x i8> splat (i8 10), <4 x i8> %820, !dbg !193
  %822 = select <4 x i1> %783, <4 x i8> splat (i8 11), <4 x i8> %821, !dbg !194
  %823 = select <4 x i1> %792, <4 x i8> splat (i8 12), <4 x i8> %822, !dbg !195
  %824 = select <4 x i1> %801, <4 x i8> splat (i8 13), <4 x i8> %823, !dbg !196
  %825 = insertelement <4 x i32> poison, i32 %222, i64 0, !dbg !52
  %826 = insertelement <4 x i32> %825, i32 %223, i64 1, !dbg !52
  %827 = insertelement <4 x i32> %826, i32 %225, i64 2, !dbg !52
  %828 = insertelement <4 x i32> %827, i32 %226, i64 3, !dbg !52
  %829 = bitcast <4 x i32> %828 to <4 x float>, !dbg !52
  %830 = fcmp uno <4 x float> %829, zeroinitializer, !dbg !131
  %831 = fcmp olt <4 x float> %712, %829, !dbg !133
  %832 = or <4 x i1> %831, %830, !dbg !134
  %.v31 = select <4 x i1> %832, <4 x i32> %828, <4 x i32> %.v19, !dbg !135
  %833 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !135
  %834 = insertelement <4 x i32> poison, i32 %239, i64 0, !dbg !55
  %835 = insertelement <4 x i32> %834, i32 %240, i64 1, !dbg !55
  %836 = insertelement <4 x i32> %835, i32 %242, i64 2, !dbg !55
  %837 = insertelement <4 x i32> %836, i32 %243, i64 3, !dbg !55
  %838 = bitcast <4 x i32> %837 to <4 x float>, !dbg !55
  %839 = fcmp olt <4 x float> %833, %838, !dbg !136
  %840 = fcmp uno <4 x float> %838, zeroinitializer, !dbg !138
  %841 = or <4 x i1> %839, %840, !dbg !139
  %.v32 = select <4 x i1> %841, <4 x i32> %837, <4 x i32> %.v31, !dbg !140
  %842 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !140
  %843 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !57
  %844 = insertelement <4 x i32> %843, i32 %257, i64 1, !dbg !57
  %845 = insertelement <4 x i32> %844, i32 %258, i64 2, !dbg !57
  %846 = insertelement <4 x i32> %845, i32 %259, i64 3, !dbg !57
  %847 = bitcast <4 x i32> %846 to <4 x float>, !dbg !57
  %848 = fcmp olt <4 x float> %842, %847, !dbg !141
  %849 = fcmp uno <4 x float> %847, zeroinitializer, !dbg !143
  %850 = or <4 x i1> %848, %849, !dbg !144
  %.v33 = select <4 x i1> %850, <4 x i32> %846, <4 x i32> %.v32, !dbg !145
  %851 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !145
  %852 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !59
  %853 = insertelement <4 x i32> %852, i32 %268, i64 1, !dbg !59
  %854 = insertelement <4 x i32> %853, i32 %269, i64 2, !dbg !59
  %855 = insertelement <4 x i32> %854, i32 %270, i64 3, !dbg !59
  %856 = bitcast <4 x i32> %855 to <4 x float>, !dbg !59
  %857 = fcmp olt <4 x float> %851, %856, !dbg !146
  %858 = fcmp uno <4 x float> %856, zeroinitializer, !dbg !148
  %859 = or <4 x i1> %857, %858, !dbg !149
  %.v34 = select <4 x i1> %859, <4 x i32> %855, <4 x i32> %.v33, !dbg !150
  %860 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !150
  %861 = insertelement <4 x i32> poison, i32 %283, i64 0, !dbg !61
  %862 = insertelement <4 x i32> %861, i32 %284, i64 1, !dbg !61
  %863 = insertelement <4 x i32> %862, i32 %285, i64 2, !dbg !61
  %864 = insertelement <4 x i32> %863, i32 %286, i64 3, !dbg !61
  %865 = bitcast <4 x i32> %864 to <4 x float>, !dbg !61
  %866 = fcmp olt <4 x float> %860, %865, !dbg !151
  %867 = fcmp uno <4 x float> %865, zeroinitializer, !dbg !153
  %868 = or <4 x i1> %866, %867, !dbg !154
  %.v35 = select <4 x i1> %868, <4 x i32> %864, <4 x i32> %.v34, !dbg !155
  %869 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !155
  %870 = insertelement <4 x i32> poison, i32 %298, i64 0, !dbg !63
  %871 = insertelement <4 x i32> %870, i32 %299, i64 1, !dbg !63
  %872 = insertelement <4 x i32> %871, i32 %301, i64 2, !dbg !63
  %873 = insertelement <4 x i32> %872, i32 %302, i64 3, !dbg !63
  %874 = bitcast <4 x i32> %873 to <4 x float>, !dbg !63
  %875 = fcmp olt <4 x float> %869, %874, !dbg !156
  %876 = fcmp uno <4 x float> %874, zeroinitializer, !dbg !158
  %877 = or <4 x i1> %875, %876, !dbg !159
  %.v36 = select <4 x i1> %877, <4 x i32> %873, <4 x i32> %.v35, !dbg !160
  %878 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !160
  %879 = insertelement <4 x i32> poison, i32 %328, i64 0, !dbg !67
  %880 = insertelement <4 x i32> %879, i32 %329, i64 1, !dbg !67
  %881 = insertelement <4 x i32> %880, i32 %331, i64 2, !dbg !67
  %882 = insertelement <4 x i32> %881, i32 %332, i64 3, !dbg !67
  %883 = bitcast <4 x i32> %882 to <4 x float>, !dbg !67
  %884 = fcmp olt <4 x float> %878, %883, !dbg !161
  %885 = fcmp uno <4 x float> %883, zeroinitializer, !dbg !163
  %886 = or <4 x i1> %884, %885, !dbg !164
  %.v37 = select <4 x i1> %886, <4 x i32> %882, <4 x i32> %.v36, !dbg !165
  %887 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !165
  %888 = insertelement <4 x i32> poison, i32 %366, i64 0, !dbg !71
  %889 = insertelement <4 x i32> %888, i32 %367, i64 1, !dbg !71
  %890 = insertelement <4 x i32> %889, i32 %368, i64 2, !dbg !71
  %891 = insertelement <4 x i32> %890, i32 %369, i64 3, !dbg !71
  %892 = bitcast <4 x i32> %891 to <4 x float>, !dbg !71
  %893 = fcmp olt <4 x float> %887, %892, !dbg !166
  %894 = fcmp uno <4 x float> %892, zeroinitializer, !dbg !168
  %895 = or <4 x i1> %893, %894, !dbg !169
  %.v38 = select <4 x i1> %895, <4 x i32> %891, <4 x i32> %.v37, !dbg !170
  %896 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !170
  %897 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !73
  %898 = insertelement <4 x i32> %897, i32 %381, i64 1, !dbg !73
  %899 = insertelement <4 x i32> %898, i32 %382, i64 2, !dbg !73
  %900 = insertelement <4 x i32> %899, i32 %383, i64 3, !dbg !73
  %901 = bitcast <4 x i32> %900 to <4 x float>, !dbg !73
  %902 = fcmp olt <4 x float> %896, %901, !dbg !171
  %903 = fcmp uno <4 x float> %901, zeroinitializer, !dbg !173
  %904 = or <4 x i1> %902, %903, !dbg !174
  %.v39 = select <4 x i1> %904, <4 x i32> %900, <4 x i32> %.v38, !dbg !175
  %905 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !175
  %906 = insertelement <4 x i32> poison, i32 %402, i64 0, !dbg !77
  %907 = insertelement <4 x i32> %906, i32 %403, i64 1, !dbg !77
  %908 = insertelement <4 x i32> %907, i32 %404, i64 2, !dbg !77
  %909 = insertelement <4 x i32> %908, i32 %405, i64 3, !dbg !77
  %910 = bitcast <4 x i32> %909 to <4 x float>, !dbg !77
  %911 = fcmp olt <4 x float> %905, %910, !dbg !176
  %912 = insertelement <4 x i32> poison, i32 %418, i64 0, !dbg !80
  %913 = insertelement <4 x i32> %912, i32 %419, i64 1, !dbg !80
  %914 = insertelement <4 x i32> %913, i32 %421, i64 2, !dbg !80
  %915 = insertelement <4 x i32> %914, i32 %422, i64 3, !dbg !80
  %916 = bitcast <4 x i32> %915 to <4 x float>, !dbg !80
  %917 = fcmp uno <4 x float> %910, zeroinitializer, !dbg !178
  %918 = or <4 x i1> %911, %917, !dbg !179
  %.v40 = select <4 x i1> %918, <4 x i32> %909, <4 x i32> %.v39, !dbg !180
  %919 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !180
  %920 = fcmp olt <4 x float> %919, %916, !dbg !181
  %921 = fcmp uno <4 x float> %916, zeroinitializer, !dbg !183
  %922 = or <4 x i1> %920, %921, !dbg !184
  %.v41 = select <4 x i1> %922, <4 x i32> %915, <4 x i32> %.v40, !dbg !185
  %923 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !185
  %924 = select <4 x i1> %709, <4 x i8> splat (i8 3), <4 x i8> %714, !dbg !186
  %925 = select <4 x i1> %831, <4 x i8> splat (i8 4), <4 x i8> %924, !dbg !187
  %926 = select <4 x i1> %839, <4 x i8> splat (i8 5), <4 x i8> %925, !dbg !188
  %927 = select <4 x i1> %848, <4 x i8> splat (i8 6), <4 x i8> %926, !dbg !189
  %928 = select <4 x i1> %857, <4 x i8> splat (i8 7), <4 x i8> %927, !dbg !190
  %929 = select <4 x i1> %866, <4 x i8> splat (i8 8), <4 x i8> %928, !dbg !191
  %930 = select <4 x i1> %875, <4 x i8> splat (i8 9), <4 x i8> %929, !dbg !192
  %931 = select <4 x i1> %884, <4 x i8> splat (i8 10), <4 x i8> %930, !dbg !193
  %932 = select <4 x i1> %893, <4 x i8> splat (i8 11), <4 x i8> %931, !dbg !194
  %933 = select <4 x i1> %902, <4 x i8> splat (i8 12), <4 x i8> %932, !dbg !195
  %934 = select <4 x i1> %911, <4 x i8> splat (i8 13), <4 x i8> %933, !dbg !196
  %935 = insertelement <4 x i32> poison, i32 %442, i64 0, !dbg !85
  %936 = insertelement <4 x i32> %935, i32 %443, i64 1, !dbg !85
  %937 = insertelement <4 x i32> %936, i32 %445, i64 2, !dbg !85
  %938 = insertelement <4 x i32> %937, i32 %446, i64 3, !dbg !85
  %939 = bitcast <4 x i32> %938 to <4 x float>, !dbg !85
  %940 = fcmp uno <4 x float> %939, zeroinitializer, !dbg !197
  %941 = fcmp olt <4 x float> %813, %939, !dbg !199
  %942 = or <4 x i1> %941, %940, !dbg !200
  %.v42 = select <4 x i1> %942, <4 x i32> %938, <4 x i32> %.v30, !dbg !201
  %943 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !201
  %944 = insertelement <4 x i32> poison, i32 %476, i64 0, !dbg !89
  %945 = insertelement <4 x i32> %944, i32 %477, i64 1, !dbg !89
  %946 = insertelement <4 x i32> %945, i32 %478, i64 2, !dbg !89
  %947 = insertelement <4 x i32> %946, i32 %479, i64 3, !dbg !89
  %948 = bitcast <4 x i32> %947 to <4 x float>, !dbg !89
  %949 = fcmp olt <4 x float> %943, %948, !dbg !202
  %950 = fcmp uno <4 x float> %948, zeroinitializer, !dbg !204
  %951 = or <4 x i1> %949, %950, !dbg !205
  %.v43 = select <4 x i1> %951, <4 x i32> %947, <4 x i32> %.v42, !dbg !206
  %952 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !206
  %953 = insertelement <4 x i32> poison, i32 %486, i64 0, !dbg !91
  %954 = insertelement <4 x i32> %953, i32 %487, i64 1, !dbg !91
  %955 = insertelement <4 x i32> %954, i32 %488, i64 2, !dbg !91
  %956 = insertelement <4 x i32> %955, i32 %489, i64 3, !dbg !91
  %957 = bitcast <4 x i32> %956 to <4 x float>, !dbg !91
  %958 = fcmp olt <4 x float> %952, %957, !dbg !207
  %959 = fcmp uno <4 x float> %957, zeroinitializer, !dbg !209
  %960 = or <4 x i1> %958, %959, !dbg !210
  %.v44 = select <4 x i1> %960, <4 x i32> %956, <4 x i32> %.v43, !dbg !211
  %961 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !211
  %962 = insertelement <4 x i32> poison, i32 %510, i64 0, !dbg !95
  %963 = insertelement <4 x i32> %962, i32 %511, i64 1, !dbg !95
  %964 = insertelement <4 x i32> %963, i32 %512, i64 2, !dbg !95
  %965 = insertelement <4 x i32> %964, i32 %513, i64 3, !dbg !95
  %966 = bitcast <4 x i32> %965 to <4 x float>, !dbg !95
  %967 = fcmp olt <4 x float> %961, %966, !dbg !212
  %968 = fcmp uno <4 x float> %966, zeroinitializer, !dbg !214
  %969 = or <4 x i1> %967, %968, !dbg !215
  %.v45 = select <4 x i1> %969, <4 x i32> %965, <4 x i32> %.v44, !dbg !216
  %970 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !216
  %971 = insertelement <4 x i32> poison, i32 %524, i64 0, !dbg !97
  %972 = insertelement <4 x i32> %971, i32 %525, i64 1, !dbg !97
  %973 = insertelement <4 x i32> %972, i32 %527, i64 2, !dbg !97
  %974 = insertelement <4 x i32> %973, i32 %528, i64 3, !dbg !97
  %975 = bitcast <4 x i32> %974 to <4 x float>, !dbg !97
  %976 = fcmp olt <4 x float> %970, %975, !dbg !217
  %977 = fcmp uno <4 x float> %975, zeroinitializer, !dbg !219
  %978 = or <4 x i1> %976, %977, !dbg !220
  %.v46 = select <4 x i1> %978, <4 x i32> %974, <4 x i32> %.v45, !dbg !221
  %979 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !221
  %980 = insertelement <4 x i32> poison, i32 %554, i64 0, !dbg !101
  %981 = insertelement <4 x i32> %980, i32 %555, i64 1, !dbg !101
  %982 = insertelement <4 x i32> %981, i32 %557, i64 2, !dbg !101
  %983 = insertelement <4 x i32> %982, i32 %558, i64 3, !dbg !101
  %984 = bitcast <4 x i32> %983 to <4 x float>, !dbg !101
  %985 = fcmp olt <4 x float> %979, %984, !dbg !222
  %986 = fcmp uno <4 x float> %984, zeroinitializer, !dbg !224
  %987 = or <4 x i1> %985, %986, !dbg !225
  %.v47 = select <4 x i1> %987, <4 x i32> %983, <4 x i32> %.v46, !dbg !226
  %988 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !226
  %989 = insertelement <4 x i32> poison, i32 %588, i64 0, !dbg !105
  %990 = insertelement <4 x i32> %989, i32 %589, i64 1, !dbg !105
  %991 = insertelement <4 x i32> %990, i32 %590, i64 2, !dbg !105
  %992 = insertelement <4 x i32> %991, i32 %591, i64 3, !dbg !105
  %993 = bitcast <4 x i32> %992 to <4 x float>, !dbg !105
  %994 = fcmp olt <4 x float> %988, %993, !dbg !227
  %995 = fcmp uno <4 x float> %993, zeroinitializer, !dbg !229
  %996 = or <4 x i1> %994, %995, !dbg !230
  %.v48 = select <4 x i1> %996, <4 x i32> %992, <4 x i32> %.v47, !dbg !231
  %997 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !231
  %998 = insertelement <4 x i32> poison, i32 %598, i64 0, !dbg !107
  %999 = insertelement <4 x i32> %998, i32 %599, i64 1, !dbg !107
  %1000 = insertelement <4 x i32> %999, i32 %600, i64 2, !dbg !107
  %1001 = insertelement <4 x i32> %1000, i32 %601, i64 3, !dbg !107
  %1002 = bitcast <4 x i32> %1001 to <4 x float>, !dbg !107
  %1003 = fcmp olt <4 x float> %997, %1002, !dbg !232
  %1004 = fcmp uno <4 x float> %1002, zeroinitializer, !dbg !234
  %1005 = or <4 x i1> %1003, %1004, !dbg !235
  %.v49 = select <4 x i1> %1005, <4 x i32> %1001, <4 x i32> %.v48, !dbg !236
  %1006 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !236
  %1007 = insertelement <4 x i32> poison, i32 %622, i64 0, !dbg !110
  %1008 = insertelement <4 x i32> %1007, i32 %623, i64 1, !dbg !110
  %1009 = insertelement <4 x i32> %1008, i32 %624, i64 2, !dbg !110
  %1010 = insertelement <4 x i32> %1009, i32 %625, i64 3, !dbg !110
  %1011 = bitcast <4 x i32> %1010 to <4 x float>, !dbg !110
  %1012 = fcmp olt <4 x float> %1006, %1011, !dbg !237
  %1013 = fcmp uno <4 x float> %1011, zeroinitializer, !dbg !239
  %1014 = or <4 x i1> %1012, %1013, !dbg !240
  %.v50 = select <4 x i1> %1014, <4 x i32> %1010, <4 x i32> %.v49, !dbg !241
  %1015 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !241
  %1016 = insertelement <4 x i32> poison, i32 %636, i64 0, !dbg !111
  %1017 = insertelement <4 x i32> %1016, i32 %637, i64 1, !dbg !111
  %1018 = insertelement <4 x i32> %1017, i32 %639, i64 2, !dbg !111
  %1019 = insertelement <4 x i32> %1018, i32 %640, i64 3, !dbg !111
  %1020 = bitcast <4 x i32> %1019 to <4 x float>, !dbg !111
  %1021 = fcmp olt <4 x float> %1015, %1020, !dbg !242
  %1022 = extractelement <4 x i1> %1021, i64 0, !dbg !244
  %1023 = extractelement <4 x i1> %1021, i64 1, !dbg !244
  %1024 = extractelement <4 x i1> %1021, i64 2, !dbg !244
  %1025 = extractelement <4 x i1> %1021, i64 3, !dbg !244
  %1026 = select <4 x i1> %810, <4 x i8> splat (i8 14), <4 x i8> %824, !dbg !245
  %1027 = select <4 x i1> %941, <4 x i8> splat (i8 15), <4 x i8> %1026, !dbg !246
  %1028 = select <4 x i1> %949, <4 x i8> splat (i8 16), <4 x i8> %1027, !dbg !247
  %1029 = select <4 x i1> %958, <4 x i8> splat (i8 17), <4 x i8> %1028, !dbg !248
  %1030 = select <4 x i1> %967, <4 x i8> splat (i8 18), <4 x i8> %1029, !dbg !249
  %1031 = select <4 x i1> %976, <4 x i8> splat (i8 19), <4 x i8> %1030, !dbg !250
  %1032 = select <4 x i1> %985, <4 x i8> splat (i8 20), <4 x i8> %1031, !dbg !251
  %1033 = select <4 x i1> %994, <4 x i8> splat (i8 21), <4 x i8> %1032, !dbg !252
  %1034 = select <4 x i1> %1003, <4 x i8> splat (i8 22), <4 x i8> %1033, !dbg !253
  %1035 = select <4 x i1> %1012, <4 x i8> splat (i8 23), <4 x i8> %1034, !dbg !254
  %1036 = select <4 x i1> %1021, <4 x i8> splat (i8 24), <4 x i8> %1035, !dbg !255
  %1037 = insertelement <4 x i32> poison, i32 %448, i64 0, !dbg !85
  %1038 = insertelement <4 x i32> %1037, i32 %449, i64 1, !dbg !85
  %1039 = insertelement <4 x i32> %1038, i32 %451, i64 2, !dbg !85
  %1040 = insertelement <4 x i32> %1039, i32 %452, i64 3, !dbg !85
  %1041 = bitcast <4 x i32> %1040 to <4 x float>, !dbg !85
  %1042 = fcmp uno <4 x float> %1041, zeroinitializer, !dbg !197
  %1043 = fcmp olt <4 x float> %923, %1041, !dbg !199
  %1044 = or <4 x i1> %1043, %1042, !dbg !200
  %.v51 = select <4 x i1> %1044, <4 x i32> %1040, <4 x i32> %.v41, !dbg !201
  %1045 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !201
  %1046 = insertelement <4 x i32> poison, i32 %480, i64 0, !dbg !89
  %1047 = insertelement <4 x i32> %1046, i32 %481, i64 1, !dbg !89
  %1048 = insertelement <4 x i32> %1047, i32 %482, i64 2, !dbg !89
  %1049 = insertelement <4 x i32> %1048, i32 %483, i64 3, !dbg !89
  %1050 = bitcast <4 x i32> %1049 to <4 x float>, !dbg !89
  %1051 = fcmp olt <4 x float> %1045, %1050, !dbg !202
  %1052 = fcmp uno <4 x float> %1050, zeroinitializer, !dbg !204
  %1053 = or <4 x i1> %1051, %1052, !dbg !205
  %.v52 = select <4 x i1> %1053, <4 x i32> %1049, <4 x i32> %.v51, !dbg !206
  %1054 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !206
  %1055 = insertelement <4 x i32> poison, i32 %491, i64 0, !dbg !91
  %1056 = insertelement <4 x i32> %1055, i32 %492, i64 1, !dbg !91
  %1057 = insertelement <4 x i32> %1056, i32 %493, i64 2, !dbg !91
  %1058 = insertelement <4 x i32> %1057, i32 %494, i64 3, !dbg !91
  %1059 = bitcast <4 x i32> %1058 to <4 x float>, !dbg !91
  %1060 = fcmp olt <4 x float> %1054, %1059, !dbg !207
  %1061 = fcmp uno <4 x float> %1059, zeroinitializer, !dbg !209
  %1062 = or <4 x i1> %1060, %1061, !dbg !210
  %.v53 = select <4 x i1> %1062, <4 x i32> %1058, <4 x i32> %.v52, !dbg !211
  %1063 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !211
  %1064 = insertelement <4 x i32> poison, i32 %514, i64 0, !dbg !95
  %1065 = insertelement <4 x i32> %1064, i32 %515, i64 1, !dbg !95
  %1066 = insertelement <4 x i32> %1065, i32 %516, i64 2, !dbg !95
  %1067 = insertelement <4 x i32> %1066, i32 %517, i64 3, !dbg !95
  %1068 = bitcast <4 x i32> %1067 to <4 x float>, !dbg !95
  %1069 = fcmp olt <4 x float> %1063, %1068, !dbg !212
  %1070 = fcmp uno <4 x float> %1068, zeroinitializer, !dbg !214
  %1071 = or <4 x i1> %1069, %1070, !dbg !215
  %.v54 = select <4 x i1> %1071, <4 x i32> %1067, <4 x i32> %.v53, !dbg !216
  %1072 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !216
  %1073 = insertelement <4 x i32> poison, i32 %530, i64 0, !dbg !97
  %1074 = insertelement <4 x i32> %1073, i32 %531, i64 1, !dbg !97
  %1075 = insertelement <4 x i32> %1074, i32 %533, i64 2, !dbg !97
  %1076 = insertelement <4 x i32> %1075, i32 %534, i64 3, !dbg !97
  %1077 = bitcast <4 x i32> %1076 to <4 x float>, !dbg !97
  %1078 = fcmp olt <4 x float> %1072, %1077, !dbg !217
  %1079 = fcmp uno <4 x float> %1077, zeroinitializer, !dbg !219
  %1080 = or <4 x i1> %1078, %1079, !dbg !220
  %.v55 = select <4 x i1> %1080, <4 x i32> %1076, <4 x i32> %.v54, !dbg !221
  %1081 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !221
  %1082 = insertelement <4 x i32> poison, i32 %560, i64 0, !dbg !101
  %1083 = insertelement <4 x i32> %1082, i32 %561, i64 1, !dbg !101
  %1084 = insertelement <4 x i32> %1083, i32 %563, i64 2, !dbg !101
  %1085 = insertelement <4 x i32> %1084, i32 %564, i64 3, !dbg !101
  %1086 = bitcast <4 x i32> %1085 to <4 x float>, !dbg !101
  %1087 = fcmp olt <4 x float> %1081, %1086, !dbg !222
  %1088 = fcmp uno <4 x float> %1086, zeroinitializer, !dbg !224
  %1089 = or <4 x i1> %1087, %1088, !dbg !225
  %.v56 = select <4 x i1> %1089, <4 x i32> %1085, <4 x i32> %.v55, !dbg !226
  %1090 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !226
  %1091 = insertelement <4 x i32> poison, i32 %592, i64 0, !dbg !105
  %1092 = insertelement <4 x i32> %1091, i32 %593, i64 1, !dbg !105
  %1093 = insertelement <4 x i32> %1092, i32 %594, i64 2, !dbg !105
  %1094 = insertelement <4 x i32> %1093, i32 %595, i64 3, !dbg !105
  %1095 = bitcast <4 x i32> %1094 to <4 x float>, !dbg !105
  %1096 = fcmp olt <4 x float> %1090, %1095, !dbg !227
  %1097 = fcmp uno <4 x float> %1095, zeroinitializer, !dbg !229
  %1098 = or <4 x i1> %1096, %1097, !dbg !230
  %.v57 = select <4 x i1> %1098, <4 x i32> %1094, <4 x i32> %.v56, !dbg !231
  %1099 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !231
  %1100 = insertelement <4 x i32> poison, i32 %603, i64 0, !dbg !107
  %1101 = insertelement <4 x i32> %1100, i32 %604, i64 1, !dbg !107
  %1102 = insertelement <4 x i32> %1101, i32 %605, i64 2, !dbg !107
  %1103 = insertelement <4 x i32> %1102, i32 %606, i64 3, !dbg !107
  %1104 = bitcast <4 x i32> %1103 to <4 x float>, !dbg !107
  %1105 = fcmp olt <4 x float> %1099, %1104, !dbg !232
  %1106 = fcmp uno <4 x float> %1104, zeroinitializer, !dbg !234
  %1107 = or <4 x i1> %1105, %1106, !dbg !235
  %.v58 = select <4 x i1> %1107, <4 x i32> %1103, <4 x i32> %.v57, !dbg !236
  %1108 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !236
  %1109 = insertelement <4 x i32> poison, i32 %626, i64 0, !dbg !110
  %1110 = insertelement <4 x i32> %1109, i32 %627, i64 1, !dbg !110
  %1111 = insertelement <4 x i32> %1110, i32 %628, i64 2, !dbg !110
  %1112 = insertelement <4 x i32> %1111, i32 %629, i64 3, !dbg !110
  %1113 = bitcast <4 x i32> %1112 to <4 x float>, !dbg !110
  %1114 = fcmp olt <4 x float> %1108, %1113, !dbg !237
  %1115 = fcmp uno <4 x float> %1113, zeroinitializer, !dbg !239
  %1116 = or <4 x i1> %1114, %1115, !dbg !240
  %.v59 = select <4 x i1> %1116, <4 x i32> %1112, <4 x i32> %.v58, !dbg !241
  %1117 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !241
  %1118 = insertelement <4 x i32> poison, i32 %642, i64 0, !dbg !111
  %1119 = insertelement <4 x i32> %1118, i32 %643, i64 1, !dbg !111
  %1120 = insertelement <4 x i32> %1119, i32 %645, i64 2, !dbg !111
  %1121 = insertelement <4 x i32> %1120, i32 %646, i64 3, !dbg !111
  %1122 = bitcast <4 x i32> %1121 to <4 x float>, !dbg !111
  %1123 = fcmp olt <4 x float> %1117, %1122, !dbg !242
  %1124 = shufflevector <4 x float> %1122, <4 x float> %1020, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !256
  %1125 = fcmp uno <8 x float> %1124, zeroinitializer, !dbg !256
  %1126 = extractelement <8 x i1> %1125, i64 7, !dbg !244
  %1127 = or i1 %1022, %1126, !dbg !244
  %1128 = extractelement <8 x i1> %1125, i64 6, !dbg !244
  %1129 = or i1 %1023, %1128, !dbg !244
  %1130 = extractelement <8 x i1> %1125, i64 5, !dbg !244
  %1131 = or i1 %1024, %1130, !dbg !244
  %1132 = extractelement <8 x i1> %1125, i64 4, !dbg !244
  %1133 = or i1 %1025, %1132, !dbg !244
  %1134 = extractelement <4 x i1> %1123, i64 0, !dbg !244
  %1135 = extractelement <8 x i1> %1125, i64 3, !dbg !244
  %1136 = or i1 %1134, %1135, !dbg !244
  %1137 = extractelement <4 x i1> %1123, i64 1, !dbg !244
  %1138 = extractelement <8 x i1> %1125, i64 2, !dbg !244
  %1139 = or i1 %1137, %1138, !dbg !244
  %1140 = extractelement <4 x i1> %1123, i64 2, !dbg !244
  %1141 = extractelement <8 x i1> %1125, i64 1, !dbg !244
  %1142 = or i1 %1140, %1141, !dbg !244
  %1143 = extractelement <4 x i1> %1123, i64 3, !dbg !244
  %1144 = extractelement <8 x i1> %1125, i64 0, !dbg !244
  %1145 = or i1 %1143, %1144, !dbg !244
  %1146 = select <4 x i1> %920, <4 x i8> splat (i8 14), <4 x i8> %934, !dbg !245
  %1147 = select <4 x i1> %1043, <4 x i8> splat (i8 15), <4 x i8> %1146, !dbg !246
  %1148 = select <4 x i1> %1051, <4 x i8> splat (i8 16), <4 x i8> %1147, !dbg !247
  %1149 = select <4 x i1> %1060, <4 x i8> splat (i8 17), <4 x i8> %1148, !dbg !248
  %1150 = select <4 x i1> %1069, <4 x i8> splat (i8 18), <4 x i8> %1149, !dbg !249
  %1151 = select <4 x i1> %1078, <4 x i8> splat (i8 19), <4 x i8> %1150, !dbg !250
  %1152 = select <4 x i1> %1087, <4 x i8> splat (i8 20), <4 x i8> %1151, !dbg !251
  %1153 = select <4 x i1> %1096, <4 x i8> splat (i8 21), <4 x i8> %1152, !dbg !252
  %1154 = select <4 x i1> %1105, <4 x i8> splat (i8 22), <4 x i8> %1153, !dbg !253
  %1155 = select <4 x i1> %1114, <4 x i8> splat (i8 23), <4 x i8> %1154, !dbg !254
  %1156 = select <4 x i1> %1123, <4 x i8> splat (i8 24), <4 x i8> %1155, !dbg !255
  %1157 = sext i32 %13 to i64, !dbg !257
  %1158 = getelementptr float, ptr addrspace(1) %1, i64 %1157, !dbg !257
  %1159 = sext i32 %14 to i64, !dbg !257
  %1160 = getelementptr float, ptr addrspace(1) %1, i64 %1159, !dbg !257
  %1161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !258
  %1162 = extractelement <4 x i32> %.v50, i64 0, !dbg !258
  %1163 = select i1 %1127, i32 %636, i32 %1162, !dbg !259
  %1164 = extractelement <4 x i32> %.v50, i64 1, !dbg !258
  %1165 = select i1 %1129, i32 %637, i32 %1164, !dbg !259
  %1166 = extractelement <4 x i32> %.v50, i64 2, !dbg !258
  %1167 = select i1 %1131, i32 %639, i32 %1166, !dbg !259
  %1168 = extractelement <4 x i32> %.v50, i64 3, !dbg !258
  %1169 = select i1 %1133, i32 %640, i32 %1168, !dbg !259
  %1170 = extractelement <4 x i32> %.v59, i64 0, !dbg !258
  %1171 = select i1 %1136, i32 %642, i32 %1170, !dbg !259
  %1172 = extractelement <4 x i32> %.v59, i64 1, !dbg !258
  %1173 = select i1 %1139, i32 %643, i32 %1172, !dbg !259
  %1174 = extractelement <4 x i32> %.v59, i64 2, !dbg !258
  %1175 = select i1 %1142, i32 %645, i32 %1174, !dbg !259
  %1176 = extractelement <4 x i32> %.v59, i64 3, !dbg !258
  %1177 = select i1 %1145, i32 %646, i32 %1176, !dbg !259
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1161, i32 %1163, i32 %1165, i32 %1167, i32 %1169, i1 true) #2, !dbg !258
  %1178 = getelementptr inbounds i8, ptr addrspace(3) %1161, i32 16, !dbg !258
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %1178, i32 %1171, i32 %1173, i32 %1175, i32 %1177, i1 true) #2, !dbg !258
  tail call void @llvm.nvvm.barrier0(), !dbg !258
  %1179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !258
  %1180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !258
  %1181 = load <4 x i32>, ptr addrspace(3) %1180, align 16, !dbg !258
  %.extract = load i32, ptr addrspace(3) %1179, align 16, !dbg !258
  %1182 = getelementptr inbounds i8, ptr addrspace(3) %1179, i32 4, !dbg !258
  %.extract8 = load i32, ptr addrspace(3) %1182, align 4, !dbg !258
  %1183 = getelementptr inbounds i8, ptr addrspace(3) %1179, i32 8, !dbg !258
  %.extract9 = load i32, ptr addrspace(3) %1183, align 8, !dbg !258
  %1184 = getelementptr inbounds i8, ptr addrspace(3) %1179, i32 12, !dbg !258
  %.extract10 = load i32, ptr addrspace(3) %1184, align 4, !dbg !258
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %1158, i1 true) #2, !dbg !258
  %.extract11 = extractelement <4 x i32> %1181, i64 0, !dbg !258
  %.extract12 = extractelement <4 x i32> %1181, i64 1, !dbg !258
  %.extract13 = extractelement <4 x i32> %1181, i64 2, !dbg !258
  %.extract14 = extractelement <4 x i32> %1181, i64 3, !dbg !258
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %1160, i1 true) #2, !dbg !258
  %1185 = getelementptr i8, ptr addrspace(1) %2, i64 %372, !dbg !260
  %1186 = bitcast <4 x i8> %1036 to i32, !dbg !261
  %1187 = bitcast <4 x i8> %1156 to i32, !dbg !261
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1186, i32 %1187, ptr addrspace(1) %1185, i1 true) #2, !dbg !261
  ret void, !dbg !262
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ugecgqgjtfaiyfztw7qnj6q2gcxnrzbq25rrpqtgslos776sdu.py", directory: "inductor_cache/3u")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_43", linkageName: "triton_poi_fused_max_pool2d_with_indices_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 96, column: 20, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 63, column: 20, scope: !7)
!19 = !DILocation(line: 38, column: 39, scope: !7)
!20 = !DILocation(line: 38, column: 31, scope: !7)
!21 = !DILocation(line: 40, column: 21, scope: !7)
!22 = !DILocation(line: 44, column: 39, scope: !7)
!23 = !DILocation(line: 44, column: 31, scope: !7)
!24 = !DILocation(line: 47, column: 21, scope: !7)
!25 = !DILocation(line: 53, column: 16, scope: !7)
!26 = !DILocation(line: 54, column: 21, scope: !7)
!27 = !DILocation(line: 55, column: 20, scope: !7)
!28 = !DILocation(line: 56, column: 20, scope: !7)
!29 = !DILocation(line: 58, column: 39, scope: !7)
!30 = !DILocation(line: 58, column: 31, scope: !7)
!31 = !DILocation(line: 60, column: 16, scope: !7)
!32 = !DILocation(line: 62, column: 20, scope: !7)
!33 = !DILocation(line: 72, column: 39, scope: !7)
!34 = !DILocation(line: 72, column: 31, scope: !7)
!35 = !DILocation(line: 75, column: 39, scope: !7)
!36 = !DILocation(line: 75, column: 31, scope: !7)
!37 = !DILocation(line: 81, column: 39, scope: !7)
!38 = !DILocation(line: 81, column: 31, scope: !7)
!39 = !DILocation(line: 127, column: 21, scope: !7)
!40 = !DILocation(line: 29, column: 19, scope: !7)
!41 = !DILocation(line: 37, column: 19, scope: !7)
!42 = !DILocation(line: 38, column: 44, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 44, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 44, scope: !7)
!47 = !DILocation(line: 57, column: 19, scope: !7)
!48 = !DILocation(line: 137, column: 22, scope: !7)
!49 = !DILocation(line: 58, column: 44, scope: !7)
!50 = !DILocation(line: 64, column: 19, scope: !7)
!51 = !DILocation(line: 140, column: 22, scope: !7)
!52 = !DILocation(line: 65, column: 44, scope: !7)
!53 = !DILocation(line: 68, column: 21, scope: !7)
!54 = !DILocation(line: 71, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 44, scope: !7)
!56 = !DILocation(line: 74, column: 20, scope: !7)
!57 = !DILocation(line: 75, column: 44, scope: !7)
!58 = !DILocation(line: 77, column: 20, scope: !7)
!59 = !DILocation(line: 78, column: 44, scope: !7)
!60 = !DILocation(line: 80, column: 20, scope: !7)
!61 = !DILocation(line: 81, column: 44, scope: !7)
!62 = !DILocation(line: 83, column: 20, scope: !7)
!63 = !DILocation(line: 84, column: 44, scope: !7)
!64 = !DILocation(line: 90, column: 20, scope: !7)
!65 = !DILocation(line: 91, column: 38, scope: !7)
!66 = !DILocation(line: 91, column: 31, scope: !7)
!67 = !DILocation(line: 91, column: 43, scope: !7)
!68 = !DILocation(line: 93, column: 20, scope: !7)
!69 = !DILocation(line: 94, column: 38, scope: !7)
!70 = !DILocation(line: 94, column: 31, scope: !7)
!71 = !DILocation(line: 94, column: 43, scope: !7)
!72 = !DILocation(line: 97, column: 31, scope: !7)
!73 = !DILocation(line: 97, column: 36, scope: !7)
!74 = !DILocation(line: 99, column: 20, scope: !7)
!75 = !DILocation(line: 100, column: 35, scope: !7)
!76 = !DILocation(line: 100, column: 31, scope: !7)
!77 = !DILocation(line: 100, column: 40, scope: !7)
!78 = !DILocation(line: 102, column: 20, scope: !7)
!79 = !DILocation(line: 103, column: 31, scope: !7)
!80 = !DILocation(line: 103, column: 40, scope: !7)
!81 = !DILocation(line: 108, column: 20, scope: !7)
!82 = !DILocation(line: 109, column: 20, scope: !7)
!83 = !DILocation(line: 110, column: 36, scope: !7)
!84 = !DILocation(line: 110, column: 31, scope: !7)
!85 = !DILocation(line: 110, column: 41, scope: !7)
!86 = !DILocation(line: 112, column: 20, scope: !7)
!87 = !DILocation(line: 113, column: 36, scope: !7)
!88 = !DILocation(line: 113, column: 31, scope: !7)
!89 = !DILocation(line: 113, column: 41, scope: !7)
!90 = !DILocation(line: 115, column: 20, scope: !7)
!91 = !DILocation(line: 116, column: 41, scope: !7)
!92 = !DILocation(line: 118, column: 20, scope: !7)
!93 = !DILocation(line: 119, column: 36, scope: !7)
!94 = !DILocation(line: 119, column: 31, scope: !7)
!95 = !DILocation(line: 119, column: 41, scope: !7)
!96 = !DILocation(line: 121, column: 20, scope: !7)
!97 = !DILocation(line: 122, column: 41, scope: !7)
!98 = !DILocation(line: 128, column: 22, scope: !7)
!99 = !DILocation(line: 129, column: 37, scope: !7)
!100 = !DILocation(line: 129, column: 32, scope: !7)
!101 = !DILocation(line: 129, column: 42, scope: !7)
!102 = !DILocation(line: 131, column: 22, scope: !7)
!103 = !DILocation(line: 132, column: 37, scope: !7)
!104 = !DILocation(line: 132, column: 32, scope: !7)
!105 = !DILocation(line: 132, column: 42, scope: !7)
!106 = !DILocation(line: 134, column: 22, scope: !7)
!107 = !DILocation(line: 135, column: 42, scope: !7)
!108 = !DILocation(line: 138, column: 37, scope: !7)
!109 = !DILocation(line: 138, column: 32, scope: !7)
!110 = !DILocation(line: 138, column: 42, scope: !7)
!111 = !DILocation(line: 141, column: 42, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !115)
!113 = distinct !DILexicalBlockFile(scope: !7, file: !114, discriminator: 0)
!114 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!115 = !DILocation(line: 45, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !120)
!120 = !DILocation(line: 52, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !125)
!125 = !DILocation(line: 59, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !125)
!129 = !DILocation(line: 146, column: 38, scope: !7)
!130 = !DILocation(line: 149, column: 38, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !132)
!132 = !DILocation(line: 66, column: 42, scope: !7)
!133 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !137)
!137 = !DILocation(line: 73, column: 42, scope: !7)
!138 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !137)
!139 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !137)
!140 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !137)
!141 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !142)
!142 = !DILocation(line: 76, column: 42, scope: !7)
!143 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !142)
!144 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !142)
!145 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !142)
!146 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !147)
!147 = !DILocation(line: 79, column: 42, scope: !7)
!148 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !147)
!149 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !147)
!150 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !147)
!151 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !152)
!152 = !DILocation(line: 82, column: 42, scope: !7)
!153 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !152)
!154 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !152)
!155 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !152)
!156 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !157)
!157 = !DILocation(line: 85, column: 42, scope: !7)
!158 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !157)
!159 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !157)
!160 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !157)
!161 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !162)
!162 = !DILocation(line: 92, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !162)
!165 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !162)
!166 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !167)
!167 = !DILocation(line: 95, column: 42, scope: !7)
!168 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !167)
!169 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !167)
!170 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !167)
!171 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !172)
!172 = !DILocation(line: 98, column: 42, scope: !7)
!173 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !172)
!174 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !172)
!175 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !172)
!176 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !177)
!177 = !DILocation(line: 101, column: 42, scope: !7)
!178 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !177)
!179 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !177)
!180 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !177)
!181 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !182)
!182 = !DILocation(line: 104, column: 42, scope: !7)
!183 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !182)
!184 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !182)
!185 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !182)
!186 = !DILocation(line: 152, column: 38, scope: !7)
!187 = !DILocation(line: 155, column: 38, scope: !7)
!188 = !DILocation(line: 158, column: 38, scope: !7)
!189 = !DILocation(line: 161, column: 38, scope: !7)
!190 = !DILocation(line: 164, column: 38, scope: !7)
!191 = !DILocation(line: 167, column: 38, scope: !7)
!192 = !DILocation(line: 170, column: 38, scope: !7)
!193 = !DILocation(line: 173, column: 38, scope: !7)
!194 = !DILocation(line: 176, column: 38, scope: !7)
!195 = !DILocation(line: 179, column: 38, scope: !7)
!196 = !DILocation(line: 182, column: 38, scope: !7)
!197 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !198)
!198 = !DILocation(line: 111, column: 42, scope: !7)
!199 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !198)
!200 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !198)
!201 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !198)
!202 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !203)
!203 = !DILocation(line: 114, column: 42, scope: !7)
!204 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !203)
!205 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !203)
!206 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !203)
!207 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !208)
!208 = !DILocation(line: 117, column: 42, scope: !7)
!209 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !208)
!210 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !208)
!211 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !208)
!212 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !213)
!213 = !DILocation(line: 120, column: 42, scope: !7)
!214 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !213)
!215 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !213)
!216 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !213)
!217 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !218)
!218 = !DILocation(line: 123, column: 42, scope: !7)
!219 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !218)
!220 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !218)
!221 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !218)
!222 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !223)
!223 = !DILocation(line: 130, column: 44, scope: !7)
!224 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !223)
!225 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !223)
!226 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !223)
!227 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !228)
!228 = !DILocation(line: 133, column: 44, scope: !7)
!229 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !228)
!230 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !228)
!231 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !228)
!232 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !233)
!233 = !DILocation(line: 136, column: 44, scope: !7)
!234 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !233)
!235 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !233)
!236 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !233)
!237 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !238)
!238 = !DILocation(line: 139, column: 44, scope: !7)
!239 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !238)
!240 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !238)
!241 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !238)
!242 = !DILocation(line: 118, column: 15, scope: !113, inlinedAt: !243)
!243 = !DILocation(line: 142, column: 44, scope: !7)
!244 = !DILocation(line: 120, column: 16, scope: !113, inlinedAt: !243)
!245 = !DILocation(line: 185, column: 38, scope: !7)
!246 = !DILocation(line: 188, column: 38, scope: !7)
!247 = !DILocation(line: 191, column: 38, scope: !7)
!248 = !DILocation(line: 194, column: 38, scope: !7)
!249 = !DILocation(line: 197, column: 38, scope: !7)
!250 = !DILocation(line: 200, column: 38, scope: !7)
!251 = !DILocation(line: 203, column: 38, scope: !7)
!252 = !DILocation(line: 206, column: 38, scope: !7)
!253 = !DILocation(line: 209, column: 38, scope: !7)
!254 = !DILocation(line: 212, column: 38, scope: !7)
!255 = !DILocation(line: 215, column: 38, scope: !7)
!256 = !DILocation(line: 120, column: 21, scope: !113, inlinedAt: !243)
!257 = !DILocation(line: 216, column: 25, scope: !7)
!258 = !DILocation(line: 216, column: 38, scope: !7)
!259 = !DILocation(line: 121, column: 29, scope: !113, inlinedAt: !243)
!260 = !DILocation(line: 217, column: 25, scope: !7)
!261 = !DILocation(line: 217, column: 38, scope: !7)
!262 = !DILocation(line: 217, column: 4, scope: !7)
