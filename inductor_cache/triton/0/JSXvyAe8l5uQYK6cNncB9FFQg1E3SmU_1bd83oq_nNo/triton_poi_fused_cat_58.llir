; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_58(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 33792, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 528, !dbg !15
  %19 = mul i32 %18, 528, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = icmp slt i32 %.decomposed, 112, !dbg !17
  %21 = mul nsw i32 %18, 112, !dbg !18
  %22 = add nsw i32 %21, %.decomposed, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = and i1 %17, %20, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = sext i32 %.decomposed to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #1, !dbg !24
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !24
  %38 = add nsw i32 %.decomposed, -112, !dbg !25
  %39 = icmp ult i32 %38, 288, !dbg !25
  %40 = mul nsw i32 %18, 288, !dbg !26
  %41 = add nsw i32 %40, %38, !dbg !27
  %42 = sext i32 %41 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !28
  %44 = and i1 %17, %39, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %50 = sext i32 %38 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !32
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %57 = add nsw i32 %.decomposed, -400, !dbg !33
  %58 = icmp ult i32 %57, 64, !dbg !33
  %59 = shl nsw i32 %18, 6, !dbg !34
  %60 = add nsw i32 %59, %57, !dbg !35
  %61 = sext i32 %60 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !36
  %63 = and i1 %17, %58, !dbg !37
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !38
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !38
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !38
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !38
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !38
  %69 = sext i32 %57 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !39
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !40
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !40
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !40
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !40
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !40
  %76 = icmp sgt i32 %.decomposed, 463, !dbg !41
  %77 = add nsw i32 %.decomposed, -464, !dbg !42
  %78 = add nsw i32 %59, %77, !dbg !43
  %79 = sext i32 %78 to i64, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %79, !dbg !44
  %81 = and i1 %17, %76, !dbg !45
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !46
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !46
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !46
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !46
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !46
  %87 = sext i32 %77 to i64, !dbg !47
  %88 = getelementptr float, ptr addrspace(1) %7, i64 %87, !dbg !47
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !48
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !48
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !48
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !48
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !48
  %94 = insertelement <16 x i32> poison, i32 %86, i64 0, !dbg !46
  %95 = insertelement <16 x i32> %94, i32 %85, i64 1, !dbg !46
  %96 = insertelement <16 x i32> %95, i32 %84, i64 2, !dbg !46
  %97 = insertelement <16 x i32> %96, i32 %83, i64 3, !dbg !46
  %98 = insertelement <16 x i32> %97, i32 %68, i64 4, !dbg !46
  %99 = insertelement <16 x i32> %98, i32 %67, i64 5, !dbg !46
  %100 = insertelement <16 x i32> %99, i32 %66, i64 6, !dbg !46
  %101 = insertelement <16 x i32> %100, i32 %65, i64 7, !dbg !46
  %102 = insertelement <16 x i32> %101, i32 %49, i64 8, !dbg !46
  %103 = insertelement <16 x i32> %102, i32 %48, i64 9, !dbg !46
  %104 = insertelement <16 x i32> %103, i32 %47, i64 10, !dbg !46
  %105 = insertelement <16 x i32> %104, i32 %46, i64 11, !dbg !46
  %106 = insertelement <16 x i32> %105, i32 %30, i64 12, !dbg !46
  %107 = insertelement <16 x i32> %106, i32 %29, i64 13, !dbg !46
  %108 = insertelement <16 x i32> %107, i32 %28, i64 14, !dbg !46
  %109 = insertelement <16 x i32> %108, i32 %27, i64 15, !dbg !46
  %110 = bitcast <16 x i32> %109 to <16 x float>, !dbg !46
  %111 = insertelement <16 x i32> poison, i32 %93, i64 0, !dbg !48
  %112 = insertelement <16 x i32> %111, i32 %92, i64 1, !dbg !48
  %113 = insertelement <16 x i32> %112, i32 %91, i64 2, !dbg !48
  %114 = insertelement <16 x i32> %113, i32 %90, i64 3, !dbg !48
  %115 = insertelement <16 x i32> %114, i32 %75, i64 4, !dbg !48
  %116 = insertelement <16 x i32> %115, i32 %74, i64 5, !dbg !48
  %117 = insertelement <16 x i32> %116, i32 %73, i64 6, !dbg !48
  %118 = insertelement <16 x i32> %117, i32 %72, i64 7, !dbg !48
  %119 = insertelement <16 x i32> %118, i32 %56, i64 8, !dbg !48
  %120 = insertelement <16 x i32> %119, i32 %55, i64 9, !dbg !48
  %121 = insertelement <16 x i32> %120, i32 %54, i64 10, !dbg !48
  %122 = insertelement <16 x i32> %121, i32 %53, i64 11, !dbg !48
  %123 = insertelement <16 x i32> %122, i32 %37, i64 12, !dbg !48
  %124 = insertelement <16 x i32> %123, i32 %36, i64 13, !dbg !48
  %125 = insertelement <16 x i32> %124, i32 %35, i64 14, !dbg !48
  %126 = insertelement <16 x i32> %125, i32 %34, i64 15, !dbg !48
  %127 = bitcast <16 x i32> %126 to <16 x float>, !dbg !48
  %128 = fadd <16 x float> %110, %127, !dbg !49
  %129 = fcmp olt <16 x float> %128, zeroinitializer, !dbg !50
  %130 = extractelement <16 x i1> %129, i64 15, !dbg !54
  %131 = extractelement <16 x float> %128, i64 15, !dbg !54
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !54
  %133 = extractelement <16 x i1> %129, i64 14, !dbg !54
  %134 = extractelement <16 x float> %128, i64 14, !dbg !54
  %135 = select i1 %133, float 0.000000e+00, float %134, !dbg !54
  %136 = extractelement <16 x i1> %129, i64 13, !dbg !54
  %137 = extractelement <16 x float> %128, i64 13, !dbg !54
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !54
  %139 = extractelement <16 x i1> %129, i64 12, !dbg !54
  %140 = extractelement <16 x float> %128, i64 12, !dbg !54
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !54
  %142 = extractelement <16 x i1> %129, i64 11, !dbg !56
  %143 = extractelement <16 x float> %128, i64 11, !dbg !56
  %144 = select i1 %142, float 0.000000e+00, float %143, !dbg !56
  %145 = extractelement <16 x i1> %129, i64 10, !dbg !56
  %146 = extractelement <16 x float> %128, i64 10, !dbg !56
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !56
  %148 = extractelement <16 x i1> %129, i64 9, !dbg !56
  %149 = extractelement <16 x float> %128, i64 9, !dbg !56
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !56
  %151 = extractelement <16 x i1> %129, i64 8, !dbg !56
  %152 = extractelement <16 x float> %128, i64 8, !dbg !56
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !56
  %154 = extractelement <16 x i1> %129, i64 7, !dbg !58
  %155 = extractelement <16 x float> %128, i64 7, !dbg !58
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !58
  %157 = extractelement <16 x i1> %129, i64 6, !dbg !58
  %158 = extractelement <16 x float> %128, i64 6, !dbg !58
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !58
  %160 = extractelement <16 x i1> %129, i64 5, !dbg !58
  %161 = extractelement <16 x float> %128, i64 5, !dbg !58
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !58
  %163 = extractelement <16 x i1> %129, i64 4, !dbg !58
  %164 = extractelement <16 x float> %128, i64 4, !dbg !58
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !58
  %166 = extractelement <16 x i1> %129, i64 3, !dbg !60
  %167 = extractelement <16 x float> %128, i64 3, !dbg !60
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !60
  %169 = extractelement <16 x i1> %129, i64 2, !dbg !60
  %170 = extractelement <16 x float> %128, i64 2, !dbg !60
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !60
  %172 = extractelement <16 x i1> %129, i64 1, !dbg !60
  %173 = extractelement <16 x float> %128, i64 1, !dbg !60
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !60
  %175 = extractelement <16 x i1> %129, i64 0, !dbg !60
  %176 = extractelement <16 x float> %128, i64 0, !dbg !60
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !60
  %178 = select i1 %76, float %168, float 0.000000e+00, !dbg !61
  %179 = select i1 %76, float %171, float 0.000000e+00, !dbg !61
  %180 = select i1 %76, float %174, float 0.000000e+00, !dbg !61
  %181 = select i1 %76, float %177, float 0.000000e+00, !dbg !61
  %182 = select i1 %58, float %156, float %178, !dbg !62
  %183 = select i1 %58, float %159, float %179, !dbg !62
  %184 = select i1 %58, float %162, float %180, !dbg !62
  %185 = select i1 %58, float %165, float %181, !dbg !62
  %186 = select i1 %39, float %144, float %182, !dbg !62
  %187 = select i1 %39, float %147, float %183, !dbg !62
  %188 = select i1 %39, float %150, float %184, !dbg !62
  %189 = select i1 %39, float %153, float %185, !dbg !62
  %190 = select i1 %20, float %132, float %186, !dbg !62
  %191 = select i1 %20, float %135, float %187, !dbg !62
  %192 = select i1 %20, float %138, float %188, !dbg !62
  %193 = select i1 %20, float %141, float %189, !dbg !62
  %194 = sext i32 %16 to i64, !dbg !63
  %195 = getelementptr float, ptr addrspace(1) %8, i64 %194, !dbg !63
  %196 = bitcast float %190 to i32, !dbg !64
  %197 = bitcast float %191 to i32, !dbg !64
  %198 = bitcast float %192 to i32, !dbg !64
  %199 = bitcast float %193 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %195, i1 %17) #1, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvtyg3dnbiuoqijsodxshjuo7zsjsa3otgucc3uyxcwnnv7jivkv.py", directory: "inductor_cache/vt")
!4 = !{ptr @triton_poi_fused_cat_58, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_58, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_58", linkageName: "triton_poi_fused_cat_58", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 43, column: 35, scope: !7)
!27 = !DILocation(line: 43, column: 41, scope: !7)
!28 = !DILocation(line: 43, column: 31, scope: !7)
!29 = !DILocation(line: 43, column: 64, scope: !7)
!30 = !DILocation(line: 43, column: 56, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 45, scope: !7)
!33 = !DILocation(line: 53, column: 20, scope: !7)
!34 = !DILocation(line: 54, column: 34, scope: !7)
!35 = !DILocation(line: 54, column: 40, scope: !7)
!36 = !DILocation(line: 54, column: 31, scope: !7)
!37 = !DILocation(line: 54, column: 63, scope: !7)
!38 = !DILocation(line: 54, column: 55, scope: !7)
!39 = !DILocation(line: 55, column: 31, scope: !7)
!40 = !DILocation(line: 55, column: 45, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 64, column: 49, scope: !7)
!43 = !DILocation(line: 64, column: 40, scope: !7)
!44 = !DILocation(line: 64, column: 31, scope: !7)
!45 = !DILocation(line: 64, column: 63, scope: !7)
!46 = !DILocation(line: 64, column: 55, scope: !7)
!47 = !DILocation(line: 65, column: 31, scope: !7)
!48 = !DILocation(line: 65, column: 45, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 68, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !55)
!55 = !DILocation(line: 36, column: 40, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 47, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !59)
!59 = !DILocation(line: 58, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!61 = !DILocation(line: 70, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 74, column: 25, scope: !7)
!64 = !DILocation(line: 74, column: 37, scope: !7)
!65 = !DILocation(line: 74, column: 4, scope: !7)
