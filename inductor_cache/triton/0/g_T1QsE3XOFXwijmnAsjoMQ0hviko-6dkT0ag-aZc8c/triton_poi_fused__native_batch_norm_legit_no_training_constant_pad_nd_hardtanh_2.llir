; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = icmp slt i32 %13, 139392, !dbg !14
  %16 = icmp slt i32 %14, 139392, !dbg !14
  %17 = insertelement <4 x i32> poison, i32 %14, i64 0, !dbg !15
  %18 = insertelement <4 x i32> %17, i32 %13, i64 1, !dbg !15
  %19 = shufflevector <4 x i32> %18, <4 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !15
  %20 = sdiv <4 x i32> %19, <i32 32, i32 32, i32 1056, i32 1056>, !dbg !15
  %21 = srem <4 x i32> %20, splat (i32 33), !dbg !16
  %22 = sdiv i32 %13, 34848, !dbg !17
  %23 = sdiv i32 %14, 34848, !dbg !17
  %24 = srem i32 %13, 1056, !dbg !18
  %25 = srem i32 %14, 1056, !dbg !18
  %26 = srem i32 %13, 32, !dbg !19
  %27 = add nsw <4 x i32> %21, splat (i32 -1), !dbg !20
  %28 = icmp ult <4 x i32> %27, splat (i32 31), !dbg !20
  %shift = shufflevector <4 x i1> %28, <4 x i1> poison, <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, !dbg !20
  %29 = and <4 x i1> %shift, %28, !dbg !20
  %30 = extractelement <4 x i1> %29, i64 1, !dbg !20
  %shift43 = shufflevector <4 x i1> %28, <4 x i1> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !20
  %31 = and <4 x i1> %shift43, %28, !dbg !20
  %32 = extractelement <4 x i1> %31, i64 0, !dbg !20
  %33 = add nsw i32 %24, -1024, !dbg !21
  %34 = add nsw i32 %25, -1024, !dbg !21
  %35 = extractelement <4 x i32> %21, i64 3, !dbg !22
  %36 = mul nsw i32 %35, 992, !dbg !22
  %37 = extractelement <4 x i32> %21, i64 2, !dbg !22
  %38 = mul nsw i32 %37, 992, !dbg !22
  %39 = mul nsw i32 %22, 30752, !dbg !23
  %40 = mul nsw i32 %23, 30752, !dbg !23
  %41 = add nsw i32 %33, %39, !dbg !24
  %42 = add nsw i32 %41, %36, !dbg !25
  %43 = add nsw i32 %34, %40, !dbg !24
  %44 = add nsw i32 %43, %38, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %44 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = and i1 %15, %30, !dbg !27
  %50 = and i1 %16, %32, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !28
  %53 = sext i32 %26 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !30
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = fadd float %63, 0x3EE4F8B580000000, !dbg !33
  %77 = fadd float %64, 0x3EE4F8B580000000, !dbg !33
  %78 = fadd float %65, 0x3EE4F8B580000000, !dbg !33
  %79 = fadd float %66, 0x3EE4F8B580000000, !dbg !33
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !33
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !33
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !33
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %84, 0, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %85, 0, !dbg !34
  br i1 %.not.i, label %91, label %86, !dbg !34

86:                                               ; preds = %7
  br i1 %.not1.i, label %89, label %87, !dbg !34

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

91:                                               ; preds = %7
  br i1 %.not1.i, label %94, label %92, !dbg !34

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !34
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i8 = icmp eq i32 %96, 0, !dbg !34
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i11 = icmp eq i32 %97, 0, !dbg !34
  br i1 %.not.i8, label %103, label %98, !dbg !34

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %101, label %99, !dbg !34

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %106, label %104, !dbg !34

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit12, !dbg !34

__nv_sqrtf.exit12:                                ; preds = %99, %101, %104, %106
  %.0.i10 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !34
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i13 = icmp eq i32 %108, 0, !dbg !34
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i16 = icmp eq i32 %109, 0, !dbg !34
  br i1 %.not.i13, label %115, label %110, !dbg !34

110:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %113, label %111, !dbg !34

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

115:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %118, label %116, !dbg !34

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit17, !dbg !34

__nv_sqrtf.exit17:                                ; preds = %111, %113, %116, %118
  %.0.i15 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !34
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i18 = icmp eq i32 %120, 0, !dbg !34
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i21 = icmp eq i32 %121, 0, !dbg !34
  br i1 %.not.i18, label %127, label %122, !dbg !34

122:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %125, label %123, !dbg !34

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

127:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %130, label %128, !dbg !34

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

__nv_sqrtf.exit22:                                ; preds = %123, %125, %128, %130
  %.0.i20 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !34
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i23 = icmp eq i32 %132, 0, !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i26 = icmp eq i32 %133, 0, !dbg !34
  br i1 %.not.i23, label %139, label %134, !dbg !34

134:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %137, label %135, !dbg !34

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

139:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %142, label %140, !dbg !34

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

__nv_sqrtf.exit27:                                ; preds = %135, %137, %140, %142
  %.0.i25 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !34
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i28 = icmp eq i32 %144, 0, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i31 = icmp eq i32 %145, 0, !dbg !34
  br i1 %.not.i28, label %151, label %146, !dbg !34

146:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %149, label %147, !dbg !34

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

151:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %154, label %152, !dbg !34

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

__nv_sqrtf.exit32:                                ; preds = %147, %149, %152, %154
  %.0.i30 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !34
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i33 = icmp eq i32 %156, 0, !dbg !34
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i36 = icmp eq i32 %157, 0, !dbg !34
  br i1 %.not.i33, label %163, label %158, !dbg !34

158:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %161, label %159, !dbg !34

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

163:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %166, label %164, !dbg !34

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !34
  br label %__nv_sqrtf.exit37, !dbg !34

__nv_sqrtf.exit37:                                ; preds = %159, %161, %164, %166
  %.0.i35 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !34
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i38 = icmp eq i32 %168, 0, !dbg !34
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i41 = icmp eq i32 %169, 0, !dbg !34
  br i1 %.not.i38, label %175, label %170, !dbg !34

170:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %173, label %171, !dbg !34

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

175:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %178, label %176, !dbg !34

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !34
  br label %__nv_sqrtf.exit42, !dbg !34

__nv_sqrtf.exit42:                                ; preds = %171, %173, %176, %178
  %.0.i40 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !34
  %180 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %181 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !30
  %182 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %183 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %185 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !30
  %186 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %189 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %193 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !35
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !35
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !35
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !35
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !35
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !35
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !35
  %204 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !36
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !37
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !37
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !37
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !37
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !37
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !37
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !37
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !37
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !37
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !37
  %215 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !38
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #3, !dbg !39
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !39
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !39
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !39
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !39
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %215, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #3, !dbg !39
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !39
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !39
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !39
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !39
  %226 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !28
  %227 = insertelement <8 x i32> %226, i32 %182, i64 1, !dbg !28
  %228 = insertelement <8 x i32> %227, i32 %184, i64 2, !dbg !28
  %229 = insertelement <8 x i32> %228, i32 %186, i64 3, !dbg !28
  %230 = insertelement <8 x i32> %229, i32 %188, i64 4, !dbg !28
  %231 = insertelement <8 x i32> %230, i32 %190, i64 5, !dbg !28
  %232 = insertelement <8 x i32> %231, i32 %192, i64 6, !dbg !28
  %233 = insertelement <8 x i32> %232, i32 %194, i64 7, !dbg !28
  %234 = bitcast <8 x i32> %233 to <8 x float>, !dbg !28
  %235 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !30
  %236 = insertelement <8 x i32> %235, i32 %183, i64 1, !dbg !30
  %237 = insertelement <8 x i32> %236, i32 %185, i64 2, !dbg !30
  %238 = insertelement <8 x i32> %237, i32 %187, i64 3, !dbg !30
  %239 = insertelement <8 x i32> %238, i32 %189, i64 4, !dbg !30
  %240 = insertelement <8 x i32> %239, i32 %191, i64 5, !dbg !30
  %241 = insertelement <8 x i32> %240, i32 %193, i64 6, !dbg !30
  %242 = insertelement <8 x i32> %241, i32 %195, i64 7, !dbg !30
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !30
  %244 = fsub <8 x float> %234, %243, !dbg !40
  %245 = insertelement <8 x float> poison, float %203, i64 0, !dbg !41
  %246 = insertelement <8 x float> %245, float %202, i64 1, !dbg !41
  %247 = insertelement <8 x float> %246, float %201, i64 2, !dbg !41
  %248 = insertelement <8 x float> %247, float %200, i64 3, !dbg !41
  %249 = insertelement <8 x float> %248, float %199, i64 4, !dbg !41
  %250 = insertelement <8 x float> %249, float %198, i64 5, !dbg !41
  %251 = insertelement <8 x float> %250, float %197, i64 6, !dbg !41
  %252 = insertelement <8 x float> %251, float %196, i64 7, !dbg !41
  %253 = fmul <8 x float> %244, %252, !dbg !41
  %254 = insertelement <8 x i32> poison, i32 %214, i64 0, !dbg !37
  %255 = insertelement <8 x i32> %254, i32 %213, i64 1, !dbg !37
  %256 = insertelement <8 x i32> %255, i32 %212, i64 2, !dbg !37
  %257 = insertelement <8 x i32> %256, i32 %211, i64 3, !dbg !37
  %258 = insertelement <8 x i32> %257, i32 %209, i64 4, !dbg !37
  %259 = insertelement <8 x i32> %258, i32 %208, i64 5, !dbg !37
  %260 = insertelement <8 x i32> %259, i32 %207, i64 6, !dbg !37
  %261 = insertelement <8 x i32> %260, i32 %206, i64 7, !dbg !37
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !37
  %263 = fmul <8 x float> %253, %262, !dbg !42
  %264 = insertelement <8 x i32> poison, i32 %225, i64 0, !dbg !39
  %265 = insertelement <8 x i32> %264, i32 %224, i64 1, !dbg !39
  %266 = insertelement <8 x i32> %265, i32 %223, i64 2, !dbg !39
  %267 = insertelement <8 x i32> %266, i32 %222, i64 3, !dbg !39
  %268 = insertelement <8 x i32> %267, i32 %220, i64 4, !dbg !39
  %269 = insertelement <8 x i32> %268, i32 %219, i64 5, !dbg !39
  %270 = insertelement <8 x i32> %269, i32 %218, i64 6, !dbg !39
  %271 = insertelement <8 x i32> %270, i32 %217, i64 7, !dbg !39
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !39
  %273 = fadd <8 x float> %263, %272, !dbg !43
  %274 = fcmp ole <8 x float> %273, zeroinitializer, !dbg !44
  %275 = select <8 x i1> %274, <8 x float> zeroinitializer, <8 x float> %273, !dbg !44
  %276 = fcmp olt <8 x float> %275, splat (float 6.000000e+00), !dbg !48
  %277 = extractelement <8 x float> %275, i64 7, !dbg !50
  %278 = fcmp uno float %277, 0.000000e+00, !dbg !51
  %279 = extractelement <8 x float> %275, i64 6, !dbg !50
  %280 = fcmp uno float %279, 0.000000e+00, !dbg !51
  %281 = extractelement <8 x float> %275, i64 5, !dbg !50
  %282 = fcmp uno float %281, 0.000000e+00, !dbg !51
  %283 = extractelement <8 x float> %275, i64 4, !dbg !50
  %284 = fcmp uno float %283, 0.000000e+00, !dbg !51
  %285 = extractelement <8 x float> %275, i64 3, !dbg !50
  %286 = fcmp uno float %285, 0.000000e+00, !dbg !51
  %287 = extractelement <8 x float> %275, i64 2, !dbg !50
  %288 = fcmp uno float %287, 0.000000e+00, !dbg !51
  %289 = extractelement <8 x float> %275, i64 1, !dbg !50
  %290 = fcmp uno float %289, 0.000000e+00, !dbg !51
  %291 = extractelement <8 x float> %275, i64 0, !dbg !50
  %292 = fcmp uno float %291, 0.000000e+00, !dbg !51
  %293 = extractelement <8 x i1> %276, i64 7, !dbg !52
  %294 = or i1 %293, %278, !dbg !52
  %295 = extractelement <8 x i1> %276, i64 6, !dbg !52
  %296 = or i1 %295, %280, !dbg !52
  %297 = extractelement <8 x i1> %276, i64 5, !dbg !52
  %298 = or i1 %297, %282, !dbg !52
  %299 = extractelement <8 x i1> %276, i64 4, !dbg !52
  %300 = or i1 %299, %284, !dbg !52
  %301 = extractelement <8 x i1> %276, i64 3, !dbg !52
  %302 = or i1 %301, %286, !dbg !52
  %303 = extractelement <8 x i1> %276, i64 2, !dbg !52
  %304 = or i1 %303, %288, !dbg !52
  %305 = extractelement <8 x i1> %276, i64 1, !dbg !52
  %306 = or i1 %305, %290, !dbg !52
  %307 = extractelement <8 x i1> %276, i64 0, !dbg !52
  %308 = or i1 %307, %292, !dbg !52
  %309 = sext i32 %13 to i64, !dbg !53
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %309, !dbg !53
  %311 = sext i32 %14 to i64, !dbg !53
  %312 = getelementptr float, ptr addrspace(1) %5, i64 %311, !dbg !53
  %313 = bitcast float %277 to i32, !dbg !50
  %314 = select i1 %294, i32 %313, i32 1086324736, !dbg !54
  %315 = select i1 %30, i32 %314, i32 0, !dbg !55
  %316 = bitcast float %279 to i32, !dbg !50
  %317 = select i1 %296, i32 %316, i32 1086324736, !dbg !54
  %318 = select i1 %30, i32 %317, i32 0, !dbg !55
  %319 = bitcast float %281 to i32, !dbg !50
  %320 = select i1 %298, i32 %319, i32 1086324736, !dbg !54
  %321 = select i1 %30, i32 %320, i32 0, !dbg !55
  %322 = bitcast float %283 to i32, !dbg !50
  %323 = select i1 %300, i32 %322, i32 1086324736, !dbg !54
  %324 = select i1 %30, i32 %323, i32 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %318, i32 %321, i32 %324, ptr addrspace(1) %310, i1 %15) #3, !dbg !50
  %325 = bitcast float %285 to i32, !dbg !50
  %326 = select i1 %302, i32 %325, i32 1086324736, !dbg !54
  %327 = select i1 %32, i32 %326, i32 0, !dbg !55
  %328 = bitcast float %287 to i32, !dbg !50
  %329 = select i1 %304, i32 %328, i32 1086324736, !dbg !54
  %330 = select i1 %32, i32 %329, i32 0, !dbg !55
  %331 = bitcast float %289 to i32, !dbg !50
  %332 = select i1 %306, i32 %331, i32 1086324736, !dbg !54
  %333 = select i1 %32, i32 %332, i32 0, !dbg !55
  %334 = bitcast float %291 to i32, !dbg !50
  %335 = select i1 %308, i32 %334, i32 1086324736, !dbg !54
  %336 = select i1 %32, i32 %335, i32 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %327, i32 %330, i32 %333, i32 %336, ptr addrspace(1) %312, i1 %16) #3, !dbg !50
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7x4qsvhtr35t2tmlqh5ibtsedyestsjev53yxkuw5okiexyt3f.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 19, scope: !7)
!21 = !DILocation(line: 41, column: 41, scope: !7)
!22 = !DILocation(line: 41, column: 50, scope: !7)
!23 = !DILocation(line: 41, column: 61, scope: !7)
!24 = !DILocation(line: 41, column: 46, scope: !7)
!25 = !DILocation(line: 41, column: 55, scope: !7)
!26 = !DILocation(line: 41, column: 31, scope: !7)
!27 = !DILocation(line: 41, column: 74, scope: !7)
!28 = !DILocation(line: 41, column: 66, scope: !7)
!29 = !DILocation(line: 42, column: 31, scope: !7)
!30 = !DILocation(line: 42, column: 36, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 36, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 27, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 36, scope: !7)
!38 = !DILocation(line: 55, column: 31, scope: !7)
!39 = !DILocation(line: 55, column: 36, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 58, column: 42, scope: !7)
!48 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !49)
!49 = !DILocation(line: 60, column: 42, scope: !7)
!50 = !DILocation(line: 63, column: 37, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !49)
!52 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !49)
!53 = !DILocation(line: 63, column: 25, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !49)
!55 = !DILocation(line: 62, column: 35, scope: !7)
!56 = !DILocation(line: 63, column: 4, scope: !7)
