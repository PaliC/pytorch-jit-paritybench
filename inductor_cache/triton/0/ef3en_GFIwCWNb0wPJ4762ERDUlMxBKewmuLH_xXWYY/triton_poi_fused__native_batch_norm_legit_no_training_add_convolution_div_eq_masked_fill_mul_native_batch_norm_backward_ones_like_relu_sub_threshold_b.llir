; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 127, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !13
  %19 = icmp slt i32 %18, 512, !dbg !14
  %20 = srem i32 %18, 128, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %19) #3, !dbg !17
  %24 = bitcast i32 %23 to float, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %19) #3, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = sext i32 %20 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %19) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %19) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %19) #3, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %19) #3, !dbg !29
  %41 = fcmp oeq float %24, 0.000000e+00, !dbg !30
  %42 = select i1 %41, float 1.000000e+00, float %24, !dbg !31
  %43 = fadd float %27, %31, !dbg !32
  %44 = fsub float %43, %31, !dbg !33
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %42) #3, !dbg !34
  %46 = fadd float %36, 0x3EE4F8B580000000, !dbg !35
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %47, 0, !dbg !36
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %48, 0, !dbg !36
  br i1 %.not.i, label %54, label %49, !dbg !36

49:                                               ; preds = %13
  br i1 %.not1.i, label %52, label %50, !dbg !36

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

54:                                               ; preds = %13
  br i1 %.not1.i, label %57, label %55, !dbg !36

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !36
  %59 = fadd float %45, %31, !dbg !37
  %60 = select i1 %41, float 0.000000e+00, float %59, !dbg !38
  %61 = bitcast i32 %33 to float, !dbg !23
  %62 = fsub float %60, %61, !dbg !39
  %63 = bitcast i32 %40 to float, !dbg !29
  %64 = bitcast i32 %38 to float, !dbg !27
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %66 = fmul float %62, %65, !dbg !41
  %67 = fmul float %66, %64, !dbg !42
  %68 = fadd float %67, %63, !dbg !43
  %69 = fcmp olt float %68, 0.000000e+00, !dbg !44
  %70 = select i1 %69, float 0.000000e+00, float %68, !dbg !48
  %71 = select i1 %41, float 0.000000e+00, float 1.000000e+00, !dbg !49
  %72 = fmul float %71, %70, !dbg !50
  %73 = fcmp ole float %70, 0.000000e+00, !dbg !51
  %74 = getelementptr i1, ptr addrspace(1) %7, i64 %21, !dbg !52
  %75 = zext i1 %41 to i8, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %75, ptr addrspace(1) %74, i1 %19) #3, !dbg !53
  %76 = bitcast float %42 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %76, ptr addrspace(1) %22, i1 %19) #3, !dbg !54
  %77 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !55
  %78 = bitcast float %62 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %77, i1 %19) #3, !dbg !56
  %79 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !57
  %80 = bitcast float %71 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %79, i1 %19) #3, !dbg !58
  %81 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !59
  %82 = bitcast float %72 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %81, i1 %19) #3, !dbg !60
  %83 = getelementptr i1, ptr addrspace(1) %11, i64 %21, !dbg !61
  %84 = zext i1 %73 to i8, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %84, ptr addrspace(1) %83, i1 %19) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "charsq46tmsqmlhqrrvztyxv7oybhlnrymyydvzxrpmrrskyarv4.py", directory: "inductor_cache/ha")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_native_batch_norm_backward_ones_like_relu_sub_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 19, scope: !7)
!31 = !DILocation(line: 36, column: 32, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 33, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 53, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 21, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 36, scope: !7)
!54 = !DILocation(line: 58, column: 39, scope: !7)
!55 = !DILocation(line: 59, column: 25, scope: !7)
!56 = !DILocation(line: 59, column: 37, scope: !7)
!57 = !DILocation(line: 60, column: 25, scope: !7)
!58 = !DILocation(line: 60, column: 37, scope: !7)
!59 = !DILocation(line: 61, column: 25, scope: !7)
!60 = !DILocation(line: 61, column: 37, scope: !7)
!61 = !DILocation(line: 62, column: 25, scope: !7)
!62 = !DILocation(line: 62, column: 37, scope: !7)
!63 = !DILocation(line: 62, column: 4, scope: !7)
