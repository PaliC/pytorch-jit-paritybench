; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !11
  %9 = shl i32 %8, 10, !dbg !12
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !13
  %11 = shl i32 %10, 2, !dbg !13
  %12 = and i32 %11, 508, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 513, !dbg !13
  %17 = or disjoint i32 %12, 514, !dbg !13
  %18 = or disjoint i32 %12, 515, !dbg !13
  %19 = or disjoint i32 %9, %12, !dbg !14
  %20 = or disjoint i32 %9, %13, !dbg !14
  %21 = or disjoint i32 %9, %14, !dbg !14
  %22 = or disjoint i32 %9, %15, !dbg !14
  %23 = or disjoint i32 %19, 512, !dbg !14
  %24 = or disjoint i32 %9, %16, !dbg !14
  %25 = or disjoint i32 %9, %17, !dbg !14
  %26 = or disjoint i32 %9, %18, !dbg !14
  %.frozen = freeze i32 %7, !dbg !15
  %27 = sdiv i32 %.frozen, 512, !dbg !15
  %28 = mul i32 %27, 512, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = shl i32 %19, 9, !dbg !17
  %30 = shl i32 %20, 9, !dbg !17
  %31 = shl i32 %21, 9, !dbg !17
  %32 = shl i32 %22, 9, !dbg !17
  %33 = shl i32 %23, 9, !dbg !17
  %34 = shl i32 %24, 9, !dbg !17
  %35 = shl i32 %25, 9, !dbg !17
  %36 = shl i32 %26, 9, !dbg !17
  %37 = shl i32 %27, 21, !dbg !18
  %38 = add i32 %37, %.decomposed, !dbg !19
  %39 = add i32 %38, %29, !dbg !20
  %40 = add i32 %38, %30, !dbg !20
  %41 = add i32 %38, %31, !dbg !20
  %42 = add i32 %38, %32, !dbg !20
  %43 = add i32 %38, %33, !dbg !20
  %44 = add i32 %38, %34, !dbg !20
  %45 = add i32 %38, %35, !dbg !20
  %46 = add i32 %38, %36, !dbg !20
  %47 = sext i32 %39 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !21
  %49 = sext i32 %40 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !21
  %51 = sext i32 %41 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !21
  %53 = sext i32 %42 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !21
  %55 = sext i32 %43 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !21
  %57 = sext i32 %44 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !21
  %59 = sext i32 %45 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !21
  %61 = sext i32 %46 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !21
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = sext i32 %.decomposed to i64, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !23
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = shl i32 %7, 12, !dbg !25
  %87 = add i32 %19, %86, !dbg !26
  %88 = add i32 %86, %23, !dbg !26
  %89 = sext i32 %87 to i64, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !27
  %91 = sext i32 %88 to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !28
  %98 = bitcast i32 %94 to float, !dbg !28
  %99 = bitcast i32 %95 to float, !dbg !28
  %100 = bitcast i32 %96 to float, !dbg !28
  %101 = bitcast i32 %97 to float, !dbg !28
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !28
  %107 = bitcast i32 %103 to float, !dbg !28
  %108 = bitcast i32 %104 to float, !dbg !28
  %109 = bitcast i32 %105 to float, !dbg !28
  %110 = bitcast i32 %106 to float, !dbg !28
  %111 = fadd float %64, %85, !dbg !29
  %112 = fadd float %66, %85, !dbg !29
  %113 = fadd float %68, %85, !dbg !29
  %114 = fadd float %70, %85, !dbg !29
  %115 = fadd float %72, %85, !dbg !29
  %116 = fadd float %74, %85, !dbg !29
  %117 = fadd float %76, %85, !dbg !29
  %118 = fadd float %78, %85, !dbg !29
  %119 = fadd float %111, %98, !dbg !30
  %120 = fadd float %112, %99, !dbg !30
  %121 = fadd float %113, %100, !dbg !30
  %122 = fadd float %114, %101, !dbg !30
  %123 = fadd float %115, %107, !dbg !30
  %124 = fadd float %116, %108, !dbg !30
  %125 = fadd float %117, %109, !dbg !30
  %126 = fadd float %118, %110, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !31
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !31
  %129 = bitcast float %119 to i32, !dbg !32
  %130 = bitcast float %120 to i32, !dbg !32
  %131 = bitcast float %121 to i32, !dbg !32
  %132 = bitcast float %122 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %127, i1 true) #1, !dbg !32
  %133 = bitcast float %123 to i32, !dbg !32
  %134 = bitcast float %124 to i32, !dbg !32
  %135 = bitcast float %125 to i32, !dbg !32
  %136 = bitcast float %126 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %134, i32 %135, i32 %136, ptr addrspace(1) %128, i1 true) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw66egrmy76dpfnrjncwmpffi46z6mn7kvkm46yhpqxniazs7j7w.py", directory: "inductor_cache/w6")
!4 = !{ptr @triton_poi_fused_add_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_2", linkageName: "triton_poi_fused_add_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 28, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 26, column: 23, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 52, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 46, scope: !7)
!33 = !DILocation(line: 37, column: 4, scope: !7)
