; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 2, !dbg !13
  %.frozen = freeze i32 %20, !dbg !14
  %22 = sdiv i32 %.frozen, 8, !dbg !14
  %23 = srem i32 %22, 8, !dbg !15
  %24 = mul i32 %22, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %21, 8, !dbg !16
  %26 = sdiv i32 %20, 64, !dbg !17
  %27 = srem i32 %26, 256, !dbg !18
  %28 = sext i32 %23 to i64, !dbg !19
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %34 = sext i32 %.decomposed to i64, !dbg !21
  %35 = getelementptr i64, ptr addrspace(1) %2, i64 %34, !dbg !21
  %36 = sext i32 %25 to i64, !dbg !21
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !22
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !22
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !22
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !22
  %44 = sext i32 %27 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !24
  %50 = getelementptr i64, ptr addrspace(1) %6, i64 %28, !dbg !25
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !26
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !26
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !26
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !26
  %55 = getelementptr i64, ptr addrspace(1) %7, i64 %34, !dbg !27
  %56 = getelementptr i64, ptr addrspace(1) %7, i64 %36, !dbg !27
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !28
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !28
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !28
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !28
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !28
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %8, i64 %34, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !32
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !32
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !32
  %74 = sext i32 %20 to i64, !dbg !33
  %75 = getelementptr float, ptr addrspace(1) %10, i64 %74, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !34
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !34
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !34
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !34
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %11, i64 %44, !dbg !35
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !36
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !36
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !36
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !36
  %86 = getelementptr float, ptr addrspace(1) %12, i64 %74, !dbg !37
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !38
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !38
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !38
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !38
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !38
  %92 = lshr i64 %30, 61, !dbg !39
  %93 = and i64 %92, 4, !dbg !39
  %94 = add i64 %93, %30, !dbg !39
  %95 = lshr i64 %39, 61, !dbg !40
  %96 = and i64 %95, 4, !dbg !40
  %97 = add i64 %96, %39, !dbg !40
  %98 = lshr i64 %40, 61, !dbg !40
  %99 = and i64 %98, 4, !dbg !40
  %100 = add i64 %99, %40, !dbg !40
  %101 = lshr i64 %42, 61, !dbg !40
  %102 = and i64 %101, 4, !dbg !40
  %103 = add i64 %102, %42, !dbg !40
  %104 = lshr i64 %43, 61, !dbg !40
  %105 = and i64 %104, 4, !dbg !40
  %106 = add i64 %105, %43, !dbg !40
  %107 = shl i64 %94, 2, !dbg !41
  %108 = shl nsw i32 %26, 4, !dbg !42
  %109 = sext i32 %108 to i64, !dbg !43
  %110 = add i64 %107, %109, !dbg !44
  %111 = add i64 %110, %97, !dbg !43
  %112 = add i64 %110, %100, !dbg !43
  %113 = add i64 %110, %103, !dbg !43
  %114 = add i64 %110, %106, !dbg !43
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !45
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %112, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !45
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !45
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !46
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !46
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !46
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !46
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %111, !dbg !47
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !47
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !47
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %114, !dbg !47
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !48
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #1, !dbg !48
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !48
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !48
  %131 = lshr i64 %51, 61, !dbg !49
  %132 = and i64 %131, 4, !dbg !49
  %133 = add i64 %132, %51, !dbg !49
  %134 = shl i64 %133, 2, !dbg !50
  %135 = add i64 %134, %109, !dbg !51
  %136 = add i64 %135, %97, !dbg !52
  %137 = add i64 %135, %100, !dbg !52
  %138 = add i64 %135, %103, !dbg !52
  %139 = add i64 %135, %106, !dbg !52
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !53
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !53
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !53
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !53
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !54
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !54
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !54
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !54
  %148 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !55
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %137, !dbg !55
  %150 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !55
  %151 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !55
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !56
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 true) #1, !dbg !56
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !56
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !56
  %156 = lshr i64 %58, 61, !dbg !57
  %157 = and i64 %156, 4, !dbg !57
  %158 = add i64 %157, %58, !dbg !57
  %159 = lshr i64 %59, 61, !dbg !57
  %160 = and i64 %159, 4, !dbg !57
  %161 = add i64 %160, %59, !dbg !57
  %162 = lshr i64 %61, 61, !dbg !57
  %163 = and i64 %162, 4, !dbg !57
  %164 = add i64 %163, %61, !dbg !57
  %165 = lshr i64 %62, 61, !dbg !57
  %166 = and i64 %165, 4, !dbg !57
  %167 = add i64 %166, %62, !dbg !57
  %168 = add i64 %135, %158, !dbg !58
  %169 = add i64 %135, %161, !dbg !58
  %170 = add i64 %135, %164, !dbg !58
  %171 = add i64 %135, %167, !dbg !58
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !59
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !59
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !59
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !59
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !60
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !60
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !60
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #1, !dbg !60
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %168, !dbg !61
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !61
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %170, !dbg !61
  %183 = getelementptr float, ptr addrspace(1) %5, i64 %171, !dbg !61
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !62
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #1, !dbg !62
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !62
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 true) #1, !dbg !62
  %188 = add i64 %110, %158, !dbg !63
  %189 = add i64 %110, %161, !dbg !63
  %190 = add i64 %110, %164, !dbg !63
  %191 = add i64 %110, %167, !dbg !63
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %188, !dbg !64
  %193 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !64
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %190, !dbg !64
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !64
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 true) #1, !dbg !65
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #1, !dbg !65
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !65
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 true) #1, !dbg !65
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %188, !dbg !66
  %201 = getelementptr float, ptr addrspace(1) %5, i64 %189, !dbg !66
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %190, !dbg !66
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %191, !dbg !66
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 true) #1, !dbg !67
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #1, !dbg !67
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !67
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #1, !dbg !67
  %208 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !46
  %209 = insertelement <2 x i32> %208, i32 %144, i64 1, !dbg !46
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !46
  %211 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !68
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !68
  %213 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %214 = fadd <2 x float> %213, %210, !dbg !68
  %215 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !48
  %216 = insertelement <2 x i32> %215, i32 %152, i64 1, !dbg !48
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !48
  %218 = fadd <2 x float> %214, %217, !dbg !69
  %219 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !65
  %220 = insertelement <2 x i32> %219, i32 %176, i64 1, !dbg !65
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !65
  %222 = fadd <2 x float> %213, %221, !dbg !70
  %223 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !67
  %224 = insertelement <2 x i32> %223, i32 %184, i64 1, !dbg !67
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !67
  %226 = fadd <2 x float> %222, %225, !dbg !71
  %227 = fsub <2 x float> %226, %218, !dbg !72
  %228 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !73
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !73
  %230 = shufflevector <2 x float> %229, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %231 = fmul <2 x float> %227, %230, !dbg !73
  %232 = fadd <2 x float> %218, %231, !dbg !74
  %233 = shufflevector <2 x float> %232, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %234 = shufflevector <2 x float> %232, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %235 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !46
  %236 = insertelement <2 x i32> %235, i32 %145, i64 1, !dbg !46
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !46
  %238 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !68
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !68
  %240 = shufflevector <2 x float> %239, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %241 = fadd <2 x float> %240, %237, !dbg !68
  %242 = insertelement <2 x i32> poison, i32 %128, i64 0, !dbg !48
  %243 = insertelement <2 x i32> %242, i32 %153, i64 1, !dbg !48
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !48
  %245 = fadd <2 x float> %241, %244, !dbg !69
  %246 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !65
  %247 = insertelement <2 x i32> %246, i32 %177, i64 1, !dbg !65
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !65
  %249 = fadd <2 x float> %240, %248, !dbg !70
  %250 = insertelement <2 x i32> poison, i32 %205, i64 0, !dbg !67
  %251 = insertelement <2 x i32> %250, i32 %185, i64 1, !dbg !67
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !67
  %253 = fadd <2 x float> %249, %252, !dbg !71
  %254 = fsub <2 x float> %253, %245, !dbg !72
  %255 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !73
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !73
  %257 = shufflevector <2 x float> %256, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %258 = fmul <2 x float> %254, %257, !dbg !73
  %259 = fadd <2 x float> %245, %258, !dbg !74
  %260 = shufflevector <2 x float> %259, <2 x float> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %261 = shufflevector <2 x float> %259, <2 x float> poison, <4 x i32> <i32 0, i32 poison, i32 poison, i32 poison>
  %262 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !46
  %263 = insertelement <2 x i32> %262, i32 %146, i64 1, !dbg !46
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !46
  %265 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !68
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !68
  %267 = shufflevector <2 x float> %266, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %268 = fadd <2 x float> %267, %264, !dbg !68
  %269 = insertelement <2 x i32> poison, i32 %129, i64 0, !dbg !48
  %270 = insertelement <2 x i32> %269, i32 %154, i64 1, !dbg !48
  %271 = bitcast <2 x i32> %270 to <2 x float>, !dbg !48
  %272 = fadd <2 x float> %268, %271, !dbg !69
  %273 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !65
  %274 = insertelement <2 x i32> %273, i32 %178, i64 1, !dbg !65
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !65
  %276 = fadd <2 x float> %267, %275, !dbg !70
  %277 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !67
  %278 = insertelement <2 x i32> %277, i32 %186, i64 1, !dbg !67
  %279 = bitcast <2 x i32> %278 to <2 x float>, !dbg !67
  %280 = fadd <2 x float> %276, %279, !dbg !71
  %281 = fsub <2 x float> %280, %272, !dbg !72
  %282 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !73
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !73
  %284 = shufflevector <2 x float> %283, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %285 = fmul <2 x float> %281, %284, !dbg !73
  %286 = fadd <2 x float> %272, %285, !dbg !74
  %287 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !46
  %288 = insertelement <2 x i32> %287, i32 %147, i64 1, !dbg !46
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !46
  %290 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !68
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !68
  %292 = shufflevector <2 x float> %291, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %293 = fadd <2 x float> %292, %289, !dbg !68
  %294 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !48
  %295 = insertelement <2 x i32> %294, i32 %155, i64 1, !dbg !48
  %296 = bitcast <2 x i32> %295 to <2 x float>, !dbg !48
  %297 = fadd <2 x float> %293, %296, !dbg !69
  %298 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !65
  %299 = insertelement <2 x i32> %298, i32 %179, i64 1, !dbg !65
  %300 = bitcast <2 x i32> %299 to <2 x float>, !dbg !65
  %301 = fadd <2 x float> %292, %300, !dbg !70
  %302 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !67
  %303 = insertelement <2 x i32> %302, i32 %187, i64 1, !dbg !67
  %304 = bitcast <2 x i32> %303 to <2 x float>, !dbg !67
  %305 = fadd <2 x float> %301, %304, !dbg !71
  %306 = fsub <2 x float> %305, %297, !dbg !72
  %307 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !73
  %308 = bitcast <2 x i32> %307 to <2 x float>, !dbg !73
  %309 = shufflevector <2 x float> %308, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %310 = fmul <2 x float> %306, %309, !dbg !73
  %311 = fadd <2 x float> %297, %310, !dbg !74
  %312 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !32
  %313 = insertelement <4 x i32> %312, i32 %72, i64 1, !dbg !32
  %314 = insertelement <4 x i32> %313, i32 %71, i64 2, !dbg !32
  %315 = insertelement <4 x i32> %314, i32 %70, i64 3, !dbg !32
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !32
  %317 = insertelement <4 x i32> poison, i32 %80, i64 0, !dbg !34
  %318 = insertelement <4 x i32> %317, i32 %79, i64 1, !dbg !34
  %319 = insertelement <4 x i32> %318, i32 %78, i64 2, !dbg !34
  %320 = insertelement <4 x i32> %319, i32 %77, i64 3, !dbg !34
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !34
  %322 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !36
  %323 = insertelement <4 x i32> %322, i32 %84, i64 1, !dbg !36
  %324 = insertelement <4 x i32> %323, i32 %83, i64 2, !dbg !36
  %325 = insertelement <4 x i32> %324, i32 %82, i64 3, !dbg !36
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !36
  %327 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !38
  %328 = insertelement <4 x i32> %327, i32 %90, i64 1, !dbg !38
  %329 = insertelement <4 x i32> %328, i32 %89, i64 2, !dbg !38
  %330 = insertelement <4 x i32> %329, i32 %88, i64 3, !dbg !38
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !38
  %332 = shufflevector <2 x float> %311, <2 x float> %286, <4 x i32> <i32 0, i32 2, i32 poison, i32 poison>, !dbg !75
  %333 = shufflevector <4 x float> %332, <4 x float> %261, <4 x i32> <i32 0, i32 1, i32 4, i32 poison>, !dbg !75
  %334 = shufflevector <4 x float> %333, <4 x float> %234, <4 x i32> <i32 0, i32 1, i32 2, i32 4>, !dbg !75
  %335 = shufflevector <2 x float> %311, <2 x float> %286, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !75
  %336 = shufflevector <4 x float> %335, <4 x float> %260, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !75
  %337 = shufflevector <4 x float> %336, <4 x float> %233, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !75
  %338 = fsub <4 x float> %334, %337, !dbg !75
  %339 = fmul <4 x float> %338, %316, !dbg !76
  %340 = fadd <4 x float> %337, %339, !dbg !77
  %341 = fadd <4 x float> %321, %326, !dbg !78
  %342 = fadd <4 x float> %341, %331, !dbg !79
  %343 = fadd <4 x float> %342, %340, !dbg !80
  %344 = fcmp olt <4 x float> %343, zeroinitializer, !dbg !81
  %345 = extractelement <4 x i1> %344, i64 3, !dbg !85
  %346 = extractelement <4 x i1> %344, i64 2, !dbg !85
  %347 = extractelement <4 x i1> %344, i64 1, !dbg !85
  %348 = extractelement <4 x i1> %344, i64 0, !dbg !85
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !86
  %bc = bitcast <4 x float> %343 to <4 x i32>, !dbg !87
  %350 = extractelement <4 x i32> %bc, i64 3, !dbg !87
  %351 = select i1 %345, i32 0, i32 %350, !dbg !85
  %bc1 = bitcast <4 x float> %343 to <4 x i32>, !dbg !87
  %352 = extractelement <4 x i32> %bc1, i64 2, !dbg !87
  %353 = select i1 %346, i32 0, i32 %352, !dbg !85
  %bc2 = bitcast <4 x float> %343 to <4 x i32>, !dbg !87
  %354 = extractelement <4 x i32> %bc2, i64 1, !dbg !87
  %355 = select i1 %347, i32 0, i32 %354, !dbg !85
  %bc3 = bitcast <4 x float> %343 to <4 x i32>, !dbg !87
  %356 = extractelement <4 x i32> %bc3, i64 0, !dbg !87
  %357 = select i1 %348, i32 0, i32 %356, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %353, i32 %355, i32 %357, ptr addrspace(1) %349, i1 true) #1, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctgf5bh7qtlmhirb33tj5rfhk4p2dwmhzu5bbbl7b7h4gdxtrqfp.py", directory: "inductor_cache/tg")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_30", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_relu_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 37, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 39, scope: !7)
!42 = !DILocation(line: 46, column: 49, scope: !7)
!43 = !DILocation(line: 46, column: 46, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 54, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 55, scope: !7)
!49 = !DILocation(line: 52, column: 35, scope: !7)
!50 = !DILocation(line: 53, column: 40, scope: !7)
!51 = !DILocation(line: 53, column: 38, scope: !7)
!52 = !DILocation(line: 53, column: 48, scope: !7)
!53 = !DILocation(line: 53, column: 31, scope: !7)
!54 = !DILocation(line: 53, column: 56, scope: !7)
!55 = !DILocation(line: 55, column: 31, scope: !7)
!56 = !DILocation(line: 55, column: 56, scope: !7)
!57 = !DILocation(line: 59, column: 35, scope: !7)
!58 = !DILocation(line: 60, column: 49, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 57, scope: !7)
!61 = !DILocation(line: 62, column: 31, scope: !7)
!62 = !DILocation(line: 62, column: 57, scope: !7)
!63 = !DILocation(line: 67, column: 48, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 56, scope: !7)
!66 = !DILocation(line: 69, column: 31, scope: !7)
!67 = !DILocation(line: 69, column: 56, scope: !7)
!68 = !DILocation(line: 47, column: 19, scope: !7)
!69 = !DILocation(line: 49, column: 20, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 73, column: 20, scope: !7)
!75 = !DILocation(line: 74, column: 20, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 76, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 81, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 82, column: 28, scope: !7)
!87 = !DILocation(line: 82, column: 40, scope: !7)
!88 = !DILocation(line: 82, column: 4, scope: !7)
