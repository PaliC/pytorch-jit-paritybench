; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = srem i32 %11, 512, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !16
  %16 = extractvalue { i32, i32 } %15, 0, !dbg !16
  %17 = extractvalue { i32, i32 } %15, 1, !dbg !16
  %18 = add i32 %11, -3072, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = add i32 %11, -2560, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !22
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %30 = add i32 %11, -2048, !dbg !23
  %31 = sext i32 %30 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = add i32 %11, -1536, !dbg !26
  %37 = sext i32 %36 to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = add i32 %11, -1024, !dbg !29
  %43 = sext i32 %42 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !31
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !32
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %51 = add i32 %11, -512, !dbg !33
  %52 = sext i32 %51 to i64, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !34
  %54 = add i32 %11, 512, !dbg !35
  %55 = sext i32 %54 to i64, !dbg !36
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !36
  %57 = add i32 %11, 1024, !dbg !37
  %58 = sext i32 %57 to i64, !dbg !38
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !38
  %60 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !39
  %61 = shufflevector <2 x i32> %60, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !39
  %62 = sdiv <2 x i32> %61, <i32 1024, i32 512>, !dbg !39
  %63 = srem <2 x i32> %62, splat (i32 2), !dbg !40
  %64 = extractelement <2 x i32> %63, i64 1, !dbg !41
  %65 = icmp sgt i32 %64, 0, !dbg !42
  %66 = icmp sgt i32 %64, -1, !dbg !43
  %67 = icmp ugt i32 %64, -3, !dbg !44
  %68 = extractelement <2 x i32> %63, i64 0, !dbg !41
  %69 = icmp sgt i32 %68, 0, !dbg !45
  %70 = and i1 %69, %65, !dbg !46
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %70, i32 -8388608, i1 %70, i32 -8388608, i1 %70) #1, !dbg !47
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !47
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !47
  %74 = and i1 %69, %66, !dbg !48
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %74, i32 -8388608, i1 %74, i32 -8388608, i1 %74) #1, !dbg !49
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !49
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !49
  %78 = icmp slt <2 x i32> %63, splat (i32 1), !dbg !50
  %79 = extractelement <2 x i1> %78, i64 1, !dbg !51
  %80 = and i1 %69, %79, !dbg !51
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #1, !dbg !52
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !52
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !52
  %84 = and i1 %69, %67, !dbg !53
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %14, i1 %84, i32 -8388608, i1 %84, i32 -8388608, i1 %84) #1, !dbg !54
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !54
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !54
  %88 = icmp sgt i32 %68, -1, !dbg !55
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !56
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !56
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !56
  %92 = and i1 %88, %65, !dbg !57
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92) #1, !dbg !58
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !58
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !58
  %96 = or i32 %68, %64, !dbg !59
  %97 = icmp sgt i32 %96, -1, !dbg !59
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %14, i1 %97, i32 -8388608, i1 %97, i32 -8388608, i1 %97) #1, !dbg !60
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !60
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !60
  %101 = and i1 %88, %79, !dbg !61
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %101, i32 -8388608, i1 %101, i32 -8388608, i1 %101) #1, !dbg !62
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !62
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !62
  %105 = and i1 %88, %67, !dbg !63
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #1, !dbg !64
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !64
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !64
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %14, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !65
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !65
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !65
  %112 = extractelement <2 x i1> %78, i64 0, !dbg !66
  %113 = and i1 %112, %65, !dbg !66
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %113, i32 -8388608, i1 %113, i32 -8388608, i1 %113) #1, !dbg !67
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !67
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !67
  %117 = and i1 %112, %66, !dbg !68
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %117, i32 -8388608, i1 %117, i32 -8388608, i1 %117) #1, !dbg !69
  %119 = extractvalue { i32, i32 } %118, 0, !dbg !69
  %120 = extractvalue { i32, i32 } %118, 1, !dbg !69
  %121 = and i1 %112, %79, !dbg !70
  %122 = add i32 %11, 1536, !dbg !71
  %123 = sext i32 %122 to i64, !dbg !72
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !72
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #1, !dbg !73
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !73
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !73
  %128 = and i1 %112, %67, !dbg !74
  %129 = add i32 %11, 2048, !dbg !75
  %130 = sext i32 %129 to i64, !dbg !76
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !76
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %128, i32 -8388608, i1 %128, i32 -8388608, i1 %128) #1, !dbg !77
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !77
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !77
  %135 = icmp ugt i32 %68, -3, !dbg !78
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 false, i32 -8388608, i1 false, i32 -8388608, i1 false) #1, !dbg !79
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !79
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !79
  %139 = and i1 %135, %65, !dbg !80
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %124, i1 %139, i32 -8388608, i1 %139, i32 -8388608, i1 %139) #1, !dbg !81
  %141 = extractvalue { i32, i32 } %140, 0, !dbg !81
  %142 = extractvalue { i32, i32 } %140, 1, !dbg !81
  %143 = and i1 %135, %66, !dbg !82
  %144 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %143, i32 -8388608, i1 %143, i32 -8388608, i1 %143) #1, !dbg !83
  %145 = extractvalue { i32, i32 } %144, 0, !dbg !83
  %146 = extractvalue { i32, i32 } %144, 1, !dbg !83
  %147 = and i1 %135, %79, !dbg !84
  %148 = add i32 %11, 2560, !dbg !85
  %149 = sext i32 %148 to i64, !dbg !86
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !86
  %151 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %150, i1 %147, i32 -8388608, i1 %147, i32 -8388608, i1 %147) #1, !dbg !87
  %152 = extractvalue { i32, i32 } %151, 0, !dbg !87
  %153 = extractvalue { i32, i32 } %151, 1, !dbg !87
  %154 = and i32 %68, %64, !dbg !41
  %155 = icmp ugt i32 %154, -3, !dbg !41
  %156 = add i32 %11, 3072, !dbg !88
  %157 = sext i32 %156 to i64, !dbg !89
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !89
  %159 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %158, i1 %155, i32 -8388608, i1 %155, i32 -8388608, i1 %155) #1, !dbg !90
  %160 = extractvalue { i32, i32 } %159, 0, !dbg !90
  %161 = extractvalue { i32, i32 } %159, 1, !dbg !90
  %162 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %163 = insertelement <2 x i32> %162, i32 %23, i64 1, !dbg !19
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !19
  %165 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %166 = insertelement <2 x i32> %165, i32 %29, i64 1, !dbg !22
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !22
  %168 = fcmp ogt <2 x float> %167, %164, !dbg !91
  %169 = fcmp uno <2 x float> %167, zeroinitializer, !dbg !95
  %170 = or <2 x i1> %168, %169, !dbg !96
  %.v = select <2 x i1> %170, <2 x i32> %166, <2 x i32> %163, !dbg !97
  %171 = bitcast <2 x i32> %.v to <2 x float>, !dbg !97
  %172 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !25
  %173 = insertelement <2 x i32> %172, i32 %35, i64 1, !dbg !25
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !25
  %175 = fcmp olt <2 x float> %171, %174, !dbg !98
  %176 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !28
  %177 = insertelement <2 x i32> %176, i32 %41, i64 1, !dbg !28
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !28
  %179 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !100
  %180 = or <2 x i1> %179, %175, !dbg !101
  %.v1 = select <2 x i1> %180, <2 x i32> %173, <2 x i32> %.v, !dbg !102
  %181 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !102
  %182 = fcmp olt <2 x float> %181, %178, !dbg !103
  %183 = fcmp uno <2 x float> %178, zeroinitializer, !dbg !105
  %184 = or <2 x i1> %183, %182, !dbg !106
  %.v2 = select <2 x i1> %184, <2 x i32> %177, <2 x i32> %.v1, !dbg !107
  %185 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !107
  %186 = zext <2 x i1> %168 to <2 x i8>, !dbg !108
  %187 = select <2 x i1> %175, <2 x i8> splat (i8 2), <2 x i8> %186, !dbg !109
  %188 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !31
  %189 = insertelement <2 x i32> %188, i32 %47, i64 1, !dbg !31
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !31
  %191 = fcmp uno <2 x float> %190, zeroinitializer, !dbg !110
  %192 = fcmp olt <2 x float> %185, %190, !dbg !112
  %193 = or <2 x i1> %191, %192, !dbg !113
  %.v3 = select <2 x i1> %193, <2 x i32> %189, <2 x i32> %.v2, !dbg !114
  %194 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !114
  %195 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !32
  %196 = insertelement <2 x i32> %195, i32 %50, i64 1, !dbg !32
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !32
  %198 = fcmp olt <2 x float> %194, %197, !dbg !115
  %199 = fcmp uno <2 x float> %197, zeroinitializer, !dbg !117
  %200 = or <2 x i1> %199, %198, !dbg !118
  %.v4 = select <2 x i1> %200, <2 x i32> %196, <2 x i32> %.v3, !dbg !119
  %201 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !119
  %202 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !47
  %203 = insertelement <2 x i32> %202, i32 %73, i64 1, !dbg !47
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !47
  %205 = fcmp olt <2 x float> %201, %204, !dbg !120
  %206 = fcmp uno <2 x float> %204, zeroinitializer, !dbg !122
  %207 = or <2 x i1> %206, %205, !dbg !123
  %.v5 = select <2 x i1> %207, <2 x i32> %203, <2 x i32> %.v4, !dbg !124
  %208 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !124
  %209 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !49
  %210 = insertelement <2 x i32> %209, i32 %77, i64 1, !dbg !49
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !49
  %212 = fcmp olt <2 x float> %208, %211, !dbg !125
  %213 = fcmp uno <2 x float> %211, zeroinitializer, !dbg !127
  %214 = or <2 x i1> %213, %212, !dbg !128
  %.v6 = select <2 x i1> %214, <2 x i32> %210, <2 x i32> %.v5, !dbg !129
  %215 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !129
  %216 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !52
  %217 = insertelement <2 x i32> %216, i32 %83, i64 1, !dbg !52
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !52
  %219 = fcmp olt <2 x float> %215, %218, !dbg !130
  %220 = fcmp uno <2 x float> %218, zeroinitializer, !dbg !132
  %221 = or <2 x i1> %220, %219, !dbg !133
  %.v7 = select <2 x i1> %221, <2 x i32> %217, <2 x i32> %.v6, !dbg !134
  %222 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !134
  %223 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !54
  %224 = insertelement <2 x i32> %223, i32 %87, i64 1, !dbg !54
  %225 = bitcast <2 x i32> %224 to <2 x float>, !dbg !54
  %226 = fcmp olt <2 x float> %222, %225, !dbg !135
  %227 = fcmp uno <2 x float> %225, zeroinitializer, !dbg !137
  %228 = or <2 x i1> %227, %226, !dbg !138
  %.v8 = select <2 x i1> %228, <2 x i32> %224, <2 x i32> %.v7, !dbg !139
  %229 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !139
  %230 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !56
  %231 = insertelement <2 x i32> %230, i32 %91, i64 1, !dbg !56
  %232 = bitcast <2 x i32> %231 to <2 x float>, !dbg !56
  %233 = fcmp olt <2 x float> %229, %232, !dbg !140
  %234 = fcmp uno <2 x float> %232, zeroinitializer, !dbg !142
  %235 = or <2 x i1> %234, %233, !dbg !143
  %.v9 = select <2 x i1> %235, <2 x i32> %231, <2 x i32> %.v8, !dbg !144
  %236 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !144
  %237 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !58
  %238 = insertelement <2 x i32> %237, i32 %95, i64 1, !dbg !58
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !58
  %240 = fcmp olt <2 x float> %236, %239, !dbg !145
  %241 = fcmp uno <2 x float> %239, zeroinitializer, !dbg !147
  %242 = or <2 x i1> %241, %240, !dbg !148
  %.v10 = select <2 x i1> %242, <2 x i32> %238, <2 x i32> %.v9, !dbg !149
  %243 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !149
  %244 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !60
  %245 = insertelement <2 x i32> %244, i32 %100, i64 1, !dbg !60
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !60
  %247 = fcmp olt <2 x float> %243, %246, !dbg !150
  %248 = fcmp uno <2 x float> %246, zeroinitializer, !dbg !152
  %249 = or <2 x i1> %248, %247, !dbg !153
  %.v11 = select <2 x i1> %249, <2 x i32> %245, <2 x i32> %.v10, !dbg !154
  %250 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !154
  %251 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !62
  %252 = insertelement <2 x i32> %251, i32 %104, i64 1, !dbg !62
  %253 = bitcast <2 x i32> %252 to <2 x float>, !dbg !62
  %254 = fcmp olt <2 x float> %250, %253, !dbg !155
  %255 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !64
  %256 = insertelement <2 x i32> %255, i32 %108, i64 1, !dbg !64
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !64
  %258 = fcmp uno <2 x float> %253, zeroinitializer, !dbg !157
  %259 = or <2 x i1> %258, %254, !dbg !158
  %.v12 = select <2 x i1> %259, <2 x i32> %252, <2 x i32> %.v11, !dbg !159
  %260 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !159
  %261 = fcmp olt <2 x float> %260, %257, !dbg !160
  %262 = fcmp uno <2 x float> %257, zeroinitializer, !dbg !162
  %263 = or <2 x i1> %262, %261, !dbg !163
  %.v13 = select <2 x i1> %263, <2 x i32> %256, <2 x i32> %.v12, !dbg !164
  %264 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !164
  %265 = select <2 x i1> %182, <2 x i8> splat (i8 3), <2 x i8> %187, !dbg !165
  %266 = select <2 x i1> %192, <2 x i8> splat (i8 4), <2 x i8> %265, !dbg !166
  %267 = select <2 x i1> %198, <2 x i8> splat (i8 5), <2 x i8> %266, !dbg !167
  %268 = select <2 x i1> %205, <2 x i8> splat (i8 6), <2 x i8> %267, !dbg !168
  %269 = select <2 x i1> %212, <2 x i8> splat (i8 7), <2 x i8> %268, !dbg !169
  %270 = select <2 x i1> %219, <2 x i8> splat (i8 8), <2 x i8> %269, !dbg !170
  %271 = select <2 x i1> %226, <2 x i8> splat (i8 9), <2 x i8> %270, !dbg !171
  %272 = select <2 x i1> %233, <2 x i8> splat (i8 10), <2 x i8> %271, !dbg !172
  %273 = select <2 x i1> %240, <2 x i8> splat (i8 11), <2 x i8> %272, !dbg !173
  %274 = select <2 x i1> %247, <2 x i8> splat (i8 12), <2 x i8> %273, !dbg !174
  %275 = select <2 x i1> %254, <2 x i8> splat (i8 13), <2 x i8> %274, !dbg !175
  %276 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !65
  %277 = insertelement <2 x i32> %276, i32 %111, i64 1, !dbg !65
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !65
  %279 = fcmp uno <2 x float> %278, zeroinitializer, !dbg !176
  %280 = fcmp olt <2 x float> %264, %278, !dbg !178
  %281 = or <2 x i1> %279, %280, !dbg !179
  %.v14 = select <2 x i1> %281, <2 x i32> %277, <2 x i32> %.v13, !dbg !180
  %282 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !180
  %283 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !67
  %284 = insertelement <2 x i32> %283, i32 %116, i64 1, !dbg !67
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !67
  %286 = fcmp olt <2 x float> %282, %285, !dbg !181
  %287 = fcmp uno <2 x float> %285, zeroinitializer, !dbg !183
  %288 = or <2 x i1> %287, %286, !dbg !184
  %.v15 = select <2 x i1> %288, <2 x i32> %284, <2 x i32> %.v14, !dbg !185
  %289 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !185
  %290 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !69
  %291 = insertelement <2 x i32> %290, i32 %120, i64 1, !dbg !69
  %292 = bitcast <2 x i32> %291 to <2 x float>, !dbg !69
  %293 = fcmp olt <2 x float> %289, %292, !dbg !186
  %294 = fcmp uno <2 x float> %292, zeroinitializer, !dbg !188
  %295 = or <2 x i1> %294, %293, !dbg !189
  %.v16 = select <2 x i1> %295, <2 x i32> %291, <2 x i32> %.v15, !dbg !190
  %296 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !190
  %297 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !73
  %298 = insertelement <2 x i32> %297, i32 %127, i64 1, !dbg !73
  %299 = bitcast <2 x i32> %298 to <2 x float>, !dbg !73
  %300 = fcmp olt <2 x float> %296, %299, !dbg !191
  %301 = fcmp uno <2 x float> %299, zeroinitializer, !dbg !193
  %302 = or <2 x i1> %301, %300, !dbg !194
  %.v17 = select <2 x i1> %302, <2 x i32> %298, <2 x i32> %.v16, !dbg !195
  %303 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !195
  %304 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !77
  %305 = insertelement <2 x i32> %304, i32 %134, i64 1, !dbg !77
  %306 = bitcast <2 x i32> %305 to <2 x float>, !dbg !77
  %307 = fcmp olt <2 x float> %303, %306, !dbg !196
  %308 = fcmp uno <2 x float> %306, zeroinitializer, !dbg !198
  %309 = or <2 x i1> %308, %307, !dbg !199
  %.v18 = select <2 x i1> %309, <2 x i32> %305, <2 x i32> %.v17, !dbg !200
  %310 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !200
  %311 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !79
  %312 = insertelement <2 x i32> %311, i32 %138, i64 1, !dbg !79
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !79
  %314 = fcmp olt <2 x float> %310, %313, !dbg !201
  %315 = fcmp uno <2 x float> %313, zeroinitializer, !dbg !203
  %316 = or <2 x i1> %315, %314, !dbg !204
  %.v19 = select <2 x i1> %316, <2 x i32> %312, <2 x i32> %.v18, !dbg !205
  %317 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !205
  %318 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !81
  %319 = insertelement <2 x i32> %318, i32 %142, i64 1, !dbg !81
  %320 = bitcast <2 x i32> %319 to <2 x float>, !dbg !81
  %321 = fcmp olt <2 x float> %317, %320, !dbg !206
  %322 = fcmp uno <2 x float> %320, zeroinitializer, !dbg !208
  %323 = or <2 x i1> %322, %321, !dbg !209
  %.v20 = select <2 x i1> %323, <2 x i32> %319, <2 x i32> %.v19, !dbg !210
  %324 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !210
  %325 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !83
  %326 = insertelement <2 x i32> %325, i32 %146, i64 1, !dbg !83
  %327 = bitcast <2 x i32> %326 to <2 x float>, !dbg !83
  %328 = fcmp olt <2 x float> %324, %327, !dbg !211
  %329 = fcmp uno <2 x float> %327, zeroinitializer, !dbg !213
  %330 = or <2 x i1> %329, %328, !dbg !214
  %.v21 = select <2 x i1> %330, <2 x i32> %326, <2 x i32> %.v20, !dbg !215
  %331 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !215
  %332 = insertelement <2 x i32> poison, i32 %152, i64 0, !dbg !87
  %333 = insertelement <2 x i32> %332, i32 %153, i64 1, !dbg !87
  %334 = bitcast <2 x i32> %333 to <2 x float>, !dbg !87
  %335 = fcmp olt <2 x float> %331, %334, !dbg !216
  %336 = fcmp uno <2 x float> %334, zeroinitializer, !dbg !218
  %337 = or <2 x i1> %336, %335, !dbg !219
  %.v22 = select <2 x i1> %337, <2 x i32> %333, <2 x i32> %.v21, !dbg !220
  %338 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !220
  %339 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !90
  %340 = insertelement <2 x i32> %339, i32 %161, i64 1, !dbg !90
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !90
  %342 = fcmp olt <2 x float> %338, %341, !dbg !221
  %343 = bitcast i32 %160 to float, !dbg !223
  %344 = fcmp uno float %343, 0.000000e+00, !dbg !223
  %345 = bitcast i32 %161 to float, !dbg !223
  %346 = fcmp uno float %345, 0.000000e+00, !dbg !223
  %347 = extractelement <2 x i1> %342, i64 0, !dbg !224
  %348 = or i1 %344, %347, !dbg !224
  %349 = extractelement <2 x i1> %342, i64 1, !dbg !224
  %350 = or i1 %346, %349, !dbg !224
  %351 = select <2 x i1> %261, <2 x i8> splat (i8 14), <2 x i8> %275, !dbg !225
  %352 = select <2 x i1> %280, <2 x i8> splat (i8 15), <2 x i8> %351, !dbg !226
  %353 = select <2 x i1> %286, <2 x i8> splat (i8 16), <2 x i8> %352, !dbg !227
  %354 = select <2 x i1> %293, <2 x i8> splat (i8 17), <2 x i8> %353, !dbg !228
  %355 = select <2 x i1> %300, <2 x i8> splat (i8 18), <2 x i8> %354, !dbg !229
  %356 = select <2 x i1> %307, <2 x i8> splat (i8 19), <2 x i8> %355, !dbg !230
  %357 = select <2 x i1> %314, <2 x i8> splat (i8 20), <2 x i8> %356, !dbg !231
  %358 = select <2 x i1> %321, <2 x i8> splat (i8 21), <2 x i8> %357, !dbg !232
  %359 = select <2 x i1> %328, <2 x i8> splat (i8 22), <2 x i8> %358, !dbg !233
  %360 = select <2 x i1> %335, <2 x i8> splat (i8 23), <2 x i8> %359, !dbg !234
  %361 = select <2 x i1> %342, <2 x i8> splat (i8 24), <2 x i8> %360, !dbg !235
  %362 = extractelement <2 x i32> %62, i64 1, !dbg !236
  %363 = shl i32 %362, 11, !dbg !236
  %364 = add i32 %363, %12, !dbg !237
  %365 = sext i32 %364 to i64, !dbg !238
  %366 = getelementptr float, ptr addrspace(1) %1, i64 %365, !dbg !238
  %367 = extractelement <2 x i32> %.v22, i64 0, !dbg !239
  %368 = select i1 %348, i32 %160, i32 %367, !dbg !240
  %369 = extractelement <2 x i32> %.v22, i64 1, !dbg !239
  %370 = select i1 %350, i32 %161, i32 %369, !dbg !240
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %368, i32 %370, ptr addrspace(1) %366, i1 true) #1, !dbg !239
  %371 = getelementptr i8, ptr addrspace(1) %2, i64 %13, !dbg !241
  %372 = bitcast <2 x i8> %361 to i16, !dbg !242
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %372, ptr addrspace(1) %371, i1 true) #1, !dbg !242
  %373 = getelementptr float, ptr addrspace(1) %3, i64 %365, !dbg !243
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %16, i32 %17, ptr addrspace(1) %373, i1 true) #1, !dbg !244
  ret void, !dbg !245
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7iu3wku25cddsag5avoed6aey2etwotdwmxo2itab4uwdyw2coc.py", directory: "inductor_cache/7i")
!4 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_cat_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 29, column: 32, scope: !7)
!16 = !DILocation(line: 29, column: 37, scope: !7)
!17 = !DILocation(line: 41, column: 41, scope: !7)
!18 = !DILocation(line: 41, column: 31, scope: !7)
!19 = !DILocation(line: 41, column: 46, scope: !7)
!20 = !DILocation(line: 47, column: 41, scope: !7)
!21 = !DILocation(line: 47, column: 31, scope: !7)
!22 = !DILocation(line: 47, column: 46, scope: !7)
!23 = !DILocation(line: 54, column: 41, scope: !7)
!24 = !DILocation(line: 54, column: 31, scope: !7)
!25 = !DILocation(line: 54, column: 46, scope: !7)
!26 = !DILocation(line: 61, column: 41, scope: !7)
!27 = !DILocation(line: 61, column: 31, scope: !7)
!28 = !DILocation(line: 61, column: 46, scope: !7)
!29 = !DILocation(line: 68, column: 41, scope: !7)
!30 = !DILocation(line: 68, column: 31, scope: !7)
!31 = !DILocation(line: 68, column: 46, scope: !7)
!32 = !DILocation(line: 75, column: 46, scope: !7)
!33 = !DILocation(line: 84, column: 40, scope: !7)
!34 = !DILocation(line: 84, column: 31, scope: !7)
!35 = !DILocation(line: 103, column: 37, scope: !7)
!36 = !DILocation(line: 103, column: 31, scope: !7)
!37 = !DILocation(line: 106, column: 38, scope: !7)
!38 = !DILocation(line: 106, column: 31, scope: !7)
!39 = !DILocation(line: 24, column: 21, scope: !7)
!40 = !DILocation(line: 24, column: 29, scope: !7)
!41 = !DILocation(line: 143, column: 22, scope: !7)
!42 = !DILocation(line: 43, column: 21, scope: !7)
!43 = !DILocation(line: 50, column: 21, scope: !7)
!44 = !DILocation(line: 65, column: 20, scope: !7)
!45 = !DILocation(line: 71, column: 21, scope: !7)
!46 = !DILocation(line: 77, column: 20, scope: !7)
!47 = !DILocation(line: 78, column: 46, scope: !7)
!48 = !DILocation(line: 80, column: 20, scope: !7)
!49 = !DILocation(line: 81, column: 46, scope: !7)
!50 = !DILocation(line: 110, column: 20, scope: !7)
!51 = !DILocation(line: 83, column: 20, scope: !7)
!52 = !DILocation(line: 84, column: 45, scope: !7)
!53 = !DILocation(line: 86, column: 20, scope: !7)
!54 = !DILocation(line: 87, column: 36, scope: !7)
!55 = !DILocation(line: 90, column: 21, scope: !7)
!56 = !DILocation(line: 94, column: 46, scope: !7)
!57 = !DILocation(line: 96, column: 20, scope: !7)
!58 = !DILocation(line: 97, column: 45, scope: !7)
!59 = !DILocation(line: 99, column: 20, scope: !7)
!60 = !DILocation(line: 100, column: 36, scope: !7)
!61 = !DILocation(line: 102, column: 20, scope: !7)
!62 = !DILocation(line: 103, column: 42, scope: !7)
!63 = !DILocation(line: 105, column: 20, scope: !7)
!64 = !DILocation(line: 106, column: 43, scope: !7)
!65 = !DILocation(line: 113, column: 36, scope: !7)
!66 = !DILocation(line: 115, column: 20, scope: !7)
!67 = !DILocation(line: 116, column: 42, scope: !7)
!68 = !DILocation(line: 118, column: 20, scope: !7)
!69 = !DILocation(line: 119, column: 43, scope: !7)
!70 = !DILocation(line: 121, column: 20, scope: !7)
!71 = !DILocation(line: 122, column: 38, scope: !7)
!72 = !DILocation(line: 122, column: 31, scope: !7)
!73 = !DILocation(line: 122, column: 43, scope: !7)
!74 = !DILocation(line: 124, column: 20, scope: !7)
!75 = !DILocation(line: 125, column: 38, scope: !7)
!76 = !DILocation(line: 125, column: 31, scope: !7)
!77 = !DILocation(line: 125, column: 43, scope: !7)
!78 = !DILocation(line: 129, column: 20, scope: !7)
!79 = !DILocation(line: 132, column: 44, scope: !7)
!80 = !DILocation(line: 134, column: 22, scope: !7)
!81 = !DILocation(line: 135, column: 44, scope: !7)
!82 = !DILocation(line: 137, column: 22, scope: !7)
!83 = !DILocation(line: 138, column: 44, scope: !7)
!84 = !DILocation(line: 140, column: 22, scope: !7)
!85 = !DILocation(line: 141, column: 39, scope: !7)
!86 = !DILocation(line: 141, column: 32, scope: !7)
!87 = !DILocation(line: 141, column: 44, scope: !7)
!88 = !DILocation(line: 144, column: 39, scope: !7)
!89 = !DILocation(line: 144, column: 32, scope: !7)
!90 = !DILocation(line: 144, column: 44, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !94)
!92 = distinct !DILexicalBlockFile(scope: !7, file: !93, discriminator: 0)
!93 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!94 = !DILocation(line: 48, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !99)
!99 = !DILocation(line: 55, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !104)
!104 = !DILocation(line: 62, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !104)
!108 = !DILocation(line: 149, column: 38, scope: !7)
!109 = !DILocation(line: 152, column: 38, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !111)
!111 = !DILocation(line: 69, column: 42, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !111)
!114 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !111)
!115 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !116)
!116 = !DILocation(line: 76, column: 42, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !116)
!118 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !116)
!119 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !116)
!120 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !121)
!121 = !DILocation(line: 79, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !121)
!125 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !126)
!126 = !DILocation(line: 82, column: 42, scope: !7)
!127 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !126)
!128 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !126)
!129 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !126)
!130 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !131)
!131 = !DILocation(line: 85, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !131)
!135 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !136)
!136 = !DILocation(line: 88, column: 42, scope: !7)
!137 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !136)
!138 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !136)
!139 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !136)
!140 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !141)
!141 = !DILocation(line: 95, column: 42, scope: !7)
!142 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !141)
!143 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !141)
!144 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !141)
!145 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !146)
!146 = !DILocation(line: 98, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !146)
!150 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !151)
!151 = !DILocation(line: 101, column: 42, scope: !7)
!152 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !151)
!153 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !151)
!154 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !151)
!155 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !156)
!156 = !DILocation(line: 104, column: 42, scope: !7)
!157 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !156)
!158 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !156)
!159 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !156)
!160 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !161)
!161 = !DILocation(line: 107, column: 42, scope: !7)
!162 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !161)
!163 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !161)
!164 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !161)
!165 = !DILocation(line: 155, column: 38, scope: !7)
!166 = !DILocation(line: 158, column: 38, scope: !7)
!167 = !DILocation(line: 161, column: 38, scope: !7)
!168 = !DILocation(line: 164, column: 38, scope: !7)
!169 = !DILocation(line: 167, column: 38, scope: !7)
!170 = !DILocation(line: 170, column: 38, scope: !7)
!171 = !DILocation(line: 173, column: 38, scope: !7)
!172 = !DILocation(line: 176, column: 38, scope: !7)
!173 = !DILocation(line: 179, column: 38, scope: !7)
!174 = !DILocation(line: 182, column: 38, scope: !7)
!175 = !DILocation(line: 185, column: 38, scope: !7)
!176 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !177)
!177 = !DILocation(line: 114, column: 42, scope: !7)
!178 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !177)
!179 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !177)
!180 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !177)
!181 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !182)
!182 = !DILocation(line: 117, column: 42, scope: !7)
!183 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !182)
!184 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !182)
!185 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !182)
!186 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !187)
!187 = !DILocation(line: 120, column: 42, scope: !7)
!188 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !187)
!189 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !187)
!190 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !187)
!191 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !192)
!192 = !DILocation(line: 123, column: 42, scope: !7)
!193 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !192)
!194 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !192)
!195 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !192)
!196 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !197)
!197 = !DILocation(line: 126, column: 42, scope: !7)
!198 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !197)
!199 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !197)
!200 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !197)
!201 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !202)
!202 = !DILocation(line: 133, column: 44, scope: !7)
!203 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !202)
!204 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !202)
!205 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !202)
!206 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !207)
!207 = !DILocation(line: 136, column: 44, scope: !7)
!208 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !207)
!209 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !207)
!210 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !207)
!211 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !212)
!212 = !DILocation(line: 139, column: 44, scope: !7)
!213 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !212)
!214 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !212)
!215 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !212)
!216 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !217)
!217 = !DILocation(line: 142, column: 44, scope: !7)
!218 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !217)
!219 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !217)
!220 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !217)
!221 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !222)
!222 = !DILocation(line: 145, column: 44, scope: !7)
!223 = !DILocation(line: 120, column: 21, scope: !92, inlinedAt: !222)
!224 = !DILocation(line: 120, column: 16, scope: !92, inlinedAt: !222)
!225 = !DILocation(line: 188, column: 38, scope: !7)
!226 = !DILocation(line: 191, column: 38, scope: !7)
!227 = !DILocation(line: 194, column: 38, scope: !7)
!228 = !DILocation(line: 197, column: 38, scope: !7)
!229 = !DILocation(line: 200, column: 38, scope: !7)
!230 = !DILocation(line: 203, column: 38, scope: !7)
!231 = !DILocation(line: 206, column: 38, scope: !7)
!232 = !DILocation(line: 209, column: 38, scope: !7)
!233 = !DILocation(line: 212, column: 38, scope: !7)
!234 = !DILocation(line: 215, column: 38, scope: !7)
!235 = !DILocation(line: 218, column: 38, scope: !7)
!236 = !DILocation(line: 219, column: 35, scope: !7)
!237 = !DILocation(line: 219, column: 30, scope: !7)
!238 = !DILocation(line: 219, column: 25, scope: !7)
!239 = !DILocation(line: 219, column: 48, scope: !7)
!240 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !222)
!241 = !DILocation(line: 220, column: 25, scope: !7)
!242 = !DILocation(line: 220, column: 38, scope: !7)
!243 = !DILocation(line: 221, column: 25, scope: !7)
!244 = !DILocation(line: 221, column: 48, scope: !7)
!245 = !DILocation(line: 221, column: 4, scope: !7)
