; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 8, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 254, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = icmp slt i32 %23, 352, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %26 = icmp slt i32 %25, 64, !dbg !16
  %.frozen = freeze i32 %23, !dbg !17
  %27 = sdiv i32 %.frozen, 88, !dbg !17
  %28 = mul i32 %27, 88, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen16 = freeze i32 %25, !dbg !19
  %29 = sdiv i32 %.frozen16, 8, !dbg !19
  %30 = mul i32 %29, 8, !dbg !20
  %.decomposed17 = sub i32 %.frozen16, %30, !dbg !20
  %31 = icmp slt i32 %.decomposed, 22, !dbg !21
  %32 = mul i32 %25, 22, !dbg !22
  %33 = mul i32 %27, 1408, !dbg !23
  %34 = add i32 %33, %32, !dbg !24
  %35 = add i32 %34, %.decomposed, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %26, %31, !dbg !27
  %39 = and i1 %24, %38, !dbg !28
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !29
  %41 = add nsw i32 %.decomposed, -22, !dbg !30
  %42 = icmp ult i32 %41, 22, !dbg !30
  %43 = mul nsw i32 %.decomposed17, 22, !dbg !31
  %44 = add nsw i32 %43, 220, !dbg !32
  %45 = mul i32 %29, 198, !dbg !33
  %46 = add i32 %44, %45, !dbg !34
  %47 = mul i32 %27, 1782, !dbg !35
  %48 = add i32 %46, %47, !dbg !36
  %49 = add i32 %48, %41, !dbg !37
  %50 = sext i32 %49 to i64, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !38
  %52 = and i1 %26, %42, !dbg !39
  %53 = and i1 %24, %52, !dbg !40
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !41
  %55 = add i32 %34, %41, !dbg !42
  %56 = sext i32 %55 to i64, !dbg !43
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !43
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !44
  %59 = sext i32 %41 to i64, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !45
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !46
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !47
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !48
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !48
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !48
  %66 = bitcast i32 %64 to float, !dbg !48
  %67 = bitcast i32 %65 to float, !dbg !48
  %68 = fadd float %66, 0x3F50624DE0000000, !dbg !49
  %69 = fadd float %67, 0x3F50624DE0000000, !dbg !49
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %70, 0, !dbg !50
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %71, 0, !dbg !50
  br i1 %.not.i, label %77, label %72, !dbg !50

72:                                               ; preds = %17
  br i1 %.not1.i, label %75, label %73, !dbg !50

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

77:                                               ; preds = %17
  br i1 %.not1.i, label %80, label %78, !dbg !50

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !50
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %82, 0, !dbg !50
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !50
  br i1 %.not.i1, label %89, label %84, !dbg !50

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !50

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !50

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !50
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !52
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %6, i64 %59, !dbg !54
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %98, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !55
  %100 = add nsw i32 %.decomposed, -44, !dbg !56
  %101 = icmp ult i32 %100, 22, !dbg !56
  %102 = add i32 %34, %100, !dbg !57
  %103 = sext i32 %102 to i64, !dbg !58
  %104 = getelementptr float, ptr addrspace(1) %7, i64 %103, !dbg !58
  %105 = and i1 %26, %101, !dbg !59
  %106 = and i1 %24, %105, !dbg !60
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !62
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !63
  %110 = icmp sgt i32 %.decomposed, 65, !dbg !64
  %111 = add nsw i32 %.decomposed, -66, !dbg !65
  %112 = add i32 %34, %111, !dbg !66
  %113 = sext i32 %112 to i64, !dbg !67
  %114 = getelementptr float, ptr addrspace(1) %8, i64 %113, !dbg !67
  %115 = and i1 %26, %110, !dbg !68
  %116 = and i1 %24, %115, !dbg !69
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !70
  %118 = sext i32 %111 to i64, !dbg !71
  %119 = getelementptr float, ptr addrspace(1) %9, i64 %118, !dbg !71
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !72
  %121 = getelementptr float, ptr addrspace(1) %10, i64 %118, !dbg !73
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !74
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !74
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !74
  %125 = bitcast i32 %123 to float, !dbg !74
  %126 = bitcast i32 %124 to float, !dbg !74
  %127 = fadd float %125, 0x3F50624DE0000000, !dbg !75
  %128 = fadd float %126, 0x3F50624DE0000000, !dbg !75
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i6 = icmp eq i32 %129, 0, !dbg !76
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i9 = icmp eq i32 %130, 0, !dbg !76
  br i1 %.not.i6, label %136, label %131, !dbg !76

131:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %134, label %132, !dbg !76

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

136:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %139, label %137, !dbg !76

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !76
  br label %__nv_sqrtf.exit10, !dbg !76

__nv_sqrtf.exit10:                                ; preds = %132, %134, %137, %139
  %.0.i8 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !76
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i11 = icmp eq i32 %141, 0, !dbg !76
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i14 = icmp eq i32 %142, 0, !dbg !76
  br i1 %.not.i11, label %148, label %143, !dbg !76

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !76

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

148:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %151, label %149, !dbg !76

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !76
  br label %__nv_sqrtf.exit15, !dbg !76

__nv_sqrtf.exit15:                                ; preds = %144, %146, %149, %151
  %.0.i13 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !76
  %153 = extractvalue { i32, i32 } %117, 1, !dbg !70
  %154 = bitcast i32 %153 to float, !dbg !70
  %155 = extractvalue { i32, i32 } %120, 1, !dbg !72
  %156 = bitcast i32 %155 to float, !dbg !72
  %157 = fsub float %154, %156, !dbg !77
  %158 = extractvalue { i32, i32 } %117, 0, !dbg !70
  %159 = bitcast i32 %158 to float, !dbg !70
  %160 = extractvalue { i32, i32 } %120, 0, !dbg !72
  %161 = bitcast i32 %160 to float, !dbg !72
  %162 = fsub float %159, %161, !dbg !77
  %163 = extractvalue { i32, i32 } %107, 1, !dbg !61
  %164 = bitcast i32 %163 to float, !dbg !61
  %165 = extractvalue { i32, i32 } %109, 1, !dbg !63
  %166 = bitcast i32 %165 to float, !dbg !63
  %167 = fadd float %164, %166, !dbg !78
  %168 = extractvalue { i32, i32 } %107, 0, !dbg !61
  %169 = bitcast i32 %168 to float, !dbg !61
  %170 = extractvalue { i32, i32 } %109, 0, !dbg !63
  %171 = bitcast i32 %170 to float, !dbg !63
  %172 = fadd float %169, %171, !dbg !78
  %173 = extractvalue { i32, i32 } %58, 1, !dbg !44
  %174 = bitcast i32 %173 to float, !dbg !44
  %175 = extractvalue { i32, i32 } %61, 1, !dbg !46
  %176 = bitcast i32 %175 to float, !dbg !46
  %177 = fsub float %174, %176, !dbg !79
  %178 = fmul float %177, %95, !dbg !80
  %179 = extractvalue { i32, i32 } %97, 1, !dbg !53
  %180 = bitcast i32 %179 to float, !dbg !53
  %181 = fmul float %178, %180, !dbg !81
  %182 = extractvalue { i32, i32 } %99, 1, !dbg !55
  %183 = bitcast i32 %182 to float, !dbg !55
  %184 = fadd float %181, %183, !dbg !82
  %185 = extractvalue { i32, i32 } %54, 1, !dbg !41
  %186 = bitcast i32 %185 to float, !dbg !41
  %187 = fadd float %184, %186, !dbg !83
  %188 = extractvalue { i32, i32 } %58, 0, !dbg !44
  %189 = bitcast i32 %188 to float, !dbg !44
  %190 = extractvalue { i32, i32 } %61, 0, !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = fsub float %189, %191, !dbg !79
  %193 = fmul float %192, %94, !dbg !80
  %194 = extractvalue { i32, i32 } %97, 0, !dbg !53
  %195 = bitcast i32 %194 to float, !dbg !53
  %196 = fmul float %193, %195, !dbg !81
  %197 = extractvalue { i32, i32 } %99, 0, !dbg !55
  %198 = bitcast i32 %197 to float, !dbg !55
  %199 = fadd float %196, %198, !dbg !82
  %200 = extractvalue { i32, i32 } %54, 0, !dbg !41
  %201 = bitcast i32 %200 to float, !dbg !41
  %202 = fadd float %199, %201, !dbg !83
  %203 = extractvalue { i32, i32 } %40, 1, !dbg !29
  %204 = bitcast i32 %203 to float, !dbg !29
  %205 = extractvalue { i32, i32 } %40, 0, !dbg !29
  %206 = bitcast i32 %205 to float, !dbg !29
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !84
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !84
  %209 = fmul float %162, %207, !dbg !85
  %210 = fmul float %157, %208, !dbg !85
  %211 = getelementptr float, ptr addrspace(1) %11, i64 %118, !dbg !86
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %211, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !87
  %213 = extractvalue { i32, i32 } %212, 0, !dbg !87
  %214 = extractvalue { i32, i32 } %212, 1, !dbg !87
  %215 = bitcast i32 %213 to float, !dbg !87
  %216 = bitcast i32 %214 to float, !dbg !87
  %217 = fmul float %209, %215, !dbg !88
  %218 = fmul float %210, %216, !dbg !88
  %219 = getelementptr float, ptr addrspace(1) %12, i64 %118, !dbg !89
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %219, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !90
  %221 = extractvalue { i32, i32 } %220, 0, !dbg !90
  %222 = extractvalue { i32, i32 } %220, 1, !dbg !90
  %223 = bitcast i32 %221 to float, !dbg !90
  %224 = bitcast i32 %222 to float, !dbg !90
  %225 = fadd float %217, %223, !dbg !91
  %226 = fadd float %218, %224, !dbg !91
  %227 = add i32 %48, %111, !dbg !92
  %228 = sext i32 %227 to i64, !dbg !93
  %229 = getelementptr float, ptr addrspace(1) %13, i64 %228, !dbg !93
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %229, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !94
  %231 = extractvalue { i32, i32 } %230, 0, !dbg !94
  %232 = extractvalue { i32, i32 } %230, 1, !dbg !94
  %233 = bitcast i32 %231 to float, !dbg !94
  %234 = bitcast i32 %232 to float, !dbg !94
  %235 = fadd float %225, %233, !dbg !95
  %236 = fadd float %226, %234, !dbg !95
  %237 = select i1 %110, float %235, float 0.000000e+00, !dbg !96
  %238 = select i1 %110, float %236, float 0.000000e+00, !dbg !96
  %239 = select i1 %101, float %172, float %237, !dbg !97
  %240 = select i1 %101, float %167, float %238, !dbg !97
  %241 = select i1 %42, float %202, float %239, !dbg !97
  %242 = select i1 %42, float %187, float %240, !dbg !97
  %243 = select i1 %31, float %206, float %241, !dbg !98
  %244 = select i1 %31, float %204, float %242, !dbg !98
  %245 = fcmp olt float %243, 0.000000e+00, !dbg !99
  %246 = fcmp olt float %244, 0.000000e+00, !dbg !99
  %247 = select i1 %245, float 0.000000e+00, float %243, !dbg !103
  %248 = select i1 %246, float 0.000000e+00, float %244, !dbg !103
  %249 = mul i32 %25, 88, !dbg !104
  %250 = add i32 %.decomposed, %249, !dbg !105
  %251 = mul i32 %27, 5632, !dbg !106
  %252 = add i32 %250, %251, !dbg !107
  %253 = sext i32 %252 to i64, !dbg !108
  %254 = getelementptr float, ptr addrspace(1) %14, i64 %253, !dbg !108
  %255 = and i1 %26, %24, !dbg !109
  %256 = bitcast float %247 to i32, !dbg !110
  %257 = bitcast float %248 to i32, !dbg !110
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %256, i32 %257, ptr addrspace(1) %254, i1 %255) #3, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwqr7bv6iibwwuwhaypmvtnj4m37rddkvzjlbcy3kcpx3sbtgag6.py", directory: "inductor_cache/wq")
!4 = !{ptr @triton_poi_fused_cat_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_29", linkageName: "triton_poi_fused_cat_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 39, column: 33, scope: !7)
!23 = !DILocation(line: 39, column: 43, scope: !7)
!24 = !DILocation(line: 39, column: 38, scope: !7)
!25 = !DILocation(line: 39, column: 49, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 62, scope: !7)
!28 = !DILocation(line: 39, column: 70, scope: !7)
!29 = !DILocation(line: 39, column: 55, scope: !7)
!30 = !DILocation(line: 43, column: 18, scope: !7)
!31 = !DILocation(line: 44, column: 40, scope: !7)
!32 = !DILocation(line: 44, column: 37, scope: !7)
!33 = !DILocation(line: 44, column: 49, scope: !7)
!34 = !DILocation(line: 44, column: 45, scope: !7)
!35 = !DILocation(line: 44, column: 59, scope: !7)
!36 = !DILocation(line: 44, column: 54, scope: !7)
!37 = !DILocation(line: 44, column: 65, scope: !7)
!38 = !DILocation(line: 44, column: 31, scope: !7)
!39 = !DILocation(line: 44, column: 86, scope: !7)
!40 = !DILocation(line: 44, column: 94, scope: !7)
!41 = !DILocation(line: 44, column: 79, scope: !7)
!42 = !DILocation(line: 45, column: 50, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 64, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 79, scope: !7)
!47 = !DILocation(line: 48, column: 31, scope: !7)
!48 = !DILocation(line: 48, column: 79, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 27, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 79, scope: !7)
!54 = !DILocation(line: 59, column: 31, scope: !7)
!55 = !DILocation(line: 59, column: 79, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 68, column: 50, scope: !7)
!58 = !DILocation(line: 68, column: 31, scope: !7)
!59 = !DILocation(line: 68, column: 72, scope: !7)
!60 = !DILocation(line: 68, column: 80, scope: !7)
!61 = !DILocation(line: 68, column: 64, scope: !7)
!62 = !DILocation(line: 69, column: 31, scope: !7)
!63 = !DILocation(line: 69, column: 64, scope: !7)
!64 = !DILocation(line: 73, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 58, scope: !7)
!66 = !DILocation(line: 76, column: 50, scope: !7)
!67 = !DILocation(line: 76, column: 31, scope: !7)
!68 = !DILocation(line: 76, column: 72, scope: !7)
!69 = !DILocation(line: 76, column: 80, scope: !7)
!70 = !DILocation(line: 76, column: 64, scope: !7)
!71 = !DILocation(line: 77, column: 31, scope: !7)
!72 = !DILocation(line: 77, column: 79, scope: !7)
!73 = !DILocation(line: 79, column: 32, scope: !7)
!74 = !DILocation(line: 79, column: 80, scope: !7)
!75 = !DILocation(line: 81, column: 20, scope: !7)
!76 = !DILocation(line: 82, column: 27, scope: !7)
!77 = !DILocation(line: 78, column: 20, scope: !7)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 47, column: 20, scope: !7)
!80 = !DILocation(line: 56, column: 20, scope: !7)
!81 = !DILocation(line: 58, column: 20, scope: !7)
!82 = !DILocation(line: 60, column: 20, scope: !7)
!83 = !DILocation(line: 61, column: 20, scope: !7)
!84 = !DILocation(line: 84, column: 20, scope: !7)
!85 = !DILocation(line: 87, column: 20, scope: !7)
!86 = !DILocation(line: 88, column: 32, scope: !7)
!87 = !DILocation(line: 88, column: 80, scope: !7)
!88 = !DILocation(line: 89, column: 20, scope: !7)
!89 = !DILocation(line: 90, column: 32, scope: !7)
!90 = !DILocation(line: 90, column: 80, scope: !7)
!91 = !DILocation(line: 91, column: 20, scope: !7)
!92 = !DILocation(line: 92, column: 66, scope: !7)
!93 = !DILocation(line: 92, column: 32, scope: !7)
!94 = !DILocation(line: 92, column: 80, scope: !7)
!95 = !DILocation(line: 93, column: 20, scope: !7)
!96 = !DILocation(line: 95, column: 35, scope: !7)
!97 = !DILocation(line: 0, scope: !7)
!98 = !DILocation(line: 98, column: 33, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !100, inlinedAt: !102)
!100 = distinct !DILexicalBlockFile(scope: !7, file: !101, discriminator: 0)
!101 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!102 = !DILocation(line: 100, column: 42, scope: !7)
!103 = !DILocation(line: 121, column: 29, scope: !100, inlinedAt: !102)
!104 = !DILocation(line: 101, column: 33, scope: !7)
!105 = !DILocation(line: 101, column: 30, scope: !7)
!106 = !DILocation(line: 101, column: 43, scope: !7)
!107 = !DILocation(line: 101, column: 38, scope: !7)
!108 = !DILocation(line: 101, column: 25, scope: !7)
!109 = !DILocation(line: 101, column: 63, scope: !7)
!110 = !DILocation(line: 101, column: 55, scope: !7)
!111 = !DILocation(line: 101, column: 4, scope: !7)
