; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %13 = sdiv i32 %.frozen, 16, !dbg !14
  %14 = mul i32 %13, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %10, 16, !dbg !15
  %16 = srem i32 %11, 16, !dbg !15
  %17 = srem i32 %12, 16, !dbg !15
  %18 = shl nsw i32 %.decomposed, 1, !dbg !16
  %19 = shl nsw i32 %15, 1, !dbg !16
  %20 = shl nsw i32 %16, 1, !dbg !16
  %21 = shl nsw i32 %17, 1, !dbg !16
  %22 = shl i32 %13, 6, !dbg !17
  %23 = add i32 %18, %22, !dbg !18
  %24 = add i32 %22, %19, !dbg !18
  %25 = add i32 %22, %20, !dbg !18
  %26 = add i32 %22, %21, !dbg !18
  %27 = sext i32 %23 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = sext i32 %24 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = sext i32 %25 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = sext i32 %26 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !20
  %36 = bitcast i32 %35 to float, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !20
  %38 = bitcast i32 %37 to float, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !20
  %40 = bitcast i32 %39 to float, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !20
  %42 = bitcast i32 %41 to float, !dbg !20
  %43 = or disjoint i32 %23, 1, !dbg !21
  %44 = or disjoint i32 %24, 1, !dbg !21
  %45 = or disjoint i32 %25, 1, !dbg !21
  %46 = or disjoint i32 %26, 1, !dbg !21
  %47 = sext i32 %43 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %44 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %45 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %46 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = or disjoint i32 %22, 32, !dbg !24
  %64 = add i32 %63, %18, !dbg !25
  %65 = add i32 %63, %19, !dbg !25
  %66 = add i32 %63, %20, !dbg !25
  %67 = add i32 %63, %21, !dbg !25
  %68 = sext i32 %64 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %65 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %66 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = sext i32 %67 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = or disjoint i32 %22, 33, !dbg !28
  %85 = add i32 %84, %18, !dbg !29
  %86 = add i32 %84, %19, !dbg !29
  %87 = add i32 %84, %20, !dbg !29
  %88 = add i32 %84, %21, !dbg !29
  %89 = sext i32 %85 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !30
  %91 = sext i32 %86 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !30
  %93 = sext i32 %87 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !30
  %95 = sext i32 %88 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %104 = bitcast i32 %103 to float, !dbg !31
  %105 = fadd float %36, %56, !dbg !32
  %106 = fadd float %38, %58, !dbg !32
  %107 = fadd float %40, %60, !dbg !32
  %108 = fadd float %42, %62, !dbg !32
  %109 = fadd float %105, %77, !dbg !33
  %110 = fadd float %106, %79, !dbg !33
  %111 = fadd float %107, %81, !dbg !33
  %112 = fadd float %108, %83, !dbg !33
  %113 = fadd float %109, %98, !dbg !34
  %114 = fadd float %110, %100, !dbg !34
  %115 = fadd float %111, %102, !dbg !34
  %116 = fadd float %112, %104, !dbg !34
  %117 = fmul float %113, 2.500000e-01, !dbg !35
  %118 = fmul float %114, 2.500000e-01, !dbg !35
  %119 = fmul float %115, 2.500000e-01, !dbg !35
  %120 = fmul float %116, 2.500000e-01, !dbg !35
  %121 = sext i32 %9 to i64, !dbg !36
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !36
  %123 = bitcast float %117 to i32, !dbg !37
  %124 = bitcast float %118 to i32, !dbg !37
  %125 = bitcast float %119 to i32, !dbg !37
  %126 = bitcast float %120 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %124, i32 %125, i32 %126, ptr addrspace(1) %122, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czrs6m754omykgmc6pro6cq45hmldjevbhi6ir6j2euit5qxicmt.py", directory: "inductor_cache/zr")
!4 = !{ptr @triton_poi_fused_avg_pool2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_3", linkageName: "triton_poi_fused_avg_pool2d_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 49, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 50, scope: !7)
!28 = !DILocation(line: 30, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 50, scope: !7)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 36, scope: !7)
!38 = !DILocation(line: 36, column: 4, scope: !7)
