; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_30(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = icmp slt i32 %9, 3810304, !dbg !14
  %12 = icmp slt i32 %10, 3810304, !dbg !14
  %13 = add i32 %9, -15872, !dbg !15
  %14 = add i32 %9, -15360, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = add i32 %9, -15616, !dbg !17
  %20 = add i32 %9, -15104, !dbg !17
  %21 = sext i32 %19 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = add i32 %9, -14848, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = add i32 %9, -256, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %10 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = getelementptr i8, ptr addrspace(1) %32, i64 -1024, !dbg !22
  %34 = sext i32 %9 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = add i32 %9, 768, !dbg !24
  %37 = getelementptr i8, ptr addrspace(1) %35, i64 1024, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = add i32 %9, 15360, !dbg !26
  %41 = add i32 %9, 15872, !dbg !26
  %42 = sext i32 %40 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = add i32 %9, 15616, !dbg !28
  %47 = add i32 %9, 16128, !dbg !28
  %48 = sext i32 %46 to i64, !dbg !29
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !29
  %50 = sext i32 %47 to i64, !dbg !29
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !29
  %52 = add i32 %9, 16384, !dbg !30
  %53 = sext i32 %52 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !32
  %56 = shufflevector <2 x i32> %55, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %57 = sdiv <2 x i32> %56, <i32 256, i32 15616>, !dbg !32
  %58 = srem <2 x i32> %57, splat (i32 61), !dbg !33
  %59 = extractelement <2 x i32> %58, i64 1, !dbg !34
  %60 = icmp sgt i32 %59, 0, !dbg !35
  %61 = extractelement <2 x i32> %58, i64 0, !dbg !34
  %62 = icmp sgt i32 %61, 0, !dbg !36
  %63 = and i1 %60, %62, !dbg !37
  %64 = and i1 %11, %63, !dbg !38
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !39
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !39
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !39
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !39
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !39
  %70 = bitcast i32 %66 to float, !dbg !39
  %71 = bitcast i32 %67 to float, !dbg !39
  %72 = bitcast i32 %68 to float, !dbg !39
  %73 = bitcast i32 %69 to float, !dbg !39
  %74 = icmp sgt i32 %61, -1, !dbg !40
  %75 = and i1 %60, %74, !dbg !41
  %76 = and i1 %11, %75, !dbg !42
  %77 = icmp sgt i32 %59, -1, !dbg !43
  %78 = and i1 %77, %62, !dbg !44
  %79 = and i1 %11, %78, !dbg !45
  %80 = or i32 %59, %61, !dbg !46
  %81 = icmp sgt i32 %80, -1, !dbg !46
  %82 = and i1 %11, %81, !dbg !47
  %83 = mul nsw i32 %61, %59, !dbg !48
  %84 = add nsw <2 x i32> %58, splat (i32 2), !dbg !49
  %85 = icmp sgt <2 x i32> %58, splat (i32 59), !dbg !50
  %86 = select <2 x i1> %85, <2 x i32> splat (i32 62), <2 x i32> zeroinitializer, !dbg !51
  %87 = icmp slt <2 x i32> %58, splat (i32 60), !dbg !52
  %88 = select <2 x i1> %87, <2 x i32> %84, <2 x i32> zeroinitializer, !dbg !53
  %89 = add nsw <2 x i32> %86, %88, !dbg !54
  %90 = extractelement <2 x i32> %89, i64 0, !dbg !55
  %91 = extractelement <2 x i32> %89, i64 1, !dbg !56
  %92 = mul nsw i32 %90, %91, !dbg !57
  %93 = shufflevector <2 x i32> %58, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !56
  %94 = mul nsw <2 x i32> %89, %93, !dbg !56
  %95 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !32
  %96 = shufflevector <2 x i32> %95, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %97 = sdiv <2 x i32> %96, <i32 256, i32 15616>, !dbg !32
  %98 = srem <2 x i32> %97, splat (i32 61), !dbg !33
  %99 = extractelement <2 x i32> %98, i64 1, !dbg !34
  %100 = icmp sgt i32 %99, 0, !dbg !35
  %101 = extractelement <2 x i32> %98, i64 0, !dbg !34
  %102 = icmp sgt i32 %101, 0, !dbg !36
  %103 = and i1 %100, %102, !dbg !37
  %104 = and i1 %12, %103, !dbg !38
  %105 = icmp sgt i32 %101, -1, !dbg !40
  %106 = and i1 %100, %105, !dbg !41
  %107 = and i1 %12, %106, !dbg !42
  %108 = icmp sgt i32 %99, -1, !dbg !43
  %109 = and i1 %108, %102, !dbg !44
  %110 = and i1 %12, %109, !dbg !45
  %111 = or i32 %99, %101, !dbg !46
  %112 = icmp sgt i32 %111, -1, !dbg !46
  %113 = and i1 %12, %112, !dbg !47
  %114 = shufflevector <2 x i32> %98, <2 x i32> %58, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !58
  %115 = add nsw <4 x i32> %114, splat (i32 1), !dbg !58
  %116 = icmp ult <4 x i32> %115, splat (i32 61), !dbg !58
  %117 = extractelement <4 x i1> %116, i64 3, !dbg !59
  %118 = and i1 %60, %117, !dbg !59
  %119 = and i1 %11, %118, !dbg !60
  %120 = and i1 %77, %117, !dbg !61
  %121 = and i1 %11, %120, !dbg !62
  %122 = extractelement <4 x i1> %116, i64 1, !dbg !63
  %123 = and i1 %62, %122, !dbg !63
  %124 = and i1 %11, %123, !dbg !64
  %125 = and i1 %74, %122, !dbg !65
  %126 = and i1 %11, %125, !dbg !66
  %127 = and i1 %122, %117, !dbg !67
  %128 = and i1 %11, %127, !dbg !68
  %129 = extractelement <4 x i1> %116, i64 2, !dbg !59
  %130 = and i1 %100, %129, !dbg !59
  %131 = and i1 %12, %130, !dbg !60
  %132 = and i1 %108, %129, !dbg !61
  %133 = and i1 %12, %132, !dbg !62
  %134 = extractelement <4 x i1> %116, i64 0, !dbg !63
  %135 = and i1 %102, %134, !dbg !63
  %136 = and i1 %12, %135, !dbg !64
  %137 = and i1 %105, %134, !dbg !65
  %138 = and i1 %12, %137, !dbg !66
  %139 = and i1 %134, %129, !dbg !67
  %140 = and i1 %12, %139, !dbg !68
  %141 = mul nsw i32 %101, %99, !dbg !48
  %142 = add nsw <2 x i32> %98, splat (i32 2), !dbg !49
  %143 = icmp sgt <2 x i32> %98, splat (i32 59), !dbg !50
  %144 = select <2 x i1> %143, <2 x i32> splat (i32 62), <2 x i32> zeroinitializer, !dbg !51
  %145 = icmp slt <2 x i32> %98, splat (i32 60), !dbg !52
  %146 = select <2 x i1> %145, <2 x i32> %142, <2 x i32> zeroinitializer, !dbg !53
  %147 = add nsw <2 x i32> %144, %146, !dbg !54
  %148 = extractelement <2 x i32> %147, i64 0, !dbg !55
  %149 = extractelement <2 x i32> %147, i64 1, !dbg !56
  %150 = mul nsw i32 %148, %149, !dbg !57
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #1, !dbg !39
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !39
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !39
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !39
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !39
  %156 = bitcast i32 %152 to float, !dbg !39
  %157 = bitcast i32 %153 to float, !dbg !39
  %158 = bitcast i32 %154 to float, !dbg !39
  %159 = bitcast i32 %155 to float, !dbg !39
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #1, !dbg !69
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !69
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !69
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !69
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !69
  %165 = bitcast i32 %161 to float, !dbg !69
  %166 = bitcast i32 %162 to float, !dbg !69
  %167 = bitcast i32 %163 to float, !dbg !69
  %168 = bitcast i32 %164 to float, !dbg !69
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !69
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !69
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !69
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !69
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !69
  %174 = bitcast i32 %170 to float, !dbg !69
  %175 = bitcast i32 %171 to float, !dbg !69
  %176 = bitcast i32 %172 to float, !dbg !69
  %177 = bitcast i32 %173 to float, !dbg !69
  %178 = fadd float %70, %165, !dbg !70
  %179 = fadd float %71, %166, !dbg !70
  %180 = fadd float %72, %167, !dbg !70
  %181 = fadd float %73, %168, !dbg !70
  %182 = fadd float %156, %174, !dbg !70
  %183 = fadd float %157, %175, !dbg !70
  %184 = fadd float %158, %176, !dbg !70
  %185 = fadd float %159, %177, !dbg !70
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #1, !dbg !71
  %187 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !71
  %188 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !71
  %189 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !71
  %190 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !71
  %191 = bitcast i32 %187 to float, !dbg !71
  %192 = bitcast i32 %188 to float, !dbg !71
  %193 = bitcast i32 %189 to float, !dbg !71
  %194 = bitcast i32 %190 to float, !dbg !71
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !71
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !71
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !71
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !71
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !71
  %200 = bitcast i32 %196 to float, !dbg !71
  %201 = bitcast i32 %197 to float, !dbg !71
  %202 = bitcast i32 %198 to float, !dbg !71
  %203 = bitcast i32 %199 to float, !dbg !71
  %204 = fadd float %178, %191, !dbg !72
  %205 = fadd float %179, %192, !dbg !72
  %206 = fadd float %180, %193, !dbg !72
  %207 = fadd float %181, %194, !dbg !72
  %208 = fadd float %182, %200, !dbg !72
  %209 = fadd float %183, %201, !dbg !72
  %210 = fadd float %184, %202, !dbg !72
  %211 = fadd float %185, %203, !dbg !72
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !73
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !73
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !73
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !73
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !73
  %217 = bitcast i32 %213 to float, !dbg !73
  %218 = bitcast i32 %214 to float, !dbg !73
  %219 = bitcast i32 %215 to float, !dbg !73
  %220 = bitcast i32 %216 to float, !dbg !73
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #1, !dbg !73
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !73
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !73
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !73
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !73
  %226 = bitcast i32 %222 to float, !dbg !73
  %227 = bitcast i32 %223 to float, !dbg !73
  %228 = bitcast i32 %224 to float, !dbg !73
  %229 = bitcast i32 %225 to float, !dbg !73
  %230 = fadd float %204, %217, !dbg !74
  %231 = fadd float %205, %218, !dbg !74
  %232 = fadd float %206, %219, !dbg !74
  %233 = fadd float %207, %220, !dbg !74
  %234 = fadd float %208, %226, !dbg !74
  %235 = fadd float %209, %227, !dbg !74
  %236 = fadd float %210, %228, !dbg !74
  %237 = fadd float %211, %229, !dbg !74
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !75
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !75
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !75
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !75
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !75
  %243 = bitcast i32 %239 to float, !dbg !75
  %244 = bitcast i32 %240 to float, !dbg !75
  %245 = bitcast i32 %241 to float, !dbg !75
  %246 = bitcast i32 %242 to float, !dbg !75
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #1, !dbg !75
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !75
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !75
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !75
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !75
  %252 = bitcast i32 %248 to float, !dbg !75
  %253 = bitcast i32 %249 to float, !dbg !75
  %254 = bitcast i32 %250 to float, !dbg !75
  %255 = bitcast i32 %251 to float, !dbg !75
  %256 = fadd float %230, %243, !dbg !76
  %257 = fadd float %231, %244, !dbg !76
  %258 = fadd float %232, %245, !dbg !76
  %259 = fadd float %233, %246, !dbg !76
  %260 = fadd float %234, %252, !dbg !76
  %261 = fadd float %235, %253, !dbg !76
  %262 = fadd float %236, %254, !dbg !76
  %263 = fadd float %237, %255, !dbg !76
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !77
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !77
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !77
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !77
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !77
  %269 = bitcast i32 %265 to float, !dbg !77
  %270 = bitcast i32 %266 to float, !dbg !77
  %271 = bitcast i32 %267 to float, !dbg !77
  %272 = bitcast i32 %268 to float, !dbg !77
  %273 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #1, !dbg !77
  %274 = extractvalue { i32, i32, i32, i32 } %273, 0, !dbg !77
  %275 = extractvalue { i32, i32, i32, i32 } %273, 1, !dbg !77
  %276 = extractvalue { i32, i32, i32, i32 } %273, 2, !dbg !77
  %277 = extractvalue { i32, i32, i32, i32 } %273, 3, !dbg !77
  %278 = bitcast i32 %274 to float, !dbg !77
  %279 = bitcast i32 %275 to float, !dbg !77
  %280 = bitcast i32 %276 to float, !dbg !77
  %281 = bitcast i32 %277 to float, !dbg !77
  %282 = fadd float %256, %269, !dbg !78
  %283 = fadd float %257, %270, !dbg !78
  %284 = fadd float %258, %271, !dbg !78
  %285 = fadd float %259, %272, !dbg !78
  %286 = fadd float %260, %278, !dbg !78
  %287 = fadd float %261, %279, !dbg !78
  %288 = fadd float %262, %280, !dbg !78
  %289 = fadd float %263, %281, !dbg !78
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #1, !dbg !79
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !79
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !79
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !79
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !79
  %295 = bitcast i32 %291 to float, !dbg !79
  %296 = bitcast i32 %292 to float, !dbg !79
  %297 = bitcast i32 %293 to float, !dbg !79
  %298 = bitcast i32 %294 to float, !dbg !79
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #1, !dbg !79
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !79
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !79
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !79
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !79
  %304 = bitcast i32 %300 to float, !dbg !79
  %305 = bitcast i32 %301 to float, !dbg !79
  %306 = bitcast i32 %302 to float, !dbg !79
  %307 = bitcast i32 %303 to float, !dbg !79
  %308 = fadd float %282, %295, !dbg !80
  %309 = fadd float %283, %296, !dbg !80
  %310 = fadd float %284, %297, !dbg !80
  %311 = fadd float %285, %298, !dbg !80
  %312 = fadd float %286, %304, !dbg !80
  %313 = fadd float %287, %305, !dbg !80
  %314 = fadd float %288, %306, !dbg !80
  %315 = fadd float %289, %307, !dbg !80
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !81
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !81
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !81
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !81
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !81
  %321 = bitcast i32 %317 to float, !dbg !81
  %322 = bitcast i32 %318 to float, !dbg !81
  %323 = bitcast i32 %319 to float, !dbg !81
  %324 = bitcast i32 %320 to float, !dbg !81
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #1, !dbg !81
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !81
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !81
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !81
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !81
  %330 = bitcast i32 %326 to float, !dbg !81
  %331 = bitcast i32 %327 to float, !dbg !81
  %332 = bitcast i32 %328 to float, !dbg !81
  %333 = bitcast i32 %329 to float, !dbg !81
  %334 = fadd float %308, %321, !dbg !82
  %335 = fadd float %309, %322, !dbg !82
  %336 = fadd float %310, %323, !dbg !82
  %337 = fadd float %311, %324, !dbg !82
  %338 = fadd float %312, %330, !dbg !82
  %339 = fadd float %313, %331, !dbg !82
  %340 = fadd float %314, %332, !dbg !82
  %341 = fadd float %315, %333, !dbg !82
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !83
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !83
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !83
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !83
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !83
  %347 = bitcast i32 %343 to float, !dbg !83
  %348 = bitcast i32 %344 to float, !dbg !83
  %349 = bitcast i32 %345 to float, !dbg !83
  %350 = bitcast i32 %346 to float, !dbg !83
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #1, !dbg !83
  %352 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !83
  %353 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !83
  %354 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !83
  %355 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !83
  %356 = bitcast i32 %352 to float, !dbg !83
  %357 = bitcast i32 %353 to float, !dbg !83
  %358 = bitcast i32 %354 to float, !dbg !83
  %359 = bitcast i32 %355 to float, !dbg !83
  %360 = fadd float %334, %347, !dbg !84
  %361 = fadd float %335, %348, !dbg !84
  %362 = fadd float %336, %349, !dbg !84
  %363 = fadd float %337, %350, !dbg !84
  %364 = fadd float %338, %356, !dbg !84
  %365 = fadd float %339, %357, !dbg !84
  %366 = fadd float %340, %358, !dbg !84
  %367 = fadd float %341, %359, !dbg !84
  %368 = shufflevector <2 x i32> %98, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !56
  %369 = mul nsw <2 x i32> %147, %368, !dbg !56
  %shift = shufflevector <2 x i32> %94, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %370 = add nsw <2 x i32> %shift, %94
  %reass.add = extractelement <2 x i32> %370, i64 0
  %371 = add nsw i32 %59, %61, !dbg !34
  %reass.sub15 = sub nsw i32 %83, %371, !dbg !34
  %372 = add nsw i32 %reass.sub15, 1, !dbg !34
  %373 = add nsw i32 %372, %90, !dbg !55
  %374 = add nsw i32 %373, %91, !dbg !56
  %375 = add nsw i32 %374, %92, !dbg !85
  %376 = sub nsw i32 %375, %reass.add, !dbg !86
  %shift16 = shufflevector <2 x i32> %369, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %377 = add nsw <2 x i32> %shift16, %369
  %reass.add13 = extractelement <2 x i32> %377, i64 0
  %378 = add nsw i32 %99, %101, !dbg !34
  %reass.sub = sub nsw i32 %141, %378, !dbg !34
  %379 = add nsw i32 %reass.sub, 1, !dbg !34
  %380 = add nsw i32 %379, %148, !dbg !55
  %381 = add nsw i32 %380, %149, !dbg !56
  %382 = add nsw i32 %381, %150, !dbg !85
  %383 = sub nsw i32 %382, %reass.add13, !dbg !86
  %384 = sitofp i32 %376 to float, !dbg !87
  %385 = sitofp i32 %383 to float, !dbg !87
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %384) #1, !dbg !87
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %384) #1, !dbg !87
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %384) #1, !dbg !87
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %363, float %384) #1, !dbg !87
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %364, float %385) #1, !dbg !87
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %365, float %385) #1, !dbg !87
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %366, float %385) #1, !dbg !87
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %385) #1, !dbg !87
  %394 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !88
  %395 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !88
  %396 = bitcast float %386 to i32, !dbg !89
  %397 = bitcast float %387 to i32, !dbg !89
  %398 = bitcast float %388 to i32, !dbg !89
  %399 = bitcast float %389 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %396, i32 %397, i32 %398, i32 %399, ptr addrspace(1) %394, i1 %11) #1, !dbg !89
  %400 = bitcast float %390 to i32, !dbg !89
  %401 = bitcast float %391 to i32, !dbg !89
  %402 = bitcast float %392 to i32, !dbg !89
  %403 = bitcast float %393 to i32, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %401, i32 %402, i32 %403, ptr addrspace(1) %395, i1 %12) #1, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czhuotxt74mhcqabz4qluqmmdd2ptc4tqavwle7ukputi5gudr6d.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_poi_fused_avg_pool2d_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_30", linkageName: "triton_poi_fused_avg_pool2d_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 42, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 42, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 42, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 40, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 37, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 39, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 39, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 39, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 21, scope: !7)
!33 = !DILocation(line: 24, column: 30, scope: !7)
!34 = !DILocation(line: 79, column: 40, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 34, column: 19, scope: !7)
!37 = !DILocation(line: 37, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 55, scope: !7)
!39 = !DILocation(line: 38, column: 47, scope: !7)
!40 = !DILocation(line: 40, column: 21, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 55, scope: !7)
!43 = !DILocation(line: 54, column: 21, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 53, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 61, column: 44, scope: !7)
!48 = !DILocation(line: 79, column: 43, scope: !7)
!49 = !DILocation(line: 79, column: 129, scope: !7)
!50 = !DILocation(line: 79, column: 125, scope: !7)
!51 = !DILocation(line: 79, column: 116, scope: !7)
!52 = !DILocation(line: 79, column: 160, scope: !7)
!53 = !DILocation(line: 79, column: 148, scope: !7)
!54 = !DILocation(line: 79, column: 136, scope: !7)
!55 = !DILocation(line: 79, column: 48, scope: !7)
!56 = !DILocation(line: 79, column: 240, scope: !7)
!57 = !DILocation(line: 79, column: 108, scope: !7)
!58 = !DILocation(line: 69, column: 20, scope: !7)
!59 = !DILocation(line: 50, column: 19, scope: !7)
!60 = !DILocation(line: 51, column: 55, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 50, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 52, scope: !7)
!65 = !DILocation(line: 73, column: 20, scope: !7)
!66 = !DILocation(line: 74, column: 52, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 52, scope: !7)
!69 = !DILocation(line: 44, column: 47, scope: !7)
!70 = !DILocation(line: 45, column: 20, scope: !7)
!71 = !DILocation(line: 51, column: 47, scope: !7)
!72 = !DILocation(line: 52, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 45, scope: !7)
!74 = !DILocation(line: 59, column: 20, scope: !7)
!75 = !DILocation(line: 61, column: 36, scope: !7)
!76 = !DILocation(line: 62, column: 20, scope: !7)
!77 = !DILocation(line: 64, column: 42, scope: !7)
!78 = !DILocation(line: 65, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 44, scope: !7)
!80 = !DILocation(line: 72, column: 20, scope: !7)
!81 = !DILocation(line: 74, column: 44, scope: !7)
!82 = !DILocation(line: 75, column: 20, scope: !7)
!83 = !DILocation(line: 77, column: 44, scope: !7)
!84 = !DILocation(line: 78, column: 20, scope: !7)
!85 = !DILocation(line: 79, column: 311, scope: !7)
!86 = !DILocation(line: 79, column: 372, scope: !7)
!87 = !DILocation(line: 80, column: 20, scope: !7)
!88 = !DILocation(line: 81, column: 25, scope: !7)
!89 = !DILocation(line: 81, column: 37, scope: !7)
!90 = !DILocation(line: 81, column: 4, scope: !7)
