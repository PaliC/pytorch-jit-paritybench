; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = sdiv i32 %19, 256, !dbg !14
  %22 = sdiv i32 %20, 256, !dbg !14
  %23 = srem i32 %21, 128, !dbg !15
  %24 = srem i32 %22, 128, !dbg !15
  %.frozen = freeze i32 %19, !dbg !16
  %25 = sdiv i32 %.frozen, 16, !dbg !16
  %26 = mul i32 %25, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = sdiv i32 %20, 16, !dbg !16
  %28 = srem i32 %25, 16, !dbg !18
  %29 = srem i32 %27, 16, !dbg !18
  %30 = sext i32 %19 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %20 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %36 = sext i32 %23 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %24 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %61 = bitcast i32 %60 to float, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %65 = bitcast i32 %64 to float, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !26
  %67 = bitcast i32 %66 to float, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %69 = bitcast i32 %68 to float, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !26
  %75 = bitcast i32 %74 to float, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !29
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !30
  %.lhs.trunc = trunc nsw i32 %28 to i8, !dbg !31
  %96 = sdiv i8 %.lhs.trunc, 2, !dbg !31
  %.sext = sext i8 %96 to i32, !dbg !31
  %.lhs.trunc76 = trunc nsw i32 %29 to i8, !dbg !31
  %.lhs.trunc76.frozen = freeze i8 %.lhs.trunc76, !dbg !31
  %97 = sdiv i8 %.lhs.trunc76.frozen, 2, !dbg !31
  %.sext77 = sext i8 %97 to i32, !dbg !31
  %98 = shl nsw i32 %.sext, 4, !dbg !32
  %99 = shl nsw i32 %.sext77, 4, !dbg !32
  %100 = mul i8 %96, 2, !dbg !33
  %.decomposed96 = sub i8 %.lhs.trunc, %100, !dbg !33
  %.sext79 = sext i8 %.decomposed96 to i32, !dbg !33
  %101 = mul i8 %97, 2, !dbg !33
  %.decomposed97 = sub i8 %.lhs.trunc76.frozen, %101, !dbg !33
  %.sext81 = sext i8 %.decomposed97 to i32, !dbg !33
  %102 = shl nsw i32 %.sext79, 7, !dbg !34
  %103 = shl nsw i32 %.sext81, 7, !dbg !34
  %104 = shl nsw i32 %21, 8, !dbg !35
  %105 = shl nsw i32 %22, 8, !dbg !35
  %106 = add i32 %104, %.decomposed, !dbg !36
  %107 = add i32 %106, %98, !dbg !37
  %108 = add i32 %107, %102, !dbg !38
  %109 = add i32 %105, %.decomposed, !dbg !36
  %110 = add i32 %109, %99, !dbg !37
  %111 = add i32 %110, %103, !dbg !38
  %112 = sext i32 %108 to i64, !dbg !39
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !39
  %114 = sext i32 %111 to i64, !dbg !39
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %114, !dbg !39
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !40
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !41
  %119 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !41
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !42
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !42
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !42
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #3, !dbg !42
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #3, !dbg !42
  %128 = getelementptr float, ptr addrspace(1) %8, i64 %36, !dbg !43
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !43
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !44
  %131 = bitcast i32 %130 to float, !dbg !44
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !44
  %133 = bitcast i32 %132 to float, !dbg !44
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !44
  %135 = bitcast i32 %134 to float, !dbg !44
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !44
  %137 = bitcast i32 %136 to float, !dbg !44
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !44
  %139 = bitcast i32 %138 to float, !dbg !44
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !44
  %141 = bitcast i32 %140 to float, !dbg !44
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !44
  %143 = bitcast i32 %142 to float, !dbg !44
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !44
  %145 = bitcast i32 %144 to float, !dbg !44
  %146 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !45
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !46
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !46
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !46
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #3, !dbg !46
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !46
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !46
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !46
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #3, !dbg !46
  %156 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !47
  %157 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !47
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !48
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !48
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !48
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #3, !dbg !48
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #3, !dbg !48
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #3, !dbg !48
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #3, !dbg !48
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #3, !dbg !48
  %166 = fadd float %61, 0x3EE4F8B580000000, !dbg !49
  %167 = fadd float %63, 0x3EE4F8B580000000, !dbg !49
  %168 = fadd float %65, 0x3EE4F8B580000000, !dbg !49
  %169 = fadd float %67, 0x3EE4F8B580000000, !dbg !49
  %170 = fadd float %69, 0x3EE4F8B580000000, !dbg !49
  %171 = fadd float %71, 0x3EE4F8B580000000, !dbg !49
  %172 = fadd float %73, 0x3EE4F8B580000000, !dbg !49
  %173 = fadd float %75, 0x3EE4F8B580000000, !dbg !49
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %174, 0, !dbg !50
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %175, 0, !dbg !50
  br i1 %.not.i, label %181, label %176, !dbg !50

176:                                              ; preds = %13
  br i1 %.not1.i, label %179, label %177, !dbg !50

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

181:                                              ; preds = %13
  br i1 %.not1.i, label %184, label %182, !dbg !50

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %177, %179, %182, %184
  %.0.i = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !50
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %186, 0, !dbg !50
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %187, 0, !dbg !50
  br i1 %.not.i1, label %193, label %188, !dbg !50

188:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %191, label %189, !dbg !50

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

193:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %196, label %194, !dbg !50

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %189, %191, %194, %196
  %.0.i3 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !50
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %198, 0, !dbg !50
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %199, 0, !dbg !50
  br i1 %.not.i6, label %205, label %200, !dbg !50

200:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %203, label %201, !dbg !50

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

205:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %208, label %206, !dbg !50

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %201, %203, %206, %208
  %.0.i8 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !50
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %210, 0, !dbg !50
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %211, 0, !dbg !50
  br i1 %.not.i11, label %217, label %212, !dbg !50

212:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %215, label %213, !dbg !50

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

217:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %220, label %218, !dbg !50

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %213, %215, %218, %220
  %.0.i13 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !50
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i16 = icmp eq i32 %222, 0, !dbg !50
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i19 = icmp eq i32 %223, 0, !dbg !50
  br i1 %.not.i16, label %229, label %224, !dbg !50

224:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %227, label %225, !dbg !50

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

229:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %232, label %230, !dbg !50

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !50
  br label %__nv_sqrtf.exit20, !dbg !50

__nv_sqrtf.exit20:                                ; preds = %225, %227, %230, %232
  %.0.i18 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !50
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i21 = icmp eq i32 %234, 0, !dbg !50
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i24 = icmp eq i32 %235, 0, !dbg !50
  br i1 %.not.i21, label %241, label %236, !dbg !50

236:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %239, label %237, !dbg !50

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

241:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %244, label %242, !dbg !50

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !50
  br label %__nv_sqrtf.exit25, !dbg !50

__nv_sqrtf.exit25:                                ; preds = %237, %239, %242, %244
  %.0.i23 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !50
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i26 = icmp eq i32 %246, 0, !dbg !50
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i29 = icmp eq i32 %247, 0, !dbg !50
  br i1 %.not.i26, label %253, label %248, !dbg !50

248:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %251, label %249, !dbg !50

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

253:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %256, label %254, !dbg !50

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !50
  br label %__nv_sqrtf.exit30, !dbg !50

__nv_sqrtf.exit30:                                ; preds = %249, %251, %254, %256
  %.0.i28 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !50
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i31 = icmp eq i32 %258, 0, !dbg !50
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i34 = icmp eq i32 %259, 0, !dbg !50
  br i1 %.not.i31, label %265, label %260, !dbg !50

260:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %263, label %261, !dbg !50

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

265:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %268, label %266, !dbg !50

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !50
  br label %__nv_sqrtf.exit35, !dbg !50

__nv_sqrtf.exit35:                                ; preds = %261, %263, %266, %268
  %.0.i33 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !50
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !51
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !51
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !51
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !51
  %278 = fadd float %131, 0x3EE4F8B580000000, !dbg !52
  %279 = fadd float %133, 0x3EE4F8B580000000, !dbg !52
  %280 = fadd float %135, 0x3EE4F8B580000000, !dbg !52
  %281 = fadd float %137, 0x3EE4F8B580000000, !dbg !52
  %282 = fadd float %139, 0x3EE4F8B580000000, !dbg !52
  %283 = fadd float %141, 0x3EE4F8B580000000, !dbg !52
  %284 = fadd float %143, 0x3EE4F8B580000000, !dbg !52
  %285 = fadd float %145, 0x3EE4F8B580000000, !dbg !52
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i36 = icmp eq i32 %286, 0, !dbg !53
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i39 = icmp eq i32 %287, 0, !dbg !53
  br i1 %.not.i36, label %293, label %288, !dbg !53

288:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %291, label %289, !dbg !53

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #3, !dbg !53
  br label %__nv_sqrtf.exit40, !dbg !53

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #3, !dbg !53
  br label %__nv_sqrtf.exit40, !dbg !53

293:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %296, label %294, !dbg !53

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #3, !dbg !53
  br label %__nv_sqrtf.exit40, !dbg !53

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #3, !dbg !53
  br label %__nv_sqrtf.exit40, !dbg !53

__nv_sqrtf.exit40:                                ; preds = %289, %291, %294, %296
  %.0.i38 = phi float [ %290, %289 ], [ %292, %291 ], [ %295, %294 ], [ %297, %296 ], !dbg !53
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i41 = icmp eq i32 %298, 0, !dbg !53
  %299 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i44 = icmp eq i32 %299, 0, !dbg !53
  br i1 %.not.i41, label %305, label %300, !dbg !53

300:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %303, label %301, !dbg !53

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #3, !dbg !53
  br label %__nv_sqrtf.exit45, !dbg !53

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #3, !dbg !53
  br label %__nv_sqrtf.exit45, !dbg !53

305:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %308, label %306, !dbg !53

306:                                              ; preds = %305
  %307 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #3, !dbg !53
  br label %__nv_sqrtf.exit45, !dbg !53

308:                                              ; preds = %305
  %309 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #3, !dbg !53
  br label %__nv_sqrtf.exit45, !dbg !53

__nv_sqrtf.exit45:                                ; preds = %301, %303, %306, %308
  %.0.i43 = phi float [ %302, %301 ], [ %304, %303 ], [ %307, %306 ], [ %309, %308 ], !dbg !53
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i46 = icmp eq i32 %310, 0, !dbg !53
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i49 = icmp eq i32 %311, 0, !dbg !53
  br i1 %.not.i46, label %317, label %312, !dbg !53

312:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %315, label %313, !dbg !53

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #3, !dbg !53
  br label %__nv_sqrtf.exit50, !dbg !53

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #3, !dbg !53
  br label %__nv_sqrtf.exit50, !dbg !53

317:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %320, label %318, !dbg !53

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #3, !dbg !53
  br label %__nv_sqrtf.exit50, !dbg !53

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #3, !dbg !53
  br label %__nv_sqrtf.exit50, !dbg !53

__nv_sqrtf.exit50:                                ; preds = %313, %315, %318, %320
  %.0.i48 = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !53
  %322 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i51 = icmp eq i32 %322, 0, !dbg !53
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i54 = icmp eq i32 %323, 0, !dbg !53
  br i1 %.not.i51, label %329, label %324, !dbg !53

324:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %327, label %325, !dbg !53

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #3, !dbg !53
  br label %__nv_sqrtf.exit55, !dbg !53

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #3, !dbg !53
  br label %__nv_sqrtf.exit55, !dbg !53

329:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %332, label %330, !dbg !53

330:                                              ; preds = %329
  %331 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #3, !dbg !53
  br label %__nv_sqrtf.exit55, !dbg !53

332:                                              ; preds = %329
  %333 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #3, !dbg !53
  br label %__nv_sqrtf.exit55, !dbg !53

__nv_sqrtf.exit55:                                ; preds = %325, %327, %330, %332
  %.0.i53 = phi float [ %326, %325 ], [ %328, %327 ], [ %331, %330 ], [ %333, %332 ], !dbg !53
  %334 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i56 = icmp eq i32 %334, 0, !dbg !53
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i59 = icmp eq i32 %335, 0, !dbg !53
  br i1 %.not.i56, label %341, label %336, !dbg !53

336:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %339, label %337, !dbg !53

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %282) #3, !dbg !53
  br label %__nv_sqrtf.exit60, !dbg !53

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %282) #3, !dbg !53
  br label %__nv_sqrtf.exit60, !dbg !53

341:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %344, label %342, !dbg !53

342:                                              ; preds = %341
  %343 = tail call float @llvm.nvvm.sqrt.rn.f(float %282) #3, !dbg !53
  br label %__nv_sqrtf.exit60, !dbg !53

344:                                              ; preds = %341
  %345 = tail call float @llvm.nvvm.sqrt.approx.f(float %282) #3, !dbg !53
  br label %__nv_sqrtf.exit60, !dbg !53

__nv_sqrtf.exit60:                                ; preds = %337, %339, %342, %344
  %.0.i58 = phi float [ %338, %337 ], [ %340, %339 ], [ %343, %342 ], [ %345, %344 ], !dbg !53
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i61 = icmp eq i32 %346, 0, !dbg !53
  %347 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i64 = icmp eq i32 %347, 0, !dbg !53
  br i1 %.not.i61, label %353, label %348, !dbg !53

348:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %351, label %349, !dbg !53

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %283) #3, !dbg !53
  br label %__nv_sqrtf.exit65, !dbg !53

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %283) #3, !dbg !53
  br label %__nv_sqrtf.exit65, !dbg !53

353:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %356, label %354, !dbg !53

354:                                              ; preds = %353
  %355 = tail call float @llvm.nvvm.sqrt.rn.f(float %283) #3, !dbg !53
  br label %__nv_sqrtf.exit65, !dbg !53

356:                                              ; preds = %353
  %357 = tail call float @llvm.nvvm.sqrt.approx.f(float %283) #3, !dbg !53
  br label %__nv_sqrtf.exit65, !dbg !53

__nv_sqrtf.exit65:                                ; preds = %349, %351, %354, %356
  %.0.i63 = phi float [ %350, %349 ], [ %352, %351 ], [ %355, %354 ], [ %357, %356 ], !dbg !53
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i66 = icmp eq i32 %358, 0, !dbg !53
  %359 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i69 = icmp eq i32 %359, 0, !dbg !53
  br i1 %.not.i66, label %365, label %360, !dbg !53

360:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %363, label %361, !dbg !53

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %284) #3, !dbg !53
  br label %__nv_sqrtf.exit70, !dbg !53

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %284) #3, !dbg !53
  br label %__nv_sqrtf.exit70, !dbg !53

365:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %368, label %366, !dbg !53

366:                                              ; preds = %365
  %367 = tail call float @llvm.nvvm.sqrt.rn.f(float %284) #3, !dbg !53
  br label %__nv_sqrtf.exit70, !dbg !53

368:                                              ; preds = %365
  %369 = tail call float @llvm.nvvm.sqrt.approx.f(float %284) #3, !dbg !53
  br label %__nv_sqrtf.exit70, !dbg !53

__nv_sqrtf.exit70:                                ; preds = %361, %363, %366, %368
  %.0.i68 = phi float [ %362, %361 ], [ %364, %363 ], [ %367, %366 ], [ %369, %368 ], !dbg !53
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i71 = icmp eq i32 %370, 0, !dbg !53
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i74 = icmp eq i32 %371, 0, !dbg !53
  br i1 %.not.i71, label %377, label %372, !dbg !53

372:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %375, label %373, !dbg !53

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %285) #3, !dbg !53
  br label %__nv_sqrtf.exit75, !dbg !53

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %285) #3, !dbg !53
  br label %__nv_sqrtf.exit75, !dbg !53

377:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %380, label %378, !dbg !53

378:                                              ; preds = %377
  %379 = tail call float @llvm.nvvm.sqrt.rn.f(float %285) #3, !dbg !53
  br label %__nv_sqrtf.exit75, !dbg !53

380:                                              ; preds = %377
  %381 = tail call float @llvm.nvvm.sqrt.approx.f(float %285) #3, !dbg !53
  br label %__nv_sqrtf.exit75, !dbg !53

__nv_sqrtf.exit75:                                ; preds = %373, %375, %378, %380
  %.0.i73 = phi float [ %374, %373 ], [ %376, %375 ], [ %379, %378 ], [ %381, %380 ], !dbg !53
  %382 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !40
  %383 = bitcast i32 %382 to float, !dbg !40
  %384 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !24
  %385 = insertelement <2 x i32> %384, i32 %127, i64 1, !dbg !24
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !24
  %387 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !40
  %388 = bitcast i32 %387 to float, !dbg !40
  %389 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !24
  %390 = insertelement <2 x i32> %389, i32 %126, i64 1, !dbg !24
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !24
  %392 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !40
  %393 = bitcast i32 %392 to float, !dbg !40
  %394 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !24
  %395 = insertelement <2 x i32> %394, i32 %125, i64 1, !dbg !24
  %396 = bitcast <2 x i32> %395 to <2 x float>, !dbg !24
  %397 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !40
  %398 = bitcast i32 %397 to float, !dbg !40
  %399 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !24
  %400 = insertelement <2 x i32> %399, i32 %124, i64 1, !dbg !24
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !24
  %402 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !40
  %403 = bitcast i32 %402 to float, !dbg !40
  %404 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !24
  %405 = insertelement <2 x i32> %404, i32 %123, i64 1, !dbg !24
  %406 = bitcast <2 x i32> %405 to <2 x float>, !dbg !24
  %407 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !40
  %408 = bitcast i32 %407 to float, !dbg !40
  %409 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !24
  %410 = insertelement <2 x i32> %409, i32 %122, i64 1, !dbg !24
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !24
  %412 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !40
  %413 = bitcast i32 %412 to float, !dbg !40
  %414 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !24
  %415 = insertelement <2 x i32> %414, i32 %121, i64 1, !dbg !24
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !24
  %417 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !40
  %418 = bitcast i32 %417 to float, !dbg !40
  %419 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !24
  %420 = insertelement <2 x i32> %419, i32 %120, i64 1, !dbg !24
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !24
  %422 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %423 = bitcast i32 %422 to float, !dbg !20
  %424 = bitcast i32 %47 to float, !dbg !22
  %425 = fadd float %423, %424, !dbg !54
  %426 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !28
  %427 = insertelement <2 x i32> %426, i32 %155, i64 1, !dbg !28
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !28
  %429 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !30
  %430 = insertelement <2 x i32> %429, i32 %165, i64 1, !dbg !30
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !30
  %432 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %433 = bitcast i32 %432 to float, !dbg !20
  %434 = bitcast i32 %46 to float, !dbg !22
  %435 = fadd float %433, %434, !dbg !54
  %436 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !28
  %437 = insertelement <2 x i32> %436, i32 %154, i64 1, !dbg !28
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !28
  %439 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !30
  %440 = insertelement <2 x i32> %439, i32 %164, i64 1, !dbg !30
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !30
  %442 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %443 = bitcast i32 %442 to float, !dbg !20
  %444 = bitcast i32 %45 to float, !dbg !22
  %445 = fadd float %443, %444, !dbg !54
  %446 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !28
  %447 = insertelement <2 x i32> %446, i32 %153, i64 1, !dbg !28
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !28
  %449 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !30
  %450 = insertelement <2 x i32> %449, i32 %163, i64 1, !dbg !30
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !30
  %452 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %453 = bitcast i32 %452 to float, !dbg !20
  %454 = bitcast i32 %44 to float, !dbg !22
  %455 = fadd float %453, %454, !dbg !54
  %456 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !28
  %457 = insertelement <2 x i32> %456, i32 %152, i64 1, !dbg !28
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !28
  %459 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !30
  %460 = insertelement <2 x i32> %459, i32 %162, i64 1, !dbg !30
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !30
  %462 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %463 = bitcast i32 %462 to float, !dbg !20
  %464 = bitcast i32 %43 to float, !dbg !22
  %465 = fadd float %463, %464, !dbg !54
  %466 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !28
  %467 = insertelement <2 x i32> %466, i32 %151, i64 1, !dbg !28
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !28
  %469 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !30
  %470 = insertelement <2 x i32> %469, i32 %161, i64 1, !dbg !30
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !30
  %472 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %473 = bitcast i32 %472 to float, !dbg !20
  %474 = bitcast i32 %42 to float, !dbg !22
  %475 = fadd float %473, %474, !dbg !54
  %476 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !28
  %477 = insertelement <2 x i32> %476, i32 %150, i64 1, !dbg !28
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !28
  %479 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !30
  %480 = insertelement <2 x i32> %479, i32 %160, i64 1, !dbg !30
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !30
  %482 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %483 = bitcast i32 %482 to float, !dbg !20
  %484 = bitcast i32 %41 to float, !dbg !22
  %485 = fadd float %483, %484, !dbg !54
  %486 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !28
  %487 = insertelement <2 x i32> %486, i32 %149, i64 1, !dbg !28
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !28
  %489 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !30
  %490 = insertelement <2 x i32> %489, i32 %159, i64 1, !dbg !30
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !30
  %492 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %493 = bitcast i32 %492 to float, !dbg !20
  %494 = bitcast i32 %40 to float, !dbg !22
  %495 = fadd float %493, %494, !dbg !54
  %496 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !28
  %497 = insertelement <2 x i32> %496, i32 %148, i64 1, !dbg !28
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !28
  %499 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !30
  %500 = insertelement <2 x i32> %499, i32 %158, i64 1, !dbg !30
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !30
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !55
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !55
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !55
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !55
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !55
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !55
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !55
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !55
  %510 = insertelement <2 x float> poison, float %495, i64 0, !dbg !56
  %511 = insertelement <2 x float> %510, float %418, i64 1, !dbg !56
  %512 = fsub <2 x float> %511, %421, !dbg !56
  %513 = insertelement <2 x float> poison, float %270, i64 0, !dbg !57
  %514 = insertelement <2 x float> %513, float %502, i64 1, !dbg !57
  %515 = fmul <2 x float> %512, %514, !dbg !57
  %516 = fmul <2 x float> %515, %498, !dbg !58
  %517 = fadd <2 x float> %516, %501, !dbg !59
  %518 = insertelement <2 x float> poison, float %485, i64 0, !dbg !56
  %519 = insertelement <2 x float> %518, float %413, i64 1, !dbg !56
  %520 = fsub <2 x float> %519, %416, !dbg !56
  %521 = insertelement <2 x float> poison, float %271, i64 0, !dbg !57
  %522 = insertelement <2 x float> %521, float %503, i64 1, !dbg !57
  %523 = fmul <2 x float> %520, %522, !dbg !57
  %524 = fmul <2 x float> %523, %488, !dbg !58
  %525 = fadd <2 x float> %524, %491, !dbg !59
  %526 = insertelement <2 x float> poison, float %475, i64 0, !dbg !56
  %527 = insertelement <2 x float> %526, float %408, i64 1, !dbg !56
  %528 = fsub <2 x float> %527, %411, !dbg !56
  %529 = insertelement <2 x float> poison, float %272, i64 0, !dbg !57
  %530 = insertelement <2 x float> %529, float %504, i64 1, !dbg !57
  %531 = fmul <2 x float> %528, %530, !dbg !57
  %532 = fmul <2 x float> %531, %478, !dbg !58
  %533 = fadd <2 x float> %532, %481, !dbg !59
  %534 = insertelement <2 x float> poison, float %465, i64 0, !dbg !56
  %535 = insertelement <2 x float> %534, float %403, i64 1, !dbg !56
  %536 = fsub <2 x float> %535, %406, !dbg !56
  %537 = insertelement <2 x float> poison, float %273, i64 0, !dbg !57
  %538 = insertelement <2 x float> %537, float %505, i64 1, !dbg !57
  %539 = fmul <2 x float> %536, %538, !dbg !57
  %540 = fmul <2 x float> %539, %468, !dbg !58
  %541 = fadd <2 x float> %540, %471, !dbg !59
  %542 = insertelement <2 x float> poison, float %455, i64 0, !dbg !56
  %543 = insertelement <2 x float> %542, float %398, i64 1, !dbg !56
  %544 = fsub <2 x float> %543, %401, !dbg !56
  %545 = insertelement <2 x float> poison, float %274, i64 0, !dbg !57
  %546 = insertelement <2 x float> %545, float %506, i64 1, !dbg !57
  %547 = fmul <2 x float> %544, %546, !dbg !57
  %548 = fmul <2 x float> %547, %458, !dbg !58
  %549 = fadd <2 x float> %548, %461, !dbg !59
  %550 = insertelement <2 x float> poison, float %445, i64 0, !dbg !56
  %551 = insertelement <2 x float> %550, float %393, i64 1, !dbg !56
  %552 = fsub <2 x float> %551, %396, !dbg !56
  %553 = insertelement <2 x float> poison, float %275, i64 0, !dbg !57
  %554 = insertelement <2 x float> %553, float %507, i64 1, !dbg !57
  %555 = fmul <2 x float> %552, %554, !dbg !57
  %556 = fmul <2 x float> %555, %448, !dbg !58
  %557 = fadd <2 x float> %556, %451, !dbg !59
  %558 = insertelement <2 x float> poison, float %435, i64 0, !dbg !56
  %559 = insertelement <2 x float> %558, float %388, i64 1, !dbg !56
  %560 = fsub <2 x float> %559, %391, !dbg !56
  %561 = insertelement <2 x float> poison, float %276, i64 0, !dbg !57
  %562 = insertelement <2 x float> %561, float %508, i64 1, !dbg !57
  %563 = fmul <2 x float> %560, %562, !dbg !57
  %564 = fmul <2 x float> %563, %438, !dbg !58
  %565 = fadd <2 x float> %564, %441, !dbg !59
  %566 = insertelement <2 x float> poison, float %425, i64 0, !dbg !56
  %567 = insertelement <2 x float> %566, float %383, i64 1, !dbg !56
  %568 = fsub <2 x float> %567, %386, !dbg !56
  %569 = insertelement <2 x float> poison, float %277, i64 0, !dbg !57
  %570 = insertelement <2 x float> %569, float %509, i64 1, !dbg !57
  %571 = fmul <2 x float> %568, %570, !dbg !57
  %572 = fmul <2 x float> %571, %428, !dbg !58
  %573 = fadd <2 x float> %572, %431, !dbg !59
  %shift = shufflevector <2 x float> %517, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %574 = fadd <2 x float> %517, %shift, !dbg !60
  %shift82 = shufflevector <2 x float> %525, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %575 = fadd <2 x float> %525, %shift82, !dbg !60
  %shift83 = shufflevector <2 x float> %533, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %576 = fadd <2 x float> %533, %shift83, !dbg !60
  %shift84 = shufflevector <2 x float> %541, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %577 = fadd <2 x float> %541, %shift84, !dbg !60
  %shift85 = shufflevector <2 x float> %549, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %578 = fadd <2 x float> %549, %shift85, !dbg !60
  %shift86 = shufflevector <2 x float> %557, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %579 = fadd <2 x float> %557, %shift86, !dbg !60
  %shift87 = shufflevector <2 x float> %565, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %580 = fadd <2 x float> %565, %shift87, !dbg !60
  %shift88 = shufflevector <2 x float> %573, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %581 = fadd <2 x float> %573, %shift88, !dbg !60
  %582 = bitcast float %495 to i32, !dbg !61
  %583 = bitcast float %485 to i32, !dbg !61
  %584 = bitcast float %475 to i32, !dbg !61
  %585 = bitcast float %465 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %582, i32 %583, i32 %584, i32 %585, ptr addrspace(1) %31, i1 true) #3, !dbg !61
  %586 = bitcast float %455 to i32, !dbg !61
  %587 = bitcast float %445 to i32, !dbg !61
  %588 = bitcast float %435 to i32, !dbg !61
  %589 = bitcast float %425 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %586, i32 %587, i32 %588, i32 %589, ptr addrspace(1) %33, i1 true) #3, !dbg !61
  %590 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !62
  %591 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !62
  %bc = bitcast <2 x float> %574 to <2 x i32>, !dbg !63
  %592 = extractelement <2 x i32> %bc, i64 0, !dbg !63
  %bc89 = bitcast <2 x float> %575 to <2 x i32>, !dbg !63
  %593 = extractelement <2 x i32> %bc89, i64 0, !dbg !63
  %bc90 = bitcast <2 x float> %576 to <2 x i32>, !dbg !63
  %594 = extractelement <2 x i32> %bc90, i64 0, !dbg !63
  %bc91 = bitcast <2 x float> %577 to <2 x i32>, !dbg !63
  %595 = extractelement <2 x i32> %bc91, i64 0, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %592, i32 %593, i32 %594, i32 %595, ptr addrspace(1) %590, i1 true) #3, !dbg !63
  %bc92 = bitcast <2 x float> %578 to <2 x i32>, !dbg !63
  %596 = extractelement <2 x i32> %bc92, i64 0, !dbg !63
  %bc93 = bitcast <2 x float> %579 to <2 x i32>, !dbg !63
  %597 = extractelement <2 x i32> %bc93, i64 0, !dbg !63
  %bc94 = bitcast <2 x float> %580 to <2 x i32>, !dbg !63
  %598 = extractelement <2 x i32> %bc94, i64 0, !dbg !63
  %bc95 = bitcast <2 x float> %581 to <2 x i32>, !dbg !63
  %599 = extractelement <2 x i32> %bc95, i64 0, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %597, i32 %598, i32 %599, ptr addrspace(1) %591, i1 true) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnzopanezgtfwk2gtycyxipzgws7zz65nbu6aumrfaeozpnmjsz5.py", directory: "inductor_cache/nz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 46, scope: !7)
!32 = !DILocation(line: 35, column: 40, scope: !7)
!33 = !DILocation(line: 35, column: 62, scope: !7)
!34 = !DILocation(line: 35, column: 57, scope: !7)
!35 = !DILocation(line: 35, column: 72, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 35, column: 51, scope: !7)
!38 = !DILocation(line: 35, column: 68, scope: !7)
!39 = !DILocation(line: 35, column: 31, scope: !7)
!40 = !DILocation(line: 35, column: 77, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 36, scope: !7)
!43 = !DILocation(line: 37, column: 31, scope: !7)
!44 = !DILocation(line: 37, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 36, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 36, scope: !7)
!49 = !DILocation(line: 43, column: 18, scope: !7)
!50 = !DILocation(line: 44, column: 26, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 54, column: 27, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 55, column: 19, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 49, column: 19, scope: !7)
!58 = !DILocation(line: 50, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 39, scope: !7)
!62 = !DILocation(line: 62, column: 25, scope: !7)
!63 = !DILocation(line: 62, column: 37, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
