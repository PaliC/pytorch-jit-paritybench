; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = shl i32 %12, 2, !dbg !13
  %15 = and i32 %14, 60, !dbg !13
  %16 = and i32 %13, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !14
  %19 = shufflevector <2 x i32> %18, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %20 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %21 = insertelement <2 x i32> %20, i32 %16, i64 1, !dbg !14
  %22 = or disjoint <2 x i32> %19, %21, !dbg !14
  %23 = extractelement <2 x i32> %22, i64 1, !dbg !15
  %24 = icmp slt i32 %23, 1556, !dbg !15
  %25 = extractelement <2 x i32> %22, i64 0, !dbg !15
  %26 = icmp slt i32 %25, 1556, !dbg !15
  %27 = srem <2 x i32> %22, splat (i32 389), !dbg !16
  %28 = sdiv i32 %23, 389, !dbg !17
  %29 = sdiv i32 %25, 389, !dbg !17
  %30 = extractelement <2 x i32> %27, i64 1, !dbg !18
  %31 = sext i32 %30 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !19
  %33 = extractelement <2 x i32> %27, i64 0, !dbg !18
  %34 = sext i32 %33 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %24) #5, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %24) #5, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %24) #5, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %24) #5, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %26) #5, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %26) #5, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %26) #5, !dbg !20
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %26) #5, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #5, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #5, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %24) #5, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %26) #5, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %26) #5, !dbg !22
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %26) #5, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %26) #5, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #5, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #5, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #5, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %24) #5, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #5, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #5, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #5, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %26) #5, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #5, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #5, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #5, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %24) #5, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %26) #5, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %26) #5, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %26) #5, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %26) #5, !dbg !26
  %76 = icmp slt <2 x i32> %27, splat (i32 377), !dbg !27
  %77 = shl nsw i32 %30, 6, !dbg !28
  %78 = shl nsw i32 %33, 6, !dbg !28
  %79 = or disjoint i32 %77, %15, !dbg !29
  %80 = or disjoint i32 %78, %15, !dbg !29
  %81 = mul i32 %28, 24128, !dbg !30
  %82 = mul i32 %29, 24128, !dbg !30
  %83 = add i32 %79, %81, !dbg !31
  %84 = add i32 %80, %82, !dbg !31
  %85 = sext i32 %83 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !32
  %87 = sext i32 %84 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !32
  %89 = extractelement <2 x i1> %76, i64 1, !dbg !33
  %90 = and i1 %24, %89, !dbg !33
  %91 = extractelement <2 x i1> %76, i64 0, !dbg !33
  %92 = and i1 %26, %91, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #5, !dbg !34
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #5, !dbg !34
  %95 = icmp sgt i32 %30, 376, !dbg !18
  %96 = icmp sgt i32 %33, 376, !dbg !18
  %97 = mul i32 %28, 768, !dbg !35
  %98 = mul i32 %29, 768, !dbg !35
  %99 = or disjoint i32 %15, -24128, !dbg !36
  %100 = add nsw i32 %99, %77, !dbg !37
  %101 = add i32 %100, %97, !dbg !38
  %102 = add nsw i32 %99, %78, !dbg !37
  %103 = add i32 %102, %98, !dbg !38
  %104 = sext i32 %101 to i64, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !39
  %106 = sext i32 %103 to i64, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !39
  %108 = and i1 %24, %95, !dbg !40
  %109 = and i1 %26, %96, !dbg !40
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #5, !dbg !41
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #5, !dbg !41
  %112 = fadd float %50, 0x3EE4F8B580000000, !dbg !42
  %113 = fadd float %55, 0x3EE4F8B580000000, !dbg !42
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i19 = icmp eq i32 %120, 0, !dbg !43
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i22 = icmp eq i32 %121, 0, !dbg !43
  br i1 %.not.i19, label %127, label %122, !dbg !43

122:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %125, label %123, !dbg !43

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #5, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #5, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

127:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i22, label %130, label %128, !dbg !43

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #5, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #5, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

__nv_sqrtf.exit23:                                ; preds = %123, %125, %128, %130
  %.0.i21 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !43
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i39 = icmp eq i32 %138, 0, !dbg !43
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i42 = icmp eq i32 %139, 0, !dbg !43
  br i1 %.not.i39, label %145, label %140, !dbg !43

140:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i42, label %143, label %141, !dbg !43

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #5, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #5, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

145:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i42, label %148, label %146, !dbg !43

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #5, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #5, !dbg !43
  br label %__nv_sqrtf.exit43, !dbg !43

__nv_sqrtf.exit43:                                ; preds = %141, %143, %146, %148
  %.0.i41 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !43
  %150 = shufflevector <2 x i1> %76, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %151 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !41
  %153 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !20
  %154 = insertelement <2 x i32> %153, i32 %39, i64 1, !dbg !20
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !20
  %156 = shufflevector <2 x float> %155, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !20
  %157 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !41
  %159 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !41
  %161 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !41
  %163 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !41
  %165 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !41
  %167 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %168 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !41
  %169 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %170 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !41
  %171 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !26
  %172 = insertelement <2 x i32> %171, i32 %71, i64 1, !dbg !26
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !26
  %174 = shufflevector <2 x float> %173, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %175 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !24
  %176 = insertelement <2 x i32> %175, i32 %61, i64 1, !dbg !24
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !24
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !24
  %179 = and i32 %12, 31, !dbg !12
  %180 = or disjoint i32 %11, %179, !dbg !14
  %181 = icmp slt i32 %180, 1556, !dbg !15
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #5, !dbg !44
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i41) #5, !dbg !44
  %184 = insertelement <8 x i32> poison, i32 %151, i64 0, !dbg !45
  %185 = insertelement <8 x i32> %184, i32 %157, i64 1, !dbg !45
  %186 = insertelement <8 x i32> %185, i32 %159, i64 2, !dbg !45
  %187 = insertelement <8 x i32> %186, i32 %161, i64 3, !dbg !45
  %188 = insertelement <8 x i32> %187, i32 %163, i64 4, !dbg !45
  %189 = insertelement <8 x i32> %188, i32 %165, i64 5, !dbg !45
  %190 = insertelement <8 x i32> %189, i32 %167, i64 6, !dbg !45
  %191 = insertelement <8 x i32> %190, i32 %169, i64 7, !dbg !45
  %192 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !45
  %193 = insertelement <8 x i32> %192, i32 %158, i64 1, !dbg !45
  %194 = insertelement <8 x i32> %193, i32 %160, i64 2, !dbg !45
  %195 = insertelement <8 x i32> %194, i32 %162, i64 3, !dbg !45
  %196 = insertelement <8 x i32> %195, i32 %164, i64 4, !dbg !45
  %197 = insertelement <8 x i32> %196, i32 %166, i64 5, !dbg !45
  %198 = insertelement <8 x i32> %197, i32 %168, i64 6, !dbg !45
  %199 = insertelement <8 x i32> %198, i32 %170, i64 7, !dbg !45
  %200 = select <8 x i1> %150, <8 x i32> %191, <8 x i32> %199, !dbg !45
  %201 = bitcast <8 x i32> %200 to <8 x float>, !dbg !45
  %202 = fsub <8 x float> %201, %156, !dbg !46
  %203 = insertelement <8 x float> poison, float %183, i64 0, !dbg !47
  %204 = insertelement <8 x float> %203, float %182, i64 1, !dbg !47
  %205 = shufflevector <8 x float> %204, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !47
  %206 = fmul <8 x float> %202, %205, !dbg !47
  %207 = fmul <8 x float> %206, %178, !dbg !48
  %208 = fadd <8 x float> %207, %174, !dbg !49
  %209 = fcmp olt <8 x float> %208, zeroinitializer, !dbg !50
  %210 = extractelement <8 x i1> %209, i64 7, !dbg !54
  %211 = extractelement <8 x float> %208, i64 7, !dbg !54
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !54
  %213 = extractelement <8 x i1> %209, i64 6, !dbg !54
  %214 = extractelement <8 x float> %208, i64 6, !dbg !54
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !54
  %216 = extractelement <8 x i1> %209, i64 5, !dbg !54
  %217 = extractelement <8 x float> %208, i64 5, !dbg !54
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !54
  %219 = extractelement <8 x i1> %209, i64 4, !dbg !54
  %220 = extractelement <8 x float> %208, i64 4, !dbg !54
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !54
  %222 = extractelement <8 x i1> %209, i64 3, !dbg !54
  %223 = extractelement <8 x float> %208, i64 3, !dbg !54
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !54
  %225 = extractelement <8 x i1> %209, i64 2, !dbg !54
  %226 = extractelement <8 x float> %208, i64 2, !dbg !54
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !54
  %228 = extractelement <8 x i1> %209, i64 1, !dbg !54
  %229 = extractelement <8 x float> %208, i64 1, !dbg !54
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !54
  %231 = extractelement <8 x i1> %209, i64 0, !dbg !54
  %232 = extractelement <8 x float> %208, i64 0, !dbg !54
  %233 = select i1 %231, float 0.000000e+00, float %232, !dbg !54
  %234 = fadd float %212, %215, !dbg !55
  %235 = fadd float %218, %234, !dbg !55
  %236 = fadd float %221, %235, !dbg !55
  %237 = select i1 %24, float %236, float 0.000000e+00, !dbg !55
  %238 = fadd float %224, %227, !dbg !55
  %239 = fadd float %230, %238, !dbg !55
  %240 = fadd float %233, %239, !dbg !55
  %241 = select i1 %26, float %240, float 0.000000e+00, !dbg !55
  %242 = bitcast float %237 to i32, !dbg !60
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !60
  %244 = bitcast i32 %243 to float, !dbg !60
  %245 = fadd float %237, %244, !dbg !55
  %246 = bitcast float %245 to i32, !dbg !60
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 4, i32 31), !dbg !60
  %248 = bitcast i32 %247 to float, !dbg !60
  %249 = fadd float %245, %248, !dbg !55
  %250 = bitcast float %249 to i32, !dbg !60
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !60
  %252 = bitcast i32 %251 to float, !dbg !60
  %253 = fadd float %249, %252, !dbg !55
  %254 = bitcast float %253 to i32, !dbg !60
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !60
  %256 = bitcast i32 %255 to float, !dbg !60
  %257 = fadd float %253, %256, !dbg !55
  %258 = bitcast float %241 to i32, !dbg !60
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !60
  %260 = bitcast i32 %259 to float, !dbg !60
  %261 = fadd float %241, %260, !dbg !55
  %262 = bitcast float %261 to i32, !dbg !60
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !60
  %264 = bitcast i32 %263 to float, !dbg !60
  %265 = fadd float %261, %264, !dbg !55
  %266 = bitcast float %265 to i32, !dbg !60
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 2, i32 31), !dbg !60
  %268 = bitcast i32 %267 to float, !dbg !60
  %269 = fadd float %265, %268, !dbg !55
  %270 = bitcast float %269 to i32, !dbg !60
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 1, i32 31), !dbg !60
  %272 = bitcast i32 %271 to float, !dbg !60
  %273 = fadd float %269, %272, !dbg !55
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !61
  %275 = bitcast float %257 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #5, !dbg !61
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !61
  %277 = bitcast float %273 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !61
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !61
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float 6.400000e+01) #5, !dbg !61
  %281 = shl i32 %23, 6, !dbg !62
  %282 = shl i32 %25, 6, !dbg !62
  %283 = or disjoint i32 %281, %15, !dbg !63
  %284 = or disjoint i32 %282, %15, !dbg !63
  %285 = sext i32 %283 to i64, !dbg !64
  %286 = getelementptr float, ptr addrspace(1) %7, i64 %285, !dbg !64
  %287 = sext i32 %284 to i64, !dbg !64
  %288 = getelementptr float, ptr addrspace(1) %7, i64 %287, !dbg !64
  %289 = extractelement <8 x i32> %200, i64 4, !dbg !65
  %290 = extractelement <8 x i32> %200, i64 5, !dbg !65
  %291 = extractelement <8 x i32> %200, i64 6, !dbg !65
  %292 = extractelement <8 x i32> %200, i64 7, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %291, i32 %290, i32 %289, ptr addrspace(1) %286, i1 %24) #5, !dbg !65
  %293 = extractelement <8 x i32> %200, i64 0, !dbg !65
  %294 = extractelement <8 x i32> %200, i64 1, !dbg !65
  %295 = extractelement <8 x i32> %200, i64 2, !dbg !65
  %296 = extractelement <8 x i32> %200, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %295, i32 %294, i32 %293, ptr addrspace(1) %288, i1 %26) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %297 = sext i32 %180 to i64, !dbg !67
  %298 = getelementptr float, ptr addrspace(1) %0, i64 %297, !dbg !67
  %299 = and i32 %12, 224, !dbg !68
  %300 = icmp eq i32 %299, 0, !dbg !68
  %301 = bitcast float %280 to i32, !dbg !68
  %302 = and i1 %300, %181, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %301, ptr addrspace(1) %298, i1 %302) #5, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw3gxgbzjbku56horc7j7citrdh5al4hjp7vjzktnr7qdycf5y6w.py", directory: "inductor_cache/w3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_cat_mean_relu_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 26, column: 34, scope: !7)
!14 = !DILocation(line: 24, column: 23, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 43, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 36, scope: !7)
!27 = !DILocation(line: 41, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 39, scope: !7)
!29 = !DILocation(line: 42, column: 35, scope: !7)
!30 = !DILocation(line: 42, column: 51, scope: !7)
!31 = !DILocation(line: 42, column: 45, scope: !7)
!32 = !DILocation(line: 42, column: 30, scope: !7)
!33 = !DILocation(line: 42, column: 63, scope: !7)
!34 = !DILocation(line: 42, column: 56, scope: !7)
!35 = !DILocation(line: 46, column: 58, scope: !7)
!36 = !DILocation(line: 46, column: 35, scope: !7)
!37 = !DILocation(line: 46, column: 39, scope: !7)
!38 = !DILocation(line: 46, column: 54, scope: !7)
!39 = !DILocation(line: 46, column: 30, scope: !7)
!40 = !DILocation(line: 46, column: 70, scope: !7)
!41 = !DILocation(line: 46, column: 63, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 27, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 33, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 60, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 256, column: 15, scope: !56, inlinedAt: !59)
!56 = distinct !DILexicalBlockFile(scope: !58, file: !57, discriminator: 0)
!57 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!58 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!59 = !DILocation(line: 63, column: 26, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !58, inlinedAt: !59)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 33, scope: !7)
!63 = !DILocation(line: 66, column: 30, scope: !7)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 45, scope: !7)
!66 = !DILocation(line: 67, column: 4, scope: !7)
!67 = !DILocation(line: 68, column: 28, scope: !7)
!68 = !DILocation(line: 68, column: 40, scope: !7)
!69 = !DILocation(line: 68, column: 4, scope: !7)
