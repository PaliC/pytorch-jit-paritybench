; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 92160, !dbg !14
  %18 = icmp slt i32 %13, 92160, !dbg !14
  %19 = insertelement <8 x i32> poison, i32 %16, i64 0, !dbg !15
  %20 = insertelement <8 x i32> %19, i32 %15, i64 1, !dbg !15
  %21 = insertelement <8 x i32> %20, i32 %14, i64 2, !dbg !15
  %22 = insertelement <8 x i32> %21, i32 %13, i64 3, !dbg !15
  %23 = insertelement <8 x i32> %22, i32 %12, i64 4, !dbg !15
  %24 = insertelement <8 x i32> %23, i32 %11, i64 5, !dbg !15
  %25 = insertelement <8 x i32> %24, i32 %10, i64 6, !dbg !15
  %26 = insertelement <8 x i32> %25, i32 %9, i64 7, !dbg !15
  %.frozen = freeze <8 x i32> %26, !dbg !15
  %27 = sdiv <8 x i32> %.frozen, splat (i32 9), !dbg !15
  %28 = srem <8 x i32> %27, splat (i32 10), !dbg !16
  %29 = mul <8 x i32> %27, splat (i32 9), !dbg !17
  %.decomposed = sub <8 x i32> %.frozen, %29, !dbg !17
  %30 = sdiv i32 %9, 90, !dbg !18
  %31 = sdiv i32 %11, 90, !dbg !18
  %32 = sdiv i32 %13, 90, !dbg !18
  %33 = sdiv i32 %15, 90, !dbg !18
  %34 = icmp sgt <8 x i32> %.decomposed, zeroinitializer, !dbg !19
  %35 = add nsw <8 x i32> %28, splat (i32 -1), !dbg !20
  %36 = icmp ult <8 x i32> %35, splat (i32 8), !dbg !20
  %37 = and <8 x i1> %34, %36, !dbg !21
  %38 = extractelement <8 x i1> %37, i64 7, !dbg !21
  %39 = and <8 x i1> %34, %36, !dbg !21
  %40 = extractelement <8 x i1> %39, i64 6, !dbg !21
  %41 = and <8 x i1> %34, %36, !dbg !21
  %42 = extractelement <8 x i1> %41, i64 5, !dbg !21
  %43 = and <8 x i1> %34, %36, !dbg !21
  %44 = extractelement <8 x i1> %43, i64 4, !dbg !21
  %45 = and <8 x i1> %34, %36, !dbg !21
  %46 = extractelement <8 x i1> %45, i64 3, !dbg !21
  %47 = and <8 x i1> %34, %36, !dbg !21
  %48 = extractelement <8 x i1> %47, i64 2, !dbg !21
  %49 = and <8 x i1> %34, %36, !dbg !21
  %50 = extractelement <8 x i1> %49, i64 1, !dbg !21
  %51 = and <8 x i1> %34, %36, !dbg !21
  %52 = extractelement <8 x i1> %51, i64 0, !dbg !21
  %53 = extractelement <8 x i32> %28, i64 7, !dbg !22
  %54 = shl nsw i32 %53, 3, !dbg !22
  %55 = extractelement <8 x i32> %28, i64 6, !dbg !22
  %56 = shl nsw i32 %55, 3, !dbg !22
  %57 = extractelement <8 x i32> %28, i64 5, !dbg !22
  %58 = shl nsw i32 %57, 3, !dbg !22
  %59 = extractelement <8 x i32> %28, i64 4, !dbg !22
  %60 = shl nsw i32 %59, 3, !dbg !22
  %61 = extractelement <8 x i32> %28, i64 3, !dbg !22
  %62 = shl nsw i32 %61, 3, !dbg !22
  %63 = extractelement <8 x i32> %28, i64 2, !dbg !22
  %64 = shl nsw i32 %63, 3, !dbg !22
  %65 = extractelement <8 x i32> %28, i64 1, !dbg !22
  %66 = shl nsw i32 %65, 3, !dbg !22
  %67 = extractelement <8 x i32> %28, i64 0, !dbg !22
  %68 = shl nsw i32 %67, 3, !dbg !22
  %69 = shl nsw i32 %30, 6, !dbg !23
  %70 = shl nsw i32 %31, 6, !dbg !23
  %71 = shl nsw i32 %32, 6, !dbg !23
  %72 = shl nsw i32 %33, 6, !dbg !23
  %73 = add nsw i32 %69, -9, !dbg !24
  %74 = extractelement <8 x i32> %.decomposed, i64 7, !dbg !25
  %75 = add nsw i32 %73, %74, !dbg !25
  %76 = add nsw i32 %75, %54, !dbg !26
  %77 = extractelement <8 x i32> %.decomposed, i64 6, !dbg !25
  %78 = add nsw i32 %73, %77, !dbg !25
  %79 = add nsw i32 %78, %56, !dbg !26
  %80 = add nsw i32 %70, -9, !dbg !24
  %81 = extractelement <8 x i32> %.decomposed, i64 5, !dbg !25
  %82 = add nsw i32 %80, %81, !dbg !25
  %83 = add nsw i32 %82, %58, !dbg !26
  %84 = extractelement <8 x i32> %.decomposed, i64 4, !dbg !25
  %85 = add nsw i32 %80, %84, !dbg !25
  %86 = add nsw i32 %85, %60, !dbg !26
  %87 = add nsw i32 %71, -9, !dbg !24
  %88 = extractelement <8 x i32> %.decomposed, i64 3, !dbg !25
  %89 = add nsw i32 %87, %88, !dbg !25
  %90 = add nsw i32 %89, %62, !dbg !26
  %91 = extractelement <8 x i32> %.decomposed, i64 2, !dbg !25
  %92 = add nsw i32 %87, %91, !dbg !25
  %93 = add nsw i32 %92, %64, !dbg !26
  %94 = add nsw i32 %72, -9, !dbg !24
  %95 = extractelement <8 x i32> %.decomposed, i64 1, !dbg !25
  %96 = add nsw i32 %94, %95, !dbg !25
  %97 = add nsw i32 %96, %66, !dbg !26
  %98 = extractelement <8 x i32> %.decomposed, i64 0, !dbg !25
  %99 = add nsw i32 %94, %98, !dbg !25
  %100 = add nsw i32 %99, %68, !dbg !26
  %101 = sext i32 %76 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !27
  %103 = sext i32 %79 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !27
  %105 = sext i32 %83 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !27
  %107 = sext i32 %86 to i64, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !27
  %109 = sext i32 %90 to i64, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !27
  %111 = sext i32 %93 to i64, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !27
  %113 = sext i32 %97 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !27
  %115 = sext i32 %100 to i64, !dbg !27
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !27
  %117 = and i1 %17, %38, !dbg !28
  %118 = and i1 %40, %17, !dbg !28
  %119 = and i1 %42, %17, !dbg !28
  %120 = and i1 %44, %17, !dbg !28
  %121 = and i1 %18, %46, !dbg !28
  %122 = and i1 %18, %48, !dbg !28
  %123 = and i1 %18, %50, !dbg !28
  %124 = and i1 %18, %52, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %117, i32 0, i1 %117) #1, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %118, i32 0, i1 %118) #1, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %119, i32 0, i1 %119) #1, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %120, i32 0, i1 %120) #1, !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %121, i32 0, i1 %121) #1, !dbg !29
  %134 = bitcast i32 %133 to float, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %122, i32 0, i1 %122) #1, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %123, i32 0, i1 %123) #1, !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %124, i32 0, i1 %124) #1, !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = fcmp olt float %126, 0.000000e+00, !dbg !30
  %142 = fcmp olt float %128, 0.000000e+00, !dbg !30
  %143 = fcmp olt float %130, 0.000000e+00, !dbg !30
  %144 = fcmp olt float %132, 0.000000e+00, !dbg !30
  %145 = fcmp olt float %134, 0.000000e+00, !dbg !30
  %146 = fcmp olt float %136, 0.000000e+00, !dbg !30
  %147 = fcmp olt float %138, 0.000000e+00, !dbg !30
  %148 = fcmp olt float %140, 0.000000e+00, !dbg !30
  %149 = select i1 %141, float 0.000000e+00, float %126, !dbg !34
  %150 = select i1 %142, float 0.000000e+00, float %128, !dbg !34
  %151 = select i1 %143, float 0.000000e+00, float %130, !dbg !34
  %152 = select i1 %144, float 0.000000e+00, float %132, !dbg !34
  %153 = select i1 %145, float 0.000000e+00, float %134, !dbg !34
  %154 = select i1 %146, float 0.000000e+00, float %136, !dbg !34
  %155 = select i1 %147, float 0.000000e+00, float %138, !dbg !34
  %156 = select i1 %148, float 0.000000e+00, float %140, !dbg !34
  %157 = sext i32 %9 to i64, !dbg !35
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !35
  %159 = sext i32 %13 to i64, !dbg !35
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %159, !dbg !35
  %161 = bitcast float %149 to i32, !dbg !36
  %162 = select i1 %38, i32 %161, i32 0, !dbg !37
  %163 = bitcast float %150 to i32, !dbg !36
  %164 = select i1 %40, i32 %163, i32 0, !dbg !37
  %165 = bitcast float %151 to i32, !dbg !36
  %166 = select i1 %42, i32 %165, i32 0, !dbg !37
  %167 = bitcast float %152 to i32, !dbg !36
  %168 = select i1 %44, i32 %167, i32 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %162, i32 %164, i32 %166, i32 %168, ptr addrspace(1) %158, i1 %17) #1, !dbg !36
  %169 = bitcast float %153 to i32, !dbg !36
  %170 = select i1 %46, i32 %169, i32 0, !dbg !37
  %171 = bitcast float %154 to i32, !dbg !36
  %172 = select i1 %48, i32 %171, i32 0, !dbg !37
  %173 = bitcast float %155 to i32, !dbg !36
  %174 = select i1 %50, i32 %173, i32 0, !dbg !37
  %175 = bitcast float %156 to i32, !dbg !36
  %176 = select i1 %52, i32 %175, i32 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %172, i32 %174, i32 %176, ptr addrspace(1) %160, i1 %18) #1, !dbg !36
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c26u6lehas5fz43fgoslaul2o2vn557pp3fjtpdi6kal7kq33dpm.py", directory: "inductor_cache/26")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_34", linkageName: "triton_poi_fused_constant_pad_nd_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 18, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 44, scope: !7)
!23 = !DILocation(line: 37, column: 52, scope: !7)
!24 = !DILocation(line: 37, column: 37, scope: !7)
!25 = !DILocation(line: 37, column: 42, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 64, scope: !7)
!29 = !DILocation(line: 37, column: 57, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 39, column: 42, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 42, column: 37, scope: !7)
!37 = !DILocation(line: 41, column: 34, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
