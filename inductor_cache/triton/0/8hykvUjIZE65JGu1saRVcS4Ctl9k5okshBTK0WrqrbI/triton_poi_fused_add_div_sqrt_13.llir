; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = or disjoint i32 %13, 256, !dbg !13
  %16 = or disjoint i32 %13, 384, !dbg !13
  %17 = icmp slt i32 %12, 512, !dbg !14
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = or disjoint i32 %23, 1, !dbg !17
  %25 = icmp slt i32 %23, 1024, !dbg !18
  %26 = icmp slt i32 %24, 1024, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %27 = sdiv i32 %.frozen, 128, !dbg !19
  %28 = mul i32 %27, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = sdiv i32 %13, 128, !dbg !19
  %30 = sdiv i32 %14, 128, !dbg !19
  %31 = sdiv i32 %15, 128, !dbg !19
  %32 = sdiv i32 %16, 128, !dbg !19
  %33 = shl i32 %22, 8, !dbg !21
  %34 = shl i32 %24, 7, !dbg !21
  %35 = shl i32 %27, 17, !dbg !22
  %36 = add i32 %35, %.decomposed, !dbg !23
  %37 = add i32 %36, %33, !dbg !24
  %38 = add i32 %36, %34, !dbg !24
  %39 = sext i32 %37 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = sext i32 %38 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = and i1 %25, %17, !dbg !26
  %44 = and i1 %17, %26, !dbg !26
  %45 = and i1 %25, %18, !dbg !26
  %46 = and i1 %19, %25, !dbg !26
  %47 = and i1 %20, %25, !dbg !26
  %48 = and i1 %21, %25, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #4, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #4, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %59 = shl i32 %8, 3, !dbg !27
  %60 = and i32 %59, 1016, !dbg !27
  %61 = shl i32 %8, 1, !dbg !27
  %62 = and i32 %61, 254, !dbg !27
  %63 = lshr exact i32 %60, 1, !dbg !27
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !27
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %60, !dbg !27
  %66 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #4, !dbg !27
  %67 = or disjoint i32 %60, 2, !dbg !27
  %68 = lshr exact i32 %67, 1, !dbg !27
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !27
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67, !dbg !27
  %71 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #4, !dbg !27
  %72 = or disjoint i32 %60, 4, !dbg !27
  %73 = lshr exact i32 %72, 1, !dbg !27
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73, !dbg !27
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %72, !dbg !27
  %76 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !27
  %77 = or disjoint i32 %60, 6, !dbg !27
  %78 = lshr exact i32 %77, 1, !dbg !27
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !27
  %80 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %77, !dbg !27
  %81 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !27
  %82 = or disjoint i32 %60, 1, !dbg !27
  %83 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %82, !dbg !27
  %84 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #4, !dbg !27
  %85 = or disjoint i32 %60, 3, !dbg !27
  %86 = lshr i32 %85, 1, !dbg !27
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %86, !dbg !27
  %88 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %85, !dbg !27
  %89 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #4, !dbg !27
  %90 = or disjoint i32 %60, 5, !dbg !27
  %91 = lshr i32 %90, 1, !dbg !27
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91, !dbg !27
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %90, !dbg !27
  %94 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #4, !dbg !27
  %95 = or disjoint i32 %60, 7, !dbg !27
  %96 = lshr i32 %95, 1, !dbg !27
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !27
  %98 = getelementptr inbounds float, ptr addrspace(3) %97, i32 %95, !dbg !27
  %99 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %100 = lshr exact i32 %62, 1, !dbg !27
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !27
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %62, !dbg !27
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !27
  %104 = or disjoint i32 %62, 1, !dbg !27
  %105 = getelementptr float, ptr addrspace(3) %101, i32 %104, !dbg !27
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !27
  %107 = or disjoint i32 %62, 256, !dbg !27
  %108 = lshr exact i32 %107, 1, !dbg !27
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !27
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !27
  %111 = load float, ptr addrspace(3) %110, align 4, !dbg !27
  %112 = or disjoint i32 %62, 257, !dbg !27
  %113 = lshr i32 %112, 1, !dbg !27
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !27
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !27
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !27
  %117 = or disjoint i32 %62, 512, !dbg !27
  %118 = lshr exact i32 %117, 1, !dbg !27
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !27
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !27
  %121 = load float, ptr addrspace(3) %120, align 4, !dbg !27
  %122 = or disjoint i32 %62, 513, !dbg !27
  %123 = lshr i32 %122, 1, !dbg !27
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !27
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !27
  %126 = load float, ptr addrspace(3) %125, align 4, !dbg !27
  %127 = or disjoint i32 %62, 768, !dbg !27
  %128 = lshr exact i32 %127, 1, !dbg !27
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !27
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !27
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !27
  %132 = or disjoint i32 %62, 769, !dbg !27
  %133 = lshr i32 %132, 1, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !27
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !27
  %136 = load float, ptr addrspace(3) %135, align 4, !dbg !27
  %137 = shl i32 %29, 10, !dbg !28
  %138 = shl i32 %30, 10, !dbg !28
  %139 = shl i32 %31, 10, !dbg !28
  %140 = shl i32 %32, 10, !dbg !28
  %141 = add i32 %137, %23, !dbg !29
  %142 = add i32 %23, %138, !dbg !29
  %143 = add i32 %23, %139, !dbg !29
  %144 = add i32 %23, %140, !dbg !29
  %145 = sext i32 %141 to i64, !dbg !30
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !30
  %147 = sext i32 %142 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !30
  %149 = sext i32 %143 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !30
  %151 = sext i32 %144 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !30
  %153 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %146, i1 %45) #4, !dbg !31
  %154 = extractvalue { i32, i32 } %153, 0, !dbg !31
  %155 = extractvalue { i32, i32 } %153, 1, !dbg !31
  %156 = bitcast i32 %154 to float, !dbg !31
  %157 = bitcast i32 %155 to float, !dbg !31
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %148, i1 %46) #4, !dbg !31
  %159 = extractvalue { i32, i32 } %158, 0, !dbg !31
  %160 = extractvalue { i32, i32 } %158, 1, !dbg !31
  %161 = bitcast i32 %159 to float, !dbg !31
  %162 = bitcast i32 %160 to float, !dbg !31
  %163 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %150, i1 %47) #4, !dbg !31
  %164 = extractvalue { i32, i32 } %163, 0, !dbg !31
  %165 = extractvalue { i32, i32 } %163, 1, !dbg !31
  %166 = bitcast i32 %164 to float, !dbg !31
  %167 = bitcast i32 %165 to float, !dbg !31
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %152, i1 %48) #4, !dbg !31
  %169 = extractvalue { i32, i32 } %168, 0, !dbg !31
  %170 = extractvalue { i32, i32 } %168, 1, !dbg !31
  %171 = bitcast i32 %169 to float, !dbg !31
  %172 = bitcast i32 %170 to float, !dbg !31
  %173 = fadd float %156, 0x3E112E0BE0000000, !dbg !32
  %174 = fadd float %157, 0x3E112E0BE0000000, !dbg !32
  %175 = fadd float %161, 0x3E112E0BE0000000, !dbg !32
  %176 = fadd float %162, 0x3E112E0BE0000000, !dbg !32
  %177 = fadd float %166, 0x3E112E0BE0000000, !dbg !32
  %178 = fadd float %167, 0x3E112E0BE0000000, !dbg !32
  %179 = fadd float %171, 0x3E112E0BE0000000, !dbg !32
  %180 = fadd float %172, 0x3E112E0BE0000000, !dbg !32
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %181, 0, !dbg !33
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %182, 0, !dbg !33
  br i1 %.not.i, label %188, label %183, !dbg !33

183:                                              ; preds = %5
  br i1 %.not1.i, label %186, label %184, !dbg !33

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

188:                                              ; preds = %5
  br i1 %.not1.i, label %191, label %189, !dbg !33

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %184, %186, %189, %191
  %.0.i = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !33
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %193, 0, !dbg !33
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i4 = icmp eq i32 %194, 0, !dbg !33
  br i1 %.not.i1, label %200, label %195, !dbg !33

195:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %198, label %196, !dbg !33

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %174) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %174) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

200:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %203, label %201, !dbg !33

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %174) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %174) #4, !dbg !33
  br label %__nv_sqrtf.exit5, !dbg !33

__nv_sqrtf.exit5:                                 ; preds = %196, %198, %201, %203
  %.0.i3 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !33
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i6 = icmp eq i32 %205, 0, !dbg !33
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i9 = icmp eq i32 %206, 0, !dbg !33
  br i1 %.not.i6, label %212, label %207, !dbg !33

207:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %210, label %208, !dbg !33

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %175) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %175) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

212:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %215, label %213, !dbg !33

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %175) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %175) #4, !dbg !33
  br label %__nv_sqrtf.exit10, !dbg !33

__nv_sqrtf.exit10:                                ; preds = %208, %210, %213, %215
  %.0.i8 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !33
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i11 = icmp eq i32 %217, 0, !dbg !33
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i14 = icmp eq i32 %218, 0, !dbg !33
  br i1 %.not.i11, label %224, label %219, !dbg !33

219:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %222, label %220, !dbg !33

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %176) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %176) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

224:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %227, label %225, !dbg !33

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %176) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %176) #4, !dbg !33
  br label %__nv_sqrtf.exit15, !dbg !33

__nv_sqrtf.exit15:                                ; preds = %220, %222, %225, %227
  %.0.i13 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !33
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i16 = icmp eq i32 %229, 0, !dbg !33
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i19 = icmp eq i32 %230, 0, !dbg !33
  br i1 %.not.i16, label %236, label %231, !dbg !33

231:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %234, label %232, !dbg !33

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

236:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %239, label %237, !dbg !33

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #4, !dbg !33
  br label %__nv_sqrtf.exit20, !dbg !33

__nv_sqrtf.exit20:                                ; preds = %232, %234, %237, %239
  %.0.i18 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !33
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i21 = icmp eq i32 %241, 0, !dbg !33
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i24 = icmp eq i32 %242, 0, !dbg !33
  br i1 %.not.i21, label %248, label %243, !dbg !33

243:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %246, label %244, !dbg !33

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

248:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %251, label %249, !dbg !33

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #4, !dbg !33
  br label %__nv_sqrtf.exit25, !dbg !33

__nv_sqrtf.exit25:                                ; preds = %244, %246, %249, %251
  %.0.i23 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !33
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i26 = icmp eq i32 %253, 0, !dbg !33
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i29 = icmp eq i32 %254, 0, !dbg !33
  br i1 %.not.i26, label %260, label %255, !dbg !33

255:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %258, label %256, !dbg !33

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

260:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %263, label %261, !dbg !33

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !33
  br label %__nv_sqrtf.exit30, !dbg !33

__nv_sqrtf.exit30:                                ; preds = %256, %258, %261, %263
  %.0.i28 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !33
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i31 = icmp eq i32 %265, 0, !dbg !33
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i34 = icmp eq i32 %266, 0, !dbg !33
  br i1 %.not.i31, label %272, label %267, !dbg !33

267:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %270, label %268, !dbg !33

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %180) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %180) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

272:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %275, label %273, !dbg !33

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %180) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %180) #4, !dbg !33
  br label %__nv_sqrtf.exit35, !dbg !33

__nv_sqrtf.exit35:                                ; preds = %268, %270, %273, %275
  %.0.i33 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !33
  %277 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !34
  %278 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !34
  %279 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !34
  %280 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !34
  %281 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !34
  %282 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !34
  %283 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !34
  %284 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !34
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %277) #4, !dbg !35
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %278) #4, !dbg !35
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %279) #4, !dbg !35
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %280) #4, !dbg !35
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %281) #4, !dbg !35
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %282) #4, !dbg !35
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %283) #4, !dbg !35
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %284) #4, !dbg !35
  %293 = shl i32 %13, 10, !dbg !36
  %294 = shl i32 %14, 10, !dbg !36
  %295 = shl i32 %15, 10, !dbg !36
  %296 = shl i32 %16, 10, !dbg !36
  %297 = add i32 %293, %23, !dbg !37
  %298 = add i32 %23, %294, !dbg !37
  %299 = add i32 %23, %295, !dbg !37
  %300 = add i32 %23, %296, !dbg !37
  %301 = sext i32 %297 to i64, !dbg !38
  %302 = getelementptr float, ptr addrspace(1) %2, i64 %301, !dbg !38
  %303 = sext i32 %298 to i64, !dbg !38
  %304 = getelementptr float, ptr addrspace(1) %2, i64 %303, !dbg !38
  %305 = sext i32 %299 to i64, !dbg !38
  %306 = getelementptr float, ptr addrspace(1) %2, i64 %305, !dbg !38
  %307 = sext i32 %300 to i64, !dbg !38
  %308 = getelementptr float, ptr addrspace(1) %2, i64 %307, !dbg !38
  %309 = bitcast float %285 to i32, !dbg !39
  %310 = bitcast float %286 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %309, i32 %310, ptr addrspace(1) %302, i1 %45) #4, !dbg !39
  %311 = bitcast float %287 to i32, !dbg !39
  %312 = bitcast float %288 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %311, i32 %312, ptr addrspace(1) %304, i1 %46) #4, !dbg !39
  %313 = bitcast float %289 to i32, !dbg !39
  %314 = bitcast float %290 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %313, i32 %314, ptr addrspace(1) %306, i1 %47) #4, !dbg !39
  %315 = bitcast float %291 to i32, !dbg !39
  %316 = bitcast float %292 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %315, i32 %316, ptr addrspace(1) %308, i1 %48) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cszwukoikas5ylhcvteoimxoz4c6dcc6kaccztylhanagbhoi73e.py", directory: "inductor_cache/sz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 64, scope: !7)
!27 = !DILocation(line: 32, column: 56, scope: !7)
!28 = !DILocation(line: 33, column: 40, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 35, scope: !7)
!37 = !DILocation(line: 40, column: 30, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 4, scope: !7)
