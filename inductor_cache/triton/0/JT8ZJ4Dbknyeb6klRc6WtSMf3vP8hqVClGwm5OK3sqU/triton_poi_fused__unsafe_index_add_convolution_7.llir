; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %18 = sdiv i32 %16, 16, !dbg !15
  %19 = srem i32 %18, 4, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen, 4, !dbg !17
  %21 = srem i32 %20, 4, !dbg !18
  %22 = mul i32 %20, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %22, !dbg !19
  %23 = sext i32 %16 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %17) #1, !dbg !21
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %28 = sext i32 %19 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %17) #1, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %17) #1, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !24
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #1, !dbg !25
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !25
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !25
  %36 = sext i32 %21 to i64, !dbg !26
  %37 = getelementptr i64, ptr addrspace(1) %3, i64 %36, !dbg !26
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %17) #1, !dbg !27
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %17) #1, !dbg !27
  %40 = sext i32 %.decomposed to i64, !dbg !28
  %41 = getelementptr i64, ptr addrspace(1) %3, i64 %40, !dbg !28
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 %17) #1, !dbg !29
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !29
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #1, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %17) #1, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #1, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #1, !dbg !33
  %53 = lshr i64 %38, 62, !dbg !34
  %54 = and i64 %53, 2, !dbg !34
  %55 = add i64 %54, %38, !dbg !34
  %56 = lshr i64 %43, 62, !dbg !35
  %57 = and i64 %56, 2, !dbg !35
  %58 = lshr i64 %44, 62, !dbg !35
  %59 = and i64 %58, 2, !dbg !35
  %60 = shl i64 %55, 1, !dbg !36
  %61 = shl nsw i32 %18, 2, !dbg !37
  %62 = sext i32 %61 to i64, !dbg !38
  %63 = add i64 %60, %62, !dbg !35
  %64 = add i64 %63, %43, !dbg !39
  %65 = add i64 %64, %57, !dbg !38
  %66 = add i64 %63, %44, !dbg !39
  %67 = add i64 %66, %59, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #1, !dbg !41
  %71 = bitcast i32 %70 to float, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %17) #1, !dbg !41
  %73 = bitcast i32 %72 to float, !dbg !41
  %74 = fadd float %47, %71, !dbg !42
  %75 = fadd float %49, %73, !dbg !42
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %67, !dbg !43
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %17) #1, !dbg !44
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %17) #1, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %8, i64 %65, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %8, i64 %67, !dbg !45
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %17) #1, !dbg !46
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %17) #1, !dbg !46
  %84 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !21
  %85 = insertelement <2 x i32> %84, i32 %51, i64 1, !dbg !21
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !21
  %87 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !23
  %88 = insertelement <2 x i32> %87, i32 %78, i64 1, !dbg !23
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !23
  %90 = fadd <2 x float> %86, %89, !dbg !47
  %91 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !25
  %92 = insertelement <2 x i32> %91, i32 %82, i64 1, !dbg !25
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !25
  %94 = fadd <2 x float> %90, %93, !dbg !48
  %95 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !21
  %96 = insertelement <2 x i32> %95, i32 %52, i64 1, !dbg !21
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !21
  %98 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !23
  %99 = insertelement <2 x i32> %98, i32 %79, i64 1, !dbg !23
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !23
  %101 = fadd <2 x float> %97, %100, !dbg !47
  %102 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !25
  %103 = insertelement <2 x i32> %102, i32 %83, i64 1, !dbg !25
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !25
  %105 = fadd <2 x float> %101, %104, !dbg !48
  %106 = extractelement <2 x float> %94, i64 1, !dbg !49
  %107 = fadd float %74, %106, !dbg !49
  %108 = extractelement <2 x float> %105, i64 1, !dbg !49
  %109 = fadd float %75, %108, !dbg !49
  %110 = extractelement <2 x float> %94, i64 0, !dbg !50
  %111 = fadd float %110, %107, !dbg !50
  %112 = extractelement <2 x float> %105, i64 0, !dbg !50
  %113 = fadd float %112, %109, !dbg !50
  %114 = bitcast float %111 to i32, !dbg !51
  %115 = bitcast float %113 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %24, i1 %17) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjgwt6vxskdjf2fdzvz445vmijigrietfs67odjwyqgxghji6ikq.py", directory: "inductor_cache/jg")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_7", linkageName: "triton_poi_fused__unsafe_index_add_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 41, scope: !7)
!37 = !DILocation(line: 45, column: 50, scope: !7)
!38 = !DILocation(line: 45, column: 48, scope: !7)
!39 = !DILocation(line: 45, column: 39, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 55, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 55, scope: !7)
!45 = !DILocation(line: 49, column: 31, scope: !7)
!46 = !DILocation(line: 49, column: 55, scope: !7)
!47 = !DILocation(line: 36, column: 18, scope: !7)
!48 = !DILocation(line: 37, column: 18, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 19, scope: !7)
!51 = !DILocation(line: 53, column: 40, scope: !7)
!52 = !DILocation(line: 53, column: 4, scope: !7)
