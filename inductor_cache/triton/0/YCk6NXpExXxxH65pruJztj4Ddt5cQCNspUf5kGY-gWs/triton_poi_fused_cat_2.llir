; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %7, 3, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 32, !dbg !14
  %15 = icmp slt i32 %13, 32, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %.lobit23 = lshr i32 %7, 5, !dbg !17
  %18 = and i32 %.lobit23, 3, !dbg !17
  %19 = or disjoint i32 %17, %10, !dbg !18
  %20 = or disjoint i32 %17, %18, !dbg !18
  %21 = icmp slt i32 %19, 4, !dbg !19
  %22 = icmp slt i32 %20, 4, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %23 = sdiv i32 %.frozen, 4, !dbg !20
  %.frozen4 = freeze i32 %13, !dbg !20
  %24 = sdiv i32 %.frozen4, 4, !dbg !20
  %25 = srem i32 %23, 2, !dbg !21
  %26 = mul i32 %23, 4, !dbg !22
  %.decomposed = sub i32 %.frozen, %26, !dbg !22
  %27 = mul i32 %24, 4, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %27, !dbg !22
  %28 = sdiv i32 %12, 8, !dbg !23
  %29 = icmp slt i32 %25, 1, !dbg !24
  %30 = shl i32 %19, 2, !dbg !25
  %31 = shl i32 %20, 2, !dbg !25
  %32 = shl nsw i32 %.decomposed, 4, !dbg !26
  %33 = shl i32 %28, 6, !dbg !27
  %34 = add i32 %33, %32, !dbg !28
  %35 = add i32 %34, %30, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = and i1 %21, %29, !dbg !31
  %39 = and i1 %14, %38, !dbg !32
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %39, i32 0, i1 %39) #2, !dbg !33
  %41 = bitcast i32 %40 to float, !dbg !33
  %42 = or disjoint i32 %34, 1, !dbg !34
  %43 = add i32 %42, %30, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !36
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %39, i32 0, i1 %39) #2, !dbg !37
  %47 = bitcast i32 %46 to float, !dbg !37
  %48 = fcmp ogt float %41, %47, !dbg !38
  %49 = fcmp uno float %41, 0.000000e+00, !dbg !42
  %50 = or i1 %49, %48, !dbg !43
  %51 = select i1 %50, float %41, float %47, !dbg !44
  %52 = or disjoint i32 %34, 2, !dbg !45
  %53 = add i32 %52, %30, !dbg !46
  %54 = sext i32 %53 to i64, !dbg !47
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !47
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %39, i32 0, i1 %39) #2, !dbg !48
  %57 = bitcast i32 %56 to float, !dbg !48
  %58 = fcmp ogt float %51, %57, !dbg !49
  %59 = fcmp uno float %51, 0.000000e+00, !dbg !51
  %60 = or i1 %58, %59, !dbg !52
  %61 = select i1 %60, float %51, float %57, !dbg !53
  %62 = or disjoint i32 %34, 3, !dbg !54
  %63 = add i32 %62, %30, !dbg !55
  %64 = sext i32 %63 to i64, !dbg !56
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !56
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %39, i32 0, i1 %39) #2, !dbg !57
  %67 = bitcast i32 %66 to float, !dbg !57
  %68 = fcmp ogt float %61, %67, !dbg !58
  %69 = fcmp uno float %61, 0.000000e+00, !dbg !60
  %70 = or i1 %68, %69, !dbg !61
  %71 = select i1 %70, float %61, float %67, !dbg !62
  %72 = icmp sgt i32 %25, 0, !dbg !63
  %73 = and i1 %21, %72, !dbg !64
  %74 = and i1 %14, %73, !dbg !65
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %74, i32 0, i1 %74) #2, !dbg !66
  %76 = bitcast i32 %75 to float, !dbg !66
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %74, i32 0, i1 %74) #2, !dbg !67
  %78 = bitcast i32 %77 to float, !dbg !67
  %79 = fadd float %76, %78, !dbg !68
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %74, i32 0, i1 %74) #2, !dbg !69
  %81 = bitcast i32 %80 to float, !dbg !69
  %82 = fadd float %79, %81, !dbg !70
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %74, i32 0, i1 %74) #2, !dbg !71
  %84 = bitcast i32 %83 to float, !dbg !71
  %85 = fadd float %82, %84, !dbg !72
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 4.000000e+00) #2, !dbg !73
  %87 = select i1 %29, float %71, float %86, !dbg !74
  %88 = add i32 %31, %.decomposed5, !dbg !75
  %89 = shl i32 %24, 4, !dbg !76
  %90 = add i32 %88, %89, !dbg !77
  %91 = sext i32 %90 to i64, !dbg !78
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !78
  %93 = and i1 %15, %22, !dbg !79
  %94 = shl i32 %7, 5, !dbg !80
  %95 = and i32 %94, 96, !dbg !80
  %96 = or disjoint i32 %95, %9, !dbg !80
  %97 = and i32 %7, 127, !dbg !80
  %98 = lshr exact i32 %95, 3, !dbg !80
  %99 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %98, !dbg !80
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %96, !dbg !80
  %101 = bitcast float %87 to <1 x i32>, !dbg !80
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %102 = lshr i32 %97, 5, !dbg !80
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !80
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %97, !dbg !80
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %92, i1 %93) #2, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coawvp7cgc3kwq6t6kpsxyzqoihabufdif5cuyauske5cq3m7eiw.py", directory: "inductor_cache/oa")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 32, scope: !7)
!26 = !DILocation(line: 38, column: 40, scope: !7)
!27 = !DILocation(line: 38, column: 48, scope: !7)
!28 = !DILocation(line: 38, column: 37, scope: !7)
!29 = !DILocation(line: 38, column: 45, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 60, scope: !7)
!32 = !DILocation(line: 38, column: 68, scope: !7)
!33 = !DILocation(line: 38, column: 53, scope: !7)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 39, column: 49, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 57, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 40, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 41, column: 41, scope: !7)
!46 = !DILocation(line: 41, column: 49, scope: !7)
!47 = !DILocation(line: 41, column: 30, scope: !7)
!48 = !DILocation(line: 41, column: 57, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !50)
!50 = !DILocation(line: 42, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !50)
!54 = !DILocation(line: 43, column: 42, scope: !7)
!55 = !DILocation(line: 43, column: 50, scope: !7)
!56 = !DILocation(line: 43, column: 31, scope: !7)
!57 = !DILocation(line: 43, column: 58, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !59)
!59 = !DILocation(line: 44, column: 41, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !59)
!63 = !DILocation(line: 47, column: 20, scope: !7)
!64 = !DILocation(line: 50, column: 62, scope: !7)
!65 = !DILocation(line: 50, column: 70, scope: !7)
!66 = !DILocation(line: 50, column: 54, scope: !7)
!67 = !DILocation(line: 51, column: 58, scope: !7)
!68 = !DILocation(line: 52, column: 20, scope: !7)
!69 = !DILocation(line: 53, column: 58, scope: !7)
!70 = !DILocation(line: 54, column: 20, scope: !7)
!71 = !DILocation(line: 55, column: 58, scope: !7)
!72 = !DILocation(line: 56, column: 20, scope: !7)
!73 = !DILocation(line: 58, column: 20, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 62, column: 30, scope: !7)
!76 = !DILocation(line: 62, column: 40, scope: !7)
!77 = !DILocation(line: 62, column: 37, scope: !7)
!78 = !DILocation(line: 62, column: 25, scope: !7)
!79 = !DILocation(line: 62, column: 60, scope: !7)
!80 = !DILocation(line: 62, column: 52, scope: !7)
!81 = !DILocation(line: 62, column: 4, scope: !7)
