; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %14, 8, !dbg !12
  %17 = or disjoint i32 %14, 12, !dbg !12
  %18 = or disjoint i32 %14, 16, !dbg !12
  %19 = or disjoint i32 %14, 20, !dbg !12
  %20 = or disjoint i32 %14, 24, !dbg !12
  %21 = or disjoint i32 %14, 28, !dbg !12
  %22 = or disjoint i32 %14, 32, !dbg !12
  %23 = or disjoint i32 %14, 36, !dbg !12
  %24 = or disjoint i32 %14, 40, !dbg !12
  %25 = or disjoint i32 %14, 44, !dbg !12
  %26 = or disjoint i32 %14, 48, !dbg !12
  %27 = or disjoint i32 %14, 52, !dbg !12
  %28 = or disjoint i32 %14, 56, !dbg !12
  %29 = or disjoint i32 %14, 60, !dbg !12
  %30 = or disjoint i32 %11, %14, !dbg !13
  %31 = or disjoint i32 %11, %15, !dbg !13
  %32 = or disjoint i32 %11, %16, !dbg !13
  %33 = or disjoint i32 %11, %17, !dbg !13
  %34 = or disjoint i32 %11, %18, !dbg !13
  %35 = or disjoint i32 %11, %19, !dbg !13
  %36 = or disjoint i32 %11, %20, !dbg !13
  %37 = or disjoint i32 %11, %21, !dbg !13
  %38 = or disjoint i32 %11, %22, !dbg !13
  %39 = or disjoint i32 %11, %23, !dbg !13
  %40 = or disjoint i32 %11, %24, !dbg !13
  %41 = or disjoint i32 %11, %25, !dbg !13
  %42 = or disjoint i32 %11, %26, !dbg !13
  %43 = or disjoint i32 %11, %27, !dbg !13
  %44 = or disjoint i32 %11, %28, !dbg !13
  %45 = or disjoint i32 %11, %29, !dbg !13
  %46 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %47 = shl i32 %46, 6, !dbg !15
  %48 = and i32 %12, 63, !dbg !16
  %49 = or disjoint i32 %47, %48, !dbg !17
  %50 = icmp slt i32 %49, 131, !dbg !18
  %51 = mul i32 %30, 131, !dbg !19
  %52 = mul i32 %31, 131, !dbg !19
  %53 = mul i32 %32, 131, !dbg !19
  %54 = mul i32 %33, 131, !dbg !19
  %55 = mul i32 %34, 131, !dbg !19
  %56 = mul i32 %35, 131, !dbg !19
  %57 = mul i32 %36, 131, !dbg !19
  %58 = mul i32 %37, 131, !dbg !19
  %59 = mul i32 %38, 131, !dbg !19
  %60 = mul i32 %39, 131, !dbg !19
  %61 = mul i32 %40, 131, !dbg !19
  %62 = mul i32 %41, 131, !dbg !19
  %63 = mul i32 %42, 131, !dbg !19
  %64 = mul i32 %43, 131, !dbg !19
  %65 = mul i32 %44, 131, !dbg !19
  %66 = mul i32 %45, 131, !dbg !19
  %67 = add i32 %49, %51, !dbg !20
  %68 = add i32 %49, %52, !dbg !20
  %69 = add i32 %49, %53, !dbg !20
  %70 = add i32 %49, %54, !dbg !20
  %71 = add i32 %49, %55, !dbg !20
  %72 = add i32 %49, %56, !dbg !20
  %73 = add i32 %49, %57, !dbg !20
  %74 = add i32 %49, %58, !dbg !20
  %75 = add i32 %49, %59, !dbg !20
  %76 = add i32 %49, %60, !dbg !20
  %77 = add i32 %49, %61, !dbg !20
  %78 = add i32 %49, %62, !dbg !20
  %79 = add i32 %49, %63, !dbg !20
  %80 = add i32 %49, %64, !dbg !20
  %81 = add i32 %49, %65, !dbg !20
  %82 = add i32 %49, %66, !dbg !20
  %83 = sext i32 %67 to i64, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !21
  %85 = sext i32 %68 to i64, !dbg !21
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !21
  %87 = sext i32 %69 to i64, !dbg !21
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !21
  %89 = sext i32 %70 to i64, !dbg !21
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !21
  %91 = sext i32 %71 to i64, !dbg !21
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !21
  %93 = sext i32 %72 to i64, !dbg !21
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !21
  %95 = sext i32 %73 to i64, !dbg !21
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !21
  %97 = sext i32 %74 to i64, !dbg !21
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !21
  %99 = sext i32 %75 to i64, !dbg !21
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !21
  %101 = sext i32 %76 to i64, !dbg !21
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !21
  %103 = sext i32 %77 to i64, !dbg !21
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !21
  %105 = sext i32 %78 to i64, !dbg !21
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !21
  %107 = sext i32 %79 to i64, !dbg !21
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !21
  %109 = sext i32 %80 to i64, !dbg !21
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !21
  %111 = sext i32 %81 to i64, !dbg !21
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !21
  %113 = sext i32 %82 to i64, !dbg !21
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !21
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %50) #4, !dbg !22
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %50) #4, !dbg !22
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %50) #4, !dbg !22
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %50) #4, !dbg !22
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %50) #4, !dbg !22
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %50) #4, !dbg !22
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %50) #4, !dbg !22
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %50) #4, !dbg !22
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %50) #4, !dbg !22
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %50) #4, !dbg !22
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %50) #4, !dbg !22
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %50) #4, !dbg !22
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %50) #4, !dbg !22
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %50) #4, !dbg !22
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %50) #4, !dbg !22
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %50) #4, !dbg !22
  %131 = sext i32 %49 to i64, !dbg !23
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !23
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %50) #4, !dbg !24
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !25
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %50) #4, !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %50) #4, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %50) #4, !dbg !30
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %131, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %50) #4, !dbg !32
  %143 = fadd float %136, 0x3EE4F8B580000000, !dbg !33
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %144, 0, !dbg !34
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %145, 0, !dbg !34
  br i1 %.not.i, label %151, label %146, !dbg !34

146:                                              ; preds = %9
  br i1 %.not1.i, label %149, label %147, !dbg !34

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

151:                                              ; preds = %9
  br i1 %.not1.i, label %154, label %152, !dbg !34

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %147, %149, %152, %154
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !34
  %156 = insertelement <16 x i32> poison, i32 %130, i64 0, !dbg !22
  %157 = insertelement <16 x i32> %156, i32 %129, i64 1, !dbg !22
  %158 = insertelement <16 x i32> %157, i32 %128, i64 2, !dbg !22
  %159 = insertelement <16 x i32> %158, i32 %127, i64 3, !dbg !22
  %160 = insertelement <16 x i32> %159, i32 %126, i64 4, !dbg !22
  %161 = insertelement <16 x i32> %160, i32 %125, i64 5, !dbg !22
  %162 = insertelement <16 x i32> %161, i32 %124, i64 6, !dbg !22
  %163 = insertelement <16 x i32> %162, i32 %123, i64 7, !dbg !22
  %164 = insertelement <16 x i32> %163, i32 %122, i64 8, !dbg !22
  %165 = insertelement <16 x i32> %164, i32 %121, i64 9, !dbg !22
  %166 = insertelement <16 x i32> %165, i32 %120, i64 10, !dbg !22
  %167 = insertelement <16 x i32> %166, i32 %119, i64 11, !dbg !22
  %168 = insertelement <16 x i32> %167, i32 %118, i64 12, !dbg !22
  %169 = insertelement <16 x i32> %168, i32 %117, i64 13, !dbg !22
  %170 = insertelement <16 x i32> %169, i32 %116, i64 14, !dbg !22
  %171 = insertelement <16 x i32> %170, i32 %115, i64 15, !dbg !22
  %172 = bitcast <16 x i32> %171 to <16 x float>, !dbg !22
  %173 = bitcast i32 %142 to float, !dbg !32
  %174 = shl i32 %12, 2, !dbg !12
  %175 = and i32 %174, 60, !dbg !12
  %176 = or disjoint i32 %11, %175, !dbg !13
  %.frozen = freeze i32 %176, !dbg !35
  %177 = sdiv i32 %.frozen, 256, !dbg !35
  %178 = mul i32 %177, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %178, !dbg !36
  %179 = lshr i32 %12, 4, !dbg !16
  %180 = and i32 %179, 15, !dbg !16
  %181 = or disjoint i32 %180, %47, !dbg !17
  %182 = or disjoint i32 %181, 48, !dbg !17
  %183 = icmp slt i32 %182, 131, !dbg !18
  %184 = or disjoint i32 %181, 32, !dbg !17
  %185 = icmp slt i32 %184, 131, !dbg !18
  %186 = or disjoint i32 %181, 16, !dbg !17
  %187 = icmp slt i32 %186, 131, !dbg !18
  %188 = icmp slt i32 %181, 131, !dbg !18
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %190 = insertelement <16 x i32> poison, i32 %133, i64 0, !dbg !38
  %191 = bitcast <16 x i32> %190 to <16 x float>, !dbg !38
  %192 = shufflevector <16 x float> %191, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %193 = fsub <16 x float> %172, %192, !dbg !38
  %194 = insertelement <16 x float> poison, float %189, i64 0, !dbg !39
  %195 = shufflevector <16 x float> %194, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %196 = fmul <16 x float> %193, %195, !dbg !39
  %197 = insertelement <16 x i32> poison, i32 %138, i64 0, !dbg !40
  %198 = bitcast <16 x i32> %197 to <16 x float>, !dbg !40
  %199 = shufflevector <16 x float> %198, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %200 = fmul <16 x float> %196, %199, !dbg !40
  %201 = insertelement <16 x i32> poison, i32 %140, i64 0, !dbg !41
  %202 = bitcast <16 x i32> %201 to <16 x float>, !dbg !41
  %203 = shufflevector <16 x float> %202, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %204 = fadd <16 x float> %200, %203, !dbg !41
  %205 = fcmp ogt <16 x float> %204, zeroinitializer, !dbg !42
  %206 = extractelement <16 x float> %204, i64 15, !dbg !43
  %207 = fmul float %206, %173, !dbg !44
  %208 = extractelement <16 x float> %204, i64 14, !dbg !43
  %209 = fmul float %208, %173, !dbg !44
  %210 = extractelement <16 x float> %204, i64 13, !dbg !43
  %211 = fmul float %210, %173, !dbg !44
  %212 = extractelement <16 x float> %204, i64 12, !dbg !43
  %213 = fmul float %212, %173, !dbg !44
  %214 = extractelement <16 x float> %204, i64 11, !dbg !43
  %215 = fmul float %214, %173, !dbg !44
  %216 = extractelement <16 x float> %204, i64 10, !dbg !43
  %217 = fmul float %216, %173, !dbg !44
  %218 = extractelement <16 x float> %204, i64 9, !dbg !43
  %219 = fmul float %218, %173, !dbg !44
  %220 = extractelement <16 x float> %204, i64 8, !dbg !43
  %221 = fmul float %220, %173, !dbg !44
  %222 = extractelement <16 x float> %204, i64 7, !dbg !43
  %223 = fmul float %222, %173, !dbg !44
  %224 = extractelement <16 x float> %204, i64 6, !dbg !43
  %225 = fmul float %224, %173, !dbg !44
  %226 = extractelement <16 x float> %204, i64 5, !dbg !43
  %227 = fmul float %226, %173, !dbg !44
  %228 = extractelement <16 x float> %204, i64 4, !dbg !43
  %229 = fmul float %228, %173, !dbg !44
  %230 = extractelement <16 x float> %204, i64 3, !dbg !43
  %231 = fmul float %230, %173, !dbg !44
  %232 = extractelement <16 x float> %204, i64 2, !dbg !43
  %233 = fmul float %232, %173, !dbg !44
  %234 = extractelement <16 x float> %204, i64 1, !dbg !43
  %235 = fmul float %234, %173, !dbg !44
  %236 = extractelement <16 x float> %204, i64 0, !dbg !43
  %237 = fmul float %236, %173, !dbg !44
  %238 = extractelement <16 x i1> %205, i64 15, !dbg !43
  %239 = select i1 %238, float %206, float %207, !dbg !43
  %240 = extractelement <16 x i1> %205, i64 14, !dbg !43
  %241 = select i1 %240, float %208, float %209, !dbg !43
  %242 = extractelement <16 x i1> %205, i64 13, !dbg !43
  %243 = select i1 %242, float %210, float %211, !dbg !43
  %244 = extractelement <16 x i1> %205, i64 12, !dbg !43
  %245 = select i1 %244, float %212, float %213, !dbg !43
  %246 = extractelement <16 x i1> %205, i64 11, !dbg !43
  %247 = select i1 %246, float %214, float %215, !dbg !43
  %248 = extractelement <16 x i1> %205, i64 10, !dbg !43
  %249 = select i1 %248, float %216, float %217, !dbg !43
  %250 = extractelement <16 x i1> %205, i64 9, !dbg !43
  %251 = select i1 %250, float %218, float %219, !dbg !43
  %252 = extractelement <16 x i1> %205, i64 8, !dbg !43
  %253 = select i1 %252, float %220, float %221, !dbg !43
  %254 = extractelement <16 x i1> %205, i64 7, !dbg !43
  %255 = select i1 %254, float %222, float %223, !dbg !43
  %256 = extractelement <16 x i1> %205, i64 6, !dbg !43
  %257 = select i1 %256, float %224, float %225, !dbg !43
  %258 = extractelement <16 x i1> %205, i64 5, !dbg !43
  %259 = select i1 %258, float %226, float %227, !dbg !43
  %260 = extractelement <16 x i1> %205, i64 4, !dbg !43
  %261 = select i1 %260, float %228, float %229, !dbg !43
  %262 = extractelement <16 x i1> %205, i64 3, !dbg !43
  %263 = select i1 %262, float %230, float %231, !dbg !43
  %264 = extractelement <16 x i1> %205, i64 2, !dbg !43
  %265 = select i1 %264, float %232, float %233, !dbg !43
  %266 = extractelement <16 x i1> %205, i64 1, !dbg !43
  %267 = select i1 %266, float %234, float %235, !dbg !43
  %268 = extractelement <16 x i1> %205, i64 0, !dbg !43
  %269 = select i1 %268, float %236, float %237, !dbg !43
  %270 = shl i32 %181, 8, !dbg !45
  %271 = shl i32 %186, 8, !dbg !45
  %272 = shl i32 %184, 8, !dbg !45
  %273 = shl i32 %182, 8, !dbg !45
  %274 = mul i32 %177, 33536, !dbg !46
  %275 = add i32 %274, %.decomposed, !dbg !47
  %276 = add i32 %275, %270, !dbg !48
  %277 = add i32 %275, %271, !dbg !48
  %278 = add i32 %275, %272, !dbg !48
  %279 = add i32 %275, %273, !dbg !48
  %280 = sext i32 %276 to i64, !dbg !49
  %281 = getelementptr float, ptr addrspace(1) %6, i64 %280, !dbg !49
  %282 = sext i32 %277 to i64, !dbg !49
  %283 = getelementptr float, ptr addrspace(1) %6, i64 %282, !dbg !49
  %284 = sext i32 %278 to i64, !dbg !49
  %285 = getelementptr float, ptr addrspace(1) %6, i64 %284, !dbg !49
  %286 = sext i32 %279 to i64, !dbg !49
  %287 = getelementptr float, ptr addrspace(1) %6, i64 %286, !dbg !49
  %288 = shl i32 %12, 6, !dbg !50
  %289 = and i32 %288, 4032, !dbg !50
  %290 = or disjoint i32 %289, %14, !dbg !50
  %291 = and i32 %174, 1020, !dbg !50
  %292 = lshr exact i32 %289, 2, !dbg !50
  %293 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %292, !dbg !50
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !50
  %295 = bitcast float %239 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !50
  %296 = or disjoint i32 %290, 4, !dbg !50
  %297 = getelementptr float, ptr addrspace(3) %293, i32 %296, !dbg !50
  %298 = bitcast float %241 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %297, <1 x i32> %298, i1 true) #4, !dbg !50
  %299 = or disjoint i32 %290, 8, !dbg !50
  %300 = getelementptr float, ptr addrspace(3) %293, i32 %299, !dbg !50
  %301 = bitcast float %243 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !50
  %302 = or disjoint i32 %290, 12, !dbg !50
  %303 = getelementptr float, ptr addrspace(3) %293, i32 %302, !dbg !50
  %304 = bitcast float %245 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !50
  %305 = or disjoint i32 %290, 16, !dbg !50
  %306 = getelementptr float, ptr addrspace(3) %293, i32 %305, !dbg !50
  %307 = bitcast float %247 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !50
  %308 = or disjoint i32 %290, 20, !dbg !50
  %309 = getelementptr float, ptr addrspace(3) %293, i32 %308, !dbg !50
  %310 = bitcast float %249 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !50
  %311 = or disjoint i32 %290, 24, !dbg !50
  %312 = getelementptr float, ptr addrspace(3) %293, i32 %311, !dbg !50
  %313 = bitcast float %251 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #4, !dbg !50
  %314 = or disjoint i32 %290, 28, !dbg !50
  %315 = getelementptr float, ptr addrspace(3) %293, i32 %314, !dbg !50
  %316 = bitcast float %253 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %315, <1 x i32> %316, i1 true) #4, !dbg !50
  %317 = or disjoint i32 %290, 32, !dbg !50
  %318 = getelementptr float, ptr addrspace(3) %293, i32 %317, !dbg !50
  %319 = bitcast float %255 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %319, i1 true) #4, !dbg !50
  %320 = or disjoint i32 %290, 36, !dbg !50
  %321 = getelementptr float, ptr addrspace(3) %293, i32 %320, !dbg !50
  %322 = bitcast float %257 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !50
  %323 = or disjoint i32 %290, 40, !dbg !50
  %324 = getelementptr float, ptr addrspace(3) %293, i32 %323, !dbg !50
  %325 = bitcast float %259 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !50
  %326 = or disjoint i32 %290, 44, !dbg !50
  %327 = getelementptr float, ptr addrspace(3) %293, i32 %326, !dbg !50
  %328 = bitcast float %261 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #4, !dbg !50
  %329 = or disjoint i32 %290, 48, !dbg !50
  %330 = getelementptr float, ptr addrspace(3) %293, i32 %329, !dbg !50
  %331 = bitcast float %263 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !50
  %332 = or disjoint i32 %290, 52, !dbg !50
  %333 = getelementptr float, ptr addrspace(3) %293, i32 %332, !dbg !50
  %334 = bitcast float %265 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #4, !dbg !50
  %335 = or disjoint i32 %290, 56, !dbg !50
  %336 = getelementptr float, ptr addrspace(3) %293, i32 %335, !dbg !50
  %337 = bitcast float %267 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !50
  %338 = or disjoint i32 %290, 60, !dbg !50
  %339 = getelementptr float, ptr addrspace(3) %293, i32 %338, !dbg !50
  %340 = bitcast float %269 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %341 = lshr i32 %174, 4, !dbg !50
  %342 = and i32 %341, 60, !dbg !50
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !50
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %291, !dbg !50
  %345 = or disjoint i32 %291, 1024, !dbg !50
  %346 = lshr i32 %345, 4, !dbg !50
  %347 = and i32 %346, 124, !dbg !50
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !50
  %349 = getelementptr inbounds float, ptr addrspace(3) %348, i32 %345, !dbg !50
  %350 = load <4 x i32>, ptr addrspace(3) %349, align 16, !dbg !50
  %351 = or disjoint i32 %291, 2048, !dbg !50
  %352 = lshr i32 %351, 4, !dbg !50
  %353 = and i32 %352, 188, !dbg !50
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !50
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %351, !dbg !50
  %356 = load <4 x i32>, ptr addrspace(3) %355, align 16, !dbg !50
  %357 = or disjoint i32 %291, 3072, !dbg !50
  %358 = lshr i32 %357, 4, !dbg !50
  %359 = and i32 %358, 252, !dbg !50
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !50
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %357, !dbg !50
  %362 = load <4 x i32>, ptr addrspace(3) %361, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %344, align 16, !dbg !50
  %363 = getelementptr inbounds i8, ptr addrspace(3) %344, i32 4, !dbg !50
  %.extract20 = load i32, ptr addrspace(3) %363, align 4, !dbg !50
  %364 = getelementptr inbounds i8, ptr addrspace(3) %344, i32 8, !dbg !50
  %.extract21 = load i32, ptr addrspace(3) %364, align 8, !dbg !50
  %365 = getelementptr inbounds i8, ptr addrspace(3) %344, i32 12, !dbg !50
  %.extract22 = load i32, ptr addrspace(3) %365, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %281, i1 %188) #4, !dbg !50
  %.extract23 = extractelement <4 x i32> %350, i64 0, !dbg !50
  %.extract24 = extractelement <4 x i32> %350, i64 1, !dbg !50
  %.extract25 = extractelement <4 x i32> %350, i64 2, !dbg !50
  %.extract26 = extractelement <4 x i32> %350, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %283, i1 %187) #4, !dbg !50
  %.extract27 = extractelement <4 x i32> %356, i64 0, !dbg !50
  %.extract28 = extractelement <4 x i32> %356, i64 1, !dbg !50
  %.extract29 = extractelement <4 x i32> %356, i64 2, !dbg !50
  %.extract30 = extractelement <4 x i32> %356, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %285, i1 %185) #4, !dbg !50
  %.extract31 = extractelement <4 x i32> %362, i64 0, !dbg !50
  %.extract32 = extractelement <4 x i32> %362, i64 1, !dbg !50
  %.extract33 = extractelement <4 x i32> %362, i64 2, !dbg !50
  %.extract34 = extractelement <4 x i32> %362, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %287, i1 %183) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caprzmeyxnstor3taxev322jmu34u442jkilf3zykmu7pd2zt7yj.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 34, scope: !7)
!46 = !DILocation(line: 53, column: 45, scope: !7)
!47 = !DILocation(line: 53, column: 30, scope: !7)
!48 = !DILocation(line: 53, column: 39, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
