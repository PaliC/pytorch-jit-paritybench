#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":54:26)
#loc47 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc3)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc3)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc3)
    %5 = arith.remsi %0, %c1024_i32 : i32 loc(#loc4)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %9 = arith.addi %3, %7 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %10 = arith.addi %4, %8 : tensor<1x16xi32, #blocked> loc(#loc6)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %13 = tt.addptr %11, %9 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %15 = tt.load %13 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %16 = tt.load %14 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %17 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %18 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %19 = tt.addptr %17, %9 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc9)
    %20 = tt.addptr %18, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %21 = tt.load %19 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %22 = tt.load %20 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %23 = tt.addptr %arg3, %5 : !tt.ptr<f32>, i32 loc(#loc11)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %25 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %26 = tt.load %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %27 = tt.load %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %28 = tt.addptr %arg4, %5 : !tt.ptr<f32>, i32 loc(#loc13)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %30 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %31 = tt.load %29 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %32 = tt.load %30 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %33 = tt.addptr %arg5, %5 : !tt.ptr<f32>, i32 loc(#loc15)
    %34 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %35 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %36 = tt.load %34 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %37 = tt.load %35 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %38 = tt.addptr %arg6, %5 : !tt.ptr<f32>, i32 loc(#loc17)
    %39 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %40 = tt.splat %38 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %41 = tt.load %39 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %42 = tt.load %40 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc18)
    %43 = tt.broadcast %26 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc19)
    %44 = tt.broadcast %27 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc19)
    %45 = arith.subf %21, %43 : tensor<1x16xf32, #blocked1> loc(#loc19)
    %46 = arith.subf %22, %44 : tensor<1x16xf32, #blocked> loc(#loc19)
    %47 = arith.addf %31, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc20)
    %48 = arith.addf %32, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc20)
    %49 = tt.extern_elementwise %47 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc21)
    %50 = tt.extern_elementwise %48 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc21)
    %51 = arith.divf %cst_1, %49 : tensor<1x1xf32, #blocked1> loc(#loc22)
    %52 = arith.divf %cst_2, %50 : tensor<1x1xf32, #blocked> loc(#loc22)
    %53 = tt.broadcast %51 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc23)
    %54 = tt.broadcast %52 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc23)
    %55 = arith.mulf %45, %53 : tensor<1x16xf32, #blocked1> loc(#loc23)
    %56 = arith.mulf %46, %54 : tensor<1x16xf32, #blocked> loc(#loc23)
    %57 = tt.broadcast %36 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc24)
    %58 = tt.broadcast %37 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc24)
    %59 = arith.mulf %55, %57 : tensor<1x16xf32, #blocked1> loc(#loc24)
    %60 = arith.mulf %56, %58 : tensor<1x16xf32, #blocked> loc(#loc24)
    %61 = tt.broadcast %41 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc25)
    %62 = tt.broadcast %42 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc25)
    %63 = arith.addf %59, %61 : tensor<1x16xf32, #blocked1> loc(#loc25)
    %64 = arith.addf %60, %62 : tensor<1x16xf32, #blocked> loc(#loc25)
    %65 = arith.cmpf ogt, %cst_0, %63 : tensor<1x16xf32, #blocked1> loc(#loc42)
    %66 = arith.cmpf ogt, %cst, %64 : tensor<1x16xf32, #blocked> loc(#loc42)
    %67 = arith.select %65, %cst_0, %63 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc43)
    %68 = arith.select %66, %cst, %64 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc43)
    %69 = arith.addf %15, %67 : tensor<1x16xf32, #blocked1> loc(#loc29)
    %70 = arith.addf %16, %68 : tensor<1x16xf32, #blocked> loc(#loc29)
    %71 = arith.cmpf ogt, %cst_0, %69 : tensor<1x16xf32, #blocked1> loc(#loc44)
    %72 = arith.cmpf ogt, %cst, %70 : tensor<1x16xf32, #blocked> loc(#loc44)
    %73 = arith.select %71, %cst_0, %69 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc45)
    %74 = arith.select %72, %cst, %70 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc45)
    %75 = "tt.reduce"(%73) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc32)), %arg11: f32 loc(callsite(#loc1 at #loc32))):
      %82 = arith.addf %arg10, %arg11 : f32 loc(#loc49)
      tt.reduce.return %82 : f32 loc(#loc46)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc46)
    %76 = tt.expand_dims %75 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc34)
    %77 = arith.divf %76, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc35)
    %78 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc36)
    %79 = tt.addptr %78, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc36)
    tt.store %79, %74 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc37)
    gpu.barrier loc(#loc38)
    %80 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %81 = tt.splat %80 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.store %81, %77 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":23:28)
#loc3 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":26:34)
#loc4 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":31:19)
#loc5 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":32:38)
#loc6 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":32:35)
#loc7 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":32:30)
#loc8 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":32:43)
#loc9 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":33:30)
#loc10 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":33:43)
#loc11 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":34:30)
#loc12 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":34:35)
#loc13 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":35:30)
#loc14 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":35:35)
#loc15 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":36:31)
#loc16 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":36:36)
#loc17 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":37:31)
#loc18 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":37:36)
#loc19 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":38:18)
#loc20 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":40:18)
#loc21 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":41:26)
#loc22 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":43:18)
#loc23 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":46:19)
#loc24 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":47:20)
#loc25 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":48:20)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc27 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":50:42)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc29 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":51:19)
#loc30 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":52:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":54:29)
#loc35 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":56:20)
#loc36 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":57:25)
#loc37 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":57:45)
#loc38 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":58:4)
#loc39 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":59:28)
#loc40 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":59:40)
#loc41 = loc("inductor_cache/4d/c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py":59:4)
#loc42 = loc(callsite(#loc26 at #loc27))
#loc43 = loc(callsite(#loc28 at #loc27))
#loc44 = loc(callsite(#loc26 at #loc30))
#loc45 = loc(callsite(#loc28 at #loc30))
#loc46 = loc(callsite(#loc31 at #loc32))
#loc48 = loc(callsite(#loc33 at #loc31))
#loc49 = loc(callsite(#loc48 at #loc32))
