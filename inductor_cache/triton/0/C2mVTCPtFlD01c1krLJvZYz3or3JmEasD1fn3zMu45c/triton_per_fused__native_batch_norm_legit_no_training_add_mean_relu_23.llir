; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = and i32 %12, 15, !dbg !11
  %14 = srem i32 %11, 1024, !dbg !12
  %15 = shl i32 %11, 4, !dbg !13
  %16 = or disjoint i32 %15, %13, !dbg !14
  %17 = sext i32 %16 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !18
  %24 = sext i32 %14 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !26
  %39 = fadd float %30, 0x3EE4F8B580000000, !dbg !27
  %40 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %41, 0, !dbg !28
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %42, 0, !dbg !28
  br i1 %.not.i, label %48, label %43, !dbg !28

43:                                               ; preds = %10
  br i1 %.not1.i, label %46, label %44, !dbg !28

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

48:                                               ; preds = %10
  br i1 %.not1.i, label %51, label %49, !dbg !28

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %44, %46, %49, %51
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i1 = icmp eq i32 %53, 0, !dbg !28
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i4 = icmp eq i32 %54, 0, !dbg !28
  br i1 %.not.i1, label %60, label %55, !dbg !28

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !28

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !28

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #5, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %56, %58, %61, %63
  %.0.i3 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !28
  %65 = bitcast i32 %23 to float, !dbg !18
  %66 = bitcast i32 %27 to float, !dbg !20
  %67 = fsub float %65, %66, !dbg !29
  %68 = bitcast i32 %22 to float, !dbg !18
  %69 = bitcast i32 %26 to float, !dbg !20
  %70 = fsub float %68, %69, !dbg !29
  %71 = bitcast i32 %38 to float, !dbg !26
  %72 = bitcast i32 %37 to float, !dbg !26
  %73 = bitcast i32 %35 to float, !dbg !24
  %74 = bitcast i32 %34 to float, !dbg !24
  %75 = bitcast i32 %20 to float, !dbg !16
  %76 = bitcast i32 %19 to float, !dbg !16
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !30
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !30
  %79 = fmul float %70, %77, !dbg !31
  %80 = fmul float %67, %78, !dbg !31
  %81 = fmul float %79, %74, !dbg !32
  %82 = fmul float %80, %73, !dbg !32
  %83 = fadd float %81, %72, !dbg !33
  %84 = fadd float %82, %71, !dbg !33
  %85 = fcmp olt float %83, 0.000000e+00, !dbg !34
  %86 = fcmp olt float %84, 0.000000e+00, !dbg !34
  %87 = select i1 %85, float 0.000000e+00, float %83, !dbg !38
  %88 = select i1 %86, float 0.000000e+00, float %84, !dbg !38
  %89 = fadd float %87, %76, !dbg !39
  %90 = fadd float %88, %75, !dbg !39
  %91 = fcmp olt float %89, 0.000000e+00, !dbg !40
  %92 = fcmp olt float %90, 0.000000e+00, !dbg !40
  %93 = select i1 %91, float 0.000000e+00, float %89, !dbg !42
  %94 = select i1 %92, float 0.000000e+00, float %90, !dbg !42
  %95 = bitcast float %93 to i32, !dbg !43
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 8, i32 31), !dbg !43
  %97 = bitcast i32 %96 to float, !dbg !43
  %98 = fadd float %93, %97, !dbg !47
  %99 = bitcast float %98 to i32, !dbg !43
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !43
  %101 = bitcast i32 %100 to float, !dbg !43
  %102 = fadd float %98, %101, !dbg !47
  %103 = bitcast float %102 to i32, !dbg !43
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !43
  %105 = bitcast i32 %104 to float, !dbg !43
  %106 = fadd float %102, %105, !dbg !47
  %107 = bitcast float %106 to i32, !dbg !43
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !43
  %109 = bitcast i32 %108 to float, !dbg !43
  %110 = fadd float %106, %109, !dbg !47
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 1.600000e+01) #5, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !50
  %113 = and i32 %12, 48, !dbg !51
  %114 = icmp eq i32 %113, 0, !dbg !51
  %115 = bitcast float %94 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %112, i1 %114) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %116 = sext i32 %11 to i64, !dbg !53
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !53
  %urem = and i32 %12, 63, !dbg !54
  %118 = icmp eq i32 %urem, 0, !dbg !54
  %119 = bitcast float %111 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %117, i1 %118) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py", directory: "inductor_cache/4d")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 19, scope: !7)
!13 = !DILocation(line: 32, column: 38, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 36, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 18, scope: !7)
!31 = !DILocation(line: 46, column: 19, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 50, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 51, column: 19, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !41)
!41 = !DILocation(line: 52, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 54, column: 26, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 25, scope: !7)
!51 = !DILocation(line: 57, column: 45, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
!53 = !DILocation(line: 59, column: 28, scope: !7)
!54 = !DILocation(line: 59, column: 40, scope: !7)
!55 = !DILocation(line: 59, column: 4, scope: !7)
