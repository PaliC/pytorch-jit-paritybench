#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":36:24)
#loc19 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":39:24)
#loc22 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":42:26)
#loc34 = loc(callsite(#loc1 at #loc15))
#loc37 = loc(callsite(#loc1 at #loc19))
#loc39 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mul_stack_sub_sum_46(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0), %arg3: !tt.ptr<f32> loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0), %arg4: i32 loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":19:0)) attributes {noinline = false} {
    %c5_i32 = arith.constant 5 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999997E-7> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c32_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x32xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x32xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x32xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst_0 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %6 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc9)
    %13 = tt.load %12, %9, %cst_0 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %14, %6 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc11)
    %16 = tt.load %15, %9, %cst_0 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc12)
    %17 = arith.select %9, %10, %cst_0 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc13)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc15)), %arg7: f32 loc(callsite(#loc1 at #loc15))):
      %35 = arith.addf %arg6, %arg7 : f32 loc(#loc40)
      tt.reduce.return %35 : f32 loc(#loc33)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc33)
    %19 = tt.expand_dims %18 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc17)
    %20 = arith.select %9, %13, %cst_0 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc18)
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc19)), %arg7: f32 loc(callsite(#loc1 at #loc19))):
      %35 = arith.addf %arg6, %arg7 : f32 loc(#loc41)
      tt.reduce.return %35 : f32 loc(#loc36)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc36)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %23 = arith.select %9, %16, %cst_0 : tensor<1x32xi1, #blocked>, tensor<1x32xf32, #blocked> loc(#loc21)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc22)), %arg7: f32 loc(callsite(#loc1 at #loc22))):
      %35 = arith.addf %arg6, %arg7 : f32 loc(#loc42)
      tt.reduce.return %35 : f32 loc(#loc38)
    }) : (tensor<1x32xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc23)
    %26 = arith.addf %19, %cst : tensor<1x1xf32, #blocked> loc(#loc24)
    %27 = arith.mulf %22, %25 : tensor<1x1xf32, #blocked> loc(#loc25)
    %28 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc26)
    %29 = arith.addf %28, %cst : tensor<1x1xf32, #blocked> loc(#loc27)
    %30 = arith.divf %26, %29 : tensor<1x1xf32, #blocked> loc(#loc28)
    %31 = arith.muli %0, %c5_i32 : i32 loc(#loc29)
    %32 = tt.addptr %arg3, %31 : !tt.ptr<f32>, i32 loc(#loc30)
    %33 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc31)
    %34 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc31)
    tt.store %33, %30, %34 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":23:28)
#loc3 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":25:21)
#loc4 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":26:34)
#loc5 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":31:38)
#loc6 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":31:35)
#loc7 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":31:30)
#loc8 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":31:43)
#loc9 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":32:30)
#loc10 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":32:43)
#loc11 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":33:31)
#loc12 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":33:44)
#loc13 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":35:33)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc17 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":36:27)
#loc18 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":38:33)
#loc20 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":39:27)
#loc21 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":41:35)
#loc23 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":42:29)
#loc24 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":44:19)
#loc25 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":45:19)
#loc26 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":46:27)
#loc27 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":47:20)
#loc28 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":48:20)
#loc29 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":49:27)
#loc30 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":49:25)
#loc31 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":49:39)
#loc32 = loc("inductor_cache/ey/cey6iyfm3blcmlde3ozyjijfch4nbn75g24rzqtxem6houm2gyra.py":49:4)
#loc33 = loc(callsite(#loc14 at #loc15))
#loc35 = loc(callsite(#loc16 at #loc14))
#loc36 = loc(callsite(#loc14 at #loc19))
#loc38 = loc(callsite(#loc14 at #loc22))
#loc40 = loc(callsite(#loc35 at #loc15))
#loc41 = loc(callsite(#loc35 at #loc19))
#loc42 = loc(callsite(#loc35 at #loc22))
