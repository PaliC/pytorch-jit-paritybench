; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %20 = sdiv i32 %.frozen, 64, !dbg !14
  %21 = sdiv i32 %19, 64, !dbg !14
  %22 = srem i32 %20, 64, !dbg !15
  %23 = srem i32 %21, 64, !dbg !15
  %24 = mul i32 %20, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %18, 64, !dbg !16
  %26 = sdiv i32 %17, 4096, !dbg !17
  %27 = sdiv i32 %19, 4096, !dbg !17
  %28 = srem i32 %26, 128, !dbg !18
  %29 = srem i32 %27, 128, !dbg !18
  %.frozen1 = freeze i32 %17, !dbg !19
  %30 = sdiv i32 %.frozen1, 524288, !dbg !19
  %.frozen3 = freeze i32 %19, !dbg !19
  %31 = sdiv i32 %.frozen3, 524288, !dbg !19
  %32 = mul i32 %30, 524288, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %32, !dbg !20
  %33 = mul i32 %31, 524288, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %33, !dbg !20
  %34 = sext i32 %22 to i64, !dbg !21
  %35 = getelementptr i64, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = sext i32 %23 to i64, !dbg !21
  %37 = getelementptr i64, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !22
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %46 = sext i32 %.decomposed to i64, !dbg !23
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !23
  %48 = sext i32 %25 to i64, !dbg !23
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !24
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !24
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !24
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !24
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !24
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !24
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !24
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !24
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !24
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !24
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !24
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !24
  %62 = getelementptr i64, ptr addrspace(1) %3, i64 %46, !dbg !25
  %63 = getelementptr i64, ptr addrspace(1) %3, i64 %48, !dbg !25
  %64 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %65 = extractvalue { i64, i64 } %64, 0, !dbg !26
  %66 = extractvalue { i64, i64 } %64, 1, !dbg !26
  %67 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %68 = extractvalue { i64, i64 } %67, 0, !dbg !26
  %69 = extractvalue { i64, i64 } %67, 1, !dbg !26
  %70 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !26
  %71 = extractvalue { i64, i64 } %70, 0, !dbg !26
  %72 = extractvalue { i64, i64 } %70, 1, !dbg !26
  %73 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !26
  %74 = extractvalue { i64, i64 } %73, 0, !dbg !26
  %75 = extractvalue { i64, i64 } %73, 1, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !27
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !28
  %82 = bitcast i32 %78 to float, !dbg !28
  %83 = bitcast i32 %79 to float, !dbg !28
  %84 = bitcast i32 %80 to float, !dbg !28
  %85 = bitcast i32 %81 to float, !dbg !28
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !28
  %91 = bitcast i32 %87 to float, !dbg !28
  %92 = bitcast i32 %88 to float, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = getelementptr i64, ptr addrspace(1) %6, i64 %34, !dbg !29
  %96 = getelementptr i64, ptr addrspace(1) %6, i64 %36, !dbg !29
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !30
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = lshr i64 %38, 58, !dbg !33
  %124 = and i64 %123, 32, !dbg !33
  %125 = add i64 %124, %38, !dbg !33
  %126 = lshr i64 %42, 58, !dbg !33
  %127 = and i64 %126, 32, !dbg !33
  %128 = add i64 %127, %42, !dbg !33
  %129 = lshr i64 %51, 58, !dbg !34
  %130 = and i64 %129, 32, !dbg !34
  %131 = add i64 %130, %51, !dbg !34
  %132 = lshr i64 %52, 58, !dbg !34
  %133 = and i64 %132, 32, !dbg !34
  %134 = add i64 %133, %52, !dbg !34
  %135 = lshr i64 %54, 58, !dbg !34
  %136 = and i64 %135, 32, !dbg !34
  %137 = add i64 %136, %54, !dbg !34
  %138 = lshr i64 %55, 58, !dbg !34
  %139 = and i64 %138, 32, !dbg !34
  %140 = add i64 %139, %55, !dbg !34
  %141 = lshr i64 %57, 58, !dbg !34
  %142 = and i64 %141, 32, !dbg !34
  %143 = add i64 %142, %57, !dbg !34
  %144 = lshr i64 %58, 58, !dbg !34
  %145 = and i64 %144, 32, !dbg !34
  %146 = add i64 %145, %58, !dbg !34
  %147 = lshr i64 %60, 58, !dbg !34
  %148 = and i64 %147, 32, !dbg !34
  %149 = add i64 %148, %60, !dbg !34
  %150 = lshr i64 %61, 58, !dbg !34
  %151 = and i64 %150, 32, !dbg !34
  %152 = add i64 %151, %61, !dbg !34
  %153 = shl i64 %125, 5, !dbg !35
  %154 = shl i64 %128, 5, !dbg !35
  %155 = add i64 %131, %153, !dbg !36
  %156 = add i64 %134, %153, !dbg !36
  %157 = add i64 %137, %153, !dbg !36
  %158 = add i64 %140, %153, !dbg !36
  %159 = add i64 %143, %154, !dbg !36
  %160 = add i64 %146, %154, !dbg !36
  %161 = add i64 %149, %154, !dbg !36
  %162 = add i64 %152, %154, !dbg !36
  %163 = shl nsw i32 %26, 10, !dbg !37
  %164 = shl nsw i32 %27, 10, !dbg !37
  %165 = sext i32 %163 to i64, !dbg !38
  %166 = sext i32 %164 to i64, !dbg !38
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !39
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %165, !dbg !39
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !39
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %165, !dbg !39
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %165, !dbg !39
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %165, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %166, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %166, !dbg !39
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %166, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !39
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %166, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !40
  %184 = bitcast i32 %183 to float, !dbg !40
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !40
  %188 = bitcast i32 %187 to float, !dbg !40
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !40
  %190 = bitcast i32 %189 to float, !dbg !40
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #1, !dbg !40
  %192 = bitcast i32 %191 to float, !dbg !40
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #1, !dbg !40
  %194 = bitcast i32 %193 to float, !dbg !40
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #1, !dbg !40
  %196 = bitcast i32 %195 to float, !dbg !40
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !40
  %198 = bitcast i32 %197 to float, !dbg !40
  %199 = lshr i64 %65, 58, !dbg !41
  %200 = and i64 %199, 32, !dbg !41
  %201 = add i64 %200, %65, !dbg !41
  %202 = lshr i64 %66, 58, !dbg !41
  %203 = and i64 %202, 32, !dbg !41
  %204 = add i64 %203, %66, !dbg !41
  %205 = lshr i64 %68, 58, !dbg !41
  %206 = and i64 %205, 32, !dbg !41
  %207 = add i64 %206, %68, !dbg !41
  %208 = lshr i64 %69, 58, !dbg !41
  %209 = and i64 %208, 32, !dbg !41
  %210 = add i64 %209, %69, !dbg !41
  %211 = lshr i64 %71, 58, !dbg !41
  %212 = and i64 %211, 32, !dbg !41
  %213 = add i64 %212, %71, !dbg !41
  %214 = lshr i64 %72, 58, !dbg !41
  %215 = and i64 %214, 32, !dbg !41
  %216 = add i64 %215, %72, !dbg !41
  %217 = lshr i64 %74, 58, !dbg !41
  %218 = and i64 %217, 32, !dbg !41
  %219 = add i64 %218, %74, !dbg !41
  %220 = lshr i64 %75, 58, !dbg !41
  %221 = and i64 %220, 32, !dbg !41
  %222 = add i64 %221, %75, !dbg !41
  %223 = add i64 %201, %153, !dbg !42
  %224 = add i64 %204, %153, !dbg !42
  %225 = add i64 %207, %153, !dbg !42
  %226 = add i64 %210, %153, !dbg !42
  %227 = add i64 %213, %154, !dbg !42
  %228 = add i64 %216, %154, !dbg !42
  %229 = add i64 %219, %154, !dbg !42
  %230 = add i64 %222, %154, !dbg !42
  %231 = getelementptr float, ptr addrspace(1) %2, i64 %223, !dbg !43
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %165, !dbg !43
  %233 = getelementptr float, ptr addrspace(1) %2, i64 %224, !dbg !43
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %165, !dbg !43
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !43
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %165, !dbg !43
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %226, !dbg !43
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %165, !dbg !43
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %227, !dbg !43
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %166, !dbg !43
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %228, !dbg !43
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %166, !dbg !43
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %229, !dbg !43
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %166, !dbg !43
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %230, !dbg !43
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %166, !dbg !43
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !44
  %248 = bitcast i32 %247 to float, !dbg !44
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !44
  %250 = bitcast i32 %249 to float, !dbg !44
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !44
  %252 = bitcast i32 %251 to float, !dbg !44
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !44
  %254 = bitcast i32 %253 to float, !dbg !44
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !44
  %256 = bitcast i32 %255 to float, !dbg !44
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !44
  %260 = bitcast i32 %259 to float, !dbg !44
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !44
  %262 = bitcast i32 %261 to float, !dbg !44
  %263 = fsub float %248, %184, !dbg !45
  %264 = fsub float %250, %186, !dbg !45
  %265 = fsub float %252, %188, !dbg !45
  %266 = fsub float %254, %190, !dbg !45
  %267 = fsub float %256, %192, !dbg !45
  %268 = fsub float %258, %194, !dbg !45
  %269 = fsub float %260, %196, !dbg !45
  %270 = fsub float %262, %198, !dbg !45
  %271 = fmul float %263, %82, !dbg !46
  %272 = fmul float %264, %83, !dbg !46
  %273 = fmul float %265, %84, !dbg !46
  %274 = fmul float %266, %85, !dbg !46
  %275 = fmul float %267, %91, !dbg !46
  %276 = fmul float %268, %92, !dbg !46
  %277 = fmul float %269, %93, !dbg !46
  %278 = fmul float %270, %94, !dbg !46
  %279 = fadd float %271, %184, !dbg !47
  %280 = fadd float %272, %186, !dbg !47
  %281 = fadd float %273, %188, !dbg !47
  %282 = fadd float %274, %190, !dbg !47
  %283 = fadd float %275, %192, !dbg !47
  %284 = fadd float %276, %194, !dbg !47
  %285 = fadd float %277, %196, !dbg !47
  %286 = fadd float %278, %198, !dbg !47
  %287 = shl nsw i32 %28, 10, !dbg !48
  %288 = shl nsw i32 %29, 10, !dbg !48
  %289 = sext i32 %287 to i64, !dbg !49
  %290 = sext i32 %288 to i64, !dbg !49
  %291 = shl nsw i32 %30, 19, !dbg !50
  %292 = shl nsw i32 %31, 19, !dbg !50
  %293 = sext i32 %291 to i64, !dbg !51
  %294 = sext i32 %292 to i64, !dbg !51
  %295 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !52
  %296 = getelementptr float, ptr addrspace(1) %295, i64 %289, !dbg !52
  %297 = getelementptr float, ptr addrspace(1) %296, i64 %293, !dbg !52
  %298 = getelementptr float, ptr addrspace(1) %5, i64 %156, !dbg !52
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %289, !dbg !52
  %300 = getelementptr float, ptr addrspace(1) %299, i64 %293, !dbg !52
  %301 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !52
  %302 = getelementptr float, ptr addrspace(1) %301, i64 %289, !dbg !52
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %293, !dbg !52
  %304 = getelementptr float, ptr addrspace(1) %5, i64 %158, !dbg !52
  %305 = getelementptr float, ptr addrspace(1) %304, i64 %289, !dbg !52
  %306 = getelementptr float, ptr addrspace(1) %305, i64 %293, !dbg !52
  %307 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !52
  %308 = getelementptr float, ptr addrspace(1) %307, i64 %290, !dbg !52
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %294, !dbg !52
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %290, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %294, !dbg !52
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %290, !dbg !52
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %294, !dbg !52
  %316 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !52
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %290, !dbg !52
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %294, !dbg !52
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #1, !dbg !53
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !53
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !53
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #1, !dbg !53
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !53
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #1, !dbg !53
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 true) #1, !dbg !53
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %318, i1 true) #1, !dbg !53
  %327 = getelementptr float, ptr addrspace(1) %5, i64 %223, !dbg !54
  %328 = getelementptr float, ptr addrspace(1) %327, i64 %289, !dbg !54
  %329 = getelementptr float, ptr addrspace(1) %328, i64 %293, !dbg !54
  %330 = getelementptr float, ptr addrspace(1) %5, i64 %224, !dbg !54
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %289, !dbg !54
  %332 = getelementptr float, ptr addrspace(1) %331, i64 %293, !dbg !54
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %225, !dbg !54
  %334 = getelementptr float, ptr addrspace(1) %333, i64 %289, !dbg !54
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %293, !dbg !54
  %336 = getelementptr float, ptr addrspace(1) %5, i64 %226, !dbg !54
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %289, !dbg !54
  %338 = getelementptr float, ptr addrspace(1) %337, i64 %293, !dbg !54
  %339 = getelementptr float, ptr addrspace(1) %5, i64 %227, !dbg !54
  %340 = getelementptr float, ptr addrspace(1) %339, i64 %290, !dbg !54
  %341 = getelementptr float, ptr addrspace(1) %340, i64 %294, !dbg !54
  %342 = getelementptr float, ptr addrspace(1) %5, i64 %228, !dbg !54
  %343 = getelementptr float, ptr addrspace(1) %342, i64 %290, !dbg !54
  %344 = getelementptr float, ptr addrspace(1) %343, i64 %294, !dbg !54
  %345 = getelementptr float, ptr addrspace(1) %5, i64 %229, !dbg !54
  %346 = getelementptr float, ptr addrspace(1) %345, i64 %290, !dbg !54
  %347 = getelementptr float, ptr addrspace(1) %346, i64 %294, !dbg !54
  %348 = getelementptr float, ptr addrspace(1) %5, i64 %230, !dbg !54
  %349 = getelementptr float, ptr addrspace(1) %348, i64 %290, !dbg !54
  %350 = getelementptr float, ptr addrspace(1) %349, i64 %294, !dbg !54
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 true) #1, !dbg !55
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 true) #1, !dbg !55
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 true) #1, !dbg !55
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 true) #1, !dbg !55
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 true) #1, !dbg !55
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %344, i1 true) #1, !dbg !55
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 true) #1, !dbg !55
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 true) #1, !dbg !55
  %359 = lshr i64 %97, 58, !dbg !56
  %360 = and i64 %359, 32, !dbg !56
  %361 = add i64 %360, %97, !dbg !56
  %362 = lshr i64 %101, 58, !dbg !56
  %363 = and i64 %362, 32, !dbg !56
  %364 = add i64 %363, %101, !dbg !56
  %365 = shl i64 %361, 5, !dbg !57
  %366 = shl i64 %364, 5, !dbg !57
  %367 = getelementptr float, ptr addrspace(1) %5, i64 %131, !dbg !58
  %368 = getelementptr float, ptr addrspace(1) %367, i64 %365, !dbg !58
  %369 = getelementptr float, ptr addrspace(1) %368, i64 %289, !dbg !58
  %370 = getelementptr float, ptr addrspace(1) %369, i64 %293, !dbg !58
  %371 = getelementptr float, ptr addrspace(1) %5, i64 %134, !dbg !58
  %372 = getelementptr float, ptr addrspace(1) %371, i64 %365, !dbg !58
  %373 = getelementptr float, ptr addrspace(1) %372, i64 %289, !dbg !58
  %374 = getelementptr float, ptr addrspace(1) %373, i64 %293, !dbg !58
  %375 = getelementptr float, ptr addrspace(1) %5, i64 %137, !dbg !58
  %376 = getelementptr float, ptr addrspace(1) %375, i64 %365, !dbg !58
  %377 = getelementptr float, ptr addrspace(1) %376, i64 %289, !dbg !58
  %378 = getelementptr float, ptr addrspace(1) %377, i64 %293, !dbg !58
  %379 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !58
  %380 = getelementptr float, ptr addrspace(1) %379, i64 %365, !dbg !58
  %381 = getelementptr float, ptr addrspace(1) %380, i64 %289, !dbg !58
  %382 = getelementptr float, ptr addrspace(1) %381, i64 %293, !dbg !58
  %383 = getelementptr float, ptr addrspace(1) %5, i64 %143, !dbg !58
  %384 = getelementptr float, ptr addrspace(1) %383, i64 %366, !dbg !58
  %385 = getelementptr float, ptr addrspace(1) %384, i64 %290, !dbg !58
  %386 = getelementptr float, ptr addrspace(1) %385, i64 %294, !dbg !58
  %387 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !58
  %388 = getelementptr float, ptr addrspace(1) %387, i64 %366, !dbg !58
  %389 = getelementptr float, ptr addrspace(1) %388, i64 %290, !dbg !58
  %390 = getelementptr float, ptr addrspace(1) %389, i64 %294, !dbg !58
  %391 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !58
  %392 = getelementptr float, ptr addrspace(1) %391, i64 %366, !dbg !58
  %393 = getelementptr float, ptr addrspace(1) %392, i64 %290, !dbg !58
  %394 = getelementptr float, ptr addrspace(1) %393, i64 %294, !dbg !58
  %395 = getelementptr float, ptr addrspace(1) %5, i64 %152, !dbg !58
  %396 = getelementptr float, ptr addrspace(1) %395, i64 %366, !dbg !58
  %397 = getelementptr float, ptr addrspace(1) %396, i64 %290, !dbg !58
  %398 = getelementptr float, ptr addrspace(1) %397, i64 %294, !dbg !58
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 true) #1, !dbg !59
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 true) #1, !dbg !59
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 true) #1, !dbg !59
  %402 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %382, i1 true) #1, !dbg !59
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %386, i1 true) #1, !dbg !59
  %404 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %390, i1 true) #1, !dbg !59
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %394, i1 true) #1, !dbg !59
  %406 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %398, i1 true) #1, !dbg !59
  %407 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !60
  %408 = getelementptr float, ptr addrspace(1) %407, i64 %365, !dbg !60
  %409 = getelementptr float, ptr addrspace(1) %408, i64 %289, !dbg !60
  %410 = getelementptr float, ptr addrspace(1) %409, i64 %293, !dbg !60
  %411 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !60
  %412 = getelementptr float, ptr addrspace(1) %411, i64 %365, !dbg !60
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %289, !dbg !60
  %414 = getelementptr float, ptr addrspace(1) %413, i64 %293, !dbg !60
  %415 = getelementptr float, ptr addrspace(1) %5, i64 %207, !dbg !60
  %416 = getelementptr float, ptr addrspace(1) %415, i64 %365, !dbg !60
  %417 = getelementptr float, ptr addrspace(1) %416, i64 %289, !dbg !60
  %418 = getelementptr float, ptr addrspace(1) %417, i64 %293, !dbg !60
  %419 = getelementptr float, ptr addrspace(1) %5, i64 %210, !dbg !60
  %420 = getelementptr float, ptr addrspace(1) %419, i64 %365, !dbg !60
  %421 = getelementptr float, ptr addrspace(1) %420, i64 %289, !dbg !60
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %293, !dbg !60
  %423 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !60
  %424 = getelementptr float, ptr addrspace(1) %423, i64 %366, !dbg !60
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %290, !dbg !60
  %426 = getelementptr float, ptr addrspace(1) %425, i64 %294, !dbg !60
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !60
  %428 = getelementptr float, ptr addrspace(1) %427, i64 %366, !dbg !60
  %429 = getelementptr float, ptr addrspace(1) %428, i64 %290, !dbg !60
  %430 = getelementptr float, ptr addrspace(1) %429, i64 %294, !dbg !60
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !60
  %432 = getelementptr float, ptr addrspace(1) %431, i64 %366, !dbg !60
  %433 = getelementptr float, ptr addrspace(1) %432, i64 %290, !dbg !60
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %294, !dbg !60
  %435 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !60
  %436 = getelementptr float, ptr addrspace(1) %435, i64 %366, !dbg !60
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %290, !dbg !60
  %438 = getelementptr float, ptr addrspace(1) %437, i64 %294, !dbg !60
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 true) #1, !dbg !61
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 true) #1, !dbg !61
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %418, i1 true) #1, !dbg !61
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %422, i1 true) #1, !dbg !61
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %426, i1 true) #1, !dbg !61
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %430, i1 true) #1, !dbg !61
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %434, i1 true) #1, !dbg !61
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %438, i1 true) #1, !dbg !61
  %447 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !59
  %448 = insertelement <2 x i32> %447, i32 %319, i64 1, !dbg !59
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !59
  %450 = insertelement <2 x i32> poison, i32 %439, i64 0, !dbg !61
  %451 = insertelement <2 x i32> %450, i32 %351, i64 1, !dbg !61
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !61
  %453 = fsub <2 x float> %452, %449, !dbg !62
  %454 = insertelement <2 x float> poison, float %82, i64 0, !dbg !63
  %455 = shufflevector <2 x float> %454, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %456 = fmul <2 x float> %453, %455, !dbg !63
  %457 = fadd <2 x float> %456, %449, !dbg !64
  %458 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !59
  %459 = insertelement <2 x i32> %458, i32 %320, i64 1, !dbg !59
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !59
  %461 = insertelement <2 x i32> poison, i32 %440, i64 0, !dbg !61
  %462 = insertelement <2 x i32> %461, i32 %352, i64 1, !dbg !61
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !61
  %464 = fsub <2 x float> %463, %460, !dbg !62
  %465 = insertelement <2 x float> poison, float %83, i64 0, !dbg !63
  %466 = shufflevector <2 x float> %465, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %467 = fmul <2 x float> %464, %466, !dbg !63
  %468 = fadd <2 x float> %467, %460, !dbg !64
  %469 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !59
  %470 = insertelement <2 x i32> %469, i32 %321, i64 1, !dbg !59
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !59
  %472 = insertelement <2 x i32> poison, i32 %441, i64 0, !dbg !61
  %473 = insertelement <2 x i32> %472, i32 %353, i64 1, !dbg !61
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !61
  %475 = fsub <2 x float> %474, %471, !dbg !62
  %476 = insertelement <2 x float> poison, float %84, i64 0, !dbg !63
  %477 = shufflevector <2 x float> %476, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %478 = fmul <2 x float> %475, %477, !dbg !63
  %479 = fadd <2 x float> %478, %471, !dbg !64
  %480 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !59
  %481 = insertelement <2 x i32> %480, i32 %322, i64 1, !dbg !59
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !59
  %483 = insertelement <2 x i32> poison, i32 %442, i64 0, !dbg !61
  %484 = insertelement <2 x i32> %483, i32 %354, i64 1, !dbg !61
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !61
  %486 = fsub <2 x float> %485, %482, !dbg !62
  %487 = insertelement <2 x float> poison, float %85, i64 0, !dbg !63
  %488 = shufflevector <2 x float> %487, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %489 = fmul <2 x float> %486, %488, !dbg !63
  %490 = fadd <2 x float> %489, %482, !dbg !64
  %491 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !59
  %492 = insertelement <2 x i32> %491, i32 %323, i64 1, !dbg !59
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !59
  %494 = insertelement <2 x i32> poison, i32 %443, i64 0, !dbg !61
  %495 = insertelement <2 x i32> %494, i32 %355, i64 1, !dbg !61
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !61
  %497 = fsub <2 x float> %496, %493, !dbg !62
  %498 = insertelement <2 x float> poison, float %91, i64 0, !dbg !63
  %499 = shufflevector <2 x float> %498, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %500 = fmul <2 x float> %497, %499, !dbg !63
  %501 = fadd <2 x float> %500, %493, !dbg !64
  %502 = insertelement <2 x i32> poison, i32 %404, i64 0, !dbg !59
  %503 = insertelement <2 x i32> %502, i32 %324, i64 1, !dbg !59
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !59
  %505 = insertelement <2 x i32> poison, i32 %444, i64 0, !dbg !61
  %506 = insertelement <2 x i32> %505, i32 %356, i64 1, !dbg !61
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !61
  %508 = fsub <2 x float> %507, %504, !dbg !62
  %509 = insertelement <2 x float> poison, float %92, i64 0, !dbg !63
  %510 = shufflevector <2 x float> %509, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %511 = fmul <2 x float> %508, %510, !dbg !63
  %512 = fadd <2 x float> %511, %504, !dbg !64
  %513 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !59
  %514 = insertelement <2 x i32> %513, i32 %325, i64 1, !dbg !59
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !59
  %516 = insertelement <2 x i32> poison, i32 %445, i64 0, !dbg !61
  %517 = insertelement <2 x i32> %516, i32 %357, i64 1, !dbg !61
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !61
  %519 = fsub <2 x float> %518, %515, !dbg !62
  %520 = insertelement <2 x float> poison, float %93, i64 0, !dbg !63
  %521 = shufflevector <2 x float> %520, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %522 = fmul <2 x float> %519, %521, !dbg !63
  %523 = fadd <2 x float> %522, %515, !dbg !64
  %524 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !59
  %525 = insertelement <2 x i32> %524, i32 %326, i64 1, !dbg !59
  %526 = bitcast <2 x i32> %525 to <2 x float>, !dbg !59
  %527 = insertelement <2 x i32> poison, i32 %446, i64 0, !dbg !61
  %528 = insertelement <2 x i32> %527, i32 %358, i64 1, !dbg !61
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !61
  %530 = fsub <2 x float> %529, %526, !dbg !62
  %531 = insertelement <2 x float> poison, float %94, i64 0, !dbg !63
  %532 = shufflevector <2 x float> %531, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %533 = fmul <2 x float> %530, %532, !dbg !63
  %534 = fadd <2 x float> %533, %526, !dbg !64
  %535 = extractelement <2 x float> %457, i64 0, !dbg !65
  %536 = extractelement <2 x float> %457, i64 1, !dbg !66
  %537 = fsub float %535, %536, !dbg !65
  %538 = extractelement <2 x float> %468, i64 0, !dbg !65
  %539 = extractelement <2 x float> %468, i64 1, !dbg !66
  %540 = fsub float %538, %539, !dbg !65
  %541 = extractelement <2 x float> %479, i64 0, !dbg !65
  %542 = extractelement <2 x float> %479, i64 1, !dbg !66
  %543 = fsub float %541, %542, !dbg !65
  %544 = extractelement <2 x float> %490, i64 0, !dbg !65
  %545 = extractelement <2 x float> %490, i64 1, !dbg !66
  %546 = fsub float %544, %545, !dbg !65
  %547 = extractelement <2 x float> %501, i64 0, !dbg !65
  %548 = extractelement <2 x float> %501, i64 1, !dbg !66
  %549 = fsub float %547, %548, !dbg !65
  %550 = extractelement <2 x float> %512, i64 0, !dbg !65
  %551 = extractelement <2 x float> %512, i64 1, !dbg !66
  %552 = fsub float %550, %551, !dbg !65
  %553 = extractelement <2 x float> %523, i64 0, !dbg !65
  %554 = extractelement <2 x float> %523, i64 1, !dbg !66
  %555 = fsub float %553, %554, !dbg !65
  %556 = extractelement <2 x float> %534, i64 0, !dbg !65
  %557 = extractelement <2 x float> %534, i64 1, !dbg !66
  %558 = fsub float %556, %557, !dbg !65
  %559 = fmul float %537, %108, !dbg !67
  %560 = fmul float %540, %110, !dbg !67
  %561 = fmul float %543, %112, !dbg !67
  %562 = fmul float %546, %114, !dbg !67
  %563 = fmul float %549, %116, !dbg !67
  %564 = fmul float %552, %118, !dbg !67
  %565 = fmul float %555, %120, !dbg !67
  %566 = fmul float %558, %122, !dbg !67
  %567 = fadd float %536, %559, !dbg !66
  %568 = fadd float %539, %560, !dbg !66
  %569 = fadd float %542, %561, !dbg !66
  %570 = fadd float %545, %562, !dbg !66
  %571 = fadd float %548, %563, !dbg !66
  %572 = fadd float %551, %564, !dbg !66
  %573 = fadd float %554, %565, !dbg !66
  %574 = fadd float %557, %566, !dbg !66
  %575 = sext i32 %17 to i64, !dbg !68
  %576 = getelementptr float, ptr addrspace(1) %8, i64 %575, !dbg !68
  %577 = sext i32 %19 to i64, !dbg !68
  %578 = getelementptr float, ptr addrspace(1) %8, i64 %577, !dbg !68
  %579 = bitcast float %279 to i32, !dbg !69
  %580 = bitcast float %280 to i32, !dbg !69
  %581 = bitcast float %281 to i32, !dbg !69
  %582 = bitcast float %282 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %579, i32 %580, i32 %581, i32 %582, ptr addrspace(1) %576, i1 true) #1, !dbg !69
  %583 = bitcast float %283 to i32, !dbg !69
  %584 = bitcast float %284 to i32, !dbg !69
  %585 = bitcast float %285 to i32, !dbg !69
  %586 = bitcast float %286 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %583, i32 %584, i32 %585, i32 %586, ptr addrspace(1) %578, i1 true) #1, !dbg !69
  %587 = shl i32 %30, 20, !dbg !70
  %588 = shl i32 %31, 20, !dbg !70
  %589 = add i32 %587, %.decomposed2, !dbg !71
  %590 = add i32 %588, %.decomposed4, !dbg !71
  %591 = sext i32 %589 to i64, !dbg !72
  %592 = getelementptr float, ptr addrspace(1) %9, i64 %591, !dbg !72
  %593 = sext i32 %590 to i64, !dbg !72
  %594 = getelementptr float, ptr addrspace(1) %9, i64 %593, !dbg !72
  %595 = bitcast float %567 to i32, !dbg !73
  %596 = bitcast float %568 to i32, !dbg !73
  %597 = bitcast float %569 to i32, !dbg !73
  %598 = bitcast float %570 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %595, i32 %596, i32 %597, i32 %598, ptr addrspace(1) %592, i1 true) #1, !dbg !73
  %599 = bitcast float %571 to i32, !dbg !73
  %600 = bitcast float %572 to i32, !dbg !73
  %601 = bitcast float %573 to i32, !dbg !73
  %602 = bitcast float %574 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %599, i32 %600, i32 %601, i32 %602, ptr addrspace(1) %594, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce6c3eengxtwqhnf3vgt6ztq437zjjeolg3g764rdhju4jt65jij.py", directory: "inductor_cache/e6")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_32", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 32, scope: !7)
!34 = !DILocation(line: 43, column: 32, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 44, column: 37, scope: !7)
!37 = !DILocation(line: 44, column: 52, scope: !7)
!38 = !DILocation(line: 44, column: 47, scope: !7)
!39 = !DILocation(line: 44, column: 30, scope: !7)
!40 = !DILocation(line: 44, column: 57, scope: !7)
!41 = !DILocation(line: 47, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 39, scope: !7)
!43 = !DILocation(line: 48, column: 31, scope: !7)
!44 = !DILocation(line: 48, column: 59, scope: !7)
!45 = !DILocation(line: 49, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 53, scope: !7)
!49 = !DILocation(line: 52, column: 48, scope: !7)
!50 = !DILocation(line: 52, column: 65, scope: !7)
!51 = !DILocation(line: 52, column: 58, scope: !7)
!52 = !DILocation(line: 52, column: 31, scope: !7)
!53 = !DILocation(line: 52, column: 70, scope: !7)
!54 = !DILocation(line: 53, column: 31, scope: !7)
!55 = !DILocation(line: 53, column: 71, scope: !7)
!56 = !DILocation(line: 59, column: 35, scope: !7)
!57 = !DILocation(line: 60, column: 41, scope: !7)
!58 = !DILocation(line: 60, column: 31, scope: !7)
!59 = !DILocation(line: 60, column: 71, scope: !7)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 72, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 20, scope: !7)
!66 = !DILocation(line: 67, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 25, scope: !7)
!69 = !DILocation(line: 68, column: 37, scope: !7)
!70 = !DILocation(line: 69, column: 38, scope: !7)
!71 = !DILocation(line: 69, column: 30, scope: !7)
!72 = !DILocation(line: 69, column: 25, scope: !7)
!73 = !DILocation(line: 69, column: 50, scope: !7)
!74 = !DILocation(line: 69, column: 4, scope: !7)
