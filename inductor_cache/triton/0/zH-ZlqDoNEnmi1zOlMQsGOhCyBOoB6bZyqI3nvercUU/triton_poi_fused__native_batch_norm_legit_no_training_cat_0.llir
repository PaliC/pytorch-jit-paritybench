; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 16, !dbg !15
  %16 = mul i32 %15, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = srem i32 %15, 4, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %14) #3, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !21
  %23 = bitcast i32 %22 to float, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !25
  %28 = icmp slt i32 %.decomposed, 4, !dbg !26
  %29 = shl nsw i32 %15, 2, !dbg !27
  %30 = add nsw i32 %29, %.decomposed, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = and i1 %14, %28, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %33, i32 0, i1 %33) #3, !dbg !31
  %35 = and i32 %.decomposed, -4, !dbg !32
  %36 = icmp eq i32 %35, 4, !dbg !32
  %37 = add nsw i32 %29, 64, !dbg !33
  %38 = add nsw i32 %.decomposed, -4, !dbg !34
  %39 = add nsw i32 %38, %37, !dbg !35
  %40 = sext i32 %39 to i64, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !36
  %42 = and i1 %14, %36, !dbg !37
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42) #3, !dbg !38
  %44 = icmp eq i32 %35, 8, !dbg !39
  %45 = add nsw i32 %.decomposed, -8, !dbg !40
  %46 = add nsw i32 %29, %45, !dbg !41
  %47 = sext i32 %46 to i64, !dbg !42
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !42
  %49 = and i1 %14, %44, !dbg !43
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 0, i1 %49) #3, !dbg !44
  %51 = add nsw i32 %37, %45, !dbg !45
  %52 = sext i32 %51 to i64, !dbg !46
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !46
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %49, i32 0, i1 %49) #3, !dbg !47
  %55 = icmp sgt i32 %.decomposed, 11, !dbg !48
  %56 = add nsw i32 %.decomposed, -12, !dbg !49
  %57 = add nsw i32 %29, %56, !dbg !50
  %58 = sext i32 %57 to i64, !dbg !51
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !51
  %60 = and i1 %14, %55, !dbg !52
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60) #3, !dbg !53
  %62 = add nsw i32 %37, %56, !dbg !54
  %63 = sext i32 %62 to i64, !dbg !55
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !55
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 0, i1 %60) #3, !dbg !56
  %66 = fadd float %23, 0x3EE4F8B580000000, !dbg !57
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %67, 0, !dbg !58
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %68, 0, !dbg !58
  br i1 %.not.i, label %74, label %69, !dbg !58

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !58

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

74:                                               ; preds = %8
  br i1 %.not1.i, label %77, label %75, !dbg !58

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %70, %72, %75, %77
  %.0.i = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !58
  %79 = bitcast i32 %34 to float, !dbg !31
  %80 = bitcast i32 %43 to float, !dbg !38
  %81 = bitcast i32 %50 to float, !dbg !44
  %82 = bitcast i32 %54 to float, !dbg !47
  %83 = fsub float %81, %82, !dbg !59
  %84 = bitcast i32 %61 to float, !dbg !53
  %85 = bitcast i32 %65 to float, !dbg !56
  %86 = fmul float %84, %85, !dbg !60
  %87 = select i1 %55, float %86, float 0.000000e+00, !dbg !61
  %88 = select i1 %44, float %83, float %87, !dbg !62
  %89 = select i1 %36, float %80, float %88, !dbg !63
  %90 = select i1 %28, float %79, float %89, !dbg !64
  %91 = bitcast i32 %20 to float, !dbg !19
  %92 = fsub float %90, %91, !dbg !65
  %93 = bitcast i32 %27 to float, !dbg !25
  %94 = bitcast i32 %25 to float, !dbg !23
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %96 = fmul float %92, %95, !dbg !67
  %97 = fmul float %96, %94, !dbg !68
  %98 = fadd float %97, %93, !dbg !69
  %99 = sext i32 %13 to i64, !dbg !70
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !70
  %101 = bitcast float %90 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %100, i1 %14) #3, !dbg !71
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %99, !dbg !72
  %103 = bitcast float %98 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %102, i1 %14) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceu2fvanqd2jsosquhpgmqliu6exybee7k2pu36ruufkgwbilibi.py", directory: "inductor_cache/eu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 32, scope: !7)
!28 = !DILocation(line: 37, column: 38, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 51, scope: !7)
!31 = !DILocation(line: 37, column: 44, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 36, scope: !7)
!34 = !DILocation(line: 42, column: 51, scope: !7)
!35 = !DILocation(line: 42, column: 44, scope: !7)
!36 = !DILocation(line: 42, column: 31, scope: !7)
!37 = !DILocation(line: 42, column: 64, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 46, scope: !7)
!41 = !DILocation(line: 47, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 60, scope: !7)
!44 = !DILocation(line: 47, column: 52, scope: !7)
!45 = !DILocation(line: 48, column: 44, scope: !7)
!46 = !DILocation(line: 48, column: 31, scope: !7)
!47 = !DILocation(line: 48, column: 57, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 47, scope: !7)
!50 = !DILocation(line: 55, column: 39, scope: !7)
!51 = !DILocation(line: 55, column: 31, scope: !7)
!52 = !DILocation(line: 55, column: 61, scope: !7)
!53 = !DILocation(line: 55, column: 53, scope: !7)
!54 = !DILocation(line: 56, column: 44, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 58, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 27, scope: !7)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 57, column: 20, scope: !7)
!61 = !DILocation(line: 59, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 61, column: 34, scope: !7)
!64 = !DILocation(line: 62, column: 33, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
