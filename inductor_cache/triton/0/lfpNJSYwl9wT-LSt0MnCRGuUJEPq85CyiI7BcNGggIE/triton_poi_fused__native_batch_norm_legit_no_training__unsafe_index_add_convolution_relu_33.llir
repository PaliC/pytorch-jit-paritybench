; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = icmp slt i32 %21, 1024, !dbg !14
  %23 = sdiv i32 %21, 64, !dbg !15
  %24 = srem i32 %23, 4, !dbg !16
  %.frozen = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen, 8, !dbg !17
  %26 = srem i32 %25, 8, !dbg !18
  %27 = mul i32 %25, 8, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = sext i32 %21 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !21
  %31 = sext i32 %24 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %22) #3, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %22) #3, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %22) #3, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #3, !dbg !29
  %42 = sext i32 %26 to i64, !dbg !30
  %43 = getelementptr i64, ptr addrspace(1) %5, i64 %42, !dbg !30
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %22) #3, !dbg !31
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %22) #3, !dbg !31
  %46 = sext i32 %.decomposed to i64, !dbg !32
  %47 = getelementptr i64, ptr addrspace(1) %5, i64 %46, !dbg !32
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !33
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !33
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !36
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %22) #3, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !38
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %22) #3, !dbg !39
  %59 = bitcast i32 %58 to float, !dbg !39
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %22) #3, !dbg !39
  %61 = bitcast i32 %60 to float, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !40
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %22) #3, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !42
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !43
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #3, !dbg !43
  %68 = lshr i64 %44, 61, !dbg !44
  %69 = and i64 %68, 4, !dbg !44
  %70 = add i64 %69, %44, !dbg !44
  %71 = lshr i64 %49, 61, !dbg !45
  %72 = and i64 %71, 4, !dbg !45
  %73 = lshr i64 %50, 61, !dbg !45
  %74 = and i64 %73, 4, !dbg !45
  %75 = shl i64 %70, 2, !dbg !46
  %76 = shl nsw i32 %23, 4, !dbg !47
  %77 = sext i32 %76 to i64, !dbg !48
  %78 = add i64 %75, %77, !dbg !45
  %79 = add i64 %78, %49, !dbg !49
  %80 = add i64 %79, %72, !dbg !48
  %81 = add i64 %78, %50, !dbg !49
  %82 = add i64 %81, %74, !dbg !48
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %80, !dbg !50
  %84 = getelementptr float, ptr addrspace(1) %6, i64 %82, !dbg !50
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %22) #3, !dbg !51
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %22) #3, !dbg !51
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %80, !dbg !52
  %88 = getelementptr float, ptr addrspace(1) %8, i64 %82, !dbg !52
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %22) #3, !dbg !53
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %22) #3, !dbg !53
  %91 = fadd float %59, 0x3EE4F8B580000000, !dbg !54
  %92 = fadd float %61, 0x3EE4F8B580000000, !dbg !54
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %93, 0, !dbg !55
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %94, 0, !dbg !55
  br i1 %.not.i, label %100, label %95, !dbg !55

95:                                               ; preds = %15
  br i1 %.not1.i, label %98, label %96, !dbg !55

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

100:                                              ; preds = %15
  br i1 %.not1.i, label %103, label %101, !dbg !55

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !55
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %105, 0, !dbg !55
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i4 = icmp eq i32 %106, 0, !dbg !55
  br i1 %.not.i1, label %112, label %107, !dbg !55

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !55

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !55

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

__nv_sqrtf.exit5:                                 ; preds = %108, %110, %113, %115
  %.0.i3 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !55
  %117 = extractvalue { i32, i32 } %30, 1, !dbg !21
  %118 = bitcast i32 %117 to float, !dbg !21
  %119 = bitcast i32 %34 to float, !dbg !23
  %120 = fadd float %118, %119, !dbg !56
  %121 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %122 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !27
  %123 = insertelement <2 x i32> %122, i32 %86, i64 1, !dbg !27
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !27
  %125 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %126 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !25
  %127 = insertelement <2 x i32> %126, i32 %53, i64 1, !dbg !25
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !25
  %129 = fadd <2 x float> %128, %124, !dbg !57
  %130 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !29
  %131 = insertelement <2 x i32> %130, i32 %90, i64 1, !dbg !29
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !29
  %133 = fadd <2 x float> %129, %132, !dbg !58
  %134 = extractelement <2 x float> %133, i64 0, !dbg !59
  %135 = fadd float %120, %134, !dbg !59
  %136 = extractelement <2 x float> %133, i64 1, !dbg !60
  %137 = fadd float %135, %136, !dbg !60
  %138 = bitcast i32 %56 to float, !dbg !37
  %139 = fsub float %137, %138, !dbg !61
  %140 = extractvalue { i32, i32 } %30, 0, !dbg !21
  %141 = bitcast i32 %140 to float, !dbg !21
  %142 = bitcast i32 %33 to float, !dbg !23
  %143 = fadd float %141, %142, !dbg !56
  %144 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %145 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !27
  %146 = insertelement <2 x i32> %145, i32 %85, i64 1, !dbg !27
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !27
  %148 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %149 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !25
  %150 = insertelement <2 x i32> %149, i32 %52, i64 1, !dbg !25
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !25
  %152 = fadd <2 x float> %151, %147, !dbg !57
  %153 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !29
  %154 = insertelement <2 x i32> %153, i32 %89, i64 1, !dbg !29
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !29
  %156 = fadd <2 x float> %152, %155, !dbg !58
  %157 = extractelement <2 x float> %156, i64 0, !dbg !59
  %158 = fadd float %143, %157, !dbg !59
  %159 = extractelement <2 x float> %156, i64 1, !dbg !60
  %160 = fadd float %158, %159, !dbg !60
  %161 = bitcast i32 %55 to float, !dbg !37
  %162 = fsub float %160, %161, !dbg !61
  %163 = bitcast i32 %67 to float, !dbg !43
  %164 = bitcast i32 %66 to float, !dbg !43
  %165 = bitcast i32 %64 to float, !dbg !41
  %166 = bitcast i32 %63 to float, !dbg !41
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !62
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !62
  %169 = fmul float %162, %167, !dbg !63
  %170 = fmul float %139, %168, !dbg !63
  %171 = fmul float %169, %166, !dbg !64
  %172 = fmul float %170, %165, !dbg !64
  %173 = fadd float %171, %164, !dbg !65
  %174 = fadd float %172, %163, !dbg !65
  %175 = fcmp olt float %173, 0.000000e+00, !dbg !66
  %176 = fcmp olt float %174, 0.000000e+00, !dbg !66
  %177 = select i1 %175, float 0.000000e+00, float %173, !dbg !70
  %178 = select i1 %176, float 0.000000e+00, float %174, !dbg !70
  %179 = bitcast float %160 to i32, !dbg !71
  %180 = bitcast float %137 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %29, i1 %22) #3, !dbg !71
  %181 = getelementptr float, ptr addrspace(1) %13, i64 %28, !dbg !72
  %182 = bitcast float %177 to i32, !dbg !73
  %183 = bitcast float %178 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %181, i1 %22) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cetvkilyysl6yvo3o3hgdsozpkfqrxpv65befiwmyj7n7efjkhzq.py", directory: "inductor_cache/et")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_33", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 36, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 48, column: 35, scope: !7)
!45 = !DILocation(line: 51, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 41, scope: !7)
!47 = !DILocation(line: 52, column: 52, scope: !7)
!48 = !DILocation(line: 52, column: 49, scope: !7)
!49 = !DILocation(line: 52, column: 39, scope: !7)
!50 = !DILocation(line: 52, column: 31, scope: !7)
!51 = !DILocation(line: 52, column: 57, scope: !7)
!52 = !DILocation(line: 54, column: 31, scope: !7)
!53 = !DILocation(line: 54, column: 57, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 60, column: 27, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 42, column: 18, scope: !7)
!58 = !DILocation(line: 43, column: 18, scope: !7)
!59 = !DILocation(line: 44, column: 18, scope: !7)
!60 = !DILocation(line: 56, column: 19, scope: !7)
!61 = !DILocation(line: 57, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 69, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 70, column: 40, scope: !7)
!72 = !DILocation(line: 71, column: 25, scope: !7)
!73 = !DILocation(line: 71, column: 37, scope: !7)
!74 = !DILocation(line: 71, column: 4, scope: !7)
