; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 64, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 9, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = and i32 %10, 127, !dbg !14
  %14 = or disjoint i32 %13, 128, !dbg !14
  %15 = or disjoint i32 %13, 256, !dbg !14
  %16 = or disjoint i32 %13, 384, !dbg !14
  %17 = or disjoint i32 %9, %12, !dbg !15
  %18 = or disjoint i32 %9, %13, !dbg !15
  %19 = or disjoint i32 %9, %14, !dbg !15
  %20 = or disjoint i32 %9, %15, !dbg !15
  %21 = or disjoint i32 %9, %16, !dbg !15
  %22 = icmp slt i32 %17, 640, !dbg !16
  %23 = icmp slt i32 %18, 640, !dbg !16
  %24 = icmp slt i32 %19, 640, !dbg !16
  %25 = icmp slt i32 %20, 640, !dbg !16
  %26 = icmp slt i32 %21, 640, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %27 = sdiv i32 %.frozen, 4, !dbg !17
  %28 = mul i32 %27, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %.frozen2 = freeze i32 %6, !dbg !19
  %29 = sdiv i32 %.frozen2, 16, !dbg !19
  %30 = mul i32 %29, 16, !dbg !20
  %.decomposed3 = sub i32 %.frozen2, %30, !dbg !20
  %31 = mul nsw i32 %.decomposed, 1280, !dbg !21
  %32 = mul i32 %27, 10240, !dbg !22
  %33 = add i32 %32, %31, !dbg !23
  %34 = add i32 %33, %17, !dbg !24
  %35 = sext i32 %34 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %7, %22, !dbg !26
  %38 = and i1 %7, %23, !dbg !26
  %39 = and i1 %7, %24, !dbg !26
  %40 = and i1 %7, %25, !dbg !26
  %41 = and i1 %7, %26, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = add i32 %33, 640, !dbg !28
  %48 = add i32 %47, %17, !dbg !29
  %49 = sext i32 %48 to i64, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %37) #2, !dbg !31
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !31
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !31
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !31
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !31
  %56 = add i32 %33, 5120, !dbg !32
  %57 = add i32 %56, %17, !dbg !33
  %58 = sext i32 %57 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %37) #2, !dbg !35
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !35
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !35
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !35
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !35
  %65 = add i32 %33, 5760, !dbg !36
  %66 = add i32 %65, %17, !dbg !37
  %67 = sext i32 %66 to i64, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !38
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %37) #2, !dbg !39
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !39
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !39
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !39
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !39
  %74 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !27
  %75 = insertelement <4 x i32> %74, i32 %44, i64 1, !dbg !27
  %76 = insertelement <4 x i32> %75, i32 %45, i64 2, !dbg !27
  %77 = insertelement <4 x i32> %76, i32 %46, i64 3, !dbg !27
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !27
  %79 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !31
  %80 = insertelement <4 x i32> %79, i32 %53, i64 1, !dbg !31
  %81 = insertelement <4 x i32> %80, i32 %54, i64 2, !dbg !31
  %82 = insertelement <4 x i32> %81, i32 %55, i64 3, !dbg !31
  %83 = bitcast <4 x i32> %82 to <4 x float>, !dbg !31
  %84 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !35
  %85 = insertelement <4 x i32> %84, i32 %62, i64 1, !dbg !35
  %86 = insertelement <4 x i32> %85, i32 %63, i64 2, !dbg !35
  %87 = insertelement <4 x i32> %86, i32 %64, i64 3, !dbg !35
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !35
  %89 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !39
  %90 = insertelement <4 x i32> %89, i32 %71, i64 1, !dbg !39
  %91 = insertelement <4 x i32> %90, i32 %72, i64 2, !dbg !39
  %92 = insertelement <4 x i32> %91, i32 %73, i64 3, !dbg !39
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !39
  %94 = fcmp ogt <4 x float> %83, %78, !dbg !40
  %95 = fcmp uno <4 x float> %83, zeroinitializer, !dbg !44
  %96 = or <4 x i1> %94, %95, !dbg !45
  %.v = select <4 x i1> %96, <4 x i32> %82, <4 x i32> %77, !dbg !46
  %97 = bitcast <4 x i32> %.v to <4 x float>, !dbg !46
  %98 = fcmp olt <4 x float> %97, %88, !dbg !47
  %99 = fcmp uno <4 x float> %88, zeroinitializer, !dbg !49
  %100 = or <4 x i1> %99, %98, !dbg !50
  %.v1 = select <4 x i1> %100, <4 x i32> %87, <4 x i32> %.v, !dbg !51
  %101 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !51
  %102 = fcmp olt <4 x float> %101, %93, !dbg !52
  %103 = fcmp uno <4 x float> %93, zeroinitializer, !dbg !54
  %104 = or <4 x i1> %103, %102, !dbg !55
  %105 = extractelement <4 x i1> %104, i64 0, !dbg !55
  %106 = or <4 x i1> %103, %102, !dbg !55
  %107 = extractelement <4 x i1> %106, i64 1, !dbg !55
  %108 = or <4 x i1> %103, %102, !dbg !55
  %109 = extractelement <4 x i1> %108, i64 2, !dbg !55
  %110 = or <4 x i1> %103, %102, !dbg !55
  %111 = extractelement <4 x i1> %110, i64 3, !dbg !55
  %112 = zext <4 x i1> %94 to <4 x i8>, !dbg !56
  %113 = select <4 x i1> %98, <4 x i8> splat (i8 2), <4 x i8> %112, !dbg !57
  %114 = select <4 x i1> %102, <4 x i8> splat (i8 3), <4 x i8> %113, !dbg !58
  %115 = shl i32 %18, 4, !dbg !59
  %116 = shl i32 %19, 4, !dbg !59
  %117 = shl i32 %20, 4, !dbg !59
  %118 = shl i32 %21, 4, !dbg !59
  %119 = mul i32 %29, 10240, !dbg !60
  %120 = add i32 %119, %.decomposed3, !dbg !61
  %121 = add i32 %120, %115, !dbg !62
  %122 = add i32 %120, %116, !dbg !62
  %123 = add i32 %120, %117, !dbg !62
  %124 = add i32 %120, %118, !dbg !62
  %125 = sext i32 %121 to i64, !dbg !63
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !63
  %127 = sext i32 %122 to i64, !dbg !63
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !63
  %129 = sext i32 %123 to i64, !dbg !63
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !63
  %131 = sext i32 %124 to i64, !dbg !63
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !63
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %134 = extractelement <4 x i32> %.v1, i64 0, !dbg !64
  %135 = select i1 %105, i32 %70, i32 %134, !dbg !65
  %136 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %136, i1 true) #2, !dbg !64
  %137 = or disjoint i32 %12, 1, !dbg !64
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !64
  %139 = extractelement <4 x i32> %.v1, i64 1, !dbg !64
  %140 = select i1 %107, i32 %71, i32 %139, !dbg !65
  %141 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %141, i1 true) #2, !dbg !64
  %142 = or disjoint i32 %12, 2, !dbg !64
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !64
  %144 = extractelement <4 x i32> %.v1, i64 2, !dbg !64
  %145 = select i1 %109, i32 %72, i32 %144, !dbg !65
  %146 = insertelement <1 x i32> poison, i32 %145, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %146, i1 true) #2, !dbg !64
  %147 = or disjoint i32 %12, 3, !dbg !64
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !64
  %149 = extractelement <4 x i32> %.v1, i64 3, !dbg !64
  %150 = select i1 %111, i32 %73, i32 %149, !dbg !65
  %151 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %151, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !64
  %153 = load i32, ptr addrspace(3) %152, align 4, !dbg !64
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !64
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !64
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !64
  %157 = load i32, ptr addrspace(3) %156, align 4, !dbg !64
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !64
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %126, i1 %38) #2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %128, i1 %39) #2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %130, i1 %40) #2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %132, i1 %41) #2, !dbg !64
  %160 = mul i32 %6, 640, !dbg !66
  %161 = add i32 %17, %160, !dbg !67
  %162 = sext i32 %161 to i64, !dbg !68
  %163 = getelementptr i8, ptr addrspace(1) %2, i64 %162, !dbg !68
  %164 = bitcast <4 x i8> %114 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %163, i1 %37) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjjylk435scqsbno747fvh5nre6edxu54b5lpd2aygahezotzk3j.py", directory: "inductor_cache/jj")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 51, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 45, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 64, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 35, column: 41, scope: !7)
!29 = !DILocation(line: 35, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 62, scope: !7)
!32 = !DILocation(line: 36, column: 42, scope: !7)
!33 = !DILocation(line: 36, column: 52, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 63, scope: !7)
!36 = !DILocation(line: 37, column: 42, scope: !7)
!37 = !DILocation(line: 37, column: 52, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 63, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 39, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 51, column: 33, scope: !7)
!60 = !DILocation(line: 51, column: 44, scope: !7)
!61 = !DILocation(line: 51, column: 30, scope: !7)
!62 = !DILocation(line: 51, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 55, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!66 = !DILocation(line: 52, column: 34, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 25, scope: !7)
!69 = !DILocation(line: 52, column: 46, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
