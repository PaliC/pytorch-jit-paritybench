; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_native_batch_norm_backward_repeat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = and i32 %13, 1, !dbg !12
  %17 = shl nuw nsw i32 %16, 1, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = icmp slt i32 %18, 64, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = or disjoint i32 %21, %17, !dbg !17
  %23 = icmp slt i32 %22, 4, !dbg !18
  %24 = sdiv i32 %18, 16, !dbg !19
  %25 = shl i32 %18, 2, !dbg !20
  %26 = add i32 %22, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = and i1 %19, %23, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %29) #4, !dbg !24
  %31 = shl nsw i32 %24, 2, !dbg !25
  %32 = add i32 %31, %22, !dbg !26
  %33 = sext i32 %32 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !27
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %29) #4, !dbg !28
  %36 = sext i32 %22 to i64, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !31
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !32
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !32
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !32
  %43 = bitcast i32 %41 to float, !dbg !32
  %44 = bitcast i32 %42 to float, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !33
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %23) #4, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !35
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %23) #4, !dbg !36
  %49 = fadd float %43, 0x3EE4F8B580000000, !dbg !37
  %50 = fadd float %44, 0x3EE4F8B580000000, !dbg !37
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %51, 0, !dbg !38
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %52, 0, !dbg !38
  br i1 %.not.i, label %58, label %53, !dbg !38

53:                                               ; preds = %10
  br i1 %.not1.i, label %56, label %54, !dbg !38

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

58:                                               ; preds = %10
  br i1 %.not1.i, label %61, label %59, !dbg !38

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !38
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i5 = icmp eq i32 %63, 0, !dbg !38
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i8 = icmp eq i32 %64, 0, !dbg !38
  br i1 %.not.i5, label %70, label %65, !dbg !38

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %68, label %66, !dbg !38

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit9, !dbg !38

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit9, !dbg !38

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %73, label %71, !dbg !38

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit9, !dbg !38

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !38
  br label %__nv_sqrtf.exit9, !dbg !38

__nv_sqrtf.exit9:                                 ; preds = %66, %68, %71, %73
  %.0.i7 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !38
  %75 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %76 = bitcast i32 %75 to float, !dbg !24
  %77 = extractvalue { i32, i32 } %35, 1, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = fadd float %76, %78, !dbg !39
  %80 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = fsub float %79, %81, !dbg !40
  %83 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = extractvalue { i32, i32 } %35, 0, !dbg !28
  %86 = bitcast i32 %85 to float, !dbg !28
  %87 = fadd float %84, %86, !dbg !39
  %88 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = fsub float %87, %89, !dbg !40
  %91 = extractvalue { i32, i32 } %48, 1, !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = extractvalue { i32, i32 } %48, 0, !dbg !36
  %94 = bitcast i32 %93 to float, !dbg !36
  %95 = extractvalue { i32, i32 } %46, 1, !dbg !34
  %96 = bitcast i32 %95 to float, !dbg !34
  %97 = extractvalue { i32, i32 } %46, 0, !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %.lobit12 = lshr i32 %13, 5, !dbg !41
  %99 = and i32 %.lobit12, 3, !dbg !41
  %100 = or disjoint i32 %21, %99, !dbg !17
  %101 = icmp slt i32 %100, 4, !dbg !18
  %102 = shl i32 %13, 1, !dbg !12
  %103 = and i32 %102, 62, !dbg !12
  %104 = or disjoint i32 %12, %103, !dbg !13
  %105 = icmp slt i32 %104, 64, !dbg !14
  %106 = and i1 %105, %101, !dbg !23
  %.frozen = freeze i32 %104, !dbg !19
  %107 = sdiv i32 %.frozen, 16, !dbg !19
  %108 = mul i32 %107, 16, !dbg !42
  %.decomposed = sub i32 %.frozen, %108, !dbg !42
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !43
  %111 = fmul float %90, %109, !dbg !44
  %112 = fmul float %82, %110, !dbg !44
  %113 = fmul float %111, %98, !dbg !45
  %114 = fmul float %112, %96, !dbg !45
  %115 = fadd float %113, %94, !dbg !46
  %116 = fadd float %114, %92, !dbg !46
  %117 = fcmp ogt float %115, 0.000000e+00, !dbg !47
  %118 = fcmp ogt float %116, 0.000000e+00, !dbg !47
  %119 = fmul float %115, 0x3F847AE140000000, !dbg !48
  %120 = fmul float %116, 0x3F847AE140000000, !dbg !48
  %121 = select i1 %117, float %115, float %119, !dbg !49
  %122 = select i1 %118, float %116, float %120, !dbg !49
  %123 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !50
  %124 = bitcast float %90 to i32, !dbg !51
  %125 = bitcast float %82 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %29) #4, !dbg !51
  %126 = shl i32 %100, 4, !dbg !52
  %127 = add i32 %126, %.decomposed, !dbg !53
  %128 = shl i32 %107, 6, !dbg !54
  %129 = add i32 %127, %128, !dbg !55
  %130 = sext i32 %129 to i64, !dbg !56
  %131 = getelementptr float, ptr addrspace(1) %7, i64 %130, !dbg !56
  %132 = shl nuw nsw i32 %16, 7, !dbg !57
  %133 = or disjoint i32 %132, %15, !dbg !57
  %134 = and i32 %102, 254, !dbg !57
  %.idx = shl nuw nsw i32 %16, 4, !dbg !57
  %135 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !57
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !57
  %137 = bitcast float %121 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !57
  %138 = or disjoint i32 %133, 64, !dbg !57
  %139 = lshr i32 %138, 5, !dbg !57
  %140 = and i32 %139, 6, !dbg !57
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !57
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !57
  %143 = bitcast float %122 to <1 x i32>, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #4, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %144 = lshr i32 %102, 5, !dbg !57
  %145 = and i32 %144, 6, !dbg !57
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !57
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %134, !dbg !57
  %.extract = load i32, ptr addrspace(3) %147, align 8, !dbg !57
  %148 = getelementptr inbounds i8, ptr addrspace(3) %147, i32 4, !dbg !57
  %.extract4 = load i32, ptr addrspace(3) %148, align 4, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %131, i1 %106) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmrqyeojinuyc7cfjrse7p2xc75bf62hxezk56jsz3zfy3kwwwgn.py", directory: "inductor_cache/mr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_native_batch_norm_backward_repeat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_native_batch_norm_backward_repeat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_native_batch_norm_backward_repeat_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_native_batch_norm_backward_repeat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 33, column: 37, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 42, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 26, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 26, column: 44, scope: !7)
!42 = !DILocation(line: 31, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 43, scope: !7)
!52 = !DILocation(line: 56, column: 33, scope: !7)
!53 = !DILocation(line: 56, column: 30, scope: !7)
!54 = !DILocation(line: 56, column: 41, scope: !7)
!55 = !DILocation(line: 56, column: 38, scope: !7)
!56 = !DILocation(line: 56, column: 25, scope: !7)
!57 = !DILocation(line: 56, column: 53, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
