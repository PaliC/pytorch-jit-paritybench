; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__log_softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 4096, !dbg !14
  %.frozen1 = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen1, 4096, !dbg !14
  %14 = srem i32 %12, 6, !dbg !15
  %15 = srem i32 %13, 6, !dbg !15
  %16 = mul i32 %12, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = mul i32 %13, 4096, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !16
  %18 = sdiv i32 %10, 8192, !dbg !17
  %19 = sdiv i32 %11, 8192, !dbg !17
  %20 = srem i32 %18, 3, !dbg !18
  %21 = srem i32 %19, 3, !dbg !18
  %22 = sext i32 %10 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = sext i32 %11 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = sext i32 %14 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !21
  %46 = sext i32 %15 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %59 = bitcast i32 %58 to float, !dbg !22
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = shl nsw i32 %18, 13, !dbg !23
  %65 = shl nsw i32 %19, 13, !dbg !23
  %66 = add i32 %64, %.decomposed, !dbg !24
  %67 = add i32 %65, %.decomposed2, !dbg !24
  %68 = sext i32 %66 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %67 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !26
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = shl nsw i32 %20, 1, !dbg !27
  %83 = shl nsw i32 %21, 1, !dbg !27
  %84 = sext i32 %82 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !28
  %86 = sext i32 %83 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !28
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !29
  %96 = add i32 %66, 4096, !dbg !30
  %97 = add i32 %67, 4096, !dbg !30
  %98 = sext i32 %96 to i64, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !31
  %100 = sext i32 %97 to i64, !dbg !31
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !31
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !32
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !32
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !32
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !32
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !32
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !32
  %112 = or disjoint i32 %82, 1, !dbg !33
  %113 = or disjoint i32 %83, 1, !dbg !33
  %114 = sext i32 %112 to i64, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !34
  %116 = sext i32 %113 to i64, !dbg !34
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !34
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !35
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !35
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !35
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !35
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !35
  %126 = fadd float %31, %49, !dbg !36
  %127 = fadd float %32, %51, !dbg !36
  %128 = fadd float %33, %53, !dbg !36
  %129 = fadd float %34, %55, !dbg !36
  %130 = fadd float %40, %57, !dbg !36
  %131 = fadd float %41, %59, !dbg !36
  %132 = fadd float %42, %61, !dbg !36
  %133 = fadd float %43, %63, !dbg !36
  %134 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !26
  %135 = insertelement <2 x i32> %134, i32 %103, i64 1, !dbg !26
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !26
  %137 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !29
  %138 = insertelement <2 x i32> %137, i32 %118, i64 1, !dbg !29
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !29
  %140 = fadd <2 x float> %136, %139, !dbg !37
  %141 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !26
  %142 = insertelement <2 x i32> %141, i32 %104, i64 1, !dbg !26
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !26
  %144 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !29
  %145 = insertelement <2 x i32> %144, i32 %119, i64 1, !dbg !29
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !29
  %147 = fadd <2 x float> %143, %146, !dbg !37
  %148 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !26
  %149 = insertelement <2 x i32> %148, i32 %105, i64 1, !dbg !26
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !26
  %151 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !29
  %152 = insertelement <2 x i32> %151, i32 %120, i64 1, !dbg !29
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !29
  %154 = fadd <2 x float> %150, %153, !dbg !37
  %155 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !26
  %156 = insertelement <2 x i32> %155, i32 %106, i64 1, !dbg !26
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !26
  %158 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !29
  %159 = insertelement <2 x i32> %158, i32 %121, i64 1, !dbg !29
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !29
  %161 = fadd <2 x float> %157, %160, !dbg !37
  %162 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !26
  %163 = insertelement <2 x i32> %162, i32 %108, i64 1, !dbg !26
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !26
  %165 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !29
  %166 = insertelement <2 x i32> %165, i32 %122, i64 1, !dbg !29
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !29
  %168 = fadd <2 x float> %164, %167, !dbg !37
  %169 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !26
  %170 = insertelement <2 x i32> %169, i32 %109, i64 1, !dbg !26
  %171 = bitcast <2 x i32> %170 to <2 x float>, !dbg !26
  %172 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !29
  %173 = insertelement <2 x i32> %172, i32 %123, i64 1, !dbg !29
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !29
  %175 = fadd <2 x float> %171, %174, !dbg !37
  %176 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !26
  %177 = insertelement <2 x i32> %176, i32 %110, i64 1, !dbg !26
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !26
  %179 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !29
  %180 = insertelement <2 x i32> %179, i32 %124, i64 1, !dbg !29
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !29
  %182 = fadd <2 x float> %178, %181, !dbg !37
  %183 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !26
  %184 = insertelement <2 x i32> %183, i32 %111, i64 1, !dbg !26
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !26
  %186 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !29
  %187 = insertelement <2 x i32> %186, i32 %125, i64 1, !dbg !29
  %188 = bitcast <2 x i32> %187 to <2 x float>, !dbg !29
  %189 = fadd <2 x float> %185, %188, !dbg !37
  %190 = extractelement <2 x float> %140, i64 0, !dbg !38
  %191 = extractelement <2 x float> %140, i64 1, !dbg !38
  %192 = fcmp ogt float %190, %191, !dbg !42
  %193 = extractelement <2 x float> %147, i64 0, !dbg !38
  %194 = extractelement <2 x float> %147, i64 1, !dbg !38
  %195 = fcmp ogt float %193, %194, !dbg !42
  %196 = extractelement <2 x float> %154, i64 0, !dbg !38
  %197 = extractelement <2 x float> %154, i64 1, !dbg !38
  %198 = fcmp ogt float %196, %197, !dbg !42
  %199 = extractelement <2 x float> %161, i64 0, !dbg !38
  %200 = extractelement <2 x float> %161, i64 1, !dbg !38
  %201 = fcmp ogt float %199, %200, !dbg !42
  %202 = extractelement <2 x float> %168, i64 0, !dbg !38
  %203 = extractelement <2 x float> %168, i64 1, !dbg !38
  %204 = fcmp ogt float %202, %203, !dbg !42
  %205 = extractelement <2 x float> %175, i64 0, !dbg !38
  %206 = extractelement <2 x float> %175, i64 1, !dbg !38
  %207 = fcmp ogt float %205, %206, !dbg !42
  %208 = extractelement <2 x float> %182, i64 0, !dbg !38
  %209 = extractelement <2 x float> %182, i64 1, !dbg !38
  %210 = fcmp ogt float %208, %209, !dbg !42
  %211 = extractelement <2 x float> %189, i64 0, !dbg !38
  %212 = extractelement <2 x float> %189, i64 1, !dbg !38
  %213 = fcmp ogt float %211, %212, !dbg !42
  %214 = fcmp uno float %190, 0.000000e+00, !dbg !43
  %215 = fcmp uno float %193, 0.000000e+00, !dbg !43
  %216 = fcmp uno float %196, 0.000000e+00, !dbg !43
  %217 = fcmp uno float %199, 0.000000e+00, !dbg !43
  %218 = fcmp uno float %202, 0.000000e+00, !dbg !43
  %219 = fcmp uno float %205, 0.000000e+00, !dbg !43
  %220 = fcmp uno float %208, 0.000000e+00, !dbg !43
  %221 = fcmp uno float %211, 0.000000e+00, !dbg !43
  %222 = or i1 %214, %192, !dbg !44
  %223 = or i1 %215, %195, !dbg !44
  %224 = or i1 %216, %198, !dbg !44
  %225 = or i1 %217, %201, !dbg !44
  %226 = or i1 %218, %204, !dbg !44
  %227 = or i1 %219, %207, !dbg !44
  %228 = or i1 %220, %210, !dbg !44
  %229 = or i1 %221, %213, !dbg !44
  %230 = select i1 %222, float %190, float %191, !dbg !38
  %231 = select i1 %223, float %193, float %194, !dbg !38
  %232 = select i1 %224, float %196, float %197, !dbg !38
  %233 = select i1 %225, float %199, float %200, !dbg !38
  %234 = select i1 %226, float %202, float %203, !dbg !38
  %235 = select i1 %227, float %205, float %206, !dbg !38
  %236 = select i1 %228, float %208, float %209, !dbg !38
  %237 = select i1 %229, float %211, float %212, !dbg !38
  %238 = fsub float %126, %230, !dbg !45
  %239 = fsub float %127, %231, !dbg !45
  %240 = fsub float %128, %232, !dbg !45
  %241 = fsub float %129, %233, !dbg !45
  %242 = fsub float %130, %234, !dbg !45
  %243 = fsub float %131, %235, !dbg !45
  %244 = fsub float %132, %236, !dbg !45
  %245 = fsub float %133, %237, !dbg !45
  %246 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !46
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !46
  %248 = bitcast float %238 to i32, !dbg !47
  %249 = bitcast float %239 to i32, !dbg !47
  %250 = bitcast float %240 to i32, !dbg !47
  %251 = bitcast float %241 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %246, i1 true) #1, !dbg !47
  %252 = bitcast float %242 to i32, !dbg !47
  %253 = bitcast float %243 to i32, !dbg !47
  %254 = bitcast float %244 to i32, !dbg !47
  %255 = bitcast float %245 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %252, i32 %253, i32 %254, i32 %255, ptr addrspace(1) %247, i1 true) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqze5n63knh4lnfilnwcppdqv7lj7hztdiw3aexri4ogmr3rfyy.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused__log_softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__log_softmax_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__log_softmax_1", linkageName: "triton_poi_fused__log_softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 40, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 45, scope: !7)
!27 = !DILocation(line: 32, column: 32, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 34, column: 34, scope: !7)
!34 = !DILocation(line: 34, column: 30, scope: !7)
!35 = !DILocation(line: 34, column: 41, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 38, column: 40, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 25, scope: !7)
!47 = !DILocation(line: 40, column: 37, scope: !7)
!48 = !DILocation(line: 40, column: 4, scope: !7)
