; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 128, !dbg !14
  %21 = sext i32 %18 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !24
  %43 = sext i32 %20 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = bitcast i32 %51 to float, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !29
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !30
  %69 = getelementptr float, ptr addrspace(1) %8, i64 %43, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !32
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !32
  %72 = fadd float %53, 0x3EE4F8B580000000, !dbg !33
  %73 = fadd float %54, 0x3EE4F8B580000000, !dbg !33
  %74 = fadd float %55, 0x3EE4F8B580000000, !dbg !33
  %75 = fadd float %56, 0x3EE4F8B580000000, !dbg !33
  %76 = fadd float %62, 0x3EE4F8B580000000, !dbg !33
  %77 = fadd float %63, 0x3EE4F8B580000000, !dbg !33
  %78 = fadd float %64, 0x3EE4F8B580000000, !dbg !33
  %79 = fadd float %65, 0x3EE4F8B580000000, !dbg !33
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i = icmp eq i32 %80, 0, !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i = icmp eq i32 %81, 0, !dbg !34
  br i1 %.not.i, label %87, label %82, !dbg !34

82:                                               ; preds = %12
  br i1 %.not1.i, label %85, label %83, !dbg !34

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

87:                                               ; preds = %12
  br i1 %.not1.i, label %90, label %88, !dbg !34

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !34
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i1 = icmp eq i32 %92, 0, !dbg !34
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !34
  br i1 %.not.i1, label %99, label %94, !dbg !34

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !34

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !34

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !34
  br label %__nv_sqrtf.exit5, !dbg !34

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !34
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i6 = icmp eq i32 %104, 0, !dbg !34
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i9 = icmp eq i32 %105, 0, !dbg !34
  br i1 %.not.i6, label %111, label %106, !dbg !34

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !34

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !34

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !34
  br label %__nv_sqrtf.exit10, !dbg !34

__nv_sqrtf.exit10:                                ; preds = %107, %109, %112, %114
  %.0.i8 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !34
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i11 = icmp eq i32 %116, 0, !dbg !34
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i14 = icmp eq i32 %117, 0, !dbg !34
  br i1 %.not.i11, label %123, label %118, !dbg !34

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !34

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !34

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !34
  br label %__nv_sqrtf.exit15, !dbg !34

__nv_sqrtf.exit15:                                ; preds = %119, %121, %124, %126
  %.0.i13 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !34
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i16 = icmp eq i32 %128, 0, !dbg !34
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i19 = icmp eq i32 %129, 0, !dbg !34
  br i1 %.not.i16, label %135, label %130, !dbg !34

130:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %133, label %131, !dbg !34

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

135:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %138, label %136, !dbg !34

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !34
  br label %__nv_sqrtf.exit20, !dbg !34

__nv_sqrtf.exit20:                                ; preds = %131, %133, %136, %138
  %.0.i18 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !34
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i21 = icmp eq i32 %140, 0, !dbg !34
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i24 = icmp eq i32 %141, 0, !dbg !34
  br i1 %.not.i21, label %147, label %142, !dbg !34

142:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %145, label %143, !dbg !34

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

147:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %150, label %148, !dbg !34

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !34
  br label %__nv_sqrtf.exit25, !dbg !34

__nv_sqrtf.exit25:                                ; preds = %143, %145, %148, %150
  %.0.i23 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !34
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i26 = icmp eq i32 %152, 0, !dbg !34
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i29 = icmp eq i32 %153, 0, !dbg !34
  br i1 %.not.i26, label %159, label %154, !dbg !34

154:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %157, label %155, !dbg !34

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

159:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %162, label %160, !dbg !34

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !34
  br label %__nv_sqrtf.exit30, !dbg !34

__nv_sqrtf.exit30:                                ; preds = %155, %157, %160, %162
  %.0.i28 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !34
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !34
  %.not.i31 = icmp eq i32 %164, 0, !dbg !34
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !34
  %.not1.i34 = icmp eq i32 %165, 0, !dbg !34
  br i1 %.not.i31, label %171, label %166, !dbg !34

166:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %169, label %167, !dbg !34

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

171:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %174, label %172, !dbg !34

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !34
  br label %__nv_sqrtf.exit35, !dbg !34

__nv_sqrtf.exit35:                                ; preds = %167, %169, %172, %174
  %.0.i33 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %181 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %188 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %190 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %193 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %194 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %195 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %196 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %197 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %198 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %199 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %200 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %201 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %202 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %203 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %204 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %206 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %207 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %209 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %210 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %213 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %214 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %215 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %216 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %217 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %218 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %219 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %220 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %221 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %222 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %223 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %224 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !32
  %225 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !32
  %226 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !32
  %228 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %229 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %230 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %231 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %232 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %233 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %235 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %236 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %237 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %238 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %239 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !35
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !35
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !35
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !35
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !35
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !35
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !35
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !35
  %248 = insertelement <8 x i32> poison, i32 %176, i64 0, !dbg !16
  %249 = insertelement <8 x i32> %248, i32 %182, i64 1, !dbg !16
  %250 = insertelement <8 x i32> %249, i32 %188, i64 2, !dbg !16
  %251 = insertelement <8 x i32> %250, i32 %194, i64 3, !dbg !16
  %252 = insertelement <8 x i32> %251, i32 %200, i64 4, !dbg !16
  %253 = insertelement <8 x i32> %252, i32 %206, i64 5, !dbg !16
  %254 = insertelement <8 x i32> %253, i32 %212, i64 6, !dbg !16
  %255 = insertelement <8 x i32> %254, i32 %218, i64 7, !dbg !16
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !16
  %257 = insertelement <8 x i32> poison, i32 %177, i64 0, !dbg !18
  %258 = insertelement <8 x i32> %257, i32 %183, i64 1, !dbg !18
  %259 = insertelement <8 x i32> %258, i32 %189, i64 2, !dbg !18
  %260 = insertelement <8 x i32> %259, i32 %195, i64 3, !dbg !18
  %261 = insertelement <8 x i32> %260, i32 %201, i64 4, !dbg !18
  %262 = insertelement <8 x i32> %261, i32 %207, i64 5, !dbg !18
  %263 = insertelement <8 x i32> %262, i32 %213, i64 6, !dbg !18
  %264 = insertelement <8 x i32> %263, i32 %219, i64 7, !dbg !18
  %265 = bitcast <8 x i32> %264 to <8 x float>, !dbg !18
  %266 = fadd <8 x float> %256, %265, !dbg !36
  %267 = insertelement <8 x i32> poison, i32 %178, i64 0, !dbg !20
  %268 = insertelement <8 x i32> %267, i32 %184, i64 1, !dbg !20
  %269 = insertelement <8 x i32> %268, i32 %190, i64 2, !dbg !20
  %270 = insertelement <8 x i32> %269, i32 %196, i64 3, !dbg !20
  %271 = insertelement <8 x i32> %270, i32 %202, i64 4, !dbg !20
  %272 = insertelement <8 x i32> %271, i32 %208, i64 5, !dbg !20
  %273 = insertelement <8 x i32> %272, i32 %214, i64 6, !dbg !20
  %274 = insertelement <8 x i32> %273, i32 %220, i64 7, !dbg !20
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !20
  %276 = fadd <8 x float> %266, %275, !dbg !37
  %277 = insertelement <8 x i32> poison, i32 %179, i64 0, !dbg !22
  %278 = insertelement <8 x i32> %277, i32 %185, i64 1, !dbg !22
  %279 = insertelement <8 x i32> %278, i32 %191, i64 2, !dbg !22
  %280 = insertelement <8 x i32> %279, i32 %197, i64 3, !dbg !22
  %281 = insertelement <8 x i32> %280, i32 %203, i64 4, !dbg !22
  %282 = insertelement <8 x i32> %281, i32 %209, i64 5, !dbg !22
  %283 = insertelement <8 x i32> %282, i32 %215, i64 6, !dbg !22
  %284 = insertelement <8 x i32> %283, i32 %221, i64 7, !dbg !22
  %285 = bitcast <8 x i32> %284 to <8 x float>, !dbg !22
  %286 = fadd <8 x float> %276, %285, !dbg !38
  %287 = insertelement <8 x i32> poison, i32 %180, i64 0, !dbg !24
  %288 = insertelement <8 x i32> %287, i32 %186, i64 1, !dbg !24
  %289 = insertelement <8 x i32> %288, i32 %192, i64 2, !dbg !24
  %290 = insertelement <8 x i32> %289, i32 %198, i64 3, !dbg !24
  %291 = insertelement <8 x i32> %290, i32 %204, i64 4, !dbg !24
  %292 = insertelement <8 x i32> %291, i32 %210, i64 5, !dbg !24
  %293 = insertelement <8 x i32> %292, i32 %216, i64 6, !dbg !24
  %294 = insertelement <8 x i32> %293, i32 %222, i64 7, !dbg !24
  %295 = bitcast <8 x i32> %294 to <8 x float>, !dbg !24
  %296 = fadd <8 x float> %286, %295, !dbg !39
  %297 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !26
  %298 = insertelement <8 x i32> %297, i32 %187, i64 1, !dbg !26
  %299 = insertelement <8 x i32> %298, i32 %193, i64 2, !dbg !26
  %300 = insertelement <8 x i32> %299, i32 %199, i64 3, !dbg !26
  %301 = insertelement <8 x i32> %300, i32 %205, i64 4, !dbg !26
  %302 = insertelement <8 x i32> %301, i32 %211, i64 5, !dbg !26
  %303 = insertelement <8 x i32> %302, i32 %217, i64 6, !dbg !26
  %304 = insertelement <8 x i32> %303, i32 %223, i64 7, !dbg !26
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !26
  %306 = fsub <8 x float> %296, %305, !dbg !40
  %307 = insertelement <8 x i32> poison, i32 %224, i64 0, !dbg !32
  %308 = insertelement <8 x i32> %307, i32 %225, i64 1, !dbg !32
  %309 = insertelement <8 x i32> %308, i32 %226, i64 2, !dbg !32
  %310 = insertelement <8 x i32> %309, i32 %227, i64 3, !dbg !32
  %311 = insertelement <8 x i32> %310, i32 %228, i64 4, !dbg !32
  %312 = insertelement <8 x i32> %311, i32 %229, i64 5, !dbg !32
  %313 = insertelement <8 x i32> %312, i32 %230, i64 6, !dbg !32
  %314 = insertelement <8 x i32> %313, i32 %231, i64 7, !dbg !32
  %315 = bitcast <8 x i32> %314 to <8 x float>, !dbg !32
  %316 = insertelement <8 x i32> poison, i32 %232, i64 0, !dbg !30
  %317 = insertelement <8 x i32> %316, i32 %233, i64 1, !dbg !30
  %318 = insertelement <8 x i32> %317, i32 %234, i64 2, !dbg !30
  %319 = insertelement <8 x i32> %318, i32 %235, i64 3, !dbg !30
  %320 = insertelement <8 x i32> %319, i32 %236, i64 4, !dbg !30
  %321 = insertelement <8 x i32> %320, i32 %237, i64 5, !dbg !30
  %322 = insertelement <8 x i32> %321, i32 %238, i64 6, !dbg !30
  %323 = insertelement <8 x i32> %322, i32 %239, i64 7, !dbg !30
  %324 = bitcast <8 x i32> %323 to <8 x float>, !dbg !30
  %325 = insertelement <8 x float> poison, float %247, i64 0, !dbg !41
  %326 = insertelement <8 x float> %325, float %246, i64 1, !dbg !41
  %327 = insertelement <8 x float> %326, float %245, i64 2, !dbg !41
  %328 = insertelement <8 x float> %327, float %244, i64 3, !dbg !41
  %329 = insertelement <8 x float> %328, float %243, i64 4, !dbg !41
  %330 = insertelement <8 x float> %329, float %242, i64 5, !dbg !41
  %331 = insertelement <8 x float> %330, float %241, i64 6, !dbg !41
  %332 = insertelement <8 x float> %331, float %240, i64 7, !dbg !41
  %333 = fmul <8 x float> %306, %332, !dbg !41
  %334 = fmul <8 x float> %333, %324, !dbg !42
  %335 = fadd <8 x float> %334, %315, !dbg !43
  %336 = fcmp olt <8 x float> %335, zeroinitializer, !dbg !44
  %337 = extractelement <8 x i1> %336, i64 7, !dbg !48
  %338 = extractelement <8 x i1> %336, i64 6, !dbg !48
  %339 = extractelement <8 x i1> %336, i64 5, !dbg !48
  %340 = extractelement <8 x i1> %336, i64 4, !dbg !48
  %341 = extractelement <8 x i1> %336, i64 3, !dbg !48
  %342 = extractelement <8 x i1> %336, i64 2, !dbg !48
  %343 = extractelement <8 x i1> %336, i64 1, !dbg !48
  %344 = extractelement <8 x i1> %336, i64 0, !dbg !48
  %345 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !49
  %346 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !49
  %bc = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %347 = extractelement <8 x i32> %bc, i64 7, !dbg !50
  %348 = select i1 %337, i32 0, i32 %347, !dbg !48
  %bc36 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %349 = extractelement <8 x i32> %bc36, i64 6, !dbg !50
  %350 = select i1 %338, i32 0, i32 %349, !dbg !48
  %bc37 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %351 = extractelement <8 x i32> %bc37, i64 5, !dbg !50
  %352 = select i1 %339, i32 0, i32 %351, !dbg !48
  %bc38 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %353 = extractelement <8 x i32> %bc38, i64 4, !dbg !50
  %354 = select i1 %340, i32 0, i32 %353, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %350, i32 %352, i32 %354, ptr addrspace(1) %345, i1 true) #3, !dbg !50
  %bc39 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %355 = extractelement <8 x i32> %bc39, i64 3, !dbg !50
  %356 = select i1 %341, i32 0, i32 %355, !dbg !48
  %bc40 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %357 = extractelement <8 x i32> %bc40, i64 2, !dbg !50
  %358 = select i1 %342, i32 0, i32 %357, !dbg !48
  %bc41 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %359 = extractelement <8 x i32> %bc41, i64 1, !dbg !50
  %360 = select i1 %343, i32 0, i32 %359, !dbg !48
  %bc42 = bitcast <8 x float> %335 to <8 x i32>, !dbg !50
  %361 = extractelement <8 x i32> %bc42, i64 0, !dbg !50
  %362 = select i1 %344, i32 0, i32 %361, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %358, i32 %360, i32 %362, ptr addrspace(1) %346, i1 true) #3, !dbg !50
  %363 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !51
  %bc43 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %365 = extractelement <8 x i32> %bc43, i64 7, !dbg !52
  %bc44 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %366 = extractelement <8 x i32> %bc44, i64 6, !dbg !52
  %bc45 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %367 = extractelement <8 x i32> %bc45, i64 5, !dbg !52
  %bc46 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %368 = extractelement <8 x i32> %bc46, i64 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %365, i32 %366, i32 %367, i32 %368, ptr addrspace(1) %363, i1 true) #3, !dbg !52
  %bc47 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %369 = extractelement <8 x i32> %bc47, i64 3, !dbg !52
  %bc48 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %370 = extractelement <8 x i32> %bc48, i64 2, !dbg !52
  %bc49 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %371 = extractelement <8 x i32> %bc49, i64 1, !dbg !52
  %bc50 = bitcast <8 x float> %306 to <8 x i32>, !dbg !52
  %372 = extractelement <8 x i32> %bc50, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %370, i32 %371, i32 %372, ptr addrspace(1) %364, i1 true) #3, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpxuyrs26qpxctf5l4vfa2qcbfcuxloodsgtdns6yrxzul2neiwf.py", directory: "inductor_cache/px")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 27, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 52, column: 25, scope: !7)
!50 = !DILocation(line: 52, column: 37, scope: !7)
!51 = !DILocation(line: 53, column: 25, scope: !7)
!52 = !DILocation(line: 53, column: 37, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
