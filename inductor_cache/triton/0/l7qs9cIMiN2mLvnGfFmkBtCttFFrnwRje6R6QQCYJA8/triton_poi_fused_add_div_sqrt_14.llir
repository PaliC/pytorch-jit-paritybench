; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 32, !dbg !13
  %16 = or disjoint i32 %14, 64, !dbg !13
  %17 = or disjoint i32 %14, 96, !dbg !13
  %18 = or disjoint i32 %14, 128, !dbg !13
  %19 = or disjoint i32 %14, 160, !dbg !13
  %20 = or disjoint i32 %14, 192, !dbg !13
  %21 = or disjoint i32 %14, 224, !dbg !13
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = icmp slt i32 %21, 256, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %32 = shl i32 %31, 2, !dbg !16
  %33 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %33, 1, !dbg !17
  %34 = and i32 %8, 3, !dbg !17
  %35 = or disjoint i32 %32, %.lobit, !dbg !18
  %36 = or disjoint i32 %35, 2, !dbg !18
  %37 = or disjoint i32 %32, %34, !dbg !18
  %38 = icmp slt i32 %35, 961, !dbg !19
  %39 = icmp slt i32 %36, 961, !dbg !19
  %40 = icmp slt i32 %37, 961, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %41 = sdiv i32 %.frozen, 64, !dbg !20
  %42 = mul i32 %41, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %42, !dbg !21
  %43 = sdiv i32 %14, 64, !dbg !20
  %44 = sdiv i32 %15, 64, !dbg !20
  %45 = sdiv i32 %16, 64, !dbg !20
  %46 = sdiv i32 %17, 64, !dbg !20
  %47 = sdiv i32 %18, 64, !dbg !20
  %48 = sdiv i32 %19, 64, !dbg !20
  %49 = sdiv i32 %20, 64, !dbg !20
  %50 = sdiv i32 %21, 64, !dbg !20
  %51 = shl i32 %35, 6, !dbg !22
  %52 = shl i32 %36, 6, !dbg !22
  %53 = mul i32 %41, 61504, !dbg !23
  %54 = add i32 %53, %.decomposed, !dbg !24
  %55 = add i32 %54, %51, !dbg !25
  %56 = add i32 %54, %52, !dbg !25
  %57 = sext i32 %55 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = and i1 %22, %38, !dbg !27
  %62 = and i1 %39, %22, !dbg !27
  %63 = and i1 %23, %40, !dbg !27
  %64 = and i1 %24, %40, !dbg !27
  %65 = and i1 %25, %40, !dbg !27
  %66 = and i1 %26, %40, !dbg !27
  %67 = and i1 %27, %40, !dbg !27
  %68 = and i1 %28, %40, !dbg !27
  %69 = and i1 %29, %40, !dbg !27
  %70 = and i1 %30, %40, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #4, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #4, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !28
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !28
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !28
  %81 = shl i32 %8, 4, !dbg !28
  %82 = and i32 %81, 1008, !dbg !28
  %83 = or disjoint i32 %82, %.lobit, !dbg !28
  %84 = and i32 %8, 127, !dbg !28
  %85 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %82, !dbg !28
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !28
  %87 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !28
  %88 = or disjoint i32 %83, 4, !dbg !28
  %89 = lshr i32 %88, 2, !dbg !28
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !28
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !28
  %92 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #4, !dbg !28
  %93 = or disjoint i32 %83, 8, !dbg !28
  %94 = lshr i32 %93, 2, !dbg !28
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !28
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !28
  %97 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !28
  %98 = or disjoint i32 %83, 12, !dbg !28
  %99 = lshr i32 %98, 2, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !28
  %102 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #4, !dbg !28
  %103 = or disjoint i32 %83, 2, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) %85, i32 %103, !dbg !28
  %105 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !28
  %106 = or disjoint i32 %83, 6, !dbg !28
  %107 = lshr i32 %106, 2, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !28
  %110 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #4, !dbg !28
  %111 = or disjoint i32 %83, 10, !dbg !28
  %112 = lshr i32 %111, 2, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !28
  %115 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !28
  %116 = or disjoint i32 %83, 14, !dbg !28
  %117 = lshr i32 %116, 2, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !28
  %120 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %121 = lshr i32 %84, 2, !dbg !28
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !28
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %84, !dbg !28
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !28
  %125 = or disjoint i32 %84, 128, !dbg !28
  %126 = lshr i32 %125, 2, !dbg !28
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %125, !dbg !28
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !28
  %130 = or disjoint i32 %84, 256, !dbg !28
  %131 = lshr i32 %130, 2, !dbg !28
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !28
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %130, !dbg !28
  %134 = load float, ptr addrspace(3) %133, align 4, !dbg !28
  %135 = or disjoint i32 %84, 384, !dbg !28
  %136 = lshr i32 %135, 2, !dbg !28
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !28
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %135, !dbg !28
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !28
  %140 = or disjoint i32 %84, 512, !dbg !28
  %141 = lshr i32 %140, 2, !dbg !28
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !28
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %140, !dbg !28
  %144 = load float, ptr addrspace(3) %143, align 4, !dbg !28
  %145 = or disjoint i32 %84, 640, !dbg !28
  %146 = lshr i32 %145, 2, !dbg !28
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !28
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %145, !dbg !28
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !28
  %150 = or disjoint i32 %84, 768, !dbg !28
  %151 = lshr i32 %150, 2, !dbg !28
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !28
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %150, !dbg !28
  %154 = load float, ptr addrspace(3) %153, align 4, !dbg !28
  %155 = or disjoint i32 %84, 896, !dbg !28
  %156 = lshr i32 %155, 2, !dbg !28
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %155, !dbg !28
  %159 = load float, ptr addrspace(3) %158, align 4, !dbg !28
  %160 = mul i32 %43, 961, !dbg !29
  %161 = mul i32 %44, 961, !dbg !29
  %162 = mul i32 %45, 961, !dbg !29
  %163 = mul i32 %46, 961, !dbg !29
  %164 = mul i32 %47, 961, !dbg !29
  %165 = mul i32 %48, 961, !dbg !29
  %166 = mul i32 %49, 961, !dbg !29
  %167 = mul i32 %50, 961, !dbg !29
  %168 = add i32 %160, %37, !dbg !30
  %169 = add i32 %37, %161, !dbg !30
  %170 = add i32 %37, %162, !dbg !30
  %171 = add i32 %37, %163, !dbg !30
  %172 = add i32 %37, %164, !dbg !30
  %173 = add i32 %37, %165, !dbg !30
  %174 = add i32 %37, %166, !dbg !30
  %175 = add i32 %37, %167, !dbg !30
  %176 = sext i32 %168 to i64, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !31
  %178 = sext i32 %169 to i64, !dbg !31
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !31
  %180 = sext i32 %170 to i64, !dbg !31
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !31
  %182 = sext i32 %171 to i64, !dbg !31
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !31
  %184 = sext i32 %172 to i64, !dbg !31
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !31
  %186 = sext i32 %173 to i64, !dbg !31
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !31
  %188 = sext i32 %174 to i64, !dbg !31
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !31
  %190 = sext i32 %175 to i64, !dbg !31
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !31
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %63) #4, !dbg !32
  %193 = bitcast i32 %192 to float, !dbg !32
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %64) #4, !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %65) #4, !dbg !32
  %197 = bitcast i32 %196 to float, !dbg !32
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %66) #4, !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %67) #4, !dbg !32
  %201 = bitcast i32 %200 to float, !dbg !32
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %68) #4, !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %69) #4, !dbg !32
  %205 = bitcast i32 %204 to float, !dbg !32
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %70) #4, !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %208, 0, !dbg !33
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %209, 0, !dbg !33
  br i1 %.not.i, label %215, label %210, !dbg !33

210:                                              ; preds = %5
  br i1 %.not1.i, label %213, label %211, !dbg !33

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

215:                                              ; preds = %5
  br i1 %.not1.i, label %218, label %216, !dbg !33

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %211, %213, %216, %218
  %.0.i = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !33
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i4 = icmp eq i32 %220, 0, !dbg !33
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i7 = icmp eq i32 %221, 0, !dbg !33
  br i1 %.not.i4, label %227, label %222, !dbg !33

222:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %225, label %223, !dbg !33

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

227:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %230, label %228, !dbg !33

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #4, !dbg !33
  br label %__nv_sqrtf.exit8, !dbg !33

__nv_sqrtf.exit8:                                 ; preds = %223, %225, %228, %230
  %.0.i6 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !33
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i9 = icmp eq i32 %232, 0, !dbg !33
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i12 = icmp eq i32 %233, 0, !dbg !33
  br i1 %.not.i9, label %239, label %234, !dbg !33

234:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %237, label %235, !dbg !33

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %197) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %197) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

239:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %242, label %240, !dbg !33

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %197) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %197) #4, !dbg !33
  br label %__nv_sqrtf.exit13, !dbg !33

__nv_sqrtf.exit13:                                ; preds = %235, %237, %240, %242
  %.0.i11 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !33
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i14 = icmp eq i32 %244, 0, !dbg !33
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i17 = icmp eq i32 %245, 0, !dbg !33
  br i1 %.not.i14, label %251, label %246, !dbg !33

246:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %249, label %247, !dbg !33

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %199) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %199) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

251:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %254, label %252, !dbg !33

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %199) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %199) #4, !dbg !33
  br label %__nv_sqrtf.exit18, !dbg !33

__nv_sqrtf.exit18:                                ; preds = %247, %249, %252, %254
  %.0.i16 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !33
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i19 = icmp eq i32 %256, 0, !dbg !33
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i22 = icmp eq i32 %257, 0, !dbg !33
  br i1 %.not.i19, label %263, label %258, !dbg !33

258:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %261, label %259, !dbg !33

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

263:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %266, label %264, !dbg !33

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #4, !dbg !33
  br label %__nv_sqrtf.exit23, !dbg !33

__nv_sqrtf.exit23:                                ; preds = %259, %261, %264, %266
  %.0.i21 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !33
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i24 = icmp eq i32 %268, 0, !dbg !33
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i27 = icmp eq i32 %269, 0, !dbg !33
  br i1 %.not.i24, label %275, label %270, !dbg !33

270:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %273, label %271, !dbg !33

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

275:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %278, label %276, !dbg !33

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #4, !dbg !33
  br label %__nv_sqrtf.exit28, !dbg !33

__nv_sqrtf.exit28:                                ; preds = %271, %273, %276, %278
  %.0.i26 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !33
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i29 = icmp eq i32 %280, 0, !dbg !33
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i32 = icmp eq i32 %281, 0, !dbg !33
  br i1 %.not.i29, label %287, label %282, !dbg !33

282:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %285, label %283, !dbg !33

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

287:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %290, label %288, !dbg !33

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #4, !dbg !33
  br label %__nv_sqrtf.exit33, !dbg !33

__nv_sqrtf.exit33:                                ; preds = %283, %285, %288, %290
  %.0.i31 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !33
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i34 = icmp eq i32 %292, 0, !dbg !33
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i37 = icmp eq i32 %293, 0, !dbg !33
  br i1 %.not.i34, label %299, label %294, !dbg !33

294:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %297, label %295, !dbg !33

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

299:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %302, label %300, !dbg !33

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #4, !dbg !33
  br label %__nv_sqrtf.exit38, !dbg !33

__nv_sqrtf.exit38:                                ; preds = %295, %297, %300, %302
  %.0.i36 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !33
  %304 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !34
  %305 = fadd float %.0.i6, 0x3DDB7CDFE0000000, !dbg !34
  %306 = fadd float %.0.i11, 0x3DDB7CDFE0000000, !dbg !34
  %307 = fadd float %.0.i16, 0x3DDB7CDFE0000000, !dbg !34
  %308 = fadd float %.0.i21, 0x3DDB7CDFE0000000, !dbg !34
  %309 = fadd float %.0.i26, 0x3DDB7CDFE0000000, !dbg !34
  %310 = fadd float %.0.i31, 0x3DDB7CDFE0000000, !dbg !34
  %311 = fadd float %.0.i36, 0x3DDB7CDFE0000000, !dbg !34
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %304) #4, !dbg !35
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %305) #4, !dbg !35
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %306) #4, !dbg !35
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %307) #4, !dbg !35
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %308) #4, !dbg !35
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %309) #4, !dbg !35
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %310) #4, !dbg !35
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %311) #4, !dbg !35
  %320 = mul i32 %14, 961, !dbg !36
  %321 = mul i32 %15, 961, !dbg !36
  %322 = mul i32 %16, 961, !dbg !36
  %323 = mul i32 %17, 961, !dbg !36
  %324 = mul i32 %18, 961, !dbg !36
  %325 = mul i32 %19, 961, !dbg !36
  %326 = mul i32 %20, 961, !dbg !36
  %327 = mul i32 %21, 961, !dbg !36
  %328 = add i32 %37, %320, !dbg !37
  %329 = add i32 %37, %321, !dbg !37
  %330 = add i32 %37, %322, !dbg !37
  %331 = add i32 %37, %323, !dbg !37
  %332 = add i32 %37, %324, !dbg !37
  %333 = add i32 %37, %325, !dbg !37
  %334 = add i32 %37, %326, !dbg !37
  %335 = add i32 %37, %327, !dbg !37
  %336 = sext i32 %328 to i64, !dbg !38
  %337 = getelementptr float, ptr addrspace(1) %2, i64 %336, !dbg !38
  %338 = sext i32 %329 to i64, !dbg !38
  %339 = getelementptr float, ptr addrspace(1) %2, i64 %338, !dbg !38
  %340 = sext i32 %330 to i64, !dbg !38
  %341 = getelementptr float, ptr addrspace(1) %2, i64 %340, !dbg !38
  %342 = sext i32 %331 to i64, !dbg !38
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %342, !dbg !38
  %344 = sext i32 %332 to i64, !dbg !38
  %345 = getelementptr float, ptr addrspace(1) %2, i64 %344, !dbg !38
  %346 = sext i32 %333 to i64, !dbg !38
  %347 = getelementptr float, ptr addrspace(1) %2, i64 %346, !dbg !38
  %348 = sext i32 %334 to i64, !dbg !38
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !38
  %350 = sext i32 %335 to i64, !dbg !38
  %351 = getelementptr float, ptr addrspace(1) %2, i64 %350, !dbg !38
  %352 = bitcast float %312 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %352, ptr addrspace(1) %337, i1 %63) #4, !dbg !39
  %353 = bitcast float %313 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %339, i1 %64) #4, !dbg !39
  %354 = bitcast float %314 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %341, i1 %65) #4, !dbg !39
  %355 = bitcast float %315 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %343, i1 %66) #4, !dbg !39
  %356 = bitcast float %316 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %345, i1 %67) #4, !dbg !39
  %357 = bitcast float %317 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %347, i1 %68) #4, !dbg !39
  %358 = bitcast float %318 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %349, i1 %69) #4, !dbg !39
  %359 = bitcast float %319 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %351, i1 %70) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4jxggu4ejfyryo2bzvrfpxjahc443vzfccnhi6go3ohuyq3kcez.py", directory: "inductor_cache/4j")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 39, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 26, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 34, scope: !7)
!37 = !DILocation(line: 38, column: 30, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 45, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
