; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_div_dot_relu_rsub_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = shl i32 %6, 2, !dbg !10
  %10 = and i32 %9, 252, !dbg !10
  %11 = or disjoint i32 %10, 1, !dbg !10
  %12 = or disjoint i32 %10, 2, !dbg !10
  %13 = or disjoint i32 %10, 3, !dbg !10
  %14 = zext nneg i32 %10 to i64, !dbg !11
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !11
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !12
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !12
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #3, !dbg !13
  %22 = bitcast i32 %21 to float, !dbg !13
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !14
  %24 = zext nneg i32 %11 to i64, !dbg !14
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !14
  %26 = zext nneg i32 %12 to i64, !dbg !14
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !14
  %28 = zext nneg i32 %13 to i64, !dbg !14
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !14
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !15
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !15
  %35 = bitcast i32 %31 to float, !dbg !15
  %36 = bitcast i32 %32 to float, !dbg !15
  %37 = bitcast i32 %33 to float, !dbg !15
  %38 = bitcast i32 %34 to float, !dbg !15
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !16
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !16
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !16
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !16
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !17
  %48 = bitcast i32 %44 to float, !dbg !17
  %49 = bitcast i32 %45 to float, !dbg !17
  %50 = bitcast i32 %46 to float, !dbg !17
  %51 = bitcast i32 %47 to float, !dbg !17
  %52 = icmp ne i32 %10, 0, !dbg !18
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %52, i32 0, i1 %52) #3, !dbg !19
  %54 = bitcast i32 %53 to float, !dbg !19
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true) #3, !dbg !19
  %56 = bitcast i32 %55 to float, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true) #3, !dbg !19
  %58 = bitcast i32 %57 to float, !dbg !19
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #3, !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = fsub float %22, %54, !dbg !20
  %62 = fsub float %22, %56, !dbg !20
  %63 = fsub float %22, %58, !dbg !20
  %64 = fsub float %22, %60, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %52, i32 0, i1 %52) #3, !dbg !21
  %66 = bitcast i32 %65 to float, !dbg !21
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 true, i32 0, i1 true) #3, !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true) #3, !dbg !21
  %70 = bitcast i32 %69 to float, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 true, i32 0, i1 true) #3, !dbg !21
  %72 = bitcast i32 %71 to float, !dbg !21
  %73 = fadd float %22, %66, !dbg !22
  %74 = fadd float %22, %68, !dbg !22
  %75 = fadd float %22, %70, !dbg !22
  %76 = fadd float %22, %72, !dbg !22
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %73) #3, !dbg !23
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %74) #3, !dbg !23
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %75) #3, !dbg !23
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %76) #3, !dbg !23
  %81 = fsub float 1.000000e+00, %77, !dbg !24
  %82 = fsub float 1.000000e+00, %78, !dbg !24
  %83 = add nsw i32 %10, -1, !dbg !25
  %84 = sext i32 %83 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %52, i32 0, i1 %52) #3, !dbg !27
  %87 = bitcast i32 %86 to float, !dbg !27
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 true, i32 0, i1 true) #3, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 true, i32 0, i1 true) #3, !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true) #3, !dbg !27
  %93 = bitcast i32 %92 to float, !dbg !27
  %94 = fsub float %22, %87, !dbg !28
  %95 = fsub float %22, %89, !dbg !28
  %96 = fsub float %22, %91, !dbg !28
  %97 = fsub float %22, %93, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %52, i32 0, i1 %52) #3, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 true, i32 0, i1 true) #3, !dbg !30
  %102 = bitcast i32 %101 to float, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 true, i32 0, i1 true) #3, !dbg !30
  %104 = bitcast i32 %103 to float, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 true, i32 0, i1 true) #3, !dbg !30
  %106 = bitcast i32 %105 to float, !dbg !30
  %107 = fadd float %22, %100, !dbg !31
  %108 = fadd float %22, %102, !dbg !31
  %109 = fadd float %22, %104, !dbg !31
  %110 = fadd float %22, %106, !dbg !31
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %107) #3, !dbg !32
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %108) #3, !dbg !32
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %109) #3, !dbg !32
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %110) #3, !dbg !32
  %115 = fadd float %111, -1.000000e+00, !dbg !33
  %116 = fadd float %81, %115, !dbg !33
  %117 = fadd float %112, -1.000000e+00, !dbg !33
  %118 = fadd float %82, %117, !dbg !33
  %119 = fsub float %22, %35, !dbg !34
  %120 = fsub float %22, %36, !dbg !34
  %121 = fsub float %22, %37, !dbg !34
  %122 = fsub float %22, %38, !dbg !34
  %123 = fadd float %22, %48, !dbg !35
  %124 = fadd float %22, %49, !dbg !35
  %125 = fadd float %22, %50, !dbg !35
  %126 = fadd float %22, %51, !dbg !35
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %123) #3, !dbg !36
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %124) #3, !dbg !36
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %125) #3, !dbg !36
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %126) #3, !dbg !36
  %131 = fsub float 1.000000e+00, %127, !dbg !37
  %132 = select i1 %52, float %116, float %131, !dbg !38
  %133 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !12
  %134 = insertelement <2 x i32> %133, i32 %17, i64 1, !dbg !12
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !12
  %136 = fcmp olt <2 x float> %135, zeroinitializer, !dbg !39
  %137 = select <2 x i1> %136, <2 x float> zeroinitializer, <2 x float> %135, !dbg !43
  %138 = insertelement <2 x float> poison, float %118, i64 0, !dbg !44
  %139 = insertelement <2 x float> %138, float %132, i64 1, !dbg !44
  %140 = fmul <2 x float> %137, %139, !dbg !44
  %141 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !12
  %142 = insertelement <2 x i32> %141, i32 %19, i64 1, !dbg !12
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !12
  %144 = fcmp olt <2 x float> %143, zeroinitializer, !dbg !39
  %145 = select <2 x i1> %144, <2 x float> zeroinitializer, <2 x float> %143, !dbg !43
  %146 = insertelement <2 x float> poison, float %80, i64 0, !dbg !24
  %147 = insertelement <2 x float> %146, float %79, i64 1, !dbg !24
  %148 = fsub <2 x float> splat (float 1.000000e+00), %147, !dbg !24
  %149 = insertelement <2 x float> poison, float %114, i64 0, !dbg !33
  %150 = insertelement <2 x float> %149, float %113, i64 1, !dbg !33
  %151 = fadd <2 x float> %150, splat (float -1.000000e+00), !dbg !33
  %152 = fadd <2 x float> %148, %151, !dbg !33
  %153 = fmul <2 x float> %145, %152, !dbg !44
  %shift = shufflevector <2 x float> %140, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %154 = fadd <2 x float> %140, %shift, !dbg !45
  %shift1 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %155 = fadd <2 x float> %shift1, %154, !dbg !45
  %156 = fadd <2 x float> %153, %155, !dbg !45
  %157 = extractelement <2 x float> %156, i64 0, !dbg !45
  %158 = bitcast float %157 to i32, !dbg !50
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !50
  %160 = bitcast i32 %159 to float, !dbg !50
  %161 = fadd float %157, %160, !dbg !45
  %162 = bitcast float %161 to i32, !dbg !50
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !50
  %164 = bitcast i32 %163 to float, !dbg !50
  %165 = fadd float %161, %164, !dbg !45
  %166 = bitcast float %165 to i32, !dbg !50
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !50
  %168 = bitcast i32 %167 to float, !dbg !50
  %169 = fadd float %165, %168, !dbg !45
  %170 = bitcast float %169 to i32, !dbg !50
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !50
  %172 = bitcast i32 %171 to float, !dbg !50
  %173 = fadd float %169, %172, !dbg !45
  %174 = bitcast float %173 to i32, !dbg !50
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !50
  %176 = bitcast i32 %175 to float, !dbg !50
  %177 = fadd float %173, %176, !dbg !45
  %178 = icmp eq i32 %7, 0, !dbg !50
  %179 = and i32 %8, 1, !dbg !50
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !50
  %181 = bitcast float %177 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 %178) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %182 = icmp slt i32 %6, 2, !dbg !50
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !50
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %182) #3, !dbg !50
  %185 = bitcast i32 %184 to float, !dbg !50
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !50
  %187 = bitcast i32 %186 to float, !dbg !50
  %188 = fadd float %185, %187, !dbg !45
  %189 = and i32 %6, 1, !dbg !50
  %190 = icmp eq i32 %189, 0, !dbg !50
  %191 = and i1 %182, %190, !dbg !50
  %192 = bitcast float %188 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %192, i1 %191) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %193 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  %194 = fadd float %193, 0.000000e+00, !dbg !51
  %urem = and i32 %6, 63, !dbg !53
  %195 = icmp eq i32 %urem, 0, !dbg !53
  %196 = bitcast float %194 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %0, i1 %195) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py", directory: "inductor_cache/7o")
!4 = !{ptr @triton_per_fused_add_div_dot_relu_rsub_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_dot_relu_rsub_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_dot_relu_rsub_sub_1", linkageName: "triton_per_fused_add_div_dot_relu_rsub_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 31, scope: !7)
!15 = !DILocation(line: 36, column: 36, scope: !7)
!16 = !DILocation(line: 37, column: 31, scope: !7)
!17 = !DILocation(line: 37, column: 36, scope: !7)
!18 = !DILocation(line: 42, column: 19, scope: !7)
!19 = !DILocation(line: 43, column: 62, scope: !7)
!20 = !DILocation(line: 44, column: 18, scope: !7)
!21 = !DILocation(line: 45, column: 63, scope: !7)
!22 = !DILocation(line: 46, column: 19, scope: !7)
!23 = !DILocation(line: 47, column: 19, scope: !7)
!24 = !DILocation(line: 49, column: 20, scope: !7)
!25 = !DILocation(line: 50, column: 54, scope: !7)
!26 = !DILocation(line: 50, column: 31, scope: !7)
!27 = !DILocation(line: 50, column: 70, scope: !7)
!28 = !DILocation(line: 51, column: 19, scope: !7)
!29 = !DILocation(line: 52, column: 31, scope: !7)
!30 = !DILocation(line: 52, column: 70, scope: !7)
!31 = !DILocation(line: 53, column: 19, scope: !7)
!32 = !DILocation(line: 54, column: 20, scope: !7)
!33 = !DILocation(line: 56, column: 20, scope: !7)
!34 = !DILocation(line: 59, column: 20, scope: !7)
!35 = !DILocation(line: 60, column: 20, scope: !7)
!36 = !DILocation(line: 61, column: 20, scope: !7)
!37 = !DILocation(line: 63, column: 20, scope: !7)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 39, column: 40, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 65, column: 19, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !49)
!46 = distinct !DILexicalBlockFile(scope: !48, file: !47, discriminator: 0)
!47 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!48 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!49 = !DILocation(line: 67, column: 59, scope: !7)
!50 = !DILocation(line: 267, column: 36, scope: !48, inlinedAt: !49)
!51 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !52)
!52 = !DILocation(line: 67, column: 45, scope: !7)
!53 = !DILocation(line: 68, column: 63, scope: !7)
!54 = !DILocation(line: 68, column: 4, scope: !7)
