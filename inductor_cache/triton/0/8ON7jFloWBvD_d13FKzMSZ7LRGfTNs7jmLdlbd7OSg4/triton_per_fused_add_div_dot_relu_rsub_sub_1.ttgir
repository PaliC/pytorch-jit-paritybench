#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":67:59)
#loc51 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_dot_relu_rsub_sub_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<-1> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc5)
    %5 = tt.load %4 : !tt.ptr<f32> loc(#loc6)
    %6 = tt.splat %5 : f32 -> tensor<256xf32, #blocked> loc(#loc7)
    %7 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.addptr %7, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.addptr %10, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %12 = tt.load %11 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = arith.cmpf ogt, %cst, %3 : tensor<256xf32, #blocked> loc(#loc47)
    %14 = arith.select %13, %cst, %3 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc48)
    %15 = arith.extsi %0 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc15)
    %16 = arith.cmpi sge, %15, %cst_2 : tensor<256xi64, #blocked> loc(#loc15)
    %17 = tt.load %8, %16, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %18 = arith.subf %6, %17 : tensor<256xf32, #blocked> loc(#loc17)
    %19 = tt.load %11, %16, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %20 = arith.addf %6, %19 : tensor<256xf32, #blocked> loc(#loc19)
    %21 = arith.divf %18, %20 : tensor<256xf32, #blocked> loc(#loc20)
    %22 = arith.subf %cst_0, %21 : tensor<256xf32, #blocked> loc(#loc21)
    %23 = arith.addi %0, %cst_3 : tensor<256xi32, #blocked> loc(#loc22)
    %24 = tt.addptr %7, %23 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc23)
    %25 = tt.load %24, %16, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = arith.subf %6, %25 : tensor<256xf32, #blocked> loc(#loc25)
    %27 = tt.addptr %10, %23 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc26)
    %28 = tt.load %27, %16, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %29 = arith.addf %6, %28 : tensor<256xf32, #blocked> loc(#loc28)
    %30 = arith.divf %26, %29 : tensor<256xf32, #blocked> loc(#loc29)
    %31 = arith.subf %cst_0, %30 : tensor<256xf32, #blocked> loc(#loc30)
    %32 = arith.subf %22, %31 : tensor<256xf32, #blocked> loc(#loc31)
    %33 = arith.subf %6, %9 : tensor<256xf32, #blocked> loc(#loc32)
    %34 = arith.addf %6, %12 : tensor<256xf32, #blocked> loc(#loc33)
    %35 = arith.divf %33, %34 : tensor<256xf32, #blocked> loc(#loc34)
    %36 = arith.subf %cst_0, %35 : tensor<256xf32, #blocked> loc(#loc35)
    %37 = arith.select %16, %32, %36 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc49)
    %38 = arith.mulf %14, %37 : tensor<256xf32, #blocked> loc(#loc38)
    %39 = "tt.reduce"(%38) <{axis = 0 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc40)), %arg6: f32 loc(callsite(#loc1 at #loc40))):
      %43 = arith.addf %arg5, %arg6 : f32 loc(#loc54)
      tt.reduce.return %43 : f32 loc(#loc50)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc50)
    %40 = arith.addf %39, %cst_1 : f32 loc(#loc53)
    %41 = tt.splat %40 : f32 -> tensor<1xf32, #blocked1> loc(#loc53)
    %42 = tt.splat %4 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc44)
    tt.store %42, %41 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":27:26)
#loc3 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":31:30)
#loc4 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":31:35)
#loc5 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":32:34)
#loc6 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":32:19)
#loc7 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":33:33)
#loc8 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":36:31)
#loc9 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":36:36)
#loc10 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":37:31)
#loc11 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":37:36)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc13 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":39:40)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc15 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":42:19)
#loc16 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":43:62)
#loc17 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":44:18)
#loc18 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":45:63)
#loc19 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":46:19)
#loc20 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":47:19)
#loc21 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":49:20)
#loc22 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":50:54)
#loc23 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":50:31)
#loc24 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":50:70)
#loc25 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":51:19)
#loc26 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":52:31)
#loc27 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":52:70)
#loc28 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":53:19)
#loc29 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":54:20)
#loc30 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":55:20)
#loc31 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":56:20)
#loc32 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":59:20)
#loc33 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":60:20)
#loc34 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":61:20)
#loc35 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":63:20)
#loc36 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":64:34)
#loc37 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":58:34)
#loc38 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":65:19)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc43 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":67:45)
#loc44 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":68:28)
#loc45 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":68:63)
#loc46 = loc("inductor_cache/7o/c7ozq2psro2uaxn24cezpycrpv2xhuzc23kb5icmg6jh74x4by7w.py":68:4)
#loc47 = loc(callsite(#loc12 at #loc13))
#loc48 = loc(callsite(#loc14 at #loc13))
#loc49 = loc(fused[#loc36, #loc37])
#loc50 = loc(callsite(#loc39 at #loc40))
#loc52 = loc(callsite(#loc41 at #loc39))
#loc53 = loc(callsite(#loc42 at #loc43))
#loc54 = loc(callsite(#loc52 at #loc40))
