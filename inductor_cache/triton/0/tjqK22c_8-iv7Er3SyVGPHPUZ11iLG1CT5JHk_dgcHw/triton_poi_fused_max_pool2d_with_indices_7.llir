; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 1524096, !dbg !14
  %18 = icmp slt i32 %15, 1524096, !dbg !14
  %19 = icmp slt i32 %16, 1524096, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %20 = sdiv i32 %.frozen, 96, !dbg !15
  %21 = mul i32 %20, 96, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %14, 96, !dbg !16
  %23 = srem i32 %20, 63, !dbg !17
  %24 = sdiv i32 %13, 6048, !dbg !18
  %25 = srem i32 %24, 63, !dbg !19
  %26 = sdiv i32 %13, 381024, !dbg !20
  %27 = mul nsw i32 %23, 192, !dbg !21
  %28 = mul nsw i32 %25, 24576, !dbg !22
  %29 = mul i32 %26, 1572864, !dbg !23
  %30 = add i32 %27, %29, !dbg !24
  %31 = add i32 %30, %.decomposed, !dbg !25
  %32 = add i32 %31, %28, !dbg !26
  %33 = add i32 %30, %22, !dbg !25
  %34 = add i32 %33, %28, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = sext i32 %34 to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #2, !dbg !28
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %17) #2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !28
  %49 = add i32 %30, 96, !dbg !29
  %50 = add i32 %49, %.decomposed, !dbg !30
  %51 = add i32 %50, %28, !dbg !31
  %52 = add i32 %49, %22, !dbg !30
  %53 = add i32 %52, %28, !dbg !31
  %54 = sext i32 %51 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !32
  %56 = sext i32 %53 to i64, !dbg !32
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !32
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !33
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !33
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !33
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %17) #2, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !33
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !33
  %68 = add i32 %30, 192, !dbg !34
  %69 = add i32 %68, %.decomposed, !dbg !35
  %70 = add i32 %69, %28, !dbg !36
  %71 = add i32 %68, %22, !dbg !35
  %72 = add i32 %71, %28, !dbg !36
  %73 = sext i32 %70 to i64, !dbg !37
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !37
  %75 = sext i32 %72 to i64, !dbg !37
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !37
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %17) #2, !dbg !38
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !38
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !38
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !38
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %17) #2, !dbg !38
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !38
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !38
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !38
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !38
  %87 = add i32 %30, 12288, !dbg !39
  %88 = add i32 %87, %.decomposed, !dbg !40
  %89 = add i32 %88, %28, !dbg !41
  %90 = add i32 %87, %22, !dbg !40
  %91 = add i32 %90, %28, !dbg !41
  %92 = sext i32 %89 to i64, !dbg !42
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !42
  %94 = sext i32 %91 to i64, !dbg !42
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !42
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %17) #2, !dbg !43
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !43
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !43
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !43
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !43
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %17) #2, !dbg !43
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !43
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !43
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !43
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !43
  %106 = add i32 %30, 12384, !dbg !44
  %107 = add i32 %106, %.decomposed, !dbg !45
  %108 = add i32 %107, %28, !dbg !46
  %109 = add i32 %106, %22, !dbg !45
  %110 = add i32 %109, %28, !dbg !46
  %111 = sext i32 %108 to i64, !dbg !47
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !47
  %113 = sext i32 %110 to i64, !dbg !47
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !47
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %17) #2, !dbg !48
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !48
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !48
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !48
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !48
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %17) #2, !dbg !48
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !48
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !48
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !48
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !48
  %125 = add i32 %30, 12480, !dbg !49
  %126 = add i32 %125, %.decomposed, !dbg !50
  %127 = add i32 %126, %28, !dbg !51
  %128 = add i32 %125, %22, !dbg !50
  %129 = add i32 %128, %28, !dbg !51
  %130 = sext i32 %127 to i64, !dbg !52
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !52
  %132 = sext i32 %129 to i64, !dbg !52
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !52
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %17) #2, !dbg !53
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !53
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !53
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !53
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !53
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %133, i1 %17) #2, !dbg !53
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !53
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !53
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !53
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !53
  %144 = add i32 %30, 24576, !dbg !54
  %145 = add i32 %144, %.decomposed, !dbg !55
  %146 = add i32 %145, %28, !dbg !56
  %147 = add i32 %144, %22, !dbg !55
  %148 = add i32 %147, %28, !dbg !56
  %149 = sext i32 %146 to i64, !dbg !57
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !57
  %151 = sext i32 %148 to i64, !dbg !57
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !57
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %17) #2, !dbg !58
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !58
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !58
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !58
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !58
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %17) #2, !dbg !58
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !58
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !58
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !58
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !58
  %163 = add i32 %30, 24672, !dbg !59
  %164 = add i32 %163, %.decomposed, !dbg !60
  %165 = add i32 %164, %28, !dbg !61
  %166 = add i32 %163, %22, !dbg !60
  %167 = add i32 %166, %28, !dbg !61
  %168 = sext i32 %165 to i64, !dbg !62
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !62
  %170 = sext i32 %167 to i64, !dbg !62
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !62
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %17) #2, !dbg !63
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !63
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !63
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !63
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !63
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %17) #2, !dbg !63
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !63
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !63
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !63
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !63
  %182 = add i32 %30, 24768, !dbg !64
  %183 = add i32 %182, %.decomposed, !dbg !65
  %184 = add i32 %183, %28, !dbg !66
  %185 = add i32 %182, %22, !dbg !65
  %186 = add i32 %185, %28, !dbg !66
  %187 = sext i32 %184 to i64, !dbg !67
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !67
  %189 = sext i32 %186 to i64, !dbg !67
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !67
  %191 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %17) #2, !dbg !68
  %192 = extractvalue { i32, i32, i32, i32 } %191, 0, !dbg !68
  %193 = extractvalue { i32, i32, i32, i32 } %191, 1, !dbg !68
  %194 = extractvalue { i32, i32, i32, i32 } %191, 2, !dbg !68
  %195 = extractvalue { i32, i32, i32, i32 } %191, 3, !dbg !68
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %17) #2, !dbg !68
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !68
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !68
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !68
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !68
  %201 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !28
  %202 = insertelement <4 x i32> %201, i32 %41, i64 1, !dbg !28
  %203 = insertelement <4 x i32> %202, i32 %42, i64 2, !dbg !28
  %204 = insertelement <4 x i32> %203, i32 %43, i64 3, !dbg !28
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !28
  %206 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !33
  %207 = insertelement <4 x i32> %206, i32 %60, i64 1, !dbg !33
  %208 = insertelement <4 x i32> %207, i32 %61, i64 2, !dbg !33
  %209 = insertelement <4 x i32> %208, i32 %62, i64 3, !dbg !33
  %210 = bitcast <4 x i32> %209 to <4 x float>, !dbg !33
  %211 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !38
  %212 = insertelement <4 x i32> %211, i32 %79, i64 1, !dbg !38
  %213 = insertelement <4 x i32> %212, i32 %80, i64 2, !dbg !38
  %214 = insertelement <4 x i32> %213, i32 %81, i64 3, !dbg !38
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !38
  %216 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !43
  %217 = insertelement <4 x i32> %216, i32 %98, i64 1, !dbg !43
  %218 = insertelement <4 x i32> %217, i32 %99, i64 2, !dbg !43
  %219 = insertelement <4 x i32> %218, i32 %100, i64 3, !dbg !43
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !43
  %221 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !48
  %222 = insertelement <4 x i32> %221, i32 %117, i64 1, !dbg !48
  %223 = insertelement <4 x i32> %222, i32 %118, i64 2, !dbg !48
  %224 = insertelement <4 x i32> %223, i32 %119, i64 3, !dbg !48
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !48
  %226 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !53
  %227 = insertelement <4 x i32> %226, i32 %136, i64 1, !dbg !53
  %228 = insertelement <4 x i32> %227, i32 %137, i64 2, !dbg !53
  %229 = insertelement <4 x i32> %228, i32 %138, i64 3, !dbg !53
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !53
  %231 = insertelement <4 x i32> poison, i32 %154, i64 0, !dbg !58
  %232 = insertelement <4 x i32> %231, i32 %155, i64 1, !dbg !58
  %233 = insertelement <4 x i32> %232, i32 %156, i64 2, !dbg !58
  %234 = insertelement <4 x i32> %233, i32 %157, i64 3, !dbg !58
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !58
  %236 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !63
  %237 = insertelement <4 x i32> %236, i32 %174, i64 1, !dbg !63
  %238 = insertelement <4 x i32> %237, i32 %175, i64 2, !dbg !63
  %239 = insertelement <4 x i32> %238, i32 %176, i64 3, !dbg !63
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !63
  %241 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !68
  %242 = insertelement <4 x i32> %241, i32 %193, i64 1, !dbg !68
  %243 = insertelement <4 x i32> %242, i32 %194, i64 2, !dbg !68
  %244 = insertelement <4 x i32> %243, i32 %195, i64 3, !dbg !68
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !68
  %246 = fcmp ogt <4 x float> %210, %205, !dbg !69
  %247 = fcmp uno <4 x float> %210, zeroinitializer, !dbg !73
  %248 = or <4 x i1> %246, %247, !dbg !74
  %.v = select <4 x i1> %248, <4 x i32> %209, <4 x i32> %204, !dbg !75
  %249 = bitcast <4 x i32> %.v to <4 x float>, !dbg !75
  %250 = fcmp olt <4 x float> %249, %215, !dbg !76
  %251 = fcmp uno <4 x float> %215, zeroinitializer, !dbg !78
  %252 = or <4 x i1> %251, %250, !dbg !79
  %.v15 = select <4 x i1> %252, <4 x i32> %214, <4 x i32> %.v, !dbg !80
  %253 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !80
  %254 = fcmp olt <4 x float> %253, %220, !dbg !81
  %255 = fcmp uno <4 x float> %220, zeroinitializer, !dbg !83
  %256 = or <4 x i1> %255, %254, !dbg !84
  %.v16 = select <4 x i1> %256, <4 x i32> %219, <4 x i32> %.v15, !dbg !85
  %257 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !85
  %258 = fcmp olt <4 x float> %257, %225, !dbg !86
  %259 = fcmp uno <4 x float> %225, zeroinitializer, !dbg !88
  %260 = or <4 x i1> %259, %258, !dbg !89
  %.v17 = select <4 x i1> %260, <4 x i32> %224, <4 x i32> %.v16, !dbg !90
  %261 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !90
  %262 = fcmp olt <4 x float> %261, %230, !dbg !91
  %263 = fcmp uno <4 x float> %230, zeroinitializer, !dbg !93
  %264 = or <4 x i1> %263, %262, !dbg !94
  %.v18 = select <4 x i1> %264, <4 x i32> %229, <4 x i32> %.v17, !dbg !95
  %265 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !95
  %266 = fcmp olt <4 x float> %265, %235, !dbg !96
  %267 = fcmp uno <4 x float> %235, zeroinitializer, !dbg !98
  %268 = or <4 x i1> %267, %266, !dbg !99
  %.v19 = select <4 x i1> %268, <4 x i32> %234, <4 x i32> %.v18, !dbg !100
  %269 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !100
  %270 = fcmp olt <4 x float> %269, %240, !dbg !101
  %271 = fcmp uno <4 x float> %240, zeroinitializer, !dbg !103
  %272 = or <4 x i1> %271, %270, !dbg !104
  %.v20 = select <4 x i1> %272, <4 x i32> %239, <4 x i32> %.v19, !dbg !105
  %273 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !105
  %274 = fcmp olt <4 x float> %273, %245, !dbg !106
  %275 = extractelement <4 x i1> %274, i64 0, !dbg !108
  %276 = extractelement <4 x i1> %274, i64 1, !dbg !108
  %277 = extractelement <4 x i1> %274, i64 2, !dbg !108
  %278 = extractelement <4 x i1> %274, i64 3, !dbg !108
  %279 = zext <4 x i1> %246 to <4 x i8>, !dbg !109
  %280 = select <4 x i1> %250, <4 x i8> splat (i8 2), <4 x i8> %279, !dbg !110
  %281 = select <4 x i1> %254, <4 x i8> splat (i8 3), <4 x i8> %280, !dbg !111
  %282 = select <4 x i1> %258, <4 x i8> splat (i8 4), <4 x i8> %281, !dbg !112
  %283 = select <4 x i1> %262, <4 x i8> splat (i8 5), <4 x i8> %282, !dbg !113
  %284 = select <4 x i1> %266, <4 x i8> splat (i8 6), <4 x i8> %283, !dbg !114
  %285 = select <4 x i1> %270, <4 x i8> splat (i8 7), <4 x i8> %284, !dbg !115
  %286 = select <4 x i1> %274, <4 x i8> splat (i8 8), <4 x i8> %285, !dbg !116
  %287 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !28
  %288 = insertelement <4 x i32> %287, i32 %46, i64 1, !dbg !28
  %289 = insertelement <4 x i32> %288, i32 %47, i64 2, !dbg !28
  %290 = insertelement <4 x i32> %289, i32 %48, i64 3, !dbg !28
  %291 = bitcast <4 x i32> %290 to <4 x float>, !dbg !28
  %292 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !33
  %293 = insertelement <4 x i32> %292, i32 %65, i64 1, !dbg !33
  %294 = insertelement <4 x i32> %293, i32 %66, i64 2, !dbg !33
  %295 = insertelement <4 x i32> %294, i32 %67, i64 3, !dbg !33
  %296 = bitcast <4 x i32> %295 to <4 x float>, !dbg !33
  %297 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !38
  %298 = insertelement <4 x i32> %297, i32 %84, i64 1, !dbg !38
  %299 = insertelement <4 x i32> %298, i32 %85, i64 2, !dbg !38
  %300 = insertelement <4 x i32> %299, i32 %86, i64 3, !dbg !38
  %301 = bitcast <4 x i32> %300 to <4 x float>, !dbg !38
  %302 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !43
  %303 = insertelement <4 x i32> %302, i32 %103, i64 1, !dbg !43
  %304 = insertelement <4 x i32> %303, i32 %104, i64 2, !dbg !43
  %305 = insertelement <4 x i32> %304, i32 %105, i64 3, !dbg !43
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !43
  %307 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !48
  %308 = insertelement <4 x i32> %307, i32 %122, i64 1, !dbg !48
  %309 = insertelement <4 x i32> %308, i32 %123, i64 2, !dbg !48
  %310 = insertelement <4 x i32> %309, i32 %124, i64 3, !dbg !48
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !48
  %312 = insertelement <4 x i32> poison, i32 %140, i64 0, !dbg !53
  %313 = insertelement <4 x i32> %312, i32 %141, i64 1, !dbg !53
  %314 = insertelement <4 x i32> %313, i32 %142, i64 2, !dbg !53
  %315 = insertelement <4 x i32> %314, i32 %143, i64 3, !dbg !53
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !53
  %317 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !58
  %318 = insertelement <4 x i32> %317, i32 %160, i64 1, !dbg !58
  %319 = insertelement <4 x i32> %318, i32 %161, i64 2, !dbg !58
  %320 = insertelement <4 x i32> %319, i32 %162, i64 3, !dbg !58
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !58
  %322 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !63
  %323 = insertelement <4 x i32> %322, i32 %179, i64 1, !dbg !63
  %324 = insertelement <4 x i32> %323, i32 %180, i64 2, !dbg !63
  %325 = insertelement <4 x i32> %324, i32 %181, i64 3, !dbg !63
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !63
  %327 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !68
  %328 = insertelement <4 x i32> %327, i32 %198, i64 1, !dbg !68
  %329 = insertelement <4 x i32> %328, i32 %199, i64 2, !dbg !68
  %330 = insertelement <4 x i32> %329, i32 %200, i64 3, !dbg !68
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !68
  %332 = fcmp ogt <4 x float> %296, %291, !dbg !69
  %333 = fcmp uno <4 x float> %296, zeroinitializer, !dbg !73
  %334 = or <4 x i1> %332, %333, !dbg !74
  %.v21 = select <4 x i1> %334, <4 x i32> %295, <4 x i32> %290, !dbg !75
  %335 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !75
  %336 = fcmp olt <4 x float> %335, %301, !dbg !76
  %337 = fcmp uno <4 x float> %301, zeroinitializer, !dbg !78
  %338 = or <4 x i1> %337, %336, !dbg !79
  %.v22 = select <4 x i1> %338, <4 x i32> %300, <4 x i32> %.v21, !dbg !80
  %339 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !80
  %340 = fcmp olt <4 x float> %339, %306, !dbg !81
  %341 = fcmp uno <4 x float> %306, zeroinitializer, !dbg !83
  %342 = or <4 x i1> %341, %340, !dbg !84
  %.v23 = select <4 x i1> %342, <4 x i32> %305, <4 x i32> %.v22, !dbg !85
  %343 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !85
  %344 = fcmp olt <4 x float> %343, %311, !dbg !86
  %345 = fcmp uno <4 x float> %311, zeroinitializer, !dbg !88
  %346 = or <4 x i1> %345, %344, !dbg !89
  %.v24 = select <4 x i1> %346, <4 x i32> %310, <4 x i32> %.v23, !dbg !90
  %347 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !90
  %348 = fcmp olt <4 x float> %347, %316, !dbg !91
  %349 = fcmp uno <4 x float> %316, zeroinitializer, !dbg !93
  %350 = or <4 x i1> %349, %348, !dbg !94
  %.v25 = select <4 x i1> %350, <4 x i32> %315, <4 x i32> %.v24, !dbg !95
  %351 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !95
  %352 = fcmp olt <4 x float> %351, %321, !dbg !96
  %353 = fcmp uno <4 x float> %321, zeroinitializer, !dbg !98
  %354 = or <4 x i1> %353, %352, !dbg !99
  %.v26 = select <4 x i1> %354, <4 x i32> %320, <4 x i32> %.v25, !dbg !100
  %355 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !100
  %356 = fcmp olt <4 x float> %355, %326, !dbg !101
  %357 = fcmp uno <4 x float> %326, zeroinitializer, !dbg !103
  %358 = or <4 x i1> %357, %356, !dbg !104
  %.v27 = select <4 x i1> %358, <4 x i32> %325, <4 x i32> %.v26, !dbg !105
  %359 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !105
  %360 = fcmp olt <4 x float> %359, %331, !dbg !106
  %361 = shufflevector <4 x float> %331, <4 x float> %245, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !117
  %362 = fcmp uno <8 x float> %361, zeroinitializer, !dbg !117
  %363 = extractelement <8 x i1> %362, i64 7, !dbg !108
  %364 = or i1 %363, %275, !dbg !108
  %365 = extractelement <8 x i1> %362, i64 6, !dbg !108
  %366 = or i1 %365, %276, !dbg !108
  %367 = extractelement <8 x i1> %362, i64 5, !dbg !108
  %368 = or i1 %367, %277, !dbg !108
  %369 = extractelement <8 x i1> %362, i64 4, !dbg !108
  %370 = or i1 %369, %278, !dbg !108
  %371 = extractelement <4 x i1> %360, i64 0, !dbg !108
  %372 = extractelement <8 x i1> %362, i64 3, !dbg !108
  %373 = or i1 %372, %371, !dbg !108
  %374 = extractelement <4 x i1> %360, i64 1, !dbg !108
  %375 = extractelement <8 x i1> %362, i64 2, !dbg !108
  %376 = or i1 %375, %374, !dbg !108
  %377 = extractelement <4 x i1> %360, i64 2, !dbg !108
  %378 = extractelement <8 x i1> %362, i64 1, !dbg !108
  %379 = or i1 %378, %377, !dbg !108
  %380 = extractelement <4 x i1> %360, i64 3, !dbg !108
  %381 = extractelement <8 x i1> %362, i64 0, !dbg !108
  %382 = or i1 %381, %380, !dbg !108
  %383 = zext <4 x i1> %332 to <4 x i8>, !dbg !109
  %384 = select <4 x i1> %336, <4 x i8> splat (i8 2), <4 x i8> %383, !dbg !110
  %385 = select <4 x i1> %340, <4 x i8> splat (i8 3), <4 x i8> %384, !dbg !111
  %386 = select <4 x i1> %344, <4 x i8> splat (i8 4), <4 x i8> %385, !dbg !112
  %387 = select <4 x i1> %348, <4 x i8> splat (i8 5), <4 x i8> %386, !dbg !113
  %388 = select <4 x i1> %352, <4 x i8> splat (i8 6), <4 x i8> %387, !dbg !114
  %389 = select <4 x i1> %356, <4 x i8> splat (i8 7), <4 x i8> %388, !dbg !115
  %390 = select <4 x i1> %360, <4 x i8> splat (i8 8), <4 x i8> %389, !dbg !116
  %391 = sext i32 %15 to i64, !dbg !118
  %392 = getelementptr float, ptr addrspace(1) %1, i64 %391, !dbg !118
  %393 = sext i32 %16 to i64, !dbg !118
  %394 = getelementptr float, ptr addrspace(1) %1, i64 %393, !dbg !118
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !119
  %396 = extractelement <4 x i32> %.v20, i64 0, !dbg !119
  %397 = select i1 %364, i32 %192, i32 %396, !dbg !120
  %398 = extractelement <4 x i32> %.v20, i64 1, !dbg !119
  %399 = select i1 %366, i32 %193, i32 %398, !dbg !120
  %400 = extractelement <4 x i32> %.v20, i64 2, !dbg !119
  %401 = select i1 %368, i32 %194, i32 %400, !dbg !120
  %402 = extractelement <4 x i32> %.v20, i64 3, !dbg !119
  %403 = select i1 %370, i32 %195, i32 %402, !dbg !120
  %404 = extractelement <4 x i32> %.v27, i64 0, !dbg !119
  %405 = select i1 %373, i32 %197, i32 %404, !dbg !120
  %406 = extractelement <4 x i32> %.v27, i64 1, !dbg !119
  %407 = select i1 %376, i32 %198, i32 %406, !dbg !120
  %408 = extractelement <4 x i32> %.v27, i64 2, !dbg !119
  %409 = select i1 %379, i32 %199, i32 %408, !dbg !120
  %410 = extractelement <4 x i32> %.v27, i64 3, !dbg !119
  %411 = select i1 %382, i32 %200, i32 %410, !dbg !120
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %395, i32 %397, i32 %399, i32 %401, i32 %403, i1 true) #2, !dbg !119
  %412 = getelementptr inbounds i8, ptr addrspace(3) %395, i32 16, !dbg !119
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %412, i32 %405, i32 %407, i32 %409, i32 %411, i1 true) #2, !dbg !119
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !119
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !119
  %415 = load <4 x i32>, ptr addrspace(3) %414, align 16, !dbg !119
  %.extract = load i32, ptr addrspace(3) %413, align 16, !dbg !119
  %416 = getelementptr inbounds i8, ptr addrspace(3) %413, i32 4, !dbg !119
  %.extract8 = load i32, ptr addrspace(3) %416, align 4, !dbg !119
  %417 = getelementptr inbounds i8, ptr addrspace(3) %413, i32 8, !dbg !119
  %.extract9 = load i32, ptr addrspace(3) %417, align 8, !dbg !119
  %418 = getelementptr inbounds i8, ptr addrspace(3) %413, i32 12, !dbg !119
  %.extract10 = load i32, ptr addrspace(3) %418, align 4, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %392, i1 %18) #2, !dbg !119
  %.extract11 = extractelement <4 x i32> %415, i64 0, !dbg !119
  %.extract12 = extractelement <4 x i32> %415, i64 1, !dbg !119
  %.extract13 = extractelement <4 x i32> %415, i64 2, !dbg !119
  %.extract14 = extractelement <4 x i32> %415, i64 3, !dbg !119
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %394, i1 %19) #2, !dbg !119
  %419 = sext i32 %13 to i64, !dbg !121
  %420 = getelementptr i8, ptr addrspace(1) %2, i64 %419, !dbg !121
  %421 = bitcast <4 x i8> %286 to i32, !dbg !122
  %422 = bitcast <4 x i8> %390 to i32, !dbg !122
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %421, i32 %422, ptr addrspace(1) %420, i1 %17) #2, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmqo3ejqjtccqjqtde4bqtdm6cplee3srcw3do5r2kiv6a4szaeh.py", directory: "inductor_cache/mq")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_7", linkageName: "triton_poi_fused_max_pool2d_with_indices_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 21, scope: !7)
!19 = !DILocation(line: 26, column: 29, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 50, scope: !7)
!23 = !DILocation(line: 29, column: 63, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 44, scope: !7)
!26 = !DILocation(line: 29, column: 55, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 68, scope: !7)
!29 = !DILocation(line: 30, column: 40, scope: !7)
!30 = !DILocation(line: 30, column: 49, scope: !7)
!31 = !DILocation(line: 30, column: 60, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 30, column: 73, scope: !7)
!34 = !DILocation(line: 31, column: 41, scope: !7)
!35 = !DILocation(line: 31, column: 50, scope: !7)
!36 = !DILocation(line: 31, column: 61, scope: !7)
!37 = !DILocation(line: 31, column: 30, scope: !7)
!38 = !DILocation(line: 31, column: 74, scope: !7)
!39 = !DILocation(line: 32, column: 43, scope: !7)
!40 = !DILocation(line: 32, column: 52, scope: !7)
!41 = !DILocation(line: 32, column: 63, scope: !7)
!42 = !DILocation(line: 32, column: 30, scope: !7)
!43 = !DILocation(line: 32, column: 76, scope: !7)
!44 = !DILocation(line: 33, column: 43, scope: !7)
!45 = !DILocation(line: 33, column: 52, scope: !7)
!46 = !DILocation(line: 33, column: 63, scope: !7)
!47 = !DILocation(line: 33, column: 30, scope: !7)
!48 = !DILocation(line: 33, column: 76, scope: !7)
!49 = !DILocation(line: 34, column: 43, scope: !7)
!50 = !DILocation(line: 34, column: 52, scope: !7)
!51 = !DILocation(line: 34, column: 63, scope: !7)
!52 = !DILocation(line: 34, column: 30, scope: !7)
!53 = !DILocation(line: 34, column: 76, scope: !7)
!54 = !DILocation(line: 35, column: 44, scope: !7)
!55 = !DILocation(line: 35, column: 53, scope: !7)
!56 = !DILocation(line: 35, column: 64, scope: !7)
!57 = !DILocation(line: 35, column: 31, scope: !7)
!58 = !DILocation(line: 35, column: 77, scope: !7)
!59 = !DILocation(line: 36, column: 44, scope: !7)
!60 = !DILocation(line: 36, column: 53, scope: !7)
!61 = !DILocation(line: 36, column: 64, scope: !7)
!62 = !DILocation(line: 36, column: 31, scope: !7)
!63 = !DILocation(line: 36, column: 77, scope: !7)
!64 = !DILocation(line: 37, column: 44, scope: !7)
!65 = !DILocation(line: 37, column: 53, scope: !7)
!66 = !DILocation(line: 37, column: 64, scope: !7)
!67 = !DILocation(line: 37, column: 31, scope: !7)
!68 = !DILocation(line: 37, column: 77, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 38, column: 40, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !77)
!77 = !DILocation(line: 39, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !82)
!82 = !DILocation(line: 40, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !87)
!87 = !DILocation(line: 41, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !92)
!92 = !DILocation(line: 42, column: 41, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !97)
!97 = !DILocation(line: 43, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !102)
!102 = !DILocation(line: 44, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !107)
!107 = !DILocation(line: 45, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !107)
!109 = !DILocation(line: 49, column: 35, scope: !7)
!110 = !DILocation(line: 52, column: 35, scope: !7)
!111 = !DILocation(line: 55, column: 35, scope: !7)
!112 = !DILocation(line: 58, column: 35, scope: !7)
!113 = !DILocation(line: 61, column: 35, scope: !7)
!114 = !DILocation(line: 64, column: 35, scope: !7)
!115 = !DILocation(line: 67, column: 35, scope: !7)
!116 = !DILocation(line: 70, column: 35, scope: !7)
!117 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !107)
!118 = !DILocation(line: 71, column: 25, scope: !7)
!119 = !DILocation(line: 71, column: 37, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !107)
!121 = !DILocation(line: 72, column: 25, scope: !7)
!122 = !DILocation(line: 72, column: 37, scope: !7)
!123 = !DILocation(line: 72, column: 4, scope: !7)
