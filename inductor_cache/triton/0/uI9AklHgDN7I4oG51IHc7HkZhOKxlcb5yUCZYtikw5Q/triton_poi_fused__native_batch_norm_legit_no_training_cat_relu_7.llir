; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 256, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 49152, !dbg !15
  %.frozen75 = freeze i32 %19, !dbg !15
  %22 = sdiv i32 %.frozen75, 49152, !dbg !15
  %23 = mul i32 %21, 49152, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = mul i32 %22, 49152, !dbg !16
  %srem1.decomposed = sub i32 %.frozen75, %24, !dbg !16
  %25 = mul nsw i32 %21, 24576, !dbg !17
  %26 = mul nsw i32 %22, 24576, !dbg !17
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !18
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !18
  %29 = sext i32 %27 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = sext i32 %28 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = shl nsw i32 %21, 13, !dbg !20
  %34 = shl nsw i32 %22, 13, !dbg !20
  %35 = add nsw i32 %33, %20, !dbg !21
  %36 = add nsw i32 %35, -16384, !dbg !22
  %37 = add nsw i32 %34, %20, !dbg !21
  %38 = add nsw i32 %37, -16384, !dbg !22
  %39 = add nsw i32 %35, -24576, !dbg !23
  %40 = add nsw i32 %37, -24576, !dbg !23
  %41 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !24
  %42 = insertelement <2 x i32> %41, i32 %18, i64 1, !dbg !24
  %43 = sdiv <2 x i32> %42, splat (i32 256), !dbg !24
  %44 = srem <2 x i32> %43, splat (i32 192), !dbg !25
  %45 = extractelement <2 x i32> %44, i64 1, !dbg !26
  %46 = sext i32 %45 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !27
  %48 = extractelement <2 x i32> %44, i64 0, !dbg !26
  %49 = sext i32 %48 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %49, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !30
  %68 = bitcast i32 %67 to float, !dbg !30
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %72 = bitcast i32 %71 to float, !dbg !30
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !30
  %76 = bitcast i32 %75 to float, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !31
  %78 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %8, i64 %49, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !34
  %97 = icmp slt <2 x i32> %44, splat (i32 64), !dbg !35
  %98 = extractelement <2 x i1> %97, i64 1, !dbg !36
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #3, !dbg !36
  %100 = extractelement <2 x i1> %97, i64 0, !dbg !36
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #3, !dbg !36
  %102 = and <2 x i32> %44, splat (i32 -32), !dbg !37
  %103 = icmp eq <2 x i32> %102, splat (i32 64), !dbg !37
  %104 = shl nsw i32 %45, 8, !dbg !21
  %105 = shl nsw i32 %48, 8, !dbg !21
  %106 = add nsw i32 %36, %104, !dbg !38
  %107 = add nsw i32 %38, %105, !dbg !38
  %108 = sext i32 %106 to i64, !dbg !39
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !39
  %110 = sext i32 %107 to i64, !dbg !39
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !39
  %112 = extractelement <2 x i1> %103, i64 1, !dbg !40
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !40
  %114 = extractelement <2 x i1> %103, i64 0, !dbg !40
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #3, !dbg !40
  %116 = icmp eq <2 x i32> %102, splat (i32 96), !dbg !41
  %117 = add nsw i32 %39, %104, !dbg !42
  %118 = add nsw i32 %40, %105, !dbg !42
  %119 = sext i32 %117 to i64, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !43
  %121 = sext i32 %118 to i64, !dbg !43
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !43
  %123 = extractelement <2 x i1> %116, i64 1, !dbg !44
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #3, !dbg !44
  %125 = extractelement <2 x i1> %116, i64 0, !dbg !44
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #3, !dbg !44
  %127 = icmp eq <2 x i32> %102, splat (i32 128), !dbg !45
  %128 = add nsw i32 %35, -32768, !dbg !46
  %129 = add nsw i32 %128, %104, !dbg !47
  %130 = add nsw i32 %37, -32768, !dbg !46
  %131 = add nsw i32 %130, %105, !dbg !47
  %132 = sext i32 %129 to i64, !dbg !48
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !48
  %134 = sext i32 %131 to i64, !dbg !48
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !48
  %136 = extractelement <2 x i1> %127, i64 1, !dbg !49
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !49
  %138 = extractelement <2 x i1> %127, i64 0, !dbg !49
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #3, !dbg !49
  %140 = icmp sgt i32 %45, 159, !dbg !26
  %141 = icmp sgt i32 %48, 159, !dbg !26
  %142 = add nsw i32 %35, -40960, !dbg !50
  %143 = add nsw i32 %142, %104, !dbg !51
  %144 = add nsw i32 %37, -40960, !dbg !50
  %145 = add nsw i32 %144, %105, !dbg !51
  %146 = sext i32 %143 to i64, !dbg !52
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !52
  %148 = sext i32 %145 to i64, !dbg !52
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !52
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #3, !dbg !53
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !53
  %152 = fadd float %62, 0x3EE4F8B580000000, !dbg !54
  %153 = fadd float %64, 0x3EE4F8B580000000, !dbg !54
  %154 = fadd float %66, 0x3EE4F8B580000000, !dbg !54
  %155 = fadd float %68, 0x3EE4F8B580000000, !dbg !54
  %156 = fadd float %70, 0x3EE4F8B580000000, !dbg !54
  %157 = fadd float %72, 0x3EE4F8B580000000, !dbg !54
  %158 = fadd float %74, 0x3EE4F8B580000000, !dbg !54
  %159 = fadd float %76, 0x3EE4F8B580000000, !dbg !54
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %160, 0, !dbg !55
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %161, 0, !dbg !55
  br i1 %.not.i, label %167, label %162, !dbg !55

162:                                              ; preds = %12
  br i1 %.not1.i, label %165, label %163, !dbg !55

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

167:                                              ; preds = %12
  br i1 %.not1.i, label %170, label %168, !dbg !55

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %163, %165, %168, %170
  %.0.i = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !55
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i33 = icmp eq i32 %172, 0, !dbg !55
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i36 = icmp eq i32 %173, 0, !dbg !55
  br i1 %.not.i33, label %179, label %174, !dbg !55

174:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %177, label %175, !dbg !55

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

179:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %182, label %180, !dbg !55

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

__nv_sqrtf.exit37:                                ; preds = %175, %177, %180, %182
  %.0.i35 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !55
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i38 = icmp eq i32 %184, 0, !dbg !55
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i41 = icmp eq i32 %185, 0, !dbg !55
  br i1 %.not.i38, label %191, label %186, !dbg !55

186:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %189, label %187, !dbg !55

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

191:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %194, label %192, !dbg !55

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

__nv_sqrtf.exit42:                                ; preds = %187, %189, %192, %194
  %.0.i40 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !55
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i43 = icmp eq i32 %196, 0, !dbg !55
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i46 = icmp eq i32 %197, 0, !dbg !55
  br i1 %.not.i43, label %203, label %198, !dbg !55

198:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %201, label %199, !dbg !55

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

203:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %206, label %204, !dbg !55

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

__nv_sqrtf.exit47:                                ; preds = %199, %201, %204, %206
  %.0.i45 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !55
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i48 = icmp eq i32 %208, 0, !dbg !55
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i51 = icmp eq i32 %209, 0, !dbg !55
  br i1 %.not.i48, label %215, label %210, !dbg !55

210:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %213, label %211, !dbg !55

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

215:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %218, label %216, !dbg !55

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

__nv_sqrtf.exit52:                                ; preds = %211, %213, %216, %218
  %.0.i50 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !55
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i53 = icmp eq i32 %220, 0, !dbg !55
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i56 = icmp eq i32 %221, 0, !dbg !55
  br i1 %.not.i53, label %227, label %222, !dbg !55

222:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %225, label %223, !dbg !55

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

227:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %230, label %228, !dbg !55

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

__nv_sqrtf.exit57:                                ; preds = %223, %225, %228, %230
  %.0.i55 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !55
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i58 = icmp eq i32 %232, 0, !dbg !55
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i61 = icmp eq i32 %233, 0, !dbg !55
  br i1 %.not.i58, label %239, label %234, !dbg !55

234:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %237, label %235, !dbg !55

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

239:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %242, label %240, !dbg !55

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

__nv_sqrtf.exit62:                                ; preds = %235, %237, %240, %242
  %.0.i60 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !55
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i63 = icmp eq i32 %244, 0, !dbg !55
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i66 = icmp eq i32 %245, 0, !dbg !55
  br i1 %.not.i63, label %251, label %246, !dbg !55

246:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %249, label %247, !dbg !55

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

251:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %254, label %252, !dbg !55

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

__nv_sqrtf.exit67:                                ; preds = %247, %249, %252, %254
  %.0.i65 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !55
  %256 = shufflevector <2 x i1> %127, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !45
  %257 = shufflevector <2 x i1> %116, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %258 = shufflevector <2 x i1> %103, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !37
  %259 = shufflevector <2 x i1> %97, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %260 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !36
  %261 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !40
  %262 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !44
  %263 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !49
  %264 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !53
  %265 = insertelement <8 x i32> poison, i32 %58, i64 0, !dbg !28
  %266 = insertelement <8 x i32> %265, i32 %57, i64 1, !dbg !28
  %267 = insertelement <8 x i32> %266, i32 %56, i64 2, !dbg !28
  %268 = insertelement <8 x i32> %267, i32 %55, i64 3, !dbg !28
  %269 = insertelement <8 x i32> %268, i32 %54, i64 4, !dbg !28
  %270 = insertelement <8 x i32> %269, i32 %53, i64 5, !dbg !28
  %271 = insertelement <8 x i32> %270, i32 %52, i64 6, !dbg !28
  %272 = insertelement <8 x i32> %271, i32 %51, i64 7, !dbg !28
  %273 = bitcast <8 x i32> %272 to <8 x float>, !dbg !28
  %274 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !40
  %276 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !44
  %277 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !49
  %278 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !53
  %279 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !36
  %280 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !40
  %281 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !44
  %282 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !49
  %283 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !53
  %284 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !36
  %285 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !40
  %286 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !44
  %287 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !49
  %288 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !53
  %289 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !36
  %290 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !40
  %291 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !44
  %292 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !49
  %293 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !53
  %294 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !40
  %296 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !44
  %297 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !49
  %298 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !53
  %299 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !36
  %300 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !40
  %301 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !44
  %302 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !49
  %303 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !53
  %304 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !36
  %305 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !40
  %306 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !44
  %307 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !49
  %308 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !53
  %309 = insertelement <8 x i32> poison, i32 %96, i64 0, !dbg !34
  %310 = insertelement <8 x i32> %309, i32 %95, i64 1, !dbg !34
  %311 = insertelement <8 x i32> %310, i32 %94, i64 2, !dbg !34
  %312 = insertelement <8 x i32> %311, i32 %93, i64 3, !dbg !34
  %313 = insertelement <8 x i32> %312, i32 %92, i64 4, !dbg !34
  %314 = insertelement <8 x i32> %313, i32 %91, i64 5, !dbg !34
  %315 = insertelement <8 x i32> %314, i32 %90, i64 6, !dbg !34
  %316 = insertelement <8 x i32> %315, i32 %89, i64 7, !dbg !34
  %317 = bitcast <8 x i32> %316 to <8 x float>, !dbg !34
  %318 = insertelement <8 x i32> poison, i32 %86, i64 0, !dbg !32
  %319 = insertelement <8 x i32> %318, i32 %85, i64 1, !dbg !32
  %320 = insertelement <8 x i32> %319, i32 %84, i64 2, !dbg !32
  %321 = insertelement <8 x i32> %320, i32 %83, i64 3, !dbg !32
  %322 = insertelement <8 x i32> %321, i32 %82, i64 4, !dbg !32
  %323 = insertelement <8 x i32> %322, i32 %81, i64 5, !dbg !32
  %324 = insertelement <8 x i32> %323, i32 %80, i64 6, !dbg !32
  %325 = insertelement <8 x i32> %324, i32 %79, i64 7, !dbg !32
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !32
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !56
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !56
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !56
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #3, !dbg !56
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #3, !dbg !56
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #3, !dbg !56
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #3, !dbg !56
  %335 = insertelement <8 x i32> poison, i32 %263, i64 0, !dbg !57
  %336 = insertelement <8 x i32> %335, i32 %277, i64 1, !dbg !57
  %337 = insertelement <8 x i32> %336, i32 %282, i64 2, !dbg !57
  %338 = insertelement <8 x i32> %337, i32 %287, i64 3, !dbg !57
  %339 = insertelement <8 x i32> %338, i32 %292, i64 4, !dbg !57
  %340 = insertelement <8 x i32> %339, i32 %297, i64 5, !dbg !57
  %341 = insertelement <8 x i32> %340, i32 %302, i64 6, !dbg !57
  %342 = insertelement <8 x i32> %341, i32 %307, i64 7, !dbg !57
  %343 = insertelement <8 x i32> poison, i32 %264, i64 0, !dbg !57
  %344 = insertelement <8 x i32> %343, i32 %278, i64 1, !dbg !57
  %345 = insertelement <8 x i32> %344, i32 %283, i64 2, !dbg !57
  %346 = insertelement <8 x i32> %345, i32 %288, i64 3, !dbg !57
  %347 = insertelement <8 x i32> %346, i32 %293, i64 4, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %298, i64 5, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %303, i64 6, !dbg !57
  %350 = insertelement <8 x i32> %349, i32 %308, i64 7, !dbg !57
  %351 = select <8 x i1> %256, <8 x i32> %342, <8 x i32> %350, !dbg !57
  %352 = insertelement <8 x i32> poison, i32 %262, i64 0, !dbg !58
  %353 = insertelement <8 x i32> %352, i32 %276, i64 1, !dbg !58
  %354 = insertelement <8 x i32> %353, i32 %281, i64 2, !dbg !58
  %355 = insertelement <8 x i32> %354, i32 %286, i64 3, !dbg !58
  %356 = insertelement <8 x i32> %355, i32 %291, i64 4, !dbg !58
  %357 = insertelement <8 x i32> %356, i32 %296, i64 5, !dbg !58
  %358 = insertelement <8 x i32> %357, i32 %301, i64 6, !dbg !58
  %359 = insertelement <8 x i32> %358, i32 %306, i64 7, !dbg !58
  %360 = select <8 x i1> %257, <8 x i32> %359, <8 x i32> %351, !dbg !58
  %361 = insertelement <8 x i32> poison, i32 %261, i64 0, !dbg !59
  %362 = insertelement <8 x i32> %361, i32 %275, i64 1, !dbg !59
  %363 = insertelement <8 x i32> %362, i32 %280, i64 2, !dbg !59
  %364 = insertelement <8 x i32> %363, i32 %285, i64 3, !dbg !59
  %365 = insertelement <8 x i32> %364, i32 %290, i64 4, !dbg !59
  %366 = insertelement <8 x i32> %365, i32 %295, i64 5, !dbg !59
  %367 = insertelement <8 x i32> %366, i32 %300, i64 6, !dbg !59
  %368 = insertelement <8 x i32> %367, i32 %305, i64 7, !dbg !59
  %369 = select <8 x i1> %258, <8 x i32> %368, <8 x i32> %360, !dbg !59
  %370 = insertelement <8 x i32> poison, i32 %260, i64 0, !dbg !60
  %371 = insertelement <8 x i32> %370, i32 %274, i64 1, !dbg !60
  %372 = insertelement <8 x i32> %371, i32 %279, i64 2, !dbg !60
  %373 = insertelement <8 x i32> %372, i32 %284, i64 3, !dbg !60
  %374 = insertelement <8 x i32> %373, i32 %289, i64 4, !dbg !60
  %375 = insertelement <8 x i32> %374, i32 %294, i64 5, !dbg !60
  %376 = insertelement <8 x i32> %375, i32 %299, i64 6, !dbg !60
  %377 = insertelement <8 x i32> %376, i32 %304, i64 7, !dbg !60
  %378 = select <8 x i1> %259, <8 x i32> %377, <8 x i32> %369, !dbg !60
  %379 = bitcast <8 x i32> %378 to <8 x float>, !dbg !60
  %380 = fsub <8 x float> %379, %273, !dbg !61
  %381 = insertelement <8 x float> poison, float %334, i64 0, !dbg !62
  %382 = insertelement <8 x float> %381, float %333, i64 1, !dbg !62
  %383 = insertelement <8 x float> %382, float %332, i64 2, !dbg !62
  %384 = insertelement <8 x float> %383, float %331, i64 3, !dbg !62
  %385 = insertelement <8 x float> %384, float %330, i64 4, !dbg !62
  %386 = insertelement <8 x float> %385, float %329, i64 5, !dbg !62
  %387 = insertelement <8 x float> %386, float %328, i64 6, !dbg !62
  %388 = insertelement <8 x float> %387, float %327, i64 7, !dbg !62
  %389 = fmul <8 x float> %380, %388, !dbg !62
  %390 = fmul <8 x float> %389, %326, !dbg !63
  %391 = fadd <8 x float> %390, %317, !dbg !64
  %392 = fcmp olt <8 x float> %391, zeroinitializer, !dbg !65
  %393 = extractelement <8 x i1> %392, i64 7, !dbg !69
  %394 = extractelement <8 x i1> %392, i64 6, !dbg !69
  %395 = extractelement <8 x i1> %392, i64 5, !dbg !69
  %396 = extractelement <8 x i1> %392, i64 4, !dbg !69
  %397 = extractelement <8 x i1> %392, i64 3, !dbg !69
  %398 = extractelement <8 x i1> %392, i64 2, !dbg !69
  %399 = extractelement <8 x i1> %392, i64 1, !dbg !69
  %400 = extractelement <8 x i1> %392, i64 0, !dbg !69
  %401 = sext i32 %18 to i64, !dbg !70
  %402 = getelementptr float, ptr addrspace(1) %9, i64 %401, !dbg !70
  %403 = sext i32 %19 to i64, !dbg !70
  %404 = getelementptr float, ptr addrspace(1) %9, i64 %403, !dbg !70
  %405 = extractelement <8 x i32> %378, i64 4, !dbg !71
  %406 = extractelement <8 x i32> %378, i64 5, !dbg !71
  %407 = extractelement <8 x i32> %378, i64 6, !dbg !71
  %408 = extractelement <8 x i32> %378, i64 7, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %408, i32 %407, i32 %406, i32 %405, ptr addrspace(1) %402, i1 true) #3, !dbg !71
  %409 = extractelement <8 x i32> %378, i64 0, !dbg !71
  %410 = extractelement <8 x i32> %378, i64 1, !dbg !71
  %411 = extractelement <8 x i32> %378, i64 2, !dbg !71
  %412 = extractelement <8 x i32> %378, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %412, i32 %411, i32 %410, i32 %409, ptr addrspace(1) %404, i1 true) #3, !dbg !71
  %413 = getelementptr float, ptr addrspace(1) %10, i64 %401, !dbg !72
  %414 = getelementptr float, ptr addrspace(1) %10, i64 %403, !dbg !72
  %bc = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %415 = extractelement <8 x i32> %bc, i64 7, !dbg !73
  %416 = select i1 %393, i32 0, i32 %415, !dbg !69
  %bc68 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %417 = extractelement <8 x i32> %bc68, i64 6, !dbg !73
  %418 = select i1 %394, i32 0, i32 %417, !dbg !69
  %bc69 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %419 = extractelement <8 x i32> %bc69, i64 5, !dbg !73
  %420 = select i1 %395, i32 0, i32 %419, !dbg !69
  %bc70 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %421 = extractelement <8 x i32> %bc70, i64 4, !dbg !73
  %422 = select i1 %396, i32 0, i32 %421, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %416, i32 %418, i32 %420, i32 %422, ptr addrspace(1) %413, i1 true) #3, !dbg !73
  %bc71 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %423 = extractelement <8 x i32> %bc71, i64 3, !dbg !73
  %424 = select i1 %397, i32 0, i32 %423, !dbg !69
  %bc72 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %425 = extractelement <8 x i32> %bc72, i64 2, !dbg !73
  %426 = select i1 %398, i32 0, i32 %425, !dbg !69
  %bc73 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %427 = extractelement <8 x i32> %bc73, i64 1, !dbg !73
  %428 = select i1 %399, i32 0, i32 %427, !dbg !69
  %bc74 = bitcast <8 x float> %391 to <8 x i32>, !dbg !73
  %429 = extractelement <8 x i32> %bc74, i64 0, !dbg !73
  %430 = select i1 %400, i32 0, i32 %429, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %424, i32 %426, i32 %428, i32 %430, ptr addrspace(1) %414, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7xtmzbp23xlo2qral3g34lflqmjgdzn3cmptszsgly7nnzwjjm3.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 52, scope: !7)
!18 = !DILocation(line: 37, column: 46, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 42, column: 41, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 28, scope: !7)
!26 = !DILocation(line: 53, column: 20, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 57, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 55, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 65, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 65, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 36, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 66, scope: !7)
!50 = !DILocation(line: 56, column: 36, scope: !7)
!51 = !DILocation(line: 56, column: 56, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 66, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 27, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 35, scope: !7)
!58 = !DILocation(line: 58, column: 35, scope: !7)
!59 = !DILocation(line: 59, column: 34, scope: !7)
!60 = !DILocation(line: 60, column: 33, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
