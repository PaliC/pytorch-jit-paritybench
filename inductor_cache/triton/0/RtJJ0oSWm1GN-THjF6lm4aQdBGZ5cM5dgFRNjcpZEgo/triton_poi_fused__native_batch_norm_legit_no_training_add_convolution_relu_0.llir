; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25) local_unnamed_addr !dbg !7 {
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %28 = shl i32 %27, 8, !dbg !11
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %30 = shl i32 %29, 1, !dbg !12
  %31 = and i32 %30, 254, !dbg !12
  %32 = or disjoint i32 %28, %31, !dbg !13
  %33 = icmp slt i32 %32, 256, !dbg !14
  %34 = sdiv i32 %32, 16, !dbg !15
  %35 = srem i32 %34, 4, !dbg !16
  %36 = sext i32 %32 to i64, !dbg !17
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !17
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %33) #3, !dbg !18
  %39 = sext i32 %35 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %33) #3, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %33) #3, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %33) #3, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %33) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %33) #3, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %33) #3, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %33) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %33) #3, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !29
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %33) #3, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %39, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %33) #3, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %33) #3, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %9, i64 %39, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %33) #3, !dbg !34
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %33) #3, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %10, i64 %39, !dbg !35
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %33) #3, !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %33) #3, !dbg !36
  %65 = bitcast i32 %64 to float, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %11, i64 %39, !dbg !37
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %33) #3, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %33) #3, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %12, i64 %39, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %33) #3, !dbg !40
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %33) #3, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %13, i64 %39, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %33) #3, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %33) #3, !dbg !42
  %75 = getelementptr float, ptr addrspace(1) %14, i64 %39, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %33) #3, !dbg !44
  %77 = bitcast i32 %76 to float, !dbg !44
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %33) #3, !dbg !44
  %79 = bitcast i32 %78 to float, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %15, i64 %39, !dbg !45
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %33) #3, !dbg !46
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %33) #3, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %16, i64 %39, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %33) #3, !dbg !48
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %33) #3, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %17, i64 %39, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %33) #3, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %33) #3, !dbg !50
  %89 = getelementptr float, ptr addrspace(1) %18, i64 %39, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %33) #3, !dbg !52
  %91 = bitcast i32 %90 to float, !dbg !52
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %33) #3, !dbg !52
  %93 = bitcast i32 %92 to float, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %19, i64 %39, !dbg !53
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %33) #3, !dbg !54
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %33) #3, !dbg !54
  %97 = getelementptr float, ptr addrspace(1) %20, i64 %39, !dbg !55
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #3, !dbg !56
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %33) #3, !dbg !56
  %100 = getelementptr float, ptr addrspace(1) %21, i64 %39, !dbg !57
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %33) #3, !dbg !58
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %33) #3, !dbg !58
  %103 = getelementptr float, ptr addrspace(1) %22, i64 %39, !dbg !59
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %33) #3, !dbg !60
  %105 = bitcast i32 %104 to float, !dbg !60
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %33) #3, !dbg !60
  %107 = bitcast i32 %106 to float, !dbg !60
  %108 = getelementptr float, ptr addrspace(1) %23, i64 %39, !dbg !61
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %33) #3, !dbg !62
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %33) #3, !dbg !62
  %111 = getelementptr float, ptr addrspace(1) %24, i64 %39, !dbg !63
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %33) #3, !dbg !64
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %33) #3, !dbg !64
  %114 = fadd float %63, 0x3EE4F8B580000000, !dbg !65
  %115 = fadd float %65, 0x3EE4F8B580000000, !dbg !65
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i = icmp eq i32 %116, 0, !dbg !66
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i = icmp eq i32 %117, 0, !dbg !66
  br i1 %.not.i, label %123, label %118, !dbg !66

118:                                              ; preds = %26
  br i1 %.not1.i, label %121, label %119, !dbg !66

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

123:                                              ; preds = %26
  br i1 %.not1.i, label %126, label %124, !dbg !66

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !66
  br label %__nv_sqrtf.exit, !dbg !66

__nv_sqrtf.exit:                                  ; preds = %119, %121, %124, %126
  %.0.i = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !66
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i1 = icmp eq i32 %128, 0, !dbg !66
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i4 = icmp eq i32 %129, 0, !dbg !66
  br i1 %.not.i1, label %135, label %130, !dbg !66

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !66

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !66

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !66
  br label %__nv_sqrtf.exit5, !dbg !66

__nv_sqrtf.exit5:                                 ; preds = %131, %133, %136, %138
  %.0.i3 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !66
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !67
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !67
  %142 = fadd float %77, 0x3EE4F8B580000000, !dbg !68
  %143 = fadd float %79, 0x3EE4F8B580000000, !dbg !68
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i6 = icmp eq i32 %144, 0, !dbg !69
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i9 = icmp eq i32 %145, 0, !dbg !69
  br i1 %.not.i6, label %151, label %146, !dbg !69

146:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %149, label %147, !dbg !69

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

151:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %154, label %152, !dbg !69

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit10, !dbg !69

__nv_sqrtf.exit10:                                ; preds = %147, %149, %152, %154
  %.0.i8 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !69
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i11 = icmp eq i32 %156, 0, !dbg !69
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i14 = icmp eq i32 %157, 0, !dbg !69
  br i1 %.not.i11, label %163, label %158, !dbg !69

158:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %161, label %159, !dbg !69

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

163:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %166, label %164, !dbg !69

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !69
  br label %__nv_sqrtf.exit15, !dbg !69

__nv_sqrtf.exit15:                                ; preds = %159, %161, %164, %166
  %.0.i13 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !69
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !70
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !70
  %170 = fadd float %91, 0x3EE4F8B580000000, !dbg !71
  %171 = fadd float %93, 0x3EE4F8B580000000, !dbg !71
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i16 = icmp eq i32 %172, 0, !dbg !72
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i19 = icmp eq i32 %173, 0, !dbg !72
  br i1 %.not.i16, label %179, label %174, !dbg !72

174:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %177, label %175, !dbg !72

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !72
  br label %__nv_sqrtf.exit20, !dbg !72

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !72
  br label %__nv_sqrtf.exit20, !dbg !72

179:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %182, label %180, !dbg !72

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !72
  br label %__nv_sqrtf.exit20, !dbg !72

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !72
  br label %__nv_sqrtf.exit20, !dbg !72

__nv_sqrtf.exit20:                                ; preds = %175, %177, %180, %182
  %.0.i18 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !72
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i21 = icmp eq i32 %184, 0, !dbg !72
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i24 = icmp eq i32 %185, 0, !dbg !72
  br i1 %.not.i21, label %191, label %186, !dbg !72

186:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %189, label %187, !dbg !72

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !72
  br label %__nv_sqrtf.exit25, !dbg !72

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !72
  br label %__nv_sqrtf.exit25, !dbg !72

191:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %194, label %192, !dbg !72

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !72
  br label %__nv_sqrtf.exit25, !dbg !72

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !72
  br label %__nv_sqrtf.exit25, !dbg !72

__nv_sqrtf.exit25:                                ; preds = %187, %189, %192, %194
  %.0.i23 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !72
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !73
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !73
  %198 = fadd float %105, 0x3EE4F8B580000000, !dbg !74
  %199 = fadd float %107, 0x3EE4F8B580000000, !dbg !74
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i26 = icmp eq i32 %200, 0, !dbg !75
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i29 = icmp eq i32 %201, 0, !dbg !75
  br i1 %.not.i26, label %207, label %202, !dbg !75

202:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %205, label %203, !dbg !75

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !75

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

__nv_sqrtf.exit30:                                ; preds = %203, %205, %208, %210
  %.0.i28 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !75
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i31 = icmp eq i32 %212, 0, !dbg !75
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i34 = icmp eq i32 %213, 0, !dbg !75
  br i1 %.not.i31, label %219, label %214, !dbg !75

214:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %217, label %215, !dbg !75

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %199) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %199) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !75

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %199) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %199) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

__nv_sqrtf.exit35:                                ; preds = %215, %217, %220, %222
  %.0.i33 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !75
  %224 = extractvalue { i32, i32 } %54, 1, !dbg !30
  %225 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !32
  %226 = insertelement <4 x i32> %225, i32 %56, i64 1, !dbg !32
  %227 = insertelement <4 x i32> %226, i32 %51, i64 2, !dbg !32
  %228 = insertelement <4 x i32> %227, i32 %52, i64 3, !dbg !32
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !32
  %230 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !58
  %231 = insertelement <4 x i32> %230, i32 %101, i64 1, !dbg !58
  %232 = insertelement <4 x i32> %231, i32 %87, i64 2, !dbg !58
  %233 = insertelement <4 x i32> %232, i32 %88, i64 3, !dbg !58
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !58
  %235 = extractvalue { i32, i32 } %54, 0, !dbg !30
  %236 = extractvalue { i32, i32 } %38, 1, !dbg !18
  %237 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !20
  %238 = insertelement <2 x i32> %237, i32 %47, i64 1, !dbg !20
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !20
  %240 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !34
  %241 = insertelement <2 x i32> %240, i32 %74, i64 1, !dbg !34
  %242 = bitcast <2 x i32> %241 to <2 x float>, !dbg !34
  %243 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !38
  %244 = insertelement <2 x i32> %243, i32 %82, i64 1, !dbg !38
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !38
  %246 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !40
  %247 = insertelement <2 x i32> %246, i32 %85, i64 1, !dbg !40
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !40
  %249 = extractvalue { i32, i32 } %44, 1, !dbg !22
  %250 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !18
  %251 = insertelement <2 x i32> %250, i32 %249, i64 1, !dbg !18
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !18
  %253 = fadd <2 x float> %252, %239, !dbg !76
  %254 = fsub <2 x float> %253, %242, !dbg !77
  %255 = insertelement <2 x float> poison, float %141, i64 0, !dbg !78
  %256 = insertelement <2 x float> %255, float %169, i64 1, !dbg !78
  %257 = fmul <2 x float> %254, %256, !dbg !78
  %258 = fmul <2 x float> %257, %245, !dbg !79
  %259 = fadd <2 x float> %258, %248, !dbg !80
  %260 = fcmp olt <2 x float> %259, zeroinitializer, !dbg !81
  %261 = select <2 x i1> %260, <2 x float> zeroinitializer, <2 x float> %259, !dbg !85
  %shift = shufflevector <2 x float> %261, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !86
  %262 = fadd <2 x float> %261, %shift, !dbg !86
  %263 = extractelement <2 x float> %262, i64 0, !dbg !86
  %264 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %265 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !62
  %266 = insertelement <4 x i32> %265, i32 %109, i64 1, !dbg !62
  %267 = insertelement <4 x i32> %266, i32 %95, i64 2, !dbg !62
  %268 = insertelement <4 x i32> %267, i32 %96, i64 3, !dbg !62
  %269 = bitcast <4 x i32> %268 to <4 x float>, !dbg !62
  %270 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !64
  %271 = insertelement <4 x i32> %270, i32 %112, i64 1, !dbg !64
  %272 = insertelement <4 x i32> %271, i32 %98, i64 2, !dbg !64
  %273 = insertelement <4 x i32> %272, i32 %99, i64 3, !dbg !64
  %274 = bitcast <4 x i32> %273 to <4 x float>, !dbg !64
  %275 = extractvalue { i32, i32 } %38, 0, !dbg !18
  %276 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %277 = insertelement <2 x i32> %276, i32 %46, i64 1, !dbg !20
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !20
  %279 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !34
  %280 = insertelement <2 x i32> %279, i32 %73, i64 1, !dbg !34
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !34
  %282 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !38
  %283 = insertelement <2 x i32> %282, i32 %81, i64 1, !dbg !38
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !38
  %285 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !40
  %286 = insertelement <2 x i32> %285, i32 %84, i64 1, !dbg !40
  %287 = bitcast <2 x i32> %286 to <2 x float>, !dbg !40
  %288 = extractvalue { i32, i32 } %44, 0, !dbg !22
  %289 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !18
  %290 = insertelement <2 x i32> %289, i32 %288, i64 1, !dbg !18
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !18
  %292 = fadd <2 x float> %291, %278, !dbg !76
  %293 = fsub <2 x float> %292, %281, !dbg !77
  %294 = insertelement <2 x float> poison, float %140, i64 0, !dbg !78
  %295 = insertelement <2 x float> %294, float %168, i64 1, !dbg !78
  %296 = fmul <2 x float> %293, %295, !dbg !78
  %297 = fmul <2 x float> %296, %284, !dbg !79
  %298 = fadd <2 x float> %297, %287, !dbg !80
  %299 = fcmp olt <2 x float> %298, zeroinitializer, !dbg !81
  %300 = select <2 x i1> %299, <2 x float> zeroinitializer, <2 x float> %298, !dbg !85
  %shift36 = shufflevector <2 x float> %300, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !86
  %301 = fadd <2 x float> %300, %shift36, !dbg !86
  %302 = extractelement <2 x float> %301, i64 0, !dbg !86
  %303 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !87
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !87
  %306 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !30
  %307 = insertelement <4 x i32> %306, i32 %235, i64 1, !dbg !30
  %308 = insertelement <4 x i32> %307, i32 %303, i64 2, !dbg !30
  %309 = insertelement <4 x i32> %308, i32 %264, i64 3, !dbg !30
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !30
  %311 = fadd <4 x float> %310, %229, !dbg !88
  %312 = fsub <4 x float> %311, %234, !dbg !89
  %313 = insertelement <4 x float> poison, float %305, i64 0, !dbg !90
  %314 = insertelement <4 x float> %313, float %304, i64 1, !dbg !90
  %315 = insertelement <4 x float> %314, float %196, i64 2, !dbg !90
  %316 = insertelement <4 x float> %315, float %197, i64 3, !dbg !90
  %317 = fmul <4 x float> %312, %316, !dbg !90
  %318 = fmul <4 x float> %317, %269, !dbg !91
  %319 = fadd <4 x float> %318, %274, !dbg !92
  %320 = fcmp olt <4 x float> %319, zeroinitializer, !dbg !93
  %321 = extractelement <4 x i1> %320, i64 3, !dbg !95
  %322 = extractelement <4 x float> %319, i64 3, !dbg !95
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !95
  %324 = fadd float %263, %323, !dbg !97
  %325 = extractelement <4 x i1> %320, i64 2, !dbg !95
  %326 = extractelement <4 x float> %319, i64 2, !dbg !95
  %327 = select i1 %325, float 0.000000e+00, float %326, !dbg !95
  %328 = fadd float %302, %327, !dbg !97
  %329 = extractelement <4 x i1> %320, i64 1, !dbg !98
  %330 = extractelement <4 x float> %319, i64 1, !dbg !98
  %331 = select i1 %329, float 0.000000e+00, float %330, !dbg !98
  %332 = extractelement <4 x i1> %320, i64 0, !dbg !98
  %333 = extractelement <4 x float> %319, i64 0, !dbg !98
  %334 = select i1 %332, float 0.000000e+00, float %333, !dbg !98
  %335 = fadd float %328, %331, !dbg !99
  %336 = fadd float %324, %334, !dbg !99
  %bc = bitcast <2 x float> %292 to <2 x i32>, !dbg !100
  %337 = extractelement <2 x i32> %bc, i64 0, !dbg !100
  %bc37 = bitcast <2 x float> %253 to <2 x i32>, !dbg !100
  %338 = extractelement <2 x i32> %bc37, i64 0, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %337, i32 %338, ptr addrspace(1) %37, i1 %33) #3, !dbg !100
  %bc38 = bitcast <2 x float> %292 to <2 x i32>, !dbg !101
  %339 = extractelement <2 x i32> %bc38, i64 1, !dbg !101
  %bc39 = bitcast <2 x float> %253 to <2 x i32>, !dbg !101
  %340 = extractelement <2 x i32> %bc39, i64 1, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %339, i32 %340, ptr addrspace(1) %43, i1 %33) #3, !dbg !101
  %bc40 = bitcast <4 x float> %311 to <4 x i32>, !dbg !102
  %341 = extractelement <4 x i32> %bc40, i64 2, !dbg !102
  %bc41 = bitcast <4 x float> %311 to <4 x i32>, !dbg !102
  %342 = extractelement <4 x i32> %bc41, i64 3, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %341, i32 %342, ptr addrspace(1) %48, i1 %33) #3, !dbg !102
  %bc42 = bitcast <4 x float> %311 to <4 x i32>, !dbg !103
  %343 = extractelement <4 x i32> %bc42, i64 1, !dbg !103
  %bc43 = bitcast <4 x float> %311 to <4 x i32>, !dbg !103
  %344 = extractelement <4 x i32> %bc43, i64 0, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %343, i32 %344, ptr addrspace(1) %53, i1 %33) #3, !dbg !103
  %345 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !104
  %346 = bitcast float %335 to i32, !dbg !105
  %347 = bitcast float %336 to i32, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %346, i32 %347, ptr addrspace(1) %345, i1 %33) #3, !dbg !105
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciyfzzguhjokllixtncka7srzn4r7bcgmryfng2h77ucbktyr6uh.py", directory: "inductor_cache/iy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 39, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 34, scope: !7)
!26 = !DILocation(line: 30, column: 39, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 34, scope: !7)
!30 = !DILocation(line: 32, column: 39, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 31, scope: !7)
!42 = !DILocation(line: 38, column: 36, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 36, scope: !7)
!45 = !DILocation(line: 40, column: 32, scope: !7)
!46 = !DILocation(line: 40, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 32, scope: !7)
!48 = !DILocation(line: 41, column: 37, scope: !7)
!49 = !DILocation(line: 42, column: 32, scope: !7)
!50 = !DILocation(line: 42, column: 37, scope: !7)
!51 = !DILocation(line: 43, column: 32, scope: !7)
!52 = !DILocation(line: 43, column: 37, scope: !7)
!53 = !DILocation(line: 44, column: 32, scope: !7)
!54 = !DILocation(line: 44, column: 37, scope: !7)
!55 = !DILocation(line: 45, column: 32, scope: !7)
!56 = !DILocation(line: 45, column: 37, scope: !7)
!57 = !DILocation(line: 46, column: 32, scope: !7)
!58 = !DILocation(line: 46, column: 37, scope: !7)
!59 = !DILocation(line: 47, column: 32, scope: !7)
!60 = !DILocation(line: 47, column: 37, scope: !7)
!61 = !DILocation(line: 48, column: 32, scope: !7)
!62 = !DILocation(line: 48, column: 37, scope: !7)
!63 = !DILocation(line: 49, column: 32, scope: !7)
!64 = !DILocation(line: 49, column: 37, scope: !7)
!65 = !DILocation(line: 56, column: 20, scope: !7)
!66 = !DILocation(line: 57, column: 27, scope: !7)
!67 = !DILocation(line: 59, column: 20, scope: !7)
!68 = !DILocation(line: 68, column: 20, scope: !7)
!69 = !DILocation(line: 69, column: 27, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 79, column: 27, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 20, scope: !7)
!75 = !DILocation(line: 89, column: 27, scope: !7)
!76 = !DILocation(line: 50, column: 18, scope: !7)
!77 = !DILocation(line: 54, column: 19, scope: !7)
!78 = !DILocation(line: 62, column: 20, scope: !7)
!79 = !DILocation(line: 63, column: 20, scope: !7)
!80 = !DILocation(line: 64, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 66, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 76, column: 20, scope: !7)
!87 = !DILocation(line: 90, column: 20, scope: !7)
!88 = !DILocation(line: 53, column: 19, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 92, column: 20, scope: !7)
!91 = !DILocation(line: 93, column: 20, scope: !7)
!92 = !DILocation(line: 94, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !94)
!94 = !DILocation(line: 95, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !96)
!96 = !DILocation(line: 85, column: 42, scope: !7)
!97 = !DILocation(line: 86, column: 20, scope: !7)
!98 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !94)
!99 = !DILocation(line: 96, column: 20, scope: !7)
!100 = !DILocation(line: 97, column: 39, scope: !7)
!101 = !DILocation(line: 98, column: 39, scope: !7)
!102 = !DILocation(line: 99, column: 39, scope: !7)
!103 = !DILocation(line: 100, column: 40, scope: !7)
!104 = !DILocation(line: 101, column: 28, scope: !7)
!105 = !DILocation(line: 101, column: 40, scope: !7)
!106 = !DILocation(line: 101, column: 4, scope: !7)
