; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_div_eq_linalg_vector_norm_masked_fill_mean_mul_relu_sub_6(ptr addrspace(1) %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) nocapture readnone %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 9, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 510, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %.frozen = freeze i32 %21, !dbg !14
  %22 = sdiv i32 %.frozen, 64, !dbg !14
  %23 = srem i32 %22, 64, !dbg !15
  %24 = mul i32 %22, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %.frozen6 = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen6, 4096, !dbg !17
  %26 = mul i32 %25, 4096, !dbg !18
  %.decomposed7 = sub i32 %.frozen6, %26, !dbg !18
  %27 = sdiv i32 %21, 1048576, !dbg !19
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = sext i32 %.decomposed to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !22
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = sext i32 %23 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %41 = sext i32 %21 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !26
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !28
  %45 = shl nsw i32 %27, 12, !dbg !29
  %46 = add nsw i32 %45, %.decomposed7, !dbg !30
  %47 = sext i32 %46 to i64, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %47, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %47, !dbg !33
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !34
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !34
  %54 = bitcast i32 %52 to float, !dbg !34
  %55 = bitcast i32 %53 to float, !dbg !34
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 4.096000e+03) #3, !dbg !35
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 4.096000e+03) #3, !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %58, 0, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %59, 0, !dbg !36
  br i1 %.not.i, label %65, label %60, !dbg !36

60:                                               ; preds = %15
  br i1 %.not1.i, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

65:                                               ; preds = %15
  br i1 %.not1.i, label %68, label %66, !dbg !36

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !36
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %70, 0, !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !36
  br i1 %.not.i1, label %77, label %72, !dbg !36

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !36

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !36
  %82 = fsub float %57, %57, !dbg !37
  %83 = extractvalue { i32, i32 } %36, 1, !dbg !23
  %84 = bitcast i32 %83 to float, !dbg !23
  %85 = fmul float %82, %84, !dbg !38
  %86 = fadd float %57, %85, !dbg !39
  %87 = fsub float %86, %86, !dbg !40
  %88 = bitcast i32 %40 to float, !dbg !25
  %89 = fmul float %87, %88, !dbg !41
  %90 = fadd float %86, %89, !dbg !42
  %91 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fmul float %90, %92, !dbg !43
  %94 = bitcast i32 %44 to float, !dbg !28
  %95 = fmul float %93, %94, !dbg !44
  %96 = extractvalue { i32, i32 } %43, 1, !dbg !27
  %97 = bitcast i32 %96 to float, !dbg !27
  %98 = fadd float %95, %97, !dbg !45
  %99 = fsub float %56, %56, !dbg !37
  %100 = extractvalue { i32, i32 } %36, 0, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = fmul float %99, %101, !dbg !38
  %103 = fadd float %56, %102, !dbg !39
  %104 = fsub float %103, %103, !dbg !40
  %105 = bitcast i32 %39 to float, !dbg !25
  %106 = fmul float %104, %105, !dbg !41
  %107 = fadd float %103, %106, !dbg !42
  %108 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = fmul float %107, %109, !dbg !43
  %111 = fmul float %110, %94, !dbg !44
  %112 = extractvalue { i32, i32 } %43, 0, !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = fadd float %111, %113, !dbg !45
  %115 = fcmp oeq float %.0.i, 0.000000e+00, !dbg !46
  %116 = fcmp oeq float %.0.i3, 0.000000e+00, !dbg !46
  %117 = fsub float %113, %56, !dbg !47
  %118 = fsub float %97, %57, !dbg !47
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %.0.i) #3, !dbg !48
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %.0.i3) #3, !dbg !48
  %121 = select i1 %115, float 0.000000e+00, float %119, !dbg !49
  %122 = select i1 %116, float 0.000000e+00, float %120, !dbg !49
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !50
  %124 = bitcast float %107 to i32, !dbg !51
  %125 = bitcast float %90 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 true) #3, !dbg !51
  %126 = getelementptr float, ptr addrspace(1) %12, i64 %41, !dbg !52
  %127 = bitcast float %114 to i32, !dbg !53
  %128 = bitcast float %98 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 true) #3, !dbg !53
  %129 = getelementptr float, ptr addrspace(1) %13, i64 %41, !dbg !54
  %130 = bitcast float %121 to i32, !dbg !55
  %131 = bitcast float %122 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %129, i1 true) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdyrrmmsoqfoyxtt7vskoyep7r3bizflnohpev64j3j7jjjd2hyq.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_div_eq_linalg_vector_norm_masked_fill_mean_mul_relu_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_div_eq_linalg_vector_norm_masked_fill_mean_mul_relu_sub_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_div_eq_linalg_vector_norm_masked_fill_mean_mul_relu_sub_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_div_eq_linalg_vector_norm_masked_fill_mean_mul_relu_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 31, scope: !7)
!23 = !DILocation(line: 34, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 20, scope: !7)
!29 = !DILocation(line: 40, column: 41, scope: !7)
!30 = !DILocation(line: 40, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 40, column: 46, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 41, column: 47, scope: !7)
!35 = !DILocation(line: 50, column: 19, scope: !7)
!36 = !DILocation(line: 66, column: 27, scope: !7)
!37 = !DILocation(line: 54, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 20, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 64, column: 20, scope: !7)
!45 = !DILocation(line: 65, column: 20, scope: !7)
!46 = !DILocation(line: 68, column: 21, scope: !7)
!47 = !DILocation(line: 69, column: 20, scope: !7)
!48 = !DILocation(line: 70, column: 20, scope: !7)
!49 = !DILocation(line: 71, column: 35, scope: !7)
!50 = !DILocation(line: 72, column: 28, scope: !7)
!51 = !DILocation(line: 72, column: 40, scope: !7)
!52 = !DILocation(line: 73, column: 25, scope: !7)
!53 = !DILocation(line: 73, column: 37, scope: !7)
!54 = !DILocation(line: 74, column: 25, scope: !7)
!55 = !DILocation(line: 74, column: 37, scope: !7)
!56 = !DILocation(line: 74, column: 4, scope: !7)
