; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_elu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = sdiv i32 %13, 8, !dbg !15
  %16 = srem i32 %15, 8, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = sext i32 %16 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %14) #3, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %14) #3, !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #3, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #3, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %14) #3, !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = fadd float %20, %24, !dbg !29
  %38 = fsub float %37, %27, !dbg !30
  %39 = fadd float %30, 0x3EE4F8B580000000, !dbg !31
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %40, 0, !dbg !32
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %41, 0, !dbg !32
  br i1 %.not.i, label %47, label %42, !dbg !32

42:                                               ; preds = %8
  br i1 %.not1.i, label %45, label %43, !dbg !32

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

47:                                               ; preds = %8
  br i1 %.not1.i, label %50, label %48, !dbg !32

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !32
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %53 = fmul float %38, %52, !dbg !34
  %54 = fmul float %53, %33, !dbg !35
  %55 = fadd float %54, %36, !dbg !36
  %56 = fmul float %55, 0x3FF7154760000000, !dbg !37
  %57 = tail call float @llvm.nvvm.round.f(float %56) #3, !dbg !37
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call float @llvm.nvvm.fabs.ftz.f(float %55) #3, !dbg !37
  %60 = tail call float @llvm.nvvm.fabs.f(float %55) #3, !dbg !37
  %.03.i = select i1 %.not.i1, float %60, float %59, !dbg !37
  %61 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !37
  %t.0.i = select i1 %61, float 0.000000e+00, float %57, !dbg !37
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %64 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !37
  %j.0.i = select i1 %64, float 1.270000e+02, float %t.0.i, !dbg !37
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not8.i = icmp eq i32 %70, 0, !dbg !37
  br i1 %.not8.i, label %73, label %71, !dbg !37

71:                                               ; preds = %__nv_sqrtf.exit
  %72 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #3, !dbg !37
  br label %__nv_expm1f.exit, !dbg !37

73:                                               ; preds = %__nv_sqrtf.exit
  %74 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #3, !dbg !37
  br label %__nv_expm1f.exit, !dbg !37

__nv_expm1f.exit:                                 ; preds = %71, %73
  %.0.i2 = phi float [ %72, %71 ], [ %74, %73 ], !dbg !37
  %75 = fcmp ogt float %55, 0.000000e+00, !dbg !38
  %.not7.i = icmp eq i32 %69, 0, !dbg !37
  %.not6.i = icmp eq i32 %68, 0, !dbg !37
  %.not5.i = icmp eq i32 %67, 0, !dbg !37
  %.not4.i = icmp eq i32 %66, 0, !dbg !37
  %.not3.i = icmp eq i32 %65, 0, !dbg !37
  %.not2.i3 = icmp eq i32 %63, 0, !dbg !37
  %76 = fneg float %t.0.i, !dbg !37
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !37
  %77 = tail call float @llvm.nvvm.fma.rn.f(float %76, float 0x3FE62E4000000000, float %55) #3, !dbg !37
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %76, float 0x3FE62E4000000000, float %55) #3, !dbg !37
  %.04.i = select i1 %.not1.i4, float %77, float %78, !dbg !37
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %76, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !37
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %76, float 0x3EB7F7D1C0000000, float %.04.i) #3, !dbg !37
  %.05.i = select i1 %.not2.i3, float %79, float %80, !dbg !37
  %81 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !37
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #3, !dbg !37
  %.07.i = select i1 %.not3.i, float %81, float %82, !dbg !37
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !37
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #3, !dbg !37
  %.08.i = select i1 %.not4.i, float %83, float %84, !dbg !37
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !37
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #3, !dbg !37
  %.09.i = select i1 %.not5.i, float %85, float %86, !dbg !37
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !37
  %88 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #3, !dbg !37
  %.06.i = select i1 %.not6.i, float %87, float %88, !dbg !37
  %89 = fmul float %.05.i, %.06.i, !dbg !37
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %89, float %.05.i, float %.05.i) #3, !dbg !37
  %91 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %89, float %.05.i, float %.05.i) #3, !dbg !37
  %.01.i = select i1 %.not7.i, float %90, float %91, !dbg !37
  %92 = fadd float %.0.i2, -1.000000e+00, !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not9.i = icmp eq i32 %93, 0, !dbg !37
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i2, float %92) #3, !dbg !37
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i2, float %92) #3, !dbg !37
  %.02.i = select i1 %.not9.i, float %95, float %94, !dbg !37
  %96 = fadd float %.02.i, %.02.i, !dbg !37
  %u.0.i = select i1 %64, float %96, float %.02.i, !dbg !37
  %97 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !37
  %u.1.i = select i1 %97, float 0x7FF0000000000000, float %u.0.i, !dbg !37
  %98 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !37
  %u.2.i = select i1 %98, float -1.000000e+00, float %u.1.i, !dbg !37
  %99 = fcmp oeq float %55, 0.000000e+00, !dbg !37
  %100 = fadd float %55, %55, !dbg !37
  %u.3.i = select i1 %99, float %100, float %u.2.i, !dbg !37
  %101 = select i1 %75, float %55, float %u.3.i, !dbg !39
  %102 = bitcast float %37 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %102, ptr addrspace(1) %18, i1 %14) #3, !dbg !40
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !41
  %104 = bitcast float %101 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %103, i1 %14) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemcnvvuq4wq6k6occvx35n4cm4hidmycp6hdsxraijr3p3bn6se.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_elu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_elu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_elu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_elu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 33, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 28, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 39, scope: !7)
!41 = !DILocation(line: 51, column: 28, scope: !7)
!42 = !DILocation(line: 51, column: 40, scope: !7)
!43 = !DILocation(line: 51, column: 4, scope: !7)
