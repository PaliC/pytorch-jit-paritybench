; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hz/chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp7 < 1024\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_permute_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 6, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = lshr i32 %10, 4, !dbg !14
  %12 = and i32 %11, 15, !dbg !14
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %14 = shl i32 %13, 6, !dbg !16
  %15 = shl i32 %10, 2, !dbg !17
  %16 = and i32 %15, 60, !dbg !17
  %17 = or disjoint i32 %9, %12, !dbg !18
  %18 = or disjoint i32 %17, 16, !dbg !18
  %19 = or disjoint i32 %17, 32, !dbg !18
  %20 = or disjoint i32 %17, 48, !dbg !18
  %21 = icmp slt i32 %19, 256, !dbg !19
  %22 = or disjoint i32 %14, %16, !dbg !20
  %23 = or disjoint i32 %22, 2, !dbg !20
  %24 = insertelement <4 x i32> poison, i32 %17, i64 0, !dbg !19
  %25 = insertelement <4 x i32> %24, i32 %18, i64 1, !dbg !19
  %26 = insertelement <4 x i32> %25, i32 %22, i64 2, !dbg !19
  %27 = insertelement <4 x i32> %26, i32 %20, i64 3, !dbg !19
  %28 = icmp slt <4 x i32> %27, splat (i32 256), !dbg !19
  %29 = icmp slt i32 %17, 256, !dbg !19
  %.frozen = freeze i32 %17, !dbg !21
  %30 = sdiv i32 %.frozen, 64, !dbg !21
  %31 = mul i32 %30, 64, !dbg !22
  %.decomposed = sub i32 %.frozen, %31, !dbg !22
  %.frozen21 = freeze i32 %18, !dbg !21
  %32 = sdiv i32 %.frozen21, 64, !dbg !21
  %33 = mul i32 %32, 64, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %33, !dbg !22
  %.frozen23 = freeze i32 %19, !dbg !21
  %34 = sdiv i32 %.frozen23, 64, !dbg !21
  %35 = mul i32 %34, 64, !dbg !22
  %.decomposed24 = sub i32 %.frozen23, %35, !dbg !22
  %.frozen25 = freeze i32 %20, !dbg !21
  %36 = sdiv i32 %.frozen25, 64, !dbg !21
  %37 = mul i32 %36, 64, !dbg !22
  %.decomposed26 = sub i32 %.frozen25, %37, !dbg !22
  %38 = shl i32 %17, 8, !dbg !23
  %39 = shl i32 %18, 8, !dbg !23
  %40 = shl i32 %19, 8, !dbg !23
  %41 = shl i32 %20, 8, !dbg !23
  %42 = add i32 %22, %38, !dbg !24
  %43 = add i32 %22, %39, !dbg !24
  %44 = add i32 %22, %40, !dbg !24
  %45 = add i32 %22, %41, !dbg !24
  %46 = sext i32 %42 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %43 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %44 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %45 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = shufflevector <4 x i1> %28, <4 x i1> poison, <2 x i32> <i32 2, i32 poison>, !dbg !26
  %55 = insertelement <2 x i1> %54, i1 %21, i64 1, !dbg !26
  %56 = shufflevector <2 x i1> %55, <2 x i1> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 0>, !dbg !26
  %57 = and <4 x i1> %28, %56, !dbg !26
  %58 = extractelement <4 x i1> %57, i64 0, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %58) #3, !dbg !28
  %60 = extractelement <4 x i1> %57, i64 1, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %60) #3, !dbg !28
  %62 = extractelement <4 x i1> %57, i64 2, !dbg !27
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %62) #3, !dbg !28
  %64 = extractelement <4 x i1> %57, i64 3, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %64) #3, !dbg !28
  %66 = sext i32 %.decomposed to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !29
  %68 = sext i32 %.decomposed22 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !29
  %70 = sext i32 %.decomposed24 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !29
  %72 = sext i32 %.decomposed26 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #3, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #3, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #3, !dbg !30
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #3, !dbg !30
  %78 = extractelement <4 x i1> %28, i64 1, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %78) #3, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %78) #3, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %78) #3, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %78) #3, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #3, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #3, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #3, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %21) #3, !dbg !30
  %87 = extractelement <4 x i1> %28, i64 3, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %87) #3, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %87) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %87) #3, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %87) #3, !dbg !30
  %92 = shl i32 %30, 8, !dbg !31
  %93 = shl i32 %32, 8, !dbg !31
  %94 = shl i32 %34, 8, !dbg !31
  %95 = shl i32 %36, 8, !dbg !31
  %96 = add i32 %92, %22, !dbg !32
  %97 = add i32 %92, %23, !dbg !32
  %98 = add i32 %22, %93, !dbg !32
  %99 = add i32 %93, %23, !dbg !32
  %100 = add i32 %22, %94, !dbg !32
  %101 = add i32 %94, %23, !dbg !32
  %102 = add i32 %22, %95, !dbg !32
  %103 = add i32 %95, %23, !dbg !32
  %104 = sext i32 %96 to i64, !dbg !33
  %105 = getelementptr i64, ptr addrspace(1) %2, i64 %104, !dbg !33
  %106 = sext i32 %97 to i64, !dbg !33
  %107 = getelementptr i64, ptr addrspace(1) %2, i64 %106, !dbg !33
  %108 = sext i32 %98 to i64, !dbg !33
  %109 = getelementptr i64, ptr addrspace(1) %2, i64 %108, !dbg !33
  %110 = sext i32 %99 to i64, !dbg !33
  %111 = getelementptr i64, ptr addrspace(1) %2, i64 %110, !dbg !33
  %112 = sext i32 %100 to i64, !dbg !33
  %113 = getelementptr i64, ptr addrspace(1) %2, i64 %112, !dbg !33
  %114 = sext i32 %101 to i64, !dbg !33
  %115 = getelementptr i64, ptr addrspace(1) %2, i64 %114, !dbg !33
  %116 = sext i32 %102 to i64, !dbg !33
  %117 = getelementptr i64, ptr addrspace(1) %2, i64 %116, !dbg !33
  %118 = sext i32 %103 to i64, !dbg !33
  %119 = getelementptr i64, ptr addrspace(1) %2, i64 %118, !dbg !33
  %120 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %105, i1 %58) #3, !dbg !27
  %121 = extractvalue { i64, i64 } %120, 0, !dbg !27
  %122 = extractvalue { i64, i64 } %120, 1, !dbg !27
  %123 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %107, i1 %58) #3, !dbg !27
  %124 = extractvalue { i64, i64 } %123, 0, !dbg !27
  %125 = extractvalue { i64, i64 } %123, 1, !dbg !27
  %126 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %109, i1 %60) #3, !dbg !27
  %127 = extractvalue { i64, i64 } %126, 0, !dbg !27
  %128 = extractvalue { i64, i64 } %126, 1, !dbg !27
  %129 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %111, i1 %60) #3, !dbg !27
  %130 = extractvalue { i64, i64 } %129, 0, !dbg !27
  %131 = extractvalue { i64, i64 } %129, 1, !dbg !27
  %132 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %113, i1 %62) #3, !dbg !27
  %133 = extractvalue { i64, i64 } %132, 0, !dbg !27
  %134 = extractvalue { i64, i64 } %132, 1, !dbg !27
  %135 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %115, i1 %62) #3, !dbg !27
  %136 = extractvalue { i64, i64 } %135, 0, !dbg !27
  %137 = extractvalue { i64, i64 } %135, 1, !dbg !27
  %138 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %117, i1 %64) #3, !dbg !27
  %139 = extractvalue { i64, i64 } %138, 0, !dbg !27
  %140 = extractvalue { i64, i64 } %138, 1, !dbg !27
  %141 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %119, i1 %64) #3, !dbg !27
  %142 = extractvalue { i64, i64 } %141, 0, !dbg !27
  %143 = extractvalue { i64, i64 } %141, 1, !dbg !27
  %144 = insertelement <4 x i64> poison, i64 %121, i64 0, !dbg !34
  %145 = insertelement <4 x i64> %144, i64 %127, i64 1, !dbg !34
  %146 = insertelement <4 x i64> %145, i64 %133, i64 2, !dbg !34
  %147 = insertelement <4 x i64> %146, i64 %139, i64 3, !dbg !34
  %148 = lshr <4 x i64> %147, splat (i64 53), !dbg !34
  %149 = and <4 x i64> %148, splat (i64 1024), !dbg !34
  %150 = add <4 x i64> %149, %147, !dbg !34
  %151 = insertelement <4 x i64> poison, i64 %122, i64 0, !dbg !34
  %152 = insertelement <4 x i64> %151, i64 %128, i64 1, !dbg !34
  %153 = insertelement <4 x i64> %152, i64 %134, i64 2, !dbg !34
  %154 = insertelement <4 x i64> %153, i64 %140, i64 3, !dbg !34
  %155 = lshr <4 x i64> %154, splat (i64 53), !dbg !34
  %156 = and <4 x i64> %155, splat (i64 1024), !dbg !34
  %157 = add <4 x i64> %156, %154, !dbg !34
  %158 = insertelement <4 x i64> poison, i64 %124, i64 0, !dbg !34
  %159 = insertelement <4 x i64> %158, i64 %130, i64 1, !dbg !34
  %160 = insertelement <4 x i64> %159, i64 %136, i64 2, !dbg !34
  %161 = insertelement <4 x i64> %160, i64 %142, i64 3, !dbg !34
  %162 = lshr <4 x i64> %161, splat (i64 53), !dbg !34
  %163 = and <4 x i64> %162, splat (i64 1024), !dbg !34
  %164 = add <4 x i64> %163, %161, !dbg !34
  %165 = insertelement <4 x i64> poison, i64 %125, i64 0, !dbg !34
  %166 = insertelement <4 x i64> %165, i64 %131, i64 1, !dbg !34
  %167 = insertelement <4 x i64> %166, i64 %137, i64 2, !dbg !34
  %168 = insertelement <4 x i64> %167, i64 %143, i64 3, !dbg !34
  %169 = lshr <4 x i64> %168, splat (i64 53), !dbg !34
  %170 = and <4 x i64> %169, splat (i64 1024), !dbg !34
  %171 = add <4 x i64> %170, %168, !dbg !34
  %172 = or <4 x i64> %150, %157, !dbg !35
  %173 = or <4 x i64> %172, %164, !dbg !35
  %174 = or <4 x i64> %173, %171, !dbg !35
  %175 = icmp ugt <4 x i64> %174, splat (i64 1023), !dbg !35
  %176 = and <4 x i1> %57, %175, !dbg !35
  %177 = bitcast <4 x i1> %176 to i4, !dbg !35
  %.not = icmp eq i4 %177, 0, !dbg !35
  br i1 %.not, label %179, label %178, !dbg !35

178:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

179:                                              ; preds = %7
  %180 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %181 = bitcast i32 %180 to float, !dbg !28
  %182 = bitcast i32 %91 to float, !dbg !30
  %183 = fadd float %181, %182, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %185 = bitcast i32 %184 to float, !dbg !28
  %186 = fadd float %185, %182, !dbg !36
  %187 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %188 = bitcast i32 %187 to float, !dbg !28
  %189 = fadd float %188, %182, !dbg !36
  %190 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = fadd float %191, %182, !dbg !36
  %193 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %194 = bitcast i32 %193 to float, !dbg !28
  %195 = bitcast i32 %86 to float, !dbg !30
  %196 = fadd float %194, %195, !dbg !36
  %197 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %198 = bitcast i32 %197 to float, !dbg !28
  %199 = fadd float %198, %195, !dbg !36
  %200 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %201 = bitcast i32 %200 to float, !dbg !28
  %202 = fadd float %201, %195, !dbg !36
  %203 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %204 = bitcast i32 %203 to float, !dbg !28
  %205 = fadd float %204, %195, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %207 = bitcast i32 %206 to float, !dbg !28
  %208 = bitcast i32 %82 to float, !dbg !30
  %209 = fadd float %207, %208, !dbg !36
  %210 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %211 = bitcast i32 %210 to float, !dbg !28
  %212 = fadd float %211, %208, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %214 = bitcast i32 %213 to float, !dbg !28
  %215 = fadd float %214, %208, !dbg !36
  %216 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %217 = bitcast i32 %216 to float, !dbg !28
  %218 = fadd float %217, %208, !dbg !36
  %219 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %220 = bitcast i32 %219 to float, !dbg !28
  %221 = bitcast i32 %77 to float, !dbg !30
  %222 = fadd float %220, %221, !dbg !36
  %223 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %224 = bitcast i32 %223 to float, !dbg !28
  %225 = fadd float %224, %221, !dbg !36
  %226 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %227 = bitcast i32 %226 to float, !dbg !28
  %228 = fadd float %227, %221, !dbg !36
  %229 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %230 = bitcast i32 %229 to float, !dbg !28
  %231 = fadd float %230, %221, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %232 = shl nsw i32 %.decomposed, 10, !dbg !37
  %233 = shl nsw i32 %.decomposed22, 10, !dbg !37
  %234 = shl nsw i32 %.decomposed24, 10, !dbg !37
  %235 = shl nsw i32 %.decomposed26, 10, !dbg !37
  %236 = sext i32 %232 to i64, !dbg !38
  %237 = sext i32 %233 to i64, !dbg !38
  %238 = sext i32 %234 to i64, !dbg !38
  %239 = sext i32 %235 to i64, !dbg !38
  %240 = extractelement <4 x i64> %150, i64 0, !dbg !39
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !39
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %236, !dbg !39
  %243 = extractelement <4 x i64> %157, i64 0, !dbg !39
  %244 = getelementptr float, ptr addrspace(1) %3, i64 %243, !dbg !39
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %236, !dbg !39
  %246 = extractelement <4 x i64> %164, i64 0, !dbg !39
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !39
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %236, !dbg !39
  %249 = extractelement <4 x i64> %171, i64 0, !dbg !39
  %250 = getelementptr float, ptr addrspace(1) %3, i64 %249, !dbg !39
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %236, !dbg !39
  %252 = extractelement <4 x i64> %150, i64 1, !dbg !39
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !39
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %237, !dbg !39
  %255 = extractelement <4 x i64> %157, i64 1, !dbg !39
  %256 = getelementptr float, ptr addrspace(1) %3, i64 %255, !dbg !39
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %237, !dbg !39
  %258 = extractelement <4 x i64> %164, i64 1, !dbg !39
  %259 = getelementptr float, ptr addrspace(1) %3, i64 %258, !dbg !39
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %237, !dbg !39
  %261 = extractelement <4 x i64> %171, i64 1, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !39
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %237, !dbg !39
  %264 = extractelement <4 x i64> %150, i64 2, !dbg !39
  %265 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !39
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %238, !dbg !39
  %267 = extractelement <4 x i64> %157, i64 2, !dbg !39
  %268 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !39
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %238, !dbg !39
  %270 = extractelement <4 x i64> %164, i64 2, !dbg !39
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !39
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %238, !dbg !39
  %273 = extractelement <4 x i64> %171, i64 2, !dbg !39
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %273, !dbg !39
  %275 = getelementptr float, ptr addrspace(1) %274, i64 %238, !dbg !39
  %276 = extractelement <4 x i64> %150, i64 3, !dbg !39
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !39
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %239, !dbg !39
  %279 = extractelement <4 x i64> %157, i64 3, !dbg !39
  %280 = getelementptr float, ptr addrspace(1) %3, i64 %279, !dbg !39
  %281 = getelementptr float, ptr addrspace(1) %280, i64 %239, !dbg !39
  %282 = extractelement <4 x i64> %164, i64 3, !dbg !39
  %283 = getelementptr float, ptr addrspace(1) %3, i64 %282, !dbg !39
  %284 = getelementptr float, ptr addrspace(1) %283, i64 %239, !dbg !39
  %285 = extractelement <4 x i64> %171, i64 3, !dbg !39
  %286 = getelementptr float, ptr addrspace(1) %3, i64 %285, !dbg !39
  %287 = getelementptr float, ptr addrspace(1) %286, i64 %239, !dbg !39
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %58) #3, !dbg !40
  %289 = bitcast i32 %288 to float, !dbg !40
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 %58) #3, !dbg !40
  %291 = bitcast i32 %290 to float, !dbg !40
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %58) #3, !dbg !40
  %293 = bitcast i32 %292 to float, !dbg !40
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 %58) #3, !dbg !40
  %295 = bitcast i32 %294 to float, !dbg !40
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %60) #3, !dbg !40
  %297 = bitcast i32 %296 to float, !dbg !40
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 %60) #3, !dbg !40
  %299 = bitcast i32 %298 to float, !dbg !40
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 %60) #3, !dbg !40
  %301 = bitcast i32 %300 to float, !dbg !40
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %60) #3, !dbg !40
  %303 = bitcast i32 %302 to float, !dbg !40
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %266, i1 %62) #3, !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %62) #3, !dbg !40
  %307 = bitcast i32 %306 to float, !dbg !40
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 %62) #3, !dbg !40
  %309 = bitcast i32 %308 to float, !dbg !40
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %62) #3, !dbg !40
  %311 = bitcast i32 %310 to float, !dbg !40
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %64) #3, !dbg !40
  %313 = bitcast i32 %312 to float, !dbg !40
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 %64) #3, !dbg !40
  %315 = bitcast i32 %314 to float, !dbg !40
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 %64) #3, !dbg !40
  %317 = bitcast i32 %316 to float, !dbg !40
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 %64) #3, !dbg !40
  %319 = bitcast i32 %318 to float, !dbg !40
  %320 = fsub float %289, %231, !dbg !41
  %321 = fsub float %291, %228, !dbg !41
  %322 = fsub float %293, %225, !dbg !41
  %323 = fsub float %295, %222, !dbg !41
  %324 = fsub float %297, %218, !dbg !41
  %325 = fsub float %299, %215, !dbg !41
  %326 = fsub float %301, %212, !dbg !41
  %327 = fsub float %303, %209, !dbg !41
  %328 = fsub float %305, %205, !dbg !41
  %329 = fsub float %307, %202, !dbg !41
  %330 = fsub float %309, %199, !dbg !41
  %331 = fsub float %311, %196, !dbg !41
  %332 = fsub float %313, %192, !dbg !41
  %333 = fsub float %315, %189, !dbg !41
  %334 = fsub float %317, %186, !dbg !41
  %335 = fsub float %319, %183, !dbg !41
  %336 = fadd float %231, %320, !dbg !42
  %337 = fadd float %228, %321, !dbg !42
  %338 = fadd float %225, %322, !dbg !42
  %339 = fadd float %222, %323, !dbg !42
  %340 = fadd float %218, %324, !dbg !42
  %341 = fadd float %215, %325, !dbg !42
  %342 = fadd float %212, %326, !dbg !42
  %343 = fadd float %209, %327, !dbg !42
  %344 = fadd float %205, %328, !dbg !42
  %345 = fadd float %202, %329, !dbg !42
  %346 = fadd float %199, %330, !dbg !42
  %347 = fadd float %196, %331, !dbg !42
  %348 = fadd float %192, %332, !dbg !42
  %349 = fadd float %189, %333, !dbg !42
  %350 = fadd float %186, %334, !dbg !42
  %351 = fadd float %183, %335, !dbg !42
  %352 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !43
  %353 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !43
  %354 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !43
  %355 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !43
  %356 = bitcast float %336 to i32, !dbg !44
  %357 = bitcast float %337 to i32, !dbg !44
  %358 = bitcast float %338 to i32, !dbg !44
  %359 = bitcast float %339 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %357, i32 %358, i32 %359, ptr addrspace(1) %352, i1 %58) #3, !dbg !44
  %360 = bitcast float %340 to i32, !dbg !44
  %361 = bitcast float %341 to i32, !dbg !44
  %362 = bitcast float %342 to i32, !dbg !44
  %363 = bitcast float %343 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %361, i32 %362, i32 %363, ptr addrspace(1) %353, i1 %60) #3, !dbg !44
  %364 = bitcast float %344 to i32, !dbg !44
  %365 = bitcast float %345 to i32, !dbg !44
  %366 = bitcast float %346 to i32, !dbg !44
  %367 = bitcast float %347 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %365, i32 %366, i32 %367, ptr addrspace(1) %354, i1 %62) #3, !dbg !44
  %368 = bitcast float %348 to i32, !dbg !44
  %369 = bitcast float %349 to i32, !dbg !44
  %370 = bitcast float %350 to i32, !dbg !44
  %371 = bitcast float %351 to i32, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %368, i32 %369, i32 %370, i32 %371, ptr addrspace(1) %355, i1 %64) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_permute_sub_11", linkageName: "triton_poi_fused_add_embedding_permute_sub_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 25, column: 28, scope: !11)
!16 = !DILocation(line: 25, column: 33, scope: !11)
!17 = !DILocation(line: 26, column: 44, scope: !11)
!18 = !DILocation(line: 23, column: 23, scope: !11)
!19 = !DILocation(line: 24, column: 21, scope: !11)
!20 = !DILocation(line: 26, column: 23, scope: !11)
!21 = !DILocation(line: 31, column: 19, scope: !11)
!22 = !DILocation(line: 30, column: 19, scope: !11)
!23 = !DILocation(line: 32, column: 39, scope: !11)
!24 = !DILocation(line: 32, column: 35, scope: !11)
!25 = !DILocation(line: 32, column: 30, scope: !11)
!26 = !DILocation(line: 32, column: 52, scope: !11)
!27 = !DILocation(line: 34, column: 44, scope: !11)
!28 = !DILocation(line: 32, column: 44, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 35, scope: !11)
!31 = !DILocation(line: 34, column: 39, scope: !11)
!32 = !DILocation(line: 34, column: 35, scope: !11)
!33 = !DILocation(line: 34, column: 30, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 71, scope: !11)
!36 = !DILocation(line: 35, column: 18, scope: !11)
!37 = !DILocation(line: 41, column: 42, scope: !11)
!38 = !DILocation(line: 41, column: 37, scope: !11)
!39 = !DILocation(line: 41, column: 30, scope: !11)
!40 = !DILocation(line: 41, column: 47, scope: !11)
!41 = !DILocation(line: 42, column: 19, scope: !11)
!42 = !DILocation(line: 43, column: 19, scope: !11)
!43 = !DILocation(line: 44, column: 25, scope: !11)
!44 = !DILocation(line: 44, column: 46, scope: !11)
!45 = !DILocation(line: 44, column: 4, scope: !11)
