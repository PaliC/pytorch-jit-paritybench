; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = shl i32 %24, 1, !dbg !12
  %26 = and i32 %25, 254, !dbg !12
  %27 = or disjoint i32 %23, %26, !dbg !13
  %28 = icmp slt i32 %27, 1024, !dbg !14
  %29 = sdiv i32 %27, 16, !dbg !15
  %30 = srem i32 %29, 16, !dbg !16
  %.frozen = freeze i32 %27, !dbg !17
  %31 = sdiv i32 %.frozen, 4, !dbg !17
  %32 = srem i32 %31, 4, !dbg !18
  %33 = mul i32 %31, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %33, !dbg !19
  %34 = sext i32 %27 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !20
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %28) #3, !dbg !21
  %37 = sext i32 %30 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %28) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %28) #3, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %28) #3, !dbg !25
  %43 = bitcast i32 %42 to float, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %28) #3, !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %28) #3, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %28) #3, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %28) #3, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %28) #3, !dbg !29
  %52 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !30
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %28) #3, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !32
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %28) #3, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %28) #3, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %37, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %28) #3, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %37, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #3, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #3, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %37, !dbg !38
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %28) #3, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %28) #3, !dbg !39
  %68 = sext i32 %32 to i64, !dbg !40
  %69 = getelementptr i64, ptr addrspace(1) %11, i64 %68, !dbg !40
  %70 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %28) #3, !dbg !41
  %71 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %28) #3, !dbg !41
  %72 = sext i32 %.decomposed to i64, !dbg !42
  %73 = getelementptr i64, ptr addrspace(1) %12, i64 %72, !dbg !42
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 %28) #3, !dbg !43
  %75 = getelementptr i64, ptr addrspace(1) %14, i64 %72, !dbg !44
  %76 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %75, i1 %28) #3, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %15, i64 %72, !dbg !46
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %28) #3, !dbg !47
  %79 = getelementptr float, ptr addrspace(1) %16, i64 %34, !dbg !48
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %28) #3, !dbg !49
  %81 = getelementptr i64, ptr addrspace(1) %17, i64 %68, !dbg !50
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %28) #3, !dbg !51
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %28) #3, !dbg !51
  %84 = getelementptr float, ptr addrspace(1) %18, i64 %68, !dbg !52
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %28) #3, !dbg !53
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %28) #3, !dbg !53
  %87 = fadd float %43, 0x3EE4F8B580000000, !dbg !54
  %88 = fadd float %45, 0x3EE4F8B580000000, !dbg !54
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %89, 0, !dbg !55
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %90, 0, !dbg !55
  br i1 %.not.i, label %96, label %91, !dbg !55

91:                                               ; preds = %21
  br i1 %.not1.i, label %94, label %92, !dbg !55

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

96:                                               ; preds = %21
  br i1 %.not1.i, label %99, label %97, !dbg !55

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !55
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %101, 0, !dbg !55
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i4 = icmp eq i32 %102, 0, !dbg !55
  br i1 %.not.i1, label %108, label %103, !dbg !55

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %106, label %104, !dbg !55

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !55

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

__nv_sqrtf.exit5:                                 ; preds = %104, %106, %109, %111
  %.0.i3 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !55
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !56
  %115 = fadd float %59, 0x3EE4F8B580000000, !dbg !57
  %116 = fadd float %61, 0x3EE4F8B580000000, !dbg !57
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i6 = icmp eq i32 %117, 0, !dbg !58
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i9 = icmp eq i32 %118, 0, !dbg !58
  br i1 %.not.i6, label %124, label %119, !dbg !58

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !58

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

124:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %127, label %125, !dbg !58

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !58
  br label %__nv_sqrtf.exit10, !dbg !58

__nv_sqrtf.exit10:                                ; preds = %120, %122, %125, %127
  %.0.i8 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !58
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i11 = icmp eq i32 %129, 0, !dbg !58
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i14 = icmp eq i32 %130, 0, !dbg !58
  br i1 %.not.i11, label %136, label %131, !dbg !58

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !58

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !58
  br label %__nv_sqrtf.exit15, !dbg !58

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !58
  br label %__nv_sqrtf.exit15, !dbg !58

136:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %139, label %137, !dbg !58

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !58
  br label %__nv_sqrtf.exit15, !dbg !58

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !58
  br label %__nv_sqrtf.exit15, !dbg !58

__nv_sqrtf.exit15:                                ; preds = %132, %134, %137, %139
  %.0.i13 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !58
  %141 = extractvalue { i32, i32 } %53, 1, !dbg !31
  %142 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !23
  %143 = insertelement <2 x i32> %142, i32 %56, i64 1, !dbg !23
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !23
  %145 = extractvalue { i32, i32 } %53, 0, !dbg !31
  %146 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !23
  %147 = insertelement <2 x i32> %146, i32 %55, i64 1, !dbg !23
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !23
  %149 = extractvalue { i32, i32 } %36, 1, !dbg !21
  %150 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !27
  %151 = insertelement <2 x i32> %150, i32 %64, i64 1, !dbg !27
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !27
  %153 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !29
  %154 = insertelement <2 x i32> %153, i32 %67, i64 1, !dbg !29
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !29
  %156 = extractvalue { i32, i32 } %36, 0, !dbg !21
  %157 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !27
  %158 = insertelement <2 x i32> %157, i32 %63, i64 1, !dbg !27
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !27
  %160 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !29
  %161 = insertelement <2 x i32> %160, i32 %66, i64 1, !dbg !29
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !29
  %163 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !53
  %164 = insertelement <2 x i32> %163, i32 %86, i64 1, !dbg !53
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !53
  %166 = extractvalue { i32, i32 } %80, 1, !dbg !49
  %167 = extractvalue { i32, i32 } %80, 0, !dbg !49
  %168 = extractvalue { i32, i32 } %78, 1, !dbg !47
  %169 = extractvalue { i32, i32 } %78, 0, !dbg !47
  %170 = extractvalue { i64, i64 } %76, 1, !dbg !45
  %171 = extractvalue { i64, i64 } %76, 0, !dbg !45
  %172 = extractvalue { i64, i64 } %74, 1, !dbg !43
  %173 = extractvalue { i64, i64 } %74, 0, !dbg !43
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !59
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !59
  %176 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !21
  %177 = insertelement <2 x i32> %176, i32 %145, i64 1, !dbg !21
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !21
  %179 = fsub <2 x float> %178, %148, !dbg !60
  %180 = insertelement <2 x float> poison, float %113, i64 0, !dbg !61
  %181 = insertelement <2 x float> %180, float %174, i64 1, !dbg !61
  %182 = fmul <2 x float> %179, %181, !dbg !61
  %183 = fmul <2 x float> %182, %159, !dbg !62
  %184 = fadd <2 x float> %183, %162, !dbg !63
  %185 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !21
  %186 = insertelement <2 x i32> %185, i32 %141, i64 1, !dbg !21
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !21
  %188 = fsub <2 x float> %187, %144, !dbg !60
  %189 = insertelement <2 x float> poison, float %114, i64 0, !dbg !61
  %190 = insertelement <2 x float> %189, float %175, i64 1, !dbg !61
  %191 = fmul <2 x float> %188, %190, !dbg !61
  %192 = fmul <2 x float> %191, %152, !dbg !62
  %193 = fadd <2 x float> %192, %155, !dbg !63
  %194 = lshr i64 %70, 62, !dbg !64
  %195 = and i64 %194, 2, !dbg !64
  %196 = add i64 %195, %70, !dbg !64
  %197 = lshr i64 %173, 62, !dbg !65
  %198 = and i64 %197, 2, !dbg !65
  %199 = lshr i64 %172, 62, !dbg !65
  %200 = and i64 %199, 2, !dbg !65
  %201 = shl i64 %196, 1, !dbg !66
  %202 = shl nsw i32 %29, 2, !dbg !67
  %203 = sext i32 %202 to i64, !dbg !68
  %204 = getelementptr float, ptr addrspace(1) %13, i64 %173, !dbg !69
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %198, !dbg !69
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %201, !dbg !69
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %203, !dbg !69
  %208 = getelementptr float, ptr addrspace(1) %13, i64 %172, !dbg !69
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %200, !dbg !69
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %201, !dbg !69
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %203, !dbg !69
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %28) #3, !dbg !70
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %28) #3, !dbg !70
  %214 = lshr i64 %171, 62, !dbg !71
  %215 = and i64 %214, 2, !dbg !71
  %216 = lshr i64 %170, 62, !dbg !71
  %217 = and i64 %216, 2, !dbg !71
  %218 = getelementptr float, ptr addrspace(1) %13, i64 %171, !dbg !72
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %215, !dbg !72
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %201, !dbg !72
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %203, !dbg !72
  %222 = getelementptr float, ptr addrspace(1) %13, i64 %170, !dbg !72
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %217, !dbg !72
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %201, !dbg !72
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %203, !dbg !72
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 %28) #3, !dbg !73
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %28) #3, !dbg !73
  %228 = lshr i64 %82, 62, !dbg !74
  %229 = and i64 %228, 2, !dbg !74
  %230 = add i64 %229, %82, !dbg !74
  %231 = shl i64 %230, 1, !dbg !75
  %232 = getelementptr float, ptr addrspace(1) %205, i64 %231, !dbg !76
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %203, !dbg !76
  %234 = getelementptr float, ptr addrspace(1) %209, i64 %231, !dbg !76
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %203, !dbg !76
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 %28) #3, !dbg !77
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 %28) #3, !dbg !77
  %238 = getelementptr float, ptr addrspace(1) %219, i64 %231, !dbg !78
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %203, !dbg !78
  %240 = getelementptr float, ptr addrspace(1) %223, i64 %231, !dbg !78
  %241 = getelementptr float, ptr addrspace(1) %240, i64 %203, !dbg !78
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 %28) #3, !dbg !79
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %28) #3, !dbg !79
  %244 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !77
  %245 = insertelement <2 x i32> %244, i32 %212, i64 1, !dbg !77
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !77
  %247 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !79
  %248 = insertelement <2 x i32> %247, i32 %226, i64 1, !dbg !79
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !79
  %250 = fsub <2 x float> %249, %246, !dbg !80
  %251 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !81
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !81
  %253 = shufflevector <2 x float> %252, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !81
  %254 = fmul <2 x float> %250, %253, !dbg !81
  %255 = fadd <2 x float> %254, %246, !dbg !82
  %256 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !77
  %257 = insertelement <2 x i32> %256, i32 %213, i64 1, !dbg !77
  %258 = bitcast <2 x i32> %257 to <2 x float>, !dbg !77
  %259 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !79
  %260 = insertelement <2 x i32> %259, i32 %227, i64 1, !dbg !79
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !79
  %262 = fsub <2 x float> %261, %258, !dbg !80
  %263 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !81
  %264 = bitcast <2 x i32> %263 to <2 x float>, !dbg !81
  %265 = shufflevector <2 x float> %264, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !81
  %266 = fmul <2 x float> %262, %265, !dbg !81
  %267 = fadd <2 x float> %266, %258, !dbg !82
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !83
  %269 = getelementptr i1, ptr addrspace(1) %19, i64 %34, !dbg !84
  %270 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !49
  %271 = insertelement <2 x i32> %270, i32 %166, i64 1, !dbg !49
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !49
  %273 = shufflevector <2 x float> %184, <2 x float> %193, <2 x i32> <i32 0, i32 2>, !dbg !85
  %274 = shufflevector <2 x float> %184, <2 x float> %193, <2 x i32> <i32 1, i32 3>, !dbg !85
  %275 = fadd <2 x float> %273, %274, !dbg !85
  %276 = fadd <2 x float> %275, %272, !dbg !86
  %277 = shufflevector <2 x float> %255, <2 x float> %267, <2 x i32> <i32 0, i32 2>, !dbg !87
  %278 = shufflevector <2 x float> %255, <2 x float> %267, <2 x i32> <i32 1, i32 3>, !dbg !87
  %279 = fsub <2 x float> %277, %278, !dbg !87
  %280 = fmul <2 x float> %279, %165, !dbg !88
  %281 = fadd <2 x float> %278, %280, !dbg !89
  %282 = fadd <2 x float> %276, %281, !dbg !90
  %283 = fcmp olt <2 x float> %282, zeroinitializer, !dbg !91
  %284 = select <2 x i1> %283, <2 x float> zeroinitializer, <2 x float> %282, !dbg !95
  %285 = fcmp ole <2 x float> %284, zeroinitializer, !dbg !96
  %bc = bitcast <2 x float> %282 to <2 x i32>, !dbg !97
  %286 = extractelement <2 x i32> %bc, i64 0, !dbg !97
  %bc16 = bitcast <2 x float> %282 to <2 x i32>, !dbg !97
  %287 = extractelement <2 x i32> %bc16, i64 1, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %286, i32 %287, ptr addrspace(1) %268, i1 %28) #3, !dbg !97
  %288 = zext <2 x i1> %285 to <2 x i8>, !dbg !98
  %289 = bitcast <2 x i8> %288 to i16, !dbg !98
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %289, ptr addrspace(1) %269, i1 %28) #3, !dbg !98
  ret void, !dbg !99
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemlumpvaej4htigiygi2ffdowzfqca5v7zrtkkfq6xoiiirntyj.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_threshold_backward_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 36, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 43, column: 32, scope: !7)
!49 = !DILocation(line: 43, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 32, scope: !7)
!51 = !DILocation(line: 44, column: 37, scope: !7)
!52 = !DILocation(line: 45, column: 32, scope: !7)
!53 = !DILocation(line: 45, column: 37, scope: !7)
!54 = !DILocation(line: 48, column: 18, scope: !7)
!55 = !DILocation(line: 49, column: 26, scope: !7)
!56 = !DILocation(line: 51, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 27, scope: !7)
!59 = !DILocation(line: 60, column: 19, scope: !7)
!60 = !DILocation(line: 46, column: 18, scope: !7)
!61 = !DILocation(line: 54, column: 19, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 35, scope: !7)
!65 = !DILocation(line: 72, column: 35, scope: !7)
!66 = !DILocation(line: 73, column: 42, scope: !7)
!67 = !DILocation(line: 73, column: 52, scope: !7)
!68 = !DILocation(line: 73, column: 50, scope: !7)
!69 = !DILocation(line: 73, column: 32, scope: !7)
!70 = !DILocation(line: 73, column: 57, scope: !7)
!71 = !DILocation(line: 76, column: 35, scope: !7)
!72 = !DILocation(line: 77, column: 32, scope: !7)
!73 = !DILocation(line: 77, column: 57, scope: !7)
!74 = !DILocation(line: 84, column: 35, scope: !7)
!75 = !DILocation(line: 85, column: 42, scope: !7)
!76 = !DILocation(line: 85, column: 32, scope: !7)
!77 = !DILocation(line: 85, column: 57, scope: !7)
!78 = !DILocation(line: 86, column: 32, scope: !7)
!79 = !DILocation(line: 86, column: 57, scope: !7)
!80 = !DILocation(line: 87, column: 20, scope: !7)
!81 = !DILocation(line: 88, column: 20, scope: !7)
!82 = !DILocation(line: 89, column: 20, scope: !7)
!83 = !DILocation(line: 98, column: 28, scope: !7)
!84 = !DILocation(line: 99, column: 25, scope: !7)
!85 = !DILocation(line: 65, column: 20, scope: !7)
!86 = !DILocation(line: 81, column: 20, scope: !7)
!87 = !DILocation(line: 90, column: 20, scope: !7)
!88 = !DILocation(line: 91, column: 20, scope: !7)
!89 = !DILocation(line: 92, column: 20, scope: !7)
!90 = !DILocation(line: 93, column: 20, scope: !7)
!91 = !DILocation(line: 118, column: 15, scope: !92, inlinedAt: !94)
!92 = distinct !DILexicalBlockFile(scope: !7, file: !93, discriminator: 0)
!93 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!94 = !DILocation(line: 95, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !92, inlinedAt: !94)
!96 = !DILocation(line: 97, column: 21, scope: !7)
!97 = !DILocation(line: 98, column: 40, scope: !7)
!98 = !DILocation(line: 99, column: 37, scope: !7)
!99 = !DILocation(line: 99, column: 4, scope: !7)
