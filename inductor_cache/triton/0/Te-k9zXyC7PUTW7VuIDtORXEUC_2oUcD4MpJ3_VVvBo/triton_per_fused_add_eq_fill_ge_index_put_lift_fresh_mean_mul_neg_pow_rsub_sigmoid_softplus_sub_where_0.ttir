#loc = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":19:0)
#loc1 = loc(unknown)
#loc39 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":70:59)
#loc53 = loc(callsite(#loc1 at #loc39))
module {
  tt.func public @triton_per_fused_add_eq_fill_ge_index_put_lift_fresh_mean_mul_neg_pow_rsub_sigmoid_softplus_sub_where_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<7.500000e-01> : tensor<256xf32> loc(#loc1)
    %cst_2 = arith.constant dense<2.500000e-01> : tensor<256xf32> loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e+01> : tensor<256xf32> loc(#loc1)
    %cst_4 = arith.constant dense<-1.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_6 = arith.constant dense<1.000000e+00> : tensor<256xf32> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>> loc(#loc6)
    %7 = arith.cmpf oeq, %3, %cst_6 : tensor<256xf32> loc(#loc7)
    %8 = arith.subf %cst_5, %6 : tensor<256xf32> loc(#loc48)
    %9 = math.exp %8 : tensor<256xf32> loc(#loc49)
    %10 = arith.addf %9, %cst_6 : tensor<256xf32> loc(#loc50)
    %11 = arith.divf %cst_6, %10 : tensor<256xf32> loc(#loc51)
    %12 = arith.subf %cst_6, %11 : tensor<256xf32> loc(#loc13)
    %13 = arith.mulf %12, %12 : tensor<256xf32> loc(#loc14)
    %14 = arith.cmpf oge, %6, %cst_5 : tensor<256xf32> loc(#loc15)
    %15 = arith.mulf %6, %cst_4 : tensor<256xf32> loc(#loc16)
    %16 = arith.cmpf ogt, %15, %cst_3 : tensor<256xf32> loc(#loc17)
    %17 = math.exp %15 : tensor<256xf32> loc(#loc18)
    %18 = tt.extern_elementwise %17 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc19)
    %19 = arith.mulf %18, %cst_4 : tensor<256xf32> loc(#loc20)
    %20 = arith.select %16, %6, %19 : tensor<256xi1>, tensor<256xf32> loc(#loc21)
    %21 = arith.cmpf ogt, %6, %cst_3 : tensor<256xf32> loc(#loc22)
    %22 = math.exp %6 : tensor<256xf32> loc(#loc23)
    %23 = tt.extern_elementwise %22 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32>) -> tensor<256xf32> loc(#loc24)
    %24 = arith.select %21, %6, %23 : tensor<256xi1>, tensor<256xf32> loc(#loc25)
    %25 = arith.subf %6, %24 : tensor<256xf32> loc(#loc26)
    %26 = arith.select %14, %20, %25 : tensor<256xi1>, tensor<256xf32> loc(#loc27)
    %27 = arith.mulf %13, %26 : tensor<256xf32> loc(#loc28)
    %28 = arith.mulf %11, %11 : tensor<256xf32> loc(#loc29)
    %29 = arith.addf %8, %20 : tensor<256xf32> loc(#loc30)
    %30 = arith.subf %cst_5, %24 : tensor<256xf32> loc(#loc31)
    %31 = arith.select %14, %29, %30 : tensor<256xi1>, tensor<256xf32> loc(#loc32)
    %32 = arith.mulf %28, %31 : tensor<256xf32> loc(#loc33)
    %33 = arith.select %7, %27, %32 : tensor<256xi1>, tensor<256xf32> loc(#loc34)
    %34 = arith.select %7, %cst_2, %cst_1 : tensor<256xi1>, tensor<256xf32> loc(#loc35)
    %35 = arith.mulf %33, %34 : tensor<256xf32> loc(#loc36)
    %36 = arith.subf %cst_5, %35 : tensor<256xf32> loc(#loc37)
    %37 = "tt.reduce"(%36) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc39)), %arg5: f32 loc(callsite(#loc1 at #loc39))):
      %43 = arith.addf %arg4, %arg5 : f32 loc(#loc56)
      tt.reduce.return %43 : f32 loc(#loc52)
    }) : (tensor<256xf32>) -> f32 loc(#loc52)
    %38 = arith.addf %37, %cst_0 : f32 loc(#loc55)
    %39 = arith.divf %38, %cst : f32 loc(#loc43)
    %40 = tt.splat %39 : f32 -> tensor<1xf32> loc(#loc43)
    gpu.barrier loc(#loc44)
    %41 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc45)
    %42 = tt.splat %41 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc45)
    tt.store %42, %40 : tensor<1x!tt.ptr<f32>> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":27:26)
#loc3 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":31:30)
#loc4 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":31:35)
#loc5 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":32:30)
#loc6 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":32:35)
#loc7 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":34:19)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc9 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":35:22)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc13 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":36:18)
#loc14 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":37:18)
#loc15 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":39:19)
#loc16 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":41:19)
#loc17 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":43:20)
#loc18 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":44:24)
#loc19 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":45:28)
#loc20 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":46:20)
#loc21 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":47:34)
#loc22 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":49:20)
#loc23 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":50:24)
#loc24 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":51:28)
#loc25 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":53:34)
#loc26 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":54:19)
#loc27 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":55:34)
#loc28 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":56:19)
#loc29 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":57:19)
#loc30 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":59:20)
#loc31 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":60:13)
#loc32 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":61:34)
#loc33 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":62:20)
#loc34 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":63:34)
#loc35 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":66:34)
#loc36 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":67:20)
#loc37 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":68:13)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc42 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":70:45)
#loc43 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":72:20)
#loc44 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":73:4)
#loc45 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":74:28)
#loc46 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":74:63)
#loc47 = loc("inductor_cache/3t/c3td4mcnu66vee67ezvlcvhtxifu4dlicrg6r2sr3jbtmxojmnrm.py":74:4)
#loc48 = loc(callsite(#loc8 at #loc9))
#loc49 = loc(callsite(#loc10 at #loc9))
#loc50 = loc(callsite(#loc11 at #loc9))
#loc51 = loc(callsite(#loc12 at #loc9))
#loc52 = loc(callsite(#loc38 at #loc39))
#loc54 = loc(callsite(#loc40 at #loc38))
#loc55 = loc(callsite(#loc41 at #loc42))
#loc56 = loc(callsite(#loc54 at #loc39))
