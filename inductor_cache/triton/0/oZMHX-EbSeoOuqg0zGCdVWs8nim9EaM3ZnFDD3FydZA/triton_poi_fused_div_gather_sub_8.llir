; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/2j/c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/2j/c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_div_gather_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %11 = shl i32 %10, 7, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = and i32 %12, 127, !dbg !14
  %14 = or disjoint i32 %11, %13, !dbg !15
  %15 = icmp slt i32 %14, 256, !dbg !16
  %16 = sdiv i32 %14, 16, !dbg !17
  %.frozen = freeze i32 %14, !dbg !18
  %17 = sdiv i32 %.frozen, 4, !dbg !18
  %18 = sext i32 %16 to i64, !dbg !19
  %19 = getelementptr i64, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %19, i1 %15) #5, !dbg !20
  %21 = sext i32 %17 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %15) #5, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %15) #5, !dbg !24
  %26 = lshr i64 %20, 61, !dbg !25
  %27 = and i64 %26, 4, !dbg !25
  %28 = add i64 %27, %20, !dbg !25
  %29 = icmp ugt i64 %28, 3, !dbg !26
  %.not1 = and i1 %15, %29, !dbg !27
  br i1 %.not1, label %30, label %31, !dbg !27

30:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 37, ptr nonnull @assertFunc_0, i64 1), !dbg !27
  unreachable, !dbg !27

31:                                               ; preds = %9
  %32 = sdiv i32 %14, 64, !dbg !28
  %33 = srem i32 %17, 4, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %34 = shl i64 %28, 2, !dbg !30
  %35 = sext i32 %33 to i64, !dbg !31
  %36 = shl nsw i32 %32, 4, !dbg !32
  %37 = sext i32 %36 to i64, !dbg !33
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !34
  %39 = getelementptr i64, ptr addrspace(1) %38, i64 %35, !dbg !34
  %40 = getelementptr i64, ptr addrspace(1) %39, i64 %37, !dbg !34
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %15) #5, !dbg !35
  %42 = lshr i64 %41, 61, !dbg !36
  %43 = and i64 %42, 4, !dbg !36
  %44 = add i64 %43, %41, !dbg !36
  %45 = icmp ugt i64 %44, 3, !dbg !37
  %.not2 = and i1 %15, %45, !dbg !38
  br i1 %.not2, label %46, label %47, !dbg !38

46:                                               ; preds = %31
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 42, ptr nonnull @assertFunc_1, i64 1), !dbg !38
  unreachable, !dbg !38

47:                                               ; preds = %31
  %48 = bitcast i32 %25 to float, !dbg !24
  %49 = bitcast i32 %23 to float, !dbg !22
  %50 = mul i32 %17, 4, !dbg !39
  %.decomposed = sub i32 %.frozen, %50, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %narrow = add nsw i32 %36, %.decomposed, !dbg !40
  %51 = sext i32 %narrow to i64, !dbg !40
  %52 = add i64 %34, %51, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %15) #5, !dbg !43
  %55 = bitcast i32 %54 to float, !dbg !43
  %56 = shl i64 %44, 2, !dbg !44
  %57 = add i64 %56, %51, !dbg !45
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !46
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %15) #5, !dbg !47
  %60 = bitcast i32 %59 to float, !dbg !47
  %61 = fsub float %55, %60, !dbg !48
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %62, 0, !dbg !49
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !49
  %.not1.i = icmp eq i32 %63, 0, !dbg !49
  br i1 %.not.i, label %69, label %64, !dbg !49

64:                                               ; preds = %47
  br i1 %.not1.i, label %67, label %65, !dbg !49

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

69:                                               ; preds = %47
  br i1 %.not1.i, label %72, label %70, !dbg !49

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !49
  %74 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !50
  %75 = fcmp uno float %.0.i, 0.000000e+00, !dbg !54
  %76 = or i1 %74, %75, !dbg !55
  %77 = select i1 %76, float %.0.i, float 0x3D71979980000000, !dbg !56
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %77) #5, !dbg !57
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !58
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %15) #5, !dbg !59
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !60
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %15) #5, !dbg !61
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !62
  %.not.i3 = icmp eq i32 %83, 0, !dbg !62
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !62
  %.not1.i6 = icmp eq i32 %84, 0, !dbg !62
  br i1 %.not.i3, label %90, label %85, !dbg !62

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %88, label %86, !dbg !62

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #5, !dbg !62
  br label %__nv_sqrtf.exit7, !dbg !62

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #5, !dbg !62
  br label %__nv_sqrtf.exit7, !dbg !62

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %93, label %91, !dbg !62

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #5, !dbg !62
  br label %__nv_sqrtf.exit7, !dbg !62

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #5, !dbg !62
  br label %__nv_sqrtf.exit7, !dbg !62

__nv_sqrtf.exit7:                                 ; preds = %86, %88, %91, %93
  %.0.i5 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !62
  %95 = bitcast i32 %80 to float, !dbg !59
  %96 = bitcast i32 %82 to float, !dbg !61
  %97 = fsub float %95, %96, !dbg !63
  %98 = fcmp ogt float %.0.i5, 0x3D71979980000000, !dbg !64
  %99 = fcmp uno float %.0.i5, 0.000000e+00, !dbg !66
  %100 = or i1 %98, %99, !dbg !67
  %101 = select i1 %100, float %.0.i5, float 0x3D71979980000000, !dbg !68
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %101) #5, !dbg !69
  %103 = sext i32 %14 to i64, !dbg !70
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !70
  %105 = bitcast float %78 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %104, i1 %15) #5, !dbg !71
  %106 = getelementptr float, ptr addrspace(1) %7, i64 %103, !dbg !72
  %107 = bitcast float %102 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 %15) #5, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2j34gyi7cxdvf5ju3pzntdlg4lnqwy4lvswyziwzssppp3sbpvu.py", directory: "inductor_cache/2j")
!4 = !{ptr @triton_poi_fused_div_gather_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_gather_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_div_gather_sub_8", linkageName: "triton_poi_fused_div_gather_sub_8", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 25, column: 21, scope: !11)
!19 = !DILocation(line: 30, column: 30, scope: !11)
!20 = !DILocation(line: 30, column: 35, scope: !11)
!21 = !DILocation(line: 31, column: 31, scope: !11)
!22 = !DILocation(line: 31, column: 36, scope: !11)
!23 = !DILocation(line: 32, column: 31, scope: !11)
!24 = !DILocation(line: 32, column: 36, scope: !11)
!25 = !DILocation(line: 36, column: 32, scope: !11)
!26 = !DILocation(line: 37, column: 37, scope: !11)
!27 = !DILocation(line: 37, column: 60, scope: !11)
!28 = !DILocation(line: 26, column: 19, scope: !11)
!29 = !DILocation(line: 25, column: 26, scope: !11)
!30 = !DILocation(line: 38, column: 37, scope: !11)
!31 = !DILocation(line: 38, column: 35, scope: !11)
!32 = !DILocation(line: 38, column: 47, scope: !11)
!33 = !DILocation(line: 38, column: 44, scope: !11)
!34 = !DILocation(line: 38, column: 30, scope: !11)
!35 = !DILocation(line: 38, column: 52, scope: !11)
!36 = !DILocation(line: 41, column: 32, scope: !11)
!37 = !DILocation(line: 42, column: 37, scope: !11)
!38 = !DILocation(line: 42, column: 60, scope: !11)
!39 = !DILocation(line: 27, column: 19, scope: !11)
!40 = !DILocation(line: 43, column: 36, scope: !11)
!41 = !DILocation(line: 43, column: 45, scope: !11)
!42 = !DILocation(line: 43, column: 31, scope: !11)
!43 = !DILocation(line: 43, column: 53, scope: !11)
!44 = !DILocation(line: 44, column: 38, scope: !11)
!45 = !DILocation(line: 44, column: 45, scope: !11)
!46 = !DILocation(line: 44, column: 31, scope: !11)
!47 = !DILocation(line: 44, column: 53, scope: !11)
!48 = !DILocation(line: 45, column: 20, scope: !11)
!49 = !DILocation(line: 46, column: 27, scope: !11)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !11, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 48, column: 42, scope: !11)
!54 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!57 = !DILocation(line: 49, column: 20, scope: !11)
!58 = !DILocation(line: 50, column: 31, scope: !11)
!59 = !DILocation(line: 50, column: 53, scope: !11)
!60 = !DILocation(line: 51, column: 31, scope: !11)
!61 = !DILocation(line: 51, column: 53, scope: !11)
!62 = !DILocation(line: 53, column: 27, scope: !11)
!63 = !DILocation(line: 52, column: 20, scope: !11)
!64 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !65)
!65 = !DILocation(line: 54, column: 42, scope: !11)
!66 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !65)
!69 = !DILocation(line: 55, column: 20, scope: !11)
!70 = !DILocation(line: 56, column: 25, scope: !11)
!71 = !DILocation(line: 56, column: 37, scope: !11)
!72 = !DILocation(line: 57, column: 25, scope: !11)
!73 = !DILocation(line: 57, column: 37, scope: !11)
!74 = !DILocation(line: 57, column: 4, scope: !11)
