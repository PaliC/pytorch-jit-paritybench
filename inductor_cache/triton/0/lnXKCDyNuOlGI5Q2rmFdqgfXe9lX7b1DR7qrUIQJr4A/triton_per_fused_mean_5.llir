; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = shl i32 %9, 1, !dbg !12
  %15 = and i32 %14, 6, !dbg !12
  %16 = and i32 %9, 7, !dbg !12
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %15, !dbg !13
  %19 = or disjoint i32 %8, %16, !dbg !13
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = icmp slt i32 %17, 16, !dbg !14
  %22 = icmp slt i32 %19, 16, !dbg !14
  %23 = and i32 %14, 14, !dbg !15
  %24 = and i32 %9, 60, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %25 = sdiv i32 %.frozen, 4, !dbg !16
  %26 = mul i32 %25, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %27 = shl i32 %17, 4, !dbg !18
  %28 = or disjoint i32 %27, %23, !dbg !19
  %29 = sext i32 %28 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !20
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !21
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !21
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !21
  %34 = bitcast i32 %32 to float, !dbg !21
  %35 = bitcast i32 %33 to float, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !23
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !23
  %40 = bitcast i32 %38 to float, !dbg !23
  %41 = bitcast i32 %39 to float, !dbg !23
  %42 = add nsw i32 %.decomposed, %24, !dbg !24
  %43 = shl i32 %25, 6, !dbg !25
  %44 = add i32 %42, %43, !dbg !26
  %45 = sext i32 %44 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !27
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !28
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !28
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !28
  %50 = bitcast i32 %48 to float, !dbg !28
  %51 = bitcast i32 %49 to float, !dbg !28
  %52 = fadd float %34, %40, !dbg !29
  %53 = fadd float %35, %41, !dbg !29
  %54 = shl i32 %9, 4, !dbg !29
  %55 = and i32 %54, 112, !dbg !29
  %56 = or disjoint i32 %55, %13, !dbg !29
  %57 = and i32 %14, 126, !dbg !29
  %58 = lshr exact i32 %55, 1, !dbg !29
  %59 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %58, !dbg !29
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %56, !dbg !29
  %61 = bitcast float %52 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #3, !dbg !29
  %62 = or disjoint i32 %56, 8, !dbg !29
  %63 = lshr i32 %62, 3, !dbg !29
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !29
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !29
  %66 = bitcast float %53 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %67 = lshr i32 %57, 3, !dbg !29
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !29
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %57, !dbg !29
  %70 = load float, ptr addrspace(3) %69, align 4, !dbg !29
  %71 = or disjoint i32 %57, 1, !dbg !29
  %72 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %71, !dbg !29
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !29
  %74 = fadd float %70, %50, !dbg !30
  %75 = fadd float %73, %51, !dbg !30
  %76 = select i1 %20, float %74, float 0.000000e+00, !dbg !31
  %77 = select i1 %20, float %75, float 0.000000e+00, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %78 = bitcast float %76 to i32, !dbg !32
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = fadd float %76, %80, !dbg !36
  %82 = bitcast float %81 to i32, !dbg !32
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = fadd float %81, %84, !dbg !36
  %86 = bitcast float %85 to i32, !dbg !32
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = fadd float %85, %88, !dbg !36
  %90 = bitcast float %77 to i32, !dbg !32
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 16, i32 31), !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %77, %92, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !32
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 8, i32 31), !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = fadd float %93, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !32
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = fadd float %97, %100, !dbg !36
  %102 = icmp samesign ult i32 %10, 4, !dbg !32
  %103 = and i32 %11, 1, !dbg !32
  %104 = shl nuw nsw i32 %15, 1, !dbg !32
  %105 = or disjoint i32 %104, %103, !dbg !32
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !32
  %107 = bitcast float %89 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %102) #3, !dbg !32
  %108 = or disjoint i32 %104, 2, !dbg !32
  %109 = or disjoint i32 %108, %103, !dbg !32
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !32
  %111 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %102) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %112 = icmp slt i32 %9, 16, !dbg !32
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !32
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %113, i1 %112) #3, !dbg !32
  %115 = bitcast i32 %114 to float, !dbg !32
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !32
  %117 = bitcast i32 %116 to float, !dbg !32
  %118 = fadd float %115, %117, !dbg !36
  %119 = and i32 %9, 1, !dbg !32
  %120 = icmp eq i32 %119, 0, !dbg !32
  %121 = and i1 %112, %120, !dbg !32
  %122 = bitcast float %118 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %122, i1 %121) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !32
  %124 = load i32, ptr addrspace(3) %123, align 16, !dbg !32
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !32
  %126 = load i32, ptr addrspace(3) %125, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !38
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %127, i32 %124, i32 %126, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !38
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !38
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 1.600000e+01) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %131 = sext i32 %19 to i64, !dbg !40
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !40
  %133 = lshr i32 %10, 3, !dbg !41
  %134 = shl nuw nsw i32 %103, 2, !dbg !41
  %135 = or disjoint i32 %134, %133, !dbg !41
  %136 = icmp eq i32 %135, 0, !dbg !41
  %137 = bitcast float %130 to i32, !dbg !41
  %138 = and i1 %136, %22, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %137, ptr addrspace(1) %132, i1 %138) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py", directory: "inductor_cache/jn")
!4 = !{ptr @triton_per_fused_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_5", linkageName: "triton_per_fused_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 42, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 50, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 33, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 40, column: 24, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 4, scope: !7)
!40 = !DILocation(line: 44, column: 28, scope: !7)
!41 = !DILocation(line: 44, column: 40, scope: !7)
!42 = !DILocation(line: 44, column: 4, scope: !7)
