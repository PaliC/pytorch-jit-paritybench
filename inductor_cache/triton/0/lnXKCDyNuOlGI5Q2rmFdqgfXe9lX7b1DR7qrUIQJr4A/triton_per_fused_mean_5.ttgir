#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0)
#loc1 = loc(unknown)
#loc26 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":40:24)
#loc35 = loc(callsite(#loc1 at #loc26))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked1> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<8x1xi32, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<64> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked2> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %4 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<8x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<8x1xi32, #blocked> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<8x1xi32, #blocked2> loc(#loc5)
    %14 = arith.cmpi slt, %12, %cst_2 : tensor<8x1xi32, #blocked> loc(#loc6)
    %15 = arith.cmpi slt, %11, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %16 = arith.cmpi slt, %13, %cst_3 : tensor<8x1xi32, #blocked2> loc(#loc6)
    %17 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %18 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %19 = tt.expand_dims %17 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc7)
    %20 = tt.expand_dims %18 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %21 = arith.remsi %12, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc8)
    %22 = arith.divsi %12, %cst_4 : tensor<8x1xi32, #blocked> loc(#loc9)
    %23 = arith.muli %11, %cst_1 : tensor<8x1xi32, #blocked1> loc(#loc10)
    %24 = tt.broadcast %19 : tensor<1x16xi32, #blocked1> -> tensor<8x16xi32, #blocked1> loc(#loc11)
    %25 = tt.broadcast %23 : tensor<8x1xi32, #blocked1> -> tensor<8x16xi32, #blocked1> loc(#loc11)
    %26 = arith.addi %24, %25 : tensor<8x16xi32, #blocked1> loc(#loc11)
    %27 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %28 = tt.addptr %27, %26 : tensor<8x16x!tt.ptr<f32>, #blocked1>, tensor<8x16xi32, #blocked1> loc(#loc12)
    %29 = tt.broadcast %14 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc13)
    %30 = tt.broadcast %15 : tensor<8x1xi1, #blocked1> -> tensor<8x16xi1, #blocked1> loc(#loc13)
    %31 = tt.load %28, %30, %cst_0 : tensor<8x16x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %32 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %33 = tt.addptr %32, %26 : tensor<8x16x!tt.ptr<f32>, #blocked1>, tensor<8x16xi32, #blocked1> loc(#loc14)
    %34 = tt.load %33, %30, %cst_0 : tensor<8x16x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %35 = arith.muli %20, %cst_5 : tensor<1x16xi32, #blocked> loc(#loc16)
    %36 = tt.broadcast %21 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc17)
    %37 = tt.broadcast %35 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc17)
    %38 = arith.addi %36, %37 : tensor<8x16xi32, #blocked> loc(#loc17)
    %39 = arith.muli %22, %cst_6 : tensor<8x1xi32, #blocked> loc(#loc18)
    %40 = tt.broadcast %39 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc19)
    %41 = arith.addi %38, %40 : tensor<8x16xi32, #blocked> loc(#loc19)
    %42 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc20)
    %43 = tt.addptr %42, %41 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc20)
    %44 = tt.load %43, %29, %cst : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc21)
    %45 = arith.addf %31, %34 : tensor<8x16xf32, #blocked1> loc(#loc22)
    %46 = triton_gpu.convert_layout %45 {fastmath = #arith.fastmath<none>} : tensor<8x16xf32, #blocked1> -> tensor<8x16xf32, #blocked> loc(#loc22)
    %47 = arith.addf %46, %44 : tensor<8x16xf32, #blocked> loc(#loc23)
    %48 = arith.select %29, %47, %cst : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc24)
    %49 = "tt.reduce"(%48) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc26)), %arg7: f32 loc(callsite(#loc1 at #loc26))):
      %55 = arith.addf %arg6, %arg7 : f32 loc(#loc37)
      tt.reduce.return %55 : f32 loc(#loc34)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc34)
    %50 = triton_gpu.convert_layout %49 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc28)
    %51 = tt.expand_dims %50 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<8x1xf32, #blocked2> loc(#loc29)
    %52 = arith.divf %51, %cst_7 : tensor<8x1xf32, #blocked2> loc(#loc28)
    gpu.barrier loc(#loc30)
    %53 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked2> loc(#loc31)
    %54 = tt.addptr %53, %13 : tensor<8x1x!tt.ptr<f32>, #blocked2>, tensor<8x1xi32, #blocked2> loc(#loc31)
    tt.store %54, %52, %16 : tensor<8x1x!tt.ptr<f32>, #blocked2> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":23:28)
#loc3 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":23:33)
#loc4 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":24:44)
#loc5 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":24:23)
#loc6 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":25:21)
#loc7 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":26:34)
#loc8 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":31:19)
#loc9 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":32:19)
#loc10 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":33:38)
#loc11 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":33:35)
#loc12 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":33:30)
#loc13 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":33:43)
#loc14 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":34:30)
#loc15 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":34:43)
#loc16 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:37)
#loc17 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:35)
#loc18 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:45)
#loc19 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:42)
#loc20 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:30)
#loc21 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":35:50)
#loc22 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":36:18)
#loc23 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":37:18)
#loc24 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":39:33)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc28 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":42:19)
#loc29 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":40:27)
#loc30 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":43:4)
#loc31 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":44:28)
#loc32 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":44:40)
#loc33 = loc("inductor_cache/jn/cjn7jkpy5bqanudafk46vt2afswnrcvhsr5askrdu2ynvxkbytky.py":44:4)
#loc34 = loc(callsite(#loc25 at #loc26))
#loc36 = loc(callsite(#loc27 at #loc25))
#loc37 = loc(callsite(#loc36 at #loc26))
