; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %.lobit2 = lshr i32 %12, 7, !dbg !12
  %14 = and i32 %.lobit2, 3, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = lshr i32 %12, 3, !dbg !15
  %22 = and i32 %21, 63, !dbg !15
  %23 = and i32 %12, 511, !dbg !15
  %24 = shl i32 %12, 2, !dbg !15
  %25 = and i32 %24, 508, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %26 = sdiv i32 %.frozen, 4, !dbg !16
  %27 = mul i32 %26, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %27, !dbg !17
  %28 = srem i32 %26, 32, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = shl nsw i32 %.decomposed, 4, !dbg !21
  %34 = shl i32 %26, 15, !dbg !22
  %35 = sext i32 %34 to i64, !dbg !23
  %36 = shl i32 %16, 16, !dbg !24
  %37 = shl i32 %17, 16, !dbg !24
  %38 = and i32 %12, 63
  %39 = zext nneg i32 %38 to i64
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39
  %.idx = shl nuw nsw i32 %23, 4
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %.idx4 = shl nuw nsw i32 %22, 4
  %42 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %.idx5 = or disjoint i32 %.idx4, 1024
  %43 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5
  %.idx6 = or disjoint i32 %.idx4, 2048
  %44 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6
  %.idx7 = or disjoint i32 %.idx4, 3072
  %45 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7
  %.idx8 = or disjoint i32 %.idx4, 4096
  %46 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8
  %.idx9 = or disjoint i32 %.idx4, 5120
  %47 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9
  %.idx10 = or disjoint i32 %.idx4, 6144
  %48 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10
  %.idx11 = or disjoint i32 %.idx4, 7168
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11
  %50 = shl i32 %12, 9
  %51 = and i32 %50, 3584
  %52 = or disjoint i32 %51, %22
  %53 = and i32 %24, 2044
  %54 = lshr exact i32 %51, 5
  %55 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %54
  %56 = getelementptr float, ptr addrspace(3) %55, i32 %52
  %57 = or disjoint i32 %52, 64
  %58 = getelementptr float, ptr addrspace(3) %55, i32 %57
  %59 = or disjoint i32 %52, 128
  %60 = getelementptr float, ptr addrspace(3) %55, i32 %59
  %61 = or disjoint i32 %52, 192
  %62 = getelementptr float, ptr addrspace(3) %55, i32 %61
  %63 = or disjoint i32 %52, 256
  %64 = getelementptr float, ptr addrspace(3) %55, i32 %63
  %65 = or disjoint i32 %52, 320
  %66 = getelementptr float, ptr addrspace(3) %55, i32 %65
  %67 = or disjoint i32 %52, 384
  %68 = getelementptr float, ptr addrspace(3) %55, i32 %67
  %69 = or disjoint i32 %52, 448
  %70 = getelementptr float, ptr addrspace(3) %55, i32 %69
  %71 = lshr i32 %24, 7
  %72 = and i32 %71, 12
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %53
  %75 = or disjoint i32 %53, 2048
  %76 = lshr i32 %75, 7
  %77 = and i32 %76, 28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75
  %80 = zext nneg i32 %25 to i64, !dbg !25
  %81 = sext i32 %36 to i64, !dbg !25
  %82 = sext i32 %37 to i64, !dbg !25
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !25
  %invariant.gep143 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !25
  %83 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 4
  %84 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 8
  %85 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 12
  br label %86, !dbg !25

86:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %313, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %314, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %315, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %316, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %317, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %9 ], [ %318, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %9 ], [ %319, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %9 ], [ %320, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %9 ], [ %305, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %306, %._crit_edge ]
  %97 = phi float [ 0.000000e+00, %9 ], [ %307, %._crit_edge ]
  %98 = phi float [ 0.000000e+00, %9 ], [ %308, %._crit_edge ]
  %99 = phi float [ 0.000000e+00, %9 ], [ %309, %._crit_edge ]
  %100 = phi float [ 0.000000e+00, %9 ], [ %310, %._crit_edge ]
  %101 = phi float [ 0.000000e+00, %9 ], [ %311, %._crit_edge ]
  %102 = phi float [ 0.000000e+00, %9 ], [ %312, %._crit_edge ]
  %103 = phi float [ 0.000000e+00, %9 ], [ %297, %._crit_edge ]
  %104 = phi float [ 0.000000e+00, %9 ], [ %298, %._crit_edge ]
  %105 = phi float [ 0.000000e+00, %9 ], [ %299, %._crit_edge ]
  %106 = phi float [ 0.000000e+00, %9 ], [ %300, %._crit_edge ]
  %107 = phi float [ 0.000000e+00, %9 ], [ %301, %._crit_edge ]
  %108 = phi float [ 0.000000e+00, %9 ], [ %302, %._crit_edge ]
  %109 = phi float [ 0.000000e+00, %9 ], [ %303, %._crit_edge ]
  %110 = phi float [ 0.000000e+00, %9 ], [ %304, %._crit_edge ]
  %111 = or disjoint i64 %indvars.iv, %80, !dbg !26
  %112 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !27
  %113 = lshr i32 %112, 12, !dbg !27
  %114 = trunc i64 %indvars.iv to i32, !dbg !28
  %115 = or disjoint i32 %23, %114, !dbg !28
  %116 = lshr i32 %115, 6, !dbg !28
  %117 = and i32 %116, 63, !dbg !28
  %118 = or disjoint i32 %113, %33, !dbg !29
  %119 = sext i32 %118 to i64, !dbg !30
  %120 = getelementptr i64, ptr addrspace(1) %0, i64 %119, !dbg !30
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 %18, i1 %18) #3, !dbg !31
  %129 = zext nneg i32 %117 to i64, !dbg !32
  %130 = getelementptr i64, ptr addrspace(1) %0, i64 %129, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !33
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !34
  %133 = lshr i64 %121, 58, !dbg !35
  %134 = and i64 %133, 32, !dbg !35
  %135 = add i64 %134, %121, !dbg !35
  %136 = lshr i64 %122, 58, !dbg !35
  %137 = and i64 %136, 32, !dbg !35
  %138 = add i64 %137, %122, !dbg !35
  %139 = lshr i64 %123, 58, !dbg !35
  %140 = and i64 %139, 32, !dbg !35
  %141 = add i64 %140, %123, !dbg !35
  %142 = lshr i64 %124, 58, !dbg !35
  %143 = and i64 %142, 32, !dbg !35
  %144 = add i64 %143, %124, !dbg !35
  %145 = lshr i64 %125, 58, !dbg !35
  %146 = and i64 %145, 32, !dbg !35
  %147 = add i64 %146, %125, !dbg !35
  %148 = lshr i64 %126, 58, !dbg !35
  %149 = and i64 %148, 32, !dbg !35
  %150 = add i64 %149, %126, !dbg !35
  %151 = lshr i64 %127, 58, !dbg !35
  %152 = and i64 %151, 32, !dbg !35
  %153 = add i64 %152, %127, !dbg !35
  %154 = lshr i64 %128, 58, !dbg !35
  %155 = and i64 %154, 32, !dbg !35
  %156 = add i64 %155, %128, !dbg !35
  %157 = insertelement <2 x i64> poison, i64 %132, i64 0, !dbg !36
  %158 = insertelement <2 x i64> %157, i64 %131, i64 1, !dbg !36
  %159 = lshr <2 x i64> %158, splat (i64 58), !dbg !36
  %160 = and <2 x i64> %159, splat (i64 32), !dbg !36
  %161 = add <2 x i64> %160, %158, !dbg !36
  %162 = extractelement <2 x i64> %161, i64 1, !dbg !37
  %163 = shl i64 %162, 5, !dbg !37
  %164 = extractelement <2 x i64> %161, i64 0, !dbg !38
  %165 = add i64 %164, %163, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %166 = insertelement <1 x i64> poison, i64 %165, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %41, <1 x i64> %166, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %167 = load i64, ptr addrspace(3) %42, align 16, !dbg !39
  %168 = load i64, ptr addrspace(3) %43, align 16, !dbg !39
  %169 = load i64, ptr addrspace(3) %44, align 16, !dbg !39
  %170 = load i64, ptr addrspace(3) %45, align 16, !dbg !39
  %171 = load i64, ptr addrspace(3) %46, align 16, !dbg !39
  %172 = load i64, ptr addrspace(3) %47, align 16, !dbg !39
  %173 = load i64, ptr addrspace(3) %48, align 16, !dbg !39
  %174 = load i64, ptr addrspace(3) %49, align 16, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !39
  %.idx12 = shl i64 %135, 12, !dbg !39
  %176 = getelementptr i8, ptr addrspace(1) %175, i64 %.idx12, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %35, !dbg !39
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !39
  %.idx13 = shl i64 %138, 12, !dbg !39
  %179 = getelementptr i8, ptr addrspace(1) %178, i64 %.idx13, !dbg !39
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %35, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !39
  %.idx14 = shl i64 %141, 12, !dbg !39
  %182 = getelementptr i8, ptr addrspace(1) %181, i64 %.idx14, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %35, !dbg !39
  %184 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !39
  %.idx15 = shl i64 %144, 12, !dbg !39
  %185 = getelementptr i8, ptr addrspace(1) %184, i64 %.idx15, !dbg !39
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %35, !dbg !39
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !39
  %.idx16 = shl i64 %147, 12, !dbg !39
  %188 = getelementptr i8, ptr addrspace(1) %187, i64 %.idx16, !dbg !39
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %35, !dbg !39
  %190 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !39
  %.idx17 = shl i64 %150, 12, !dbg !39
  %191 = getelementptr i8, ptr addrspace(1) %190, i64 %.idx17, !dbg !39
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %35, !dbg !39
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !39
  %.idx18 = shl i64 %153, 12, !dbg !39
  %194 = getelementptr i8, ptr addrspace(1) %193, i64 %.idx18, !dbg !39
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %35, !dbg !39
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !39
  %.idx19 = shl i64 %156, 12, !dbg !39
  %197 = getelementptr i8, ptr addrspace(1) %196, i64 %.idx19, !dbg !39
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %35, !dbg !39
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %18) #3, !dbg !40
  %200 = bitcast i32 %199 to float, !dbg !40
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %18) #3, !dbg !40
  %202 = bitcast i32 %201 to float, !dbg !40
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %18) #3, !dbg !40
  %204 = bitcast i32 %203 to float, !dbg !40
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %18) #3, !dbg !40
  %206 = bitcast i32 %205 to float, !dbg !40
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %18) #3, !dbg !40
  %208 = bitcast i32 %207 to float, !dbg !40
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %18) #3, !dbg !40
  %210 = bitcast i32 %209 to float, !dbg !40
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %18) #3, !dbg !40
  %212 = bitcast i32 %211 to float, !dbg !40
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %18) #3, !dbg !40
  %214 = bitcast i32 %213 to float, !dbg !40
  %215 = fadd float %32, %200, !dbg !41
  %216 = fadd float %32, %202, !dbg !41
  %217 = fadd float %32, %204, !dbg !41
  %218 = fadd float %32, %206, !dbg !41
  %219 = fadd float %32, %208, !dbg !41
  %220 = fadd float %32, %210, !dbg !41
  %221 = fadd float %32, %212, !dbg !41
  %222 = fadd float %32, %214, !dbg !41
  %223 = icmp eq i64 %indvars.iv, 0, !dbg !42
  br i1 %223, label %._crit_edge, label %224, !dbg !43

224:                                              ; preds = %86
  %225 = fsub float %215, %103, !dbg !47
  %226 = fsub float %216, %104, !dbg !47
  %227 = fsub float %217, %105, !dbg !47
  %228 = fsub float %218, %106, !dbg !47
  %229 = fsub float %219, %107, !dbg !47
  %230 = fsub float %220, %108, !dbg !47
  %231 = fsub float %221, %109, !dbg !47
  %232 = fsub float %222, %110, !dbg !47
  %233 = fadd float %87, 1.000000e+00, !dbg !48
  %234 = fadd float %88, 1.000000e+00, !dbg !48
  %235 = fadd float %89, 1.000000e+00, !dbg !48
  %236 = fadd float %90, 1.000000e+00, !dbg !48
  %237 = fadd float %91, 1.000000e+00, !dbg !48
  %238 = fadd float %92, 1.000000e+00, !dbg !48
  %239 = fadd float %93, 1.000000e+00, !dbg !48
  %240 = fadd float %94, 1.000000e+00, !dbg !48
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %233) #3, !dbg !49
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %234) #3, !dbg !49
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %235) #3, !dbg !49
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float %236) #3, !dbg !49
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %237) #3, !dbg !49
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %238) #3, !dbg !49
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %239) #3, !dbg !49
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %240) #3, !dbg !49
  %249 = fadd float %103, %241, !dbg !50
  %250 = fadd float %104, %242, !dbg !50
  %251 = fadd float %105, %243, !dbg !50
  %252 = fadd float %106, %244, !dbg !50
  %253 = fadd float %107, %245, !dbg !50
  %254 = fadd float %108, %246, !dbg !50
  %255 = fadd float %109, %247, !dbg !50
  %256 = fadd float %110, %248, !dbg !50
  %257 = fsub float %215, %249, !dbg !51
  %258 = fsub float %216, %250, !dbg !51
  %259 = fsub float %217, %251, !dbg !51
  %260 = fsub float %218, %252, !dbg !51
  %261 = fsub float %219, %253, !dbg !51
  %262 = fsub float %220, %254, !dbg !51
  %263 = fsub float %221, %255, !dbg !51
  %264 = fsub float %222, %256, !dbg !51
  %265 = fmul float %225, %257, !dbg !52
  %266 = fmul float %226, %258, !dbg !52
  %267 = fmul float %227, %259, !dbg !52
  %268 = fmul float %228, %260, !dbg !52
  %269 = fmul float %229, %261, !dbg !52
  %270 = fmul float %230, %262, !dbg !52
  %271 = fmul float %231, %263, !dbg !52
  %272 = fmul float %232, %264, !dbg !52
  %273 = fadd float %95, %265, !dbg !53
  %274 = fadd float %96, %266, !dbg !53
  %275 = fadd float %97, %267, !dbg !53
  %276 = fadd float %98, %268, !dbg !53
  %277 = fadd float %99, %269, !dbg !53
  %278 = fadd float %100, %270, !dbg !53
  %279 = fadd float %101, %271, !dbg !53
  %280 = fadd float %102, %272, !dbg !53
  br label %._crit_edge, !dbg !43

._crit_edge:                                      ; preds = %86, %224
  %281 = phi float [ %273, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %282 = phi float [ %274, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %283 = phi float [ %275, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %284 = phi float [ %276, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %285 = phi float [ %277, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %286 = phi float [ %278, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %287 = phi float [ %279, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %288 = phi float [ %280, %224 ], [ 0.000000e+00, %86 ], !dbg !46
  %.pn34 = phi float [ %249, %224 ], [ %215, %86 ]
  %.pn32 = phi float [ %250, %224 ], [ %216, %86 ]
  %.pn30 = phi float [ %251, %224 ], [ %217, %86 ]
  %.pn28 = phi float [ %252, %224 ], [ %218, %86 ]
  %.pn26 = phi float [ %253, %224 ], [ %219, %86 ]
  %.pn24 = phi float [ %254, %224 ], [ %220, %86 ]
  %.pn22 = phi float [ %255, %224 ], [ %221, %86 ]
  %.pn20 = phi float [ %256, %224 ], [ %222, %86 ]
  %289 = phi float [ %233, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %290 = phi float [ %234, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %291 = phi float [ %235, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %292 = phi float [ %236, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %293 = phi float [ %237, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %294 = phi float [ %238, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %295 = phi float [ %239, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %296 = phi float [ %240, %224 ], [ 1.000000e+00, %86 ], !dbg !46
  %297 = select i1 %18, float %.pn34, float %103, !dbg !54
  %298 = select i1 %18, float %.pn32, float %104, !dbg !54
  %299 = select i1 %18, float %.pn30, float %105, !dbg !54
  %300 = select i1 %18, float %.pn28, float %106, !dbg !54
  %301 = select i1 %18, float %.pn26, float %107, !dbg !54
  %302 = select i1 %18, float %.pn24, float %108, !dbg !54
  %303 = select i1 %18, float %.pn22, float %109, !dbg !54
  %304 = select i1 %18, float %.pn20, float %110, !dbg !54
  %305 = select i1 %18, float %281, float %95, !dbg !55
  %306 = select i1 %18, float %282, float %96, !dbg !55
  %307 = select i1 %18, float %283, float %97, !dbg !55
  %308 = select i1 %18, float %284, float %98, !dbg !55
  %309 = select i1 %18, float %285, float %99, !dbg !55
  %310 = select i1 %18, float %286, float %100, !dbg !55
  %311 = select i1 %18, float %287, float %101, !dbg !55
  %312 = select i1 %18, float %288, float %102, !dbg !55
  %313 = select i1 %18, float %289, float %87, !dbg !56
  %314 = select i1 %18, float %290, float %88, !dbg !56
  %315 = select i1 %18, float %291, float %89, !dbg !56
  %316 = select i1 %18, float %292, float %90, !dbg !56
  %317 = select i1 %18, float %293, float %91, !dbg !56
  %318 = select i1 %18, float %294, float %92, !dbg !56
  %319 = select i1 %18, float %295, float %93, !dbg !56
  %320 = select i1 %18, float %296, float %94, !dbg !56
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %111, !dbg !57
  %gep144 = getelementptr float, ptr addrspace(1) %invariant.gep143, i64 %111, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %321 = bitcast float %215 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %321, i1 true) #3, !dbg !58
  %322 = bitcast float %216 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %322, i1 true) #3, !dbg !58
  %323 = bitcast float %217 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %323, i1 true) #3, !dbg !58
  %324 = bitcast float %218 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %324, i1 true) #3, !dbg !58
  %325 = bitcast float %219 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %325, i1 true) #3, !dbg !58
  %326 = bitcast float %220 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %326, i1 true) #3, !dbg !58
  %327 = bitcast float %221 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %327, i1 true) #3, !dbg !58
  %328 = bitcast float %222 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %328, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %329 = load <4 x i32>, ptr addrspace(3) %79, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %74, align 16, !dbg !58
  %.extract42 = load i32, ptr addrspace(3) %83, align 4, !dbg !58
  %.extract43 = load i32, ptr addrspace(3) %84, align 8, !dbg !58
  %.extract44 = load i32, ptr addrspace(3) %85, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %gep, i1 %19) #3, !dbg !58
  %.extract45 = extractelement <4 x i32> %329, i64 0, !dbg !58
  %.extract46 = extractelement <4 x i32> %329, i64 1, !dbg !58
  %.extract47 = extractelement <4 x i32> %329, i64 2, !dbg !58
  %.extract48 = extractelement <4 x i32> %329, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract45, i32 %.extract46, i32 %.extract47, i32 %.extract48, ptr addrspace(1) %gep144, i1 %20) #3, !dbg !58
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 512, !dbg !25
  %330 = icmp samesign ult i64 %indvars.iv, 65024, !dbg !25
  br i1 %330, label %86, label %331, !dbg !25

331:                                              ; preds = %._crit_edge
  %332 = lshr i32 %12, 5, !dbg !12
  %333 = and i32 %12, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %334 = fsub float %298, %297, !dbg !61
  %335 = fadd float %313, %314, !dbg !63
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !64
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %335) #3, !dbg !65
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !66
  %339 = fmul float %334, %338, !dbg !67
  %340 = fadd float %297, %339, !dbg !68
  %341 = fadd float %305, %306, !dbg !69
  %342 = fmul float %334, %334, !dbg !70
  %343 = fmul float %342, %313, !dbg !71
  %344 = fmul float %343, %338, !dbg !72
  %345 = fadd float %341, %344, !dbg !73
  %346 = fsub float %299, %340, !dbg !61
  %347 = fadd float %315, %335, !dbg !63
  %348 = fcmp oeq float %347, 0.000000e+00, !dbg !64
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %347) #3, !dbg !65
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !66
  %351 = fmul float %350, %346, !dbg !67
  %352 = fadd float %340, %351, !dbg !68
  %353 = fadd float %307, %345, !dbg !69
  %354 = fmul float %346, %346, !dbg !70
  %355 = fmul float %335, %354, !dbg !71
  %356 = fmul float %350, %355, !dbg !72
  %357 = fadd float %353, %356, !dbg !73
  %358 = fsub float %300, %352, !dbg !61
  %359 = fadd float %316, %347, !dbg !63
  %360 = fcmp oeq float %359, 0.000000e+00, !dbg !64
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %359) #3, !dbg !65
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !66
  %363 = fmul float %362, %358, !dbg !67
  %364 = fadd float %352, %363, !dbg !68
  %365 = fadd float %308, %357, !dbg !69
  %366 = fmul float %358, %358, !dbg !70
  %367 = fmul float %347, %366, !dbg !71
  %368 = fmul float %362, %367, !dbg !72
  %369 = fadd float %365, %368, !dbg !73
  %370 = fsub float %301, %364, !dbg !61
  %371 = fadd float %317, %359, !dbg !63
  %372 = fcmp oeq float %371, 0.000000e+00, !dbg !64
  %373 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %371) #3, !dbg !65
  %374 = select i1 %372, float 0.000000e+00, float %373, !dbg !66
  %375 = fmul float %374, %370, !dbg !67
  %376 = fadd float %364, %375, !dbg !68
  %377 = fadd float %309, %369, !dbg !69
  %378 = fmul float %370, %370, !dbg !70
  %379 = fmul float %359, %378, !dbg !71
  %380 = fmul float %374, %379, !dbg !72
  %381 = fadd float %377, %380, !dbg !73
  %382 = fsub float %302, %376, !dbg !61
  %383 = fadd float %318, %371, !dbg !63
  %384 = fcmp oeq float %383, 0.000000e+00, !dbg !64
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %383) #3, !dbg !65
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !66
  %387 = fmul float %386, %382, !dbg !67
  %388 = fadd float %376, %387, !dbg !68
  %389 = fadd float %310, %381, !dbg !69
  %390 = fmul float %382, %382, !dbg !70
  %391 = fmul float %371, %390, !dbg !71
  %392 = fmul float %386, %391, !dbg !72
  %393 = fadd float %389, %392, !dbg !73
  %394 = fsub float %303, %388, !dbg !61
  %395 = fadd float %319, %383, !dbg !63
  %396 = fcmp oeq float %395, 0.000000e+00, !dbg !64
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float %395) #3, !dbg !65
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !66
  %399 = fmul float %398, %394, !dbg !67
  %400 = fadd float %388, %399, !dbg !68
  %401 = fadd float %311, %393, !dbg !69
  %402 = fmul float %394, %394, !dbg !70
  %403 = fmul float %383, %402, !dbg !71
  %404 = fmul float %398, %403, !dbg !72
  %405 = fadd float %401, %404, !dbg !73
  %406 = fsub float %304, %400, !dbg !61
  %407 = fadd float %320, %395, !dbg !63
  %408 = fcmp oeq float %407, 0.000000e+00, !dbg !64
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float %407) #3, !dbg !65
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !66
  %411 = fmul float %410, %406, !dbg !67
  %412 = fadd float %400, %411, !dbg !68
  %413 = fadd float %312, %405, !dbg !69
  %414 = fmul float %406, %406, !dbg !70
  %415 = fmul float %395, %414, !dbg !71
  %416 = fmul float %410, %415, !dbg !72
  %417 = fadd float %413, %416, !dbg !73
  %418 = bitcast float %412 to i32, !dbg !59
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 16, i32 31), !dbg !59
  %420 = bitcast i32 %419 to float, !dbg !59
  %421 = bitcast float %417 to i32, !dbg !59
  %422 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %421, i32 16, i32 31), !dbg !59
  %423 = bitcast i32 %422 to float, !dbg !59
  %424 = bitcast float %407 to i32, !dbg !59
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 16, i32 31), !dbg !59
  %426 = bitcast i32 %425 to float, !dbg !59
  %427 = fsub float %420, %412, !dbg !61
  %428 = fadd float %407, %426, !dbg !63
  %429 = fcmp oeq float %428, 0.000000e+00, !dbg !64
  %430 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %426, float %428) #3, !dbg !65
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !66
  %432 = fmul float %431, %427, !dbg !67
  %433 = fadd float %412, %432, !dbg !68
  %434 = fadd float %417, %423, !dbg !69
  %435 = fmul float %427, %427, !dbg !70
  %436 = fmul float %407, %435, !dbg !71
  %437 = fmul float %431, %436, !dbg !72
  %438 = fadd float %434, %437, !dbg !73
  %439 = bitcast float %433 to i32, !dbg !59
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 8, i32 31), !dbg !59
  %441 = bitcast i32 %440 to float, !dbg !59
  %442 = bitcast float %438 to i32, !dbg !59
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 8, i32 31), !dbg !59
  %444 = bitcast i32 %443 to float, !dbg !59
  %445 = bitcast float %428 to i32, !dbg !59
  %446 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %445, i32 8, i32 31), !dbg !59
  %447 = bitcast i32 %446 to float, !dbg !59
  %448 = fsub float %441, %433, !dbg !61
  %449 = fadd float %428, %447, !dbg !63
  %450 = fcmp oeq float %449, 0.000000e+00, !dbg !64
  %451 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %447, float %449) #3, !dbg !65
  %452 = select i1 %450, float 0.000000e+00, float %451, !dbg !66
  %453 = fmul float %452, %448, !dbg !67
  %454 = fadd float %433, %453, !dbg !68
  %455 = fadd float %438, %444, !dbg !69
  %456 = fmul float %448, %448, !dbg !70
  %457 = fmul float %428, %456, !dbg !71
  %458 = fmul float %452, %457, !dbg !72
  %459 = fadd float %455, %458, !dbg !73
  %460 = lshr i32 %333, 3, !dbg !59
  %461 = icmp samesign ult i32 %333, 8, !dbg !59
  %462 = and i32 %332, 15, !dbg !59
  %463 = shl nuw nsw i32 %13, 4, !dbg !59
  %464 = or disjoint i32 %463, %462, !dbg !59
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !59
  %466 = bitcast float %454 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %465, <1 x i32> %466, i1 %461) #3, !dbg !59
  %467 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %464, !dbg !59
  %468 = bitcast float %459 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 %461) #3, !dbg !59
  %469 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %464, !dbg !59
  %470 = bitcast float %449 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 %461) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %471 = icmp slt i32 %12, 128, !dbg !59
  %472 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !59
  %473 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %472, i1 %471) #3, !dbg !59
  %474 = bitcast i32 %473 to float, !dbg !59
  %475 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %12, !dbg !59
  %476 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %475, i1 %471) #3, !dbg !59
  %477 = bitcast i32 %476 to float, !dbg !59
  %478 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %12, !dbg !59
  %479 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %478, i1 %471) #3, !dbg !59
  %480 = bitcast i32 %479 to float, !dbg !59
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 8, i32 31), !dbg !59
  %482 = bitcast i32 %481 to float, !dbg !59
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 8, i32 31), !dbg !59
  %484 = bitcast i32 %483 to float, !dbg !59
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !59
  %486 = bitcast i32 %485 to float, !dbg !59
  %487 = fsub float %482, %474, !dbg !61
  %488 = fadd float %480, %486, !dbg !63
  %489 = fcmp oeq float %488, 0.000000e+00, !dbg !64
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %486, float %488) #3, !dbg !65
  %491 = select i1 %489, float 0.000000e+00, float %490, !dbg !66
  %492 = fmul float %487, %491, !dbg !67
  %493 = fadd float %492, %474, !dbg !68
  %494 = fadd float %477, %484, !dbg !69
  %495 = fmul float %487, %487, !dbg !70
  %496 = fmul float %495, %480, !dbg !71
  %497 = fmul float %496, %491, !dbg !72
  %498 = fadd float %494, %497, !dbg !73
  %499 = bitcast float %493 to i32, !dbg !59
  %500 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %499, i32 4, i32 31), !dbg !59
  %501 = bitcast i32 %500 to float, !dbg !59
  %502 = bitcast float %498 to i32, !dbg !59
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 4, i32 31), !dbg !59
  %504 = bitcast i32 %503 to float, !dbg !59
  %505 = bitcast float %488 to i32, !dbg !59
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 4, i32 31), !dbg !59
  %507 = bitcast i32 %506 to float, !dbg !59
  %508 = fsub float %501, %493, !dbg !61
  %509 = fadd float %488, %507, !dbg !63
  %510 = fcmp oeq float %509, 0.000000e+00, !dbg !64
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %507, float %509) #3, !dbg !65
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !66
  %513 = fmul float %508, %512, !dbg !67
  %514 = fadd float %493, %513, !dbg !68
  %515 = fadd float %498, %504, !dbg !69
  %516 = fmul float %508, %508, !dbg !70
  %517 = fmul float %488, %516, !dbg !71
  %518 = fmul float %512, %517, !dbg !72
  %519 = fadd float %515, %518, !dbg !73
  %520 = bitcast float %514 to i32, !dbg !59
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 2, i32 31), !dbg !59
  %522 = bitcast i32 %521 to float, !dbg !59
  %523 = bitcast float %519 to i32, !dbg !59
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 2, i32 31), !dbg !59
  %525 = bitcast i32 %524 to float, !dbg !59
  %526 = bitcast float %509 to i32, !dbg !59
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 2, i32 31), !dbg !59
  %528 = bitcast i32 %527 to float, !dbg !59
  %529 = fsub float %522, %514, !dbg !61
  %530 = fadd float %509, %528, !dbg !63
  %531 = fcmp oeq float %530, 0.000000e+00, !dbg !64
  %532 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %528, float %530) #3, !dbg !65
  %533 = select i1 %531, float 0.000000e+00, float %532, !dbg !66
  %534 = fmul float %529, %533, !dbg !67
  %535 = fadd float %514, %534, !dbg !68
  %536 = fadd float %519, %525, !dbg !69
  %537 = fmul float %529, %529, !dbg !70
  %538 = fmul float %509, %537, !dbg !71
  %539 = fmul float %533, %538, !dbg !72
  %540 = fadd float %536, %539, !dbg !73
  %541 = bitcast float %535 to i32, !dbg !59
  %542 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 1, i32 31), !dbg !59
  %543 = bitcast i32 %542 to float, !dbg !59
  %544 = bitcast float %540 to i32, !dbg !59
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 1, i32 31), !dbg !59
  %546 = bitcast i32 %545 to float, !dbg !59
  %547 = bitcast float %530 to i32, !dbg !59
  %548 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %547, i32 1, i32 31), !dbg !59
  %549 = bitcast i32 %548 to float, !dbg !59
  %550 = fsub float %543, %535, !dbg !61
  %551 = fadd float %530, %549, !dbg !63
  %552 = fcmp oeq float %551, 0.000000e+00, !dbg !64
  %553 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %549, float %551) #3, !dbg !65
  %554 = select i1 %552, float 0.000000e+00, float %553, !dbg !66
  %555 = fmul float %550, %554, !dbg !67
  %556 = fadd float %535, %555, !dbg !68
  %557 = fadd float %540, %546, !dbg !69
  %558 = fmul float %550, %550, !dbg !70
  %559 = fmul float %530, %558, !dbg !71
  %560 = fmul float %554, %559, !dbg !72
  %561 = fadd float %557, %560, !dbg !73
  %562 = and i32 %12, 15, !dbg !59
  %563 = icmp eq i32 %562, 0, !dbg !59
  %564 = and i1 %471, %563, !dbg !59
  %565 = bitcast float %556 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %565, i1 %564) #3, !dbg !59
  %566 = bitcast float %561 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %566, i1 %564) #3, !dbg !59
  %567 = bitcast float %551 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %567, i1 %564) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %568 = getelementptr float, ptr addrspace(3) @global_smem, i32 %463, !dbg !59
  %569 = load i32, ptr addrspace(3) %568, align 16, !dbg !59
  %570 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 512), i32 %463, !dbg !59
  %571 = load i32, ptr addrspace(3) %570, align 16, !dbg !59
  %572 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %463, !dbg !59
  %573 = load i32, ptr addrspace(3) %572, align 16, !dbg !59
  %574 = sext i32 %15 to i64, !dbg !74
  %575 = getelementptr float, ptr addrspace(1) %4, i64 %574, !dbg !74
  %576 = shl nuw nsw i32 %462, 2, !dbg !75
  %577 = or disjoint i32 %576, %460, !dbg !75
  %578 = icmp eq i32 %577, 0, !dbg !75
  %579 = and i1 %578, %18, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %569, ptr addrspace(1) %575, i1 %579) #3, !dbg !75
  %580 = getelementptr float, ptr addrspace(1) %5, i64 %574, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %571, ptr addrspace(1) %580, i1 %579) #3, !dbg !77
  %581 = getelementptr float, ptr addrspace(1) %6, i64 %574, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %573, ptr addrspace(1) %581, i1 %579) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py", directory: "inductor_cache/be")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 26, scope: !7)
!19 = !DILocation(line: 29, column: 31, scope: !7)
!20 = !DILocation(line: 29, column: 36, scope: !7)
!21 = !DILocation(line: 41, column: 42, scope: !7)
!22 = !DILocation(line: 54, column: 71, scope: !7)
!23 = !DILocation(line: 54, column: 65, scope: !7)
!24 = !DILocation(line: 63, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 27, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 41, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 34, scope: !7)
!31 = !DILocation(line: 41, column: 47, scope: !7)
!32 = !DILocation(line: 42, column: 34, scope: !7)
!33 = !DILocation(line: 42, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 39, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 39, scope: !7)
!37 = !DILocation(line: 54, column: 46, scope: !7)
!38 = !DILocation(line: 54, column: 43, scope: !7)
!39 = !DILocation(line: 54, column: 35, scope: !7)
!40 = !DILocation(line: 54, column: 76, scope: !7)
!41 = !DILocation(line: 55, column: 24, scope: !7)
!42 = !DILocation(line: 58, column: 66, scope: !7)
!43 = !DILocation(line: 178, column: 7, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 58, column: 55, scope: !7)
!47 = !DILocation(line: 183, column: 24, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 184, column: 30, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 185, column: 34, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 185, column: 26, scope: !44, inlinedAt: !46)
!51 = !DILocation(line: 186, column: 39, scope: !44, inlinedAt: !46)
!52 = !DILocation(line: 186, column: 31, scope: !44, inlinedAt: !46)
!53 = !DILocation(line: 186, column: 22, scope: !44, inlinedAt: !46)
!54 = !DILocation(line: 60, column: 54, scope: !7)
!55 = !DILocation(line: 61, column: 50, scope: !7)
!56 = !DILocation(line: 62, column: 58, scope: !7)
!57 = !DILocation(line: 63, column: 29, scope: !7)
!58 = !DILocation(line: 63, column: 52, scope: !7)
!59 = !DILocation(line: 204, column: 46, scope: !44, inlinedAt: !60)
!60 = !DILocation(line: 65, column: 44, scope: !7)
!61 = !DILocation(line: 192, column: 21, scope: !62, inlinedAt: !60)
!62 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!63 = !DILocation(line: 193, column: 28, scope: !62, inlinedAt: !60)
!64 = !DILocation(line: 194, column: 39, scope: !62, inlinedAt: !60)
!65 = !DILocation(line: 194, column: 60, scope: !62, inlinedAt: !60)
!66 = !DILocation(line: 194, column: 49, scope: !62, inlinedAt: !60)
!67 = !DILocation(line: 196, column: 25, scope: !62, inlinedAt: !60)
!68 = !DILocation(line: 196, column: 17, scope: !62, inlinedAt: !60)
!69 = !DILocation(line: 197, column: 15, scope: !62, inlinedAt: !60)
!70 = !DILocation(line: 197, column: 30, scope: !62, inlinedAt: !60)
!71 = !DILocation(line: 197, column: 38, scope: !62, inlinedAt: !60)
!72 = !DILocation(line: 197, column: 49, scope: !62, inlinedAt: !60)
!73 = !DILocation(line: 197, column: 22, scope: !62, inlinedAt: !60)
!74 = !DILocation(line: 70, column: 25, scope: !7)
!75 = !DILocation(line: 70, column: 37, scope: !7)
!76 = !DILocation(line: 71, column: 25, scope: !7)
!77 = !DILocation(line: 71, column: 37, scope: !7)
!78 = !DILocation(line: 72, column: 25, scope: !7)
!79 = !DILocation(line: 72, column: 37, scope: !7)
!80 = !DILocation(line: 72, column: 4, scope: !7)
