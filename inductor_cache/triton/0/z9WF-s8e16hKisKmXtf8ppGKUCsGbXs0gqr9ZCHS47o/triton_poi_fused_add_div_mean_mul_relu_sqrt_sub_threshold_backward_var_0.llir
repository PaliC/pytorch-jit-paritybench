; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sdiv i32 %12, 64, !dbg !17
  %17 = srem i32 %14, 4, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #3, !dbg !20
  %21 = shl nsw i32 %16, 6, !dbg !21
  %22 = add i32 %21, %.decomposed, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %13) #3, !dbg !24
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !24
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !24
  %28 = bitcast i32 %26 to float, !dbg !24
  %29 = bitcast i32 %27 to float, !dbg !24
  %30 = add i32 %22, 16, !dbg !25
  %31 = sext i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %13) #3, !dbg !27
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %36 = bitcast i32 %34 to float, !dbg !27
  %37 = bitcast i32 %35 to float, !dbg !27
  %38 = add i32 %22, 32, !dbg !28
  %39 = sext i32 %38 to i64, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !29
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %13) #3, !dbg !30
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !30
  %44 = bitcast i32 %42 to float, !dbg !30
  %45 = bitcast i32 %43 to float, !dbg !30
  %46 = add i32 %22, 48, !dbg !31
  %47 = sext i32 %46 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !32
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %13) #3, !dbg !33
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !33
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !33
  %52 = bitcast i32 %50 to float, !dbg !33
  %53 = bitcast i32 %51 to float, !dbg !33
  %54 = sext i32 %17 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #3, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %13) #3, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %13) #3, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %13) #3, !dbg !37
  %61 = fadd float %28, %36, !dbg !38
  %62 = fadd float %29, %37, !dbg !38
  %63 = fadd float %61, %44, !dbg !39
  %64 = fadd float %62, %45, !dbg !39
  %65 = fadd float %63, %52, !dbg !40
  %66 = fadd float %64, %53, !dbg !40
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 4.000000e+00) #3, !dbg !41
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 4.000000e+00) #3, !dbg !41
  %69 = fsub float %28, %67, !dbg !42
  %70 = fsub float %29, %68, !dbg !42
  %71 = fmul float %69, %69, !dbg !43
  %72 = fmul float %70, %70, !dbg !43
  %73 = fsub float %36, %67, !dbg !44
  %74 = fsub float %37, %68, !dbg !44
  %75 = fmul float %73, %73, !dbg !45
  %76 = fmul float %74, %74, !dbg !45
  %77 = fadd float %71, %75, !dbg !46
  %78 = fadd float %72, %76, !dbg !46
  %79 = fsub float %44, %67, !dbg !47
  %80 = fsub float %45, %68, !dbg !47
  %81 = fmul float %79, %79, !dbg !48
  %82 = fmul float %80, %80, !dbg !48
  %83 = fadd float %81, %77, !dbg !49
  %84 = fadd float %82, %78, !dbg !49
  %85 = fsub float %52, %67, !dbg !50
  %86 = fsub float %53, %68, !dbg !50
  %87 = fmul float %85, %85, !dbg !51
  %88 = fmul float %86, %86, !dbg !51
  %89 = fadd float %87, %83, !dbg !52
  %90 = fadd float %88, %84, !dbg !52
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 4.000000e+00) #3, !dbg !53
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 4.000000e+00) #3, !dbg !53
  %93 = fadd float %91, 0x3EE4F8B580000000, !dbg !54
  %94 = fadd float %92, 0x3EE4F8B580000000, !dbg !54
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %95, 0, !dbg !55
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %96, 0, !dbg !55
  br i1 %.not.i, label %102, label %97, !dbg !55

97:                                               ; preds = %6
  br i1 %.not1.i, label %100, label %98, !dbg !55

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

102:                                              ; preds = %6
  br i1 %.not1.i, label %105, label %103, !dbg !55

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !55
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i1 = icmp eq i32 %107, 0, !dbg !55
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i4 = icmp eq i32 %108, 0, !dbg !55
  br i1 %.not.i1, label %114, label %109, !dbg !55

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !55

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !55

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !55
  br label %__nv_sqrtf.exit5, !dbg !55

__nv_sqrtf.exit5:                                 ; preds = %110, %112, %115, %117
  %.0.i3 = phi float [ %111, %110 ], [ %113, %112 ], [ %116, %115 ], [ %118, %117 ], !dbg !55
  %119 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %120 = bitcast i32 %119 to float, !dbg !20
  %121 = fsub float %120, %68, !dbg !56
  %122 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %123 = bitcast i32 %122 to float, !dbg !20
  %124 = fsub float %123, %67, !dbg !56
  %125 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !37
  %126 = insertelement <2 x i32> %125, i32 %60, i64 1, !dbg !37
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !37
  %128 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !35
  %129 = insertelement <2 x i32> %128, i32 %57, i64 1, !dbg !35
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !35
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %.0.i) #3, !dbg !57
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %.0.i3) #3, !dbg !57
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !58
  %134 = getelementptr i1, ptr addrspace(1) %4, i64 %18, !dbg !59
  %135 = insertelement <2 x float> poison, float %131, i64 0, !dbg !60
  %136 = insertelement <2 x float> %135, float %132, i64 1, !dbg !60
  %137 = fmul <2 x float> %136, %130, !dbg !60
  %138 = fadd <2 x float> %137, %127, !dbg !61
  %139 = fcmp olt <2 x float> %138, zeroinitializer, !dbg !62
  %140 = select <2 x i1> %139, <2 x float> zeroinitializer, <2 x float> %138, !dbg !66
  %141 = fcmp ole <2 x float> %140, zeroinitializer, !dbg !67
  %bc = bitcast <2 x float> %140 to <2 x i32>, !dbg !68
  %142 = extractelement <2 x i32> %bc, i64 0, !dbg !68
  %bc6 = bitcast <2 x float> %140 to <2 x i32>, !dbg !68
  %143 = extractelement <2 x i32> %bc6, i64 1, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %133, i1 %13) #3, !dbg !68
  %144 = zext <2 x i1> %141 to <2 x i8>, !dbg !69
  %145 = bitcast <2 x i8> %144 to i16, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %145, ptr addrspace(1) %134, i1 %13) #3, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5muygypheghvsfku547iu3msjhe37gu7xbctit723hn4sbmbshm.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0", linkageName: "triton_poi_fused_add_div_mean_mul_relu_sqrt_sub_threshold_backward_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 38, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 43, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 40, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 48, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 19, scope: !7)
!43 = !DILocation(line: 42, column: 20, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 19, scope: !7)
!51 = !DILocation(line: 50, column: 20, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 52, column: 20, scope: !7)
!54 = !DILocation(line: 54, column: 20, scope: !7)
!55 = !DILocation(line: 55, column: 27, scope: !7)
!56 = !DILocation(line: 40, column: 19, scope: !7)
!57 = !DILocation(line: 56, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 28, scope: !7)
!59 = !DILocation(line: 64, column: 25, scope: !7)
!60 = !DILocation(line: 57, column: 20, scope: !7)
!61 = !DILocation(line: 58, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 60, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!67 = !DILocation(line: 62, column: 21, scope: !7)
!68 = !DILocation(line: 63, column: 40, scope: !7)
!69 = !DILocation(line: 64, column: 37, scope: !7)
!70 = !DILocation(line: 64, column: 4, scope: !7)
