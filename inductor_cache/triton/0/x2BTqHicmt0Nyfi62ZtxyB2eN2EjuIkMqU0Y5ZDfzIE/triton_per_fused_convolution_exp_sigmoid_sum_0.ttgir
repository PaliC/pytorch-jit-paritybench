#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0)
#loc1 = loc(unknown)
#loc21 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":39:24)
#loc33 = loc(callsite(#loc1 at #loc21))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_convolution_exp_sigmoid_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0), %arg3: i32 loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %9 = arith.addi %4, %7 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %10 = arith.addi %5, %8 : tensor<1x16xi32, #blocked> loc(#loc6)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %13 = tt.addptr %11, %9 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %15 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc8)
    %16 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %17 = tt.load %13, %15, %cst_1 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %18 = tt.load %14, %16, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %19 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %20 = tt.load %19 : !tt.ptr<f32> loc(#loc10)
    %21 = tt.splat %20 : f32 -> tensor<1x16xf32, #blocked1> loc(#loc11)
    %22 = tt.splat %20 : f32 -> tensor<1x16xf32, #blocked> loc(#loc11)
    %23 = arith.addf %17, %21 : tensor<1x16xf32, #blocked1> loc(#loc12)
    %24 = arith.addf %18, %22 : tensor<1x16xf32, #blocked> loc(#loc12)
    %25 = arith.subf %cst_1, %23 : tensor<1x16xf32, #blocked1> loc(#loc28)
    %26 = math.exp %25 : tensor<1x16xf32, #blocked1> loc(#loc29)
    %27 = arith.addf %26, %cst_0 : tensor<1x16xf32, #blocked1> loc(#loc30)
    %28 = arith.divf %cst_0, %27 : tensor<1x16xf32, #blocked1> loc(#loc31)
    %29 = math.exp %28 : tensor<1x16xf32, #blocked1> loc(#loc18)
    %30 = arith.select %15, %29, %cst_1 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc19)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc21)), %arg6: f32 loc(callsite(#loc1 at #loc21))):
      %36 = arith.addf %arg5, %arg6 : f32 loc(#loc35)
      tt.reduce.return %36 : f32 loc(#loc32)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc32)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc23)
    tt.store %14, %24, %16 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc24)
    %33 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc25)
    %34 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %35 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc26)
    tt.store %34, %32, %35 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":23:28)
#loc3 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":25:21)
#loc4 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":26:34)
#loc5 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":31:42)
#loc6 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":31:39)
#loc7 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":31:34)
#loc8 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":31:47)
#loc9 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":32:30)
#loc10 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":32:19)
#loc11 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":33:33)
#loc12 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":34:18)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc14 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":35:22)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc18 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":36:23)
#loc19 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":38:33)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc23 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":39:27)
#loc24 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":40:47)
#loc25 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":41:25)
#loc26 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":41:36)
#loc27 = loc("inductor_cache/tu/ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py":41:4)
#loc28 = loc(callsite(#loc13 at #loc14))
#loc29 = loc(callsite(#loc15 at #loc14))
#loc30 = loc(callsite(#loc16 at #loc14))
#loc31 = loc(callsite(#loc17 at #loc14))
#loc32 = loc(callsite(#loc20 at #loc21))
#loc34 = loc(callsite(#loc22 at #loc20))
#loc35 = loc(callsite(#loc34 at #loc21))
