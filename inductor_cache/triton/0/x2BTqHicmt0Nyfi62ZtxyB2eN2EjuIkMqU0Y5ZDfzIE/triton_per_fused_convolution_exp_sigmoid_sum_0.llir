; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_convolution_exp_sigmoid_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %6, 4, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #2, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = fadd float %15, %19, !dbg !18
  %21 = fadd float %17, %19, !dbg !18
  %22 = fsub float 0.000000e+00, %20, !dbg !19
  %23 = fmul float %22, 0x3FF7154760000000, !dbg !23
  %24 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %23) #2, !dbg !23
  %25 = fadd float %24, 1.000000e+00, !dbg !24
  %26 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %25) #2, !dbg !25
  %27 = fmul float %26, 0x3FF7154760000000, !dbg !26
  %28 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %27) #2, !dbg !26
  %29 = select i1 %7, float %28, float 0.000000e+00, !dbg !27
  %30 = bitcast float %29 to i32, !dbg !28
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !28
  %32 = bitcast i32 %31 to float, !dbg !28
  %33 = fadd float %29, %32, !dbg !30
  %34 = bitcast float %33 to i32, !dbg !28
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = fadd float %33, %36, !dbg !30
  %38 = bitcast float %37 to i32, !dbg !28
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = fadd float %37, %40, !dbg !30
  %42 = bitcast float %41 to i32, !dbg !28
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = fadd float %41, %44, !dbg !30
  %46 = and i32 %8, 48, !dbg !32
  %47 = icmp eq i32 %46, 0, !dbg !32
  %48 = bitcast float %21 to i32, !dbg !32
  %49 = and i1 %47, %7, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %48, ptr addrspace(1) %13, i1 %49) #2, !dbg !32
  %50 = sext i32 %6 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !33
  %urem = and i32 %8, 63, !dbg !34
  %52 = icmp eq i32 %urem, 0, !dbg !34
  %53 = bitcast float %45 to i32, !dbg !34
  %54 = and i1 %52, %7, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %53, ptr addrspace(1) %51, i1 %54) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctunshif6dy52jlpptptxzxnqrw4gdoi7uhwtvtcsxahxfno37as.py", directory: "inductor_cache/tu")
!4 = !{ptr @triton_per_fused_convolution_exp_sigmoid_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_exp_sigmoid_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_exp_sigmoid_sum_0", linkageName: "triton_per_fused_convolution_exp_sigmoid_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 42, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 47, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 47, column: 30, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = !DILocation(line: 35, column: 22, scope: !7)
!23 = !DILocation(line: 47, column: 29, scope: !20, inlinedAt: !22)
!24 = !DILocation(line: 47, column: 20, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 47, column: 16, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 36, column: 23, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!32 = !DILocation(line: 40, column: 47, scope: !7)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 41, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 4, scope: !7)
