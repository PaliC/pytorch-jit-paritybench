; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 48, !dbg !14
  %12 = mul i32 %11, 48, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = icmp slt i32 %.decomposed, 24, !dbg !16
  %14 = mul nsw i32 %11, 24, !dbg !17
  %15 = add nsw i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #1, !dbg !20
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !20
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !20
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !20
  %23 = sext i32 %.decomposed to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #1, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %30 = insertelement <4 x i32> poison, i32 %22, i64 0, !dbg !20
  %31 = insertelement <4 x i32> %30, i32 %21, i64 1, !dbg !20
  %32 = insertelement <4 x i32> %31, i32 %20, i64 2, !dbg !20
  %33 = insertelement <4 x i32> %32, i32 %19, i64 3, !dbg !20
  %34 = bitcast <4 x i32> %33 to <4 x float>, !dbg !20
  %35 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !22
  %36 = insertelement <4 x i32> %35, i32 %28, i64 1, !dbg !22
  %37 = insertelement <4 x i32> %36, i32 %27, i64 2, !dbg !22
  %38 = insertelement <4 x i32> %37, i32 %26, i64 3, !dbg !22
  %39 = bitcast <4 x i32> %38 to <4 x float>, !dbg !22
  %40 = fadd <4 x float> %34, %39, !dbg !23
  %41 = fcmp olt <4 x float> %40, zeroinitializer, !dbg !24
  %42 = extractelement <4 x i1> %41, i64 3, !dbg !28
  %43 = extractelement <4 x float> %40, i64 3, !dbg !28
  %44 = select i1 %42, float 0.000000e+00, float %43, !dbg !28
  %45 = extractelement <4 x i1> %41, i64 2, !dbg !28
  %46 = extractelement <4 x float> %40, i64 2, !dbg !28
  %47 = select i1 %45, float 0.000000e+00, float %46, !dbg !28
  %48 = extractelement <4 x i1> %41, i64 1, !dbg !28
  %49 = extractelement <4 x float> %40, i64 1, !dbg !28
  %50 = select i1 %48, float 0.000000e+00, float %49, !dbg !28
  %51 = extractelement <4 x i1> %41, i64 0, !dbg !28
  %52 = extractelement <4 x float> %40, i64 0, !dbg !28
  %53 = select i1 %51, float 0.000000e+00, float %52, !dbg !28
  %54 = icmp sgt i32 %.decomposed, 23, !dbg !29
  %55 = add nsw i32 %.decomposed, -24, !dbg !30
  %56 = add nsw i32 %14, %55, !dbg !31
  %57 = sext i32 %56 to i64, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !32
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !33
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !33
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !33
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !33
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !33
  %64 = sext i32 %55 to i64, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !34
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !35
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !35
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !35
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !35
  %71 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !33
  %72 = insertelement <4 x i32> %71, i32 %62, i64 1, !dbg !33
  %73 = insertelement <4 x i32> %72, i32 %61, i64 2, !dbg !33
  %74 = insertelement <4 x i32> %73, i32 %60, i64 3, !dbg !33
  %75 = bitcast <4 x i32> %74 to <4 x float>, !dbg !33
  %76 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !35
  %77 = insertelement <4 x i32> %76, i32 %69, i64 1, !dbg !35
  %78 = insertelement <4 x i32> %77, i32 %68, i64 2, !dbg !35
  %79 = insertelement <4 x i32> %78, i32 %67, i64 3, !dbg !35
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !35
  %81 = fadd <4 x float> %75, %80, !dbg !36
  %82 = fsub <4 x float> zeroinitializer, %81, !dbg !37
  %83 = fcmp olt <4 x float> %82, zeroinitializer, !dbg !38
  %84 = extractelement <4 x i1> %83, i64 3, !dbg !40
  %85 = extractelement <4 x float> %82, i64 3, !dbg !40
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !40
  %87 = extractelement <4 x i1> %83, i64 2, !dbg !40
  %88 = extractelement <4 x float> %82, i64 2, !dbg !40
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !40
  %90 = extractelement <4 x i1> %83, i64 1, !dbg !40
  %91 = extractelement <4 x float> %82, i64 1, !dbg !40
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !40
  %93 = extractelement <4 x i1> %83, i64 0, !dbg !40
  %94 = extractelement <4 x float> %82, i64 0, !dbg !40
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !40
  %96 = select i1 %13, float %44, float %86, !dbg !41
  %97 = select i1 %13, float %47, float %89, !dbg !41
  %98 = select i1 %13, float %50, float %92, !dbg !41
  %99 = select i1 %13, float %53, float %95, !dbg !41
  %100 = sext i32 %10 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !42
  %102 = bitcast float %96 to i32, !dbg !43
  %103 = bitcast float %97 to i32, !dbg !43
  %104 = bitcast float %98 to i32, !dbg !43
  %105 = bitcast float %99 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %103, i32 %104, i32 %105, ptr addrspace(1) %101, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfdfw5elubc4xwnooqwg5pjuismtzfzudza2zaou2pktw56f2klz.py", directory: "inductor_cache/fd")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 42, column: 48, scope: !7)
!31 = !DILocation(line: 42, column: 40, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 42, column: 54, scope: !7)
!34 = !DILocation(line: 43, column: 31, scope: !7)
!35 = !DILocation(line: 43, column: 44, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 13, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !39)
!39 = !DILocation(line: 47, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !39)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 51, column: 25, scope: !7)
!43 = !DILocation(line: 51, column: 37, scope: !7)
!44 = !DILocation(line: 51, column: 4, scope: !7)
