; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_sub_23(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 4, !dbg !12
  %11 = and i32 %7, 7, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 32, !dbg !14
  %15 = icmp slt i32 %13, 32, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = shl i32 %7, 4, !dbg !16
  %18 = and i32 %17, 2016, !dbg !16
  %19 = add i32 %12, %18, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = select i1 %14, float %27, float 0.000000e+00, !dbg !20
  %32 = select i1 %14, float %28, float 0.000000e+00, !dbg !20
  %33 = select i1 %14, float %29, float 0.000000e+00, !dbg !20
  %34 = select i1 %14, float %30, float 0.000000e+00, !dbg !20
  %35 = bitcast float %31 to i32, !dbg !21
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = fadd float %31, %37, !dbg !25
  %39 = bitcast float %38 to i32, !dbg !21
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !21
  %41 = bitcast i32 %40 to float, !dbg !21
  %42 = fadd float %38, %41, !dbg !25
  %43 = bitcast float %42 to i32, !dbg !21
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = fadd float %42, %45, !dbg !25
  %47 = bitcast float %46 to i32, !dbg !21
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = fadd float %46, %49, !dbg !25
  %51 = bitcast float %32 to i32, !dbg !21
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !21
  %53 = bitcast i32 %52 to float, !dbg !21
  %54 = fadd float %32, %53, !dbg !25
  %55 = bitcast float %54 to i32, !dbg !21
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !21
  %57 = bitcast i32 %56 to float, !dbg !21
  %58 = fadd float %54, %57, !dbg !25
  %59 = bitcast float %58 to i32, !dbg !21
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !21
  %61 = bitcast i32 %60 to float, !dbg !21
  %62 = fadd float %58, %61, !dbg !25
  %63 = bitcast float %62 to i32, !dbg !21
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !21
  %65 = bitcast i32 %64 to float, !dbg !21
  %66 = fadd float %62, %65, !dbg !25
  %67 = bitcast float %33 to i32, !dbg !21
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !21
  %69 = bitcast i32 %68 to float, !dbg !21
  %70 = fadd float %33, %69, !dbg !25
  %71 = bitcast float %70 to i32, !dbg !21
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !21
  %73 = bitcast i32 %72 to float, !dbg !21
  %74 = fadd float %70, %73, !dbg !25
  %75 = bitcast float %74 to i32, !dbg !21
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !21
  %77 = bitcast i32 %76 to float, !dbg !21
  %78 = fadd float %74, %77, !dbg !25
  %79 = bitcast float %78 to i32, !dbg !21
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !21
  %81 = bitcast i32 %80 to float, !dbg !21
  %82 = fadd float %78, %81, !dbg !25
  %83 = bitcast float %34 to i32, !dbg !21
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !21
  %85 = bitcast i32 %84 to float, !dbg !21
  %86 = fadd float %34, %85, !dbg !25
  %87 = bitcast float %86 to i32, !dbg !21
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !21
  %89 = bitcast i32 %88 to float, !dbg !21
  %90 = fadd float %86, %89, !dbg !25
  %91 = bitcast float %90 to i32, !dbg !21
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !21
  %93 = bitcast i32 %92 to float, !dbg !21
  %94 = fadd float %90, %93, !dbg !25
  %95 = bitcast float %94 to i32, !dbg !21
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !21
  %97 = bitcast i32 %96 to float, !dbg !21
  %98 = fadd float %94, %97, !dbg !25
  %99 = icmp samesign ult i32 %8, 2, !dbg !21
  %100 = and i32 %16, 3, !dbg !21
  %101 = shl nuw nsw i32 %10, 2, !dbg !21
  %102 = or disjoint i32 %101, %100, !dbg !21
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !21
  %104 = bitcast float %50 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %99) #3, !dbg !21
  %105 = or disjoint i32 %101, 4, !dbg !21
  %106 = or disjoint i32 %105, %100, !dbg !21
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !21
  %108 = bitcast float %66 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %99) #3, !dbg !21
  %109 = or disjoint i32 %101, 8, !dbg !21
  %110 = or disjoint i32 %109, %100, !dbg !21
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !21
  %112 = bitcast float %82 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 %99) #3, !dbg !21
  %113 = or disjoint i32 %101, 12, !dbg !21
  %114 = or disjoint i32 %113, %100, !dbg !21
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !21
  %116 = bitcast float %98 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 %99) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %117 = icmp slt i32 %7, 32, !dbg !21
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !21
  %119 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %118, i1 %117) #3, !dbg !21
  %120 = bitcast i32 %119 to float, !dbg !21
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !21
  %122 = bitcast i32 %121 to float, !dbg !21
  %123 = fadd float %120, %122, !dbg !25
  %124 = bitcast float %123 to i32, !dbg !21
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !21
  %126 = bitcast i32 %125 to float, !dbg !21
  %127 = fadd float %123, %126, !dbg !25
  %128 = and i32 %7, 3, !dbg !21
  %129 = icmp eq i32 %128, 0, !dbg !21
  %130 = and i1 %117, %129, !dbg !21
  %131 = bitcast float %127 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %131, i1 %130) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !21
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !21
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !21
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !21
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !21
  %137 = load i32, ptr addrspace(3) %136, align 16, !dbg !21
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !21
  %139 = load i32, ptr addrspace(3) %138, align 16, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %140, i32 %133, i32 %135, i32 %137, i32 %139, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !27
  %142 = load i32, ptr addrspace(3) %141, align 4, !dbg !27
  %143 = sext i32 %13 to i64, !dbg !28
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !28
  %145 = lshr i32 %8, 3, !dbg !29
  %146 = shl nuw nsw i32 %100, 2, !dbg !29
  %147 = or disjoint i32 %146, %145, !dbg !29
  %148 = icmp eq i32 %147, 0, !dbg !29
  %149 = and i1 %148, %15, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %144, i1 %149) #3, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnnkgj5k3ikpvf4rwu3eyrsllx43cwrokyebxcube4rgrc37gsr7.py", directory: "inductor_cache/nn")
!4 = !{ptr @triton_per_fused_abs_mean_sub_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_sub_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_sub_23", linkageName: "triton_per_fused_abs_mean_sub_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 34, column: 24, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !24)
!26 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!27 = !DILocation(line: 34, column: 27, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
