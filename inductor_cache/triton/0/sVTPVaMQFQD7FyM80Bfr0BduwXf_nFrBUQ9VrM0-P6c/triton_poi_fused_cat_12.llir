; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, i32 %26) local_unnamed_addr !dbg !7 {
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %29 = shl i32 %28, 8, !dbg !11
  %30 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %31 = shl i32 %30, 1, !dbg !12
  %32 = and i32 %31, 254, !dbg !12
  %33 = or disjoint i32 %29, %32, !dbg !13
  %34 = icmp slt i32 %33, 1280, !dbg !14
  %.frozen = freeze i32 %33, !dbg !15
  %35 = sdiv i32 %.frozen, 16, !dbg !15
  %36 = srem i32 %35, 20, !dbg !16
  %37 = mul i32 %35, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %37, !dbg !17
  %.frozen46 = freeze i32 %33, !dbg !18
  %38 = sdiv i32 %.frozen46, 320, !dbg !18
  %39 = icmp slt i32 %36, 4, !dbg !19
  %40 = mul i32 %38, 320, !dbg !20
  %srem.decomposed = sub i32 %.frozen46, %40, !dbg !20
  %41 = shl nsw i32 %38, 6, !dbg !21
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !22
  %43 = sext i32 %42 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = and i1 %34, %39, !dbg !24
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #3, !dbg !25
  %47 = sext i32 %36 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %45, i32 0, i1 %45) #3, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %45, i32 0, i1 %45) #3, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %45, i32 0, i1 %45) #3, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %45, i32 0, i1 %45) #3, !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = fadd float %53, 0x3EE4F8B580000000, !dbg !30
  %57 = fadd float %55, 0x3EE4F8B580000000, !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %58, 0, !dbg !31
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %59, 0, !dbg !31
  br i1 %.not.i, label %65, label %60, !dbg !31

60:                                               ; preds = %27
  br i1 %.not1.i, label %63, label %61, !dbg !31

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

65:                                               ; preds = %27
  br i1 %.not1.i, label %68, label %66, !dbg !31

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %70, 0, !dbg !31
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !31
  br i1 %.not.i1, label %77, label %72, !dbg !31

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !31

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !31

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !31
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %45, i32 0, i1 %45) #3, !dbg !34
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %45, i32 0, i1 %45) #3, !dbg !34
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !35
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %45, i32 0, i1 %45) #3, !dbg !36
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %45, i32 0, i1 %45) #3, !dbg !36
  %90 = and i32 %36, -4, !dbg !37
  %91 = icmp eq i32 %90, 4, !dbg !37
  %92 = add nsw i32 %36, -4, !dbg !38
  %93 = shl nsw i32 %92, 4, !dbg !39
  %94 = add nsw i32 %41, %.decomposed, !dbg !40
  %95 = add nsw i32 %94, %93, !dbg !41
  %96 = sext i32 %95 to i64, !dbg !42
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !42
  %98 = and i1 %34, %91, !dbg !43
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #3, !dbg !44
  %100 = sext i32 %92 to i64, !dbg !45
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !45
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %98, i32 0, i1 %98) #3, !dbg !46
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %98, i32 0, i1 %98) #3, !dbg !46
  %104 = getelementptr float, ptr addrspace(1) %7, i64 %100, !dbg !47
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %98, i32 0, i1 %98) #3, !dbg !48
  %106 = bitcast i32 %105 to float, !dbg !48
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %98, i32 0, i1 %98) #3, !dbg !48
  %108 = bitcast i32 %107 to float, !dbg !48
  %109 = fadd float %106, 0x3EE4F8B580000000, !dbg !49
  %110 = fadd float %108, 0x3EE4F8B580000000, !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i6 = icmp eq i32 %111, 0, !dbg !50
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i9 = icmp eq i32 %112, 0, !dbg !50
  br i1 %.not.i6, label %118, label %113, !dbg !50

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !50

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !50

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !50
  br label %__nv_sqrtf.exit10, !dbg !50

__nv_sqrtf.exit10:                                ; preds = %114, %116, %119, %121
  %.0.i8 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !50
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i11 = icmp eq i32 %123, 0, !dbg !50
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i14 = icmp eq i32 %124, 0, !dbg !50
  br i1 %.not.i11, label %130, label %125, !dbg !50

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !50

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

130:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %133, label %131, !dbg !50

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !50
  br label %__nv_sqrtf.exit15, !dbg !50

__nv_sqrtf.exit15:                                ; preds = %126, %128, %131, %133
  %.0.i13 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !50
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !51
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !51
  %137 = getelementptr float, ptr addrspace(1) %8, i64 %100, !dbg !52
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %98, i32 0, i1 %98) #3, !dbg !53
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %98, i32 0, i1 %98) #3, !dbg !53
  %140 = getelementptr float, ptr addrspace(1) %9, i64 %100, !dbg !54
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %98, i32 0, i1 %98) #3, !dbg !55
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %98, i32 0, i1 %98) #3, !dbg !55
  %143 = icmp eq i32 %90, 8, !dbg !56
  %144 = add nsw i32 %36, -8, !dbg !57
  %145 = shl nsw i32 %144, 4, !dbg !58
  %146 = add nsw i32 %94, %145, !dbg !59
  %147 = sext i32 %146 to i64, !dbg !60
  %148 = getelementptr float, ptr addrspace(1) %10, i64 %147, !dbg !60
  %149 = and i1 %34, %143, !dbg !61
  %150 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %148, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #3, !dbg !62
  %151 = sext i32 %144 to i64, !dbg !63
  %152 = getelementptr float, ptr addrspace(1) %11, i64 %151, !dbg !63
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %149, i32 0, i1 %149) #3, !dbg !64
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %149, i32 0, i1 %149) #3, !dbg !64
  %155 = getelementptr float, ptr addrspace(1) %12, i64 %151, !dbg !65
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %149, i32 0, i1 %149) #3, !dbg !66
  %157 = bitcast i32 %156 to float, !dbg !66
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %149, i32 0, i1 %149) #3, !dbg !66
  %159 = bitcast i32 %158 to float, !dbg !66
  %160 = fadd float %157, 0x3EE4F8B580000000, !dbg !67
  %161 = fadd float %159, 0x3EE4F8B580000000, !dbg !67
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i16 = icmp eq i32 %162, 0, !dbg !68
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i19 = icmp eq i32 %163, 0, !dbg !68
  br i1 %.not.i16, label %169, label %164, !dbg !68

164:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %167, label %165, !dbg !68

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

169:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %172, label %170, !dbg !68

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !68
  br label %__nv_sqrtf.exit20, !dbg !68

__nv_sqrtf.exit20:                                ; preds = %165, %167, %170, %172
  %.0.i18 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !68
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i21 = icmp eq i32 %174, 0, !dbg !68
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i24 = icmp eq i32 %175, 0, !dbg !68
  br i1 %.not.i21, label %181, label %176, !dbg !68

176:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %179, label %177, !dbg !68

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

181:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %184, label %182, !dbg !68

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !68
  br label %__nv_sqrtf.exit25, !dbg !68

__nv_sqrtf.exit25:                                ; preds = %177, %179, %182, %184
  %.0.i23 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !68
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !69
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !69
  %188 = getelementptr float, ptr addrspace(1) %13, i64 %151, !dbg !70
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %149, i32 0, i1 %149) #3, !dbg !71
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %149, i32 0, i1 %149) #3, !dbg !71
  %191 = getelementptr float, ptr addrspace(1) %14, i64 %151, !dbg !72
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %149, i32 0, i1 %149) #3, !dbg !73
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %149, i32 0, i1 %149) #3, !dbg !73
  %194 = icmp eq i32 %90, 12, !dbg !74
  %195 = add nsw i32 %36, -12, !dbg !75
  %196 = shl nsw i32 %195, 4, !dbg !76
  %197 = add nsw i32 %94, %196, !dbg !77
  %198 = sext i32 %197 to i64, !dbg !78
  %199 = getelementptr float, ptr addrspace(1) %15, i64 %198, !dbg !78
  %200 = and i1 %34, %194, !dbg !79
  %201 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %199, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #3, !dbg !80
  %202 = sext i32 %195 to i64, !dbg !81
  %203 = getelementptr float, ptr addrspace(1) %16, i64 %202, !dbg !81
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %200, i32 0, i1 %200) #3, !dbg !82
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %200, i32 0, i1 %200) #3, !dbg !82
  %206 = getelementptr float, ptr addrspace(1) %17, i64 %202, !dbg !83
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %200, i32 0, i1 %200) #3, !dbg !84
  %208 = bitcast i32 %207 to float, !dbg !84
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %200, i32 0, i1 %200) #3, !dbg !84
  %210 = bitcast i32 %209 to float, !dbg !84
  %211 = fadd float %208, 0x3EE4F8B580000000, !dbg !85
  %212 = fadd float %210, 0x3EE4F8B580000000, !dbg !85
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i26 = icmp eq i32 %213, 0, !dbg !86
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i29 = icmp eq i32 %214, 0, !dbg !86
  br i1 %.not.i26, label %220, label %215, !dbg !86

215:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %218, label %216, !dbg !86

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !86
  br label %__nv_sqrtf.exit30, !dbg !86

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !86
  br label %__nv_sqrtf.exit30, !dbg !86

220:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %223, label %221, !dbg !86

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !86
  br label %__nv_sqrtf.exit30, !dbg !86

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !86
  br label %__nv_sqrtf.exit30, !dbg !86

__nv_sqrtf.exit30:                                ; preds = %216, %218, %221, %223
  %.0.i28 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !86
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !86
  %.not.i31 = icmp eq i32 %225, 0, !dbg !86
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !86
  %.not1.i34 = icmp eq i32 %226, 0, !dbg !86
  br i1 %.not.i31, label %232, label %227, !dbg !86

227:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %230, label %228, !dbg !86

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !86
  br label %__nv_sqrtf.exit35, !dbg !86

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !86
  br label %__nv_sqrtf.exit35, !dbg !86

232:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %235, label %233, !dbg !86

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !86
  br label %__nv_sqrtf.exit35, !dbg !86

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !86
  br label %__nv_sqrtf.exit35, !dbg !86

__nv_sqrtf.exit35:                                ; preds = %228, %230, %233, %235
  %.0.i33 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !86
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !87
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !87
  %239 = getelementptr float, ptr addrspace(1) %18, i64 %202, !dbg !88
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %200, i32 0, i1 %200) #3, !dbg !89
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %200, i32 0, i1 %200) #3, !dbg !89
  %242 = getelementptr float, ptr addrspace(1) %19, i64 %202, !dbg !90
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %200, i32 0, i1 %200) #3, !dbg !91
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %200, i32 0, i1 %200) #3, !dbg !91
  %245 = icmp sgt i32 %36, 15, !dbg !92
  %246 = add nsw i32 %36, -16, !dbg !93
  %247 = shl nsw i32 %246, 4, !dbg !94
  %248 = add nsw i32 %94, %247, !dbg !95
  %249 = sext i32 %248 to i64, !dbg !96
  %250 = getelementptr float, ptr addrspace(1) %20, i64 %249, !dbg !96
  %251 = and i1 %34, %245, !dbg !97
  %252 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %250, i1 %251, i32 0, i1 %251, i32 0, i1 %251) #3, !dbg !98
  %253 = sext i32 %246 to i64, !dbg !99
  %254 = getelementptr float, ptr addrspace(1) %21, i64 %253, !dbg !99
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %251, i32 0, i1 %251) #3, !dbg !100
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %254, i1 %251, i32 0, i1 %251) #3, !dbg !100
  %257 = getelementptr float, ptr addrspace(1) %22, i64 %253, !dbg !101
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %251, i32 0, i1 %251) #3, !dbg !102
  %259 = bitcast i32 %258 to float, !dbg !102
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %257, i1 %251, i32 0, i1 %251) #3, !dbg !102
  %261 = bitcast i32 %260 to float, !dbg !102
  %262 = fadd float %259, 0x3EE4F8B580000000, !dbg !103
  %263 = fadd float %261, 0x3EE4F8B580000000, !dbg !103
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !104
  %.not.i36 = icmp eq i32 %264, 0, !dbg !104
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !104
  %.not1.i39 = icmp eq i32 %265, 0, !dbg !104
  br i1 %.not.i36, label %271, label %266, !dbg !104

266:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %269, label %267, !dbg !104

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %262) #3, !dbg !104
  br label %__nv_sqrtf.exit40, !dbg !104

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %262) #3, !dbg !104
  br label %__nv_sqrtf.exit40, !dbg !104

271:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %274, label %272, !dbg !104

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %262) #3, !dbg !104
  br label %__nv_sqrtf.exit40, !dbg !104

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %262) #3, !dbg !104
  br label %__nv_sqrtf.exit40, !dbg !104

__nv_sqrtf.exit40:                                ; preds = %267, %269, %272, %274
  %.0.i38 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !104
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !104
  %.not.i41 = icmp eq i32 %276, 0, !dbg !104
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !104
  %.not1.i44 = icmp eq i32 %277, 0, !dbg !104
  br i1 %.not.i41, label %283, label %278, !dbg !104

278:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %281, label %279, !dbg !104

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %263) #3, !dbg !104
  br label %__nv_sqrtf.exit45, !dbg !104

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %263) #3, !dbg !104
  br label %__nv_sqrtf.exit45, !dbg !104

283:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %286, label %284, !dbg !104

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %263) #3, !dbg !104
  br label %__nv_sqrtf.exit45, !dbg !104

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %263) #3, !dbg !104
  br label %__nv_sqrtf.exit45, !dbg !104

__nv_sqrtf.exit45:                                ; preds = %279, %281, %284, %286
  %.0.i43 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !104
  %288 = extractvalue { i32, i32 } %252, 1, !dbg !98
  %289 = insertelement <8 x i32> poison, i32 %256, i64 0, !dbg !100
  %290 = insertelement <8 x i32> %289, i32 %255, i64 1, !dbg !100
  %291 = insertelement <8 x i32> %290, i32 %49, i64 2, !dbg !100
  %292 = insertelement <8 x i32> %291, i32 %50, i64 3, !dbg !100
  %293 = insertelement <8 x i32> %292, i32 %102, i64 4, !dbg !100
  %294 = insertelement <8 x i32> %293, i32 %103, i64 5, !dbg !100
  %295 = insertelement <8 x i32> %294, i32 %153, i64 6, !dbg !100
  %296 = insertelement <8 x i32> %295, i32 %154, i64 7, !dbg !100
  %297 = bitcast <8 x i32> %296 to <8 x float>, !dbg !100
  %298 = extractvalue { i32, i32 } %252, 0, !dbg !98
  %299 = extractvalue { i32, i32 } %201, 1, !dbg !80
  %300 = bitcast i32 %299 to float, !dbg !80
  %301 = bitcast i32 %205 to float, !dbg !82
  %302 = fsub float %300, %301, !dbg !105
  %303 = fmul float %302, %238, !dbg !106
  %304 = bitcast i32 %241 to float, !dbg !89
  %305 = fmul float %303, %304, !dbg !107
  %306 = bitcast i32 %244 to float, !dbg !91
  %307 = fadd float %305, %306, !dbg !108
  %308 = fcmp olt float %307, 0.000000e+00, !dbg !109
  %309 = select i1 %308, float 0.000000e+00, float %307, !dbg !113
  %310 = extractvalue { i32, i32 } %201, 0, !dbg !80
  %311 = bitcast i32 %310 to float, !dbg !80
  %312 = bitcast i32 %204 to float, !dbg !82
  %313 = fsub float %311, %312, !dbg !105
  %314 = fmul float %313, %237, !dbg !106
  %315 = bitcast i32 %240 to float, !dbg !89
  %316 = fmul float %314, %315, !dbg !107
  %317 = bitcast i32 %243 to float, !dbg !91
  %318 = fadd float %316, %317, !dbg !108
  %319 = fcmp olt float %318, 0.000000e+00, !dbg !109
  %320 = select i1 %319, float 0.000000e+00, float %318, !dbg !113
  %321 = extractvalue { i32, i32 } %150, 1, !dbg !62
  %322 = extractvalue { i32, i32 } %150, 0, !dbg !62
  %323 = extractvalue { i32, i32 } %99, 1, !dbg !44
  %324 = extractvalue { i32, i32 } %99, 0, !dbg !44
  %325 = extractvalue { i32, i32 } %46, 1, !dbg !25
  %326 = extractvalue { i32, i32 } %46, 0, !dbg !25
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !114
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !114
  %329 = getelementptr float, ptr addrspace(1) %23, i64 %253, !dbg !115
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %251, i32 0, i1 %251) #3, !dbg !116
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %251, i32 0, i1 %251) #3, !dbg !116
  %332 = getelementptr float, ptr addrspace(1) %24, i64 %253, !dbg !117
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %251, i32 0, i1 %251) #3, !dbg !118
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %332, i1 %251, i32 0, i1 %251) #3, !dbg !118
  %335 = insertelement <8 x i32> poison, i32 %288, i64 0, !dbg !98
  %336 = insertelement <8 x i32> %335, i32 %298, i64 1, !dbg !98
  %337 = insertelement <8 x i32> %336, i32 %326, i64 2, !dbg !98
  %338 = insertelement <8 x i32> %337, i32 %325, i64 3, !dbg !98
  %339 = insertelement <8 x i32> %338, i32 %324, i64 4, !dbg !98
  %340 = insertelement <8 x i32> %339, i32 %323, i64 5, !dbg !98
  %341 = insertelement <8 x i32> %340, i32 %322, i64 6, !dbg !98
  %342 = insertelement <8 x i32> %341, i32 %321, i64 7, !dbg !98
  %343 = bitcast <8 x i32> %342 to <8 x float>, !dbg !98
  %344 = fsub <8 x float> %343, %297, !dbg !119
  %345 = insertelement <8 x float> poison, float %328, i64 0, !dbg !120
  %346 = insertelement <8 x float> %345, float %327, i64 1, !dbg !120
  %347 = insertelement <8 x float> %346, float %82, i64 2, !dbg !120
  %348 = insertelement <8 x float> %347, float %83, i64 3, !dbg !120
  %349 = insertelement <8 x float> %348, float %135, i64 4, !dbg !120
  %350 = insertelement <8 x float> %349, float %136, i64 5, !dbg !120
  %351 = insertelement <8 x float> %350, float %186, i64 6, !dbg !120
  %352 = insertelement <8 x float> %351, float %187, i64 7, !dbg !120
  %353 = fmul <8 x float> %344, %352, !dbg !120
  %354 = insertelement <8 x i32> poison, i32 %331, i64 0, !dbg !116
  %355 = insertelement <8 x i32> %354, i32 %330, i64 1, !dbg !116
  %356 = insertelement <8 x i32> %355, i32 %85, i64 2, !dbg !116
  %357 = insertelement <8 x i32> %356, i32 %86, i64 3, !dbg !116
  %358 = insertelement <8 x i32> %357, i32 %138, i64 4, !dbg !116
  %359 = insertelement <8 x i32> %358, i32 %139, i64 5, !dbg !116
  %360 = insertelement <8 x i32> %359, i32 %189, i64 6, !dbg !116
  %361 = insertelement <8 x i32> %360, i32 %190, i64 7, !dbg !116
  %362 = bitcast <8 x i32> %361 to <8 x float>, !dbg !116
  %363 = fmul <8 x float> %353, %362, !dbg !121
  %364 = insertelement <8 x i32> poison, i32 %334, i64 0, !dbg !118
  %365 = insertelement <8 x i32> %364, i32 %333, i64 1, !dbg !118
  %366 = insertelement <8 x i32> %365, i32 %88, i64 2, !dbg !118
  %367 = insertelement <8 x i32> %366, i32 %89, i64 3, !dbg !118
  %368 = insertelement <8 x i32> %367, i32 %141, i64 4, !dbg !118
  %369 = insertelement <8 x i32> %368, i32 %142, i64 5, !dbg !118
  %370 = insertelement <8 x i32> %369, i32 %192, i64 6, !dbg !118
  %371 = insertelement <8 x i32> %370, i32 %193, i64 7, !dbg !118
  %372 = bitcast <8 x i32> %371 to <8 x float>, !dbg !118
  %373 = fadd <8 x float> %363, %372, !dbg !122
  %374 = fcmp olt <8 x float> %373, zeroinitializer, !dbg !123
  %375 = extractelement <8 x i1> %374, i64 7, !dbg !125
  %376 = extractelement <8 x float> %373, i64 7, !dbg !125
  %377 = select i1 %375, float 0.000000e+00, float %376, !dbg !125
  %378 = extractelement <8 x i1> %374, i64 6, !dbg !125
  %379 = extractelement <8 x float> %373, i64 6, !dbg !125
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !125
  %381 = extractelement <8 x i1> %374, i64 5, !dbg !127
  %382 = extractelement <8 x float> %373, i64 5, !dbg !127
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !127
  %384 = extractelement <8 x i1> %374, i64 4, !dbg !127
  %385 = extractelement <8 x float> %373, i64 4, !dbg !127
  %386 = select i1 %384, float 0.000000e+00, float %385, !dbg !127
  %387 = extractelement <8 x i1> %374, i64 3, !dbg !129
  %388 = extractelement <8 x float> %373, i64 3, !dbg !129
  %389 = select i1 %387, float 0.000000e+00, float %388, !dbg !129
  %390 = extractelement <8 x i1> %374, i64 2, !dbg !129
  %391 = extractelement <8 x float> %373, i64 2, !dbg !129
  %392 = select i1 %390, float 0.000000e+00, float %391, !dbg !129
  %393 = extractelement <8 x i1> %374, i64 1, !dbg !131
  %394 = extractelement <8 x float> %373, i64 1, !dbg !131
  %395 = select i1 %393, float 0.000000e+00, float %394, !dbg !131
  %396 = extractelement <8 x i1> %374, i64 0, !dbg !131
  %397 = extractelement <8 x float> %373, i64 0, !dbg !131
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !131
  %399 = select i1 %245, float %395, float 0.000000e+00, !dbg !132
  %400 = select i1 %245, float %398, float 0.000000e+00, !dbg !132
  %401 = select i1 %194, float %320, float %399, !dbg !133
  %402 = select i1 %194, float %309, float %400, !dbg !133
  %403 = select i1 %143, float %380, float %401, !dbg !133
  %404 = select i1 %143, float %377, float %402, !dbg !133
  %405 = select i1 %91, float %386, float %403, !dbg !133
  %406 = select i1 %91, float %383, float %404, !dbg !133
  %407 = select i1 %39, float %392, float %405, !dbg !133
  %408 = select i1 %39, float %389, float %406, !dbg !133
  %409 = sext i32 %33 to i64, !dbg !134
  %410 = getelementptr float, ptr addrspace(1) %25, i64 %409, !dbg !134
  %411 = bitcast float %407 to i32, !dbg !135
  %412 = bitcast float %408 to i32, !dbg !135
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %411, i32 %412, ptr addrspace(1) %410, i1 %34) #3, !dbg !135
  ret void, !dbg !136
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cswogxyrj5vkskqh3e7bma5dmsnukgrcnph3u6c6kfulodugazov.py", directory: "inductor_cache/sw")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 47, scope: !7)
!39 = !DILocation(line: 57, column: 40, scope: !7)
!40 = !DILocation(line: 57, column: 36, scope: !7)
!41 = !DILocation(line: 57, column: 53, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 69, scope: !7)
!44 = !DILocation(line: 57, column: 61, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 43, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 43, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 43, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 43, scope: !7)
!56 = !DILocation(line: 80, column: 20, scope: !7)
!57 = !DILocation(line: 81, column: 48, scope: !7)
!58 = !DILocation(line: 81, column: 41, scope: !7)
!59 = !DILocation(line: 81, column: 54, scope: !7)
!60 = !DILocation(line: 81, column: 32, scope: !7)
!61 = !DILocation(line: 81, column: 70, scope: !7)
!62 = !DILocation(line: 81, column: 62, scope: !7)
!63 = !DILocation(line: 82, column: 32, scope: !7)
!64 = !DILocation(line: 82, column: 44, scope: !7)
!65 = !DILocation(line: 84, column: 32, scope: !7)
!66 = !DILocation(line: 84, column: 44, scope: !7)
!67 = !DILocation(line: 86, column: 20, scope: !7)
!68 = !DILocation(line: 87, column: 27, scope: !7)
!69 = !DILocation(line: 89, column: 20, scope: !7)
!70 = !DILocation(line: 93, column: 32, scope: !7)
!71 = !DILocation(line: 93, column: 44, scope: !7)
!72 = !DILocation(line: 95, column: 32, scope: !7)
!73 = !DILocation(line: 95, column: 44, scope: !7)
!74 = !DILocation(line: 104, column: 20, scope: !7)
!75 = !DILocation(line: 105, column: 49, scope: !7)
!76 = !DILocation(line: 105, column: 41, scope: !7)
!77 = !DILocation(line: 105, column: 55, scope: !7)
!78 = !DILocation(line: 105, column: 32, scope: !7)
!79 = !DILocation(line: 105, column: 71, scope: !7)
!80 = !DILocation(line: 105, column: 63, scope: !7)
!81 = !DILocation(line: 106, column: 32, scope: !7)
!82 = !DILocation(line: 106, column: 45, scope: !7)
!83 = !DILocation(line: 108, column: 32, scope: !7)
!84 = !DILocation(line: 108, column: 45, scope: !7)
!85 = !DILocation(line: 110, column: 20, scope: !7)
!86 = !DILocation(line: 111, column: 27, scope: !7)
!87 = !DILocation(line: 113, column: 20, scope: !7)
!88 = !DILocation(line: 117, column: 32, scope: !7)
!89 = !DILocation(line: 117, column: 45, scope: !7)
!90 = !DILocation(line: 119, column: 32, scope: !7)
!91 = !DILocation(line: 119, column: 45, scope: !7)
!92 = !DILocation(line: 125, column: 20, scope: !7)
!93 = !DILocation(line: 128, column: 50, scope: !7)
!94 = !DILocation(line: 128, column: 42, scope: !7)
!95 = !DILocation(line: 128, column: 56, scope: !7)
!96 = !DILocation(line: 128, column: 33, scope: !7)
!97 = !DILocation(line: 128, column: 72, scope: !7)
!98 = !DILocation(line: 128, column: 64, scope: !7)
!99 = !DILocation(line: 129, column: 33, scope: !7)
!100 = !DILocation(line: 129, column: 46, scope: !7)
!101 = !DILocation(line: 131, column: 33, scope: !7)
!102 = !DILocation(line: 131, column: 46, scope: !7)
!103 = !DILocation(line: 133, column: 22, scope: !7)
!104 = !DILocation(line: 134, column: 28, scope: !7)
!105 = !DILocation(line: 107, column: 20, scope: !7)
!106 = !DILocation(line: 116, column: 20, scope: !7)
!107 = !DILocation(line: 118, column: 20, scope: !7)
!108 = !DILocation(line: 120, column: 20, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !112)
!110 = distinct !DILexicalBlockFile(scope: !7, file: !111, discriminator: 0)
!111 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!112 = !DILocation(line: 122, column: 42, scope: !7)
!113 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !112)
!114 = !DILocation(line: 136, column: 22, scope: !7)
!115 = !DILocation(line: 140, column: 33, scope: !7)
!116 = !DILocation(line: 140, column: 46, scope: !7)
!117 = !DILocation(line: 142, column: 33, scope: !7)
!118 = !DILocation(line: 142, column: 46, scope: !7)
!119 = !DILocation(line: 130, column: 22, scope: !7)
!120 = !DILocation(line: 139, column: 22, scope: !7)
!121 = !DILocation(line: 141, column: 22, scope: !7)
!122 = !DILocation(line: 143, column: 22, scope: !7)
!123 = !DILocation(line: 118, column: 15, scope: !110, inlinedAt: !124)
!124 = !DILocation(line: 145, column: 44, scope: !7)
!125 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !126)
!126 = !DILocation(line: 98, column: 42, scope: !7)
!127 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !128)
!128 = !DILocation(line: 74, column: 42, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !130)
!130 = !DILocation(line: 50, column: 42, scope: !7)
!131 = !DILocation(line: 121, column: 29, scope: !110, inlinedAt: !124)
!132 = !DILocation(line: 147, column: 37, scope: !7)
!133 = !DILocation(line: 0, scope: !7)
!134 = !DILocation(line: 152, column: 25, scope: !7)
!135 = !DILocation(line: 152, column: 38, scope: !7)
!136 = !DILocation(line: 152, column: 4, scope: !7)
