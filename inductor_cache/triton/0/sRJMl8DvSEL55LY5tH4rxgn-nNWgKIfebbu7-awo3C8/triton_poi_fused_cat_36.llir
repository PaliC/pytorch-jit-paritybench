; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 16, !dbg !14
  %14 = srem i32 %13, 64, !dbg !15
  %15 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %.frozen1 = freeze i32 %12, !dbg !17
  %16 = sdiv i32 %.frozen1, 1024, !dbg !17
  %17 = icmp slt i32 %14, 16, !dbg !18
  %18 = mul i32 %16, 1024, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %18, !dbg !19
  %19 = shl nsw i32 %16, 8, !dbg !20
  %20 = add nsw i32 %19, %srem.decomposed, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %17, i32 0, i1 %17) #1, !dbg !23
  %24 = bitcast i32 %23 to float, !dbg !23
  %25 = shl nsw i32 %16, 6, !dbg !24
  %26 = add nsw i32 %25, %.decomposed, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %17, i32 0, i1 %17) #1, !dbg !27
  %30 = bitcast i32 %29 to float, !dbg !27
  %31 = fsub float 0.000000e+00, %30, !dbg !28
  %32 = fmul float %31, 0x3FF7154760000000, !dbg !32
  %33 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %32) #1, !dbg !32
  %34 = fadd float %33, 1.000000e+00, !dbg !33
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %34) #1, !dbg !34
  %36 = fmul float %35, %24, !dbg !35
  %37 = fadd float %36, %24, !dbg !36
  %38 = and i32 %14, -16, !dbg !37
  %39 = icmp eq i32 %38, 16, !dbg !37
  %40 = shl nsw i32 %14, 4, !dbg !38
  %41 = add nsw i32 %19, %.decomposed, !dbg !38
  %42 = add nsw i32 %41, -256, !dbg !39
  %43 = add nsw i32 %42, %40, !dbg !40
  %44 = sext i32 %43 to i64, !dbg !41
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !41
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %39, i32 0, i1 %39) #1, !dbg !42
  %47 = bitcast i32 %46 to float, !dbg !42
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !43
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %39, i32 0, i1 %39) #1, !dbg !44
  %50 = bitcast i32 %49 to float, !dbg !44
  %51 = fadd float %47, %50, !dbg !45
  %52 = getelementptr i8, ptr addrspace(1) %28, i64 64, !dbg !46
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %39, i32 0, i1 %39) #1, !dbg !47
  %54 = bitcast i32 %53 to float, !dbg !47
  %55 = fsub float 0.000000e+00, %54, !dbg !48
  %56 = fmul float %55, 0x3FF7154760000000, !dbg !50
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !50
  %58 = fadd float %57, 1.000000e+00, !dbg !51
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #1, !dbg !52
  %60 = fmul float %51, %59, !dbg !53
  %61 = fadd float %51, %60, !dbg !54
  %62 = icmp eq i32 %38, 32, !dbg !55
  %63 = add nsw i32 %41, -512, !dbg !56
  %64 = add nsw i32 %63, %40, !dbg !57
  %65 = sext i32 %64 to i64, !dbg !58
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !58
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %62, i32 0, i1 %62) #1, !dbg !59
  %68 = bitcast i32 %67 to float, !dbg !59
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !60
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %62, i32 0, i1 %62) #1, !dbg !61
  %71 = bitcast i32 %70 to float, !dbg !61
  %72 = fadd float %68, %71, !dbg !62
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !63
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %62, i32 0, i1 %62) #1, !dbg !64
  %75 = bitcast i32 %74 to float, !dbg !64
  %76 = fadd float %72, %75, !dbg !65
  %77 = getelementptr i8, ptr addrspace(1) %28, i64 128, !dbg !66
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %62, i32 0, i1 %62) #1, !dbg !67
  %79 = bitcast i32 %78 to float, !dbg !67
  %80 = fsub float 0.000000e+00, %79, !dbg !68
  %81 = fmul float %80, 0x3FF7154760000000, !dbg !70
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !70
  %83 = fadd float %82, 1.000000e+00, !dbg !71
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !72
  %85 = fmul float %76, %84, !dbg !73
  %86 = fadd float %76, %85, !dbg !74
  %87 = icmp sgt i32 %14, 47, !dbg !75
  %88 = add nsw i32 %41, -768, !dbg !76
  %89 = add nsw i32 %88, %40, !dbg !77
  %90 = sext i32 %89 to i64, !dbg !78
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !78
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %87, i32 0, i1 %87) #1, !dbg !79
  %93 = bitcast i32 %92 to float, !dbg !79
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !80
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 0, i1 %87) #1, !dbg !81
  %96 = bitcast i32 %95 to float, !dbg !81
  %97 = fadd float %93, %96, !dbg !82
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !83
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %87, i32 0, i1 %87) #1, !dbg !84
  %100 = bitcast i32 %99 to float, !dbg !84
  %101 = fadd float %97, %100, !dbg !85
  %102 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !86
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %87, i32 0, i1 %87) #1, !dbg !87
  %104 = bitcast i32 %103 to float, !dbg !87
  %105 = fadd float %101, %104, !dbg !88
  %106 = getelementptr i8, ptr addrspace(1) %28, i64 192, !dbg !89
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %87, i32 0, i1 %87) #1, !dbg !90
  %108 = bitcast i32 %107 to float, !dbg !90
  %109 = fsub float 0.000000e+00, %108, !dbg !91
  %110 = fmul float %109, 0x3FF7154760000000, !dbg !93
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !93
  %112 = fadd float %111, 1.000000e+00, !dbg !94
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #1, !dbg !95
  %114 = fmul float %105, %113, !dbg !96
  %115 = fadd float %105, %114, !dbg !97
  %116 = select i1 %87, float %115, float 0.000000e+00, !dbg !98
  %117 = select i1 %62, float %86, float %116, !dbg !99
  %118 = select i1 %39, float %61, float %117, !dbg !99
  %119 = select i1 %17, float %37, float %118, !dbg !99
  %120 = sext i32 %12 to i64, !dbg !100
  %121 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !100
  %122 = bitcast float %119 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 true) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctvku4udfn4nsdvaftvuqltt6rlfuvouo5rtrjt6iyndfvgbp2fo.py", directory: "inductor_cache/tv")
!4 = !{ptr @triton_poi_fused_cat_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_36", linkageName: "triton_poi_fused_cat_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = !DILocation(line: 35, column: 22, scope: !7)
!32 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 40, scope: !7)
!39 = !DILocation(line: 44, column: 36, scope: !7)
!40 = !DILocation(line: 44, column: 54, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 63, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 63, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 49, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !49)
!49 = !DILocation(line: 48, column: 23, scope: !7)
!50 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !49)
!51 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !49)
!52 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !49)
!53 = !DILocation(line: 49, column: 20, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 57, column: 54, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 63, scope: !7)
!60 = !DILocation(line: 58, column: 31, scope: !7)
!61 = !DILocation(line: 58, column: 63, scope: !7)
!62 = !DILocation(line: 59, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 31, scope: !7)
!64 = !DILocation(line: 60, column: 63, scope: !7)
!65 = !DILocation(line: 61, column: 20, scope: !7)
!66 = !DILocation(line: 62, column: 31, scope: !7)
!67 = !DILocation(line: 62, column: 49, scope: !7)
!68 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !69)
!69 = !DILocation(line: 63, column: 23, scope: !7)
!70 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !69)
!71 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !69)
!72 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !69)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 20, scope: !7)
!75 = !DILocation(line: 68, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 36, scope: !7)
!77 = !DILocation(line: 71, column: 54, scope: !7)
!78 = !DILocation(line: 71, column: 31, scope: !7)
!79 = !DILocation(line: 71, column: 63, scope: !7)
!80 = !DILocation(line: 72, column: 31, scope: !7)
!81 = !DILocation(line: 72, column: 63, scope: !7)
!82 = !DILocation(line: 73, column: 20, scope: !7)
!83 = !DILocation(line: 74, column: 31, scope: !7)
!84 = !DILocation(line: 74, column: 63, scope: !7)
!85 = !DILocation(line: 75, column: 20, scope: !7)
!86 = !DILocation(line: 76, column: 31, scope: !7)
!87 = !DILocation(line: 76, column: 63, scope: !7)
!88 = !DILocation(line: 77, column: 20, scope: !7)
!89 = !DILocation(line: 78, column: 31, scope: !7)
!90 = !DILocation(line: 78, column: 49, scope: !7)
!91 = !DILocation(line: 47, column: 30, scope: !29, inlinedAt: !92)
!92 = !DILocation(line: 79, column: 23, scope: !7)
!93 = !DILocation(line: 47, column: 29, scope: !29, inlinedAt: !92)
!94 = !DILocation(line: 47, column: 20, scope: !29, inlinedAt: !92)
!95 = !DILocation(line: 47, column: 16, scope: !29, inlinedAt: !92)
!96 = !DILocation(line: 80, column: 20, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 83, column: 35, scope: !7)
!99 = !DILocation(line: 0, scope: !7)
!100 = !DILocation(line: 87, column: 25, scope: !7)
!101 = !DILocation(line: 87, column: 37, scope: !7)
!102 = !DILocation(line: 87, column: 4, scope: !7)
