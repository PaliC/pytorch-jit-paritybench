#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":19:0)
#loc1 = loc(unknown)
#loc7 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":34:69)
#loc13 = loc(callsite(#loc1 at #loc7))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_any_isnan_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":19:0), %arg1: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.extern_elementwise %3 {libname = "", libpath = "", pure = true, symbol = "__nv_isnanf"} : (tensor<256xf32, #blocked>) -> tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi ne, %4, %cst : tensor<256xi32, #blocked> loc(#loc5)
    %6 = "tt.reduce"(%5) <{axis = 0 : i32}> ({
    ^bb0(%arg3: i1 loc(callsite(#loc1 at #loc7)), %arg4: i1 loc(callsite(#loc1 at #loc7))):
      %12 = arith.ori %arg3, %arg4 : i1 loc(#loc15)
      tt.reduce.return %12 : i1 loc(#loc12)
    }) : (tensor<256xi1, #blocked>) -> i1 loc(#loc12)
    %7 = tt.addptr %arg1, %c0_i32 : !tt.ptr<i1>, i32 loc(#loc9)
    %8 = tt.bitcast %7 : !tt.ptr<i1> -> !tt.ptr<i8> loc(#loc10)
    %9 = tt.splat %8 : !tt.ptr<i8> -> tensor<1x!tt.ptr<i8>, #blocked1> loc(#loc10)
    %10 = arith.extui %6 : i1 to i8 loc(#loc10)
    %11 = tt.splat %10 : i8 -> tensor<1xi8, #blocked1> loc(#loc10)
    tt.store %9, %11 : tensor<1x!tt.ptr<i8>, #blocked1> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":27:26)
#loc3 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":31:30)
#loc4 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":31:35)
#loc5 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":32:27)
#loc6 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":232:29)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":227:15)
#loc9 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":35:25)
#loc10 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":35:59)
#loc11 = loc("inductor_cache/l3/cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py":35:4)
#loc12 = loc(callsite(#loc6 at #loc7))
#loc14 = loc(callsite(#loc8 at #loc6))
#loc15 = loc(callsite(#loc14 at #loc7))
