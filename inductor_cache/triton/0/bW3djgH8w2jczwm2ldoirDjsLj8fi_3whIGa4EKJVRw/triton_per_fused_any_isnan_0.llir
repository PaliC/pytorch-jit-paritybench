; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_any_isnan_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 31, !dbg !10
  %6 = lshr i32 %4, 5, !dbg !10
  %7 = shl i32 %4, 2, !dbg !10
  %8 = and i32 %7, 252, !dbg !10
  %9 = zext nneg i32 %8 to i64, !dbg !11
  %10 = getelementptr float, ptr addrspace(1) %0, i64 %9, !dbg !11
  %11 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %10, i1 true) #4, !dbg !12
  %12 = extractvalue { i32, i32, i32, i32 } %11, 0, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %11, 1, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %11, 2, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %11, 3, !dbg !12
  %16 = bitcast i32 %12 to float, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !13
  %21 = tail call float @llvm.nvvm.fabs.ftz.f(float %16) #4, !dbg !13
  %22 = tail call float @llvm.nvvm.fabs.f(float %16) #4, !dbg !13
  %23 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !13
  %24 = tail call float @llvm.nvvm.fabs.ftz.f(float %17) #4, !dbg !13
  %25 = tail call float @llvm.nvvm.fabs.f(float %17) #4, !dbg !13
  %26 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !13
  %27 = tail call float @llvm.nvvm.fabs.ftz.f(float %18) #4, !dbg !13
  %28 = tail call float @llvm.nvvm.fabs.f(float %18) #4, !dbg !13
  %29 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !13
  %30 = tail call float @llvm.nvvm.fabs.ftz.f(float %19) #4, !dbg !13
  %31 = tail call float @llvm.nvvm.fabs.f(float %19) #4, !dbg !13
  %32 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !13
  %33 = insertelement <2 x i32> %32, i32 %26, i64 1, !dbg !13
  %34 = icmp eq <2 x i32> %33, zeroinitializer, !dbg !13
  %35 = insertelement <2 x float> poison, float %25, i64 0, !dbg !13
  %36 = insertelement <2 x float> %35, float %28, i64 1, !dbg !13
  %37 = insertelement <2 x float> poison, float %24, i64 0, !dbg !13
  %38 = insertelement <2 x float> %37, float %27, i64 1, !dbg !13
  %39 = select <2 x i1> %34, <2 x float> %36, <2 x float> %38, !dbg !13
  %40 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !13
  %41 = insertelement <2 x i32> %40, i32 %29, i64 1, !dbg !13
  %42 = icmp eq <2 x i32> %41, zeroinitializer, !dbg !13
  %43 = insertelement <2 x float> poison, float %22, i64 0, !dbg !13
  %44 = insertelement <2 x float> %43, float %31, i64 1, !dbg !13
  %45 = insertelement <2 x float> poison, float %21, i64 0, !dbg !13
  %46 = insertelement <2 x float> %45, float %30, i64 1, !dbg !13
  %47 = select <2 x i1> %42, <2 x float> %44, <2 x float> %46, !dbg !13
  %48 = fcmp uno <2 x float> %47, %39, !dbg !14
  %shift = shufflevector <2 x i1> %48, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !14
  %49 = or <2 x i1> %48, %shift, !dbg !14
  %50 = extractelement <2 x i1> %49, i64 0, !dbg !14
  %51 = zext i1 %50 to i32, !dbg !14
  %52 = tail call i32 @llvm.nvvm.redux.sync.or(i32 %51, i32 -1), !dbg !19
  %53 = icmp eq i32 %5, 0, !dbg !19
  %54 = and i32 %6, 1, !dbg !19
  %55 = getelementptr i1, ptr addrspace(3) @global_smem, i32 %54, !dbg !19
  %56 = trunc i32 %52 to i8, !dbg !19
  %57 = and i8 %56, 1, !dbg !19
  %58 = insertelement <1 x i8> poison, i8 %57, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %55, <1 x i8> %58, i1 %53) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %59 = icmp slt i32 %4, 2, !dbg !19
  %60 = getelementptr i1, ptr addrspace(3) @global_smem, i32 %4, !dbg !19
  %61 = tail call i8 asm sideeffect "@$2 ld.shared.b8 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %60, i1 %59) #4, !dbg !19
  %62 = trunc i8 %61 to i1, !dbg !19
  %.mask = and i8 %61, 1, !dbg !19
  %63 = zext nneg i8 %.mask to i32, !dbg !19
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 1, i32 31), !dbg !19
  %65 = trunc i32 %64 to i1, !dbg !19
  %66 = or i1 %62, %65, !dbg !14
  %67 = and i32 %4, 1, !dbg !19
  %68 = icmp eq i32 %67, 0, !dbg !19
  %69 = and i1 %59, %68, !dbg !19
  %70 = zext i1 %66 to i8, !dbg !19
  %71 = insertelement <1 x i8> poison, i8 %70, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %60, <1 x i8> %71, i1 %69) #4, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %72 = load i1, ptr addrspace(3) @global_smem, align 16, !dbg !19
  %73 = zext i1 %72 to i8, !dbg !20
  %urem = and i32 %4, 63, !dbg !20
  %74 = icmp eq i32 %urem, 0, !dbg !20
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %73, ptr addrspace(1) %1, i1 %74) #4, !dbg !20
  ret void, !dbg !21
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.redux.sync.or(i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl3fj3kfykyagxn6r2jhswdqme4elzjxyso4h7pg2m4riadwlmxh.py", directory: "inductor_cache/l3")
!4 = !{ptr @triton_per_fused_any_isnan_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_any_isnan_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_any_isnan_0", linkageName: "triton_per_fused_any_isnan_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 27, scope: !7)
!14 = !DILocation(line: 227, column: 15, scope: !15, inlinedAt: !18)
!15 = distinct !DILexicalBlockFile(scope: !17, file: !16, discriminator: 0)
!16 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!17 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!18 = !DILocation(line: 34, column: 69, scope: !7)
!19 = !DILocation(line: 232, column: 29, scope: !17, inlinedAt: !18)
!20 = !DILocation(line: 35, column: 59, scope: !7)
!21 = !DILocation(line: 35, column: 4, scope: !7)
