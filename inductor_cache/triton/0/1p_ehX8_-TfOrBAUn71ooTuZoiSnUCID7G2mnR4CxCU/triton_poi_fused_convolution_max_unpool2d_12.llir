; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/pm/cpmqqcumr7sikbc4exzjrxojmd7udkxw2k56mmz6o4rnupi73cz5.py\00"
@assertMessage_0 = internal constant [39 x i8] c"index out of bounds: 0 <= tmp9 < 32768\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_convolution_max_unpool2d_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !11 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !12
  %11 = shl i32 %10, 7, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = and i32 %12, 127, !dbg !14
  %14 = or disjoint i32 %11, %13, !dbg !15
  %15 = sdiv i32 %14, 16, !dbg !16
  %16 = srem i32 %15, 128, !dbg !17
  %17 = sext i32 %14 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !19
  %20 = sext i32 %16 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !21
  %23 = getelementptr i64, ptr addrspace(1) %2, i64 %17, !dbg !22
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !26
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !28
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !30
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !31
  %33 = shl i32 %15, 6, !dbg !32
  %34 = sext i32 %33 to i64, !dbg !33
  %35 = add i64 %24, %34, !dbg !33
  %36 = lshr i64 %35, 48, !dbg !34
  %37 = and i64 %36, 32768, !dbg !34
  %38 = add i64 %37, %35, !dbg !34
  %39 = icmp ugt i64 %38, 32767, !dbg !35
  br i1 %39, label %40, label %41, !dbg !36

40:                                               ; preds = %9
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !36
  unreachable, !dbg !36

41:                                               ; preds = %9
  %42 = bitcast i32 %28 to float, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %43 = fadd float %42, 0x3EE4F8B580000000, !dbg !37
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %44, 0, !dbg !38
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !38
  %.not1.i = icmp eq i32 %45, 0, !dbg !38
  br i1 %.not.i, label %51, label %46, !dbg !38

46:                                               ; preds = %41
  br i1 %.not1.i, label %49, label %47, !dbg !38

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

51:                                               ; preds = %41
  br i1 %.not1.i, label %54, label %52, !dbg !38

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #5, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !38
  %56 = bitcast i32 %19 to float, !dbg !19
  %57 = bitcast i32 %22 to float, !dbg !21
  %58 = fadd float %56, %57, !dbg !39
  %59 = bitcast i32 %26 to float, !dbg !25
  %60 = fsub float %58, %59, !dbg !40
  %61 = bitcast i32 %30 to float, !dbg !29
  %62 = bitcast i32 %32 to float, !dbg !31
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !41
  %64 = fmul float %60, %63, !dbg !42
  %65 = fmul float %64, %61, !dbg !43
  %66 = fadd float %65, %62, !dbg !44
  %67 = fcmp olt float %66, 0.000000e+00, !dbg !45
  %68 = select i1 %67, float 0.000000e+00, float %66, !dbg !49
  %69 = bitcast float %58 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %69, ptr addrspace(1) %18, i1 true) #5, !dbg !50
  %70 = getelementptr float, ptr addrspace(1) %7, i64 %38, !dbg !51
  %71 = bitcast float %68 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %71, ptr addrspace(1) %70, i1 true) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpmqqcumr7sikbc4exzjrxojmd7udkxw2k56mmz6o4rnupi73cz5.py", directory: "inductor_cache/pm")
!4 = !{ptr @triton_poi_fused_convolution_max_unpool2d_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_unpool2d_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_unpool2d_12", linkageName: "triton_poi_fused_convolution_max_unpool2d_12", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 27, scope: !11)
!18 = !DILocation(line: 26, column: 34, scope: !11)
!19 = !DILocation(line: 26, column: 39, scope: !11)
!20 = !DILocation(line: 27, column: 30, scope: !11)
!21 = !DILocation(line: 27, column: 35, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 35, scope: !11)
!24 = !DILocation(line: 29, column: 32, scope: !11)
!25 = !DILocation(line: 29, column: 52, scope: !11)
!26 = !DILocation(line: 30, column: 32, scope: !11)
!27 = !DILocation(line: 30, column: 52, scope: !11)
!28 = !DILocation(line: 31, column: 32, scope: !11)
!29 = !DILocation(line: 31, column: 52, scope: !11)
!30 = !DILocation(line: 32, column: 32, scope: !11)
!31 = !DILocation(line: 32, column: 52, scope: !11)
!32 = !DILocation(line: 34, column: 15, scope: !11)
!33 = !DILocation(line: 35, column: 18, scope: !11)
!34 = !DILocation(line: 39, column: 32, scope: !11)
!35 = !DILocation(line: 40, column: 36, scope: !11)
!36 = !DILocation(line: 40, column: 51, scope: !11)
!37 = !DILocation(line: 43, column: 20, scope: !11)
!38 = !DILocation(line: 44, column: 27, scope: !11)
!39 = !DILocation(line: 33, column: 18, scope: !11)
!40 = !DILocation(line: 41, column: 19, scope: !11)
!41 = !DILocation(line: 46, column: 20, scope: !11)
!42 = !DILocation(line: 49, column: 20, scope: !11)
!43 = !DILocation(line: 50, column: 20, scope: !11)
!44 = !DILocation(line: 51, column: 20, scope: !11)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !11, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 53, column: 42, scope: !11)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 54, column: 39, scope: !11)
!51 = !DILocation(line: 55, column: 25, scope: !11)
!52 = !DILocation(line: 55, column: 66, scope: !11)
!53 = !DILocation(line: 55, column: 4, scope: !11)
