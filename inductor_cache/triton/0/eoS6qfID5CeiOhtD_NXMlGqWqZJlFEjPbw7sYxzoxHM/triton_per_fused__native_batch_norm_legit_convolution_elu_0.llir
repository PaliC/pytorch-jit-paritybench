; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_elu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 16, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = srem i32 %8, 4, !dbg !13
  %13 = shl i32 %8, 4, !dbg !14
  %14 = or disjoint i32 %13, %11, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = sext i32 %12 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %9) #5, !dbg !19
  %24 = bitcast i32 %23 to float, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %9) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = fadd float %18, %24, !dbg !20
  %28 = fadd float %20, %26, !dbg !20
  %29 = select i1 %9, float %27, float 0.000000e+00, !dbg !21
  %30 = select i1 %9, float %28, float 0.000000e+00, !dbg !21
  %31 = bitcast float %29 to i32, !dbg !22
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = fadd float %29, %33, !dbg !26
  %35 = bitcast float %34 to i32, !dbg !22
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = fadd float %34, %37, !dbg !26
  %39 = bitcast float %38 to i32, !dbg !22
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !22
  %41 = bitcast i32 %40 to float, !dbg !22
  %42 = fadd float %38, %41, !dbg !26
  %43 = bitcast float %42 to i32, !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = fadd float %42, %45, !dbg !26
  %47 = bitcast float %30 to i32, !dbg !22
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = fadd float %30, %49, !dbg !26
  %51 = bitcast float %50 to i32, !dbg !22
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = fadd float %50, %53, !dbg !26
  %55 = bitcast float %54 to i32, !dbg !22
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = fadd float %54, %57, !dbg !26
  %59 = bitcast float %58 to i32, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %58, %61, !dbg !26
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 1.600000e+01) #5, !dbg !28
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 1.600000e+01) #5, !dbg !28
  %65 = fsub float %27, %63, !dbg !29
  %66 = fsub float %28, %64, !dbg !29
  %67 = fmul float %65, %65, !dbg !30
  %68 = fmul float %66, %66, !dbg !30
  %69 = select i1 %9, float %67, float 0.000000e+00, !dbg !31
  %70 = select i1 %9, float %68, float 0.000000e+00, !dbg !31
  %71 = bitcast float %69 to i32, !dbg !32
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = fadd float %69, %73, !dbg !34
  %75 = bitcast float %74 to i32, !dbg !32
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !32
  %77 = bitcast i32 %76 to float, !dbg !32
  %78 = fadd float %74, %77, !dbg !34
  %79 = bitcast float %78 to i32, !dbg !32
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !32
  %81 = bitcast i32 %80 to float, !dbg !32
  %82 = fadd float %78, %81, !dbg !34
  %83 = bitcast float %82 to i32, !dbg !32
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !32
  %85 = bitcast i32 %84 to float, !dbg !32
  %86 = fadd float %82, %85, !dbg !34
  %87 = bitcast float %70 to i32, !dbg !32
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !32
  %89 = bitcast i32 %88 to float, !dbg !32
  %90 = fadd float %70, %89, !dbg !34
  %91 = bitcast float %90 to i32, !dbg !32
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !32
  %93 = bitcast i32 %92 to float, !dbg !32
  %94 = fadd float %90, %93, !dbg !34
  %95 = bitcast float %94 to i32, !dbg !32
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = fadd float %94, %97, !dbg !34
  %99 = bitcast float %98 to i32, !dbg !32
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !32
  %101 = bitcast i32 %100 to float, !dbg !32
  %102 = fadd float %98, %101, !dbg !34
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #5, !dbg !35
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.600000e+01) #5, !dbg !35
  %105 = fadd float %103, 0x3EE4F8B580000000, !dbg !36
  %106 = fadd float %104, 0x3EE4F8B580000000, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %107, 0, !dbg !37
  br i1 %.not.i, label %110, label %108, !dbg !37

108:                                              ; preds = %7
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

110:                                              ; preds = %7
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %108, %110
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], !dbg !37
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i1 = icmp eq i32 %112, 0, !dbg !37
  br i1 %.not.i1, label %115, label %113, !dbg !37

113:                                              ; preds = %__nv_rsqrtf.exit
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

115:                                              ; preds = %__nv_rsqrtf.exit
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !37
  br label %__nv_rsqrtf.exit3, !dbg !37

__nv_rsqrtf.exit3:                                ; preds = %113, %115
  %.0.i2 = phi float [ %114, %113 ], [ %116, %115 ], !dbg !37
  %117 = fmul float %65, %.0.i, !dbg !38
  %118 = fmul float %117, 0x3FF7154760000000, !dbg !39
  %119 = tail call float @llvm.nvvm.round.f(float %118) #5, !dbg !39
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i4 = icmp eq i32 %120, 0, !dbg !39
  %121 = tail call float @llvm.nvvm.fabs.ftz.f(float %117) #5, !dbg !39
  %122 = tail call float @llvm.nvvm.fabs.f(float %117) #5, !dbg !39
  %.03.i = select i1 %.not.i4, float %122, float %121, !dbg !39
  %123 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !39
  %t.0.i = select i1 %123, float 0.000000e+00, float %119, !dbg !39
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %126 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !39
  %j.0.i = select i1 %126, float 1.270000e+02, float %t.0.i, !dbg !39
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not8.i = icmp eq i32 %132, 0, !dbg !39
  br i1 %.not8.i, label %135, label %133, !dbg !39

133:                                              ; preds = %__nv_rsqrtf.exit3
  %134 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #5, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

135:                                              ; preds = %__nv_rsqrtf.exit3
  %136 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #5, !dbg !39
  br label %__nv_expm1f.exit, !dbg !39

__nv_expm1f.exit:                                 ; preds = %133, %135
  %.0.i5 = phi float [ %134, %133 ], [ %136, %135 ], !dbg !39
  %137 = fcmp ogt float %117, 0.000000e+00, !dbg !40
  %.not7.i = icmp eq i32 %131, 0, !dbg !39
  %.not6.i = icmp eq i32 %130, 0, !dbg !39
  %.not5.i = icmp eq i32 %129, 0, !dbg !39
  %.not4.i = icmp eq i32 %128, 0, !dbg !39
  %.not3.i = icmp eq i32 %127, 0, !dbg !39
  %.not2.i = icmp eq i32 %125, 0, !dbg !39
  %138 = fneg float %t.0.i, !dbg !39
  %.not1.i = icmp eq i32 %124, 0, !dbg !39
  %139 = tail call float @llvm.nvvm.fma.rn.f(float %138, float 0x3FE62E4000000000, float %117) #5, !dbg !39
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %138, float 0x3FE62E4000000000, float %117) #5, !dbg !39
  %.04.i = select i1 %.not1.i, float %139, float %140, !dbg !39
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %138, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !39
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %138, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !39
  %.05.i = select i1 %.not2.i, float %141, float %142, !dbg !39
  %143 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !39
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !39
  %.07.i = select i1 %.not3.i, float %143, float %144, !dbg !39
  %145 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !39
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !39
  %.08.i = select i1 %.not4.i, float %145, float %146, !dbg !39
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !39
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !39
  %.09.i = select i1 %.not5.i, float %147, float %148, !dbg !39
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !39
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !39
  %.06.i = select i1 %.not6.i, float %149, float %150, !dbg !39
  %151 = fmul float %.05.i, %.06.i, !dbg !39
  %152 = tail call float @llvm.nvvm.fma.rn.f(float %151, float %.05.i, float %.05.i) #5, !dbg !39
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %151, float %.05.i, float %.05.i) #5, !dbg !39
  %.01.i = select i1 %.not7.i, float %152, float %153, !dbg !39
  %154 = fadd float %.0.i5, -1.000000e+00, !dbg !39
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not9.i = icmp eq i32 %155, 0, !dbg !39
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i5, float %154) #5, !dbg !39
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i5, float %154) #5, !dbg !39
  %.02.i = select i1 %.not9.i, float %157, float %156, !dbg !39
  %158 = fadd float %.02.i, %.02.i, !dbg !39
  %u.0.i = select i1 %126, float %158, float %.02.i, !dbg !39
  %159 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !39
  %u.1.i = select i1 %159, float 0x7FF0000000000000, float %u.0.i, !dbg !39
  %160 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !39
  %u.2.i = select i1 %160, float -1.000000e+00, float %u.1.i, !dbg !39
  %161 = fcmp oeq float %117, 0.000000e+00, !dbg !39
  %162 = fadd float %117, %117, !dbg !39
  %u.3.i = select i1 %161, float %162, float %u.2.i, !dbg !39
  %163 = select i1 %137, float %117, float %u.3.i, !dbg !41
  %164 = and i32 %10, 48, !dbg !42
  %165 = icmp eq i32 %164, 0, !dbg !42
  %166 = bitcast float %27 to i32, !dbg !42
  %167 = and i1 %165, %9, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %16, i1 %167) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %168 = sext i32 %8 to i64, !dbg !44
  %169 = getelementptr float, ptr addrspace(1) %1, i64 %168, !dbg !44
  %urem = and i32 %10, 63, !dbg !45
  %170 = icmp eq i32 %urem, 0, !dbg !45
  %171 = bitcast float %.0.i2 to i32, !dbg !45
  %172 = and i1 %170, %9, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %169, i1 %172) #5, !dbg !45
  %173 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !46
  %174 = bitcast float %163 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %173, i1 %167) #5, !dbg !47
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !48
  %176 = bitcast float %64 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 %172) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvw2hfzqo6r7d7z6fb6dtexwnmrktuoxistmjkflyka2ppie7hb.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_elu_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_elu_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_elu_0", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_elu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 39, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 35, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 47, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 28, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 28, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 35, scope: !7)
!42 = !DILocation(line: 62, column: 47, scope: !7)
!43 = !DILocation(line: 63, column: 4, scope: !7)
!44 = !DILocation(line: 64, column: 28, scope: !7)
!45 = !DILocation(line: 64, column: 40, scope: !7)
!46 = !DILocation(line: 65, column: 25, scope: !7)
!47 = !DILocation(line: 65, column: 45, scope: !7)
!48 = !DILocation(line: 66, column: 25, scope: !7)
!49 = !DILocation(line: 66, column: 37, scope: !7)
!50 = !DILocation(line: 66, column: 4, scope: !7)
