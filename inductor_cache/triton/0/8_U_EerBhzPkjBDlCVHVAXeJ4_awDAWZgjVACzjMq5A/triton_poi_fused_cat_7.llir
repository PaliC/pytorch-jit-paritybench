; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = sdiv i32 %17, 4096, !dbg !14
  %20 = sdiv i32 %18, 4096, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen, 786432, !dbg !15
  %.frozen2 = freeze i32 %18, !dbg !15
  %22 = sdiv i32 %.frozen2, 786432, !dbg !15
  %23 = mul i32 %21, 786432, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = mul i32 %22, 786432, !dbg !16
  %srem1.decomposed = sub i32 %.frozen2, %24, !dbg !16
  %25 = shl nsw i32 %21, 18, !dbg !17
  %26 = shl nsw i32 %22, 18, !dbg !17
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !18
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !18
  %29 = sext i32 %27 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = sext i32 %28 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = shl nsw i32 %21, 17, !dbg !20
  %34 = shl nsw i32 %22, 17, !dbg !20
  %35 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !21
  %36 = insertelement <2 x i32> %35, i32 %19, i64 1, !dbg !21
  %37 = srem <2 x i32> %36, <i32 4096, i32 192>, !dbg !21
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !22
  %39 = icmp slt i32 %38, 64, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %45 = and i32 %38, -32, !dbg !25
  %46 = icmp eq i32 %45, 64, !dbg !25
  %47 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %33, i64 0, !dbg !26
  %48 = add nsw <2 x i32> %47, %37, !dbg !26
  %49 = extractelement <2 x i32> %48, i64 1, !dbg !27
  %50 = shl nsw i32 %49, 12, !dbg !27
  %51 = extractelement <2 x i32> %48, i64 0, !dbg !28
  %52 = add nsw i32 %51, %50, !dbg !29
  %53 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !21
  %54 = insertelement <2 x i32> %53, i32 %20, i64 1, !dbg !21
  %55 = srem <2 x i32> %54, <i32 4096, i32 192>, !dbg !21
  %56 = extractelement <2 x i32> %55, i64 1, !dbg !22
  %57 = icmp slt i32 %56, 64, !dbg !23
  %58 = and i32 %56, -32, !dbg !25
  %59 = icmp eq i32 %58, 64, !dbg !25
  %60 = insertelement <2 x i32> <i32 poison, i32 -64>, i32 %34, i64 0, !dbg !26
  %61 = add nsw <2 x i32> %60, %55, !dbg !26
  %62 = extractelement <2 x i32> %61, i64 1, !dbg !27
  %63 = shl nsw i32 %62, 12, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57, i32 0, i1 %57) #1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !24
  %69 = extractelement <2 x i32> %61, i64 0, !dbg !28
  %70 = add nsw i32 %69, %63, !dbg !29
  %71 = sext i32 %52 to i64, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !30
  %73 = sext i32 %70 to i64, !dbg !30
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !31
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !31
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !31
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !31
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !31
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !31
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !31
  %85 = sext i32 %49 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !32
  %87 = sext i32 %62 to i64, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %46, i32 0, i1 %46) #1, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %46, i32 0, i1 %46) #1, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %46, i32 0, i1 %46) #1, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %46, i32 0, i1 %46) #1, !dbg !33
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 0, i1 %59) #1, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 0, i1 %59) #1, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 0, i1 %59) #1, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 0, i1 %59) #1, !dbg !33
  %97 = icmp eq i32 %45, 96, !dbg !34
  %98 = icmp eq i32 %58, 96, !dbg !34
  %99 = add nsw i32 %38, -96, !dbg !35
  %100 = add nsw i32 %56, -96, !dbg !35
  %101 = shl nsw i32 %99, 12, !dbg !36
  %102 = shl nsw i32 %100, 12, !dbg !36
  %103 = add nsw i32 %51, %101, !dbg !37
  %104 = add nsw i32 %69, %102, !dbg !37
  %105 = sext i32 %103 to i64, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !38
  %107 = sext i32 %104 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !39
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !39
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !39
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !39
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !39
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !39
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !39
  %119 = sext i32 %99 to i64, !dbg !40
  %120 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !40
  %121 = sext i32 %100 to i64, !dbg !40
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !40
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %97, i32 0, i1 %97) #1, !dbg !41
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %97, i32 0, i1 %97) #1, !dbg !41
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %97, i32 0, i1 %97) #1, !dbg !41
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %97, i32 0, i1 %97) #1, !dbg !41
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %98, i32 0, i1 %98) #1, !dbg !41
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %98, i32 0, i1 %98) #1, !dbg !41
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %98, i32 0, i1 %98) #1, !dbg !41
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %98, i32 0, i1 %98) #1, !dbg !41
  %131 = icmp eq i32 %45, 128, !dbg !42
  %132 = icmp eq i32 %58, 128, !dbg !42
  %133 = add nsw i32 %38, -128, !dbg !43
  %134 = add nsw i32 %56, -128, !dbg !43
  %135 = shl nsw i32 %133, 12, !dbg !44
  %136 = shl nsw i32 %134, 12, !dbg !44
  %137 = add nsw i32 %51, %135, !dbg !45
  %138 = add nsw i32 %69, %136, !dbg !45
  %139 = sext i32 %137 to i64, !dbg !46
  %140 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !46
  %141 = sext i32 %138 to i64, !dbg !46
  %142 = getelementptr float, ptr addrspace(1) %5, i64 %141, !dbg !46
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !47
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !47
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !47
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !47
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !47
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !47
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !47
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !47
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !47
  %153 = sext i32 %133 to i64, !dbg !48
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %153, !dbg !48
  %155 = sext i32 %134 to i64, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %6, i64 %155, !dbg !48
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %131, i32 0, i1 %131) #1, !dbg !49
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %131, i32 0, i1 %131) #1, !dbg !49
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %131, i32 0, i1 %131) #1, !dbg !49
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %131, i32 0, i1 %131) #1, !dbg !49
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %132, i32 0, i1 %132) #1, !dbg !49
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %132, i32 0, i1 %132) #1, !dbg !49
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %132, i32 0, i1 %132) #1, !dbg !49
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %132, i32 0, i1 %132) #1, !dbg !49
  %165 = icmp sgt i32 %38, 159, !dbg !22
  %166 = icmp sgt i32 %56, 159, !dbg !22
  %167 = add nsw i32 %38, -160, !dbg !50
  %168 = add nsw i32 %56, -160, !dbg !50
  %169 = shl nsw i32 %167, 12, !dbg !51
  %170 = shl nsw i32 %168, 12, !dbg !51
  %171 = add nsw i32 %51, %169, !dbg !28
  %172 = add nsw i32 %69, %170, !dbg !28
  %173 = sext i32 %171 to i64, !dbg !52
  %174 = getelementptr float, ptr addrspace(1) %7, i64 %173, !dbg !52
  %175 = sext i32 %172 to i64, !dbg !52
  %176 = getelementptr float, ptr addrspace(1) %7, i64 %175, !dbg !52
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #1, !dbg !53
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !53
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !53
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !53
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !53
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %176, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166) #1, !dbg !53
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !53
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !53
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !53
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !53
  %187 = sext i32 %167 to i64, !dbg !54
  %188 = getelementptr float, ptr addrspace(1) %8, i64 %187, !dbg !54
  %189 = sext i32 %168 to i64, !dbg !54
  %190 = getelementptr float, ptr addrspace(1) %8, i64 %189, !dbg !54
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %165, i32 0, i1 %165) #1, !dbg !55
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %165, i32 0, i1 %165) #1, !dbg !55
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %165, i32 0, i1 %165) #1, !dbg !55
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %165, i32 0, i1 %165) #1, !dbg !55
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %166, i32 0, i1 %166) #1, !dbg !55
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %166, i32 0, i1 %166) #1, !dbg !55
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %166, i32 0, i1 %166) #1, !dbg !55
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %166, i32 0, i1 %166) #1, !dbg !55
  %199 = insertelement <32 x i32> poison, i32 %186, i64 0, !dbg !53
  %200 = insertelement <32 x i32> %199, i32 %185, i64 1, !dbg !53
  %201 = insertelement <32 x i32> %200, i32 %184, i64 2, !dbg !53
  %202 = insertelement <32 x i32> %201, i32 %183, i64 3, !dbg !53
  %203 = insertelement <32 x i32> %202, i32 %181, i64 4, !dbg !53
  %204 = insertelement <32 x i32> %203, i32 %180, i64 5, !dbg !53
  %205 = insertelement <32 x i32> %204, i32 %179, i64 6, !dbg !53
  %206 = insertelement <32 x i32> %205, i32 %178, i64 7, !dbg !53
  %207 = insertelement <32 x i32> %206, i32 %152, i64 8, !dbg !53
  %208 = insertelement <32 x i32> %207, i32 %151, i64 9, !dbg !53
  %209 = insertelement <32 x i32> %208, i32 %150, i64 10, !dbg !53
  %210 = insertelement <32 x i32> %209, i32 %149, i64 11, !dbg !53
  %211 = insertelement <32 x i32> %210, i32 %147, i64 12, !dbg !53
  %212 = insertelement <32 x i32> %211, i32 %146, i64 13, !dbg !53
  %213 = insertelement <32 x i32> %212, i32 %145, i64 14, !dbg !53
  %214 = insertelement <32 x i32> %213, i32 %144, i64 15, !dbg !53
  %215 = insertelement <32 x i32> %214, i32 %118, i64 16, !dbg !53
  %216 = insertelement <32 x i32> %215, i32 %117, i64 17, !dbg !53
  %217 = insertelement <32 x i32> %216, i32 %116, i64 18, !dbg !53
  %218 = insertelement <32 x i32> %217, i32 %115, i64 19, !dbg !53
  %219 = insertelement <32 x i32> %218, i32 %113, i64 20, !dbg !53
  %220 = insertelement <32 x i32> %219, i32 %112, i64 21, !dbg !53
  %221 = insertelement <32 x i32> %220, i32 %111, i64 22, !dbg !53
  %222 = insertelement <32 x i32> %221, i32 %110, i64 23, !dbg !53
  %223 = insertelement <32 x i32> %222, i32 %84, i64 24, !dbg !53
  %224 = insertelement <32 x i32> %223, i32 %83, i64 25, !dbg !53
  %225 = insertelement <32 x i32> %224, i32 %82, i64 26, !dbg !53
  %226 = insertelement <32 x i32> %225, i32 %81, i64 27, !dbg !53
  %227 = insertelement <32 x i32> %226, i32 %79, i64 28, !dbg !53
  %228 = insertelement <32 x i32> %227, i32 %78, i64 29, !dbg !53
  %229 = insertelement <32 x i32> %228, i32 %77, i64 30, !dbg !53
  %230 = insertelement <32 x i32> %229, i32 %76, i64 31, !dbg !53
  %231 = bitcast <32 x i32> %230 to <32 x float>, !dbg !53
  %232 = insertelement <32 x i32> poison, i32 %198, i64 0, !dbg !55
  %233 = insertelement <32 x i32> %232, i32 %197, i64 1, !dbg !55
  %234 = insertelement <32 x i32> %233, i32 %196, i64 2, !dbg !55
  %235 = insertelement <32 x i32> %234, i32 %195, i64 3, !dbg !55
  %236 = insertelement <32 x i32> %235, i32 %194, i64 4, !dbg !55
  %237 = insertelement <32 x i32> %236, i32 %193, i64 5, !dbg !55
  %238 = insertelement <32 x i32> %237, i32 %192, i64 6, !dbg !55
  %239 = insertelement <32 x i32> %238, i32 %191, i64 7, !dbg !55
  %240 = insertelement <32 x i32> %239, i32 %164, i64 8, !dbg !55
  %241 = insertelement <32 x i32> %240, i32 %163, i64 9, !dbg !55
  %242 = insertelement <32 x i32> %241, i32 %162, i64 10, !dbg !55
  %243 = insertelement <32 x i32> %242, i32 %161, i64 11, !dbg !55
  %244 = insertelement <32 x i32> %243, i32 %160, i64 12, !dbg !55
  %245 = insertelement <32 x i32> %244, i32 %159, i64 13, !dbg !55
  %246 = insertelement <32 x i32> %245, i32 %158, i64 14, !dbg !55
  %247 = insertelement <32 x i32> %246, i32 %157, i64 15, !dbg !55
  %248 = insertelement <32 x i32> %247, i32 %130, i64 16, !dbg !55
  %249 = insertelement <32 x i32> %248, i32 %129, i64 17, !dbg !55
  %250 = insertelement <32 x i32> %249, i32 %128, i64 18, !dbg !55
  %251 = insertelement <32 x i32> %250, i32 %127, i64 19, !dbg !55
  %252 = insertelement <32 x i32> %251, i32 %126, i64 20, !dbg !55
  %253 = insertelement <32 x i32> %252, i32 %125, i64 21, !dbg !55
  %254 = insertelement <32 x i32> %253, i32 %124, i64 22, !dbg !55
  %255 = insertelement <32 x i32> %254, i32 %123, i64 23, !dbg !55
  %256 = insertelement <32 x i32> %255, i32 %96, i64 24, !dbg !55
  %257 = insertelement <32 x i32> %256, i32 %95, i64 25, !dbg !55
  %258 = insertelement <32 x i32> %257, i32 %94, i64 26, !dbg !55
  %259 = insertelement <32 x i32> %258, i32 %93, i64 27, !dbg !55
  %260 = insertelement <32 x i32> %259, i32 %92, i64 28, !dbg !55
  %261 = insertelement <32 x i32> %260, i32 %91, i64 29, !dbg !55
  %262 = insertelement <32 x i32> %261, i32 %90, i64 30, !dbg !55
  %263 = insertelement <32 x i32> %262, i32 %89, i64 31, !dbg !55
  %264 = bitcast <32 x i32> %263 to <32 x float>, !dbg !55
  %265 = fadd <32 x float> %231, %264, !dbg !56
  %266 = extractelement <32 x float> %265, i64 31, !dbg !57
  %267 = fmul float %266, 0x3FC99999A0000000, !dbg !58
  %268 = extractelement <32 x float> %265, i64 30, !dbg !57
  %269 = fmul float %268, 0x3FC99999A0000000, !dbg !58
  %270 = extractelement <32 x float> %265, i64 29, !dbg !57
  %271 = fmul float %270, 0x3FC99999A0000000, !dbg !58
  %272 = extractelement <32 x float> %265, i64 28, !dbg !57
  %273 = fmul float %272, 0x3FC99999A0000000, !dbg !58
  %274 = extractelement <32 x float> %265, i64 27, !dbg !57
  %275 = fmul float %274, 0x3FC99999A0000000, !dbg !58
  %276 = extractelement <32 x float> %265, i64 26, !dbg !57
  %277 = fmul float %276, 0x3FC99999A0000000, !dbg !58
  %278 = extractelement <32 x float> %265, i64 25, !dbg !57
  %279 = fmul float %278, 0x3FC99999A0000000, !dbg !58
  %280 = extractelement <32 x float> %265, i64 24, !dbg !57
  %281 = fmul float %280, 0x3FC99999A0000000, !dbg !58
  %282 = fcmp ogt <32 x float> %265, zeroinitializer, !dbg !59
  %283 = extractelement <32 x i1> %282, i64 31, !dbg !57
  %284 = select i1 %283, float %266, float %267, !dbg !57
  %285 = extractelement <32 x i1> %282, i64 30, !dbg !57
  %286 = select i1 %285, float %268, float %269, !dbg !57
  %287 = extractelement <32 x i1> %282, i64 29, !dbg !57
  %288 = select i1 %287, float %270, float %271, !dbg !57
  %289 = extractelement <32 x i1> %282, i64 28, !dbg !57
  %290 = select i1 %289, float %272, float %273, !dbg !57
  %291 = extractelement <32 x i1> %282, i64 27, !dbg !57
  %292 = select i1 %291, float %274, float %275, !dbg !57
  %293 = extractelement <32 x i1> %282, i64 26, !dbg !57
  %294 = select i1 %293, float %276, float %277, !dbg !57
  %295 = extractelement <32 x i1> %282, i64 25, !dbg !57
  %296 = select i1 %295, float %278, float %279, !dbg !57
  %297 = extractelement <32 x i1> %282, i64 24, !dbg !57
  %298 = select i1 %297, float %280, float %281, !dbg !57
  %299 = extractelement <32 x float> %265, i64 23, !dbg !60
  %300 = fmul float %299, 0x3FC99999A0000000, !dbg !61
  %301 = extractelement <32 x float> %265, i64 22, !dbg !60
  %302 = fmul float %301, 0x3FC99999A0000000, !dbg !61
  %303 = extractelement <32 x float> %265, i64 21, !dbg !60
  %304 = fmul float %303, 0x3FC99999A0000000, !dbg !61
  %305 = extractelement <32 x float> %265, i64 20, !dbg !60
  %306 = fmul float %305, 0x3FC99999A0000000, !dbg !61
  %307 = extractelement <32 x float> %265, i64 19, !dbg !60
  %308 = fmul float %307, 0x3FC99999A0000000, !dbg !61
  %309 = extractelement <32 x float> %265, i64 18, !dbg !60
  %310 = fmul float %309, 0x3FC99999A0000000, !dbg !61
  %311 = extractelement <32 x float> %265, i64 17, !dbg !60
  %312 = fmul float %311, 0x3FC99999A0000000, !dbg !61
  %313 = extractelement <32 x float> %265, i64 16, !dbg !60
  %314 = fmul float %313, 0x3FC99999A0000000, !dbg !61
  %315 = extractelement <32 x i1> %282, i64 23, !dbg !60
  %316 = select i1 %315, float %299, float %300, !dbg !60
  %317 = extractelement <32 x i1> %282, i64 22, !dbg !60
  %318 = select i1 %317, float %301, float %302, !dbg !60
  %319 = extractelement <32 x i1> %282, i64 21, !dbg !60
  %320 = select i1 %319, float %303, float %304, !dbg !60
  %321 = extractelement <32 x i1> %282, i64 20, !dbg !60
  %322 = select i1 %321, float %305, float %306, !dbg !60
  %323 = extractelement <32 x i1> %282, i64 19, !dbg !60
  %324 = select i1 %323, float %307, float %308, !dbg !60
  %325 = extractelement <32 x i1> %282, i64 18, !dbg !60
  %326 = select i1 %325, float %309, float %310, !dbg !60
  %327 = extractelement <32 x i1> %282, i64 17, !dbg !60
  %328 = select i1 %327, float %311, float %312, !dbg !60
  %329 = extractelement <32 x i1> %282, i64 16, !dbg !60
  %330 = select i1 %329, float %313, float %314, !dbg !60
  %331 = extractelement <32 x float> %265, i64 15, !dbg !62
  %332 = fmul float %331, 0x3FC99999A0000000, !dbg !63
  %333 = extractelement <32 x float> %265, i64 14, !dbg !62
  %334 = fmul float %333, 0x3FC99999A0000000, !dbg !63
  %335 = extractelement <32 x float> %265, i64 13, !dbg !62
  %336 = fmul float %335, 0x3FC99999A0000000, !dbg !63
  %337 = extractelement <32 x float> %265, i64 12, !dbg !62
  %338 = fmul float %337, 0x3FC99999A0000000, !dbg !63
  %339 = extractelement <32 x float> %265, i64 11, !dbg !62
  %340 = fmul float %339, 0x3FC99999A0000000, !dbg !63
  %341 = extractelement <32 x float> %265, i64 10, !dbg !62
  %342 = fmul float %341, 0x3FC99999A0000000, !dbg !63
  %343 = extractelement <32 x float> %265, i64 9, !dbg !62
  %344 = fmul float %343, 0x3FC99999A0000000, !dbg !63
  %345 = extractelement <32 x float> %265, i64 8, !dbg !62
  %346 = fmul float %345, 0x3FC99999A0000000, !dbg !63
  %347 = extractelement <32 x i1> %282, i64 15, !dbg !62
  %348 = select i1 %347, float %331, float %332, !dbg !62
  %349 = extractelement <32 x i1> %282, i64 14, !dbg !62
  %350 = select i1 %349, float %333, float %334, !dbg !62
  %351 = extractelement <32 x i1> %282, i64 13, !dbg !62
  %352 = select i1 %351, float %335, float %336, !dbg !62
  %353 = extractelement <32 x i1> %282, i64 12, !dbg !62
  %354 = select i1 %353, float %337, float %338, !dbg !62
  %355 = extractelement <32 x i1> %282, i64 11, !dbg !62
  %356 = select i1 %355, float %339, float %340, !dbg !62
  %357 = extractelement <32 x i1> %282, i64 10, !dbg !62
  %358 = select i1 %357, float %341, float %342, !dbg !62
  %359 = extractelement <32 x i1> %282, i64 9, !dbg !62
  %360 = select i1 %359, float %343, float %344, !dbg !62
  %361 = extractelement <32 x i1> %282, i64 8, !dbg !62
  %362 = select i1 %361, float %345, float %346, !dbg !62
  %363 = extractelement <32 x float> %265, i64 7, !dbg !64
  %364 = fmul float %363, 0x3FC99999A0000000, !dbg !65
  %365 = extractelement <32 x float> %265, i64 6, !dbg !64
  %366 = fmul float %365, 0x3FC99999A0000000, !dbg !65
  %367 = extractelement <32 x float> %265, i64 5, !dbg !64
  %368 = fmul float %367, 0x3FC99999A0000000, !dbg !65
  %369 = extractelement <32 x float> %265, i64 4, !dbg !64
  %370 = fmul float %369, 0x3FC99999A0000000, !dbg !65
  %371 = extractelement <32 x float> %265, i64 3, !dbg !64
  %372 = fmul float %371, 0x3FC99999A0000000, !dbg !65
  %373 = extractelement <32 x float> %265, i64 2, !dbg !64
  %374 = fmul float %373, 0x3FC99999A0000000, !dbg !65
  %375 = extractelement <32 x float> %265, i64 1, !dbg !64
  %376 = fmul float %375, 0x3FC99999A0000000, !dbg !65
  %377 = extractelement <32 x float> %265, i64 0, !dbg !64
  %378 = fmul float %377, 0x3FC99999A0000000, !dbg !65
  %379 = extractelement <32 x i1> %282, i64 7, !dbg !64
  %380 = select i1 %379, float %363, float %364, !dbg !64
  %381 = extractelement <32 x i1> %282, i64 6, !dbg !64
  %382 = select i1 %381, float %365, float %366, !dbg !64
  %383 = extractelement <32 x i1> %282, i64 5, !dbg !64
  %384 = select i1 %383, float %367, float %368, !dbg !64
  %385 = extractelement <32 x i1> %282, i64 4, !dbg !64
  %386 = select i1 %385, float %369, float %370, !dbg !64
  %387 = extractelement <32 x i1> %282, i64 3, !dbg !64
  %388 = select i1 %387, float %371, float %372, !dbg !64
  %389 = extractelement <32 x i1> %282, i64 2, !dbg !64
  %390 = select i1 %389, float %373, float %374, !dbg !64
  %391 = extractelement <32 x i1> %282, i64 1, !dbg !64
  %392 = select i1 %391, float %375, float %376, !dbg !64
  %393 = extractelement <32 x i1> %282, i64 0, !dbg !64
  %394 = select i1 %393, float %377, float %378, !dbg !64
  %395 = select i1 %165, float %380, float 0.000000e+00, !dbg !66
  %396 = select i1 %165, float %382, float 0.000000e+00, !dbg !66
  %397 = select i1 %165, float %384, float 0.000000e+00, !dbg !66
  %398 = select i1 %165, float %386, float 0.000000e+00, !dbg !66
  %399 = select i1 %166, float %388, float 0.000000e+00, !dbg !66
  %400 = select i1 %166, float %390, float 0.000000e+00, !dbg !66
  %401 = select i1 %166, float %392, float 0.000000e+00, !dbg !66
  %402 = select i1 %166, float %394, float 0.000000e+00, !dbg !66
  %403 = select i1 %131, float %348, float %395, !dbg !67
  %404 = select i1 %131, float %350, float %396, !dbg !67
  %405 = select i1 %131, float %352, float %397, !dbg !67
  %406 = select i1 %131, float %354, float %398, !dbg !67
  %407 = select i1 %132, float %356, float %399, !dbg !67
  %408 = select i1 %132, float %358, float %400, !dbg !67
  %409 = select i1 %132, float %360, float %401, !dbg !67
  %410 = select i1 %132, float %362, float %402, !dbg !67
  %411 = select i1 %97, float %316, float %403, !dbg !67
  %412 = select i1 %97, float %318, float %404, !dbg !67
  %413 = select i1 %97, float %320, float %405, !dbg !67
  %414 = select i1 %97, float %322, float %406, !dbg !67
  %415 = select i1 %98, float %324, float %407, !dbg !67
  %416 = select i1 %98, float %326, float %408, !dbg !67
  %417 = select i1 %98, float %328, float %409, !dbg !67
  %418 = select i1 %98, float %330, float %410, !dbg !67
  %419 = select i1 %46, float %284, float %411, !dbg !67
  %420 = select i1 %46, float %286, float %412, !dbg !67
  %421 = select i1 %46, float %288, float %413, !dbg !67
  %422 = select i1 %46, float %290, float %414, !dbg !67
  %423 = select i1 %59, float %292, float %415, !dbg !67
  %424 = select i1 %59, float %294, float %416, !dbg !67
  %425 = select i1 %59, float %296, float %417, !dbg !67
  %426 = select i1 %59, float %298, float %418, !dbg !67
  %427 = sext i32 %17 to i64, !dbg !68
  %428 = getelementptr float, ptr addrspace(1) %9, i64 %427, !dbg !68
  %429 = sext i32 %18 to i64, !dbg !68
  %430 = getelementptr float, ptr addrspace(1) %9, i64 %429, !dbg !68
  %431 = bitcast float %419 to i32, !dbg !69
  %432 = select i1 %39, i32 %41, i32 %431, !dbg !70
  %433 = bitcast float %420 to i32, !dbg !69
  %434 = select i1 %39, i32 %42, i32 %433, !dbg !70
  %435 = bitcast float %421 to i32, !dbg !69
  %436 = select i1 %39, i32 %43, i32 %435, !dbg !70
  %437 = bitcast float %422 to i32, !dbg !69
  %438 = select i1 %39, i32 %44, i32 %437, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %432, i32 %434, i32 %436, i32 %438, ptr addrspace(1) %428, i1 true) #1, !dbg !69
  %439 = bitcast float %423 to i32, !dbg !69
  %440 = select i1 %57, i32 %65, i32 %439, !dbg !70
  %441 = bitcast float %424 to i32, !dbg !69
  %442 = select i1 %57, i32 %66, i32 %441, !dbg !70
  %443 = bitcast float %425 to i32, !dbg !69
  %444 = select i1 %57, i32 %67, i32 %443, !dbg !70
  %445 = bitcast float %426 to i32, !dbg !69
  %446 = select i1 %57, i32 %68, i32 %445, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %442, i32 %444, i32 %446, ptr addrspace(1) %430, i1 true) #1, !dbg !69
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx54axs55osl2u5lsv4gj2rksfhifgmydmegoj6senhpemj55aoq.py", directory: "inductor_cache/x5")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 54, scope: !7)
!18 = !DILocation(line: 33, column: 47, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 38, column: 63, scope: !7)
!21 = !DILocation(line: 25, column: 19, scope: !7)
!22 = !DILocation(line: 76, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 79, column: 57, scope: !7)
!29 = !DILocation(line: 38, column: 56, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 68, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 44, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 50, scope: !7)
!36 = !DILocation(line: 52, column: 42, scope: !7)
!37 = !DILocation(line: 52, column: 56, scope: !7)
!38 = !DILocation(line: 52, column: 31, scope: !7)
!39 = !DILocation(line: 52, column: 68, scope: !7)
!40 = !DILocation(line: 53, column: 31, scope: !7)
!41 = !DILocation(line: 53, column: 44, scope: !7)
!42 = !DILocation(line: 65, column: 20, scope: !7)
!43 = !DILocation(line: 66, column: 51, scope: !7)
!44 = !DILocation(line: 66, column: 42, scope: !7)
!45 = !DILocation(line: 66, column: 57, scope: !7)
!46 = !DILocation(line: 66, column: 31, scope: !7)
!47 = !DILocation(line: 66, column: 69, scope: !7)
!48 = !DILocation(line: 67, column: 31, scope: !7)
!49 = !DILocation(line: 67, column: 45, scope: !7)
!50 = !DILocation(line: 79, column: 51, scope: !7)
!51 = !DILocation(line: 79, column: 42, scope: !7)
!52 = !DILocation(line: 79, column: 31, scope: !7)
!53 = !DILocation(line: 79, column: 69, scope: !7)
!54 = !DILocation(line: 80, column: 31, scope: !7)
!55 = !DILocation(line: 80, column: 45, scope: !7)
!56 = !DILocation(line: 81, column: 20, scope: !7)
!57 = !DILocation(line: 45, column: 35, scope: !7)
!58 = !DILocation(line: 44, column: 20, scope: !7)
!59 = !DILocation(line: 83, column: 20, scope: !7)
!60 = !DILocation(line: 59, column: 35, scope: !7)
!61 = !DILocation(line: 58, column: 20, scope: !7)
!62 = !DILocation(line: 73, column: 35, scope: !7)
!63 = !DILocation(line: 72, column: 20, scope: !7)
!64 = !DILocation(line: 86, column: 35, scope: !7)
!65 = !DILocation(line: 85, column: 20, scope: !7)
!66 = !DILocation(line: 88, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 93, column: 25, scope: !7)
!69 = !DILocation(line: 93, column: 37, scope: !7)
!70 = !DILocation(line: 92, column: 33, scope: !7)
!71 = !DILocation(line: 93, column: 4, scope: !7)
