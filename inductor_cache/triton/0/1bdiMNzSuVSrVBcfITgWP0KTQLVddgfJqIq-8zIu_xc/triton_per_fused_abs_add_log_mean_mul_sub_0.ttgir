#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":44:59)
#loc24 = loc(callsite(#loc1 at #loc14))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_abs_add_log_mean_mul_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.addf %3, %cst_1 : tensor<256xf32, #blocked> loc(#loc7)
    %8 = math.log %7 : tensor<256xf32, #blocked> loc(#loc8)
    %9 = arith.addf %6, %cst_1 : tensor<256xf32, #blocked> loc(#loc9)
    %10 = math.log %9 : tensor<256xf32, #blocked> loc(#loc10)
    %11 = arith.subf %8, %10 : tensor<256xf32, #blocked> loc(#loc11)
    %12 = math.absf %11 : tensor<256xf32, #blocked> loc(#loc12)
    %13 = "tt.reduce"(%12) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc14)), %arg5: f32 loc(callsite(#loc1 at #loc14))):
      %19 = arith.addf %arg4, %arg5 : f32 loc(#loc27)
      tt.reduce.return %19 : f32 loc(#loc23)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc23)
    %14 = arith.addf %13, %cst_0 : f32 loc(#loc26)
    %15 = arith.divf %14, %cst : f32 loc(#loc18)
    %16 = tt.splat %15 : f32 -> tensor<1xf32, #blocked1> loc(#loc18)
    gpu.barrier loc(#loc19)
    %17 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc20)
    %18 = tt.splat %17 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc20)
    tt.store %18, %16 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc21)
    tt.return loc(#loc22)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":27:26)
#loc3 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":31:30)
#loc4 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":31:35)
#loc5 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":32:30)
#loc6 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":32:35)
#loc7 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":36:18)
#loc8 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":37:23)
#loc9 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":39:18)
#loc10 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":40:23)
#loc11 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":41:19)
#loc12 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":42:24)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc17 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":44:45)
#loc18 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":46:20)
#loc19 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":47:4)
#loc20 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":48:28)
#loc21 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":48:63)
#loc22 = loc("inductor_cache/bm/cbmxj2vbpyxef3w6nskjpeyymh7czwx3eabgxbbtbjhkfdz4oh4q.py":48:4)
#loc23 = loc(callsite(#loc13 at #loc14))
#loc25 = loc(callsite(#loc15 at #loc13))
#loc26 = loc(callsite(#loc16 at #loc17))
#loc27 = loc(callsite(#loc25 at #loc14))
