; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = shl i32 %11, 2, !dbg !14
  %18 = and i32 %17, 60, !dbg !14
  %19 = srem i32 %15, 1024, !dbg !15
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = shl i32 %15, 6, !dbg !16
  %22 = shl i32 %16, 6, !dbg !16
  %23 = or disjoint i32 %21, %18, !dbg !17
  %24 = or disjoint i32 %22, %18, !dbg !17
  %25 = sext i32 %23 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %24 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !19
  %31 = sext i32 %19 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = sext i32 %20 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !23
  %49 = bitcast i32 %48 to float, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #5, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !25
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #5, !dbg !25
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #5, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #5, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #5, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #5, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #5, !dbg !27
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !27
  %75 = fadd float %49, 0x3EE4F8B580000000, !dbg !28
  %76 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i12 = icmp eq i32 %83, 0, !dbg !29
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i15 = icmp eq i32 %84, 0, !dbg !29
  br i1 %.not.i12, label %90, label %85, !dbg !29

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %88, label %86, !dbg !29

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %93, label %91, !dbg !29

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #5, !dbg !29
  br label %__nv_sqrtf.exit16, !dbg !29

__nv_sqrtf.exit16:                                ; preds = %86, %88, %91, %93
  %.0.i14 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !29
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i32 = icmp eq i32 %101, 0, !dbg !29
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i35 = icmp eq i32 %102, 0, !dbg !29
  br i1 %.not.i32, label %108, label %103, !dbg !29

103:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %106, label %104, !dbg !29

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #5, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #5, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

108:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %111, label %109, !dbg !29

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #5, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #5, !dbg !29
  br label %__nv_sqrtf.exit36, !dbg !29

__nv_sqrtf.exit36:                                ; preds = %104, %106, %109, %111
  %.0.i34 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !29
  %113 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %114 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !21
  %115 = insertelement <2 x i32> %114, i32 %38, i64 1, !dbg !21
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !21
  %117 = shufflevector <2 x float> %116, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !21
  %118 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %119 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %121 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %122 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %123 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %124 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %125 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !27
  %126 = insertelement <2 x i32> %125, i32 %70, i64 1, !dbg !27
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !27
  %128 = shufflevector <2 x float> %127, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %129 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !25
  %130 = insertelement <2 x i32> %129, i32 %60, i64 1, !dbg !25
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !25
  %132 = shufflevector <2 x float> %131, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !25
  %133 = or disjoint i32 %18, 3, !dbg !14
  %134 = or disjoint i32 %18, 2, !dbg !14
  %135 = or disjoint i32 %18, 1, !dbg !14
  %136 = and i32 %11, 31, !dbg !12
  %137 = or disjoint i32 %10, %136, !dbg !13
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !30
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #5, !dbg !30
  %140 = insertelement <8 x i32> poison, i32 %113, i64 0, !dbg !19
  %141 = insertelement <8 x i32> %140, i32 %118, i64 1, !dbg !19
  %142 = insertelement <8 x i32> %141, i32 %119, i64 2, !dbg !19
  %143 = insertelement <8 x i32> %142, i32 %120, i64 3, !dbg !19
  %144 = insertelement <8 x i32> %143, i32 %121, i64 4, !dbg !19
  %145 = insertelement <8 x i32> %144, i32 %122, i64 5, !dbg !19
  %146 = insertelement <8 x i32> %145, i32 %123, i64 6, !dbg !19
  %147 = insertelement <8 x i32> %146, i32 %124, i64 7, !dbg !19
  %148 = bitcast <8 x i32> %147 to <8 x float>, !dbg !19
  %149 = fsub <8 x float> %148, %117, !dbg !31
  %150 = insertelement <8 x float> poison, float %139, i64 0, !dbg !32
  %151 = insertelement <8 x float> %150, float %138, i64 1, !dbg !32
  %152 = shufflevector <8 x float> %151, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !32
  %153 = fmul <8 x float> %149, %152, !dbg !32
  %154 = fmul <8 x float> %153, %132, !dbg !33
  %155 = fadd <8 x float> %154, %128, !dbg !34
  %156 = fcmp ogt <8 x float> %155, zeroinitializer, !dbg !35
  %157 = extractelement <8 x float> %155, i64 7, !dbg !36
  %158 = fmul float %157, 0x3FC99999A0000000, !dbg !37
  %159 = extractelement <8 x float> %155, i64 6, !dbg !36
  %160 = fmul float %159, 0x3FC99999A0000000, !dbg !37
  %161 = extractelement <8 x float> %155, i64 5, !dbg !36
  %162 = fmul float %161, 0x3FC99999A0000000, !dbg !37
  %163 = extractelement <8 x float> %155, i64 4, !dbg !36
  %164 = fmul float %163, 0x3FC99999A0000000, !dbg !37
  %165 = extractelement <8 x float> %155, i64 3, !dbg !36
  %166 = fmul float %165, 0x3FC99999A0000000, !dbg !37
  %167 = extractelement <8 x float> %155, i64 2, !dbg !36
  %168 = fmul float %167, 0x3FC99999A0000000, !dbg !37
  %169 = extractelement <8 x float> %155, i64 1, !dbg !36
  %170 = fmul float %169, 0x3FC99999A0000000, !dbg !37
  %171 = extractelement <8 x float> %155, i64 0, !dbg !36
  %172 = fmul float %171, 0x3FC99999A0000000, !dbg !37
  %173 = extractelement <8 x i1> %156, i64 7, !dbg !36
  %174 = select i1 %173, float %157, float %158, !dbg !36
  %175 = extractelement <8 x i1> %156, i64 6, !dbg !36
  %176 = select i1 %175, float %159, float %160, !dbg !36
  %177 = extractelement <8 x i1> %156, i64 5, !dbg !36
  %178 = select i1 %177, float %161, float %162, !dbg !36
  %179 = extractelement <8 x i1> %156, i64 4, !dbg !36
  %180 = select i1 %179, float %163, float %164, !dbg !36
  %181 = extractelement <8 x i1> %156, i64 3, !dbg !36
  %182 = select i1 %181, float %165, float %166, !dbg !36
  %183 = extractelement <8 x i1> %156, i64 2, !dbg !36
  %184 = select i1 %183, float %167, float %168, !dbg !36
  %185 = extractelement <8 x i1> %156, i64 1, !dbg !36
  %186 = select i1 %185, float %169, float %170, !dbg !36
  %187 = extractelement <8 x i1> %156, i64 0, !dbg !36
  %188 = select i1 %187, float %171, float %172, !dbg !36
  %189 = fcmp ogt float %174, %176, !dbg !38
  %190 = fcmp uno float %174, 0.000000e+00, !dbg !43
  %191 = or i1 %189, %190, !dbg !44
  %192 = select i1 %191, float %174, float %176, !dbg !45
  %193 = fcmp ogt float %192, %178, !dbg !38
  %194 = fcmp uno float %192, 0.000000e+00, !dbg !43
  %195 = or i1 %193, %194, !dbg !44
  %196 = select i1 %195, float %192, float %178, !dbg !45
  %197 = fcmp ogt float %196, %180, !dbg !38
  %198 = fcmp uno float %196, 0.000000e+00, !dbg !43
  %199 = or i1 %197, %198, !dbg !44
  %200 = select i1 %199, float %196, float %180, !dbg !45
  %201 = fcmp ogt float %182, %184, !dbg !38
  %202 = fcmp uno float %182, 0.000000e+00, !dbg !43
  %203 = or i1 %201, %202, !dbg !44
  %204 = select i1 %203, float %182, float %184, !dbg !45
  %205 = fcmp ogt float %204, %186, !dbg !38
  %206 = fcmp uno float %204, 0.000000e+00, !dbg !43
  %207 = or i1 %205, %206, !dbg !44
  %208 = select i1 %207, float %204, float %186, !dbg !45
  %209 = fcmp ogt float %208, %188, !dbg !38
  %210 = fcmp uno float %208, 0.000000e+00, !dbg !43
  %211 = or i1 %209, %210, !dbg !44
  %212 = select i1 %211, float %208, float %188, !dbg !45
  %213 = bitcast float %200 to i32, !dbg !46
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !46
  %215 = bitcast i32 %214 to float, !dbg !46
  %216 = fcmp ogt float %200, %215, !dbg !38
  %217 = fcmp uno float %200, 0.000000e+00, !dbg !43
  %218 = or i1 %216, %217, !dbg !44
  %219 = select i1 %218, float %200, float %215, !dbg !45
  %220 = bitcast float %219 to i32, !dbg !46
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !46
  %222 = bitcast i32 %221 to float, !dbg !46
  %223 = fcmp ogt float %219, %222, !dbg !38
  %224 = fcmp uno float %219, 0.000000e+00, !dbg !43
  %225 = or i1 %223, %224, !dbg !44
  %226 = select i1 %225, float %219, float %222, !dbg !45
  %227 = bitcast float %226 to i32, !dbg !46
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !46
  %229 = bitcast i32 %228 to float, !dbg !46
  %230 = fcmp ogt float %226, %229, !dbg !38
  %231 = fcmp uno float %226, 0.000000e+00, !dbg !43
  %232 = or i1 %230, %231, !dbg !44
  %233 = select i1 %232, float %226, float %229, !dbg !45
  %234 = bitcast float %233 to i32, !dbg !46
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 1, i32 31), !dbg !46
  %236 = bitcast i32 %235 to float, !dbg !46
  %237 = fcmp ogt float %233, %236, !dbg !38
  %238 = fcmp uno float %233, 0.000000e+00, !dbg !43
  %239 = or i1 %237, %238, !dbg !44
  %240 = bitcast float %212 to i32, !dbg !46
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !46
  %242 = bitcast i32 %241 to float, !dbg !46
  %243 = fcmp ogt float %212, %242, !dbg !38
  %244 = fcmp uno float %212, 0.000000e+00, !dbg !43
  %245 = or i1 %243, %244, !dbg !44
  %246 = select i1 %245, float %212, float %242, !dbg !45
  %247 = bitcast float %246 to i32, !dbg !46
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 4, i32 31), !dbg !46
  %249 = bitcast i32 %248 to float, !dbg !46
  %250 = fcmp ogt float %246, %249, !dbg !38
  %251 = fcmp uno float %246, 0.000000e+00, !dbg !43
  %252 = or i1 %250, %251, !dbg !44
  %253 = select i1 %252, float %246, float %249, !dbg !45
  %254 = bitcast float %253 to i32, !dbg !46
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 2, i32 31), !dbg !46
  %256 = bitcast i32 %255 to float, !dbg !46
  %257 = fcmp ogt float %253, %256, !dbg !38
  %258 = fcmp uno float %253, 0.000000e+00, !dbg !43
  %259 = or i1 %257, %258, !dbg !44
  %260 = select i1 %259, float %253, float %256, !dbg !45
  %261 = bitcast float %260 to i32, !dbg !46
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !46
  %263 = bitcast i32 %262 to float, !dbg !46
  %264 = fcmp ogt float %260, %263, !dbg !38
  %265 = fcmp uno float %260, 0.000000e+00, !dbg !43
  %266 = or i1 %264, %265, !dbg !44
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %268 = select i1 %239, i32 %234, i32 %235, !dbg !45
  %269 = insertelement <1 x i32> poison, i32 %268, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %269, i1 true) #5, !dbg !47
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  %271 = select i1 %266, i32 %261, i32 %262, !dbg !45
  %272 = insertelement <1 x i32> poison, i32 %271, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %272, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !47
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !47
  %275 = fcmp oeq float %174, %176, !dbg !48
  %276 = or i1 %275, %190, !dbg !50
  %277 = or i1 %189, %276, !dbg !50
  %278 = select i1 %277, float %174, float %176, !dbg !51
  %279 = select i1 %277, i32 %18, i32 %135, !dbg !52
  %280 = fcmp ogt float %278, %178, !dbg !53
  %281 = fcmp oeq float %278, %178, !dbg !48
  %282 = fcmp uno float %278, 0.000000e+00, !dbg !54
  %283 = fcmp uno float %178, 0.000000e+00, !dbg !55
  %284 = xor i1 %283, true, !dbg !56
  %285 = and i1 %282, %284, !dbg !57
  %286 = or i1 %280, %285, !dbg !58
  %287 = and i1 %283, %282, !dbg !59
  %288 = or i1 %281, %287, !dbg !60
  %289 = icmp samesign ult i32 %279, %134, !dbg !61
  %290 = and i1 %289, %288, !dbg !62
  %291 = or i1 %286, %290, !dbg !50
  %292 = select i1 %291, float %278, float %178, !dbg !51
  %293 = select i1 %291, i32 %279, i32 %134, !dbg !52
  %294 = fcmp ogt float %292, %180, !dbg !53
  %295 = fcmp oeq float %292, %180, !dbg !48
  %296 = fcmp uno float %292, 0.000000e+00, !dbg !54
  %297 = fcmp uno float %180, 0.000000e+00, !dbg !55
  %298 = xor i1 %297, true, !dbg !56
  %299 = and i1 %296, %298, !dbg !57
  %300 = or i1 %294, %299, !dbg !58
  %301 = and i1 %297, %296, !dbg !59
  %302 = or i1 %295, %301, !dbg !60
  %303 = icmp samesign ult i32 %293, %133, !dbg !61
  %304 = and i1 %303, %302, !dbg !62
  %305 = or i1 %300, %304, !dbg !50
  %306 = select i1 %305, float %292, float %180, !dbg !51
  %307 = select i1 %305, i32 %293, i32 %133, !dbg !52
  %308 = fcmp oeq float %182, %184, !dbg !48
  %309 = or i1 %308, %202, !dbg !50
  %310 = or i1 %201, %309, !dbg !50
  %311 = select i1 %310, float %182, float %184, !dbg !51
  %312 = select i1 %310, i32 %18, i32 %135, !dbg !52
  %313 = fcmp ogt float %311, %186, !dbg !53
  %314 = fcmp oeq float %311, %186, !dbg !48
  %315 = fcmp uno float %311, 0.000000e+00, !dbg !54
  %316 = fcmp uno float %186, 0.000000e+00, !dbg !55
  %317 = xor i1 %316, true, !dbg !56
  %318 = and i1 %315, %317, !dbg !57
  %319 = or i1 %313, %318, !dbg !58
  %320 = and i1 %316, %315, !dbg !59
  %321 = or i1 %314, %320, !dbg !60
  %322 = icmp samesign ult i32 %312, %134, !dbg !61
  %323 = and i1 %322, %321, !dbg !62
  %324 = or i1 %319, %323, !dbg !50
  %325 = select i1 %324, float %311, float %186, !dbg !51
  %326 = select i1 %324, i32 %312, i32 %134, !dbg !52
  %327 = fcmp ogt float %325, %188, !dbg !53
  %328 = fcmp oeq float %325, %188, !dbg !48
  %329 = fcmp uno float %325, 0.000000e+00, !dbg !54
  %330 = fcmp uno float %188, 0.000000e+00, !dbg !55
  %331 = xor i1 %330, true, !dbg !56
  %332 = and i1 %329, %331, !dbg !57
  %333 = or i1 %327, %332, !dbg !58
  %334 = and i1 %330, %329, !dbg !59
  %335 = or i1 %328, %334, !dbg !60
  %336 = icmp samesign ult i32 %326, %133, !dbg !61
  %337 = and i1 %336, %335, !dbg !62
  %338 = or i1 %333, %337, !dbg !50
  %339 = select i1 %338, float %325, float %188, !dbg !51
  %340 = select i1 %338, i32 %326, i32 %133, !dbg !52
  %341 = bitcast float %306 to i32, !dbg !63
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 8, i32 31), !dbg !63
  %343 = bitcast i32 %342 to float, !dbg !63
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !63
  %345 = fcmp ogt float %306, %343, !dbg !53
  %346 = fcmp oeq float %306, %343, !dbg !48
  %347 = fcmp uno float %306, 0.000000e+00, !dbg !54
  %348 = fcmp uno float %343, 0.000000e+00, !dbg !55
  %349 = xor i1 %348, true, !dbg !56
  %350 = and i1 %347, %349, !dbg !57
  %351 = or i1 %345, %350, !dbg !58
  %352 = and i1 %348, %347, !dbg !59
  %353 = or i1 %346, %352, !dbg !60
  %354 = icmp slt i32 %307, %344, !dbg !61
  %355 = and i1 %354, %353, !dbg !62
  %356 = or i1 %351, %355, !dbg !50
  %357 = select i1 %356, float %306, float %343, !dbg !51
  %358 = select i1 %356, i32 %307, i32 %344, !dbg !52
  %359 = bitcast float %357 to i32, !dbg !63
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 4, i32 31), !dbg !63
  %361 = bitcast i32 %360 to float, !dbg !63
  %362 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 4, i32 31), !dbg !63
  %363 = fcmp ogt float %357, %361, !dbg !53
  %364 = fcmp oeq float %357, %361, !dbg !48
  %365 = fcmp uno float %357, 0.000000e+00, !dbg !54
  %366 = fcmp uno float %361, 0.000000e+00, !dbg !55
  %367 = xor i1 %366, true, !dbg !56
  %368 = and i1 %365, %367, !dbg !57
  %369 = or i1 %363, %368, !dbg !58
  %370 = and i1 %366, %365, !dbg !59
  %371 = or i1 %364, %370, !dbg !60
  %372 = icmp slt i32 %358, %362, !dbg !61
  %373 = and i1 %372, %371, !dbg !62
  %374 = or i1 %369, %373, !dbg !50
  %375 = select i1 %374, float %357, float %361, !dbg !51
  %376 = select i1 %374, i32 %358, i32 %362, !dbg !52
  %377 = bitcast float %375 to i32, !dbg !63
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 2, i32 31), !dbg !63
  %379 = bitcast i32 %378 to float, !dbg !63
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 2, i32 31), !dbg !63
  %381 = fcmp ogt float %375, %379, !dbg !53
  %382 = fcmp oeq float %375, %379, !dbg !48
  %383 = fcmp uno float %375, 0.000000e+00, !dbg !54
  %384 = fcmp uno float %379, 0.000000e+00, !dbg !55
  %385 = xor i1 %384, true, !dbg !56
  %386 = and i1 %383, %385, !dbg !57
  %387 = or i1 %381, %386, !dbg !58
  %388 = and i1 %384, %383, !dbg !59
  %389 = or i1 %382, %388, !dbg !60
  %390 = icmp slt i32 %376, %380, !dbg !61
  %391 = and i1 %390, %389, !dbg !62
  %392 = or i1 %387, %391, !dbg !50
  %393 = select i1 %392, float %375, float %379, !dbg !51
  %394 = select i1 %392, i32 %376, i32 %380, !dbg !52
  %395 = bitcast float %393 to i32, !dbg !63
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 1, i32 31), !dbg !63
  %397 = bitcast i32 %396 to float, !dbg !63
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 1, i32 31), !dbg !63
  %399 = fcmp ogt float %393, %397, !dbg !53
  %400 = fcmp oeq float %393, %397, !dbg !48
  %401 = fcmp uno float %393, 0.000000e+00, !dbg !54
  %402 = fcmp uno float %397, 0.000000e+00, !dbg !55
  %403 = xor i1 %402, true, !dbg !56
  %404 = and i1 %401, %403, !dbg !57
  %405 = or i1 %399, %404, !dbg !58
  %406 = and i1 %402, %401, !dbg !59
  %407 = or i1 %400, %406, !dbg !60
  %408 = icmp slt i32 %394, %398, !dbg !61
  %409 = and i1 %408, %407, !dbg !62
  %410 = or i1 %405, %409, !dbg !50
  %411 = select i1 %410, i32 %394, i32 %398, !dbg !52
  %412 = bitcast float %339 to i32, !dbg !63
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 8, i32 31), !dbg !63
  %414 = bitcast i32 %413 to float, !dbg !63
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !63
  %416 = fcmp ogt float %339, %414, !dbg !53
  %417 = fcmp oeq float %339, %414, !dbg !48
  %418 = fcmp uno float %339, 0.000000e+00, !dbg !54
  %419 = fcmp uno float %414, 0.000000e+00, !dbg !55
  %420 = xor i1 %419, true, !dbg !56
  %421 = and i1 %418, %420, !dbg !57
  %422 = or i1 %416, %421, !dbg !58
  %423 = and i1 %418, %419, !dbg !59
  %424 = or i1 %417, %423, !dbg !60
  %425 = icmp slt i32 %340, %415, !dbg !61
  %426 = and i1 %425, %424, !dbg !62
  %427 = or i1 %422, %426, !dbg !50
  %428 = select i1 %427, float %339, float %414, !dbg !51
  %429 = select i1 %427, i32 %340, i32 %415, !dbg !52
  %430 = bitcast float %428 to i32, !dbg !63
  %431 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 4, i32 31), !dbg !63
  %432 = bitcast i32 %431 to float, !dbg !63
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 4, i32 31), !dbg !63
  %434 = fcmp ogt float %428, %432, !dbg !53
  %435 = fcmp oeq float %428, %432, !dbg !48
  %436 = fcmp uno float %428, 0.000000e+00, !dbg !54
  %437 = fcmp uno float %432, 0.000000e+00, !dbg !55
  %438 = xor i1 %437, true, !dbg !56
  %439 = and i1 %436, %438, !dbg !57
  %440 = or i1 %434, %439, !dbg !58
  %441 = and i1 %437, %436, !dbg !59
  %442 = or i1 %435, %441, !dbg !60
  %443 = icmp slt i32 %429, %433, !dbg !61
  %444 = and i1 %443, %442, !dbg !62
  %445 = or i1 %440, %444, !dbg !50
  %446 = select i1 %445, float %428, float %432, !dbg !51
  %447 = select i1 %445, i32 %429, i32 %433, !dbg !52
  %448 = bitcast float %446 to i32, !dbg !63
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !63
  %450 = bitcast i32 %449 to float, !dbg !63
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 2, i32 31), !dbg !63
  %452 = fcmp ogt float %446, %450, !dbg !53
  %453 = fcmp oeq float %446, %450, !dbg !48
  %454 = fcmp uno float %446, 0.000000e+00, !dbg !54
  %455 = fcmp uno float %450, 0.000000e+00, !dbg !55
  %456 = xor i1 %455, true, !dbg !56
  %457 = and i1 %454, %456, !dbg !57
  %458 = or i1 %452, %457, !dbg !58
  %459 = and i1 %455, %454, !dbg !59
  %460 = or i1 %453, %459, !dbg !60
  %461 = icmp slt i32 %447, %451, !dbg !61
  %462 = and i1 %461, %460, !dbg !62
  %463 = or i1 %458, %462, !dbg !50
  %464 = select i1 %463, float %446, float %450, !dbg !51
  %465 = select i1 %463, i32 %447, i32 %451, !dbg !52
  %466 = bitcast float %464 to i32, !dbg !63
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %466, i32 1, i32 31), !dbg !63
  %468 = bitcast i32 %467 to float, !dbg !63
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 1, i32 31), !dbg !63
  %470 = fcmp ogt float %464, %468, !dbg !53
  %471 = fcmp oeq float %464, %468, !dbg !48
  %472 = fcmp uno float %464, 0.000000e+00, !dbg !54
  %473 = fcmp uno float %468, 0.000000e+00, !dbg !55
  %474 = xor i1 %473, true, !dbg !56
  %475 = and i1 %472, %474, !dbg !57
  %476 = or i1 %470, %475, !dbg !58
  %477 = and i1 %473, %472, !dbg !59
  %478 = or i1 %471, %477, !dbg !60
  %479 = icmp slt i32 %465, %469, !dbg !61
  %480 = and i1 %479, %478, !dbg !62
  %481 = or i1 %476, %480, !dbg !50
  %482 = select i1 %481, i32 %465, i32 %469, !dbg !52
  %483 = sext i32 %137 to i64, !dbg !64
  %484 = getelementptr float, ptr addrspace(1) %5, i64 %483, !dbg !64
  %485 = and i32 %11, 224, !dbg !65
  %486 = icmp eq i32 %485, 0, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %274, ptr addrspace(1) %484, i1 %486) #5, !dbg !65
  %487 = getelementptr i64, ptr addrspace(1) %6, i64 %483, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %488 = insertelement <1 x i32> poison, i32 %411, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %488, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %488, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %488, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %488, i1 true) #5, !dbg !67
  %489 = insertelement <1 x i32> poison, i32 %482, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %489, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %489, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %489, i1 true) #5, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %489, i1 true) #5, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %490 = load i32, ptr addrspace(3) %273, align 4, !dbg !67
  %491 = sext i32 %490 to i64, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %491, ptr addrspace(1) %487, i1 %486) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c56myxijulxrfxlcyl7fteri2mrlsb3ztldnjth35itvlytjfmif.py", directory: "inductor_cache/56")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_leaky_relu_max_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 45, column: 19, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 35, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 54, column: 39, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !42)
!46 = !DILocation(line: 131, column: 29, scope: !41, inlinedAt: !42)
!47 = !DILocation(line: 54, column: 42, scope: !7)
!48 = !DILocation(line: 153, column: 23, scope: !39, inlinedAt: !49)
!49 = !DILocation(line: 56, column: 71, scope: !7)
!50 = !DILocation(line: 162, column: 12, scope: !39, inlinedAt: !49)
!51 = !DILocation(line: 163, column: 35, scope: !39, inlinedAt: !49)
!52 = !DILocation(line: 163, column: 69, scope: !39, inlinedAt: !49)
!53 = !DILocation(line: 152, column: 21, scope: !39, inlinedAt: !49)
!54 = !DILocation(line: 155, column: 29, scope: !39, inlinedAt: !49)
!55 = !DILocation(line: 156, column: 29, scope: !39, inlinedAt: !49)
!56 = !DILocation(line: 157, column: 32, scope: !39, inlinedAt: !49)
!57 = !DILocation(line: 157, column: 28, scope: !39, inlinedAt: !49)
!58 = !DILocation(line: 157, column: 16, scope: !39, inlinedAt: !49)
!59 = !DILocation(line: 159, column: 29, scope: !39, inlinedAt: !49)
!60 = !DILocation(line: 159, column: 17, scope: !39, inlinedAt: !49)
!61 = !DILocation(line: 162, column: 31, scope: !39, inlinedAt: !49)
!62 = !DILocation(line: 162, column: 21, scope: !39, inlinedAt: !49)
!63 = !DILocation(line: 173, column: 42, scope: !41, inlinedAt: !49)
!64 = !DILocation(line: 58, column: 25, scope: !7)
!65 = !DILocation(line: 58, column: 37, scope: !7)
!66 = !DILocation(line: 59, column: 25, scope: !7)
!67 = !DILocation(line: 59, column: 37, scope: !7)
!68 = !DILocation(line: 59, column: 4, scope: !7)
