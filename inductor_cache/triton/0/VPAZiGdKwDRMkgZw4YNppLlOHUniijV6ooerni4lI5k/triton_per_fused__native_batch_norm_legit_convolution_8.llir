; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 1024, !dbg !14
  %15 = shl i32 %9, 2, !dbg !15
  %16 = and i32 %15, 60, !dbg !15
  %17 = srem i32 %13, 256, !dbg !16
  %18 = shl i32 %13, 6, !dbg !17
  %19 = or disjoint i32 %18, %16, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %27 = bitcast i32 %23 to float, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = sext i32 %17 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #5, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #5, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #5, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = fadd float %27, %37, !dbg !23
  %39 = fadd float %28, %37, !dbg !23
  %40 = fadd float %29, %37, !dbg !23
  %41 = fadd float %30, %37, !dbg !23
  %42 = fadd float %38, %39, !dbg !24
  %43 = fadd float %40, %42, !dbg !24
  %44 = fadd float %41, %43, !dbg !24
  %45 = select i1 %14, float %44, float 0.000000e+00, !dbg !24
  %46 = bitcast float %45 to i32, !dbg !29
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !29
  %48 = bitcast i32 %47 to float, !dbg !29
  %49 = fadd float %45, %48, !dbg !24
  %50 = bitcast float %49 to i32, !dbg !29
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %49, %52, !dbg !24
  %54 = bitcast float %53 to i32, !dbg !29
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !29
  %56 = bitcast i32 %55 to float, !dbg !29
  %57 = fadd float %53, %56, !dbg !24
  %58 = bitcast float %57 to i32, !dbg !29
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = fadd float %57, %60, !dbg !24
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %63 = bitcast float %61 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %65 = load float, ptr addrspace(3) %64, align 4, !dbg !30
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 6.400000e+01) #5, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 6.400000e+01) #5, !dbg !30
  %68 = fsub float %38, %67, !dbg !31
  %69 = fsub float %39, %67, !dbg !31
  %70 = fsub float %40, %67, !dbg !31
  %71 = fsub float %41, %67, !dbg !31
  %72 = fmul float %68, %68, !dbg !32
  %73 = fmul float %69, %69, !dbg !32
  %74 = fmul float %70, %70, !dbg !32
  %75 = fmul float %71, %71, !dbg !32
  %76 = fadd float %72, %73, !dbg !33
  %77 = fadd float %74, %76, !dbg !33
  %78 = fadd float %75, %77, !dbg !33
  %79 = select i1 %14, float %78, float 0.000000e+00, !dbg !33
  %80 = bitcast float %79 to i32, !dbg !35
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !35
  %82 = bitcast i32 %81 to float, !dbg !35
  %83 = fadd float %79, %82, !dbg !33
  %84 = bitcast float %83 to i32, !dbg !35
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !35
  %86 = bitcast i32 %85 to float, !dbg !35
  %87 = fadd float %83, %86, !dbg !33
  %88 = bitcast float %87 to i32, !dbg !35
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !35
  %90 = bitcast i32 %89 to float, !dbg !35
  %91 = fadd float %87, %90, !dbg !33
  %92 = bitcast float %91 to i32, !dbg !35
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = fadd float %91, %94, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %96 = bitcast float %95 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %96, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %97 = load float, ptr addrspace(3) %64, align 4, !dbg !36
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 6.400000e+01) #5, !dbg !37
  %99 = fadd float %98, 0x3EE4F8B580000000, !dbg !38
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %100, 0, !dbg !36
  br i1 %.not.i, label %103, label %101, !dbg !36

101:                                              ; preds = %6
  %102 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %99), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

103:                                              ; preds = %6
  %104 = tail call float @llvm.nvvm.rsqrt.approx.f(float %99), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %101, %103
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], !dbg !36
  %105 = or disjoint i32 %8, %12, !dbg !13
  %106 = icmp slt i32 %105, 1024, !dbg !14
  %107 = bitcast float %38 to i32, !dbg !39
  %108 = bitcast float %39 to i32, !dbg !39
  %109 = bitcast float %40 to i32, !dbg !39
  %110 = bitcast float %41 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %107, i32 %108, i32 %109, i32 %110, ptr addrspace(1) %21, i1 %14) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %111 = sext i32 %105 to i64, !dbg !41
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !41
  %113 = and i32 %9, 120, !dbg !42
  %114 = icmp eq i32 %113, 0, !dbg !42
  %115 = bitcast float %.0.i to i32, !dbg !42
  %116 = and i1 %114, %106, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %112, i1 %116) #5, !dbg !42
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !43
  %118 = bitcast float %66 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %117, i1 %116) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch3enj2j5f3wlyidntbcapchbxskuh7cwgznatra66c6ltfwnqvf.py", directory: "inductor_cache/h3")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_8", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 18, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !34)
!36 = !DILocation(line: 52, column: 28, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 47, scope: !7)
!40 = !DILocation(line: 54, column: 4, scope: !7)
!41 = !DILocation(line: 55, column: 28, scope: !7)
!42 = !DILocation(line: 55, column: 40, scope: !7)
!43 = !DILocation(line: 56, column: 25, scope: !7)
!44 = !DILocation(line: 56, column: 37, scope: !7)
!45 = !DILocation(line: 56, column: 4, scope: !7)
