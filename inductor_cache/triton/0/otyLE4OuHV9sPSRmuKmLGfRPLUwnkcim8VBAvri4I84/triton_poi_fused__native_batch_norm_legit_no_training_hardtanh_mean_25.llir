; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 5120, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 1280, !dbg !15
  %15 = mul i32 %14, 1280, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = mul i32 %14, 5120, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #3, !dbg !20
  %21 = sext i32 %.decomposed to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #3, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %13) #3, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %13) #3, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %13) #3, !dbg !28
  %31 = add i32 %17, 1280, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #3, !dbg !31
  %35 = add i32 %17, 2560, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %13) #3, !dbg !34
  %39 = add i32 %17, 3840, !dbg !35
  %40 = sext i32 %39 to i64, !dbg !36
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !36
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #3, !dbg !37
  %43 = fadd float %26, 0x3EE4F8B580000000, !dbg !38
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %44, 0, !dbg !39
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %45, 0, !dbg !39
  br i1 %.not.i, label %51, label %46, !dbg !39

46:                                               ; preds = %7
  br i1 %.not1.i, label %49, label %47, !dbg !39

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

51:                                               ; preds = %7
  br i1 %.not1.i, label %54, label %52, !dbg !39

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %47, %49, %52, %54
  %.0.i = phi float [ %48, %47 ], [ %50, %49 ], [ %53, %52 ], [ %55, %54 ], !dbg !39
  %56 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %57 = insertelement <2 x i32> %56, i32 %34, i64 1, !dbg !20
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !20
  %59 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !34
  %60 = insertelement <2 x i32> %59, i32 %42, i64 1, !dbg !34
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !34
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %63 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !41
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !41
  %65 = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %66 = fsub <2 x float> %58, %65, !dbg !41
  %67 = insertelement <2 x float> poison, float %62, i64 0, !dbg !42
  %68 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !42
  %69 = fmul <2 x float> %66, %68, !dbg !42
  %70 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !43
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !43
  %72 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %73 = fmul <2 x float> %69, %72, !dbg !43
  %74 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !44
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !44
  %76 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !44
  %77 = fadd <2 x float> %73, %76, !dbg !44
  %78 = fcmp ole <2 x float> %77, zeroinitializer, !dbg !45
  %79 = select <2 x i1> %78, <2 x float> zeroinitializer, <2 x float> %77, !dbg !45
  %80 = fcmp olt <2 x float> %79, splat (float 6.000000e+00), !dbg !49
  %81 = fcmp uno <2 x float> %79, zeroinitializer, !dbg !51
  %82 = or <2 x i1> %80, %81, !dbg !52
  %83 = select <2 x i1> %82, <2 x float> %79, <2 x float> splat (float 6.000000e+00), !dbg !53
  %shift = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %84 = fadd <2 x float> %83, %shift, !dbg !54
  %85 = extractelement <2 x float> %84, i64 0, !dbg !54
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 2.000000e+00) #3, !dbg !55
  %87 = fsub <2 x float> %61, %65, !dbg !56
  %88 = fmul <2 x float> %87, %68, !dbg !57
  %89 = fmul <2 x float> %88, %72, !dbg !58
  %90 = fadd <2 x float> %89, %76, !dbg !59
  %91 = fcmp ole <2 x float> %90, zeroinitializer, !dbg !60
  %92 = select <2 x i1> %91, <2 x float> zeroinitializer, <2 x float> %90, !dbg !60
  %93 = fcmp olt <2 x float> %92, splat (float 6.000000e+00), !dbg !62
  %94 = fcmp uno <2 x float> %92, zeroinitializer, !dbg !64
  %95 = or <2 x i1> %93, %94, !dbg !65
  %96 = select <2 x i1> %95, <2 x float> %92, <2 x float> splat (float 6.000000e+00), !dbg !66
  %shift4 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !67
  %97 = fadd <2 x float> %96, %shift4, !dbg !67
  %98 = extractelement <2 x float> %97, i64 0, !dbg !67
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 2.000000e+00) #3, !dbg !68
  %100 = fadd float %86, %99, !dbg !69
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 2.000000e+00) #3, !dbg !70
  %102 = sext i32 %12 to i64, !dbg !71
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %102, !dbg !71
  %104 = bitcast float %101 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %103, i1 %13) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4bz3olagc5bcwkedobysufbhlts6uj34nxe7i42i3q6tnnlgk5i.py", directory: "inductor_cache/4b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_hardtanh_mean_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 53, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 53, scope: !7)
!35 = !DILocation(line: 34, column: 43, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 53, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 26, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 47, column: 42, scope: !7)
!49 = !DILocation(line: 110, column: 15, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !46, inlinedAt: !50)
!52 = !DILocation(line: 112, column: 16, scope: !46, inlinedAt: !50)
!53 = !DILocation(line: 113, column: 29, scope: !46, inlinedAt: !50)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !61)
!61 = !DILocation(line: 63, column: 42, scope: !7)
!62 = !DILocation(line: 110, column: 15, scope: !46, inlinedAt: !63)
!63 = !DILocation(line: 64, column: 42, scope: !7)
!64 = !DILocation(line: 112, column: 21, scope: !46, inlinedAt: !63)
!65 = !DILocation(line: 112, column: 16, scope: !46, inlinedAt: !63)
!66 = !DILocation(line: 113, column: 29, scope: !46, inlinedAt: !63)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 25, scope: !7)
!72 = !DILocation(line: 75, column: 37, scope: !7)
!73 = !DILocation(line: 75, column: 4, scope: !7)
