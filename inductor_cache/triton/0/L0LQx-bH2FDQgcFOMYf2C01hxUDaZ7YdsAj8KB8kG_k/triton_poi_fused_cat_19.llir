; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 512, !dbg !13
  %14 = icmp slt i32 %12, 984064, !dbg !14
  %15 = icmp slt i32 %13, 984064, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 256, !dbg !15
  %17 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %13, 256, !dbg !15
  %19 = icmp slt i32 %.decomposed, 128, !dbg !17
  %20 = shl nsw i32 %16, 7, !dbg !18
  %21 = shl nsw i32 %18, 7, !dbg !18
  %22 = add nsw i32 %20, %.decomposed, !dbg !19
  %23 = add nsw i32 %21, %.decomposed, !dbg !19
  %24 = sext i32 %22 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = sext i32 %23 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = and i1 %14, %19, !dbg !21
  %29 = and i1 %15, %19, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %40 = sext i32 %.decomposed to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %52 = icmp sgt i32 %.decomposed, 127, !dbg !25
  %53 = add nsw i32 %.decomposed, -128, !dbg !26
  %54 = add nsw i32 %20, %53, !dbg !27
  %55 = add nsw i32 %21, %53, !dbg !27
  %56 = sext i32 %54 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !28
  %58 = sext i32 %55 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !28
  %60 = and i1 %14, %52, !dbg !29
  %61 = and i1 %15, %52, !dbg !29
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %72 = sext i32 %53 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = insertelement <16 x i32> poison, i32 %71, i64 0, !dbg !30
  %85 = insertelement <16 x i32> %84, i32 %70, i64 1, !dbg !30
  %86 = insertelement <16 x i32> %85, i32 %69, i64 2, !dbg !30
  %87 = insertelement <16 x i32> %86, i32 %68, i64 3, !dbg !30
  %88 = insertelement <16 x i32> %87, i32 %66, i64 4, !dbg !30
  %89 = insertelement <16 x i32> %88, i32 %65, i64 5, !dbg !30
  %90 = insertelement <16 x i32> %89, i32 %64, i64 6, !dbg !30
  %91 = insertelement <16 x i32> %90, i32 %63, i64 7, !dbg !30
  %92 = insertelement <16 x i32> %91, i32 %39, i64 8, !dbg !30
  %93 = insertelement <16 x i32> %92, i32 %38, i64 9, !dbg !30
  %94 = insertelement <16 x i32> %93, i32 %37, i64 10, !dbg !30
  %95 = insertelement <16 x i32> %94, i32 %36, i64 11, !dbg !30
  %96 = insertelement <16 x i32> %95, i32 %34, i64 12, !dbg !30
  %97 = insertelement <16 x i32> %96, i32 %33, i64 13, !dbg !30
  %98 = insertelement <16 x i32> %97, i32 %32, i64 14, !dbg !30
  %99 = insertelement <16 x i32> %98, i32 %31, i64 15, !dbg !30
  %100 = bitcast <16 x i32> %99 to <16 x float>, !dbg !30
  %101 = insertelement <16 x i32> poison, i32 %83, i64 0, !dbg !32
  %102 = insertelement <16 x i32> %101, i32 %82, i64 1, !dbg !32
  %103 = insertelement <16 x i32> %102, i32 %81, i64 2, !dbg !32
  %104 = insertelement <16 x i32> %103, i32 %80, i64 3, !dbg !32
  %105 = insertelement <16 x i32> %104, i32 %78, i64 4, !dbg !32
  %106 = insertelement <16 x i32> %105, i32 %77, i64 5, !dbg !32
  %107 = insertelement <16 x i32> %106, i32 %76, i64 6, !dbg !32
  %108 = insertelement <16 x i32> %107, i32 %75, i64 7, !dbg !32
  %109 = insertelement <16 x i32> %108, i32 %51, i64 8, !dbg !32
  %110 = insertelement <16 x i32> %109, i32 %50, i64 9, !dbg !32
  %111 = insertelement <16 x i32> %110, i32 %49, i64 10, !dbg !32
  %112 = insertelement <16 x i32> %111, i32 %48, i64 11, !dbg !32
  %113 = insertelement <16 x i32> %112, i32 %46, i64 12, !dbg !32
  %114 = insertelement <16 x i32> %113, i32 %45, i64 13, !dbg !32
  %115 = insertelement <16 x i32> %114, i32 %44, i64 14, !dbg !32
  %116 = insertelement <16 x i32> %115, i32 %43, i64 15, !dbg !32
  %117 = bitcast <16 x i32> %116 to <16 x float>, !dbg !32
  %118 = fadd <16 x float> %100, %117, !dbg !33
  %119 = fcmp ole <16 x float> %118, zeroinitializer, !dbg !34
  %120 = select <16 x i1> %119, <16 x float> zeroinitializer, <16 x float> %118, !dbg !34
  %121 = extractelement <16 x float> %120, i64 15, !dbg !38
  %122 = fcmp uno float %121, 0.000000e+00, !dbg !38
  %123 = extractelement <16 x float> %120, i64 14, !dbg !38
  %124 = fcmp uno float %123, 0.000000e+00, !dbg !38
  %125 = extractelement <16 x float> %120, i64 13, !dbg !38
  %126 = fcmp uno float %125, 0.000000e+00, !dbg !38
  %127 = extractelement <16 x float> %120, i64 12, !dbg !38
  %128 = fcmp uno float %127, 0.000000e+00, !dbg !38
  %129 = extractelement <16 x float> %120, i64 11, !dbg !38
  %130 = fcmp uno float %129, 0.000000e+00, !dbg !38
  %131 = extractelement <16 x float> %120, i64 10, !dbg !38
  %132 = fcmp uno float %131, 0.000000e+00, !dbg !38
  %133 = extractelement <16 x float> %120, i64 9, !dbg !38
  %134 = fcmp uno float %133, 0.000000e+00, !dbg !38
  %135 = extractelement <16 x float> %120, i64 8, !dbg !38
  %136 = fcmp uno float %135, 0.000000e+00, !dbg !38
  %137 = fcmp olt <16 x float> %120, splat (float 6.000000e+00), !dbg !40
  %138 = extractelement <16 x i1> %137, i64 15, !dbg !42
  %139 = or i1 %138, %122, !dbg !42
  %140 = extractelement <16 x i1> %137, i64 14, !dbg !42
  %141 = or i1 %140, %124, !dbg !42
  %142 = extractelement <16 x i1> %137, i64 13, !dbg !42
  %143 = or i1 %142, %126, !dbg !42
  %144 = extractelement <16 x i1> %137, i64 12, !dbg !42
  %145 = or i1 %144, %128, !dbg !42
  %146 = extractelement <16 x i1> %137, i64 11, !dbg !42
  %147 = or i1 %146, %130, !dbg !42
  %148 = extractelement <16 x i1> %137, i64 10, !dbg !42
  %149 = or i1 %148, %132, !dbg !42
  %150 = extractelement <16 x i1> %137, i64 9, !dbg !42
  %151 = or i1 %150, %134, !dbg !42
  %152 = extractelement <16 x i1> %137, i64 8, !dbg !42
  %153 = or i1 %152, %136, !dbg !42
  %154 = select i1 %139, float %121, float 6.000000e+00, !dbg !43
  %155 = select i1 %141, float %123, float 6.000000e+00, !dbg !43
  %156 = select i1 %143, float %125, float 6.000000e+00, !dbg !43
  %157 = select i1 %145, float %127, float 6.000000e+00, !dbg !43
  %158 = select i1 %147, float %129, float 6.000000e+00, !dbg !43
  %159 = select i1 %149, float %131, float 6.000000e+00, !dbg !43
  %160 = select i1 %151, float %133, float 6.000000e+00, !dbg !43
  %161 = select i1 %153, float %135, float 6.000000e+00, !dbg !43
  %162 = extractelement <16 x float> %120, i64 7, !dbg !44
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !44
  %164 = extractelement <16 x float> %120, i64 6, !dbg !44
  %165 = fcmp uno float %164, 0.000000e+00, !dbg !44
  %166 = extractelement <16 x float> %120, i64 5, !dbg !44
  %167 = fcmp uno float %166, 0.000000e+00, !dbg !44
  %168 = extractelement <16 x float> %120, i64 4, !dbg !44
  %169 = fcmp uno float %168, 0.000000e+00, !dbg !44
  %170 = extractelement <16 x float> %120, i64 3, !dbg !44
  %171 = fcmp uno float %170, 0.000000e+00, !dbg !44
  %172 = extractelement <16 x float> %120, i64 2, !dbg !44
  %173 = fcmp uno float %172, 0.000000e+00, !dbg !44
  %174 = extractelement <16 x float> %120, i64 1, !dbg !44
  %175 = fcmp uno float %174, 0.000000e+00, !dbg !44
  %176 = extractelement <16 x float> %120, i64 0, !dbg !44
  %177 = fcmp uno float %176, 0.000000e+00, !dbg !44
  %178 = extractelement <16 x i1> %137, i64 7, !dbg !45
  %179 = or i1 %178, %163, !dbg !45
  %180 = extractelement <16 x i1> %137, i64 6, !dbg !45
  %181 = or i1 %180, %165, !dbg !45
  %182 = extractelement <16 x i1> %137, i64 5, !dbg !45
  %183 = or i1 %182, %167, !dbg !45
  %184 = extractelement <16 x i1> %137, i64 4, !dbg !45
  %185 = or i1 %184, %169, !dbg !45
  %186 = extractelement <16 x i1> %137, i64 3, !dbg !45
  %187 = or i1 %186, %171, !dbg !45
  %188 = extractelement <16 x i1> %137, i64 2, !dbg !45
  %189 = or i1 %188, %173, !dbg !45
  %190 = extractelement <16 x i1> %137, i64 1, !dbg !45
  %191 = or i1 %190, %175, !dbg !45
  %192 = extractelement <16 x i1> %137, i64 0, !dbg !45
  %193 = or i1 %192, %177, !dbg !45
  %194 = select i1 %179, float %162, float 6.000000e+00, !dbg !46
  %195 = select i1 %181, float %164, float 6.000000e+00, !dbg !46
  %196 = select i1 %183, float %166, float 6.000000e+00, !dbg !46
  %197 = select i1 %185, float %168, float 6.000000e+00, !dbg !46
  %198 = select i1 %187, float %170, float 6.000000e+00, !dbg !46
  %199 = select i1 %189, float %172, float 6.000000e+00, !dbg !46
  %200 = select i1 %191, float %174, float 6.000000e+00, !dbg !46
  %201 = select i1 %193, float %176, float 6.000000e+00, !dbg !46
  %202 = select i1 %19, float %154, float %194, !dbg !47
  %203 = select i1 %19, float %155, float %195, !dbg !47
  %204 = select i1 %19, float %156, float %196, !dbg !47
  %205 = select i1 %19, float %157, float %197, !dbg !47
  %206 = select i1 %19, float %158, float %198, !dbg !47
  %207 = select i1 %19, float %159, float %199, !dbg !47
  %208 = select i1 %19, float %160, float %200, !dbg !47
  %209 = select i1 %19, float %161, float %201, !dbg !47
  %210 = sext i32 %12 to i64, !dbg !48
  %211 = getelementptr float, ptr addrspace(1) %4, i64 %210, !dbg !48
  %212 = sext i32 %13 to i64, !dbg !48
  %213 = getelementptr float, ptr addrspace(1) %4, i64 %212, !dbg !48
  %214 = bitcast float %202 to i32, !dbg !49
  %215 = bitcast float %203 to i32, !dbg !49
  %216 = bitcast float %204 to i32, !dbg !49
  %217 = bitcast float %205 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %211, i1 %14) #1, !dbg !49
  %218 = bitcast float %206 to i32, !dbg !49
  %219 = bitcast float %207 to i32, !dbg !49
  %220 = bitcast float %208 to i32, !dbg !49
  %221 = bitcast float %209 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %218, i32 %219, i32 %220, i32 %221, ptr addrspace(1) %213, i1 %15) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx5o2yw4pg7ahulsq5b7rcc5abbzgxymruznxzdtzffwneucj3t5.py", directory: "inductor_cache/x5")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 41, column: 20, scope: !7)
!26 = !DILocation(line: 44, column: 50, scope: !7)
!27 = !DILocation(line: 44, column: 41, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 64, scope: !7)
!30 = !DILocation(line: 44, column: 56, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 45, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 48, column: 42, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 38, column: 41, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !35, inlinedAt: !41)
!41 = !DILocation(line: 50, column: 42, scope: !7)
!42 = !DILocation(line: 112, column: 16, scope: !35, inlinedAt: !39)
!43 = !DILocation(line: 113, column: 29, scope: !35, inlinedAt: !39)
!44 = !DILocation(line: 112, column: 21, scope: !35, inlinedAt: !41)
!45 = !DILocation(line: 112, column: 16, scope: !35, inlinedAt: !41)
!46 = !DILocation(line: 113, column: 29, scope: !35, inlinedAt: !41)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 54, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 37, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
