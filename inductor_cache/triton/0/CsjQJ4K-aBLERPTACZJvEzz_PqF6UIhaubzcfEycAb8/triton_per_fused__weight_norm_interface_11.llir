; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %7 = and i32 %6, 31, !dbg !11
  %8 = lshr i32 %6, 5, !dbg !11
  %9 = shl i32 %6, 2, !dbg !11
  %10 = and i32 %9, 1020, !dbg !11
  %11 = icmp samesign ult i32 %10, 800, !dbg !12
  %12 = mul i32 %5, 800, !dbg !13
  %13 = add i32 %12, %10, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #5, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %21 = bitcast i32 %17 to float, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = fmul float %21, %21, !dbg !17
  %26 = fmul float %22, %22, !dbg !17
  %27 = fmul float %23, %23, !dbg !17
  %28 = fmul float %24, %24, !dbg !17
  %29 = fadd float %25, %26, !dbg !18
  %30 = fadd float %27, %29, !dbg !18
  %31 = fadd float %28, %30, !dbg !18
  %32 = select i1 %11, float %31, float 0.000000e+00, !dbg !18
  %33 = bitcast float %32 to i32, !dbg !23
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 16, i32 31), !dbg !23
  %35 = bitcast i32 %34 to float, !dbg !23
  %36 = fadd float %32, %35, !dbg !18
  %37 = bitcast float %36 to i32, !dbg !23
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = fadd float %36, %39, !dbg !18
  %41 = bitcast float %40 to i32, !dbg !23
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !23
  %43 = bitcast i32 %42 to float, !dbg !23
  %44 = fadd float %40, %43, !dbg !18
  %45 = bitcast float %44 to i32, !dbg !23
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = fadd float %44, %47, !dbg !18
  %49 = bitcast float %48 to i32, !dbg !23
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = fadd float %48, %51, !dbg !18
  %53 = icmp eq i32 %7, 0, !dbg !23
  %54 = and i32 %8, 7, !dbg !23
  %55 = zext nneg i32 %54 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i64 %55, !dbg !23
  %57 = bitcast float %52 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 %53) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %58 = icmp slt i32 %6, 8, !dbg !23
  %59 = sext i32 %6 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i64 %59, !dbg !23
  %61 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %58) #5, !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = fadd float %62, %64, !dbg !18
  %66 = bitcast float %65 to i32, !dbg !23
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = fadd float %65, %68, !dbg !18
  %70 = bitcast float %69 to i32, !dbg !23
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = fadd float %69, %72, !dbg !18
  %74 = and i32 %6, 7, !dbg !23
  %75 = icmp eq i32 %74, 0, !dbg !23
  %76 = and i1 %58, %75, !dbg !23
  %77 = bitcast float %73 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %77, i1 %76) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %78 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %79 = fadd float %78, 0.000000e+00, !dbg !24
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i = icmp eq i32 %80, 0, !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i = icmp eq i32 %81, 0, !dbg !28
  br i1 %.not.i, label %87, label %82, !dbg !28

82:                                               ; preds = %4
  br i1 %.not1.i, label %85, label %83, !dbg !28

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

87:                                               ; preds = %4
  br i1 %.not1.i, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #5, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %92 = sext i32 %5 to i64, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !30
  %urem = and i32 %6, 255, !dbg !31
  %94 = icmp eq i32 %urem, 0, !dbg !31
  %95 = bitcast float %.0.i to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %93, i1 %94) #5, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c25dzlmpuzmkkzkyi7j2lbrs3lf45kkrkkcctulzllqcilbbejat.py", directory: "inductor_cache/25")
!4 = !{ptr @triton_per_fused__weight_norm_interface_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_11", linkageName: "triton_per_fused__weight_norm_interface_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 44, scope: !7)
!17 = !DILocation(line: 33, column: 18, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 36, column: 57, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 37, column: 26, scope: !7)
!29 = !DILocation(line: 38, column: 4, scope: !7)
!30 = !DILocation(line: 39, column: 28, scope: !7)
!31 = !DILocation(line: 39, column: 39, scope: !7)
!32 = !DILocation(line: 39, column: 4, scope: !7)
