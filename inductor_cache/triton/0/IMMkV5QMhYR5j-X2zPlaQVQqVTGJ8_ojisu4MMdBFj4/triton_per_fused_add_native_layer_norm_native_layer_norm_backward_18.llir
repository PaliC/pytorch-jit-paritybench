; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 2, !dbg !11
  %14 = and i32 %13, 1020, !dbg !11
  %15 = icmp samesign ult i32 %14, 768, !dbg !12
  %16 = mul i32 %9, 768, !dbg !13
  %17 = add i32 %16, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %34 = bitcast i32 %32 to float, !dbg !18
  %35 = zext nneg i32 %14 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %40 to float, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = fadd float %34, %42, !dbg !25
  %56 = fadd float %55, %27, !dbg !26
  %57 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !18
  %58 = insertelement <2 x i32> %57, i32 %45, i64 1, !dbg !18
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !18
  %60 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !20
  %61 = insertelement <2 x i32> %60, i32 %51, i64 1, !dbg !20
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !20
  %63 = fadd <2 x float> %59, %62, !dbg !25
  %64 = extractelement <2 x float> %63, i64 0, !dbg !26
  %65 = fadd float %64, %25, !dbg !26
  %66 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !18
  %67 = insertelement <2 x i32> %66, i32 %46, i64 1, !dbg !18
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !18
  %69 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !20
  %70 = insertelement <2 x i32> %69, i32 %52, i64 1, !dbg !20
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !20
  %72 = fadd <2 x float> %68, %71, !dbg !25
  %73 = extractelement <2 x float> %72, i64 0, !dbg !26
  %74 = fadd float %73, %26, !dbg !26
  %75 = extractelement <2 x float> %63, i64 1, !dbg !27
  %76 = fadd float %65, %75, !dbg !27
  %77 = extractelement <2 x float> %72, i64 1, !dbg !27
  %78 = fadd float %74, %77, !dbg !27
  %79 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !18
  %80 = insertelement <2 x i32> %79, i32 %47, i64 1, !dbg !18
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !18
  %82 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !20
  %83 = insertelement <2 x i32> %82, i32 %53, i64 1, !dbg !20
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !20
  %85 = fadd <2 x float> %81, %84, !dbg !25
  %86 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !26
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !26
  %88 = insertelement <2 x float> %87, float %56, i64 1, !dbg !26
  %89 = fadd <2 x float> %85, %88, !dbg !26
  %90 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !28
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !28
  %92 = insertelement <2 x float> %91, float %76, i64 1, !dbg !28
  %93 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !28
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !28
  %95 = insertelement <2 x float> %94, float %78, i64 1, !dbg !28
  %96 = fadd <2 x float> %92, %95, !dbg !28
  %97 = fadd <2 x float> %89, %96, !dbg !27
  %98 = extractelement <2 x float> %97, i64 0, !dbg !29
  %99 = extractelement <2 x float> %97, i64 1, !dbg !29
  %100 = fadd float %98, %99, !dbg !29
  %101 = select i1 %15, float %100, float 0.000000e+00, !dbg !29
  %102 = bitcast float %101 to i32, !dbg !34
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !34
  %104 = bitcast i32 %103 to float, !dbg !34
  %105 = fadd float %101, %104, !dbg !29
  %106 = bitcast float %105 to i32, !dbg !34
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = fadd float %105, %108, !dbg !29
  %110 = bitcast float %109 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = fadd float %109, %112, !dbg !29
  %114 = bitcast float %113 to i32, !dbg !34
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !34
  %116 = bitcast i32 %115 to float, !dbg !34
  %117 = fadd float %113, %116, !dbg !29
  %118 = bitcast float %117 to i32, !dbg !34
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !34
  %120 = bitcast i32 %119 to float, !dbg !34
  %121 = fadd float %117, %120, !dbg !29
  %122 = icmp eq i32 %11, 0, !dbg !34
  %123 = and i32 %12, 7, !dbg !34
  %124 = zext nneg i32 %123 to i64, !dbg !34
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i64 %124, !dbg !34
  %126 = bitcast float %121 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %122) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %127 = icmp slt i32 %10, 8, !dbg !34
  %128 = sext i32 %10 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !34
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %127) #5, !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = fadd float %131, %133, !dbg !29
  %135 = bitcast float %134 to i32, !dbg !34
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = fadd float %134, %137, !dbg !29
  %139 = bitcast float %138 to i32, !dbg !34
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = fadd float %138, %141, !dbg !29
  %143 = and i32 %10, 7, !dbg !34
  %144 = icmp eq i32 %143, 0, !dbg !34
  %145 = and i1 %127, %144, !dbg !34
  %146 = bitcast float %142 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %146, i1 %145) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %147 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %148 = fadd float %147, 0.000000e+00, !dbg !35
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 7.680000e+02) #5, !dbg !39
  %150 = fsub float %76, %149, !dbg !40
  %151 = fsub float %78, %149, !dbg !40
  %152 = extractelement <2 x float> %89, i64 1, !dbg !40
  %153 = fsub float %152, %149, !dbg !40
  %154 = fsub float %98, %149, !dbg !40
  %155 = fmul float %150, %150, !dbg !41
  %156 = fmul float %151, %151, !dbg !41
  %157 = fmul float %153, %153, !dbg !41
  %158 = fmul float %154, %154, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %159 = fadd float %155, %156, !dbg !44
  %160 = fadd float %157, %159, !dbg !44
  %161 = fadd float %158, %160, !dbg !44
  %162 = select i1 %15, float %161, float 0.000000e+00, !dbg !44
  %163 = bitcast float %162 to i32, !dbg !42
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = fadd float %162, %165, !dbg !44
  %167 = bitcast float %166 to i32, !dbg !42
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = fadd float %166, %169, !dbg !44
  %171 = bitcast float %170 to i32, !dbg !42
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = fadd float %170, %173, !dbg !44
  %175 = bitcast float %174 to i32, !dbg !42
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !42
  %177 = bitcast i32 %176 to float, !dbg !42
  %178 = fadd float %174, %177, !dbg !44
  %179 = bitcast float %178 to i32, !dbg !42
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !42
  %181 = bitcast i32 %180 to float, !dbg !42
  %182 = fadd float %178, %181, !dbg !44
  %183 = bitcast float %182 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %183, i1 %122) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %127) #5, !dbg !42
  %185 = bitcast i32 %184 to float, !dbg !42
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 4, i32 31), !dbg !42
  %187 = bitcast i32 %186 to float, !dbg !42
  %188 = fadd float %185, %187, !dbg !44
  %189 = bitcast float %188 to i32, !dbg !42
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !42
  %191 = bitcast i32 %190 to float, !dbg !42
  %192 = fadd float %188, %191, !dbg !44
  %193 = bitcast float %192 to i32, !dbg !42
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !42
  %195 = bitcast i32 %194 to float, !dbg !42
  %196 = fadd float %192, %195, !dbg !44
  %197 = bitcast float %196 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %197, i1 %145) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %198 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %199 = fadd float %198, 0.000000e+00, !dbg !45
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float 7.680000e+02) #5, !dbg !47
  %201 = fadd float %200, 0x3EE4F8B580000000, !dbg !48
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %202, 0, !dbg !49
  br i1 %.not.i, label %205, label %203, !dbg !49

203:                                              ; preds = %8
  %204 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %201), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

205:                                              ; preds = %8
  %206 = tail call float @llvm.nvvm.rsqrt.approx.f(float %201), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %203, %205
  %.0.i = phi float [ %204, %203 ], [ %206, %205 ], !dbg !49
  %207 = fmul float %150, %.0.i, !dbg !50
  %208 = fmul float %151, %.0.i, !dbg !50
  %209 = fmul float %153, %.0.i, !dbg !50
  %210 = fmul float %154, %.0.i, !dbg !50
  %211 = fmul float %.0.i, 0x3F55555560000000, !dbg !51
  %212 = bitcast float %207 to i32, !dbg !52
  %213 = bitcast float %208 to i32, !dbg !52
  %214 = bitcast float %209 to i32, !dbg !52
  %215 = bitcast float %210 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %213, i32 %214, i32 %215, ptr addrspace(1) %19, i1 %15) #5, !dbg !52
  %216 = sext i32 %9 to i64, !dbg !53
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !53
  %urem = and i32 %10, 255, !dbg !54
  %218 = icmp eq i32 %urem, 0, !dbg !54
  %219 = bitcast float %211 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %217, i1 %218) #5, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5sekr4354rtzeq4maekwr5oympyemklqhm7w2x7rmktvzeljn7a.py", directory: "inductor_cache/5s")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 43, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 48, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 45, column: 59, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 73, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 45, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 19, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !43)
!43 = !DILocation(line: 53, column: 59, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !43)
!45 = !DILocation(line: 73, column: 15, scope: !36, inlinedAt: !46)
!46 = !DILocation(line: 53, column: 45, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 49, scope: !7)
!53 = !DILocation(line: 64, column: 25, scope: !7)
!54 = !DILocation(line: 64, column: 37, scope: !7)
!55 = !DILocation(line: 64, column: 4, scope: !7)
