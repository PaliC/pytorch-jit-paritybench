; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !14
  %17 = insertelement <2 x i32> %16, i32 %13, i64 1, !dbg !14
  %18 = sdiv <2 x i32> %17, splat (i32 1024), !dbg !14
  %19 = srem <2 x i32> %18, splat (i32 320), !dbg !15
  %.frozen25 = freeze i32 %13, !dbg !16
  %20 = sdiv i32 %.frozen25, 327680, !dbg !16
  %.frozen26 = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen26, 327680, !dbg !16
  %22 = srem i32 %13, 1024, !dbg !17
  %23 = srem i32 %15, 1024, !dbg !17
  %.frozen = freeze i32 %13, !dbg !18
  %24 = sdiv i32 %.frozen, 32, !dbg !18
  %25 = sdiv i32 %15, 32, !dbg !18
  %26 = srem i32 %24, 32, !dbg !19
  %27 = srem i32 %25, 32, !dbg !19
  %28 = mul i32 %24, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = srem i32 %14, 32, !dbg !20
  %30 = extractelement <2 x i32> %19, i64 1, !dbg !21
  %31 = icmp slt i32 %30, 64, !dbg !22
  %32 = extractelement <2 x i32> %19, i64 0, !dbg !21
  %33 = icmp slt i32 %32, 64, !dbg !22
  %34 = mul i32 %20, 327680, !dbg !23
  %srem.decomposed = sub i32 %.frozen25, %34, !dbg !23
  %35 = mul i32 %21, 327680, !dbg !23
  %srem1.decomposed = sub i32 %.frozen26, %35, !dbg !23
  %36 = shl nsw i32 %20, 16, !dbg !24
  %37 = shl nsw i32 %21, 16, !dbg !24
  %38 = add nsw i32 %36, %srem.decomposed, !dbg !25
  %39 = add nsw i32 %37, %srem1.decomposed, !dbg !25
  %40 = sext i32 %38 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = sext i32 %39 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = and <2 x i32> %19, splat (i32 -64), !dbg !28
  %55 = shufflevector <2 x i32> %54, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %56 = shl nsw i32 %30, 10, !dbg !29
  %57 = shl nsw i32 %32, 10, !dbg !29
  %58 = add nsw i32 %36, %22, !dbg !29
  %59 = add nsw i32 %58, -65536, !dbg !30
  %60 = add nsw i32 %59, %56, !dbg !31
  %61 = add nsw i32 %37, %23, !dbg !29
  %62 = add nsw i32 %61, -65536, !dbg !30
  %63 = add nsw i32 %62, %57, !dbg !31
  %64 = sext i32 %60 to i64, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !32
  %66 = sext i32 %63 to i64, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = icmp eq <4 x i32> %55, <i32 128, i32 128, i32 64, i32 64>, !dbg !33
  %69 = extractelement <4 x i1> %68, i64 3, !dbg !34
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69, i32 0, i1 %69) #1, !dbg !35
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !35
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !35
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !35
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !35
  %75 = extractelement <4 x i1> %68, i64 2, !dbg !34
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75, i32 0, i1 %75) #1, !dbg !35
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !35
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !35
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !35
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !35
  %81 = add nsw i32 %58, -131072, !dbg !36
  %82 = add nsw i32 %81, %56, !dbg !37
  %83 = add nsw i32 %61, -131072, !dbg !36
  %84 = add nsw i32 %83, %57, !dbg !37
  %85 = sext i32 %82 to i64, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !38
  %87 = sext i32 %84 to i64, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !38
  %89 = extractelement <4 x i1> %68, i64 1, !dbg !39
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #1, !dbg !40
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !40
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !40
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !40
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !40
  %95 = extractelement <4 x i1> %68, i64 0, !dbg !39
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !40
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !40
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !40
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !40
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !40
  %101 = icmp sgt i32 %30, 191, !dbg !41
  %102 = icmp sgt i32 %32, 191, !dbg !41
  %103 = sext i32 %26 to i64, !dbg !42
  %104 = getelementptr i64, ptr addrspace(1) %3, i64 %103, !dbg !42
  %105 = sext i32 %27 to i64, !dbg !42
  %106 = getelementptr i64, ptr addrspace(1) %3, i64 %105, !dbg !42
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 %101, i1 %101) #1, !dbg !43
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 %101, i1 %101) #1, !dbg !43
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 %101, i1 %101) #1, !dbg !43
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 %101, i1 %101) #1, !dbg !43
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %106, i1 %102, i1 %102) #1, !dbg !43
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %106, i1 %102, i1 %102) #1, !dbg !43
  %113 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %106, i1 %102, i1 %102) #1, !dbg !43
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %106, i1 %102, i1 %102) #1, !dbg !43
  %115 = lshr i64 %107, 59, !dbg !44
  %116 = and i64 %115, 16, !dbg !44
  %117 = add i64 %116, %107, !dbg !44
  %118 = lshr i64 %111, 59, !dbg !44
  %119 = and i64 %118, 16, !dbg !44
  %120 = add i64 %119, %111, !dbg !44
  %121 = sext i32 %.decomposed to i64, !dbg !45
  %122 = getelementptr i64, ptr addrspace(1) %3, i64 %121, !dbg !45
  %123 = sext i32 %29 to i64, !dbg !45
  %124 = getelementptr i64, ptr addrspace(1) %3, i64 %123, !dbg !45
  %125 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %122, i1 %101, i1 %101, i1 %101) #1, !dbg !46
  %126 = extractvalue { i64, i64 } %125, 0, !dbg !46
  %127 = extractvalue { i64, i64 } %125, 1, !dbg !46
  %128 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %124, i1 %101, i1 %101, i1 %101) #1, !dbg !46
  %129 = extractvalue { i64, i64 } %128, 0, !dbg !46
  %130 = extractvalue { i64, i64 } %128, 1, !dbg !46
  %131 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %122, i1 %102, i1 %102, i1 %102) #1, !dbg !46
  %132 = extractvalue { i64, i64 } %131, 0, !dbg !46
  %133 = extractvalue { i64, i64 } %131, 1, !dbg !46
  %134 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %124, i1 %102, i1 %102, i1 %102) #1, !dbg !46
  %135 = extractvalue { i64, i64 } %134, 0, !dbg !46
  %136 = extractvalue { i64, i64 } %134, 1, !dbg !46
  %137 = lshr i64 %126, 59, !dbg !47
  %138 = and i64 %137, 16, !dbg !47
  %139 = lshr i64 %127, 59, !dbg !47
  %140 = and i64 %139, 16, !dbg !47
  %141 = lshr i64 %129, 59, !dbg !47
  %142 = and i64 %141, 16, !dbg !47
  %143 = lshr i64 %130, 59, !dbg !47
  %144 = and i64 %143, 16, !dbg !47
  %145 = lshr i64 %132, 59, !dbg !47
  %146 = and i64 %145, 16, !dbg !47
  %147 = lshr i64 %133, 59, !dbg !47
  %148 = and i64 %147, 16, !dbg !47
  %149 = lshr i64 %135, 59, !dbg !47
  %150 = and i64 %149, 16, !dbg !47
  %151 = lshr i64 %136, 59, !dbg !47
  %152 = and i64 %151, 16, !dbg !47
  %153 = shl i64 %117, 4, !dbg !48
  %154 = shl i64 %120, 4, !dbg !48
  %155 = shl nsw i32 %30, 8, !dbg !21
  %156 = add nsw i32 %155, -49152, !dbg !21
  %157 = shl nsw i32 %32, 8, !dbg !21
  %158 = add nsw i32 %157, -49152, !dbg !21
  %159 = sext i32 %156 to i64, !dbg !49
  %160 = sext i32 %158 to i64, !dbg !49
  %161 = shl nsw i32 %20, 17, !dbg !50
  %162 = shl nsw i32 %21, 17, !dbg !50
  %163 = sext i32 %161 to i64, !dbg !51
  %164 = sext i32 %162 to i64, !dbg !51
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !52
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %138, !dbg !52
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %153, !dbg !52
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %159, !dbg !52
  %169 = getelementptr float, ptr addrspace(1) %168, i64 %163, !dbg !52
  %170 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !52
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %140, !dbg !52
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %153, !dbg !52
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %159, !dbg !52
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %163, !dbg !52
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !52
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %142, !dbg !52
  %177 = getelementptr float, ptr addrspace(1) %176, i64 %153, !dbg !52
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %159, !dbg !52
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %163, !dbg !52
  %180 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !52
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %144, !dbg !52
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %153, !dbg !52
  %183 = getelementptr float, ptr addrspace(1) %182, i64 %159, !dbg !52
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %163, !dbg !52
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !52
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %146, !dbg !52
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %154, !dbg !52
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %160, !dbg !52
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %164, !dbg !52
  %190 = getelementptr float, ptr addrspace(1) %4, i64 %133, !dbg !52
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %148, !dbg !52
  %192 = getelementptr float, ptr addrspace(1) %191, i64 %154, !dbg !52
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %160, !dbg !52
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %164, !dbg !52
  %195 = getelementptr float, ptr addrspace(1) %4, i64 %135, !dbg !52
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %150, !dbg !52
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %154, !dbg !52
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %160, !dbg !52
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %164, !dbg !52
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %136, !dbg !52
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %152, !dbg !52
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %154, !dbg !52
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %160, !dbg !52
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %164, !dbg !52
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %101, i32 0, i1 %101) #1, !dbg !53
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %174, i1 %101, i32 0, i1 %101) #1, !dbg !53
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %101, i32 0, i1 %101) #1, !dbg !53
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %101, i32 0, i1 %101) #1, !dbg !53
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %.v = select i1 %89, i32 %91, i32 %205, !dbg !39
  %.v2 = select i1 %89, i32 %92, i32 %206, !dbg !39
  %.v3 = select i1 %89, i32 %93, i32 %207, !dbg !39
  %.v4 = select i1 %89, i32 %94, i32 %208, !dbg !39
  %.v5 = select i1 %95, i32 %97, i32 %209, !dbg !39
  %.v6 = select i1 %95, i32 %98, i32 %210, !dbg !39
  %.v7 = select i1 %95, i32 %99, i32 %211, !dbg !39
  %.v8 = select i1 %95, i32 %100, i32 %212, !dbg !39
  %.v9 = select i1 %69, i32 %71, i32 %.v, !dbg !34
  %.v10 = select i1 %69, i32 %72, i32 %.v2, !dbg !34
  %.v11 = select i1 %69, i32 %73, i32 %.v3, !dbg !34
  %.v12 = select i1 %69, i32 %74, i32 %.v4, !dbg !34
  %.v13 = select i1 %75, i32 %77, i32 %.v5, !dbg !34
  %.v14 = select i1 %75, i32 %78, i32 %.v6, !dbg !34
  %.v15 = select i1 %75, i32 %79, i32 %.v7, !dbg !34
  %.v16 = select i1 %75, i32 %80, i32 %.v8, !dbg !34
  %.v17 = select i1 %31, i32 %45, i32 %.v9, !dbg !54
  %.v18 = select i1 %31, i32 %46, i32 %.v10, !dbg !54
  %.v19 = select i1 %31, i32 %47, i32 %.v11, !dbg !54
  %.v20 = select i1 %31, i32 %48, i32 %.v12, !dbg !54
  %.v21 = select i1 %33, i32 %50, i32 %.v13, !dbg !54
  %.v22 = select i1 %33, i32 %51, i32 %.v14, !dbg !54
  %.v23 = select i1 %33, i32 %52, i32 %.v15, !dbg !54
  %.v24 = select i1 %33, i32 %53, i32 %.v16, !dbg !54
  %213 = sext i32 %13 to i64, !dbg !55
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %213, !dbg !55
  %215 = sext i32 %15 to i64, !dbg !55
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %215, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v17, i32 %.v18, i32 %.v19, i32 %.v20, ptr addrspace(1) %214, i1 true) #1, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v21, i32 %.v22, i32 %.v23, i32 %.v24, ptr addrspace(1) %216, i1 true) #1, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvbirwga6cgsqos6v3wiiy6nbmfvhkqaqd6p34anaqwhocuilozc.py", directory: "inductor_cache/vb")
!4 = !{ptr @triton_poi_fused_cat_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_30", linkageName: "triton_poi_fused_cat_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 58, column: 55, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 53, scope: !7)
!25 = !DILocation(line: 35, column: 47, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 58, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 42, scope: !7)
!30 = !DILocation(line: 40, column: 36, scope: !7)
!31 = !DILocation(line: 40, column: 56, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 60, column: 34, scope: !7)
!35 = !DILocation(line: 40, column: 67, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 45, column: 57, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 59, column: 35, scope: !7)
!40 = !DILocation(line: 45, column: 68, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 31, scope: !7)
!43 = !DILocation(line: 49, column: 36, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 36, scope: !7)
!47 = !DILocation(line: 57, column: 35, scope: !7)
!48 = !DILocation(line: 58, column: 42, scope: !7)
!49 = !DILocation(line: 58, column: 50, scope: !7)
!50 = !DILocation(line: 58, column: 77, scope: !7)
!51 = !DILocation(line: 58, column: 70, scope: !7)
!52 = !DILocation(line: 58, column: 31, scope: !7)
!53 = !DILocation(line: 58, column: 82, scope: !7)
!54 = !DILocation(line: 61, column: 33, scope: !7)
!55 = !DILocation(line: 62, column: 25, scope: !7)
!56 = !DILocation(line: 62, column: 37, scope: !7)
!57 = !DILocation(line: 62, column: 4, scope: !7)
