; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_relu_std_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = sext i32 %.decomposed to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !17
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !18
  %17 = sext i32 %10 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !20
  %20 = shl nsw i32 %12, 2, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #3, !dbg !23
  %24 = bitcast i32 %23 to float, !dbg !23
  %25 = or disjoint i32 %20, 1, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #3, !dbg !26
  %29 = bitcast i32 %28 to float, !dbg !26
  %30 = or disjoint i32 %20, 2, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %11) #3, !dbg !29
  %34 = bitcast i32 %33 to float, !dbg !29
  %35 = or disjoint i32 %20, 3, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !32
  %39 = bitcast i32 %38 to float, !dbg !32
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !33
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %11) #3, !dbg !34
  %42 = fcmp olt float %24, 0.000000e+00, !dbg !35
  %43 = select i1 %42, float 0.000000e+00, float %24, !dbg !39
  %44 = fcmp olt float %29, 0.000000e+00, !dbg !40
  %45 = select i1 %44, float 0.000000e+00, float %29, !dbg !42
  %46 = fadd float %43, %45, !dbg !43
  %47 = fcmp olt float %34, 0.000000e+00, !dbg !44
  %48 = select i1 %47, float 0.000000e+00, float %34, !dbg !46
  %49 = fadd float %46, %48, !dbg !47
  %50 = fcmp olt float %39, 0.000000e+00, !dbg !48
  %51 = select i1 %50, float 0.000000e+00, float %39, !dbg !50
  %52 = fadd float %49, %51, !dbg !51
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 4.000000e+00) #3, !dbg !52
  %54 = fsub float %43, %53, !dbg !53
  %55 = fmul float %54, %54, !dbg !54
  %56 = fsub float %45, %53, !dbg !55
  %57 = fmul float %56, %56, !dbg !56
  %58 = fadd float %55, %57, !dbg !57
  %59 = fsub float %48, %53, !dbg !58
  %60 = fmul float %59, %59, !dbg !59
  %61 = fadd float %60, %58, !dbg !60
  %62 = fsub float %51, %53, !dbg !61
  %63 = fmul float %62, %62, !dbg !62
  %64 = fadd float %63, %61, !dbg !63
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 3.000000e+00) #3, !dbg !64
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %66, 0, !dbg !65
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %67, 0, !dbg !65
  br i1 %.not.i, label %73, label %68, !dbg !65

68:                                               ; preds = %5
  br i1 %.not1.i, label %71, label %69, !dbg !65

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

73:                                               ; preds = %5
  br i1 %.not1.i, label %76, label %74, !dbg !65

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !65
  %78 = bitcast i32 %19 to float, !dbg !20
  %79 = fcmp olt float %78, 0.000000e+00, !dbg !66
  %80 = select i1 %79, float 0.000000e+00, float %78, !dbg !68
  %81 = fsub float %80, %53, !dbg !69
  %82 = bitcast i32 %16 to float, !dbg !18
  %83 = fmul float %81, %82, !dbg !70
  %84 = bitcast i32 %41 to float, !dbg !34
  %85 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !71
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %85) #3, !dbg !72
  %87 = fadd float %86, %84, !dbg !73
  %88 = fadd float %87, %78, !dbg !74
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !75
  %90 = bitcast float %88 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %89, i1 %11) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6juvg4osepn67pfp7zwnsh4z56jcab4qyid2y62s55b5f6v77wz.py", directory: "inductor_cache/6j")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_std_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_relu_std_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_relu_std_sub_0", linkageName: "triton_poi_fused_add_div_mean_mul_relu_std_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 32, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 37, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 31, column: 34, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 42, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 36, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !41)
!41 = !DILocation(line: 37, column: 40, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !41)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !45)
!45 = !DILocation(line: 39, column: 41, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !45)
!47 = !DILocation(line: 40, column: 19, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !49)
!49 = !DILocation(line: 41, column: 41, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !49)
!51 = !DILocation(line: 42, column: 20, scope: !7)
!52 = !DILocation(line: 44, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 19, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 49, column: 19, scope: !7)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 52, column: 20, scope: !7)
!59 = !DILocation(line: 53, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !67)
!67 = !DILocation(line: 35, column: 40, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !67)
!69 = !DILocation(line: 45, column: 19, scope: !7)
!70 = !DILocation(line: 46, column: 19, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 20, scope: !7)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 19, scope: !7)
!75 = !DILocation(line: 66, column: 28, scope: !7)
!76 = !DILocation(line: 66, column: 40, scope: !7)
!77 = !DILocation(line: 66, column: 4, scope: !7)
