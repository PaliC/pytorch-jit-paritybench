; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_native_layer_norm_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = icmp slt i32 %11, 301056, !dbg !14
  %14 = icmp slt i32 %12, 301056, !dbg !14
  %15 = sdiv i32 %11, 75264, !dbg !15
  %16 = sdiv i32 %12, 75264, !dbg !15
  %17 = srem i32 %11, 5376, !dbg !16
  %18 = srem i32 %12, 5376, !dbg !16
  %19 = srem i32 %11, 384, !dbg !17
  %20 = srem i32 %12, 384, !dbg !17
  %21 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !18
  %22 = shufflevector <2 x i32> %21, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %23 = sdiv <2 x i32> %22, <i32 5376, i32 384>, !dbg !18
  %24 = srem <2 x i32> %23, splat (i32 14), !dbg !19
  %25 = icmp slt <2 x i32> %24, splat (i32 4), !dbg !20
  %26 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %27 = shufflevector <2 x i32> %26, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %28 = sdiv <2 x i32> %27, <i32 5376, i32 384>, !dbg !18
  %29 = srem <2 x i32> %28, splat (i32 14), !dbg !19
  %30 = icmp slt <2 x i32> %29, splat (i32 4), !dbg !20
  %shift = shufflevector <2 x i1> %25, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %31 = and <2 x i1> %25, %shift, !dbg !21
  %32 = extractelement <2 x i1> %31, i64 0, !dbg !21
  %shift1 = shufflevector <2 x i1> %30, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %33 = and <2 x i1> %30, %shift1, !dbg !21
  %34 = extractelement <2 x i1> %33, i64 0, !dbg !21
  %35 = extractelement <2 x i32> %24, i64 0, !dbg !22
  %36 = mul nsw i32 %35, 1536, !dbg !22
  %37 = extractelement <2 x i32> %29, i64 0, !dbg !22
  %38 = mul nsw i32 %37, 1536, !dbg !22
  %39 = mul nsw i32 %15, 6144, !dbg !23
  %40 = mul nsw i32 %16, 6144, !dbg !23
  %41 = add nsw i32 %39, %17, !dbg !24
  %42 = add nsw i32 %41, %36, !dbg !25
  %43 = add nsw i32 %40, %18, !dbg !24
  %44 = add nsw i32 %43, %38, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %44 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = and i1 %13, %32, !dbg !27
  %50 = and i1 %14, %34, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = bitcast i32 %62 to float, !dbg !28
  %67 = bitcast i32 %63 to float, !dbg !28
  %68 = bitcast i32 %64 to float, !dbg !28
  %69 = sext i32 %19 to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = sext i32 %20 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = bitcast i32 %75 to float, !dbg !30
  %80 = bitcast i32 %76 to float, !dbg !30
  %81 = bitcast i32 %77 to float, !dbg !30
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = bitcast i32 %84 to float, !dbg !30
  %89 = bitcast i32 %85 to float, !dbg !30
  %90 = bitcast i32 %86 to float, !dbg !30
  %91 = fmul float %56, %78, !dbg !31
  %92 = fmul float %57, %79, !dbg !31
  %93 = fmul float %58, %80, !dbg !31
  %94 = fmul float %59, %81, !dbg !31
  %95 = fmul float %65, %87, !dbg !31
  %96 = fmul float %66, %88, !dbg !31
  %97 = fmul float %67, %89, !dbg !31
  %98 = fmul float %68, %90, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !32
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %99, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !33
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !33
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !33
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !33
  %106 = bitcast i32 %102 to float, !dbg !33
  %107 = bitcast i32 %103 to float, !dbg !33
  %108 = bitcast i32 %104 to float, !dbg !33
  %109 = bitcast i32 %105 to float, !dbg !33
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !33
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !33
  %115 = bitcast i32 %111 to float, !dbg !33
  %116 = bitcast i32 %112 to float, !dbg !33
  %117 = bitcast i32 %113 to float, !dbg !33
  %118 = bitcast i32 %114 to float, !dbg !33
  %119 = fadd float %91, %106, !dbg !34
  %120 = fadd float %92, %107, !dbg !34
  %121 = fadd float %93, %108, !dbg !34
  %122 = fadd float %94, %109, !dbg !34
  %123 = fadd float %95, %115, !dbg !34
  %124 = fadd float %96, %116, !dbg !34
  %125 = fadd float %97, %117, !dbg !34
  %126 = fadd float %98, %118, !dbg !34
  %127 = sext i32 %11 to i64, !dbg !35
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !35
  %129 = sext i32 %12 to i64, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !35
  %131 = bitcast float %119 to i32, !dbg !36
  %132 = select i1 %32, i32 %131, i32 0, !dbg !37
  %133 = bitcast float %120 to i32, !dbg !36
  %134 = select i1 %32, i32 %133, i32 0, !dbg !37
  %135 = bitcast float %121 to i32, !dbg !36
  %136 = select i1 %32, i32 %135, i32 0, !dbg !37
  %137 = bitcast float %122 to i32, !dbg !36
  %138 = select i1 %32, i32 %137, i32 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %134, i32 %136, i32 %138, ptr addrspace(1) %128, i1 %13) #1, !dbg !36
  %139 = bitcast float %123 to i32, !dbg !36
  %140 = select i1 %34, i32 %139, i32 0, !dbg !37
  %141 = bitcast float %124 to i32, !dbg !36
  %142 = select i1 %34, i32 %141, i32 0, !dbg !37
  %143 = bitcast float %125 to i32, !dbg !36
  %144 = select i1 %34, i32 %143, i32 0, !dbg !37
  %145 = bitcast float %126 to i32, !dbg !36
  %146 = select i1 %34, i32 %145, i32 0, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %142, i32 %144, i32 %146, ptr addrspace(1) %130, i1 %14) #1, !dbg !36
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3uzwmctqb3kj25jdm3qeo5dtkjuz3r4n22i4ewx5qj3vbll5zc2.py", directory: "inductor_cache/3u")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_native_layer_norm_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_native_layer_norm_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_native_layer_norm_28", linkageName: "triton_poi_fused_constant_pad_nd_native_layer_norm_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 29, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 40, scope: !7)
!23 = !DILocation(line: 36, column: 50, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 45, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 62, scope: !7)
!28 = !DILocation(line: 36, column: 55, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 30, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 25, scope: !7)
!36 = !DILocation(line: 43, column: 37, scope: !7)
!37 = !DILocation(line: 42, column: 34, scope: !7)
!38 = !DILocation(line: 43, column: 4, scope: !7)
