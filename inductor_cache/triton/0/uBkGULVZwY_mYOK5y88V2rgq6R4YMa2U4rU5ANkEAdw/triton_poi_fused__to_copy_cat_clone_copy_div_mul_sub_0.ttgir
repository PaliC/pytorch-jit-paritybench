#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__to_copy_cat_clone_copy_div_mul_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.333333343> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<32> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<1> : tensor<256xi64, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_3 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_5 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_6 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_6 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.remsi %9, %cst_6 : tensor<256xi32, #blocked> loc(#loc11)
    %11 = arith.divsi %4, %cst_7 : tensor<256xi32, #blocked> loc(#loc12)
    %12 = arith.remsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc13)
    %13 = arith.cmpi eq, %7, %cst_8 : tensor<256xi32, #blocked> loc(#loc14)
    %14 = arith.sitofp %8 : tensor<256xi32, #blocked> to tensor<256xf32, #blocked> loc(#loc15)
    %15 = arith.muli %11, %cst_4 : tensor<256xi32, #blocked> loc(#loc16)
    %16 = arith.addi %12, %15 : tensor<256xi32, #blocked> loc(#loc17)
    %17 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %18 = tt.addptr %17, %16 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc18)
    %19 = tt.load %18, %5, %cst_2 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc19)
    %20 = arith.subf %14, %19 : tensor<256xf32, #blocked> loc(#loc20)
    %21 = arith.mulf %20, %cst : tensor<256xf32, #blocked> loc(#loc21)
    %22 = arith.mulf %21, %cst_0 : tensor<256xf32, #blocked> loc(#loc22)
    %23 = arith.subf %22, %cst_1 : tensor<256xf32, #blocked> loc(#loc23)
    %24 = arith.extsi %7 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc24)
    %25 = arith.cmpi slt, %24, %cst_9 : tensor<256xi64, #blocked> loc(#loc24)
    %26 = arith.cmpi sge, %24, %cst_9 : tensor<256xi64, #blocked> loc(#loc25)
    %27 = arith.andi %26, %25 : tensor<256xi1, #blocked> loc(#loc26)
    %28 = arith.select %27, %10, %cst_8 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked> loc(#loc27)
    %29 = arith.select %25, %8, %28 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked> loc(#loc44)
    %30 = arith.sitofp %29 : tensor<256xi32, #blocked> to tensor<256xf32, #blocked> loc(#loc30)
    %31 = arith.andi %25, %5 : tensor<256xi1, #blocked> loc(#loc31)
    %32 = tt.load %18, %31, %cst_2 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc32)
    %33 = arith.subf %30, %32 : tensor<256xf32, #blocked> loc(#loc33)
    %34 = arith.select %26, %10, %cst_8 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked> loc(#loc34)
    %35 = arith.select %25, %8, %34 : tensor<256xi1, #blocked>, tensor<256xi32, #blocked> loc(#loc45)
    %36 = arith.sitofp %35 : tensor<256xi32, #blocked> to tensor<256xf32, #blocked> loc(#loc37)
    %37 = arith.select %25, %33, %36 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc46)
    %38 = arith.select %13, %23, %37 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc40)
    %39 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc41)
    %40 = tt.addptr %39, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc41)
    tt.store %40, %38, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":21:28)
#loc3 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":21:33)
#loc4 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":22:36)
#loc5 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":22:23)
#loc6 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":23:21)
#loc7 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":24:21)
#loc8 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":24:27)
#loc9 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":25:19)
#loc10 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":26:21)
#loc11 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":26:26)
#loc12 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":27:19)
#loc13 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":28:19)
#loc14 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":32:19)
#loc15 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":52:21)
#loc16 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":53:39)
#loc17 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":53:36)
#loc18 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":53:31)
#loc19 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":53:44)
#loc20 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":54:20)
#loc21 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":71:20)
#loc22 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":73:20)
#loc23 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":75:20)
#loc24 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":76:19)
#loc25 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":86:21)
#loc26 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":89:20)
#loc27 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":92:35)
#loc28 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":93:35)
#loc29 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":85:35)
#loc30 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":94:21)
#loc31 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":95:52)
#loc32 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":95:44)
#loc33 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":96:20)
#loc34 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":107:35)
#loc35 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":108:35)
#loc36 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":102:35)
#loc37 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":109:21)
#loc38 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":110:35)
#loc39 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":98:35)
#loc40 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":111:34)
#loc41 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":112:25)
#loc42 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":112:37)
#loc43 = loc("inductor_cache/h3/ch3rvub25zkmn2pmzmatypy4tjv75uhi5umyulrjc6mxwvymwe3w.py":112:4)
#loc44 = loc(fused[#loc28, #loc29])
#loc45 = loc(fused[#loc35, #loc36])
#loc46 = loc(fused[#loc38, #loc39])
