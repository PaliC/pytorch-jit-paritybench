; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %21 = sdiv i32 %19, 16, !dbg !15
  %22 = srem i32 %21, 4, !dbg !16
  %23 = sext i32 %19 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %20) #3, !dbg !18
  %26 = sext i32 %22 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %20) #3, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %20) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !21
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %20) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !25
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %20) #3, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %20) #3, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #3, !dbg !32
  %45 = bitcast i32 %44 to float, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %20) #3, !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %20) #3, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #3, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #3, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %23, !dbg !37
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %20) #3, !dbg !38
  %56 = fadd float %45, 0x3EE4F8B580000000, !dbg !39
  %57 = fadd float %47, 0x3EE4F8B580000000, !dbg !39
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %58, 0, !dbg !40
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %59, 0, !dbg !40
  br i1 %.not.i, label %65, label %60, !dbg !40

60:                                               ; preds = %13
  br i1 %.not1.i, label %63, label %61, !dbg !40

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

65:                                               ; preds = %13
  br i1 %.not1.i, label %68, label %66, !dbg !40

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !40
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %70, 0, !dbg !40
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !40
  br i1 %.not.i1, label %77, label %72, !dbg !40

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !40

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !40

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !40
  %82 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %83 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !20
  %84 = insertelement <2 x i32> %83, i32 %34, i64 1, !dbg !20
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !20
  %86 = extractvalue { i32, i32 } %31, 1, !dbg !22
  %87 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !18
  %88 = insertelement <2 x i32> %87, i32 %86, i64 1, !dbg !18
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !18
  %90 = fadd <2 x float> %89, %85, !dbg !41
  %91 = extractvalue { i32, i32 } %36, 1, !dbg !26
  %92 = bitcast i32 %91 to float, !dbg !26
  %93 = bitcast i32 %39 to float, !dbg !28
  %94 = fadd float %92, %93, !dbg !42
  %95 = extractelement <2 x float> %90, i64 1, !dbg !43
  %96 = fadd float %95, %94, !dbg !43
  %97 = extractelement <2 x float> %90, i64 0, !dbg !44
  %98 = fadd float %97, %96, !dbg !44
  %99 = bitcast i32 %42 to float, !dbg !30
  %100 = fsub float %98, %99, !dbg !45
  %101 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %102 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %103 = insertelement <2 x i32> %102, i32 %33, i64 1, !dbg !20
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !20
  %105 = extractvalue { i32, i32 } %31, 0, !dbg !22
  %106 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !18
  %107 = insertelement <2 x i32> %106, i32 %105, i64 1, !dbg !18
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !18
  %109 = fadd <2 x float> %108, %104, !dbg !41
  %110 = extractvalue { i32, i32 } %36, 0, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = bitcast i32 %38 to float, !dbg !28
  %113 = fadd float %111, %112, !dbg !42
  %114 = extractelement <2 x float> %109, i64 1, !dbg !43
  %115 = fadd float %114, %113, !dbg !43
  %116 = extractelement <2 x float> %109, i64 0, !dbg !44
  %117 = fadd float %116, %115, !dbg !44
  %118 = bitcast i32 %41 to float, !dbg !30
  %119 = fsub float %117, %118, !dbg !45
  %120 = extractvalue { i32, i32 } %55, 1, !dbg !38
  %121 = bitcast i32 %120 to float, !dbg !38
  %122 = extractvalue { i32, i32 } %55, 0, !dbg !38
  %123 = bitcast i32 %122 to float, !dbg !38
  %124 = bitcast i32 %53 to float, !dbg !36
  %125 = bitcast i32 %52 to float, !dbg !36
  %126 = bitcast i32 %50 to float, !dbg !34
  %127 = bitcast i32 %49 to float, !dbg !34
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !46
  %130 = fmul float %119, %128, !dbg !47
  %131 = fmul float %100, %129, !dbg !47
  %132 = fmul float %130, %127, !dbg !48
  %133 = fmul float %131, %126, !dbg !48
  %134 = fadd float %132, %125, !dbg !49
  %135 = fadd float %133, %124, !dbg !49
  %136 = fadd float %134, %123, !dbg !50
  %137 = fadd float %135, %121, !dbg !50
  %138 = fcmp olt float %136, 0.000000e+00, !dbg !51
  %139 = fcmp olt float %137, 0.000000e+00, !dbg !51
  %140 = select i1 %138, float 0.000000e+00, float %136, !dbg !55
  %141 = select i1 %139, float 0.000000e+00, float %137, !dbg !55
  %142 = bitcast float %117 to i32, !dbg !56
  %143 = bitcast float %98 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %142, i32 %143, ptr addrspace(1) %24, i1 %20) #3, !dbg !56
  %144 = getelementptr float, ptr addrspace(1) %11, i64 %23, !dbg !57
  %145 = bitcast float %140 to i32, !dbg !58
  %146 = bitcast float %141 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %145, i32 %146, ptr addrspace(1) %144, i1 %20) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfwbrpllsnikie6ltoubiw3toof6kkimjmegcc7fxhqji6qawnuz.py", directory: "inductor_cache/fw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 27, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 19, scope: !7)
!45 = !DILocation(line: 42, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 55, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 57, column: 25, scope: !7)
!58 = !DILocation(line: 57, column: 37, scope: !7)
!59 = !DILocation(line: 57, column: 4, scope: !7)
