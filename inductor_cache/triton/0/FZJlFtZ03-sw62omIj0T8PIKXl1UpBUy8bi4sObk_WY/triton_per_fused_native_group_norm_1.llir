; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = and i32 %10, 1, !dbg !12
  %14 = and i32 %10, 31, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = icmp slt i32 %15, 128, !dbg !14
  %17 = shl i32 %15, 1, !dbg !15
  %18 = or disjoint i32 %17, %13, !dbg !16
  %19 = sext i32 %18 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %16, i32 0, i1 %16) #5, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %16, i32 0, i1 %16) #5, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = select i1 %16, float %22, float 0.000000e+00, !dbg !23
  %30 = select i1 %16, float %25, float 0.000000e+00, !dbg !24
  %31 = select i1 %16, float %28, float 0.000000e+00, !dbg !25
  %32 = bitcast float %29 to i32, !dbg !26
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 1, i32 31), !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = bitcast float %30 to i32, !dbg !26
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = bitcast float %31 to i32, !dbg !26
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 1, i32 31), !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = fsub float %34, %29, !dbg !30
  %42 = fadd float %31, %40, !dbg !32
  %43 = fcmp oeq float %42, 0.000000e+00, !dbg !33
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %42) #5, !dbg !34
  %45 = select i1 %43, float 0.000000e+00, float %44, !dbg !35
  %46 = fmul float %41, %45, !dbg !36
  %47 = fadd float %29, %46, !dbg !37
  %48 = fadd float %30, %37, !dbg !38
  %49 = fmul float %41, %41, !dbg !39
  %50 = fmul float %31, %49, !dbg !40
  %51 = fmul float %50, %45, !dbg !41
  %52 = fadd float %48, %51, !dbg !42
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !43
  %54 = bitcast float %47 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !43
  %56 = load i32, ptr addrspace(3) %55, align 4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %57 = bitcast float %52 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %57, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %58 = load float, ptr addrspace(3) %55, align 4, !dbg !44
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 1.638400e+04) #5, !dbg !45
  %60 = fadd float %59, 0x3EB0C6F7A0000000, !dbg !46
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i = icmp eq i32 %61, 0, !dbg !44
  br i1 %.not.i, label %64, label %62, !dbg !44

62:                                               ; preds = %7
  %63 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

64:                                               ; preds = %7
  %65 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %62, %64
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], !dbg !44
  %66 = or disjoint i32 %9, %14, !dbg !13
  %67 = icmp slt i32 %66, 128, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %68 = sext i32 %66 to i64, !dbg !48
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !48
  %70 = and i32 %10, 32, !dbg !49
  %71 = icmp eq i32 %70, 0, !dbg !49
  %72 = bitcast float %.0.i to i32, !dbg !49
  %73 = and i1 %71, %67, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %69, i1 %73) #5, !dbg !49
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %56, ptr addrspace(1) %74, i1 %73) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceishllhhrbv4os5pmr3q2ybd6tz7tubvdmpicn5gkr43a6kyrgu.py", directory: "inductor_cache/ei")
!4 = !{ptr @triton_per_fused_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_1", linkageName: "triton_per_fused_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 37, scope: !7)
!16 = !DILocation(line: 31, column: 35, scope: !7)
!17 = !DILocation(line: 31, column: 30, scope: !7)
!18 = !DILocation(line: 31, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 42, scope: !7)
!23 = !DILocation(line: 37, column: 33, scope: !7)
!24 = !DILocation(line: 38, column: 33, scope: !7)
!25 = !DILocation(line: 39, column: 33, scope: !7)
!26 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 40, column: 67, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !29)
!33 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !29)
!34 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !29)
!35 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !29)
!36 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !29)
!37 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !29)
!38 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !29)
!39 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !29)
!40 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !29)
!41 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !29)
!42 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !29)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 48, column: 28, scope: !7)
!45 = !DILocation(line: 45, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
!48 = !DILocation(line: 50, column: 28, scope: !7)
!49 = !DILocation(line: 50, column: 40, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 37, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
