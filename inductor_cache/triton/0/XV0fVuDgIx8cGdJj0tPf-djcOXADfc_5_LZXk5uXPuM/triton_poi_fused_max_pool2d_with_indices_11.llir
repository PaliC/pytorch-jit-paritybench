; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %6, 1, !dbg !13
  %12 = srem i32 %11, 2, !dbg !14
  %13 = shl nsw i32 %12, 2, !dbg !15
  %14 = shl i32 %10, 4, !dbg !16
  %15 = add i32 %13, %14, !dbg !17
  %16 = sext i32 %14 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !18
  %18 = sext i32 %15 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !19
  %22 = or disjoint i32 %14, 1, !dbg !20
  %23 = or disjoint i32 %15, 1, !dbg !20
  %24 = sext i32 %22 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !22
  %30 = or disjoint i32 %14, 2, !dbg !23
  %31 = or disjoint i32 %15, 2, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !25
  %38 = or disjoint i32 %14, 3, !dbg !26
  %39 = or disjoint i32 %15, 3, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !28
  %46 = or disjoint i32 %14, 8, !dbg !29
  %47 = add i32 %15, 8, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !31
  %54 = or disjoint i32 %14, 9, !dbg !32
  %55 = add i32 %15, 9, !dbg !32
  %56 = sext i32 %54 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !33
  %58 = sext i32 %55 to i64, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !34
  %62 = or disjoint i32 %14, 10, !dbg !35
  %63 = add i32 %15, 10, !dbg !35
  %64 = sext i32 %62 to i64, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !36
  %66 = sext i32 %63 to i64, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !37
  %70 = or disjoint i32 %14, 11, !dbg !38
  %71 = add i32 %15, 11, !dbg !38
  %72 = sext i32 %70 to i64, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !39
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !40
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !40
  %78 = or disjoint i32 %14, 16, !dbg !41
  %79 = add i32 %15, 16, !dbg !41
  %80 = sext i32 %78 to i64, !dbg !42
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !42
  %82 = sext i32 %79 to i64, !dbg !42
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !43
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !43
  %86 = or disjoint i32 %14, 17, !dbg !44
  %87 = add i32 %15, 17, !dbg !44
  %88 = sext i32 %86 to i64, !dbg !45
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !45
  %90 = sext i32 %87 to i64, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !46
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !46
  %94 = or disjoint i32 %14, 18, !dbg !47
  %95 = add i32 %15, 18, !dbg !47
  %96 = sext i32 %94 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !48
  %98 = sext i32 %95 to i64, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !49
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !49
  %102 = or disjoint i32 %14, 19, !dbg !50
  %103 = add i32 %15, 19, !dbg !50
  %104 = sext i32 %102 to i64, !dbg !51
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !51
  %106 = sext i32 %103 to i64, !dbg !51
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !51
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #1, !dbg !52
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !52
  %110 = or disjoint i32 %14, 24, !dbg !53
  %111 = add i32 %15, 24, !dbg !53
  %112 = sext i32 %110 to i64, !dbg !54
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !54
  %114 = sext i32 %111 to i64, !dbg !54
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !54
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !55
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !55
  %118 = or disjoint i32 %14, 25, !dbg !56
  %119 = add i32 %15, 25, !dbg !56
  %120 = sext i32 %118 to i64, !dbg !57
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !57
  %122 = sext i32 %119 to i64, !dbg !57
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !57
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !58
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !58
  %126 = or disjoint i32 %14, 26, !dbg !59
  %127 = add i32 %15, 26, !dbg !59
  %128 = sext i32 %126 to i64, !dbg !60
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !60
  %130 = sext i32 %127 to i64, !dbg !60
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !60
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !61
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !61
  %134 = or disjoint i32 %14, 27, !dbg !62
  %135 = add i32 %15, 27, !dbg !62
  %136 = sext i32 %134 to i64, !dbg !63
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !63
  %138 = sext i32 %135 to i64, !dbg !63
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !63
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 true) #1, !dbg !64
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !64
  %142 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !19
  %143 = insertelement <2 x i32> %142, i32 %21, i64 1, !dbg !19
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !19
  %145 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %146 = insertelement <2 x i32> %145, i32 %29, i64 1, !dbg !22
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !22
  %148 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %149 = insertelement <2 x i32> %148, i32 %37, i64 1, !dbg !25
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !25
  %151 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %152 = insertelement <2 x i32> %151, i32 %45, i64 1, !dbg !28
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !28
  %154 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !31
  %155 = insertelement <2 x i32> %154, i32 %53, i64 1, !dbg !31
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !31
  %157 = fcmp ogt <2 x float> %147, %144, !dbg !65
  %158 = fcmp uno <2 x float> %147, zeroinitializer, !dbg !69
  %159 = or <2 x i1> %157, %158, !dbg !70
  %.v = select <2 x i1> %159, <2 x i32> %146, <2 x i32> %143, !dbg !71
  %160 = bitcast <2 x i32> %.v to <2 x float>, !dbg !71
  %161 = fcmp olt <2 x float> %160, %150, !dbg !72
  %162 = fcmp uno <2 x float> %150, zeroinitializer, !dbg !74
  %163 = or <2 x i1> %162, %161, !dbg !75
  %.v1 = select <2 x i1> %163, <2 x i32> %149, <2 x i32> %.v, !dbg !76
  %164 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !76
  %165 = fcmp olt <2 x float> %164, %153, !dbg !77
  %166 = fcmp uno <2 x float> %153, zeroinitializer, !dbg !79
  %167 = or <2 x i1> %166, %165, !dbg !80
  %.v2 = select <2 x i1> %167, <2 x i32> %152, <2 x i32> %.v1, !dbg !81
  %168 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !81
  %169 = fcmp olt <2 x float> %168, %156, !dbg !82
  %170 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !34
  %171 = insertelement <2 x i32> %170, i32 %61, i64 1, !dbg !34
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !34
  %173 = fcmp uno <2 x float> %156, zeroinitializer, !dbg !84
  %174 = or <2 x i1> %173, %169, !dbg !85
  %.v3 = select <2 x i1> %174, <2 x i32> %155, <2 x i32> %.v2, !dbg !86
  %175 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !86
  %176 = fcmp olt <2 x float> %175, %172, !dbg !87
  %177 = fcmp uno <2 x float> %172, zeroinitializer, !dbg !89
  %178 = or <2 x i1> %177, %176, !dbg !90
  %.v4 = select <2 x i1> %178, <2 x i32> %171, <2 x i32> %.v3, !dbg !91
  %179 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !91
  %180 = zext <2 x i1> %157 to <2 x i8>, !dbg !92
  %181 = select <2 x i1> %161, <2 x i8> splat (i8 2), <2 x i8> %180, !dbg !93
  %182 = select <2 x i1> %165, <2 x i8> splat (i8 3), <2 x i8> %181, !dbg !94
  %183 = select <2 x i1> %169, <2 x i8> splat (i8 4), <2 x i8> %182, !dbg !95
  %184 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !40
  %185 = insertelement <2 x i32> %184, i32 %77, i64 1, !dbg !40
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !40
  %187 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !43
  %188 = insertelement <2 x i32> %187, i32 %85, i64 1, !dbg !43
  %189 = bitcast <2 x i32> %188 to <2 x float>, !dbg !43
  %190 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !46
  %191 = insertelement <2 x i32> %190, i32 %93, i64 1, !dbg !46
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !46
  %193 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !49
  %194 = insertelement <2 x i32> %193, i32 %101, i64 1, !dbg !49
  %195 = bitcast <2 x i32> %194 to <2 x float>, !dbg !49
  %196 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !52
  %197 = insertelement <2 x i32> %196, i32 %109, i64 1, !dbg !52
  %198 = bitcast <2 x i32> %197 to <2 x float>, !dbg !52
  %199 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !55
  %200 = insertelement <2 x i32> %199, i32 %117, i64 1, !dbg !55
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !55
  %202 = insertelement <2 x i32> poison, i32 %124, i64 0, !dbg !58
  %203 = insertelement <2 x i32> %202, i32 %125, i64 1, !dbg !58
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !58
  %205 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !61
  %206 = insertelement <2 x i32> %205, i32 %133, i64 1, !dbg !61
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !61
  %208 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !64
  %209 = insertelement <2 x i32> %208, i32 %141, i64 1, !dbg !64
  %210 = bitcast <2 x i32> %209 to <2 x float>, !dbg !64
  %211 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !37
  %212 = insertelement <2 x i32> %211, i32 %69, i64 1, !dbg !37
  %213 = bitcast <2 x i32> %212 to <2 x float>, !dbg !37
  %214 = fcmp uno <2 x float> %213, zeroinitializer, !dbg !96
  %215 = fcmp olt <2 x float> %179, %213, !dbg !98
  %216 = or <2 x i1> %214, %215, !dbg !99
  %.v5 = select <2 x i1> %216, <2 x i32> %212, <2 x i32> %.v4, !dbg !100
  %217 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !100
  %218 = fcmp olt <2 x float> %217, %186, !dbg !101
  %219 = fcmp uno <2 x float> %186, zeroinitializer, !dbg !103
  %220 = or <2 x i1> %219, %218, !dbg !104
  %.v6 = select <2 x i1> %220, <2 x i32> %185, <2 x i32> %.v5, !dbg !105
  %221 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !105
  %222 = fcmp olt <2 x float> %221, %189, !dbg !106
  %223 = fcmp uno <2 x float> %189, zeroinitializer, !dbg !108
  %224 = or <2 x i1> %223, %222, !dbg !109
  %.v7 = select <2 x i1> %224, <2 x i32> %188, <2 x i32> %.v6, !dbg !110
  %225 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !110
  %226 = fcmp olt <2 x float> %225, %192, !dbg !111
  %227 = fcmp uno <2 x float> %192, zeroinitializer, !dbg !113
  %228 = or <2 x i1> %227, %226, !dbg !114
  %.v8 = select <2 x i1> %228, <2 x i32> %191, <2 x i32> %.v7, !dbg !115
  %229 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !115
  %230 = fcmp olt <2 x float> %229, %195, !dbg !116
  %231 = fcmp uno <2 x float> %195, zeroinitializer, !dbg !118
  %232 = or <2 x i1> %231, %230, !dbg !119
  %.v9 = select <2 x i1> %232, <2 x i32> %194, <2 x i32> %.v8, !dbg !120
  %233 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !120
  %234 = fcmp olt <2 x float> %233, %198, !dbg !121
  %235 = fcmp uno <2 x float> %198, zeroinitializer, !dbg !123
  %236 = or <2 x i1> %235, %234, !dbg !124
  %.v10 = select <2 x i1> %236, <2 x i32> %197, <2 x i32> %.v9, !dbg !125
  %237 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !125
  %238 = fcmp olt <2 x float> %237, %201, !dbg !126
  %239 = fcmp uno <2 x float> %201, zeroinitializer, !dbg !128
  %240 = or <2 x i1> %239, %238, !dbg !129
  %.v11 = select <2 x i1> %240, <2 x i32> %200, <2 x i32> %.v10, !dbg !130
  %241 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !130
  %242 = fcmp olt <2 x float> %241, %204, !dbg !131
  %243 = fcmp uno <2 x float> %204, zeroinitializer, !dbg !133
  %244 = or <2 x i1> %243, %242, !dbg !134
  %.v12 = select <2 x i1> %244, <2 x i32> %203, <2 x i32> %.v11, !dbg !135
  %245 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !135
  %246 = fcmp olt <2 x float> %245, %207, !dbg !136
  %247 = fcmp uno <2 x float> %207, zeroinitializer, !dbg !138
  %248 = or <2 x i1> %247, %246, !dbg !139
  %.v13 = select <2 x i1> %248, <2 x i32> %206, <2 x i32> %.v12, !dbg !140
  %249 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !140
  %250 = fcmp olt <2 x float> %249, %210, !dbg !141
  %251 = bitcast i32 %140 to float, !dbg !143
  %252 = fcmp uno float %251, 0.000000e+00, !dbg !143
  %253 = bitcast i32 %141 to float, !dbg !143
  %254 = fcmp uno float %253, 0.000000e+00, !dbg !143
  %255 = extractelement <2 x i1> %250, i64 0, !dbg !144
  %256 = or i1 %252, %255, !dbg !144
  %257 = extractelement <2 x i1> %250, i64 1, !dbg !144
  %258 = or i1 %254, %257, !dbg !144
  %259 = select <2 x i1> %176, <2 x i8> splat (i8 5), <2 x i8> %183, !dbg !145
  %260 = select <2 x i1> %215, <2 x i8> splat (i8 6), <2 x i8> %259, !dbg !146
  %261 = select <2 x i1> %218, <2 x i8> splat (i8 7), <2 x i8> %260, !dbg !147
  %262 = select <2 x i1> %222, <2 x i8> splat (i8 8), <2 x i8> %261, !dbg !148
  %263 = select <2 x i1> %226, <2 x i8> splat (i8 9), <2 x i8> %262, !dbg !149
  %264 = select <2 x i1> %230, <2 x i8> splat (i8 10), <2 x i8> %263, !dbg !150
  %265 = select <2 x i1> %234, <2 x i8> splat (i8 11), <2 x i8> %264, !dbg !151
  %266 = select <2 x i1> %238, <2 x i8> splat (i8 12), <2 x i8> %265, !dbg !152
  %267 = select <2 x i1> %242, <2 x i8> splat (i8 13), <2 x i8> %266, !dbg !153
  %268 = select <2 x i1> %246, <2 x i8> splat (i8 14), <2 x i8> %267, !dbg !154
  %269 = select <2 x i1> %250, <2 x i8> splat (i8 15), <2 x i8> %268, !dbg !155
  %270 = sext i32 %10 to i64, !dbg !156
  %271 = getelementptr float, ptr addrspace(1) %1, i64 %270, !dbg !156
  %272 = extractelement <2 x i32> %.v13, i64 0, !dbg !157
  %273 = select i1 %256, i32 %140, i32 %272, !dbg !158
  %274 = extractelement <2 x i32> %.v13, i64 1, !dbg !157
  %275 = select i1 %258, i32 %141, i32 %274, !dbg !158
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %273, i32 %275, ptr addrspace(1) %271, i1 true) #1, !dbg !157
  %276 = getelementptr i8, ptr addrspace(1) %2, i64 %270, !dbg !159
  %277 = bitcast <2 x i8> %269 to i16, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %277, ptr addrspace(1) %276, i1 true) #1, !dbg !160
  ret void, !dbg !161
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2bg5mivf2lerq7ptzyt6654cnvc3vaa6olcv2fblszw7i6l4qe2.py", directory: "inductor_cache/2b")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 32, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 49, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 32, column: 41, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 49, scope: !7)
!35 = !DILocation(line: 33, column: 43, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 51, scope: !7)
!38 = !DILocation(line: 34, column: 43, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 51, scope: !7)
!41 = !DILocation(line: 35, column: 43, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 51, scope: !7)
!44 = !DILocation(line: 36, column: 43, scope: !7)
!45 = !DILocation(line: 36, column: 31, scope: !7)
!46 = !DILocation(line: 36, column: 51, scope: !7)
!47 = !DILocation(line: 37, column: 43, scope: !7)
!48 = !DILocation(line: 37, column: 31, scope: !7)
!49 = !DILocation(line: 37, column: 51, scope: !7)
!50 = !DILocation(line: 38, column: 43, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 51, scope: !7)
!53 = !DILocation(line: 39, column: 43, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 40, column: 43, scope: !7)
!57 = !DILocation(line: 40, column: 31, scope: !7)
!58 = !DILocation(line: 40, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 43, scope: !7)
!60 = !DILocation(line: 41, column: 31, scope: !7)
!61 = !DILocation(line: 41, column: 51, scope: !7)
!62 = !DILocation(line: 42, column: 43, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 51, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 43, column: 40, scope: !7)
!69 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !68)
!71 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!72 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !73)
!73 = !DILocation(line: 44, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !73)
!77 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !78)
!78 = !DILocation(line: 45, column: 40, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !78)
!82 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !83)
!83 = !DILocation(line: 46, column: 40, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !83)
!87 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !88)
!88 = !DILocation(line: 47, column: 41, scope: !7)
!89 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !88)
!90 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !88)
!91 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !88)
!92 = !DILocation(line: 61, column: 35, scope: !7)
!93 = !DILocation(line: 64, column: 35, scope: !7)
!94 = !DILocation(line: 67, column: 35, scope: !7)
!95 = !DILocation(line: 70, column: 35, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !97)
!97 = !DILocation(line: 48, column: 42, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !102)
!102 = !DILocation(line: 49, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !107)
!107 = !DILocation(line: 50, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !112)
!112 = !DILocation(line: 51, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !117)
!117 = !DILocation(line: 52, column: 42, scope: !7)
!118 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !117)
!119 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !117)
!120 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !117)
!121 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !122)
!122 = !DILocation(line: 53, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !122)
!126 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !127)
!127 = !DILocation(line: 54, column: 42, scope: !7)
!128 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !127)
!129 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !127)
!130 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !127)
!131 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !132)
!132 = !DILocation(line: 55, column: 42, scope: !7)
!133 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !132)
!134 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !132)
!135 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !132)
!136 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !137)
!137 = !DILocation(line: 56, column: 42, scope: !7)
!138 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !137)
!139 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !137)
!140 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !137)
!141 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !142)
!142 = !DILocation(line: 57, column: 42, scope: !7)
!143 = !DILocation(line: 120, column: 21, scope: !66, inlinedAt: !142)
!144 = !DILocation(line: 120, column: 16, scope: !66, inlinedAt: !142)
!145 = !DILocation(line: 73, column: 35, scope: !7)
!146 = !DILocation(line: 76, column: 35, scope: !7)
!147 = !DILocation(line: 79, column: 35, scope: !7)
!148 = !DILocation(line: 82, column: 35, scope: !7)
!149 = !DILocation(line: 85, column: 35, scope: !7)
!150 = !DILocation(line: 88, column: 35, scope: !7)
!151 = !DILocation(line: 91, column: 35, scope: !7)
!152 = !DILocation(line: 94, column: 35, scope: !7)
!153 = !DILocation(line: 97, column: 35, scope: !7)
!154 = !DILocation(line: 100, column: 35, scope: !7)
!155 = !DILocation(line: 103, column: 35, scope: !7)
!156 = !DILocation(line: 104, column: 25, scope: !7)
!157 = !DILocation(line: 104, column: 37, scope: !7)
!158 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !142)
!159 = !DILocation(line: 105, column: 25, scope: !7)
!160 = !DILocation(line: 105, column: 37, scope: !7)
!161 = !DILocation(line: 105, column: 4, scope: !7)
