; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_silu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 6, !dbg !16
  %21 = and i32 %14, 60, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = icmp slt i32 %22, 768, !dbg !19
  %24 = mul i32 %15, 768, !dbg !20
  %25 = mul i32 %16, 768, !dbg !20
  %26 = add i32 %22, %24, !dbg !21
  %27 = add i32 %22, %25, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = and i1 %17, %23, !dbg !23
  %33 = and i1 %18, %23, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %33) #4, !dbg !24
  %36 = sext i32 %22 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !28
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %45 = bitcast i32 %41 to float, !dbg !28
  %46 = bitcast i32 %42 to float, !dbg !28
  %47 = bitcast i32 %43 to float, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !32
  %53 = fadd float %45, 0x3F50624DE0000000, !dbg !33
  %54 = fadd float %46, 0x3F50624DE0000000, !dbg !33
  %55 = fadd float %47, 0x3F50624DE0000000, !dbg !33
  %56 = fadd float %48, 0x3F50624DE0000000, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %57, 0, !dbg !34
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %58, 0, !dbg !34
  br i1 %.not.i, label %64, label %59, !dbg !34

59:                                               ; preds = %8
  br i1 %.not1.i, label %62, label %60, !dbg !34

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !34

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !34
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i18 = icmp eq i32 %69, 0, !dbg !34
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i21 = icmp eq i32 %70, 0, !dbg !34
  br i1 %.not.i18, label %76, label %71, !dbg !34

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %74, label %72, !dbg !34

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %79, label %77, !dbg !34

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

__nv_sqrtf.exit22:                                ; preds = %72, %74, %77, %79
  %.0.i20 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !34
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i23 = icmp eq i32 %81, 0, !dbg !34
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i26 = icmp eq i32 %82, 0, !dbg !34
  br i1 %.not.i23, label %88, label %83, !dbg !34

83:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %86, label %84, !dbg !34

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

88:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %91, label %89, !dbg !34

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

__nv_sqrtf.exit27:                                ; preds = %84, %86, %89, %91
  %.0.i25 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !34
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i28 = icmp eq i32 %93, 0, !dbg !34
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i31 = icmp eq i32 %94, 0, !dbg !34
  br i1 %.not.i28, label %100, label %95, !dbg !34

95:                                               ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %98, label %96, !dbg !34

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

100:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %103, label %101, !dbg !34

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

__nv_sqrtf.exit32:                                ; preds = %96, %98, %101, %103
  %.0.i30 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %106 = bitcast i32 %105 to float, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = fsub float %106, %108, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %111 = bitcast i32 %110 to float, !dbg !24
  %112 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fsub float %111, %113, !dbg !35
  %115 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %116 = bitcast i32 %115 to float, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = fsub float %116, %118, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %121 = bitcast i32 %120 to float, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = fsub float %121, %123, !dbg !35
  %125 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %126 = bitcast i32 %125 to float, !dbg !24
  %127 = fsub float %126, %108, !dbg !35
  %128 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %129 = bitcast i32 %128 to float, !dbg !24
  %130 = fsub float %129, %113, !dbg !35
  %131 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %132 = bitcast i32 %131 to float, !dbg !24
  %133 = fsub float %132, %118, !dbg !35
  %134 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %135 = bitcast i32 %134 to float, !dbg !24
  %136 = fsub float %135, %123, !dbg !35
  %137 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %140 = bitcast i32 %139 to float, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %144 = bitcast i32 %143 to float, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %150 = bitcast i32 %149 to float, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = lshr i32 %11, 2, !dbg !17
  %154 = and i32 %153, 31, !dbg !17
  %155 = or disjoint i32 %154, %20, !dbg !18
  %156 = or disjoint i32 %155, 32, !dbg !18
  %157 = icmp slt i32 %156, 768, !dbg !19
  %158 = and i32 %14, 12, !dbg !12
  %159 = or disjoint i32 %10, %158, !dbg !13
  %160 = icmp slt i32 %159, 16, !dbg !14
  %161 = and i1 %160, %157, !dbg !23
  %162 = icmp slt i32 %155, 768, !dbg !19
  %163 = and i1 %160, %162, !dbg !23
  %164 = ashr exact i32 %159, 2, !dbg !36
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %169 = fmul float %136, %165, !dbg !38
  %170 = fmul float %133, %166, !dbg !38
  %171 = fmul float %130, %167, !dbg !38
  %172 = fmul float %127, %168, !dbg !38
  %173 = fmul float %124, %165, !dbg !38
  %174 = fmul float %119, %166, !dbg !38
  %175 = fmul float %114, %167, !dbg !38
  %176 = fmul float %109, %168, !dbg !38
  %177 = fmul float %169, %152, !dbg !39
  %178 = fmul float %170, %150, !dbg !39
  %179 = fmul float %171, %148, !dbg !39
  %180 = fmul float %172, %146, !dbg !39
  %181 = fmul float %173, %152, !dbg !39
  %182 = fmul float %174, %150, !dbg !39
  %183 = fmul float %175, %148, !dbg !39
  %184 = fmul float %176, %146, !dbg !39
  %185 = fadd float %177, %144, !dbg !40
  %186 = fadd float %178, %142, !dbg !40
  %187 = fadd float %179, %140, !dbg !40
  %188 = fadd float %180, %138, !dbg !40
  %189 = fadd float %181, %144, !dbg !40
  %190 = fadd float %182, %142, !dbg !40
  %191 = fadd float %183, %140, !dbg !40
  %192 = fadd float %184, %138, !dbg !40
  %193 = fsub float 0.000000e+00, %185, !dbg !41
  %194 = fsub float 0.000000e+00, %186, !dbg !41
  %195 = fsub float 0.000000e+00, %187, !dbg !41
  %196 = fsub float 0.000000e+00, %188, !dbg !41
  %197 = fsub float 0.000000e+00, %189, !dbg !41
  %198 = fsub float 0.000000e+00, %190, !dbg !41
  %199 = fsub float 0.000000e+00, %191, !dbg !41
  %200 = fsub float 0.000000e+00, %192, !dbg !41
  %201 = fmul float %193, 0x3FF7154760000000, !dbg !45
  %202 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %201) #4, !dbg !45
  %203 = fmul float %194, 0x3FF7154760000000, !dbg !45
  %204 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %203) #4, !dbg !45
  %205 = fmul float %195, 0x3FF7154760000000, !dbg !45
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #4, !dbg !45
  %207 = fmul float %196, 0x3FF7154760000000, !dbg !45
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #4, !dbg !45
  %209 = fmul float %197, 0x3FF7154760000000, !dbg !45
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #4, !dbg !45
  %211 = fmul float %198, 0x3FF7154760000000, !dbg !45
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #4, !dbg !45
  %213 = fmul float %199, 0x3FF7154760000000, !dbg !45
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #4, !dbg !45
  %215 = fmul float %200, 0x3FF7154760000000, !dbg !45
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #4, !dbg !45
  %217 = fadd float %202, 1.000000e+00, !dbg !46
  %218 = fadd float %204, 1.000000e+00, !dbg !46
  %219 = fadd float %206, 1.000000e+00, !dbg !46
  %220 = fadd float %208, 1.000000e+00, !dbg !46
  %221 = fadd float %210, 1.000000e+00, !dbg !46
  %222 = fadd float %212, 1.000000e+00, !dbg !46
  %223 = fadd float %214, 1.000000e+00, !dbg !46
  %224 = fadd float %216, 1.000000e+00, !dbg !46
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %217) #4, !dbg !47
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %218) #4, !dbg !47
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %219) #4, !dbg !47
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %220) #4, !dbg !47
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #4, !dbg !47
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #4, !dbg !47
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #4, !dbg !47
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %224) #4, !dbg !47
  %233 = fmul float %185, %225, !dbg !48
  %234 = fmul float %186, %226, !dbg !48
  %235 = fmul float %187, %227, !dbg !48
  %236 = fmul float %188, %228, !dbg !48
  %237 = fmul float %189, %229, !dbg !48
  %238 = fmul float %190, %230, !dbg !48
  %239 = fmul float %191, %231, !dbg !48
  %240 = fmul float %192, %232, !dbg !48
  %241 = shl i32 %155, 2, !dbg !49
  %242 = shl i32 %156, 2, !dbg !49
  %243 = mul i32 %164, 3072, !dbg !50
  %244 = add i32 %241, %243, !dbg !51
  %245 = add i32 %242, %243, !dbg !51
  %246 = sext i32 %244 to i64, !dbg !52
  %247 = getelementptr float, ptr addrspace(1) %5, i64 %246, !dbg !52
  %248 = sext i32 %245 to i64, !dbg !52
  %249 = getelementptr float, ptr addrspace(1) %5, i64 %248, !dbg !52
  %250 = shl i32 %11, 6, !dbg !53
  %251 = and i32 %250, 960, !dbg !53
  %252 = or disjoint i32 %251, %13, !dbg !53
  %253 = and i32 %14, 508, !dbg !53
  %254 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %251, !dbg !53
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !53
  %256 = bitcast float %233 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !53
  %257 = or disjoint i32 %252, 16, !dbg !53
  %258 = lshr i32 %257, 2, !dbg !53
  %259 = and i32 %258, 244, !dbg !53
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !53
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !53
  %262 = bitcast float %234 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !53
  %263 = or disjoint i32 %252, 32, !dbg !53
  %264 = lshr i32 %263, 2, !dbg !53
  %265 = and i32 %264, 248, !dbg !53
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !53
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !53
  %268 = bitcast float %235 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !53
  %269 = or disjoint i32 %252, 48, !dbg !53
  %270 = lshr i32 %269, 2, !dbg !53
  %271 = and i32 %270, 252, !dbg !53
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !53
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !53
  %274 = bitcast float %236 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !53
  %275 = or disjoint i32 %252, 8, !dbg !53
  %276 = getelementptr float, ptr addrspace(3) %254, i32 %275, !dbg !53
  %277 = bitcast float %237 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !53
  %278 = or disjoint i32 %252, 24, !dbg !53
  %279 = lshr i32 %278, 2, !dbg !53
  %280 = and i32 %279, 244, !dbg !53
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !53
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !53
  %283 = bitcast float %238 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !53
  %284 = or disjoint i32 %252, 40, !dbg !53
  %285 = lshr i32 %284, 2, !dbg !53
  %286 = and i32 %285, 248, !dbg !53
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !53
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !53
  %289 = bitcast float %239 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !53
  %290 = or disjoint i32 %252, 56, !dbg !53
  %291 = lshr i32 %290, 2, !dbg !53
  %292 = and i32 %291, 252, !dbg !53
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %292, !dbg !53
  %294 = getelementptr float, ptr addrspace(3) %293, i32 %290, !dbg !53
  %295 = bitcast float %240 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %296 = and i32 %11, 124, !dbg !53
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !53
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %253, !dbg !53
  %299 = or disjoint i32 %253, 512, !dbg !53
  %300 = lshr exact i32 %299, 2, !dbg !53
  %301 = and i32 %300, 252, !dbg !53
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !53
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %299, !dbg !53
  %304 = load <4 x i32>, ptr addrspace(3) %303, align 16, !dbg !53
  %.extract = load i32, ptr addrspace(3) %298, align 16, !dbg !53
  %305 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 4, !dbg !53
  %.extract11 = load i32, ptr addrspace(3) %305, align 4, !dbg !53
  %306 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 8, !dbg !53
  %.extract12 = load i32, ptr addrspace(3) %306, align 8, !dbg !53
  %307 = getelementptr inbounds i8, ptr addrspace(3) %298, i32 12, !dbg !53
  %.extract13 = load i32, ptr addrspace(3) %307, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %247, i1 %163) #4, !dbg !53
  %.extract14 = extractelement <4 x i32> %304, i64 0, !dbg !53
  %.extract15 = extractelement <4 x i32> %304, i64 1, !dbg !53
  %.extract16 = extractelement <4 x i32> %304, i64 2, !dbg !53
  %.extract17 = extractelement <4 x i32> %304, i64 3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %249, i1 %161) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4nn53ziifdqt5bndupcx3ef3xthtffilq47mfmemdhnmd2mcopc.py", directory: "inductor_cache/4n")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_silu_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_silu_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_silu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 26, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 48, column: 23, scope: !7)
!45 = !DILocation(line: 47, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 47, column: 20, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 47, column: 16, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 32, scope: !7)
!50 = !DILocation(line: 50, column: 42, scope: !7)
!51 = !DILocation(line: 50, column: 37, scope: !7)
!52 = !DILocation(line: 50, column: 25, scope: !7)
!53 = !DILocation(line: 50, column: 54, scope: !7)
!54 = !DILocation(line: 50, column: 4, scope: !7)
