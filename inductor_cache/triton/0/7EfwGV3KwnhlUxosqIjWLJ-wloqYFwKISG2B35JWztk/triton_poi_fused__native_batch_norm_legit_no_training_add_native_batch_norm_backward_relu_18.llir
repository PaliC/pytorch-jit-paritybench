; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 64, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = sext i32 %18 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = bitcast i32 %40 to float, !dbg !24
  %45 = bitcast i32 %41 to float, !dbg !24
  %46 = bitcast i32 %42 to float, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %52 = bitcast i32 %48 to float, !dbg !24
  %53 = bitcast i32 %49 to float, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !28
  %62 = fadd float %43, 0x3EE4F8B580000000, !dbg !29
  %63 = fadd float %44, 0x3EE4F8B580000000, !dbg !29
  %64 = fadd float %45, 0x3EE4F8B580000000, !dbg !29
  %65 = fadd float %46, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %52, 0x3EE4F8B580000000, !dbg !29
  %67 = fadd float %53, 0x3EE4F8B580000000, !dbg !29
  %68 = fadd float %54, 0x3EE4F8B580000000, !dbg !29
  %69 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %70, 0, !dbg !30
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %71, 0, !dbg !30
  br i1 %.not.i, label %77, label %72, !dbg !30

72:                                               ; preds = %10
  br i1 %.not1.i, label %75, label %73, !dbg !30

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

77:                                               ; preds = %10
  br i1 %.not1.i, label %80, label %78, !dbg !30

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %73, %75, %78, %80
  %.0.i = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %82, 0, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %83, 0, !dbg !30
  br i1 %.not.i1, label %89, label %84, !dbg !30

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !30

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !30

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %85, %87, %90, %92
  %.0.i3 = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %94, 0, !dbg !30
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %95, 0, !dbg !30
  br i1 %.not.i6, label %101, label %96, !dbg !30

96:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %99, label %97, !dbg !30

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !30

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %97, %99, %102, %104
  %.0.i8 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !30
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %106, 0, !dbg !30
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %107, 0, !dbg !30
  br i1 %.not.i11, label %113, label %108, !dbg !30

108:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %111, label %109, !dbg !30

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !30

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %109, %111, %114, %116
  %.0.i13 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !30
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %118, 0, !dbg !30
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %119, 0, !dbg !30
  br i1 %.not.i16, label %125, label %120, !dbg !30

120:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %123, label %121, !dbg !30

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

125:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %128, label %126, !dbg !30

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %121, %123, %126, %128
  %.0.i18 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !30
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %130, 0, !dbg !30
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %131, 0, !dbg !30
  br i1 %.not.i21, label %137, label %132, !dbg !30

132:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %135, label %133, !dbg !30

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

137:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %140, label %138, !dbg !30

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %133, %135, %138, %140
  %.0.i23 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !30
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %142, 0, !dbg !30
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %143, 0, !dbg !30
  br i1 %.not.i26, label %149, label %144, !dbg !30

144:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %147, label %145, !dbg !30

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

149:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %152, label %150, !dbg !30

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %145, %147, %150, %152
  %.0.i28 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !30
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %154, 0, !dbg !30
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %155, 0, !dbg !30
  br i1 %.not.i31, label %161, label %156, !dbg !30

156:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %159, label %157, !dbg !30

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

161:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %164, label %162, !dbg !30

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %157, %159, %162, %164
  %.0.i33 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %167 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %168 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %169 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %170 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %171 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %175 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %176 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %177 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %178 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %187 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %190 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %191 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %192 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %194 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %195 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %196 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %197 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %198 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %204 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %205 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %206 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %207 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %208 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %209 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %210 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %211 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %213 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %222 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !16
  %223 = insertelement <8 x i32> %222, i32 %170, i64 1, !dbg !16
  %224 = insertelement <8 x i32> %223, i32 %174, i64 2, !dbg !16
  %225 = insertelement <8 x i32> %224, i32 %178, i64 3, !dbg !16
  %226 = insertelement <8 x i32> %225, i32 %182, i64 4, !dbg !16
  %227 = insertelement <8 x i32> %226, i32 %186, i64 5, !dbg !16
  %228 = insertelement <8 x i32> %227, i32 %190, i64 6, !dbg !16
  %229 = insertelement <8 x i32> %228, i32 %194, i64 7, !dbg !16
  %230 = bitcast <8 x i32> %229 to <8 x float>, !dbg !16
  %231 = insertelement <8 x i32> poison, i32 %167, i64 0, !dbg !18
  %232 = insertelement <8 x i32> %231, i32 %171, i64 1, !dbg !18
  %233 = insertelement <8 x i32> %232, i32 %175, i64 2, !dbg !18
  %234 = insertelement <8 x i32> %233, i32 %179, i64 3, !dbg !18
  %235 = insertelement <8 x i32> %234, i32 %183, i64 4, !dbg !18
  %236 = insertelement <8 x i32> %235, i32 %187, i64 5, !dbg !18
  %237 = insertelement <8 x i32> %236, i32 %191, i64 6, !dbg !18
  %238 = insertelement <8 x i32> %237, i32 %195, i64 7, !dbg !18
  %239 = bitcast <8 x i32> %238 to <8 x float>, !dbg !18
  %240 = fadd <8 x float> %230, %239, !dbg !32
  %241 = insertelement <8 x i32> poison, i32 %168, i64 0, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %172, i64 1, !dbg !20
  %243 = insertelement <8 x i32> %242, i32 %176, i64 2, !dbg !20
  %244 = insertelement <8 x i32> %243, i32 %180, i64 3, !dbg !20
  %245 = insertelement <8 x i32> %244, i32 %184, i64 4, !dbg !20
  %246 = insertelement <8 x i32> %245, i32 %188, i64 5, !dbg !20
  %247 = insertelement <8 x i32> %246, i32 %192, i64 6, !dbg !20
  %248 = insertelement <8 x i32> %247, i32 %196, i64 7, !dbg !20
  %249 = bitcast <8 x i32> %248 to <8 x float>, !dbg !20
  %250 = fadd <8 x float> %240, %249, !dbg !33
  %251 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !22
  %252 = insertelement <8 x i32> %251, i32 %173, i64 1, !dbg !22
  %253 = insertelement <8 x i32> %252, i32 %177, i64 2, !dbg !22
  %254 = insertelement <8 x i32> %253, i32 %181, i64 3, !dbg !22
  %255 = insertelement <8 x i32> %254, i32 %185, i64 4, !dbg !22
  %256 = insertelement <8 x i32> %255, i32 %189, i64 5, !dbg !22
  %257 = insertelement <8 x i32> %256, i32 %193, i64 6, !dbg !22
  %258 = insertelement <8 x i32> %257, i32 %197, i64 7, !dbg !22
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !22
  %260 = fsub <8 x float> %250, %259, !dbg !34
  %261 = insertelement <8 x i32> poison, i32 %198, i64 0, !dbg !28
  %262 = insertelement <8 x i32> %261, i32 %199, i64 1, !dbg !28
  %263 = insertelement <8 x i32> %262, i32 %200, i64 2, !dbg !28
  %264 = insertelement <8 x i32> %263, i32 %201, i64 3, !dbg !28
  %265 = insertelement <8 x i32> %264, i32 %202, i64 4, !dbg !28
  %266 = insertelement <8 x i32> %265, i32 %203, i64 5, !dbg !28
  %267 = insertelement <8 x i32> %266, i32 %204, i64 6, !dbg !28
  %268 = insertelement <8 x i32> %267, i32 %205, i64 7, !dbg !28
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !28
  %270 = insertelement <8 x i32> poison, i32 %206, i64 0, !dbg !26
  %271 = insertelement <8 x i32> %270, i32 %207, i64 1, !dbg !26
  %272 = insertelement <8 x i32> %271, i32 %208, i64 2, !dbg !26
  %273 = insertelement <8 x i32> %272, i32 %209, i64 3, !dbg !26
  %274 = insertelement <8 x i32> %273, i32 %210, i64 4, !dbg !26
  %275 = insertelement <8 x i32> %274, i32 %211, i64 5, !dbg !26
  %276 = insertelement <8 x i32> %275, i32 %212, i64 6, !dbg !26
  %277 = insertelement <8 x i32> %276, i32 %213, i64 7, !dbg !26
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !26
  %279 = insertelement <8 x float> poison, float %221, i64 0, !dbg !35
  %280 = insertelement <8 x float> %279, float %220, i64 1, !dbg !35
  %281 = insertelement <8 x float> %280, float %219, i64 2, !dbg !35
  %282 = insertelement <8 x float> %281, float %218, i64 3, !dbg !35
  %283 = insertelement <8 x float> %282, float %217, i64 4, !dbg !35
  %284 = insertelement <8 x float> %283, float %216, i64 5, !dbg !35
  %285 = insertelement <8 x float> %284, float %215, i64 6, !dbg !35
  %286 = insertelement <8 x float> %285, float %214, i64 7, !dbg !35
  %287 = fmul <8 x float> %260, %286, !dbg !35
  %288 = fmul <8 x float> %287, %278, !dbg !36
  %289 = fadd <8 x float> %288, %269, !dbg !37
  %290 = fcmp olt <8 x float> %289, zeroinitializer, !dbg !38
  %291 = extractelement <8 x i1> %290, i64 7, !dbg !42
  %292 = extractelement <8 x i1> %290, i64 6, !dbg !42
  %293 = extractelement <8 x i1> %290, i64 5, !dbg !42
  %294 = extractelement <8 x i1> %290, i64 4, !dbg !42
  %295 = extractelement <8 x i1> %290, i64 3, !dbg !42
  %296 = extractelement <8 x i1> %290, i64 2, !dbg !42
  %297 = extractelement <8 x i1> %290, i64 1, !dbg !42
  %298 = extractelement <8 x i1> %290, i64 0, !dbg !42
  %299 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !43
  %300 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !43
  %bc = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %301 = extractelement <8 x i32> %bc, i64 7, !dbg !44
  %302 = select i1 %291, i32 0, i32 %301, !dbg !42
  %bc36 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %303 = extractelement <8 x i32> %bc36, i64 6, !dbg !44
  %304 = select i1 %292, i32 0, i32 %303, !dbg !42
  %bc37 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %305 = extractelement <8 x i32> %bc37, i64 5, !dbg !44
  %306 = select i1 %293, i32 0, i32 %305, !dbg !42
  %bc38 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %307 = extractelement <8 x i32> %bc38, i64 4, !dbg !44
  %308 = select i1 %294, i32 0, i32 %307, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %304, i32 %306, i32 %308, ptr addrspace(1) %299, i1 true) #3, !dbg !44
  %bc39 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %309 = extractelement <8 x i32> %bc39, i64 3, !dbg !44
  %310 = select i1 %295, i32 0, i32 %309, !dbg !42
  %bc40 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %311 = extractelement <8 x i32> %bc40, i64 2, !dbg !44
  %312 = select i1 %296, i32 0, i32 %311, !dbg !42
  %bc41 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %313 = extractelement <8 x i32> %bc41, i64 1, !dbg !44
  %314 = select i1 %297, i32 0, i32 %313, !dbg !42
  %bc42 = bitcast <8 x float> %289 to <8 x i32>, !dbg !44
  %315 = extractelement <8 x i32> %bc42, i64 0, !dbg !44
  %316 = select i1 %298, i32 0, i32 %315, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %312, i32 %314, i32 %316, ptr addrspace(1) %300, i1 true) #3, !dbg !44
  %317 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !45
  %318 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !45
  %bc43 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %319 = extractelement <8 x i32> %bc43, i64 7, !dbg !46
  %bc44 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %320 = extractelement <8 x i32> %bc44, i64 6, !dbg !46
  %bc45 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %321 = extractelement <8 x i32> %bc45, i64 5, !dbg !46
  %bc46 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %322 = extractelement <8 x i32> %bc46, i64 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %317, i1 true) #3, !dbg !46
  %bc47 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %323 = extractelement <8 x i32> %bc47, i64 3, !dbg !46
  %bc48 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %324 = extractelement <8 x i32> %bc48, i64 2, !dbg !46
  %bc49 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %325 = extractelement <8 x i32> %bc49, i64 1, !dbg !46
  %bc50 = bitcast <8 x float> %260 to <8 x i32>, !dbg !46
  %326 = extractelement <8 x i32> %bc50, i64 0, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %323, i32 %324, i32 %325, i32 %326, ptr addrspace(1) %318, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3w2t25ocm6cm3h6jasopt72uqttnu6ifj6mllvlwftqw5beq33v.py", directory: "inductor_cache/3w")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 27, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 25, scope: !7)
!46 = !DILocation(line: 49, column: 36, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
