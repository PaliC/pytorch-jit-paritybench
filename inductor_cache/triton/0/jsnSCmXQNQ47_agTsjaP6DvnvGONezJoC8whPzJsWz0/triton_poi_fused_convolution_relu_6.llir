; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = lshr i32 %9, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %13, !dbg !16
  %21 = or disjoint i32 %19, %14, !dbg !16
  %22 = or disjoint i32 %19, %11, !dbg !16
  %23 = icmp slt i32 %20, 1024, !dbg !17
  %24 = icmp slt i32 %21, 1024, !dbg !17
  %25 = icmp slt i32 %22, 1024, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %26 = sdiv i32 %.frozen, 768, !dbg !18
  %27 = mul i32 %26, 768, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = mul i32 %20, 768, !dbg !20
  %29 = mul i32 %21, 768, !dbg !20
  %30 = mul i32 %26, 786432, !dbg !21
  %31 = add i32 %30, %.decomposed, !dbg !22
  %32 = add i32 %31, %28, !dbg !23
  %33 = add i32 %31, %29, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !25
  %56 = insertelement <8 x i32> %55, i32 %46, i64 1, !dbg !25
  %57 = insertelement <8 x i32> %56, i32 %45, i64 2, !dbg !25
  %58 = insertelement <8 x i32> %57, i32 %44, i64 3, !dbg !25
  %59 = insertelement <8 x i32> %58, i32 %42, i64 4, !dbg !25
  %60 = insertelement <8 x i32> %59, i32 %41, i64 5, !dbg !25
  %61 = insertelement <8 x i32> %60, i32 %40, i64 6, !dbg !25
  %62 = insertelement <8 x i32> %61, i32 %39, i64 7, !dbg !25
  %63 = bitcast <8 x i32> %62 to <8 x float>, !dbg !25
  %64 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !27
  %65 = insertelement <4 x i32> %64, i32 %53, i64 1, !dbg !27
  %66 = insertelement <4 x i32> %65, i32 %52, i64 2, !dbg !27
  %67 = insertelement <4 x i32> %66, i32 %51, i64 3, !dbg !27
  %68 = bitcast <4 x i32> %67 to <4 x float>, !dbg !27
  %69 = shufflevector <4 x float> %68, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %70 = fadd <8 x float> %69, %63, !dbg !28
  %71 = fcmp olt <8 x float> %70, zeroinitializer, !dbg !29
  %72 = extractelement <8 x i1> %71, i64 7, !dbg !33
  %73 = extractelement <8 x float> %70, i64 7, !dbg !34
  %74 = extractelement <8 x i1> %71, i64 6, !dbg !33
  %75 = extractelement <8 x float> %70, i64 6, !dbg !34
  %76 = extractelement <8 x i1> %71, i64 5, !dbg !33
  %77 = extractelement <8 x float> %70, i64 5, !dbg !34
  %78 = extractelement <8 x i1> %71, i64 4, !dbg !33
  %79 = extractelement <8 x float> %70, i64 4, !dbg !34
  %80 = extractelement <8 x i1> %71, i64 3, !dbg !33
  %81 = extractelement <8 x float> %70, i64 3, !dbg !34
  %82 = extractelement <8 x i1> %71, i64 2, !dbg !33
  %83 = extractelement <8 x float> %70, i64 2, !dbg !34
  %84 = extractelement <8 x i1> %71, i64 1, !dbg !33
  %85 = extractelement <8 x float> %70, i64 1, !dbg !34
  %86 = extractelement <8 x i1> %71, i64 0, !dbg !33
  %87 = extractelement <8 x float> %70, i64 0, !dbg !34
  %88 = shl i32 %16, 10, !dbg !35
  %89 = shl i32 %17, 10, !dbg !35
  %90 = add i32 %22, %88, !dbg !36
  %91 = add i32 %22, %89, !dbg !36
  %92 = sext i32 %90 to i64, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !37
  %94 = sext i32 %91 to i64, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !37
  %96 = shl i32 %9, 7, !dbg !34
  %97 = and i32 %96, 896, !dbg !34
  %98 = or disjoint i32 %97, %13, !dbg !34
  %99 = and i32 %10, 508, !dbg !34
  %100 = lshr exact i32 %97, 3, !dbg !34
  %101 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !34
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %98, !dbg !34
  %103 = bitcast float %73 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !34
  %104 = or disjoint i32 %98, 32, !dbg !34
  %105 = lshr i32 %104, 5, !dbg !34
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !34
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !34
  %108 = bitcast float %75 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !34
  %109 = or disjoint i32 %98, 64, !dbg !34
  %110 = lshr i32 %109, 5, !dbg !34
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !34
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !34
  %113 = bitcast float %77 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !34
  %114 = or disjoint i32 %98, 96, !dbg !34
  %115 = lshr i32 %114, 5, !dbg !34
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !34
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !34
  %118 = bitcast float %79 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !34
  %119 = or disjoint i32 %98, 16, !dbg !34
  %120 = getelementptr float, ptr addrspace(3) %101, i32 %119, !dbg !34
  %121 = bitcast float %81 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !34
  %122 = or disjoint i32 %98, 48, !dbg !34
  %123 = lshr i32 %122, 5, !dbg !34
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !34
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !34
  %126 = bitcast float %83 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !34
  %127 = or disjoint i32 %98, 80, !dbg !34
  %128 = lshr i32 %127, 5, !dbg !34
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !34
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !34
  %131 = bitcast float %85 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !34
  %132 = or disjoint i32 %98, 112, !dbg !34
  %133 = lshr i32 %132, 5, !dbg !34
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !34
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %132, !dbg !34
  %136 = bitcast float %87 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %137 = lshr i32 %99, 5, !dbg !34
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %137, !dbg !34
  %139 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %99, !dbg !34
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !34
  %141 = or disjoint i32 %99, 1, !dbg !34
  %142 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %141, !dbg !34
  %143 = load i32, ptr addrspace(3) %142, align 4, !dbg !34
  %144 = or disjoint i32 %99, 2, !dbg !34
  %145 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %144, !dbg !34
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !34
  %147 = or disjoint i32 %99, 3, !dbg !34
  %148 = getelementptr inbounds float, ptr addrspace(3) %138, i32 %147, !dbg !34
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !34
  %150 = or disjoint i32 %99, 512, !dbg !34
  %151 = lshr i32 %150, 5, !dbg !34
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !34
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %150, !dbg !34
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !34
  %155 = or disjoint i32 %99, 513, !dbg !34
  %156 = lshr i32 %155, 5, !dbg !34
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !34
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %155, !dbg !34
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !34
  %160 = or disjoint i32 %99, 514, !dbg !34
  %161 = lshr i32 %160, 5, !dbg !34
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !34
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %160, !dbg !34
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !34
  %165 = or disjoint i32 %99, 515, !dbg !34
  %166 = lshr i32 %165, 5, !dbg !34
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !34
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %165, !dbg !34
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %143, i32 %146, i32 %149, ptr addrspace(1) %93, i1 %25) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %154, i32 %159, i32 %164, i32 %169, ptr addrspace(1) %95, i1 %25) #2, !dbg !34
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !38
  %172 = bitcast float %73 to i32, !dbg !39
  %173 = select i1 %72, i32 0, i32 %172, !dbg !33
  %174 = bitcast float %75 to i32, !dbg !39
  %175 = select i1 %74, i32 0, i32 %174, !dbg !33
  %176 = bitcast float %77 to i32, !dbg !39
  %177 = select i1 %76, i32 0, i32 %176, !dbg !33
  %178 = bitcast float %79 to i32, !dbg !39
  %179 = select i1 %78, i32 0, i32 %178, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %175, i32 %177, i32 %179, ptr addrspace(1) %170, i1 %23) #2, !dbg !39
  %180 = bitcast float %81 to i32, !dbg !39
  %181 = select i1 %80, i32 0, i32 %180, !dbg !33
  %182 = bitcast float %83 to i32, !dbg !39
  %183 = select i1 %82, i32 0, i32 %182, !dbg !33
  %184 = bitcast float %85 to i32, !dbg !39
  %185 = select i1 %84, i32 0, i32 %184, !dbg !33
  %186 = bitcast float %87 to i32, !dbg !39
  %187 = select i1 %86, i32 0, i32 %186, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %183, i32 %185, i32 %187, ptr addrspace(1) %171, i1 %24) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7uljf2ouk4vwtthh4ujzeuhtwhg44ge5nxtouovvjv2mud53tvl.py", directory: "inductor_cache/7u")
!4 = !{ptr @triton_poi_fused_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_6", linkageName: "triton_poi_fused_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 51, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 25, scope: !7)
!39 = !DILocation(line: 38, column: 57, scope: !7)
!40 = !DILocation(line: 38, column: 4, scope: !7)
