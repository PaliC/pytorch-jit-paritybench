; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 2, !dbg !13
  %13 = sdiv i32 %11, 16, !dbg !14
  %14 = srem i32 %13, 768, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %15 = sdiv i32 %.frozen, 12288, !dbg !16
  %16 = ashr exact i32 %11, 2, !dbg !17
  %17 = srem i32 %16, 4, !dbg !18
  %18 = srem i32 %12, 4, !dbg !19
  %19 = icmp slt i32 %14, 256, !dbg !20
  %20 = mul i32 %15, 12288, !dbg !21
  %srem.decomposed = sub i32 %.frozen, %20, !dbg !21
  %21 = shl nsw i32 %15, 12, !dbg !22
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !23
  %23 = sext i32 %22 to i64, !dbg !24
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !24
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !25
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !25
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !25
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !25
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !25
  %30 = icmp sgt i32 %14, 255, !dbg !26
  %31 = sext i32 %17 to i64, !dbg !27
  %32 = getelementptr i64, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %30, i1 %30) #1, !dbg !28
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %30, i1 %30) #1, !dbg !28
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %30, i1 %30) #1, !dbg !28
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %32, i1 %30, i1 %30) #1, !dbg !28
  %37 = lshr i64 %33, 62, !dbg !29
  %38 = and i64 %37, 2, !dbg !29
  %39 = add i64 %38, %33, !dbg !29
  %40 = sext i32 %18 to i64, !dbg !30
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !30
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %1, i1 %30, i1 %30, i1 %30) #1, !dbg !31
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !31
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !31
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %41, i1 %30, i1 %30, i1 %30) #1, !dbg !31
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !31
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !31
  %48 = lshr i64 %43, 62, !dbg !32
  %49 = and i64 %48, 2, !dbg !32
  %50 = lshr i64 %44, 62, !dbg !32
  %51 = and i64 %50, 2, !dbg !32
  %52 = lshr i64 %46, 62, !dbg !32
  %53 = and i64 %52, 2, !dbg !32
  %54 = lshr i64 %47, 62, !dbg !32
  %55 = and i64 %54, 2, !dbg !32
  %56 = shl i64 %39, 1, !dbg !33
  %57 = shl nsw i32 %14, 2, !dbg !34
  %58 = add nsw i32 %57, -1024, !dbg !34
  %59 = sext i32 %58 to i64, !dbg !35
  %60 = shl nsw i32 %15, 11, !dbg !36
  %61 = sext i32 %60 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %49, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %56, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %59, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %61, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !38
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %51, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %56, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %59, !dbg !38
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %61, !dbg !38
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %53, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %56, !dbg !38
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %59, !dbg !38
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %61, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %55, !dbg !38
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %56, !dbg !38
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %59, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %61, !dbg !38
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %30, i32 0, i1 %30) #1, !dbg !39
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %30, i32 0, i1 %30) #1, !dbg !39
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %30, i32 0, i1 %30) #1, !dbg !39
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %30, i32 0, i1 %30) #1, !dbg !39
  %.v = select i1 %19, i32 %26, i32 %82, !dbg !40
  %.v1 = select i1 %19, i32 %27, i32 %83, !dbg !40
  %.v2 = select i1 %19, i32 %28, i32 %84, !dbg !40
  %.v3 = select i1 %19, i32 %29, i32 %85, !dbg !40
  %86 = sext i32 %11 to i64, !dbg !41
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.v, i32 %.v1, i32 %.v2, i32 %.v3, ptr addrspace(1) %87, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5goy7f2pxmdvds2ct7cws7w65jcu7a3iff7qt7a7csebpu3h5cp.py", directory: "inductor_cache/5g")
!4 = !{ptr @triton_poi_fused_cat_33, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_33", linkageName: "triton_poi_fused_cat_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 45, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 55, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 39, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 35, scope: !7)
!29 = !DILocation(line: 43, column: 35, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 47, column: 35, scope: !7)
!33 = !DILocation(line: 48, column: 41, scope: !7)
!34 = !DILocation(line: 48, column: 52, scope: !7)
!35 = !DILocation(line: 48, column: 49, scope: !7)
!36 = !DILocation(line: 48, column: 72, scope: !7)
!37 = !DILocation(line: 48, column: 67, scope: !7)
!38 = !DILocation(line: 48, column: 31, scope: !7)
!39 = !DILocation(line: 48, column: 77, scope: !7)
!40 = !DILocation(line: 49, column: 33, scope: !7)
!41 = !DILocation(line: 50, column: 25, scope: !7)
!42 = !DILocation(line: 50, column: 37, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
