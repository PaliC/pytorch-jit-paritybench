; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 34816, !dbg !14
  %21 = srem i32 %19, 1088, !dbg !15
  %22 = srem i32 %19, 64, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %20) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !20
  %30 = bitcast i32 %28 to float, !dbg !20
  %31 = bitcast i32 %29 to float, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %20) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !27
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !28
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !28
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !28
  %42 = bitcast i32 %40 to float, !dbg !28
  %43 = bitcast i32 %41 to float, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !29
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #3, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %20) #3, !dbg !32
  %48 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !33
  %49 = shufflevector <2 x i32> %48, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !33
  %50 = sdiv <2 x i32> %49, <i32 64, i32 1088>, !dbg !33
  %51 = srem <2 x i32> %50, <i32 17, i32 8>, !dbg !34
  %52 = shufflevector <2 x i32> %51, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %53 = extractelement <2 x i32> %51, i64 1
  %54 = shl nsw i32 %53, 1, !dbg !35
  %55 = icmp sgt <4 x i32> %52, <i32 15, i32 6, i32 0, i32 -1>, !dbg !36
  %56 = extractelement <4 x i1> %55, i64 2, !dbg !37
  %57 = extractelement <4 x i1> %55, i64 3, !dbg !37
  %58 = and i1 %57, %56, !dbg !37
  %59 = extractelement <2 x i32> %50, i64 1, !dbg !38
  %60 = shl i32 %59, 11, !dbg !38
  %61 = add i32 %60, %21, !dbg !39
  %62 = add i32 %61, -64, !dbg !40
  %63 = sext i32 %62 to i64, !dbg !41
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !41
  %65 = and i1 %20, %58, !dbg !42
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #3, !dbg !43
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !43
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !43
  %69 = bitcast i32 %67 to float, !dbg !43
  %70 = bitcast i32 %68 to float, !dbg !43
  %71 = extractelement <2 x i32> %51, i64 0
  %72 = icmp ult i32 %71, 16, !dbg !44
  %73 = and i1 %57, %72, !dbg !45
  %74 = sext i32 %61 to i64, !dbg !46
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !46
  %76 = and i1 %20, %73, !dbg !47
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !48
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !48
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !48
  %80 = bitcast i32 %78 to float, !dbg !48
  %81 = bitcast i32 %79 to float, !dbg !48
  %82 = fadd float %69, %80, !dbg !49
  %83 = fadd float %70, %81, !dbg !49
  %84 = add i32 %61, 960, !dbg !50
  %85 = sext i32 %84 to i64, !dbg !51
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !51
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #3, !dbg !52
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !52
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !52
  %90 = bitcast i32 %88 to float, !dbg !52
  %91 = bitcast i32 %89 to float, !dbg !52
  %92 = fadd float %82, %90, !dbg !53
  %93 = fadd float %83, %91, !dbg !53
  %94 = add i32 %61, 1024, !dbg !54
  %95 = sext i32 %94 to i64, !dbg !55
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !55
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !56
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !56
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !56
  %100 = bitcast i32 %98 to float, !dbg !56
  %101 = bitcast i32 %99 to float, !dbg !56
  %102 = fadd float %92, %100, !dbg !57
  %103 = fadd float %93, %101, !dbg !57
  %104 = add nsw i32 %54, 2, !dbg !58
  %105 = extractelement <4 x i1> %55, i64 1, !dbg !59
  %106 = select i1 %105, i32 16, i32 0, !dbg !59
  %107 = icmp slt i32 %53, 7, !dbg !60
  %108 = select i1 %107, i32 %104, i32 0, !dbg !61
  %109 = add nsw i32 %108, %106, !dbg !62
  %110 = add nsw i32 %71, 1, !dbg !63
  %111 = extractelement <4 x i1> %55, i64 0, !dbg !64
  %112 = select i1 %111, i32 17, i32 0, !dbg !64
  %113 = icmp slt i32 %71, 16, !dbg !65
  %114 = select i1 %113, i32 %110, i32 0, !dbg !66
  %115 = add nsw i32 %112, %114, !dbg !67
  %116 = shl nsw i32 %53, 1
  %reass.add = sub nsw i32 %109, %116
  %reass.add16 = sub nsw i32 %54, %109
  %reass.mul17 = mul nsw i32 %reass.add16, %71
  %reass.mul18 = add nsw i32 %115, 1, !dbg !68
  %117 = mul nsw i32 %reass.add, %reass.mul18, !dbg !68
  %118 = add nsw i32 %117, %reass.mul17, !dbg !69
  %119 = sitofp i32 %118 to float, !dbg !70
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %119) #3, !dbg !70
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %119) #3, !dbg !70
  %122 = fadd float %30, 0x3EE4F8B580000000, !dbg !71
  %123 = fadd float %31, 0x3EE4F8B580000000, !dbg !71
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i = icmp eq i32 %124, 0, !dbg !72
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i = icmp eq i32 %125, 0, !dbg !72
  br i1 %.not.i, label %131, label %126, !dbg !72

126:                                              ; preds = %13
  br i1 %.not1.i, label %129, label %127, !dbg !72

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

131:                                              ; preds = %13
  br i1 %.not1.i, label %134, label %132, !dbg !72

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

__nv_sqrtf.exit:                                  ; preds = %127, %129, %132, %134
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !72
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i1 = icmp eq i32 %136, 0, !dbg !72
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i4 = icmp eq i32 %137, 0, !dbg !72
  br i1 %.not.i1, label %143, label %138, !dbg !72

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %141, label %139, !dbg !72

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %146, label %144, !dbg !72

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

__nv_sqrtf.exit5:                                 ; preds = %139, %141, %144, %146
  %.0.i3 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !72
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !73
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !73
  %150 = fadd float %42, 0x3EE4F8B580000000, !dbg !74
  %151 = fadd float %43, 0x3EE4F8B580000000, !dbg !74
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i6 = icmp eq i32 %152, 0, !dbg !75
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i9 = icmp eq i32 %153, 0, !dbg !75
  br i1 %.not.i6, label %159, label %154, !dbg !75

154:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %157, label %155, !dbg !75

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !75

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !75
  br label %__nv_sqrtf.exit10, !dbg !75

__nv_sqrtf.exit10:                                ; preds = %155, %157, %160, %162
  %.0.i8 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !75
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i11 = icmp eq i32 %164, 0, !dbg !75
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i14 = icmp eq i32 %165, 0, !dbg !75
  br i1 %.not.i11, label %171, label %166, !dbg !75

166:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %169, label %167, !dbg !75

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !75

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !75
  br label %__nv_sqrtf.exit15, !dbg !75

__nv_sqrtf.exit15:                                ; preds = %167, %169, %172, %174
  %.0.i13 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !75
  %176 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %177 = bitcast i32 %176 to float, !dbg !26
  %178 = fsub float %121, %177, !dbg !76
  %179 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %180 = bitcast i32 %179 to float, !dbg !26
  %181 = fsub float %120, %180, !dbg !76
  %182 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %183 = bitcast i32 %182 to float, !dbg !18
  %184 = fsub float %121, %183, !dbg !77
  %185 = fmul float %184, %149, !dbg !78
  %186 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %187 = bitcast i32 %186 to float, !dbg !22
  %188 = fmul float %185, %187, !dbg !79
  %189 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %190 = bitcast i32 %189 to float, !dbg !24
  %191 = fadd float %188, %190, !dbg !80
  %192 = fcmp olt float %191, 0.000000e+00, !dbg !81
  %193 = select i1 %192, float 0.000000e+00, float %191, !dbg !85
  %194 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %195 = bitcast i32 %194 to float, !dbg !18
  %196 = fsub float %120, %195, !dbg !77
  %197 = fmul float %196, %148, !dbg !78
  %198 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %199 = bitcast i32 %198 to float, !dbg !22
  %200 = fmul float %197, %199, !dbg !79
  %201 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %202 = bitcast i32 %201 to float, !dbg !24
  %203 = fadd float %200, %202, !dbg !80
  %204 = fcmp olt float %203, 0.000000e+00, !dbg !81
  %205 = select i1 %204, float 0.000000e+00, float %203, !dbg !85
  %206 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %209 = bitcast i32 %208 to float, !dbg !32
  %210 = extractvalue { i32, i32 } %45, 1, !dbg !30
  %211 = bitcast i32 %210 to float, !dbg !30
  %212 = extractvalue { i32, i32 } %45, 0, !dbg !30
  %213 = bitcast i32 %212 to float, !dbg !30
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !86
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !86
  %216 = fmul float %181, %214, !dbg !87
  %217 = fmul float %178, %215, !dbg !87
  %218 = fmul float %216, %213, !dbg !88
  %219 = fmul float %217, %211, !dbg !88
  %220 = fadd float %218, %209, !dbg !89
  %221 = fadd float %219, %207, !dbg !89
  %222 = sext i32 %19 to i64, !dbg !90
  %223 = getelementptr float, ptr addrspace(1) %9, i64 %222, !dbg !90
  %224 = bitcast float %120 to i32, !dbg !91
  %225 = bitcast float %121 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %224, i32 %225, ptr addrspace(1) %223, i1 %20) #3, !dbg !91
  %226 = getelementptr float, ptr addrspace(1) %10, i64 %222, !dbg !92
  %227 = bitcast float %205 to i32, !dbg !93
  %228 = bitcast float %193 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %227, i32 %228, ptr addrspace(1) %226, i1 %20) #3, !dbg !93
  %229 = getelementptr float, ptr addrspace(1) %11, i64 %222, !dbg !94
  %230 = bitcast float %220 to i32, !dbg !95
  %231 = bitcast float %221 to i32, !dbg !95
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %230, i32 %231, ptr addrspace(1) %229, i1 %20) #3, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2fixvw5jcbh2c2zedugy6e6rfuvokgpjp5oiey7op7iwsv2s5p3.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 31, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 25, column: 21, scope: !7)
!34 = !DILocation(line: 25, column: 27, scope: !7)
!35 = !DILocation(line: 38, column: 13, scope: !7)
!36 = !DILocation(line: 67, column: 107, scope: !7)
!37 = !DILocation(line: 48, column: 19, scope: !7)
!38 = !DILocation(line: 49, column: 49, scope: !7)
!39 = !DILocation(line: 49, column: 39, scope: !7)
!40 = !DILocation(line: 49, column: 44, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 62, scope: !7)
!43 = !DILocation(line: 49, column: 54, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 19, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 54, scope: !7)
!48 = !DILocation(line: 55, column: 46, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 42, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 52, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 43, scope: !7)
!55 = !DILocation(line: 65, column: 31, scope: !7)
!56 = !DILocation(line: 65, column: 53, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 46, scope: !7)
!59 = !DILocation(line: 67, column: 33, scope: !7)
!60 = !DILocation(line: 67, column: 83, scope: !7)
!61 = !DILocation(line: 67, column: 69, scope: !7)
!62 = !DILocation(line: 67, column: 55, scope: !7)
!63 = !DILocation(line: 67, column: 111, scope: !7)
!64 = !DILocation(line: 67, column: 98, scope: !7)
!65 = !DILocation(line: 67, column: 142, scope: !7)
!66 = !DILocation(line: 67, column: 130, scope: !7)
!67 = !DILocation(line: 67, column: 118, scope: !7)
!68 = !DILocation(line: 67, column: 298, scope: !7)
!69 = !DILocation(line: 67, column: 309, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 27, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 83, column: 20, scope: !7)
!75 = !DILocation(line: 84, column: 27, scope: !7)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 81, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 85, column: 20, scope: !7)
!87 = !DILocation(line: 87, column: 20, scope: !7)
!88 = !DILocation(line: 88, column: 20, scope: !7)
!89 = !DILocation(line: 89, column: 20, scope: !7)
!90 = !DILocation(line: 90, column: 25, scope: !7)
!91 = !DILocation(line: 90, column: 37, scope: !7)
!92 = !DILocation(line: 91, column: 25, scope: !7)
!93 = !DILocation(line: 91, column: 37, scope: !7)
!94 = !DILocation(line: 92, column: 25, scope: !7)
!95 = !DILocation(line: 92, column: 37, scope: !7)
!96 = !DILocation(line: 92, column: 4, scope: !7)
