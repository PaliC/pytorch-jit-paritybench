; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 7, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = and i32 %21, 127, !dbg !12
  %23 = or disjoint i32 %20, %22, !dbg !13
  %24 = sdiv i32 %23, 4, !dbg !14
  %25 = srem i32 %24, 256, !dbg !15
  %26 = sext i32 %23 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !16
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %29 = sext i32 %25 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !28
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !33
  %48 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !34
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !37
  %52 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !38
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !40
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !41
  %56 = bitcast i32 %55 to float, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %14, i64 %29, !dbg !42
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %15, i64 %29, !dbg !44
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %16, i64 %26, !dbg !46
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !47
  %63 = fadd float %34, 0x3EE4F8B580000000, !dbg !48
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %64, 0, !dbg !49
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %65, 0, !dbg !49
  br i1 %.not.i, label %71, label %66, !dbg !49

66:                                               ; preds = %18
  br i1 %.not1.i, label %69, label %67, !dbg !49

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

71:                                               ; preds = %18
  br i1 %.not1.i, label %74, label %72, !dbg !49

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !49
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %77 = fadd float %45, 0x3EE4F8B580000000, !dbg !51
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %78, 0, !dbg !52
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %79, 0, !dbg !52
  br i1 %.not.i1, label %85, label %80, !dbg !52

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !52

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !52

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %81, %83, %86, %88
  %.0.i3 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !52
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !53
  %91 = fadd float %56, 0x3EE4F8B580000000, !dbg !54
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i6 = icmp eq i32 %92, 0, !dbg !55
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !55
  br i1 %.not.i6, label %99, label %94, !dbg !55

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !55

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !55

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !55
  %104 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !27
  %105 = insertelement <2 x i32> %104, i32 %51, i64 1, !dbg !27
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !27
  %107 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !29
  %108 = insertelement <2 x i32> %107, i32 %53, i64 1, !dbg !29
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !29
  %110 = bitcast i32 %28 to float, !dbg !17
  %111 = bitcast i32 %31 to float, !dbg !19
  %112 = fsub float %110, %111, !dbg !56
  %113 = fmul float %112, %76, !dbg !57
  %114 = bitcast i32 %36 to float, !dbg !23
  %115 = fmul float %113, %114, !dbg !58
  %116 = bitcast i32 %38 to float, !dbg !25
  %117 = fadd float %115, %116, !dbg !59
  %118 = fadd float %117, 0.000000e+00, !dbg !60
  %119 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !33
  %120 = insertelement <2 x i32> %119, i32 %58, i64 1, !dbg !33
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !33
  %122 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !35
  %123 = insertelement <2 x i32> %122, i32 %60, i64 1, !dbg !35
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !35
  %125 = bitcast i32 %62 to float, !dbg !47
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !61
  %127 = fsub <2 x float> %106, %109, !dbg !62
  %128 = insertelement <2 x float> poison, float %90, i64 0, !dbg !63
  %129 = insertelement <2 x float> %128, float %126, i64 1, !dbg !63
  %130 = fmul <2 x float> %127, %129, !dbg !63
  %131 = fmul <2 x float> %130, %121, !dbg !64
  %132 = fadd <2 x float> %131, %124, !dbg !65
  %133 = extractelement <2 x float> %132, i64 0, !dbg !66
  %134 = fadd float %118, %133, !dbg !66
  %135 = extractelement <2 x float> %132, i64 1, !dbg !67
  %136 = fadd float %134, %135, !dbg !67
  %137 = fadd float %136, %125, !dbg !68
  %138 = fcmp olt float %137, 0.000000e+00, !dbg !69
  %139 = select i1 %138, float 0.000000e+00, float %137, !dbg !73
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !74
  %141 = bitcast float %139 to i32, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %141, ptr addrspace(1) %140, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq3ojo5gt7qgnsgmkxw2cbhnbo5i7x3nqbkjpjpk5uxqtz5szf43.py", directory: "inductor_cache/q3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 26, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 26, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 27, scope: !7)
!53 = !DILocation(line: 58, column: 19, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 27, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 50, column: 19, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 19, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 75, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 76, column: 28, scope: !7)
!75 = !DILocation(line: 76, column: 40, scope: !7)
!76 = !DILocation(line: 76, column: 4, scope: !7)
