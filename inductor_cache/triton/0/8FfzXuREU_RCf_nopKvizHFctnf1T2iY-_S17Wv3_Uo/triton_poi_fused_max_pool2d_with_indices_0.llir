; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = sdiv i32 %10, 16, !dbg !14
  %13 = srem i32 %11, 16, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %14 = sdiv i32 %.frozen, 4096, !dbg !16
  %15 = mul i32 %14, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = shl nsw i32 %13, 1, !dbg !18
  %17 = icmp sgt i32 %13, 0, !dbg !19
  %18 = shl i32 %12, 6, !dbg !20
  %19 = add i32 %18, %16, !dbg !21
  %20 = add i32 %19, -33, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !23
  %23 = icmp sgt i32 %13, -1, !dbg !24
  %24 = add i32 %19, -32, !dbg !25
  %25 = sext i32 %24 to i64, !dbg !26
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !26
  %27 = add i32 %19, -31, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !28
  %30 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %12, i64 1, !dbg !15
  %32 = srem <2 x i32> %31, splat (i32 16), !dbg !15
  %33 = extractelement <2 x i32> %32, i64 1, !dbg !29
  %34 = icmp sgt i32 %33, 0, !dbg !30
  %35 = extractelement <2 x i32> %32, i64 0, !dbg !29
  %36 = shl nsw i32 %35, 1, !dbg !18
  %37 = icmp sgt <2 x i32> %32, <i32 0, i32 -1>, !dbg !19
  %38 = extractelement <2 x i1> %37, i64 0, !dbg !31
  %39 = and i1 %38, %34, !dbg !31
  %40 = and i1 %17, %34, !dbg !31
  %41 = add i32 %18, %36, !dbg !21
  %42 = add i32 %41, -33, !dbg !22
  %43 = sext i32 %42 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 -8388608, i1 %39) #1, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %40, i32 -8388608, i1 %40) #1, !dbg !32
  %47 = icmp sgt i32 %35, -1, !dbg !24
  %48 = and i1 %47, %34, !dbg !33
  %49 = and i1 %23, %34, !dbg !33
  %50 = add i32 %41, -32, !dbg !25
  %51 = sext i32 %50 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 -8388608, i1 %48) #1, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %49, i32 -8388608, i1 %49) #1, !dbg !34
  %55 = add i32 %41, -31, !dbg !27
  %56 = sext i32 %55 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %48, i32 -8388608, i1 %48) #1, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %49, i32 -8388608, i1 %49) #1, !dbg !35
  %60 = extractelement <2 x i1> %37, i64 1, !dbg !36
  %61 = and i1 %38, %60, !dbg !36
  %62 = and i1 %17, %60, !dbg !36
  %63 = add i32 %41, -1, !dbg !37
  %64 = sext i32 %63 to i64, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !38
  %66 = sext i32 %19 to i64, !dbg !38
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !38
  %68 = getelementptr i8, ptr addrspace(1) %67, i64 -4, !dbg !38
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %61, i32 -8388608, i1 %61) #1, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %62, i32 -8388608, i1 %62) #1, !dbg !39
  %71 = or i32 %33, %35, !dbg !29
  %72 = icmp sgt i32 %71, -1, !dbg !29
  %73 = or i32 %33, %13, !dbg !29
  %74 = icmp sgt i32 %73, -1, !dbg !29
  %75 = sext i32 %41 to i64, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !40
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %72, i32 -8388608, i1 %72) #1, !dbg !41
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %74, i32 -8388608, i1 %74) #1, !dbg !41
  %79 = or disjoint i32 %41, 1, !dbg !42
  %80 = or disjoint i32 %19, 1, !dbg !42
  %81 = sext i32 %79 to i64, !dbg !43
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !43
  %83 = sext i32 %80 to i64, !dbg !43
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !43
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %72, i32 -8388608, i1 %72) #1, !dbg !44
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 -8388608, i1 %74) #1, !dbg !44
  %87 = add i32 %41, 31, !dbg !45
  %88 = add i32 %19, 31, !dbg !45
  %89 = sext i32 %87 to i64, !dbg !46
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !46
  %91 = sext i32 %88 to i64, !dbg !46
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !46
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %61, i32 -8388608, i1 %61) #1, !dbg !47
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %62, i32 -8388608, i1 %62) #1, !dbg !47
  %95 = add i32 %41, 32, !dbg !48
  %96 = add i32 %19, 32, !dbg !48
  %97 = sext i32 %95 to i64, !dbg !49
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !49
  %99 = sext i32 %96 to i64, !dbg !49
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !49
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %72, i32 -8388608, i1 %72) #1, !dbg !50
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %74, i32 -8388608, i1 %74) #1, !dbg !50
  %103 = add i32 %41, 33, !dbg !51
  %104 = add i32 %19, 33, !dbg !51
  %105 = sext i32 %103 to i64, !dbg !52
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !52
  %107 = sext i32 %104 to i64, !dbg !52
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !52
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %72, i32 -8388608, i1 %72) #1, !dbg !53
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %74, i32 -8388608, i1 %74) #1, !dbg !53
  %111 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !32
  %112 = insertelement <2 x i32> %111, i32 %46, i64 1, !dbg !32
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !32
  %114 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !34
  %115 = insertelement <2 x i32> %114, i32 %54, i64 1, !dbg !34
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !34
  %117 = fcmp ogt <2 x float> %116, %113, !dbg !54
  %118 = fcmp uno <2 x float> %116, zeroinitializer, !dbg !58
  %119 = or <2 x i1> %117, %118, !dbg !59
  %.v = select <2 x i1> %119, <2 x i32> %115, <2 x i32> %112, !dbg !60
  %120 = bitcast <2 x i32> %.v to <2 x float>, !dbg !60
  %121 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !35
  %122 = insertelement <2 x i32> %121, i32 %59, i64 1, !dbg !35
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !35
  %124 = fcmp olt <2 x float> %120, %123, !dbg !61
  %125 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !63
  %126 = or <2 x i1> %125, %124, !dbg !64
  %.v1 = select <2 x i1> %126, <2 x i32> %122, <2 x i32> %.v, !dbg !65
  %127 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !65
  %128 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !39
  %129 = insertelement <2 x i32> %128, i32 %70, i64 1, !dbg !39
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !39
  %131 = fcmp olt <2 x float> %127, %130, !dbg !66
  %132 = fcmp uno <2 x float> %130, zeroinitializer, !dbg !68
  %133 = or <2 x i1> %132, %131, !dbg !69
  %.v2 = select <2 x i1> %133, <2 x i32> %129, <2 x i32> %.v1, !dbg !70
  %134 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !70
  %135 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !41
  %136 = insertelement <2 x i32> %135, i32 %78, i64 1, !dbg !41
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !41
  %138 = fcmp olt <2 x float> %134, %137, !dbg !71
  %139 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !73
  %140 = or <2 x i1> %139, %138, !dbg !74
  %.v3 = select <2 x i1> %140, <2 x i32> %136, <2 x i32> %.v2, !dbg !75
  %141 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !75
  %142 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !44
  %143 = insertelement <2 x i32> %142, i32 %86, i64 1, !dbg !44
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !44
  %145 = fcmp olt <2 x float> %141, %144, !dbg !76
  %146 = fcmp uno <2 x float> %144, zeroinitializer, !dbg !78
  %147 = or <2 x i1> %146, %145, !dbg !79
  %.v4 = select <2 x i1> %147, <2 x i32> %143, <2 x i32> %.v3, !dbg !80
  %148 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !80
  %149 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !47
  %150 = insertelement <2 x i32> %149, i32 %94, i64 1, !dbg !47
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !47
  %152 = fcmp olt <2 x float> %148, %151, !dbg !81
  %153 = fcmp uno <2 x float> %151, zeroinitializer, !dbg !83
  %154 = or <2 x i1> %153, %152, !dbg !84
  %.v5 = select <2 x i1> %154, <2 x i32> %150, <2 x i32> %.v4, !dbg !85
  %155 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !85
  %156 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !50
  %157 = insertelement <2 x i32> %156, i32 %102, i64 1, !dbg !50
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !50
  %159 = fcmp olt <2 x float> %155, %158, !dbg !86
  %160 = fcmp uno <2 x float> %158, zeroinitializer, !dbg !88
  %161 = or <2 x i1> %160, %159, !dbg !89
  %.v6 = select <2 x i1> %161, <2 x i32> %157, <2 x i32> %.v5, !dbg !90
  %162 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !90
  %163 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !53
  %164 = insertelement <2 x i32> %163, i32 %110, i64 1, !dbg !53
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !53
  %166 = fcmp olt <2 x float> %162, %165, !dbg !91
  %167 = bitcast i32 %109 to float, !dbg !93
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !93
  %169 = bitcast i32 %110 to float, !dbg !93
  %170 = fcmp uno float %169, 0.000000e+00, !dbg !93
  %171 = extractelement <2 x i1> %166, i64 0, !dbg !94
  %172 = or i1 %168, %171, !dbg !94
  %173 = extractelement <2 x i1> %166, i64 1, !dbg !94
  %174 = or i1 %170, %173, !dbg !94
  %175 = zext <2 x i1> %117 to <2 x i8>, !dbg !95
  %176 = select <2 x i1> %124, <2 x i8> splat (i8 2), <2 x i8> %175, !dbg !96
  %177 = select <2 x i1> %131, <2 x i8> splat (i8 3), <2 x i8> %176, !dbg !97
  %178 = select <2 x i1> %138, <2 x i8> splat (i8 4), <2 x i8> %177, !dbg !98
  %179 = select <2 x i1> %145, <2 x i8> splat (i8 5), <2 x i8> %178, !dbg !99
  %180 = select <2 x i1> %152, <2 x i8> splat (i8 6), <2 x i8> %179, !dbg !100
  %181 = select <2 x i1> %159, <2 x i8> splat (i8 7), <2 x i8> %180, !dbg !101
  %182 = select <2 x i1> %166, <2 x i8> splat (i8 8), <2 x i8> %181, !dbg !102
  %183 = shl i32 %14, 13, !dbg !103
  %184 = add i32 %183, %.decomposed, !dbg !104
  %185 = sext i32 %184 to i64, !dbg !105
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !105
  %187 = extractelement <2 x i32> %.v6, i64 0, !dbg !106
  %188 = select i1 %172, i32 %109, i32 %187, !dbg !107
  %189 = extractelement <2 x i32> %.v6, i64 1, !dbg !106
  %190 = select i1 %174, i32 %110, i32 %189, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %188, i32 %190, ptr addrspace(1) %186, i1 true) #1, !dbg !106
  %191 = sext i32 %10 to i64, !dbg !108
  %192 = getelementptr i8, ptr addrspace(1) %2, i64 %191, !dbg !108
  %193 = bitcast <2 x i8> %182 to i16, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %193, ptr addrspace(1) %192, i1 true) #1, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnuppexjethwgt4jnhe6llgn4fzgkulav4lwmz7e3n7u2uwcxwpe.py", directory: "inductor_cache/nu")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 20, scope: !7)
!19 = !DILocation(line: 37, column: 19, scope: !7)
!20 = !DILocation(line: 41, column: 49, scope: !7)
!21 = !DILocation(line: 41, column: 39, scope: !7)
!22 = !DILocation(line: 41, column: 46, scope: !7)
!23 = !DILocation(line: 41, column: 31, scope: !7)
!24 = !DILocation(line: 43, column: 21, scope: !7)
!25 = !DILocation(line: 47, column: 46, scope: !7)
!26 = !DILocation(line: 47, column: 31, scope: !7)
!27 = !DILocation(line: 54, column: 46, scope: !7)
!28 = !DILocation(line: 54, column: 31, scope: !7)
!29 = !DILocation(line: 63, column: 20, scope: !7)
!30 = !DILocation(line: 32, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 54, scope: !7)
!33 = !DILocation(line: 46, column: 19, scope: !7)
!34 = !DILocation(line: 47, column: 54, scope: !7)
!35 = !DILocation(line: 54, column: 54, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 61, column: 45, scope: !7)
!38 = !DILocation(line: 61, column: 31, scope: !7)
!39 = !DILocation(line: 61, column: 53, scope: !7)
!40 = !DILocation(line: 64, column: 31, scope: !7)
!41 = !DILocation(line: 64, column: 46, scope: !7)
!42 = !DILocation(line: 67, column: 42, scope: !7)
!43 = !DILocation(line: 67, column: 31, scope: !7)
!44 = !DILocation(line: 67, column: 50, scope: !7)
!45 = !DILocation(line: 74, column: 43, scope: !7)
!46 = !DILocation(line: 74, column: 31, scope: !7)
!47 = !DILocation(line: 74, column: 51, scope: !7)
!48 = !DILocation(line: 77, column: 43, scope: !7)
!49 = !DILocation(line: 77, column: 31, scope: !7)
!50 = !DILocation(line: 77, column: 51, scope: !7)
!51 = !DILocation(line: 80, column: 43, scope: !7)
!52 = !DILocation(line: 80, column: 31, scope: !7)
!53 = !DILocation(line: 80, column: 51, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 48, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 55, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !67)
!67 = !DILocation(line: 62, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !67)
!71 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !72)
!72 = !DILocation(line: 65, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !77)
!77 = !DILocation(line: 68, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !82)
!82 = !DILocation(line: 75, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !87)
!87 = !DILocation(line: 78, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !92)
!92 = !DILocation(line: 81, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !92)
!95 = !DILocation(line: 85, column: 35, scope: !7)
!96 = !DILocation(line: 88, column: 35, scope: !7)
!97 = !DILocation(line: 91, column: 35, scope: !7)
!98 = !DILocation(line: 94, column: 35, scope: !7)
!99 = !DILocation(line: 97, column: 35, scope: !7)
!100 = !DILocation(line: 100, column: 35, scope: !7)
!101 = !DILocation(line: 103, column: 35, scope: !7)
!102 = !DILocation(line: 106, column: 35, scope: !7)
!103 = !DILocation(line: 107, column: 35, scope: !7)
!104 = !DILocation(line: 107, column: 30, scope: !7)
!105 = !DILocation(line: 107, column: 25, scope: !7)
!106 = !DILocation(line: 107, column: 47, scope: !7)
!107 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !92)
!108 = !DILocation(line: 108, column: 25, scope: !7)
!109 = !DILocation(line: 108, column: 37, scope: !7)
!110 = !DILocation(line: 108, column: 4, scope: !7)
