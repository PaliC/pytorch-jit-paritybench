; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_rsqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = sdiv i32 %13, 16, !dbg !15
  %16 = srem i32 %15, 4, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !18
  %20 = sext i32 %16 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !21
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %14) #3, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #3, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #3, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !25
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %14) #3, !dbg !26
  %33 = fadd float %23, 0x3EE4F8B580000000, !dbg !27
  %34 = fadd float %25, 0x3EE4F8B580000000, !dbg !27
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %35, 0, !dbg !28
  br i1 %.not.i, label %38, label %36, !dbg !28

36:                                               ; preds = %7
  %37 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %33), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

38:                                               ; preds = %7
  %39 = tail call float @llvm.nvvm.rsqrt.approx.f(float %33), !dbg !28
  br label %__nv_rsqrtf.exit, !dbg !28

__nv_rsqrtf.exit:                                 ; preds = %36, %38
  %.0.i = phi float [ %37, %36 ], [ %39, %38 ], !dbg !28
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %40, 0, !dbg !28
  br i1 %.not.i1, label %43, label %41, !dbg !28

41:                                               ; preds = %__nv_rsqrtf.exit
  %42 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %34), !dbg !28
  br label %__nv_rsqrtf.exit3, !dbg !28

43:                                               ; preds = %__nv_rsqrtf.exit
  %44 = tail call float @llvm.nvvm.rsqrt.approx.f(float %34), !dbg !28
  br label %__nv_rsqrtf.exit3, !dbg !28

__nv_rsqrtf.exit3:                                ; preds = %41, %43
  %.0.i2 = phi float [ %42, %41 ], [ %44, %43 ], !dbg !28
  %45 = extractvalue { i32, i32 } %32, 1, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = extractvalue { i32, i32 } %32, 0, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = bitcast i32 %30 to float, !dbg !24
  %50 = bitcast i32 %29 to float, !dbg !24
  %51 = extractvalue { i32, i32 } %27, 1, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = extractvalue { i32, i32 } %27, 0, !dbg !22
  %54 = bitcast i32 %53 to float, !dbg !22
  %55 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %56 = bitcast i32 %55 to float, !dbg !18
  %57 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %58 = bitcast i32 %57 to float, !dbg !18
  %59 = fmul float %.0.i, %54, !dbg !29
  %60 = fmul float %.0.i2, %52, !dbg !29
  %61 = fmul float %59, %58, !dbg !30
  %62 = fmul float %60, %56, !dbg !30
  %63 = fmul float %59, %50, !dbg !31
  %64 = fmul float %60, %49, !dbg !31
  %65 = fsub float %63, %48, !dbg !32
  %66 = fsub float %64, %46, !dbg !32
  %67 = fsub float %61, %65, !dbg !33
  %68 = fsub float %62, %66, !dbg !33
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !34
  %70 = bitcast float %67 to i32, !dbg !35
  %71 = bitcast float %68 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %71, ptr addrspace(1) %69, i1 %14) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckoljd3nutzy4gj6dfedlsts5e5zi5tpw5yusxwpg4igu5kkgwku.py", directory: "inductor_cache/ko")
!4 = !{ptr @triton_poi_fused_add_mul_rsqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_rsqrt_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_rsqrt_sub_0", linkageName: "triton_poi_fused_add_mul_rsqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 18, scope: !7)
!28 = !DILocation(line: 33, column: 27, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 39, column: 25, scope: !7)
!35 = !DILocation(line: 39, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 4, scope: !7)
