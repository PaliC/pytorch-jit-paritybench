; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_mul_sigmoid_tanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 64, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 16, !dbg !15
  %17 = mul i32 %16, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 4, !dbg !17
  %19 = srem i32 %18, 4, !dbg !18
  %20 = shl i32 %16, 5, !dbg !19
  %21 = add i32 %20, %.decomposed, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = sext i32 %19 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = sext i32 %.decomposed to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %15) #3, !dbg !26
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %40 = bitcast i32 %38 to float, !dbg !26
  %41 = bitcast i32 %39 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #3, !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %15) #3, !dbg !28
  %46 = bitcast i32 %45 to float, !dbg !28
  %47 = add nsw i32 %.decomposed, 16, !dbg !29
  %48 = add nuw i32 %47, %20, !dbg !30
  %49 = sext i32 %48 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #3, !dbg !32
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !32
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !32
  %54 = bitcast i32 %53 to float, !dbg !32
  %55 = add nsw i32 %19, 4, !dbg !33
  %56 = zext nneg i32 %55 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %15) #3, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %15) #3, !dbg !35
  %60 = bitcast i32 %59 to float, !dbg !35
  %61 = zext nneg i32 %47 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !36
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %15) #3, !dbg !37
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !37
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !39
  %70 = bitcast i32 %69 to float, !dbg !39
  %71 = fadd float %27, %32, !dbg !40
  %72 = fadd float %28, %34, !dbg !40
  %73 = fadd float %40, %44, !dbg !41
  %74 = fadd float %41, %46, !dbg !41
  %75 = fadd float %71, %73, !dbg !42
  %76 = fadd float %72, %74, !dbg !42
  %77 = fsub float 0.000000e+00, %75, !dbg !43
  %78 = fsub float 0.000000e+00, %76, !dbg !43
  %79 = fmul float %77, 0x3FF7154760000000, !dbg !47
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #3, !dbg !47
  %81 = fmul float %78, 0x3FF7154760000000, !dbg !47
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #3, !dbg !47
  %83 = fadd float %80, 1.000000e+00, !dbg !48
  %84 = fadd float %82, 1.000000e+00, !dbg !48
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #3, !dbg !49
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #3, !dbg !49
  %87 = fadd float %54, %60, !dbg !50
  %88 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !32
  %89 = insertelement <2 x i32> %88, i32 %64, i64 1, !dbg !32
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !32
  %91 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !35
  %92 = insertelement <2 x i32> %91, i32 %68, i64 1, !dbg !35
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !35
  %94 = fadd <2 x float> %90, %93, !dbg !50
  %95 = fadd float %66, %70, !dbg !51
  %shift = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %96 = fadd <2 x float> %94, %shift, !dbg !52
  %97 = extractelement <2 x float> %96, i64 0, !dbg !52
  %98 = fadd float %87, %95, !dbg !52
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %99, 0, !dbg !53
  %100 = tail call float @llvm.nvvm.fabs.ftz.f(float %97) #3, !dbg !53
  %101 = tail call float @llvm.nvvm.fabs.f(float %97) #3, !dbg !53
  %.01.i = select i1 %.not.i, float %101, float %100, !dbg !53
  %102 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !53
  br i1 %102, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !53

__internal_fmad.exit1.i:                          ; preds = %8
  %103 = fmul float %.01.i, 0x4007154760000000, !dbg !53
  %104 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %103) #3, !dbg !53
  %105 = fadd float %104, 1.000000e+00, !dbg !53
  %106 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %105) #4, !dbg !53, !srcloc !54
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not6.i = icmp eq i32 %107, 0, !dbg !53
  %108 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %106, float -2.000000e+00, float 1.000000e+00) #3, !dbg !53
  %109 = tail call float @llvm.nvvm.fma.rn.f(float %106, float -2.000000e+00, float 1.000000e+00) #3, !dbg !53
  %.03.i = select i1 %.not6.i, float %109, float %108, !dbg !53
  %110 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !53
  %s.0.i = select i1 %110, float 1.000000e+00, float %.03.i, !dbg !53
  %111 = bitcast float %s.0.i to i32, !dbg !53
  %112 = bitcast float %97 to i32, !dbg !53
  %113 = and i32 %112, -2147483648, !dbg !53
  %114 = or i32 %113, %111, !dbg !53
  %115 = bitcast i32 %114 to float, !dbg !53
  br label %__nv_tanhf.exit, !dbg !53

__internal_fmad.exit3.i:                          ; preds = %8
  %116 = fmul float %97, %97, !dbg !53
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not1.i = icmp eq i32 %117, 0, !dbg !53
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %116, float 0xBFAAC795C0000000) #3, !dbg !53
  %119 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %116, float 0xBFAAC795C0000000) #3, !dbg !53
  %.06.i = select i1 %.not1.i, float %119, float %118, !dbg !53
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not2.i = icmp eq i32 %120, 0, !dbg !53
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %116, float 0x3FC10B2820000000) #3, !dbg !53
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %116, float 0x3FC10B2820000000) #3, !dbg !53
  %.05.i = select i1 %.not2.i, float %122, float %121, !dbg !53
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not3.i = icmp eq i32 %123, 0, !dbg !53
  %124 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %116, float 0xBFD5553DA0000000) #3, !dbg !53
  %125 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %116, float 0xBFD5553DA0000000) #3, !dbg !53
  %.0.i = select i1 %.not3.i, float %125, float %124, !dbg !53
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not4.i = icmp eq i32 %126, 0, !dbg !53
  %127 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %116, float 0.000000e+00) #3, !dbg !53
  %128 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %116, float 0.000000e+00) #3, !dbg !53
  %.04.i = select i1 %.not4.i, float %128, float %127, !dbg !53
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not5.i = icmp eq i32 %129, 0, !dbg !53
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %97, float %97) #3, !dbg !53
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %97, float %97) #3, !dbg !53
  %.02.i = select i1 %.not5.i, float %131, float %130, !dbg !53
  br label %__nv_tanhf.exit, !dbg !53

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %115, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !53
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %132, 0, !dbg !53
  %133 = tail call float @llvm.nvvm.fabs.ftz.f(float %98) #3, !dbg !53
  %134 = tail call float @llvm.nvvm.fabs.f(float %98) #3, !dbg !53
  %.01.i2 = select i1 %.not.i1, float %134, float %133, !dbg !53
  %135 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !53
  br i1 %135, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !53

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %136 = fmul float %.01.i2, 0x4007154760000000, !dbg !53
  %137 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %136) #3, !dbg !53
  %138 = fadd float %137, 1.000000e+00, !dbg !53
  %139 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %138) #4, !dbg !53, !srcloc !54
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not6.i4 = icmp eq i32 %140, 0, !dbg !53
  %141 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %139, float -2.000000e+00, float 1.000000e+00) #3, !dbg !53
  %142 = tail call float @llvm.nvvm.fma.rn.f(float %139, float -2.000000e+00, float 1.000000e+00) #3, !dbg !53
  %.03.i5 = select i1 %.not6.i4, float %142, float %141, !dbg !53
  %143 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !53
  %s.0.i6 = select i1 %143, float 1.000000e+00, float %.03.i5, !dbg !53
  %144 = bitcast float %s.0.i6 to i32, !dbg !53
  %145 = bitcast float %98 to i32, !dbg !53
  %146 = and i32 %145, -2147483648, !dbg !53
  %147 = or i32 %146, %144, !dbg !53
  %148 = bitcast i32 %147 to float, !dbg !53
  br label %__nv_tanhf.exit19, !dbg !53

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %149 = fmul float %98, %98, !dbg !53
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not1.i9 = icmp eq i32 %150, 0, !dbg !53
  %151 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #3, !dbg !53
  %152 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %149, float 0xBFAAC795C0000000) #3, !dbg !53
  %.06.i10 = select i1 %.not1.i9, float %152, float %151, !dbg !53
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not2.i11 = icmp eq i32 %153, 0, !dbg !53
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %149, float 0x3FC10B2820000000) #3, !dbg !53
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %149, float 0x3FC10B2820000000) #3, !dbg !53
  %.05.i12 = select i1 %.not2.i11, float %155, float %154, !dbg !53
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not3.i13 = icmp eq i32 %156, 0, !dbg !53
  %157 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %149, float 0xBFD5553DA0000000) #3, !dbg !53
  %158 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %149, float 0xBFD5553DA0000000) #3, !dbg !53
  %.0.i14 = select i1 %.not3.i13, float %158, float %157, !dbg !53
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not4.i15 = icmp eq i32 %159, 0, !dbg !53
  %160 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %149, float 0.000000e+00) #3, !dbg !53
  %161 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %149, float 0.000000e+00) #3, !dbg !53
  %.04.i16 = select i1 %.not4.i15, float %161, float %160, !dbg !53
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not5.i17 = icmp eq i32 %162, 0, !dbg !53
  %163 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %98, float %98) #3, !dbg !53
  %164 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %98, float %98) #3, !dbg !53
  %.02.i18 = select i1 %.not5.i17, float %164, float %163, !dbg !53
  br label %__nv_tanhf.exit19, !dbg !53

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %148, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !53
  %165 = fmul float %85, %s.1.i, !dbg !55
  %166 = fmul float %86, %s.1.i7, !dbg !55
  %167 = sext i32 %14 to i64, !dbg !56
  %168 = getelementptr float, ptr addrspace(1) %4, i64 %167, !dbg !56
  %169 = bitcast float %85 to i32, !dbg !57
  %170 = bitcast float %86 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %169, i32 %170, ptr addrspace(1) %168, i1 %15) #3, !dbg !57
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !58
  %172 = bitcast float %s.1.i to i32, !dbg !59
  %173 = bitcast float %s.1.i7 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 %15) #3, !dbg !59
  %174 = getelementptr float, ptr addrspace(1) %6, i64 %167, !dbg !60
  %175 = bitcast float %165 to i32, !dbg !61
  %176 = bitcast float %166 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 %15) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccb2mxxvvfcq4z3m5h5u5ui5oh4g5t4aerqx26igd4lnwmbquhh7.py", directory: "inductor_cache/cb")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_tanh_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_tanh_1", linkageName: "triton_poi_fused_mul_sigmoid_tanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 32, column: 40, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 48, scope: !7)
!33 = !DILocation(line: 33, column: 34, scope: !7)
!34 = !DILocation(line: 33, column: 30, scope: !7)
!35 = !DILocation(line: 33, column: 39, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 41, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 40, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 39, column: 22, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 40, column: 19, scope: !7)
!51 = !DILocation(line: 41, column: 20, scope: !7)
!52 = !DILocation(line: 42, column: 20, scope: !7)
!53 = !DILocation(line: 43, column: 27, scope: !7)
!54 = !{i32 21046}
!55 = !DILocation(line: 44, column: 19, scope: !7)
!56 = !DILocation(line: 45, column: 25, scope: !7)
!57 = !DILocation(line: 45, column: 36, scope: !7)
!58 = !DILocation(line: 46, column: 25, scope: !7)
!59 = !DILocation(line: 46, column: 37, scope: !7)
!60 = !DILocation(line: 47, column: 25, scope: !7)
!61 = !DILocation(line: 47, column: 37, scope: !7)
!62 = !DILocation(line: 47, column: 4, scope: !7)
