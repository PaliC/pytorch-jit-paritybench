; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_linalg_vector_norm_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = shl i32 %10, 2, !dbg !15
  %13 = or disjoint i32 %12, 4, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %11) #3, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #3, !dbg !19
  %27 = bitcast i32 %26 to float, !dbg !19
  %28 = or disjoint i32 %12, 1, !dbg !20
  %29 = or disjoint i32 %12, 5, !dbg !20
  %30 = sext i32 %28 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %29 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %11) #3, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %11) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %11) #3, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = or disjoint i32 %12, 2, !dbg !25
  %45 = or disjoint i32 %12, 6, !dbg !25
  %46 = sext i32 %44 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = sext i32 %45 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #3, !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #3, !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %11) #3, !dbg !29
  %57 = bitcast i32 %56 to float, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #3, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = or disjoint i32 %12, 3, !dbg !30
  %61 = or disjoint i32 %12, 7, !dbg !30
  %62 = sext i32 %60 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !31
  %64 = sext i32 %61 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %11) #3, !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %11) #3, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !33
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %11) #3, !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %11) #3, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = fsub float %19, %25, !dbg !35
  %77 = fsub float %21, %27, !dbg !35
  %78 = fmul float %76, %76, !dbg !36
  %79 = fmul float %77, %77, !dbg !36
  %80 = fsub float %35, %41, !dbg !37
  %81 = fsub float %37, %43, !dbg !37
  %82 = fmul float %80, %80, !dbg !38
  %83 = fmul float %81, %81, !dbg !38
  %84 = fadd float %78, %82, !dbg !39
  %85 = fadd float %79, %83, !dbg !39
  %86 = fsub float %51, %57, !dbg !40
  %87 = fsub float %53, %59, !dbg !40
  %88 = fmul float %86, %86, !dbg !41
  %89 = fmul float %87, %87, !dbg !41
  %90 = fadd float %84, %88, !dbg !42
  %91 = fadd float %85, %89, !dbg !42
  %92 = fsub float %67, %73, !dbg !43
  %93 = fsub float %69, %75, !dbg !43
  %94 = fmul float %92, %92, !dbg !44
  %95 = fmul float %93, %93, !dbg !44
  %96 = fadd float %90, %94, !dbg !45
  %97 = fadd float %91, %95, !dbg !45
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %98, 0, !dbg !46
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %99, 0, !dbg !46
  br i1 %.not.i, label %105, label %100, !dbg !46

100:                                              ; preds = %4
  br i1 %.not1.i, label %103, label %101, !dbg !46

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

105:                                              ; preds = %4
  br i1 %.not1.i, label %108, label %106, !dbg !46

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !46
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %110, 0, !dbg !46
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %111, 0, !dbg !46
  br i1 %.not.i1, label %117, label %112, !dbg !46

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !46

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %120, label %118, !dbg !46

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %113, %115, %118, %120
  %.0.i3 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !46
  %122 = sext i32 %10 to i64, !dbg !47
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !47
  %124 = bitcast float %.0.i to i32, !dbg !48
  %125 = bitcast float %.0.i3 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %11) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmu36msp6sk2sfrqjb4qc45ok4umqzzpfrmhqnfdb5w6wbtdhlje.py", directory: "inductor_cache/mu")
!4 = !{ptr @triton_poi_fused_linalg_vector_norm_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_linalg_vector_norm_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_linalg_vector_norm_sub_0", linkageName: "triton_poi_fused_linalg_vector_norm_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 20, scope: !7)
!42 = !DILocation(line: 40, column: 19, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 44, column: 27, scope: !7)
!47 = !DILocation(line: 45, column: 25, scope: !7)
!48 = !DILocation(line: 45, column: 37, scope: !7)
!49 = !DILocation(line: 45, column: 4, scope: !7)
