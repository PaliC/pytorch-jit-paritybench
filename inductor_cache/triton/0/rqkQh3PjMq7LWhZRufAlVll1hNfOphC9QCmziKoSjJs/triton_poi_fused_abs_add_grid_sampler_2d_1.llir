; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp85 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp80 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp72 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp67 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp54 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp48 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp36 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/oe/coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp30 < 4\00"
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_abs_add_grid_sampler_2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 7, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 127, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 128, !dbg !16
  %.frozen = freeze i32 %10, !dbg !17
  %12 = sdiv i32 %.frozen, 16, !dbg !17
  %13 = mul i32 %12, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %13, !dbg !18
  %14 = sdiv i32 %10, 32, !dbg !19
  %15 = shl nsw i32 %.decomposed, 1, !dbg !20
  %16 = shl nsw i32 %14, 5, !dbg !21
  %17 = add i32 %15, %16, !dbg !22
  %18 = sext i32 %17 to i64, !dbg !23
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !23
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %11) #4, !dbg !24
  %21 = or disjoint i32 %15, 1, !dbg !25
  %22 = add i32 %21, %16, !dbg !26
  %23 = sext i32 %22 to i64, !dbg !27
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !27
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #4, !dbg !28
  %26 = sext i32 %10 to i64, !dbg !29
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !29
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #4, !dbg !30
  %29 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %31 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !28
  %32 = insertelement <2 x i32> %31, i32 %20, i64 1, !dbg !28
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !28
  %34 = fmul <2 x float> %33, splat (float 2.000000e+00), !dbg !33
  %35 = fadd <2 x float> %34, splat (float 1.500000e+00), !dbg !34
  %36 = fcmp ole <2 x float> %35, zeroinitializer, !dbg !35
  %37 = select <2 x i1> %36, <2 x float> zeroinitializer, <2 x float> %35, !dbg !35
  %38 = fcmp olt <2 x float> %37, splat (float 3.000000e+00), !dbg !39
  %39 = fcmp uno <2 x float> %37, zeroinitializer, !dbg !41
  %40 = or <2 x i1> %38, %39, !dbg !42
  %41 = select <2 x i1> %40, <2 x float> %37, <2 x float> splat (float 3.000000e+00), !dbg !43
  %42 = extractelement <2 x float> %41, i64 1, !dbg !43
  %43 = tail call float @llvm.nvvm.floor.ftz.f(float %42), !dbg !31
  %44 = tail call float @llvm.nvvm.floor.f(float %42), !dbg !31
  %45 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !32
  %46 = insertelement <2 x i32> %45, i32 %29, i64 1, !dbg !32
  %47 = icmp eq <2 x i32> %46, zeroinitializer, !dbg !32
  %48 = extractelement <2 x float> %41, i64 0, !dbg !32
  %49 = tail call float @llvm.nvvm.floor.ftz.f(float %48), !dbg !32
  %50 = tail call float @llvm.nvvm.floor.f(float %48), !dbg !32
  %51 = insertelement <2 x float> poison, float %50, i64 0, !dbg !32
  %52 = insertelement <2 x float> %51, float %44, i64 1, !dbg !32
  %53 = insertelement <2 x float> poison, float %49, i64 0, !dbg !32
  %54 = insertelement <2 x float> %53, float %43, i64 1, !dbg !32
  %55 = select <2 x i1> %47, <2 x float> %52, <2 x float> %54, !dbg !32
  %56 = extractelement <2 x float> %55, i64 1, !dbg !32
  %57 = fcmp oge float %56, 0.000000e+00, !dbg !44
  %58 = fcmp olt float %56, 4.000000e+00, !dbg !45
  %59 = extractelement <2 x float> %55, i64 0, !dbg !46
  %60 = fcmp oge float %59, 0.000000e+00, !dbg !46
  %61 = fcmp olt float %59, 4.000000e+00, !dbg !47
  %62 = and i1 %60, %61, !dbg !48
  %63 = and i1 %58, %62, !dbg !49
  %64 = and i1 %57, %63, !dbg !50
  %65 = fptosi float %59 to i64, !dbg !51
  %66 = select i1 %64, i64 %65, i64 0, !dbg !52
  %67 = lshr i64 %66, 61, !dbg !53
  %68 = and i64 %67, 4, !dbg !53
  %69 = add i64 %68, %66, !dbg !53
  %70 = icmp ugt i64 %69, 3, !dbg !54
  %.not2 = and i1 %11, %70, !dbg !55
  br i1 %.not2, label %71, label %72, !dbg !55

71:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 60, ptr nonnull @assertFunc_0, i64 1), !dbg !55
  unreachable, !dbg !55

72:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %73 = fptosi float %56 to i64, !dbg !56
  %74 = select i1 %64, i64 %73, i64 0, !dbg !57
  %75 = lshr i64 %74, 61, !dbg !58
  %76 = and i64 %75, 4, !dbg !58
  %77 = add i64 %76, %74, !dbg !58
  %78 = icmp ugt i64 %77, 3, !dbg !59
  %.not3 = and i1 %11, %78, !dbg !60
  br i1 %.not3, label %79, label %80, !dbg !60

79:                                               ; preds = %72
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 66, ptr nonnull @assertFunc_1, i64 1), !dbg !60
  unreachable, !dbg !60

80:                                               ; preds = %72
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %81 = shl nsw i32 %12, 4, !dbg !61
  %82 = sext i32 %81 to i64, !dbg !62
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !63
  %.idx = shl i64 %69, 4, !dbg !63
  %84 = getelementptr i8, ptr addrspace(1) %83, i64 %.idx, !dbg !63
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %82, !dbg !63
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #4, !dbg !64
  %87 = fadd float %56, 1.000000e+00, !dbg !65
  %88 = fcmp oge float %87, 0.000000e+00, !dbg !66
  %89 = fcmp olt float %87, 4.000000e+00, !dbg !67
  %90 = and i1 %89, %62, !dbg !68
  %91 = and i1 %88, %90, !dbg !69
  %92 = select i1 %91, i64 %65, i64 0, !dbg !70
  %93 = lshr i64 %92, 61, !dbg !71
  %94 = and i64 %93, 4, !dbg !71
  %95 = add i64 %94, %92, !dbg !71
  %96 = icmp ugt i64 %95, 3, !dbg !72
  %.not4 = and i1 %11, %96, !dbg !73
  br i1 %.not4, label %97, label %98, !dbg !73

97:                                               ; preds = %80
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 78, ptr nonnull @assertFunc_2, i64 1), !dbg !73
  unreachable, !dbg !73

98:                                               ; preds = %80
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %99 = fptosi float %87 to i64, !dbg !74
  %100 = select i1 %91, i64 %99, i64 0, !dbg !75
  %101 = lshr i64 %100, 61, !dbg !76
  %102 = and i64 %101, 4, !dbg !76
  %103 = add i64 %102, %100, !dbg !76
  %104 = icmp ugt i64 %103, 3, !dbg !77
  %.not5 = and i1 %11, %104, !dbg !78
  br i1 %.not5, label %105, label %106, !dbg !78

105:                                              ; preds = %98
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 84, ptr nonnull @assertFunc_3, i64 1), !dbg !78
  unreachable, !dbg !78

106:                                              ; preds = %98
  tail call void @llvm.nvvm.barrier0(), !dbg !78
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !79
  %.idx6 = shl i64 %95, 4, !dbg !79
  %108 = getelementptr i8, ptr addrspace(1) %107, i64 %.idx6, !dbg !79
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %82, !dbg !79
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %11) #4, !dbg !80
  %111 = fadd float %59, 1.000000e+00, !dbg !81
  %112 = fcmp oge float %111, 0.000000e+00, !dbg !82
  %113 = fcmp olt float %111, 4.000000e+00, !dbg !83
  %114 = and i1 %112, %113, !dbg !84
  %115 = and i1 %58, %114, !dbg !85
  %116 = and i1 %57, %115, !dbg !86
  %117 = fptosi float %111 to i64, !dbg !87
  %118 = select i1 %116, i64 %117, i64 0, !dbg !88
  %119 = lshr i64 %118, 61, !dbg !89
  %120 = and i64 %119, 4, !dbg !89
  %121 = add i64 %120, %118, !dbg !89
  %122 = icmp ugt i64 %121, 3, !dbg !90
  %.not7 = and i1 %11, %122, !dbg !91
  br i1 %.not7, label %123, label %124, !dbg !91

123:                                              ; preds = %106
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 97, ptr nonnull @assertFunc_4, i64 1), !dbg !91
  unreachable, !dbg !91

124:                                              ; preds = %106
  tail call void @llvm.nvvm.barrier0(), !dbg !91
  %125 = select i1 %116, i64 %73, i64 0, !dbg !92
  %126 = lshr i64 %125, 61, !dbg !93
  %127 = and i64 %126, 4, !dbg !93
  %128 = add i64 %127, %125, !dbg !93
  %129 = icmp ugt i64 %128, 3, !dbg !94
  %.not8 = and i1 %11, %129, !dbg !95
  br i1 %.not8, label %130, label %131, !dbg !95

130:                                              ; preds = %124
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 102, ptr nonnull @assertFunc_5, i64 1), !dbg !95
  unreachable, !dbg !95

131:                                              ; preds = %124
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !96
  %.idx9 = shl i64 %121, 4, !dbg !96
  %133 = getelementptr i8, ptr addrspace(1) %132, i64 %.idx9, !dbg !96
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %82, !dbg !96
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %11) #4, !dbg !97
  %136 = and i1 %89, %114, !dbg !98
  %137 = and i1 %88, %136, !dbg !99
  %138 = select i1 %137, i64 %117, i64 0, !dbg !100
  %139 = lshr i64 %138, 61, !dbg !101
  %140 = and i64 %139, 4, !dbg !101
  %141 = add i64 %140, %138, !dbg !101
  %142 = icmp ugt i64 %141, 3, !dbg !102
  %.not10 = and i1 %11, %142, !dbg !103
  br i1 %.not10, label %143, label %144, !dbg !103

143:                                              ; preds = %131
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 110, ptr nonnull @assertFunc_6, i64 1), !dbg !103
  unreachable, !dbg !103

144:                                              ; preds = %131
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %145 = select i1 %137, i64 %99, i64 0, !dbg !104
  %146 = lshr i64 %145, 61, !dbg !105
  %147 = and i64 %146, 4, !dbg !105
  %148 = add i64 %147, %145, !dbg !105
  %149 = icmp ugt i64 %148, 3, !dbg !106
  %.not11 = and i1 %11, %149, !dbg !107
  br i1 %.not11, label %150, label %151, !dbg !107

150:                                              ; preds = %144
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 115, ptr nonnull @assertFunc_7, i64 1), !dbg !107
  unreachable, !dbg !107

151:                                              ; preds = %144
  %152 = bitcast i32 %110 to float, !dbg !80
  %153 = bitcast i32 %86 to float, !dbg !64
  %154 = bitcast i32 %28 to float, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !107
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !108
  %.idx12 = shl i64 %141, 4, !dbg !108
  %156 = getelementptr i8, ptr addrspace(1) %155, i64 %.idx12, !dbg !108
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %82, !dbg !108
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %11) #4, !dbg !109
  %159 = fsub float %87, %42, !dbg !110
  %160 = fsub float %111, %48, !dbg !111
  %161 = fmul float %159, %160, !dbg !112
  %162 = select i1 %64, float %161, float 0.000000e+00, !dbg !113
  %163 = fsub <2 x float> %41, %55, !dbg !114
  %164 = fsub float %42, %56, !dbg !115
  %165 = fmul float %164, %160, !dbg !116
  %166 = select i1 %91, float %165, float 0.000000e+00, !dbg !117
  %167 = fmul float %162, %153, !dbg !118
  %168 = fmul float %166, %152, !dbg !119
  %169 = fadd float %167, %168, !dbg !120
  %170 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !97
  %171 = insertelement <2 x i32> %170, i32 %158, i64 1, !dbg !97
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !97
  %173 = shufflevector <2 x float> %163, <2 x float> poison, <2 x i32> <i32 poison, i32 0>, !dbg !121
  %174 = insertelement <2 x float> %173, float %159, i64 0, !dbg !121
  %175 = fmul <2 x float> %163, %174, !dbg !121
  %176 = insertelement <2 x i1> poison, i1 %116, i64 0, !dbg !122
  %177 = insertelement <2 x i1> %176, i1 %137, i64 1, !dbg !122
  %178 = select <2 x i1> %177, <2 x float> %175, <2 x float> zeroinitializer, !dbg !122
  %179 = fmul <2 x float> %178, %172, !dbg !123
  %180 = extractelement <2 x float> %179, i64 0, !dbg !124
  %181 = fadd float %169, %180, !dbg !124
  %182 = extractelement <2 x float> %179, i64 1, !dbg !125
  %183 = fadd float %181, %182, !dbg !125
  %184 = fadd float %183, %154, !dbg !126
  %185 = tail call float @llvm.fabs.f32(float %184), !dbg !127
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !128
  %187 = bitcast float %185 to i32, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %186, i1 %11) #4, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coe4nprxt7ieoyvyywipzp7csglhbx3h7eedkws4oo4tnnbhfueo.py", directory: "inductor_cache/oe")
!4 = !{ptr @triton_poi_fused_abs_add_grid_sampler_2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_grid_sampler_2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_grid_sampler_2d_1", linkageName: "triton_poi_fused_abs_add_grid_sampler_2d_1", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 26, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 25, column: 19, scope: !11)
!20 = !DILocation(line: 28, column: 32, scope: !11)
!21 = !DILocation(line: 28, column: 40, scope: !11)
!22 = !DILocation(line: 28, column: 37, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 45, scope: !11)
!25 = !DILocation(line: 29, column: 35, scope: !11)
!26 = !DILocation(line: 29, column: 42, scope: !11)
!27 = !DILocation(line: 29, column: 31, scope: !11)
!28 = !DILocation(line: 29, column: 50, scope: !11)
!29 = !DILocation(line: 30, column: 32, scope: !11)
!30 = !DILocation(line: 30, column: 37, scope: !11)
!31 = !DILocation(line: 39, column: 27, scope: !11)
!32 = !DILocation(line: 47, column: 28, scope: !11)
!33 = !DILocation(line: 43, column: 20, scope: !11)
!34 = !DILocation(line: 44, column: 20, scope: !11)
!35 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !11, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 45, column: 42, scope: !11)
!39 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !40)
!40 = !DILocation(line: 46, column: 42, scope: !11)
!41 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !40)
!42 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !40)
!43 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !40)
!44 = !DILocation(line: 40, column: 20, scope: !11)
!45 = !DILocation(line: 42, column: 19, scope: !11)
!46 = !DILocation(line: 48, column: 21, scope: !11)
!47 = !DILocation(line: 49, column: 20, scope: !11)
!48 = !DILocation(line: 50, column: 20, scope: !11)
!49 = !DILocation(line: 51, column: 20, scope: !11)
!50 = !DILocation(line: 52, column: 20, scope: !11)
!51 = !DILocation(line: 53, column: 21, scope: !11)
!52 = !DILocation(line: 55, column: 35, scope: !11)
!53 = !DILocation(line: 59, column: 35, scope: !11)
!54 = !DILocation(line: 60, column: 38, scope: !11)
!55 = !DILocation(line: 60, column: 62, scope: !11)
!56 = !DILocation(line: 61, column: 20, scope: !11)
!57 = !DILocation(line: 62, column: 35, scope: !11)
!58 = !DILocation(line: 65, column: 35, scope: !11)
!59 = !DILocation(line: 66, column: 38, scope: !11)
!60 = !DILocation(line: 66, column: 62, scope: !11)
!61 = !DILocation(line: 67, column: 52, scope: !11)
!62 = !DILocation(line: 67, column: 49, scope: !11)
!63 = !DILocation(line: 67, column: 31, scope: !11)
!64 = !DILocation(line: 67, column: 57, scope: !11)
!65 = !DILocation(line: 69, column: 19, scope: !11)
!66 = !DILocation(line: 70, column: 21, scope: !11)
!67 = !DILocation(line: 71, column: 20, scope: !11)
!68 = !DILocation(line: 72, column: 20, scope: !11)
!69 = !DILocation(line: 73, column: 20, scope: !11)
!70 = !DILocation(line: 74, column: 35, scope: !11)
!71 = !DILocation(line: 77, column: 35, scope: !11)
!72 = !DILocation(line: 78, column: 38, scope: !11)
!73 = !DILocation(line: 78, column: 62, scope: !11)
!74 = !DILocation(line: 79, column: 21, scope: !11)
!75 = !DILocation(line: 80, column: 35, scope: !11)
!76 = !DILocation(line: 83, column: 35, scope: !11)
!77 = !DILocation(line: 84, column: 38, scope: !11)
!78 = !DILocation(line: 84, column: 62, scope: !11)
!79 = !DILocation(line: 85, column: 31, scope: !11)
!80 = !DILocation(line: 85, column: 57, scope: !11)
!81 = !DILocation(line: 86, column: 20, scope: !11)
!82 = !DILocation(line: 87, column: 21, scope: !11)
!83 = !DILocation(line: 88, column: 20, scope: !11)
!84 = !DILocation(line: 89, column: 20, scope: !11)
!85 = !DILocation(line: 90, column: 20, scope: !11)
!86 = !DILocation(line: 91, column: 20, scope: !11)
!87 = !DILocation(line: 92, column: 21, scope: !11)
!88 = !DILocation(line: 93, column: 35, scope: !11)
!89 = !DILocation(line: 96, column: 35, scope: !11)
!90 = !DILocation(line: 97, column: 38, scope: !11)
!91 = !DILocation(line: 97, column: 62, scope: !11)
!92 = !DILocation(line: 98, column: 35, scope: !11)
!93 = !DILocation(line: 101, column: 35, scope: !11)
!94 = !DILocation(line: 102, column: 38, scope: !11)
!95 = !DILocation(line: 102, column: 62, scope: !11)
!96 = !DILocation(line: 103, column: 31, scope: !11)
!97 = !DILocation(line: 103, column: 57, scope: !11)
!98 = !DILocation(line: 104, column: 20, scope: !11)
!99 = !DILocation(line: 105, column: 20, scope: !11)
!100 = !DILocation(line: 106, column: 35, scope: !11)
!101 = !DILocation(line: 109, column: 35, scope: !11)
!102 = !DILocation(line: 110, column: 38, scope: !11)
!103 = !DILocation(line: 110, column: 62, scope: !11)
!104 = !DILocation(line: 111, column: 35, scope: !11)
!105 = !DILocation(line: 114, column: 35, scope: !11)
!106 = !DILocation(line: 115, column: 38, scope: !11)
!107 = !DILocation(line: 115, column: 62, scope: !11)
!108 = !DILocation(line: 116, column: 31, scope: !11)
!109 = !DILocation(line: 116, column: 57, scope: !11)
!110 = !DILocation(line: 117, column: 20, scope: !11)
!111 = !DILocation(line: 118, column: 20, scope: !11)
!112 = !DILocation(line: 119, column: 20, scope: !11)
!113 = !DILocation(line: 120, column: 35, scope: !11)
!114 = !DILocation(line: 124, column: 20, scope: !11)
!115 = !DILocation(line: 121, column: 19, scope: !11)
!116 = !DILocation(line: 122, column: 20, scope: !11)
!117 = !DILocation(line: 123, column: 35, scope: !11)
!118 = !DILocation(line: 129, column: 21, scope: !11)
!119 = !DILocation(line: 130, column: 21, scope: !11)
!120 = !DILocation(line: 131, column: 22, scope: !11)
!121 = !DILocation(line: 125, column: 20, scope: !11)
!122 = !DILocation(line: 126, column: 35, scope: !11)
!123 = !DILocation(line: 132, column: 21, scope: !11)
!124 = !DILocation(line: 133, column: 22, scope: !11)
!125 = !DILocation(line: 135, column: 22, scope: !11)
!126 = !DILocation(line: 136, column: 22, scope: !11)
!127 = !DILocation(line: 137, column: 25, scope: !11)
!128 = !DILocation(line: 138, column: 28, scope: !11)
!129 = !DILocation(line: 138, column: 41, scope: !11)
!130 = !DILocation(line: 138, column: 4, scope: !11)
