; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = sdiv i32 %9, 4096, !dbg !14
  %12 = sdiv i32 %10, 4096, !dbg !14
  %13 = srem i32 %11, 256, !dbg !15
  %14 = srem i32 %12, 256, !dbg !15
  %15 = sext i32 %9 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %10 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = sext i32 %13 to i64, !dbg !18
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = sext i32 %14 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %41 = insertelement <8 x i32> poison, i32 %28, i64 0, !dbg !17
  %42 = insertelement <8 x i32> %41, i32 %27, i64 1, !dbg !17
  %43 = insertelement <8 x i32> %42, i32 %26, i64 2, !dbg !17
  %44 = insertelement <8 x i32> %43, i32 %25, i64 3, !dbg !17
  %45 = insertelement <8 x i32> %44, i32 %23, i64 4, !dbg !17
  %46 = insertelement <8 x i32> %45, i32 %22, i64 5, !dbg !17
  %47 = insertelement <8 x i32> %46, i32 %21, i64 6, !dbg !17
  %48 = insertelement <8 x i32> %47, i32 %20, i64 7, !dbg !17
  %49 = bitcast <8 x i32> %48 to <8 x float>, !dbg !17
  %50 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !19
  %51 = insertelement <8 x i32> %50, i32 %39, i64 1, !dbg !19
  %52 = insertelement <8 x i32> %51, i32 %38, i64 2, !dbg !19
  %53 = insertelement <8 x i32> %52, i32 %37, i64 3, !dbg !19
  %54 = insertelement <8 x i32> %53, i32 %36, i64 4, !dbg !19
  %55 = insertelement <8 x i32> %54, i32 %35, i64 5, !dbg !19
  %56 = insertelement <8 x i32> %55, i32 %34, i64 6, !dbg !19
  %57 = insertelement <8 x i32> %56, i32 %33, i64 7, !dbg !19
  %58 = bitcast <8 x i32> %57 to <8 x float>, !dbg !19
  %59 = fadd <8 x float> %49, %58, !dbg !20
  %60 = fcmp olt <8 x float> %59, zeroinitializer, !dbg !21
  %61 = extractelement <8 x i1> %60, i64 7, !dbg !25
  %62 = extractelement <8 x i1> %60, i64 6, !dbg !25
  %63 = extractelement <8 x i1> %60, i64 5, !dbg !25
  %64 = extractelement <8 x i1> %60, i64 4, !dbg !25
  %65 = extractelement <8 x i1> %60, i64 3, !dbg !25
  %66 = extractelement <8 x i1> %60, i64 2, !dbg !25
  %67 = extractelement <8 x i1> %60, i64 1, !dbg !25
  %68 = extractelement <8 x i1> %60, i64 0, !dbg !25
  %bc = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %69 = extractelement <8 x i32> %bc, i64 7, !dbg !26
  %70 = select i1 %61, i32 0, i32 %69, !dbg !25
  %bc1 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %71 = extractelement <8 x i32> %bc1, i64 6, !dbg !26
  %72 = select i1 %62, i32 0, i32 %71, !dbg !25
  %bc2 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %73 = extractelement <8 x i32> %bc2, i64 5, !dbg !26
  %74 = select i1 %63, i32 0, i32 %73, !dbg !25
  %bc3 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %75 = extractelement <8 x i32> %bc3, i64 4, !dbg !26
  %76 = select i1 %64, i32 0, i32 %75, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %70, i32 %72, i32 %74, i32 %76, ptr addrspace(1) %16, i1 true) #1, !dbg !26
  %bc4 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %77 = extractelement <8 x i32> %bc4, i64 3, !dbg !26
  %78 = select i1 %65, i32 0, i32 %77, !dbg !25
  %bc5 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %79 = extractelement <8 x i32> %bc5, i64 2, !dbg !26
  %80 = select i1 %66, i32 0, i32 %79, !dbg !25
  %bc6 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %81 = extractelement <8 x i32> %bc6, i64 1, !dbg !26
  %82 = select i1 %67, i32 0, i32 %81, !dbg !25
  %bc7 = bitcast <8 x float> %59 to <8 x i32>, !dbg !26
  %83 = extractelement <8 x i32> %bc7, i64 0, !dbg !26
  %84 = select i1 %68, i32 0, i32 %83, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %78, i32 %80, i32 %82, i32 %84, ptr addrspace(1) %18, i1 true) #1, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cggiaz23njcaafit5bxojwrotuojxmjhv3hochcayqsk2xpv3fbo.py", directory: "inductor_cache/gg")
!4 = !{ptr @triton_poi_fused_convolution_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_0", linkageName: "triton_poi_fused_convolution_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 30, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 31, column: 39, scope: !7)
!27 = !DILocation(line: 31, column: 4, scope: !7)
