; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_cumsum_div_max_pow_sort_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = icmp slt i32 %8, 64, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 1, !dbg !12
  %12 = and i32 %10, 3, !dbg !12
  %13 = shl i32 %8, 2, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %9, i32 0, i1 %9) #2, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = sext i32 %13 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %9) #2, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = or disjoint i32 %13, 1, !dbg !19
  %24 = sext i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %9) #2, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = or disjoint i32 %13, 2, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %9) #2, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = or disjoint i32 %13, 3, !dbg !25
  %34 = sext i32 %33 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %9) #2, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = fcmp ogt float %22, %27, !dbg !28
  %39 = fcmp uno float %22, 0.000000e+00, !dbg !32
  %40 = or i1 %39, %38, !dbg !33
  %41 = select i1 %40, float %22, float %27, !dbg !34
  %42 = fcmp ogt float %41, %32, !dbg !35
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !37
  %44 = or i1 %42, %43, !dbg !38
  %45 = select i1 %44, float %41, float %32, !dbg !39
  %46 = fcmp ogt float %45, %37, !dbg !40
  %47 = fcmp uno float %45, 0.000000e+00, !dbg !42
  %48 = or i1 %46, %47, !dbg !43
  %49 = select i1 %48, float %45, float %37, !dbg !44
  %50 = fsub float %18, %49, !dbg !45
  %51 = fmul float %50, 5.000000e-01, !dbg !46
  %52 = lshr i32 %10, 1, !dbg !47
  %.lobit = and i32 %52, 1, !dbg !47
  %53 = bitcast float %51 to i32, !dbg !50
  %54 = xor i32 %.lobit, 1, !dbg !52
  %55 = xor i32 %11, 1, !dbg !52
  %56 = mul nuw nsw i32 %55, %53, !dbg !53
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !54
  %58 = add i32 %56, %57, !dbg !57
  %59 = mul nuw nsw i32 %11, %53, !dbg !59
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !54
  %61 = add i32 %59, %60, !dbg !57
  %62 = bitcast i32 %58 to float, !dbg !60
  %63 = bitcast i32 %61 to float, !dbg !61
  %64 = trunc i32 %52 to i1, !dbg !62
  %65 = fcmp uge float %62, %63, !dbg !62
  %.not = xor i1 %65, %64, !dbg !62
  %66 = xor i32 %58, %61, !dbg !63
  %67 = select i1 %.not, i32 0, i32 %66, !dbg !64
  %68 = xor i32 %67, %53, !dbg !65
  %69 = mul nuw nsw i32 %68, %54, !dbg !53
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !54
  %71 = add i32 %69, %70, !dbg !57
  %72 = mul nuw nsw i32 %68, %.lobit, !dbg !59
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !54
  %74 = add i32 %72, %73, !dbg !57
  %75 = bitcast i32 %71 to float, !dbg !60
  %76 = bitcast i32 %74 to float, !dbg !61
  %77 = fcmp olt float %75, %76, !dbg !66
  %78 = xor i32 %71, %74, !dbg !63
  %79 = select i1 %77, i32 %78, i32 0, !dbg !64
  %80 = xor i32 %79, %68, !dbg !65
  %81 = mul nuw nsw i32 %80, %55, !dbg !53
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 1, i32 31), !dbg !54
  %83 = add i32 %81, %82, !dbg !57
  %84 = mul nuw nsw i32 %80, %11, !dbg !59
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !54
  %86 = add i32 %84, %85, !dbg !57
  %87 = bitcast i32 %83 to float, !dbg !60
  %88 = bitcast i32 %86 to float, !dbg !61
  %89 = fcmp olt float %87, %88, !dbg !66
  %90 = xor i32 %83, %86, !dbg !63
  %91 = select i1 %89, i32 %90, i32 0, !dbg !64
  %92 = xor i32 %91, %80, !dbg !65
  %93 = bitcast i32 %92 to float, !dbg !67
  %94 = fmul float %93, %93, !dbg !68
  %95 = bitcast float %94 to i32, !dbg !69
  %96 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %95, i32 1, i32 0), !dbg !69
  %97 = bitcast i32 %96 to float, !dbg !69
  %.not1 = icmp eq i32 %12, 0, !dbg !69
  %98 = fadd float %94, %97, !dbg !70
  %99 = select i1 %.not1, float %94, float %98, !dbg !69
  %100 = bitcast float %99 to i32, !dbg !69
  %101 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %100, i32 2, i32 0), !dbg !69
  %102 = bitcast i32 %101 to float, !dbg !69
  %103 = icmp samesign ugt i32 %12, 1, !dbg !69
  %104 = fadd float %99, %102, !dbg !70
  %105 = select i1 %103, float %104, float %99, !dbg !69
  %106 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %92, i32 1, i32 0), !dbg !72
  %107 = bitcast i32 %106 to float, !dbg !72
  %108 = fadd float %107, %93, !dbg !73
  %109 = select i1 %.not1, float %93, float %108, !dbg !72
  %110 = bitcast float %109 to i32, !dbg !72
  %111 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %110, i32 2, i32 0), !dbg !72
  %112 = bitcast i32 %111 to float, !dbg !72
  %113 = fadd float %109, %112, !dbg !73
  %114 = select i1 %103, float %113, float %109, !dbg !72
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !74
  %116 = and i32 %10, 60, !dbg !75
  %117 = icmp eq i32 %116, 0, !dbg !75
  %118 = and i1 %117, %9, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %53, ptr addrspace(1) %115, i1 %118) #2, !dbg !75
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %119, i1 %118) #2, !dbg !77
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !78
  %121 = bitcast float %105 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %120, i1 %118) #2, !dbg !79
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !80
  %123 = bitcast float %114 to i32, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %122, i1 %118) #2, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf3mb6avrtkisakf3b5uietddb6xsyikuvtbwnqidgb7fmcpozk2.py", directory: "inductor_cache/f3")
!4 = !{ptr @triton_per_fused_cumsum_div_max_pow_sort_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_div_max_pow_sort_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cumsum_div_max_pow_sort_sub_0", linkageName: "triton_per_fused_cumsum_div_max_pow_sort_sub_0", scope: !3, file: !3, line: 24, type: !8, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 28, column: 28, scope: !7)
!11 = !DILocation(line: 30, column: 21, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 36, column: 37, scope: !7)
!14 = !DILocation(line: 36, column: 35, scope: !7)
!15 = !DILocation(line: 36, column: 30, scope: !7)
!16 = !DILocation(line: 36, column: 42, scope: !7)
!17 = !DILocation(line: 37, column: 30, scope: !7)
!18 = !DILocation(line: 37, column: 37, scope: !7)
!19 = !DILocation(line: 38, column: 34, scope: !7)
!20 = !DILocation(line: 38, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 41, scope: !7)
!22 = !DILocation(line: 39, column: 34, scope: !7)
!23 = !DILocation(line: 39, column: 30, scope: !7)
!24 = !DILocation(line: 39, column: 41, scope: !7)
!25 = !DILocation(line: 40, column: 34, scope: !7)
!26 = !DILocation(line: 40, column: 30, scope: !7)
!27 = !DILocation(line: 40, column: 41, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 41, column: 40, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!35 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !36)
!36 = !DILocation(line: 42, column: 40, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !41)
!41 = !DILocation(line: 43, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !29, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !29, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !41)
!45 = !DILocation(line: 44, column: 18, scope: !7)
!46 = !DILocation(line: 46, column: 19, scope: !7)
!47 = !DILocation(line: 575, column: 44, scope: !48, inlinedAt: !49)
!48 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!49 = !DILocation(line: 51, column: 71, scope: !7)
!50 = !DILocation(line: 502, column: 14, scope: !51, inlinedAt: !49)
!51 = distinct !DILexicalBlockFile(scope: !48, file: !30, discriminator: 0)
!52 = !DILocation(line: 505, column: 21, scope: !51, inlinedAt: !49)
!53 = !DILocation(line: 506, column: 40, scope: !51, inlinedAt: !49)
!54 = !DILocation(line: 267, column: 36, scope: !55, inlinedAt: !49)
!55 = distinct !DILexicalBlockFile(scope: !51, file: !56, discriminator: 0)
!56 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!57 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !49)
!58 = distinct !DILexicalBlockFile(scope: !55, file: !56, discriminator: 0)
!59 = !DILocation(line: 507, column: 41, scope: !51, inlinedAt: !49)
!60 = !DILocation(line: 510, column: 20, scope: !51, inlinedAt: !49)
!61 = !DILocation(line: 511, column: 22, scope: !51, inlinedAt: !49)
!62 = !DILocation(line: 547, column: 28, scope: !51, inlinedAt: !49)
!63 = !DILocation(line: 548, column: 38, scope: !51, inlinedAt: !49)
!64 = !DILocation(line: 548, column: 46, scope: !51, inlinedAt: !49)
!65 = !DILocation(line: 548, column: 15, scope: !51, inlinedAt: !49)
!66 = !DILocation(line: 536, column: 22, scope: !51, inlinedAt: !49)
!67 = !DILocation(line: 551, column: 18, scope: !51, inlinedAt: !49)
!68 = !DILocation(line: 52, column: 20, scope: !7)
!69 = !DILocation(line: 55, column: 46, scope: !7)
!70 = !DILocation(line: 13, column: 20, scope: !71, inlinedAt: !69)
!71 = distinct !DILexicalBlockFile(scope: !7, file: !3, discriminator: 0)
!72 = !DILocation(line: 58, column: 46, scope: !7)
!73 = !DILocation(line: 13, column: 20, scope: !71, inlinedAt: !72)
!74 = !DILocation(line: 59, column: 25, scope: !7)
!75 = !DILocation(line: 59, column: 44, scope: !7)
!76 = !DILocation(line: 60, column: 25, scope: !7)
!77 = !DILocation(line: 60, column: 44, scope: !7)
!78 = !DILocation(line: 61, column: 25, scope: !7)
!79 = !DILocation(line: 61, column: 44, scope: !7)
!80 = !DILocation(line: 62, column: 25, scope: !7)
!81 = !DILocation(line: 62, column: 44, scope: !7)
!82 = !DILocation(line: 62, column: 4, scope: !7)
