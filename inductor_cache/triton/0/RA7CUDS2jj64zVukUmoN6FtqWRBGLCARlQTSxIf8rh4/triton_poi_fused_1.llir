; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 9, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = lshr i32 %11, 4, !dbg !16
  %13 = and i32 %12, 7, !dbg !16
  %14 = and i32 %11, 128, !dbg !16
  %15 = lshr exact i32 %14, 4, !dbg !16
  %16 = or disjoint i32 %13, %15, !dbg !16
  %17 = shl i32 %11, 2, !dbg !16
  %18 = and i32 %17, 508, !dbg !16
  %19 = or disjoint i32 %10, %16, !dbg !17
  %20 = or disjoint i32 %19, 16, !dbg !17
  %21 = or disjoint i32 %19, 32, !dbg !17
  %22 = or disjoint i32 %19, 48, !dbg !17
  %23 = or disjoint i32 %19, 64, !dbg !17
  %24 = or disjoint i32 %19, 80, !dbg !17
  %25 = or disjoint i32 %19, 96, !dbg !17
  %26 = or disjoint i32 %19, 112, !dbg !17
  %27 = or disjoint i32 %19, 128, !dbg !17
  %28 = or disjoint i32 %19, 144, !dbg !17
  %29 = or disjoint i32 %19, 160, !dbg !17
  %30 = or disjoint i32 %19, 176, !dbg !17
  %31 = or disjoint i32 %19, 192, !dbg !17
  %32 = or disjoint i32 %19, 208, !dbg !17
  %33 = or disjoint i32 %19, 224, !dbg !17
  %34 = or disjoint i32 %19, 240, !dbg !17
  %35 = or disjoint i32 %19, 256, !dbg !17
  %36 = or disjoint i32 %19, 272, !dbg !17
  %37 = or disjoint i32 %19, 288, !dbg !17
  %38 = or disjoint i32 %19, 304, !dbg !17
  %39 = or disjoint i32 %19, 320, !dbg !17
  %40 = or disjoint i32 %19, 336, !dbg !17
  %41 = or disjoint i32 %19, 352, !dbg !17
  %42 = or disjoint i32 %19, 368, !dbg !17
  %43 = or disjoint i32 %19, 384, !dbg !17
  %44 = or disjoint i32 %19, 400, !dbg !17
  %45 = or disjoint i32 %19, 416, !dbg !17
  %46 = or disjoint i32 %19, 432, !dbg !17
  %47 = or disjoint i32 %19, 448, !dbg !17
  %48 = or disjoint i32 %19, 464, !dbg !17
  %49 = or disjoint i32 %19, 480, !dbg !17
  %50 = or disjoint i32 %19, 496, !dbg !17
  %51 = or disjoint i32 %10, %18, !dbg !17
  %52 = icmp slt i32 %19, 16777216, !dbg !18
  %53 = icmp slt i32 %20, 16777216, !dbg !18
  %54 = icmp slt i32 %21, 16777216, !dbg !18
  %55 = icmp slt i32 %22, 16777216, !dbg !18
  %56 = icmp slt i32 %23, 16777216, !dbg !18
  %57 = icmp slt i32 %24, 16777216, !dbg !18
  %58 = icmp slt i32 %25, 16777216, !dbg !18
  %59 = icmp slt i32 %26, 16777216, !dbg !18
  %60 = icmp slt i32 %27, 16777216, !dbg !18
  %61 = icmp slt i32 %28, 16777216, !dbg !18
  %62 = icmp slt i32 %29, 16777216, !dbg !18
  %63 = icmp slt i32 %30, 16777216, !dbg !18
  %64 = icmp slt i32 %31, 16777216, !dbg !18
  %65 = icmp slt i32 %32, 16777216, !dbg !18
  %66 = icmp slt i32 %33, 16777216, !dbg !18
  %67 = icmp slt i32 %34, 16777216, !dbg !18
  %68 = icmp slt i32 %35, 16777216, !dbg !18
  %69 = icmp slt i32 %36, 16777216, !dbg !18
  %70 = icmp slt i32 %37, 16777216, !dbg !18
  %71 = icmp slt i32 %38, 16777216, !dbg !18
  %72 = icmp slt i32 %39, 16777216, !dbg !18
  %73 = icmp slt i32 %40, 16777216, !dbg !18
  %74 = icmp slt i32 %41, 16777216, !dbg !18
  %75 = icmp slt i32 %42, 16777216, !dbg !18
  %76 = icmp slt i32 %43, 16777216, !dbg !18
  %77 = icmp slt i32 %44, 16777216, !dbg !18
  %78 = icmp slt i32 %45, 16777216, !dbg !18
  %79 = icmp slt i32 %46, 16777216, !dbg !18
  %80 = icmp slt i32 %47, 16777216, !dbg !18
  %81 = icmp slt i32 %48, 16777216, !dbg !18
  %82 = icmp slt i32 %49, 16777216, !dbg !18
  %83 = icmp slt i32 %50, 16777216, !dbg !18
  %84 = icmp slt i32 %51, 16777216, !dbg !18
  %85 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %86 = shl i32 %85, 4, !dbg !20
  %87 = and i32 %11, 15, !dbg !21
  %.lobit1 = lshr exact i32 %14, 7, !dbg !21
  %88 = or disjoint i32 %86, %87, !dbg !22
  %89 = or disjoint i32 %86, %.lobit1, !dbg !22
  %90 = or disjoint i32 %89, 2, !dbg !22
  %91 = or disjoint i32 %89, 4, !dbg !22
  %92 = or disjoint i32 %89, 6, !dbg !22
  %93 = or disjoint i32 %89, 8, !dbg !22
  %94 = icmp slt i32 %88, 9, !dbg !23
  %95 = icmp slt i32 %89, 9, !dbg !23
  %96 = icmp slt i32 %90, 9, !dbg !23
  %97 = icmp slt i32 %91, 9, !dbg !23
  %98 = icmp slt i32 %92, 9, !dbg !23
  %99 = icmp slt i32 %93, 9, !dbg !23
  %100 = icmp slt i32 %86, 0, !dbg !23
  %.frozen = freeze i32 %51, !dbg !24
  %101 = sdiv i32 %.frozen, 4096, !dbg !24
  %102 = mul i32 %101, 4096, !dbg !25
  %.decomposed = sub i32 %.frozen, %102, !dbg !25
  %103 = mul i32 %19, 9, !dbg !26
  %104 = mul i32 %20, 9, !dbg !26
  %105 = mul i32 %21, 9, !dbg !26
  %106 = mul i32 %22, 9, !dbg !26
  %107 = mul i32 %23, 9, !dbg !26
  %108 = mul i32 %24, 9, !dbg !26
  %109 = mul i32 %25, 9, !dbg !26
  %110 = mul i32 %26, 9, !dbg !26
  %111 = mul i32 %27, 9, !dbg !26
  %112 = mul i32 %28, 9, !dbg !26
  %113 = mul i32 %29, 9, !dbg !26
  %114 = mul i32 %30, 9, !dbg !26
  %115 = mul i32 %31, 9, !dbg !26
  %116 = mul i32 %32, 9, !dbg !26
  %117 = mul i32 %33, 9, !dbg !26
  %118 = mul i32 %34, 9, !dbg !26
  %119 = mul i32 %35, 9, !dbg !26
  %120 = mul i32 %36, 9, !dbg !26
  %121 = mul i32 %37, 9, !dbg !26
  %122 = mul i32 %38, 9, !dbg !26
  %123 = mul i32 %39, 9, !dbg !26
  %124 = mul i32 %40, 9, !dbg !26
  %125 = mul i32 %41, 9, !dbg !26
  %126 = mul i32 %42, 9, !dbg !26
  %127 = mul i32 %43, 9, !dbg !26
  %128 = mul i32 %44, 9, !dbg !26
  %129 = mul i32 %45, 9, !dbg !26
  %130 = mul i32 %46, 9, !dbg !26
  %131 = mul i32 %47, 9, !dbg !26
  %132 = mul i32 %48, 9, !dbg !26
  %133 = mul i32 %49, 9, !dbg !26
  %134 = mul i32 %50, 9, !dbg !26
  %135 = add i32 %103, %88, !dbg !27
  %136 = add i32 %88, %104, !dbg !27
  %137 = add i32 %88, %105, !dbg !27
  %138 = add i32 %88, %106, !dbg !27
  %139 = add i32 %88, %107, !dbg !27
  %140 = add i32 %88, %108, !dbg !27
  %141 = add i32 %88, %109, !dbg !27
  %142 = add i32 %88, %110, !dbg !27
  %143 = add i32 %88, %111, !dbg !27
  %144 = add i32 %88, %112, !dbg !27
  %145 = add i32 %88, %113, !dbg !27
  %146 = add i32 %88, %114, !dbg !27
  %147 = add i32 %88, %115, !dbg !27
  %148 = add i32 %88, %116, !dbg !27
  %149 = add i32 %88, %117, !dbg !27
  %150 = add i32 %88, %118, !dbg !27
  %151 = add i32 %88, %119, !dbg !27
  %152 = add i32 %88, %120, !dbg !27
  %153 = add i32 %88, %121, !dbg !27
  %154 = add i32 %88, %122, !dbg !27
  %155 = add i32 %88, %123, !dbg !27
  %156 = add i32 %88, %124, !dbg !27
  %157 = add i32 %88, %125, !dbg !27
  %158 = add i32 %88, %126, !dbg !27
  %159 = add i32 %88, %127, !dbg !27
  %160 = add i32 %88, %128, !dbg !27
  %161 = add i32 %88, %129, !dbg !27
  %162 = add i32 %88, %130, !dbg !27
  %163 = add i32 %88, %131, !dbg !27
  %164 = add i32 %88, %132, !dbg !27
  %165 = add i32 %88, %133, !dbg !27
  %166 = add i32 %88, %134, !dbg !27
  %167 = sext i32 %135 to i64, !dbg !28
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !28
  %169 = sext i32 %136 to i64, !dbg !28
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !28
  %171 = sext i32 %137 to i64, !dbg !28
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !28
  %173 = sext i32 %138 to i64, !dbg !28
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !28
  %175 = sext i32 %139 to i64, !dbg !28
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !28
  %177 = sext i32 %140 to i64, !dbg !28
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !28
  %179 = sext i32 %141 to i64, !dbg !28
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !28
  %181 = sext i32 %142 to i64, !dbg !28
  %182 = getelementptr float, ptr addrspace(1) %0, i64 %181, !dbg !28
  %183 = sext i32 %143 to i64, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !28
  %185 = sext i32 %144 to i64, !dbg !28
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !28
  %187 = sext i32 %145 to i64, !dbg !28
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !28
  %189 = sext i32 %146 to i64, !dbg !28
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !28
  %191 = sext i32 %147 to i64, !dbg !28
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !28
  %193 = sext i32 %148 to i64, !dbg !28
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !28
  %195 = sext i32 %149 to i64, !dbg !28
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !28
  %197 = sext i32 %150 to i64, !dbg !28
  %198 = getelementptr float, ptr addrspace(1) %0, i64 %197, !dbg !28
  %199 = sext i32 %151 to i64, !dbg !28
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !28
  %201 = sext i32 %152 to i64, !dbg !28
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !28
  %203 = sext i32 %153 to i64, !dbg !28
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !28
  %205 = sext i32 %154 to i64, !dbg !28
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !28
  %207 = sext i32 %155 to i64, !dbg !28
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !28
  %209 = sext i32 %156 to i64, !dbg !28
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !28
  %211 = sext i32 %157 to i64, !dbg !28
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !28
  %213 = sext i32 %158 to i64, !dbg !28
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !28
  %215 = sext i32 %159 to i64, !dbg !28
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !28
  %217 = sext i32 %160 to i64, !dbg !28
  %218 = getelementptr float, ptr addrspace(1) %0, i64 %217, !dbg !28
  %219 = sext i32 %161 to i64, !dbg !28
  %220 = getelementptr float, ptr addrspace(1) %0, i64 %219, !dbg !28
  %221 = sext i32 %162 to i64, !dbg !28
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !28
  %223 = sext i32 %163 to i64, !dbg !28
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !28
  %225 = sext i32 %164 to i64, !dbg !28
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !28
  %227 = sext i32 %165 to i64, !dbg !28
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !28
  %229 = sext i32 %166 to i64, !dbg !28
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !28
  %231 = and i1 %94, %52, !dbg !29
  %232 = and i1 %53, %94, !dbg !29
  %233 = and i1 %54, %94, !dbg !29
  %234 = and i1 %55, %94, !dbg !29
  %235 = and i1 %56, %94, !dbg !29
  %236 = and i1 %57, %94, !dbg !29
  %237 = and i1 %58, %94, !dbg !29
  %238 = and i1 %59, %94, !dbg !29
  %239 = and i1 %60, %94, !dbg !29
  %240 = and i1 %61, %94, !dbg !29
  %241 = and i1 %62, %94, !dbg !29
  %242 = and i1 %63, %94, !dbg !29
  %243 = and i1 %64, %94, !dbg !29
  %244 = and i1 %65, %94, !dbg !29
  %245 = and i1 %66, %94, !dbg !29
  %246 = and i1 %67, %94, !dbg !29
  %247 = and i1 %68, %94, !dbg !29
  %248 = and i1 %69, %94, !dbg !29
  %249 = and i1 %70, %94, !dbg !29
  %250 = and i1 %71, %94, !dbg !29
  %251 = and i1 %72, %94, !dbg !29
  %252 = and i1 %73, %94, !dbg !29
  %253 = and i1 %74, %94, !dbg !29
  %254 = and i1 %75, %94, !dbg !29
  %255 = and i1 %76, %94, !dbg !29
  %256 = and i1 %77, %94, !dbg !29
  %257 = and i1 %78, %94, !dbg !29
  %258 = and i1 %79, %94, !dbg !29
  %259 = and i1 %80, %94, !dbg !29
  %260 = and i1 %81, %94, !dbg !29
  %261 = and i1 %82, %94, !dbg !29
  %262 = and i1 %83, %94, !dbg !29
  %263 = and i1 %95, %84, !dbg !29
  %264 = and i1 %96, %84, !dbg !29
  %265 = and i1 %97, %84, !dbg !29
  %266 = and i1 %98, %84, !dbg !29
  %267 = and i1 %99, %84, !dbg !29
  %268 = and i1 %100, %84, !dbg !29
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %231) #2, !dbg !30
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %232) #2, !dbg !30
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %233) #2, !dbg !30
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %234) #2, !dbg !30
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %235) #2, !dbg !30
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %236) #2, !dbg !30
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 %237) #2, !dbg !30
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 %238) #2, !dbg !30
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %184, i1 %239) #2, !dbg !30
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 %240) #2, !dbg !30
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 %241) #2, !dbg !30
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 %242) #2, !dbg !30
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %192, i1 %243) #2, !dbg !30
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 %244) #2, !dbg !30
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 %245) #2, !dbg !30
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 %246) #2, !dbg !30
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %200, i1 %247) #2, !dbg !30
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 %248) #2, !dbg !30
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 %249) #2, !dbg !30
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 %250) #2, !dbg !30
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 %251) #2, !dbg !30
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 %252) #2, !dbg !30
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 %253) #2, !dbg !30
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 %254) #2, !dbg !30
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %216, i1 %255) #2, !dbg !30
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 %256) #2, !dbg !30
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 %257) #2, !dbg !30
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 %258) #2, !dbg !30
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 %259) #2, !dbg !30
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %260) #2, !dbg !30
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %261) #2, !dbg !30
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %262) #2, !dbg !30
  %301 = shl i32 %89, 12, !dbg !31
  %302 = shl i32 %90, 12, !dbg !31
  %303 = shl i32 %91, 12, !dbg !31
  %304 = shl i32 %92, 12, !dbg !31
  %305 = shl i32 %93, 12, !dbg !31
  %306 = or disjoint i32 %301, 40960, !dbg !31
  %307 = or disjoint i32 %301, 49152, !dbg !31
  %308 = or disjoint i32 %301, 57344, !dbg !31
  %309 = mul i32 %101, 36864, !dbg !32
  %310 = add i32 %309, %.decomposed, !dbg !33
  %311 = add i32 %310, %301, !dbg !34
  %312 = add i32 %310, %302, !dbg !34
  %313 = add i32 %310, %303, !dbg !34
  %314 = add i32 %310, %304, !dbg !34
  %315 = add i32 %310, %305, !dbg !34
  %316 = add i32 %310, %306, !dbg !34
  %317 = add i32 %310, %307, !dbg !34
  %318 = add i32 %310, %308, !dbg !34
  %319 = sext i32 %311 to i64, !dbg !35
  %320 = getelementptr float, ptr addrspace(1) %1, i64 %319, !dbg !35
  %321 = sext i32 %312 to i64, !dbg !35
  %322 = getelementptr float, ptr addrspace(1) %1, i64 %321, !dbg !35
  %323 = sext i32 %313 to i64, !dbg !35
  %324 = getelementptr float, ptr addrspace(1) %1, i64 %323, !dbg !35
  %325 = sext i32 %314 to i64, !dbg !35
  %326 = getelementptr float, ptr addrspace(1) %1, i64 %325, !dbg !35
  %327 = sext i32 %315 to i64, !dbg !35
  %328 = getelementptr float, ptr addrspace(1) %1, i64 %327, !dbg !35
  %329 = sext i32 %316 to i64, !dbg !35
  %330 = getelementptr float, ptr addrspace(1) %1, i64 %329, !dbg !35
  %331 = sext i32 %317 to i64, !dbg !35
  %332 = getelementptr float, ptr addrspace(1) %1, i64 %331, !dbg !35
  %333 = sext i32 %318 to i64, !dbg !35
  %334 = getelementptr float, ptr addrspace(1) %1, i64 %333, !dbg !35
  %335 = shl i32 %11, 9, !dbg !36
  %336 = and i32 %335, 7680, !dbg !36
  %337 = or disjoint i32 %336, %13, !dbg !36
  %338 = or disjoint i32 %337, %15, !dbg !36
  %339 = and i32 %17, 1020, !dbg !36
  %340 = lshr exact i32 %336, 7, !dbg !36
  %341 = add nuw nsw i32 %338, %340, !dbg !36
  %342 = zext nneg i32 %341 to i64, !dbg !36
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %342, !dbg !36
  %344 = insertelement <1 x i32> poison, i32 %269, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %344, i1 true) #2, !dbg !36
  %345 = add nuw nsw i32 %340, 16, !dbg !36
  %346 = add nuw nsw i32 %345, %338, !dbg !36
  %347 = zext nneg i32 %346 to i64, !dbg !36
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %347, !dbg !36
  %349 = insertelement <1 x i32> poison, i32 %270, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #2, !dbg !36
  %350 = add nuw nsw i32 %340, 32, !dbg !36
  %351 = add nuw nsw i32 %350, %338, !dbg !36
  %352 = zext nneg i32 %351 to i64, !dbg !36
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %352, !dbg !36
  %354 = insertelement <1 x i32> poison, i32 %271, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #2, !dbg !36
  %355 = add nuw nsw i32 %340, 48, !dbg !36
  %356 = add nuw nsw i32 %355, %338, !dbg !36
  %357 = zext nneg i32 %356 to i64, !dbg !36
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !36
  %359 = insertelement <1 x i32> poison, i32 %272, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #2, !dbg !36
  %360 = or disjoint i32 %340, 64, !dbg !36
  %361 = add nuw nsw i32 %360, %338, !dbg !36
  %362 = zext nneg i32 %361 to i64, !dbg !36
  %363 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %362, !dbg !36
  %364 = insertelement <1 x i32> poison, i32 %273, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #2, !dbg !36
  %365 = add nuw nsw i32 %340, 80, !dbg !36
  %366 = add nuw nsw i32 %365, %338, !dbg !36
  %367 = zext nneg i32 %366 to i64, !dbg !36
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %367, !dbg !36
  %369 = insertelement <1 x i32> poison, i32 %274, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #2, !dbg !36
  %370 = add nuw nsw i32 %340, 96, !dbg !36
  %371 = add nuw nsw i32 %370, %338, !dbg !36
  %372 = zext nneg i32 %371 to i64, !dbg !36
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %372, !dbg !36
  %374 = insertelement <1 x i32> poison, i32 %275, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !36
  %375 = add nuw nsw i32 %340, 112, !dbg !36
  %376 = add nuw nsw i32 %375, %338, !dbg !36
  %377 = zext nneg i32 %376 to i64, !dbg !36
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %377, !dbg !36
  %379 = insertelement <1 x i32> poison, i32 %276, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #2, !dbg !36
  %380 = or disjoint i32 %340, 128, !dbg !36
  %381 = add nuw nsw i32 %380, %338, !dbg !36
  %382 = zext nneg i32 %381 to i64, !dbg !36
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %382, !dbg !36
  %384 = insertelement <1 x i32> poison, i32 %277, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #2, !dbg !36
  %385 = add nuw nsw i32 %340, 144, !dbg !36
  %386 = add nuw nsw i32 %385, %338, !dbg !36
  %387 = zext nneg i32 %386 to i64, !dbg !36
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %387, !dbg !36
  %389 = insertelement <1 x i32> poison, i32 %278, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #2, !dbg !36
  %390 = add nuw nsw i32 %340, 160, !dbg !36
  %391 = add nuw nsw i32 %390, %338, !dbg !36
  %392 = zext nneg i32 %391 to i64, !dbg !36
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %392, !dbg !36
  %394 = insertelement <1 x i32> poison, i32 %279, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #2, !dbg !36
  %395 = add nuw nsw i32 %340, 176, !dbg !36
  %396 = add nuw nsw i32 %395, %338, !dbg !36
  %397 = zext nneg i32 %396 to i64, !dbg !36
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %397, !dbg !36
  %399 = insertelement <1 x i32> poison, i32 %280, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #2, !dbg !36
  %400 = or disjoint i32 %340, 192, !dbg !36
  %401 = add nuw nsw i32 %400, %338, !dbg !36
  %402 = zext nneg i32 %401 to i64, !dbg !36
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %402, !dbg !36
  %404 = insertelement <1 x i32> poison, i32 %281, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #2, !dbg !36
  %405 = add nuw nsw i32 %340, 208, !dbg !36
  %406 = add nuw nsw i32 %405, %338, !dbg !36
  %407 = zext nneg i32 %406 to i64, !dbg !36
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %407, !dbg !36
  %409 = insertelement <1 x i32> poison, i32 %282, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #2, !dbg !36
  %410 = add nuw nsw i32 %340, 224, !dbg !36
  %411 = add nuw nsw i32 %410, %338, !dbg !36
  %412 = zext nneg i32 %411 to i64, !dbg !36
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %412, !dbg !36
  %414 = insertelement <1 x i32> poison, i32 %283, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #2, !dbg !36
  %415 = add nuw nsw i32 %340, 240, !dbg !36
  %416 = add nuw nsw i32 %415, %338, !dbg !36
  %417 = zext nneg i32 %416 to i64, !dbg !36
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %417, !dbg !36
  %419 = insertelement <1 x i32> poison, i32 %284, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #2, !dbg !36
  %420 = or disjoint i32 %340, 256, !dbg !36
  %421 = add nuw nsw i32 %420, %338, !dbg !36
  %422 = zext nneg i32 %421 to i64, !dbg !36
  %423 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %422, !dbg !36
  %424 = insertelement <1 x i32> poison, i32 %285, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #2, !dbg !36
  %425 = add nuw nsw i32 %340, 272, !dbg !36
  %426 = add nuw nsw i32 %425, %338, !dbg !36
  %427 = zext nneg i32 %426 to i64, !dbg !36
  %428 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %427, !dbg !36
  %429 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #2, !dbg !36
  %430 = add nuw nsw i32 %340, 288, !dbg !36
  %431 = add nuw nsw i32 %430, %338, !dbg !36
  %432 = zext nneg i32 %431 to i64, !dbg !36
  %433 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %432, !dbg !36
  %434 = insertelement <1 x i32> poison, i32 %287, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #2, !dbg !36
  %435 = add nuw nsw i32 %340, 304, !dbg !36
  %436 = add nuw nsw i32 %435, %338, !dbg !36
  %437 = zext nneg i32 %436 to i64, !dbg !36
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %437, !dbg !36
  %439 = insertelement <1 x i32> poison, i32 %288, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 true) #2, !dbg !36
  %440 = or disjoint i32 %340, 320, !dbg !36
  %441 = add nuw nsw i32 %440, %338, !dbg !36
  %442 = zext nneg i32 %441 to i64, !dbg !36
  %443 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %442, !dbg !36
  %444 = insertelement <1 x i32> poison, i32 %289, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #2, !dbg !36
  %445 = add nuw nsw i32 %340, 336, !dbg !36
  %446 = add nuw nsw i32 %445, %338, !dbg !36
  %447 = zext nneg i32 %446 to i64, !dbg !36
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %447, !dbg !36
  %449 = insertelement <1 x i32> poison, i32 %290, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #2, !dbg !36
  %450 = add nuw nsw i32 %340, 352, !dbg !36
  %451 = add nuw nsw i32 %450, %338, !dbg !36
  %452 = zext nneg i32 %451 to i64, !dbg !36
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %452, !dbg !36
  %454 = insertelement <1 x i32> poison, i32 %291, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #2, !dbg !36
  %455 = add nuw nsw i32 %340, 368, !dbg !36
  %456 = add nuw nsw i32 %455, %338, !dbg !36
  %457 = zext nneg i32 %456 to i64, !dbg !36
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %457, !dbg !36
  %459 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 true) #2, !dbg !36
  %460 = or disjoint i32 %340, 384, !dbg !36
  %461 = add nuw nsw i32 %460, %338, !dbg !36
  %462 = zext nneg i32 %461 to i64, !dbg !36
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %462, !dbg !36
  %464 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #2, !dbg !36
  %465 = add nuw nsw i32 %340, 400, !dbg !36
  %466 = add nuw nsw i32 %465, %338, !dbg !36
  %467 = zext nneg i32 %466 to i64, !dbg !36
  %468 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %467, !dbg !36
  %469 = insertelement <1 x i32> poison, i32 %294, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #2, !dbg !36
  %470 = add nuw nsw i32 %340, 416, !dbg !36
  %471 = add nuw nsw i32 %470, %338, !dbg !36
  %472 = zext nneg i32 %471 to i64, !dbg !36
  %473 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %472, !dbg !36
  %474 = insertelement <1 x i32> poison, i32 %295, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #2, !dbg !36
  %475 = add nuw nsw i32 %340, 432, !dbg !36
  %476 = add nuw nsw i32 %475, %338, !dbg !36
  %477 = zext nneg i32 %476 to i64, !dbg !36
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %477, !dbg !36
  %479 = insertelement <1 x i32> poison, i32 %296, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #2, !dbg !36
  %480 = or disjoint i32 %340, 448, !dbg !36
  %481 = add nuw nsw i32 %480, %338, !dbg !36
  %482 = zext nneg i32 %481 to i64, !dbg !36
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %482, !dbg !36
  %484 = insertelement <1 x i32> poison, i32 %297, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %484, i1 true) #2, !dbg !36
  %485 = add nuw nsw i32 %340, 464, !dbg !36
  %486 = add nuw nsw i32 %485, %338, !dbg !36
  %487 = zext nneg i32 %486 to i64, !dbg !36
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %487, !dbg !36
  %489 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 true) #2, !dbg !36
  %490 = add nuw nsw i32 %340, 480, !dbg !36
  %491 = add nuw nsw i32 %490, %338, !dbg !36
  %492 = zext nneg i32 %491 to i64, !dbg !36
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %492, !dbg !36
  %494 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %494, i1 true) #2, !dbg !36
  %495 = add nuw nsw i32 %340, 496, !dbg !36
  %496 = add nuw nsw i32 %495, %338, !dbg !36
  %497 = zext nneg i32 %496 to i64, !dbg !36
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %497, !dbg !36
  %499 = insertelement <1 x i32> poison, i32 %300, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %499, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %500 = lshr i32 %17, 7, !dbg !36
  %501 = and i32 %500, 4, !dbg !36
  %502 = add nuw nsw i32 %501, %339, !dbg !36
  %503 = zext nneg i32 %502 to i64, !dbg !36
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %503, !dbg !36
  %505 = load <4 x i32>, ptr addrspace(3) %504, align 16, !dbg !36
  %506 = or disjoint i32 %339, 1024, !dbg !36
  %507 = lshr i32 %506, 7, !dbg !36
  %508 = and i32 %507, 12, !dbg !36
  %509 = add nuw nsw i32 %508, %506, !dbg !36
  %510 = zext nneg i32 %509 to i64, !dbg !36
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %510, !dbg !36
  %512 = load <4 x i32>, ptr addrspace(3) %511, align 16, !dbg !36
  %513 = or disjoint i32 %339, 2048, !dbg !36
  %514 = lshr i32 %513, 7, !dbg !36
  %515 = and i32 %514, 20, !dbg !36
  %516 = add nuw nsw i32 %515, %513, !dbg !36
  %517 = zext nneg i32 %516 to i64, !dbg !36
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %517, !dbg !36
  %519 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !36
  %520 = or disjoint i32 %339, 3072, !dbg !36
  %521 = lshr i32 %520, 7, !dbg !36
  %522 = and i32 %521, 28, !dbg !36
  %523 = add nuw nsw i32 %522, %520, !dbg !36
  %524 = zext nneg i32 %523 to i64, !dbg !36
  %525 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %524, !dbg !36
  %526 = load <4 x i32>, ptr addrspace(3) %525, align 16, !dbg !36
  %527 = or disjoint i32 %339, 4096, !dbg !36
  %528 = lshr i32 %527, 7, !dbg !36
  %529 = and i32 %528, 36, !dbg !36
  %530 = add nuw nsw i32 %529, %527, !dbg !36
  %531 = zext nneg i32 %530 to i64, !dbg !36
  %532 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %531, !dbg !36
  %533 = load <4 x i32>, ptr addrspace(3) %532, align 16, !dbg !36
  %534 = or disjoint i32 %339, 5120, !dbg !36
  %535 = lshr i32 %534, 7, !dbg !36
  %536 = and i32 %535, 44, !dbg !36
  %537 = add nuw nsw i32 %536, %534, !dbg !36
  %538 = zext nneg i32 %537 to i64, !dbg !36
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %538, !dbg !36
  %540 = load <4 x i32>, ptr addrspace(3) %539, align 16, !dbg !36
  %541 = or disjoint i32 %339, 6144, !dbg !36
  %542 = lshr i32 %541, 7, !dbg !36
  %543 = and i32 %542, 52, !dbg !36
  %544 = add nuw nsw i32 %543, %541, !dbg !36
  %545 = zext nneg i32 %544 to i64, !dbg !36
  %546 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %545, !dbg !36
  %547 = load <4 x i32>, ptr addrspace(3) %546, align 16, !dbg !36
  %548 = or disjoint i32 %339, 7168, !dbg !36
  %549 = lshr i32 %548, 7, !dbg !36
  %550 = and i32 %549, 60, !dbg !36
  %551 = add nuw nsw i32 %550, %548, !dbg !36
  %552 = zext nneg i32 %551 to i64, !dbg !36
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %552, !dbg !36
  %554 = load <4 x i32>, ptr addrspace(3) %553, align 16, !dbg !36
  %.extract = extractelement <4 x i32> %505, i64 0, !dbg !36
  %.extract34 = extractelement <4 x i32> %505, i64 1, !dbg !36
  %.extract35 = extractelement <4 x i32> %505, i64 2, !dbg !36
  %.extract36 = extractelement <4 x i32> %505, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %320, i1 %263) #2, !dbg !36
  %.extract37 = extractelement <4 x i32> %512, i64 0, !dbg !36
  %.extract38 = extractelement <4 x i32> %512, i64 1, !dbg !36
  %.extract39 = extractelement <4 x i32> %512, i64 2, !dbg !36
  %.extract40 = extractelement <4 x i32> %512, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract37, i32 %.extract38, i32 %.extract39, i32 %.extract40, ptr addrspace(1) %322, i1 %264) #2, !dbg !36
  %.extract41 = extractelement <4 x i32> %519, i64 0, !dbg !36
  %.extract42 = extractelement <4 x i32> %519, i64 1, !dbg !36
  %.extract43 = extractelement <4 x i32> %519, i64 2, !dbg !36
  %.extract44 = extractelement <4 x i32> %519, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract41, i32 %.extract42, i32 %.extract43, i32 %.extract44, ptr addrspace(1) %324, i1 %265) #2, !dbg !36
  %.extract45 = extractelement <4 x i32> %526, i64 0, !dbg !36
  %.extract46 = extractelement <4 x i32> %526, i64 1, !dbg !36
  %.extract47 = extractelement <4 x i32> %526, i64 2, !dbg !36
  %.extract48 = extractelement <4 x i32> %526, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract45, i32 %.extract46, i32 %.extract47, i32 %.extract48, ptr addrspace(1) %326, i1 %266) #2, !dbg !36
  %.extract49 = extractelement <4 x i32> %533, i64 0, !dbg !36
  %.extract50 = extractelement <4 x i32> %533, i64 1, !dbg !36
  %.extract51 = extractelement <4 x i32> %533, i64 2, !dbg !36
  %.extract52 = extractelement <4 x i32> %533, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract49, i32 %.extract50, i32 %.extract51, i32 %.extract52, ptr addrspace(1) %328, i1 %267) #2, !dbg !36
  %.extract53 = extractelement <4 x i32> %540, i64 0, !dbg !36
  %.extract54 = extractelement <4 x i32> %540, i64 1, !dbg !36
  %.extract55 = extractelement <4 x i32> %540, i64 2, !dbg !36
  %.extract56 = extractelement <4 x i32> %540, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract53, i32 %.extract54, i32 %.extract55, i32 %.extract56, ptr addrspace(1) %330, i1 %268) #2, !dbg !36
  %.extract57 = extractelement <4 x i32> %547, i64 0, !dbg !36
  %.extract58 = extractelement <4 x i32> %547, i64 1, !dbg !36
  %.extract59 = extractelement <4 x i32> %547, i64 2, !dbg !36
  %.extract60 = extractelement <4 x i32> %547, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract57, i32 %.extract58, i32 %.extract59, i32 %.extract60, ptr addrspace(1) %332, i1 %268) #2, !dbg !36
  %.extract61 = extractelement <4 x i32> %554, i64 0, !dbg !36
  %.extract62 = extractelement <4 x i32> %554, i64 1, !dbg !36
  %.extract63 = extractelement <4 x i32> %554, i64 2, !dbg !36
  %.extract64 = extractelement <4 x i32> %554, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract61, i32 %.extract62, i32 %.extract63, i32 %.extract64, ptr addrspace(1) %334, i1 %268) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cddqxfnri5dpg6xcqsywims5ikkuwvupgktaqaa7x4pxq4myrelc.py", directory: "inductor_cache/dd")
!4 = !{ptr @triton_poi_fused_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_1", linkageName: "triton_poi_fused_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 37, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 33, column: 46, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 57, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
