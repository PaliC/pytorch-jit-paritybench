; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_pow_sqrt_sum_22(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %7, 5, !dbg !12
  %12 = and i32 %7, 63, !dbg !12
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = and i32 %7, 48, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen, 16, !dbg !16
  %17 = mul i32 %16, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = add nsw i32 %.decomposed, %15, !dbg !18
  %19 = shl i32 %16, 6, !dbg !19
  %20 = add i32 %18, %19, !dbg !20
  %21 = sext i32 %20 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !22
  %28 = bitcast i32 %24 to float, !dbg !22
  %29 = bitcast i32 %25 to float, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = select i1 %14, float %28, float 0.000000e+00, !dbg !23
  %33 = select i1 %14, float %29, float 0.000000e+00, !dbg !23
  %34 = select i1 %14, float %30, float 0.000000e+00, !dbg !23
  %35 = select i1 %14, float %31, float 0.000000e+00, !dbg !23
  %36 = bitcast float %32 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %32, %38, !dbg !28
  %40 = bitcast float %33 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 16, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %33, %42, !dbg !28
  %44 = bitcast float %34 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 16, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %34, %46, !dbg !28
  %48 = bitcast float %35 to i32, !dbg !24
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = fadd float %35, %50, !dbg !28
  %52 = icmp eq i32 %8, 0, !dbg !24
  %53 = and i32 %11, 1, !dbg !24
  %54 = shl nuw nsw i32 %10, 1, !dbg !24
  %55 = or disjoint i32 %54, %53, !dbg !24
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !24
  %57 = bitcast float %39 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 %52) #5, !dbg !24
  %58 = or disjoint i32 %54, 2, !dbg !24
  %59 = or disjoint i32 %58, %53, !dbg !24
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !24
  %61 = bitcast float %43 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %52) #5, !dbg !24
  %62 = or disjoint i32 %54, 4, !dbg !24
  %63 = or disjoint i32 %62, %53, !dbg !24
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !24
  %65 = bitcast float %47 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 %52) #5, !dbg !24
  %66 = or disjoint i32 %54, 6, !dbg !24
  %67 = or disjoint i32 %66, %53, !dbg !24
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !24
  %69 = bitcast float %51 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 %52) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %70 = icmp slt i32 %7, 128, !dbg !24
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !24
  %72 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %70) #5, !dbg !24
  %73 = bitcast i32 %72 to float, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = fadd float %73, %75, !dbg !28
  %77 = and i32 %7, 1, !dbg !24
  %78 = icmp eq i32 %77, 0, !dbg !24
  %79 = and i1 %70, %78, !dbg !24
  %80 = bitcast float %76 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %80, i1 %79) #5, !dbg !24
  %81 = getelementptr i8, ptr addrspace(3) %71, i32 256, !dbg !24
  %82 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %81, i1 %70) #5, !dbg !24
  %83 = bitcast i32 %82 to float, !dbg !24
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = fadd float %83, %85, !dbg !28
  %87 = bitcast float %86 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %87, i1 %79) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !24
  %89 = load i32, ptr addrspace(3) %88, align 16, !dbg !24
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !24
  %91 = load i32, ptr addrspace(3) %90, align 8, !dbg !24
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !24
  %93 = load i32, ptr addrspace(3) %92, align 16, !dbg !24
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !24
  %95 = load i32, ptr addrspace(3) %94, align 8, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %96, i32 %89, i32 %91, i32 %93, i32 %95, i1 true) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %99, 0, !dbg !30
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i = icmp eq i32 %100, 0, !dbg !30
  br i1 %.not.i, label %106, label %101, !dbg !30

101:                                              ; preds = %4
  br i1 %.not1.i, label %104, label %102, !dbg !30

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

106:                                              ; preds = %4
  br i1 %.not1.i, label %109, label %107, !dbg !30

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #5, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !30
  %111 = or disjoint i32 %6, %12, !dbg !13
  %112 = icmp slt i32 %111, 64, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %113 = sext i32 %111 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %114, i1 %112) #5, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxmxeo67fdxjz3l5djhswxaknww7ewwi6x5smrz6hxydpqljda6.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_per_fused_pow_sqrt_sum_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_pow_sqrt_sum_22, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_pow_sqrt_sum_22", linkageName: "triton_per_fused_pow_sqrt_sum_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 46, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 35, column: 33, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
!32 = !DILocation(line: 39, column: 28, scope: !7)
!33 = !DILocation(line: 39, column: 39, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
