#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 8], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0)
#loc1 = loc(unknown)
#loc57 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":59:39)
#loc67 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":64:26)
#loc80 = loc(callsite(#loc1 at #loc57))
#loc86 = loc(callsite(#loc1 at #loc67))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_mul_pow_sub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<32x32xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<32x32xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<48> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<48> : tensor<32x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<2> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<32> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<32> : tensor<32x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<1> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<1> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<4> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<4> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<16> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<16> : tensor<32x1xi32, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<32x1xi32, #blocked> loc(#loc1)
    %cst_16 = arith.constant dense<64> : tensor<32x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<32x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<32x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<32x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<32x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<32x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_15 : tensor<32x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_16 : tensor<32x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc7)
    %16 = arith.remsi %8, %cst_13 : tensor<32x1xi32, #blocked> loc(#loc8)
    %17 = arith.remsi %9, %cst_14 : tensor<32x1xi32, #blocked1> loc(#loc8)
    %18 = arith.divsi %8, %cst_13 : tensor<32x1xi32, #blocked> loc(#loc9)
    %19 = arith.divsi %9, %cst_14 : tensor<32x1xi32, #blocked1> loc(#loc9)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc10)
    %21 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %22 = tt.addptr %20, %14 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc10)
    %23 = tt.addptr %21, %15 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc10)
    %24 = tt.load %22 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc11)
    %25 = tt.load %23 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc11)
    %26 = arith.muli %18, %cst_15 : tensor<32x1xi32, #blocked> loc(#loc12)
    %27 = arith.muli %19, %cst_16 : tensor<32x1xi32, #blocked1> loc(#loc12)
    %28 = arith.addi %16, %26 : tensor<32x1xi32, #blocked> loc(#loc13)
    %29 = arith.addi %17, %27 : tensor<32x1xi32, #blocked1> loc(#loc13)
    %30 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %32 = tt.addptr %30, %28 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc14)
    %33 = tt.addptr %31, %29 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc14)
    %34 = tt.load %32, %10 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %35 = tt.load %33, %11 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %36 = arith.muli %14, %cst_11 : tensor<1x32xi32, #blocked> loc(#loc16)
    %37 = arith.muli %15, %cst_12 : tensor<1x32xi32, #blocked1> loc(#loc16)
    %38 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc17)
    %39 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %40 = tt.addptr %38, %36 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc17)
    %41 = tt.addptr %39, %37 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc17)
    %42 = tt.load %40 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc18)
    %43 = tt.load %41 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc18)
    %44 = arith.addi %16, %cst_13 : tensor<32x1xi32, #blocked> loc(#loc19)
    %45 = arith.addi %17, %cst_14 : tensor<32x1xi32, #blocked1> loc(#loc19)
    %46 = arith.addi %44, %26 : tensor<32x1xi32, #blocked> loc(#loc20)
    %47 = arith.addi %45, %27 : tensor<32x1xi32, #blocked1> loc(#loc20)
    %48 = tt.addptr %30, %46 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc21)
    %49 = tt.addptr %31, %47 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc21)
    %50 = tt.load %48, %10 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %51 = tt.load %49, %11 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %52 = arith.addi %36, %cst_9 : tensor<1x32xi32, #blocked> loc(#loc23)
    %53 = arith.addi %37, %cst_10 : tensor<1x32xi32, #blocked1> loc(#loc23)
    %54 = tt.addptr %38, %52 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc24)
    %55 = tt.addptr %39, %53 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc24)
    %56 = tt.load %54 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc25)
    %57 = tt.load %55 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %58 = arith.addi %16, %cst_7 : tensor<32x1xi32, #blocked> loc(#loc26)
    %59 = arith.addi %17, %cst_8 : tensor<32x1xi32, #blocked1> loc(#loc26)
    %60 = arith.addi %58, %26 : tensor<32x1xi32, #blocked> loc(#loc27)
    %61 = arith.addi %59, %27 : tensor<32x1xi32, #blocked1> loc(#loc27)
    %62 = tt.addptr %30, %60 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc28)
    %63 = tt.addptr %31, %61 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc28)
    %64 = tt.load %62, %10 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %65 = tt.load %63, %11 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %66 = arith.addi %36, %cst_5 : tensor<1x32xi32, #blocked> loc(#loc30)
    %67 = arith.addi %37, %cst_6 : tensor<1x32xi32, #blocked1> loc(#loc30)
    %68 = tt.addptr %38, %66 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc31)
    %69 = tt.addptr %39, %67 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc31)
    %70 = tt.load %68 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc32)
    %71 = tt.load %69 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %72 = arith.addi %16, %cst_3 : tensor<32x1xi32, #blocked> loc(#loc33)
    %73 = arith.addi %17, %cst_4 : tensor<32x1xi32, #blocked1> loc(#loc33)
    %74 = arith.addi %72, %26 : tensor<32x1xi32, #blocked> loc(#loc34)
    %75 = arith.addi %73, %27 : tensor<32x1xi32, #blocked1> loc(#loc34)
    %76 = tt.addptr %30, %74 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc35)
    %77 = tt.addptr %31, %75 : tensor<32x1x!tt.ptr<f32>, #blocked1>, tensor<32x1xi32, #blocked1> loc(#loc35)
    %78 = tt.load %76, %10 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc36)
    %79 = tt.load %77, %11 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %80 = arith.addi %36, %cst_1 : tensor<1x32xi32, #blocked> loc(#loc37)
    %81 = arith.addi %37, %cst_2 : tensor<1x32xi32, #blocked1> loc(#loc37)
    %82 = tt.addptr %38, %80 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc38)
    %83 = tt.addptr %39, %81 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc38)
    %84 = tt.load %82 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc39)
    %85 = tt.load %83 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc39)
    %86 = tt.broadcast %34 : tensor<32x1xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc40)
    %87 = tt.broadcast %35 : tensor<32x1xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc40)
    %88 = tt.broadcast %42 : tensor<1x32xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc40)
    %89 = tt.broadcast %43 : tensor<1x32xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc40)
    %90 = arith.subf %86, %88 : tensor<32x32xf32, #blocked> loc(#loc40)
    %91 = arith.subf %87, %89 : tensor<32x32xf32, #blocked1> loc(#loc40)
    %92 = tt.broadcast %24 : tensor<1x32xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc41)
    %93 = tt.broadcast %25 : tensor<1x32xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc41)
    %94 = arith.mulf %92, %90 : tensor<32x32xf32, #blocked> loc(#loc41)
    %95 = arith.mulf %93, %91 : tensor<32x32xf32, #blocked1> loc(#loc41)
    %96 = arith.mulf %94, %94 : tensor<32x32xf32, #blocked> loc(#loc42)
    %97 = arith.mulf %95, %95 : tensor<32x32xf32, #blocked1> loc(#loc42)
    %98 = tt.broadcast %50 : tensor<32x1xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc43)
    %99 = tt.broadcast %51 : tensor<32x1xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc43)
    %100 = tt.broadcast %56 : tensor<1x32xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc43)
    %101 = tt.broadcast %57 : tensor<1x32xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc43)
    %102 = arith.subf %98, %100 : tensor<32x32xf32, #blocked> loc(#loc43)
    %103 = arith.subf %99, %101 : tensor<32x32xf32, #blocked1> loc(#loc43)
    %104 = arith.mulf %92, %102 : tensor<32x32xf32, #blocked> loc(#loc44)
    %105 = arith.mulf %93, %103 : tensor<32x32xf32, #blocked1> loc(#loc44)
    %106 = arith.mulf %104, %104 : tensor<32x32xf32, #blocked> loc(#loc45)
    %107 = arith.mulf %105, %105 : tensor<32x32xf32, #blocked1> loc(#loc45)
    %108 = arith.addf %96, %106 : tensor<32x32xf32, #blocked> loc(#loc46)
    %109 = arith.addf %97, %107 : tensor<32x32xf32, #blocked1> loc(#loc46)
    %110 = tt.broadcast %64 : tensor<32x1xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc47)
    %111 = tt.broadcast %65 : tensor<32x1xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc47)
    %112 = tt.broadcast %70 : tensor<1x32xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc47)
    %113 = tt.broadcast %71 : tensor<1x32xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc47)
    %114 = arith.subf %110, %112 : tensor<32x32xf32, #blocked> loc(#loc47)
    %115 = arith.subf %111, %113 : tensor<32x32xf32, #blocked1> loc(#loc47)
    %116 = arith.mulf %92, %114 : tensor<32x32xf32, #blocked> loc(#loc48)
    %117 = arith.mulf %93, %115 : tensor<32x32xf32, #blocked1> loc(#loc48)
    %118 = arith.mulf %116, %116 : tensor<32x32xf32, #blocked> loc(#loc49)
    %119 = arith.mulf %117, %117 : tensor<32x32xf32, #blocked1> loc(#loc49)
    %120 = arith.addf %108, %118 : tensor<32x32xf32, #blocked> loc(#loc50)
    %121 = arith.addf %109, %119 : tensor<32x32xf32, #blocked1> loc(#loc50)
    %122 = tt.broadcast %78 : tensor<32x1xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc51)
    %123 = tt.broadcast %79 : tensor<32x1xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc51)
    %124 = tt.broadcast %84 : tensor<1x32xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc51)
    %125 = tt.broadcast %85 : tensor<1x32xf32, #blocked1> -> tensor<32x32xf32, #blocked1> loc(#loc51)
    %126 = arith.subf %122, %124 : tensor<32x32xf32, #blocked> loc(#loc51)
    %127 = arith.subf %123, %125 : tensor<32x32xf32, #blocked1> loc(#loc51)
    %128 = arith.mulf %92, %126 : tensor<32x32xf32, #blocked> loc(#loc52)
    %129 = arith.mulf %93, %127 : tensor<32x32xf32, #blocked1> loc(#loc52)
    %130 = arith.mulf %128, %128 : tensor<32x32xf32, #blocked> loc(#loc53)
    %131 = arith.mulf %129, %129 : tensor<32x32xf32, #blocked1> loc(#loc53)
    %132 = arith.addf %120, %130 : tensor<32x32xf32, #blocked> loc(#loc54)
    %133 = arith.addf %121, %131 : tensor<32x32xf32, #blocked1> loc(#loc54)
    %134 = tt.broadcast %10 : tensor<32x1xi1, #blocked> -> tensor<32x32xi1, #blocked> loc(#loc55)
    %135 = tt.broadcast %11 : tensor<32x1xi1, #blocked1> -> tensor<32x32xi1, #blocked1> loc(#loc55)
    %136 = arith.select %134, %132, %cst_0 : tensor<32x32xi1, #blocked>, tensor<32x32xf32, #blocked> loc(#loc55)
    %137 = "tt.reduce"(%136) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc57)), %arg9: f32 loc(callsite(#loc1 at #loc57))):
      %155 = arith.cmpf ogt, %arg8, %arg9 : f32 loc(#loc88)
      %156 = arith.cmpf une, %arg8, %arg8 : f32 loc(#loc89)
      %157 = arith.ori %155, %156 : i1 loc(#loc90)
      %158 = arith.select %157, %arg8, %arg9 : f32 loc(#loc91)
      tt.reduce.return %158 : f32 loc(#loc79)
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc79)
    %138 = tt.expand_dims %137 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xf32, #blocked> loc(#loc62)
    %139 = tt.broadcast %138 : tensor<32x1xf32, #blocked> -> tensor<32x32xf32, #blocked> loc(#loc63)
    %140 = arith.subf %132, %139 : tensor<32x32xf32, #blocked> loc(#loc63)
    %141 = math.exp %140 : tensor<32x32xf32, #blocked> loc(#loc64)
    %142 = arith.select %134, %141, %cst : tensor<32x32xi1, #blocked>, tensor<32x32xf32, #blocked> loc(#loc65)
    %143 = "tt.reduce"(%142) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc67)), %arg9: f32 loc(callsite(#loc1 at #loc67))):
      %155 = arith.addf %arg8, %arg9 : f32 loc(#loc92)
      tt.reduce.return %155 : f32 loc(#loc85)
    }) : (tensor<32x32xf32, #blocked>) -> tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc85)
    %144 = tt.expand_dims %143 {axis = 1 : i32} : tensor<32xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xf32, #blocked> loc(#loc69)
    %145 = arith.muli %9, %cst_8 : tensor<32x1xi32, #blocked1> loc(#loc70)
    %146 = tt.broadcast %15 : tensor<1x32xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc71)
    %147 = tt.broadcast %145 : tensor<32x1xi32, #blocked1> -> tensor<32x32xi32, #blocked1> loc(#loc71)
    %148 = arith.addi %146, %147 : tensor<32x32xi32, #blocked1> loc(#loc71)
    %149 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>, #blocked1> loc(#loc72)
    %150 = tt.addptr %149, %148 : tensor<32x32x!tt.ptr<f32>, #blocked1>, tensor<32x32xi32, #blocked1> loc(#loc72)
    tt.store %150, %133, %135 : tensor<32x32x!tt.ptr<f32>, #blocked1> loc(#loc73)
    %151 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc74)
    %152 = tt.addptr %151, %8 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc74)
    tt.store %152, %138, %10 : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc75)
    %153 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc76)
    %154 = tt.addptr %153, %8 : tensor<32x1x!tt.ptr<f32>, #blocked>, tensor<32x1xi32, #blocked> loc(#loc76)
    tt.store %154, %144, %10 : tensor<32x1x!tt.ptr<f32>, #blocked> loc(#loc77)
    tt.return loc(#loc78)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":23:28)
#loc3 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":23:33)
#loc4 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":24:44)
#loc5 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":24:23)
#loc6 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":25:21)
#loc7 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":26:34)
#loc8 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":30:19)
#loc9 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":31:19)
#loc10 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":33:30)
#loc11 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":33:35)
#loc12 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:38)
#loc13 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:35)
#loc14 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:30)
#loc15 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:43)
#loc16 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:32)
#loc17 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:30)
#loc18 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:37)
#loc19 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:35)
#loc20 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:40)
#loc21 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:30)
#loc22 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:48)
#loc23 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:34)
#loc24 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:30)
#loc25 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:41)
#loc26 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:36)
#loc27 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:41)
#loc28 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:31)
#loc29 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:49)
#loc30 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:35)
#loc31 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:31)
#loc32 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:42)
#loc33 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:36)
#loc34 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:41)
#loc35 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:31)
#loc36 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:49)
#loc37 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:35)
#loc38 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:31)
#loc39 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:42)
#loc40 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":42:18)
#loc41 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":43:18)
#loc42 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":44:18)
#loc43 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":45:18)
#loc44 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":46:18)
#loc45 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":47:19)
#loc46 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":48:19)
#loc47 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":49:20)
#loc48 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":50:19)
#loc49 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":51:20)
#loc50 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":52:20)
#loc51 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":53:20)
#loc52 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":54:19)
#loc53 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":55:20)
#loc54 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":56:20)
#loc55 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":58:35)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc62 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":59:42)
#loc63 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":60:20)
#loc64 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":61:24)
#loc65 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":63:35)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc69 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":64:29)
#loc70 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:33)
#loc71 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:30)
#loc72 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:25)
#loc73 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:45)
#loc74 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":66:25)
#loc75 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":66:37)
#loc76 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:25)
#loc77 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:37)
#loc78 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:4)
#loc79 = loc(callsite(#loc56 at #loc57))
#loc81 = loc(callsite(#loc58 at #loc56))
#loc82 = loc(callsite(#loc59 at #loc56))
#loc83 = loc(callsite(#loc60 at #loc56))
#loc84 = loc(callsite(#loc61 at #loc56))
#loc85 = loc(callsite(#loc66 at #loc67))
#loc87 = loc(callsite(#loc68 at #loc66))
#loc88 = loc(callsite(#loc81 at #loc57))
#loc89 = loc(callsite(#loc82 at #loc57))
#loc90 = loc(callsite(#loc83 at #loc57))
#loc91 = loc(callsite(#loc84 at #loc57))
#loc92 = loc(callsite(#loc87 at #loc67))
