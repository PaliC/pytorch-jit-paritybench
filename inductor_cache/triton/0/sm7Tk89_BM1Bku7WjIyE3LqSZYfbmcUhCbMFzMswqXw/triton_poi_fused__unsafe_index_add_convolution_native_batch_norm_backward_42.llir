; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = sdiv i32 %18, 4096, !dbg !14
  %20 = srem i32 %19, 4, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %21 = sdiv i32 %.frozen, 64, !dbg !16
  %22 = srem i32 %21, 64, !dbg !17
  %23 = mul i32 %21, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %24 = sext i32 %18 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %29 = sext i32 %20 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %37 = sext i32 %22 to i64, !dbg !25
  %38 = getelementptr i64, ptr addrspace(1) %3, i64 %37, !dbg !25
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %41 = sext i32 %.decomposed to i64, !dbg !27
  %42 = getelementptr i64, ptr addrspace(1) %3, i64 %41, !dbg !27
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !28
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !28
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = lshr i64 %39, 58, !dbg !35
  %60 = and i64 %59, 32, !dbg !35
  %61 = add i64 %60, %39, !dbg !35
  %62 = lshr i64 %44, 58, !dbg !36
  %63 = and i64 %62, 32, !dbg !36
  %64 = lshr i64 %45, 58, !dbg !36
  %65 = and i64 %64, 32, !dbg !36
  %66 = shl i64 %61, 5, !dbg !37
  %67 = shl nsw i32 %19, 10, !dbg !38
  %68 = sext i32 %67 to i64, !dbg !39
  %69 = add i64 %66, %68, !dbg !36
  %70 = add i64 %69, %44, !dbg !40
  %71 = add i64 %70, %63, !dbg !39
  %72 = add i64 %69, %45, !dbg !40
  %73 = add i64 %72, %65, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !41
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !41
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !42
  %77 = bitcast i32 %76 to float, !dbg !42
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #1, !dbg !42
  %79 = bitcast i32 %78 to float, !dbg !42
  %80 = fadd float %48, %77, !dbg !43
  %81 = fadd float %50, %79, !dbg !43
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %71, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !44
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !45
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !45
  %86 = getelementptr float, ptr addrspace(1) %8, i64 %71, !dbg !46
  %87 = getelementptr float, ptr addrspace(1) %8, i64 %73, !dbg !46
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !47
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !47
  %90 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !20
  %91 = insertelement <2 x i32> %90, i32 %52, i64 1, !dbg !20
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !20
  %93 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !22
  %94 = insertelement <2 x i32> %93, i32 %84, i64 1, !dbg !22
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !22
  %96 = fadd <2 x float> %92, %95, !dbg !48
  %97 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %98 = insertelement <2 x i32> %97, i32 %88, i64 1, !dbg !24
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !24
  %100 = bitcast i32 %35 to float, !dbg !24
  %101 = fadd <2 x float> %96, %99, !dbg !49
  %102 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !20
  %103 = insertelement <2 x i32> %102, i32 %53, i64 1, !dbg !20
  %104 = bitcast <2 x i32> %103 to <2 x float>, !dbg !20
  %105 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !22
  %106 = insertelement <2 x i32> %105, i32 %85, i64 1, !dbg !22
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !22
  %108 = fadd <2 x float> %104, %107, !dbg !48
  %109 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %110 = insertelement <2 x i32> %109, i32 %89, i64 1, !dbg !24
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !24
  %112 = bitcast i32 %36 to float, !dbg !24
  %113 = fadd <2 x float> %108, %111, !dbg !49
  %114 = extractelement <2 x float> %101, i64 1, !dbg !50
  %115 = fadd float %80, %114, !dbg !50
  %116 = extractelement <2 x float> %113, i64 1, !dbg !50
  %117 = fadd float %81, %116, !dbg !50
  %118 = extractelement <2 x float> %101, i64 0, !dbg !51
  %119 = fadd float %118, %115, !dbg !51
  %120 = extractelement <2 x float> %113, i64 0, !dbg !51
  %121 = fadd float %120, %117, !dbg !51
  %122 = fsub float %100, %56, !dbg !52
  %123 = fsub float %112, %58, !dbg !52
  %124 = bitcast float %119 to i32, !dbg !53
  %125 = bitcast float %121 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %25, i1 true) #1, !dbg !53
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !54
  %127 = bitcast float %122 to i32, !dbg !55
  %128 = bitcast float %123 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 true) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnflsvqdddrdyjbmvc5owwamw7zoyavig4kxqy3ee2kdvuek5ive.py", directory: "inductor_cache/nf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42", linkageName: "triton_poi_fused__unsafe_index_add_convolution_native_batch_norm_backward_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 45, column: 35, scope: !7)
!37 = !DILocation(line: 46, column: 42, scope: !7)
!38 = !DILocation(line: 46, column: 54, scope: !7)
!39 = !DILocation(line: 46, column: 49, scope: !7)
!40 = !DILocation(line: 46, column: 39, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 59, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 31, scope: !7)
!45 = !DILocation(line: 48, column: 59, scope: !7)
!46 = !DILocation(line: 50, column: 31, scope: !7)
!47 = !DILocation(line: 50, column: 59, scope: !7)
!48 = !DILocation(line: 37, column: 18, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 19, scope: !7)
!52 = !DILocation(line: 54, column: 19, scope: !7)
!53 = !DILocation(line: 55, column: 40, scope: !7)
!54 = !DILocation(line: 56, column: 25, scope: !7)
!55 = !DILocation(line: 56, column: 37, scope: !7)
!56 = !DILocation(line: 56, column: 4, scope: !7)
