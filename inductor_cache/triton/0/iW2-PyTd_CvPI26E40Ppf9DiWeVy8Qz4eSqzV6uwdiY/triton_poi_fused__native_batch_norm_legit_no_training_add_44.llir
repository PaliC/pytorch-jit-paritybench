; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sext i32 %14 to i64, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !14
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %24 = bitcast i32 %20 to float, !dbg !17
  %25 = bitcast i32 %21 to float, !dbg !17
  %26 = bitcast i32 %22 to float, !dbg !17
  %27 = bitcast i32 %23 to float, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !20
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !21
  %32 = fadd float %24, 0x3EE4F8B580000000, !dbg !22
  %33 = fadd float %25, 0x3EE4F8B580000000, !dbg !22
  %34 = fadd float %26, 0x3EE4F8B580000000, !dbg !22
  %35 = fadd float %27, 0x3EE4F8B580000000, !dbg !22
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %36, 0, !dbg !23
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %37, 0, !dbg !23
  br i1 %.not.i, label %43, label %38, !dbg !23

38:                                               ; preds = %8
  br i1 %.not1.i, label %41, label %39, !dbg !23

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

43:                                               ; preds = %8
  br i1 %.not1.i, label %46, label %44, !dbg !23

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %39, %41, %44, %46
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], [ %45, %44 ], [ %47, %46 ], !dbg !23
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %48, 0, !dbg !23
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %49, 0, !dbg !23
  br i1 %.not.i1, label %55, label %50, !dbg !23

50:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %53, label %51, !dbg !23

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !23

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %51, %53, %56, %58
  %.0.i3 = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !23
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i6 = icmp eq i32 %60, 0, !dbg !23
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i9 = icmp eq i32 %61, 0, !dbg !23
  br i1 %.not.i6, label %67, label %62, !dbg !23

62:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %65, label %63, !dbg !23

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

67:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %70, label %68, !dbg !23

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

__nv_sqrtf.exit10:                                ; preds = %63, %65, %68, %70
  %.0.i8 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !23
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i11 = icmp eq i32 %72, 0, !dbg !23
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i14 = icmp eq i32 %73, 0, !dbg !23
  br i1 %.not.i11, label %79, label %74, !dbg !23

74:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %77, label %75, !dbg !23

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

79:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %82, label %80, !dbg !23

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

__nv_sqrtf.exit15:                                ; preds = %75, %77, %80, %82
  %.0.i13 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !23
  %84 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !15
  %85 = bitcast i32 %84 to float, !dbg !15
  %86 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %87 = bitcast i32 %86 to float, !dbg !16
  %88 = fsub float %85, %87, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !15
  %90 = bitcast i32 %89 to float, !dbg !15
  %91 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %92 = bitcast i32 %91 to float, !dbg !16
  %93 = fsub float %90, %92, !dbg !24
  %94 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !15
  %95 = bitcast i32 %94 to float, !dbg !15
  %96 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %97 = bitcast i32 %96 to float, !dbg !16
  %98 = fsub float %95, %97, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !15
  %100 = bitcast i32 %99 to float, !dbg !15
  %101 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %102 = bitcast i32 %101 to float, !dbg !16
  %103 = fsub float %100, %102, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !21
  %105 = bitcast i32 %104 to float, !dbg !21
  %106 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !21
  %107 = bitcast i32 %106 to float, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !21
  %109 = bitcast i32 %108 to float, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !21
  %111 = bitcast i32 %110 to float, !dbg !21
  %112 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %113 = bitcast i32 %112 to float, !dbg !19
  %114 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %115 = bitcast i32 %114 to float, !dbg !19
  %116 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %117 = bitcast i32 %116 to float, !dbg !19
  %118 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %119 = bitcast i32 %118 to float, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %121 = bitcast i32 %120 to float, !dbg !18
  %122 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %123 = bitcast i32 %122 to float, !dbg !18
  %124 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %125 = bitcast i32 %124 to float, !dbg !18
  %126 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %127 = bitcast i32 %126 to float, !dbg !18
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !25
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !25
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !25
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !25
  %132 = fmul float %103, %128, !dbg !26
  %133 = fmul float %98, %129, !dbg !26
  %134 = fmul float %93, %130, !dbg !26
  %135 = fmul float %88, %131, !dbg !26
  %136 = fmul float %132, %127, !dbg !27
  %137 = fmul float %133, %125, !dbg !27
  %138 = fmul float %134, %123, !dbg !27
  %139 = fmul float %135, %121, !dbg !27
  %140 = fadd float %136, %119, !dbg !28
  %141 = fadd float %137, %117, !dbg !28
  %142 = fadd float %138, %115, !dbg !28
  %143 = fadd float %139, %113, !dbg !28
  %144 = fadd float %140, %111, !dbg !29
  %145 = fadd float %141, %109, !dbg !29
  %146 = fadd float %142, %107, !dbg !29
  %147 = fadd float %143, %105, !dbg !29
  %148 = getelementptr float, ptr addrspace(1) %6, i64 %15, !dbg !30
  %149 = bitcast float %144 to i32, !dbg !31
  %150 = bitcast float %145 to i32, !dbg !31
  %151 = bitcast float %146 to i32, !dbg !31
  %152 = bitcast float %147 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %148, i1 true) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvu2jwm44tswdwqava536ftce6xids6iiuz2x34fabishxwcakfb.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_44", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 30, scope: !7)
!15 = !DILocation(line: 26, column: 35, scope: !7)
!16 = !DILocation(line: 27, column: 35, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 31, column: 31, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 26, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 19, scope: !7)
!27 = !DILocation(line: 41, column: 20, scope: !7)
!28 = !DILocation(line: 42, column: 20, scope: !7)
!29 = !DILocation(line: 43, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 25, scope: !7)
!31 = !DILocation(line: 44, column: 37, scope: !7)
!32 = !DILocation(line: 44, column: 4, scope: !7)
