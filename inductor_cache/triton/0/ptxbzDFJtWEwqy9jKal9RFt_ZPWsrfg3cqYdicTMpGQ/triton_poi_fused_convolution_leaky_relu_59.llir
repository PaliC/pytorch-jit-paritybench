; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_59(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = sdiv i32 %9, 37, !dbg !14
  %18 = sdiv i32 %10, 37, !dbg !14
  %19 = sdiv i32 %11, 37, !dbg !14
  %20 = sdiv i32 %12, 37, !dbg !14
  %21 = sdiv i32 %13, 37, !dbg !14
  %22 = sdiv i32 %14, 37, !dbg !14
  %23 = sdiv i32 %15, 37, !dbg !14
  %24 = sdiv i32 %16, 37, !dbg !14
  %25 = srem i32 %17, 1024, !dbg !15
  %26 = srem i32 %18, 1024, !dbg !15
  %27 = srem i32 %19, 1024, !dbg !15
  %28 = srem i32 %20, 1024, !dbg !15
  %29 = srem i32 %21, 1024, !dbg !15
  %30 = srem i32 %22, 1024, !dbg !15
  %31 = srem i32 %23, 1024, !dbg !15
  %32 = srem i32 %24, 1024, !dbg !15
  %33 = sext i32 %9 to i64, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !16
  %35 = sext i32 %13 to i64, !dbg !16
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !16
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !17
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !17
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !17
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !17
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !17
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !17
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !17
  %47 = sext i32 %25 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !18
  %49 = sext i32 %26 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !18
  %51 = sext i32 %27 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !18
  %53 = sext i32 %28 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !18
  %55 = sext i32 %29 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !18
  %57 = sext i32 %30 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !18
  %59 = sext i32 %31 to i64, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !18
  %61 = sext i32 %32 to i64, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !18
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !19
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !19
  %71 = insertelement <8 x i32> poison, i32 %46, i64 0, !dbg !17
  %72 = insertelement <8 x i32> %71, i32 %45, i64 1, !dbg !17
  %73 = insertelement <8 x i32> %72, i32 %44, i64 2, !dbg !17
  %74 = insertelement <8 x i32> %73, i32 %43, i64 3, !dbg !17
  %75 = insertelement <8 x i32> %74, i32 %41, i64 4, !dbg !17
  %76 = insertelement <8 x i32> %75, i32 %40, i64 5, !dbg !17
  %77 = insertelement <8 x i32> %76, i32 %39, i64 6, !dbg !17
  %78 = insertelement <8 x i32> %77, i32 %38, i64 7, !dbg !17
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !17
  %80 = insertelement <8 x i32> poison, i32 %70, i64 0, !dbg !19
  %81 = insertelement <8 x i32> %80, i32 %69, i64 1, !dbg !19
  %82 = insertelement <8 x i32> %81, i32 %68, i64 2, !dbg !19
  %83 = insertelement <8 x i32> %82, i32 %67, i64 3, !dbg !19
  %84 = insertelement <8 x i32> %83, i32 %66, i64 4, !dbg !19
  %85 = insertelement <8 x i32> %84, i32 %65, i64 5, !dbg !19
  %86 = insertelement <8 x i32> %85, i32 %64, i64 6, !dbg !19
  %87 = insertelement <8 x i32> %86, i32 %63, i64 7, !dbg !19
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !19
  %89 = fadd <8 x float> %79, %88, !dbg !20
  %90 = fcmp ogt <8 x float> %89, zeroinitializer, !dbg !21
  %91 = extractelement <8 x float> %89, i64 7, !dbg !22
  %92 = fmul float %91, 0x3FB99999A0000000, !dbg !23
  %93 = extractelement <8 x float> %89, i64 6, !dbg !22
  %94 = fmul float %93, 0x3FB99999A0000000, !dbg !23
  %95 = extractelement <8 x float> %89, i64 5, !dbg !22
  %96 = fmul float %95, 0x3FB99999A0000000, !dbg !23
  %97 = extractelement <8 x float> %89, i64 4, !dbg !22
  %98 = fmul float %97, 0x3FB99999A0000000, !dbg !23
  %99 = extractelement <8 x float> %89, i64 3, !dbg !22
  %100 = fmul float %99, 0x3FB99999A0000000, !dbg !23
  %101 = extractelement <8 x float> %89, i64 2, !dbg !22
  %102 = fmul float %101, 0x3FB99999A0000000, !dbg !23
  %103 = extractelement <8 x float> %89, i64 1, !dbg !22
  %104 = fmul float %103, 0x3FB99999A0000000, !dbg !23
  %105 = extractelement <8 x float> %89, i64 0, !dbg !22
  %106 = fmul float %105, 0x3FB99999A0000000, !dbg !23
  %107 = extractelement <8 x i1> %90, i64 7, !dbg !22
  %108 = select i1 %107, float %91, float %92, !dbg !22
  %109 = extractelement <8 x i1> %90, i64 6, !dbg !22
  %110 = select i1 %109, float %93, float %94, !dbg !22
  %111 = extractelement <8 x i1> %90, i64 5, !dbg !22
  %112 = select i1 %111, float %95, float %96, !dbg !22
  %113 = extractelement <8 x i1> %90, i64 4, !dbg !22
  %114 = select i1 %113, float %97, float %98, !dbg !22
  %115 = extractelement <8 x i1> %90, i64 3, !dbg !22
  %116 = select i1 %115, float %99, float %100, !dbg !22
  %117 = extractelement <8 x i1> %90, i64 2, !dbg !22
  %118 = select i1 %117, float %101, float %102, !dbg !22
  %119 = extractelement <8 x i1> %90, i64 1, !dbg !22
  %120 = select i1 %119, float %103, float %104, !dbg !22
  %121 = extractelement <8 x i1> %90, i64 0, !dbg !22
  %122 = select i1 %121, float %105, float %106, !dbg !22
  %123 = bitcast float %108 to i32, !dbg !24
  %124 = bitcast float %110 to i32, !dbg !24
  %125 = bitcast float %112 to i32, !dbg !24
  %126 = bitcast float %114 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %123, i32 %124, i32 %125, i32 %126, ptr addrspace(1) %34, i1 true) #1, !dbg !24
  %127 = bitcast float %116 to i32, !dbg !24
  %128 = bitcast float %118 to i32, !dbg !24
  %129 = bitcast float %120 to i32, !dbg !24
  %130 = bitcast float %122 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %127, i32 %128, i32 %129, i32 %130, ptr addrspace(1) %36, i1 true) #1, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdgfo2uuyuxpsma473pjgsg2axxtgltzcd3362yadkup5u6ydapp.py", directory: "inductor_cache/dg")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_59, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_59, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_59", linkageName: "triton_poi_fused_convolution_leaky_relu_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 18, scope: !7)
!21 = !DILocation(line: 30, column: 18, scope: !7)
!22 = !DILocation(line: 33, column: 32, scope: !7)
!23 = !DILocation(line: 32, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 4, scope: !7)
