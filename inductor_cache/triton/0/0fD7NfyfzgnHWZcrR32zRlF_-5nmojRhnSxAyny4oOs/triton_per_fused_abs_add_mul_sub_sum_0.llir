; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_abs_add_mul_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = icmp samesign ult i32 %10, 12, !dbg !13
  %.lhs.trunc = trunc nuw nsw i32 %10 to i8, !dbg !14
  %12 = udiv i8 %.lhs.trunc, 3, !dbg !15
  %13 = mul i8 %12, 3, !dbg !14
  %.decomposed = sub i8 %.lhs.trunc, %13, !dbg !14
  %.frozen = freeze i32 %7, !dbg !16
  %14 = sdiv i32 %.frozen, 4, !dbg !16
  %15 = mul i32 %14, 4, !dbg !17
  %.decomposed6 = sub i32 %.frozen, %15, !dbg !17
  %16 = shl nuw nsw i8 %.decomposed, 2, !dbg !18
  %17 = zext nneg i8 %16 to i32, !dbg !18
  %18 = shl nuw nsw i8 %12, 4, !dbg !19
  %19 = zext nneg i8 %18 to i32, !dbg !19
  %20 = shl i32 %14, 6, !dbg !20
  %21 = add i32 %20, %.decomposed6, !dbg !21
  %22 = add i32 %21, 4, !dbg !22
  %23 = add nuw i32 %22, %17, !dbg !23
  %24 = add i32 %23, %19, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !25
  %27 = and i1 %11, %8, !dbg !26
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27) #3, !dbg !27
  %29 = add i32 %21, %17, !dbg !28
  %30 = add i32 %29, %19, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %27, i32 0, i1 %27) #3, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !32
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %27, i32 0, i1 %27) #3, !dbg !33
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !34
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %27, i32 0, i1 %27) #3, !dbg !35
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !36
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %27, i32 0, i1 %27) #3, !dbg !37
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !38
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %27, i32 0, i1 %27) #3, !dbg !39
  %42 = shl nuw nsw i32 %10, 2, !dbg !40
  %43 = add i32 %21, 16, !dbg !41
  %44 = add i32 %43, %42, !dbg !42
  %45 = sext i32 %44 to i64, !dbg !43
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !43
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %27, i32 0, i1 %27) #3, !dbg !44
  %48 = add i32 %21, %42, !dbg !45
  %49 = sext i32 %48 to i64, !dbg !46
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !46
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %27, i32 0, i1 %27) #3, !dbg !47
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !48
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %27, i32 0, i1 %27) #3, !dbg !49
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !50
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %27, i32 0, i1 %27) #3, !dbg !51
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !52
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %27, i32 0, i1 %27) #3, !dbg !53
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !54
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %27, i32 0, i1 %27) #3, !dbg !55
  %60 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !27
  %61 = insertelement <2 x i32> %60, i32 %33, i64 1, !dbg !27
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !27
  %63 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !33
  %64 = insertelement <2 x i32> %63, i32 %39, i64 1, !dbg !33
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !33
  %66 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !35
  %67 = insertelement <2 x i32> %66, i32 %41, i64 1, !dbg !35
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !35
  %shift = shufflevector <2 x float> %62, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !56
  %69 = fmul <2 x float> %shift, %62, !dbg !56
  %70 = extractelement <2 x float> %69, i64 0, !dbg !56
  %71 = fsub <2 x float> %65, %68, !dbg !57
  %72 = fmul <2 x float> %71, %62, !dbg !58
  %shift3 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !59
  %73 = fsub <2 x float> %72, %shift3, !dbg !59
  %74 = extractelement <2 x float> %73, i64 0, !dbg !59
  %75 = tail call float @llvm.fabs.f32(float %74), !dbg !60
  %76 = fmul float %70, %75, !dbg !61
  %77 = select i1 %27, float %76, float 0.000000e+00, !dbg !62
  %78 = bitcast float %77 to i32, !dbg !63
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 8, i32 31), !dbg !63
  %80 = bitcast i32 %79 to float, !dbg !63
  %81 = fadd float %77, %80, !dbg !67
  %82 = bitcast float %81 to i32, !dbg !63
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !63
  %84 = bitcast i32 %83 to float, !dbg !63
  %85 = fadd float %81, %84, !dbg !67
  %86 = bitcast float %85 to i32, !dbg !63
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !63
  %88 = bitcast i32 %87 to float, !dbg !63
  %89 = fadd float %85, %88, !dbg !67
  %90 = bitcast float %89 to i32, !dbg !63
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !63
  %92 = bitcast i32 %91 to float, !dbg !63
  %93 = fadd float %89, %92, !dbg !67
  %94 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !44
  %95 = insertelement <2 x i32> %94, i32 %51, i64 1, !dbg !44
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !44
  %97 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !49
  %98 = insertelement <2 x i32> %97, i32 %57, i64 1, !dbg !49
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !49
  %100 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !51
  %101 = insertelement <2 x i32> %100, i32 %59, i64 1, !dbg !51
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !51
  %shift4 = shufflevector <2 x float> %96, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !69
  %103 = fmul <2 x float> %shift4, %96, !dbg !69
  %104 = extractelement <2 x float> %103, i64 0, !dbg !69
  %105 = fsub <2 x float> %99, %102, !dbg !70
  %106 = fmul <2 x float> %105, %96, !dbg !71
  %shift5 = shufflevector <2 x float> %106, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !72
  %107 = fsub <2 x float> %106, %shift5, !dbg !72
  %108 = extractelement <2 x float> %107, i64 0, !dbg !72
  %109 = tail call float @llvm.fabs.f32(float %108), !dbg !73
  %110 = fmul float %104, %109, !dbg !74
  %111 = select i1 %27, float %110, float 0.000000e+00, !dbg !75
  %112 = bitcast float %111 to i32, !dbg !76
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !76
  %114 = bitcast i32 %113 to float, !dbg !76
  %115 = fadd float %111, %114, !dbg !78
  %116 = bitcast float %115 to i32, !dbg !76
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 4, i32 31), !dbg !76
  %118 = bitcast i32 %117 to float, !dbg !76
  %119 = fadd float %115, %118, !dbg !78
  %120 = bitcast float %119 to i32, !dbg !76
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 2, i32 31), !dbg !76
  %122 = bitcast i32 %121 to float, !dbg !76
  %123 = fadd float %119, %122, !dbg !78
  %124 = bitcast float %123 to i32, !dbg !76
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !76
  %126 = bitcast i32 %125 to float, !dbg !76
  %127 = fadd float %123, %126, !dbg !78
  %128 = fadd float %93, %127, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !80
  %129 = sext i32 %7 to i64, !dbg !81
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !81
  %131 = and i32 %9, 63, !dbg !82
  %132 = icmp eq i32 %131, 0, !dbg !82
  %133 = bitcast float %128 to i32, !dbg !82
  %134 = and i1 %132, %8, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %130, i1 %134) #3, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2f5o3esow63pkclydgwh7uq5flgsdvl32t4sckl5n7croiwf63l.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_per_fused_abs_add_mul_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_mul_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_mul_sub_sum_0", linkageName: "triton_per_fused_abs_add_mul_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 29, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 41, scope: !7)
!19 = !DILocation(line: 35, column: 49, scope: !7)
!20 = !DILocation(line: 35, column: 57, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 39, scope: !7)
!23 = !DILocation(line: 35, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 54, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 70, scope: !7)
!27 = !DILocation(line: 35, column: 62, scope: !7)
!28 = !DILocation(line: 36, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 50, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 58, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 62, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 62, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 58, scope: !7)
!38 = !DILocation(line: 40, column: 30, scope: !7)
!39 = !DILocation(line: 40, column: 58, scope: !7)
!40 = !DILocation(line: 41, column: 43, scope: !7)
!41 = !DILocation(line: 41, column: 41, scope: !7)
!42 = !DILocation(line: 41, column: 48, scope: !7)
!43 = !DILocation(line: 41, column: 31, scope: !7)
!44 = !DILocation(line: 41, column: 56, scope: !7)
!45 = !DILocation(line: 42, column: 43, scope: !7)
!46 = !DILocation(line: 42, column: 31, scope: !7)
!47 = !DILocation(line: 42, column: 51, scope: !7)
!48 = !DILocation(line: 43, column: 31, scope: !7)
!49 = !DILocation(line: 43, column: 56, scope: !7)
!50 = !DILocation(line: 44, column: 31, scope: !7)
!51 = !DILocation(line: 44, column: 56, scope: !7)
!52 = !DILocation(line: 45, column: 31, scope: !7)
!53 = !DILocation(line: 45, column: 51, scope: !7)
!54 = !DILocation(line: 46, column: 31, scope: !7)
!55 = !DILocation(line: 46, column: 51, scope: !7)
!56 = !DILocation(line: 47, column: 18, scope: !7)
!57 = !DILocation(line: 48, column: 18, scope: !7)
!58 = !DILocation(line: 49, column: 18, scope: !7)
!59 = !DILocation(line: 52, column: 19, scope: !7)
!60 = !DILocation(line: 53, column: 24, scope: !7)
!61 = !DILocation(line: 54, column: 19, scope: !7)
!62 = !DILocation(line: 56, column: 43, scope: !7)
!63 = !DILocation(line: 267, column: 36, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!66 = !DILocation(line: 57, column: 26, scope: !7)
!67 = !DILocation(line: 256, column: 15, scope: !68, inlinedAt: !66)
!68 = distinct !DILexicalBlockFile(scope: !64, file: !65, discriminator: 0)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 60, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 20, scope: !7)
!73 = !DILocation(line: 64, column: 24, scope: !7)
!74 = !DILocation(line: 65, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 43, scope: !7)
!76 = !DILocation(line: 267, column: 36, scope: !64, inlinedAt: !77)
!77 = !DILocation(line: 68, column: 26, scope: !7)
!78 = !DILocation(line: 256, column: 15, scope: !68, inlinedAt: !77)
!79 = !DILocation(line: 69, column: 20, scope: !7)
!80 = !DILocation(line: 70, column: 4, scope: !7)
!81 = !DILocation(line: 71, column: 28, scope: !7)
!82 = !DILocation(line: 71, column: 40, scope: !7)
!83 = !DILocation(line: 71, column: 4, scope: !7)
