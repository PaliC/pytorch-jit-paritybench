; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 8, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = shl i32 %23, 1, !dbg !12
  %25 = and i32 %24, 254, !dbg !12
  %26 = or disjoint i32 %22, %25, !dbg !13
  %27 = sdiv i32 %26, 16, !dbg !14
  %28 = srem i32 %27, 192, !dbg !15
  %.frozen = freeze i32 %26, !dbg !16
  %29 = sdiv i32 %.frozen, 4, !dbg !16
  %30 = srem i32 %29, 4, !dbg !17
  %31 = mul i32 %29, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %31, !dbg !18
  %32 = sext i32 %26 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %35 = sext i32 %28 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !29
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !32
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !33
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !34
  %59 = bitcast i32 %58 to float, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !37
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !38
  %66 = sext i32 %30 to i64, !dbg !39
  %67 = getelementptr i64, ptr addrspace(1) %11, i64 %66, !dbg !39
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !40
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !40
  %70 = sext i32 %.decomposed to i64, !dbg !41
  %71 = getelementptr i64, ptr addrspace(1) %12, i64 %70, !dbg !41
  %72 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !42
  %73 = getelementptr i64, ptr addrspace(1) %14, i64 %70, !dbg !43
  %74 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %15, i64 %70, !dbg !45
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !46
  %77 = getelementptr float, ptr addrspace(1) %16, i64 %32, !dbg !47
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !48
  %79 = getelementptr i64, ptr addrspace(1) %17, i64 %66, !dbg !49
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !50
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !50
  %82 = getelementptr float, ptr addrspace(1) %18, i64 %66, !dbg !51
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !52
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !52
  %85 = fadd float %41, 0x3EE4F8B580000000, !dbg !53
  %86 = fadd float %43, 0x3EE4F8B580000000, !dbg !53
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %87, 0, !dbg !54
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %88, 0, !dbg !54
  br i1 %.not.i, label %94, label %89, !dbg !54

89:                                               ; preds = %20
  br i1 %.not1.i, label %92, label %90, !dbg !54

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

94:                                               ; preds = %20
  br i1 %.not1.i, label %97, label %95, !dbg !54

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !54
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i1 = icmp eq i32 %99, 0, !dbg !54
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i4 = icmp eq i32 %100, 0, !dbg !54
  br i1 %.not.i1, label %106, label %101, !dbg !54

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !54

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %109, label %107, !dbg !54

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !54
  br label %__nv_sqrtf.exit5, !dbg !54

__nv_sqrtf.exit5:                                 ; preds = %102, %104, %107, %109
  %.0.i3 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !54
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !55
  %113 = fadd float %57, 0x3EE4F8B580000000, !dbg !56
  %114 = fadd float %59, 0x3EE4F8B580000000, !dbg !56
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i6 = icmp eq i32 %115, 0, !dbg !57
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i9 = icmp eq i32 %116, 0, !dbg !57
  br i1 %.not.i6, label %122, label %117, !dbg !57

117:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %120, label %118, !dbg !57

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !57

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

__nv_sqrtf.exit10:                                ; preds = %118, %120, %123, %125
  %.0.i8 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !57
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i11 = icmp eq i32 %127, 0, !dbg !57
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i14 = icmp eq i32 %128, 0, !dbg !57
  br i1 %.not.i11, label %134, label %129, !dbg !57

129:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %132, label %130, !dbg !57

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !57

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

__nv_sqrtf.exit15:                                ; preds = %130, %132, %135, %137
  %.0.i13 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !57
  %139 = extractvalue { i32, i32 } %51, 1, !dbg !30
  %140 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !22
  %141 = insertelement <2 x i32> %140, i32 %54, i64 1, !dbg !22
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !22
  %143 = extractvalue { i32, i32 } %51, 0, !dbg !30
  %144 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !22
  %145 = insertelement <2 x i32> %144, i32 %53, i64 1, !dbg !22
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !22
  %147 = extractvalue { i32, i32 } %34, 1, !dbg !20
  %148 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !26
  %149 = insertelement <2 x i32> %148, i32 %62, i64 1, !dbg !26
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !26
  %151 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !28
  %152 = insertelement <2 x i32> %151, i32 %65, i64 1, !dbg !28
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !28
  %154 = extractvalue { i32, i32 } %34, 0, !dbg !20
  %155 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !26
  %156 = insertelement <2 x i32> %155, i32 %61, i64 1, !dbg !26
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !26
  %158 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !28
  %159 = insertelement <2 x i32> %158, i32 %64, i64 1, !dbg !28
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !28
  %161 = bitcast i32 %84 to float, !dbg !52
  %162 = bitcast i32 %83 to float, !dbg !52
  %163 = extractvalue { i32, i32 } %78, 1, !dbg !48
  %164 = bitcast i32 %163 to float, !dbg !48
  %165 = extractvalue { i32, i32 } %78, 0, !dbg !48
  %166 = bitcast i32 %165 to float, !dbg !48
  %167 = extractvalue { i32, i32 } %76, 1, !dbg !46
  %168 = extractvalue { i32, i32 } %76, 0, !dbg !46
  %169 = extractvalue { i64, i64 } %74, 1, !dbg !44
  %170 = extractvalue { i64, i64 } %74, 0, !dbg !44
  %171 = extractvalue { i64, i64 } %72, 1, !dbg !42
  %172 = extractvalue { i64, i64 } %72, 0, !dbg !42
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !58
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !58
  %175 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !20
  %176 = insertelement <2 x i32> %175, i32 %143, i64 1, !dbg !20
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !20
  %178 = fsub <2 x float> %177, %146, !dbg !59
  %179 = insertelement <2 x float> poison, float %111, i64 0, !dbg !60
  %180 = insertelement <2 x float> %179, float %173, i64 1, !dbg !60
  %181 = fmul <2 x float> %178, %180, !dbg !60
  %182 = fmul <2 x float> %181, %157, !dbg !61
  %183 = fadd <2 x float> %182, %160, !dbg !62
  %184 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !20
  %185 = insertelement <2 x i32> %184, i32 %139, i64 1, !dbg !20
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !20
  %187 = fsub <2 x float> %186, %142, !dbg !59
  %188 = insertelement <2 x float> poison, float %112, i64 0, !dbg !60
  %189 = insertelement <2 x float> %188, float %174, i64 1, !dbg !60
  %190 = fmul <2 x float> %187, %189, !dbg !60
  %191 = fmul <2 x float> %190, %150, !dbg !61
  %192 = fadd <2 x float> %191, %153, !dbg !62
  %shift = shufflevector <2 x float> %183, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %193 = fadd <2 x float> %183, %shift, !dbg !63
  %194 = extractelement <2 x float> %193, i64 0, !dbg !63
  %shift16 = shufflevector <2 x float> %192, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %195 = fadd <2 x float> %192, %shift16, !dbg !63
  %196 = extractelement <2 x float> %195, i64 0, !dbg !63
  %197 = lshr i64 %68, 62, !dbg !64
  %198 = and i64 %197, 2, !dbg !64
  %199 = add i64 %198, %68, !dbg !64
  %200 = lshr i64 %172, 62, !dbg !65
  %201 = and i64 %200, 2, !dbg !65
  %202 = lshr i64 %171, 62, !dbg !65
  %203 = and i64 %202, 2, !dbg !65
  %204 = shl i64 %199, 1, !dbg !66
  %205 = shl nsw i32 %27, 2, !dbg !67
  %206 = sext i32 %205 to i64, !dbg !68
  %207 = getelementptr float, ptr addrspace(1) %13, i64 %172, !dbg !69
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %201, !dbg !69
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %204, !dbg !69
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %206, !dbg !69
  %211 = getelementptr float, ptr addrspace(1) %13, i64 %171, !dbg !69
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %203, !dbg !69
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %204, !dbg !69
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %206, !dbg !69
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %210, i1 true) #3, !dbg !70
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #3, !dbg !70
  %217 = lshr i64 %170, 62, !dbg !71
  %218 = and i64 %217, 2, !dbg !71
  %219 = lshr i64 %169, 62, !dbg !71
  %220 = and i64 %219, 2, !dbg !71
  %221 = getelementptr float, ptr addrspace(1) %13, i64 %170, !dbg !72
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %218, !dbg !72
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %204, !dbg !72
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %206, !dbg !72
  %225 = getelementptr float, ptr addrspace(1) %13, i64 %169, !dbg !72
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %220, !dbg !72
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %204, !dbg !72
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %206, !dbg !72
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #3, !dbg !73
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #3, !dbg !73
  %231 = fadd float %194, %166, !dbg !74
  %232 = fadd float %196, %164, !dbg !74
  %233 = lshr i64 %80, 62, !dbg !75
  %234 = and i64 %233, 2, !dbg !75
  %235 = add i64 %234, %80, !dbg !75
  %236 = shl i64 %235, 1, !dbg !76
  %237 = getelementptr float, ptr addrspace(1) %208, i64 %236, !dbg !77
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %206, !dbg !77
  %239 = getelementptr float, ptr addrspace(1) %212, i64 %236, !dbg !77
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %206, !dbg !77
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !78
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !78
  %243 = getelementptr float, ptr addrspace(1) %222, i64 %236, !dbg !79
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %206, !dbg !79
  %245 = getelementptr float, ptr addrspace(1) %226, i64 %236, !dbg !79
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %206, !dbg !79
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !80
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !80
  %249 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !78
  %250 = insertelement <2 x i32> %249, i32 %215, i64 1, !dbg !78
  %251 = bitcast <2 x i32> %250 to <2 x float>, !dbg !78
  %252 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !80
  %253 = insertelement <2 x i32> %252, i32 %229, i64 1, !dbg !80
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !80
  %255 = fsub <2 x float> %254, %251, !dbg !81
  %256 = insertelement <2 x i32> poison, i32 %168, i64 0, !dbg !82
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !82
  %258 = shufflevector <2 x float> %257, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !82
  %259 = fmul <2 x float> %255, %258, !dbg !82
  %260 = fadd <2 x float> %259, %251, !dbg !83
  %261 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !78
  %262 = insertelement <2 x i32> %261, i32 %216, i64 1, !dbg !78
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !78
  %264 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !80
  %265 = insertelement <2 x i32> %264, i32 %230, i64 1, !dbg !80
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !80
  %267 = fsub <2 x float> %266, %263, !dbg !81
  %268 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !82
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !82
  %270 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !82
  %271 = fmul <2 x float> %267, %270, !dbg !82
  %272 = fadd <2 x float> %271, %263, !dbg !83
  %273 = extractelement <2 x float> %260, i64 0, !dbg !84
  %274 = extractelement <2 x float> %260, i64 1, !dbg !85
  %275 = fsub float %273, %274, !dbg !84
  %276 = extractelement <2 x float> %272, i64 0, !dbg !84
  %277 = extractelement <2 x float> %272, i64 1, !dbg !85
  %278 = fsub float %276, %277, !dbg !84
  %279 = fmul float %275, %162, !dbg !86
  %280 = fmul float %278, %161, !dbg !86
  %281 = fadd float %274, %279, !dbg !85
  %282 = fadd float %277, %280, !dbg !85
  %283 = fadd float %231, %281, !dbg !87
  %284 = fadd float %232, %282, !dbg !87
  %285 = fcmp olt float %283, 0.000000e+00, !dbg !88
  %286 = fcmp olt float %284, 0.000000e+00, !dbg !88
  %287 = select i1 %285, float 0.000000e+00, float %283, !dbg !92
  %288 = select i1 %286, float 0.000000e+00, float %284, !dbg !92
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !93
  %290 = bitcast float %287 to i32, !dbg !94
  %291 = bitcast float %288 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %290, i32 %291, ptr addrspace(1) %289, i1 true) #3, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbdvmpae4dwwebtxauwlwhhs373o6764cei3wfvs4lpip5jqivuj.py", directory: "inductor_cache/bd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_43", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 18, scope: !7)
!54 = !DILocation(line: 49, column: 26, scope: !7)
!55 = !DILocation(line: 51, column: 18, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 27, scope: !7)
!58 = !DILocation(line: 60, column: 19, scope: !7)
!59 = !DILocation(line: 46, column: 18, scope: !7)
!60 = !DILocation(line: 54, column: 19, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 35, scope: !7)
!65 = !DILocation(line: 72, column: 35, scope: !7)
!66 = !DILocation(line: 73, column: 42, scope: !7)
!67 = !DILocation(line: 73, column: 52, scope: !7)
!68 = !DILocation(line: 73, column: 50, scope: !7)
!69 = !DILocation(line: 73, column: 32, scope: !7)
!70 = !DILocation(line: 73, column: 57, scope: !7)
!71 = !DILocation(line: 76, column: 35, scope: !7)
!72 = !DILocation(line: 77, column: 32, scope: !7)
!73 = !DILocation(line: 77, column: 57, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 84, column: 35, scope: !7)
!76 = !DILocation(line: 85, column: 42, scope: !7)
!77 = !DILocation(line: 85, column: 32, scope: !7)
!78 = !DILocation(line: 85, column: 57, scope: !7)
!79 = !DILocation(line: 86, column: 32, scope: !7)
!80 = !DILocation(line: 86, column: 57, scope: !7)
!81 = !DILocation(line: 87, column: 20, scope: !7)
!82 = !DILocation(line: 88, column: 20, scope: !7)
!83 = !DILocation(line: 89, column: 20, scope: !7)
!84 = !DILocation(line: 90, column: 20, scope: !7)
!85 = !DILocation(line: 92, column: 20, scope: !7)
!86 = !DILocation(line: 91, column: 20, scope: !7)
!87 = !DILocation(line: 93, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !89, inlinedAt: !91)
!89 = distinct !DILexicalBlockFile(scope: !7, file: !90, discriminator: 0)
!90 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!91 = !DILocation(line: 95, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !91)
!93 = !DILocation(line: 96, column: 28, scope: !7)
!94 = !DILocation(line: 96, column: 40, scope: !7)
!95 = !DILocation(line: 96, column: 4, scope: !7)
