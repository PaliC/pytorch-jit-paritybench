; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = lshr i32 %13, 4, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %17, 16, !dbg !12
  %19 = or disjoint i32 %17, 32, !dbg !12
  %20 = or disjoint i32 %17, 48, !dbg !12
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = or disjoint i32 %12, %18, !dbg !13
  %24 = or disjoint i32 %12, %19, !dbg !13
  %25 = or disjoint i32 %12, %20, !dbg !13
  %26 = icmp slt i32 %21, 36, !dbg !14
  %27 = icmp slt i32 %22, 36, !dbg !14
  %28 = icmp slt i32 %23, 36, !dbg !14
  %29 = icmp slt i32 %24, 36, !dbg !14
  %30 = icmp slt i32 %25, 36, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %32 = shl i32 %31, 6, !dbg !16
  %33 = or disjoint i32 %32, %17, !dbg !17
  %34 = or disjoint i32 %32, %18, !dbg !17
  %35 = or disjoint i32 %32, %19, !dbg !17
  %36 = or disjoint i32 %32, %20, !dbg !17
  %37 = or disjoint i32 %32, %15, !dbg !17
  %38 = icmp slt i32 %33, 512, !dbg !18
  %39 = icmp slt i32 %34, 512, !dbg !18
  %40 = icmp slt i32 %35, 512, !dbg !18
  %41 = icmp slt i32 %36, 512, !dbg !18
  %42 = icmp slt i32 %37, 512, !dbg !18
  %.frozen = freeze i32 %37, !dbg !19
  %43 = sdiv i32 %.frozen, 128, !dbg !19
  %44 = mul i32 %43, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %44, !dbg !20
  %45 = mul i32 %33, 36, !dbg !21
  %46 = mul i32 %34, 36, !dbg !21
  %47 = mul i32 %35, 36, !dbg !21
  %48 = mul i32 %36, 36, !dbg !21
  %49 = add i32 %45, %21, !dbg !22
  %50 = add i32 %46, %21, !dbg !22
  %51 = add i32 %47, %21, !dbg !22
  %52 = add i32 %48, %21, !dbg !22
  %53 = sext i32 %49 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !23
  %55 = sext i32 %50 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !23
  %57 = sext i32 %51 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !23
  %59 = sext i32 %52 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !23
  %61 = and i1 %26, %38, !dbg !24
  %62 = and i1 %26, %39, !dbg !24
  %63 = and i1 %26, %40, !dbg !24
  %64 = and i1 %26, %41, !dbg !24
  %65 = and i1 %27, %42, !dbg !24
  %66 = and i1 %28, %42, !dbg !24
  %67 = and i1 %29, %42, !dbg !24
  %68 = and i1 %30, %42, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #4, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %62) #4, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %63) #4, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !25
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %64) #4, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !25
  %89 = shl i32 %13, 8, !dbg !25
  %90 = and i32 %89, 3840, !dbg !25
  %91 = or disjoint i32 %90, %17, !dbg !25
  %92 = and i32 %14, 1020, !dbg !25
  %93 = lshr exact i32 %90, 4, !dbg !25
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !25
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !25
  %96 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !25
  %97 = or disjoint i32 %91, 64, !dbg !25
  %98 = lshr i32 %97, 6, !dbg !25
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !25
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !25
  %101 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !25
  %102 = or disjoint i32 %91, 128, !dbg !25
  %103 = lshr i32 %102, 6, !dbg !25
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !25
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !25
  %106 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !25
  %107 = or disjoint i32 %91, 192, !dbg !25
  %108 = lshr i32 %107, 6, !dbg !25
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !25
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !25
  %111 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !25
  %112 = or disjoint i32 %91, 16, !dbg !25
  %113 = getelementptr float, ptr addrspace(3) %94, i32 %112, !dbg !25
  %114 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #4, !dbg !25
  %115 = or disjoint i32 %91, 80, !dbg !25
  %116 = lshr i32 %115, 6, !dbg !25
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !25
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !25
  %119 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !25
  %120 = or disjoint i32 %91, 144, !dbg !25
  %121 = lshr i32 %120, 6, !dbg !25
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !25
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !25
  %124 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !25
  %125 = or disjoint i32 %91, 208, !dbg !25
  %126 = lshr i32 %125, 6, !dbg !25
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !25
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !25
  %129 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !25
  %130 = or disjoint i32 %91, 32, !dbg !25
  %131 = getelementptr float, ptr addrspace(3) %94, i32 %130, !dbg !25
  %132 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !25
  %133 = or disjoint i32 %91, 96, !dbg !25
  %134 = lshr i32 %133, 6, !dbg !25
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !25
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !25
  %137 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !25
  %138 = or disjoint i32 %91, 160, !dbg !25
  %139 = lshr i32 %138, 6, !dbg !25
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !25
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !25
  %142 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !25
  %143 = or disjoint i32 %91, 224, !dbg !25
  %144 = lshr i32 %143, 6, !dbg !25
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !25
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !25
  %147 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !25
  %148 = or disjoint i32 %91, 48, !dbg !25
  %149 = getelementptr float, ptr addrspace(3) %94, i32 %148, !dbg !25
  %150 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #4, !dbg !25
  %151 = or disjoint i32 %91, 112, !dbg !25
  %152 = lshr i32 %151, 6, !dbg !25
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !25
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !25
  %155 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !25
  %156 = or disjoint i32 %91, 176, !dbg !25
  %157 = lshr i32 %156, 6, !dbg !25
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !25
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !25
  %160 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !25
  %161 = or disjoint i32 %91, 240, !dbg !25
  %162 = lshr i32 %161, 6, !dbg !25
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !25
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !25
  %165 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %166 = lshr i32 %92, 6, !dbg !25
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !25
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %92, !dbg !25
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !25
  %170 = or disjoint i32 %92, 1, !dbg !25
  %171 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %170, !dbg !25
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !25
  %173 = or disjoint i32 %92, 2, !dbg !25
  %174 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %173, !dbg !25
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !25
  %176 = or disjoint i32 %92, 3, !dbg !25
  %177 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %176, !dbg !25
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !25
  %179 = or disjoint i32 %92, 1024, !dbg !25
  %180 = lshr i32 %179, 6, !dbg !25
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !25
  %182 = getelementptr inbounds float, ptr addrspace(3) %181, i32 %179, !dbg !25
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !25
  %184 = or disjoint i32 %92, 1025, !dbg !25
  %185 = lshr i32 %184, 6, !dbg !25
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !25
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !25
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !25
  %189 = or disjoint i32 %92, 1026, !dbg !25
  %190 = lshr i32 %189, 6, !dbg !25
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !25
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !25
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !25
  %194 = or disjoint i32 %92, 1027, !dbg !25
  %195 = lshr i32 %194, 6, !dbg !25
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !25
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !25
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !25
  %199 = or disjoint i32 %92, 2048, !dbg !25
  %200 = lshr i32 %199, 6, !dbg !25
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !25
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !25
  %203 = load float, ptr addrspace(3) %202, align 4, !dbg !25
  %204 = or disjoint i32 %92, 2049, !dbg !25
  %205 = lshr i32 %204, 6, !dbg !25
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !25
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !25
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !25
  %209 = or disjoint i32 %92, 2050, !dbg !25
  %210 = lshr i32 %209, 6, !dbg !25
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !25
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !25
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !25
  %214 = or disjoint i32 %92, 2051, !dbg !25
  %215 = lshr i32 %214, 6, !dbg !25
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !25
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !25
  %218 = load float, ptr addrspace(3) %217, align 4, !dbg !25
  %219 = or disjoint i32 %92, 3072, !dbg !25
  %220 = lshr i32 %219, 6, !dbg !25
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !25
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %219, !dbg !25
  %223 = load float, ptr addrspace(3) %222, align 4, !dbg !25
  %224 = or disjoint i32 %92, 3073, !dbg !25
  %225 = lshr i32 %224, 6, !dbg !25
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !25
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %224, !dbg !25
  %228 = load float, ptr addrspace(3) %227, align 4, !dbg !25
  %229 = or disjoint i32 %92, 3074, !dbg !25
  %230 = lshr i32 %229, 6, !dbg !25
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !25
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %229, !dbg !25
  %233 = load float, ptr addrspace(3) %232, align 4, !dbg !25
  %234 = or disjoint i32 %92, 3075, !dbg !25
  %235 = lshr i32 %234, 6, !dbg !25
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !25
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %234, !dbg !25
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !25
  %239 = shl i32 %22, 9, !dbg !26
  %240 = shl i32 %23, 9, !dbg !26
  %241 = shl i32 %24, 9, !dbg !26
  %242 = shl i32 %25, 9, !dbg !26
  %243 = add i32 %37, %239, !dbg !27
  %244 = add i32 %37, %240, !dbg !27
  %245 = add i32 %37, %241, !dbg !27
  %246 = add i32 %37, %242, !dbg !27
  %247 = sext i32 %243 to i64, !dbg !28
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !28
  %249 = sext i32 %244 to i64, !dbg !28
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !28
  %251 = sext i32 %245 to i64, !dbg !28
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !28
  %253 = sext i32 %246 to i64, !dbg !28
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !28
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %248, i1 %65) #4, !dbg !29
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %250, i1 %66) #4, !dbg !29
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %252, i1 %67) #4, !dbg !29
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %254, i1 %68) #4, !dbg !29
  %259 = sext i32 %.decomposed to i64, !dbg !30
  %260 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !30
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %260, i1 %42) #4, !dbg !31
  %262 = shl i32 %22, 2, !dbg !32
  %263 = shl i32 %23, 2, !dbg !32
  %264 = shl i32 %24, 2, !dbg !32
  %265 = shl i32 %25, 2, !dbg !32
  %266 = add i32 %43, %262, !dbg !33
  %267 = add i32 %43, %263, !dbg !33
  %268 = add i32 %43, %264, !dbg !33
  %269 = add i32 %43, %265, !dbg !33
  %270 = sext i32 %266 to i64, !dbg !34
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %270, !dbg !34
  %272 = sext i32 %267 to i64, !dbg !34
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %272, !dbg !34
  %274 = sext i32 %268 to i64, !dbg !34
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !34
  %276 = sext i32 %269 to i64, !dbg !34
  %277 = getelementptr float, ptr addrspace(1) %3, i64 %276, !dbg !34
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %65) #4, !dbg !35
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %65) #4, !dbg !35
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %65) #4, !dbg !35
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %65) #4, !dbg !35
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %66) #4, !dbg !35
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %66) #4, !dbg !35
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %66) #4, !dbg !35
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %66) #4, !dbg !35
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %67) #4, !dbg !35
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %67) #4, !dbg !35
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %67) #4, !dbg !35
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %67) #4, !dbg !35
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %68) #4, !dbg !35
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %68) #4, !dbg !35
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %68) #4, !dbg !35
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 %68) #4, !dbg !35
  %294 = getelementptr float, ptr addrspace(1) %4, i64 %270, !dbg !36
  %295 = getelementptr float, ptr addrspace(1) %4, i64 %272, !dbg !36
  %296 = getelementptr float, ptr addrspace(1) %4, i64 %274, !dbg !36
  %297 = getelementptr float, ptr addrspace(1) %4, i64 %276, !dbg !36
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %65) #4, !dbg !37
  %299 = bitcast i32 %298 to float, !dbg !37
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %65) #4, !dbg !37
  %301 = bitcast i32 %300 to float, !dbg !37
  %302 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %65) #4, !dbg !37
  %303 = bitcast i32 %302 to float, !dbg !37
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %65) #4, !dbg !37
  %305 = bitcast i32 %304 to float, !dbg !37
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %66) #4, !dbg !37
  %307 = bitcast i32 %306 to float, !dbg !37
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %66) #4, !dbg !37
  %309 = bitcast i32 %308 to float, !dbg !37
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %66) #4, !dbg !37
  %311 = bitcast i32 %310 to float, !dbg !37
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %295, i1 %66) #4, !dbg !37
  %313 = bitcast i32 %312 to float, !dbg !37
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %67) #4, !dbg !37
  %315 = bitcast i32 %314 to float, !dbg !37
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %67) #4, !dbg !37
  %317 = bitcast i32 %316 to float, !dbg !37
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %67) #4, !dbg !37
  %319 = bitcast i32 %318 to float, !dbg !37
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %67) #4, !dbg !37
  %321 = bitcast i32 %320 to float, !dbg !37
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %68) #4, !dbg !37
  %323 = bitcast i32 %322 to float, !dbg !37
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %68) #4, !dbg !37
  %325 = bitcast i32 %324 to float, !dbg !37
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %68) #4, !dbg !37
  %327 = bitcast i32 %326 to float, !dbg !37
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %68) #4, !dbg !37
  %329 = bitcast i32 %328 to float, !dbg !37
  %330 = getelementptr float, ptr addrspace(1) %5, i64 %259, !dbg !38
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %330, i1 %42) #4, !dbg !39
  %332 = getelementptr float, ptr addrspace(1) %6, i64 %259, !dbg !40
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %332, i1 %42) #4, !dbg !41
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float 1.280000e+02) #4, !dbg !42
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %301, float 1.280000e+02) #4, !dbg !42
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %303, float 1.280000e+02) #4, !dbg !42
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %305, float 1.280000e+02) #4, !dbg !42
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float 1.280000e+02) #4, !dbg !42
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float 1.280000e+02) #4, !dbg !42
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float 1.280000e+02) #4, !dbg !42
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %313, float 1.280000e+02) #4, !dbg !42
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float 1.280000e+02) #4, !dbg !42
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 1.280000e+02) #4, !dbg !42
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %319, float 1.280000e+02) #4, !dbg !42
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %321, float 1.280000e+02) #4, !dbg !42
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %323, float 1.280000e+02) #4, !dbg !42
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float 1.280000e+02) #4, !dbg !42
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float 1.280000e+02) #4, !dbg !42
  %349 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float 1.280000e+02) #4, !dbg !42
  %350 = fadd float %334, 0x3EE4F8B580000000, !dbg !43
  %351 = fadd float %335, 0x3EE4F8B580000000, !dbg !43
  %352 = fadd float %336, 0x3EE4F8B580000000, !dbg !43
  %353 = fadd float %337, 0x3EE4F8B580000000, !dbg !43
  %354 = fadd float %338, 0x3EE4F8B580000000, !dbg !43
  %355 = fadd float %339, 0x3EE4F8B580000000, !dbg !43
  %356 = fadd float %340, 0x3EE4F8B580000000, !dbg !43
  %357 = fadd float %341, 0x3EE4F8B580000000, !dbg !43
  %358 = fadd float %342, 0x3EE4F8B580000000, !dbg !43
  %359 = fadd float %343, 0x3EE4F8B580000000, !dbg !43
  %360 = fadd float %344, 0x3EE4F8B580000000, !dbg !43
  %361 = fadd float %345, 0x3EE4F8B580000000, !dbg !43
  %362 = fadd float %346, 0x3EE4F8B580000000, !dbg !43
  %363 = fadd float %347, 0x3EE4F8B580000000, !dbg !43
  %364 = fadd float %348, 0x3EE4F8B580000000, !dbg !43
  %365 = fadd float %349, 0x3EE4F8B580000000, !dbg !43
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %366, 0, !dbg !44
  br i1 %.not.i, label %369, label %367, !dbg !44

367:                                              ; preds = %10
  %368 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %350), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

369:                                              ; preds = %10
  %370 = tail call float @llvm.nvvm.rsqrt.approx.f(float %350), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %367, %369
  %.0.i = phi float [ %368, %367 ], [ %370, %369 ], !dbg !44
  %371 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i1 = icmp eq i32 %371, 0, !dbg !44
  br i1 %.not.i1, label %374, label %372, !dbg !44

372:                                              ; preds = %__nv_rsqrtf.exit
  %373 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %351), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

374:                                              ; preds = %__nv_rsqrtf.exit
  %375 = tail call float @llvm.nvvm.rsqrt.approx.f(float %351), !dbg !44
  br label %__nv_rsqrtf.exit3, !dbg !44

__nv_rsqrtf.exit3:                                ; preds = %372, %374
  %.0.i2 = phi float [ %373, %372 ], [ %375, %374 ], !dbg !44
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i4 = icmp eq i32 %376, 0, !dbg !44
  br i1 %.not.i4, label %379, label %377, !dbg !44

377:                                              ; preds = %__nv_rsqrtf.exit3
  %378 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %352), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

379:                                              ; preds = %__nv_rsqrtf.exit3
  %380 = tail call float @llvm.nvvm.rsqrt.approx.f(float %352), !dbg !44
  br label %__nv_rsqrtf.exit6, !dbg !44

__nv_rsqrtf.exit6:                                ; preds = %377, %379
  %.0.i5 = phi float [ %378, %377 ], [ %380, %379 ], !dbg !44
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i7 = icmp eq i32 %381, 0, !dbg !44
  br i1 %.not.i7, label %384, label %382, !dbg !44

382:                                              ; preds = %__nv_rsqrtf.exit6
  %383 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %353), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

384:                                              ; preds = %__nv_rsqrtf.exit6
  %385 = tail call float @llvm.nvvm.rsqrt.approx.f(float %353), !dbg !44
  br label %__nv_rsqrtf.exit9, !dbg !44

__nv_rsqrtf.exit9:                                ; preds = %382, %384
  %.0.i8 = phi float [ %383, %382 ], [ %385, %384 ], !dbg !44
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i10 = icmp eq i32 %386, 0, !dbg !44
  br i1 %.not.i10, label %389, label %387, !dbg !44

387:                                              ; preds = %__nv_rsqrtf.exit9
  %388 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %354), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

389:                                              ; preds = %__nv_rsqrtf.exit9
  %390 = tail call float @llvm.nvvm.rsqrt.approx.f(float %354), !dbg !44
  br label %__nv_rsqrtf.exit12, !dbg !44

__nv_rsqrtf.exit12:                               ; preds = %387, %389
  %.0.i11 = phi float [ %388, %387 ], [ %390, %389 ], !dbg !44
  %391 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i13 = icmp eq i32 %391, 0, !dbg !44
  br i1 %.not.i13, label %394, label %392, !dbg !44

392:                                              ; preds = %__nv_rsqrtf.exit12
  %393 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %355), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

394:                                              ; preds = %__nv_rsqrtf.exit12
  %395 = tail call float @llvm.nvvm.rsqrt.approx.f(float %355), !dbg !44
  br label %__nv_rsqrtf.exit15, !dbg !44

__nv_rsqrtf.exit15:                               ; preds = %392, %394
  %.0.i14 = phi float [ %393, %392 ], [ %395, %394 ], !dbg !44
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i16 = icmp eq i32 %396, 0, !dbg !44
  br i1 %.not.i16, label %399, label %397, !dbg !44

397:                                              ; preds = %__nv_rsqrtf.exit15
  %398 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %356), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

399:                                              ; preds = %__nv_rsqrtf.exit15
  %400 = tail call float @llvm.nvvm.rsqrt.approx.f(float %356), !dbg !44
  br label %__nv_rsqrtf.exit18, !dbg !44

__nv_rsqrtf.exit18:                               ; preds = %397, %399
  %.0.i17 = phi float [ %398, %397 ], [ %400, %399 ], !dbg !44
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i19 = icmp eq i32 %401, 0, !dbg !44
  br i1 %.not.i19, label %404, label %402, !dbg !44

402:                                              ; preds = %__nv_rsqrtf.exit18
  %403 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

404:                                              ; preds = %__nv_rsqrtf.exit18
  %405 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !44
  br label %__nv_rsqrtf.exit21, !dbg !44

__nv_rsqrtf.exit21:                               ; preds = %402, %404
  %.0.i20 = phi float [ %403, %402 ], [ %405, %404 ], !dbg !44
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i22 = icmp eq i32 %406, 0, !dbg !44
  br i1 %.not.i22, label %409, label %407, !dbg !44

407:                                              ; preds = %__nv_rsqrtf.exit21
  %408 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %358), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

409:                                              ; preds = %__nv_rsqrtf.exit21
  %410 = tail call float @llvm.nvvm.rsqrt.approx.f(float %358), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

__nv_rsqrtf.exit24:                               ; preds = %407, %409
  %.0.i23 = phi float [ %408, %407 ], [ %410, %409 ], !dbg !44
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i25 = icmp eq i32 %411, 0, !dbg !44
  br i1 %.not.i25, label %414, label %412, !dbg !44

412:                                              ; preds = %__nv_rsqrtf.exit24
  %413 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %359), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

414:                                              ; preds = %__nv_rsqrtf.exit24
  %415 = tail call float @llvm.nvvm.rsqrt.approx.f(float %359), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

__nv_rsqrtf.exit27:                               ; preds = %412, %414
  %.0.i26 = phi float [ %413, %412 ], [ %415, %414 ], !dbg !44
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i28 = icmp eq i32 %416, 0, !dbg !44
  br i1 %.not.i28, label %419, label %417, !dbg !44

417:                                              ; preds = %__nv_rsqrtf.exit27
  %418 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %360), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

419:                                              ; preds = %__nv_rsqrtf.exit27
  %420 = tail call float @llvm.nvvm.rsqrt.approx.f(float %360), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

__nv_rsqrtf.exit30:                               ; preds = %417, %419
  %.0.i29 = phi float [ %418, %417 ], [ %420, %419 ], !dbg !44
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i31 = icmp eq i32 %421, 0, !dbg !44
  br i1 %.not.i31, label %424, label %422, !dbg !44

422:                                              ; preds = %__nv_rsqrtf.exit30
  %423 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %361), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

424:                                              ; preds = %__nv_rsqrtf.exit30
  %425 = tail call float @llvm.nvvm.rsqrt.approx.f(float %361), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

__nv_rsqrtf.exit33:                               ; preds = %422, %424
  %.0.i32 = phi float [ %423, %422 ], [ %425, %424 ], !dbg !44
  %426 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i34 = icmp eq i32 %426, 0, !dbg !44
  br i1 %.not.i34, label %429, label %427, !dbg !44

427:                                              ; preds = %__nv_rsqrtf.exit33
  %428 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %362), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

429:                                              ; preds = %__nv_rsqrtf.exit33
  %430 = tail call float @llvm.nvvm.rsqrt.approx.f(float %362), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

__nv_rsqrtf.exit36:                               ; preds = %427, %429
  %.0.i35 = phi float [ %428, %427 ], [ %430, %429 ], !dbg !44
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i37 = icmp eq i32 %431, 0, !dbg !44
  br i1 %.not.i37, label %434, label %432, !dbg !44

432:                                              ; preds = %__nv_rsqrtf.exit36
  %433 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %363), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

434:                                              ; preds = %__nv_rsqrtf.exit36
  %435 = tail call float @llvm.nvvm.rsqrt.approx.f(float %363), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

__nv_rsqrtf.exit39:                               ; preds = %432, %434
  %.0.i38 = phi float [ %433, %432 ], [ %435, %434 ], !dbg !44
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i40 = icmp eq i32 %436, 0, !dbg !44
  br i1 %.not.i40, label %439, label %437, !dbg !44

437:                                              ; preds = %__nv_rsqrtf.exit39
  %438 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %364), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

439:                                              ; preds = %__nv_rsqrtf.exit39
  %440 = tail call float @llvm.nvvm.rsqrt.approx.f(float %364), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

__nv_rsqrtf.exit42:                               ; preds = %437, %439
  %.0.i41 = phi float [ %438, %437 ], [ %440, %439 ], !dbg !44
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i43 = icmp eq i32 %441, 0, !dbg !44
  br i1 %.not.i43, label %444, label %442, !dbg !44

442:                                              ; preds = %__nv_rsqrtf.exit42
  %443 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %365), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

444:                                              ; preds = %__nv_rsqrtf.exit42
  %445 = tail call float @llvm.nvvm.rsqrt.approx.f(float %365), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

__nv_rsqrtf.exit45:                               ; preds = %442, %444
  %.0.i44 = phi float [ %443, %442 ], [ %445, %444 ], !dbg !44
  %446 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !29
  %447 = bitcast i32 %446 to float, !dbg !29
  %448 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !31
  %449 = bitcast i32 %448 to float, !dbg !31
  %450 = fadd float %447, %449, !dbg !45
  %451 = fadd float %238, %450, !dbg !46
  %452 = bitcast i32 %293 to float, !dbg !35
  %453 = fsub float %451, %452, !dbg !47
  %454 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !29
  %455 = bitcast i32 %454 to float, !dbg !29
  %456 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !31
  %457 = bitcast i32 %456 to float, !dbg !31
  %458 = fadd float %455, %457, !dbg !45
  %459 = fadd float %233, %458, !dbg !46
  %460 = bitcast i32 %292 to float, !dbg !35
  %461 = fsub float %459, %460, !dbg !47
  %462 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !29
  %463 = bitcast i32 %462 to float, !dbg !29
  %464 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !31
  %465 = bitcast i32 %464 to float, !dbg !31
  %466 = fadd float %463, %465, !dbg !45
  %467 = fadd float %228, %466, !dbg !46
  %468 = bitcast i32 %291 to float, !dbg !35
  %469 = fsub float %467, %468, !dbg !47
  %470 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !29
  %471 = bitcast i32 %470 to float, !dbg !29
  %472 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !31
  %473 = bitcast i32 %472 to float, !dbg !31
  %474 = fadd float %471, %473, !dbg !45
  %475 = fadd float %223, %474, !dbg !46
  %476 = bitcast i32 %290 to float, !dbg !35
  %477 = fsub float %475, %476, !dbg !47
  %478 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !29
  %479 = bitcast i32 %478 to float, !dbg !29
  %480 = fadd float %479, %449, !dbg !45
  %481 = fadd float %218, %480, !dbg !46
  %482 = bitcast i32 %289 to float, !dbg !35
  %483 = fsub float %481, %482, !dbg !47
  %484 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !29
  %485 = bitcast i32 %484 to float, !dbg !29
  %486 = fadd float %485, %457, !dbg !45
  %487 = fadd float %213, %486, !dbg !46
  %488 = bitcast i32 %288 to float, !dbg !35
  %489 = fsub float %487, %488, !dbg !47
  %490 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !29
  %491 = bitcast i32 %490 to float, !dbg !29
  %492 = fadd float %491, %465, !dbg !45
  %493 = fadd float %208, %492, !dbg !46
  %494 = bitcast i32 %287 to float, !dbg !35
  %495 = fsub float %493, %494, !dbg !47
  %496 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !29
  %497 = bitcast i32 %496 to float, !dbg !29
  %498 = fadd float %497, %473, !dbg !45
  %499 = fadd float %203, %498, !dbg !46
  %500 = bitcast i32 %286 to float, !dbg !35
  %501 = fsub float %499, %500, !dbg !47
  %502 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !29
  %503 = bitcast i32 %502 to float, !dbg !29
  %504 = fadd float %503, %449, !dbg !45
  %505 = fadd float %198, %504, !dbg !46
  %506 = bitcast i32 %285 to float, !dbg !35
  %507 = fsub float %505, %506, !dbg !47
  %508 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !29
  %509 = bitcast i32 %508 to float, !dbg !29
  %510 = fadd float %509, %457, !dbg !45
  %511 = fadd float %193, %510, !dbg !46
  %512 = bitcast i32 %284 to float, !dbg !35
  %513 = fsub float %511, %512, !dbg !47
  %514 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !29
  %515 = bitcast i32 %514 to float, !dbg !29
  %516 = fadd float %515, %465, !dbg !45
  %517 = fadd float %188, %516, !dbg !46
  %518 = bitcast i32 %283 to float, !dbg !35
  %519 = fsub float %517, %518, !dbg !47
  %520 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !29
  %521 = bitcast i32 %520 to float, !dbg !29
  %522 = fadd float %521, %473, !dbg !45
  %523 = fadd float %183, %522, !dbg !46
  %524 = bitcast i32 %282 to float, !dbg !35
  %525 = fsub float %523, %524, !dbg !47
  %526 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !29
  %527 = bitcast i32 %526 to float, !dbg !29
  %528 = fadd float %527, %449, !dbg !45
  %529 = fadd float %178, %528, !dbg !46
  %530 = bitcast i32 %281 to float, !dbg !35
  %531 = fsub float %529, %530, !dbg !47
  %532 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !29
  %533 = bitcast i32 %532 to float, !dbg !29
  %534 = fadd float %533, %457, !dbg !45
  %535 = fadd float %175, %534, !dbg !46
  %536 = bitcast i32 %280 to float, !dbg !35
  %537 = fsub float %535, %536, !dbg !47
  %538 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !29
  %539 = bitcast i32 %538 to float, !dbg !29
  %540 = fadd float %539, %465, !dbg !45
  %541 = fadd float %172, %540, !dbg !46
  %542 = bitcast i32 %279 to float, !dbg !35
  %543 = fsub float %541, %542, !dbg !47
  %544 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !29
  %545 = bitcast i32 %544 to float, !dbg !29
  %546 = fadd float %545, %473, !dbg !45
  %547 = fadd float %169, %546, !dbg !46
  %548 = bitcast i32 %278 to float, !dbg !35
  %549 = fsub float %547, %548, !dbg !47
  %550 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !41
  %551 = bitcast i32 %550 to float, !dbg !41
  %552 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !41
  %553 = bitcast i32 %552 to float, !dbg !41
  %554 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !41
  %555 = bitcast i32 %554 to float, !dbg !41
  %556 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !41
  %557 = bitcast i32 %556 to float, !dbg !41
  %558 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !39
  %559 = bitcast i32 %558 to float, !dbg !39
  %560 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !39
  %561 = bitcast i32 %560 to float, !dbg !39
  %562 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !39
  %563 = bitcast i32 %562 to float, !dbg !39
  %564 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !39
  %565 = bitcast i32 %564 to float, !dbg !39
  %566 = fmul float %549, %.0.i, !dbg !48
  %567 = fmul float %543, %.0.i2, !dbg !48
  %568 = fmul float %537, %.0.i5, !dbg !48
  %569 = fmul float %531, %.0.i8, !dbg !48
  %570 = fmul float %525, %.0.i11, !dbg !48
  %571 = fmul float %519, %.0.i14, !dbg !48
  %572 = fmul float %513, %.0.i17, !dbg !48
  %573 = fmul float %507, %.0.i20, !dbg !48
  %574 = fmul float %501, %.0.i23, !dbg !48
  %575 = fmul float %495, %.0.i26, !dbg !48
  %576 = fmul float %489, %.0.i29, !dbg !48
  %577 = fmul float %483, %.0.i32, !dbg !48
  %578 = fmul float %477, %.0.i35, !dbg !48
  %579 = fmul float %469, %.0.i38, !dbg !48
  %580 = fmul float %461, %.0.i41, !dbg !48
  %581 = fmul float %453, %.0.i44, !dbg !48
  %582 = fmul float %566, %565, !dbg !49
  %583 = fmul float %567, %563, !dbg !49
  %584 = fmul float %568, %561, !dbg !49
  %585 = fmul float %569, %559, !dbg !49
  %586 = fmul float %570, %565, !dbg !49
  %587 = fmul float %571, %563, !dbg !49
  %588 = fmul float %572, %561, !dbg !49
  %589 = fmul float %573, %559, !dbg !49
  %590 = fmul float %574, %565, !dbg !49
  %591 = fmul float %575, %563, !dbg !49
  %592 = fmul float %576, %561, !dbg !49
  %593 = fmul float %577, %559, !dbg !49
  %594 = fmul float %578, %565, !dbg !49
  %595 = fmul float %579, %563, !dbg !49
  %596 = fmul float %580, %561, !dbg !49
  %597 = fmul float %581, %559, !dbg !49
  %598 = fadd float %582, %557, !dbg !50
  %599 = fadd float %583, %555, !dbg !50
  %600 = fadd float %584, %553, !dbg !50
  %601 = fadd float %585, %551, !dbg !50
  %602 = fadd float %586, %557, !dbg !50
  %603 = fadd float %587, %555, !dbg !50
  %604 = fadd float %588, %553, !dbg !50
  %605 = fadd float %589, %551, !dbg !50
  %606 = fadd float %590, %557, !dbg !50
  %607 = fadd float %591, %555, !dbg !50
  %608 = fadd float %592, %553, !dbg !50
  %609 = fadd float %593, %551, !dbg !50
  %610 = fadd float %594, %557, !dbg !50
  %611 = fadd float %595, %555, !dbg !50
  %612 = fadd float %596, %553, !dbg !50
  %613 = fadd float %597, %551, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %614 = bitcast float %566 to i32, !dbg !52
  %615 = bitcast float %567 to i32, !dbg !52
  %616 = bitcast float %568 to i32, !dbg !52
  %617 = bitcast float %569 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %614, i32 %615, i32 %616, i32 %617, ptr addrspace(1) %248, i1 %65) #4, !dbg !52
  %618 = bitcast float %570 to i32, !dbg !52
  %619 = bitcast float %571 to i32, !dbg !52
  %620 = bitcast float %572 to i32, !dbg !52
  %621 = bitcast float %573 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %618, i32 %619, i32 %620, i32 %621, ptr addrspace(1) %250, i1 %66) #4, !dbg !52
  %622 = bitcast float %574 to i32, !dbg !52
  %623 = bitcast float %575 to i32, !dbg !52
  %624 = bitcast float %576 to i32, !dbg !52
  %625 = bitcast float %577 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %622, i32 %623, i32 %624, i32 %625, ptr addrspace(1) %252, i1 %67) #4, !dbg !52
  %626 = bitcast float %578 to i32, !dbg !52
  %627 = bitcast float %579 to i32, !dbg !52
  %628 = bitcast float %580 to i32, !dbg !52
  %629 = bitcast float %581 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %626, i32 %627, i32 %628, i32 %629, ptr addrspace(1) %254, i1 %68) #4, !dbg !52
  %630 = getelementptr float, ptr addrspace(1) %7, i64 %247, !dbg !53
  %631 = getelementptr float, ptr addrspace(1) %7, i64 %249, !dbg !53
  %632 = getelementptr float, ptr addrspace(1) %7, i64 %251, !dbg !53
  %633 = getelementptr float, ptr addrspace(1) %7, i64 %253, !dbg !53
  %634 = bitcast float %598 to i32, !dbg !54
  %635 = bitcast float %599 to i32, !dbg !54
  %636 = bitcast float %600 to i32, !dbg !54
  %637 = bitcast float %601 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %634, i32 %635, i32 %636, i32 %637, ptr addrspace(1) %630, i1 %65) #4, !dbg !54
  %638 = bitcast float %602 to i32, !dbg !54
  %639 = bitcast float %603 to i32, !dbg !54
  %640 = bitcast float %604 to i32, !dbg !54
  %641 = bitcast float %605 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %638, i32 %639, i32 %640, i32 %641, ptr addrspace(1) %631, i1 %66) #4, !dbg !54
  %642 = bitcast float %606 to i32, !dbg !54
  %643 = bitcast float %607 to i32, !dbg !54
  %644 = bitcast float %608 to i32, !dbg !54
  %645 = bitcast float %609 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %642, i32 %643, i32 %644, i32 %645, ptr addrspace(1) %632, i1 %67) #4, !dbg !54
  %646 = bitcast float %610 to i32, !dbg !54
  %647 = bitcast float %611 to i32, !dbg !54
  %648 = bitcast float %612 to i32, !dbg !54
  %649 = bitcast float %613 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %646, i32 %647, i32 %648, i32 %649, ptr addrspace(1) %633, i1 %68) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuezwpyzmrfzsvk3mdk2ecowuynelffkh4aenby4vtokvwqdcunh.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_8", linkageName: "triton_poi_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 34, scope: !7)
!29 = !DILocation(line: 33, column: 48, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 31, scope: !7)
!39 = !DILocation(line: 37, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 36, scope: !7)
!42 = !DILocation(line: 43, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 28, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 48, column: 20, scope: !7)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 4, scope: !7)
!52 = !DILocation(line: 51, column: 49, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 46, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
