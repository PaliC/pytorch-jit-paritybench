; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 16, !dbg !14
  %12 = srem i32 %10, 16, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %13 = sdiv i32 %.frozen, 8192, !dbg !16
  %14 = mul i32 %13, 8192, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = shl nsw i32 %12, 1, !dbg !18
  %16 = icmp sgt i32 %12, 0, !dbg !19
  %17 = shl i32 %11, 6, !dbg !20
  %18 = add i32 %17, %15, !dbg !21
  %19 = add i32 %18, -33, !dbg !22
  %20 = sext i32 %19 to i64, !dbg !23
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !23
  %22 = icmp sgt i32 %12, -1, !dbg !24
  %23 = add i32 %18, -32, !dbg !25
  %24 = sext i32 %23 to i64, !dbg !26
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !26
  %26 = add i32 %18, -31, !dbg !27
  %27 = sext i32 %26 to i64, !dbg !28
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !28
  %29 = sext i32 %18 to i64, !dbg !29
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !29
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 -4, !dbg !29
  %32 = or disjoint i32 %18, 1, !dbg !30
  %33 = sext i32 %32 to i64, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !31
  %35 = add i32 %18, 31, !dbg !32
  %36 = sext i32 %35 to i64, !dbg !33
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !33
  %38 = add i32 %18, 32, !dbg !34
  %39 = sext i32 %38 to i64, !dbg !35
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !35
  %41 = add i32 %18, 33, !dbg !36
  %42 = sext i32 %41 to i64, !dbg !37
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !37
  %44 = mul nsw i32 %12, -2, !dbg !38
  %45 = add nsw i32 %15, 2, !dbg !39
  %46 = shl nsw i32 %12, 2, !dbg !40
  %47 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %48 = insertelement <2 x i32> %47, i32 %11, i64 1, !dbg !15
  %49 = srem <2 x i32> %48, splat (i32 16), !dbg !15
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !41
  %51 = shl nsw i32 %50, 1, !dbg !42
  %52 = icmp sgt i32 %50, 0, !dbg !43
  %53 = extractelement <2 x i32> %49, i64 0, !dbg !40
  %54 = shl nsw i32 %53, 1, !dbg !18
  %55 = icmp sgt i32 %53, 0, !dbg !19
  %56 = and i1 %55, %52, !dbg !44
  %57 = and i1 %16, %52, !dbg !44
  %58 = add i32 %17, %54, !dbg !21
  %59 = add i32 %58, -33, !dbg !22
  %60 = sext i32 %59 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %56, i32 0, i1 %56) #1, !dbg !45
  %63 = bitcast i32 %62 to float, !dbg !45
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %57, i32 0, i1 %57) #1, !dbg !45
  %65 = bitcast i32 %64 to float, !dbg !45
  %66 = icmp sgt i32 %53, -1, !dbg !24
  %67 = and i1 %66, %52, !dbg !46
  %68 = and i1 %22, %52, !dbg !46
  %69 = add i32 %58, -32, !dbg !25
  %70 = sext i32 %69 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %67, i32 0, i1 %67) #1, !dbg !47
  %73 = bitcast i32 %72 to float, !dbg !47
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %68, i32 0, i1 %68) #1, !dbg !47
  %75 = bitcast i32 %74 to float, !dbg !47
  %76 = fadd float %63, %73, !dbg !48
  %77 = fadd float %65, %75, !dbg !48
  %78 = add i32 %58, -31, !dbg !27
  %79 = sext i32 %78 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %67, i32 0, i1 %67) #1, !dbg !49
  %82 = bitcast i32 %81 to float, !dbg !49
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %84 = bitcast i32 %83 to float, !dbg !49
  %85 = fadd float %76, %82, !dbg !50
  %86 = fadd float %77, %84, !dbg !50
  %87 = icmp sgt i32 %50, -1, !dbg !51
  %88 = and i1 %55, %87, !dbg !52
  %89 = and i1 %16, %87, !dbg !52
  %90 = add i32 %58, -1, !dbg !53
  %91 = sext i32 %90 to i64, !dbg !29
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %88, i32 0, i1 %88) #1, !dbg !54
  %94 = bitcast i32 %93 to float, !dbg !54
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %89, i32 0, i1 %89) #1, !dbg !54
  %96 = bitcast i32 %95 to float, !dbg !54
  %97 = fadd float %85, %94, !dbg !55
  %98 = fadd float %86, %96, !dbg !55
  %99 = or i32 %50, %53, !dbg !41
  %100 = icmp sgt i32 %99, -1, !dbg !41
  %101 = or i32 %50, %12, !dbg !41
  %102 = icmp sgt i32 %101, -1, !dbg !41
  %103 = sext i32 %58 to i64, !dbg !56
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !56
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %100, i32 0, i1 %100) #1, !dbg !57
  %106 = bitcast i32 %105 to float, !dbg !57
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %102, i32 0, i1 %102) #1, !dbg !57
  %108 = bitcast i32 %107 to float, !dbg !57
  %109 = fadd float %97, %106, !dbg !58
  %110 = fadd float %98, %108, !dbg !58
  %111 = or disjoint i32 %58, 1, !dbg !30
  %112 = sext i32 %111 to i64, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !31
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %100, i32 0, i1 %100) #1, !dbg !59
  %115 = bitcast i32 %114 to float, !dbg !59
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %102, i32 0, i1 %102) #1, !dbg !59
  %117 = bitcast i32 %116 to float, !dbg !59
  %118 = fadd float %109, %115, !dbg !60
  %119 = fadd float %110, %117, !dbg !60
  %120 = add i32 %58, 31, !dbg !32
  %121 = sext i32 %120 to i64, !dbg !33
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !33
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %88, i32 0, i1 %88) #1, !dbg !61
  %124 = bitcast i32 %123 to float, !dbg !61
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %89, i32 0, i1 %89) #1, !dbg !61
  %126 = bitcast i32 %125 to float, !dbg !61
  %127 = fadd float %118, %124, !dbg !62
  %128 = fadd float %119, %126, !dbg !62
  %129 = add i32 %58, 32, !dbg !34
  %130 = sext i32 %129 to i64, !dbg !35
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %100, i32 0, i1 %100) #1, !dbg !63
  %133 = bitcast i32 %132 to float, !dbg !63
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %102, i32 0, i1 %102) #1, !dbg !63
  %135 = bitcast i32 %134 to float, !dbg !63
  %136 = fadd float %127, %133, !dbg !64
  %137 = fadd float %128, %135, !dbg !64
  %138 = add i32 %58, 33, !dbg !36
  %139 = sext i32 %138 to i64, !dbg !37
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !37
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %100, i32 0, i1 %100) #1, !dbg !65
  %142 = bitcast i32 %141 to float, !dbg !65
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %102, i32 0, i1 %102) #1, !dbg !65
  %144 = bitcast i32 %143 to float, !dbg !65
  %145 = fadd float %136, %142, !dbg !66
  %146 = fadd float %137, %144, !dbg !66
  %147 = mul nsw i32 %50, -2, !dbg !67
  %148 = or disjoint i32 %54, 2, !dbg !39
  %149 = add nsw i32 %51, 2, !dbg !68
  %150 = mul nsw i32 %147, %148, !dbg !69
  %151 = mul nsw i32 %147, %45, !dbg !69
  %152 = shl nsw i32 %53, 2, !dbg !40
  %153 = insertelement <2 x i32> <i32 -2, i32 poison>, i32 %152, i64 1, !dbg !38
  %154 = mul nsw <2 x i32> %153, %49, !dbg !38
  %155 = mul nsw i32 %46, %50, !dbg !70
  %156 = extractelement <2 x i32> %154, i64 0, !dbg !71
  %reass.add = add nsw i32 %148, %156
  %reass.mul = mul nsw i32 %reass.add, %149
  %157 = add nsw i32 %149, %147, !dbg !72
  %158 = or disjoint i32 %157, 1, !dbg !73
  %159 = add nsw i32 %158, %156, !dbg !71
  %160 = extractelement <2 x i32> %154, i64 1, !dbg !74
  %161 = add nsw i32 %159, %160, !dbg !74
  %162 = add i32 %161, %148, !dbg !75
  %163 = add i32 %162, %150, !dbg !76
  %164 = add i32 %163, %reass.mul, !dbg !77
  %reass.add1 = add nsw i32 %45, %44
  %reass.mul2 = mul nsw i32 %149, %reass.add1
  %165 = add nsw i32 %158, %44, !dbg !71
  %166 = add nsw i32 %165, %45, !dbg !74
  %167 = add i32 %166, %155, !dbg !75
  %168 = add i32 %167, %151, !dbg !76
  %169 = add i32 %168, %reass.mul2, !dbg !77
  %170 = sitofp i32 %164 to float, !dbg !78
  %171 = sitofp i32 %169 to float, !dbg !78
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %170) #1, !dbg !78
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %171) #1, !dbg !78
  %174 = shl i32 %13, 14, !dbg !79
  %175 = add i32 %174, %.decomposed, !dbg !80
  %176 = sext i32 %175 to i64, !dbg !81
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !81
  %178 = bitcast float %172 to i32, !dbg !82
  %179 = bitcast float %173 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 true) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckly6nizbn22o7hp4npe76ldjsmfji7crk56wanhlpgnp6mualhm.py", directory: "inductor_cache/kl")
!4 = !{ptr @triton_poi_fused_avg_pool2d_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_1", linkageName: "triton_poi_fused_avg_pool2d_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 20, scope: !7)
!19 = !DILocation(line: 36, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 49, scope: !7)
!21 = !DILocation(line: 40, column: 39, scope: !7)
!22 = !DILocation(line: 40, column: 46, scope: !7)
!23 = !DILocation(line: 40, column: 31, scope: !7)
!24 = !DILocation(line: 42, column: 21, scope: !7)
!25 = !DILocation(line: 46, column: 46, scope: !7)
!26 = !DILocation(line: 46, column: 31, scope: !7)
!27 = !DILocation(line: 53, column: 46, scope: !7)
!28 = !DILocation(line: 53, column: 31, scope: !7)
!29 = !DILocation(line: 60, column: 31, scope: !7)
!30 = !DILocation(line: 66, column: 42, scope: !7)
!31 = !DILocation(line: 66, column: 31, scope: !7)
!32 = !DILocation(line: 73, column: 43, scope: !7)
!33 = !DILocation(line: 73, column: 31, scope: !7)
!34 = !DILocation(line: 76, column: 43, scope: !7)
!35 = !DILocation(line: 76, column: 31, scope: !7)
!36 = !DILocation(line: 79, column: 43, scope: !7)
!37 = !DILocation(line: 79, column: 31, scope: !7)
!38 = !DILocation(line: 81, column: 22, scope: !7)
!39 = !DILocation(line: 81, column: 62, scope: !7)
!40 = !DILocation(line: 81, column: 328, scope: !7)
!41 = !DILocation(line: 62, column: 20, scope: !7)
!42 = !DILocation(line: 29, column: 20, scope: !7)
!43 = !DILocation(line: 31, column: 19, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 54, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 54, scope: !7)
!48 = !DILocation(line: 47, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 54, scope: !7)
!50 = !DILocation(line: 54, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 21, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 45, scope: !7)
!54 = !DILocation(line: 60, column: 53, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 31, scope: !7)
!57 = !DILocation(line: 63, column: 46, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 50, scope: !7)
!60 = !DILocation(line: 67, column: 20, scope: !7)
!61 = !DILocation(line: 73, column: 51, scope: !7)
!62 = !DILocation(line: 74, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 51, scope: !7)
!64 = !DILocation(line: 77, column: 20, scope: !7)
!65 = !DILocation(line: 79, column: 51, scope: !7)
!66 = !DILocation(line: 80, column: 20, scope: !7)
!67 = !DILocation(line: 81, column: 34, scope: !7)
!68 = !DILocation(line: 81, column: 127, scope: !7)
!69 = !DILocation(line: 81, column: 259, scope: !7)
!70 = !DILocation(line: 81, column: 331, scope: !7)
!71 = !DILocation(line: 81, column: 173, scope: !7)
!72 = !DILocation(line: 81, column: 29, scope: !7)
!73 = !DILocation(line: 81, column: 40, scope: !7)
!74 = !DILocation(line: 81, column: 250, scope: !7)
!75 = !DILocation(line: 81, column: 326, scope: !7)
!76 = !DILocation(line: 81, column: 337, scope: !7)
!77 = !DILocation(line: 81, column: 404, scope: !7)
!78 = !DILocation(line: 82, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 36, scope: !7)
!80 = !DILocation(line: 83, column: 30, scope: !7)
!81 = !DILocation(line: 83, column: 25, scope: !7)
!82 = !DILocation(line: 83, column: 48, scope: !7)
!83 = !DILocation(line: 83, column: 4, scope: !7)
