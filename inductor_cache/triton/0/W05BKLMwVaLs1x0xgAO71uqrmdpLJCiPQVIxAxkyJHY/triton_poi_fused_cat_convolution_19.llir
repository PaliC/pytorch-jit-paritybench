; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = or disjoint i32 %15, 64, !dbg !12
  %20 = or disjoint i32 %15, 80, !dbg !12
  %21 = or disjoint i32 %15, 96, !dbg !12
  %22 = or disjoint i32 %15, 112, !dbg !12
  %23 = or disjoint i32 %15, 128, !dbg !12
  %24 = or disjoint i32 %15, 144, !dbg !12
  %25 = or disjoint i32 %15, 160, !dbg !12
  %26 = or disjoint i32 %15, 176, !dbg !12
  %27 = or disjoint i32 %15, 192, !dbg !12
  %28 = or disjoint i32 %15, 208, !dbg !12
  %29 = or disjoint i32 %15, 224, !dbg !12
  %30 = or disjoint i32 %15, 240, !dbg !12
  %31 = or disjoint i32 %10, %13, !dbg !13
  %32 = or disjoint i32 %10, %15, !dbg !13
  %33 = or disjoint i32 %10, %16, !dbg !13
  %34 = or disjoint i32 %10, %17, !dbg !13
  %35 = or disjoint i32 %10, %18, !dbg !13
  %36 = or disjoint i32 %10, %19, !dbg !13
  %37 = or disjoint i32 %10, %20, !dbg !13
  %38 = or disjoint i32 %10, %21, !dbg !13
  %39 = or disjoint i32 %10, %22, !dbg !13
  %40 = or disjoint i32 %10, %23, !dbg !13
  %41 = or disjoint i32 %10, %24, !dbg !13
  %42 = or disjoint i32 %10, %25, !dbg !13
  %43 = or disjoint i32 %10, %26, !dbg !13
  %44 = or disjoint i32 %10, %27, !dbg !13
  %45 = or disjoint i32 %10, %28, !dbg !13
  %46 = or disjoint i32 %10, %29, !dbg !13
  %47 = or disjoint i32 %10, %30, !dbg !13
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %49 = shl i32 %48, 4, !dbg !15
  %50 = lshr i32 %11, 6, !dbg !16
  %51 = and i32 %50, 3, !dbg !16
  %52 = and i32 %11, 15, !dbg !16
  %53 = or disjoint i32 %49, %51, !dbg !17
  %54 = or disjoint i32 %53, 4, !dbg !17
  %55 = or disjoint i32 %53, 8, !dbg !17
  %56 = or disjoint i32 %53, 12, !dbg !17
  %57 = or disjoint i32 %49, %52, !dbg !17
  %58 = icmp slt i32 %53, 9, !dbg !18
  %59 = icmp slt i32 %54, 9, !dbg !18
  %60 = icmp slt i32 %55, 9, !dbg !18
  %61 = icmp slt i32 %49, 0, !dbg !18
  %62 = icmp slt i32 %57, 9, !dbg !18
  %.frozen = freeze i32 %31, !dbg !19
  %63 = sdiv i32 %.frozen, 512, !dbg !19
  %64 = mul i32 %63, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %64, !dbg !20
  %65 = icmp slt i32 %.decomposed, 256, !dbg !21
  %66 = shl i32 %53, 8, !dbg !22
  %67 = shl i32 %54, 8, !dbg !22
  %68 = shl i32 %55, 8, !dbg !22
  %69 = shl i32 %56, 8, !dbg !22
  %70 = mul i32 %63, 2304, !dbg !23
  %71 = add i32 %66, %70, !dbg !24
  %72 = add i32 %70, %67, !dbg !24
  %73 = add i32 %70, %68, !dbg !24
  %74 = add i32 %70, %69, !dbg !24
  %75 = add i32 %71, %.decomposed, !dbg !25
  %76 = add i32 %72, %.decomposed, !dbg !25
  %77 = add i32 %73, %.decomposed, !dbg !25
  %78 = add i32 %74, %.decomposed, !dbg !25
  %79 = sext i32 %75 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %76 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = sext i32 %77 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !26
  %85 = sext i32 %78 to i64, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !26
  %87 = and i1 %65, %58, !dbg !27
  %88 = and i1 %59, %65, !dbg !27
  %89 = and i1 %60, %65, !dbg !27
  %90 = and i1 %61, %65, !dbg !27
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #2, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !28
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #2, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !28
  %111 = sext i32 %.decomposed to i64, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !29
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #2, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !30
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #2, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !30
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #2, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !30
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #2, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !30
  %133 = icmp sgt i32 %.decomposed, 255, !dbg !31
  %134 = add nsw i32 %.decomposed, -256, !dbg !32
  %135 = add i32 %71, %134, !dbg !33
  %136 = add i32 %72, %134, !dbg !33
  %137 = add i32 %73, %134, !dbg !33
  %138 = add i32 %74, %134, !dbg !33
  %139 = sext i32 %135 to i64, !dbg !34
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !34
  %141 = sext i32 %136 to i64, !dbg !34
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !34
  %143 = sext i32 %137 to i64, !dbg !34
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %143, !dbg !34
  %145 = sext i32 %138 to i64, !dbg !34
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !34
  %147 = and i1 %133, %58, !dbg !35
  %148 = and i1 %59, %133, !dbg !35
  %149 = and i1 %60, %133, !dbg !35
  %150 = and i1 %61, %133, !dbg !35
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #2, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !36
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !36
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !36
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #2, !dbg !36
  %157 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !36
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #2, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !36
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150) #2, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !36
  %171 = sext i32 %134 to i64, !dbg !37
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !37
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #2, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !38
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !38
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148, i32 0, i1 %148) #2, !dbg !38
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !38
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !38
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !38
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #2, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !38
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !38
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150) #2, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !38
  %193 = insertelement <32 x i32> poison, i32 %170, i64 0, !dbg !36
  %194 = insertelement <32 x i32> %193, i32 %169, i64 1, !dbg !36
  %195 = insertelement <32 x i32> %194, i32 %168, i64 2, !dbg !36
  %196 = insertelement <32 x i32> %195, i32 %167, i64 3, !dbg !36
  %197 = insertelement <32 x i32> %196, i32 %165, i64 4, !dbg !36
  %198 = insertelement <32 x i32> %197, i32 %164, i64 5, !dbg !36
  %199 = insertelement <32 x i32> %198, i32 %163, i64 6, !dbg !36
  %200 = insertelement <32 x i32> %199, i32 %162, i64 7, !dbg !36
  %201 = insertelement <32 x i32> %200, i32 %160, i64 8, !dbg !36
  %202 = insertelement <32 x i32> %201, i32 %159, i64 9, !dbg !36
  %203 = insertelement <32 x i32> %202, i32 %158, i64 10, !dbg !36
  %204 = insertelement <32 x i32> %203, i32 %157, i64 11, !dbg !36
  %205 = insertelement <32 x i32> %204, i32 %155, i64 12, !dbg !36
  %206 = insertelement <32 x i32> %205, i32 %154, i64 13, !dbg !36
  %207 = insertelement <32 x i32> %206, i32 %153, i64 14, !dbg !36
  %208 = insertelement <32 x i32> %207, i32 %152, i64 15, !dbg !36
  %209 = insertelement <32 x i32> %208, i32 %110, i64 16, !dbg !36
  %210 = insertelement <32 x i32> %209, i32 %109, i64 17, !dbg !36
  %211 = insertelement <32 x i32> %210, i32 %108, i64 18, !dbg !36
  %212 = insertelement <32 x i32> %211, i32 %107, i64 19, !dbg !36
  %213 = insertelement <32 x i32> %212, i32 %105, i64 20, !dbg !36
  %214 = insertelement <32 x i32> %213, i32 %104, i64 21, !dbg !36
  %215 = insertelement <32 x i32> %214, i32 %103, i64 22, !dbg !36
  %216 = insertelement <32 x i32> %215, i32 %102, i64 23, !dbg !36
  %217 = insertelement <32 x i32> %216, i32 %100, i64 24, !dbg !36
  %218 = insertelement <32 x i32> %217, i32 %99, i64 25, !dbg !36
  %219 = insertelement <32 x i32> %218, i32 %98, i64 26, !dbg !36
  %220 = insertelement <32 x i32> %219, i32 %97, i64 27, !dbg !36
  %221 = insertelement <32 x i32> %220, i32 %95, i64 28, !dbg !36
  %222 = insertelement <32 x i32> %221, i32 %94, i64 29, !dbg !36
  %223 = insertelement <32 x i32> %222, i32 %93, i64 30, !dbg !36
  %224 = insertelement <32 x i32> %223, i32 %92, i64 31, !dbg !36
  %225 = bitcast <32 x i32> %224 to <32 x float>, !dbg !36
  %226 = insertelement <32 x i32> poison, i32 %192, i64 0, !dbg !38
  %227 = insertelement <32 x i32> %226, i32 %191, i64 1, !dbg !38
  %228 = insertelement <32 x i32> %227, i32 %190, i64 2, !dbg !38
  %229 = insertelement <32 x i32> %228, i32 %189, i64 3, !dbg !38
  %230 = insertelement <32 x i32> %229, i32 %187, i64 4, !dbg !38
  %231 = insertelement <32 x i32> %230, i32 %186, i64 5, !dbg !38
  %232 = insertelement <32 x i32> %231, i32 %185, i64 6, !dbg !38
  %233 = insertelement <32 x i32> %232, i32 %184, i64 7, !dbg !38
  %234 = insertelement <32 x i32> %233, i32 %182, i64 8, !dbg !38
  %235 = insertelement <32 x i32> %234, i32 %181, i64 9, !dbg !38
  %236 = insertelement <32 x i32> %235, i32 %180, i64 10, !dbg !38
  %237 = insertelement <32 x i32> %236, i32 %179, i64 11, !dbg !38
  %238 = insertelement <32 x i32> %237, i32 %177, i64 12, !dbg !38
  %239 = insertelement <32 x i32> %238, i32 %176, i64 13, !dbg !38
  %240 = insertelement <32 x i32> %239, i32 %175, i64 14, !dbg !38
  %241 = insertelement <32 x i32> %240, i32 %174, i64 15, !dbg !38
  %242 = insertelement <32 x i32> %241, i32 %132, i64 16, !dbg !38
  %243 = insertelement <32 x i32> %242, i32 %131, i64 17, !dbg !38
  %244 = insertelement <32 x i32> %243, i32 %130, i64 18, !dbg !38
  %245 = insertelement <32 x i32> %244, i32 %129, i64 19, !dbg !38
  %246 = insertelement <32 x i32> %245, i32 %127, i64 20, !dbg !38
  %247 = insertelement <32 x i32> %246, i32 %126, i64 21, !dbg !38
  %248 = insertelement <32 x i32> %247, i32 %125, i64 22, !dbg !38
  %249 = insertelement <32 x i32> %248, i32 %124, i64 23, !dbg !38
  %250 = insertelement <32 x i32> %249, i32 %122, i64 24, !dbg !38
  %251 = insertelement <32 x i32> %250, i32 %121, i64 25, !dbg !38
  %252 = insertelement <32 x i32> %251, i32 %120, i64 26, !dbg !38
  %253 = insertelement <32 x i32> %252, i32 %119, i64 27, !dbg !38
  %254 = insertelement <32 x i32> %253, i32 %117, i64 28, !dbg !38
  %255 = insertelement <32 x i32> %254, i32 %116, i64 29, !dbg !38
  %256 = insertelement <32 x i32> %255, i32 %115, i64 30, !dbg !38
  %257 = insertelement <32 x i32> %256, i32 %114, i64 31, !dbg !38
  %258 = bitcast <32 x i32> %257 to <32 x float>, !dbg !38
  %259 = fadd <32 x float> %225, %258, !dbg !39
  %260 = fcmp olt <32 x float> %259, zeroinitializer, !dbg !40
  %261 = extractelement <32 x i1> %260, i64 31, !dbg !44
  %262 = extractelement <32 x float> %259, i64 31, !dbg !44
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !44
  %264 = extractelement <32 x i1> %260, i64 30, !dbg !44
  %265 = extractelement <32 x float> %259, i64 30, !dbg !44
  %266 = select i1 %264, float 0.000000e+00, float %265, !dbg !44
  %267 = extractelement <32 x i1> %260, i64 29, !dbg !44
  %268 = extractelement <32 x float> %259, i64 29, !dbg !44
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !44
  %270 = extractelement <32 x i1> %260, i64 28, !dbg !44
  %271 = extractelement <32 x float> %259, i64 28, !dbg !44
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !44
  %273 = extractelement <32 x i1> %260, i64 27, !dbg !44
  %274 = extractelement <32 x float> %259, i64 27, !dbg !44
  %275 = select i1 %273, float 0.000000e+00, float %274, !dbg !44
  %276 = extractelement <32 x i1> %260, i64 26, !dbg !44
  %277 = extractelement <32 x float> %259, i64 26, !dbg !44
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !44
  %279 = extractelement <32 x i1> %260, i64 25, !dbg !44
  %280 = extractelement <32 x float> %259, i64 25, !dbg !44
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !44
  %282 = extractelement <32 x i1> %260, i64 24, !dbg !44
  %283 = extractelement <32 x float> %259, i64 24, !dbg !44
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !44
  %285 = extractelement <32 x i1> %260, i64 23, !dbg !44
  %286 = extractelement <32 x float> %259, i64 23, !dbg !44
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !44
  %288 = extractelement <32 x i1> %260, i64 22, !dbg !44
  %289 = extractelement <32 x float> %259, i64 22, !dbg !44
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !44
  %291 = extractelement <32 x i1> %260, i64 21, !dbg !44
  %292 = extractelement <32 x float> %259, i64 21, !dbg !44
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !44
  %294 = extractelement <32 x i1> %260, i64 20, !dbg !44
  %295 = extractelement <32 x float> %259, i64 20, !dbg !44
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !44
  %297 = extractelement <32 x i1> %260, i64 19, !dbg !44
  %298 = extractelement <32 x float> %259, i64 19, !dbg !44
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !44
  %300 = extractelement <32 x i1> %260, i64 18, !dbg !44
  %301 = extractelement <32 x float> %259, i64 18, !dbg !44
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !44
  %303 = extractelement <32 x i1> %260, i64 17, !dbg !44
  %304 = extractelement <32 x float> %259, i64 17, !dbg !44
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !44
  %306 = extractelement <32 x i1> %260, i64 16, !dbg !44
  %307 = extractelement <32 x float> %259, i64 16, !dbg !44
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !44
  %309 = extractelement <32 x i1> %260, i64 15, !dbg !46
  %310 = extractelement <32 x float> %259, i64 15, !dbg !46
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !46
  %312 = extractelement <32 x i1> %260, i64 14, !dbg !46
  %313 = extractelement <32 x float> %259, i64 14, !dbg !46
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !46
  %315 = extractelement <32 x i1> %260, i64 13, !dbg !46
  %316 = extractelement <32 x float> %259, i64 13, !dbg !46
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !46
  %318 = extractelement <32 x i1> %260, i64 12, !dbg !46
  %319 = extractelement <32 x float> %259, i64 12, !dbg !46
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !46
  %321 = extractelement <32 x i1> %260, i64 11, !dbg !46
  %322 = extractelement <32 x float> %259, i64 11, !dbg !46
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !46
  %324 = extractelement <32 x i1> %260, i64 10, !dbg !46
  %325 = extractelement <32 x float> %259, i64 10, !dbg !46
  %326 = select i1 %324, float 0.000000e+00, float %325, !dbg !46
  %327 = extractelement <32 x i1> %260, i64 9, !dbg !46
  %328 = extractelement <32 x float> %259, i64 9, !dbg !46
  %329 = select i1 %327, float 0.000000e+00, float %328, !dbg !46
  %330 = extractelement <32 x i1> %260, i64 8, !dbg !46
  %331 = extractelement <32 x float> %259, i64 8, !dbg !46
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !46
  %333 = extractelement <32 x i1> %260, i64 7, !dbg !46
  %334 = extractelement <32 x float> %259, i64 7, !dbg !46
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !46
  %336 = extractelement <32 x i1> %260, i64 6, !dbg !46
  %337 = extractelement <32 x float> %259, i64 6, !dbg !46
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !46
  %339 = extractelement <32 x i1> %260, i64 5, !dbg !46
  %340 = extractelement <32 x float> %259, i64 5, !dbg !46
  %341 = select i1 %339, float 0.000000e+00, float %340, !dbg !46
  %342 = extractelement <32 x i1> %260, i64 4, !dbg !46
  %343 = extractelement <32 x float> %259, i64 4, !dbg !46
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !46
  %345 = extractelement <32 x i1> %260, i64 3, !dbg !46
  %346 = extractelement <32 x float> %259, i64 3, !dbg !46
  %347 = select i1 %345, float 0.000000e+00, float %346, !dbg !46
  %348 = extractelement <32 x i1> %260, i64 2, !dbg !46
  %349 = extractelement <32 x float> %259, i64 2, !dbg !46
  %350 = select i1 %348, float 0.000000e+00, float %349, !dbg !46
  %351 = extractelement <32 x i1> %260, i64 1, !dbg !46
  %352 = extractelement <32 x float> %259, i64 1, !dbg !46
  %353 = select i1 %351, float 0.000000e+00, float %352, !dbg !46
  %354 = extractelement <32 x i1> %260, i64 0, !dbg !46
  %355 = extractelement <32 x float> %259, i64 0, !dbg !46
  %356 = select i1 %354, float 0.000000e+00, float %355, !dbg !46
  %357 = select i1 %65, float %263, float %311, !dbg !47
  %358 = select i1 %65, float %266, float %314, !dbg !47
  %359 = select i1 %65, float %269, float %317, !dbg !47
  %360 = select i1 %65, float %272, float %320, !dbg !47
  %361 = select i1 %65, float %275, float %323, !dbg !47
  %362 = select i1 %65, float %278, float %326, !dbg !47
  %363 = select i1 %65, float %281, float %329, !dbg !47
  %364 = select i1 %65, float %284, float %332, !dbg !47
  %365 = select i1 %65, float %287, float %335, !dbg !47
  %366 = select i1 %65, float %290, float %338, !dbg !47
  %367 = select i1 %65, float %293, float %341, !dbg !47
  %368 = select i1 %65, float %296, float %344, !dbg !47
  %369 = select i1 %65, float %299, float %347, !dbg !47
  %370 = select i1 %65, float %302, float %350, !dbg !47
  %371 = select i1 %65, float %305, float %353, !dbg !47
  %372 = select i1 %65, float %308, float %356, !dbg !47
  %373 = mul i32 %32, 9, !dbg !48
  %374 = mul i32 %33, 9, !dbg !48
  %375 = mul i32 %34, 9, !dbg !48
  %376 = mul i32 %35, 9, !dbg !48
  %377 = mul i32 %36, 9, !dbg !48
  %378 = mul i32 %37, 9, !dbg !48
  %379 = mul i32 %38, 9, !dbg !48
  %380 = mul i32 %39, 9, !dbg !48
  %381 = mul i32 %40, 9, !dbg !48
  %382 = mul i32 %41, 9, !dbg !48
  %383 = mul i32 %42, 9, !dbg !48
  %384 = mul i32 %43, 9, !dbg !48
  %385 = mul i32 %44, 9, !dbg !48
  %386 = mul i32 %45, 9, !dbg !48
  %387 = mul i32 %46, 9, !dbg !48
  %388 = mul i32 %47, 9, !dbg !48
  %389 = add i32 %57, %373, !dbg !49
  %390 = add i32 %57, %374, !dbg !49
  %391 = add i32 %57, %375, !dbg !49
  %392 = add i32 %57, %376, !dbg !49
  %393 = add i32 %57, %377, !dbg !49
  %394 = add i32 %57, %378, !dbg !49
  %395 = add i32 %57, %379, !dbg !49
  %396 = add i32 %57, %380, !dbg !49
  %397 = add i32 %57, %381, !dbg !49
  %398 = add i32 %57, %382, !dbg !49
  %399 = add i32 %57, %383, !dbg !49
  %400 = add i32 %57, %384, !dbg !49
  %401 = add i32 %57, %385, !dbg !49
  %402 = add i32 %57, %386, !dbg !49
  %403 = add i32 %57, %387, !dbg !49
  %404 = add i32 %57, %388, !dbg !49
  %405 = sext i32 %389 to i64, !dbg !50
  %406 = getelementptr float, ptr addrspace(1) %4, i64 %405, !dbg !50
  %407 = sext i32 %390 to i64, !dbg !50
  %408 = getelementptr float, ptr addrspace(1) %4, i64 %407, !dbg !50
  %409 = sext i32 %391 to i64, !dbg !50
  %410 = getelementptr float, ptr addrspace(1) %4, i64 %409, !dbg !50
  %411 = sext i32 %392 to i64, !dbg !50
  %412 = getelementptr float, ptr addrspace(1) %4, i64 %411, !dbg !50
  %413 = sext i32 %393 to i64, !dbg !50
  %414 = getelementptr float, ptr addrspace(1) %4, i64 %413, !dbg !50
  %415 = sext i32 %394 to i64, !dbg !50
  %416 = getelementptr float, ptr addrspace(1) %4, i64 %415, !dbg !50
  %417 = sext i32 %395 to i64, !dbg !50
  %418 = getelementptr float, ptr addrspace(1) %4, i64 %417, !dbg !50
  %419 = sext i32 %396 to i64, !dbg !50
  %420 = getelementptr float, ptr addrspace(1) %4, i64 %419, !dbg !50
  %421 = sext i32 %397 to i64, !dbg !50
  %422 = getelementptr float, ptr addrspace(1) %4, i64 %421, !dbg !50
  %423 = sext i32 %398 to i64, !dbg !50
  %424 = getelementptr float, ptr addrspace(1) %4, i64 %423, !dbg !50
  %425 = sext i32 %399 to i64, !dbg !50
  %426 = getelementptr float, ptr addrspace(1) %4, i64 %425, !dbg !50
  %427 = sext i32 %400 to i64, !dbg !50
  %428 = getelementptr float, ptr addrspace(1) %4, i64 %427, !dbg !50
  %429 = sext i32 %401 to i64, !dbg !50
  %430 = getelementptr float, ptr addrspace(1) %4, i64 %429, !dbg !50
  %431 = sext i32 %402 to i64, !dbg !50
  %432 = getelementptr float, ptr addrspace(1) %4, i64 %431, !dbg !50
  %433 = sext i32 %403 to i64, !dbg !50
  %434 = getelementptr float, ptr addrspace(1) %4, i64 %433, !dbg !50
  %435 = sext i32 %404 to i64, !dbg !50
  %436 = getelementptr float, ptr addrspace(1) %4, i64 %435, !dbg !50
  %437 = shl i32 %11, 6, !dbg !51
  %438 = and i32 %437, 4032, !dbg !51
  %439 = or disjoint i32 %438, %51, !dbg !51
  %440 = and i32 %11, 255, !dbg !51
  %441 = lshr exact i32 %438, 2, !dbg !51
  %442 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %441, !dbg !51
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !51
  %444 = bitcast float %357 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #2, !dbg !51
  %445 = or disjoint i32 %439, 16, !dbg !51
  %446 = lshr i32 %445, 4, !dbg !51
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !51
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %445, !dbg !51
  %449 = bitcast float %358 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #2, !dbg !51
  %450 = or disjoint i32 %439, 32, !dbg !51
  %451 = lshr i32 %450, 4, !dbg !51
  %452 = getelementptr float, ptr addrspace(3) @global_smem, i32 %451, !dbg !51
  %453 = getelementptr float, ptr addrspace(3) %452, i32 %450, !dbg !51
  %454 = bitcast float %359 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #2, !dbg !51
  %455 = or disjoint i32 %439, 48, !dbg !51
  %456 = lshr i32 %455, 4, !dbg !51
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !51
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %455, !dbg !51
  %459 = bitcast float %360 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 true) #2, !dbg !51
  %460 = or disjoint i32 %439, 4, !dbg !51
  %461 = getelementptr float, ptr addrspace(3) %442, i32 %460, !dbg !51
  %462 = bitcast float %361 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #2, !dbg !51
  %463 = or disjoint i32 %439, 20, !dbg !51
  %464 = lshr i32 %463, 4, !dbg !51
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !51
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %463, !dbg !51
  %467 = bitcast float %362 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #2, !dbg !51
  %468 = or disjoint i32 %439, 36, !dbg !51
  %469 = lshr i32 %468, 4, !dbg !51
  %470 = getelementptr float, ptr addrspace(3) @global_smem, i32 %469, !dbg !51
  %471 = getelementptr float, ptr addrspace(3) %470, i32 %468, !dbg !51
  %472 = bitcast float %363 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %471, <1 x i32> %472, i1 true) #2, !dbg !51
  %473 = or disjoint i32 %439, 52, !dbg !51
  %474 = lshr i32 %473, 4, !dbg !51
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !51
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %473, !dbg !51
  %477 = bitcast float %364 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #2, !dbg !51
  %478 = or disjoint i32 %439, 8, !dbg !51
  %479 = getelementptr float, ptr addrspace(3) %442, i32 %478, !dbg !51
  %480 = bitcast float %365 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %480, i1 true) #2, !dbg !51
  %481 = or disjoint i32 %439, 24, !dbg !51
  %482 = lshr i32 %481, 4, !dbg !51
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !51
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %481, !dbg !51
  %485 = bitcast float %366 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %485, i1 true) #2, !dbg !51
  %486 = or disjoint i32 %439, 40, !dbg !51
  %487 = lshr i32 %486, 4, !dbg !51
  %488 = getelementptr float, ptr addrspace(3) @global_smem, i32 %487, !dbg !51
  %489 = getelementptr float, ptr addrspace(3) %488, i32 %486, !dbg !51
  %490 = bitcast float %367 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %489, <1 x i32> %490, i1 true) #2, !dbg !51
  %491 = or disjoint i32 %439, 56, !dbg !51
  %492 = lshr i32 %491, 4, !dbg !51
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %492, !dbg !51
  %494 = getelementptr float, ptr addrspace(3) %493, i32 %491, !dbg !51
  %495 = bitcast float %368 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %495, i1 true) #2, !dbg !51
  %496 = or disjoint i32 %439, 12, !dbg !51
  %497 = getelementptr float, ptr addrspace(3) %442, i32 %496, !dbg !51
  %498 = bitcast float %369 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %498, i1 true) #2, !dbg !51
  %499 = or disjoint i32 %439, 28, !dbg !51
  %500 = lshr i32 %499, 4, !dbg !51
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %500, !dbg !51
  %502 = getelementptr float, ptr addrspace(3) %501, i32 %499, !dbg !51
  %503 = bitcast float %370 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %502, <1 x i32> %503, i1 true) #2, !dbg !51
  %504 = or disjoint i32 %439, 44, !dbg !51
  %505 = lshr i32 %504, 4, !dbg !51
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !51
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %504, !dbg !51
  %508 = bitcast float %371 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %508, i1 true) #2, !dbg !51
  %509 = or disjoint i32 %439, 60, !dbg !51
  %510 = lshr i32 %509, 4, !dbg !51
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i32 %510, !dbg !51
  %512 = getelementptr float, ptr addrspace(3) %511, i32 %509, !dbg !51
  %513 = bitcast float %372 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %512, <1 x i32> %513, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %514 = lshr i32 %440, 4, !dbg !51
  %515 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %514, !dbg !51
  %516 = getelementptr inbounds float, ptr addrspace(3) %515, i32 %440, !dbg !51
  %517 = load i32, ptr addrspace(3) %516, align 4, !dbg !51
  %518 = or disjoint i32 %440, 256, !dbg !51
  %519 = lshr i32 %518, 4, !dbg !51
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %519, !dbg !51
  %521 = getelementptr inbounds float, ptr addrspace(3) %520, i32 %518, !dbg !51
  %522 = load i32, ptr addrspace(3) %521, align 4, !dbg !51
  %523 = or disjoint i32 %440, 512, !dbg !51
  %524 = lshr i32 %523, 4, !dbg !51
  %525 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %524, !dbg !51
  %526 = getelementptr inbounds float, ptr addrspace(3) %525, i32 %523, !dbg !51
  %527 = load i32, ptr addrspace(3) %526, align 4, !dbg !51
  %528 = or disjoint i32 %440, 768, !dbg !51
  %529 = lshr i32 %528, 4, !dbg !51
  %530 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %529, !dbg !51
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %528, !dbg !51
  %532 = load i32, ptr addrspace(3) %531, align 4, !dbg !51
  %533 = or disjoint i32 %440, 1024, !dbg !51
  %534 = lshr i32 %533, 4, !dbg !51
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !51
  %536 = getelementptr inbounds float, ptr addrspace(3) %535, i32 %533, !dbg !51
  %537 = load i32, ptr addrspace(3) %536, align 4, !dbg !51
  %538 = or disjoint i32 %440, 1280, !dbg !51
  %539 = lshr i32 %538, 4, !dbg !51
  %540 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %539, !dbg !51
  %541 = getelementptr inbounds float, ptr addrspace(3) %540, i32 %538, !dbg !51
  %542 = load i32, ptr addrspace(3) %541, align 4, !dbg !51
  %543 = or disjoint i32 %440, 1536, !dbg !51
  %544 = lshr i32 %543, 4, !dbg !51
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %544, !dbg !51
  %546 = getelementptr inbounds float, ptr addrspace(3) %545, i32 %543, !dbg !51
  %547 = load i32, ptr addrspace(3) %546, align 4, !dbg !51
  %548 = or disjoint i32 %440, 1792, !dbg !51
  %549 = lshr i32 %548, 4, !dbg !51
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !51
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %548, !dbg !51
  %552 = load i32, ptr addrspace(3) %551, align 4, !dbg !51
  %553 = or disjoint i32 %440, 2048, !dbg !51
  %554 = lshr i32 %553, 4, !dbg !51
  %555 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %554, !dbg !51
  %556 = getelementptr inbounds float, ptr addrspace(3) %555, i32 %553, !dbg !51
  %557 = load i32, ptr addrspace(3) %556, align 4, !dbg !51
  %558 = or disjoint i32 %440, 2304, !dbg !51
  %559 = lshr i32 %558, 4, !dbg !51
  %560 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %559, !dbg !51
  %561 = getelementptr inbounds float, ptr addrspace(3) %560, i32 %558, !dbg !51
  %562 = load i32, ptr addrspace(3) %561, align 4, !dbg !51
  %563 = or disjoint i32 %440, 2560, !dbg !51
  %564 = lshr i32 %563, 4, !dbg !51
  %565 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %564, !dbg !51
  %566 = getelementptr inbounds float, ptr addrspace(3) %565, i32 %563, !dbg !51
  %567 = load i32, ptr addrspace(3) %566, align 4, !dbg !51
  %568 = or disjoint i32 %440, 2816, !dbg !51
  %569 = lshr i32 %568, 4, !dbg !51
  %570 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %569, !dbg !51
  %571 = getelementptr inbounds float, ptr addrspace(3) %570, i32 %568, !dbg !51
  %572 = load i32, ptr addrspace(3) %571, align 4, !dbg !51
  %573 = or disjoint i32 %440, 3072, !dbg !51
  %574 = lshr i32 %573, 4, !dbg !51
  %575 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %574, !dbg !51
  %576 = getelementptr inbounds float, ptr addrspace(3) %575, i32 %573, !dbg !51
  %577 = load i32, ptr addrspace(3) %576, align 4, !dbg !51
  %578 = or disjoint i32 %440, 3328, !dbg !51
  %579 = lshr i32 %578, 4, !dbg !51
  %580 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %579, !dbg !51
  %581 = getelementptr inbounds float, ptr addrspace(3) %580, i32 %578, !dbg !51
  %582 = load i32, ptr addrspace(3) %581, align 4, !dbg !51
  %583 = or disjoint i32 %440, 3584, !dbg !51
  %584 = lshr i32 %583, 4, !dbg !51
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !51
  %586 = getelementptr inbounds float, ptr addrspace(3) %585, i32 %583, !dbg !51
  %587 = load i32, ptr addrspace(3) %586, align 4, !dbg !51
  %588 = or disjoint i32 %440, 3840, !dbg !51
  %589 = lshr i32 %588, 4, !dbg !51
  %590 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %589, !dbg !51
  %591 = getelementptr inbounds float, ptr addrspace(3) %590, i32 %588, !dbg !51
  %592 = load i32, ptr addrspace(3) %591, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %517, ptr addrspace(1) %406, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %522, ptr addrspace(1) %408, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %527, ptr addrspace(1) %410, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %532, ptr addrspace(1) %412, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %537, ptr addrspace(1) %414, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %416, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %547, ptr addrspace(1) %418, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %552, ptr addrspace(1) %420, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %557, ptr addrspace(1) %422, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %562, ptr addrspace(1) %424, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %567, ptr addrspace(1) %426, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %572, ptr addrspace(1) %428, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %577, ptr addrspace(1) %430, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %582, ptr addrspace(1) %432, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %587, ptr addrspace(1) %434, i1 %62) #2, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %592, ptr addrspace(1) %436, i1 %62) #2, !dbg !51
  %593 = shl i32 %53, 9, !dbg !52
  %594 = shl i32 %54, 9, !dbg !52
  %595 = shl i32 %55, 9, !dbg !52
  %596 = shl i32 %56, 9, !dbg !52
  %597 = mul i32 %63, 4608, !dbg !53
  %598 = add i32 %597, %.decomposed, !dbg !54
  %599 = add i32 %598, %593, !dbg !55
  %600 = add i32 %598, %594, !dbg !55
  %601 = add i32 %598, %595, !dbg !55
  %602 = add i32 %598, %596, !dbg !55
  %603 = sext i32 %599 to i64, !dbg !56
  %604 = getelementptr float, ptr addrspace(1) %5, i64 %603, !dbg !56
  %605 = sext i32 %600 to i64, !dbg !56
  %606 = getelementptr float, ptr addrspace(1) %5, i64 %605, !dbg !56
  %607 = sext i32 %601 to i64, !dbg !56
  %608 = getelementptr float, ptr addrspace(1) %5, i64 %607, !dbg !56
  %609 = sext i32 %602 to i64, !dbg !56
  %610 = getelementptr float, ptr addrspace(1) %5, i64 %609, !dbg !56
  %611 = bitcast float %357 to i32, !dbg !57
  %612 = bitcast float %358 to i32, !dbg !57
  %613 = bitcast float %359 to i32, !dbg !57
  %614 = bitcast float %360 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %611, i32 %612, i32 %613, i32 %614, ptr addrspace(1) %604, i1 %58) #2, !dbg !57
  %615 = bitcast float %361 to i32, !dbg !57
  %616 = bitcast float %362 to i32, !dbg !57
  %617 = bitcast float %363 to i32, !dbg !57
  %618 = bitcast float %364 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %615, i32 %616, i32 %617, i32 %618, ptr addrspace(1) %606, i1 %59) #2, !dbg !57
  %619 = bitcast float %365 to i32, !dbg !57
  %620 = bitcast float %366 to i32, !dbg !57
  %621 = bitcast float %367 to i32, !dbg !57
  %622 = bitcast float %368 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %619, i32 %620, i32 %621, i32 %622, ptr addrspace(1) %608, i1 %60) #2, !dbg !57
  %623 = bitcast float %369 to i32, !dbg !57
  %624 = bitcast float %370 to i32, !dbg !57
  %625 = bitcast float %371 to i32, !dbg !57
  %626 = bitcast float %372 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %623, i32 %624, i32 %625, i32 %626, ptr addrspace(1) %610, i1 %61) #2, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdmfdvlg2iv3a4r2haan3d4we6vxu6nyqnyrmyabcctwwytb6yhh.py", directory: "inductor_cache/dm")
!4 = !{ptr @triton_poi_fused_cat_convolution_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_19", linkageName: "triton_poi_fused_cat_convolution_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 34, scope: !7)
!23 = !DILocation(line: 37, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 39, scope: !7)
!25 = !DILocation(line: 37, column: 50, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 63, scope: !7)
!28 = !DILocation(line: 37, column: 56, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 70, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 60, scope: !7)
!33 = !DILocation(line: 47, column: 51, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 74, scope: !7)
!36 = !DILocation(line: 47, column: 66, scope: !7)
!37 = !DILocation(line: 48, column: 31, scope: !7)
!38 = !DILocation(line: 48, column: 80, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 51, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !45)
!45 = !DILocation(line: 41, column: 40, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 55, column: 32, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 44, scope: !7)
!52 = !DILocation(line: 56, column: 34, scope: !7)
!53 = !DILocation(line: 56, column: 44, scope: !7)
!54 = !DILocation(line: 56, column: 30, scope: !7)
!55 = !DILocation(line: 56, column: 39, scope: !7)
!56 = !DILocation(line: 56, column: 25, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
