; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %12, 8, !dbg !12
  %14 = or disjoint i32 %12, 16, !dbg !12
  %15 = or disjoint i32 %12, 24, !dbg !12
  %16 = or disjoint i32 %12, 32, !dbg !12
  %17 = or disjoint i32 %12, 40, !dbg !12
  %18 = or disjoint i32 %12, 48, !dbg !12
  %19 = or disjoint i32 %12, 56, !dbg !12
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %12, !dbg !13
  %22 = or disjoint i32 %7, %13, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %7, %15, !dbg !13
  %25 = or disjoint i32 %7, %16, !dbg !13
  %26 = or disjoint i32 %7, %17, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = or disjoint i32 %7, %19, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 4, !dbg !15
  %31 = and i32 %8, 15, !dbg !16
  %32 = or disjoint i32 %30, %12, !dbg !17
  %33 = or disjoint i32 %30, %13, !dbg !17
  %34 = or disjoint i32 %30, %31, !dbg !17
  %35 = icmp slt i32 %32, 9, !dbg !18
  %36 = icmp slt i32 %33, 9, !dbg !18
  %37 = icmp slt i32 %34, 9, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %38 = sdiv i32 %.frozen, 256, !dbg !19
  %39 = mul i32 %38, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %39, !dbg !20
  %40 = shl i32 %32, 8, !dbg !21
  %41 = shl i32 %33, 8, !dbg !21
  %42 = mul i32 %38, 2304, !dbg !22
  %43 = add i32 %42, %.decomposed, !dbg !23
  %44 = add i32 %43, %40, !dbg !24
  %45 = add i32 %43, %41, !dbg !24
  %46 = sext i32 %44 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %45 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %35) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %36) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = sext i32 %.decomposed to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !26
  %68 = insertelement <8 x i32> %67, i32 %58, i64 1, !dbg !26
  %69 = insertelement <8 x i32> %68, i32 %57, i64 2, !dbg !26
  %70 = insertelement <8 x i32> %69, i32 %56, i64 3, !dbg !26
  %71 = insertelement <8 x i32> %70, i32 %54, i64 4, !dbg !26
  %72 = insertelement <8 x i32> %71, i32 %53, i64 5, !dbg !26
  %73 = insertelement <8 x i32> %72, i32 %52, i64 6, !dbg !26
  %74 = insertelement <8 x i32> %73, i32 %51, i64 7, !dbg !26
  %75 = bitcast <8 x i32> %74 to <8 x float>, !dbg !26
  %76 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !28
  %77 = insertelement <4 x i32> %76, i32 %65, i64 1, !dbg !28
  %78 = insertelement <4 x i32> %77, i32 %64, i64 2, !dbg !28
  %79 = insertelement <4 x i32> %78, i32 %63, i64 3, !dbg !28
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !28
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %82 = fadd <8 x float> %81, %75, !dbg !29
  %83 = fcmp olt <8 x float> %82, zeroinitializer, !dbg !30
  %84 = extractelement <8 x i1> %83, i64 7, !dbg !34
  %85 = extractelement <8 x float> %82, i64 7, !dbg !34
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !34
  %87 = extractelement <8 x i1> %83, i64 6, !dbg !34
  %88 = extractelement <8 x float> %82, i64 6, !dbg !34
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !34
  %90 = extractelement <8 x i1> %83, i64 5, !dbg !34
  %91 = extractelement <8 x float> %82, i64 5, !dbg !34
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !34
  %93 = extractelement <8 x i1> %83, i64 4, !dbg !34
  %94 = extractelement <8 x float> %82, i64 4, !dbg !34
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !34
  %96 = extractelement <8 x i1> %83, i64 3, !dbg !34
  %97 = extractelement <8 x float> %82, i64 3, !dbg !34
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !34
  %99 = extractelement <8 x i1> %83, i64 2, !dbg !34
  %100 = extractelement <8 x float> %82, i64 2, !dbg !34
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !34
  %102 = extractelement <8 x i1> %83, i64 1, !dbg !34
  %103 = extractelement <8 x float> %82, i64 1, !dbg !34
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !34
  %105 = extractelement <8 x i1> %83, i64 0, !dbg !34
  %106 = extractelement <8 x float> %82, i64 0, !dbg !34
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !34
  %108 = mul i32 %21, 9, !dbg !35
  %109 = mul i32 %22, 9, !dbg !35
  %110 = mul i32 %23, 9, !dbg !35
  %111 = mul i32 %24, 9, !dbg !35
  %112 = mul i32 %25, 9, !dbg !35
  %113 = mul i32 %26, 9, !dbg !35
  %114 = mul i32 %27, 9, !dbg !35
  %115 = mul i32 %28, 9, !dbg !35
  %116 = add i32 %34, %108, !dbg !36
  %117 = add i32 %34, %109, !dbg !36
  %118 = add i32 %34, %110, !dbg !36
  %119 = add i32 %34, %111, !dbg !36
  %120 = add i32 %34, %112, !dbg !36
  %121 = add i32 %34, %113, !dbg !36
  %122 = add i32 %34, %114, !dbg !36
  %123 = add i32 %34, %115, !dbg !36
  %124 = sext i32 %116 to i64, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !37
  %126 = sext i32 %117 to i64, !dbg !37
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !37
  %128 = sext i32 %118 to i64, !dbg !37
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !37
  %130 = sext i32 %119 to i64, !dbg !37
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !37
  %132 = sext i32 %120 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !37
  %134 = sext i32 %121 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !37
  %136 = sext i32 %122 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !37
  %138 = sext i32 %123 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !37
  %140 = shl i32 %8, 6, !dbg !38
  %141 = and i32 %140, 960, !dbg !38
  %142 = or disjoint i32 %141, %12, !dbg !38
  %143 = and i32 %8, 127, !dbg !38
  %144 = lshr exact i32 %141, 4, !dbg !38
  %145 = add nuw nsw i32 %144, %142, !dbg !38
  %146 = zext nneg i32 %145 to i64, !dbg !38
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !38
  %148 = bitcast float %86 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !38
  %149 = or disjoint i32 %142, 16, !dbg !38
  %150 = lshr i32 %149, 4, !dbg !38
  %151 = add nuw nsw i32 %150, %149, !dbg !38
  %152 = zext nneg i32 %151 to i64, !dbg !38
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %152, !dbg !38
  %154 = bitcast float %89 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !38
  %155 = or disjoint i32 %142, 32, !dbg !38
  %156 = lshr i32 %155, 4, !dbg !38
  %157 = add nuw nsw i32 %156, %155, !dbg !38
  %158 = zext nneg i32 %157 to i64, !dbg !38
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !38
  %160 = bitcast float %92 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !38
  %161 = or disjoint i32 %142, 48, !dbg !38
  %162 = lshr i32 %161, 4, !dbg !38
  %163 = add nuw nsw i32 %162, %161, !dbg !38
  %164 = zext nneg i32 %163 to i64, !dbg !38
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !38
  %166 = bitcast float %95 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !38
  %167 = or disjoint i32 %142, 8, !dbg !38
  %168 = add nuw nsw i32 %167, %144, !dbg !38
  %169 = zext nneg i32 %168 to i64, !dbg !38
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !38
  %171 = bitcast float %98 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !38
  %172 = or disjoint i32 %142, 24, !dbg !38
  %173 = lshr i32 %172, 4, !dbg !38
  %174 = add nuw nsw i32 %173, %172, !dbg !38
  %175 = zext nneg i32 %174 to i64, !dbg !38
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %175, !dbg !38
  %177 = bitcast float %101 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !38
  %178 = or disjoint i32 %142, 40, !dbg !38
  %179 = lshr i32 %178, 4, !dbg !38
  %180 = add nuw nsw i32 %179, %178, !dbg !38
  %181 = zext nneg i32 %180 to i64, !dbg !38
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %181, !dbg !38
  %183 = bitcast float %104 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !38
  %184 = or disjoint i32 %142, 56, !dbg !38
  %185 = lshr i32 %184, 4, !dbg !38
  %186 = add nuw nsw i32 %185, %184, !dbg !38
  %187 = zext nneg i32 %186 to i64, !dbg !38
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %187, !dbg !38
  %189 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %190 = lshr i32 %143, 4, !dbg !38
  %191 = add nuw nsw i32 %190, %143, !dbg !38
  %192 = zext nneg i32 %191 to i64, !dbg !38
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %192, !dbg !38
  %194 = load i32, ptr addrspace(3) %193, align 4, !dbg !38
  %195 = or disjoint i32 %143, 128, !dbg !38
  %196 = lshr i32 %195, 4, !dbg !38
  %197 = add nuw nsw i32 %196, %195, !dbg !38
  %198 = zext nneg i32 %197 to i64, !dbg !38
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %198, !dbg !38
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !38
  %201 = or disjoint i32 %143, 256, !dbg !38
  %202 = lshr i32 %201, 4, !dbg !38
  %203 = add nuw nsw i32 %202, %201, !dbg !38
  %204 = zext nneg i32 %203 to i64, !dbg !38
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !38
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !38
  %207 = or disjoint i32 %143, 384, !dbg !38
  %208 = lshr i32 %207, 4, !dbg !38
  %209 = add nuw nsw i32 %208, %207, !dbg !38
  %210 = zext nneg i32 %209 to i64, !dbg !38
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %210, !dbg !38
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !38
  %213 = or disjoint i32 %143, 512, !dbg !38
  %214 = lshr i32 %213, 4, !dbg !38
  %215 = add nuw nsw i32 %214, %213, !dbg !38
  %216 = zext nneg i32 %215 to i64, !dbg !38
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %216, !dbg !38
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !38
  %219 = or disjoint i32 %143, 640, !dbg !38
  %220 = lshr i32 %219, 4, !dbg !38
  %221 = add nuw nsw i32 %220, %219, !dbg !38
  %222 = zext nneg i32 %221 to i64, !dbg !38
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %222, !dbg !38
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !38
  %225 = or disjoint i32 %143, 768, !dbg !38
  %226 = lshr i32 %225, 4, !dbg !38
  %227 = add nuw nsw i32 %226, %225, !dbg !38
  %228 = zext nneg i32 %227 to i64, !dbg !38
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %228, !dbg !38
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !38
  %231 = or disjoint i32 %143, 896, !dbg !38
  %232 = lshr i32 %231, 4, !dbg !38
  %233 = add nuw nsw i32 %232, %231, !dbg !38
  %234 = zext nneg i32 %233 to i64, !dbg !38
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !38
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %125, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %127, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %206, ptr addrspace(1) %129, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %131, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %133, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %135, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %230, ptr addrspace(1) %137, i1 %37) #2, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %236, ptr addrspace(1) %139, i1 %37) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckyizrztl2otr57pzaj3ygvb72ponsm6r675cr3yoyngpgjtjqtx.py", directory: "inductor_cache/ky")
!4 = !{ptr @triton_poi_fused_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_12", linkageName: "triton_poi_fused_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = !DILocation(line: 36, column: 40, scope: !7)
!34 = !DILocation(line: 121, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 37, column: 32, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
