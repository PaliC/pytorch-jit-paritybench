#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":19:0)
#loc1 = loc(unknown)
#loc13 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":36:24)
#loc23 = loc(callsite(#loc1 at #loc13))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":19:0), %arg1: !tt.ptr<f32> loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":19:0)) attributes {noinline = false} {
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c4_i32 : i32 loc(#loc6)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc8)
    %8 = arith.addi %3, %7 : tensor<1x16xi32, #blocked> loc(#loc8)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc10)
    %12 = tt.load %10, %11, %cst_0 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.select %11, %12, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc11)
    %14 = "tt.reduce"(%13) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc13)), %arg5: f32 loc(callsite(#loc1 at #loc13))):
      %22 = arith.addf %arg4, %arg5 : f32 loc(#loc25)
      tt.reduce.return %22 : f32 loc(#loc22)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc22)
    %15 = tt.expand_dims %14 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc15)
    %16 = arith.divf %15, %cst : tensor<1x1xf32, #blocked> loc(#loc16)
    %17 = arith.muli %5, %c8_i32 : i32 loc(#loc17)
    %18 = arith.addi %4, %17 : i32 loc(#loc18)
    %19 = tt.addptr %arg1, %18 : !tt.ptr<f32>, i32 loc(#loc19)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %21 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc20)
    tt.store %20, %16, %21 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    tt.return loc(#loc21)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":23:28)
#loc3 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":25:21)
#loc4 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":26:34)
#loc5 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":31:19)
#loc6 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":32:19)
#loc7 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":33:38)
#loc8 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":33:35)
#loc9 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":33:30)
#loc10 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":33:43)
#loc11 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":35:33)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":36:27)
#loc16 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":38:18)
#loc17 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":39:32)
#loc18 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":39:30)
#loc19 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":39:25)
#loc20 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":39:43)
#loc21 = loc("inductor_cache/v2/cv2ykoe25zwuiciims6ryx3bn6x3g3ros4hupogsq6bogl3kb56b.py":39:4)
#loc22 = loc(callsite(#loc12 at #loc13))
#loc24 = loc(callsite(#loc14 at #loc12))
#loc25 = loc(callsite(#loc24 at #loc13))
