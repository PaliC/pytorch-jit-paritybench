; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit18 = lshr i32 %11, 6, !dbg !12
  %12 = and i32 %.lobit18, 3, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = or disjoint i32 %10, %12, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %15, 8, !dbg !13
  %18 = or disjoint i32 %15, 12, !dbg !13
  %19 = or disjoint i32 %10, %14, !dbg !13
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 8, !dbg !16
  %27 = and i32 %13, 252, !dbg !17
  %28 = lshr i32 %11, 2, !dbg !17
  %29 = and i32 %28, 15, !dbg !17
  %30 = lshr i32 %11, 2, !dbg !17
  %31 = and i32 %30, 16, !dbg !17
  %32 = lshr i32 %11, 2, !dbg !17
  %33 = and i32 %32, 32, !dbg !17
  %34 = or disjoint i32 %31, %29, !dbg !17
  %35 = or disjoint i32 %34, %33, !dbg !17
  %36 = or disjoint i32 %35, 64, !dbg !17
  %37 = or disjoint i32 %35, 128, !dbg !17
  %38 = or disjoint i32 %35, 192, !dbg !17
  %39 = or disjoint i32 %26, %27, !dbg !18
  %40 = or disjoint i32 %26, %35, !dbg !18
  %41 = or disjoint i32 %26, %36, !dbg !18
  %42 = or disjoint i32 %26, %37, !dbg !18
  %43 = or disjoint i32 %26, %38, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %44 = sdiv i32 %.frozen, 64, !dbg !19
  %45 = mul i32 %44, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %45, !dbg !20
  %46 = shl i32 %15, 12, !dbg !21
  %47 = shl i32 %16, 12, !dbg !21
  %48 = shl i32 %17, 12, !dbg !21
  %49 = shl i32 %18, 12, !dbg !21
  %50 = add i32 %39, %46, !dbg !22
  %51 = add i32 %39, %47, !dbg !22
  %52 = add i32 %39, %48, !dbg !22
  %53 = add i32 %39, %49, !dbg !22
  %54 = sext i32 %50 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %51 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %52 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %53 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %20) #2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %21) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %22) #2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %23) #2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !24
  %82 = shl i32 %11, 6, !dbg !24
  %83 = and i32 %82, 4032, !dbg !24
  %84 = or disjoint i32 %12, %83, !dbg !24
  %85 = and i32 %13, 1020, !dbg !24
  %86 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !24
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84, !dbg !24
  %88 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !24
  %89 = or disjoint i32 %84, 16, !dbg !24
  %90 = lshr i32 %89, 2, !dbg !24
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !24
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %89, !dbg !24
  %93 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !24
  %94 = or disjoint i32 %84, 32, !dbg !24
  %95 = lshr i32 %94, 2, !dbg !24
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !24
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94, !dbg !24
  %98 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !24
  %99 = or disjoint i32 %84, 48, !dbg !24
  %100 = lshr i32 %99, 2, !dbg !24
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %100, !dbg !24
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %99, !dbg !24
  %103 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !24
  %104 = or disjoint i32 %84, 4, !dbg !24
  %105 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %104, !dbg !24
  %106 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !24
  %107 = or disjoint i32 %84, 20, !dbg !24
  %108 = lshr i32 %107, 2, !dbg !24
  %109 = and i32 %108, 1012, !dbg !24
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !24
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %107, !dbg !24
  %112 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !24
  %113 = or disjoint i32 %84, 36, !dbg !24
  %114 = lshr i32 %113, 2, !dbg !24
  %115 = and i32 %114, 1016, !dbg !24
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !24
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %113, !dbg !24
  %118 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !24
  %119 = or disjoint i32 %84, 52, !dbg !24
  %120 = lshr i32 %119, 2, !dbg !24
  %121 = and i32 %120, 1020, !dbg !24
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !24
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %119, !dbg !24
  %124 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !24
  %125 = or disjoint i32 %84, 8, !dbg !24
  %126 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %125, !dbg !24
  %127 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !24
  %128 = or disjoint i32 %84, 24, !dbg !24
  %129 = lshr i32 %128, 2, !dbg !24
  %130 = and i32 %129, 1012, !dbg !24
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !24
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %128, !dbg !24
  %133 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !24
  %134 = or disjoint i32 %84, 40, !dbg !24
  %135 = lshr i32 %134, 2, !dbg !24
  %136 = and i32 %135, 1016, !dbg !24
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !24
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %134, !dbg !24
  %139 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !24
  %140 = or disjoint i32 %84, 56, !dbg !24
  %141 = lshr i32 %140, 2, !dbg !24
  %142 = and i32 %141, 1020, !dbg !24
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !24
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %140, !dbg !24
  %145 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !24
  %146 = or disjoint i32 %84, 12, !dbg !24
  %147 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %146, !dbg !24
  %148 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !24
  %149 = or disjoint i32 %84, 28, !dbg !24
  %150 = lshr i32 %149, 2, !dbg !24
  %151 = and i32 %150, 1012, !dbg !24
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !24
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %149, !dbg !24
  %154 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !24
  %155 = or disjoint i32 %84, 44, !dbg !24
  %156 = lshr i32 %155, 2, !dbg !24
  %157 = and i32 %156, 1016, !dbg !24
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !24
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %155, !dbg !24
  %160 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !24
  %161 = or disjoint i32 %84, 60, !dbg !24
  %162 = lshr i32 %161, 2, !dbg !24
  %163 = and i32 %162, 1020, !dbg !24
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !24
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %161, !dbg !24
  %166 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %167 = and i32 %11, 252, !dbg !24
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %167, !dbg !24
  %169 = getelementptr inbounds float, ptr addrspace(3) %168, i32 %85, !dbg !24
  %170 = load float, ptr addrspace(3) %169, align 16, !dbg !24
  %171 = getelementptr inbounds i8, ptr addrspace(3) %169, i32 4, !dbg !24
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !24
  %173 = getelementptr inbounds i8, ptr addrspace(3) %169, i32 8, !dbg !24
  %174 = load float, ptr addrspace(3) %173, align 8, !dbg !24
  %175 = getelementptr inbounds i8, ptr addrspace(3) %169, i32 12, !dbg !24
  %176 = load float, ptr addrspace(3) %175, align 4, !dbg !24
  %177 = or disjoint i32 %85, 1024, !dbg !24
  %178 = lshr exact i32 %177, 2, !dbg !24
  %179 = and i32 %178, 508, !dbg !24
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !24
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %177, !dbg !24
  %182 = load float, ptr addrspace(3) %181, align 16, !dbg !24
  %183 = getelementptr inbounds i8, ptr addrspace(3) %181, i32 4, !dbg !24
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !24
  %185 = getelementptr inbounds i8, ptr addrspace(3) %181, i32 8, !dbg !24
  %186 = load float, ptr addrspace(3) %185, align 8, !dbg !24
  %187 = getelementptr inbounds i8, ptr addrspace(3) %181, i32 12, !dbg !24
  %188 = load float, ptr addrspace(3) %187, align 4, !dbg !24
  %189 = or disjoint i32 %85, 2048, !dbg !24
  %190 = lshr exact i32 %189, 2, !dbg !24
  %191 = and i32 %190, 764, !dbg !24
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !24
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %189, !dbg !24
  %194 = load float, ptr addrspace(3) %193, align 16, !dbg !24
  %195 = getelementptr inbounds i8, ptr addrspace(3) %193, i32 4, !dbg !24
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !24
  %197 = getelementptr inbounds i8, ptr addrspace(3) %193, i32 8, !dbg !24
  %198 = load float, ptr addrspace(3) %197, align 8, !dbg !24
  %199 = getelementptr inbounds i8, ptr addrspace(3) %193, i32 12, !dbg !24
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !24
  %201 = or disjoint i32 %85, 3072, !dbg !24
  %202 = lshr exact i32 %201, 2, !dbg !24
  %203 = and i32 %202, 1020, !dbg !24
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !24
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %201, !dbg !24
  %206 = load float, ptr addrspace(3) %205, align 16, !dbg !24
  %207 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 4, !dbg !24
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !24
  %209 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 8, !dbg !24
  %210 = load float, ptr addrspace(3) %209, align 8, !dbg !24
  %211 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 12, !dbg !24
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !24
  %213 = sext i32 %.decomposed to i64, !dbg !25
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %213, !dbg !25
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %24) #2, !dbg !26
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !26
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !26
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !26
  %220 = bitcast i32 %216 to float, !dbg !26
  %221 = bitcast i32 %217 to float, !dbg !26
  %222 = bitcast i32 %218 to float, !dbg !26
  %223 = bitcast i32 %219 to float, !dbg !26
  %224 = shl i32 %40, 6, !dbg !27
  %225 = shl i32 %41, 6, !dbg !27
  %226 = shl i32 %42, 6, !dbg !27
  %227 = shl i32 %43, 6, !dbg !27
  %228 = shl i32 %44, 18, !dbg !28
  %229 = add i32 %228, %.decomposed, !dbg !29
  %230 = add i32 %229, %224, !dbg !30
  %231 = add i32 %229, %225, !dbg !30
  %232 = add i32 %229, %226, !dbg !30
  %233 = add i32 %229, %227, !dbg !30
  %234 = sext i32 %230 to i64, !dbg !31
  %235 = getelementptr float, ptr addrspace(1) %2, i64 %234, !dbg !31
  %236 = sext i32 %231 to i64, !dbg !31
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %236, !dbg !31
  %238 = sext i32 %232 to i64, !dbg !31
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %238, !dbg !31
  %240 = sext i32 %233 to i64, !dbg !31
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !31
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %235, i1 %24) #2, !dbg !32
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !32
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !32
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !32
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !32
  %247 = bitcast i32 %243 to float, !dbg !32
  %248 = bitcast i32 %244 to float, !dbg !32
  %249 = bitcast i32 %245 to float, !dbg !32
  %250 = bitcast i32 %246 to float, !dbg !32
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 %24) #2, !dbg !32
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !32
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !32
  %256 = bitcast i32 %252 to float, !dbg !32
  %257 = bitcast i32 %253 to float, !dbg !32
  %258 = bitcast i32 %254 to float, !dbg !32
  %259 = bitcast i32 %255 to float, !dbg !32
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %239, i1 %24) #2, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !32
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !32
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !32
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !32
  %265 = bitcast i32 %261 to float, !dbg !32
  %266 = bitcast i32 %262 to float, !dbg !32
  %267 = bitcast i32 %263 to float, !dbg !32
  %268 = bitcast i32 %264 to float, !dbg !32
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %24) #2, !dbg !32
  %270 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !32
  %271 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !32
  %272 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !32
  %273 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !32
  %274 = bitcast i32 %270 to float, !dbg !32
  %275 = bitcast i32 %271 to float, !dbg !32
  %276 = bitcast i32 %272 to float, !dbg !32
  %277 = bitcast i32 %273 to float, !dbg !32
  %278 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !33
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %278, i1 %24) #2, !dbg !34
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !34
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !34
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !34
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !34
  %284 = bitcast i32 %280 to float, !dbg !34
  %285 = bitcast i32 %281 to float, !dbg !34
  %286 = bitcast i32 %282 to float, !dbg !34
  %287 = bitcast i32 %283 to float, !dbg !34
  %288 = fmul float %220, %247, !dbg !35
  %289 = fmul float %221, %248, !dbg !35
  %290 = fmul float %222, %249, !dbg !35
  %291 = fmul float %223, %250, !dbg !35
  %292 = fmul float %220, %256, !dbg !35
  %293 = fmul float %221, %257, !dbg !35
  %294 = fmul float %222, %258, !dbg !35
  %295 = fmul float %223, %259, !dbg !35
  %296 = fmul float %220, %265, !dbg !35
  %297 = fmul float %221, %266, !dbg !35
  %298 = fmul float %222, %267, !dbg !35
  %299 = fmul float %223, %268, !dbg !35
  %300 = fmul float %220, %274, !dbg !35
  %301 = fmul float %221, %275, !dbg !35
  %302 = fmul float %222, %276, !dbg !35
  %303 = fmul float %223, %277, !dbg !35
  %304 = fadd float %288, %284, !dbg !36
  %305 = fadd float %289, %285, !dbg !36
  %306 = fadd float %290, %286, !dbg !36
  %307 = fadd float %291, %287, !dbg !36
  %308 = fadd float %292, %284, !dbg !36
  %309 = fadd float %293, %285, !dbg !36
  %310 = fadd float %294, %286, !dbg !36
  %311 = fadd float %295, %287, !dbg !36
  %312 = fadd float %296, %284, !dbg !36
  %313 = fadd float %297, %285, !dbg !36
  %314 = fadd float %298, %286, !dbg !36
  %315 = fadd float %299, %287, !dbg !36
  %316 = fadd float %300, %284, !dbg !36
  %317 = fadd float %301, %285, !dbg !36
  %318 = fadd float %302, %286, !dbg !36
  %319 = fadd float %303, %287, !dbg !36
  %320 = fadd float %170, %304, !dbg !37
  %321 = fadd float %172, %305, !dbg !37
  %322 = fadd float %174, %306, !dbg !37
  %323 = fadd float %176, %307, !dbg !37
  %324 = fadd float %182, %308, !dbg !37
  %325 = fadd float %184, %309, !dbg !37
  %326 = fadd float %186, %310, !dbg !37
  %327 = fadd float %188, %311, !dbg !37
  %328 = fadd float %194, %312, !dbg !37
  %329 = fadd float %196, %313, !dbg !37
  %330 = fadd float %198, %314, !dbg !37
  %331 = fadd float %200, %315, !dbg !37
  %332 = fadd float %206, %316, !dbg !37
  %333 = fadd float %208, %317, !dbg !37
  %334 = fadd float %210, %318, !dbg !37
  %335 = fadd float %212, %319, !dbg !37
  %336 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !38
  %337 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !38
  %338 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !38
  %339 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %340 = shl i32 %11, 10, !dbg !39
  %341 = and i32 %340, 3072, !dbg !39
  %342 = or disjoint i32 %35, %341, !dbg !39
  %343 = lshr exact i32 %341, 6, !dbg !39
  %344 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %343, !dbg !39
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %342, !dbg !39
  %346 = bitcast float %320 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #2, !dbg !39
  %347 = or disjoint i32 %342, 256, !dbg !39
  %348 = lshr i32 %347, 8, !dbg !39
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !39
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !39
  %351 = bitcast float %321 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #2, !dbg !39
  %352 = or disjoint i32 %342, 512, !dbg !39
  %353 = lshr i32 %352, 8, !dbg !39
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !39
  %355 = getelementptr float, ptr addrspace(3) %354, i32 %352, !dbg !39
  %356 = bitcast float %322 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #2, !dbg !39
  %357 = or disjoint i32 %342, 768, !dbg !39
  %358 = lshr i32 %357, 8, !dbg !39
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %358, !dbg !39
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %357, !dbg !39
  %361 = bitcast float %323 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #2, !dbg !39
  %362 = or disjoint i32 %342, 64, !dbg !39
  %363 = getelementptr float, ptr addrspace(3) %344, i32 %362, !dbg !39
  %364 = bitcast float %324 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #2, !dbg !39
  %365 = or disjoint i32 %342, 320, !dbg !39
  %366 = lshr i32 %365, 8, !dbg !39
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !39
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %365, !dbg !39
  %369 = bitcast float %325 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #2, !dbg !39
  %370 = or disjoint i32 %342, 576, !dbg !39
  %371 = lshr i32 %370, 8, !dbg !39
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !39
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %370, !dbg !39
  %374 = bitcast float %326 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #2, !dbg !39
  %375 = or disjoint i32 %342, 832, !dbg !39
  %376 = lshr i32 %375, 8, !dbg !39
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !39
  %378 = getelementptr float, ptr addrspace(3) %377, i32 %375, !dbg !39
  %379 = bitcast float %327 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #2, !dbg !39
  %380 = or disjoint i32 %342, 128, !dbg !39
  %381 = getelementptr float, ptr addrspace(3) %344, i32 %380, !dbg !39
  %382 = bitcast float %328 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #2, !dbg !39
  %383 = or disjoint i32 %342, 384, !dbg !39
  %384 = lshr i32 %383, 8, !dbg !39
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !39
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !39
  %387 = bitcast float %329 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #2, !dbg !39
  %388 = or disjoint i32 %342, 640, !dbg !39
  %389 = lshr i32 %388, 8, !dbg !39
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i32 %389, !dbg !39
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %388, !dbg !39
  %392 = bitcast float %330 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %392, i1 true) #2, !dbg !39
  %393 = or disjoint i32 %342, 896, !dbg !39
  %394 = lshr i32 %393, 8, !dbg !39
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !39
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %393, !dbg !39
  %397 = bitcast float %331 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #2, !dbg !39
  %398 = or disjoint i32 %342, 192, !dbg !39
  %399 = getelementptr float, ptr addrspace(3) %344, i32 %398, !dbg !39
  %400 = bitcast float %332 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #2, !dbg !39
  %401 = or disjoint i32 %342, 448, !dbg !39
  %402 = lshr i32 %401, 8, !dbg !39
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !39
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %401, !dbg !39
  %405 = bitcast float %333 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #2, !dbg !39
  %406 = or disjoint i32 %342, 704, !dbg !39
  %407 = lshr i32 %406, 8, !dbg !39
  %408 = getelementptr float, ptr addrspace(3) @global_smem, i32 %407, !dbg !39
  %409 = getelementptr float, ptr addrspace(3) %408, i32 %406, !dbg !39
  %410 = bitcast float %334 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %409, <1 x i32> %410, i1 true) #2, !dbg !39
  %411 = or disjoint i32 %342, 960, !dbg !39
  %412 = lshr i32 %411, 8, !dbg !39
  %413 = getelementptr float, ptr addrspace(3) @global_smem, i32 %412, !dbg !39
  %414 = getelementptr float, ptr addrspace(3) %413, i32 %411, !dbg !39
  %415 = bitcast float %335 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %416 = lshr i32 %85, 8, !dbg !39
  %417 = or disjoint i32 %416, %85, !dbg !39
  %418 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %417, !dbg !39
  %419 = load i32, ptr addrspace(3) %418, align 4, !dbg !39
  %420 = or disjoint i32 %85, 1, !dbg !39
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %416, !dbg !39
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %420, !dbg !39
  %423 = load i32, ptr addrspace(3) %422, align 4, !dbg !39
  %424 = or disjoint i32 %85, 2, !dbg !39
  %425 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %424, !dbg !39
  %426 = load i32, ptr addrspace(3) %425, align 4, !dbg !39
  %427 = or disjoint i32 %85, 3, !dbg !39
  %428 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %427, !dbg !39
  %429 = load i32, ptr addrspace(3) %428, align 4, !dbg !39
  %430 = lshr i32 %177, 8, !dbg !39
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !39
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %177, !dbg !39
  %433 = load i32, ptr addrspace(3) %432, align 4, !dbg !39
  %434 = or disjoint i32 %85, 1025, !dbg !39
  %435 = lshr i32 %434, 8, !dbg !39
  %436 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %435, !dbg !39
  %437 = getelementptr inbounds float, ptr addrspace(3) %436, i32 %434, !dbg !39
  %438 = load i32, ptr addrspace(3) %437, align 4, !dbg !39
  %439 = or disjoint i32 %85, 1026, !dbg !39
  %440 = lshr i32 %439, 8, !dbg !39
  %441 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %440, !dbg !39
  %442 = getelementptr inbounds float, ptr addrspace(3) %441, i32 %439, !dbg !39
  %443 = load i32, ptr addrspace(3) %442, align 4, !dbg !39
  %444 = or disjoint i32 %85, 1027, !dbg !39
  %445 = lshr i32 %444, 8, !dbg !39
  %446 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %445, !dbg !39
  %447 = getelementptr inbounds float, ptr addrspace(3) %446, i32 %444, !dbg !39
  %448 = load i32, ptr addrspace(3) %447, align 4, !dbg !39
  %449 = lshr i32 %189, 8, !dbg !39
  %450 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %449, !dbg !39
  %451 = getelementptr inbounds float, ptr addrspace(3) %450, i32 %189, !dbg !39
  %452 = load i32, ptr addrspace(3) %451, align 4, !dbg !39
  %453 = or disjoint i32 %85, 2049, !dbg !39
  %454 = lshr i32 %453, 8, !dbg !39
  %455 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %454, !dbg !39
  %456 = getelementptr inbounds float, ptr addrspace(3) %455, i32 %453, !dbg !39
  %457 = load i32, ptr addrspace(3) %456, align 4, !dbg !39
  %458 = or disjoint i32 %85, 2050, !dbg !39
  %459 = lshr i32 %458, 8, !dbg !39
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %459, !dbg !39
  %461 = getelementptr inbounds float, ptr addrspace(3) %460, i32 %458, !dbg !39
  %462 = load i32, ptr addrspace(3) %461, align 4, !dbg !39
  %463 = or disjoint i32 %85, 2051, !dbg !39
  %464 = lshr i32 %463, 8, !dbg !39
  %465 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %464, !dbg !39
  %466 = getelementptr inbounds float, ptr addrspace(3) %465, i32 %463, !dbg !39
  %467 = load i32, ptr addrspace(3) %466, align 4, !dbg !39
  %468 = lshr i32 %201, 8, !dbg !39
  %469 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %468, !dbg !39
  %470 = getelementptr inbounds float, ptr addrspace(3) %469, i32 %201, !dbg !39
  %471 = load i32, ptr addrspace(3) %470, align 4, !dbg !39
  %472 = or disjoint i32 %85, 3073, !dbg !39
  %473 = lshr i32 %472, 8, !dbg !39
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %473, !dbg !39
  %475 = getelementptr inbounds float, ptr addrspace(3) %474, i32 %472, !dbg !39
  %476 = load i32, ptr addrspace(3) %475, align 4, !dbg !39
  %477 = or disjoint i32 %85, 3074, !dbg !39
  %478 = lshr i32 %477, 8, !dbg !39
  %479 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %478, !dbg !39
  %480 = getelementptr inbounds float, ptr addrspace(3) %479, i32 %477, !dbg !39
  %481 = load i32, ptr addrspace(3) %480, align 4, !dbg !39
  %482 = or disjoint i32 %85, 3075, !dbg !39
  %483 = lshr i32 %482, 8, !dbg !39
  %484 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %483, !dbg !39
  %485 = getelementptr inbounds float, ptr addrspace(3) %484, i32 %482, !dbg !39
  %486 = load i32, ptr addrspace(3) %485, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %419, i32 %423, i32 %426, i32 %429, ptr addrspace(1) %336, i1 %20) #2, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %438, i32 %443, i32 %448, ptr addrspace(1) %337, i1 %21) #2, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %452, i32 %457, i32 %462, i32 %467, ptr addrspace(1) %338, i1 %22) #2, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %471, i32 %476, i32 %481, i32 %486, ptr addrspace(1) %339, i1 %23) #2, !dbg !39
  %487 = getelementptr float, ptr addrspace(1) %5, i64 %234, !dbg !40
  %488 = getelementptr float, ptr addrspace(1) %5, i64 %236, !dbg !40
  %489 = getelementptr float, ptr addrspace(1) %5, i64 %238, !dbg !40
  %490 = getelementptr float, ptr addrspace(1) %5, i64 %240, !dbg !40
  %491 = bitcast float %320 to i32, !dbg !41
  %492 = bitcast float %321 to i32, !dbg !41
  %493 = bitcast float %322 to i32, !dbg !41
  %494 = bitcast float %323 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %491, i32 %492, i32 %493, i32 %494, ptr addrspace(1) %487, i1 %24) #2, !dbg !41
  %495 = bitcast float %324 to i32, !dbg !41
  %496 = bitcast float %325 to i32, !dbg !41
  %497 = bitcast float %326 to i32, !dbg !41
  %498 = bitcast float %327 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %495, i32 %496, i32 %497, i32 %498, ptr addrspace(1) %488, i1 %24) #2, !dbg !41
  %499 = bitcast float %328 to i32, !dbg !41
  %500 = bitcast float %329 to i32, !dbg !41
  %501 = bitcast float %330 to i32, !dbg !41
  %502 = bitcast float %331 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %499, i32 %500, i32 %501, i32 %502, ptr addrspace(1) %489, i1 %24) #2, !dbg !41
  %503 = bitcast float %332 to i32, !dbg !41
  %504 = bitcast float %333 to i32, !dbg !41
  %505 = bitcast float %334 to i32, !dbg !41
  %506 = bitcast float %335 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %503, i32 %504, i32 %505, i32 %506, ptr addrspace(1) %490, i1 %24) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 34, column: 50, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 55, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 46, scope: !7)
!40 = !DILocation(line: 40, column: 25, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
