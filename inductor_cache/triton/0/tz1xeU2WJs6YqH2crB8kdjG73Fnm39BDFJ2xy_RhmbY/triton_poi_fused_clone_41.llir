; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 8, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 4, !dbg !15
  %19 = and i32 %12, 15, !dbg !16
  %20 = or disjoint i32 %18, %19, !dbg !17
  %21 = icmp slt i32 %20, 16, !dbg !18
  %22 = srem i32 %15, 512, !dbg !19
  %23 = srem i32 %16, 512, !dbg !19
  %24 = shl i32 %15, 4, !dbg !20
  %25 = shl i32 %16, 4, !dbg !20
  %26 = add i32 %20, %24, !dbg !21
  %27 = add i32 %20, %25, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %21) #4, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #4, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !25
  %38 = sdiv i32 %15, 16, !dbg !26
  %39 = sdiv i32 %16, 16, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !29
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !30
  %49 = bitcast i32 %48 to float, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = sext i32 %22 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !31
  %54 = sext i32 %23 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #4, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !34
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.560000e+02) #4, !dbg !35
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.560000e+02) #4, !dbg !35
  %64 = fadd float %62, 0x3EE4F8B580000000, !dbg !36
  %65 = fadd float %63, 0x3EE4F8B580000000, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %66, 0, !dbg !37
  br i1 %.not.i, label %69, label %67, !dbg !37

67:                                               ; preds = %9
  %68 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %64), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

69:                                               ; preds = %9
  %70 = tail call float @llvm.nvvm.rsqrt.approx.f(float %64), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %67, %69
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i7 = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i7, label %74, label %72, !dbg !37

72:                                               ; preds = %__nv_rsqrtf.exit
  %73 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %65), !dbg !37
  br label %__nv_rsqrtf.exit9, !dbg !37

74:                                               ; preds = %__nv_rsqrtf.exit
  %75 = tail call float @llvm.nvvm.rsqrt.approx.f(float %65), !dbg !37
  br label %__nv_rsqrtf.exit9, !dbg !37

__nv_rsqrtf.exit9:                                ; preds = %72, %74
  %.0.i8 = phi float [ %73, %72 ], [ %75, %74 ], !dbg !37
  %76 = bitcast i32 %33 to float, !dbg !23
  %77 = bitcast i32 %37 to float, !dbg !25
  %78 = fadd float %76, %77, !dbg !38
  %79 = bitcast i32 %45 to float, !dbg !28
  %80 = fsub float %78, %79, !dbg !39
  %81 = bitcast i32 %32 to float, !dbg !23
  %82 = bitcast i32 %36 to float, !dbg !25
  %83 = fadd float %81, %82, !dbg !38
  %84 = bitcast i32 %44 to float, !dbg !28
  %85 = fsub float %83, %84, !dbg !39
  %86 = bitcast i32 %61 to float, !dbg !34
  %87 = bitcast i32 %60 to float, !dbg !34
  %88 = bitcast i32 %57 to float, !dbg !32
  %89 = bitcast i32 %56 to float, !dbg !32
  %90 = lshr i32 %12, 3, !dbg !16
  %91 = and i32 %90, 15, !dbg !16
  %92 = or disjoint i32 %18, %91, !dbg !17
  %93 = icmp slt i32 %92, 16, !dbg !18
  %94 = shl i32 %12, 1, !dbg !12
  %95 = and i32 %94, 14, !dbg !12
  %96 = or disjoint i32 %11, %95, !dbg !13
  %97 = fmul float %85, %.0.i, !dbg !40
  %98 = fmul float %80, %.0.i8, !dbg !40
  %99 = fmul float %97, %89, !dbg !41
  %100 = fmul float %98, %88, !dbg !41
  %101 = fadd float %99, %87, !dbg !42
  %102 = fadd float %100, %86, !dbg !42
  %103 = shl i32 %92, 11, !dbg !43
  %104 = add i32 %96, %103, !dbg !44
  %105 = sext i32 %104 to i64, !dbg !45
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %105, !dbg !45
  %107 = shl i32 %12, 4, !dbg !46
  %108 = and i32 %107, 240, !dbg !46
  %109 = or disjoint i32 %108, %14, !dbg !46
  %110 = and i32 %94, 254, !dbg !46
  %111 = lshr exact i32 %108, 1, !dbg !46
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !46
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %109, !dbg !46
  %114 = bitcast float %101 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #4, !dbg !46
  %115 = or disjoint i32 %109, 8, !dbg !46
  %116 = getelementptr float, ptr addrspace(3) %112, i32 %115, !dbg !46
  %117 = bitcast float %102 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %118 = lshr i32 %94, 3, !dbg !46
  %119 = and i32 %118, 30, !dbg !46
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !46
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %110, !dbg !46
  %.extract = load i32, ptr addrspace(3) %121, align 8, !dbg !46
  %122 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 4, !dbg !46
  %.extract6 = load i32, ptr addrspace(3) %122, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %106, i1 %93) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmdkxa557rreg7js7t62j4e622sxzgh6exkvh7az5glbbx3sgxa7.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_clone_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_41", linkageName: "triton_poi_fused_clone_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 60, scope: !7)
!21 = !DILocation(line: 31, column: 57, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 65, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 65, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 41, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 28, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 35, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
