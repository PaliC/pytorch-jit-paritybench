; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_div_exp_mul_sigmoid_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = shl i32 %9, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = sdiv i32 %13, 4, !dbg !16
  %20 = shl i32 %19, 4, !dbg !17
  %21 = or disjoint i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = sext i32 %19 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = shl i32 %13, 4, !dbg !23
  %35 = or disjoint i32 %34, %18, !dbg !24
  %36 = sext i32 %35 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !26
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %41 = bitcast i32 %39 to float, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = fsub float 0.000000e+00, %27, !dbg !27
  %44 = fsub float 0.000000e+00, %28, !dbg !27
  %45 = fmul float %43, 0x3FF7154760000000, !dbg !31
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #3, !dbg !31
  %47 = fmul float %44, 0x3FF7154760000000, !dbg !31
  %48 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %47) #3, !dbg !31
  %49 = fadd float %46, 1.000000e+00, !dbg !32
  %50 = fadd float %48, 1.000000e+00, !dbg !32
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %49) #3, !dbg !33
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #3, !dbg !33
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !34
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #3, !dbg !34
  %55 = fmul float %52, 0x3FF7154760000000, !dbg !34
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #3, !dbg !34
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %33) #3, !dbg !35
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %33) #3, !dbg !35
  %59 = fmul float %57, %41, !dbg !36
  %60 = fmul float %58, %42, !dbg !36
  %61 = fadd float %59, %60, !dbg !37
  %62 = select i1 %15, float %61, float 0.000000e+00, !dbg !37
  %63 = bitcast float %62 to i32, !dbg !40
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !40
  %65 = bitcast i32 %64 to float, !dbg !40
  %66 = fadd float %62, %65, !dbg !37
  %67 = bitcast float %66 to i32, !dbg !40
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !40
  %69 = bitcast i32 %68 to float, !dbg !40
  %70 = fadd float %66, %69, !dbg !37
  %71 = bitcast float %70 to i32, !dbg !40
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !40
  %73 = bitcast i32 %72 to float, !dbg !40
  %74 = fadd float %70, %73, !dbg !37
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !41
  %76 = bitcast float %74 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %78 = load i32, ptr addrspace(3) %77, align 4, !dbg !41
  %79 = sext i32 %14 to i64, !dbg !42
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !42
  %81 = and i32 %9, 56, !dbg !43
  %82 = icmp eq i32 %81, 0, !dbg !43
  %83 = and i1 %82, %16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %80, i1 %83) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvhj7nv4uutmwvxpadmyusoenpbleniemtywnay2bidiuol7zk5.py", directory: "inductor_cache/gv")
!4 = !{ptr @triton_per_fused_div_exp_mul_sigmoid_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_exp_mul_sigmoid_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_exp_mul_sigmoid_sum_1", linkageName: "triton_per_fused_div_exp_mul_sigmoid_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 47, column: 30, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 35, column: 22, scope: !7)
!31 = !DILocation(line: 47, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 47, column: 20, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 47, column: 16, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 36, column: 23, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !39)
!38 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !39)
!41 = !DILocation(line: 41, column: 28, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 37, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
