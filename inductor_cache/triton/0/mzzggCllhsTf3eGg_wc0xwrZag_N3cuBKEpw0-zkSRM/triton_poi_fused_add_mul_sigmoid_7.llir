; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %14, !dbg !16
  %21 = or disjoint i32 %19, %11, !dbg !16
  %22 = or disjoint i32 %19, %12, !dbg !16
  %23 = icmp slt i32 %20, 512, !dbg !17
  %24 = icmp slt i32 %21, 512, !dbg !17
  %25 = icmp slt i32 %22, 512, !dbg !17
  %26 = sdiv i32 %15, 4096, !dbg !18
  %27 = sdiv i32 %16, 4096, !dbg !18
  %.frozen = freeze i32 %17, !dbg !18
  %28 = sdiv i32 %.frozen, 4096, !dbg !18
  %29 = mul i32 %28, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = sext i32 %15 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %16 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #2, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = shl i32 %15, 9, !dbg !22
  %45 = shl i32 %16, 9, !dbg !22
  %46 = add i32 %20, %44, !dbg !23
  %47 = add i32 %20, %45, !dbg !23
  %48 = sext i32 %46 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !24
  %50 = sext i32 %47 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #2, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = shl nsw i32 %26, 9, !dbg !26
  %71 = shl nsw i32 %27, 9, !dbg !26
  %72 = add i32 %70, %20, !dbg !27
  %73 = add i32 %71, %20, !dbg !27
  %74 = sext i32 %72 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !28
  %76 = sext i32 %73 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %76, !dbg !28
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %23) #2, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = bitcast i32 %82 to float, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %23) #2, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !29
  %92 = bitcast i32 %88 to float, !dbg !29
  %93 = bitcast i32 %89 to float, !dbg !29
  %94 = bitcast i32 %90 to float, !dbg !29
  %95 = bitcast i32 %91 to float, !dbg !29
  %96 = fsub float 0.000000e+00, %38, !dbg !30
  %97 = fsub float 0.000000e+00, %43, !dbg !30
  %98 = fmul float %96, 0x3FF7154760000000, !dbg !34
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #2, !dbg !34
  %100 = fmul float %97, 0x3FF7154760000000, !dbg !34
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #2, !dbg !34
  %102 = fadd float %99, 1.000000e+00, !dbg !35
  %103 = fadd float %101, 1.000000e+00, !dbg !35
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #2, !dbg !36
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %103) #2, !dbg !36
  %106 = fmul float %104, %57, !dbg !37
  %107 = fmul float %104, %58, !dbg !37
  %108 = fmul float %104, %59, !dbg !37
  %109 = fmul float %104, %60, !dbg !37
  %110 = fmul float %105, %66, !dbg !37
  %111 = fmul float %105, %67, !dbg !37
  %112 = fmul float %105, %68, !dbg !37
  %113 = fmul float %105, %69, !dbg !37
  %114 = fmul float %57, %83, !dbg !38
  %115 = fmul float %58, %84, !dbg !38
  %116 = fmul float %59, %85, !dbg !38
  %117 = fmul float %60, %86, !dbg !38
  %118 = fmul float %66, %92, !dbg !38
  %119 = fmul float %67, %93, !dbg !38
  %120 = fmul float %68, %94, !dbg !38
  %121 = fmul float %69, %95, !dbg !38
  %122 = fadd float %114, %106, !dbg !39
  %123 = fadd float %115, %107, !dbg !39
  %124 = fadd float %116, %108, !dbg !39
  %125 = fadd float %117, %109, !dbg !39
  %126 = fadd float %118, %110, !dbg !39
  %127 = fadd float %119, %111, !dbg !39
  %128 = fadd float %120, %112, !dbg !39
  %129 = fadd float %121, %113, !dbg !39
  %130 = shl i32 %21, 12, !dbg !40
  %131 = shl i32 %22, 12, !dbg !40
  %132 = shl i32 %28, 21, !dbg !41
  %133 = add i32 %132, %.decomposed, !dbg !42
  %134 = add i32 %133, %130, !dbg !43
  %135 = add i32 %133, %131, !dbg !43
  %136 = sext i32 %134 to i64, !dbg !44
  %137 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !44
  %138 = sext i32 %135 to i64, !dbg !44
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !44
  %140 = shl i32 %9, 7, !dbg !45
  %141 = and i32 %140, 896, !dbg !45
  %142 = or disjoint i32 %141, %11, !dbg !45
  %143 = and i32 %13, 508, !dbg !45
  %144 = lshr exact i32 %141, 1, !dbg !45
  %145 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %144, !dbg !45
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !45
  %147 = bitcast float %122 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !45
  %148 = or disjoint i32 %142, 32, !dbg !45
  %149 = lshr i32 %148, 3, !dbg !45
  %150 = and i32 %149, 116, !dbg !45
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !45
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %148, !dbg !45
  %153 = bitcast float %123 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !45
  %154 = or disjoint i32 %142, 64, !dbg !45
  %155 = lshr i32 %154, 3, !dbg !45
  %156 = and i32 %155, 120, !dbg !45
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !45
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %154, !dbg !45
  %159 = bitcast float %124 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !45
  %160 = or disjoint i32 %142, 96, !dbg !45
  %161 = lshr i32 %160, 3, !dbg !45
  %162 = and i32 %161, 124, !dbg !45
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !45
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %160, !dbg !45
  %165 = bitcast float %125 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !45
  %166 = or disjoint i32 %142, 16, !dbg !45
  %167 = getelementptr float, ptr addrspace(3) %145, i32 %166, !dbg !45
  %168 = bitcast float %126 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !45
  %169 = or disjoint i32 %142, 48, !dbg !45
  %170 = lshr i32 %169, 3, !dbg !45
  %171 = and i32 %170, 116, !dbg !45
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !45
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !45
  %174 = bitcast float %127 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !45
  %175 = or disjoint i32 %142, 80, !dbg !45
  %176 = lshr i32 %175, 3, !dbg !45
  %177 = and i32 %176, 120, !dbg !45
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !45
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %175, !dbg !45
  %180 = bitcast float %128 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !45
  %181 = or disjoint i32 %142, 112, !dbg !45
  %182 = lshr i32 %181, 3, !dbg !45
  %183 = and i32 %182, 124, !dbg !45
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !45
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %181, !dbg !45
  %186 = bitcast float %129 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %187 = lshr i32 %13, 3, !dbg !45
  %188 = and i32 %187, 60, !dbg !45
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !45
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %143, !dbg !45
  %191 = or disjoint i32 %143, 512, !dbg !45
  %192 = lshr i32 %191, 3, !dbg !45
  %193 = and i32 %192, 124, !dbg !45
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !45
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %191, !dbg !45
  %196 = load <4 x i32>, ptr addrspace(3) %195, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %190, align 16, !dbg !45
  %197 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 4, !dbg !45
  %.extract8 = load i32, ptr addrspace(3) %197, align 4, !dbg !45
  %198 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 8, !dbg !45
  %.extract9 = load i32, ptr addrspace(3) %198, align 8, !dbg !45
  %199 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 12, !dbg !45
  %.extract10 = load i32, ptr addrspace(3) %199, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %137, i1 %24) #2, !dbg !45
  %.extract11 = extractelement <4 x i32> %196, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %196, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %196, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %196, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %139, i1 %25) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 35, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 39, column: 48, scope: !7)
!42 = !DILocation(line: 39, column: 30, scope: !7)
!43 = !DILocation(line: 39, column: 40, scope: !7)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 59, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
