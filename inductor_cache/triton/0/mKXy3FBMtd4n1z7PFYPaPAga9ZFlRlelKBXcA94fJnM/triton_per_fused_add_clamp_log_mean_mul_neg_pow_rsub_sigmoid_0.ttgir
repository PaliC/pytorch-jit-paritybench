#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":19:0)
#loc1 = loc(unknown)
#loc40 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":59:59)
#loc67 = loc(callsite(#loc1 at #loc40))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_clamp_log_mean_mul_neg_pow_rsub_sigmoid_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<9.99999993E-9> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-02> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.subf %cst_2, %6 : tensor<256xf32, #blocked> loc(#loc50)
    %8 = math.exp %7 : tensor<256xf32, #blocked> loc(#loc51)
    %9 = arith.addf %8, %cst_5 : tensor<256xf32, #blocked> loc(#loc52)
    %10 = arith.divf %cst_5, %9 : tensor<256xf32, #blocked> loc(#loc53)
    %11 = arith.cmpf ogt, %10, %cst_1 : tensor<256xf32, #blocked> loc(#loc54)
    %12 = arith.cmpf une, %10, %10 : tensor<256xf32, #blocked> loc(#loc55)
    %13 = arith.ori %11, %12 : tensor<256xi1, #blocked> loc(#loc56)
    %14 = arith.select %13, %10, %cst_1 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc57)
    %15 = math.log %14 : tensor<256xf32, #blocked> loc(#loc17)
    %16 = arith.mulf %3, %15 : tensor<256xf32, #blocked> loc(#loc18)
    %17 = arith.subf %cst_5, %3 : tensor<256xf32, #blocked> loc(#loc19)
    %18 = arith.subf %cst_5, %10 : tensor<256xf32, #blocked> loc(#loc20)
    %19 = arith.addf %18, %cst_4 : tensor<256xf32, #blocked> loc(#loc21)
    %20 = arith.cmpf olt, %19, %cst_5 : tensor<256xf32, #blocked> loc(#loc58)
    %21 = arith.cmpf une, %19, %19 : tensor<256xf32, #blocked> loc(#loc59)
    %22 = arith.ori %20, %21 : tensor<256xi1, #blocked> loc(#loc60)
    %23 = arith.select %22, %19, %cst_5 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc61)
    %24 = arith.cmpf ogt, %23, %cst_1 : tensor<256xf32, #blocked> loc(#loc62)
    %25 = arith.cmpf une, %23, %23 : tensor<256xf32, #blocked> loc(#loc63)
    %26 = arith.ori %24, %25 : tensor<256xi1, #blocked> loc(#loc64)
    %27 = arith.select %26, %23, %cst_1 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc65)
    %28 = math.log %27 : tensor<256xf32, #blocked> loc(#loc28)
    %29 = arith.mulf %17, %28 : tensor<256xf32, #blocked> loc(#loc29)
    %30 = arith.addf %16, %29 : tensor<256xf32, #blocked> loc(#loc30)
    %31 = arith.mulf %10, %3 : tensor<256xf32, #blocked> loc(#loc31)
    %32 = arith.mulf %23, %17 : tensor<256xf32, #blocked> loc(#loc32)
    %33 = arith.addf %31, %32 : tensor<256xf32, #blocked> loc(#loc33)
    %34 = arith.subf %cst_5, %33 : tensor<256xf32, #blocked> loc(#loc34)
    %35 = arith.mulf %17, %cst_3 : tensor<256xf32, #blocked> loc(#loc35)
    %36 = arith.addf %3, %35 : tensor<256xf32, #blocked> loc(#loc36)
    %37 = tt.extern_elementwise %34, %36 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<256xf32, #blocked>, tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc37)
    %38 = arith.mulf %30, %37 : tensor<256xf32, #blocked> loc(#loc38)
    %39 = "tt.reduce"(%38) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc40)), %arg5: f32 loc(callsite(#loc1 at #loc40))):
      %46 = arith.addf %arg4, %arg5 : f32 loc(#loc70)
      tt.reduce.return %46 : f32 loc(#loc66)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc66)
    %40 = arith.addf %39, %cst_0 : f32 loc(#loc69)
    %41 = arith.divf %40, %cst : f32 loc(#loc44)
    %42 = arith.subf %cst_0, %41 : f32 loc(#loc45)
    %43 = tt.splat %42 : f32 -> tensor<1xf32, #blocked1> loc(#loc45)
    gpu.barrier loc(#loc46)
    %44 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc47)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc47)
    tt.store %45, %43 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc48)
    tt.return loc(#loc49)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":27:26)
#loc3 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":31:30)
#loc4 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":31:35)
#loc5 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":32:30)
#loc6 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":32:35)
#loc7 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc8 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":33:22)
#loc9 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc13 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":35:40)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc17 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":36:23)
#loc18 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":37:18)
#loc19 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":39:18)
#loc20 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":40:18)
#loc21 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":42:19)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":110:15)
#loc23 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":43:42)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":112:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":113:29)
#loc27 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":44:42)
#loc28 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":45:24)
#loc29 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":46:19)
#loc30 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":47:19)
#loc31 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":48:19)
#loc32 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":49:20)
#loc33 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":50:20)
#loc34 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":51:19)
#loc35 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":54:19)
#loc36 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":55:20)
#loc37 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":56:33)
#loc38 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":57:20)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc43 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":59:45)
#loc44 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":61:20)
#loc45 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":62:13)
#loc46 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":63:4)
#loc47 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":64:28)
#loc48 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":64:63)
#loc49 = loc("inductor_cache/iv/civrwwaavrssxkl6xij5tsy7cmqmqaj2luue7phydh7b3zkz3wn3.py":64:4)
#loc50 = loc(callsite(#loc7 at #loc8))
#loc51 = loc(callsite(#loc9 at #loc8))
#loc52 = loc(callsite(#loc10 at #loc8))
#loc53 = loc(callsite(#loc11 at #loc8))
#loc54 = loc(callsite(#loc12 at #loc13))
#loc55 = loc(callsite(#loc14 at #loc13))
#loc56 = loc(callsite(#loc15 at #loc13))
#loc57 = loc(callsite(#loc16 at #loc13))
#loc58 = loc(callsite(#loc22 at #loc23))
#loc59 = loc(callsite(#loc24 at #loc23))
#loc60 = loc(callsite(#loc25 at #loc23))
#loc61 = loc(callsite(#loc26 at #loc23))
#loc62 = loc(callsite(#loc12 at #loc27))
#loc63 = loc(callsite(#loc14 at #loc27))
#loc64 = loc(callsite(#loc15 at #loc27))
#loc65 = loc(callsite(#loc16 at #loc27))
#loc66 = loc(callsite(#loc39 at #loc40))
#loc68 = loc(callsite(#loc41 at #loc39))
#loc69 = loc(callsite(#loc42 at #loc43))
#loc70 = loc(callsite(#loc68 at #loc40))
