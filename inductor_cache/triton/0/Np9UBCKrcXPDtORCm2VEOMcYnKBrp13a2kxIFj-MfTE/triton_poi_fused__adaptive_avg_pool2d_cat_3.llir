; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = or disjoint i32 %8, 128, !dbg !13
  %10 = icmp slt i32 %8, 1024, !dbg !14
  %11 = icmp slt i32 %9, 1024, !dbg !14
  %12 = sdiv i32 %8, 8, !dbg !15
  %13 = sdiv i32 %9, 8, !dbg !15
  %14 = srem i32 %13, 8, !dbg !16
  %15 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !17
  %16 = insertelement <2 x i32> %15, i32 %9, i64 1, !dbg !17
  %17 = sdiv <2 x i32> %16, splat (i32 64), !dbg !17
  %18 = srem i32 %8, 64, !dbg !18
  %.lhs.trunc1 = trunc nsw i32 %14 to i8, !dbg !19
  %19 = shl nsw i8 %.lhs.trunc1, 2, !dbg !20
  %.lhs.trunc5 = add nsw i8 %19, 11, !dbg !20
  %20 = insertelement <2 x i8> poison, i8 %.lhs.trunc1, i64 0, !dbg !19
  %21 = insertelement <2 x i8> %20, i8 %.lhs.trunc5, i64 1, !dbg !19
  %22 = sdiv <2 x i8> %21, <i8 2, i8 8>, !dbg !19
  %23 = extractelement <2 x i8> %22, i64 0, !dbg !21
  %24 = extractelement <2 x i8> %22, i64 1, !dbg !21
  %.sext6 = sext i8 %24 to i32, !dbg !20
  %25 = icmp slt i8 %23, %24, !dbg !21
  %26 = shl nsw <2 x i32> %17, splat (i32 4), !dbg !22
  %27 = insertelement <2 x i32> %15, i32 %12, i64 1, !dbg !23
  %28 = srem <2 x i32> %27, splat (i32 8), !dbg !23
  %29 = trunc nsw <2 x i32> %28 to <2 x i8>, !dbg !24
  %30 = sdiv <2 x i8> %29, splat (i8 2), !dbg !24
  %31 = shl nsw <2 x i8> %29, splat (i8 2), !dbg !25
  %32 = add nsw <2 x i8> %31, splat (i8 11), !dbg !25
  %33 = sdiv <2 x i8> %32, splat (i8 8), !dbg !25
  %34 = icmp slt <2 x i8> %30, %33, !dbg !26
  %35 = extractelement <2 x i1> %34, i64 0, !dbg !27
  %36 = extractelement <2 x i1> %34, i64 1, !dbg !28
  %37 = and i1 %35, %36, !dbg !28
  %38 = and i1 %35, %25, !dbg !28
  %39 = extractelement <2 x i8> %30, i64 0, !dbg !29
  %40 = sext i8 %39 to i32, !dbg !29
  %41 = and i1 %10, %37, !dbg !30
  %42 = and i1 %11, %38, !dbg !30
  %43 = add nsw <2 x i8> %30, splat (i8 1), !dbg !31
  %44 = icmp slt <2 x i8> %43, %33, !dbg !32
  %45 = extractelement <2 x i1> %44, i64 0, !dbg !33
  %46 = and i1 %36, %45, !dbg !33
  %47 = and i1 %25, %45, !dbg !33
  %.sext2 = sext i8 %23 to i32, !dbg !19
  %48 = shufflevector <2 x i8> %30, <2 x i8> %22, <2 x i32> <i32 1, i32 2>, !dbg !34
  %49 = sext <2 x i8> %48 to <2 x i32>, !dbg !34
  %50 = add nsw i32 %.sext2, 1, !dbg !35
  %51 = shl nsw <2 x i32> %49, splat (i32 2), !dbg !34
  %52 = shufflevector <2 x i32> %51, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %53 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !29
  %54 = shufflevector <2 x i32> %53, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !29
  %55 = add nsw <2 x i32> %26, %54, !dbg !29
  %56 = shufflevector <2 x i32> %55, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %57 = extractelement <2 x i32> %55, i64 0, !dbg !36
  %58 = add nsw i32 %57, 1, !dbg !36
  %59 = extractelement <2 x i32> %55, i64 1, !dbg !36
  %60 = add nsw i32 %59, 1, !dbg !36
  %61 = insertelement <4 x i32> %56, i32 %58, i64 2, !dbg !37
  %62 = insertelement <4 x i32> %61, i32 %60, i64 3, !dbg !37
  %63 = add nsw <4 x i32> %62, %52, !dbg !37
  %64 = extractelement <4 x i32> %63, i64 0, !dbg !38
  %65 = sext i32 %64 to i64, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !38
  %67 = extractelement <4 x i32> %63, i64 1, !dbg !38
  %68 = sext i32 %67 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %41, i32 0, i1 %41) #1, !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %42, i32 0, i1 %42) #1, !dbg !39
  %73 = bitcast i32 %72 to float, !dbg !39
  %74 = extractelement <4 x i32> %63, i64 2, !dbg !40
  %75 = sext i32 %74 to i64, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !40
  %77 = extractelement <4 x i32> %63, i64 3, !dbg !40
  %78 = sext i32 %77 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !40
  %80 = and i1 %10, %46, !dbg !41
  %81 = and i1 %11, %47, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %80, i32 0, i1 %80) #1, !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %81, i32 0, i1 %81) #1, !dbg !42
  %85 = bitcast i32 %84 to float, !dbg !42
  %86 = fadd float %71, %83, !dbg !43
  %87 = fadd float %73, %85, !dbg !43
  %88 = icmp slt i32 %50, %.sext6, !dbg !44
  %89 = extractelement <2 x i1> %44, i64 1, !dbg !45
  %90 = and i1 %35, %89, !dbg !27
  %91 = and i1 %35, %88, !dbg !27
  %92 = add nsw <4 x i32> %56, <i32 4, i32 4, i32 5, i32 5>, !dbg !46
  %93 = add nsw <4 x i32> %92, %52, !dbg !47
  %94 = extractelement <4 x i32> %93, i64 0, !dbg !48
  %95 = sext i32 %94 to i64, !dbg !48
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !48
  %97 = extractelement <4 x i32> %93, i64 1, !dbg !48
  %98 = sext i32 %97 to i64, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !48
  %100 = and i1 %10, %90, !dbg !49
  %101 = and i1 %11, %91, !dbg !49
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %100, i32 0, i1 %100) #1, !dbg !50
  %103 = bitcast i32 %102 to float, !dbg !50
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %101, i32 0, i1 %101) #1, !dbg !50
  %105 = bitcast i32 %104 to float, !dbg !50
  %106 = fadd float %86, %103, !dbg !51
  %107 = fadd float %87, %105, !dbg !51
  %108 = and i1 %45, %89, !dbg !45
  %109 = and i1 %45, %88, !dbg !45
  %110 = extractelement <4 x i32> %93, i64 2, !dbg !52
  %111 = sext i32 %110 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !52
  %113 = extractelement <4 x i32> %93, i64 3, !dbg !52
  %114 = sext i32 %113 to i64, !dbg !52
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !52
  %116 = and i1 %10, %108, !dbg !53
  %117 = and i1 %11, %109, !dbg !53
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %116, i32 0, i1 %116) #1, !dbg !54
  %119 = bitcast i32 %118 to float, !dbg !54
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %117, i32 0, i1 %117) #1, !dbg !54
  %121 = bitcast i32 %120 to float, !dbg !54
  %122 = fadd float %106, %119, !dbg !55
  %123 = fadd float %107, %121, !dbg !55
  %124 = select i1 %37, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %125 = select i1 %38, float 1.000000e+00, float 0.000000e+00, !dbg !56
  %126 = select i1 %46, float 1.000000e+00, float 0.000000e+00, !dbg !57
  %127 = select i1 %47, float 1.000000e+00, float 0.000000e+00, !dbg !57
  %128 = fadd float %126, %124, !dbg !58
  %129 = fadd float %127, %125, !dbg !58
  %130 = select i1 %90, float 1.000000e+00, float 0.000000e+00, !dbg !59
  %131 = select i1 %91, float 1.000000e+00, float 0.000000e+00, !dbg !59
  %132 = fadd float %130, %128, !dbg !60
  %133 = fadd float %131, %129, !dbg !60
  %134 = select i1 %108, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %135 = select i1 %109, float 1.000000e+00, float 0.000000e+00, !dbg !61
  %136 = fadd float %134, %132, !dbg !62
  %137 = fadd float %135, %133, !dbg !62
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %136) #1, !dbg !63
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %137) #1, !dbg !63
  %140 = extractelement <2 x i32> %17, i64 0, !dbg !64
  %141 = mul i32 %140, 110, !dbg !64
  %142 = extractelement <2 x i32> %17, i64 1, !dbg !64
  %143 = mul i32 %142, 110, !dbg !64
  %144 = add i32 %141, %18, !dbg !65
  %145 = add i32 %143, %18, !dbg !65
  %146 = sext i32 %144 to i64, !dbg !66
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !66
  %148 = sext i32 %145 to i64, !dbg !66
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !66
  %150 = bitcast float %138 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %147, i1 %10) #1, !dbg !67
  %151 = bitcast float %139 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %149, i1 %11) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnqt5t65aadhnkxckudje5bjhav3xxw4vvji7sys34lgtddlzvb3.py", directory: "inductor_cache/nq")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_cat_3", linkageName: "triton_poi_fused__adaptive_avg_pool2d_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 17, scope: !7)
!20 = !DILocation(line: 30, column: 26, scope: !7)
!21 = !DILocation(line: 31, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 47, scope: !7)
!23 = !DILocation(line: 25, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 17, scope: !7)
!25 = !DILocation(line: 33, column: 26, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 44, column: 20, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 44, scope: !7)
!30 = !DILocation(line: 36, column: 71, scope: !7)
!31 = !DILocation(line: 37, column: 16, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 36, column: 33, scope: !7)
!35 = !DILocation(line: 42, column: 17, scope: !7)
!36 = !DILocation(line: 40, column: 49, scope: !7)
!37 = !DILocation(line: 36, column: 53, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 64, scope: !7)
!40 = !DILocation(line: 40, column: 31, scope: !7)
!41 = !DILocation(line: 40, column: 77, scope: !7)
!42 = !DILocation(line: 40, column: 69, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 43, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 45, column: 49, scope: !7)
!47 = !DILocation(line: 45, column: 58, scope: !7)
!48 = !DILocation(line: 45, column: 31, scope: !7)
!49 = !DILocation(line: 45, column: 77, scope: !7)
!50 = !DILocation(line: 45, column: 69, scope: !7)
!51 = !DILocation(line: 46, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 31, scope: !7)
!53 = !DILocation(line: 48, column: 77, scope: !7)
!54 = !DILocation(line: 48, column: 69, scope: !7)
!55 = !DILocation(line: 49, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 34, scope: !7)
!57 = !DILocation(line: 55, column: 35, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 35, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 35, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 34, scope: !7)
!65 = !DILocation(line: 66, column: 30, scope: !7)
!66 = !DILocation(line: 66, column: 25, scope: !7)
!67 = !DILocation(line: 66, column: 46, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
