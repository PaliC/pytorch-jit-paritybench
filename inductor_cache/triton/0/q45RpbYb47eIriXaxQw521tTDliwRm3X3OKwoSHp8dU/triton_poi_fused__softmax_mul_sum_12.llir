; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_mul_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 640, !dbg !13
  %21 = or disjoint i32 %15, 768, !dbg !13
  %22 = or disjoint i32 %15, 896, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %26 = icmp slt i32 %25, 512, !dbg !15
  %27 = sdiv i32 %15, 4096, !dbg !16
  %28 = sdiv i32 %16, 4096, !dbg !16
  %29 = sdiv i32 %17, 4096, !dbg !16
  %30 = sdiv i32 %18, 4096, !dbg !16
  %31 = sdiv i32 %19, 4096, !dbg !16
  %32 = sdiv i32 %20, 4096, !dbg !16
  %33 = sdiv i32 %21, 4096, !dbg !16
  %34 = sdiv i32 %22, 4096, !dbg !16
  %.frozen = freeze i32 %23, !dbg !16
  %35 = sdiv i32 %.frozen, 4096, !dbg !16
  %.frozen30 = freeze i32 %24, !dbg !16
  %36 = sdiv i32 %.frozen30, 4096, !dbg !16
  %37 = mul i32 %35, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %37, !dbg !17
  %38 = mul i32 %36, 4096, !dbg !17
  %.decomposed31 = sub i32 %.frozen30, %38, !dbg !17
  %39 = shl nsw i32 %27, 9, !dbg !18
  %40 = shl nsw i32 %28, 9, !dbg !18
  %41 = shl nsw i32 %29, 9, !dbg !18
  %42 = shl nsw i32 %30, 9, !dbg !18
  %43 = shl nsw i32 %31, 9, !dbg !18
  %44 = shl nsw i32 %32, 9, !dbg !18
  %45 = shl nsw i32 %33, 9, !dbg !18
  %46 = shl nsw i32 %34, 9, !dbg !18
  %47 = add i32 %39, %25, !dbg !19
  %48 = add i32 %40, %25, !dbg !19
  %49 = add i32 %41, %25, !dbg !19
  %50 = add i32 %42, %25, !dbg !19
  %51 = add i32 %25, %43, !dbg !19
  %52 = add i32 %25, %44, !dbg !19
  %53 = add i32 %25, %45, !dbg !19
  %54 = add i32 %25, %46, !dbg !19
  %55 = sext i32 %47 to i64, !dbg !20
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !20
  %57 = sext i32 %48 to i64, !dbg !20
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !20
  %59 = sext i32 %49 to i64, !dbg !20
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !20
  %61 = sext i32 %50 to i64, !dbg !20
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !20
  %63 = sext i32 %51 to i64, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !20
  %65 = sext i32 %52 to i64, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !20
  %67 = sext i32 %53 to i64, !dbg !20
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !20
  %69 = sext i32 %54 to i64, !dbg !20
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !20
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %26) #2, !dbg !21
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %26) #2, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %26) #2, !dbg !21
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %26) #2, !dbg !21
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %26) #2, !dbg !21
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %26) #2, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %26) #2, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %26) #2, !dbg !21
  %79 = shl i32 %15, 9, !dbg !22
  %80 = shl i32 %16, 9, !dbg !22
  %81 = shl i32 %17, 9, !dbg !22
  %82 = shl i32 %18, 9, !dbg !22
  %83 = shl i32 %19, 9, !dbg !22
  %84 = shl i32 %20, 9, !dbg !22
  %85 = shl i32 %21, 9, !dbg !22
  %86 = shl i32 %22, 9, !dbg !22
  %87 = add i32 %79, %25, !dbg !23
  %88 = add i32 %80, %25, !dbg !23
  %89 = add i32 %81, %25, !dbg !23
  %90 = add i32 %82, %25, !dbg !23
  %91 = add i32 %25, %83, !dbg !23
  %92 = add i32 %25, %84, !dbg !23
  %93 = add i32 %25, %85, !dbg !23
  %94 = add i32 %25, %86, !dbg !23
  %95 = sext i32 %87 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !24
  %97 = sext i32 %88 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !24
  %99 = sext i32 %89 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !24
  %101 = sext i32 %90 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !24
  %103 = sext i32 %91 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !24
  %105 = sext i32 %92 to i64, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !24
  %107 = sext i32 %93 to i64, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !24
  %109 = sext i32 %94 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !24
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %26) #2, !dbg !25
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %26) #2, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !25
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %26) #2, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %26) #2, !dbg !25
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %26) #2, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %26) #2, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %26) #2, !dbg !25
  %119 = add i32 %25, 2048, !dbg !26
  %120 = add i32 %39, %119, !dbg !27
  %121 = add i32 %40, %119, !dbg !27
  %122 = add i32 %41, %119, !dbg !27
  %123 = add i32 %42, %119, !dbg !27
  %124 = add i32 %119, %43, !dbg !27
  %125 = add i32 %119, %44, !dbg !27
  %126 = add i32 %119, %45, !dbg !27
  %127 = add i32 %119, %46, !dbg !27
  %128 = sext i32 %120 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !28
  %130 = sext i32 %121 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !28
  %132 = sext i32 %122 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !28
  %134 = sext i32 %123 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !28
  %136 = sext i32 %124 to i64, !dbg !28
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !28
  %138 = sext i32 %125 to i64, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !28
  %140 = sext i32 %126 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !28
  %142 = sext i32 %127 to i64, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !28
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %26) #2, !dbg !29
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %26) #2, !dbg !29
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %26) #2, !dbg !29
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %26) #2, !dbg !29
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %26) #2, !dbg !29
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %26) #2, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %26) #2, !dbg !29
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %26) #2, !dbg !29
  %152 = add i32 %25, 8388608, !dbg !30
  %153 = add i32 %79, %152, !dbg !31
  %154 = add i32 %80, %152, !dbg !31
  %155 = add i32 %81, %152, !dbg !31
  %156 = add i32 %82, %152, !dbg !31
  %157 = add i32 %152, %83, !dbg !31
  %158 = add i32 %152, %84, !dbg !31
  %159 = add i32 %152, %85, !dbg !31
  %160 = add i32 %152, %86, !dbg !31
  %161 = sext i32 %153 to i64, !dbg !32
  %162 = getelementptr float, ptr addrspace(1) %1, i64 %161, !dbg !32
  %163 = sext i32 %154 to i64, !dbg !32
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %163, !dbg !32
  %165 = sext i32 %155 to i64, !dbg !32
  %166 = getelementptr float, ptr addrspace(1) %1, i64 %165, !dbg !32
  %167 = sext i32 %156 to i64, !dbg !32
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %167, !dbg !32
  %169 = sext i32 %157 to i64, !dbg !32
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !32
  %171 = sext i32 %158 to i64, !dbg !32
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %171, !dbg !32
  %173 = sext i32 %159 to i64, !dbg !32
  %174 = getelementptr float, ptr addrspace(1) %1, i64 %173, !dbg !32
  %175 = sext i32 %160 to i64, !dbg !32
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !32
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %26) #2, !dbg !33
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %26) #2, !dbg !33
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %26) #2, !dbg !33
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %26) #2, !dbg !33
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %26) #2, !dbg !33
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %26) #2, !dbg !33
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %26) #2, !dbg !33
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %26) #2, !dbg !33
  %185 = add i32 %25, 4096, !dbg !34
  %186 = add i32 %39, %185, !dbg !35
  %187 = add i32 %40, %185, !dbg !35
  %188 = add i32 %41, %185, !dbg !35
  %189 = add i32 %42, %185, !dbg !35
  %190 = add i32 %185, %43, !dbg !35
  %191 = add i32 %185, %44, !dbg !35
  %192 = add i32 %185, %45, !dbg !35
  %193 = add i32 %185, %46, !dbg !35
  %194 = sext i32 %186 to i64, !dbg !36
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !36
  %196 = sext i32 %187 to i64, !dbg !36
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !36
  %198 = sext i32 %188 to i64, !dbg !36
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !36
  %200 = sext i32 %189 to i64, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !36
  %202 = sext i32 %190 to i64, !dbg !36
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !36
  %204 = sext i32 %191 to i64, !dbg !36
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !36
  %206 = sext i32 %192 to i64, !dbg !36
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !36
  %208 = sext i32 %193 to i64, !dbg !36
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !36
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %26) #2, !dbg !37
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %26) #2, !dbg !37
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %26) #2, !dbg !37
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %26) #2, !dbg !37
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %26) #2, !dbg !37
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %26) #2, !dbg !37
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %26) #2, !dbg !37
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %26) #2, !dbg !37
  %218 = add i32 %25, 16777216, !dbg !38
  %219 = add i32 %79, %218, !dbg !39
  %220 = add i32 %80, %218, !dbg !39
  %221 = add i32 %81, %218, !dbg !39
  %222 = add i32 %82, %218, !dbg !39
  %223 = add i32 %218, %83, !dbg !39
  %224 = add i32 %218, %84, !dbg !39
  %225 = add i32 %218, %85, !dbg !39
  %226 = add i32 %218, %86, !dbg !39
  %227 = sext i32 %219 to i64, !dbg !40
  %228 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !40
  %229 = sext i32 %220 to i64, !dbg !40
  %230 = getelementptr float, ptr addrspace(1) %1, i64 %229, !dbg !40
  %231 = sext i32 %221 to i64, !dbg !40
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %231, !dbg !40
  %233 = sext i32 %222 to i64, !dbg !40
  %234 = getelementptr float, ptr addrspace(1) %1, i64 %233, !dbg !40
  %235 = sext i32 %223 to i64, !dbg !40
  %236 = getelementptr float, ptr addrspace(1) %1, i64 %235, !dbg !40
  %237 = sext i32 %224 to i64, !dbg !40
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %237, !dbg !40
  %239 = sext i32 %225 to i64, !dbg !40
  %240 = getelementptr float, ptr addrspace(1) %1, i64 %239, !dbg !40
  %241 = sext i32 %226 to i64, !dbg !40
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !40
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %26) #2, !dbg !41
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %26) #2, !dbg !41
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %26) #2, !dbg !41
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %26) #2, !dbg !41
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %26) #2, !dbg !41
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %26) #2, !dbg !41
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %26) #2, !dbg !41
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %26) #2, !dbg !41
  %251 = add i32 %25, 6144, !dbg !42
  %252 = add i32 %39, %251, !dbg !43
  %253 = add i32 %40, %251, !dbg !43
  %254 = add i32 %41, %251, !dbg !43
  %255 = add i32 %42, %251, !dbg !43
  %256 = add i32 %251, %43, !dbg !43
  %257 = add i32 %251, %44, !dbg !43
  %258 = add i32 %251, %45, !dbg !43
  %259 = add i32 %251, %46, !dbg !43
  %260 = sext i32 %252 to i64, !dbg !44
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !44
  %262 = sext i32 %253 to i64, !dbg !44
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !44
  %264 = sext i32 %254 to i64, !dbg !44
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !44
  %266 = sext i32 %255 to i64, !dbg !44
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !44
  %268 = sext i32 %256 to i64, !dbg !44
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !44
  %270 = sext i32 %257 to i64, !dbg !44
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !44
  %272 = sext i32 %258 to i64, !dbg !44
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !44
  %274 = sext i32 %259 to i64, !dbg !44
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !44
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %261, i1 %26) #2, !dbg !45
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %26) #2, !dbg !45
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %265, i1 %26) #2, !dbg !45
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %267, i1 %26) #2, !dbg !45
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 %26) #2, !dbg !45
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %26) #2, !dbg !45
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 %26) #2, !dbg !45
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 %26) #2, !dbg !45
  %284 = add i32 %25, 25165824, !dbg !46
  %285 = add i32 %79, %284, !dbg !47
  %286 = add i32 %80, %284, !dbg !47
  %287 = add i32 %81, %284, !dbg !47
  %288 = add i32 %82, %284, !dbg !47
  %289 = add i32 %284, %83, !dbg !47
  %290 = add i32 %284, %84, !dbg !47
  %291 = add i32 %284, %85, !dbg !47
  %292 = add i32 %284, %86, !dbg !47
  %293 = sext i32 %285 to i64, !dbg !48
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %293, !dbg !48
  %295 = sext i32 %286 to i64, !dbg !48
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %295, !dbg !48
  %297 = sext i32 %287 to i64, !dbg !48
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %297, !dbg !48
  %299 = sext i32 %288 to i64, !dbg !48
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !48
  %301 = sext i32 %289 to i64, !dbg !48
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %301, !dbg !48
  %303 = sext i32 %290 to i64, !dbg !48
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %303, !dbg !48
  %305 = sext i32 %291 to i64, !dbg !48
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !48
  %307 = sext i32 %292 to i64, !dbg !48
  %308 = getelementptr float, ptr addrspace(1) %1, i64 %307, !dbg !48
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 %26) #2, !dbg !49
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 %26) #2, !dbg !49
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %26) #2, !dbg !49
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %26) #2, !dbg !49
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 %26) #2, !dbg !49
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 %26) #2, !dbg !49
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 %26) #2, !dbg !49
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 %26) #2, !dbg !49
  %317 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !21
  %318 = insertelement <2 x i32> %317, i32 %144, i64 1, !dbg !21
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !21
  %320 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !25
  %321 = insertelement <2 x i32> %320, i32 %177, i64 1, !dbg !25
  %322 = bitcast <2 x i32> %321 to <2 x float>, !dbg !25
  %323 = fmul <2 x float> %319, %322, !dbg !50
  %324 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !21
  %325 = insertelement <2 x i32> %324, i32 %145, i64 1, !dbg !21
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !21
  %327 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !25
  %328 = insertelement <2 x i32> %327, i32 %178, i64 1, !dbg !25
  %329 = bitcast <2 x i32> %328 to <2 x float>, !dbg !25
  %330 = fmul <2 x float> %326, %329, !dbg !50
  %331 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !21
  %332 = insertelement <2 x i32> %331, i32 %146, i64 1, !dbg !21
  %333 = bitcast <2 x i32> %332 to <2 x float>, !dbg !21
  %334 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !25
  %335 = insertelement <2 x i32> %334, i32 %179, i64 1, !dbg !25
  %336 = bitcast <2 x i32> %335 to <2 x float>, !dbg !25
  %337 = fmul <2 x float> %333, %336, !dbg !50
  %338 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !21
  %339 = insertelement <2 x i32> %338, i32 %147, i64 1, !dbg !21
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !21
  %341 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !25
  %342 = insertelement <2 x i32> %341, i32 %180, i64 1, !dbg !25
  %343 = bitcast <2 x i32> %342 to <2 x float>, !dbg !25
  %344 = fmul <2 x float> %340, %343, !dbg !50
  %345 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !21
  %346 = insertelement <2 x i32> %345, i32 %148, i64 1, !dbg !21
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !21
  %348 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !25
  %349 = insertelement <2 x i32> %348, i32 %181, i64 1, !dbg !25
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !25
  %351 = fmul <2 x float> %347, %350, !dbg !50
  %352 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !21
  %353 = insertelement <2 x i32> %352, i32 %149, i64 1, !dbg !21
  %354 = bitcast <2 x i32> %353 to <2 x float>, !dbg !21
  %355 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !25
  %356 = insertelement <2 x i32> %355, i32 %182, i64 1, !dbg !25
  %357 = bitcast <2 x i32> %356 to <2 x float>, !dbg !25
  %358 = fmul <2 x float> %354, %357, !dbg !50
  %359 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !21
  %360 = insertelement <2 x i32> %359, i32 %150, i64 1, !dbg !21
  %361 = bitcast <2 x i32> %360 to <2 x float>, !dbg !21
  %362 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !25
  %363 = insertelement <2 x i32> %362, i32 %183, i64 1, !dbg !25
  %364 = bitcast <2 x i32> %363 to <2 x float>, !dbg !25
  %365 = fmul <2 x float> %361, %364, !dbg !50
  %366 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !21
  %367 = insertelement <2 x i32> %366, i32 %151, i64 1, !dbg !21
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !21
  %369 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !25
  %370 = insertelement <2 x i32> %369, i32 %184, i64 1, !dbg !25
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !25
  %372 = fmul <2 x float> %368, %371, !dbg !50
  %shift = shufflevector <2 x float> %323, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %373 = fadd <2 x float> %323, %shift, !dbg !51
  %shift15 = shufflevector <2 x float> %330, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %374 = fadd <2 x float> %330, %shift15, !dbg !51
  %shift16 = shufflevector <2 x float> %337, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %375 = fadd <2 x float> %337, %shift16, !dbg !51
  %shift17 = shufflevector <2 x float> %344, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %376 = fadd <2 x float> %344, %shift17, !dbg !51
  %shift18 = shufflevector <2 x float> %351, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %377 = fadd <2 x float> %351, %shift18, !dbg !51
  %shift19 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %378 = fadd <2 x float> %358, %shift19, !dbg !51
  %shift20 = shufflevector <2 x float> %365, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %379 = fadd <2 x float> %365, %shift20, !dbg !51
  %shift21 = shufflevector <2 x float> %372, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !51
  %380 = fadd <2 x float> %372, %shift21, !dbg !51
  %381 = insertelement <2 x i32> poison, i32 %210, i64 0, !dbg !37
  %382 = insertelement <2 x i32> %381, i32 %276, i64 1, !dbg !37
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !37
  %384 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !41
  %385 = insertelement <2 x i32> %384, i32 %309, i64 1, !dbg !41
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !41
  %387 = fmul <2 x float> %383, %386, !dbg !52
  %388 = fadd <2 x float> %373, %387, !dbg !53
  %389 = insertelement <2 x i32> poison, i32 %211, i64 0, !dbg !37
  %390 = insertelement <2 x i32> %389, i32 %277, i64 1, !dbg !37
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !37
  %392 = insertelement <2 x i32> poison, i32 %244, i64 0, !dbg !41
  %393 = insertelement <2 x i32> %392, i32 %310, i64 1, !dbg !41
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !41
  %395 = fmul <2 x float> %391, %394, !dbg !52
  %396 = fadd <2 x float> %374, %395, !dbg !53
  %397 = insertelement <2 x i32> poison, i32 %212, i64 0, !dbg !37
  %398 = insertelement <2 x i32> %397, i32 %278, i64 1, !dbg !37
  %399 = bitcast <2 x i32> %398 to <2 x float>, !dbg !37
  %400 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !41
  %401 = insertelement <2 x i32> %400, i32 %311, i64 1, !dbg !41
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !41
  %403 = fmul <2 x float> %399, %402, !dbg !52
  %404 = fadd <2 x float> %375, %403, !dbg !53
  %405 = insertelement <2 x i32> poison, i32 %213, i64 0, !dbg !37
  %406 = insertelement <2 x i32> %405, i32 %279, i64 1, !dbg !37
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !37
  %408 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !41
  %409 = insertelement <2 x i32> %408, i32 %312, i64 1, !dbg !41
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !41
  %411 = fmul <2 x float> %407, %410, !dbg !52
  %412 = fadd <2 x float> %376, %411, !dbg !53
  %413 = insertelement <2 x i32> poison, i32 %214, i64 0, !dbg !37
  %414 = insertelement <2 x i32> %413, i32 %280, i64 1, !dbg !37
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !37
  %416 = insertelement <2 x i32> poison, i32 %247, i64 0, !dbg !41
  %417 = insertelement <2 x i32> %416, i32 %313, i64 1, !dbg !41
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !41
  %419 = fmul <2 x float> %415, %418, !dbg !52
  %420 = fadd <2 x float> %377, %419, !dbg !53
  %421 = insertelement <2 x i32> poison, i32 %215, i64 0, !dbg !37
  %422 = insertelement <2 x i32> %421, i32 %281, i64 1, !dbg !37
  %423 = bitcast <2 x i32> %422 to <2 x float>, !dbg !37
  %424 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !41
  %425 = insertelement <2 x i32> %424, i32 %314, i64 1, !dbg !41
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !41
  %427 = fmul <2 x float> %423, %426, !dbg !52
  %428 = fadd <2 x float> %378, %427, !dbg !53
  %429 = insertelement <2 x i32> poison, i32 %216, i64 0, !dbg !37
  %430 = insertelement <2 x i32> %429, i32 %282, i64 1, !dbg !37
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !37
  %432 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !41
  %433 = insertelement <2 x i32> %432, i32 %315, i64 1, !dbg !41
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !41
  %435 = fmul <2 x float> %431, %434, !dbg !52
  %436 = fadd <2 x float> %379, %435, !dbg !53
  %437 = insertelement <2 x i32> poison, i32 %217, i64 0, !dbg !37
  %438 = insertelement <2 x i32> %437, i32 %283, i64 1, !dbg !37
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !37
  %440 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !41
  %441 = insertelement <2 x i32> %440, i32 %316, i64 1, !dbg !41
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !41
  %443 = fmul <2 x float> %439, %442, !dbg !52
  %444 = fadd <2 x float> %380, %443, !dbg !53
  %shift22 = shufflevector <2 x float> %387, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %445 = fadd <2 x float> %388, %shift22, !dbg !54
  %446 = extractelement <2 x float> %445, i64 0, !dbg !54
  %shift23 = shufflevector <2 x float> %395, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %447 = fadd <2 x float> %396, %shift23, !dbg !54
  %448 = extractelement <2 x float> %447, i64 0, !dbg !54
  %shift24 = shufflevector <2 x float> %403, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %449 = fadd <2 x float> %404, %shift24, !dbg !54
  %450 = extractelement <2 x float> %449, i64 0, !dbg !54
  %shift25 = shufflevector <2 x float> %411, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %451 = fadd <2 x float> %412, %shift25, !dbg !54
  %452 = extractelement <2 x float> %451, i64 0, !dbg !54
  %shift26 = shufflevector <2 x float> %419, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %453 = fadd <2 x float> %420, %shift26, !dbg !54
  %454 = extractelement <2 x float> %453, i64 0, !dbg !54
  %shift27 = shufflevector <2 x float> %427, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %455 = fadd <2 x float> %428, %shift27, !dbg !54
  %456 = extractelement <2 x float> %455, i64 0, !dbg !54
  %shift28 = shufflevector <2 x float> %435, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %457 = fadd <2 x float> %436, %shift28, !dbg !54
  %458 = extractelement <2 x float> %457, i64 0, !dbg !54
  %shift29 = shufflevector <2 x float> %443, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %459 = fadd <2 x float> %444, %shift29, !dbg !54
  %460 = extractelement <2 x float> %459, i64 0, !dbg !54
  %461 = shl i32 %25, 12, !dbg !55
  %462 = add i32 %.decomposed, %461, !dbg !56
  %463 = shl i32 %35, 21, !dbg !57
  %464 = shl i32 %36, 21, !dbg !57
  %465 = add i32 %462, %463, !dbg !58
  %466 = add i32 %464, %.decomposed31, !dbg !56
  %467 = add i32 %466, %461, !dbg !58
  %468 = sext i32 %465 to i64, !dbg !59
  %469 = getelementptr float, ptr addrspace(1) %2, i64 %468, !dbg !59
  %470 = sext i32 %467 to i64, !dbg !59
  %471 = getelementptr float, ptr addrspace(1) %2, i64 %470, !dbg !59
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !60
  %473 = bitcast float %446 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #2, !dbg !60
  %474 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !60
  %475 = bitcast float %448 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 true) #2, !dbg !60
  %476 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !60
  %477 = bitcast float %450 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #2, !dbg !60
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !60
  %479 = bitcast float %452 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 true) #2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %480 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !60
  %481 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %482 = bitcast float %454 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %482, i1 true) #2, !dbg !60
  %483 = bitcast float %456 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %483, i1 true) #2, !dbg !60
  %484 = bitcast float %458 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %484, i1 true) #2, !dbg !60
  %485 = bitcast float %460 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %485, i1 true) #2, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %486 = load <4 x i32>, ptr addrspace(3) %480, align 16, !dbg !60
  %.extract = extractelement <4 x i32> %481, i64 0, !dbg !60
  %.extract8 = extractelement <4 x i32> %481, i64 1, !dbg !60
  %.extract9 = extractelement <4 x i32> %481, i64 2, !dbg !60
  %.extract10 = extractelement <4 x i32> %481, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %469, i1 %26) #2, !dbg !60
  %.extract11 = extractelement <4 x i32> %486, i64 0, !dbg !60
  %.extract12 = extractelement <4 x i32> %486, i64 1, !dbg !60
  %.extract13 = extractelement <4 x i32> %486, i64 2, !dbg !60
  %.extract14 = extractelement <4 x i32> %486, i64 3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %471, i1 %26) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3api6onjseajvp6qxcdvzkpjeo73u5r6t76ylynvqyrjhahbfcd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_12", linkageName: "triton_poi_fused__softmax_mul_sum_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 37, scope: !7)
!27 = !DILocation(line: 34, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 40, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 54, scope: !7)
!34 = !DILocation(line: 36, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 51, scope: !7)
!38 = !DILocation(line: 37, column: 41, scope: !7)
!39 = !DILocation(line: 37, column: 46, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 55, scope: !7)
!42 = !DILocation(line: 38, column: 38, scope: !7)
!43 = !DILocation(line: 38, column: 43, scope: !7)
!44 = !DILocation(line: 38, column: 31, scope: !7)
!45 = !DILocation(line: 38, column: 52, scope: !7)
!46 = !DILocation(line: 39, column: 42, scope: !7)
!47 = !DILocation(line: 39, column: 47, scope: !7)
!48 = !DILocation(line: 39, column: 31, scope: !7)
!49 = !DILocation(line: 39, column: 56, scope: !7)
!50 = !DILocation(line: 40, column: 18, scope: !7)
!51 = !DILocation(line: 42, column: 18, scope: !7)
!52 = !DILocation(line: 43, column: 18, scope: !7)
!53 = !DILocation(line: 44, column: 19, scope: !7)
!54 = !DILocation(line: 46, column: 20, scope: !7)
!55 = !DILocation(line: 47, column: 35, scope: !7)
!56 = !DILocation(line: 47, column: 30, scope: !7)
!57 = !DILocation(line: 47, column: 48, scope: !7)
!58 = !DILocation(line: 47, column: 40, scope: !7)
!59 = !DILocation(line: 47, column: 25, scope: !7)
!60 = !DILocation(line: 47, column: 60, scope: !7)
!61 = !DILocation(line: 47, column: 4, scope: !7)
