; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = icmp slt i32 %18, 202752, !dbg !14
  %21 = icmp slt i32 %19, 202752, !dbg !14
  %22 = srem i32 %18, 256, !dbg !15
  %.frozen = freeze i32 %18, !dbg !16
  %23 = sdiv i32 %.frozen, 50688, !dbg !16
  %.frozen75 = freeze i32 %19, !dbg !16
  %24 = sdiv i32 %.frozen75, 50688, !dbg !16
  %25 = mul i32 %23, 50688, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = mul i32 %24, 50688, !dbg !17
  %srem1.decomposed = sub i32 %.frozen75, %26, !dbg !17
  %27 = mul nsw i32 %23, 38400, !dbg !18
  %28 = mul nsw i32 %24, 38400, !dbg !18
  %29 = add nsw i32 %27, %srem.decomposed, !dbg !19
  %30 = add nsw i32 %28, %srem1.decomposed, !dbg !19
  %31 = sext i32 %29 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = sext i32 %30 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = mul nsw i32 %23, 3072, !dbg !21
  %36 = mul nsw i32 %24, 3072, !dbg !21
  %37 = add nsw i32 %35, %22, !dbg !22
  %38 = add nsw i32 %37, -38400, !dbg !23
  %39 = add nsw i32 %36, %22, !dbg !22
  %40 = add nsw i32 %39, -38400, !dbg !23
  %41 = add nsw i32 %37, -41472, !dbg !24
  %42 = add nsw i32 %39, -41472, !dbg !24
  %43 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !25
  %44 = insertelement <2 x i32> %43, i32 %18, i64 1, !dbg !25
  %45 = sdiv <2 x i32> %44, splat (i32 256), !dbg !25
  %46 = srem <2 x i32> %45, splat (i32 198), !dbg !26
  %47 = extractelement <2 x i32> %46, i64 1, !dbg !27
  %48 = sext i32 %47 to i64, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !28
  %50 = extractelement <2 x i32> %46, i64 0, !dbg !27
  %51 = sext i32 %50 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %51, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %21) #3, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %51, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %20) #3, !dbg !31
  %64 = bitcast i32 %63 to float, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %20) #3, !dbg !31
  %66 = bitcast i32 %65 to float, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %20) #3, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %20) #3, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #3, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #3, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #3, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %21) #3, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #3, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #3, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %21) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %21) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %21) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %21) #3, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %48, !dbg !34
  %90 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !35
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %20) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %21) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %21) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %21) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %21) #3, !dbg !35
  %99 = icmp slt <2 x i32> %46, splat (i32 150), !dbg !36
  %100 = extractelement <2 x i1> %99, i64 1, !dbg !37
  %101 = and i1 %20, %100, !dbg !37
  %102 = extractelement <2 x i1> %99, i64 0, !dbg !37
  %103 = and i1 %21, %102, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !38
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !38
  %106 = add nsw <2 x i32> %46, splat (i32 -150), !dbg !39
  %107 = icmp ult <2 x i32> %106, splat (i32 12), !dbg !39
  %108 = shl nsw i32 %47, 8, !dbg !22
  %109 = shl nsw i32 %50, 8, !dbg !22
  %110 = add nsw i32 %38, %108, !dbg !40
  %111 = add nsw i32 %40, %109, !dbg !40
  %112 = sext i32 %110 to i64, !dbg !41
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !41
  %114 = sext i32 %111 to i64, !dbg !41
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !41
  %116 = extractelement <2 x i1> %107, i64 1, !dbg !42
  %117 = and i1 %20, %116, !dbg !42
  %118 = extractelement <2 x i1> %107, i64 0, !dbg !42
  %119 = and i1 %21, %118, !dbg !42
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #3, !dbg !43
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !43
  %122 = add nsw <2 x i32> %46, splat (i32 -162), !dbg !44
  %123 = icmp ult <2 x i32> %122, splat (i32 12), !dbg !44
  %124 = add nsw i32 %41, %108, !dbg !45
  %125 = add nsw i32 %42, %109, !dbg !45
  %126 = sext i32 %124 to i64, !dbg !46
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !46
  %128 = sext i32 %125 to i64, !dbg !46
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !46
  %130 = extractelement <2 x i1> %123, i64 1, !dbg !47
  %131 = and i1 %20, %130, !dbg !47
  %132 = extractelement <2 x i1> %123, i64 0, !dbg !47
  %133 = and i1 %21, %132, !dbg !47
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !48
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133, i32 0, i1 %133) #3, !dbg !48
  %136 = add nsw <2 x i32> %46, splat (i32 -174), !dbg !49
  %137 = icmp ult <2 x i32> %136, splat (i32 12), !dbg !49
  %138 = add nsw i32 %37, -44544, !dbg !50
  %139 = add nsw i32 %138, %108, !dbg !51
  %140 = add nsw i32 %39, -44544, !dbg !50
  %141 = add nsw i32 %140, %109, !dbg !51
  %142 = sext i32 %139 to i64, !dbg !52
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !52
  %144 = sext i32 %141 to i64, !dbg !52
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !52
  %146 = extractelement <2 x i1> %137, i64 1, !dbg !53
  %147 = and i1 %20, %146, !dbg !53
  %148 = extractelement <2 x i1> %137, i64 0, !dbg !53
  %149 = and i1 %21, %148, !dbg !53
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #3, !dbg !54
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %145, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149, i32 0, i1 %149) #3, !dbg !54
  %152 = icmp sgt i32 %47, 185, !dbg !27
  %153 = icmp sgt i32 %50, 185, !dbg !27
  %154 = add nsw i32 %37, -47616, !dbg !55
  %155 = add nsw i32 %154, %108, !dbg !56
  %156 = add nsw i32 %39, -47616, !dbg !55
  %157 = add nsw i32 %156, %109, !dbg !56
  %158 = sext i32 %155 to i64, !dbg !57
  %159 = getelementptr float, ptr addrspace(1) %4, i64 %158, !dbg !57
  %160 = sext i32 %157 to i64, !dbg !57
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !57
  %162 = and i1 %20, %152, !dbg !58
  %163 = and i1 %21, %153, !dbg !58
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %162, i32 0, i1 %162, i32 0, i1 %162, i32 0, i1 %162, i32 0, i1 %162) #3, !dbg !59
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #3, !dbg !59
  %166 = fadd float %64, 0x3EE4F8B580000000, !dbg !60
  %167 = fadd float %66, 0x3EE4F8B580000000, !dbg !60
  %168 = fadd float %68, 0x3EE4F8B580000000, !dbg !60
  %169 = fadd float %70, 0x3EE4F8B580000000, !dbg !60
  %170 = fadd float %72, 0x3EE4F8B580000000, !dbg !60
  %171 = fadd float %74, 0x3EE4F8B580000000, !dbg !60
  %172 = fadd float %76, 0x3EE4F8B580000000, !dbg !60
  %173 = fadd float %78, 0x3EE4F8B580000000, !dbg !60
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i = icmp eq i32 %174, 0, !dbg !61
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i = icmp eq i32 %175, 0, !dbg !61
  br i1 %.not.i, label %181, label %176, !dbg !61

176:                                              ; preds = %12
  br i1 %.not1.i, label %179, label %177, !dbg !61

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

181:                                              ; preds = %12
  br i1 %.not1.i, label %184, label %182, !dbg !61

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %177, %179, %182, %184
  %.0.i = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !61
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i33 = icmp eq i32 %186, 0, !dbg !61
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i36 = icmp eq i32 %187, 0, !dbg !61
  br i1 %.not.i33, label %193, label %188, !dbg !61

188:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %191, label %189, !dbg !61

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !61
  br label %__nv_sqrtf.exit37, !dbg !61

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !61
  br label %__nv_sqrtf.exit37, !dbg !61

193:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %196, label %194, !dbg !61

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !61
  br label %__nv_sqrtf.exit37, !dbg !61

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !61
  br label %__nv_sqrtf.exit37, !dbg !61

__nv_sqrtf.exit37:                                ; preds = %189, %191, %194, %196
  %.0.i35 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !61
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i38 = icmp eq i32 %198, 0, !dbg !61
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i41 = icmp eq i32 %199, 0, !dbg !61
  br i1 %.not.i38, label %205, label %200, !dbg !61

200:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %203, label %201, !dbg !61

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !61
  br label %__nv_sqrtf.exit42, !dbg !61

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !61
  br label %__nv_sqrtf.exit42, !dbg !61

205:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %208, label %206, !dbg !61

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !61
  br label %__nv_sqrtf.exit42, !dbg !61

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !61
  br label %__nv_sqrtf.exit42, !dbg !61

__nv_sqrtf.exit42:                                ; preds = %201, %203, %206, %208
  %.0.i40 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !61
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i43 = icmp eq i32 %210, 0, !dbg !61
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i46 = icmp eq i32 %211, 0, !dbg !61
  br i1 %.not.i43, label %217, label %212, !dbg !61

212:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %215, label %213, !dbg !61

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !61
  br label %__nv_sqrtf.exit47, !dbg !61

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !61
  br label %__nv_sqrtf.exit47, !dbg !61

217:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %220, label %218, !dbg !61

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !61
  br label %__nv_sqrtf.exit47, !dbg !61

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !61
  br label %__nv_sqrtf.exit47, !dbg !61

__nv_sqrtf.exit47:                                ; preds = %213, %215, %218, %220
  %.0.i45 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !61
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i48 = icmp eq i32 %222, 0, !dbg !61
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i51 = icmp eq i32 %223, 0, !dbg !61
  br i1 %.not.i48, label %229, label %224, !dbg !61

224:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %227, label %225, !dbg !61

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !61
  br label %__nv_sqrtf.exit52, !dbg !61

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !61
  br label %__nv_sqrtf.exit52, !dbg !61

229:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %232, label %230, !dbg !61

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !61
  br label %__nv_sqrtf.exit52, !dbg !61

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !61
  br label %__nv_sqrtf.exit52, !dbg !61

__nv_sqrtf.exit52:                                ; preds = %225, %227, %230, %232
  %.0.i50 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !61
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i53 = icmp eq i32 %234, 0, !dbg !61
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i56 = icmp eq i32 %235, 0, !dbg !61
  br i1 %.not.i53, label %241, label %236, !dbg !61

236:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %239, label %237, !dbg !61

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !61
  br label %__nv_sqrtf.exit57, !dbg !61

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !61
  br label %__nv_sqrtf.exit57, !dbg !61

241:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %244, label %242, !dbg !61

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !61
  br label %__nv_sqrtf.exit57, !dbg !61

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !61
  br label %__nv_sqrtf.exit57, !dbg !61

__nv_sqrtf.exit57:                                ; preds = %237, %239, %242, %244
  %.0.i55 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !61
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i58 = icmp eq i32 %246, 0, !dbg !61
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i61 = icmp eq i32 %247, 0, !dbg !61
  br i1 %.not.i58, label %253, label %248, !dbg !61

248:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %251, label %249, !dbg !61

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !61
  br label %__nv_sqrtf.exit62, !dbg !61

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !61
  br label %__nv_sqrtf.exit62, !dbg !61

253:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %256, label %254, !dbg !61

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !61
  br label %__nv_sqrtf.exit62, !dbg !61

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !61
  br label %__nv_sqrtf.exit62, !dbg !61

__nv_sqrtf.exit62:                                ; preds = %249, %251, %254, %256
  %.0.i60 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !61
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !61
  %.not.i63 = icmp eq i32 %258, 0, !dbg !61
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !61
  %.not1.i66 = icmp eq i32 %259, 0, !dbg !61
  br i1 %.not.i63, label %265, label %260, !dbg !61

260:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %263, label %261, !dbg !61

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !61
  br label %__nv_sqrtf.exit67, !dbg !61

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !61
  br label %__nv_sqrtf.exit67, !dbg !61

265:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %268, label %266, !dbg !61

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !61
  br label %__nv_sqrtf.exit67, !dbg !61

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !61
  br label %__nv_sqrtf.exit67, !dbg !61

__nv_sqrtf.exit67:                                ; preds = %261, %263, %266, %268
  %.0.i65 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !61
  %270 = shufflevector <2 x i1> %137, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %271 = shufflevector <2 x i1> %123, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !44
  %272 = shufflevector <2 x i1> %107, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %273 = shufflevector <2 x i1> %99, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %274 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %275 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !43
  %276 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !54
  %278 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !59
  %279 = insertelement <8 x i32> poison, i32 %60, i64 0, !dbg !29
  %280 = insertelement <8 x i32> %279, i32 %59, i64 1, !dbg !29
  %281 = insertelement <8 x i32> %280, i32 %58, i64 2, !dbg !29
  %282 = insertelement <8 x i32> %281, i32 %57, i64 3, !dbg !29
  %283 = insertelement <8 x i32> %282, i32 %56, i64 4, !dbg !29
  %284 = insertelement <8 x i32> %283, i32 %55, i64 5, !dbg !29
  %285 = insertelement <8 x i32> %284, i32 %54, i64 6, !dbg !29
  %286 = insertelement <8 x i32> %285, i32 %53, i64 7, !dbg !29
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !29
  %288 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %289 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !43
  %290 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !48
  %291 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !54
  %292 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !59
  %293 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %294 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !43
  %295 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !48
  %296 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !54
  %297 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !59
  %298 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !43
  %300 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !48
  %301 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !54
  %302 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !59
  %303 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !38
  %304 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !43
  %305 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !48
  %306 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !54
  %307 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !59
  %308 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !38
  %309 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !43
  %310 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !48
  %311 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !54
  %312 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !59
  %313 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !38
  %314 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !43
  %315 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !48
  %316 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !54
  %317 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !59
  %318 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !38
  %319 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !43
  %320 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !48
  %321 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !54
  %322 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !59
  %323 = insertelement <8 x i32> poison, i32 %98, i64 0, !dbg !35
  %324 = insertelement <8 x i32> %323, i32 %97, i64 1, !dbg !35
  %325 = insertelement <8 x i32> %324, i32 %96, i64 2, !dbg !35
  %326 = insertelement <8 x i32> %325, i32 %95, i64 3, !dbg !35
  %327 = insertelement <8 x i32> %326, i32 %94, i64 4, !dbg !35
  %328 = insertelement <8 x i32> %327, i32 %93, i64 5, !dbg !35
  %329 = insertelement <8 x i32> %328, i32 %92, i64 6, !dbg !35
  %330 = insertelement <8 x i32> %329, i32 %91, i64 7, !dbg !35
  %331 = bitcast <8 x i32> %330 to <8 x float>, !dbg !35
  %332 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !33
  %333 = insertelement <8 x i32> %332, i32 %87, i64 1, !dbg !33
  %334 = insertelement <8 x i32> %333, i32 %86, i64 2, !dbg !33
  %335 = insertelement <8 x i32> %334, i32 %85, i64 3, !dbg !33
  %336 = insertelement <8 x i32> %335, i32 %84, i64 4, !dbg !33
  %337 = insertelement <8 x i32> %336, i32 %83, i64 5, !dbg !33
  %338 = insertelement <8 x i32> %337, i32 %82, i64 6, !dbg !33
  %339 = insertelement <8 x i32> %338, i32 %81, i64 7, !dbg !33
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !33
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !62
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !62
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !62
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !62
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #3, !dbg !62
  %346 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #3, !dbg !62
  %347 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #3, !dbg !62
  %348 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #3, !dbg !62
  %349 = insertelement <8 x i32> poison, i32 %277, i64 0, !dbg !63
  %350 = insertelement <8 x i32> %349, i32 %291, i64 1, !dbg !63
  %351 = insertelement <8 x i32> %350, i32 %296, i64 2, !dbg !63
  %352 = insertelement <8 x i32> %351, i32 %301, i64 3, !dbg !63
  %353 = insertelement <8 x i32> %352, i32 %306, i64 4, !dbg !63
  %354 = insertelement <8 x i32> %353, i32 %311, i64 5, !dbg !63
  %355 = insertelement <8 x i32> %354, i32 %316, i64 6, !dbg !63
  %356 = insertelement <8 x i32> %355, i32 %321, i64 7, !dbg !63
  %357 = insertelement <8 x i32> poison, i32 %278, i64 0, !dbg !63
  %358 = insertelement <8 x i32> %357, i32 %292, i64 1, !dbg !63
  %359 = insertelement <8 x i32> %358, i32 %297, i64 2, !dbg !63
  %360 = insertelement <8 x i32> %359, i32 %302, i64 3, !dbg !63
  %361 = insertelement <8 x i32> %360, i32 %307, i64 4, !dbg !63
  %362 = insertelement <8 x i32> %361, i32 %312, i64 5, !dbg !63
  %363 = insertelement <8 x i32> %362, i32 %317, i64 6, !dbg !63
  %364 = insertelement <8 x i32> %363, i32 %322, i64 7, !dbg !63
  %365 = select <8 x i1> %270, <8 x i32> %356, <8 x i32> %364, !dbg !63
  %366 = insertelement <8 x i32> poison, i32 %276, i64 0, !dbg !64
  %367 = insertelement <8 x i32> %366, i32 %290, i64 1, !dbg !64
  %368 = insertelement <8 x i32> %367, i32 %295, i64 2, !dbg !64
  %369 = insertelement <8 x i32> %368, i32 %300, i64 3, !dbg !64
  %370 = insertelement <8 x i32> %369, i32 %305, i64 4, !dbg !64
  %371 = insertelement <8 x i32> %370, i32 %310, i64 5, !dbg !64
  %372 = insertelement <8 x i32> %371, i32 %315, i64 6, !dbg !64
  %373 = insertelement <8 x i32> %372, i32 %320, i64 7, !dbg !64
  %374 = select <8 x i1> %271, <8 x i32> %373, <8 x i32> %365, !dbg !64
  %375 = insertelement <8 x i32> poison, i32 %275, i64 0, !dbg !65
  %376 = insertelement <8 x i32> %375, i32 %289, i64 1, !dbg !65
  %377 = insertelement <8 x i32> %376, i32 %294, i64 2, !dbg !65
  %378 = insertelement <8 x i32> %377, i32 %299, i64 3, !dbg !65
  %379 = insertelement <8 x i32> %378, i32 %304, i64 4, !dbg !65
  %380 = insertelement <8 x i32> %379, i32 %309, i64 5, !dbg !65
  %381 = insertelement <8 x i32> %380, i32 %314, i64 6, !dbg !65
  %382 = insertelement <8 x i32> %381, i32 %319, i64 7, !dbg !65
  %383 = select <8 x i1> %272, <8 x i32> %382, <8 x i32> %374, !dbg !65
  %384 = insertelement <8 x i32> poison, i32 %274, i64 0, !dbg !66
  %385 = insertelement <8 x i32> %384, i32 %288, i64 1, !dbg !66
  %386 = insertelement <8 x i32> %385, i32 %293, i64 2, !dbg !66
  %387 = insertelement <8 x i32> %386, i32 %298, i64 3, !dbg !66
  %388 = insertelement <8 x i32> %387, i32 %303, i64 4, !dbg !66
  %389 = insertelement <8 x i32> %388, i32 %308, i64 5, !dbg !66
  %390 = insertelement <8 x i32> %389, i32 %313, i64 6, !dbg !66
  %391 = insertelement <8 x i32> %390, i32 %318, i64 7, !dbg !66
  %392 = select <8 x i1> %273, <8 x i32> %391, <8 x i32> %383, !dbg !66
  %393 = bitcast <8 x i32> %392 to <8 x float>, !dbg !66
  %394 = fsub <8 x float> %393, %287, !dbg !67
  %395 = insertelement <8 x float> poison, float %348, i64 0, !dbg !68
  %396 = insertelement <8 x float> %395, float %347, i64 1, !dbg !68
  %397 = insertelement <8 x float> %396, float %346, i64 2, !dbg !68
  %398 = insertelement <8 x float> %397, float %345, i64 3, !dbg !68
  %399 = insertelement <8 x float> %398, float %344, i64 4, !dbg !68
  %400 = insertelement <8 x float> %399, float %343, i64 5, !dbg !68
  %401 = insertelement <8 x float> %400, float %342, i64 6, !dbg !68
  %402 = insertelement <8 x float> %401, float %341, i64 7, !dbg !68
  %403 = fmul <8 x float> %394, %402, !dbg !68
  %404 = fmul <8 x float> %403, %340, !dbg !69
  %405 = fadd <8 x float> %404, %331, !dbg !70
  %406 = fcmp olt <8 x float> %405, zeroinitializer, !dbg !71
  %407 = extractelement <8 x i1> %406, i64 7, !dbg !75
  %408 = extractelement <8 x i1> %406, i64 6, !dbg !75
  %409 = extractelement <8 x i1> %406, i64 5, !dbg !75
  %410 = extractelement <8 x i1> %406, i64 4, !dbg !75
  %411 = extractelement <8 x i1> %406, i64 3, !dbg !75
  %412 = extractelement <8 x i1> %406, i64 2, !dbg !75
  %413 = extractelement <8 x i1> %406, i64 1, !dbg !75
  %414 = extractelement <8 x i1> %406, i64 0, !dbg !75
  %415 = sext i32 %18 to i64, !dbg !76
  %416 = getelementptr float, ptr addrspace(1) %9, i64 %415, !dbg !76
  %417 = sext i32 %19 to i64, !dbg !76
  %418 = getelementptr float, ptr addrspace(1) %9, i64 %417, !dbg !76
  %419 = extractelement <8 x i32> %392, i64 4, !dbg !77
  %420 = extractelement <8 x i32> %392, i64 5, !dbg !77
  %421 = extractelement <8 x i32> %392, i64 6, !dbg !77
  %422 = extractelement <8 x i32> %392, i64 7, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %422, i32 %421, i32 %420, i32 %419, ptr addrspace(1) %416, i1 %20) #3, !dbg !77
  %423 = extractelement <8 x i32> %392, i64 0, !dbg !77
  %424 = extractelement <8 x i32> %392, i64 1, !dbg !77
  %425 = extractelement <8 x i32> %392, i64 2, !dbg !77
  %426 = extractelement <8 x i32> %392, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %426, i32 %425, i32 %424, i32 %423, ptr addrspace(1) %418, i1 %21) #3, !dbg !77
  %427 = getelementptr float, ptr addrspace(1) %10, i64 %415, !dbg !78
  %428 = getelementptr float, ptr addrspace(1) %10, i64 %417, !dbg !78
  %bc = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %429 = extractelement <8 x i32> %bc, i64 7, !dbg !79
  %430 = select i1 %407, i32 0, i32 %429, !dbg !75
  %bc68 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %431 = extractelement <8 x i32> %bc68, i64 6, !dbg !79
  %432 = select i1 %408, i32 0, i32 %431, !dbg !75
  %bc69 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %433 = extractelement <8 x i32> %bc69, i64 5, !dbg !79
  %434 = select i1 %409, i32 0, i32 %433, !dbg !75
  %bc70 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %435 = extractelement <8 x i32> %bc70, i64 4, !dbg !79
  %436 = select i1 %410, i32 0, i32 %435, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %430, i32 %432, i32 %434, i32 %436, ptr addrspace(1) %427, i1 %20) #3, !dbg !79
  %bc71 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %437 = extractelement <8 x i32> %bc71, i64 3, !dbg !79
  %438 = select i1 %411, i32 0, i32 %437, !dbg !75
  %bc72 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %439 = extractelement <8 x i32> %bc72, i64 2, !dbg !79
  %440 = select i1 %412, i32 0, i32 %439, !dbg !75
  %bc73 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %441 = extractelement <8 x i32> %bc73, i64 1, !dbg !79
  %442 = select i1 %413, i32 0, i32 %441, !dbg !75
  %bc74 = bitcast <8 x float> %405 to <8 x i32>, !dbg !79
  %443 = extractelement <8 x i32> %bc74, i64 0, !dbg !79
  %444 = select i1 %414, i32 0, i32 %443, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %440, i32 %442, i32 %444, ptr addrspace(1) %428, i1 %21) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py", directory: "inductor_cache/5r")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 61, scope: !7)
!22 = !DILocation(line: 42, column: 41, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 47, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 28, scope: !7)
!27 = !DILocation(line: 53, column: 20, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 64, scope: !7)
!38 = !DILocation(line: 37, column: 57, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 56, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 73, scope: !7)
!43 = !DILocation(line: 42, column: 66, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 56, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 74, scope: !7)
!48 = !DILocation(line: 47, column: 66, scope: !7)
!49 = !DILocation(line: 51, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 36, scope: !7)
!51 = !DILocation(line: 52, column: 56, scope: !7)
!52 = !DILocation(line: 52, column: 31, scope: !7)
!53 = !DILocation(line: 52, column: 74, scope: !7)
!54 = !DILocation(line: 52, column: 66, scope: !7)
!55 = !DILocation(line: 56, column: 36, scope: !7)
!56 = !DILocation(line: 56, column: 56, scope: !7)
!57 = !DILocation(line: 56, column: 31, scope: !7)
!58 = !DILocation(line: 56, column: 74, scope: !7)
!59 = !DILocation(line: 56, column: 66, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 27, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 35, scope: !7)
!65 = !DILocation(line: 59, column: 34, scope: !7)
!66 = !DILocation(line: 60, column: 33, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 73, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 74, column: 25, scope: !7)
!77 = !DILocation(line: 74, column: 37, scope: !7)
!78 = !DILocation(line: 75, column: 25, scope: !7)
!79 = !DILocation(line: 75, column: 37, scope: !7)
!80 = !DILocation(line: 75, column: 4, scope: !7)
