; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = icmp slt i32 %18, 2952192, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %21 = sdiv i32 %.frozen, 3844, !dbg !15
  %22 = srem i32 %21, 192, !dbg !16
  %23 = mul i32 %21, 3844, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %19, 3844, !dbg !17
  %25 = sdiv i32 %18, 738048, !dbg !18
  %26 = icmp slt i32 %22, 96, !dbg !19
  %27 = mul nsw i32 %.decomposed, 96, !dbg !20
  %28 = mul nsw i32 %24, 96, !dbg !20
  %29 = mul nsw i32 %25, 369024, !dbg !21
  %30 = add nsw i32 %27, %29, !dbg !22
  %31 = add nsw i32 %29, %28, !dbg !22
  %32 = add nsw i32 %30, %22, !dbg !23
  %33 = add nsw i32 %31, %22, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %20, %26, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %38, i32 0, i1 %38) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %38, i32 0, i1 %38) #3, !dbg !26
  %41 = sext i32 %22 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %49 = bitcast i32 %48 to float, !dbg !30
  %50 = fadd float %47, 0x3EE4F8B580000000, !dbg !31
  %51 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %52, 0, !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %53, 0, !dbg !32
  br i1 %.not.i, label %59, label %54, !dbg !32

54:                                               ; preds = %12
  br i1 %.not1.i, label %57, label %55, !dbg !32

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

59:                                               ; preds = %12
  br i1 %.not1.i, label %62, label %60, !dbg !32

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %64, 0, !dbg !32
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %65, 0, !dbg !32
  br i1 %.not.i1, label %71, label %66, !dbg !32

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !32

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !32

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %67, %69, %72, %74
  %.0.i3 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !32
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !34
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %38, i32 0, i1 %38) #3, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %38, i32 0, i1 %38) #3, !dbg !35
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !36
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %38, i32 0, i1 %38) #3, !dbg !37
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %38, i32 0, i1 %38) #3, !dbg !37
  %84 = icmp sgt i32 %22, 95, !dbg !38
  %85 = add nsw i32 %22, -96, !dbg !39
  %86 = add nsw i32 %30, %85, !dbg !40
  %87 = add nsw i32 %31, %85, !dbg !40
  %88 = sext i32 %86 to i64, !dbg !41
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !41
  %90 = sext i32 %87 to i64, !dbg !41
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %90, !dbg !41
  %92 = and i1 %20, %84, !dbg !42
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %92, i32 0, i1 %92) #3, !dbg !43
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 0, i1 %92) #3, !dbg !43
  %95 = sext i32 %85 to i64, !dbg !44
  %96 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !44
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %92, i32 0, i1 %92) #3, !dbg !45
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %92, i32 0, i1 %92) #3, !dbg !45
  %99 = getelementptr float, ptr addrspace(1) %7, i64 %95, !dbg !46
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %92, i32 0, i1 %92) #3, !dbg !47
  %101 = bitcast i32 %100 to float, !dbg !47
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %92, i32 0, i1 %92) #3, !dbg !47
  %103 = bitcast i32 %102 to float, !dbg !47
  %104 = fadd float %101, 0x3EE4F8B580000000, !dbg !48
  %105 = fadd float %103, 0x3EE4F8B580000000, !dbg !48
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i6 = icmp eq i32 %106, 0, !dbg !49
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !49
  br i1 %.not.i6, label %113, label %108, !dbg !49

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !49

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !49

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !49
  br label %__nv_sqrtf.exit10, !dbg !49

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !49
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i11 = icmp eq i32 %118, 0, !dbg !49
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i14 = icmp eq i32 %119, 0, !dbg !49
  br i1 %.not.i11, label %125, label %120, !dbg !49

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !49

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !49

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !49
  br label %__nv_sqrtf.exit15, !dbg !49

__nv_sqrtf.exit15:                                ; preds = %121, %123, %126, %128
  %.0.i13 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !49
  %130 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !43
  %131 = insertelement <4 x i32> %130, i32 %93, i64 1, !dbg !43
  %132 = insertelement <4 x i32> %131, i32 %39, i64 2, !dbg !43
  %133 = insertelement <4 x i32> %132, i32 %40, i64 3, !dbg !43
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !43
  %135 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !45
  %136 = insertelement <4 x i32> %135, i32 %97, i64 1, !dbg !45
  %137 = insertelement <4 x i32> %136, i32 %43, i64 2, !dbg !45
  %138 = insertelement <4 x i32> %137, i32 %44, i64 3, !dbg !45
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !45
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !50
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !50
  %142 = getelementptr float, ptr addrspace(1) %8, i64 %95, !dbg !51
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %92, i32 0, i1 %92) #3, !dbg !52
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %92, i32 0, i1 %92) #3, !dbg !52
  %145 = getelementptr float, ptr addrspace(1) %9, i64 %95, !dbg !53
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %92, i32 0, i1 %92) #3, !dbg !54
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %92, i32 0, i1 %92) #3, !dbg !54
  %148 = fsub <4 x float> %134, %139, !dbg !55
  %149 = insertelement <4 x float> poison, float %141, i64 0, !dbg !56
  %150 = insertelement <4 x float> %149, float %140, i64 1, !dbg !56
  %151 = insertelement <4 x float> %150, float %76, i64 2, !dbg !56
  %152 = insertelement <4 x float> %151, float %77, i64 3, !dbg !56
  %153 = fmul <4 x float> %148, %152, !dbg !56
  %154 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !52
  %155 = insertelement <4 x i32> %154, i32 %143, i64 1, !dbg !52
  %156 = insertelement <4 x i32> %155, i32 %79, i64 2, !dbg !52
  %157 = insertelement <4 x i32> %156, i32 %80, i64 3, !dbg !52
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !52
  %159 = fmul <4 x float> %153, %158, !dbg !57
  %160 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !54
  %161 = insertelement <4 x i32> %160, i32 %146, i64 1, !dbg !54
  %162 = insertelement <4 x i32> %161, i32 %82, i64 2, !dbg !54
  %163 = insertelement <4 x i32> %162, i32 %83, i64 3, !dbg !54
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !54
  %165 = fadd <4 x float> %159, %164, !dbg !58
  %166 = fcmp olt <4 x float> %165, zeroinitializer, !dbg !59
  %167 = extractelement <4 x i1> %166, i64 3, !dbg !63
  %168 = extractelement <4 x float> %165, i64 3, !dbg !63
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !63
  %170 = extractelement <4 x i1> %166, i64 2, !dbg !63
  %171 = extractelement <4 x float> %165, i64 2, !dbg !63
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !63
  %173 = extractelement <4 x i1> %166, i64 1, !dbg !65
  %174 = extractelement <4 x float> %165, i64 1, !dbg !65
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !65
  %176 = extractelement <4 x i1> %166, i64 0, !dbg !65
  %177 = extractelement <4 x float> %165, i64 0, !dbg !65
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !65
  %179 = select i1 %26, float %172, float %175, !dbg !66
  %180 = select i1 %26, float %169, float %178, !dbg !66
  %181 = sext i32 %18 to i64, !dbg !67
  %182 = getelementptr float, ptr addrspace(1) %10, i64 %181, !dbg !67
  %183 = bitcast float %179 to i32, !dbg !68
  %184 = bitcast float %180 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %183, i32 %184, ptr addrspace(1) %182, i1 %20) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn7kslvs2amigcm62akbjn2wxolxwgq577j5us4yssjraq7756rq.py", directory: "inductor_cache/n7")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 38, scope: !7)
!23 = !DILocation(line: 33, column: 51, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 64, scope: !7)
!26 = !DILocation(line: 33, column: 57, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 60, scope: !7)
!40 = !DILocation(line: 56, column: 52, scope: !7)
!41 = !DILocation(line: 56, column: 31, scope: !7)
!42 = !DILocation(line: 56, column: 74, scope: !7)
!43 = !DILocation(line: 56, column: 66, scope: !7)
!44 = !DILocation(line: 57, column: 31, scope: !7)
!45 = !DILocation(line: 57, column: 44, scope: !7)
!46 = !DILocation(line: 59, column: 31, scope: !7)
!47 = !DILocation(line: 59, column: 44, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 27, scope: !7)
!50 = !DILocation(line: 64, column: 20, scope: !7)
!51 = !DILocation(line: 68, column: 31, scope: !7)
!52 = !DILocation(line: 68, column: 44, scope: !7)
!53 = !DILocation(line: 70, column: 31, scope: !7)
!54 = !DILocation(line: 70, column: 44, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 73, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !64)
!64 = !DILocation(line: 50, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 37, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
