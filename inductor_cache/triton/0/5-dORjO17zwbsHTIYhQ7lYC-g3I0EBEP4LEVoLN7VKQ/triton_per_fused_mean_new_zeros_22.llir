; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_new_zeros_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %8, 127, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = mul i32 %15, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = shl i32 %11, 8, !dbg !16
  %18 = and i32 %17, 1792, !dbg !16
  %19 = add nsw i32 %.decomposed, %18, !dbg !17
  %20 = shl i32 %15, 11, !dbg !18
  %21 = add i32 %19, %20, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !21
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !21
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !21
  %29 = bitcast i32 %25 to float, !dbg !21
  %30 = bitcast i32 %26 to float, !dbg !21
  %31 = bitcast i32 %27 to float, !dbg !21
  %32 = bitcast i32 %28 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = fmul float %29, %39, !dbg !24
  %44 = fmul float %30, %40, !dbg !24
  %45 = fmul float %31, %41, !dbg !24
  %46 = fmul float %32, %42, !dbg !24
  %47 = and i32 %11, 7, !dbg !25
  %48 = shl nuw nsw i32 %10, 3, !dbg !25
  %49 = or disjoint i32 %48, %47, !dbg !25
  %50 = getelementptr float, ptr addrspace(3) @global_smem, i32 %49, !dbg !25
  %51 = bitcast float %43 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %51, i1 true) #3, !dbg !25
  %52 = or disjoint i32 %48, 8, !dbg !25
  %53 = or disjoint i32 %52, %47, !dbg !25
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !25
  %55 = bitcast float %44 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #3, !dbg !25
  %56 = or disjoint i32 %48, 16, !dbg !25
  %57 = or disjoint i32 %56, %47, !dbg !25
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !25
  %59 = bitcast float %45 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #3, !dbg !25
  %60 = or disjoint i32 %48, 24, !dbg !25
  %61 = or disjoint i32 %60, %47, !dbg !25
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !25
  %63 = bitcast float %46 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %64 = icmp slt i32 %8, 1024, !dbg !25
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %66 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %65, i1 %64) #3, !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %67, %69, !dbg !29
  %71 = bitcast float %70 to i32, !dbg !25
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !25
  %73 = bitcast i32 %72 to float, !dbg !25
  %74 = fadd float %70, %73, !dbg !29
  %75 = bitcast float %74 to i32, !dbg !25
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !25
  %77 = bitcast i32 %76 to float, !dbg !25
  %78 = fadd float %74, %77, !dbg !29
  %79 = and i32 %8, 7, !dbg !25
  %80 = icmp eq i32 %79, 0, !dbg !25
  %81 = and i1 %64, %80, !dbg !25
  %82 = bitcast float %78 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %82, i1 %81) #3, !dbg !25
  %83 = getelementptr i8, ptr addrspace(3) %65, i32 1024, !dbg !25
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %64) #3, !dbg !25
  %85 = bitcast i32 %84 to float, !dbg !25
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = fadd float %85, %87, !dbg !29
  %89 = bitcast float %88 to i32, !dbg !25
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !25
  %91 = bitcast i32 %90 to float, !dbg !25
  %92 = fadd float %88, %91, !dbg !29
  %93 = bitcast float %92 to i32, !dbg !25
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !25
  %95 = bitcast i32 %94 to float, !dbg !25
  %96 = fadd float %92, %95, !dbg !29
  %97 = bitcast float %96 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %97, i1 %81) #3, !dbg !25
  %98 = getelementptr i8, ptr addrspace(3) %65, i32 2048, !dbg !25
  %99 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %98, i1 %64) #3, !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 4, i32 31), !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = fadd float %100, %102, !dbg !29
  %104 = bitcast float %103 to i32, !dbg !25
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 2, i32 31), !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = fadd float %103, %106, !dbg !29
  %108 = bitcast float %107 to i32, !dbg !25
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = fadd float %107, %110, !dbg !29
  %112 = bitcast float %111 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %112, i1 %81) #3, !dbg !25
  %113 = getelementptr i8, ptr addrspace(3) %65, i32 3072, !dbg !25
  %114 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %113, i1 %64) #3, !dbg !25
  %115 = bitcast i32 %114 to float, !dbg !25
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !25
  %117 = bitcast i32 %116 to float, !dbg !25
  %118 = fadd float %115, %117, !dbg !29
  %119 = bitcast float %118 to i32, !dbg !25
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !25
  %121 = bitcast i32 %120 to float, !dbg !25
  %122 = fadd float %118, %121, !dbg !29
  %123 = bitcast float %122 to i32, !dbg !25
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %122, %125, !dbg !29
  %127 = bitcast float %126 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %127, i1 %81) #3, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %48, !dbg !25
  %129 = load i32, ptr addrspace(3) %128, align 16, !dbg !25
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !25
  %131 = load i32, ptr addrspace(3) %130, align 16, !dbg !25
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !25
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !25
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !25
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %136, i32 %129, i32 %131, i32 %133, i32 %135, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !31
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 8.000000e+00) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %140 = sext i32 %14 to i64, !dbg !33
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !33
  %142 = and i32 %8, 128, !dbg !34
  %143 = icmp eq i32 %142, 0, !dbg !34
  %144 = bitcast float %139 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %141, i1 %143) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdabaftt3e4bnd3ey2w7mnpdav55qsh3zlxjjolpwrebvvuyhkgx.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_per_fused_mean_new_zeros_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_new_zeros_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_new_zeros_22", linkageName: "triton_per_fused_mean_new_zeros_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 39, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 54, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 54, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 37, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 4, scope: !7)
!33 = !DILocation(line: 45, column: 28, scope: !7)
!34 = !DILocation(line: 45, column: 40, scope: !7)
!35 = !DILocation(line: 45, column: 4, scope: !7)
