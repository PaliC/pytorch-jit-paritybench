; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = sdiv i32 %17, 16, !dbg !14
  %20 = srem i32 %18, 16, !dbg !15
  %21 = sdiv i32 %17, 256, !dbg !16
  %22 = mul nsw i32 %21, 196, !dbg !17
  %23 = sext i32 %22 to i64, !dbg !18
  %24 = sitofp i32 %20 to float, !dbg !19
  %25 = fadd float %24, 5.000000e-01, !dbg !20
  %26 = fmul float %25, 8.750000e-01, !dbg !21
  %27 = fadd float %26, -5.000000e-01, !dbg !22
  %28 = tail call float @llvm.nvvm.floor.ftz.f(float %27), !dbg !23
  %29 = tail call float @llvm.nvvm.floor.f(float %27), !dbg !23
  %30 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %31 = insertelement <2 x i32> %30, i32 %19, i64 1, !dbg !15
  %32 = srem <2 x i32> %31, splat (i32 16), !dbg !15
  %33 = extractelement <2 x i32> %32, i64 1, !dbg !24
  %34 = sext i32 %33 to i64, !dbg !24
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !25
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #2, !dbg !25
  %38 = extractelement <2 x i32> %32, i64 0, !dbg !26
  %39 = sext i32 %38 to i64, !dbg !26
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !26
  %41 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #2, !dbg !27
  %42 = extractvalue { i64, i64 } %41, 0, !dbg !27
  %43 = extractvalue { i64, i64 } %41, 1, !dbg !27
  %44 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !28
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !29
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !29
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !29
  %48 = getelementptr i64, ptr addrspace(1) %5, i64 %39, !dbg !30
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !31
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !31
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !31
  %52 = getelementptr i64, ptr addrspace(1) %6, i64 %39, !dbg !32
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %52, i1 true) #2, !dbg !33
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !33
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !33
  %56 = getelementptr i64, ptr addrspace(1) %7, i64 %34, !dbg !34
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !35
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !35
  %59 = getelementptr i64, ptr addrspace(1) %8, i64 %34, !dbg !36
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !37
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %59, i1 true) #2, !dbg !37
  %62 = getelementptr i64, ptr addrspace(1) %9, i64 %34, !dbg !38
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !39
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !39
  %65 = add i64 %36, 14, !dbg !40
  %66 = icmp slt i64 %36, 0, !dbg !41
  %67 = select i1 %66, i64 %65, i64 %36, !dbg !42
  %68 = add i64 %42, 14, !dbg !43
  %69 = add i64 %43, 14, !dbg !43
  %70 = icmp slt i64 %42, 0, !dbg !44
  %71 = icmp slt i64 %43, 0, !dbg !44
  %72 = select i1 %70, i64 %68, i64 %42, !dbg !45
  %73 = select i1 %71, i64 %69, i64 %43, !dbg !45
  %74 = mul i64 %67, 14, !dbg !46
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !47
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %74, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %23, !dbg !47
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !47
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %74, !dbg !47
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %23, !dbg !47
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #2, !dbg !48
  %82 = bitcast i32 %81 to float, !dbg !48
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #2, !dbg !48
  %84 = bitcast i32 %83 to float, !dbg !48
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !23
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !23
  %87 = add i64 %46, 14, !dbg !49
  %88 = add i64 %47, 14, !dbg !49
  %89 = icmp slt i64 %46, 0, !dbg !50
  %90 = icmp slt i64 %47, 0, !dbg !50
  %91 = select i1 %89, i64 %87, i64 %46, !dbg !51
  %92 = select i1 %90, i64 %88, i64 %47, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %74, !dbg !52
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %23, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !52
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %74, !dbg !52
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %23, !dbg !52
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #2, !dbg !53
  %100 = bitcast i32 %99 to float, !dbg !53
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !53
  %102 = bitcast i32 %101 to float, !dbg !53
  %103 = add i64 %50, 14, !dbg !54
  %104 = add i64 %51, 14, !dbg !54
  %105 = icmp slt i64 %50, 0, !dbg !55
  %106 = icmp slt i64 %51, 0, !dbg !55
  %107 = select i1 %105, i64 %103, i64 %50, !dbg !56
  %108 = select i1 %106, i64 %104, i64 %51, !dbg !56
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !57
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %74, !dbg !57
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %23, !dbg !57
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !57
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %74, !dbg !57
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %23, !dbg !57
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !58
  %116 = bitcast i32 %115 to float, !dbg !58
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !58
  %118 = bitcast i32 %117 to float, !dbg !58
  %119 = add i64 %54, 14, !dbg !59
  %120 = add i64 %55, 14, !dbg !59
  %121 = icmp slt i64 %54, 0, !dbg !60
  %122 = icmp slt i64 %55, 0, !dbg !60
  %123 = select i1 %121, i64 %119, i64 %54, !dbg !61
  %124 = select i1 %122, i64 %120, i64 %55, !dbg !61
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !62
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %74, !dbg !62
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %23, !dbg !62
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !62
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %74, !dbg !62
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %23, !dbg !62
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !63
  %132 = bitcast i32 %131 to float, !dbg !63
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !63
  %134 = bitcast i32 %133 to float, !dbg !63
  %135 = add i64 %57, 14, !dbg !64
  %136 = icmp slt i64 %57, 0, !dbg !65
  %137 = select i1 %136, i64 %135, i64 %57, !dbg !66
  %138 = mul i64 %137, 14, !dbg !67
  %139 = getelementptr float, ptr addrspace(1) %75, i64 %138, !dbg !68
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %23, !dbg !68
  %141 = getelementptr float, ptr addrspace(1) %78, i64 %138, !dbg !68
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %23, !dbg !68
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #2, !dbg !69
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #2, !dbg !69
  %145 = getelementptr float, ptr addrspace(1) %93, i64 %138, !dbg !70
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %23, !dbg !70
  %147 = getelementptr float, ptr addrspace(1) %96, i64 %138, !dbg !70
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %23, !dbg !70
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #2, !dbg !71
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #2, !dbg !71
  %151 = getelementptr float, ptr addrspace(1) %109, i64 %138, !dbg !72
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %23, !dbg !72
  %153 = getelementptr float, ptr addrspace(1) %112, i64 %138, !dbg !72
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %23, !dbg !72
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #2, !dbg !73
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #2, !dbg !73
  %157 = getelementptr float, ptr addrspace(1) %125, i64 %138, !dbg !74
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %23, !dbg !74
  %159 = getelementptr float, ptr addrspace(1) %128, i64 %138, !dbg !74
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %23, !dbg !74
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #2, !dbg !75
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #2, !dbg !75
  %163 = add i64 %60, 14, !dbg !76
  %164 = icmp slt i64 %60, 0, !dbg !77
  %165 = select i1 %164, i64 %163, i64 %60, !dbg !78
  %166 = mul i64 %165, 14, !dbg !79
  %167 = getelementptr float, ptr addrspace(1) %75, i64 %166, !dbg !80
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %23, !dbg !80
  %169 = getelementptr float, ptr addrspace(1) %78, i64 %166, !dbg !80
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %23, !dbg !80
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #2, !dbg !81
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #2, !dbg !81
  %173 = getelementptr float, ptr addrspace(1) %93, i64 %166, !dbg !82
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %23, !dbg !82
  %175 = getelementptr float, ptr addrspace(1) %96, i64 %166, !dbg !82
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %23, !dbg !82
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #2, !dbg !83
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #2, !dbg !83
  %179 = getelementptr float, ptr addrspace(1) %109, i64 %166, !dbg !84
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %23, !dbg !84
  %181 = getelementptr float, ptr addrspace(1) %112, i64 %166, !dbg !84
  %182 = getelementptr float, ptr addrspace(1) %181, i64 %23, !dbg !84
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #2, !dbg !85
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #2, !dbg !85
  %185 = getelementptr float, ptr addrspace(1) %125, i64 %166, !dbg !86
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %23, !dbg !86
  %187 = getelementptr float, ptr addrspace(1) %128, i64 %166, !dbg !86
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %23, !dbg !86
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #2, !dbg !87
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %188, i1 true) #2, !dbg !87
  %191 = add i64 %63, 14, !dbg !88
  %192 = icmp slt i64 %63, 0, !dbg !89
  %193 = select i1 %192, i64 %191, i64 %63, !dbg !90
  %194 = mul i64 %193, 14, !dbg !91
  %195 = getelementptr float, ptr addrspace(1) %75, i64 %194, !dbg !92
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %23, !dbg !92
  %197 = getelementptr float, ptr addrspace(1) %78, i64 %194, !dbg !92
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %23, !dbg !92
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %196, i1 true) #2, !dbg !93
  %200 = bitcast i32 %199 to float, !dbg !93
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %198, i1 true) #2, !dbg !93
  %202 = bitcast i32 %201 to float, !dbg !93
  %203 = getelementptr float, ptr addrspace(1) %93, i64 %194, !dbg !94
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %23, !dbg !94
  %205 = getelementptr float, ptr addrspace(1) %96, i64 %194, !dbg !94
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %23, !dbg !94
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #2, !dbg !95
  %208 = bitcast i32 %207 to float, !dbg !95
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #2, !dbg !95
  %210 = bitcast i32 %209 to float, !dbg !95
  %211 = getelementptr float, ptr addrspace(1) %109, i64 %194, !dbg !96
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %23, !dbg !96
  %213 = getelementptr float, ptr addrspace(1) %112, i64 %194, !dbg !96
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %23, !dbg !96
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %212, i1 true) #2, !dbg !97
  %216 = bitcast i32 %215 to float, !dbg !97
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %214, i1 true) #2, !dbg !97
  %218 = bitcast i32 %217 to float, !dbg !97
  %219 = getelementptr float, ptr addrspace(1) %125, i64 %194, !dbg !98
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %23, !dbg !98
  %221 = getelementptr float, ptr addrspace(1) %128, i64 %194, !dbg !98
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %23, !dbg !98
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #2, !dbg !99
  %224 = bitcast i32 %223 to float, !dbg !99
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #2, !dbg !99
  %226 = bitcast i32 %225 to float, !dbg !99
  %227 = sitofp <2 x i32> %32 to <2 x float>, !dbg !19
  %228 = fadd <2 x float> %227, splat (float 5.000000e-01), !dbg !20
  %229 = fmul <2 x float> %228, splat (float 8.750000e-01), !dbg !21
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !100
  %231 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !23
  %232 = insertelement <2 x i32> %231, i32 %230, i64 1, !dbg !23
  %233 = icmp eq <2 x i32> %232, zeroinitializer, !dbg !23
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !100
  %235 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !23
  %236 = insertelement <2 x i32> %235, i32 %234, i64 1, !dbg !23
  %237 = icmp eq <2 x i32> %236, zeroinitializer, !dbg !23
  %238 = fadd <2 x float> %229, splat (float -5.000000e-01), !dbg !22
  %239 = extractelement <2 x float> %238, i64 0, !dbg !23
  %240 = tail call float @llvm.nvvm.floor.ftz.f(float %239), !dbg !23
  %241 = tail call float @llvm.nvvm.floor.f(float %239), !dbg !23
  %242 = extractelement <2 x float> %238, i64 1, !dbg !100
  %243 = tail call float @llvm.nvvm.floor.ftz.f(float %242), !dbg !100
  %244 = tail call float @llvm.nvvm.floor.f(float %242), !dbg !100
  %245 = insertelement <2 x float> poison, float %241, i64 0, !dbg !23
  %246 = insertelement <2 x float> %245, float %244, i64 1, !dbg !23
  %247 = insertelement <2 x float> poison, float %240, i64 0, !dbg !23
  %248 = insertelement <2 x float> %247, float %243, i64 1, !dbg !23
  %249 = select <2 x i1> %233, <2 x float> %246, <2 x float> %248, !dbg !23
  %250 = fsub <2 x float> %238, %249, !dbg !101
  %251 = fcmp ole <2 x float> %250, zeroinitializer, !dbg !102
  %252 = select <2 x i1> %251, <2 x float> zeroinitializer, <2 x float> %250, !dbg !102
  %253 = fcmp olt <2 x float> %252, splat (float 1.000000e+00), !dbg !106
  %254 = fcmp uno <2 x float> %252, zeroinitializer, !dbg !108
  %255 = or <2 x i1> %253, %254, !dbg !109
  %256 = select <2 x i1> %255, <2 x float> %252, <2 x float> splat (float 1.000000e+00), !dbg !110
  %257 = extractelement <2 x float> %256, i64 0, !dbg !110
  %258 = fadd float %257, 1.000000e+00, !dbg !111
  %259 = fmul float %258, 7.500000e-01, !dbg !112
  %260 = fsub float 3.750000e+00, %259, !dbg !113
  %261 = fmul float %258, %260, !dbg !114
  %262 = fadd float %261, -6.000000e+00, !dbg !115
  %263 = fmul float %257, 1.250000e+00, !dbg !116
  %264 = fadd float %263, -2.250000e+00, !dbg !117
  %265 = fmul float %257, %264, !dbg !118
  %266 = fsub float 1.000000e+00, %257, !dbg !119
  %267 = fmul float %266, 1.250000e+00, !dbg !120
  %268 = fadd float %267, -2.250000e+00, !dbg !121
  %269 = fmul float %266, %268, !dbg !122
  %270 = fmul float %266, %269, !dbg !123
  %271 = fadd float %270, 1.000000e+00, !dbg !124
  %272 = fmul float %271, %116, !dbg !125
  %273 = fsub <2 x float> <float 2.000000e+00, float poison>, %256, !dbg !126
  %274 = fadd <2 x float> %256, <float poison, float 1.000000e+00>, !dbg !126
  %275 = shufflevector <2 x float> %273, <2 x float> %274, <2 x i32> <i32 0, i32 3>, !dbg !126
  %276 = fsub float 2.000000e+00, %257, !dbg !126
  %277 = fmul float %276, 7.500000e-01, !dbg !127
  %278 = fsub float 3.750000e+00, %277, !dbg !128
  %279 = fmul float %271, %216, !dbg !129
  %280 = insertelement <2 x float> <float poison, float 7.500000e-01>, float %278, i64 0, !dbg !130
  %281 = fmul <2 x float> %275, %280, !dbg !130
  %282 = fadd <2 x float> %281, <float -6.000000e+00, float poison>, !dbg !131
  %283 = fsub <2 x float> <float poison, float 3.750000e+00>, %281, !dbg !131
  %284 = shufflevector <2 x float> %282, <2 x float> %283, <2 x i32> <i32 0, i32 3>, !dbg !131
  %285 = fmul <2 x float> %275, %284, !dbg !132
  %286 = fadd <2 x float> %285, <float 3.000000e+00, float -6.000000e+00>, !dbg !133
  %287 = extractelement <2 x float> %286, i64 0, !dbg !134
  %288 = fmul float %287, %224, !dbg !134
  %289 = insertelement <2 x float> %275, float %132, i64 0, !dbg !135
  %290 = fmul <2 x float> %286, %289, !dbg !135
  %291 = extractelement <2 x float> %256, i64 1, !dbg !136
  %292 = fsub float 1.000000e+00, %291, !dbg !137
  %293 = insertelement <2 x float> poison, float %258, i64 0, !dbg !138
  %294 = shufflevector <2 x float> %293, <2 x float> %256, <2 x i32> <i32 0, i32 2>, !dbg !138
  %295 = insertelement <2 x float> poison, float %262, i64 0, !dbg !138
  %296 = insertelement <2 x float> %295, float %265, i64 1, !dbg !138
  %297 = fmul <2 x float> %294, %296, !dbg !138
  %298 = fadd <2 x float> %297, <float 3.000000e+00, float 1.000000e+00>, !dbg !139
  %299 = extractelement <2 x float> %298, i64 0, !dbg !140
  %300 = fmul float %299, %82, !dbg !140
  %301 = extractelement <2 x float> %298, i64 1, !dbg !141
  %302 = fmul float %301, %100, !dbg !142
  %303 = fadd float %302, %300, !dbg !143
  %304 = fadd float %272, %303, !dbg !144
  %305 = insertelement <2 x float> <float poison, float 3.000000e+00>, float %304, i64 0, !dbg !145
  %306 = fadd <2 x float> %290, %305, !dbg !145
  %307 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !81
  %308 = insertelement <2 x i32> %307, i32 %149, i64 1, !dbg !81
  %309 = bitcast <2 x i32> %308 to <2 x float>, !dbg !81
  %310 = fmul <2 x float> %298, %309, !dbg !146
  %311 = insertelement <2 x i32> poison, i32 %177, i64 0, !dbg !83
  %312 = insertelement <2 x i32> %311, i32 %143, i64 1, !dbg !83
  %313 = bitcast <2 x i32> %312 to <2 x float>, !dbg !83
  %314 = shufflevector <2 x float> %298, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !147
  %315 = fmul <2 x float> %314, %313, !dbg !147
  %316 = fadd <2 x float> %310, %315, !dbg !148
  %317 = insertelement <2 x i32> poison, i32 %183, i64 0, !dbg !85
  %318 = insertelement <2 x i32> %317, i32 %155, i64 1, !dbg !85
  %319 = bitcast <2 x i32> %318 to <2 x float>, !dbg !85
  %320 = insertelement <2 x float> poison, float %271, i64 0, !dbg !149
  %321 = shufflevector <2 x float> %320, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !149
  %322 = fmul <2 x float> %321, %319, !dbg !149
  %323 = fadd <2 x float> %316, %322, !dbg !150
  %324 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !87
  %325 = insertelement <2 x i32> %324, i32 %161, i64 1, !dbg !87
  %326 = bitcast <2 x i32> %325 to <2 x float>, !dbg !87
  %327 = shufflevector <2 x float> %286, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !151
  %328 = fmul <2 x float> %327, %326, !dbg !151
  %329 = fadd <2 x float> %323, %328, !dbg !152
  %330 = fmul float %299, %200, !dbg !153
  %331 = fmul float %301, %208, !dbg !141
  %332 = fadd float %330, %331, !dbg !154
  %333 = fadd float %332, %279, !dbg !155
  %334 = fadd float %333, %288, !dbg !156
  %shift = shufflevector <2 x float> %306, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !157
  %335 = fmul <2 x float> %306, %shift, !dbg !157
  %336 = insertelement <2 x float> %256, float %292, i64 0, !dbg !158
  %337 = fmul <2 x float> %336, splat (float 1.250000e+00), !dbg !158
  %338 = fadd <2 x float> %337, splat (float -2.250000e+00), !dbg !159
  %339 = fmul <2 x float> %336, %338, !dbg !160
  %340 = fmul <2 x float> %336, %339, !dbg !161
  %341 = fadd <2 x float> %340, splat (float 1.000000e+00), !dbg !162
  %342 = fmul <2 x float> %329, %341, !dbg !163
  %shift10 = shufflevector <2 x float> %342, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !164
  %343 = fadd <2 x float> %shift10, %335, !dbg !164
  %344 = insertelement <2 x float> poison, float %29, i64 0, !dbg !23
  %345 = insertelement <2 x float> %344, float %244, i64 1, !dbg !23
  %346 = insertelement <2 x float> poison, float %28, i64 0, !dbg !23
  %347 = insertelement <2 x float> %346, float %243, i64 1, !dbg !23
  %348 = select <2 x i1> %237, <2 x float> %345, <2 x float> %347, !dbg !23
  %349 = insertelement <2 x float> %238, float %27, i64 0, !dbg !101
  %350 = fsub <2 x float> %349, %348, !dbg !101
  %351 = fcmp ole <2 x float> %350, zeroinitializer, !dbg !102
  %352 = select <2 x i1> %351, <2 x float> zeroinitializer, <2 x float> %350, !dbg !102
  %353 = fcmp olt <2 x float> %352, splat (float 1.000000e+00), !dbg !106
  %354 = fcmp uno <2 x float> %352, zeroinitializer, !dbg !108
  %355 = or <2 x i1> %353, %354, !dbg !109
  %356 = select <2 x i1> %355, <2 x float> %352, <2 x float> splat (float 1.000000e+00), !dbg !110
  %357 = extractelement <2 x float> %356, i64 0, !dbg !110
  %358 = fadd float %357, 1.000000e+00, !dbg !111
  %359 = fmul float %358, 7.500000e-01, !dbg !112
  %360 = fsub float 3.750000e+00, %359, !dbg !113
  %361 = fmul float %358, %360, !dbg !114
  %362 = fadd float %361, -6.000000e+00, !dbg !115
  %363 = fmul float %357, 1.250000e+00, !dbg !116
  %364 = fadd float %363, -2.250000e+00, !dbg !117
  %365 = fmul float %357, %364, !dbg !118
  %366 = fsub float 1.000000e+00, %357, !dbg !119
  %367 = fmul float %366, 1.250000e+00, !dbg !120
  %368 = fadd float %367, -2.250000e+00, !dbg !121
  %369 = fmul float %366, %368, !dbg !122
  %370 = fmul float %366, %369, !dbg !123
  %371 = fadd float %370, 1.000000e+00, !dbg !124
  %372 = fmul float %371, %118, !dbg !125
  %373 = fsub <2 x float> <float 2.000000e+00, float poison>, %356, !dbg !126
  %374 = fadd <2 x float> %356, <float poison, float 1.000000e+00>, !dbg !126
  %375 = shufflevector <2 x float> %373, <2 x float> %374, <2 x i32> <i32 0, i32 3>, !dbg !126
  %376 = fsub float 2.000000e+00, %357, !dbg !126
  %377 = fmul float %376, 7.500000e-01, !dbg !127
  %378 = fsub float 3.750000e+00, %377, !dbg !128
  %379 = fmul float %371, %218, !dbg !129
  %380 = insertelement <2 x float> <float poison, float 7.500000e-01>, float %378, i64 0, !dbg !130
  %381 = fmul <2 x float> %375, %380, !dbg !130
  %382 = fadd <2 x float> %381, <float -6.000000e+00, float poison>, !dbg !131
  %383 = fsub <2 x float> <float poison, float 3.750000e+00>, %381, !dbg !131
  %384 = shufflevector <2 x float> %382, <2 x float> %383, <2 x i32> <i32 0, i32 3>, !dbg !131
  %385 = fmul <2 x float> %375, %384, !dbg !132
  %386 = fadd <2 x float> %385, <float 3.000000e+00, float -6.000000e+00>, !dbg !133
  %387 = extractelement <2 x float> %386, i64 0, !dbg !134
  %388 = fmul float %387, %226, !dbg !134
  %389 = insertelement <2 x float> %375, float %134, i64 0, !dbg !135
  %390 = fmul <2 x float> %386, %389, !dbg !135
  %391 = extractelement <2 x float> %356, i64 1, !dbg !136
  %392 = fsub float 1.000000e+00, %391, !dbg !137
  %393 = insertelement <2 x float> poison, float %358, i64 0, !dbg !138
  %394 = shufflevector <2 x float> %393, <2 x float> %356, <2 x i32> <i32 0, i32 2>, !dbg !138
  %395 = insertelement <2 x float> poison, float %362, i64 0, !dbg !138
  %396 = insertelement <2 x float> %395, float %365, i64 1, !dbg !138
  %397 = fmul <2 x float> %394, %396, !dbg !138
  %398 = fadd <2 x float> %397, <float 3.000000e+00, float 1.000000e+00>, !dbg !139
  %399 = extractelement <2 x float> %398, i64 0, !dbg !140
  %400 = fmul float %399, %84, !dbg !140
  %401 = extractelement <2 x float> %398, i64 1, !dbg !141
  %402 = fmul float %401, %102, !dbg !142
  %403 = fadd float %402, %400, !dbg !143
  %404 = fadd float %372, %403, !dbg !144
  %405 = insertelement <2 x float> <float poison, float 3.000000e+00>, float %404, i64 0, !dbg !145
  %406 = fadd <2 x float> %390, %405, !dbg !145
  %407 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !81
  %408 = insertelement <2 x i32> %407, i32 %150, i64 1, !dbg !81
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !81
  %410 = fmul <2 x float> %398, %409, !dbg !146
  %411 = insertelement <2 x i32> poison, i32 %178, i64 0, !dbg !83
  %412 = insertelement <2 x i32> %411, i32 %144, i64 1, !dbg !83
  %413 = bitcast <2 x i32> %412 to <2 x float>, !dbg !83
  %414 = shufflevector <2 x float> %398, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !147
  %415 = fmul <2 x float> %414, %413, !dbg !147
  %416 = fadd <2 x float> %410, %415, !dbg !148
  %417 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !85
  %418 = insertelement <2 x i32> %417, i32 %156, i64 1, !dbg !85
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !85
  %420 = insertelement <2 x float> poison, float %371, i64 0, !dbg !149
  %421 = shufflevector <2 x float> %420, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !149
  %422 = fmul <2 x float> %421, %419, !dbg !149
  %423 = fadd <2 x float> %416, %422, !dbg !150
  %424 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !87
  %425 = insertelement <2 x i32> %424, i32 %162, i64 1, !dbg !87
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !87
  %427 = shufflevector <2 x float> %386, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !151
  %428 = fmul <2 x float> %427, %426, !dbg !151
  %429 = fadd <2 x float> %423, %428, !dbg !152
  %430 = fmul float %399, %202, !dbg !153
  %431 = fmul float %401, %210, !dbg !141
  %432 = fadd float %430, %431, !dbg !154
  %433 = fadd float %432, %379, !dbg !155
  %434 = fadd float %433, %388, !dbg !156
  %shift11 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !157
  %435 = fmul <2 x float> %406, %shift11, !dbg !157
  %436 = insertelement <2 x float> %356, float %392, i64 0, !dbg !158
  %437 = fmul <2 x float> %436, splat (float 1.250000e+00), !dbg !158
  %438 = fadd <2 x float> %437, splat (float -2.250000e+00), !dbg !159
  %439 = fmul <2 x float> %436, %438, !dbg !160
  %440 = fmul <2 x float> %436, %439, !dbg !161
  %441 = fadd <2 x float> %440, splat (float 1.000000e+00), !dbg !162
  %442 = fmul <2 x float> %429, %441, !dbg !163
  %shift12 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !164
  %443 = fadd <2 x float> %shift12, %435, !dbg !164
  %444 = fadd <2 x float> %342, %343, !dbg !165
  %445 = extractelement <2 x float> %444, i64 0, !dbg !165
  %446 = fadd <2 x float> %442, %443, !dbg !165
  %447 = extractelement <2 x float> %446, i64 0, !dbg !165
  %448 = fsub float 2.000000e+00, %291, !dbg !136
  %449 = fsub float 2.000000e+00, %391, !dbg !136
  %450 = fmul float %448, 7.500000e-01, !dbg !166
  %451 = fmul float %449, 7.500000e-01, !dbg !166
  %452 = fsub float 3.750000e+00, %450, !dbg !167
  %453 = fsub float 3.750000e+00, %451, !dbg !167
  %454 = fmul float %448, %452, !dbg !168
  %455 = fmul float %449, %453, !dbg !168
  %456 = fadd float %454, -6.000000e+00, !dbg !169
  %457 = fadd float %455, -6.000000e+00, !dbg !169
  %458 = fmul float %448, %456, !dbg !170
  %459 = fmul float %449, %457, !dbg !170
  %460 = fadd float %458, 3.000000e+00, !dbg !171
  %461 = fadd float %459, 3.000000e+00, !dbg !171
  %462 = fmul float %334, %460, !dbg !172
  %463 = fmul float %434, %461, !dbg !172
  %464 = fadd float %462, %445, !dbg !173
  %465 = fadd float %463, %447, !dbg !173
  %466 = sext i32 %17 to i64, !dbg !174
  %467 = getelementptr float, ptr addrspace(1) %0, i64 %466, !dbg !174
  %468 = bitcast float %464 to i32, !dbg !175
  %469 = bitcast float %465 to i32, !dbg !175
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %468, i32 %469, ptr addrspace(1) %467, i1 true) #2, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvx2hllbyos6rsz7ep5hl3zxckqsmferm236bo6ovdkxwr7zyplu.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_floor_mul_rsub_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 43, column: 51, scope: !7)
!18 = !DILocation(line: 43, column: 47, scope: !7)
!19 = !DILocation(line: 45, column: 21, scope: !7)
!20 = !DILocation(line: 47, column: 20, scope: !7)
!21 = !DILocation(line: 49, column: 20, scope: !7)
!22 = !DILocation(line: 50, column: 20, scope: !7)
!23 = !DILocation(line: 51, column: 28, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 35, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 35, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 36, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 32, scope: !7)
!39 = !DILocation(line: 35, column: 37, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 43, column: 40, scope: !7)
!47 = !DILocation(line: 43, column: 30, scope: !7)
!48 = !DILocation(line: 43, column: 56, scope: !7)
!49 = !DILocation(line: 69, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 35, scope: !7)
!52 = !DILocation(line: 72, column: 31, scope: !7)
!53 = !DILocation(line: 72, column: 58, scope: !7)
!54 = !DILocation(line: 82, column: 20, scope: !7)
!55 = !DILocation(line: 83, column: 20, scope: !7)
!56 = !DILocation(line: 84, column: 35, scope: !7)
!57 = !DILocation(line: 85, column: 31, scope: !7)
!58 = !DILocation(line: 85, column: 58, scope: !7)
!59 = !DILocation(line: 94, column: 20, scope: !7)
!60 = !DILocation(line: 95, column: 20, scope: !7)
!61 = !DILocation(line: 96, column: 35, scope: !7)
!62 = !DILocation(line: 97, column: 31, scope: !7)
!63 = !DILocation(line: 97, column: 58, scope: !7)
!64 = !DILocation(line: 108, column: 20, scope: !7)
!65 = !DILocation(line: 109, column: 20, scope: !7)
!66 = !DILocation(line: 110, column: 35, scope: !7)
!67 = !DILocation(line: 111, column: 41, scope: !7)
!68 = !DILocation(line: 111, column: 31, scope: !7)
!69 = !DILocation(line: 111, column: 58, scope: !7)
!70 = !DILocation(line: 113, column: 31, scope: !7)
!71 = !DILocation(line: 113, column: 59, scope: !7)
!72 = !DILocation(line: 116, column: 31, scope: !7)
!73 = !DILocation(line: 116, column: 59, scope: !7)
!74 = !DILocation(line: 119, column: 31, scope: !7)
!75 = !DILocation(line: 119, column: 59, scope: !7)
!76 = !DILocation(line: 122, column: 20, scope: !7)
!77 = !DILocation(line: 123, column: 20, scope: !7)
!78 = !DILocation(line: 124, column: 35, scope: !7)
!79 = !DILocation(line: 125, column: 41, scope: !7)
!80 = !DILocation(line: 125, column: 31, scope: !7)
!81 = !DILocation(line: 125, column: 58, scope: !7)
!82 = !DILocation(line: 127, column: 31, scope: !7)
!83 = !DILocation(line: 127, column: 59, scope: !7)
!84 = !DILocation(line: 130, column: 32, scope: !7)
!85 = !DILocation(line: 130, column: 60, scope: !7)
!86 = !DILocation(line: 133, column: 32, scope: !7)
!87 = !DILocation(line: 133, column: 60, scope: !7)
!88 = !DILocation(line: 136, column: 22, scope: !7)
!89 = !DILocation(line: 137, column: 22, scope: !7)
!90 = !DILocation(line: 138, column: 38, scope: !7)
!91 = !DILocation(line: 139, column: 42, scope: !7)
!92 = !DILocation(line: 139, column: 32, scope: !7)
!93 = !DILocation(line: 139, column: 60, scope: !7)
!94 = !DILocation(line: 141, column: 32, scope: !7)
!95 = !DILocation(line: 141, column: 61, scope: !7)
!96 = !DILocation(line: 144, column: 32, scope: !7)
!97 = !DILocation(line: 144, column: 61, scope: !7)
!98 = !DILocation(line: 147, column: 32, scope: !7)
!99 = !DILocation(line: 147, column: 61, scope: !7)
!100 = !DILocation(line: 155, column: 29, scope: !7)
!101 = !DILocation(line: 52, column: 20, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !103, inlinedAt: !105)
!103 = distinct !DILexicalBlockFile(scope: !7, file: !104, discriminator: 0)
!104 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!105 = !DILocation(line: 54, column: 42, scope: !7)
!106 = !DILocation(line: 110, column: 15, scope: !103, inlinedAt: !107)
!107 = !DILocation(line: 56, column: 42, scope: !7)
!108 = !DILocation(line: 112, column: 21, scope: !103, inlinedAt: !107)
!109 = !DILocation(line: 112, column: 16, scope: !103, inlinedAt: !107)
!110 = !DILocation(line: 113, column: 29, scope: !103, inlinedAt: !107)
!111 = !DILocation(line: 57, column: 20, scope: !7)
!112 = !DILocation(line: 59, column: 20, scope: !7)
!113 = !DILocation(line: 61, column: 20, scope: !7)
!114 = !DILocation(line: 62, column: 20, scope: !7)
!115 = !DILocation(line: 64, column: 20, scope: !7)
!116 = !DILocation(line: 74, column: 20, scope: !7)
!117 = !DILocation(line: 76, column: 20, scope: !7)
!118 = !DILocation(line: 77, column: 20, scope: !7)
!119 = !DILocation(line: 86, column: 20, scope: !7)
!120 = !DILocation(line: 87, column: 20, scope: !7)
!121 = !DILocation(line: 88, column: 20, scope: !7)
!122 = !DILocation(line: 89, column: 20, scope: !7)
!123 = !DILocation(line: 90, column: 20, scope: !7)
!124 = !DILocation(line: 91, column: 20, scope: !7)
!125 = !DILocation(line: 92, column: 20, scope: !7)
!126 = !DILocation(line: 99, column: 20, scope: !7)
!127 = !DILocation(line: 100, column: 20, scope: !7)
!128 = !DILocation(line: 101, column: 20, scope: !7)
!129 = !DILocation(line: 145, column: 22, scope: !7)
!130 = !DILocation(line: 102, column: 20, scope: !7)
!131 = !DILocation(line: 103, column: 20, scope: !7)
!132 = !DILocation(line: 104, column: 20, scope: !7)
!133 = !DILocation(line: 105, column: 20, scope: !7)
!134 = !DILocation(line: 148, column: 22, scope: !7)
!135 = !DILocation(line: 106, column: 20, scope: !7)
!136 = !DILocation(line: 182, column: 21, scope: !7)
!137 = !DILocation(line: 174, column: 21, scope: !7)
!138 = !DILocation(line: 65, column: 20, scope: !7)
!139 = !DILocation(line: 67, column: 20, scope: !7)
!140 = !DILocation(line: 68, column: 19, scope: !7)
!141 = !DILocation(line: 142, column: 22, scope: !7)
!142 = !DILocation(line: 80, column: 20, scope: !7)
!143 = !DILocation(line: 81, column: 20, scope: !7)
!144 = !DILocation(line: 93, column: 20, scope: !7)
!145 = !DILocation(line: 107, column: 20, scope: !7)
!146 = !DILocation(line: 126, column: 20, scope: !7)
!147 = !DILocation(line: 128, column: 20, scope: !7)
!148 = !DILocation(line: 129, column: 21, scope: !7)
!149 = !DILocation(line: 131, column: 22, scope: !7)
!150 = !DILocation(line: 132, column: 22, scope: !7)
!151 = !DILocation(line: 134, column: 22, scope: !7)
!152 = !DILocation(line: 135, column: 22, scope: !7)
!153 = !DILocation(line: 140, column: 22, scope: !7)
!154 = !DILocation(line: 143, column: 22, scope: !7)
!155 = !DILocation(line: 146, column: 22, scope: !7)
!156 = !DILocation(line: 149, column: 22, scope: !7)
!157 = !DILocation(line: 166, column: 21, scope: !7)
!158 = !DILocation(line: 175, column: 22, scope: !7)
!159 = !DILocation(line: 176, column: 22, scope: !7)
!160 = !DILocation(line: 177, column: 22, scope: !7)
!161 = !DILocation(line: 178, column: 22, scope: !7)
!162 = !DILocation(line: 179, column: 22, scope: !7)
!163 = !DILocation(line: 180, column: 22, scope: !7)
!164 = !DILocation(line: 173, column: 22, scope: !7)
!165 = !DILocation(line: 181, column: 22, scope: !7)
!166 = !DILocation(line: 183, column: 22, scope: !7)
!167 = !DILocation(line: 184, column: 22, scope: !7)
!168 = !DILocation(line: 185, column: 22, scope: !7)
!169 = !DILocation(line: 186, column: 22, scope: !7)
!170 = !DILocation(line: 187, column: 22, scope: !7)
!171 = !DILocation(line: 188, column: 22, scope: !7)
!172 = !DILocation(line: 189, column: 22, scope: !7)
!173 = !DILocation(line: 190, column: 22, scope: !7)
!174 = !DILocation(line: 191, column: 28, scope: !7)
!175 = !DILocation(line: 191, column: 41, scope: !7)
!176 = !DILocation(line: 191, column: 4, scope: !7)
