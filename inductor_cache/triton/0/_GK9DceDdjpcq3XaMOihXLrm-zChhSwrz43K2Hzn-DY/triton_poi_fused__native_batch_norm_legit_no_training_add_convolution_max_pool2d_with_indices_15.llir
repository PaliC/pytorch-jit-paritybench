; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 3, !dbg !12
  %15 = and i32 %14, 1016, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = srem i32 %16, 1024, !dbg !14
  %19 = srem i32 %17, 1024, !dbg !14
  %20 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %22 = sdiv <2 x i32> %21, <i32 8192, i32 1024>, !dbg !15
  %23 = srem <2 x i32> %22, splat (i32 8), !dbg !16
  %24 = sext i32 %16 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !17
  %26 = sext i32 %17 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !18
  %30 = sext i32 %18 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = sext i32 %19 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = bitcast i32 %54 to float, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !28
  %68 = extractelement <2 x i32> %23, i64 0, !dbg !29
  %69 = icmp sgt i32 %68, 0, !dbg !30
  %70 = extractelement <2 x i32> %23, i64 1, !dbg !29
  %71 = icmp sgt i32 %70, 0, !dbg !31
  %72 = and i1 %69, %71, !dbg !32
  %73 = shl nsw i32 %70, 11, !dbg !33
  %74 = extractelement <2 x i32> %22, i64 0, !dbg !34
  %75 = shl i32 %74, 15, !dbg !34
  %76 = add i32 %73, %75, !dbg !35
  %77 = add i32 %76, -17408, !dbg !36
  %78 = add nsw i32 %77, %18, !dbg !37
  %79 = add nsw i32 %77, %19, !dbg !37
  %80 = sext i32 %78 to i64, !dbg !38
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !38
  %82 = sext i32 %79 to i64, !dbg !38
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !38
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #4, !dbg !39
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72, i32 -8388608, i1 %72) #4, !dbg !39
  %86 = icmp sgt i32 %70, -1, !dbg !40
  %87 = and i1 %69, %86, !dbg !41
  %88 = add i32 %76, -16384, !dbg !42
  %89 = add i32 %88, %18, !dbg !43
  %90 = add i32 %88, %19, !dbg !43
  %91 = sext i32 %89 to i64, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !44
  %93 = sext i32 %90 to i64, !dbg !44
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !44
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !45
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !45
  %97 = add i32 %76, -15360, !dbg !46
  %98 = add nsw i32 %97, %18, !dbg !47
  %99 = add nsw i32 %97, %19, !dbg !47
  %100 = sext i32 %98 to i64, !dbg !48
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !48
  %102 = sext i32 %99 to i64, !dbg !48
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !48
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !49
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87, i32 -8388608, i1 %87) #4, !dbg !49
  %106 = icmp sgt i32 %68, -1, !dbg !50
  %107 = and i1 %106, %71, !dbg !51
  %108 = add i32 %76, -1024, !dbg !52
  %109 = add nsw i32 %108, %18, !dbg !53
  %110 = add nsw i32 %108, %19, !dbg !53
  %111 = sext i32 %109 to i64, !dbg !54
  %112 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !54
  %113 = sext i32 %110 to i64, !dbg !54
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !54
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !55
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !55
  %117 = or i32 %68, %70, !dbg !29
  %118 = icmp sgt i32 %117, -1, !dbg !29
  %119 = add i32 %76, %18, !dbg !56
  %120 = add i32 %76, %19, !dbg !56
  %121 = sext i32 %119 to i64, !dbg !57
  %122 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !57
  %123 = sext i32 %120 to i64, !dbg !57
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !57
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !58
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !58
  %127 = or disjoint i32 %76, 1024, !dbg !59
  %128 = add nsw i32 %127, %18, !dbg !60
  %129 = add nsw i32 %127, %19, !dbg !60
  %130 = sext i32 %128 to i64, !dbg !61
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !61
  %132 = sext i32 %129 to i64, !dbg !61
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !61
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %131, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !62
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !62
  %136 = add i32 %76, 15360, !dbg !63
  %137 = add nsw i32 %136, %18, !dbg !64
  %138 = add nsw i32 %136, %19, !dbg !64
  %139 = sext i32 %137 to i64, !dbg !65
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !65
  %141 = sext i32 %138 to i64, !dbg !65
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !65
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !66
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #4, !dbg !66
  %145 = add i32 %76, 16384, !dbg !67
  %146 = add i32 %145, %18, !dbg !68
  %147 = add i32 %145, %19, !dbg !68
  %148 = sext i32 %146 to i64, !dbg !69
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !69
  %150 = sext i32 %147 to i64, !dbg !69
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !69
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !70
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !70
  %154 = add i32 %76, 17408, !dbg !71
  %155 = add nsw i32 %154, %18, !dbg !72
  %156 = add nsw i32 %154, %19, !dbg !72
  %157 = sext i32 %155 to i64, !dbg !73
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !73
  %159 = sext i32 %156 to i64, !dbg !73
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %159, !dbg !73
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !74
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #4, !dbg !74
  %163 = fadd float %47, 0x3EE4F8B580000000, !dbg !75
  %164 = fadd float %48, 0x3EE4F8B580000000, !dbg !75
  %165 = fadd float %49, 0x3EE4F8B580000000, !dbg !75
  %166 = fadd float %50, 0x3EE4F8B580000000, !dbg !75
  %167 = fadd float %56, 0x3EE4F8B580000000, !dbg !75
  %168 = fadd float %57, 0x3EE4F8B580000000, !dbg !75
  %169 = fadd float %58, 0x3EE4F8B580000000, !dbg !75
  %170 = fadd float %59, 0x3EE4F8B580000000, !dbg !75
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i = icmp eq i32 %171, 0, !dbg !76
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i = icmp eq i32 %172, 0, !dbg !76
  br i1 %.not.i, label %178, label %173, !dbg !76

173:                                              ; preds = %10
  br i1 %.not1.i, label %176, label %174, !dbg !76

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

178:                                              ; preds = %10
  br i1 %.not1.i, label %181, label %179, !dbg !76

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #4, !dbg !76
  br label %__nv_sqrtf.exit, !dbg !76

__nv_sqrtf.exit:                                  ; preds = %174, %176, %179, %181
  %.0.i = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !76
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i30 = icmp eq i32 %183, 0, !dbg !76
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i33 = icmp eq i32 %184, 0, !dbg !76
  br i1 %.not.i30, label %190, label %185, !dbg !76

185:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %188, label %186, !dbg !76

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

190:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %193, label %191, !dbg !76

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #4, !dbg !76
  br label %__nv_sqrtf.exit34, !dbg !76

__nv_sqrtf.exit34:                                ; preds = %186, %188, %191, %193
  %.0.i32 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !76
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i35 = icmp eq i32 %195, 0, !dbg !76
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i38 = icmp eq i32 %196, 0, !dbg !76
  br i1 %.not.i35, label %202, label %197, !dbg !76

197:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %200, label %198, !dbg !76

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

202:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %205, label %203, !dbg !76

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #4, !dbg !76
  br label %__nv_sqrtf.exit39, !dbg !76

__nv_sqrtf.exit39:                                ; preds = %198, %200, %203, %205
  %.0.i37 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !76
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i40 = icmp eq i32 %207, 0, !dbg !76
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i43 = icmp eq i32 %208, 0, !dbg !76
  br i1 %.not.i40, label %214, label %209, !dbg !76

209:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %212, label %210, !dbg !76

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

214:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %217, label %215, !dbg !76

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #4, !dbg !76
  br label %__nv_sqrtf.exit44, !dbg !76

__nv_sqrtf.exit44:                                ; preds = %210, %212, %215, %217
  %.0.i42 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !76
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i45 = icmp eq i32 %219, 0, !dbg !76
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i48 = icmp eq i32 %220, 0, !dbg !76
  br i1 %.not.i45, label %226, label %221, !dbg !76

221:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %224, label %222, !dbg !76

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

226:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %229, label %227, !dbg !76

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #4, !dbg !76
  br label %__nv_sqrtf.exit49, !dbg !76

__nv_sqrtf.exit49:                                ; preds = %222, %224, %227, %229
  %.0.i47 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !76
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i50 = icmp eq i32 %231, 0, !dbg !76
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i53 = icmp eq i32 %232, 0, !dbg !76
  br i1 %.not.i50, label %238, label %233, !dbg !76

233:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %236, label %234, !dbg !76

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

238:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %241, label %239, !dbg !76

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #4, !dbg !76
  br label %__nv_sqrtf.exit54, !dbg !76

__nv_sqrtf.exit54:                                ; preds = %234, %236, %239, %241
  %.0.i52 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !76
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i55 = icmp eq i32 %243, 0, !dbg !76
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i58 = icmp eq i32 %244, 0, !dbg !76
  br i1 %.not.i55, label %250, label %245, !dbg !76

245:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %248, label %246, !dbg !76

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

250:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %253, label %251, !dbg !76

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #4, !dbg !76
  br label %__nv_sqrtf.exit59, !dbg !76

__nv_sqrtf.exit59:                                ; preds = %246, %248, %251, %253
  %.0.i57 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !76
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !76
  %.not.i60 = icmp eq i32 %255, 0, !dbg !76
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !76
  %.not1.i63 = icmp eq i32 %256, 0, !dbg !76
  br i1 %.not.i60, label %262, label %257, !dbg !76

257:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %260, label %258, !dbg !76

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

262:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %265, label %263, !dbg !76

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #4, !dbg !76
  br label %__nv_sqrtf.exit64, !dbg !76

__nv_sqrtf.exit64:                                ; preds = %258, %260, %263, %265
  %.0.i62 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !76
  %267 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %268 = bitcast i32 %267 to float, !dbg !18
  %269 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %270 = bitcast i32 %269 to float, !dbg !20
  %271 = fadd float %268, %270, !dbg !77
  %272 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !22
  %273 = bitcast i32 %272 to float, !dbg !22
  %274 = fsub float %271, %273, !dbg !78
  %275 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %276 = bitcast i32 %275 to float, !dbg !18
  %277 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %278 = bitcast i32 %277 to float, !dbg !20
  %279 = fadd float %276, %278, !dbg !77
  %280 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !22
  %281 = bitcast i32 %280 to float, !dbg !22
  %282 = fsub float %279, %281, !dbg !78
  %283 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %284 = bitcast i32 %283 to float, !dbg !18
  %285 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %286 = bitcast i32 %285 to float, !dbg !20
  %287 = fadd float %284, %286, !dbg !77
  %288 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !22
  %289 = bitcast i32 %288 to float, !dbg !22
  %290 = fsub float %287, %289, !dbg !78
  %291 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %292 = bitcast i32 %291 to float, !dbg !18
  %293 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %294 = bitcast i32 %293 to float, !dbg !20
  %295 = fadd float %292, %294, !dbg !77
  %296 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !22
  %297 = bitcast i32 %296 to float, !dbg !22
  %298 = fsub float %295, %297, !dbg !78
  %299 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %300 = bitcast i32 %299 to float, !dbg !18
  %301 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %302 = bitcast i32 %301 to float, !dbg !20
  %303 = fadd float %300, %302, !dbg !77
  %304 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %305 = bitcast i32 %304 to float, !dbg !22
  %306 = fsub float %303, %305, !dbg !78
  %307 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %308 = bitcast i32 %307 to float, !dbg !18
  %309 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %310 = bitcast i32 %309 to float, !dbg !20
  %311 = fadd float %308, %310, !dbg !77
  %312 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %313 = bitcast i32 %312 to float, !dbg !22
  %314 = fsub float %311, %313, !dbg !78
  %315 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %316 = bitcast i32 %315 to float, !dbg !18
  %317 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %318 = bitcast i32 %317 to float, !dbg !20
  %319 = fadd float %316, %318, !dbg !77
  %320 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %321 = bitcast i32 %320 to float, !dbg !22
  %322 = fsub float %319, %321, !dbg !78
  %323 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %324 = bitcast i32 %323 to float, !dbg !18
  %325 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %326 = bitcast i32 %325 to float, !dbg !20
  %327 = fadd float %324, %326, !dbg !77
  %328 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %329 = bitcast i32 %328 to float, !dbg !22
  %330 = fsub float %327, %329, !dbg !78
  %331 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !45
  %332 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !39
  %333 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !49
  %334 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !55
  %335 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !58
  %336 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !62
  %337 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !66
  %338 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !70
  %339 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !74
  %340 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !45
  %341 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !39
  %342 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !49
  %343 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !55
  %344 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !58
  %345 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !62
  %346 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !66
  %347 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !70
  %348 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !74
  %349 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !45
  %350 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !39
  %351 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !49
  %352 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !55
  %353 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !58
  %354 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !62
  %355 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !66
  %356 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !70
  %357 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !74
  %358 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !45
  %359 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !39
  %360 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !49
  %361 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !55
  %362 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !58
  %363 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !62
  %364 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !66
  %365 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !70
  %366 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !74
  %367 = insertelement <4 x i32> poison, i32 %358, i64 0, !dbg !45
  %368 = insertelement <4 x i32> %367, i32 %349, i64 1, !dbg !45
  %369 = insertelement <4 x i32> %368, i32 %340, i64 2, !dbg !45
  %370 = insertelement <4 x i32> %369, i32 %331, i64 3, !dbg !45
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !45
  %372 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !39
  %373 = insertelement <4 x i32> %372, i32 %350, i64 1, !dbg !39
  %374 = insertelement <4 x i32> %373, i32 %341, i64 2, !dbg !39
  %375 = insertelement <4 x i32> %374, i32 %332, i64 3, !dbg !39
  %376 = bitcast <4 x i32> %375 to <4 x float>, !dbg !39
  %377 = fcmp ogt <4 x float> %371, %376, !dbg !79
  %378 = insertelement <4 x i32> poison, i32 %361, i64 0, !dbg !55
  %379 = insertelement <4 x i32> %378, i32 %352, i64 1, !dbg !55
  %380 = insertelement <4 x i32> %379, i32 %343, i64 2, !dbg !55
  %381 = insertelement <4 x i32> %380, i32 %334, i64 3, !dbg !55
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !55
  %383 = fcmp uno <4 x float> %371, zeroinitializer, !dbg !83
  %384 = or <4 x i1> %377, %383, !dbg !84
  %.v = select <4 x i1> %384, <4 x i32> %370, <4 x i32> %375, !dbg !85
  %385 = bitcast <4 x i32> %.v to <4 x float>, !dbg !85
  %386 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !49
  %387 = insertelement <4 x i32> %386, i32 %351, i64 1, !dbg !49
  %388 = insertelement <4 x i32> %387, i32 %342, i64 2, !dbg !49
  %389 = insertelement <4 x i32> %388, i32 %333, i64 3, !dbg !49
  %390 = bitcast <4 x i32> %389 to <4 x float>, !dbg !49
  %391 = fcmp olt <4 x float> %385, %390, !dbg !86
  %392 = fcmp uno <4 x float> %390, zeroinitializer, !dbg !88
  %393 = or <4 x i1> %392, %391, !dbg !89
  %.v65 = select <4 x i1> %393, <4 x i32> %389, <4 x i32> %.v, !dbg !90
  %394 = bitcast <4 x i32> %.v65 to <4 x float>, !dbg !90
  %395 = fcmp olt <4 x float> %394, %382, !dbg !91
  %396 = insertelement <4 x i32> poison, i32 %362, i64 0, !dbg !58
  %397 = insertelement <4 x i32> %396, i32 %353, i64 1, !dbg !58
  %398 = insertelement <4 x i32> %397, i32 %344, i64 2, !dbg !58
  %399 = insertelement <4 x i32> %398, i32 %335, i64 3, !dbg !58
  %400 = bitcast <4 x i32> %399 to <4 x float>, !dbg !58
  %401 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !93
  %402 = or <4 x i1> %401, %395, !dbg !94
  %.v66 = select <4 x i1> %402, <4 x i32> %381, <4 x i32> %.v65, !dbg !95
  %403 = bitcast <4 x i32> %.v66 to <4 x float>, !dbg !95
  %404 = fcmp olt <4 x float> %403, %400, !dbg !96
  %405 = fcmp uno <4 x float> %400, zeroinitializer, !dbg !98
  %406 = or <4 x i1> %405, %404, !dbg !99
  %.v67 = select <4 x i1> %406, <4 x i32> %399, <4 x i32> %.v66, !dbg !100
  %407 = bitcast <4 x i32> %.v67 to <4 x float>, !dbg !100
  %408 = insertelement <4 x i32> poison, i32 %363, i64 0, !dbg !62
  %409 = insertelement <4 x i32> %408, i32 %354, i64 1, !dbg !62
  %410 = insertelement <4 x i32> %409, i32 %345, i64 2, !dbg !62
  %411 = insertelement <4 x i32> %410, i32 %336, i64 3, !dbg !62
  %412 = bitcast <4 x i32> %411 to <4 x float>, !dbg !62
  %413 = fcmp olt <4 x float> %407, %412, !dbg !101
  %414 = fcmp uno <4 x float> %412, zeroinitializer, !dbg !103
  %415 = or <4 x i1> %414, %413, !dbg !104
  %.v68 = select <4 x i1> %415, <4 x i32> %411, <4 x i32> %.v67, !dbg !105
  %416 = bitcast <4 x i32> %.v68 to <4 x float>, !dbg !105
  %417 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !66
  %418 = insertelement <4 x i32> %417, i32 %355, i64 1, !dbg !66
  %419 = insertelement <4 x i32> %418, i32 %346, i64 2, !dbg !66
  %420 = insertelement <4 x i32> %419, i32 %337, i64 3, !dbg !66
  %421 = bitcast <4 x i32> %420 to <4 x float>, !dbg !66
  %422 = fcmp olt <4 x float> %416, %421, !dbg !106
  %423 = fcmp uno <4 x float> %421, zeroinitializer, !dbg !108
  %424 = or <4 x i1> %423, %422, !dbg !109
  %.v69 = select <4 x i1> %424, <4 x i32> %420, <4 x i32> %.v68, !dbg !110
  %425 = bitcast <4 x i32> %.v69 to <4 x float>, !dbg !110
  %426 = insertelement <4 x i32> poison, i32 %365, i64 0, !dbg !70
  %427 = insertelement <4 x i32> %426, i32 %356, i64 1, !dbg !70
  %428 = insertelement <4 x i32> %427, i32 %347, i64 2, !dbg !70
  %429 = insertelement <4 x i32> %428, i32 %338, i64 3, !dbg !70
  %430 = bitcast <4 x i32> %429 to <4 x float>, !dbg !70
  %431 = fcmp olt <4 x float> %425, %430, !dbg !111
  %432 = fcmp uno <4 x float> %430, zeroinitializer, !dbg !113
  %433 = or <4 x i1> %432, %431, !dbg !114
  %.v70 = select <4 x i1> %433, <4 x i32> %429, <4 x i32> %.v69, !dbg !115
  %434 = bitcast <4 x i32> %.v70 to <4 x float>, !dbg !115
  %435 = insertelement <4 x i32> poison, i32 %366, i64 0, !dbg !74
  %436 = insertelement <4 x i32> %435, i32 %357, i64 1, !dbg !74
  %437 = insertelement <4 x i32> %436, i32 %348, i64 2, !dbg !74
  %438 = insertelement <4 x i32> %437, i32 %339, i64 3, !dbg !74
  %439 = bitcast <4 x i32> %438 to <4 x float>, !dbg !74
  %440 = fcmp olt <4 x float> %434, %439, !dbg !116
  %441 = zext <4 x i1> %377 to <4 x i8>, !dbg !118
  %442 = select <4 x i1> %391, <4 x i8> splat (i8 2), <4 x i8> %441, !dbg !119
  %443 = select <4 x i1> %395, <4 x i8> splat (i8 3), <4 x i8> %442, !dbg !120
  %444 = select <4 x i1> %404, <4 x i8> splat (i8 4), <4 x i8> %443, !dbg !121
  %445 = select <4 x i1> %413, <4 x i8> splat (i8 5), <4 x i8> %444, !dbg !122
  %446 = select <4 x i1> %422, <4 x i8> splat (i8 6), <4 x i8> %445, !dbg !123
  %447 = select <4 x i1> %431, <4 x i8> splat (i8 7), <4 x i8> %446, !dbg !124
  %448 = select <4 x i1> %440, <4 x i8> splat (i8 8), <4 x i8> %447, !dbg !125
  %449 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !45
  %450 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !39
  %451 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !49
  %452 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !55
  %453 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !58
  %454 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !62
  %455 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !66
  %456 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !70
  %457 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !74
  %458 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !45
  %459 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !39
  %460 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !49
  %461 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !55
  %462 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !58
  %463 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !62
  %464 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !66
  %465 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !70
  %466 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !74
  %467 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !45
  %468 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !39
  %469 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !49
  %470 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !55
  %471 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !58
  %472 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !62
  %473 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !66
  %474 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !70
  %475 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !74
  %476 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !45
  %477 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !39
  %478 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !49
  %479 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !55
  %480 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !58
  %481 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !62
  %482 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !66
  %483 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !70
  %484 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !74
  %485 = insertelement <4 x i32> poison, i32 %476, i64 0, !dbg !45
  %486 = insertelement <4 x i32> %485, i32 %467, i64 1, !dbg !45
  %487 = insertelement <4 x i32> %486, i32 %458, i64 2, !dbg !45
  %488 = insertelement <4 x i32> %487, i32 %449, i64 3, !dbg !45
  %489 = bitcast <4 x i32> %488 to <4 x float>, !dbg !45
  %490 = insertelement <4 x i32> poison, i32 %477, i64 0, !dbg !39
  %491 = insertelement <4 x i32> %490, i32 %468, i64 1, !dbg !39
  %492 = insertelement <4 x i32> %491, i32 %459, i64 2, !dbg !39
  %493 = insertelement <4 x i32> %492, i32 %450, i64 3, !dbg !39
  %494 = bitcast <4 x i32> %493 to <4 x float>, !dbg !39
  %495 = fcmp ogt <4 x float> %489, %494, !dbg !79
  %496 = insertelement <4 x i32> poison, i32 %479, i64 0, !dbg !55
  %497 = insertelement <4 x i32> %496, i32 %470, i64 1, !dbg !55
  %498 = insertelement <4 x i32> %497, i32 %461, i64 2, !dbg !55
  %499 = insertelement <4 x i32> %498, i32 %452, i64 3, !dbg !55
  %500 = bitcast <4 x i32> %499 to <4 x float>, !dbg !55
  %501 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !83
  %502 = or <4 x i1> %495, %501, !dbg !84
  %.v71 = select <4 x i1> %502, <4 x i32> %488, <4 x i32> %493, !dbg !85
  %503 = bitcast <4 x i32> %.v71 to <4 x float>, !dbg !85
  %504 = insertelement <4 x i32> poison, i32 %478, i64 0, !dbg !49
  %505 = insertelement <4 x i32> %504, i32 %469, i64 1, !dbg !49
  %506 = insertelement <4 x i32> %505, i32 %460, i64 2, !dbg !49
  %507 = insertelement <4 x i32> %506, i32 %451, i64 3, !dbg !49
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !49
  %509 = fcmp olt <4 x float> %503, %508, !dbg !86
  %510 = fcmp uno <4 x float> %508, zeroinitializer, !dbg !88
  %511 = or <4 x i1> %510, %509, !dbg !89
  %.v72 = select <4 x i1> %511, <4 x i32> %507, <4 x i32> %.v71, !dbg !90
  %512 = bitcast <4 x i32> %.v72 to <4 x float>, !dbg !90
  %513 = fcmp olt <4 x float> %512, %500, !dbg !91
  %514 = insertelement <4 x i32> poison, i32 %480, i64 0, !dbg !58
  %515 = insertelement <4 x i32> %514, i32 %471, i64 1, !dbg !58
  %516 = insertelement <4 x i32> %515, i32 %462, i64 2, !dbg !58
  %517 = insertelement <4 x i32> %516, i32 %453, i64 3, !dbg !58
  %518 = bitcast <4 x i32> %517 to <4 x float>, !dbg !58
  %519 = fcmp uno <4 x float> %500, zeroinitializer, !dbg !93
  %520 = or <4 x i1> %519, %513, !dbg !94
  %.v73 = select <4 x i1> %520, <4 x i32> %499, <4 x i32> %.v72, !dbg !95
  %521 = bitcast <4 x i32> %.v73 to <4 x float>, !dbg !95
  %522 = fcmp olt <4 x float> %521, %518, !dbg !96
  %523 = fcmp uno <4 x float> %518, zeroinitializer, !dbg !98
  %524 = or <4 x i1> %523, %522, !dbg !99
  %.v74 = select <4 x i1> %524, <4 x i32> %517, <4 x i32> %.v73, !dbg !100
  %525 = bitcast <4 x i32> %.v74 to <4 x float>, !dbg !100
  %526 = insertelement <4 x i32> poison, i32 %481, i64 0, !dbg !62
  %527 = insertelement <4 x i32> %526, i32 %472, i64 1, !dbg !62
  %528 = insertelement <4 x i32> %527, i32 %463, i64 2, !dbg !62
  %529 = insertelement <4 x i32> %528, i32 %454, i64 3, !dbg !62
  %530 = bitcast <4 x i32> %529 to <4 x float>, !dbg !62
  %531 = fcmp olt <4 x float> %525, %530, !dbg !101
  %532 = fcmp uno <4 x float> %530, zeroinitializer, !dbg !103
  %533 = or <4 x i1> %532, %531, !dbg !104
  %.v75 = select <4 x i1> %533, <4 x i32> %529, <4 x i32> %.v74, !dbg !105
  %534 = bitcast <4 x i32> %.v75 to <4 x float>, !dbg !105
  %535 = insertelement <4 x i32> poison, i32 %482, i64 0, !dbg !66
  %536 = insertelement <4 x i32> %535, i32 %473, i64 1, !dbg !66
  %537 = insertelement <4 x i32> %536, i32 %464, i64 2, !dbg !66
  %538 = insertelement <4 x i32> %537, i32 %455, i64 3, !dbg !66
  %539 = bitcast <4 x i32> %538 to <4 x float>, !dbg !66
  %540 = fcmp olt <4 x float> %534, %539, !dbg !106
  %541 = fcmp uno <4 x float> %539, zeroinitializer, !dbg !108
  %542 = or <4 x i1> %541, %540, !dbg !109
  %.v76 = select <4 x i1> %542, <4 x i32> %538, <4 x i32> %.v75, !dbg !110
  %543 = bitcast <4 x i32> %.v76 to <4 x float>, !dbg !110
  %544 = insertelement <4 x i32> poison, i32 %483, i64 0, !dbg !70
  %545 = insertelement <4 x i32> %544, i32 %474, i64 1, !dbg !70
  %546 = insertelement <4 x i32> %545, i32 %465, i64 2, !dbg !70
  %547 = insertelement <4 x i32> %546, i32 %456, i64 3, !dbg !70
  %548 = bitcast <4 x i32> %547 to <4 x float>, !dbg !70
  %549 = fcmp olt <4 x float> %543, %548, !dbg !111
  %550 = fcmp uno <4 x float> %548, zeroinitializer, !dbg !113
  %551 = or <4 x i1> %550, %549, !dbg !114
  %.v77 = select <4 x i1> %551, <4 x i32> %547, <4 x i32> %.v76, !dbg !115
  %552 = bitcast <4 x i32> %.v77 to <4 x float>, !dbg !115
  %553 = insertelement <4 x i32> poison, i32 %484, i64 0, !dbg !74
  %554 = insertelement <4 x i32> %553, i32 %475, i64 1, !dbg !74
  %555 = insertelement <4 x i32> %554, i32 %466, i64 2, !dbg !74
  %556 = insertelement <4 x i32> %555, i32 %457, i64 3, !dbg !74
  %557 = bitcast <4 x i32> %556 to <4 x float>, !dbg !74
  %558 = fcmp olt <4 x float> %552, %557, !dbg !116
  %559 = zext <4 x i1> %495 to <4 x i8>, !dbg !118
  %560 = select <4 x i1> %509, <4 x i8> splat (i8 2), <4 x i8> %559, !dbg !119
  %561 = select <4 x i1> %513, <4 x i8> splat (i8 3), <4 x i8> %560, !dbg !120
  %562 = select <4 x i1> %522, <4 x i8> splat (i8 4), <4 x i8> %561, !dbg !121
  %563 = select <4 x i1> %531, <4 x i8> splat (i8 5), <4 x i8> %562, !dbg !122
  %564 = select <4 x i1> %540, <4 x i8> splat (i8 6), <4 x i8> %563, !dbg !123
  %565 = select <4 x i1> %549, <4 x i8> splat (i8 7), <4 x i8> %564, !dbg !124
  %566 = select <4 x i1> %558, <4 x i8> splat (i8 8), <4 x i8> %565, !dbg !125
  %567 = bitcast i32 %339 to float, !dbg !126
  %568 = fcmp uno float %567, 0.000000e+00, !dbg !126
  %569 = extractelement <4 x i1> %440, i64 3, !dbg !127
  %570 = or i1 %568, %569, !dbg !127
  %571 = extractelement <4 x float> %434, i64 3, !dbg !128
  %572 = select i1 %570, float %567, float %571, !dbg !128
  %573 = bitcast i32 %348 to float, !dbg !126
  %574 = fcmp uno float %573, 0.000000e+00, !dbg !126
  %575 = extractelement <4 x i1> %440, i64 2, !dbg !127
  %576 = or i1 %574, %575, !dbg !127
  %577 = extractelement <4 x float> %434, i64 2, !dbg !128
  %578 = select i1 %576, float %573, float %577, !dbg !128
  %579 = bitcast i32 %357 to float, !dbg !126
  %580 = fcmp uno float %579, 0.000000e+00, !dbg !126
  %581 = extractelement <4 x i1> %440, i64 1, !dbg !127
  %582 = or i1 %580, %581, !dbg !127
  %583 = extractelement <4 x float> %434, i64 1, !dbg !128
  %584 = select i1 %582, float %579, float %583, !dbg !128
  %585 = bitcast i32 %366 to float, !dbg !126
  %586 = fcmp uno float %585, 0.000000e+00, !dbg !126
  %587 = extractelement <4 x i1> %440, i64 0, !dbg !127
  %588 = or i1 %586, %587, !dbg !127
  %589 = extractelement <4 x float> %434, i64 0, !dbg !128
  %590 = select i1 %588, float %585, float %589, !dbg !128
  %591 = bitcast i32 %457 to float, !dbg !126
  %592 = fcmp uno float %591, 0.000000e+00, !dbg !126
  %593 = extractelement <4 x i1> %558, i64 3, !dbg !127
  %594 = or i1 %592, %593, !dbg !127
  %595 = extractelement <4 x float> %552, i64 3, !dbg !128
  %596 = select i1 %594, float %591, float %595, !dbg !128
  %597 = bitcast i32 %466 to float, !dbg !126
  %598 = fcmp uno float %597, 0.000000e+00, !dbg !126
  %599 = extractelement <4 x i1> %558, i64 2, !dbg !127
  %600 = or i1 %598, %599, !dbg !127
  %601 = extractelement <4 x float> %552, i64 2, !dbg !128
  %602 = select i1 %600, float %597, float %601, !dbg !128
  %603 = bitcast i32 %475 to float, !dbg !126
  %604 = fcmp uno float %603, 0.000000e+00, !dbg !126
  %605 = extractelement <4 x i1> %558, i64 1, !dbg !127
  %606 = or i1 %604, %605, !dbg !127
  %607 = extractelement <4 x float> %552, i64 1, !dbg !128
  %608 = select i1 %606, float %603, float %607, !dbg !128
  %609 = bitcast i32 %484 to float, !dbg !126
  %610 = fcmp uno float %609, 0.000000e+00, !dbg !126
  %611 = extractelement <4 x i1> %558, i64 0, !dbg !127
  %612 = or i1 %610, %611, !dbg !127
  %613 = extractelement <4 x float> %552, i64 0, !dbg !128
  %614 = select i1 %612, float %609, float %613, !dbg !128
  %615 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %616 = bitcast i32 %615 to float, !dbg !28
  %617 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %618 = bitcast i32 %617 to float, !dbg !28
  %619 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %620 = bitcast i32 %619 to float, !dbg !28
  %621 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %622 = bitcast i32 %621 to float, !dbg !28
  %623 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %624 = bitcast i32 %623 to float, !dbg !28
  %625 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %626 = bitcast i32 %625 to float, !dbg !28
  %627 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %628 = bitcast i32 %627 to float, !dbg !28
  %629 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %630 = bitcast i32 %629 to float, !dbg !28
  %631 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %632 = bitcast i32 %631 to float, !dbg !26
  %633 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %634 = bitcast i32 %633 to float, !dbg !26
  %635 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %636 = bitcast i32 %635 to float, !dbg !26
  %637 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %638 = bitcast i32 %637 to float, !dbg !26
  %639 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %640 = bitcast i32 %639 to float, !dbg !26
  %641 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %642 = bitcast i32 %641 to float, !dbg !26
  %643 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %644 = bitcast i32 %643 to float, !dbg !26
  %645 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %646 = bitcast i32 %645 to float, !dbg !26
  %647 = shl i32 %13, 2, !dbg !12
  %648 = and i32 %647, 508, !dbg !12
  %649 = or disjoint i32 %648, 512, !dbg !12
  %650 = or disjoint i32 %12, %649, !dbg !13
  %651 = sext i32 %650 to i64, !dbg !17
  %652 = getelementptr float, ptr addrspace(1) %0, i64 %651, !dbg !17
  %653 = or disjoint i32 %12, %648, !dbg !13
  %654 = sext i32 %653 to i64, !dbg !17
  %655 = getelementptr float, ptr addrspace(1) %0, i64 %654, !dbg !17
  %656 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !129
  %657 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !129
  %658 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !129
  %659 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !129
  %660 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !129
  %661 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !129
  %662 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !129
  %663 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !129
  %664 = fmul float %330, %656, !dbg !130
  %665 = fmul float %322, %657, !dbg !130
  %666 = fmul float %314, %658, !dbg !130
  %667 = fmul float %306, %659, !dbg !130
  %668 = fmul float %298, %660, !dbg !130
  %669 = fmul float %290, %661, !dbg !130
  %670 = fmul float %282, %662, !dbg !130
  %671 = fmul float %274, %663, !dbg !130
  %672 = fmul float %664, %646, !dbg !131
  %673 = fmul float %665, %644, !dbg !131
  %674 = fmul float %666, %642, !dbg !131
  %675 = fmul float %667, %640, !dbg !131
  %676 = fmul float %668, %638, !dbg !131
  %677 = fmul float %669, %636, !dbg !131
  %678 = fmul float %670, %634, !dbg !131
  %679 = fmul float %671, %632, !dbg !131
  %680 = fadd float %672, %630, !dbg !132
  %681 = fadd float %673, %628, !dbg !132
  %682 = fadd float %674, %626, !dbg !132
  %683 = fadd float %675, %624, !dbg !132
  %684 = fadd float %676, %622, !dbg !132
  %685 = fadd float %677, %620, !dbg !132
  %686 = fadd float %678, %618, !dbg !132
  %687 = fadd float %679, %616, !dbg !132
  %688 = fadd float %614, %680, !dbg !133
  %689 = fadd float %608, %681, !dbg !133
  %690 = fadd float %602, %682, !dbg !133
  %691 = fadd float %596, %683, !dbg !133
  %692 = fadd float %590, %684, !dbg !133
  %693 = fadd float %584, %685, !dbg !133
  %694 = fadd float %578, %686, !dbg !133
  %695 = fadd float %572, %687, !dbg !133
  %696 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !134
  %697 = bitcast float %327 to i32, !dbg !134
  %698 = bitcast float %319 to i32, !dbg !134
  %699 = bitcast float %311 to i32, !dbg !134
  %700 = bitcast float %303 to i32, !dbg !134
  %701 = bitcast float %295 to i32, !dbg !134
  %702 = bitcast float %287 to i32, !dbg !134
  %703 = bitcast float %279 to i32, !dbg !134
  %704 = bitcast float %271 to i32, !dbg !134
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %696, i32 %697, i32 %698, i32 %699, i32 %700, i1 true) #4, !dbg !134
  %705 = getelementptr inbounds i8, ptr addrspace(3) %696, i32 16, !dbg !134
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %705, i32 %701, i32 %702, i32 %703, i32 %704, i1 true) #4, !dbg !134
  tail call void @llvm.nvvm.barrier0(), !dbg !134
  %706 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %648, !dbg !134
  %707 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %649, !dbg !134
  %708 = load <4 x i32>, ptr addrspace(3) %707, align 16, !dbg !134
  %.extract = load i32, ptr addrspace(3) %706, align 16, !dbg !134
  %709 = getelementptr inbounds i8, ptr addrspace(3) %706, i32 4, !dbg !134
  %.extract8 = load i32, ptr addrspace(3) %709, align 4, !dbg !134
  %710 = getelementptr inbounds i8, ptr addrspace(3) %706, i32 8, !dbg !134
  %.extract9 = load i32, ptr addrspace(3) %710, align 8, !dbg !134
  %711 = getelementptr inbounds i8, ptr addrspace(3) %706, i32 12, !dbg !134
  %.extract10 = load i32, ptr addrspace(3) %711, align 4, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %655, i1 true) #4, !dbg !134
  %.extract11 = extractelement <4 x i32> %708, i64 0, !dbg !134
  %.extract12 = extractelement <4 x i32> %708, i64 1, !dbg !134
  %.extract13 = extractelement <4 x i32> %708, i64 2, !dbg !134
  %.extract14 = extractelement <4 x i32> %708, i64 3, !dbg !134
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %652, i1 true) #4, !dbg !134
  %712 = getelementptr i8, ptr addrspace(1) %8, i64 %24, !dbg !135
  %713 = bitcast <4 x i8> %566 to i32, !dbg !136
  %714 = bitcast <4 x i8> %448 to i32, !dbg !136
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %713, i32 %714, ptr addrspace(1) %712, i1 true) #4, !dbg !136
  %715 = getelementptr float, ptr addrspace(1) %1, i64 %654, !dbg !137
  %716 = getelementptr float, ptr addrspace(1) %1, i64 %651, !dbg !137
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %717 = bitcast float %688 to i32, !dbg !138
  %718 = bitcast float %689 to i32, !dbg !138
  %719 = bitcast float %690 to i32, !dbg !138
  %720 = bitcast float %691 to i32, !dbg !138
  %721 = bitcast float %692 to i32, !dbg !138
  %722 = bitcast float %693 to i32, !dbg !138
  %723 = bitcast float %694 to i32, !dbg !138
  %724 = bitcast float %695 to i32, !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %696, i32 %717, i32 %718, i32 %719, i32 %720, i1 true) #4, !dbg !138
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %705, i32 %721, i32 %722, i32 %723, i32 %724, i1 true) #4, !dbg !138
  tail call void @llvm.nvvm.barrier0(), !dbg !138
  %725 = load <4 x i32>, ptr addrspace(3) %707, align 16, !dbg !138
  %.extract22 = load i32, ptr addrspace(3) %706, align 16, !dbg !138
  %.extract23 = load i32, ptr addrspace(3) %709, align 4, !dbg !138
  %.extract24 = load i32, ptr addrspace(3) %710, align 8, !dbg !138
  %.extract25 = load i32, ptr addrspace(3) %711, align 4, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %715, i1 true) #4, !dbg !138
  %.extract26 = extractelement <4 x i32> %725, i64 0, !dbg !138
  %.extract27 = extractelement <4 x i32> %725, i64 1, !dbg !138
  %.extract28 = extractelement <4 x i32> %725, i64 2, !dbg !138
  %.extract29 = extractelement <4 x i32> %725, i64 3, !dbg !138
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %716, i1 true) #4, !dbg !138
  ret void, !dbg !139
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb4h7bnd2c75tadgnv6whqe4w5mtgfuxcr7vpdfjwg23vv7ctk7m.py", directory: "inductor_cache/b4")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 29, scope: !7)
!17 = !DILocation(line: 29, column: 34, scope: !7)
!18 = !DILocation(line: 29, column: 39, scope: !7)
!19 = !DILocation(line: 30, column: 30, scope: !7)
!20 = !DILocation(line: 30, column: 35, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 69, column: 20, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 19, scope: !7)
!33 = !DILocation(line: 47, column: 52, scope: !7)
!34 = !DILocation(line: 47, column: 63, scope: !7)
!35 = !DILocation(line: 47, column: 42, scope: !7)
!36 = !DILocation(line: 47, column: 47, scope: !7)
!37 = !DILocation(line: 47, column: 57, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 68, scope: !7)
!40 = !DILocation(line: 49, column: 21, scope: !7)
!41 = !DILocation(line: 52, column: 19, scope: !7)
!42 = !DILocation(line: 53, column: 47, scope: !7)
!43 = !DILocation(line: 53, column: 57, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 68, scope: !7)
!46 = !DILocation(line: 60, column: 47, scope: !7)
!47 = !DILocation(line: 60, column: 57, scope: !7)
!48 = !DILocation(line: 60, column: 31, scope: !7)
!49 = !DILocation(line: 60, column: 68, scope: !7)
!50 = !DILocation(line: 63, column: 21, scope: !7)
!51 = !DILocation(line: 66, column: 20, scope: !7)
!52 = !DILocation(line: 67, column: 46, scope: !7)
!53 = !DILocation(line: 67, column: 56, scope: !7)
!54 = !DILocation(line: 67, column: 31, scope: !7)
!55 = !DILocation(line: 67, column: 67, scope: !7)
!56 = !DILocation(line: 70, column: 46, scope: !7)
!57 = !DILocation(line: 70, column: 31, scope: !7)
!58 = !DILocation(line: 70, column: 57, scope: !7)
!59 = !DILocation(line: 73, column: 43, scope: !7)
!60 = !DILocation(line: 73, column: 53, scope: !7)
!61 = !DILocation(line: 73, column: 31, scope: !7)
!62 = !DILocation(line: 73, column: 64, scope: !7)
!63 = !DILocation(line: 80, column: 44, scope: !7)
!64 = !DILocation(line: 80, column: 54, scope: !7)
!65 = !DILocation(line: 80, column: 31, scope: !7)
!66 = !DILocation(line: 80, column: 65, scope: !7)
!67 = !DILocation(line: 83, column: 44, scope: !7)
!68 = !DILocation(line: 83, column: 54, scope: !7)
!69 = !DILocation(line: 83, column: 31, scope: !7)
!70 = !DILocation(line: 83, column: 65, scope: !7)
!71 = !DILocation(line: 86, column: 44, scope: !7)
!72 = !DILocation(line: 86, column: 54, scope: !7)
!73 = !DILocation(line: 86, column: 31, scope: !7)
!74 = !DILocation(line: 86, column: 65, scope: !7)
!75 = !DILocation(line: 115, column: 20, scope: !7)
!76 = !DILocation(line: 116, column: 27, scope: !7)
!77 = !DILocation(line: 35, column: 18, scope: !7)
!78 = !DILocation(line: 113, column: 19, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !82)
!80 = distinct !DILexicalBlockFile(scope: !7, file: !81, discriminator: 0)
!81 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!82 = !DILocation(line: 54, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !87)
!87 = !DILocation(line: 61, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !92)
!92 = !DILocation(line: 68, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !97)
!97 = !DILocation(line: 71, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !102)
!102 = !DILocation(line: 74, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !107)
!107 = !DILocation(line: 81, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !112)
!112 = !DILocation(line: 84, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !112)
!115 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !112)
!116 = !DILocation(line: 118, column: 15, scope: !80, inlinedAt: !117)
!117 = !DILocation(line: 87, column: 42, scope: !7)
!118 = !DILocation(line: 91, column: 35, scope: !7)
!119 = !DILocation(line: 94, column: 35, scope: !7)
!120 = !DILocation(line: 97, column: 35, scope: !7)
!121 = !DILocation(line: 100, column: 35, scope: !7)
!122 = !DILocation(line: 103, column: 35, scope: !7)
!123 = !DILocation(line: 106, column: 35, scope: !7)
!124 = !DILocation(line: 109, column: 35, scope: !7)
!125 = !DILocation(line: 112, column: 35, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !80, inlinedAt: !117)
!127 = !DILocation(line: 120, column: 16, scope: !80, inlinedAt: !117)
!128 = !DILocation(line: 121, column: 29, scope: !80, inlinedAt: !117)
!129 = !DILocation(line: 118, column: 20, scope: !7)
!130 = !DILocation(line: 121, column: 20, scope: !7)
!131 = !DILocation(line: 122, column: 20, scope: !7)
!132 = !DILocation(line: 123, column: 20, scope: !7)
!133 = !DILocation(line: 124, column: 20, scope: !7)
!134 = !DILocation(line: 125, column: 39, scope: !7)
!135 = !DILocation(line: 126, column: 25, scope: !7)
!136 = !DILocation(line: 126, column: 37, scope: !7)
!137 = !DILocation(line: 127, column: 28, scope: !7)
!138 = !DILocation(line: 127, column: 40, scope: !7)
!139 = !DILocation(line: 127, column: 4, scope: !7)
