; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_59(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %19 = shl i32 %18, 2, !dbg !15
  %20 = lshr i32 %11, 6, !dbg !16
  %.lobit = and i32 %20, 1, !dbg !16
  %21 = or disjoint i32 %19, %.lobit, !dbg !17
  %22 = or disjoint i32 %21, 2, !dbg !17
  %23 = icmp slt i32 %21, 4, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = mul i32 %25, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = srem i32 %17, 256, !dbg !20
  %28 = shl i32 %21, 8, !dbg !21
  %29 = shl i32 %22, 8, !dbg !21
  %30 = shl i32 %25, 10, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #4, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = and i32 %12, 508, !dbg !26
  %49 = lshr i32 %12, 6, !dbg !26
  %50 = and i32 %49, 4, !dbg !26
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %48, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %52, i32 %39, i32 %40, i32 %41, i32 %42, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %54 = load <2 x float>, ptr addrspace(3) %53, align 8, !dbg !26
  %55 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 1040, !dbg !26
  %56 = load <2 x float>, ptr addrspace(3) %55, align 8, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %52, i32 %44, i32 %45, i32 %46, i32 %47, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %57 = load <2 x float>, ptr addrspace(3) %53, align 8, !dbg !26
  %58 = load <2 x float>, ptr addrspace(3) %55, align 8, !dbg !26
  %59 = sext i32 %27 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !27
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !29
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !30
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !30
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !30
  %66 = bitcast i32 %64 to float, !dbg !30
  %67 = bitcast i32 %65 to float, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !31
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #4, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !33
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !34
  %72 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i, label %81, label %76, !dbg !36

76:                                               ; preds = %8
  br i1 %.not1.i, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

81:                                               ; preds = %8
  br i1 %.not1.i, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i9, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %89, %91, %94, %96
  %.0.i11 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = extractvalue { i32, i32 } %61, 1, !dbg !28
  %99 = extractvalue { i32, i32 } %61, 0, !dbg !28
  %100 = extractelement <2 x float> %56, i64 1, !dbg !26
  %101 = extractelement <2 x float> %56, i64 0, !dbg !26
  %102 = extractelement <2 x float> %54, i64 1, !dbg !26
  %103 = extractelement <2 x float> %54, i64 0, !dbg !26
  %104 = extractvalue { i32, i32 } %71, 1, !dbg !34
  %105 = extractvalue { i32, i32 } %71, 0, !dbg !34
  %106 = extractvalue { i32, i32 } %69, 1, !dbg !32
  %107 = extractvalue { i32, i32 } %69, 0, !dbg !32
  %108 = and i32 %11, 127, !dbg !12
  %109 = or disjoint i32 %108, %10, !dbg !13
  %110 = or disjoint i32 %109, 128, !dbg !13
  %.frozen14 = freeze i32 %110, !dbg !19
  %111 = sdiv i32 %.frozen14, 256, !dbg !19
  %.frozen16 = freeze i32 %109, !dbg !19
  %112 = sdiv i32 %.frozen16, 256, !dbg !19
  %113 = mul i32 %111, 256, !dbg !20
  %.decomposed15 = sub i32 %.frozen14, %113, !dbg !20
  %114 = mul i32 %112, 256, !dbg !20
  %.decomposed17 = sub i32 %.frozen16, %114, !dbg !20
  %115 = icmp slt i32 %19, 4, !dbg !18
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !37
  %118 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !28
  %119 = insertelement <2 x i32> %118, i32 %99, i64 1, !dbg !28
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !28
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %122 = shufflevector <2 x float> %58, <2 x float> %57, <8 x i32> <i32 1, i32 0, i32 3, i32 2, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %123 = insertelement <8 x float> %122, float %100, i64 4, !dbg !38
  %124 = insertelement <8 x float> %123, float %101, i64 5, !dbg !38
  %125 = insertelement <8 x float> %124, float %102, i64 6, !dbg !38
  %126 = insertelement <8 x float> %125, float %103, i64 7, !dbg !38
  %127 = fsub <8 x float> %126, %121, !dbg !38
  %128 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !34
  %129 = insertelement <2 x i32> %128, i32 %105, i64 1, !dbg !34
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !34
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %132 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !32
  %133 = insertelement <2 x i32> %132, i32 %107, i64 1, !dbg !32
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !32
  %135 = shufflevector <2 x float> %134, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !32
  %136 = insertelement <8 x float> poison, float %117, i64 0, !dbg !39
  %137 = insertelement <8 x float> %136, float %116, i64 1, !dbg !39
  %138 = shufflevector <8 x float> %137, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !39
  %139 = fmul <8 x float> %127, %138, !dbg !39
  %140 = fmul <8 x float> %139, %135, !dbg !40
  %141 = fadd <8 x float> %140, %131, !dbg !41
  %142 = fcmp olt <8 x float> %141, zeroinitializer, !dbg !42
  %143 = extractelement <8 x i1> %142, i64 7, !dbg !46
  %144 = extractelement <8 x float> %141, i64 7, !dbg !46
  %145 = select i1 %143, float 0.000000e+00, float %144, !dbg !46
  %146 = extractelement <8 x i1> %142, i64 6, !dbg !46
  %147 = extractelement <8 x float> %141, i64 6, !dbg !46
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !46
  %149 = extractelement <8 x i1> %142, i64 5, !dbg !46
  %150 = extractelement <8 x float> %141, i64 5, !dbg !46
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !46
  %152 = extractelement <8 x i1> %142, i64 4, !dbg !46
  %153 = extractelement <8 x float> %141, i64 4, !dbg !46
  %154 = select i1 %152, float 0.000000e+00, float %153, !dbg !46
  %155 = extractelement <8 x i1> %142, i64 3, !dbg !46
  %156 = extractelement <8 x float> %141, i64 3, !dbg !46
  %157 = select i1 %155, float 0.000000e+00, float %156, !dbg !46
  %158 = extractelement <8 x i1> %142, i64 2, !dbg !46
  %159 = extractelement <8 x float> %141, i64 2, !dbg !46
  %160 = select i1 %158, float 0.000000e+00, float %159, !dbg !46
  %161 = extractelement <8 x i1> %142, i64 1, !dbg !46
  %162 = extractelement <8 x float> %141, i64 1, !dbg !46
  %163 = select i1 %161, float 0.000000e+00, float %162, !dbg !46
  %164 = extractelement <8 x i1> %142, i64 0, !dbg !46
  %165 = extractelement <8 x float> %141, i64 0, !dbg !46
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !46
  %167 = add i32 %.decomposed17, %18, !dbg !47
  %168 = shl i32 %167, 2, !dbg !47
  %169 = add i32 %.decomposed15, %18, !dbg !47
  %170 = shl i32 %169, 2, !dbg !47
  %171 = mul i32 %112, 4224, !dbg !48
  %172 = mul i32 %111, 4224, !dbg !48
  %173 = add i32 %168, %171, !dbg !49
  %174 = add i32 %170, %172, !dbg !49
  %175 = sext i32 %173 to i64, !dbg !50
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %175, !dbg !50
  %177 = sext i32 %174 to i64, !dbg !50
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %179 = shl i32 %11, 3, !dbg !51
  %180 = and i32 %179, 1016, !dbg !51
  %181 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %180, !dbg !51
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %180, !dbg !51
  %183 = bitcast float %145 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #4, !dbg !51
  %184 = or disjoint i32 %180, 4, !dbg !51
  %185 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %184, !dbg !51
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %184, !dbg !51
  %187 = bitcast float %148 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #4, !dbg !51
  %188 = or disjoint i32 %180, 1, !dbg !51
  %189 = getelementptr float, ptr addrspace(3) %181, i32 %188, !dbg !51
  %190 = bitcast float %151 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #4, !dbg !51
  %191 = or disjoint i32 %180, 5, !dbg !51
  %192 = lshr i32 %191, 2, !dbg !51
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !51
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !51
  %195 = bitcast float %154 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !51
  %196 = or disjoint i32 %180, 2, !dbg !51
  %197 = getelementptr float, ptr addrspace(3) %181, i32 %196, !dbg !51
  %198 = bitcast float %157 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !51
  %199 = or disjoint i32 %180, 6, !dbg !51
  %200 = lshr i32 %199, 2, !dbg !51
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !51
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !51
  %203 = bitcast float %160 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !51
  %204 = or disjoint i32 %180, 3, !dbg !51
  %205 = getelementptr float, ptr addrspace(3) %181, i32 %204, !dbg !51
  %206 = bitcast float %163 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #4, !dbg !51
  %207 = or disjoint i32 %180, 7, !dbg !51
  %208 = lshr i32 %207, 2, !dbg !51
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !51
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %207, !dbg !51
  %211 = bitcast float %166 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %212 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !51
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %48, !dbg !51
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !51
  %215 = or disjoint i32 %48, 1, !dbg !51
  %216 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %215, !dbg !51
  %217 = load i32, ptr addrspace(3) %216, align 4, !dbg !51
  %218 = or disjoint i32 %48, 2, !dbg !51
  %219 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %218, !dbg !51
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !51
  %221 = or disjoint i32 %48, 3, !dbg !51
  %222 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %221, !dbg !51
  %223 = load i32, ptr addrspace(3) %222, align 4, !dbg !51
  %224 = or disjoint i32 %48, 512, !dbg !51
  %225 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %224, !dbg !51
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %224, !dbg !51
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !51
  %228 = or disjoint i32 %48, 513, !dbg !51
  %229 = lshr i32 %228, 2, !dbg !51
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !51
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !51
  %232 = load i32, ptr addrspace(3) %231, align 4, !dbg !51
  %233 = or disjoint i32 %48, 514, !dbg !51
  %234 = lshr i32 %233, 2, !dbg !51
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !51
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !51
  %237 = load i32, ptr addrspace(3) %236, align 4, !dbg !51
  %238 = or disjoint i32 %48, 515, !dbg !51
  %239 = lshr i32 %238, 2, !dbg !51
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !51
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !51
  %242 = load i32, ptr addrspace(3) %241, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %217, i32 %220, i32 %223, ptr addrspace(1) %176, i1 %115) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %232, i32 %237, i32 %242, ptr addrspace(1) %178, i1 %115) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwsw3j2k2d2wpk5hck7shl7qyrfep46au6hwxig7okasxbfaejj4.py", directory: "inductor_cache/ws")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_59, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_59, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_59", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 49, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 54, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 49, column: 42, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 25, scope: !7)
!51 = !DILocation(line: 49, column: 54, scope: !7)
!52 = !DILocation(line: 49, column: 4, scope: !7)
