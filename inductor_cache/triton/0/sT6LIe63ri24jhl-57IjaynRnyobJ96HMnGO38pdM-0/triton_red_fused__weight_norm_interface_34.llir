; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 1024, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 2044, !dbg !12
  %15 = icmp samesign ult i32 %14, 1312, !dbg !13
  %16 = mul i32 %8, 1312, !dbg !14
  %17 = add i32 %16, %14, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %20 = and i1 %15, %9, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = bitcast i32 %22 to float, !dbg !18
  %27 = bitcast i32 %23 to float, !dbg !18
  %28 = bitcast i32 %24 to float, !dbg !18
  %29 = bitcast i32 %25 to float, !dbg !18
  %30 = fmul float %26, %26, !dbg !19
  %31 = fmul float %27, %27, !dbg !19
  %32 = fmul float %28, %28, !dbg !19
  %33 = fmul float %29, %29, !dbg !19
  %34 = fadd float %30, %31, !dbg !20
  %35 = fadd float %32, %34, !dbg !20
  %36 = fadd float %33, %35, !dbg !20
  %37 = select i1 %20, float %36, float 0.000000e+00, !dbg !20
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !20
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !20
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !20
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !20
  %54 = bitcast float %53 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %53, %56, !dbg !20
  %58 = icmp eq i32 %11, 0, !dbg !25
  %59 = and i32 %12, 15, !dbg !25
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !25
  %61 = bitcast float %57 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 %58) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %62 = icmp slt i32 %10, 16, !dbg !25
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %62) #5, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 8, i32 31), !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = fadd float %65, %67, !dbg !20
  %69 = bitcast float %68 to i32, !dbg !25
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 4, i32 31), !dbg !25
  %71 = bitcast i32 %70 to float, !dbg !25
  %72 = fadd float %68, %71, !dbg !20
  %73 = bitcast float %72 to i32, !dbg !25
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !25
  %75 = bitcast i32 %74 to float, !dbg !25
  %76 = fadd float %72, %75, !dbg !20
  %77 = bitcast float %76 to i32, !dbg !25
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 1, i32 31), !dbg !25
  %79 = bitcast i32 %78 to float, !dbg !25
  %80 = fadd float %76, %79, !dbg !20
  %81 = and i32 %10, 15, !dbg !25
  %82 = icmp eq i32 %81, 0, !dbg !25
  %83 = and i1 %62, %82, !dbg !25
  %84 = bitcast float %80 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %84, i1 %83) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i = icmp eq i32 %86, 0, !dbg !26
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i = icmp eq i32 %87, 0, !dbg !26
  br i1 %.not.i, label %93, label %88, !dbg !26

88:                                               ; preds = %7
  br i1 %.not1.i, label %91, label %89, !dbg !26

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

93:                                               ; preds = %7
  br i1 %.not1.i, label %96, label %94, !dbg !26

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %89, %91, %94, %96
  %.0.i = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !26
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i16 = icmp eq i32 %104, 0, !dbg !26
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i19 = icmp eq i32 %105, 0, !dbg !26
  br i1 %.not.i16, label %111, label %106, !dbg !26

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %109, label %107, !dbg !26

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

111:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %114, label %112, !dbg !26

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #5, !dbg !26
  br label %__nv_sqrtf.exit20, !dbg !26

__nv_sqrtf.exit20:                                ; preds = %107, %109, %112, %114
  %.0.i18 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %116 = sext i32 %8 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !28
  %urem = and i32 %10, 511, !dbg !29
  %118 = icmp eq i32 %urem, 0, !dbg !29
  %119 = bitcast float %.0.i to i32, !dbg !29
  %120 = and i1 %118, %9, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %117, i1 %120) #5, !dbg !29
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %9) #5, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %9) #5, !dbg !31
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %9) #5, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %9) #5, !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = bitcast i32 %129 to float, !dbg !32
  %134 = bitcast i32 %130 to float, !dbg !32
  %135 = bitcast i32 %131 to float, !dbg !32
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %.0.i18) #5, !dbg !33
  %137 = fmul float %136, %132, !dbg !34
  %138 = fmul float %136, %133, !dbg !34
  %139 = fmul float %136, %134, !dbg !34
  %140 = fmul float %136, %135, !dbg !34
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !35
  %142 = bitcast float %137 to i32, !dbg !36
  %143 = bitcast float %138 to i32, !dbg !36
  %144 = bitcast float %139 to i32, !dbg !36
  %145 = bitcast float %140 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %141, i1 %20) #5, !dbg !36
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %146, i1 %20) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cquxiwf4zkqvdg2nhrje5tuyjdjjmuk7jfw3plgi3xjp7yibv3ya.py", directory: "inductor_cache/qu")
!4 = !{ptr @triton_red_fused__weight_norm_interface_34, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_34, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_34", linkageName: "triton_red_fused__weight_norm_interface_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 30, column: 25, scope: !7)
!14 = !DILocation(line: 32, column: 44, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 57, scope: !7)
!18 = !DILocation(line: 32, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 37, column: 25, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 38, column: 26, scope: !7)
!27 = !DILocation(line: 39, column: 4, scope: !7)
!28 = !DILocation(line: 40, column: 28, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 41, column: 30, scope: !7)
!31 = !DILocation(line: 41, column: 35, scope: !7)
!32 = !DILocation(line: 46, column: 49, scope: !7)
!33 = !DILocation(line: 47, column: 22, scope: !7)
!34 = !DILocation(line: 48, column: 22, scope: !7)
!35 = !DILocation(line: 49, column: 29, scope: !7)
!36 = !DILocation(line: 49, column: 50, scope: !7)
!37 = !DILocation(line: 50, column: 29, scope: !7)
!38 = !DILocation(line: 50, column: 50, scope: !7)
!39 = !DILocation(line: 42, column: 4, scope: !7)
