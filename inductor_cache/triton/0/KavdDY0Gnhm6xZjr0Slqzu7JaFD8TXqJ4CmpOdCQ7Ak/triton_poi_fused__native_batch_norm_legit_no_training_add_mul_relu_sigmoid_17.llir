; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, i32 %25) local_unnamed_addr !dbg !7 {
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %28 = shl i32 %27, 10, !dbg !11
  %29 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %30 = shl i32 %29, 2, !dbg !12
  %31 = and i32 %30, 508, !dbg !12
  %32 = or disjoint i32 %28, %31, !dbg !13
  %33 = or disjoint i32 %32, 512, !dbg !13
  %34 = srem i32 %32, 256, !dbg !14
  %35 = sext i32 %32 to i64, !dbg !15
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !15
  %37 = sext i32 %33 to i64, !dbg !15
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !15
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !16
  %44 = bitcast i32 %40 to float, !dbg !16
  %45 = bitcast i32 %41 to float, !dbg !16
  %46 = bitcast i32 %42 to float, !dbg !16
  %47 = bitcast i32 %43 to float, !dbg !16
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !16
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !16
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !16
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !16
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !16
  %53 = bitcast i32 %49 to float, !dbg !16
  %54 = bitcast i32 %50 to float, !dbg !16
  %55 = bitcast i32 %51 to float, !dbg !16
  %56 = bitcast i32 %52 to float, !dbg !16
  %57 = sext i32 %34 to i64, !dbg !17
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !17
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !18
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !18
  %64 = bitcast i32 %60 to float, !dbg !18
  %65 = bitcast i32 %61 to float, !dbg !18
  %66 = bitcast i32 %62 to float, !dbg !18
  %67 = bitcast i32 %63 to float, !dbg !18
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !18
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !18
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !18
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !18
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !18
  %73 = bitcast i32 %69 to float, !dbg !18
  %74 = bitcast i32 %70 to float, !dbg !18
  %75 = bitcast i32 %71 to float, !dbg !18
  %76 = bitcast i32 %72 to float, !dbg !18
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !19
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !20
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !20
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !20
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !20
  %83 = bitcast i32 %79 to float, !dbg !20
  %84 = bitcast i32 %80 to float, !dbg !20
  %85 = bitcast i32 %81 to float, !dbg !20
  %86 = bitcast i32 %82 to float, !dbg !20
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !20
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !20
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !20
  %92 = bitcast i32 %88 to float, !dbg !20
  %93 = bitcast i32 %89 to float, !dbg !20
  %94 = bitcast i32 %90 to float, !dbg !20
  %95 = bitcast i32 %91 to float, !dbg !20
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !21
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !22
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !22
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !22
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !22
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !22
  %102 = bitcast i32 %98 to float, !dbg !22
  %103 = bitcast i32 %99 to float, !dbg !22
  %104 = bitcast i32 %100 to float, !dbg !22
  %105 = bitcast i32 %101 to float, !dbg !22
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !22
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !22
  %111 = bitcast i32 %107 to float, !dbg !22
  %112 = bitcast i32 %108 to float, !dbg !22
  %113 = bitcast i32 %109 to float, !dbg !22
  %114 = bitcast i32 %110 to float, !dbg !22
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !23
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = bitcast i32 %120 to float, !dbg !24
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !24
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !24
  %130 = bitcast i32 %126 to float, !dbg !24
  %131 = bitcast i32 %127 to float, !dbg !24
  %132 = bitcast i32 %128 to float, !dbg !24
  %133 = bitcast i32 %129 to float, !dbg !24
  %134 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !25
  %135 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !25
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 true) #3, !dbg !26
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !26
  %141 = bitcast i32 %137 to float, !dbg !26
  %142 = bitcast i32 %138 to float, !dbg !26
  %143 = bitcast i32 %139 to float, !dbg !26
  %144 = bitcast i32 %140 to float, !dbg !26
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 true) #3, !dbg !26
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !26
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !26
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !26
  %150 = bitcast i32 %146 to float, !dbg !26
  %151 = bitcast i32 %147 to float, !dbg !26
  %152 = bitcast i32 %148 to float, !dbg !26
  %153 = bitcast i32 %149 to float, !dbg !26
  %154 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !27
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 true) #3, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !28
  %160 = bitcast i32 %156 to float, !dbg !28
  %161 = bitcast i32 %157 to float, !dbg !28
  %162 = bitcast i32 %158 to float, !dbg !28
  %163 = bitcast i32 %159 to float, !dbg !28
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 true) #3, !dbg !28
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !28
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !28
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !28
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !28
  %169 = bitcast i32 %165 to float, !dbg !28
  %170 = bitcast i32 %166 to float, !dbg !28
  %171 = bitcast i32 %167 to float, !dbg !28
  %172 = bitcast i32 %168 to float, !dbg !28
  %173 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !29
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 true) #3, !dbg !30
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !30
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !30
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !30
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !30
  %179 = bitcast i32 %175 to float, !dbg !30
  %180 = bitcast i32 %176 to float, !dbg !30
  %181 = bitcast i32 %177 to float, !dbg !30
  %182 = bitcast i32 %178 to float, !dbg !30
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 true) #3, !dbg !30
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !30
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !30
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !30
  %188 = bitcast i32 %184 to float, !dbg !30
  %189 = bitcast i32 %185 to float, !dbg !30
  %190 = bitcast i32 %186 to float, !dbg !30
  %191 = bitcast i32 %187 to float, !dbg !30
  %192 = getelementptr float, ptr addrspace(1) %9, i64 %57, !dbg !31
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 true) #3, !dbg !32
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !32
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !32
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !32
  %198 = bitcast i32 %194 to float, !dbg !32
  %199 = bitcast i32 %195 to float, !dbg !32
  %200 = bitcast i32 %196 to float, !dbg !32
  %201 = bitcast i32 %197 to float, !dbg !32
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 true) #3, !dbg !32
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !32
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !32
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !32
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !32
  %207 = bitcast i32 %203 to float, !dbg !32
  %208 = bitcast i32 %204 to float, !dbg !32
  %209 = bitcast i32 %205 to float, !dbg !32
  %210 = bitcast i32 %206 to float, !dbg !32
  %211 = getelementptr float, ptr addrspace(1) %10, i64 %57, !dbg !33
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 true) #3, !dbg !34
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !34
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !34
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !34
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !34
  %217 = bitcast i32 %213 to float, !dbg !34
  %218 = bitcast i32 %214 to float, !dbg !34
  %219 = bitcast i32 %215 to float, !dbg !34
  %220 = bitcast i32 %216 to float, !dbg !34
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 true) #3, !dbg !34
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !34
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !34
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !34
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !34
  %226 = bitcast i32 %222 to float, !dbg !34
  %227 = bitcast i32 %223 to float, !dbg !34
  %228 = bitcast i32 %224 to float, !dbg !34
  %229 = bitcast i32 %225 to float, !dbg !34
  %230 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !35
  %231 = getelementptr float, ptr addrspace(1) %11, i64 %37, !dbg !35
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %230, i1 true) #3, !dbg !36
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %231, i1 true) #3, !dbg !36
  %234 = getelementptr float, ptr addrspace(1) %12, i64 %57, !dbg !37
  %235 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !38
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !38
  %237 = getelementptr float, ptr addrspace(1) %13, i64 %57, !dbg !39
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 true) #3, !dbg !40
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !40
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !40
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !40
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !40
  %243 = bitcast i32 %239 to float, !dbg !40
  %244 = bitcast i32 %240 to float, !dbg !40
  %245 = bitcast i32 %241 to float, !dbg !40
  %246 = bitcast i32 %242 to float, !dbg !40
  %247 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 true) #3, !dbg !40
  %248 = extractvalue { i32, i32, i32, i32 } %247, 0, !dbg !40
  %249 = extractvalue { i32, i32, i32, i32 } %247, 1, !dbg !40
  %250 = extractvalue { i32, i32, i32, i32 } %247, 2, !dbg !40
  %251 = extractvalue { i32, i32, i32, i32 } %247, 3, !dbg !40
  %252 = bitcast i32 %248 to float, !dbg !40
  %253 = bitcast i32 %249 to float, !dbg !40
  %254 = bitcast i32 %250 to float, !dbg !40
  %255 = bitcast i32 %251 to float, !dbg !40
  %256 = getelementptr float, ptr addrspace(1) %14, i64 %57, !dbg !41
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !42
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !42
  %259 = getelementptr float, ptr addrspace(1) %15, i64 %57, !dbg !43
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 true) #3, !dbg !44
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %259, i1 true) #3, !dbg !44
  %262 = getelementptr float, ptr addrspace(1) %16, i64 %57, !dbg !45
  %263 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 true) #3, !dbg !46
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 true) #3, !dbg !46
  %265 = getelementptr float, ptr addrspace(1) %17, i64 %57, !dbg !47
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 true) #3, !dbg !48
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !48
  %271 = bitcast i32 %267 to float, !dbg !48
  %272 = bitcast i32 %268 to float, !dbg !48
  %273 = bitcast i32 %269 to float, !dbg !48
  %274 = bitcast i32 %270 to float, !dbg !48
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 true) #3, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !48
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !48
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !48
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !48
  %280 = bitcast i32 %276 to float, !dbg !48
  %281 = bitcast i32 %277 to float, !dbg !48
  %282 = bitcast i32 %278 to float, !dbg !48
  %283 = bitcast i32 %279 to float, !dbg !48
  %284 = getelementptr float, ptr addrspace(1) %18, i64 %57, !dbg !49
  %285 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %284, i1 true) #3, !dbg !50
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %284, i1 true) #3, !dbg !50
  %287 = getelementptr float, ptr addrspace(1) %19, i64 %35, !dbg !51
  %288 = getelementptr float, ptr addrspace(1) %19, i64 %37, !dbg !51
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %287, i1 true) #3, !dbg !52
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %288, i1 true) #3, !dbg !52
  %291 = getelementptr float, ptr addrspace(1) %20, i64 %57, !dbg !53
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %291, i1 true) #3, !dbg !54
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %291, i1 true) #3, !dbg !54
  %294 = getelementptr float, ptr addrspace(1) %21, i64 %57, !dbg !55
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 true) #3, !dbg !56
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !56
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !56
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !56
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !56
  %300 = bitcast i32 %296 to float, !dbg !56
  %301 = bitcast i32 %297 to float, !dbg !56
  %302 = bitcast i32 %298 to float, !dbg !56
  %303 = bitcast i32 %299 to float, !dbg !56
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 true) #3, !dbg !56
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !56
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !56
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !56
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !56
  %309 = bitcast i32 %305 to float, !dbg !56
  %310 = bitcast i32 %306 to float, !dbg !56
  %311 = bitcast i32 %307 to float, !dbg !56
  %312 = bitcast i32 %308 to float, !dbg !56
  %313 = getelementptr float, ptr addrspace(1) %22, i64 %57, !dbg !57
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 true) #3, !dbg !58
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 true) #3, !dbg !58
  %316 = getelementptr float, ptr addrspace(1) %23, i64 %57, !dbg !59
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %316, i1 true) #3, !dbg !60
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %316, i1 true) #3, !dbg !60
  %319 = getelementptr float, ptr addrspace(1) %24, i64 %57, !dbg !61
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %319, i1 true) #3, !dbg !62
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %319, i1 true) #3, !dbg !62
  %322 = fsub float %44, %64, !dbg !63
  %323 = fsub float %45, %65, !dbg !63
  %324 = fsub float %46, %66, !dbg !63
  %325 = fsub float %47, %67, !dbg !63
  %326 = fsub float %53, %73, !dbg !63
  %327 = fsub float %54, %74, !dbg !63
  %328 = fsub float %55, %75, !dbg !63
  %329 = fsub float %56, %76, !dbg !63
  %330 = fadd float %83, 0x3EE4F8B580000000, !dbg !64
  %331 = fadd float %84, 0x3EE4F8B580000000, !dbg !64
  %332 = fadd float %85, 0x3EE4F8B580000000, !dbg !64
  %333 = fadd float %86, 0x3EE4F8B580000000, !dbg !64
  %334 = fadd float %92, 0x3EE4F8B580000000, !dbg !64
  %335 = fadd float %93, 0x3EE4F8B580000000, !dbg !64
  %336 = fadd float %94, 0x3EE4F8B580000000, !dbg !64
  %337 = fadd float %95, 0x3EE4F8B580000000, !dbg !64
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %338, 0, !dbg !65
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %339, 0, !dbg !65
  br i1 %.not.i, label %345, label %340, !dbg !65

340:                                              ; preds = %26
  br i1 %.not1.i, label %343, label %341, !dbg !65

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

345:                                              ; preds = %26
  br i1 %.not1.i, label %348, label %346, !dbg !65

346:                                              ; preds = %345
  %347 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

348:                                              ; preds = %345
  %349 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %341, %343, %346, %348
  %.0.i = phi float [ %342, %341 ], [ %344, %343 ], [ %347, %346 ], [ %349, %348 ], !dbg !65
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %350, 0, !dbg !65
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %351, 0, !dbg !65
  br i1 %.not.i1, label %357, label %352, !dbg !65

352:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %355, label %353, !dbg !65

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

357:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %360, label %358, !dbg !65

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %353, %355, %358, %360
  %.0.i3 = phi float [ %354, %353 ], [ %356, %355 ], [ %359, %358 ], [ %361, %360 ], !dbg !65
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %362, 0, !dbg !65
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %363, 0, !dbg !65
  br i1 %.not.i6, label %369, label %364, !dbg !65

364:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %367, label %365, !dbg !65

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

369:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %372, label %370, !dbg !65

370:                                              ; preds = %369
  %371 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

372:                                              ; preds = %369
  %373 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %365, %367, %370, %372
  %.0.i8 = phi float [ %366, %365 ], [ %368, %367 ], [ %371, %370 ], [ %373, %372 ], !dbg !65
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %374, 0, !dbg !65
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %375, 0, !dbg !65
  br i1 %.not.i11, label %381, label %376, !dbg !65

376:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %379, label %377, !dbg !65

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

381:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %384, label %382, !dbg !65

382:                                              ; preds = %381
  %383 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

384:                                              ; preds = %381
  %385 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %377, %379, %382, %384
  %.0.i13 = phi float [ %378, %377 ], [ %380, %379 ], [ %383, %382 ], [ %385, %384 ], !dbg !65
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i16 = icmp eq i32 %386, 0, !dbg !65
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i19 = icmp eq i32 %387, 0, !dbg !65
  br i1 %.not.i16, label %393, label %388, !dbg !65

388:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %391, label %389, !dbg !65

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

393:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %396, label %394, !dbg !65

394:                                              ; preds = %393
  %395 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

396:                                              ; preds = %393
  %397 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

__nv_sqrtf.exit20:                                ; preds = %389, %391, %394, %396
  %.0.i18 = phi float [ %390, %389 ], [ %392, %391 ], [ %395, %394 ], [ %397, %396 ], !dbg !65
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i21 = icmp eq i32 %398, 0, !dbg !65
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i24 = icmp eq i32 %399, 0, !dbg !65
  br i1 %.not.i21, label %405, label %400, !dbg !65

400:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %403, label %401, !dbg !65

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

405:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %408, label %406, !dbg !65

406:                                              ; preds = %405
  %407 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

408:                                              ; preds = %405
  %409 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

__nv_sqrtf.exit25:                                ; preds = %401, %403, %406, %408
  %.0.i23 = phi float [ %402, %401 ], [ %404, %403 ], [ %407, %406 ], [ %409, %408 ], !dbg !65
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i26 = icmp eq i32 %410, 0, !dbg !65
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i29 = icmp eq i32 %411, 0, !dbg !65
  br i1 %.not.i26, label %417, label %412, !dbg !65

412:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %415, label %413, !dbg !65

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

417:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %420, label %418, !dbg !65

418:                                              ; preds = %417
  %419 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

420:                                              ; preds = %417
  %421 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #3, !dbg !65
  br label %__nv_sqrtf.exit30, !dbg !65

__nv_sqrtf.exit30:                                ; preds = %413, %415, %418, %420
  %.0.i28 = phi float [ %414, %413 ], [ %416, %415 ], [ %419, %418 ], [ %421, %420 ], !dbg !65
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i31 = icmp eq i32 %422, 0, !dbg !65
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i34 = icmp eq i32 %423, 0, !dbg !65
  br i1 %.not.i31, label %429, label %424, !dbg !65

424:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %427, label %425, !dbg !65

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %337) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %337) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

429:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %432, label %430, !dbg !65

430:                                              ; preds = %429
  %431 = tail call float @llvm.nvvm.sqrt.rn.f(float %337) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

432:                                              ; preds = %429
  %433 = tail call float @llvm.nvvm.sqrt.approx.f(float %337) #3, !dbg !65
  br label %__nv_sqrtf.exit35, !dbg !65

__nv_sqrtf.exit35:                                ; preds = %425, %427, %430, %432
  %.0.i33 = phi float [ %426, %425 ], [ %428, %427 ], [ %431, %430 ], [ %433, %432 ], !dbg !65
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !66
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !66
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !66
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !66
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !66
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !66
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !66
  %442 = fmul float %322, %434, !dbg !67
  %443 = fmul float %323, %435, !dbg !67
  %444 = fmul float %324, %436, !dbg !67
  %445 = fmul float %325, %437, !dbg !67
  %446 = fmul float %326, %438, !dbg !67
  %447 = fmul float %327, %439, !dbg !67
  %448 = fmul float %328, %440, !dbg !67
  %449 = fmul float %329, %441, !dbg !67
  %450 = fmul float %442, %102, !dbg !68
  %451 = fmul float %443, %103, !dbg !68
  %452 = fmul float %444, %104, !dbg !68
  %453 = fmul float %445, %105, !dbg !68
  %454 = fmul float %446, %111, !dbg !68
  %455 = fmul float %447, %112, !dbg !68
  %456 = fmul float %448, %113, !dbg !68
  %457 = fmul float %449, %114, !dbg !68
  %458 = fadd float %450, %121, !dbg !69
  %459 = fadd float %451, %122, !dbg !69
  %460 = fadd float %452, %123, !dbg !69
  %461 = fadd float %453, %124, !dbg !69
  %462 = fadd float %454, %130, !dbg !69
  %463 = fadd float %455, %131, !dbg !69
  %464 = fadd float %456, %132, !dbg !69
  %465 = fadd float %457, %133, !dbg !69
  %466 = fsub float %141, %160, !dbg !70
  %467 = fsub float %142, %161, !dbg !70
  %468 = fsub float %143, %162, !dbg !70
  %469 = fsub float %144, %163, !dbg !70
  %470 = fsub float %150, %169, !dbg !70
  %471 = fsub float %151, %170, !dbg !70
  %472 = fsub float %152, %171, !dbg !70
  %473 = fsub float %153, %172, !dbg !70
  %474 = fadd float %179, 0x3EE4F8B580000000, !dbg !71
  %475 = fadd float %180, 0x3EE4F8B580000000, !dbg !71
  %476 = fadd float %181, 0x3EE4F8B580000000, !dbg !71
  %477 = fadd float %182, 0x3EE4F8B580000000, !dbg !71
  %478 = fadd float %188, 0x3EE4F8B580000000, !dbg !71
  %479 = fadd float %189, 0x3EE4F8B580000000, !dbg !71
  %480 = fadd float %190, 0x3EE4F8B580000000, !dbg !71
  %481 = fadd float %191, 0x3EE4F8B580000000, !dbg !71
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i36 = icmp eq i32 %482, 0, !dbg !72
  %483 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i39 = icmp eq i32 %483, 0, !dbg !72
  br i1 %.not.i36, label %489, label %484, !dbg !72

484:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %487, label %485, !dbg !72

485:                                              ; preds = %484
  %486 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %474) #3, !dbg !72
  br label %__nv_sqrtf.exit40, !dbg !72

487:                                              ; preds = %484
  %488 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %474) #3, !dbg !72
  br label %__nv_sqrtf.exit40, !dbg !72

489:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %492, label %490, !dbg !72

490:                                              ; preds = %489
  %491 = tail call float @llvm.nvvm.sqrt.rn.f(float %474) #3, !dbg !72
  br label %__nv_sqrtf.exit40, !dbg !72

492:                                              ; preds = %489
  %493 = tail call float @llvm.nvvm.sqrt.approx.f(float %474) #3, !dbg !72
  br label %__nv_sqrtf.exit40, !dbg !72

__nv_sqrtf.exit40:                                ; preds = %485, %487, %490, %492
  %.0.i38 = phi float [ %486, %485 ], [ %488, %487 ], [ %491, %490 ], [ %493, %492 ], !dbg !72
  %494 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i41 = icmp eq i32 %494, 0, !dbg !72
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i44 = icmp eq i32 %495, 0, !dbg !72
  br i1 %.not.i41, label %501, label %496, !dbg !72

496:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %499, label %497, !dbg !72

497:                                              ; preds = %496
  %498 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %475) #3, !dbg !72
  br label %__nv_sqrtf.exit45, !dbg !72

499:                                              ; preds = %496
  %500 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %475) #3, !dbg !72
  br label %__nv_sqrtf.exit45, !dbg !72

501:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %504, label %502, !dbg !72

502:                                              ; preds = %501
  %503 = tail call float @llvm.nvvm.sqrt.rn.f(float %475) #3, !dbg !72
  br label %__nv_sqrtf.exit45, !dbg !72

504:                                              ; preds = %501
  %505 = tail call float @llvm.nvvm.sqrt.approx.f(float %475) #3, !dbg !72
  br label %__nv_sqrtf.exit45, !dbg !72

__nv_sqrtf.exit45:                                ; preds = %497, %499, %502, %504
  %.0.i43 = phi float [ %498, %497 ], [ %500, %499 ], [ %503, %502 ], [ %505, %504 ], !dbg !72
  %506 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i46 = icmp eq i32 %506, 0, !dbg !72
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i49 = icmp eq i32 %507, 0, !dbg !72
  br i1 %.not.i46, label %513, label %508, !dbg !72

508:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %511, label %509, !dbg !72

509:                                              ; preds = %508
  %510 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %476) #3, !dbg !72
  br label %__nv_sqrtf.exit50, !dbg !72

511:                                              ; preds = %508
  %512 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %476) #3, !dbg !72
  br label %__nv_sqrtf.exit50, !dbg !72

513:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %516, label %514, !dbg !72

514:                                              ; preds = %513
  %515 = tail call float @llvm.nvvm.sqrt.rn.f(float %476) #3, !dbg !72
  br label %__nv_sqrtf.exit50, !dbg !72

516:                                              ; preds = %513
  %517 = tail call float @llvm.nvvm.sqrt.approx.f(float %476) #3, !dbg !72
  br label %__nv_sqrtf.exit50, !dbg !72

__nv_sqrtf.exit50:                                ; preds = %509, %511, %514, %516
  %.0.i48 = phi float [ %510, %509 ], [ %512, %511 ], [ %515, %514 ], [ %517, %516 ], !dbg !72
  %518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i51 = icmp eq i32 %518, 0, !dbg !72
  %519 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i54 = icmp eq i32 %519, 0, !dbg !72
  br i1 %.not.i51, label %525, label %520, !dbg !72

520:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %523, label %521, !dbg !72

521:                                              ; preds = %520
  %522 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %477) #3, !dbg !72
  br label %__nv_sqrtf.exit55, !dbg !72

523:                                              ; preds = %520
  %524 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %477) #3, !dbg !72
  br label %__nv_sqrtf.exit55, !dbg !72

525:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %528, label %526, !dbg !72

526:                                              ; preds = %525
  %527 = tail call float @llvm.nvvm.sqrt.rn.f(float %477) #3, !dbg !72
  br label %__nv_sqrtf.exit55, !dbg !72

528:                                              ; preds = %525
  %529 = tail call float @llvm.nvvm.sqrt.approx.f(float %477) #3, !dbg !72
  br label %__nv_sqrtf.exit55, !dbg !72

__nv_sqrtf.exit55:                                ; preds = %521, %523, %526, %528
  %.0.i53 = phi float [ %522, %521 ], [ %524, %523 ], [ %527, %526 ], [ %529, %528 ], !dbg !72
  %530 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i56 = icmp eq i32 %530, 0, !dbg !72
  %531 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i59 = icmp eq i32 %531, 0, !dbg !72
  br i1 %.not.i56, label %537, label %532, !dbg !72

532:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %535, label %533, !dbg !72

533:                                              ; preds = %532
  %534 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %478) #3, !dbg !72
  br label %__nv_sqrtf.exit60, !dbg !72

535:                                              ; preds = %532
  %536 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %478) #3, !dbg !72
  br label %__nv_sqrtf.exit60, !dbg !72

537:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %540, label %538, !dbg !72

538:                                              ; preds = %537
  %539 = tail call float @llvm.nvvm.sqrt.rn.f(float %478) #3, !dbg !72
  br label %__nv_sqrtf.exit60, !dbg !72

540:                                              ; preds = %537
  %541 = tail call float @llvm.nvvm.sqrt.approx.f(float %478) #3, !dbg !72
  br label %__nv_sqrtf.exit60, !dbg !72

__nv_sqrtf.exit60:                                ; preds = %533, %535, %538, %540
  %.0.i58 = phi float [ %534, %533 ], [ %536, %535 ], [ %539, %538 ], [ %541, %540 ], !dbg !72
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i61 = icmp eq i32 %542, 0, !dbg !72
  %543 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i64 = icmp eq i32 %543, 0, !dbg !72
  br i1 %.not.i61, label %549, label %544, !dbg !72

544:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %547, label %545, !dbg !72

545:                                              ; preds = %544
  %546 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %479) #3, !dbg !72
  br label %__nv_sqrtf.exit65, !dbg !72

547:                                              ; preds = %544
  %548 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %479) #3, !dbg !72
  br label %__nv_sqrtf.exit65, !dbg !72

549:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %552, label %550, !dbg !72

550:                                              ; preds = %549
  %551 = tail call float @llvm.nvvm.sqrt.rn.f(float %479) #3, !dbg !72
  br label %__nv_sqrtf.exit65, !dbg !72

552:                                              ; preds = %549
  %553 = tail call float @llvm.nvvm.sqrt.approx.f(float %479) #3, !dbg !72
  br label %__nv_sqrtf.exit65, !dbg !72

__nv_sqrtf.exit65:                                ; preds = %545, %547, %550, %552
  %.0.i63 = phi float [ %546, %545 ], [ %548, %547 ], [ %551, %550 ], [ %553, %552 ], !dbg !72
  %554 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i66 = icmp eq i32 %554, 0, !dbg !72
  %555 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i69 = icmp eq i32 %555, 0, !dbg !72
  br i1 %.not.i66, label %561, label %556, !dbg !72

556:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %559, label %557, !dbg !72

557:                                              ; preds = %556
  %558 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %480) #3, !dbg !72
  br label %__nv_sqrtf.exit70, !dbg !72

559:                                              ; preds = %556
  %560 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %480) #3, !dbg !72
  br label %__nv_sqrtf.exit70, !dbg !72

561:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %564, label %562, !dbg !72

562:                                              ; preds = %561
  %563 = tail call float @llvm.nvvm.sqrt.rn.f(float %480) #3, !dbg !72
  br label %__nv_sqrtf.exit70, !dbg !72

564:                                              ; preds = %561
  %565 = tail call float @llvm.nvvm.sqrt.approx.f(float %480) #3, !dbg !72
  br label %__nv_sqrtf.exit70, !dbg !72

__nv_sqrtf.exit70:                                ; preds = %557, %559, %562, %564
  %.0.i68 = phi float [ %558, %557 ], [ %560, %559 ], [ %563, %562 ], [ %565, %564 ], !dbg !72
  %566 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i71 = icmp eq i32 %566, 0, !dbg !72
  %567 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i74 = icmp eq i32 %567, 0, !dbg !72
  br i1 %.not.i71, label %573, label %568, !dbg !72

568:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %571, label %569, !dbg !72

569:                                              ; preds = %568
  %570 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %481) #3, !dbg !72
  br label %__nv_sqrtf.exit75, !dbg !72

571:                                              ; preds = %568
  %572 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %481) #3, !dbg !72
  br label %__nv_sqrtf.exit75, !dbg !72

573:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %576, label %574, !dbg !72

574:                                              ; preds = %573
  %575 = tail call float @llvm.nvvm.sqrt.rn.f(float %481) #3, !dbg !72
  br label %__nv_sqrtf.exit75, !dbg !72

576:                                              ; preds = %573
  %577 = tail call float @llvm.nvvm.sqrt.approx.f(float %481) #3, !dbg !72
  br label %__nv_sqrtf.exit75, !dbg !72

__nv_sqrtf.exit75:                                ; preds = %569, %571, %574, %576
  %.0.i73 = phi float [ %570, %569 ], [ %572, %571 ], [ %575, %574 ], [ %577, %576 ], !dbg !72
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !73
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !73
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !73
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !73
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !73
  %583 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !73
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !73
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !73
  %586 = fmul float %466, %578, !dbg !74
  %587 = fmul float %467, %579, !dbg !74
  %588 = fmul float %468, %580, !dbg !74
  %589 = fmul float %469, %581, !dbg !74
  %590 = fmul float %470, %582, !dbg !74
  %591 = fmul float %471, %583, !dbg !74
  %592 = fmul float %472, %584, !dbg !74
  %593 = fmul float %473, %585, !dbg !74
  %594 = fmul float %586, %198, !dbg !75
  %595 = fmul float %587, %199, !dbg !75
  %596 = fmul float %588, %200, !dbg !75
  %597 = fmul float %589, %201, !dbg !75
  %598 = fmul float %590, %207, !dbg !75
  %599 = fmul float %591, %208, !dbg !75
  %600 = fmul float %592, %209, !dbg !75
  %601 = fmul float %593, %210, !dbg !75
  %602 = fadd float %594, %217, !dbg !76
  %603 = fadd float %595, %218, !dbg !76
  %604 = fadd float %596, %219, !dbg !76
  %605 = fadd float %597, %220, !dbg !76
  %606 = fadd float %598, %226, !dbg !76
  %607 = fadd float %599, %227, !dbg !76
  %608 = fadd float %600, %228, !dbg !76
  %609 = fadd float %601, %229, !dbg !76
  %610 = fadd float %458, %602, !dbg !77
  %611 = fadd float %459, %603, !dbg !77
  %612 = fadd float %460, %604, !dbg !77
  %613 = fadd float %461, %605, !dbg !77
  %614 = fadd float %462, %606, !dbg !77
  %615 = fadd float %463, %607, !dbg !77
  %616 = fadd float %464, %608, !dbg !77
  %617 = fadd float %465, %609, !dbg !77
  %618 = fadd float %243, 0x3EE4F8B580000000, !dbg !78
  %619 = fadd float %244, 0x3EE4F8B580000000, !dbg !78
  %620 = fadd float %245, 0x3EE4F8B580000000, !dbg !78
  %621 = fadd float %246, 0x3EE4F8B580000000, !dbg !78
  %622 = fadd float %252, 0x3EE4F8B580000000, !dbg !78
  %623 = fadd float %253, 0x3EE4F8B580000000, !dbg !78
  %624 = fadd float %254, 0x3EE4F8B580000000, !dbg !78
  %625 = fadd float %255, 0x3EE4F8B580000000, !dbg !78
  %626 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i76 = icmp eq i32 %626, 0, !dbg !79
  %627 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i79 = icmp eq i32 %627, 0, !dbg !79
  br i1 %.not.i76, label %633, label %628, !dbg !79

628:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %631, label %629, !dbg !79

629:                                              ; preds = %628
  %630 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %618) #3, !dbg !79
  br label %__nv_sqrtf.exit80, !dbg !79

631:                                              ; preds = %628
  %632 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %618) #3, !dbg !79
  br label %__nv_sqrtf.exit80, !dbg !79

633:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %636, label %634, !dbg !79

634:                                              ; preds = %633
  %635 = tail call float @llvm.nvvm.sqrt.rn.f(float %618) #3, !dbg !79
  br label %__nv_sqrtf.exit80, !dbg !79

636:                                              ; preds = %633
  %637 = tail call float @llvm.nvvm.sqrt.approx.f(float %618) #3, !dbg !79
  br label %__nv_sqrtf.exit80, !dbg !79

__nv_sqrtf.exit80:                                ; preds = %629, %631, %634, %636
  %.0.i78 = phi float [ %630, %629 ], [ %632, %631 ], [ %635, %634 ], [ %637, %636 ], !dbg !79
  %638 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i81 = icmp eq i32 %638, 0, !dbg !79
  %639 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i84 = icmp eq i32 %639, 0, !dbg !79
  br i1 %.not.i81, label %645, label %640, !dbg !79

640:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %643, label %641, !dbg !79

641:                                              ; preds = %640
  %642 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %619) #3, !dbg !79
  br label %__nv_sqrtf.exit85, !dbg !79

643:                                              ; preds = %640
  %644 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %619) #3, !dbg !79
  br label %__nv_sqrtf.exit85, !dbg !79

645:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %648, label %646, !dbg !79

646:                                              ; preds = %645
  %647 = tail call float @llvm.nvvm.sqrt.rn.f(float %619) #3, !dbg !79
  br label %__nv_sqrtf.exit85, !dbg !79

648:                                              ; preds = %645
  %649 = tail call float @llvm.nvvm.sqrt.approx.f(float %619) #3, !dbg !79
  br label %__nv_sqrtf.exit85, !dbg !79

__nv_sqrtf.exit85:                                ; preds = %641, %643, %646, %648
  %.0.i83 = phi float [ %642, %641 ], [ %644, %643 ], [ %647, %646 ], [ %649, %648 ], !dbg !79
  %650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i86 = icmp eq i32 %650, 0, !dbg !79
  %651 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i89 = icmp eq i32 %651, 0, !dbg !79
  br i1 %.not.i86, label %657, label %652, !dbg !79

652:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %655, label %653, !dbg !79

653:                                              ; preds = %652
  %654 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %620) #3, !dbg !79
  br label %__nv_sqrtf.exit90, !dbg !79

655:                                              ; preds = %652
  %656 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %620) #3, !dbg !79
  br label %__nv_sqrtf.exit90, !dbg !79

657:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %660, label %658, !dbg !79

658:                                              ; preds = %657
  %659 = tail call float @llvm.nvvm.sqrt.rn.f(float %620) #3, !dbg !79
  br label %__nv_sqrtf.exit90, !dbg !79

660:                                              ; preds = %657
  %661 = tail call float @llvm.nvvm.sqrt.approx.f(float %620) #3, !dbg !79
  br label %__nv_sqrtf.exit90, !dbg !79

__nv_sqrtf.exit90:                                ; preds = %653, %655, %658, %660
  %.0.i88 = phi float [ %654, %653 ], [ %656, %655 ], [ %659, %658 ], [ %661, %660 ], !dbg !79
  %662 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i91 = icmp eq i32 %662, 0, !dbg !79
  %663 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i94 = icmp eq i32 %663, 0, !dbg !79
  br i1 %.not.i91, label %669, label %664, !dbg !79

664:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %667, label %665, !dbg !79

665:                                              ; preds = %664
  %666 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %621) #3, !dbg !79
  br label %__nv_sqrtf.exit95, !dbg !79

667:                                              ; preds = %664
  %668 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %621) #3, !dbg !79
  br label %__nv_sqrtf.exit95, !dbg !79

669:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %672, label %670, !dbg !79

670:                                              ; preds = %669
  %671 = tail call float @llvm.nvvm.sqrt.rn.f(float %621) #3, !dbg !79
  br label %__nv_sqrtf.exit95, !dbg !79

672:                                              ; preds = %669
  %673 = tail call float @llvm.nvvm.sqrt.approx.f(float %621) #3, !dbg !79
  br label %__nv_sqrtf.exit95, !dbg !79

__nv_sqrtf.exit95:                                ; preds = %665, %667, %670, %672
  %.0.i93 = phi float [ %666, %665 ], [ %668, %667 ], [ %671, %670 ], [ %673, %672 ], !dbg !79
  %674 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i96 = icmp eq i32 %674, 0, !dbg !79
  %675 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i99 = icmp eq i32 %675, 0, !dbg !79
  br i1 %.not.i96, label %681, label %676, !dbg !79

676:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %679, label %677, !dbg !79

677:                                              ; preds = %676
  %678 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %622) #3, !dbg !79
  br label %__nv_sqrtf.exit100, !dbg !79

679:                                              ; preds = %676
  %680 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %622) #3, !dbg !79
  br label %__nv_sqrtf.exit100, !dbg !79

681:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %684, label %682, !dbg !79

682:                                              ; preds = %681
  %683 = tail call float @llvm.nvvm.sqrt.rn.f(float %622) #3, !dbg !79
  br label %__nv_sqrtf.exit100, !dbg !79

684:                                              ; preds = %681
  %685 = tail call float @llvm.nvvm.sqrt.approx.f(float %622) #3, !dbg !79
  br label %__nv_sqrtf.exit100, !dbg !79

__nv_sqrtf.exit100:                               ; preds = %677, %679, %682, %684
  %.0.i98 = phi float [ %678, %677 ], [ %680, %679 ], [ %683, %682 ], [ %685, %684 ], !dbg !79
  %686 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i101 = icmp eq i32 %686, 0, !dbg !79
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i104 = icmp eq i32 %687, 0, !dbg !79
  br i1 %.not.i101, label %693, label %688, !dbg !79

688:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %691, label %689, !dbg !79

689:                                              ; preds = %688
  %690 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %623) #3, !dbg !79
  br label %__nv_sqrtf.exit105, !dbg !79

691:                                              ; preds = %688
  %692 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %623) #3, !dbg !79
  br label %__nv_sqrtf.exit105, !dbg !79

693:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %696, label %694, !dbg !79

694:                                              ; preds = %693
  %695 = tail call float @llvm.nvvm.sqrt.rn.f(float %623) #3, !dbg !79
  br label %__nv_sqrtf.exit105, !dbg !79

696:                                              ; preds = %693
  %697 = tail call float @llvm.nvvm.sqrt.approx.f(float %623) #3, !dbg !79
  br label %__nv_sqrtf.exit105, !dbg !79

__nv_sqrtf.exit105:                               ; preds = %689, %691, %694, %696
  %.0.i103 = phi float [ %690, %689 ], [ %692, %691 ], [ %695, %694 ], [ %697, %696 ], !dbg !79
  %698 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i106 = icmp eq i32 %698, 0, !dbg !79
  %699 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i109 = icmp eq i32 %699, 0, !dbg !79
  br i1 %.not.i106, label %705, label %700, !dbg !79

700:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %703, label %701, !dbg !79

701:                                              ; preds = %700
  %702 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %624) #3, !dbg !79
  br label %__nv_sqrtf.exit110, !dbg !79

703:                                              ; preds = %700
  %704 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %624) #3, !dbg !79
  br label %__nv_sqrtf.exit110, !dbg !79

705:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %708, label %706, !dbg !79

706:                                              ; preds = %705
  %707 = tail call float @llvm.nvvm.sqrt.rn.f(float %624) #3, !dbg !79
  br label %__nv_sqrtf.exit110, !dbg !79

708:                                              ; preds = %705
  %709 = tail call float @llvm.nvvm.sqrt.approx.f(float %624) #3, !dbg !79
  br label %__nv_sqrtf.exit110, !dbg !79

__nv_sqrtf.exit110:                               ; preds = %701, %703, %706, %708
  %.0.i108 = phi float [ %702, %701 ], [ %704, %703 ], [ %707, %706 ], [ %709, %708 ], !dbg !79
  %710 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i111 = icmp eq i32 %710, 0, !dbg !79
  %711 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i114 = icmp eq i32 %711, 0, !dbg !79
  br i1 %.not.i111, label %717, label %712, !dbg !79

712:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %715, label %713, !dbg !79

713:                                              ; preds = %712
  %714 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %625) #3, !dbg !79
  br label %__nv_sqrtf.exit115, !dbg !79

715:                                              ; preds = %712
  %716 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %625) #3, !dbg !79
  br label %__nv_sqrtf.exit115, !dbg !79

717:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %720, label %718, !dbg !79

718:                                              ; preds = %717
  %719 = tail call float @llvm.nvvm.sqrt.rn.f(float %625) #3, !dbg !79
  br label %__nv_sqrtf.exit115, !dbg !79

720:                                              ; preds = %717
  %721 = tail call float @llvm.nvvm.sqrt.approx.f(float %625) #3, !dbg !79
  br label %__nv_sqrtf.exit115, !dbg !79

__nv_sqrtf.exit115:                               ; preds = %713, %715, %718, %720
  %.0.i113 = phi float [ %714, %713 ], [ %716, %715 ], [ %719, %718 ], [ %721, %720 ], !dbg !79
  %722 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #3, !dbg !80
  %723 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #3, !dbg !80
  %724 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #3, !dbg !80
  %725 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i93) #3, !dbg !80
  %726 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i98) #3, !dbg !80
  %727 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i103) #3, !dbg !80
  %728 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i108) #3, !dbg !80
  %729 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i113) #3, !dbg !80
  %730 = fsub float 0.000000e+00, %610, !dbg !81
  %731 = fsub float 0.000000e+00, %611, !dbg !81
  %732 = fsub float 0.000000e+00, %612, !dbg !81
  %733 = fsub float 0.000000e+00, %613, !dbg !81
  %734 = fsub float 0.000000e+00, %614, !dbg !81
  %735 = fsub float 0.000000e+00, %615, !dbg !81
  %736 = fsub float 0.000000e+00, %616, !dbg !81
  %737 = fsub float 0.000000e+00, %617, !dbg !81
  %738 = fmul float %730, 0x3FF7154760000000, !dbg !85
  %739 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %738) #3, !dbg !85
  %740 = fmul float %731, 0x3FF7154760000000, !dbg !85
  %741 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %740) #3, !dbg !85
  %742 = fmul float %732, 0x3FF7154760000000, !dbg !85
  %743 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %742) #3, !dbg !85
  %744 = fmul float %733, 0x3FF7154760000000, !dbg !85
  %745 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %744) #3, !dbg !85
  %746 = fmul float %734, 0x3FF7154760000000, !dbg !85
  %747 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %746) #3, !dbg !85
  %748 = fmul float %735, 0x3FF7154760000000, !dbg !85
  %749 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %748) #3, !dbg !85
  %750 = fmul float %736, 0x3FF7154760000000, !dbg !85
  %751 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %750) #3, !dbg !85
  %752 = fmul float %737, 0x3FF7154760000000, !dbg !85
  %753 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %752) #3, !dbg !85
  %754 = fadd float %739, 1.000000e+00, !dbg !86
  %755 = fadd float %741, 1.000000e+00, !dbg !86
  %756 = fadd float %743, 1.000000e+00, !dbg !86
  %757 = fadd float %745, 1.000000e+00, !dbg !86
  %758 = fadd float %747, 1.000000e+00, !dbg !86
  %759 = fadd float %749, 1.000000e+00, !dbg !86
  %760 = fadd float %751, 1.000000e+00, !dbg !86
  %761 = fadd float %753, 1.000000e+00, !dbg !86
  %762 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %754) #3, !dbg !87
  %763 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %755) #3, !dbg !87
  %764 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %756) #3, !dbg !87
  %765 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %757) #3, !dbg !87
  %766 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %758) #3, !dbg !87
  %767 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %759) #3, !dbg !87
  %768 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %760) #3, !dbg !87
  %769 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %761) #3, !dbg !87
  %770 = fadd float %271, 0x3EE4F8B580000000, !dbg !88
  %771 = fadd float %272, 0x3EE4F8B580000000, !dbg !88
  %772 = fadd float %273, 0x3EE4F8B580000000, !dbg !88
  %773 = fadd float %274, 0x3EE4F8B580000000, !dbg !88
  %774 = fadd float %280, 0x3EE4F8B580000000, !dbg !88
  %775 = fadd float %281, 0x3EE4F8B580000000, !dbg !88
  %776 = fadd float %282, 0x3EE4F8B580000000, !dbg !88
  %777 = fadd float %283, 0x3EE4F8B580000000, !dbg !88
  %778 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i116 = icmp eq i32 %778, 0, !dbg !89
  %779 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i119 = icmp eq i32 %779, 0, !dbg !89
  br i1 %.not.i116, label %785, label %780, !dbg !89

780:                                              ; preds = %__nv_sqrtf.exit115
  br i1 %.not1.i119, label %783, label %781, !dbg !89

781:                                              ; preds = %780
  %782 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %770) #3, !dbg !89
  br label %__nv_sqrtf.exit120, !dbg !89

783:                                              ; preds = %780
  %784 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %770) #3, !dbg !89
  br label %__nv_sqrtf.exit120, !dbg !89

785:                                              ; preds = %__nv_sqrtf.exit115
  br i1 %.not1.i119, label %788, label %786, !dbg !89

786:                                              ; preds = %785
  %787 = tail call float @llvm.nvvm.sqrt.rn.f(float %770) #3, !dbg !89
  br label %__nv_sqrtf.exit120, !dbg !89

788:                                              ; preds = %785
  %789 = tail call float @llvm.nvvm.sqrt.approx.f(float %770) #3, !dbg !89
  br label %__nv_sqrtf.exit120, !dbg !89

__nv_sqrtf.exit120:                               ; preds = %781, %783, %786, %788
  %.0.i118 = phi float [ %782, %781 ], [ %784, %783 ], [ %787, %786 ], [ %789, %788 ], !dbg !89
  %790 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i121 = icmp eq i32 %790, 0, !dbg !89
  %791 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i124 = icmp eq i32 %791, 0, !dbg !89
  br i1 %.not.i121, label %797, label %792, !dbg !89

792:                                              ; preds = %__nv_sqrtf.exit120
  br i1 %.not1.i124, label %795, label %793, !dbg !89

793:                                              ; preds = %792
  %794 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %771) #3, !dbg !89
  br label %__nv_sqrtf.exit125, !dbg !89

795:                                              ; preds = %792
  %796 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %771) #3, !dbg !89
  br label %__nv_sqrtf.exit125, !dbg !89

797:                                              ; preds = %__nv_sqrtf.exit120
  br i1 %.not1.i124, label %800, label %798, !dbg !89

798:                                              ; preds = %797
  %799 = tail call float @llvm.nvvm.sqrt.rn.f(float %771) #3, !dbg !89
  br label %__nv_sqrtf.exit125, !dbg !89

800:                                              ; preds = %797
  %801 = tail call float @llvm.nvvm.sqrt.approx.f(float %771) #3, !dbg !89
  br label %__nv_sqrtf.exit125, !dbg !89

__nv_sqrtf.exit125:                               ; preds = %793, %795, %798, %800
  %.0.i123 = phi float [ %794, %793 ], [ %796, %795 ], [ %799, %798 ], [ %801, %800 ], !dbg !89
  %802 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i126 = icmp eq i32 %802, 0, !dbg !89
  %803 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i129 = icmp eq i32 %803, 0, !dbg !89
  br i1 %.not.i126, label %809, label %804, !dbg !89

804:                                              ; preds = %__nv_sqrtf.exit125
  br i1 %.not1.i129, label %807, label %805, !dbg !89

805:                                              ; preds = %804
  %806 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %772) #3, !dbg !89
  br label %__nv_sqrtf.exit130, !dbg !89

807:                                              ; preds = %804
  %808 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %772) #3, !dbg !89
  br label %__nv_sqrtf.exit130, !dbg !89

809:                                              ; preds = %__nv_sqrtf.exit125
  br i1 %.not1.i129, label %812, label %810, !dbg !89

810:                                              ; preds = %809
  %811 = tail call float @llvm.nvvm.sqrt.rn.f(float %772) #3, !dbg !89
  br label %__nv_sqrtf.exit130, !dbg !89

812:                                              ; preds = %809
  %813 = tail call float @llvm.nvvm.sqrt.approx.f(float %772) #3, !dbg !89
  br label %__nv_sqrtf.exit130, !dbg !89

__nv_sqrtf.exit130:                               ; preds = %805, %807, %810, %812
  %.0.i128 = phi float [ %806, %805 ], [ %808, %807 ], [ %811, %810 ], [ %813, %812 ], !dbg !89
  %814 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i131 = icmp eq i32 %814, 0, !dbg !89
  %815 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i134 = icmp eq i32 %815, 0, !dbg !89
  br i1 %.not.i131, label %821, label %816, !dbg !89

816:                                              ; preds = %__nv_sqrtf.exit130
  br i1 %.not1.i134, label %819, label %817, !dbg !89

817:                                              ; preds = %816
  %818 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %773) #3, !dbg !89
  br label %__nv_sqrtf.exit135, !dbg !89

819:                                              ; preds = %816
  %820 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %773) #3, !dbg !89
  br label %__nv_sqrtf.exit135, !dbg !89

821:                                              ; preds = %__nv_sqrtf.exit130
  br i1 %.not1.i134, label %824, label %822, !dbg !89

822:                                              ; preds = %821
  %823 = tail call float @llvm.nvvm.sqrt.rn.f(float %773) #3, !dbg !89
  br label %__nv_sqrtf.exit135, !dbg !89

824:                                              ; preds = %821
  %825 = tail call float @llvm.nvvm.sqrt.approx.f(float %773) #3, !dbg !89
  br label %__nv_sqrtf.exit135, !dbg !89

__nv_sqrtf.exit135:                               ; preds = %817, %819, %822, %824
  %.0.i133 = phi float [ %818, %817 ], [ %820, %819 ], [ %823, %822 ], [ %825, %824 ], !dbg !89
  %826 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i136 = icmp eq i32 %826, 0, !dbg !89
  %827 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i139 = icmp eq i32 %827, 0, !dbg !89
  br i1 %.not.i136, label %833, label %828, !dbg !89

828:                                              ; preds = %__nv_sqrtf.exit135
  br i1 %.not1.i139, label %831, label %829, !dbg !89

829:                                              ; preds = %828
  %830 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %774) #3, !dbg !89
  br label %__nv_sqrtf.exit140, !dbg !89

831:                                              ; preds = %828
  %832 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %774) #3, !dbg !89
  br label %__nv_sqrtf.exit140, !dbg !89

833:                                              ; preds = %__nv_sqrtf.exit135
  br i1 %.not1.i139, label %836, label %834, !dbg !89

834:                                              ; preds = %833
  %835 = tail call float @llvm.nvvm.sqrt.rn.f(float %774) #3, !dbg !89
  br label %__nv_sqrtf.exit140, !dbg !89

836:                                              ; preds = %833
  %837 = tail call float @llvm.nvvm.sqrt.approx.f(float %774) #3, !dbg !89
  br label %__nv_sqrtf.exit140, !dbg !89

__nv_sqrtf.exit140:                               ; preds = %829, %831, %834, %836
  %.0.i138 = phi float [ %830, %829 ], [ %832, %831 ], [ %835, %834 ], [ %837, %836 ], !dbg !89
  %838 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i141 = icmp eq i32 %838, 0, !dbg !89
  %839 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i144 = icmp eq i32 %839, 0, !dbg !89
  br i1 %.not.i141, label %845, label %840, !dbg !89

840:                                              ; preds = %__nv_sqrtf.exit140
  br i1 %.not1.i144, label %843, label %841, !dbg !89

841:                                              ; preds = %840
  %842 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %775) #3, !dbg !89
  br label %__nv_sqrtf.exit145, !dbg !89

843:                                              ; preds = %840
  %844 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %775) #3, !dbg !89
  br label %__nv_sqrtf.exit145, !dbg !89

845:                                              ; preds = %__nv_sqrtf.exit140
  br i1 %.not1.i144, label %848, label %846, !dbg !89

846:                                              ; preds = %845
  %847 = tail call float @llvm.nvvm.sqrt.rn.f(float %775) #3, !dbg !89
  br label %__nv_sqrtf.exit145, !dbg !89

848:                                              ; preds = %845
  %849 = tail call float @llvm.nvvm.sqrt.approx.f(float %775) #3, !dbg !89
  br label %__nv_sqrtf.exit145, !dbg !89

__nv_sqrtf.exit145:                               ; preds = %841, %843, %846, %848
  %.0.i143 = phi float [ %842, %841 ], [ %844, %843 ], [ %847, %846 ], [ %849, %848 ], !dbg !89
  %850 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i146 = icmp eq i32 %850, 0, !dbg !89
  %851 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i149 = icmp eq i32 %851, 0, !dbg !89
  br i1 %.not.i146, label %857, label %852, !dbg !89

852:                                              ; preds = %__nv_sqrtf.exit145
  br i1 %.not1.i149, label %855, label %853, !dbg !89

853:                                              ; preds = %852
  %854 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %776) #3, !dbg !89
  br label %__nv_sqrtf.exit150, !dbg !89

855:                                              ; preds = %852
  %856 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %776) #3, !dbg !89
  br label %__nv_sqrtf.exit150, !dbg !89

857:                                              ; preds = %__nv_sqrtf.exit145
  br i1 %.not1.i149, label %860, label %858, !dbg !89

858:                                              ; preds = %857
  %859 = tail call float @llvm.nvvm.sqrt.rn.f(float %776) #3, !dbg !89
  br label %__nv_sqrtf.exit150, !dbg !89

860:                                              ; preds = %857
  %861 = tail call float @llvm.nvvm.sqrt.approx.f(float %776) #3, !dbg !89
  br label %__nv_sqrtf.exit150, !dbg !89

__nv_sqrtf.exit150:                               ; preds = %853, %855, %858, %860
  %.0.i148 = phi float [ %854, %853 ], [ %856, %855 ], [ %859, %858 ], [ %861, %860 ], !dbg !89
  %862 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !89
  %.not.i151 = icmp eq i32 %862, 0, !dbg !89
  %863 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !89
  %.not1.i154 = icmp eq i32 %863, 0, !dbg !89
  br i1 %.not.i151, label %869, label %864, !dbg !89

864:                                              ; preds = %__nv_sqrtf.exit150
  br i1 %.not1.i154, label %867, label %865, !dbg !89

865:                                              ; preds = %864
  %866 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %777) #3, !dbg !89
  br label %__nv_sqrtf.exit155, !dbg !89

867:                                              ; preds = %864
  %868 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %777) #3, !dbg !89
  br label %__nv_sqrtf.exit155, !dbg !89

869:                                              ; preds = %__nv_sqrtf.exit150
  br i1 %.not1.i154, label %872, label %870, !dbg !89

870:                                              ; preds = %869
  %871 = tail call float @llvm.nvvm.sqrt.rn.f(float %777) #3, !dbg !89
  br label %__nv_sqrtf.exit155, !dbg !89

872:                                              ; preds = %869
  %873 = tail call float @llvm.nvvm.sqrt.approx.f(float %777) #3, !dbg !89
  br label %__nv_sqrtf.exit155, !dbg !89

__nv_sqrtf.exit155:                               ; preds = %865, %867, %870, %872
  %.0.i153 = phi float [ %866, %865 ], [ %868, %867 ], [ %871, %870 ], [ %873, %872 ], !dbg !89
  %874 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i118) #3, !dbg !90
  %875 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i123) #3, !dbg !90
  %876 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i128) #3, !dbg !90
  %877 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i133) #3, !dbg !90
  %878 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i138) #3, !dbg !90
  %879 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i143) #3, !dbg !90
  %880 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i148) #3, !dbg !90
  %881 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i153) #3, !dbg !90
  %882 = fadd float %300, 0x3EE4F8B580000000, !dbg !91
  %883 = fadd float %301, 0x3EE4F8B580000000, !dbg !91
  %884 = fadd float %302, 0x3EE4F8B580000000, !dbg !91
  %885 = fadd float %303, 0x3EE4F8B580000000, !dbg !91
  %886 = fadd float %309, 0x3EE4F8B580000000, !dbg !91
  %887 = fadd float %310, 0x3EE4F8B580000000, !dbg !91
  %888 = fadd float %311, 0x3EE4F8B580000000, !dbg !91
  %889 = fadd float %312, 0x3EE4F8B580000000, !dbg !91
  %890 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i156 = icmp eq i32 %890, 0, !dbg !92
  %891 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i159 = icmp eq i32 %891, 0, !dbg !92
  br i1 %.not.i156, label %897, label %892, !dbg !92

892:                                              ; preds = %__nv_sqrtf.exit155
  br i1 %.not1.i159, label %895, label %893, !dbg !92

893:                                              ; preds = %892
  %894 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %882) #3, !dbg !92
  br label %__nv_sqrtf.exit160, !dbg !92

895:                                              ; preds = %892
  %896 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %882) #3, !dbg !92
  br label %__nv_sqrtf.exit160, !dbg !92

897:                                              ; preds = %__nv_sqrtf.exit155
  br i1 %.not1.i159, label %900, label %898, !dbg !92

898:                                              ; preds = %897
  %899 = tail call float @llvm.nvvm.sqrt.rn.f(float %882) #3, !dbg !92
  br label %__nv_sqrtf.exit160, !dbg !92

900:                                              ; preds = %897
  %901 = tail call float @llvm.nvvm.sqrt.approx.f(float %882) #3, !dbg !92
  br label %__nv_sqrtf.exit160, !dbg !92

__nv_sqrtf.exit160:                               ; preds = %893, %895, %898, %900
  %.0.i158 = phi float [ %894, %893 ], [ %896, %895 ], [ %899, %898 ], [ %901, %900 ], !dbg !92
  %902 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i161 = icmp eq i32 %902, 0, !dbg !92
  %903 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i164 = icmp eq i32 %903, 0, !dbg !92
  br i1 %.not.i161, label %909, label %904, !dbg !92

904:                                              ; preds = %__nv_sqrtf.exit160
  br i1 %.not1.i164, label %907, label %905, !dbg !92

905:                                              ; preds = %904
  %906 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %883) #3, !dbg !92
  br label %__nv_sqrtf.exit165, !dbg !92

907:                                              ; preds = %904
  %908 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %883) #3, !dbg !92
  br label %__nv_sqrtf.exit165, !dbg !92

909:                                              ; preds = %__nv_sqrtf.exit160
  br i1 %.not1.i164, label %912, label %910, !dbg !92

910:                                              ; preds = %909
  %911 = tail call float @llvm.nvvm.sqrt.rn.f(float %883) #3, !dbg !92
  br label %__nv_sqrtf.exit165, !dbg !92

912:                                              ; preds = %909
  %913 = tail call float @llvm.nvvm.sqrt.approx.f(float %883) #3, !dbg !92
  br label %__nv_sqrtf.exit165, !dbg !92

__nv_sqrtf.exit165:                               ; preds = %905, %907, %910, %912
  %.0.i163 = phi float [ %906, %905 ], [ %908, %907 ], [ %911, %910 ], [ %913, %912 ], !dbg !92
  %914 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i166 = icmp eq i32 %914, 0, !dbg !92
  %915 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i169 = icmp eq i32 %915, 0, !dbg !92
  br i1 %.not.i166, label %921, label %916, !dbg !92

916:                                              ; preds = %__nv_sqrtf.exit165
  br i1 %.not1.i169, label %919, label %917, !dbg !92

917:                                              ; preds = %916
  %918 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %884) #3, !dbg !92
  br label %__nv_sqrtf.exit170, !dbg !92

919:                                              ; preds = %916
  %920 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %884) #3, !dbg !92
  br label %__nv_sqrtf.exit170, !dbg !92

921:                                              ; preds = %__nv_sqrtf.exit165
  br i1 %.not1.i169, label %924, label %922, !dbg !92

922:                                              ; preds = %921
  %923 = tail call float @llvm.nvvm.sqrt.rn.f(float %884) #3, !dbg !92
  br label %__nv_sqrtf.exit170, !dbg !92

924:                                              ; preds = %921
  %925 = tail call float @llvm.nvvm.sqrt.approx.f(float %884) #3, !dbg !92
  br label %__nv_sqrtf.exit170, !dbg !92

__nv_sqrtf.exit170:                               ; preds = %917, %919, %922, %924
  %.0.i168 = phi float [ %918, %917 ], [ %920, %919 ], [ %923, %922 ], [ %925, %924 ], !dbg !92
  %926 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i171 = icmp eq i32 %926, 0, !dbg !92
  %927 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i174 = icmp eq i32 %927, 0, !dbg !92
  br i1 %.not.i171, label %933, label %928, !dbg !92

928:                                              ; preds = %__nv_sqrtf.exit170
  br i1 %.not1.i174, label %931, label %929, !dbg !92

929:                                              ; preds = %928
  %930 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %885) #3, !dbg !92
  br label %__nv_sqrtf.exit175, !dbg !92

931:                                              ; preds = %928
  %932 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %885) #3, !dbg !92
  br label %__nv_sqrtf.exit175, !dbg !92

933:                                              ; preds = %__nv_sqrtf.exit170
  br i1 %.not1.i174, label %936, label %934, !dbg !92

934:                                              ; preds = %933
  %935 = tail call float @llvm.nvvm.sqrt.rn.f(float %885) #3, !dbg !92
  br label %__nv_sqrtf.exit175, !dbg !92

936:                                              ; preds = %933
  %937 = tail call float @llvm.nvvm.sqrt.approx.f(float %885) #3, !dbg !92
  br label %__nv_sqrtf.exit175, !dbg !92

__nv_sqrtf.exit175:                               ; preds = %929, %931, %934, %936
  %.0.i173 = phi float [ %930, %929 ], [ %932, %931 ], [ %935, %934 ], [ %937, %936 ], !dbg !92
  %938 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i176 = icmp eq i32 %938, 0, !dbg !92
  %939 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i179 = icmp eq i32 %939, 0, !dbg !92
  br i1 %.not.i176, label %945, label %940, !dbg !92

940:                                              ; preds = %__nv_sqrtf.exit175
  br i1 %.not1.i179, label %943, label %941, !dbg !92

941:                                              ; preds = %940
  %942 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %886) #3, !dbg !92
  br label %__nv_sqrtf.exit180, !dbg !92

943:                                              ; preds = %940
  %944 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %886) #3, !dbg !92
  br label %__nv_sqrtf.exit180, !dbg !92

945:                                              ; preds = %__nv_sqrtf.exit175
  br i1 %.not1.i179, label %948, label %946, !dbg !92

946:                                              ; preds = %945
  %947 = tail call float @llvm.nvvm.sqrt.rn.f(float %886) #3, !dbg !92
  br label %__nv_sqrtf.exit180, !dbg !92

948:                                              ; preds = %945
  %949 = tail call float @llvm.nvvm.sqrt.approx.f(float %886) #3, !dbg !92
  br label %__nv_sqrtf.exit180, !dbg !92

__nv_sqrtf.exit180:                               ; preds = %941, %943, %946, %948
  %.0.i178 = phi float [ %942, %941 ], [ %944, %943 ], [ %947, %946 ], [ %949, %948 ], !dbg !92
  %950 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i181 = icmp eq i32 %950, 0, !dbg !92
  %951 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i184 = icmp eq i32 %951, 0, !dbg !92
  br i1 %.not.i181, label %957, label %952, !dbg !92

952:                                              ; preds = %__nv_sqrtf.exit180
  br i1 %.not1.i184, label %955, label %953, !dbg !92

953:                                              ; preds = %952
  %954 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %887) #3, !dbg !92
  br label %__nv_sqrtf.exit185, !dbg !92

955:                                              ; preds = %952
  %956 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %887) #3, !dbg !92
  br label %__nv_sqrtf.exit185, !dbg !92

957:                                              ; preds = %__nv_sqrtf.exit180
  br i1 %.not1.i184, label %960, label %958, !dbg !92

958:                                              ; preds = %957
  %959 = tail call float @llvm.nvvm.sqrt.rn.f(float %887) #3, !dbg !92
  br label %__nv_sqrtf.exit185, !dbg !92

960:                                              ; preds = %957
  %961 = tail call float @llvm.nvvm.sqrt.approx.f(float %887) #3, !dbg !92
  br label %__nv_sqrtf.exit185, !dbg !92

__nv_sqrtf.exit185:                               ; preds = %953, %955, %958, %960
  %.0.i183 = phi float [ %954, %953 ], [ %956, %955 ], [ %959, %958 ], [ %961, %960 ], !dbg !92
  %962 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i186 = icmp eq i32 %962, 0, !dbg !92
  %963 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i189 = icmp eq i32 %963, 0, !dbg !92
  br i1 %.not.i186, label %969, label %964, !dbg !92

964:                                              ; preds = %__nv_sqrtf.exit185
  br i1 %.not1.i189, label %967, label %965, !dbg !92

965:                                              ; preds = %964
  %966 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %888) #3, !dbg !92
  br label %__nv_sqrtf.exit190, !dbg !92

967:                                              ; preds = %964
  %968 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %888) #3, !dbg !92
  br label %__nv_sqrtf.exit190, !dbg !92

969:                                              ; preds = %__nv_sqrtf.exit185
  br i1 %.not1.i189, label %972, label %970, !dbg !92

970:                                              ; preds = %969
  %971 = tail call float @llvm.nvvm.sqrt.rn.f(float %888) #3, !dbg !92
  br label %__nv_sqrtf.exit190, !dbg !92

972:                                              ; preds = %969
  %973 = tail call float @llvm.nvvm.sqrt.approx.f(float %888) #3, !dbg !92
  br label %__nv_sqrtf.exit190, !dbg !92

__nv_sqrtf.exit190:                               ; preds = %965, %967, %970, %972
  %.0.i188 = phi float [ %966, %965 ], [ %968, %967 ], [ %971, %970 ], [ %973, %972 ], !dbg !92
  %974 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !92
  %.not.i191 = icmp eq i32 %974, 0, !dbg !92
  %975 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !92
  %.not1.i194 = icmp eq i32 %975, 0, !dbg !92
  br i1 %.not.i191, label %981, label %976, !dbg !92

976:                                              ; preds = %__nv_sqrtf.exit190
  br i1 %.not1.i194, label %979, label %977, !dbg !92

977:                                              ; preds = %976
  %978 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %889) #3, !dbg !92
  br label %__nv_sqrtf.exit195, !dbg !92

979:                                              ; preds = %976
  %980 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %889) #3, !dbg !92
  br label %__nv_sqrtf.exit195, !dbg !92

981:                                              ; preds = %__nv_sqrtf.exit190
  br i1 %.not1.i194, label %984, label %982, !dbg !92

982:                                              ; preds = %981
  %983 = tail call float @llvm.nvvm.sqrt.rn.f(float %889) #3, !dbg !92
  br label %__nv_sqrtf.exit195, !dbg !92

984:                                              ; preds = %981
  %985 = tail call float @llvm.nvvm.sqrt.approx.f(float %889) #3, !dbg !92
  br label %__nv_sqrtf.exit195, !dbg !92

__nv_sqrtf.exit195:                               ; preds = %977, %979, %982, %984
  %.0.i193 = phi float [ %978, %977 ], [ %980, %979 ], [ %983, %982 ], [ %985, %984 ], !dbg !92
  %986 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !52
  %987 = bitcast i32 %986 to float, !dbg !52
  %988 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !54
  %989 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !52
  %990 = bitcast i32 %989 to float, !dbg !52
  %991 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !54
  %992 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !52
  %993 = bitcast i32 %992 to float, !dbg !52
  %994 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !54
  %995 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !52
  %996 = bitcast i32 %995 to float, !dbg !52
  %997 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !54
  %998 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !52
  %999 = bitcast i32 %998 to float, !dbg !52
  %1000 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !54
  %1001 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !52
  %1002 = bitcast i32 %1001 to float, !dbg !52
  %1003 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !54
  %1004 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !52
  %1005 = bitcast i32 %1004 to float, !dbg !52
  %1006 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !54
  %1007 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !52
  %1008 = bitcast i32 %1007 to float, !dbg !52
  %1009 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !54
  %1010 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !36
  %1011 = bitcast i32 %1010 to float, !dbg !36
  %1012 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !38
  %1013 = bitcast i32 %1012 to float, !dbg !38
  %1014 = fsub float %1011, %1013, !dbg !93
  %1015 = fmul float %1014, %729, !dbg !94
  %1016 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !42
  %1017 = bitcast i32 %1016 to float, !dbg !42
  %1018 = fmul float %1015, %1017, !dbg !95
  %1019 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !44
  %1020 = bitcast i32 %1019 to float, !dbg !44
  %1021 = fadd float %1018, %1020, !dbg !96
  %1022 = fmul float %1021, %769, !dbg !97
  %1023 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !46
  %1024 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !50
  %1025 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !36
  %1026 = bitcast i32 %1025 to float, !dbg !36
  %1027 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !38
  %1028 = bitcast i32 %1027 to float, !dbg !38
  %1029 = fsub float %1026, %1028, !dbg !93
  %1030 = fmul float %1029, %728, !dbg !94
  %1031 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !42
  %1032 = bitcast i32 %1031 to float, !dbg !42
  %1033 = fmul float %1030, %1032, !dbg !95
  %1034 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !44
  %1035 = bitcast i32 %1034 to float, !dbg !44
  %1036 = fadd float %1033, %1035, !dbg !96
  %1037 = fmul float %1036, %768, !dbg !97
  %1038 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !46
  %1039 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !50
  %1040 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !36
  %1041 = bitcast i32 %1040 to float, !dbg !36
  %1042 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !38
  %1043 = bitcast i32 %1042 to float, !dbg !38
  %1044 = fsub float %1041, %1043, !dbg !93
  %1045 = fmul float %1044, %727, !dbg !94
  %1046 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !42
  %1047 = bitcast i32 %1046 to float, !dbg !42
  %1048 = fmul float %1045, %1047, !dbg !95
  %1049 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !44
  %1050 = bitcast i32 %1049 to float, !dbg !44
  %1051 = fadd float %1048, %1050, !dbg !96
  %1052 = fmul float %1051, %767, !dbg !97
  %1053 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !46
  %1054 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !50
  %1055 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !36
  %1056 = bitcast i32 %1055 to float, !dbg !36
  %1057 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !38
  %1058 = bitcast i32 %1057 to float, !dbg !38
  %1059 = fsub float %1056, %1058, !dbg !93
  %1060 = fmul float %1059, %726, !dbg !94
  %1061 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !42
  %1062 = bitcast i32 %1061 to float, !dbg !42
  %1063 = fmul float %1060, %1062, !dbg !95
  %1064 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !44
  %1065 = bitcast i32 %1064 to float, !dbg !44
  %1066 = fadd float %1063, %1065, !dbg !96
  %1067 = fmul float %1066, %766, !dbg !97
  %1068 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !46
  %1069 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !50
  %1070 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !36
  %1071 = bitcast i32 %1070 to float, !dbg !36
  %1072 = extractvalue { i32, i32, i32, i32 } %235, 3, !dbg !38
  %1073 = bitcast i32 %1072 to float, !dbg !38
  %1074 = fsub float %1071, %1073, !dbg !93
  %1075 = fmul float %1074, %725, !dbg !94
  %1076 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !42
  %1077 = bitcast i32 %1076 to float, !dbg !42
  %1078 = fmul float %1075, %1077, !dbg !95
  %1079 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !44
  %1080 = bitcast i32 %1079 to float, !dbg !44
  %1081 = fadd float %1078, %1080, !dbg !96
  %1082 = fmul float %1081, %765, !dbg !97
  %1083 = extractvalue { i32, i32, i32, i32 } %263, 3, !dbg !46
  %1084 = extractvalue { i32, i32, i32, i32 } %285, 3, !dbg !50
  %1085 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !36
  %1086 = bitcast i32 %1085 to float, !dbg !36
  %1087 = extractvalue { i32, i32, i32, i32 } %235, 2, !dbg !38
  %1088 = bitcast i32 %1087 to float, !dbg !38
  %1089 = fsub float %1086, %1088, !dbg !93
  %1090 = fmul float %1089, %724, !dbg !94
  %1091 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !42
  %1092 = bitcast i32 %1091 to float, !dbg !42
  %1093 = fmul float %1090, %1092, !dbg !95
  %1094 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !44
  %1095 = bitcast i32 %1094 to float, !dbg !44
  %1096 = fadd float %1093, %1095, !dbg !96
  %1097 = fmul float %1096, %764, !dbg !97
  %1098 = extractvalue { i32, i32, i32, i32 } %263, 2, !dbg !46
  %1099 = extractvalue { i32, i32, i32, i32 } %285, 2, !dbg !50
  %1100 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !36
  %1101 = bitcast i32 %1100 to float, !dbg !36
  %1102 = extractvalue { i32, i32, i32, i32 } %235, 1, !dbg !38
  %1103 = bitcast i32 %1102 to float, !dbg !38
  %1104 = fsub float %1101, %1103, !dbg !93
  %1105 = fmul float %1104, %723, !dbg !94
  %1106 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !42
  %1107 = bitcast i32 %1106 to float, !dbg !42
  %1108 = fmul float %1105, %1107, !dbg !95
  %1109 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !44
  %1110 = bitcast i32 %1109 to float, !dbg !44
  %1111 = fadd float %1108, %1110, !dbg !96
  %1112 = fmul float %1111, %763, !dbg !97
  %1113 = extractvalue { i32, i32, i32, i32 } %263, 1, !dbg !46
  %1114 = extractvalue { i32, i32, i32, i32 } %285, 1, !dbg !50
  %1115 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !36
  %1116 = bitcast i32 %1115 to float, !dbg !36
  %1117 = extractvalue { i32, i32, i32, i32 } %235, 0, !dbg !38
  %1118 = bitcast i32 %1117 to float, !dbg !38
  %1119 = fsub float %1116, %1118, !dbg !93
  %1120 = fmul float %1119, %722, !dbg !94
  %1121 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !42
  %1122 = bitcast i32 %1121 to float, !dbg !42
  %1123 = fmul float %1120, %1122, !dbg !95
  %1124 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !44
  %1125 = bitcast i32 %1124 to float, !dbg !44
  %1126 = fadd float %1123, %1125, !dbg !96
  %1127 = fmul float %1126, %762, !dbg !97
  %1128 = extractvalue { i32, i32, i32, i32 } %263, 0, !dbg !46
  %1129 = extractvalue { i32, i32, i32, i32 } %285, 0, !dbg !50
  %1130 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !62
  %1131 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !62
  %1132 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !62
  %1133 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !62
  %1134 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !62
  %1135 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !62
  %1136 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !62
  %1137 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !62
  %1138 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !60
  %1139 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !60
  %1140 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !60
  %1141 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !60
  %1142 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !60
  %1143 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !60
  %1144 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !60
  %1145 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !60
  %1146 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !58
  %1147 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !58
  %1148 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !58
  %1149 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !58
  %1150 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !58
  %1151 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !58
  %1152 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !58
  %1153 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !58
  %1154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i158) #3, !dbg !98
  %1155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i163) #3, !dbg !98
  %1156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i168) #3, !dbg !98
  %1157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i173) #3, !dbg !98
  %1158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i178) #3, !dbg !98
  %1159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i183) #3, !dbg !98
  %1160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i188) #3, !dbg !98
  %1161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i193) #3, !dbg !98
  %1162 = insertelement <2 x i32> poison, i32 %1128, i64 0, !dbg !46
  %1163 = insertelement <2 x i32> %1162, i32 %1009, i64 1, !dbg !46
  %1164 = bitcast <2 x i32> %1163 to <2 x float>, !dbg !46
  %1165 = insertelement <2 x float> poison, float %1127, i64 0, !dbg !99
  %1166 = insertelement <2 x float> %1165, float %1008, i64 1, !dbg !99
  %1167 = fsub <2 x float> %1166, %1164, !dbg !99
  %1168 = insertelement <2 x i32> poison, i32 %1137, i64 0, !dbg !62
  %1169 = insertelement <2 x i32> %1168, i32 %1145, i64 1, !dbg !62
  %1170 = bitcast <2 x i32> %1169 to <2 x float>, !dbg !62
  %1171 = insertelement <2 x i32> poison, i32 %1129, i64 0, !dbg !50
  %1172 = insertelement <2 x i32> %1171, i32 %1153, i64 1, !dbg !50
  %1173 = bitcast <2 x i32> %1172 to <2 x float>, !dbg !50
  %1174 = insertelement <2 x float> poison, float %874, i64 0, !dbg !100
  %1175 = insertelement <2 x float> %1174, float %1154, i64 1, !dbg !100
  %1176 = fmul <2 x float> %1167, %1175, !dbg !100
  %1177 = fmul <2 x float> %1176, %1173, !dbg !101
  %1178 = fadd <2 x float> %1177, %1170, !dbg !102
  %1179 = insertelement <2 x i32> poison, i32 %1113, i64 0, !dbg !46
  %1180 = insertelement <2 x i32> %1179, i32 %1006, i64 1, !dbg !46
  %1181 = bitcast <2 x i32> %1180 to <2 x float>, !dbg !46
  %1182 = insertelement <2 x float> poison, float %1112, i64 0, !dbg !99
  %1183 = insertelement <2 x float> %1182, float %1005, i64 1, !dbg !99
  %1184 = fsub <2 x float> %1183, %1181, !dbg !99
  %1185 = insertelement <2 x i32> poison, i32 %1136, i64 0, !dbg !62
  %1186 = insertelement <2 x i32> %1185, i32 %1144, i64 1, !dbg !62
  %1187 = bitcast <2 x i32> %1186 to <2 x float>, !dbg !62
  %1188 = insertelement <2 x i32> poison, i32 %1114, i64 0, !dbg !50
  %1189 = insertelement <2 x i32> %1188, i32 %1152, i64 1, !dbg !50
  %1190 = bitcast <2 x i32> %1189 to <2 x float>, !dbg !50
  %1191 = insertelement <2 x float> poison, float %875, i64 0, !dbg !100
  %1192 = insertelement <2 x float> %1191, float %1155, i64 1, !dbg !100
  %1193 = fmul <2 x float> %1184, %1192, !dbg !100
  %1194 = fmul <2 x float> %1193, %1190, !dbg !101
  %1195 = fadd <2 x float> %1194, %1187, !dbg !102
  %1196 = insertelement <2 x i32> poison, i32 %1098, i64 0, !dbg !46
  %1197 = insertelement <2 x i32> %1196, i32 %1003, i64 1, !dbg !46
  %1198 = bitcast <2 x i32> %1197 to <2 x float>, !dbg !46
  %1199 = insertelement <2 x float> poison, float %1097, i64 0, !dbg !99
  %1200 = insertelement <2 x float> %1199, float %1002, i64 1, !dbg !99
  %1201 = fsub <2 x float> %1200, %1198, !dbg !99
  %1202 = insertelement <2 x i32> poison, i32 %1135, i64 0, !dbg !62
  %1203 = insertelement <2 x i32> %1202, i32 %1143, i64 1, !dbg !62
  %1204 = bitcast <2 x i32> %1203 to <2 x float>, !dbg !62
  %1205 = insertelement <2 x i32> poison, i32 %1099, i64 0, !dbg !50
  %1206 = insertelement <2 x i32> %1205, i32 %1151, i64 1, !dbg !50
  %1207 = bitcast <2 x i32> %1206 to <2 x float>, !dbg !50
  %1208 = insertelement <2 x float> poison, float %876, i64 0, !dbg !100
  %1209 = insertelement <2 x float> %1208, float %1156, i64 1, !dbg !100
  %1210 = fmul <2 x float> %1201, %1209, !dbg !100
  %1211 = fmul <2 x float> %1210, %1207, !dbg !101
  %1212 = fadd <2 x float> %1211, %1204, !dbg !102
  %1213 = insertelement <2 x i32> poison, i32 %1083, i64 0, !dbg !46
  %1214 = insertelement <2 x i32> %1213, i32 %1000, i64 1, !dbg !46
  %1215 = bitcast <2 x i32> %1214 to <2 x float>, !dbg !46
  %1216 = insertelement <2 x float> poison, float %1082, i64 0, !dbg !99
  %1217 = insertelement <2 x float> %1216, float %999, i64 1, !dbg !99
  %1218 = fsub <2 x float> %1217, %1215, !dbg !99
  %1219 = insertelement <2 x i32> poison, i32 %1134, i64 0, !dbg !62
  %1220 = insertelement <2 x i32> %1219, i32 %1142, i64 1, !dbg !62
  %1221 = bitcast <2 x i32> %1220 to <2 x float>, !dbg !62
  %1222 = insertelement <2 x i32> poison, i32 %1084, i64 0, !dbg !50
  %1223 = insertelement <2 x i32> %1222, i32 %1150, i64 1, !dbg !50
  %1224 = bitcast <2 x i32> %1223 to <2 x float>, !dbg !50
  %1225 = insertelement <2 x float> poison, float %877, i64 0, !dbg !100
  %1226 = insertelement <2 x float> %1225, float %1157, i64 1, !dbg !100
  %1227 = fmul <2 x float> %1218, %1226, !dbg !100
  %1228 = fmul <2 x float> %1227, %1224, !dbg !101
  %1229 = fadd <2 x float> %1228, %1221, !dbg !102
  %1230 = insertelement <2 x i32> poison, i32 %1068, i64 0, !dbg !46
  %1231 = insertelement <2 x i32> %1230, i32 %997, i64 1, !dbg !46
  %1232 = bitcast <2 x i32> %1231 to <2 x float>, !dbg !46
  %1233 = insertelement <2 x float> poison, float %1067, i64 0, !dbg !99
  %1234 = insertelement <2 x float> %1233, float %996, i64 1, !dbg !99
  %1235 = fsub <2 x float> %1234, %1232, !dbg !99
  %1236 = insertelement <2 x i32> poison, i32 %1133, i64 0, !dbg !62
  %1237 = insertelement <2 x i32> %1236, i32 %1141, i64 1, !dbg !62
  %1238 = bitcast <2 x i32> %1237 to <2 x float>, !dbg !62
  %1239 = insertelement <2 x i32> poison, i32 %1069, i64 0, !dbg !50
  %1240 = insertelement <2 x i32> %1239, i32 %1149, i64 1, !dbg !50
  %1241 = bitcast <2 x i32> %1240 to <2 x float>, !dbg !50
  %1242 = insertelement <2 x float> poison, float %878, i64 0, !dbg !100
  %1243 = insertelement <2 x float> %1242, float %1158, i64 1, !dbg !100
  %1244 = fmul <2 x float> %1235, %1243, !dbg !100
  %1245 = fmul <2 x float> %1244, %1241, !dbg !101
  %1246 = fadd <2 x float> %1245, %1238, !dbg !102
  %1247 = insertelement <2 x i32> poison, i32 %1053, i64 0, !dbg !46
  %1248 = insertelement <2 x i32> %1247, i32 %994, i64 1, !dbg !46
  %1249 = bitcast <2 x i32> %1248 to <2 x float>, !dbg !46
  %1250 = insertelement <2 x float> poison, float %1052, i64 0, !dbg !99
  %1251 = insertelement <2 x float> %1250, float %993, i64 1, !dbg !99
  %1252 = fsub <2 x float> %1251, %1249, !dbg !99
  %1253 = insertelement <2 x i32> poison, i32 %1132, i64 0, !dbg !62
  %1254 = insertelement <2 x i32> %1253, i32 %1140, i64 1, !dbg !62
  %1255 = bitcast <2 x i32> %1254 to <2 x float>, !dbg !62
  %1256 = insertelement <2 x i32> poison, i32 %1054, i64 0, !dbg !50
  %1257 = insertelement <2 x i32> %1256, i32 %1148, i64 1, !dbg !50
  %1258 = bitcast <2 x i32> %1257 to <2 x float>, !dbg !50
  %1259 = insertelement <2 x float> poison, float %879, i64 0, !dbg !100
  %1260 = insertelement <2 x float> %1259, float %1159, i64 1, !dbg !100
  %1261 = fmul <2 x float> %1252, %1260, !dbg !100
  %1262 = fmul <2 x float> %1261, %1258, !dbg !101
  %1263 = fadd <2 x float> %1262, %1255, !dbg !102
  %1264 = insertelement <2 x i32> poison, i32 %1038, i64 0, !dbg !46
  %1265 = insertelement <2 x i32> %1264, i32 %991, i64 1, !dbg !46
  %1266 = bitcast <2 x i32> %1265 to <2 x float>, !dbg !46
  %1267 = insertelement <2 x float> poison, float %1037, i64 0, !dbg !99
  %1268 = insertelement <2 x float> %1267, float %990, i64 1, !dbg !99
  %1269 = fsub <2 x float> %1268, %1266, !dbg !99
  %1270 = insertelement <2 x i32> poison, i32 %1131, i64 0, !dbg !62
  %1271 = insertelement <2 x i32> %1270, i32 %1139, i64 1, !dbg !62
  %1272 = bitcast <2 x i32> %1271 to <2 x float>, !dbg !62
  %1273 = insertelement <2 x i32> poison, i32 %1039, i64 0, !dbg !50
  %1274 = insertelement <2 x i32> %1273, i32 %1147, i64 1, !dbg !50
  %1275 = bitcast <2 x i32> %1274 to <2 x float>, !dbg !50
  %1276 = insertelement <2 x float> poison, float %880, i64 0, !dbg !100
  %1277 = insertelement <2 x float> %1276, float %1160, i64 1, !dbg !100
  %1278 = fmul <2 x float> %1269, %1277, !dbg !100
  %1279 = fmul <2 x float> %1278, %1275, !dbg !101
  %1280 = fadd <2 x float> %1279, %1272, !dbg !102
  %1281 = insertelement <2 x i32> poison, i32 %1023, i64 0, !dbg !46
  %1282 = insertelement <2 x i32> %1281, i32 %988, i64 1, !dbg !46
  %1283 = bitcast <2 x i32> %1282 to <2 x float>, !dbg !46
  %1284 = insertelement <2 x float> poison, float %1022, i64 0, !dbg !99
  %1285 = insertelement <2 x float> %1284, float %987, i64 1, !dbg !99
  %1286 = fsub <2 x float> %1285, %1283, !dbg !99
  %1287 = insertelement <2 x i32> poison, i32 %1130, i64 0, !dbg !62
  %1288 = insertelement <2 x i32> %1287, i32 %1138, i64 1, !dbg !62
  %1289 = bitcast <2 x i32> %1288 to <2 x float>, !dbg !62
  %1290 = insertelement <2 x i32> poison, i32 %1024, i64 0, !dbg !50
  %1291 = insertelement <2 x i32> %1290, i32 %1146, i64 1, !dbg !50
  %1292 = bitcast <2 x i32> %1291 to <2 x float>, !dbg !50
  %1293 = insertelement <2 x float> poison, float %881, i64 0, !dbg !100
  %1294 = insertelement <2 x float> %1293, float %1161, i64 1, !dbg !100
  %1295 = fmul <2 x float> %1286, %1294, !dbg !100
  %1296 = fmul <2 x float> %1295, %1292, !dbg !101
  %1297 = fadd <2 x float> %1296, %1289, !dbg !102
  %shift = shufflevector <2 x float> %1178, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1298 = fadd <2 x float> %1178, %shift, !dbg !103
  %1299 = extractelement <2 x float> %1298, i64 0, !dbg !103
  %shift196 = shufflevector <2 x float> %1195, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1300 = fadd <2 x float> %1195, %shift196, !dbg !103
  %1301 = extractelement <2 x float> %1300, i64 0, !dbg !103
  %shift197 = shufflevector <2 x float> %1212, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1302 = fadd <2 x float> %1212, %shift197, !dbg !103
  %1303 = extractelement <2 x float> %1302, i64 0, !dbg !103
  %shift198 = shufflevector <2 x float> %1229, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1304 = fadd <2 x float> %1229, %shift198, !dbg !103
  %1305 = extractelement <2 x float> %1304, i64 0, !dbg !103
  %shift199 = shufflevector <2 x float> %1246, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1306 = fadd <2 x float> %1246, %shift199, !dbg !103
  %1307 = extractelement <2 x float> %1306, i64 0, !dbg !103
  %shift200 = shufflevector <2 x float> %1263, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1308 = fadd <2 x float> %1263, %shift200, !dbg !103
  %1309 = extractelement <2 x float> %1308, i64 0, !dbg !103
  %shift201 = shufflevector <2 x float> %1280, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1310 = fadd <2 x float> %1280, %shift201, !dbg !103
  %1311 = extractelement <2 x float> %1310, i64 0, !dbg !103
  %shift202 = shufflevector <2 x float> %1297, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !103
  %1312 = fadd <2 x float> %1297, %shift202, !dbg !103
  %1313 = extractelement <2 x float> %1312, i64 0, !dbg !103
  %1314 = fcmp olt float %1299, 0.000000e+00, !dbg !104
  %1315 = fcmp olt float %1301, 0.000000e+00, !dbg !104
  %1316 = fcmp olt float %1303, 0.000000e+00, !dbg !104
  %1317 = fcmp olt float %1305, 0.000000e+00, !dbg !104
  %1318 = fcmp olt float %1307, 0.000000e+00, !dbg !104
  %1319 = fcmp olt float %1309, 0.000000e+00, !dbg !104
  %1320 = fcmp olt float %1311, 0.000000e+00, !dbg !104
  %1321 = fcmp olt float %1313, 0.000000e+00, !dbg !104
  %1322 = select i1 %1314, float 0.000000e+00, float %1299, !dbg !108
  %1323 = select i1 %1315, float 0.000000e+00, float %1301, !dbg !108
  %1324 = select i1 %1316, float 0.000000e+00, float %1303, !dbg !108
  %1325 = select i1 %1317, float 0.000000e+00, float %1305, !dbg !108
  %1326 = select i1 %1318, float 0.000000e+00, float %1307, !dbg !108
  %1327 = select i1 %1319, float 0.000000e+00, float %1309, !dbg !108
  %1328 = select i1 %1320, float 0.000000e+00, float %1311, !dbg !108
  %1329 = select i1 %1321, float 0.000000e+00, float %1313, !dbg !108
  %1330 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !109
  %1331 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !109
  %1332 = bitcast float %1322 to i32, !dbg !110
  %1333 = bitcast float %1323 to i32, !dbg !110
  %1334 = bitcast float %1324 to i32, !dbg !110
  %1335 = bitcast float %1325 to i32, !dbg !110
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1332, i32 %1333, i32 %1334, i32 %1335, ptr addrspace(1) %1330, i1 true) #3, !dbg !110
  %1336 = bitcast float %1326 to i32, !dbg !110
  %1337 = bitcast float %1327 to i32, !dbg !110
  %1338 = bitcast float %1328 to i32, !dbg !110
  %1339 = bitcast float %1329 to i32, !dbg !110
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1336, i32 %1337, i32 %1338, i32 %1339, ptr addrspace(1) %1331, i1 true) #3, !dbg !110
  ret void, !dbg !111
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2y63v7bht42qx7dys6huuul7feb3a72e4bhggs56amq6ypbju2q.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_sigmoid_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 38, column: 32, scope: !7)
!40 = !DILocation(line: 38, column: 37, scope: !7)
!41 = !DILocation(line: 39, column: 32, scope: !7)
!42 = !DILocation(line: 39, column: 37, scope: !7)
!43 = !DILocation(line: 40, column: 32, scope: !7)
!44 = !DILocation(line: 40, column: 37, scope: !7)
!45 = !DILocation(line: 41, column: 32, scope: !7)
!46 = !DILocation(line: 41, column: 37, scope: !7)
!47 = !DILocation(line: 42, column: 32, scope: !7)
!48 = !DILocation(line: 42, column: 37, scope: !7)
!49 = !DILocation(line: 43, column: 32, scope: !7)
!50 = !DILocation(line: 43, column: 37, scope: !7)
!51 = !DILocation(line: 44, column: 32, scope: !7)
!52 = !DILocation(line: 44, column: 37, scope: !7)
!53 = !DILocation(line: 45, column: 32, scope: !7)
!54 = !DILocation(line: 45, column: 37, scope: !7)
!55 = !DILocation(line: 46, column: 32, scope: !7)
!56 = !DILocation(line: 46, column: 37, scope: !7)
!57 = !DILocation(line: 47, column: 32, scope: !7)
!58 = !DILocation(line: 47, column: 37, scope: !7)
!59 = !DILocation(line: 48, column: 32, scope: !7)
!60 = !DILocation(line: 48, column: 37, scope: !7)
!61 = !DILocation(line: 49, column: 32, scope: !7)
!62 = !DILocation(line: 49, column: 37, scope: !7)
!63 = !DILocation(line: 50, column: 18, scope: !7)
!64 = !DILocation(line: 52, column: 18, scope: !7)
!65 = !DILocation(line: 53, column: 26, scope: !7)
!66 = !DILocation(line: 55, column: 18, scope: !7)
!67 = !DILocation(line: 58, column: 19, scope: !7)
!68 = !DILocation(line: 59, column: 20, scope: !7)
!69 = !DILocation(line: 60, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 27, scope: !7)
!73 = !DILocation(line: 64, column: 19, scope: !7)
!74 = !DILocation(line: 66, column: 20, scope: !7)
!75 = !DILocation(line: 67, column: 20, scope: !7)
!76 = !DILocation(line: 68, column: 20, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 27, scope: !7)
!80 = !DILocation(line: 73, column: 19, scope: !7)
!81 = !DILocation(line: 47, column: 30, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!84 = !DILocation(line: 78, column: 23, scope: !7)
!85 = !DILocation(line: 47, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 47, column: 20, scope: !82, inlinedAt: !84)
!87 = !DILocation(line: 47, column: 16, scope: !82, inlinedAt: !84)
!88 = !DILocation(line: 81, column: 20, scope: !7)
!89 = !DILocation(line: 82, column: 27, scope: !7)
!90 = !DILocation(line: 83, column: 19, scope: !7)
!91 = !DILocation(line: 88, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 27, scope: !7)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 75, column: 20, scope: !7)
!95 = !DILocation(line: 76, column: 20, scope: !7)
!96 = !DILocation(line: 77, column: 20, scope: !7)
!97 = !DILocation(line: 79, column: 20, scope: !7)
!98 = !DILocation(line: 90, column: 19, scope: !7)
!99 = !DILocation(line: 80, column: 20, scope: !7)
!100 = !DILocation(line: 85, column: 20, scope: !7)
!101 = !DILocation(line: 86, column: 20, scope: !7)
!102 = !DILocation(line: 95, column: 20, scope: !7)
!103 = !DILocation(line: 96, column: 20, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !105, inlinedAt: !107)
!105 = distinct !DILexicalBlockFile(scope: !7, file: !106, discriminator: 0)
!106 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!107 = !DILocation(line: 98, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !105, inlinedAt: !107)
!109 = !DILocation(line: 99, column: 28, scope: !7)
!110 = !DILocation(line: 99, column: 40, scope: !7)
!111 = !DILocation(line: 99, column: 4, scope: !7)
