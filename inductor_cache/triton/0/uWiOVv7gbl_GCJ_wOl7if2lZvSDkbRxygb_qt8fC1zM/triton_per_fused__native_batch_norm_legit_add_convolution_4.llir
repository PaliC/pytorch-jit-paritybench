; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = and i32 %11, 7, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = shl i32 %11, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = srem i32 %15, 4, !dbg !16
  %20 = shl i32 %15, 4, !dbg !17
  %21 = or disjoint i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = bitcast i32 %25 to float, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = sext i32 %19 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !23
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !24
  %36 = fadd float %27, %33, !dbg !25
  %37 = fadd float %28, %33, !dbg !25
  %38 = fadd float %36, %37, !dbg !26
  %39 = select i1 %16, float %38, float 0.000000e+00, !dbg !26
  %40 = bitcast float %39 to i32, !dbg !31
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !31
  %42 = bitcast i32 %41 to float, !dbg !31
  %43 = fadd float %39, %42, !dbg !26
  %44 = bitcast float %43 to i32, !dbg !31
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = fadd float %43, %46, !dbg !26
  %48 = bitcast float %47 to i32, !dbg !31
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = fadd float %47, %50, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %53 = bitcast float %51 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %55 = load float, ptr addrspace(3) %54, align 4, !dbg !32
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 1.600000e+01) #5, !dbg !32
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.600000e+01) #5, !dbg !32
  %58 = fsub float %36, %57, !dbg !33
  %59 = fsub float %37, %57, !dbg !33
  %60 = fmul float %58, %58, !dbg !34
  %61 = fmul float %59, %59, !dbg !34
  %62 = fadd float %60, %61, !dbg !35
  %63 = select i1 %16, float %62, float 0.000000e+00, !dbg !35
  %64 = bitcast float %63 to i32, !dbg !37
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = fadd float %63, %66, !dbg !35
  %68 = bitcast float %67 to i32, !dbg !37
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !37
  %70 = bitcast i32 %69 to float, !dbg !37
  %71 = fadd float %67, %70, !dbg !35
  %72 = bitcast float %71 to i32, !dbg !37
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !37
  %74 = bitcast i32 %73 to float, !dbg !37
  %75 = fadd float %71, %74, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %76 = bitcast float %75 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %76, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %77 = load float, ptr addrspace(3) %54, align 4, !dbg !38
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 1.600000e+01) #5, !dbg !39
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !39
  %80 = fadd float %78, 0x3EE4F8B580000000, !dbg !40
  %81 = fadd float %79, 0x3EE4F8B580000000, !dbg !40
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %82, 0, !dbg !38
  br i1 %.not.i, label %85, label %83, !dbg !38

83:                                               ; preds = %8
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

85:                                               ; preds = %8
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %83, %85
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], !dbg !38
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i4 = icmp eq i32 %88, 0, !dbg !38
  br i1 %.not.i4, label %91, label %89, !dbg !38

89:                                               ; preds = %__nv_rsqrtf.exit
  %90 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

91:                                               ; preds = %__nv_rsqrtf.exit
  %92 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !38
  br label %__nv_rsqrtf.exit6, !dbg !38

__nv_rsqrtf.exit6:                                ; preds = %89, %91
  %.0.i5 = phi float [ %90, %89 ], [ %92, %91 ], !dbg !38
  %93 = extractvalue { i32, i32 } %35, 1, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = extractvalue { i32, i32 } %35, 0, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = or disjoint i32 %10, %14, !dbg !13
  %98 = icmp slt i32 %97, 16, !dbg !14
  %99 = fmul float %58, %.0.i5, !dbg !41
  %100 = fmul float %59, %.0.i5, !dbg !41
  %101 = fadd float %99, %96, !dbg !42
  %102 = fadd float %100, %94, !dbg !42
  %103 = bitcast float %36 to i32, !dbg !43
  %104 = bitcast float %37 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %103, i32 %104, ptr addrspace(1) %23, i1 %16) #5, !dbg !43
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !44
  %106 = bitcast float %101 to i32, !dbg !45
  %107 = bitcast float %102 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %105, i1 %16) #5, !dbg !45
  %108 = sext i32 %97 to i64, !dbg !46
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !46
  %110 = and i32 %11, 56, !dbg !47
  %111 = icmp eq i32 %110, 0, !dbg !47
  %112 = bitcast float %.0.i to i32, !dbg !47
  %113 = and i1 %111, %98, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %109, i1 %113) #5, !dbg !47
  %114 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !48
  %115 = bitcast float %56 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %114, i1 %113) #5, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdcc6wneg5cyn76vjfjchnvahhdpa3ifhius3o5veb5q6w6dk2ke.py", directory: "inductor_cache/dc")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_4", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !30)
!27 = distinct !DILexicalBlockFile(scope: !29, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!30 = !DILocation(line: 40, column: 24, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !30)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !29, inlinedAt: !36)
!38 = !DILocation(line: 54, column: 28, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 47, scope: !7)
!44 = !DILocation(line: 58, column: 25, scope: !7)
!45 = !DILocation(line: 58, column: 45, scope: !7)
!46 = !DILocation(line: 59, column: 25, scope: !7)
!47 = !DILocation(line: 59, column: 37, scope: !7)
!48 = !DILocation(line: 60, column: 25, scope: !7)
!49 = !DILocation(line: 60, column: 37, scope: !7)
!50 = !DILocation(line: 60, column: 4, scope: !7)
