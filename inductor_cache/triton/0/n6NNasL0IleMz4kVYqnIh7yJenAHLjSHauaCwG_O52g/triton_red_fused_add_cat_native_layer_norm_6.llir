; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_cat_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 64, !dbg !12
  %17 = lshr i32 %15, 1, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = and i32 %15, 63, !dbg !12
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = or disjoint i32 %14, %19, !dbg !13
  %22 = icmp slt i32 %20, 68, !dbg !14
  %23 = icmp slt i32 %21, 68, !dbg !14
  %24 = shl i32 %15, 2, !dbg !15
  %25 = and i32 %24, 4, !dbg !15
  %.lobit = lshr exact i32 %16, 6, !dbg !15
  %26 = srem i32 %20, 17, !dbg !16
  %.frozen = freeze i32 %21, !dbg !17
  %27 = sdiv i32 %.frozen, 17, !dbg !17
  %28 = mul i32 %27, 17, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = mul nsw i32 %26, 768, !dbg !18
  %30 = icmp slt i32 %26, 1, !dbg !19
  %31 = icmp sgt i32 %.decomposed, 0, !dbg !20
  %32 = icmp sgt i32 %26, 0, !dbg !20
  %33 = mul i32 %27, 12288, !dbg !21
  %34 = trunc nsw i32 %.decomposed to i8, !dbg !22
  %.lhs.trunc = add nsw i8 %34, -1, !dbg !22
  %35 = srem i8 %.lhs.trunc, 16, !dbg !22
  %.sext = sext i8 %35 to i32, !dbg !22
  %36 = mul i32 %20, 768, !dbg !23
  %37 = and i1 %22, %30
  %38 = add i32 %33, %.sext
  %39 = and i1 %23, %31
  %40 = and i1 %22, %32
  %41 = shl i32 %15, 3
  %42 = and i32 %41, 504
  %43 = or disjoint i32 %42, %.lobit
  %44 = and i32 %24, 252
  %45 = shl nuw nsw i32 %16, 2
  %46 = or disjoint i32 %44, %45
  %47 = lshr exact i32 %42, 1
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %43
  %50 = or disjoint i32 %43, 2
  %51 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %50
  %52 = or disjoint i32 %43, 4
  %53 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %52
  %54 = or disjoint i32 %43, 6
  %55 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %54
  %56 = lshr exact i32 %46, 1
  %57 = and i32 %56, 252
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %46
  %60 = zext nneg i32 %25 to i64, !dbg !24
  %61 = sext i32 %29 to i64, !dbg !24
  %invariant.gep = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !24
  %62 = insertelement <4 x i1> poison, i1 %30, i64 0, !dbg !25
  %63 = shufflevector <4 x i1> %62, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !25
  %64 = insertelement <4 x i1> poison, i1 %22, i64 0, !dbg !26
  %65 = shufflevector <4 x i1> %64, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !26
  br label %66, !dbg !24

66:                                               ; preds = %12, %._crit_edge
  %indvars.iv = phi i64 [ 0, %12 ], [ %indvars.iv.next, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %12 ], [ %197, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %12 ], [ %198, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %12 ], [ %199, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %12 ], [ %200, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %12 ], [ %193, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %12 ], [ %194, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %12 ], [ %195, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %12 ], [ %196, %._crit_edge ]
  %75 = phi <4 x float> [ zeroinitializer, %12 ], [ %192, %._crit_edge ]
  %76 = or disjoint i64 %indvars.iv, %60, !dbg !27
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %76, !dbg !28
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37, i32 0, i1 %37) #5, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !31
  %88 = trunc i64 %indvars.iv to i32, !dbg !32
  %.tr = or disjoint i32 %.lobit, %88, !dbg !32
  %89 = shl i32 %.tr, 4, !dbg !32
  %90 = add i32 %38, %89, !dbg !32
  %91 = trunc i64 %indvars.iv to i32, !dbg !32
  %92 = or disjoint i32 %.lobit, %91, !dbg !32
  %.tr64 = shl i32 %92, 4, !dbg !32
  %93 = or disjoint i32 %.tr64, 32, !dbg !32
  %94 = add i32 %38, %93, !dbg !32
  %95 = trunc i64 %indvars.iv to i32, !dbg !32
  %96 = or disjoint i32 %.lobit, %95, !dbg !32
  %.tr65 = shl i32 %96, 4, !dbg !32
  %97 = or disjoint i32 %.tr65, 64, !dbg !32
  %98 = add i32 %38, %97, !dbg !32
  %99 = trunc i64 %indvars.iv to i32, !dbg !32
  %100 = or disjoint i32 %.lobit, %99, !dbg !32
  %.tr66 = shl i32 %100, 4, !dbg !32
  %101 = or disjoint i32 %.tr66, 96, !dbg !32
  %102 = add i32 %38, %101, !dbg !32
  %103 = sext i32 %90 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !33
  %105 = sext i32 %94 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !33
  %107 = sext i32 %98 to i64, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !33
  %109 = sext i32 %102 to i64, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !33
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %39, i32 0, i1 %39) #5, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %39, i32 0, i1 %39) #5, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %39, i32 0, i1 %39) #5, !dbg !34
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %39, i32 0, i1 %39) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %115 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %115, i1 true) #5, !dbg !34
  %116 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %116, i1 true) #5, !dbg !34
  %117 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %117, i1 true) #5, !dbg !34
  %118 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %118, i1 true) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !35
  %120 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !29
  %121 = insertelement <4 x i32> %120, i32 %79, i64 1, !dbg !29
  %122 = insertelement <4 x i32> %121, i32 %80, i64 2, !dbg !29
  %123 = insertelement <4 x i32> %122, i32 %81, i64 3, !dbg !29
  %124 = bitcast <4 x i32> %123 to <4 x float>, !dbg !29
  %125 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !31
  %126 = insertelement <4 x i32> %125, i32 %85, i64 1, !dbg !31
  %127 = insertelement <4 x i32> %126, i32 %86, i64 2, !dbg !31
  %128 = insertelement <4 x i32> %127, i32 %87, i64 3, !dbg !31
  %129 = bitcast <4 x i32> %128 to <4 x float>, !dbg !31
  %130 = load <4 x float>, ptr addrspace(3) %59, align 16, !dbg !34
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #5, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !36
  %136 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !36
  %137 = insertelement <4 x i32> %136, i32 %133, i64 1, !dbg !36
  %138 = insertelement <4 x i32> %137, i32 %134, i64 2, !dbg !36
  %139 = insertelement <4 x i32> %138, i32 %135, i64 3, !dbg !36
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !36
  %141 = fadd <4 x float> %130, %140, !dbg !37
  %142 = select <4 x i1> %63, <4 x float> %129, <4 x float> %141, !dbg !25
  %143 = fadd <4 x float> %142, %124, !dbg !38
  %144 = icmp eq i64 %indvars.iv, 0, !dbg !39
  br i1 %144, label %._crit_edge, label %145, !dbg !40

145:                                              ; preds = %66
  %146 = fsub <4 x float> %143, %75, !dbg !44
  %147 = extractelement <4 x float> %146, i64 0, !dbg !44
  %148 = fsub <4 x float> %143, %75, !dbg !44
  %149 = extractelement <4 x float> %148, i64 1, !dbg !44
  %150 = fsub <4 x float> %143, %75, !dbg !44
  %151 = extractelement <4 x float> %150, i64 2, !dbg !44
  %152 = fsub <4 x float> %143, %75, !dbg !44
  %153 = extractelement <4 x float> %152, i64 3, !dbg !44
  %154 = fadd float %67, 1.000000e+00, !dbg !45
  %155 = fadd float %68, 1.000000e+00, !dbg !45
  %156 = fadd float %69, 1.000000e+00, !dbg !45
  %157 = fadd float %70, 1.000000e+00, !dbg !45
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %154) #5, !dbg !46
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float %155) #5, !dbg !46
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %156) #5, !dbg !46
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %157) #5, !dbg !46
  %162 = insertelement <4 x float> poison, float %158, i64 0, !dbg !47
  %163 = insertelement <4 x float> %162, float %159, i64 1, !dbg !47
  %164 = insertelement <4 x float> %163, float %160, i64 2, !dbg !47
  %165 = insertelement <4 x float> %164, float %161, i64 3, !dbg !47
  %166 = fadd <4 x float> %75, %165, !dbg !47
  %167 = fsub <4 x float> %143, %166, !dbg !48
  %168 = fsub <4 x float> %143, %166, !dbg !48
  %169 = fsub <4 x float> %143, %166, !dbg !48
  %170 = fsub <4 x float> %143, %166, !dbg !48
  %171 = fmul <4 x float> %146, %167, !dbg !49
  %172 = extractelement <4 x float> %171, i64 0, !dbg !49
  %173 = fmul <4 x float> %148, %168, !dbg !49
  %174 = extractelement <4 x float> %173, i64 1, !dbg !49
  %175 = fmul <4 x float> %150, %169, !dbg !49
  %176 = extractelement <4 x float> %175, i64 2, !dbg !49
  %177 = fmul <4 x float> %152, %170, !dbg !49
  %178 = extractelement <4 x float> %177, i64 3, !dbg !49
  %179 = fadd float %71, %172, !dbg !50
  %180 = fadd float %72, %174, !dbg !50
  %181 = fadd float %73, %176, !dbg !50
  %182 = fadd float %74, %178, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %66, %145
  %183 = phi float [ %179, %145 ], [ 0.000000e+00, %66 ], !dbg !43
  %184 = phi float [ %180, %145 ], [ 0.000000e+00, %66 ], !dbg !43
  %185 = phi float [ %181, %145 ], [ 0.000000e+00, %66 ], !dbg !43
  %186 = phi float [ %182, %145 ], [ 0.000000e+00, %66 ], !dbg !43
  %187 = phi float [ %154, %145 ], [ 1.000000e+00, %66 ], !dbg !43
  %188 = phi float [ %155, %145 ], [ 1.000000e+00, %66 ], !dbg !43
  %189 = phi float [ %156, %145 ], [ 1.000000e+00, %66 ], !dbg !43
  %190 = phi float [ %157, %145 ], [ 1.000000e+00, %66 ], !dbg !43
  %191 = phi <4 x float> [ %166, %145 ], [ %143, %66 ]
  %192 = select <4 x i1> %65, <4 x float> %191, <4 x float> %75, !dbg !26
  %193 = select i1 %22, float %183, float %71, !dbg !51
  %194 = select i1 %22, float %184, float %72, !dbg !51
  %195 = select i1 %22, float %185, float %73, !dbg !51
  %196 = select i1 %22, float %186, float %74, !dbg !51
  %197 = select i1 %22, float %187, float %67, !dbg !52
  %198 = select i1 %22, float %188, float %68, !dbg !52
  %199 = select i1 %22, float %189, float %69, !dbg !52
  %200 = select i1 %22, float %190, float %70, !dbg !52
  %201 = trunc nuw nsw i64 %76 to i32, !dbg !53
  %202 = add i32 %36, %201, !dbg !53
  %203 = sext i32 %202 to i64, !dbg !54
  %204 = getelementptr float, ptr addrspace(1) %7, i64 %203, !dbg !54
  %bc = bitcast <4 x float> %142 to <4 x i32>, !dbg !55
  %205 = extractelement <4 x i32> %bc, i64 0, !dbg !55
  %bc91 = bitcast <4 x float> %142 to <4 x i32>, !dbg !55
  %206 = extractelement <4 x i32> %bc91, i64 1, !dbg !55
  %bc92 = bitcast <4 x float> %142 to <4 x i32>, !dbg !55
  %207 = extractelement <4 x i32> %bc92, i64 2, !dbg !55
  %bc93 = bitcast <4 x float> %142 to <4 x i32>, !dbg !55
  %208 = extractelement <4 x i32> %bc93, i64 3, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %204, i1 %22) #5, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !24
  %209 = icmp samesign ult i64 %indvars.iv, 760, !dbg !24
  br i1 %209, label %66, label %210, !dbg !24

210:                                              ; preds = %._crit_edge
  %211 = extractelement <4 x float> %192, i64 0, !dbg !56
  %212 = extractelement <4 x float> %192, i64 1, !dbg !56
  %213 = fsub float %212, %211, !dbg !56
  %214 = fadd float %197, %198, !dbg !59
  %215 = fcmp oeq float %214, 0.000000e+00, !dbg !60
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %214) #5, !dbg !61
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !62
  %218 = fmul float %213, %217, !dbg !63
  %219 = fadd float %211, %218, !dbg !64
  %220 = fadd float %193, %194, !dbg !65
  %221 = fmul float %213, %213, !dbg !66
  %222 = fmul float %221, %197, !dbg !67
  %223 = fmul float %222, %217, !dbg !68
  %224 = fadd float %220, %223, !dbg !69
  %225 = extractelement <4 x float> %192, i64 2, !dbg !56
  %226 = fsub float %225, %219, !dbg !56
  %227 = fadd float %199, %214, !dbg !59
  %228 = fcmp oeq float %227, 0.000000e+00, !dbg !60
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %227) #5, !dbg !61
  %230 = select i1 %228, float 0.000000e+00, float %229, !dbg !62
  %231 = fmul float %230, %226, !dbg !63
  %232 = fadd float %219, %231, !dbg !64
  %233 = fadd float %195, %224, !dbg !65
  %234 = fmul float %226, %226, !dbg !66
  %235 = fmul float %214, %234, !dbg !67
  %236 = fmul float %230, %235, !dbg !68
  %237 = fadd float %233, %236, !dbg !69
  %238 = extractelement <4 x float> %192, i64 3, !dbg !56
  %239 = fsub float %238, %232, !dbg !56
  %240 = fadd float %200, %227, !dbg !59
  %241 = fcmp oeq float %240, 0.000000e+00, !dbg !60
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %240) #5, !dbg !61
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !62
  %244 = fmul float %243, %239, !dbg !63
  %245 = fadd float %232, %244, !dbg !64
  %246 = fadd float %196, %237, !dbg !65
  %247 = fmul float %239, %239, !dbg !66
  %248 = fmul float %227, %247, !dbg !67
  %249 = fmul float %243, %248, !dbg !68
  %250 = fadd float %246, %249, !dbg !69
  %251 = bitcast float %245 to i32, !dbg !70
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !70
  %253 = bitcast i32 %252 to float, !dbg !70
  %254 = bitcast float %250 to i32, !dbg !70
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !70
  %256 = bitcast i32 %255 to float, !dbg !70
  %257 = bitcast float %240 to i32, !dbg !70
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !70
  %259 = bitcast i32 %258 to float, !dbg !70
  %260 = fsub float %253, %245, !dbg !56
  %261 = fadd float %240, %259, !dbg !59
  %262 = fcmp oeq float %261, 0.000000e+00, !dbg !60
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %261) #5, !dbg !61
  %264 = select i1 %262, float 0.000000e+00, float %263, !dbg !62
  %265 = fmul float %264, %260, !dbg !63
  %266 = fadd float %245, %265, !dbg !64
  %267 = fadd float %250, %256, !dbg !65
  %268 = fmul float %260, %260, !dbg !66
  %269 = fmul float %240, %268, !dbg !67
  %270 = fmul float %264, %269, !dbg !68
  %271 = fadd float %267, %270, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !71
  %273 = bitcast float %266 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #5, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !71
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %276 = bitcast float %271 to <1 x i32>, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %276, i1 true) #5, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %277 = load float, ptr addrspace(3) %274, align 4, !dbg !72
  %278 = sext i32 %21 to i64, !dbg !73
  %279 = getelementptr float, ptr addrspace(1) %8, i64 %278, !dbg !73
  %280 = icmp eq i32 %16, 0, !dbg !74
  %281 = and i1 %280, %23, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %279, i1 %281) #5, !dbg !74
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %277, float 7.680000e+02) #5, !dbg !75
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float 7.680000e+02) #5, !dbg !75
  %284 = fadd float %282, 0x3EE4F8B580000000, !dbg !76
  %285 = fadd float %283, 0x3EE4F8B580000000, !dbg !76
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i = icmp eq i32 %286, 0, !dbg !72
  br i1 %.not.i, label %289, label %287, !dbg !72

287:                                              ; preds = %210
  %288 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %284), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

289:                                              ; preds = %210
  %290 = tail call float @llvm.nvvm.rsqrt.approx.f(float %284), !dbg !72
  br label %__nv_rsqrtf.exit, !dbg !72

__nv_rsqrtf.exit:                                 ; preds = %287, %289
  %.0.i = phi float [ %288, %287 ], [ %290, %289 ], !dbg !72
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !72
  %.not.i24 = icmp eq i32 %294, 0, !dbg !72
  br i1 %.not.i24, label %297, label %295, !dbg !72

295:                                              ; preds = %__nv_rsqrtf.exit
  %296 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %285), !dbg !72
  br label %__nv_rsqrtf.exit26, !dbg !72

297:                                              ; preds = %__nv_rsqrtf.exit
  %298 = tail call float @llvm.nvvm.rsqrt.approx.f(float %285), !dbg !72
  br label %__nv_rsqrtf.exit26, !dbg !72

__nv_rsqrtf.exit26:                               ; preds = %295, %297
  %.0.i25 = phi float [ %296, %295 ], [ %298, %297 ], !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %278, !dbg !78
  %300 = bitcast float %.0.i to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %300, ptr addrspace(1) %299, i1 %281) #5, !dbg !79
  %invariant.gep78 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !80
  br label %301, !dbg !80

301:                                              ; preds = %__nv_rsqrtf.exit26, %301
  %indvars.iv40 = phi i64 [ 0, %__nv_rsqrtf.exit26 ], [ %indvars.iv.next41, %301 ]
  %302 = or disjoint i64 %indvars.iv40, %60, !dbg !81
  %303 = trunc nuw nsw i64 %302 to i32, !dbg !82
  %304 = add i32 %36, %303, !dbg !82
  %305 = sext i32 %304 to i64, !dbg !83
  %306 = getelementptr float, ptr addrspace(1) %7, i64 %305, !dbg !83
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %306, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !84
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !84
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !84
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !84
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !84
  %312 = bitcast i32 %308 to float, !dbg !84
  %313 = bitcast i32 %309 to float, !dbg !84
  %314 = bitcast i32 %310 to float, !dbg !84
  %315 = bitcast i32 %311 to float, !dbg !84
  %gep79 = getelementptr float, ptr addrspace(1) %invariant.gep78, i64 %302, !dbg !85
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep79, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !86
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !86
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !86
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !86
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !86
  %321 = bitcast i32 %317 to float, !dbg !86
  %322 = bitcast i32 %318 to float, !dbg !86
  %323 = bitcast i32 %319 to float, !dbg !86
  %324 = bitcast i32 %320 to float, !dbg !86
  %325 = getelementptr float, ptr addrspace(1) %5, i64 %302, !dbg !87
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %325, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !88
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !88
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !88
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !88
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !88
  %331 = bitcast i32 %327 to float, !dbg !88
  %332 = bitcast i32 %328 to float, !dbg !88
  %333 = bitcast i32 %329 to float, !dbg !88
  %334 = bitcast i32 %330 to float, !dbg !88
  %335 = getelementptr float, ptr addrspace(1) %6, i64 %302, !dbg !89
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %335, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !90
  %337 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !90
  %338 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !90
  %339 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !90
  %340 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !90
  %341 = bitcast i32 %337 to float, !dbg !90
  %342 = bitcast i32 %338 to float, !dbg !90
  %343 = bitcast i32 %339 to float, !dbg !90
  %344 = bitcast i32 %340 to float, !dbg !90
  %345 = fadd float %312, %321, !dbg !91
  %346 = fadd float %313, %322, !dbg !91
  %347 = fadd float %314, %323, !dbg !91
  %348 = fadd float %315, %324, !dbg !91
  %349 = fsub float %345, %266, !dbg !92
  %350 = fsub float %346, %266, !dbg !92
  %351 = fsub float %347, %266, !dbg !92
  %352 = fsub float %348, %266, !dbg !92
  %353 = fmul float %.0.i25, %349, !dbg !93
  %354 = fmul float %.0.i25, %350, !dbg !93
  %355 = fmul float %.0.i25, %351, !dbg !93
  %356 = fmul float %.0.i25, %352, !dbg !93
  %357 = fmul float %353, %331, !dbg !94
  %358 = fmul float %354, %332, !dbg !94
  %359 = fmul float %355, %333, !dbg !94
  %360 = fmul float %356, %334, !dbg !94
  %361 = fadd float %357, %341, !dbg !95
  %362 = fadd float %358, %342, !dbg !95
  %363 = fadd float %359, %343, !dbg !95
  %364 = fadd float %360, %344, !dbg !95
  %365 = getelementptr float, ptr addrspace(1) %9, i64 %305, !dbg !96
  %366 = bitcast float %361 to i32, !dbg !97
  %367 = bitcast float %362 to i32, !dbg !97
  %368 = bitcast float %363 to i32, !dbg !97
  %369 = bitcast float %364 to i32, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %367, i32 %368, i32 %369, ptr addrspace(1) %365, i1 %22) #5, !dbg !97
  %indvars.iv.next41 = add nuw nsw i64 %indvars.iv40, 8, !dbg !80
  %370 = icmp samesign ult i64 %indvars.iv40, 760, !dbg !80
  br i1 %370, label %301, label %371, !dbg !80

371:                                              ; preds = %301
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu4lf52tjilpns5v26o6pj24w37gxw2m7zkwrvpjaim2yrhgjew6.py", directory: "inductor_cache/u4")
!4 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_cat_native_layer_norm_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_cat_native_layer_norm_6", linkageName: "triton_red_fused_add_cat_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 36, column: 44, scope: !7)
!19 = !DILocation(line: 41, column: 22, scope: !7)
!20 = !DILocation(line: 43, column: 23, scope: !7)
!21 = !DILocation(line: 46, column: 48, scope: !7)
!22 = !DILocation(line: 46, column: 69, scope: !7)
!23 = !DILocation(line: 60, column: 38, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 51, column: 37, scope: !7)
!26 = !DILocation(line: 57, column: 62, scope: !7)
!27 = !DILocation(line: 33, column: 27, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 49, scope: !7)
!30 = !DILocation(line: 42, column: 34, scope: !7)
!31 = !DILocation(line: 42, column: 74, scope: !7)
!32 = !DILocation(line: 46, column: 55, scope: !7)
!33 = !DILocation(line: 46, column: 34, scope: !7)
!34 = !DILocation(line: 46, column: 76, scope: !7)
!35 = !DILocation(line: 47, column: 35, scope: !7)
!36 = !DILocation(line: 47, column: 75, scope: !7)
!37 = !DILocation(line: 48, column: 23, scope: !7)
!38 = !DILocation(line: 52, column: 24, scope: !7)
!39 = !DILocation(line: 55, column: 66, scope: !7)
!40 = !DILocation(line: 178, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 55, column: 55, scope: !7)
!44 = !DILocation(line: 183, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 184, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 185, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 185, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 186, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 186, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 186, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 58, column: 58, scope: !7)
!52 = !DILocation(line: 59, column: 66, scope: !7)
!53 = !DILocation(line: 60, column: 34, scope: !7)
!54 = !DILocation(line: 60, column: 29, scope: !7)
!55 = !DILocation(line: 60, column: 50, scope: !7)
!56 = !DILocation(line: 192, column: 21, scope: !57, inlinedAt: !58)
!57 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!58 = !DILocation(line: 62, column: 44, scope: !7)
!59 = !DILocation(line: 193, column: 28, scope: !57, inlinedAt: !58)
!60 = !DILocation(line: 194, column: 39, scope: !57, inlinedAt: !58)
!61 = !DILocation(line: 194, column: 60, scope: !57, inlinedAt: !58)
!62 = !DILocation(line: 194, column: 49, scope: !57, inlinedAt: !58)
!63 = !DILocation(line: 196, column: 25, scope: !57, inlinedAt: !58)
!64 = !DILocation(line: 196, column: 17, scope: !57, inlinedAt: !58)
!65 = !DILocation(line: 197, column: 15, scope: !57, inlinedAt: !58)
!66 = !DILocation(line: 197, column: 30, scope: !57, inlinedAt: !58)
!67 = !DILocation(line: 197, column: 38, scope: !57, inlinedAt: !58)
!68 = !DILocation(line: 197, column: 49, scope: !57, inlinedAt: !58)
!69 = !DILocation(line: 197, column: 22, scope: !57, inlinedAt: !58)
!70 = !DILocation(line: 204, column: 46, scope: !41, inlinedAt: !58)
!71 = !DILocation(line: 64, column: 22, scope: !7)
!72 = !DILocation(line: 72, column: 28, scope: !7)
!73 = !DILocation(line: 67, column: 25, scope: !7)
!74 = !DILocation(line: 67, column: 37, scope: !7)
!75 = !DILocation(line: 69, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 20, scope: !7)
!77 = !DILocation(line: 73, column: 4, scope: !7)
!78 = !DILocation(line: 74, column: 28, scope: !7)
!79 = !DILocation(line: 74, column: 40, scope: !7)
!80 = !DILocation(line: 75, column: 36, scope: !7)
!81 = !DILocation(line: 76, column: 27, scope: !7)
!82 = !DILocation(line: 79, column: 41, scope: !7)
!83 = !DILocation(line: 79, column: 36, scope: !7)
!84 = !DILocation(line: 79, column: 50, scope: !7)
!85 = !DILocation(line: 80, column: 35, scope: !7)
!86 = !DILocation(line: 80, column: 49, scope: !7)
!87 = !DILocation(line: 81, column: 35, scope: !7)
!88 = !DILocation(line: 81, column: 40, scope: !7)
!89 = !DILocation(line: 82, column: 35, scope: !7)
!90 = !DILocation(line: 82, column: 40, scope: !7)
!91 = !DILocation(line: 83, column: 24, scope: !7)
!92 = !DILocation(line: 84, column: 24, scope: !7)
!93 = !DILocation(line: 85, column: 24, scope: !7)
!94 = !DILocation(line: 86, column: 24, scope: !7)
!95 = !DILocation(line: 87, column: 24, scope: !7)
!96 = !DILocation(line: 88, column: 29, scope: !7)
!97 = !DILocation(line: 88, column: 50, scope: !7)
!98 = !DILocation(line: 75, column: 4, scope: !7)
