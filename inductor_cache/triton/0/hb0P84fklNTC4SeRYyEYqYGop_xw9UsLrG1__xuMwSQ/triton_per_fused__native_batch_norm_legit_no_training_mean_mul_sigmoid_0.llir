; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = shl i32 %10, 1, !dbg !15
  %16 = and i32 %15, 14, !dbg !15
  %17 = srem i32 %13, 4, !dbg !16
  %18 = shl i32 %13, 4, !dbg !17
  %19 = or disjoint i32 %18, %16, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !20
  %23 = sext i32 %17 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #5, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #5, !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #5, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #5, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %14) #5, !dbg !28
  %37 = fadd float %30, 0x3EE4F8B580000000, !dbg !29
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i1 = icmp eq i32 %40, 0, !dbg !30
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i4 = icmp eq i32 %41, 0, !dbg !30
  br i1 %.not.i1, label %47, label %42, !dbg !30

42:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %45, label %43, !dbg !30

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %50, label %48, !dbg !30

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #5, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %43, %45, %48, %50
  %.0.i3 = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !30
  %52 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = bitcast i32 %26 to float, !dbg !22
  %55 = fsub float %53, %54, !dbg !31
  %56 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %57 = bitcast i32 %56 to float, !dbg !20
  %58 = fsub float %57, %54, !dbg !31
  %59 = bitcast i32 %36 to float, !dbg !28
  %60 = bitcast i32 %33 to float, !dbg !26
  %61 = and i32 %10, 7, !dbg !12
  %62 = or disjoint i32 %9, %61, !dbg !13
  %63 = icmp slt i32 %62, 16, !dbg !14
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !32
  %65 = fmul float %58, %64, !dbg !33
  %66 = fmul float %55, %64, !dbg !33
  %67 = fmul float %65, %60, !dbg !34
  %68 = fmul float %66, %60, !dbg !34
  %69 = fadd float %67, %59, !dbg !35
  %70 = fadd float %68, %59, !dbg !35
  %71 = fsub float 0.000000e+00, %69, !dbg !36
  %72 = fsub float 0.000000e+00, %70, !dbg !36
  %73 = fmul float %71, 0x3FF7154760000000, !dbg !40
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #5, !dbg !40
  %75 = fmul float %72, 0x3FF7154760000000, !dbg !40
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #5, !dbg !40
  %77 = fadd float %74, 1.000000e+00, !dbg !41
  %78 = fadd float %76, 1.000000e+00, !dbg !41
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %77) #5, !dbg !42
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #5, !dbg !42
  %81 = fmul float %69, %79, !dbg !43
  %82 = fmul float %70, %80, !dbg !43
  %83 = fadd float %81, %82, !dbg !44
  %84 = select i1 %14, float %83, float 0.000000e+00, !dbg !44
  %85 = bitcast float %84 to i32, !dbg !47
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !47
  %87 = bitcast i32 %86 to float, !dbg !47
  %88 = fadd float %84, %87, !dbg !44
  %89 = bitcast float %88 to i32, !dbg !47
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !47
  %91 = bitcast i32 %90 to float, !dbg !47
  %92 = fadd float %88, %91, !dbg !44
  %93 = bitcast float %92 to i32, !dbg !47
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !47
  %95 = bitcast i32 %94 to float, !dbg !47
  %96 = fadd float %92, %95, !dbg !44
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !48
  %98 = bitcast float %96 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !48
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !48
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 1.600000e+01) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %102 = sext i32 %62 to i64, !dbg !50
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !50
  %104 = and i32 %10, 56, !dbg !51
  %105 = icmp eq i32 %104, 0, !dbg !51
  %106 = bitcast float %101 to i32, !dbg !51
  %107 = and i1 %105, %63, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %103, i1 %107) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "couwg3uuh4uhnlatnknhithojdi2mx5n6tz53226fyrp4url7qrj.py", directory: "inductor_cache/ou")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_mul_sigmoid_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 26, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 30, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 48, column: 23, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !46)
!45 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!46 = !DILocation(line: 52, column: 26, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !46)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 4, scope: !7)
!50 = !DILocation(line: 56, column: 28, scope: !7)
!51 = !DILocation(line: 56, column: 40, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
