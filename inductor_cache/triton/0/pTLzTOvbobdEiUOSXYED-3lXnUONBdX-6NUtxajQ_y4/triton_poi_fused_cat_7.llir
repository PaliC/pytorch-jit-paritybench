; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 8448, !dbg !14
  %19 = sdiv i32 %17, 16, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %20 = sdiv i32 %.frozen, 2112, !dbg !16
  %21 = mul i32 %20, 2112, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = shl nsw i32 %20, 6, !dbg !18
  %23 = add nsw i32 %22, %srem.decomposed, !dbg !19
  %24 = sext i32 %23 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = shl nsw i32 %20, 9, !dbg !21
  %27 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !22
  %28 = insertelement <2 x i32> %27, i32 %19, i64 1, !dbg !22
  %29 = srem <2 x i32> %28, <i32 16, i32 132>, !dbg !22
  %30 = extractelement <2 x i32> %29, i64 1, !dbg !23
  %31 = icmp slt i32 %30, 4, !dbg !24
  %32 = and i1 %18, %31, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = insertelement <2 x i32> <i32 poison, i32 -4>, i32 %26, i64 0, !dbg !27
  %37 = add nsw <2 x i32> %36, %29, !dbg !27
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !28
  %39 = icmp ult i32 %38, 32, !dbg !29
  %40 = shl nsw i32 %38, 4, !dbg !28
  %41 = extractelement <2 x i32> %37, i64 0, !dbg !30
  %42 = add nsw i32 %41, %40, !dbg !31
  %43 = sext i32 %42 to i64, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !32
  %45 = and i1 %18, %39, !dbg !33
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !34
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !34
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !34
  %49 = sext i32 %38 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45) #1, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %45, i32 0, i1 %45) #1, !dbg !36
  %53 = add nsw i32 %30, -36, !dbg !37
  %54 = icmp ult i32 %53, 32, !dbg !37
  %55 = shl nsw i32 %53, 4, !dbg !38
  %56 = add nsw i32 %41, %55, !dbg !39
  %57 = sext i32 %56 to i64, !dbg !40
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !40
  %59 = and i1 %18, %54, !dbg !41
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %59, i32 0, i1 %59, i32 0, i1 %59) #1, !dbg !42
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !42
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !42
  %63 = sext i32 %53 to i64, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !43
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %59, i32 0, i1 %59) #1, !dbg !44
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %59, i32 0, i1 %59) #1, !dbg !44
  %67 = add nsw i32 %30, -68, !dbg !45
  %68 = icmp ult i32 %67, 32, !dbg !45
  %69 = shl nsw i32 %67, 4, !dbg !46
  %70 = add nsw i32 %41, %69, !dbg !47
  %71 = sext i32 %70 to i64, !dbg !48
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !48
  %73 = and i1 %18, %68, !dbg !49
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !50
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !50
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !50
  %77 = sext i32 %67 to i64, !dbg !51
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %77, !dbg !51
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %73, i32 0, i1 %73) #1, !dbg !52
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %73, i32 0, i1 %73) #1, !dbg !52
  %81 = icmp sgt i32 %30, 99, !dbg !23
  %82 = add nsw i32 %30, -100, !dbg !53
  %83 = shl nsw i32 %82, 4, !dbg !54
  %84 = add nsw i32 %41, %83, !dbg !30
  %85 = sext i32 %84 to i64, !dbg !55
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %85, !dbg !55
  %87 = and i1 %18, %81, !dbg !56
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %86, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #1, !dbg !57
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !57
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !57
  %91 = sext i32 %82 to i64, !dbg !58
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %91, !dbg !58
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 0, i1 %87) #1, !dbg !59
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %87, i32 0, i1 %87) #1, !dbg !59
  %95 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !57
  %96 = insertelement <8 x i32> %95, i32 %89, i64 1, !dbg !57
  %97 = insertelement <8 x i32> %96, i32 %76, i64 2, !dbg !57
  %98 = insertelement <8 x i32> %97, i32 %75, i64 3, !dbg !57
  %99 = insertelement <8 x i32> %98, i32 %62, i64 4, !dbg !57
  %100 = insertelement <8 x i32> %99, i32 %61, i64 5, !dbg !57
  %101 = insertelement <8 x i32> %100, i32 %48, i64 6, !dbg !57
  %102 = insertelement <8 x i32> %101, i32 %47, i64 7, !dbg !57
  %103 = bitcast <8 x i32> %102 to <8 x float>, !dbg !57
  %104 = insertelement <8 x i32> poison, i32 %94, i64 0, !dbg !59
  %105 = insertelement <8 x i32> %104, i32 %93, i64 1, !dbg !59
  %106 = insertelement <8 x i32> %105, i32 %80, i64 2, !dbg !59
  %107 = insertelement <8 x i32> %106, i32 %79, i64 3, !dbg !59
  %108 = insertelement <8 x i32> %107, i32 %66, i64 4, !dbg !59
  %109 = insertelement <8 x i32> %108, i32 %65, i64 5, !dbg !59
  %110 = insertelement <8 x i32> %109, i32 %52, i64 6, !dbg !59
  %111 = insertelement <8 x i32> %110, i32 %51, i64 7, !dbg !59
  %112 = bitcast <8 x i32> %111 to <8 x float>, !dbg !59
  %113 = fadd <8 x float> %103, %112, !dbg !60
  %114 = extractelement <8 x float> %113, i64 7, !dbg !61
  %115 = fmul float %114, 0x3FC99999A0000000, !dbg !62
  %116 = extractelement <8 x float> %113, i64 6, !dbg !61
  %117 = fmul float %116, 0x3FC99999A0000000, !dbg !62
  %118 = fcmp ogt <8 x float> %113, zeroinitializer, !dbg !63
  %119 = extractelement <8 x i1> %118, i64 7, !dbg !61
  %120 = select i1 %119, float %114, float %115, !dbg !61
  %121 = extractelement <8 x i1> %118, i64 6, !dbg !61
  %122 = select i1 %121, float %116, float %117, !dbg !61
  %123 = extractelement <8 x float> %113, i64 5, !dbg !64
  %124 = fmul float %123, 0x3FC99999A0000000, !dbg !65
  %125 = extractelement <8 x float> %113, i64 4, !dbg !64
  %126 = fmul float %125, 0x3FC99999A0000000, !dbg !65
  %127 = extractelement <8 x i1> %118, i64 5, !dbg !64
  %128 = select i1 %127, float %123, float %124, !dbg !64
  %129 = extractelement <8 x i1> %118, i64 4, !dbg !64
  %130 = select i1 %129, float %125, float %126, !dbg !64
  %131 = extractelement <8 x float> %113, i64 3, !dbg !66
  %132 = fmul float %131, 0x3FC99999A0000000, !dbg !67
  %133 = extractelement <8 x float> %113, i64 2, !dbg !66
  %134 = fmul float %133, 0x3FC99999A0000000, !dbg !67
  %135 = extractelement <8 x i1> %118, i64 3, !dbg !66
  %136 = select i1 %135, float %131, float %132, !dbg !66
  %137 = extractelement <8 x i1> %118, i64 2, !dbg !66
  %138 = select i1 %137, float %133, float %134, !dbg !66
  %139 = extractelement <8 x float> %113, i64 1, !dbg !68
  %140 = fmul float %139, 0x3FC99999A0000000, !dbg !69
  %141 = extractelement <8 x float> %113, i64 0, !dbg !68
  %142 = fmul float %141, 0x3FC99999A0000000, !dbg !69
  %143 = extractelement <8 x i1> %118, i64 1, !dbg !68
  %144 = select i1 %143, float %139, float %140, !dbg !68
  %145 = extractelement <8 x i1> %118, i64 0, !dbg !68
  %146 = select i1 %145, float %141, float %142, !dbg !68
  %147 = select i1 %81, float %144, float 0.000000e+00, !dbg !70
  %148 = select i1 %81, float %146, float 0.000000e+00, !dbg !70
  %149 = select i1 %68, float %136, float %147, !dbg !71
  %150 = select i1 %68, float %138, float %148, !dbg !71
  %151 = select i1 %54, float %128, float %149, !dbg !71
  %152 = select i1 %54, float %130, float %150, !dbg !71
  %153 = select i1 %39, float %120, float %151, !dbg !71
  %154 = select i1 %39, float %122, float %152, !dbg !71
  %155 = sext i32 %17 to i64, !dbg !72
  %156 = getelementptr float, ptr addrspace(1) %9, i64 %155, !dbg !72
  %157 = bitcast float %153 to i32, !dbg !73
  %158 = select i1 %31, i32 %34, i32 %157, !dbg !74
  %159 = bitcast float %154 to i32, !dbg !73
  %160 = select i1 %31, i32 %35, i32 %159, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %160, ptr addrspace(1) %156, i1 %18) #1, !dbg !73
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2lzdho7cyakvaxqaohxvuwrspeazh4kyj45imyh7uoyrdalh5ag.py", directory: "inductor_cache/2l")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 48, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 57, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 76, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 60, scope: !7)
!26 = !DILocation(line: 33, column: 53, scope: !7)
!27 = !DILocation(line: 38, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 40, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 79, column: 55, scope: !7)
!31 = !DILocation(line: 38, column: 53, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 69, scope: !7)
!34 = !DILocation(line: 38, column: 62, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 43, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 40, scope: !7)
!39 = !DILocation(line: 52, column: 54, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 71, scope: !7)
!42 = !DILocation(line: 52, column: 63, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 53, column: 44, scope: !7)
!45 = !DILocation(line: 65, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 40, scope: !7)
!47 = !DILocation(line: 66, column: 54, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 71, scope: !7)
!50 = !DILocation(line: 66, column: 63, scope: !7)
!51 = !DILocation(line: 67, column: 31, scope: !7)
!52 = !DILocation(line: 67, column: 44, scope: !7)
!53 = !DILocation(line: 79, column: 49, scope: !7)
!54 = !DILocation(line: 79, column: 40, scope: !7)
!55 = !DILocation(line: 79, column: 31, scope: !7)
!56 = !DILocation(line: 79, column: 72, scope: !7)
!57 = !DILocation(line: 79, column: 64, scope: !7)
!58 = !DILocation(line: 80, column: 31, scope: !7)
!59 = !DILocation(line: 80, column: 45, scope: !7)
!60 = !DILocation(line: 81, column: 20, scope: !7)
!61 = !DILocation(line: 45, column: 35, scope: !7)
!62 = !DILocation(line: 44, column: 20, scope: !7)
!63 = !DILocation(line: 83, column: 20, scope: !7)
!64 = !DILocation(line: 59, column: 35, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 73, column: 35, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 86, column: 35, scope: !7)
!69 = !DILocation(line: 85, column: 20, scope: !7)
!70 = !DILocation(line: 88, column: 35, scope: !7)
!71 = !DILocation(line: 0, scope: !7)
!72 = !DILocation(line: 93, column: 25, scope: !7)
!73 = !DILocation(line: 93, column: 37, scope: !7)
!74 = !DILocation(line: 92, column: 33, scope: !7)
!75 = !DILocation(line: 93, column: 4, scope: !7)
