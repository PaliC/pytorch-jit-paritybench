; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, i32 %27, i32 %28) local_unnamed_addr !dbg !7 {
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %31 = shl i32 %30, 9, !dbg !11
  %32 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %33 = shl i32 %32, 2, !dbg !12
  %34 = and i32 %33, 508, !dbg !12
  %35 = or disjoint i32 %31, %34, !dbg !13
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %37 = icmp slt i32 %36, 25, !dbg !15
  %.frozen = freeze i32 %35, !dbg !16
  %38 = sdiv i32 %.frozen, 512, !dbg !16
  %39 = mul i32 %38, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %39, !dbg !17
  %40 = shl i32 %36, 9, !dbg !18
  %41 = add i32 %.decomposed, %40, !dbg !19
  %42 = mul i32 %38, 12800, !dbg !20
  %43 = add i32 %41, %42, !dbg !21
  %44 = sext i32 %43 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %21, i64 %44, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %37) #4, !dbg !23
  %47 = sext i32 %.decomposed to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %22, i64 %47, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %23, i64 %47, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %24, i64 %47, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %25, i64 %47, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !31
  %64 = icmp slt i32 %.decomposed, 128, !dbg !32
  %65 = shl i32 %36, 7, !dbg !33
  %66 = mul i32 %38, 3200, !dbg !34
  %67 = add i32 %.decomposed, %65, !dbg !35
  %68 = add i32 %67, %66, !dbg !36
  %69 = sext i32 %68 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !37
  %71 = and i1 %37, %64, !dbg !38
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !39
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !40
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !41
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !42
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !43
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !43
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !43
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !43
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !43
  %81 = bitcast i32 %77 to float, !dbg !43
  %82 = bitcast i32 %78 to float, !dbg !43
  %83 = bitcast i32 %79 to float, !dbg !43
  %84 = bitcast i32 %80 to float, !dbg !43
  %85 = fadd float %81, 0x3EE4F8B580000000, !dbg !44
  %86 = fadd float %82, 0x3EE4F8B580000000, !dbg !44
  %87 = fadd float %83, 0x3EE4F8B580000000, !dbg !44
  %88 = fadd float %84, 0x3EE4F8B580000000, !dbg !44
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %89, 0, !dbg !45
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %90, 0, !dbg !45
  br i1 %.not.i, label %96, label %91, !dbg !45

91:                                               ; preds = %29
  br i1 %.not1.i, label %94, label %92, !dbg !45

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

96:                                               ; preds = %29
  br i1 %.not1.i, label %99, label %97, !dbg !45

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %92, %94, %97, %99
  %.0.i = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !45
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i5 = icmp eq i32 %101, 0, !dbg !45
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i8 = icmp eq i32 %102, 0, !dbg !45
  br i1 %.not.i5, label %108, label %103, !dbg !45

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %106, label %104, !dbg !45

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %111, label %109, !dbg !45

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !45
  br label %__nv_sqrtf.exit9, !dbg !45

__nv_sqrtf.exit9:                                 ; preds = %104, %106, %109, %111
  %.0.i7 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !45
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i10 = icmp eq i32 %113, 0, !dbg !45
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i13 = icmp eq i32 %114, 0, !dbg !45
  br i1 %.not.i10, label %120, label %115, !dbg !45

115:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %118, label %116, !dbg !45

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #4, !dbg !45
  br label %__nv_sqrtf.exit14, !dbg !45

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #4, !dbg !45
  br label %__nv_sqrtf.exit14, !dbg !45

120:                                              ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %123, label %121, !dbg !45

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #4, !dbg !45
  br label %__nv_sqrtf.exit14, !dbg !45

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #4, !dbg !45
  br label %__nv_sqrtf.exit14, !dbg !45

__nv_sqrtf.exit14:                                ; preds = %116, %118, %121, %123
  %.0.i12 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !45
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i15 = icmp eq i32 %125, 0, !dbg !45
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i18 = icmp eq i32 %126, 0, !dbg !45
  br i1 %.not.i15, label %132, label %127, !dbg !45

127:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %130, label %128, !dbg !45

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

132:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %135, label %133, !dbg !45

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #4, !dbg !45
  br label %__nv_sqrtf.exit19, !dbg !45

__nv_sqrtf.exit19:                                ; preds = %128, %130, %133, %135
  %.0.i17 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !45
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !46
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !46
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !46
  %141 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !47
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !49
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #4, !dbg !50
  %145 = add nsw i32 %.decomposed, -128, !dbg !51
  %146 = icmp ult i32 %145, 256, !dbg !51
  %147 = shl i32 %36, 8, !dbg !52
  %148 = mul i32 %38, 6400, !dbg !53
  %149 = add i32 %148, %147, !dbg !54
  %150 = add i32 %149, %145, !dbg !55
  %151 = sext i32 %150 to i64, !dbg !56
  %152 = getelementptr float, ptr addrspace(1) %6, i64 %151, !dbg !56
  %153 = and i1 %37, %146, !dbg !57
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #4, !dbg !58
  %155 = sext i32 %145 to i64, !dbg !59
  %156 = getelementptr float, ptr addrspace(1) %7, i64 %155, !dbg !59
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #4, !dbg !60
  %158 = getelementptr float, ptr addrspace(1) %8, i64 %155, !dbg !61
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #4, !dbg !62
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !62
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !62
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !62
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !62
  %164 = bitcast i32 %160 to float, !dbg !62
  %165 = bitcast i32 %161 to float, !dbg !62
  %166 = bitcast i32 %162 to float, !dbg !62
  %167 = bitcast i32 %163 to float, !dbg !62
  %168 = fadd float %164, 0x3EE4F8B580000000, !dbg !63
  %169 = fadd float %165, 0x3EE4F8B580000000, !dbg !63
  %170 = fadd float %166, 0x3EE4F8B580000000, !dbg !63
  %171 = fadd float %167, 0x3EE4F8B580000000, !dbg !63
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i20 = icmp eq i32 %172, 0, !dbg !64
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i23 = icmp eq i32 %173, 0, !dbg !64
  br i1 %.not.i20, label %179, label %174, !dbg !64

174:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %177, label %175, !dbg !64

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #4, !dbg !64
  br label %__nv_sqrtf.exit24, !dbg !64

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #4, !dbg !64
  br label %__nv_sqrtf.exit24, !dbg !64

179:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %182, label %180, !dbg !64

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #4, !dbg !64
  br label %__nv_sqrtf.exit24, !dbg !64

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #4, !dbg !64
  br label %__nv_sqrtf.exit24, !dbg !64

__nv_sqrtf.exit24:                                ; preds = %175, %177, %180, %182
  %.0.i22 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !64
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i25 = icmp eq i32 %184, 0, !dbg !64
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i28 = icmp eq i32 %185, 0, !dbg !64
  br i1 %.not.i25, label %191, label %186, !dbg !64

186:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %189, label %187, !dbg !64

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #4, !dbg !64
  br label %__nv_sqrtf.exit29, !dbg !64

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #4, !dbg !64
  br label %__nv_sqrtf.exit29, !dbg !64

191:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %194, label %192, !dbg !64

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #4, !dbg !64
  br label %__nv_sqrtf.exit29, !dbg !64

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #4, !dbg !64
  br label %__nv_sqrtf.exit29, !dbg !64

__nv_sqrtf.exit29:                                ; preds = %187, %189, %192, %194
  %.0.i27 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !64
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i30 = icmp eq i32 %196, 0, !dbg !64
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i33 = icmp eq i32 %197, 0, !dbg !64
  br i1 %.not.i30, label %203, label %198, !dbg !64

198:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %201, label %199, !dbg !64

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #4, !dbg !64
  br label %__nv_sqrtf.exit34, !dbg !64

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #4, !dbg !64
  br label %__nv_sqrtf.exit34, !dbg !64

203:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %206, label %204, !dbg !64

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #4, !dbg !64
  br label %__nv_sqrtf.exit34, !dbg !64

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #4, !dbg !64
  br label %__nv_sqrtf.exit34, !dbg !64

__nv_sqrtf.exit34:                                ; preds = %199, %201, %204, %206
  %.0.i32 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !64
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !64
  %.not.i35 = icmp eq i32 %208, 0, !dbg !64
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !64
  %.not1.i38 = icmp eq i32 %209, 0, !dbg !64
  br i1 %.not.i35, label %215, label %210, !dbg !64

210:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %213, label %211, !dbg !64

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #4, !dbg !64
  br label %__nv_sqrtf.exit39, !dbg !64

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #4, !dbg !64
  br label %__nv_sqrtf.exit39, !dbg !64

215:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %218, label %216, !dbg !64

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #4, !dbg !64
  br label %__nv_sqrtf.exit39, !dbg !64

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #4, !dbg !64
  br label %__nv_sqrtf.exit39, !dbg !64

__nv_sqrtf.exit39:                                ; preds = %211, %213, %216, %218
  %.0.i37 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !64
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !65
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !65
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !65
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !65
  %224 = getelementptr float, ptr addrspace(1) %9, i64 %155, !dbg !66
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %224, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #4, !dbg !67
  %226 = getelementptr float, ptr addrspace(1) %10, i64 %155, !dbg !68
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %226, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #4, !dbg !69
  %228 = and i32 %.decomposed, -64, !dbg !70
  %229 = icmp eq i32 %228, 384, !dbg !70
  %230 = shl i32 %36, 6, !dbg !71
  %231 = mul i32 %38, 1600, !dbg !72
  %232 = add i32 %231, %230, !dbg !73
  %233 = add nsw i32 %.decomposed, -384, !dbg !74
  %234 = add i32 %232, %233, !dbg !75
  %235 = sext i32 %234 to i64, !dbg !76
  %236 = getelementptr float, ptr addrspace(1) %11, i64 %235, !dbg !76
  %237 = and i1 %37, %229, !dbg !77
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %236, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #4, !dbg !78
  %239 = sext i32 %233 to i64, !dbg !79
  %240 = getelementptr float, ptr addrspace(1) %12, i64 %239, !dbg !79
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #4, !dbg !80
  %242 = getelementptr float, ptr addrspace(1) %13, i64 %239, !dbg !81
  %243 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #4, !dbg !82
  %244 = extractvalue { i32, i32, i32, i32 } %243, 0, !dbg !82
  %245 = extractvalue { i32, i32, i32, i32 } %243, 1, !dbg !82
  %246 = extractvalue { i32, i32, i32, i32 } %243, 2, !dbg !82
  %247 = extractvalue { i32, i32, i32, i32 } %243, 3, !dbg !82
  %248 = bitcast i32 %244 to float, !dbg !82
  %249 = bitcast i32 %245 to float, !dbg !82
  %250 = bitcast i32 %246 to float, !dbg !82
  %251 = bitcast i32 %247 to float, !dbg !82
  %252 = fadd float %248, 0x3EE4F8B580000000, !dbg !83
  %253 = fadd float %249, 0x3EE4F8B580000000, !dbg !83
  %254 = fadd float %250, 0x3EE4F8B580000000, !dbg !83
  %255 = fadd float %251, 0x3EE4F8B580000000, !dbg !83
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i40 = icmp eq i32 %256, 0, !dbg !84
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !84
  %.not1.i43 = icmp eq i32 %257, 0, !dbg !84
  br i1 %.not.i40, label %263, label %258, !dbg !84

258:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %261, label %259, !dbg !84

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !84
  br label %__nv_sqrtf.exit44, !dbg !84

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !84
  br label %__nv_sqrtf.exit44, !dbg !84

263:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %266, label %264, !dbg !84

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !84
  br label %__nv_sqrtf.exit44, !dbg !84

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !84
  br label %__nv_sqrtf.exit44, !dbg !84

__nv_sqrtf.exit44:                                ; preds = %259, %261, %264, %266
  %.0.i42 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !84
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i45 = icmp eq i32 %268, 0, !dbg !84
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !84
  %.not1.i48 = icmp eq i32 %269, 0, !dbg !84
  br i1 %.not.i45, label %275, label %270, !dbg !84

270:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %273, label %271, !dbg !84

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %253) #4, !dbg !84
  br label %__nv_sqrtf.exit49, !dbg !84

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %253) #4, !dbg !84
  br label %__nv_sqrtf.exit49, !dbg !84

275:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %278, label %276, !dbg !84

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %253) #4, !dbg !84
  br label %__nv_sqrtf.exit49, !dbg !84

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %253) #4, !dbg !84
  br label %__nv_sqrtf.exit49, !dbg !84

__nv_sqrtf.exit49:                                ; preds = %271, %273, %276, %278
  %.0.i47 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !84
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i50 = icmp eq i32 %280, 0, !dbg !84
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !84
  %.not1.i53 = icmp eq i32 %281, 0, !dbg !84
  br i1 %.not.i50, label %287, label %282, !dbg !84

282:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %285, label %283, !dbg !84

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %254) #4, !dbg !84
  br label %__nv_sqrtf.exit54, !dbg !84

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %254) #4, !dbg !84
  br label %__nv_sqrtf.exit54, !dbg !84

287:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %290, label %288, !dbg !84

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %254) #4, !dbg !84
  br label %__nv_sqrtf.exit54, !dbg !84

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %254) #4, !dbg !84
  br label %__nv_sqrtf.exit54, !dbg !84

__nv_sqrtf.exit54:                                ; preds = %283, %285, %288, %290
  %.0.i52 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !84
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !84
  %.not.i55 = icmp eq i32 %292, 0, !dbg !84
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !84
  %.not1.i58 = icmp eq i32 %293, 0, !dbg !84
  br i1 %.not.i55, label %299, label %294, !dbg !84

294:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %297, label %295, !dbg !84

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %255) #4, !dbg !84
  br label %__nv_sqrtf.exit59, !dbg !84

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %255) #4, !dbg !84
  br label %__nv_sqrtf.exit59, !dbg !84

299:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %302, label %300, !dbg !84

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %255) #4, !dbg !84
  br label %__nv_sqrtf.exit59, !dbg !84

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %255) #4, !dbg !84
  br label %__nv_sqrtf.exit59, !dbg !84

__nv_sqrtf.exit59:                                ; preds = %295, %297, %300, %302
  %.0.i57 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !84
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !85
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !85
  %306 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !85
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !85
  %308 = getelementptr float, ptr addrspace(1) %14, i64 %239, !dbg !86
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %308, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #4, !dbg !87
  %310 = getelementptr float, ptr addrspace(1) %15, i64 %239, !dbg !88
  %311 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %310, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237, i32 0, i1 %237) #4, !dbg !89
  %312 = icmp sgt i32 %.decomposed, 447, !dbg !90
  %313 = add nsw i32 %.decomposed, -448, !dbg !91
  %314 = add i32 %232, %313, !dbg !92
  %315 = sext i32 %314 to i64, !dbg !93
  %316 = getelementptr float, ptr addrspace(1) %16, i64 %315, !dbg !93
  %317 = and i1 %37, %312, !dbg !94
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %316, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #4, !dbg !95
  %319 = sext i32 %313 to i64, !dbg !96
  %320 = getelementptr float, ptr addrspace(1) %17, i64 %319, !dbg !96
  %321 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %320, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #4, !dbg !97
  %322 = getelementptr float, ptr addrspace(1) %18, i64 %319, !dbg !98
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %322, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #4, !dbg !99
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !99
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !99
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !99
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !99
  %328 = bitcast i32 %324 to float, !dbg !99
  %329 = bitcast i32 %325 to float, !dbg !99
  %330 = bitcast i32 %326 to float, !dbg !99
  %331 = bitcast i32 %327 to float, !dbg !99
  %332 = fadd float %328, 0x3EE4F8B580000000, !dbg !100
  %333 = fadd float %329, 0x3EE4F8B580000000, !dbg !100
  %334 = fadd float %330, 0x3EE4F8B580000000, !dbg !100
  %335 = fadd float %331, 0x3EE4F8B580000000, !dbg !100
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !101
  %.not.i60 = icmp eq i32 %336, 0, !dbg !101
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !101
  %.not1.i63 = icmp eq i32 %337, 0, !dbg !101
  br i1 %.not.i60, label %343, label %338, !dbg !101

338:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %341, label %339, !dbg !101

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #4, !dbg !101
  br label %__nv_sqrtf.exit64, !dbg !101

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #4, !dbg !101
  br label %__nv_sqrtf.exit64, !dbg !101

343:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %346, label %344, !dbg !101

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #4, !dbg !101
  br label %__nv_sqrtf.exit64, !dbg !101

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #4, !dbg !101
  br label %__nv_sqrtf.exit64, !dbg !101

__nv_sqrtf.exit64:                                ; preds = %339, %341, %344, %346
  %.0.i62 = phi float [ %340, %339 ], [ %342, %341 ], [ %345, %344 ], [ %347, %346 ], !dbg !101
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !101
  %.not.i65 = icmp eq i32 %348, 0, !dbg !101
  %349 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !101
  %.not1.i68 = icmp eq i32 %349, 0, !dbg !101
  br i1 %.not.i65, label %355, label %350, !dbg !101

350:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %353, label %351, !dbg !101

351:                                              ; preds = %350
  %352 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #4, !dbg !101
  br label %__nv_sqrtf.exit69, !dbg !101

353:                                              ; preds = %350
  %354 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #4, !dbg !101
  br label %__nv_sqrtf.exit69, !dbg !101

355:                                              ; preds = %__nv_sqrtf.exit64
  br i1 %.not1.i68, label %358, label %356, !dbg !101

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #4, !dbg !101
  br label %__nv_sqrtf.exit69, !dbg !101

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #4, !dbg !101
  br label %__nv_sqrtf.exit69, !dbg !101

__nv_sqrtf.exit69:                                ; preds = %351, %353, %356, %358
  %.0.i67 = phi float [ %352, %351 ], [ %354, %353 ], [ %357, %356 ], [ %359, %358 ], !dbg !101
  %360 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !101
  %.not.i70 = icmp eq i32 %360, 0, !dbg !101
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !101
  %.not1.i73 = icmp eq i32 %361, 0, !dbg !101
  br i1 %.not.i70, label %367, label %362, !dbg !101

362:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %365, label %363, !dbg !101

363:                                              ; preds = %362
  %364 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #4, !dbg !101
  br label %__nv_sqrtf.exit74, !dbg !101

365:                                              ; preds = %362
  %366 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #4, !dbg !101
  br label %__nv_sqrtf.exit74, !dbg !101

367:                                              ; preds = %__nv_sqrtf.exit69
  br i1 %.not1.i73, label %370, label %368, !dbg !101

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #4, !dbg !101
  br label %__nv_sqrtf.exit74, !dbg !101

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #4, !dbg !101
  br label %__nv_sqrtf.exit74, !dbg !101

__nv_sqrtf.exit74:                                ; preds = %363, %365, %368, %370
  %.0.i72 = phi float [ %364, %363 ], [ %366, %365 ], [ %369, %368 ], [ %371, %370 ], !dbg !101
  %372 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !101
  %.not.i75 = icmp eq i32 %372, 0, !dbg !101
  %373 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !101
  %.not1.i78 = icmp eq i32 %373, 0, !dbg !101
  br i1 %.not.i75, label %379, label %374, !dbg !101

374:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %377, label %375, !dbg !101

375:                                              ; preds = %374
  %376 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #4, !dbg !101
  br label %__nv_sqrtf.exit79, !dbg !101

377:                                              ; preds = %374
  %378 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #4, !dbg !101
  br label %__nv_sqrtf.exit79, !dbg !101

379:                                              ; preds = %__nv_sqrtf.exit74
  br i1 %.not1.i78, label %382, label %380, !dbg !101

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #4, !dbg !101
  br label %__nv_sqrtf.exit79, !dbg !101

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #4, !dbg !101
  br label %__nv_sqrtf.exit79, !dbg !101

__nv_sqrtf.exit79:                                ; preds = %375, %377, %380, %382
  %.0.i77 = phi float [ %376, %375 ], [ %378, %377 ], [ %381, %380 ], [ %383, %382 ], !dbg !101
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !102
  %385 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i67) #4, !dbg !102
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i72) #4, !dbg !102
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i77) #4, !dbg !102
  %388 = getelementptr float, ptr addrspace(1) %19, i64 %319, !dbg !103
  %389 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %388, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #4, !dbg !104
  %390 = getelementptr float, ptr addrspace(1) %20, i64 %319, !dbg !105
  %391 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %390, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317, i32 0, i1 %317) #4, !dbg !106
  %392 = fadd float %56, 0x3EE4F8B580000000, !dbg !107
  %393 = fadd float %57, 0x3EE4F8B580000000, !dbg !107
  %394 = fadd float %58, 0x3EE4F8B580000000, !dbg !107
  %395 = fadd float %59, 0x3EE4F8B580000000, !dbg !107
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i80 = icmp eq i32 %396, 0, !dbg !108
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i83 = icmp eq i32 %397, 0, !dbg !108
  br i1 %.not.i80, label %403, label %398, !dbg !108

398:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %401, label %399, !dbg !108

399:                                              ; preds = %398
  %400 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %392) #4, !dbg !108
  br label %__nv_sqrtf.exit84, !dbg !108

401:                                              ; preds = %398
  %402 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %392) #4, !dbg !108
  br label %__nv_sqrtf.exit84, !dbg !108

403:                                              ; preds = %__nv_sqrtf.exit79
  br i1 %.not1.i83, label %406, label %404, !dbg !108

404:                                              ; preds = %403
  %405 = tail call float @llvm.nvvm.sqrt.rn.f(float %392) #4, !dbg !108
  br label %__nv_sqrtf.exit84, !dbg !108

406:                                              ; preds = %403
  %407 = tail call float @llvm.nvvm.sqrt.approx.f(float %392) #4, !dbg !108
  br label %__nv_sqrtf.exit84, !dbg !108

__nv_sqrtf.exit84:                                ; preds = %399, %401, %404, %406
  %.0.i82 = phi float [ %400, %399 ], [ %402, %401 ], [ %405, %404 ], [ %407, %406 ], !dbg !108
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i85 = icmp eq i32 %408, 0, !dbg !108
  %409 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i88 = icmp eq i32 %409, 0, !dbg !108
  br i1 %.not.i85, label %415, label %410, !dbg !108

410:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %413, label %411, !dbg !108

411:                                              ; preds = %410
  %412 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %393) #4, !dbg !108
  br label %__nv_sqrtf.exit89, !dbg !108

413:                                              ; preds = %410
  %414 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %393) #4, !dbg !108
  br label %__nv_sqrtf.exit89, !dbg !108

415:                                              ; preds = %__nv_sqrtf.exit84
  br i1 %.not1.i88, label %418, label %416, !dbg !108

416:                                              ; preds = %415
  %417 = tail call float @llvm.nvvm.sqrt.rn.f(float %393) #4, !dbg !108
  br label %__nv_sqrtf.exit89, !dbg !108

418:                                              ; preds = %415
  %419 = tail call float @llvm.nvvm.sqrt.approx.f(float %393) #4, !dbg !108
  br label %__nv_sqrtf.exit89, !dbg !108

__nv_sqrtf.exit89:                                ; preds = %411, %413, %416, %418
  %.0.i87 = phi float [ %412, %411 ], [ %414, %413 ], [ %417, %416 ], [ %419, %418 ], !dbg !108
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i90 = icmp eq i32 %420, 0, !dbg !108
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i93 = icmp eq i32 %421, 0, !dbg !108
  br i1 %.not.i90, label %427, label %422, !dbg !108

422:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %425, label %423, !dbg !108

423:                                              ; preds = %422
  %424 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %394) #4, !dbg !108
  br label %__nv_sqrtf.exit94, !dbg !108

425:                                              ; preds = %422
  %426 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %394) #4, !dbg !108
  br label %__nv_sqrtf.exit94, !dbg !108

427:                                              ; preds = %__nv_sqrtf.exit89
  br i1 %.not1.i93, label %430, label %428, !dbg !108

428:                                              ; preds = %427
  %429 = tail call float @llvm.nvvm.sqrt.rn.f(float %394) #4, !dbg !108
  br label %__nv_sqrtf.exit94, !dbg !108

430:                                              ; preds = %427
  %431 = tail call float @llvm.nvvm.sqrt.approx.f(float %394) #4, !dbg !108
  br label %__nv_sqrtf.exit94, !dbg !108

__nv_sqrtf.exit94:                                ; preds = %423, %425, %428, %430
  %.0.i92 = phi float [ %424, %423 ], [ %426, %425 ], [ %429, %428 ], [ %431, %430 ], !dbg !108
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !108
  %.not.i95 = icmp eq i32 %432, 0, !dbg !108
  %433 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !108
  %.not1.i98 = icmp eq i32 %433, 0, !dbg !108
  br i1 %.not.i95, label %439, label %434, !dbg !108

434:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %437, label %435, !dbg !108

435:                                              ; preds = %434
  %436 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %395) #4, !dbg !108
  br label %__nv_sqrtf.exit99, !dbg !108

437:                                              ; preds = %434
  %438 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %395) #4, !dbg !108
  br label %__nv_sqrtf.exit99, !dbg !108

439:                                              ; preds = %__nv_sqrtf.exit94
  br i1 %.not1.i98, label %442, label %440, !dbg !108

440:                                              ; preds = %439
  %441 = tail call float @llvm.nvvm.sqrt.rn.f(float %395) #4, !dbg !108
  br label %__nv_sqrtf.exit99, !dbg !108

442:                                              ; preds = %439
  %443 = tail call float @llvm.nvvm.sqrt.approx.f(float %395) #4, !dbg !108
  br label %__nv_sqrtf.exit99, !dbg !108

__nv_sqrtf.exit99:                                ; preds = %435, %437, %440, %442
  %.0.i97 = phi float [ %436, %435 ], [ %438, %437 ], [ %441, %440 ], [ %443, %442 ], !dbg !108
  %444 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %445 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %446 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %447 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %448 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %449 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %450 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %451 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %452 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !39
  %453 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !41
  %454 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !48
  %455 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !50
  %456 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !58
  %457 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !60
  %458 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !67
  %459 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !69
  %460 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !78
  %461 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !80
  %462 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !87
  %463 = extractvalue { i32, i32, i32, i32 } %311, 3, !dbg !89
  %464 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !95
  %465 = extractvalue { i32, i32, i32, i32 } %321, 3, !dbg !97
  %466 = extractvalue { i32, i32, i32, i32 } %389, 3, !dbg !104
  %467 = extractvalue { i32, i32, i32, i32 } %391, 3, !dbg !106
  %468 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !39
  %469 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !41
  %470 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !48
  %471 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !50
  %472 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !58
  %473 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !60
  %474 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !67
  %475 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !69
  %476 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !78
  %477 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !80
  %478 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !87
  %479 = extractvalue { i32, i32, i32, i32 } %311, 2, !dbg !89
  %480 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !95
  %481 = extractvalue { i32, i32, i32, i32 } %321, 2, !dbg !97
  %482 = extractvalue { i32, i32, i32, i32 } %389, 2, !dbg !104
  %483 = extractvalue { i32, i32, i32, i32 } %391, 2, !dbg !106
  %484 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !39
  %485 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !41
  %486 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !48
  %487 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !50
  %488 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !58
  %489 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !60
  %490 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !67
  %491 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !69
  %492 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !78
  %493 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !80
  %494 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !87
  %495 = extractvalue { i32, i32, i32, i32 } %311, 1, !dbg !89
  %496 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !95
  %497 = extractvalue { i32, i32, i32, i32 } %321, 1, !dbg !97
  %498 = extractvalue { i32, i32, i32, i32 } %389, 1, !dbg !104
  %499 = extractvalue { i32, i32, i32, i32 } %391, 1, !dbg !106
  %500 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !39
  %501 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !41
  %502 = insertelement <4 x i32> poison, i32 %500, i64 0, !dbg !39
  %503 = insertelement <4 x i32> %502, i32 %484, i64 1, !dbg !39
  %504 = insertelement <4 x i32> %503, i32 %468, i64 2, !dbg !39
  %505 = insertelement <4 x i32> %504, i32 %452, i64 3, !dbg !39
  %506 = bitcast <4 x i32> %505 to <4 x float>, !dbg !39
  %507 = insertelement <4 x i32> poison, i32 %501, i64 0, !dbg !41
  %508 = insertelement <4 x i32> %507, i32 %485, i64 1, !dbg !41
  %509 = insertelement <4 x i32> %508, i32 %469, i64 2, !dbg !41
  %510 = insertelement <4 x i32> %509, i32 %453, i64 3, !dbg !41
  %511 = bitcast <4 x i32> %510 to <4 x float>, !dbg !41
  %512 = fsub <4 x float> %506, %511, !dbg !109
  %513 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !48
  %514 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !50
  %515 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !58
  %516 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !60
  %517 = insertelement <4 x i32> poison, i32 %515, i64 0, !dbg !58
  %518 = insertelement <4 x i32> %517, i32 %488, i64 1, !dbg !58
  %519 = insertelement <4 x i32> %518, i32 %472, i64 2, !dbg !58
  %520 = insertelement <4 x i32> %519, i32 %456, i64 3, !dbg !58
  %521 = bitcast <4 x i32> %520 to <4 x float>, !dbg !58
  %522 = insertelement <4 x i32> poison, i32 %516, i64 0, !dbg !60
  %523 = insertelement <4 x i32> %522, i32 %489, i64 1, !dbg !60
  %524 = insertelement <4 x i32> %523, i32 %473, i64 2, !dbg !60
  %525 = insertelement <4 x i32> %524, i32 %457, i64 3, !dbg !60
  %526 = bitcast <4 x i32> %525 to <4 x float>, !dbg !60
  %527 = fsub <4 x float> %521, %526, !dbg !110
  %528 = insertelement <4 x float> poison, float %220, i64 0, !dbg !111
  %529 = insertelement <4 x float> %528, float %221, i64 1, !dbg !111
  %530 = insertelement <4 x float> %529, float %222, i64 2, !dbg !111
  %531 = insertelement <4 x float> %530, float %223, i64 3, !dbg !111
  %532 = fmul <4 x float> %527, %531, !dbg !111
  %533 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !67
  %534 = insertelement <4 x i32> poison, i32 %533, i64 0, !dbg !67
  %535 = insertelement <4 x i32> %534, i32 %490, i64 1, !dbg !67
  %536 = insertelement <4 x i32> %535, i32 %474, i64 2, !dbg !67
  %537 = insertelement <4 x i32> %536, i32 %458, i64 3, !dbg !67
  %538 = bitcast <4 x i32> %537 to <4 x float>, !dbg !67
  %539 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !69
  %540 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !78
  %541 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !80
  %542 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !87
  %543 = insertelement <4 x i32> poison, i32 %540, i64 0, !dbg !78
  %544 = insertelement <4 x i32> %543, i32 %492, i64 1, !dbg !78
  %545 = insertelement <4 x i32> %544, i32 %476, i64 2, !dbg !78
  %546 = insertelement <4 x i32> %545, i32 %460, i64 3, !dbg !78
  %547 = bitcast <4 x i32> %546 to <4 x float>, !dbg !78
  %548 = insertelement <4 x i32> poison, i32 %541, i64 0, !dbg !80
  %549 = insertelement <4 x i32> %548, i32 %493, i64 1, !dbg !80
  %550 = insertelement <4 x i32> %549, i32 %477, i64 2, !dbg !80
  %551 = insertelement <4 x i32> %550, i32 %461, i64 3, !dbg !80
  %552 = bitcast <4 x i32> %551 to <4 x float>, !dbg !80
  %553 = fsub <4 x float> %547, %552, !dbg !112
  %554 = insertelement <4 x float> poison, float %304, i64 0, !dbg !113
  %555 = insertelement <4 x float> %554, float %305, i64 1, !dbg !113
  %556 = insertelement <4 x float> %555, float %306, i64 2, !dbg !113
  %557 = insertelement <4 x float> %556, float %307, i64 3, !dbg !113
  %558 = fmul <4 x float> %553, %557, !dbg !113
  %559 = insertelement <4 x i32> poison, i32 %542, i64 0, !dbg !87
  %560 = insertelement <4 x i32> %559, i32 %494, i64 1, !dbg !87
  %561 = insertelement <4 x i32> %560, i32 %478, i64 2, !dbg !87
  %562 = insertelement <4 x i32> %561, i32 %462, i64 3, !dbg !87
  %563 = bitcast <4 x i32> %562 to <4 x float>, !dbg !87
  %564 = fmul <4 x float> %558, %563, !dbg !114
  %565 = extractvalue { i32, i32, i32, i32 } %311, 0, !dbg !89
  %566 = insertelement <4 x i32> poison, i32 %565, i64 0, !dbg !89
  %567 = insertelement <4 x i32> %566, i32 %495, i64 1, !dbg !89
  %568 = insertelement <4 x i32> %567, i32 %479, i64 2, !dbg !89
  %569 = insertelement <4 x i32> %568, i32 %463, i64 3, !dbg !89
  %570 = bitcast <4 x i32> %569 to <4 x float>, !dbg !89
  %571 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !95
  %572 = extractvalue { i32, i32, i32, i32 } %321, 0, !dbg !97
  %573 = extractvalue { i32, i32, i32, i32 } %389, 0, !dbg !104
  %574 = insertelement <4 x i32> poison, i32 %571, i64 0, !dbg !95
  %575 = insertelement <4 x i32> %574, i32 %496, i64 1, !dbg !95
  %576 = insertelement <4 x i32> %575, i32 %480, i64 2, !dbg !95
  %577 = insertelement <4 x i32> %576, i32 %464, i64 3, !dbg !95
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !95
  %579 = insertelement <4 x i32> poison, i32 %572, i64 0, !dbg !97
  %580 = insertelement <4 x i32> %579, i32 %497, i64 1, !dbg !97
  %581 = insertelement <4 x i32> %580, i32 %481, i64 2, !dbg !97
  %582 = insertelement <4 x i32> %581, i32 %465, i64 3, !dbg !97
  %583 = bitcast <4 x i32> %582 to <4 x float>, !dbg !97
  %584 = fsub <4 x float> %578, %583, !dbg !115
  %585 = insertelement <4 x float> poison, float %384, i64 0, !dbg !116
  %586 = insertelement <4 x float> %585, float %385, i64 1, !dbg !116
  %587 = insertelement <4 x float> %586, float %386, i64 2, !dbg !116
  %588 = insertelement <4 x float> %587, float %387, i64 3, !dbg !116
  %589 = fmul <4 x float> %584, %588, !dbg !116
  %590 = insertelement <4 x i32> poison, i32 %573, i64 0, !dbg !104
  %591 = insertelement <4 x i32> %590, i32 %498, i64 1, !dbg !104
  %592 = insertelement <4 x i32> %591, i32 %482, i64 2, !dbg !104
  %593 = insertelement <4 x i32> %592, i32 %466, i64 3, !dbg !104
  %594 = bitcast <4 x i32> %593 to <4 x float>, !dbg !104
  %595 = fmul <4 x float> %589, %594, !dbg !117
  %596 = extractvalue { i32, i32, i32, i32 } %391, 0, !dbg !106
  %597 = insertelement <4 x i32> poison, i32 %596, i64 0, !dbg !106
  %598 = insertelement <4 x i32> %597, i32 %499, i64 1, !dbg !106
  %599 = insertelement <4 x i32> %598, i32 %483, i64 2, !dbg !106
  %600 = insertelement <4 x i32> %599, i32 %467, i64 3, !dbg !106
  %601 = bitcast <4 x i32> %600 to <4 x float>, !dbg !106
  %602 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %603 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %604 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %605 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %606 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !29
  %607 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !29
  %608 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !29
  %609 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !29
  %610 = and i32 %32, 127, !dbg !12
  %611 = or disjoint i32 %610, 384, !dbg !12
  %612 = or disjoint i32 %31, %611, !dbg !13
  %613 = or disjoint i32 %610, 256, !dbg !12
  %614 = or disjoint i32 %31, %613, !dbg !13
  %615 = or disjoint i32 %610, 128, !dbg !12
  %616 = or disjoint i32 %31, %615, !dbg !13
  %617 = or disjoint i32 %31, %610, !dbg !13
  %618 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i82) #4, !dbg !118
  %619 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i87) #4, !dbg !118
  %620 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i92) #4, !dbg !118
  %621 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i97) #4, !dbg !118
  tail call void @llvm.nvvm.barrier0(), !dbg !119
  %622 = mul i32 %617, 25, !dbg !120
  %623 = mul i32 %616, 25, !dbg !120
  %624 = mul i32 %614, 25, !dbg !120
  %625 = mul i32 %612, 25, !dbg !120
  %626 = add i32 %622, %36, !dbg !121
  %627 = add i32 %623, %36, !dbg !121
  %628 = add i32 %624, %36, !dbg !121
  %629 = add i32 %625, %36, !dbg !121
  %630 = sext i32 %626 to i64, !dbg !122
  %631 = getelementptr float, ptr addrspace(1) %0, i64 %630, !dbg !122
  %632 = sext i32 %627 to i64, !dbg !122
  %633 = getelementptr float, ptr addrspace(1) %0, i64 %632, !dbg !122
  %634 = sext i32 %628 to i64, !dbg !122
  %635 = getelementptr float, ptr addrspace(1) %0, i64 %634, !dbg !122
  %636 = sext i32 %629 to i64, !dbg !122
  %637 = getelementptr float, ptr addrspace(1) %0, i64 %636, !dbg !122
  %.idx = shl nuw nsw i32 %34, 3, !dbg !123
  %638 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !123
  %639 = shl nuw nsw i32 %34, 1, !dbg !123
  %640 = or disjoint i32 %639, 2, !dbg !123
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !123
  %642 = or disjoint i32 %639, 4, !dbg !123
  %643 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %642, !dbg !123
  %644 = or disjoint i32 %639, 6, !dbg !123
  %645 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %644, !dbg !123
  %.idx1 = shl nuw nsw i32 %610, 3, !dbg !123
  %646 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !123
  %.idx2 = shl nuw nsw i32 %615, 3, !dbg !123
  %647 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !123
  %.idx3 = shl nuw nsw i32 %613, 3, !dbg !123
  %648 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !123
  %.idx4 = shl nuw nsw i32 %611, 3, !dbg !123
  %649 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !123
  %650 = getelementptr i1, ptr addrspace(1) %26, i64 %44, !dbg !124
  %651 = insertelement <4 x i32> poison, i32 %450, i64 0, !dbg !23
  %652 = insertelement <4 x i32> %651, i32 %448, i64 1, !dbg !23
  %653 = insertelement <4 x i32> %652, i32 %446, i64 2, !dbg !23
  %654 = insertelement <4 x i32> %653, i32 %444, i64 3, !dbg !23
  %655 = bitcast <4 x i32> %654 to <4 x float>, !dbg !23
  %656 = insertelement <4 x i32> poison, i32 %451, i64 0, !dbg !25
  %657 = insertelement <4 x i32> %656, i32 %449, i64 1, !dbg !25
  %658 = insertelement <4 x i32> %657, i32 %447, i64 2, !dbg !25
  %659 = insertelement <4 x i32> %658, i32 %445, i64 3, !dbg !25
  %660 = bitcast <4 x i32> %659 to <4 x float>, !dbg !25
  %661 = fsub <4 x float> %655, %660, !dbg !125
  %662 = insertelement <4 x float> poison, float %137, i64 0, !dbg !126
  %663 = insertelement <4 x float> %662, float %138, i64 1, !dbg !126
  %664 = insertelement <4 x float> %663, float %139, i64 2, !dbg !126
  %665 = insertelement <4 x float> %664, float %140, i64 3, !dbg !126
  %666 = fmul <4 x float> %512, %665, !dbg !126
  %667 = insertelement <4 x i32> poison, i32 %513, i64 0, !dbg !48
  %668 = insertelement <4 x i32> %667, i32 %486, i64 1, !dbg !48
  %669 = insertelement <4 x i32> %668, i32 %470, i64 2, !dbg !48
  %670 = insertelement <4 x i32> %669, i32 %454, i64 3, !dbg !48
  %671 = bitcast <4 x i32> %670 to <4 x float>, !dbg !48
  %672 = fmul <4 x float> %666, %671, !dbg !127
  %673 = insertelement <4 x i32> poison, i32 %514, i64 0, !dbg !50
  %674 = insertelement <4 x i32> %673, i32 %487, i64 1, !dbg !50
  %675 = insertelement <4 x i32> %674, i32 %471, i64 2, !dbg !50
  %676 = insertelement <4 x i32> %675, i32 %455, i64 3, !dbg !50
  %677 = bitcast <4 x i32> %676 to <4 x float>, !dbg !50
  %678 = fadd <4 x float> %672, %677, !dbg !128
  %679 = fcmp olt <4 x float> %678, zeroinitializer, !dbg !129
  %680 = select <4 x i1> %679, <4 x float> zeroinitializer, <4 x float> %678, !dbg !133
  %681 = fmul <4 x float> %532, %538, !dbg !134
  %682 = insertelement <4 x i32> poison, i32 %539, i64 0, !dbg !69
  %683 = insertelement <4 x i32> %682, i32 %491, i64 1, !dbg !69
  %684 = insertelement <4 x i32> %683, i32 %475, i64 2, !dbg !69
  %685 = insertelement <4 x i32> %684, i32 %459, i64 3, !dbg !69
  %686 = bitcast <4 x i32> %685 to <4 x float>, !dbg !69
  %687 = fadd <4 x float> %681, %686, !dbg !135
  %688 = fcmp olt <4 x float> %687, zeroinitializer, !dbg !136
  %689 = select <4 x i1> %688, <4 x float> zeroinitializer, <4 x float> %687, !dbg !138
  %690 = fadd <4 x float> %564, %570, !dbg !139
  %691 = fcmp olt <4 x float> %690, zeroinitializer, !dbg !140
  %692 = select <4 x i1> %691, <4 x float> zeroinitializer, <4 x float> %690, !dbg !142
  %693 = fadd <4 x float> %595, %601, !dbg !143
  %694 = fcmp olt <4 x float> %693, zeroinitializer, !dbg !144
  %695 = select <4 x i1> %694, <4 x float> zeroinitializer, <4 x float> %693, !dbg !146
  %696 = insertelement <4 x i1> poison, i1 %312, i64 0, !dbg !147
  %697 = shufflevector <4 x i1> %696, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !147
  %698 = select <4 x i1> %697, <4 x float> %695, <4 x float> zeroinitializer, !dbg !147
  %699 = insertelement <4 x i1> poison, i1 %229, i64 0, !dbg !148
  %700 = shufflevector <4 x i1> %699, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !148
  %701 = select <4 x i1> %700, <4 x float> %692, <4 x float> %698, !dbg !148
  %702 = insertelement <4 x i1> poison, i1 %146, i64 0, !dbg !148
  %703 = shufflevector <4 x i1> %702, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !148
  %704 = select <4 x i1> %703, <4 x float> %689, <4 x float> %701, !dbg !148
  %705 = insertelement <4 x i1> poison, i1 %64, i64 0, !dbg !148
  %706 = shufflevector <4 x i1> %705, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !148
  %707 = select <4 x i1> %706, <4 x float> %680, <4 x float> %704, !dbg !148
  %708 = insertelement <4 x i32> poison, i32 %605, i64 0, !dbg !31
  %709 = insertelement <4 x i32> %708, i32 %604, i64 1, !dbg !31
  %710 = insertelement <4 x i32> %709, i32 %603, i64 2, !dbg !31
  %711 = insertelement <4 x i32> %710, i32 %602, i64 3, !dbg !31
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !31
  %713 = insertelement <4 x i32> poison, i32 %609, i64 0, !dbg !29
  %714 = insertelement <4 x i32> %713, i32 %608, i64 1, !dbg !29
  %715 = insertelement <4 x i32> %714, i32 %607, i64 2, !dbg !29
  %716 = insertelement <4 x i32> %715, i32 %606, i64 3, !dbg !29
  %717 = bitcast <4 x i32> %716 to <4 x float>, !dbg !29
  %718 = insertelement <4 x float> poison, float %618, i64 0, !dbg !149
  %719 = insertelement <4 x float> %718, float %619, i64 1, !dbg !149
  %720 = insertelement <4 x float> %719, float %620, i64 2, !dbg !149
  %721 = insertelement <4 x float> %720, float %621, i64 3, !dbg !149
  %722 = fmul <4 x float> %661, %721, !dbg !149
  %723 = fmul <4 x float> %722, %717, !dbg !150
  %724 = fadd <4 x float> %723, %712, !dbg !151
  %725 = fadd <4 x float> %707, %724, !dbg !152
  %726 = fcmp olt <4 x float> %725, zeroinitializer, !dbg !153
  %727 = select <4 x i1> %726, <4 x float> zeroinitializer, <4 x float> %725, !dbg !155
  %728 = fcmp ole <4 x float> %727, zeroinitializer, !dbg !156
  %729 = extractelement <4 x float> %727, i64 0, !dbg !123
  %730 = bitcast float %729 to <1 x i32>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %730, i1 true) #4, !dbg !123
  %731 = extractelement <4 x float> %727, i64 1, !dbg !123
  %732 = bitcast float %731 to <1 x i32>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %732, i1 true) #4, !dbg !123
  %733 = extractelement <4 x float> %727, i64 2, !dbg !123
  %734 = bitcast float %733 to <1 x i32>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %643, <1 x i32> %734, i1 true) #4, !dbg !123
  %735 = extractelement <4 x float> %727, i64 3, !dbg !123
  %736 = bitcast float %735 to <1 x i32>, !dbg !123
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %645, <1 x i32> %736, i1 true) #4, !dbg !123
  tail call void @llvm.nvvm.barrier0(), !dbg !123
  %737 = load i32, ptr addrspace(3) %646, align 8, !dbg !123
  %738 = load i32, ptr addrspace(3) %647, align 8, !dbg !123
  %739 = load i32, ptr addrspace(3) %648, align 8, !dbg !123
  %740 = load i32, ptr addrspace(3) %649, align 8, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %737, ptr addrspace(1) %631, i1 %37) #4, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %738, ptr addrspace(1) %633, i1 %37) #4, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %739, ptr addrspace(1) %635, i1 %37) #4, !dbg !123
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %740, ptr addrspace(1) %637, i1 %37) #4, !dbg !123
  %741 = zext <4 x i1> %728 to <4 x i8>, !dbg !157
  %742 = bitcast <4 x i8> %741 to i32, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %742, ptr addrspace(1) %650, i1 %37) #4, !dbg !157
  ret void, !dbg !158
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cififutfjqhsllf6wp4f3p7i5oy2dnu4fxxn3v7bsdsshnjlsrda.py", directory: "inductor_cache/if")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_cat_relu_threshold_backward_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 46, scope: !7)
!22 = !DILocation(line: 32, column: 32, scope: !7)
!23 = !DILocation(line: 32, column: 57, scope: !7)
!24 = !DILocation(line: 33, column: 33, scope: !7)
!25 = !DILocation(line: 33, column: 38, scope: !7)
!26 = !DILocation(line: 34, column: 33, scope: !7)
!27 = !DILocation(line: 34, column: 38, scope: !7)
!28 = !DILocation(line: 35, column: 33, scope: !7)
!29 = !DILocation(line: 35, column: 38, scope: !7)
!30 = !DILocation(line: 36, column: 33, scope: !7)
!31 = !DILocation(line: 36, column: 38, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 34, scope: !7)
!34 = !DILocation(line: 42, column: 44, scope: !7)
!35 = !DILocation(line: 42, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 50, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 63, scope: !7)
!39 = !DILocation(line: 42, column: 56, scope: !7)
!40 = !DILocation(line: 43, column: 30, scope: !7)
!41 = !DILocation(line: 43, column: 70, scope: !7)
!42 = !DILocation(line: 45, column: 30, scope: !7)
!43 = !DILocation(line: 45, column: 70, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 27, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 31, scope: !7)
!48 = !DILocation(line: 54, column: 71, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 71, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 66, column: 35, scope: !7)
!53 = !DILocation(line: 66, column: 45, scope: !7)
!54 = !DILocation(line: 66, column: 40, scope: !7)
!55 = !DILocation(line: 66, column: 51, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 74, scope: !7)
!58 = !DILocation(line: 66, column: 66, scope: !7)
!59 = !DILocation(line: 67, column: 31, scope: !7)
!60 = !DILocation(line: 67, column: 80, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 80, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 27, scope: !7)
!65 = !DILocation(line: 74, column: 20, scope: !7)
!66 = !DILocation(line: 78, column: 31, scope: !7)
!67 = !DILocation(line: 78, column: 80, scope: !7)
!68 = !DILocation(line: 80, column: 31, scope: !7)
!69 = !DILocation(line: 80, column: 80, scope: !7)
!70 = !DILocation(line: 89, column: 20, scope: !7)
!71 = !DILocation(line: 90, column: 35, scope: !7)
!72 = !DILocation(line: 90, column: 45, scope: !7)
!73 = !DILocation(line: 90, column: 40, scope: !7)
!74 = !DILocation(line: 90, column: 60, scope: !7)
!75 = !DILocation(line: 90, column: 51, scope: !7)
!76 = !DILocation(line: 90, column: 32, scope: !7)
!77 = !DILocation(line: 90, column: 74, scope: !7)
!78 = !DILocation(line: 90, column: 66, scope: !7)
!79 = !DILocation(line: 91, column: 32, scope: !7)
!80 = !DILocation(line: 91, column: 81, scope: !7)
!81 = !DILocation(line: 93, column: 32, scope: !7)
!82 = !DILocation(line: 93, column: 81, scope: !7)
!83 = !DILocation(line: 95, column: 20, scope: !7)
!84 = !DILocation(line: 96, column: 27, scope: !7)
!85 = !DILocation(line: 98, column: 20, scope: !7)
!86 = !DILocation(line: 102, column: 32, scope: !7)
!87 = !DILocation(line: 102, column: 81, scope: !7)
!88 = !DILocation(line: 104, column: 32, scope: !7)
!89 = !DILocation(line: 104, column: 81, scope: !7)
!90 = !DILocation(line: 110, column: 20, scope: !7)
!91 = !DILocation(line: 113, column: 60, scope: !7)
!92 = !DILocation(line: 113, column: 51, scope: !7)
!93 = !DILocation(line: 113, column: 32, scope: !7)
!94 = !DILocation(line: 113, column: 74, scope: !7)
!95 = !DILocation(line: 113, column: 66, scope: !7)
!96 = !DILocation(line: 114, column: 32, scope: !7)
!97 = !DILocation(line: 114, column: 81, scope: !7)
!98 = !DILocation(line: 116, column: 32, scope: !7)
!99 = !DILocation(line: 116, column: 81, scope: !7)
!100 = !DILocation(line: 118, column: 20, scope: !7)
!101 = !DILocation(line: 119, column: 27, scope: !7)
!102 = !DILocation(line: 121, column: 20, scope: !7)
!103 = !DILocation(line: 125, column: 32, scope: !7)
!104 = !DILocation(line: 125, column: 81, scope: !7)
!105 = !DILocation(line: 127, column: 32, scope: !7)
!106 = !DILocation(line: 127, column: 81, scope: !7)
!107 = !DILocation(line: 138, column: 22, scope: !7)
!108 = !DILocation(line: 139, column: 28, scope: !7)
!109 = !DILocation(line: 44, column: 18, scope: !7)
!110 = !DILocation(line: 68, column: 20, scope: !7)
!111 = !DILocation(line: 77, column: 20, scope: !7)
!112 = !DILocation(line: 92, column: 20, scope: !7)
!113 = !DILocation(line: 101, column: 20, scope: !7)
!114 = !DILocation(line: 103, column: 20, scope: !7)
!115 = !DILocation(line: 115, column: 20, scope: !7)
!116 = !DILocation(line: 124, column: 20, scope: !7)
!117 = !DILocation(line: 126, column: 20, scope: !7)
!118 = !DILocation(line: 141, column: 22, scope: !7)
!119 = !DILocation(line: 152, column: 4, scope: !7)
!120 = !DILocation(line: 153, column: 36, scope: !7)
!121 = !DILocation(line: 153, column: 33, scope: !7)
!122 = !DILocation(line: 153, column: 28, scope: !7)
!123 = !DILocation(line: 153, column: 49, scope: !7)
!124 = !DILocation(line: 154, column: 25, scope: !7)
!125 = !DILocation(line: 136, column: 21, scope: !7)
!126 = !DILocation(line: 53, column: 19, scope: !7)
!127 = !DILocation(line: 55, column: 20, scope: !7)
!128 = !DILocation(line: 57, column: 20, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !130, inlinedAt: !132)
!130 = distinct !DILexicalBlockFile(scope: !7, file: !131, discriminator: 0)
!131 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!132 = !DILocation(line: 59, column: 42, scope: !7)
!133 = !DILocation(line: 121, column: 29, scope: !130, inlinedAt: !132)
!134 = !DILocation(line: 79, column: 20, scope: !7)
!135 = !DILocation(line: 81, column: 20, scope: !7)
!136 = !DILocation(line: 118, column: 15, scope: !130, inlinedAt: !137)
!137 = !DILocation(line: 83, column: 42, scope: !7)
!138 = !DILocation(line: 121, column: 29, scope: !130, inlinedAt: !137)
!139 = !DILocation(line: 105, column: 20, scope: !7)
!140 = !DILocation(line: 118, column: 15, scope: !130, inlinedAt: !141)
!141 = !DILocation(line: 107, column: 42, scope: !7)
!142 = !DILocation(line: 121, column: 29, scope: !130, inlinedAt: !141)
!143 = !DILocation(line: 128, column: 20, scope: !7)
!144 = !DILocation(line: 118, column: 15, scope: !130, inlinedAt: !145)
!145 = !DILocation(line: 130, column: 42, scope: !7)
!146 = !DILocation(line: 121, column: 29, scope: !130, inlinedAt: !145)
!147 = !DILocation(line: 132, column: 35, scope: !7)
!148 = !DILocation(line: 0, scope: !7)
!149 = !DILocation(line: 144, column: 22, scope: !7)
!150 = !DILocation(line: 145, column: 22, scope: !7)
!151 = !DILocation(line: 146, column: 22, scope: !7)
!152 = !DILocation(line: 147, column: 21, scope: !7)
!153 = !DILocation(line: 118, column: 15, scope: !130, inlinedAt: !154)
!154 = !DILocation(line: 149, column: 44, scope: !7)
!155 = !DILocation(line: 121, column: 29, scope: !130, inlinedAt: !154)
!156 = !DILocation(line: 151, column: 23, scope: !7)
!157 = !DILocation(line: 154, column: 58, scope: !7)
!158 = !DILocation(line: 154, column: 4, scope: !7)
