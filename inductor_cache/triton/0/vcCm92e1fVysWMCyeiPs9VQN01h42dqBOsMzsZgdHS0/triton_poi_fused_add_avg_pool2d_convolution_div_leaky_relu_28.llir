; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 512, !dbg !14
  %13 = mul i32 %12, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = srem i32 %12, 4, !dbg !16
  %15 = sdiv i32 %11, 2048, !dbg !17
  %16 = shl nsw i32 %14, 10, !dbg !18
  %17 = shl i32 %15, 13, !dbg !19
  %18 = add i32 %17, %.decomposed, !dbg !20
  %19 = add i32 %18, %16, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !22
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !23
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !23
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !23
  %25 = add i32 %18, 512, !dbg !24
  %26 = add i32 %25, %16, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !26
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !27
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !27
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !27
  %32 = add i32 %18, 4096, !dbg !28
  %33 = add i32 %32, %16, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !30
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !31
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !31
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !31
  %39 = add i32 %18, 4608, !dbg !32
  %40 = add i32 %39, %16, !dbg !33
  %41 = sext i32 %40 to i64, !dbg !34
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !34
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !35
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !35
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !35
  %46 = sext i32 %11 to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !36
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !37
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !37
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !37
  %51 = sext i32 %.decomposed to i64, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !39
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %56 = getelementptr i1, ptr addrspace(1) %3, i64 %46, !dbg !40
  %57 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !23
  %58 = insertelement <2 x i32> %57, i32 %24, i64 1, !dbg !23
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !23
  %60 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !27
  %61 = insertelement <2 x i32> %60, i32 %31, i64 1, !dbg !27
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !27
  %63 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !31
  %64 = insertelement <2 x i32> %63, i32 %38, i64 1, !dbg !31
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !31
  %66 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !35
  %67 = insertelement <2 x i32> %66, i32 %45, i64 1, !dbg !35
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !35
  %69 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !37
  %70 = insertelement <2 x i32> %69, i32 %50, i64 1, !dbg !37
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !37
  %72 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !39
  %73 = insertelement <2 x i32> %72, i32 %55, i64 1, !dbg !39
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !39
  %75 = fadd <2 x float> %59, %62, !dbg !41
  %76 = fadd <2 x float> %75, %65, !dbg !42
  %77 = fadd <2 x float> %76, %68, !dbg !43
  %78 = fmul <2 x float> %77, splat (float 2.500000e-01), !dbg !44
  %79 = fadd <2 x float> %71, %74, !dbg !45
  %80 = fadd <2 x float> %78, %79, !dbg !46
  %81 = fmul <2 x float> %80, splat (float 0x3FE6A09E60000000), !dbg !47
  %82 = fcmp ogt <2 x float> %81, zeroinitializer, !dbg !48
  %83 = extractelement <2 x float> %81, i64 0, !dbg !49
  %84 = fmul float %83, 0x3FC99999A0000000, !dbg !50
  %85 = extractelement <2 x float> %81, i64 1, !dbg !49
  %86 = fmul float %85, 0x3FC99999A0000000, !dbg !50
  %87 = extractelement <2 x i1> %82, i64 0, !dbg !49
  %88 = select i1 %87, float %83, float %84, !dbg !49
  %89 = extractelement <2 x i1> %82, i64 1, !dbg !49
  %90 = select i1 %89, float %85, float %86, !dbg !49
  %91 = zext <2 x i1> %82 to <2 x i8>, !dbg !51
  %92 = bitcast <2 x i8> %91 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %92, ptr addrspace(1) %56, i1 true) #1, !dbg !51
  %93 = bitcast float %88 to i32, !dbg !52
  %94 = bitcast float %90 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %47, i1 true) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbp5alsg26eauvaszbo47fuqrqzhou75p6qko2vsgpekijhgou6d.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_28", linkageName: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 62, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 62, scope: !7)
!36 = !DILocation(line: 32, column: 34, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 25, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 19, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 35, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 37, scope: !7)
!52 = !DILocation(line: 49, column: 40, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
