; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@__cudart_i2opi_f = internal unnamed_addr addrspace(1) constant [6 x i32] [i32 1011060801, i32 -614296167, i32 -181084736, i32 -64530479, i32 1313084713, i32 -1560706194], align 4

define void @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %result.i.i.i.i = alloca [7 x i32], align 4
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = icmp slt i32 %14, 256, !dbg !14
  %16 = sext i32 %14 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %15) #4, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %15) #4, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %15) #4, !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %16, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #4, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #4, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = fadd float %23, %25, !dbg !26
  %32 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %33 = insertelement <2 x i32> %32, i32 %27, i64 1, !dbg !16
  %34 = bitcast <2 x i32> %33 to <2 x float>, !dbg !16
  %35 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !18
  %36 = insertelement <2 x i32> %35, i32 %28, i64 1, !dbg !18
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !18
  %38 = fadd <2 x float> %34, %37, !dbg !27
  %39 = extractelement <2 x float> %38, i64 0, !dbg !28
  %40 = fadd float %39, %31, !dbg !28
  %41 = extractelement <2 x float> %38, i64 1, !dbg !29
  %42 = fadd float %40, %41, !dbg !29
  %43 = fadd float %30, 0x3E112E0BE0000000, !dbg !30
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %43) #4, !dbg !31
  %45 = fmul float %42, %30, !dbg !32
  call void @llvm.lifetime.start.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !33
  %46 = fmul float %45, 0x3FE45F3060000000, !dbg !33
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %47, 0, !dbg !33
  %48 = tail call i32 @llvm.nvvm.f2i.rn.ftz(float %46) #4, !dbg !33
  %49 = tail call i32 @llvm.nvvm.f2i.rn(float %46) #4, !dbg !33
  %.01.i = select i1 %.not.i, i32 %49, i32 %48, !dbg !33
  %50 = sitofp i32 %.01.i to float, !dbg !33
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not15.i = icmp eq i32 %51, 0, !dbg !33
  %52 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %50, float 0xBFF921FB40000000, float %45) #4, !dbg !33
  %53 = tail call float @llvm.nvvm.fma.rn.f(float %50, float 0xBFF921FB40000000, float %45) #4, !dbg !33
  %.02.i = select i1 %.not15.i, float %53, float %52, !dbg !33
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not16.i = icmp eq i32 %54, 0, !dbg !33
  %55 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %50, float 0xBE74442D00000000, float %.02.i) #4, !dbg !33
  %56 = tail call float @llvm.nvvm.fma.rn.f(float %50, float 0xBE74442D00000000, float %.02.i) #4, !dbg !33
  %.03.i = select i1 %.not16.i, float %56, float %55, !dbg !33
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not17.i = icmp eq i32 %57, 0, !dbg !33
  %58 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %50, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !33
  %59 = tail call float @llvm.nvvm.fma.rn.f(float %50, float 0xBCF84698A0000000, float %.03.i) #4, !dbg !33
  %.04.i = select i1 %.not17.i, float %59, float %58, !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not18.i = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call float @llvm.nvvm.fabs.ftz.f(float %45) #4, !dbg !33
  %62 = tail call float @llvm.nvvm.fabs.f(float %45) #4, !dbg !33
  %.06.i = select i1 %.not18.i, float %62, float %61, !dbg !33
  %63 = fcmp ult float %.06.i, 1.056150e+05, !dbg !33
  br i1 %63, label %__internal_trig_reduction_kernel.exit.i.i, label %__nv_isinff.exit.i.i.i, !dbg !33

__nv_isinff.exit.i.i.i:                           ; preds = %9
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not19.i = icmp eq i32 %64, 0, !dbg !33
  %.07.i = select i1 %.not19.i, float %62, float %61, !dbg !33
  %65 = fcmp oeq float %.07.i, 0x7FF0000000000000, !dbg !33
  br i1 %65, label %__nv_fmul_rn.exit.i.i.i, label %69, !dbg !33

__nv_fmul_rn.exit.i.i.i:                          ; preds = %__nv_isinff.exit.i.i.i
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not27.i = icmp eq i32 %66, 0, !dbg !33
  %67 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %45, float 0.000000e+00) #4, !dbg !33
  %68 = tail call float @llvm.nvvm.mul.rn.f(float %45, float 0.000000e+00) #4, !dbg !33
  %.08.i = select i1 %.not27.i, float %68, float %67, !dbg !33
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !33

69:                                               ; preds = %__nv_isinff.exit.i.i.i
  %70 = bitcast float %45 to i32, !dbg !33
  %71 = lshr i32 %70, 23, !dbg !33
  %72 = and i32 %71, 224, !dbg !33
  %73 = add nsw i32 %72, -128, !dbg !33
  %74 = shl i32 %70, 8, !dbg !33
  %75 = or i32 %74, -2147483648, !dbg !33
  %76 = lshr exact i32 %73, 5, !dbg !33
  br label %77, !dbg !33

77:                                               ; preds = %69, %77
  %indvars.iv = phi i64 [ 0, %69 ], [ %indvars.iv.next, %77 ]
  %hi.i.i.i.0.i1 = phi i32 [ 0, %69 ], [ %82, %77 ]
  %78 = getelementptr inbounds [6 x i32], ptr addrspace(1) @__cudart_i2opi_f, i64 0, i64 %indvars.iv, !dbg !33
  %79 = load i32, ptr addrspace(1) %78, align 4, !dbg !33
  %80 = tail call { i32, i32 } asm "{\0A\09mad.lo.cc.u32   $0, $2, $3, $4;\0A\09madc.hi.u32     $1, $2, $3,  0;\0A\09}", "=r,=r,r,r,r"(i32 %79, i32 %75, i32 %hi.i.i.i.0.i1) #5, !dbg !33, !srcloc !34
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !33
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !33
  %83 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %indvars.iv, !dbg !33
  store i32 %81, ptr %83, align 4, !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !33
  %exitcond.not = icmp eq i64 %indvars.iv.next, 6, !dbg !33
  br i1 %exitcond.not, label %84, label %77, !dbg !33, !llvm.loop !35

84:                                               ; preds = %77
  %85 = getelementptr inbounds i8, ptr %result.i.i.i.i, i64 24, !dbg !33
  store i32 %82, ptr %85, align 4, !dbg !33
  %86 = and i32 %71, 31, !dbg !33
  %87 = sub nsw i32 6, %76, !dbg !33
  %88 = sext i32 %87 to i64, !dbg !33
  %89 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %88, !dbg !33
  %90 = load i32, ptr %89, align 4, !dbg !33
  %91 = sub nsw i32 5, %76, !dbg !33
  %92 = sext i32 %91 to i64, !dbg !33
  %93 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %92, !dbg !33
  %94 = load i32, ptr %93, align 4, !dbg !33
  %.not20.i = icmp eq i32 %86, 0, !dbg !33
  br i1 %.not20.i, label %__internal_trig_reduction_slowpath.exit.i.i.i, label %95, !dbg !33

95:                                               ; preds = %84
  %96 = sub nsw i32 4, %76, !dbg !33
  %97 = sub nuw nsw i32 32, %86, !dbg !33
  %98 = shl i32 %90, %86, !dbg !33
  %99 = lshr i32 %94, %97, !dbg !33
  %100 = add i32 %99, %98, !dbg !33
  %101 = shl i32 %94, %86, !dbg !33
  %102 = sext i32 %96 to i64, !dbg !33
  %103 = getelementptr inbounds [7 x i32], ptr %result.i.i.i.i, i64 0, i64 %102, !dbg !33
  %104 = load i32, ptr %103, align 4, !dbg !33
  %105 = lshr i32 %104, %97, !dbg !33
  %106 = add i32 %105, %101, !dbg !33
  br label %__internal_trig_reduction_slowpath.exit.i.i.i, !dbg !33

__internal_trig_reduction_slowpath.exit.i.i.i:    ; preds = %95, %84
  %hi.i.i.i.1.i = phi i32 [ %100, %95 ], [ %90, %84 ], !dbg !33
  %lo.i.i.i.0.i = phi i32 [ %106, %95 ], [ %94, %84 ], !dbg !33
  %107 = lshr i32 %hi.i.i.i.1.i, 30, !dbg !33
  %108 = tail call i32 @llvm.fshl.i32(i32 %hi.i.i.i.1.i, i32 %lo.i.i.i.0.i, i32 2), !dbg !33
  %109 = shl i32 %lo.i.i.i.0.i, 2, !dbg !33
  %110 = lshr i32 %108, 31, !dbg !33
  %111 = add nuw nsw i32 %110, %107, !dbg !33
  %112 = sub nsw i32 0, %111, !dbg !33
  %.not2123.i = icmp slt i32 %70, 0, !dbg !33
  %spec.select.i = select i1 %.not2123.i, i32 %112, i32 %111, !dbg !33
  %113 = xor i32 %108, %70, !dbg !33
  %.lobit.i = ashr i32 %108, 31, !dbg !33
  %hi.i.i.i.2.i = xor i32 %.lobit.i, %108, !dbg !33
  %lo.i.i.i.1.i = xor i32 %.lobit.i, %109, !dbg !33
  %114 = zext i32 %hi.i.i.i.2.i to i64, !dbg !33
  %115 = shl nuw i64 %114, 32, !dbg !33
  %116 = zext i32 %lo.i.i.i.1.i to i64, !dbg !33
  %117 = or disjoint i64 %115, %116, !dbg !33
  %118 = sitofp i64 %117 to double, !dbg !33
  %119 = fmul double %118, 0x3BF921FB54442D19, !dbg !33
  %120 = fptrunc double %119 to float, !dbg !33
  %121 = fneg float %120, !dbg !33
  %.not2526.i = icmp slt i32 %113, 0, !dbg !33
  %r.i.i.i.0.i = select i1 %.not2526.i, float %121, float %120, !dbg !33
  br label %__internal_trig_reduction_kernel.exit.i.i, !dbg !33

__internal_trig_reduction_kernel.exit.i.i:        ; preds = %__internal_trig_reduction_slowpath.exit.i.i.i, %__nv_fmul_rn.exit.i.i.i, %9
  %i.i.1.i = phi i32 [ %.01.i, %9 ], [ 0, %__nv_fmul_rn.exit.i.i.i ], [ %spec.select.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !33
  %t.i.i.1.i = phi float [ %.04.i, %9 ], [ %.08.i, %__nv_fmul_rn.exit.i.i.i ], [ %r.i.i.i.0.i, %__internal_trig_reduction_slowpath.exit.i.i.i ], !dbg !33
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not28.i = icmp eq i32 %122, 0, !dbg !33
  %123 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !33
  %124 = tail call float @llvm.nvvm.mul.rn.f(float %t.i.i.1.i, float %t.i.i.1.i) #4, !dbg !33
  %.011.i = select i1 %.not28.i, float %124, float %123, !dbg !33
  %125 = and i32 %i.i.1.i, 1, !dbg !33
  %.not29.i = icmp eq i32 %125, 0, !dbg !33
  %126 = select i1 %.not29.i, float %t.i.i.1.i, float 1.000000e+00, !dbg !33
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not30.i = icmp eq i32 %127, 0, !dbg !33
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %126, float 0.000000e+00) #4, !dbg !33
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %126, float 0.000000e+00) #4, !dbg !33
  %.012.i = select i1 %.not30.i, float %129, float %128, !dbg !33
  br i1 %.not29.i, label %__internal_fmad.exit2.i.i.i, label %__internal_fmad.exit1.i.i.i, !dbg !33

__internal_fmad.exit1.i.i.i:                      ; preds = %__internal_trig_reduction_kernel.exit.i.i
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not31.i = icmp eq i32 %130, 0, !dbg !33
  %131 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !33
  %132 = tail call float @llvm.nvvm.fma.rn.f(float 0x3EF9758000000000, float %.011.i, float 0xBF56C0FDA0000000) #4, !dbg !33
  %.013.i = select i1 %.not31.i, float %132, float %131, !dbg !33
  br label %__internal_fmad.exit2.i.i.i, !dbg !33

__internal_fmad.exit2.i.i.i:                      ; preds = %__internal_fmad.exit1.i.i.i, %__internal_trig_reduction_kernel.exit.i.i
  %133 = phi float [ 0xBFDFFFFFE0000000, %__internal_fmad.exit1.i.i.i ], [ 0xBFC5555500000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !33
  %134 = phi float [ 0x3FA5555760000000, %__internal_fmad.exit1.i.i.i ], [ 0x3F8110BC80000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !33
  %135 = phi float [ %.013.i, %__internal_fmad.exit1.i.i.i ], [ 0xBF29A82A60000000, %__internal_trig_reduction_kernel.exit.i.i ], !dbg !33
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not32.i = icmp eq i32 %136, 0, !dbg !33
  %137 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %135, float %.011.i, float %134) #4, !dbg !33
  %138 = tail call float @llvm.nvvm.fma.rn.f(float %135, float %.011.i, float %134) #4, !dbg !33
  %.010.i = select i1 %.not32.i, float %138, float %137, !dbg !33
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not33.i = icmp eq i32 %139, 0, !dbg !33
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %.011.i, float %133) #4, !dbg !33
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %.011.i, float %133) #4, !dbg !33
  %.09.i = select i1 %.not33.i, float %141, float %140, !dbg !33
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not34.i = icmp eq i32 %142, 0, !dbg !33
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.012.i, float %126) #4, !dbg !33
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.012.i, float %126) #4, !dbg !33
  %.05.i = select i1 %.not34.i, float %144, float %143, !dbg !33
  %145 = and i32 %i.i.1.i, 2, !dbg !33
  %.not35.i = icmp eq i32 %145, 0, !dbg !33
  br i1 %.not35.i, label %__nv_sinf.exit, label %__internal_fmad.exit5.i.i.i, !dbg !33

__internal_fmad.exit5.i.i.i:                      ; preds = %__internal_fmad.exit2.i.i.i
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not36.i = icmp eq i32 %146, 0, !dbg !33
  %147 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !33
  %148 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float -1.000000e+00, float 0.000000e+00) #4, !dbg !33
  %.0.i = select i1 %.not36.i, float %148, float %147, !dbg !33
  br label %__nv_sinf.exit, !dbg !33

__nv_sinf.exit:                                   ; preds = %__internal_fmad.exit2.i.i.i, %__internal_fmad.exit5.i.i.i
  %z.i.i.0.i = phi float [ %.0.i, %__internal_fmad.exit5.i.i.i ], [ %.05.i, %__internal_fmad.exit2.i.i.i ], !dbg !33
  call void @llvm.lifetime.end.p0(i64 28, ptr nonnull %result.i.i.i.i), !dbg !33
  %149 = fmul float %z.i.i.0.i, %z.i.i.0.i, !dbg !37
  %150 = fmul float %44, %149, !dbg !38
  %151 = fadd float %42, %150, !dbg !39
  %152 = bitcast float %42 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %21, i1 %15) #4, !dbg !40
  %153 = getelementptr float, ptr addrspace(1) %7, i64 %16, !dbg !41
  %154 = bitcast float %151 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %154, ptr addrspace(1) %153, i1 %15) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn.ftz(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.nvvm.f2i.rn(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyi74oa2j5oji5e2scx7wzeeb7lycwe23l4lt42zorfy2e6zqe5r.py", directory: "inductor_cache/yi")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17", linkageName: "triton_poi_fused_add_convolution_mul_pow_reciprocal_sin_view_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 34, scope: !7)
!20 = !DILocation(line: 27, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 24, scope: !7)
!34 = !{i32 30999, i32 31003, i32 31048, i32 31093}
!35 = distinct !{!35, !36}
!36 = !{!"llvm.loop.unroll.count", i32 1}
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 40, scope: !7)
!41 = !DILocation(line: 50, column: 25, scope: !7)
!42 = !DILocation(line: 50, column: 37, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
