; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = icmp slt i32 %19, 256, !dbg !14
  %22 = icmp slt i32 %20, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = or disjoint i32 %24, %18, !dbg !17
  %26 = icmp slt i32 %25, 128, !dbg !18
  %27 = shl i32 %19, 7, !dbg !19
  %28 = shl i32 %20, 7, !dbg !19
  %29 = add i32 %25, %27, !dbg !20
  %30 = add i32 %25, %28, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = and i1 %21, %26, !dbg !22
  %36 = and i1 %22, %26, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %35) #4, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %36) #4, !dbg !23
  %39 = sext i32 %25 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #4, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %26) #4, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !28
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %26) #4, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = bitcast i32 %49 to float, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !30
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %26) #4, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !32
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %26) #4, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !34
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %35) #4, !dbg !35
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %36) #4, !dbg !35
  %62 = fadd float %50, 0x3F50624DE0000000, !dbg !36
  %63 = fadd float %51, 0x3F50624DE0000000, !dbg !36
  %64 = fadd float %52, 0x3F50624DE0000000, !dbg !36
  %65 = fadd float %53, 0x3F50624DE0000000, !dbg !36
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %66, 0, !dbg !37
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %67, 0, !dbg !37
  br i1 %.not.i, label %73, label %68, !dbg !37

68:                                               ; preds = %10
  br i1 %.not1.i, label %71, label %69, !dbg !37

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %10
  br i1 %.not1.i, label %76, label %74, !dbg !37

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i15 = icmp eq i32 %78, 0, !dbg !37
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i18 = icmp eq i32 %79, 0, !dbg !37
  br i1 %.not.i15, label %85, label %80, !dbg !37

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %83, label %81, !dbg !37

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %88, label %86, !dbg !37

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !37
  br label %__nv_sqrtf.exit19, !dbg !37

__nv_sqrtf.exit19:                                ; preds = %81, %83, %86, %88
  %.0.i17 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !37
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i20 = icmp eq i32 %90, 0, !dbg !37
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i23 = icmp eq i32 %91, 0, !dbg !37
  br i1 %.not.i20, label %97, label %92, !dbg !37

92:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %95, label %93, !dbg !37

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

97:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %100, label %98, !dbg !37

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !37
  br label %__nv_sqrtf.exit24, !dbg !37

__nv_sqrtf.exit24:                                ; preds = %93, %95, %98, %100
  %.0.i22 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !37
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i25 = icmp eq i32 %102, 0, !dbg !37
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i28 = icmp eq i32 %103, 0, !dbg !37
  br i1 %.not.i25, label %109, label %104, !dbg !37

104:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %107, label %105, !dbg !37

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

109:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %112, label %110, !dbg !37

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !37
  br label %__nv_sqrtf.exit29, !dbg !37

__nv_sqrtf.exit29:                                ; preds = %105, %107, %110, %112
  %.0.i27 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !37
  %114 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %118 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %120 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %122 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %127 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %128 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %129 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %130 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !35
  %131 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !35
  %132 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !35
  %133 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !35
  %134 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !35
  %135 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !35
  %136 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !35
  %137 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !35
  %138 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !31
  %146 = or disjoint i32 %24, %16, !dbg !17
  %147 = icmp slt i32 %146, 128, !dbg !18
  %148 = or disjoint i32 %12, %18, !dbg !13
  %149 = icmp slt i32 %148, 256, !dbg !14
  %150 = and i1 %149, %147, !dbg !22
  %151 = or disjoint i32 %24, %15, !dbg !17
  %152 = icmp slt i32 %151, 128, !dbg !18
  %153 = and i1 %149, %152, !dbg !22
  %.frozen = freeze i32 %148, !dbg !38
  %154 = sdiv i32 %.frozen, 64, !dbg !38
  %155 = mul i32 %154, 64, !dbg !39
  %.decomposed = sub i32 %.frozen, %155, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !40
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !40
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !40
  %160 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !25
  %161 = insertelement <4 x i32> %160, i32 %118, i64 1, !dbg !25
  %162 = insertelement <4 x i32> %161, i32 %121, i64 2, !dbg !25
  %163 = insertelement <4 x i32> %162, i32 %124, i64 3, !dbg !25
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !25
  %165 = shufflevector <4 x float> %164, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %166 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !27
  %167 = insertelement <4 x i32> %166, i32 %119, i64 1, !dbg !27
  %168 = insertelement <4 x i32> %167, i32 %122, i64 2, !dbg !27
  %169 = insertelement <4 x i32> %168, i32 %125, i64 3, !dbg !27
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !27
  %171 = shufflevector <4 x float> %170, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %172 = insertelement <8 x i32> poison, i32 %114, i64 0, !dbg !23
  %173 = insertelement <8 x i32> %172, i32 %117, i64 1, !dbg !23
  %174 = insertelement <8 x i32> %173, i32 %120, i64 2, !dbg !23
  %175 = insertelement <8 x i32> %174, i32 %123, i64 3, !dbg !23
  %176 = insertelement <8 x i32> %175, i32 %126, i64 4, !dbg !23
  %177 = insertelement <8 x i32> %176, i32 %127, i64 5, !dbg !23
  %178 = insertelement <8 x i32> %177, i32 %128, i64 6, !dbg !23
  %179 = insertelement <8 x i32> %178, i32 %129, i64 7, !dbg !23
  %180 = bitcast <8 x i32> %179 to <8 x float>, !dbg !23
  %181 = fadd <8 x float> %165, %180, !dbg !41
  %182 = fsub <8 x float> %181, %171, !dbg !42
  %183 = insertelement <8 x i32> poison, i32 %130, i64 0, !dbg !35
  %184 = insertelement <8 x i32> %183, i32 %131, i64 1, !dbg !35
  %185 = insertelement <8 x i32> %184, i32 %132, i64 2, !dbg !35
  %186 = insertelement <8 x i32> %185, i32 %133, i64 3, !dbg !35
  %187 = insertelement <8 x i32> %186, i32 %134, i64 4, !dbg !35
  %188 = insertelement <8 x i32> %187, i32 %135, i64 5, !dbg !35
  %189 = insertelement <8 x i32> %188, i32 %136, i64 6, !dbg !35
  %190 = insertelement <8 x i32> %189, i32 %137, i64 7, !dbg !35
  %191 = bitcast <8 x i32> %190 to <8 x float>, !dbg !35
  %192 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !33
  %193 = insertelement <4 x i32> %192, i32 %139, i64 1, !dbg !33
  %194 = insertelement <4 x i32> %193, i32 %140, i64 2, !dbg !33
  %195 = insertelement <4 x i32> %194, i32 %141, i64 3, !dbg !33
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !33
  %197 = shufflevector <4 x float> %196, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %198 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !31
  %199 = insertelement <4 x i32> %198, i32 %143, i64 1, !dbg !31
  %200 = insertelement <4 x i32> %199, i32 %144, i64 2, !dbg !31
  %201 = insertelement <4 x i32> %200, i32 %145, i64 3, !dbg !31
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !31
  %203 = shufflevector <4 x float> %202, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %204 = insertelement <8 x float> poison, float %159, i64 0, !dbg !43
  %205 = insertelement <8 x float> %204, float %158, i64 1, !dbg !43
  %206 = insertelement <8 x float> %205, float %157, i64 2, !dbg !43
  %207 = insertelement <8 x float> %206, float %156, i64 3, !dbg !43
  %208 = shufflevector <8 x float> %207, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %209 = fmul <8 x float> %182, %208, !dbg !43
  %210 = fmul <8 x float> %209, %203, !dbg !44
  %211 = fadd <8 x float> %210, %197, !dbg !45
  %212 = fadd <8 x float> %211, %191, !dbg !46
  %213 = fcmp olt <8 x float> %212, zeroinitializer, !dbg !47
  %214 = extractelement <8 x i1> %213, i64 7, !dbg !51
  %215 = extractelement <8 x float> %212, i64 7, !dbg !51
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !51
  %217 = extractelement <8 x i1> %213, i64 6, !dbg !51
  %218 = extractelement <8 x float> %212, i64 6, !dbg !51
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !51
  %220 = extractelement <8 x i1> %213, i64 5, !dbg !51
  %221 = extractelement <8 x float> %212, i64 5, !dbg !51
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !51
  %223 = extractelement <8 x i1> %213, i64 4, !dbg !51
  %224 = extractelement <8 x float> %212, i64 4, !dbg !51
  %225 = select i1 %223, float 0.000000e+00, float %224, !dbg !51
  %226 = extractelement <8 x i1> %213, i64 3, !dbg !51
  %227 = extractelement <8 x float> %212, i64 3, !dbg !51
  %228 = select i1 %226, float 0.000000e+00, float %227, !dbg !51
  %229 = extractelement <8 x i1> %213, i64 2, !dbg !51
  %230 = extractelement <8 x float> %212, i64 2, !dbg !51
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !51
  %232 = extractelement <8 x i1> %213, i64 1, !dbg !51
  %233 = extractelement <8 x float> %212, i64 1, !dbg !51
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !51
  %235 = extractelement <8 x i1> %213, i64 0, !dbg !51
  %236 = extractelement <8 x float> %212, i64 0, !dbg !51
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %bc = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %238 = extractelement <8 x i32> %bc, i64 7, !dbg !53
  %bc30 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %239 = extractelement <8 x i32> %bc30, i64 6, !dbg !53
  %bc31 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %240 = extractelement <8 x i32> %bc31, i64 5, !dbg !53
  %bc32 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %241 = extractelement <8 x i32> %bc32, i64 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %238, i32 %239, i32 %240, i32 %241, ptr addrspace(1) %32, i1 %35) #4, !dbg !53
  %bc33 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %242 = extractelement <8 x i32> %bc33, i64 3, !dbg !53
  %bc34 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %243 = extractelement <8 x i32> %bc34, i64 2, !dbg !53
  %bc35 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %244 = extractelement <8 x i32> %bc35, i64 1, !dbg !53
  %bc36 = bitcast <8 x float> %181 to <8 x i32>, !dbg !53
  %245 = extractelement <8 x i32> %bc36, i64 0, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %243, i32 %244, i32 %245, ptr addrspace(1) %34, i1 %36) #4, !dbg !53
  %246 = shl i32 %151, 6, !dbg !54
  %247 = shl i32 %146, 6, !dbg !54
  %248 = shl i32 %154, 13, !dbg !55
  %249 = add i32 %248, %.decomposed, !dbg !56
  %250 = add i32 %249, %246, !dbg !57
  %251 = add i32 %249, %247, !dbg !57
  %252 = sext i32 %250 to i64, !dbg !58
  %253 = getelementptr float, ptr addrspace(1) %7, i64 %252, !dbg !58
  %254 = sext i32 %251 to i64, !dbg !58
  %255 = getelementptr float, ptr addrspace(1) %7, i64 %254, !dbg !58
  %256 = shl i32 %13, 7, !dbg !59
  %257 = and i32 %256, 896, !dbg !59
  %258 = or disjoint i32 %257, %15, !dbg !59
  %259 = and i32 %17, 508, !dbg !59
  %260 = lshr exact i32 %257, 3, !dbg !59
  %261 = or disjoint i32 %260, %258, !dbg !59
  %262 = zext nneg i32 %261 to i64, !dbg !59
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !59
  %264 = bitcast float %216 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !59
  %265 = or disjoint i32 %258, 32, !dbg !59
  %266 = lshr i32 %265, 3, !dbg !59
  %267 = and i32 %266, 116, !dbg !59
  %268 = add nuw nsw i32 %267, %265, !dbg !59
  %269 = zext nneg i32 %268 to i64, !dbg !59
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %269, !dbg !59
  %271 = bitcast float %219 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !59
  %272 = or disjoint i32 %258, 64, !dbg !59
  %273 = lshr i32 %272, 3, !dbg !59
  %274 = and i32 %273, 120, !dbg !59
  %275 = add nuw nsw i32 %274, %272, !dbg !59
  %276 = zext nneg i32 %275 to i64, !dbg !59
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %276, !dbg !59
  %278 = bitcast float %222 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !59
  %279 = or disjoint i32 %258, 96, !dbg !59
  %280 = lshr i32 %279, 3, !dbg !59
  %281 = and i32 %280, 124, !dbg !59
  %282 = add nuw nsw i32 %281, %279, !dbg !59
  %283 = zext nneg i32 %282 to i64, !dbg !59
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !59
  %285 = bitcast float %225 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !59
  %286 = or disjoint i32 %258, 16, !dbg !59
  %287 = add nuw nsw i32 %286, %260, !dbg !59
  %288 = zext nneg i32 %287 to i64, !dbg !59
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %288, !dbg !59
  %290 = bitcast float %228 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !59
  %291 = or disjoint i32 %258, 48, !dbg !59
  %292 = lshr i32 %291, 3, !dbg !59
  %293 = and i32 %292, 116, !dbg !59
  %294 = add nuw nsw i32 %293, %291, !dbg !59
  %295 = zext nneg i32 %294 to i64, !dbg !59
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !59
  %297 = bitcast float %231 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #4, !dbg !59
  %298 = or disjoint i32 %258, 80, !dbg !59
  %299 = lshr i32 %298, 3, !dbg !59
  %300 = and i32 %299, 120, !dbg !59
  %301 = add nuw nsw i32 %300, %298, !dbg !59
  %302 = zext nneg i32 %301 to i64, !dbg !59
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %302, !dbg !59
  %304 = bitcast float %234 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !59
  %305 = or disjoint i32 %258, 112, !dbg !59
  %306 = lshr i32 %305, 3, !dbg !59
  %307 = and i32 %306, 124, !dbg !59
  %308 = add nuw nsw i32 %307, %305, !dbg !59
  %309 = zext nneg i32 %308 to i64, !dbg !59
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %309, !dbg !59
  %311 = bitcast float %237 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %312 = lshr i32 %17, 3, !dbg !59
  %313 = and i32 %312, 60, !dbg !59
  %314 = add nuw nsw i32 %313, %259, !dbg !59
  %315 = zext nneg i32 %314 to i64, !dbg !59
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %315, !dbg !59
  %317 = or disjoint i32 %259, 512, !dbg !59
  %318 = lshr i32 %317, 3, !dbg !59
  %319 = and i32 %318, 124, !dbg !59
  %320 = add nuw nsw i32 %319, %317, !dbg !59
  %321 = zext nneg i32 %320 to i64, !dbg !59
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %321, !dbg !59
  %323 = load <4 x i32>, ptr addrspace(3) %322, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %316, align 16, !dbg !59
  %324 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 4, !dbg !59
  %.extract8 = load i32, ptr addrspace(3) %324, align 4, !dbg !59
  %325 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 8, !dbg !59
  %.extract9 = load i32, ptr addrspace(3) %325, align 8, !dbg !59
  %326 = getelementptr inbounds i8, ptr addrspace(3) %316, i64 12, !dbg !59
  %.extract10 = load i32, ptr addrspace(3) %326, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %253, i1 %153) #4, !dbg !59
  %.extract11 = extractelement <4 x i32> %323, i64 0, !dbg !59
  %.extract12 = extractelement <4 x i32> %323, i64 1, !dbg !59
  %.extract13 = extractelement <4 x i32> %323, i64 2, !dbg !59
  %.extract14 = extractelement <4 x i32> %323, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %255, i1 %150) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cha5qjameu5f3izoqxxhva6chl4cn5sj6a7i4evb4nu3k46iuo7w.py", directory: "inductor_cache/ha")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 45, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 31, column: 19, scope: !7)
!39 = !DILocation(line: 30, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 53, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 54, column: 4, scope: !7)
!53 = !DILocation(line: 55, column: 48, scope: !7)
!54 = !DILocation(line: 56, column: 33, scope: !7)
!55 = !DILocation(line: 56, column: 43, scope: !7)
!56 = !DILocation(line: 56, column: 30, scope: !7)
!57 = !DILocation(line: 56, column: 38, scope: !7)
!58 = !DILocation(line: 56, column: 25, scope: !7)
!59 = !DILocation(line: 56, column: 55, scope: !7)
!60 = !DILocation(line: 56, column: 4, scope: !7)
