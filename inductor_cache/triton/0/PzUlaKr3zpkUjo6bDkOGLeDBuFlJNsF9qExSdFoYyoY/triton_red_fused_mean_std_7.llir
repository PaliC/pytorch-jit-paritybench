; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mean_std_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = mul i32 %7, 6144, !dbg !13
  %13 = or disjoint i32 %12, %11
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !15
  %17 = insertelement <4 x i1> poison, i1 %8, i64 0, !dbg !16
  %18 = shufflevector <4 x i1> %17, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !16
  %19 = insertelement <8 x i1> poison, i1 %8, i64 0, !dbg !17
  %20 = shufflevector <8 x i1> %19, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %22 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !15
  %23 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %24 = insertelement <4 x i32> %22, i32 %23, i64 1, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %26 = insertelement <4 x i32> %24, i32 %25, i64 2, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %28 = insertelement <4 x i32> %26, i32 %27, i64 3, !dbg !15
  %29 = bitcast <4 x i32> %28 to <4 x float>, !dbg !15
  %30 = fadd <4 x float> %29, zeroinitializer, !dbg !18
  %31 = shufflevector <4 x float> %30, <4 x float> %29, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !17
  %32 = select <8 x i1> %20, <8 x float> %31, <8 x float> zeroinitializer, !dbg !17
  %33 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %34 = add i32 %13, 2048, !dbg !20
  %35 = sext i32 %34 to i64, !dbg !14
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !14
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !15
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !15
  %42 = fadd float %33, 1.000000e+00, !dbg !21
  %43 = fadd float %33, 1.000000e+00, !dbg !21
  %44 = fadd float %33, 1.000000e+00, !dbg !21
  %45 = fadd float %33, 1.000000e+00, !dbg !21
  %46 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !15
  %47 = insertelement <4 x i32> %46, i32 %39, i64 1, !dbg !15
  %48 = insertelement <4 x i32> %47, i32 %40, i64 2, !dbg !15
  %49 = insertelement <4 x i32> %48, i32 %41, i64 3, !dbg !15
  %50 = bitcast <4 x i32> %49 to <4 x float>, !dbg !15
  %51 = shufflevector <8 x float> %32, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %52 = fsub <4 x float> %50, %51, !dbg !25
  %53 = extractelement <4 x float> %52, i64 0, !dbg !26
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %42) #3, !dbg !26
  %55 = extractelement <4 x float> %52, i64 1, !dbg !26
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %43) #3, !dbg !26
  %57 = extractelement <4 x float> %52, i64 2, !dbg !26
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %44) #3, !dbg !26
  %59 = extractelement <4 x float> %52, i64 3, !dbg !26
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %45) #3, !dbg !26
  %61 = insertelement <8 x float> poison, float %54, i64 4, !dbg !27
  %62 = insertelement <8 x float> %61, float %56, i64 5, !dbg !27
  %63 = insertelement <8 x float> %62, float %58, i64 6, !dbg !27
  %64 = insertelement <8 x float> %63, float %60, i64 7, !dbg !27
  %65 = shufflevector <4 x float> %50, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %66 = shufflevector <8 x float> %65, <8 x float> %64, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !27
  %67 = fadd <8 x float> %32, %66, !dbg !27
  %68 = shufflevector <8 x float> %67, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %69 = fsub <4 x float> %50, %68, !dbg !28
  %70 = fmul <4 x float> %52, %69, !dbg !29
  %71 = fadd <4 x float> %70, zeroinitializer, !dbg !30
  %72 = select <8 x i1> %20, <8 x float> %67, <8 x float> zeroinitializer, !dbg !17
  %73 = add i32 %13, 4096, !dbg !20
  %74 = sext i32 %73 to i64, !dbg !14
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !14
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !15
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !15
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !15
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !15
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !15
  %81 = fadd float %42, 1.000000e+00, !dbg !21
  %82 = select i1 %8, float %81, float 1.000000e+00, !dbg !19
  %83 = fadd float %43, 1.000000e+00, !dbg !21
  %84 = select i1 %8, float %83, float 1.000000e+00, !dbg !19
  %85 = fadd float %44, 1.000000e+00, !dbg !21
  %86 = select i1 %8, float %85, float 1.000000e+00, !dbg !19
  %87 = fadd float %45, 1.000000e+00, !dbg !21
  %88 = select i1 %8, float %87, float 1.000000e+00, !dbg !19
  %89 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !15
  %90 = insertelement <4 x i32> %89, i32 %78, i64 1, !dbg !15
  %91 = insertelement <4 x i32> %90, i32 %79, i64 2, !dbg !15
  %92 = insertelement <4 x i32> %91, i32 %80, i64 3, !dbg !15
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !15
  %94 = shufflevector <8 x float> %72, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !25
  %95 = fsub <4 x float> %93, %94, !dbg !25
  %96 = extractelement <4 x float> %95, i64 0, !dbg !26
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %82) #3, !dbg !26
  %98 = extractelement <4 x float> %95, i64 1, !dbg !26
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %84) #3, !dbg !26
  %100 = extractelement <4 x float> %95, i64 2, !dbg !26
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %86) #3, !dbg !26
  %102 = extractelement <4 x float> %95, i64 3, !dbg !26
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %88) #3, !dbg !26
  %104 = insertelement <8 x float> poison, float %97, i64 4, !dbg !27
  %105 = insertelement <8 x float> %104, float %99, i64 5, !dbg !27
  %106 = insertelement <8 x float> %105, float %101, i64 6, !dbg !27
  %107 = insertelement <8 x float> %106, float %103, i64 7, !dbg !27
  %108 = shufflevector <4 x float> %93, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !27
  %109 = shufflevector <8 x float> %108, <8 x float> %107, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !27
  %110 = fadd <8 x float> %72, %109, !dbg !27
  %111 = shufflevector <8 x float> %110, <8 x float> poison, <4 x i32> <i32 4, i32 5, i32 6, i32 7>, !dbg !28
  %112 = fsub <4 x float> %93, %111, !dbg !28
  %113 = fmul <4 x float> %95, %112, !dbg !29
  %114 = fadd <4 x float> %71, %113, !dbg !30
  %115 = select <8 x i1> %20, <8 x float> %110, <8 x float> zeroinitializer, !dbg !17
  %116 = select <4 x i1> %18, <4 x float> %114, <4 x float> zeroinitializer, !dbg !16
  %117 = select i1 %8, float %81, float 0.000000e+00, !dbg !19
  %118 = select i1 %8, float %83, float 0.000000e+00, !dbg !19
  %119 = select i1 %8, float %85, float 0.000000e+00, !dbg !19
  %120 = select i1 %8, float %87, float 0.000000e+00, !dbg !19
  %121 = lshr i32 %9, 5, !dbg !12
  %122 = and i32 %9, 31, !dbg !12
  %shift = shufflevector <8 x float> %115, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %123 = fadd <8 x float> %115, %shift, !dbg !31
  %shift103 = shufflevector <8 x float> %115, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %124 = fadd <8 x float> %shift103, %123, !dbg !31
  %shift104 = shufflevector <8 x float> %115, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %125 = fadd <8 x float> %shift104, %124, !dbg !31
  %126 = extractelement <8 x float> %125, i64 0, !dbg !31
  %127 = bitcast float %126 to i32, !dbg !36
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !36
  %129 = bitcast i32 %128 to float, !dbg !36
  %130 = fadd float %126, %129, !dbg !31
  %131 = bitcast float %130 to i32, !dbg !36
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = fadd float %130, %133, !dbg !31
  %135 = bitcast float %134 to i32, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fadd float %134, %137, !dbg !31
  %139 = bitcast float %138 to i32, !dbg !36
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = fadd float %138, %141, !dbg !31
  %143 = bitcast float %142 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %142, %145, !dbg !31
  %147 = icmp eq i32 %122, 0, !dbg !36
  %148 = and i32 %121, 15, !dbg !36
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !36
  %150 = bitcast float %146 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 %147) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %151 = icmp slt i32 %9, 16, !dbg !36
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !36
  %153 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %152, i1 %151) #3, !dbg !36
  %154 = bitcast i32 %153 to float, !dbg !36
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !36
  %156 = bitcast i32 %155 to float, !dbg !36
  %157 = fadd float %154, %156, !dbg !31
  %158 = bitcast float %157 to i32, !dbg !36
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !36
  %160 = bitcast i32 %159 to float, !dbg !36
  %161 = fadd float %157, %160, !dbg !31
  %162 = bitcast float %161 to i32, !dbg !36
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 2, i32 31), !dbg !36
  %164 = bitcast i32 %163 to float, !dbg !36
  %165 = fadd float %161, %164, !dbg !31
  %166 = bitcast float %165 to i32, !dbg !36
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 1, i32 31), !dbg !36
  %168 = bitcast i32 %167 to float, !dbg !36
  %169 = fadd float %165, %168, !dbg !31
  %170 = and i32 %9, 15, !dbg !36
  %171 = icmp eq i32 %170, 0, !dbg !36
  %172 = and i1 %151, %171, !dbg !36
  %173 = bitcast float %169 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %173, i1 %172) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %174 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %175 = extractelement <8 x float> %115, i64 4, !dbg !39
  %176 = extractelement <8 x float> %115, i64 5, !dbg !39
  %177 = fsub float %176, %175, !dbg !39
  %178 = fadd float %117, %118, !dbg !41
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !42
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %178) #3, !dbg !43
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !44
  %182 = fmul float %177, %181, !dbg !45
  %183 = fadd float %175, %182, !dbg !46
  %shift105 = shufflevector <4 x float> %116, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !47
  %184 = fadd <4 x float> %116, %shift105, !dbg !47
  %185 = extractelement <4 x float> %184, i64 0, !dbg !47
  %186 = fmul float %177, %177, !dbg !48
  %187 = fmul float %186, %117, !dbg !49
  %188 = fmul float %187, %181, !dbg !50
  %189 = fadd float %185, %188, !dbg !51
  %190 = extractelement <8 x float> %115, i64 6, !dbg !39
  %191 = fsub float %190, %183, !dbg !39
  %192 = fadd float %119, %178, !dbg !41
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !42
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %192) #3, !dbg !43
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !44
  %196 = fmul float %195, %191, !dbg !45
  %197 = fadd float %183, %196, !dbg !46
  %198 = extractelement <4 x float> %116, i64 2, !dbg !47
  %199 = fadd float %198, %189, !dbg !47
  %200 = fmul float %191, %191, !dbg !48
  %201 = fmul float %178, %200, !dbg !49
  %202 = fmul float %195, %201, !dbg !50
  %203 = fadd float %199, %202, !dbg !51
  %204 = extractelement <8 x float> %115, i64 7, !dbg !39
  %205 = fsub float %204, %197, !dbg !39
  %206 = fadd float %120, %192, !dbg !41
  %207 = fcmp oeq float %206, 0.000000e+00, !dbg !42
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %206) #3, !dbg !43
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !44
  %210 = fmul float %209, %205, !dbg !45
  %211 = fadd float %197, %210, !dbg !46
  %212 = extractelement <4 x float> %116, i64 3, !dbg !47
  %213 = fadd float %212, %203, !dbg !47
  %214 = fmul float %205, %205, !dbg !48
  %215 = fmul float %192, %214, !dbg !49
  %216 = fmul float %209, %215, !dbg !50
  %217 = fadd float %213, %216, !dbg !51
  %218 = bitcast float %211 to i32, !dbg !37
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 16, i32 31), !dbg !37
  %220 = bitcast i32 %219 to float, !dbg !37
  %221 = bitcast float %217 to i32, !dbg !37
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 16, i32 31), !dbg !37
  %223 = bitcast i32 %222 to float, !dbg !37
  %224 = bitcast float %206 to i32, !dbg !37
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !37
  %226 = bitcast i32 %225 to float, !dbg !37
  %227 = fsub float %220, %211, !dbg !39
  %228 = fadd float %206, %226, !dbg !41
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !42
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %228) #3, !dbg !43
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !44
  %232 = fmul float %231, %227, !dbg !45
  %233 = fadd float %211, %232, !dbg !46
  %234 = fadd float %217, %223, !dbg !47
  %235 = fmul float %227, %227, !dbg !48
  %236 = fmul float %206, %235, !dbg !49
  %237 = fmul float %231, %236, !dbg !50
  %238 = fadd float %234, %237, !dbg !51
  %239 = bitcast float %233 to i32, !dbg !37
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 8, i32 31), !dbg !37
  %241 = bitcast i32 %240 to float, !dbg !37
  %242 = bitcast float %238 to i32, !dbg !37
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 8, i32 31), !dbg !37
  %244 = bitcast i32 %243 to float, !dbg !37
  %245 = bitcast float %228 to i32, !dbg !37
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !37
  %247 = bitcast i32 %246 to float, !dbg !37
  %248 = fsub float %241, %233, !dbg !39
  %249 = fadd float %228, %247, !dbg !41
  %250 = fcmp oeq float %249, 0.000000e+00, !dbg !42
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %249) #3, !dbg !43
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !44
  %253 = fmul float %248, %252, !dbg !45
  %254 = fadd float %233, %253, !dbg !46
  %255 = fadd float %238, %244, !dbg !47
  %256 = fmul float %248, %248, !dbg !48
  %257 = fmul float %228, %256, !dbg !49
  %258 = fmul float %252, %257, !dbg !50
  %259 = fadd float %255, %258, !dbg !51
  %260 = bitcast float %254 to i32, !dbg !37
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 4, i32 31), !dbg !37
  %262 = bitcast i32 %261 to float, !dbg !37
  %263 = bitcast float %259 to i32, !dbg !37
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 4, i32 31), !dbg !37
  %265 = bitcast i32 %264 to float, !dbg !37
  %266 = bitcast float %249 to i32, !dbg !37
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !37
  %268 = bitcast i32 %267 to float, !dbg !37
  %269 = fsub float %262, %254, !dbg !39
  %270 = fadd float %249, %268, !dbg !41
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !42
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #3, !dbg !43
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !44
  %274 = fmul float %269, %273, !dbg !45
  %275 = fadd float %254, %274, !dbg !46
  %276 = fadd float %259, %265, !dbg !47
  %277 = fmul float %269, %269, !dbg !48
  %278 = fmul float %249, %277, !dbg !49
  %279 = fmul float %273, %278, !dbg !50
  %280 = fadd float %276, %279, !dbg !51
  %281 = bitcast float %275 to i32, !dbg !37
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !37
  %283 = bitcast i32 %282 to float, !dbg !37
  %284 = bitcast float %280 to i32, !dbg !37
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 2, i32 31), !dbg !37
  %286 = bitcast i32 %285 to float, !dbg !37
  %287 = bitcast float %270 to i32, !dbg !37
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !37
  %289 = bitcast i32 %288 to float, !dbg !37
  %290 = fsub float %283, %275, !dbg !39
  %291 = fadd float %270, %289, !dbg !41
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !42
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #3, !dbg !43
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !44
  %295 = fmul float %290, %294, !dbg !45
  %296 = fadd float %275, %295, !dbg !46
  %297 = fadd float %280, %286, !dbg !47
  %298 = fmul float %290, %290, !dbg !48
  %299 = fmul float %270, %298, !dbg !49
  %300 = fmul float %294, %299, !dbg !50
  %301 = fadd float %297, %300, !dbg !51
  %302 = bitcast float %296 to i32, !dbg !37
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 1, i32 31), !dbg !37
  %304 = bitcast i32 %303 to float, !dbg !37
  %305 = bitcast float %301 to i32, !dbg !37
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 1, i32 31), !dbg !37
  %307 = bitcast i32 %306 to float, !dbg !37
  %308 = bitcast float %291 to i32, !dbg !37
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !37
  %310 = bitcast i32 %309 to float, !dbg !37
  %311 = fsub float %304, %296, !dbg !39
  %312 = fadd float %291, %310, !dbg !41
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !42
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #3, !dbg !43
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !44
  %316 = fmul float %311, %315, !dbg !45
  %317 = fadd float %296, %316, !dbg !46
  %318 = fadd float %301, %307, !dbg !47
  %319 = fmul float %311, %311, !dbg !48
  %320 = fmul float %291, %319, !dbg !49
  %321 = fmul float %315, %320, !dbg !50
  %322 = fadd float %318, %321, !dbg !51
  %323 = bitcast float %317 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %323, i1 %147) #3, !dbg !37
  %324 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %148, !dbg !37
  %325 = bitcast float %322 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 %147) #3, !dbg !37
  %326 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %148, !dbg !37
  %327 = bitcast float %312 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 %147) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %328 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %152, i1 %151) #3, !dbg !37
  %329 = bitcast i32 %328 to float, !dbg !37
  %330 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !37
  %331 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %330, i1 %151) #3, !dbg !37
  %332 = bitcast i32 %331 to float, !dbg !37
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !37
  %334 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %333, i1 %151) #3, !dbg !37
  %335 = bitcast i32 %334 to float, !dbg !37
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 8, i32 31), !dbg !37
  %337 = bitcast i32 %336 to float, !dbg !37
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !37
  %339 = bitcast i32 %338 to float, !dbg !37
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !37
  %341 = bitcast i32 %340 to float, !dbg !37
  %342 = fsub float %337, %329, !dbg !39
  %343 = fadd float %335, %341, !dbg !41
  %344 = fcmp oeq float %343, 0.000000e+00, !dbg !42
  %345 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %343) #3, !dbg !43
  %346 = select i1 %344, float 0.000000e+00, float %345, !dbg !44
  %347 = fmul float %342, %346, !dbg !45
  %348 = fadd float %347, %329, !dbg !46
  %349 = fadd float %332, %339, !dbg !47
  %350 = fmul float %342, %342, !dbg !48
  %351 = fmul float %350, %335, !dbg !49
  %352 = fmul float %351, %346, !dbg !50
  %353 = fadd float %349, %352, !dbg !51
  %354 = bitcast float %348 to i32, !dbg !37
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 4, i32 31), !dbg !37
  %356 = bitcast i32 %355 to float, !dbg !37
  %357 = bitcast float %353 to i32, !dbg !37
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 4, i32 31), !dbg !37
  %359 = bitcast i32 %358 to float, !dbg !37
  %360 = bitcast float %343 to i32, !dbg !37
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 4, i32 31), !dbg !37
  %362 = bitcast i32 %361 to float, !dbg !37
  %363 = fsub float %356, %348, !dbg !39
  %364 = fadd float %343, %362, !dbg !41
  %365 = fcmp oeq float %364, 0.000000e+00, !dbg !42
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %362, float %364) #3, !dbg !43
  %367 = select i1 %365, float 0.000000e+00, float %366, !dbg !44
  %368 = fmul float %363, %367, !dbg !45
  %369 = fadd float %348, %368, !dbg !46
  %370 = fadd float %353, %359, !dbg !47
  %371 = fmul float %363, %363, !dbg !48
  %372 = fmul float %343, %371, !dbg !49
  %373 = fmul float %367, %372, !dbg !50
  %374 = fadd float %370, %373, !dbg !51
  %375 = bitcast float %369 to i32, !dbg !37
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !37
  %377 = bitcast i32 %376 to float, !dbg !37
  %378 = bitcast float %374 to i32, !dbg !37
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 2, i32 31), !dbg !37
  %380 = bitcast i32 %379 to float, !dbg !37
  %381 = bitcast float %364 to i32, !dbg !37
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !37
  %383 = bitcast i32 %382 to float, !dbg !37
  %384 = fsub float %377, %369, !dbg !39
  %385 = fadd float %364, %383, !dbg !41
  %386 = fcmp oeq float %385, 0.000000e+00, !dbg !42
  %387 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float %385) #3, !dbg !43
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !44
  %389 = fmul float %384, %388, !dbg !45
  %390 = fadd float %369, %389, !dbg !46
  %391 = fadd float %374, %380, !dbg !47
  %392 = fmul float %384, %384, !dbg !48
  %393 = fmul float %364, %392, !dbg !49
  %394 = fmul float %388, %393, !dbg !50
  %395 = fadd float %391, %394, !dbg !51
  %396 = bitcast float %390 to i32, !dbg !37
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 1, i32 31), !dbg !37
  %398 = bitcast i32 %397 to float, !dbg !37
  %399 = bitcast float %395 to i32, !dbg !37
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 1, i32 31), !dbg !37
  %401 = bitcast i32 %400 to float, !dbg !37
  %402 = bitcast float %385 to i32, !dbg !37
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 1, i32 31), !dbg !37
  %404 = bitcast i32 %403 to float, !dbg !37
  %405 = fsub float %398, %390, !dbg !39
  %406 = fadd float %385, %404, !dbg !41
  %407 = fcmp oeq float %406, 0.000000e+00, !dbg !42
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %404, float %406) #3, !dbg !43
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !44
  %410 = fmul float %405, %409, !dbg !45
  %411 = fadd float %390, %410, !dbg !46
  %412 = fadd float %395, %401, !dbg !47
  %413 = fmul float %405, %405, !dbg !48
  %414 = fmul float %385, %413, !dbg !49
  %415 = fmul float %409, %414, !dbg !50
  %416 = fadd float %412, %415, !dbg !51
  %417 = bitcast float %411 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %417, i1 %172) #3, !dbg !37
  %418 = bitcast float %416 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %418, i1 %172) #3, !dbg !37
  %419 = bitcast float %406 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %419, i1 %172) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %420 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %421 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !37
  %422 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !37
  %423 = sext i32 %7 to i64, !dbg !52
  %424 = getelementptr float, ptr addrspace(1) %1, i64 %423, !dbg !52
  %urem = and i32 %9, 511, !dbg !53
  %425 = icmp eq i32 %urem, 0, !dbg !53
  %426 = and i1 %425, %8, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %424, i1 %426) #3, !dbg !53
  %427 = getelementptr float, ptr addrspace(1) %2, i64 %423, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %420, ptr addrspace(1) %427, i1 %426) #3, !dbg !55
  %428 = getelementptr float, ptr addrspace(1) %3, i64 %423, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %421, ptr addrspace(1) %428, i1 %426) #3, !dbg !57
  %429 = getelementptr float, ptr addrspace(1) %4, i64 %423, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %422, ptr addrspace(1) %429, i1 %426) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjhhnfinlhhffv5btkdvfwwwcotaigx3vwp5gtzhat7lb2a6j2x3.py", directory: "inductor_cache/jh")
!4 = !{ptr @triton_red_fused_mean_std_7, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mean_std_7, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mean_std_7", linkageName: "triton_red_fused_mean_std_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 35, column: 44, scope: !7)
!14 = !DILocation(line: 35, column: 34, scope: !7)
!15 = !DILocation(line: 35, column: 49, scope: !7)
!16 = !DILocation(line: 43, column: 56, scope: !7)
!17 = !DILocation(line: 42, column: 60, scope: !7)
!18 = !DILocation(line: 37, column: 23, scope: !7)
!19 = !DILocation(line: 44, column: 64, scope: !7)
!20 = !DILocation(line: 35, column: 39, scope: !7)
!21 = !DILocation(line: 184, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 40, column: 51, scope: !7)
!25 = !DILocation(line: 183, column: 24, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 185, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 185, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 186, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 186, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 186, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 45, column: 25, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !38)
!38 = !DILocation(line: 47, column: 41, scope: !7)
!39 = !DILocation(line: 192, column: 21, scope: !40, inlinedAt: !38)
!40 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!41 = !DILocation(line: 193, column: 28, scope: !40, inlinedAt: !38)
!42 = !DILocation(line: 194, column: 39, scope: !40, inlinedAt: !38)
!43 = !DILocation(line: 194, column: 60, scope: !40, inlinedAt: !38)
!44 = !DILocation(line: 194, column: 49, scope: !40, inlinedAt: !38)
!45 = !DILocation(line: 196, column: 25, scope: !40, inlinedAt: !38)
!46 = !DILocation(line: 196, column: 17, scope: !40, inlinedAt: !38)
!47 = !DILocation(line: 197, column: 15, scope: !40, inlinedAt: !38)
!48 = !DILocation(line: 197, column: 30, scope: !40, inlinedAt: !38)
!49 = !DILocation(line: 197, column: 38, scope: !40, inlinedAt: !38)
!50 = !DILocation(line: 197, column: 49, scope: !40, inlinedAt: !38)
!51 = !DILocation(line: 197, column: 22, scope: !40, inlinedAt: !38)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 36, scope: !7)
!54 = !DILocation(line: 53, column: 25, scope: !7)
!55 = !DILocation(line: 53, column: 36, scope: !7)
!56 = !DILocation(line: 54, column: 25, scope: !7)
!57 = !DILocation(line: 54, column: 36, scope: !7)
!58 = !DILocation(line: 55, column: 25, scope: !7)
!59 = !DILocation(line: 55, column: 36, scope: !7)
!60 = !DILocation(line: 55, column: 4, scope: !7)
