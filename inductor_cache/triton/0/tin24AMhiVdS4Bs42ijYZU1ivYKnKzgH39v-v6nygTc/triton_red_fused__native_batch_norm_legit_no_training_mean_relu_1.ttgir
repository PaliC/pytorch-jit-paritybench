#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0)
#loc1 = loc(unknown)
#loc36 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":54:27)
#loc45 = loc(callsite(#loc1 at #loc36))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c256_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg1, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc8)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.load %13, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc12)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %17 = tt.load %16, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = arith.muli %0, %c4096_i32 : i32 loc(#loc14)
    %19 = tt.splat %18 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc15)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc16)
    %21 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc17)
    %22 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc18)
    %23 = arith.addf %11, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc19)
    %24 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc20)
    %25 = arith.divf %cst_0, %24 : tensor<1x1xf32, #blocked> loc(#loc21)
    %26 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc22)
    %27 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc23)
    %28 = tt.broadcast %17 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc24)
    %29 = scf.for %arg8 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg9 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %36 = tt.splat %arg8 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc26)
      %37 = arith.addi %36, %3 : tensor<1x2048xi32, #blocked> loc(#loc26)
      %38 = arith.cmpi slt, %37, %cst_2 : tensor<1x2048xi32, #blocked> loc(#loc27)
      %39 = arith.addi %37, %19 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %40 = tt.addptr %20, %39 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc16)
      %41 = arith.andi %38, %21 : tensor<1x2048xi1, #blocked> loc(#loc17)
      %42 = tt.load %40, %41, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc28)
      %43 = arith.subf %42, %22 : tensor<1x2048xf32, #blocked> loc(#loc18)
      %44 = arith.mulf %43, %26 : tensor<1x2048xf32, #blocked> loc(#loc22)
      %45 = arith.mulf %44, %27 : tensor<1x2048xf32, #blocked> loc(#loc23)
      %46 = arith.addf %45, %28 : tensor<1x2048xf32, #blocked> loc(#loc24)
      %47 = arith.cmpf ogt, %cst, %46 : tensor<1x2048xf32, #blocked> loc(#loc42)
      %48 = arith.select %47, %cst, %46 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc43)
      %49 = arith.addf %arg9, %48 : tensor<1x2048xf32, #blocked> loc(#loc32)
      %50 = arith.select %41, %49, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc33)
      scf.yield %50 : tensor<1x2048xf32, #blocked> loc(#loc34)
    } loc(#loc25)
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc36)), %arg9: f32 loc(callsite(#loc1 at #loc36))):
      %36 = arith.addf %arg8, %arg9 : f32 loc(#loc47)
      tt.reduce.return %36 : f32 loc(#loc44)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %31 = triton_gpu.convert_layout %30 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc38)
    %32 = tt.expand_dims %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc38)
    %33 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %34 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %35 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc40)
    tt.store %34, %32, %35 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":22:28)
#loc3 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":24:21)
#loc4 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":25:33)
#loc5 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":27:19)
#loc6 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":28:30)
#loc7 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":28:35)
#loc8 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":29:30)
#loc9 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":29:35)
#loc10 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":30:31)
#loc11 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":30:36)
#loc12 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":31:31)
#loc13 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":31:36)
#loc14 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":37:44)
#loc15 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":37:39)
#loc16 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":37:34)
#loc17 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":37:57)
#loc18 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":38:22)
#loc19 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":40:22)
#loc20 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":41:30)
#loc21 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":43:22)
#loc22 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":46:23)
#loc23 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":47:24)
#loc24 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":48:24)
#loc25 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":33:36)
#loc26 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":34:27)
#loc27 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":35:25)
#loc28 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":37:49)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":50:46)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":52:25)
#loc33 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":53:48)
#loc34 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":53:8)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc38 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":54:30)
#loc39 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":55:25)
#loc40 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":55:37)
#loc41 = loc("inductor_cache/3u/c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py":55:4)
#loc42 = loc(callsite(#loc29 at #loc30))
#loc43 = loc(callsite(#loc31 at #loc30))
#loc44 = loc(callsite(#loc35 at #loc36))
#loc46 = loc(callsite(#loc37 at #loc35))
#loc47 = loc(callsite(#loc46 at #loc36))
