; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 1024, !dbg !11
  %10 = srem i32 %8, 256, !dbg !12
  %11 = sext i32 %10 to i64, !dbg !13
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !13
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #5, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #5, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #5, !dbg !14
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #5, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #5, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %9) #5, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %9) #5, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %9) #5, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %9) #5, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %11, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %9) #5, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %9) #5, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %9) #5, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %9) #5, !dbg !20
  %33 = fadd float %22, 0x3EE4F8B580000000, !dbg !21
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !22
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !22
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !22
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !22
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !22
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !22
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !22
  %.not.i11 = icmp eq i32 %40, 0, !dbg !22
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !22
  %.not1.i14 = icmp eq i32 %41, 0, !dbg !22
  br i1 %.not.i11, label %47, label %42, !dbg !22

42:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %45, label %43, !dbg !22

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #5, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #5, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %50, label %48, !dbg !22

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #5, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #5, !dbg !22
  br label %__nv_sqrtf.exit15, !dbg !22

__nv_sqrtf.exit15:                                ; preds = %43, %45, %48, %50
  %.0.i13 = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !22
  %52 = shl i32 %8, 12, !dbg !23
  %53 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !24
  %54 = shl i32 %53, 2, !dbg !24
  %55 = and i32 %54, 2044, !dbg !24
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !25
  %57 = or disjoint i32 %52, %55
  %58 = sext i32 %57 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = or disjoint i64 %58, 2048, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %72 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !28
  %73 = insertelement <2 x i32> %72, i32 %62, i64 1, !dbg !28
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !28
  %75 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !30
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !30
  %77 = shufflevector <2 x float> %76, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !30
  %78 = fsub <2 x float> %74, %77, !dbg !30
  %79 = insertelement <2 x float> poison, float %56, i64 0, !dbg !31
  %80 = shufflevector <2 x float> %79, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !31
  %81 = fmul <2 x float> %80, %78, !dbg !31
  %82 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !32
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !32
  %84 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !32
  %85 = fmul <2 x float> %81, %84, !dbg !32
  %86 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !33
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !33
  %88 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !33
  %89 = fadd <2 x float> %85, %88, !dbg !33
  %90 = fcmp olt <2 x float> %89, zeroinitializer, !dbg !34
  %91 = select <2 x i1> %90, <2 x float> zeroinitializer, <2 x float> %89, !dbg !38
  %92 = fadd <2 x float> %91, zeroinitializer, !dbg !39
  %93 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !28
  %94 = insertelement <2 x i32> %93, i32 %69, i64 1, !dbg !28
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !28
  %96 = fsub <2 x float> %95, %77, !dbg !30
  %97 = fmul <2 x float> %80, %96, !dbg !31
  %98 = fmul <2 x float> %97, %84, !dbg !32
  %99 = fadd <2 x float> %98, %88, !dbg !33
  %100 = fcmp olt <2 x float> %99, zeroinitializer, !dbg !34
  %101 = select <2 x i1> %100, <2 x float> zeroinitializer, <2 x float> %99, !dbg !38
  %102 = fadd <2 x float> %92, %101, !dbg !39
  %103 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !28
  %104 = insertelement <2 x i32> %103, i32 %63, i64 1, !dbg !28
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !28
  %106 = fsub <2 x float> %105, %77, !dbg !30
  %107 = fmul <2 x float> %80, %106, !dbg !31
  %108 = fmul <2 x float> %107, %84, !dbg !32
  %109 = fadd <2 x float> %108, %88, !dbg !33
  %110 = fcmp olt <2 x float> %109, zeroinitializer, !dbg !34
  %111 = select <2 x i1> %110, <2 x float> zeroinitializer, <2 x float> %109, !dbg !38
  %112 = fadd <2 x float> %111, zeroinitializer, !dbg !39
  %113 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !28
  %114 = insertelement <2 x i32> %113, i32 %70, i64 1, !dbg !28
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !28
  %116 = fsub <2 x float> %115, %77, !dbg !30
  %117 = fmul <2 x float> %80, %116, !dbg !31
  %118 = fmul <2 x float> %117, %84, !dbg !32
  %119 = fadd <2 x float> %118, %88, !dbg !33
  %120 = fcmp olt <2 x float> %119, zeroinitializer, !dbg !34
  %121 = select <2 x i1> %120, <2 x float> zeroinitializer, <2 x float> %119, !dbg !38
  %122 = fadd <2 x float> %112, %121, !dbg !39
  %123 = lshr i32 %53, 5, !dbg !24
  %124 = and i32 %53, 31, !dbg !24
  %shift = shufflevector <2 x float> %102, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %125 = fadd <2 x float> %102, %shift, !dbg !40
  %shift19 = shufflevector <2 x float> %122, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %126 = fadd <2 x float> %shift19, %125, !dbg !40
  %127 = fadd <2 x float> %122, %126, !dbg !40
  %128 = extractelement <2 x float> %127, i64 0, !dbg !40
  %129 = select i1 %9, float %128, float 0.000000e+00, !dbg !40
  %130 = bitcast float %129 to i32, !dbg !45
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !45
  %132 = bitcast i32 %131 to float, !dbg !45
  %133 = fadd float %129, %132, !dbg !40
  %134 = bitcast float %133 to i32, !dbg !45
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !45
  %136 = bitcast i32 %135 to float, !dbg !45
  %137 = fadd float %133, %136, !dbg !40
  %138 = bitcast float %137 to i32, !dbg !45
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !45
  %140 = bitcast i32 %139 to float, !dbg !45
  %141 = fadd float %137, %140, !dbg !40
  %142 = bitcast float %141 to i32, !dbg !45
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !45
  %144 = bitcast i32 %143 to float, !dbg !45
  %145 = fadd float %141, %144, !dbg !40
  %146 = bitcast float %145 to i32, !dbg !45
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !45
  %148 = bitcast i32 %147 to float, !dbg !45
  %149 = fadd float %145, %148, !dbg !40
  %150 = icmp eq i32 %124, 0, !dbg !45
  %151 = and i32 %123, 15, !dbg !45
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !45
  %153 = bitcast float %149 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 %150) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %154 = icmp slt i32 %53, 16, !dbg !45
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !45
  %156 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %155, i1 %154) #5, !dbg !45
  %157 = bitcast i32 %156 to float, !dbg !45
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 8, i32 31), !dbg !45
  %159 = bitcast i32 %158 to float, !dbg !45
  %160 = fadd float %157, %159, !dbg !40
  %161 = bitcast float %160 to i32, !dbg !45
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !45
  %163 = bitcast i32 %162 to float, !dbg !45
  %164 = fadd float %160, %163, !dbg !40
  %165 = bitcast float %164 to i32, !dbg !45
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !45
  %167 = bitcast i32 %166 to float, !dbg !45
  %168 = fadd float %164, %167, !dbg !40
  %169 = bitcast float %168 to i32, !dbg !45
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !45
  %171 = bitcast i32 %170 to float, !dbg !45
  %172 = fadd float %168, %171, !dbg !40
  %173 = and i32 %53, 15, !dbg !45
  %174 = icmp eq i32 %173, 0, !dbg !45
  %175 = and i1 %154, %174, !dbg !45
  %176 = bitcast float %172 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %176, i1 %175) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %177 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %178 = sext i32 %8 to i64, !dbg !46
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %178, !dbg !46
  %urem = and i32 %53, 511, !dbg !47
  %180 = icmp eq i32 %urem, 0, !dbg !47
  %181 = and i1 %180, %9, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %179, i1 %181) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3uw7dw36e5yiqodckzskzlcbly6xcdykdf5zzyb3gxwwzexmuej.py", directory: "inductor_cache/3u")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_mean_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 35, scope: !7)
!15 = !DILocation(line: 29, column: 30, scope: !7)
!16 = !DILocation(line: 29, column: 35, scope: !7)
!17 = !DILocation(line: 30, column: 31, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 40, column: 22, scope: !7)
!22 = !DILocation(line: 41, column: 30, scope: !7)
!23 = !DILocation(line: 37, column: 44, scope: !7)
!24 = !DILocation(line: 25, column: 33, scope: !7)
!25 = !DILocation(line: 43, column: 22, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 49, scope: !7)
!29 = !DILocation(line: 37, column: 39, scope: !7)
!30 = !DILocation(line: 38, column: 22, scope: !7)
!31 = !DILocation(line: 46, column: 23, scope: !7)
!32 = !DILocation(line: 47, column: 24, scope: !7)
!33 = !DILocation(line: 48, column: 24, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 50, column: 46, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 54, column: 27, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 55, column: 25, scope: !7)
!47 = !DILocation(line: 55, column: 37, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
