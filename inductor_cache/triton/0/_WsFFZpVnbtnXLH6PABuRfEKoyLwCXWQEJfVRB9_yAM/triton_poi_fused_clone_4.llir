; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 100352, !dbg !14
  %19 = icmp slt i32 %14, 100352, !dbg !14
  %20 = srem i32 %11, 28, !dbg !15
  %21 = srem i32 %12, 28, !dbg !15
  %22 = srem i32 %13, 28, !dbg !15
  %23 = srem i32 %15, 28, !dbg !15
  %24 = srem i32 %16, 28, !dbg !15
  %25 = srem i32 %17, 28, !dbg !15
  %26 = sdiv i32 %10, 28, !dbg !16
  %27 = sdiv i32 %14, 28, !dbg !16
  %28 = sdiv i32 %10, 784, !dbg !17
  %29 = sdiv i32 %14, 784, !dbg !17
  %30 = srem i32 %28, 32, !dbg !18
  %31 = srem i32 %29, 32, !dbg !18
  %32 = mul i32 %28, 900, !dbg !19
  %33 = mul i32 %29, 900, !dbg !19
  %34 = add i32 %32, 31, !dbg !20
  %35 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %26, i64 1, !dbg !15
  %37 = srem <2 x i32> %36, splat (i32 28), !dbg !15
  %38 = extractelement <2 x i32> %37, i64 0, !dbg !21
  %39 = add i32 %34, %38, !dbg !21
  %40 = extractelement <2 x i32> %37, i64 1, !dbg !21
  %41 = mul nsw i32 %40, 30, !dbg !21
  %42 = add i32 %39, %41, !dbg !21
  %43 = add i32 %34, %20, !dbg !22
  %44 = add i32 %43, %41, !dbg !21
  %45 = add i32 %34, %21, !dbg !22
  %46 = add i32 %45, %41, !dbg !21
  %47 = add i32 %34, %22, !dbg !22
  %48 = add i32 %47, %41, !dbg !21
  %49 = add i32 %33, 31, !dbg !20
  %50 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %27, i64 1, !dbg !15
  %52 = srem <2 x i32> %51, splat (i32 28), !dbg !15
  %53 = extractelement <2 x i32> %52, i64 0, !dbg !21
  %54 = add i32 %49, %53, !dbg !21
  %55 = extractelement <2 x i32> %52, i64 1, !dbg !21
  %56 = mul nsw i32 %55, 30, !dbg !21
  %57 = add i32 %54, %56, !dbg !21
  %58 = add i32 %49, %23, !dbg !22
  %59 = add i32 %58, %56, !dbg !21
  %60 = add i32 %49, %24, !dbg !22
  %61 = add i32 %60, %56, !dbg !21
  %62 = add i32 %49, %25, !dbg !22
  %63 = add i32 %62, %56, !dbg !21
  %64 = sext i32 %42 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = sext i32 %44 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %46 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %48 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = sext i32 %57 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = sext i32 %59 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = sext i32 %61 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %78 = sext i32 %63 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !23
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #1, !dbg !24
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %18) #1, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %18) #1, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %18) #1, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %19) #1, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %19) #1, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %19) #1, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %19) #1, !dbg !24
  %88 = sext i32 %30 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !25
  %90 = sext i32 %31 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %18) #1, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #1, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #1, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #1, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %19) #1, !dbg !26
  %100 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !24
  %101 = insertelement <8 x i32> %100, i32 %86, i64 1, !dbg !24
  %102 = insertelement <8 x i32> %101, i32 %85, i64 2, !dbg !24
  %103 = insertelement <8 x i32> %102, i32 %84, i64 3, !dbg !24
  %104 = insertelement <8 x i32> %103, i32 %83, i64 4, !dbg !24
  %105 = insertelement <8 x i32> %104, i32 %82, i64 5, !dbg !24
  %106 = insertelement <8 x i32> %105, i32 %81, i64 6, !dbg !24
  %107 = insertelement <8 x i32> %106, i32 %80, i64 7, !dbg !24
  %108 = bitcast <8 x i32> %107 to <8 x float>, !dbg !24
  %109 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !26
  %110 = insertelement <8 x i32> %109, i32 %98, i64 1, !dbg !26
  %111 = insertelement <8 x i32> %110, i32 %97, i64 2, !dbg !26
  %112 = insertelement <8 x i32> %111, i32 %96, i64 3, !dbg !26
  %113 = insertelement <8 x i32> %112, i32 %95, i64 4, !dbg !26
  %114 = insertelement <8 x i32> %113, i32 %94, i64 5, !dbg !26
  %115 = insertelement <8 x i32> %114, i32 %93, i64 6, !dbg !26
  %116 = insertelement <8 x i32> %115, i32 %92, i64 7, !dbg !26
  %117 = bitcast <8 x i32> %116 to <8 x float>, !dbg !26
  %118 = fadd <8 x float> %108, %117, !dbg !27
  %119 = fcmp olt <8 x float> %118, zeroinitializer, !dbg !28
  %120 = extractelement <8 x i1> %119, i64 7, !dbg !32
  %121 = extractelement <8 x i1> %119, i64 6, !dbg !32
  %122 = extractelement <8 x i1> %119, i64 5, !dbg !32
  %123 = extractelement <8 x i1> %119, i64 4, !dbg !32
  %124 = extractelement <8 x i1> %119, i64 3, !dbg !32
  %125 = extractelement <8 x i1> %119, i64 2, !dbg !32
  %126 = extractelement <8 x i1> %119, i64 1, !dbg !32
  %127 = extractelement <8 x i1> %119, i64 0, !dbg !32
  %128 = sext i32 %10 to i64, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !33
  %130 = sext i32 %14 to i64, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !33
  %bc = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %132 = extractelement <8 x i32> %bc, i64 7, !dbg !34
  %133 = select i1 %120, i32 0, i32 %132, !dbg !32
  %bc1 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %134 = extractelement <8 x i32> %bc1, i64 6, !dbg !34
  %135 = select i1 %121, i32 0, i32 %134, !dbg !32
  %bc2 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %136 = extractelement <8 x i32> %bc2, i64 5, !dbg !34
  %137 = select i1 %122, i32 0, i32 %136, !dbg !32
  %bc3 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %138 = extractelement <8 x i32> %bc3, i64 4, !dbg !34
  %139 = select i1 %123, i32 0, i32 %138, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %135, i32 %137, i32 %139, ptr addrspace(1) %129, i1 %18) #1, !dbg !34
  %bc4 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %140 = extractelement <8 x i32> %bc4, i64 3, !dbg !34
  %141 = select i1 %124, i32 0, i32 %140, !dbg !32
  %bc5 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %142 = extractelement <8 x i32> %bc5, i64 2, !dbg !34
  %143 = select i1 %125, i32 0, i32 %142, !dbg !32
  %bc6 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %144 = extractelement <8 x i32> %bc6, i64 1, !dbg !34
  %145 = select i1 %126, i32 0, i32 %144, !dbg !32
  %bc7 = bitcast <8 x float> %118 to <8 x i32>, !dbg !34
  %146 = extractelement <8 x i32> %bc7, i64 0, !dbg !34
  %147 = select i1 %127, i32 0, i32 %146, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %141, i32 %143, i32 %145, i32 %147, ptr addrspace(1) %131, i1 %19) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbqd5dyh5qu54lzw5ss3uvi7hdgjdji4lxuasfchpkwiovqpwcr7.py", directory: "inductor_cache/bq")
!4 = !{ptr @triton_poi_fused_clone_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_4", linkageName: "triton_poi_fused_clone_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 52, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 48, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 57, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 33, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 34, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 4, scope: !7)
