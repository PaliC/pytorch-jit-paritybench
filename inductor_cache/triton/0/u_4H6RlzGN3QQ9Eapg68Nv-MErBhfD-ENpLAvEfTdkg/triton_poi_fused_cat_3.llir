; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = srem i32 %15, 12, !dbg !15
  %17 = mul i32 %15, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen6 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen6, 3072, !dbg !17
  %19 = icmp slt i32 %16, 8, !dbg !18
  %20 = mul i32 %18, 3072, !dbg !19
  %srem.decomposed = sub i32 %.frozen6, %20, !dbg !19
  %21 = shl nsw i32 %18, 11, !dbg !20
  %22 = add nsw i32 %21, %srem.decomposed, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #3, !dbg !23
  %26 = icmp sgt i32 %16, 7, !dbg !24
  %27 = add nsw i32 %16, -8, !dbg !25
  %28 = shl nsw i32 %27, 8, !dbg !26
  %29 = shl nsw i32 %18, 10, !dbg !27
  %30 = add nsw i32 %29, %.decomposed, !dbg !28
  %31 = add nsw i32 %30, %28, !dbg !29
  %32 = sext i32 %31 to i64, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !30
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !31
  %35 = sext i32 %27 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !32
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %26, i32 0, i1 %26) #3, !dbg !33
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %26, i32 0, i1 %26) #3, !dbg !33
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !34
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %26, i32 0, i1 %26) #3, !dbg !35
  %41 = bitcast i32 %40 to float, !dbg !35
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %26, i32 0, i1 %26) #3, !dbg !35
  %43 = bitcast i32 %42 to float, !dbg !35
  %44 = fadd float %41, 0x3EE4F8B580000000, !dbg !36
  %45 = fadd float %43, 0x3EE4F8B580000000, !dbg !36
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %46, 0, !dbg !37
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %47, 0, !dbg !37
  br i1 %.not.i, label %53, label %48, !dbg !37

48:                                               ; preds = %8
  br i1 %.not1.i, label %51, label %49, !dbg !37

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

53:                                               ; preds = %8
  br i1 %.not1.i, label %56, label %54, !dbg !37

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !37
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i1, label %65, label %60, !dbg !37

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !37
  %70 = extractvalue { i32, i32 } %34, 1, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = bitcast i32 %38 to float, !dbg !33
  %73 = fsub float %71, %72, !dbg !38
  %74 = extractvalue { i32, i32 } %34, 0, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = bitcast i32 %37 to float, !dbg !33
  %77 = fsub float %75, %76, !dbg !38
  %78 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %79 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %82 = fmul float %77, %80, !dbg !40
  %83 = fmul float %73, %81, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !41
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %26, i32 0, i1 %26) #3, !dbg !42
  %86 = bitcast i32 %85 to float, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %26, i32 0, i1 %26) #3, !dbg !42
  %88 = bitcast i32 %87 to float, !dbg !42
  %89 = fmul float %82, %86, !dbg !43
  %90 = fmul float %83, %88, !dbg !43
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !44
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %26, i32 0, i1 %26) #3, !dbg !45
  %93 = bitcast i32 %92 to float, !dbg !45
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %26, i32 0, i1 %26) #3, !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = fadd float %89, %93, !dbg !46
  %97 = fadd float %90, %95, !dbg !46
  %98 = fcmp olt float %96, 0.000000e+00, !dbg !47
  %99 = fcmp olt float %97, 0.000000e+00, !dbg !47
  %100 = select i1 %98, float 0.000000e+00, float %96, !dbg !51
  %101 = select i1 %99, float 0.000000e+00, float %97, !dbg !51
  %102 = sext i32 %14 to i64, !dbg !52
  %103 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !52
  %104 = bitcast float %100 to i32, !dbg !53
  %105 = select i1 %19, i32 %79, i32 %104, !dbg !54
  %106 = bitcast float %101 to i32, !dbg !53
  %107 = select i1 %19, i32 %78, i32 %106, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %105, i32 %107, ptr addrspace(1) %103, i1 true) #3, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdzbpw2glpaatfl2wtwrdjsiccd27jffhds4l7knde6icnxl7stp.py", directory: "inductor_cache/dz")
!4 = !{ptr @triton_poi_fused_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_3", linkageName: "triton_poi_fused_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 47, scope: !7)
!26 = !DILocation(line: 37, column: 40, scope: !7)
!27 = !DILocation(line: 37, column: 58, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 53, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 63, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 40, column: 31, scope: !7)
!35 = !DILocation(line: 40, column: 43, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 27, scope: !7)
!38 = !DILocation(line: 39, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 43, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 31, scope: !7)
!45 = !DILocation(line: 51, column: 43, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 54, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 37, scope: !7)
!54 = !DILocation(line: 57, column: 33, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
