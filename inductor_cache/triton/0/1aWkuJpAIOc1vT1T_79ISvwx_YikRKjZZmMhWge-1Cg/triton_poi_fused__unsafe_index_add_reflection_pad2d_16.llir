; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__unsafe_index_add_reflection_pad2d_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = icmp slt i32 %15, 591872, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %18 = sdiv i32 %.frozen, 34, !dbg !15
  %19 = srem i32 %18, 34, !dbg !16
  %20 = mul i32 %18, 34, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = srem i32 %16, 34, !dbg !17
  %22 = sdiv i32 %15, 1156, !dbg !18
  %23 = srem i32 %22, 128, !dbg !19
  %24 = add nsw i32 %19, -1, !dbg !20
  %25 = tail call i32 @llvm.abs.i32(i32 %24, i1 true), !dbg !21
  %26 = add nsw i32 %25, -31, !dbg !22
  %27 = tail call i32 @llvm.abs.i32(i32 %26, i1 true), !dbg !23
  %28 = sub nuw nsw i32 31, %27, !dbg !24
  %29 = zext nneg i32 %28 to i64, !dbg !25
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !26
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !26
  %33 = add nsw i32 %.decomposed, -1, !dbg !27
  %34 = add nsw i32 %21, -1, !dbg !27
  %35 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !28
  %36 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !28
  %37 = add nsw i32 %35, -31, !dbg !29
  %38 = add nsw i32 %36, -31, !dbg !29
  %39 = tail call i32 @llvm.abs.i32(i32 %37, i1 true), !dbg !30
  %40 = tail call i32 @llvm.abs.i32(i32 %38, i1 true), !dbg !30
  %41 = sub nuw nsw i32 31, %39, !dbg !31
  %42 = sub nuw nsw i32 31, %40, !dbg !31
  %43 = zext nneg i32 %41 to i64, !dbg !32
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !32
  %45 = zext nneg i32 %42 to i64, !dbg !32
  %46 = getelementptr i64, ptr addrspace(1) %0, i64 %45, !dbg !32
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %17) #3, !dbg !33
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %17) #3, !dbg !33
  %49 = sext i32 %22 to i64, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #3, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #3, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !37
  %55 = bitcast i32 %54 to float, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !37
  %57 = bitcast i32 %56 to float, !dbg !37
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !38
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !39
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !39
  %61 = sext i32 %23 to i64, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !40
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #3, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #3, !dbg !41
  %65 = lshr i64 %31, 59, !dbg !42
  %66 = and i64 %65, 16, !dbg !42
  %67 = add i64 %66, %31, !dbg !42
  %68 = lshr i64 %32, 59, !dbg !42
  %69 = and i64 %68, 16, !dbg !42
  %70 = add i64 %69, %32, !dbg !42
  %71 = lshr i64 %47, 59, !dbg !43
  %72 = and i64 %71, 16, !dbg !43
  %73 = add i64 %72, %47, !dbg !43
  %74 = lshr i64 %48, 59, !dbg !43
  %75 = and i64 %74, 16, !dbg !43
  %76 = shl i64 %67, 4, !dbg !44
  %77 = shl i64 %70, 4, !dbg !44
  %78 = add i64 %73, %76, !dbg !45
  %79 = shl nsw i32 %22, 8, !dbg !46
  %80 = sext i32 %79 to i64, !dbg !47
  %81 = add i64 %78, %80, !dbg !47
  %82 = add i64 %48, %80, !dbg !43
  %83 = add i64 %82, %75, !dbg !45
  %84 = add i64 %83, %77, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !48
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %17) #3, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %17) #3, !dbg !49
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 2.560000e+02) #3, !dbg !50
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 2.560000e+02) #3, !dbg !50
  %91 = fadd float %89, 0x3EE4F8B580000000, !dbg !51
  %92 = fadd float %90, 0x3EE4F8B580000000, !dbg !51
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %93, 0, !dbg !52
  br i1 %.not.i, label %96, label %94, !dbg !52

94:                                               ; preds = %9
  %95 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %91), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

96:                                               ; preds = %9
  %97 = tail call float @llvm.nvvm.rsqrt.approx.f(float %91), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %94, %96
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], !dbg !52
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %98, 0, !dbg !52
  br i1 %.not.i1, label %101, label %99, !dbg !52

99:                                               ; preds = %__nv_rsqrtf.exit
  %100 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %92), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

101:                                              ; preds = %__nv_rsqrtf.exit
  %102 = tail call float @llvm.nvvm.rsqrt.approx.f(float %92), !dbg !52
  br label %__nv_rsqrtf.exit3, !dbg !52

__nv_rsqrtf.exit3:                                ; preds = %99, %101
  %.0.i2 = phi float [ %100, %99 ], [ %102, %101 ], !dbg !52
  %103 = bitcast i32 %88 to float, !dbg !49
  %104 = bitcast i32 %52 to float, !dbg !35
  %105 = fsub float %103, %104, !dbg !53
  %106 = bitcast i32 %87 to float, !dbg !49
  %107 = bitcast i32 %51 to float, !dbg !35
  %108 = fsub float %106, %107, !dbg !53
  %109 = bitcast i32 %64 to float, !dbg !41
  %110 = bitcast i32 %63 to float, !dbg !41
  %111 = bitcast i32 %60 to float, !dbg !39
  %112 = bitcast i32 %59 to float, !dbg !39
  %113 = fmul float %108, %.0.i, !dbg !54
  %114 = fmul float %105, %.0.i2, !dbg !54
  %115 = fmul float %113, %112, !dbg !55
  %116 = fmul float %114, %111, !dbg !55
  %117 = fadd float %115, %110, !dbg !56
  %118 = fadd float %116, %109, !dbg !56
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !57
  %120 = getelementptr float, ptr addrspace(1) %6, i64 %84, !dbg !57
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %17) #3, !dbg !58
  %122 = bitcast i32 %121 to float, !dbg !58
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %17) #3, !dbg !58
  %124 = bitcast i32 %123 to float, !dbg !58
  %125 = fadd float %117, %122, !dbg !59
  %126 = fadd float %118, %124, !dbg !59
  %127 = sext i32 %15 to i64, !dbg !60
  %128 = getelementptr float, ptr addrspace(1) %7, i64 %127, !dbg !60
  %129 = bitcast float %125 to i32, !dbg !61
  %130 = bitcast float %126 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %128, i1 %17) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpfjgn3jyxqshumf3pxqomp52ydcaa5fntse3igv6djthaoeiv47.py", directory: "inductor_cache/pf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_reflection_pad2d_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_reflection_pad2d_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_reflection_pad2d_16", linkageName: "triton_poi_fused__unsafe_index_add_reflection_pad2d_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 29, scope: !7)
!20 = !DILocation(line: 29, column: 80, scope: !7)
!21 = !DILocation(line: 29, column: 73, scope: !7)
!22 = !DILocation(line: 29, column: 61, scope: !7)
!23 = !DILocation(line: 29, column: 53, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 88, scope: !7)
!27 = !DILocation(line: 30, column: 80, scope: !7)
!28 = !DILocation(line: 30, column: 73, scope: !7)
!29 = !DILocation(line: 30, column: 61, scope: !7)
!30 = !DILocation(line: 30, column: 53, scope: !7)
!31 = !DILocation(line: 30, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 30, scope: !7)
!33 = !DILocation(line: 30, column: 88, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 32, column: 31, scope: !7)
!37 = !DILocation(line: 32, column: 36, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 38, column: 32, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 42, column: 40, scope: !7)
!45 = !DILocation(line: 42, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 51, scope: !7)
!47 = !DILocation(line: 42, column: 47, scope: !7)
!48 = !DILocation(line: 42, column: 30, scope: !7)
!49 = !DILocation(line: 42, column: 56, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 28, scope: !7)
!53 = !DILocation(line: 43, column: 19, scope: !7)
!54 = !DILocation(line: 49, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 31, scope: !7)
!58 = !DILocation(line: 52, column: 57, scope: !7)
!59 = !DILocation(line: 53, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 25, scope: !7)
!61 = !DILocation(line: 54, column: 37, scope: !7)
!62 = !DILocation(line: 54, column: 4, scope: !7)
