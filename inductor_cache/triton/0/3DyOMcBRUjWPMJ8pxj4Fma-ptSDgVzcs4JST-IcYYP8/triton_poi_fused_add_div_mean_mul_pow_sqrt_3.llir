; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_mul_pow_sqrt_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 4, !dbg !15
  %15 = srem i32 %14, 4, !dbg !16
  %16 = mul i32 %14, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = sdiv i32 %12, 16, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #3, !dbg !20
  %21 = sext i32 %15 to i64, !dbg !21
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !21
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #3, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #3, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !23
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %13) #3, !dbg !24
  %27 = shl nsw i32 %17, 4, !dbg !25
  %28 = add i32 %27, %.decomposed, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !27
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %13) #3, !dbg !28
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !28
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !28
  %34 = bitcast i32 %32 to float, !dbg !28
  %35 = bitcast i32 %33 to float, !dbg !28
  %36 = add i32 %28, 4, !dbg !29
  %37 = sext i32 %36 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !30
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %13) #3, !dbg !31
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !31
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = add i32 %28, 8, !dbg !32
  %45 = sext i32 %44 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !33
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %13) #3, !dbg !34
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !34
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !34
  %50 = bitcast i32 %48 to float, !dbg !34
  %51 = bitcast i32 %49 to float, !dbg !34
  %52 = add i32 %28, 12, !dbg !35
  %53 = sext i32 %52 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !36
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %13) #3, !dbg !37
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !37
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !37
  %58 = bitcast i32 %56 to float, !dbg !37
  %59 = bitcast i32 %57 to float, !dbg !37
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !38
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %13) #3, !dbg !39
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %13) #3, !dbg !39
  %63 = fmul float %34, %34, !dbg !40
  %64 = fmul float %35, %35, !dbg !40
  %65 = fmul float %42, %42, !dbg !41
  %66 = fmul float %43, %43, !dbg !41
  %67 = fadd float %63, %65, !dbg !42
  %68 = fadd float %64, %66, !dbg !42
  %69 = fmul float %50, %50, !dbg !43
  %70 = fmul float %51, %51, !dbg !43
  %71 = fadd float %67, %69, !dbg !44
  %72 = fadd float %68, %70, !dbg !44
  %73 = fmul float %58, %58, !dbg !45
  %74 = fmul float %59, %59, !dbg !45
  %75 = fadd float %71, %73, !dbg !46
  %76 = fadd float %72, %74, !dbg !46
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 4.000000e+00) #3, !dbg !47
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 4.000000e+00) #3, !dbg !47
  %79 = fadd float %77, 0x3EB0C6F7A0000000, !dbg !48
  %80 = fadd float %78, 0x3EB0C6F7A0000000, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %81, 0, !dbg !49
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %82, 0, !dbg !49
  br i1 %.not.i, label %88, label %83, !dbg !49

83:                                               ; preds = %6
  br i1 %.not1.i, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

88:                                               ; preds = %6
  br i1 %.not1.i, label %91, label %89, !dbg !49

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !49
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %93, 0, !dbg !49
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !49
  br i1 %.not.i1, label %100, label %95, !dbg !49

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !49

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = bitcast i32 %62 to float, !dbg !39
  %106 = bitcast i32 %61 to float, !dbg !39
  %107 = extractvalue { i32, i32 } %26, 1, !dbg !24
  %108 = bitcast i32 %107 to float, !dbg !24
  %109 = extractvalue { i32, i32 } %26, 0, !dbg !24
  %110 = bitcast i32 %109 to float, !dbg !24
  %111 = bitcast i32 %24 to float, !dbg !22
  %112 = bitcast i32 %23 to float, !dbg !22
  %113 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %114 = bitcast i32 %113 to float, !dbg !20
  %115 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %116 = bitcast i32 %115 to float, !dbg !20
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %.0.i) #3, !dbg !50
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %.0.i3) #3, !dbg !50
  %119 = fmul float %117, %112, !dbg !51
  %120 = fmul float %118, %111, !dbg !51
  %121 = fadd float %119, %106, !dbg !52
  %122 = fadd float %120, %105, !dbg !52
  %123 = fadd float %121, %116, !dbg !53
  %124 = fadd float %122, %114, !dbg !53
  %125 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !54
  %126 = bitcast float %123 to i32, !dbg !55
  %127 = bitcast float %124 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %125, i1 %13) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmwappexbp5hkbczxr3mvaoqwxpysy4qz2g2s3f463dsmpglyxbz.py", directory: "inductor_cache/mw")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sqrt_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sqrt_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_pow_sqrt_3", linkageName: "triton_poi_fused_add_div_mean_mul_pow_sqrt_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 38, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 43, scope: !7)
!29 = !DILocation(line: 32, column: 39, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 47, scope: !7)
!32 = !DILocation(line: 33, column: 39, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 47, scope: !7)
!35 = !DILocation(line: 34, column: 41, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 19, scope: !7)
!45 = !DILocation(line: 41, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 27, scope: !7)
!50 = !DILocation(line: 48, column: 19, scope: !7)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 19, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 37, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
