; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 34816, !dbg !14
  %21 = srem i32 %19, 1088, !dbg !15
  %22 = srem i32 %19, 64, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %20) #3, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = bitcast i32 %29 to float, !dbg !20
  %34 = bitcast i32 %30 to float, !dbg !20
  %35 = bitcast i32 %31 to float, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #3, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #3, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #3, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = bitcast i32 %45 to float, !dbg !28
  %50 = bitcast i32 %46 to float, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %20) #3, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !31
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %20) #3, !dbg !32
  %56 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !33
  %57 = shufflevector <2 x i32> %56, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !33
  %58 = sdiv <2 x i32> %57, <i32 64, i32 1088>, !dbg !33
  %59 = srem <2 x i32> %58, <i32 17, i32 8>, !dbg !34
  %60 = shufflevector <2 x i32> %59, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %61 = extractelement <2 x i32> %59, i64 1
  %62 = shl nsw i32 %61, 1, !dbg !35
  %63 = icmp sgt <4 x i32> %60, <i32 15, i32 6, i32 0, i32 -1>, !dbg !36
  %64 = extractelement <4 x i1> %63, i64 2, !dbg !37
  %65 = extractelement <4 x i1> %63, i64 3, !dbg !37
  %66 = and i1 %65, %64, !dbg !37
  %67 = extractelement <2 x i32> %58, i64 1, !dbg !38
  %68 = shl i32 %67, 11, !dbg !38
  %69 = add i32 %68, %21, !dbg !39
  %70 = add i32 %69, -64, !dbg !40
  %71 = sext i32 %70 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !41
  %73 = and i1 %20, %66, !dbg !42
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !43
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !43
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !43
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !43
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !43
  %79 = bitcast i32 %75 to float, !dbg !43
  %80 = bitcast i32 %76 to float, !dbg !43
  %81 = bitcast i32 %77 to float, !dbg !43
  %82 = bitcast i32 %78 to float, !dbg !43
  %83 = extractelement <2 x i32> %59, i64 0
  %84 = icmp ult i32 %83, 16, !dbg !44
  %85 = and i1 %65, %84, !dbg !45
  %86 = sext i32 %69 to i64, !dbg !46
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !46
  %88 = and i1 %20, %85, !dbg !47
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !48
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !48
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !48
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !48
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !48
  %94 = bitcast i32 %90 to float, !dbg !48
  %95 = bitcast i32 %91 to float, !dbg !48
  %96 = bitcast i32 %92 to float, !dbg !48
  %97 = bitcast i32 %93 to float, !dbg !48
  %98 = fadd float %79, %94, !dbg !49
  %99 = fadd float %80, %95, !dbg !49
  %100 = fadd float %81, %96, !dbg !49
  %101 = fadd float %82, %97, !dbg !49
  %102 = add i32 %69, 960, !dbg !50
  %103 = sext i32 %102 to i64, !dbg !51
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !51
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #3, !dbg !52
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !52
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !52
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !52
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !52
  %110 = bitcast i32 %106 to float, !dbg !52
  %111 = bitcast i32 %107 to float, !dbg !52
  %112 = bitcast i32 %108 to float, !dbg !52
  %113 = bitcast i32 %109 to float, !dbg !52
  %114 = fadd float %98, %110, !dbg !53
  %115 = fadd float %99, %111, !dbg !53
  %116 = fadd float %100, %112, !dbg !53
  %117 = fadd float %101, %113, !dbg !53
  %118 = add i32 %69, 1024, !dbg !54
  %119 = sext i32 %118 to i64, !dbg !55
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !55
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #3, !dbg !56
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !56
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !56
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !56
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !56
  %126 = bitcast i32 %122 to float, !dbg !56
  %127 = bitcast i32 %123 to float, !dbg !56
  %128 = bitcast i32 %124 to float, !dbg !56
  %129 = bitcast i32 %125 to float, !dbg !56
  %130 = fadd float %114, %126, !dbg !57
  %131 = fadd float %115, %127, !dbg !57
  %132 = fadd float %116, %128, !dbg !57
  %133 = fadd float %117, %129, !dbg !57
  %134 = add nsw i32 %62, 2, !dbg !58
  %135 = extractelement <4 x i1> %63, i64 1, !dbg !59
  %136 = select i1 %135, i32 16, i32 0, !dbg !59
  %137 = icmp slt i32 %61, 7, !dbg !60
  %138 = select i1 %137, i32 %134, i32 0, !dbg !61
  %139 = add nsw i32 %138, %136, !dbg !62
  %140 = add nsw i32 %83, 1, !dbg !63
  %141 = extractelement <4 x i1> %63, i64 0, !dbg !64
  %142 = select i1 %141, i32 17, i32 0, !dbg !64
  %143 = icmp slt i32 %83, 16, !dbg !65
  %144 = select i1 %143, i32 %140, i32 0, !dbg !66
  %145 = add nsw i32 %142, %144, !dbg !67
  %146 = shl nsw i32 %61, 1
  %reass.add = sub nsw i32 %139, %146
  %reass.add36 = sub nsw i32 %62, %139
  %reass.mul37 = mul nsw i32 %reass.add36, %83
  %reass.mul38 = add nsw i32 %145, 1, !dbg !68
  %147 = mul nsw i32 %reass.add, %reass.mul38, !dbg !68
  %148 = add nsw i32 %147, %reass.mul37, !dbg !69
  %149 = sitofp i32 %148 to float, !dbg !70
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %149) #3, !dbg !70
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %149) #3, !dbg !70
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %149) #3, !dbg !70
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %149) #3, !dbg !70
  %154 = fadd float %32, 0x3EE4F8B580000000, !dbg !71
  %155 = fadd float %33, 0x3EE4F8B580000000, !dbg !71
  %156 = fadd float %34, 0x3EE4F8B580000000, !dbg !71
  %157 = fadd float %35, 0x3EE4F8B580000000, !dbg !71
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i = icmp eq i32 %158, 0, !dbg !72
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i = icmp eq i32 %159, 0, !dbg !72
  br i1 %.not.i, label %165, label %160, !dbg !72

160:                                              ; preds = %13
  br i1 %.not1.i, label %163, label %161, !dbg !72

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

165:                                              ; preds = %13
  br i1 %.not1.i, label %168, label %166, !dbg !72

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !72
  br label %__nv_sqrtf.exit, !dbg !72

__nv_sqrtf.exit:                                  ; preds = %161, %163, %166, %168
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !72
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i1 = icmp eq i32 %170, 0, !dbg !72
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i4 = icmp eq i32 %171, 0, !dbg !72
  br i1 %.not.i1, label %177, label %172, !dbg !72

172:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %175, label %173, !dbg !72

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

177:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %180, label %178, !dbg !72

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

__nv_sqrtf.exit5:                                 ; preds = %173, %175, %178, %180
  %.0.i3 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !72
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i6 = icmp eq i32 %182, 0, !dbg !72
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i9 = icmp eq i32 %183, 0, !dbg !72
  br i1 %.not.i6, label %189, label %184, !dbg !72

184:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %187, label %185, !dbg !72

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

189:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %192, label %190, !dbg !72

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !72
  br label %__nv_sqrtf.exit10, !dbg !72

__nv_sqrtf.exit10:                                ; preds = %185, %187, %190, %192
  %.0.i8 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !72
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !72
  %.not.i11 = icmp eq i32 %194, 0, !dbg !72
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !72
  %.not1.i14 = icmp eq i32 %195, 0, !dbg !72
  br i1 %.not.i11, label %201, label %196, !dbg !72

196:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %199, label %197, !dbg !72

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

201:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %204, label %202, !dbg !72

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !72
  br label %__nv_sqrtf.exit15, !dbg !72

__nv_sqrtf.exit15:                                ; preds = %197, %199, %202, %204
  %.0.i13 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !72
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !73
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !73
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !73
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !73
  %210 = fadd float %48, 0x3EE4F8B580000000, !dbg !74
  %211 = fadd float %49, 0x3EE4F8B580000000, !dbg !74
  %212 = fadd float %50, 0x3EE4F8B580000000, !dbg !74
  %213 = fadd float %51, 0x3EE4F8B580000000, !dbg !74
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i16 = icmp eq i32 %214, 0, !dbg !75
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i19 = icmp eq i32 %215, 0, !dbg !75
  br i1 %.not.i16, label %221, label %216, !dbg !75

216:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %219, label %217, !dbg !75

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

221:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %224, label %222, !dbg !75

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #3, !dbg !75
  br label %__nv_sqrtf.exit20, !dbg !75

__nv_sqrtf.exit20:                                ; preds = %217, %219, %222, %224
  %.0.i18 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !75
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i21 = icmp eq i32 %226, 0, !dbg !75
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i24 = icmp eq i32 %227, 0, !dbg !75
  br i1 %.not.i21, label %233, label %228, !dbg !75

228:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %231, label %229, !dbg !75

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

233:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %236, label %234, !dbg !75

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !75
  br label %__nv_sqrtf.exit25, !dbg !75

__nv_sqrtf.exit25:                                ; preds = %229, %231, %234, %236
  %.0.i23 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !75
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i26 = icmp eq i32 %238, 0, !dbg !75
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i29 = icmp eq i32 %239, 0, !dbg !75
  br i1 %.not.i26, label %245, label %240, !dbg !75

240:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %243, label %241, !dbg !75

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %212) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %212) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

245:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %248, label %246, !dbg !75

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %212) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %212) #3, !dbg !75
  br label %__nv_sqrtf.exit30, !dbg !75

__nv_sqrtf.exit30:                                ; preds = %241, %243, %246, %248
  %.0.i28 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !75
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !75
  %.not.i31 = icmp eq i32 %250, 0, !dbg !75
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !75
  %.not1.i34 = icmp eq i32 %251, 0, !dbg !75
  br i1 %.not.i31, label %257, label %252, !dbg !75

252:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %255, label %253, !dbg !75

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %213) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %213) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

257:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %260, label %258, !dbg !75

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %213) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %213) #3, !dbg !75
  br label %__nv_sqrtf.exit35, !dbg !75

__nv_sqrtf.exit35:                                ; preds = %253, %255, %258, %260
  %.0.i33 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !75
  %262 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %263 = bitcast i32 %262 to float, !dbg !26
  %264 = fsub float %153, %263, !dbg !76
  %265 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %266 = bitcast i32 %265 to float, !dbg !26
  %267 = fsub float %152, %266, !dbg !76
  %268 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %269 = bitcast i32 %268 to float, !dbg !26
  %270 = fsub float %151, %269, !dbg !76
  %271 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %272 = bitcast i32 %271 to float, !dbg !26
  %273 = fsub float %150, %272, !dbg !76
  %274 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %275 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %276 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %277 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %278 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %279 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %280 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %281 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %282 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %283 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %284 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %285 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %286 = insertelement <4 x i32> poison, i32 %283, i64 0, !dbg !18
  %287 = insertelement <4 x i32> %286, i32 %280, i64 1, !dbg !18
  %288 = insertelement <4 x i32> %287, i32 %277, i64 2, !dbg !18
  %289 = insertelement <4 x i32> %288, i32 %274, i64 3, !dbg !18
  %290 = bitcast <4 x i32> %289 to <4 x float>, !dbg !18
  %291 = insertelement <4 x float> poison, float %150, i64 0, !dbg !77
  %292 = insertelement <4 x float> %291, float %151, i64 1, !dbg !77
  %293 = insertelement <4 x float> %292, float %152, i64 2, !dbg !77
  %294 = insertelement <4 x float> %293, float %153, i64 3, !dbg !77
  %295 = fsub <4 x float> %294, %290, !dbg !77
  %296 = insertelement <4 x float> poison, float %206, i64 0, !dbg !78
  %297 = insertelement <4 x float> %296, float %207, i64 1, !dbg !78
  %298 = insertelement <4 x float> %297, float %208, i64 2, !dbg !78
  %299 = insertelement <4 x float> %298, float %209, i64 3, !dbg !78
  %300 = fmul <4 x float> %295, %299, !dbg !78
  %301 = insertelement <4 x i32> poison, i32 %284, i64 0, !dbg !22
  %302 = insertelement <4 x i32> %301, i32 %281, i64 1, !dbg !22
  %303 = insertelement <4 x i32> %302, i32 %278, i64 2, !dbg !22
  %304 = insertelement <4 x i32> %303, i32 %275, i64 3, !dbg !22
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !22
  %306 = fmul <4 x float> %300, %305, !dbg !79
  %307 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !24
  %308 = insertelement <4 x i32> %307, i32 %282, i64 1, !dbg !24
  %309 = insertelement <4 x i32> %308, i32 %279, i64 2, !dbg !24
  %310 = insertelement <4 x i32> %309, i32 %276, i64 3, !dbg !24
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !24
  %312 = fadd <4 x float> %306, %311, !dbg !80
  %313 = fcmp olt <4 x float> %312, zeroinitializer, !dbg !81
  %314 = extractelement <4 x i1> %313, i64 3, !dbg !85
  %315 = extractelement <4 x i1> %313, i64 2, !dbg !85
  %316 = extractelement <4 x i1> %313, i64 1, !dbg !85
  %317 = extractelement <4 x i1> %313, i64 0, !dbg !85
  %318 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !32
  %319 = bitcast i32 %318 to float, !dbg !32
  %320 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !32
  %321 = bitcast i32 %320 to float, !dbg !32
  %322 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !32
  %323 = bitcast i32 %322 to float, !dbg !32
  %324 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !32
  %325 = bitcast i32 %324 to float, !dbg !32
  %326 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !30
  %327 = bitcast i32 %326 to float, !dbg !30
  %328 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !30
  %329 = bitcast i32 %328 to float, !dbg !30
  %330 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !30
  %331 = bitcast i32 %330 to float, !dbg !30
  %332 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !30
  %333 = bitcast i32 %332 to float, !dbg !30
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !86
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !86
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !86
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !86
  %338 = fmul float %273, %334, !dbg !87
  %339 = fmul float %270, %335, !dbg !87
  %340 = fmul float %267, %336, !dbg !87
  %341 = fmul float %264, %337, !dbg !87
  %342 = fmul float %338, %333, !dbg !88
  %343 = fmul float %339, %331, !dbg !88
  %344 = fmul float %340, %329, !dbg !88
  %345 = fmul float %341, %327, !dbg !88
  %346 = fadd float %342, %325, !dbg !89
  %347 = fadd float %343, %323, !dbg !89
  %348 = fadd float %344, %321, !dbg !89
  %349 = fadd float %345, %319, !dbg !89
  %350 = sext i32 %19 to i64, !dbg !90
  %351 = getelementptr float, ptr addrspace(1) %9, i64 %350, !dbg !90
  %352 = bitcast float %150 to i32, !dbg !91
  %353 = bitcast float %151 to i32, !dbg !91
  %354 = bitcast float %152 to i32, !dbg !91
  %355 = bitcast float %153 to i32, !dbg !91
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %353, i32 %354, i32 %355, ptr addrspace(1) %351, i1 %20) #3, !dbg !91
  %356 = getelementptr float, ptr addrspace(1) %10, i64 %350, !dbg !92
  %bc = bitcast <4 x float> %312 to <4 x i32>, !dbg !93
  %357 = extractelement <4 x i32> %bc, i64 0, !dbg !93
  %358 = select i1 %317, i32 0, i32 %357, !dbg !85
  %bc39 = bitcast <4 x float> %312 to <4 x i32>, !dbg !93
  %359 = extractelement <4 x i32> %bc39, i64 1, !dbg !93
  %360 = select i1 %316, i32 0, i32 %359, !dbg !85
  %bc40 = bitcast <4 x float> %312 to <4 x i32>, !dbg !93
  %361 = extractelement <4 x i32> %bc40, i64 2, !dbg !93
  %362 = select i1 %315, i32 0, i32 %361, !dbg !85
  %bc41 = bitcast <4 x float> %312 to <4 x i32>, !dbg !93
  %363 = extractelement <4 x i32> %bc41, i64 3, !dbg !93
  %364 = select i1 %314, i32 0, i32 %363, !dbg !85
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %358, i32 %360, i32 %362, i32 %364, ptr addrspace(1) %356, i1 %20) #3, !dbg !93
  %365 = getelementptr float, ptr addrspace(1) %11, i64 %350, !dbg !94
  %366 = bitcast float %346 to i32, !dbg !95
  %367 = bitcast float %347 to i32, !dbg !95
  %368 = bitcast float %348 to i32, !dbg !95
  %369 = bitcast float %349 to i32, !dbg !95
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %366, i32 %367, i32 %368, i32 %369, ptr addrspace(1) %365, i1 %20) #3, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2fixvw5jcbh2c2zedugy6e6rfuvokgpjp5oiey7op7iwsv2s5p3.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 31, scope: !7)
!18 = !DILocation(line: 30, column: 36, scope: !7)
!19 = !DILocation(line: 31, column: 31, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 32, column: 31, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 33, column: 31, scope: !7)
!24 = !DILocation(line: 33, column: 36, scope: !7)
!25 = !DILocation(line: 34, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 36, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 25, column: 21, scope: !7)
!34 = !DILocation(line: 25, column: 27, scope: !7)
!35 = !DILocation(line: 38, column: 13, scope: !7)
!36 = !DILocation(line: 67, column: 107, scope: !7)
!37 = !DILocation(line: 48, column: 19, scope: !7)
!38 = !DILocation(line: 49, column: 49, scope: !7)
!39 = !DILocation(line: 49, column: 39, scope: !7)
!40 = !DILocation(line: 49, column: 44, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 62, scope: !7)
!43 = !DILocation(line: 49, column: 54, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 19, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 54, scope: !7)
!48 = !DILocation(line: 55, column: 46, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 42, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 52, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 43, scope: !7)
!55 = !DILocation(line: 65, column: 31, scope: !7)
!56 = !DILocation(line: 65, column: 53, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 46, scope: !7)
!59 = !DILocation(line: 67, column: 33, scope: !7)
!60 = !DILocation(line: 67, column: 83, scope: !7)
!61 = !DILocation(line: 67, column: 69, scope: !7)
!62 = !DILocation(line: 67, column: 55, scope: !7)
!63 = !DILocation(line: 67, column: 111, scope: !7)
!64 = !DILocation(line: 67, column: 98, scope: !7)
!65 = !DILocation(line: 67, column: 142, scope: !7)
!66 = !DILocation(line: 67, column: 130, scope: !7)
!67 = !DILocation(line: 67, column: 118, scope: !7)
!68 = !DILocation(line: 67, column: 298, scope: !7)
!69 = !DILocation(line: 67, column: 309, scope: !7)
!70 = !DILocation(line: 68, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 27, scope: !7)
!73 = !DILocation(line: 74, column: 20, scope: !7)
!74 = !DILocation(line: 83, column: 20, scope: !7)
!75 = !DILocation(line: 84, column: 27, scope: !7)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 69, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 81, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 85, column: 20, scope: !7)
!87 = !DILocation(line: 87, column: 20, scope: !7)
!88 = !DILocation(line: 88, column: 20, scope: !7)
!89 = !DILocation(line: 89, column: 20, scope: !7)
!90 = !DILocation(line: 90, column: 25, scope: !7)
!91 = !DILocation(line: 90, column: 37, scope: !7)
!92 = !DILocation(line: 91, column: 25, scope: !7)
!93 = !DILocation(line: 91, column: 37, scope: !7)
!94 = !DILocation(line: 92, column: 25, scope: !7)
!95 = !DILocation(line: 92, column: 37, scope: !7)
!96 = !DILocation(line: 92, column: 4, scope: !7)
