; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 5, !dbg !12
  %9 = and i32 %8, 3, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 4, !dbg !13
  %14 = or disjoint i32 %12, 8, !dbg !13
  %15 = or disjoint i32 %12, 12, !dbg !13
  %16 = or disjoint i32 %12, 16, !dbg !13
  %17 = or disjoint i32 %12, 20, !dbg !13
  %18 = or disjoint i32 %12, 24, !dbg !13
  %19 = or disjoint i32 %12, 28, !dbg !13
  %20 = or disjoint i32 %6, %11, !dbg !13
  %21 = icmp slt i32 %12, 256, !dbg !14
  %22 = icmp slt i32 %13, 256, !dbg !14
  %23 = icmp slt i32 %14, 256, !dbg !14
  %24 = icmp slt i32 %15, 256, !dbg !14
  %25 = icmp slt i32 %16, 256, !dbg !14
  %26 = icmp slt i32 %17, 256, !dbg !14
  %27 = icmp slt i32 %18, 256, !dbg !14
  %28 = icmp slt i32 %19, 256, !dbg !14
  %29 = icmp slt i32 %20, 256, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = and i32 %7, 31, !dbg !17
  %33 = lshr i32 %7, 3, !dbg !17
  %34 = and i32 %33, 15, !dbg !17
  %35 = or disjoint i32 %34, 16, !dbg !17
  %36 = or disjoint i32 %31, %32, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = or disjoint i32 %31, %35, !dbg !18
  %.frozen = freeze i32 %36, !dbg !19
  %39 = sdiv i32 %.frozen, 256, !dbg !19
  %40 = mul i32 %39, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %.frozen19 = freeze i32 %20, !dbg !21
  %41 = sdiv i32 %.frozen19, 64, !dbg !21
  %42 = mul i32 %41, 64, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %42, !dbg !22
  %43 = shl nsw i32 %.decomposed, 1, !dbg !23
  %44 = shl i32 %39, 10, !dbg !24
  %45 = add i32 %43, %44, !dbg !25
  %46 = shl i32 %12, 18, !dbg !26
  %47 = shl i32 %13, 18, !dbg !26
  %48 = shl i32 %14, 18, !dbg !26
  %49 = shl i32 %15, 18, !dbg !26
  %50 = shl i32 %16, 18, !dbg !26
  %51 = shl i32 %17, 18, !dbg !26
  %52 = shl i32 %18, 18, !dbg !26
  %53 = shl i32 %19, 18, !dbg !26
  %54 = add i32 %45, %46, !dbg !27
  %55 = add i32 %45, %47, !dbg !27
  %56 = add i32 %45, %48, !dbg !27
  %57 = add i32 %45, %49, !dbg !27
  %58 = add i32 %45, %50, !dbg !27
  %59 = add i32 %45, %51, !dbg !27
  %60 = add i32 %45, %52, !dbg !27
  %61 = add i32 %45, %53, !dbg !27
  %62 = sext i32 %54 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %55 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %56 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %57 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %58 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %59 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = sext i32 %60 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !28
  %76 = sext i32 %61 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %21) #2, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %22) #2, !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %23) #2, !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %24) #2, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %25) #2, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %26) #2, !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %27) #2, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %28) #2, !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = or disjoint i32 %43, 1, !dbg !30
  %95 = add i32 %94, %44, !dbg !31
  %96 = add i32 %95, %46, !dbg !32
  %97 = add i32 %95, %47, !dbg !32
  %98 = add i32 %95, %48, !dbg !32
  %99 = add i32 %95, %49, !dbg !32
  %100 = add i32 %95, %50, !dbg !32
  %101 = add i32 %95, %51, !dbg !32
  %102 = add i32 %95, %52, !dbg !32
  %103 = add i32 %95, %53, !dbg !32
  %104 = sext i32 %96 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !33
  %106 = sext i32 %97 to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !33
  %108 = sext i32 %98 to i64, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !33
  %110 = sext i32 %99 to i64, !dbg !33
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !33
  %112 = sext i32 %100 to i64, !dbg !33
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !33
  %114 = sext i32 %101 to i64, !dbg !33
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !33
  %116 = sext i32 %102 to i64, !dbg !33
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !33
  %118 = sext i32 %103 to i64, !dbg !33
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %21) #2, !dbg !34
  %121 = bitcast i32 %120 to float, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %22) #2, !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %23) #2, !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %24) #2, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %25) #2, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %26) #2, !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %27) #2, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = add i32 %45, 512, !dbg !35
  %137 = add i32 %136, %46, !dbg !36
  %138 = add i32 %136, %47, !dbg !36
  %139 = add i32 %136, %48, !dbg !36
  %140 = add i32 %136, %49, !dbg !36
  %141 = add i32 %136, %50, !dbg !36
  %142 = add i32 %136, %51, !dbg !36
  %143 = add i32 %136, %52, !dbg !36
  %144 = add i32 %136, %53, !dbg !36
  %145 = sext i32 %137 to i64, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !37
  %147 = sext i32 %138 to i64, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !37
  %149 = sext i32 %139 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !37
  %151 = sext i32 %140 to i64, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !37
  %153 = sext i32 %141 to i64, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !37
  %155 = sext i32 %142 to i64, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !37
  %157 = sext i32 %143 to i64, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !37
  %159 = sext i32 %144 to i64, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !37
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %21) #2, !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %22) #2, !dbg !38
  %164 = bitcast i32 %163 to float, !dbg !38
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %23) #2, !dbg !38
  %166 = bitcast i32 %165 to float, !dbg !38
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %24) #2, !dbg !38
  %168 = bitcast i32 %167 to float, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %25) #2, !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %26) #2, !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %27) #2, !dbg !38
  %174 = bitcast i32 %173 to float, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %28) #2, !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = add i32 %45, 513, !dbg !39
  %178 = add i32 %177, %46, !dbg !40
  %179 = add i32 %177, %47, !dbg !40
  %180 = add i32 %177, %48, !dbg !40
  %181 = add i32 %177, %49, !dbg !40
  %182 = add i32 %177, %50, !dbg !40
  %183 = add i32 %177, %51, !dbg !40
  %184 = add i32 %177, %52, !dbg !40
  %185 = add i32 %177, %53, !dbg !40
  %186 = sext i32 %178 to i64, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !41
  %188 = sext i32 %179 to i64, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !41
  %190 = sext i32 %180 to i64, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !41
  %192 = sext i32 %181 to i64, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !41
  %194 = sext i32 %182 to i64, !dbg !41
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !41
  %196 = sext i32 %183 to i64, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !41
  %198 = sext i32 %184 to i64, !dbg !41
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !41
  %200 = sext i32 %185 to i64, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !41
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !42
  %203 = bitcast i32 %202 to float, !dbg !42
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %22) #2, !dbg !42
  %205 = bitcast i32 %204 to float, !dbg !42
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %23) #2, !dbg !42
  %207 = bitcast i32 %206 to float, !dbg !42
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %24) #2, !dbg !42
  %209 = bitcast i32 %208 to float, !dbg !42
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %25) #2, !dbg !42
  %211 = bitcast i32 %210 to float, !dbg !42
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %26) #2, !dbg !42
  %213 = bitcast i32 %212 to float, !dbg !42
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %27) #2, !dbg !42
  %215 = bitcast i32 %214 to float, !dbg !42
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %28) #2, !dbg !42
  %217 = bitcast i32 %216 to float, !dbg !42
  %218 = fcmp ogt float %121, %79, !dbg !43
  %219 = fcmp ogt float %123, %81, !dbg !43
  %220 = fcmp ogt float %125, %83, !dbg !43
  %221 = fcmp ogt float %127, %85, !dbg !43
  %222 = fcmp ogt float %129, %87, !dbg !43
  %223 = fcmp ogt float %131, %89, !dbg !43
  %224 = fcmp ogt float %133, %91, !dbg !43
  %225 = fcmp ogt float %135, %93, !dbg !43
  %226 = fcmp uno float %121, 0.000000e+00, !dbg !47
  %227 = fcmp uno float %123, 0.000000e+00, !dbg !47
  %228 = fcmp uno float %125, 0.000000e+00, !dbg !47
  %229 = fcmp uno float %127, 0.000000e+00, !dbg !47
  %230 = fcmp uno float %129, 0.000000e+00, !dbg !47
  %231 = fcmp uno float %131, 0.000000e+00, !dbg !47
  %232 = fcmp uno float %133, 0.000000e+00, !dbg !47
  %233 = fcmp uno float %135, 0.000000e+00, !dbg !47
  %234 = or i1 %218, %226, !dbg !48
  %235 = or i1 %219, %227, !dbg !48
  %236 = or i1 %220, %228, !dbg !48
  %237 = or i1 %221, %229, !dbg !48
  %238 = or i1 %222, %230, !dbg !48
  %239 = or i1 %223, %231, !dbg !48
  %240 = or i1 %224, %232, !dbg !48
  %241 = or i1 %225, %233, !dbg !48
  %242 = select i1 %234, float %121, float %79, !dbg !49
  %243 = select i1 %235, float %123, float %81, !dbg !49
  %244 = select i1 %236, float %125, float %83, !dbg !49
  %245 = select i1 %237, float %127, float %85, !dbg !49
  %246 = select i1 %238, float %129, float %87, !dbg !49
  %247 = select i1 %239, float %131, float %89, !dbg !49
  %248 = select i1 %240, float %133, float %91, !dbg !49
  %249 = select i1 %241, float %135, float %93, !dbg !49
  %250 = fcmp olt float %242, %162, !dbg !50
  %251 = fcmp olt float %243, %164, !dbg !50
  %252 = fcmp olt float %244, %166, !dbg !50
  %253 = fcmp olt float %245, %168, !dbg !50
  %254 = fcmp olt float %246, %170, !dbg !50
  %255 = fcmp olt float %247, %172, !dbg !50
  %256 = fcmp olt float %248, %174, !dbg !50
  %257 = fcmp olt float %249, %176, !dbg !50
  %258 = fcmp uno float %162, 0.000000e+00, !dbg !52
  %259 = fcmp uno float %164, 0.000000e+00, !dbg !52
  %260 = fcmp uno float %166, 0.000000e+00, !dbg !52
  %261 = fcmp uno float %168, 0.000000e+00, !dbg !52
  %262 = fcmp uno float %170, 0.000000e+00, !dbg !52
  %263 = fcmp uno float %172, 0.000000e+00, !dbg !52
  %264 = fcmp uno float %174, 0.000000e+00, !dbg !52
  %265 = fcmp uno float %176, 0.000000e+00, !dbg !52
  %266 = or i1 %250, %258, !dbg !53
  %267 = or i1 %251, %259, !dbg !53
  %268 = or i1 %252, %260, !dbg !53
  %269 = or i1 %253, %261, !dbg !53
  %270 = or i1 %254, %262, !dbg !53
  %271 = or i1 %255, %263, !dbg !53
  %272 = or i1 %256, %264, !dbg !53
  %273 = or i1 %257, %265, !dbg !53
  %274 = select i1 %266, float %162, float %242, !dbg !54
  %275 = select i1 %267, float %164, float %243, !dbg !54
  %276 = select i1 %268, float %166, float %244, !dbg !54
  %277 = select i1 %269, float %168, float %245, !dbg !54
  %278 = select i1 %270, float %170, float %246, !dbg !54
  %279 = select i1 %271, float %172, float %247, !dbg !54
  %280 = select i1 %272, float %174, float %248, !dbg !54
  %281 = select i1 %273, float %176, float %249, !dbg !54
  %282 = fcmp olt float %274, %203, !dbg !55
  %283 = fcmp olt float %275, %205, !dbg !55
  %284 = fcmp olt float %276, %207, !dbg !55
  %285 = fcmp olt float %277, %209, !dbg !55
  %286 = fcmp olt float %278, %211, !dbg !55
  %287 = fcmp olt float %279, %213, !dbg !55
  %288 = fcmp olt float %280, %215, !dbg !55
  %289 = fcmp olt float %281, %217, !dbg !55
  %290 = fcmp uno float %203, 0.000000e+00, !dbg !57
  %291 = fcmp uno float %205, 0.000000e+00, !dbg !57
  %292 = fcmp uno float %207, 0.000000e+00, !dbg !57
  %293 = fcmp uno float %209, 0.000000e+00, !dbg !57
  %294 = fcmp uno float %211, 0.000000e+00, !dbg !57
  %295 = fcmp uno float %213, 0.000000e+00, !dbg !57
  %296 = fcmp uno float %215, 0.000000e+00, !dbg !57
  %297 = fcmp uno float %217, 0.000000e+00, !dbg !57
  %298 = or i1 %282, %290, !dbg !58
  %299 = or i1 %283, %291, !dbg !58
  %300 = or i1 %284, %292, !dbg !58
  %301 = or i1 %285, %293, !dbg !58
  %302 = or i1 %286, %294, !dbg !58
  %303 = or i1 %287, %295, !dbg !58
  %304 = or i1 %288, %296, !dbg !58
  %305 = or i1 %289, %297, !dbg !58
  %306 = shl i32 %37, 6, !dbg !59
  %307 = shl i32 %38, 6, !dbg !59
  %308 = shl i32 %41, 22, !dbg !60
  %309 = add i32 %308, %.decomposed20, !dbg !61
  %310 = add i32 %309, %306, !dbg !62
  %311 = add i32 %309, %307, !dbg !62
  %312 = sext i32 %310 to i64, !dbg !63
  %313 = getelementptr float, ptr addrspace(1) %1, i64 %312, !dbg !63
  %314 = sext i32 %311 to i64, !dbg !63
  %315 = getelementptr float, ptr addrspace(1) %1, i64 %314, !dbg !63
  %316 = shl i32 %7, 5, !dbg !64
  %317 = and i32 %316, 992, !dbg !64
  %318 = or disjoint i32 %317, %9, !dbg !64
  %319 = and i32 %10, 508, !dbg !64
  %320 = lshr exact i32 %317, 3, !dbg !64
  %321 = add nuw nsw i32 %320, %318, !dbg !64
  %322 = zext nneg i32 %321 to i64, !dbg !64
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %322, !dbg !64
  %324 = bitcast float %274 to i32, !dbg !64
  %325 = select i1 %298, i32 %202, i32 %324, !dbg !65
  %326 = insertelement <1 x i32> poison, i32 %325, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %326, i1 true) #2, !dbg !64
  %327 = or disjoint i32 %318, 4, !dbg !64
  %328 = add nuw nsw i32 %327, %320, !dbg !64
  %329 = zext nneg i32 %328 to i64, !dbg !64
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %329, !dbg !64
  %331 = bitcast float %275 to i32, !dbg !64
  %332 = select i1 %299, i32 %204, i32 %331, !dbg !65
  %333 = insertelement <1 x i32> poison, i32 %332, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %333, i1 true) #2, !dbg !64
  %334 = or disjoint i32 %318, 8, !dbg !64
  %335 = add nuw nsw i32 %334, %320, !dbg !64
  %336 = zext nneg i32 %335 to i64, !dbg !64
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %336, !dbg !64
  %338 = bitcast float %276 to i32, !dbg !64
  %339 = select i1 %300, i32 %206, i32 %338, !dbg !65
  %340 = insertelement <1 x i32> poison, i32 %339, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %340, i1 true) #2, !dbg !64
  %341 = or disjoint i32 %318, 12, !dbg !64
  %342 = add nuw nsw i32 %341, %320, !dbg !64
  %343 = zext nneg i32 %342 to i64, !dbg !64
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %343, !dbg !64
  %345 = bitcast float %277 to i32, !dbg !64
  %346 = select i1 %301, i32 %208, i32 %345, !dbg !65
  %347 = insertelement <1 x i32> poison, i32 %346, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %347, i1 true) #2, !dbg !64
  %348 = or disjoint i32 %318, 16, !dbg !64
  %349 = add nuw nsw i32 %348, %320, !dbg !64
  %350 = zext nneg i32 %349 to i64, !dbg !64
  %351 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %350, !dbg !64
  %352 = bitcast float %278 to i32, !dbg !64
  %353 = select i1 %302, i32 %210, i32 %352, !dbg !65
  %354 = insertelement <1 x i32> poison, i32 %353, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %354, i1 true) #2, !dbg !64
  %355 = or disjoint i32 %318, 20, !dbg !64
  %356 = add nuw nsw i32 %355, %320, !dbg !64
  %357 = zext nneg i32 %356 to i64, !dbg !64
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !64
  %359 = bitcast float %279 to i32, !dbg !64
  %360 = select i1 %303, i32 %212, i32 %359, !dbg !65
  %361 = insertelement <1 x i32> poison, i32 %360, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %361, i1 true) #2, !dbg !64
  %362 = or disjoint i32 %318, 24, !dbg !64
  %363 = add nuw nsw i32 %362, %320, !dbg !64
  %364 = zext nneg i32 %363 to i64, !dbg !64
  %365 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %364, !dbg !64
  %366 = bitcast float %280 to i32, !dbg !64
  %367 = select i1 %304, i32 %214, i32 %366, !dbg !65
  %368 = insertelement <1 x i32> poison, i32 %367, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %368, i1 true) #2, !dbg !64
  %369 = or disjoint i32 %318, 28, !dbg !64
  %370 = add nuw nsw i32 %369, %320, !dbg !64
  %371 = zext nneg i32 %370 to i64, !dbg !64
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %371, !dbg !64
  %373 = bitcast float %281 to i32, !dbg !64
  %374 = select i1 %305, i32 %216, i32 %373, !dbg !65
  %375 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %375, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %376 = lshr i32 %10, 3, !dbg !64
  %377 = and i32 %376, 60, !dbg !64
  %378 = add nuw nsw i32 %377, %319, !dbg !64
  %379 = zext nneg i32 %378 to i64, !dbg !64
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %379, !dbg !64
  %381 = or disjoint i32 %319, 512, !dbg !64
  %382 = lshr i32 %381, 3, !dbg !64
  %383 = and i32 %382, 124, !dbg !64
  %384 = add nuw nsw i32 %383, %381, !dbg !64
  %385 = zext nneg i32 %384 to i64, !dbg !64
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %385, !dbg !64
  %387 = load <4 x i32>, ptr addrspace(3) %386, align 16, !dbg !64
  %.extract = load i32, ptr addrspace(3) %380, align 16, !dbg !64
  %388 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 4, !dbg !64
  %.extract12 = load i32, ptr addrspace(3) %388, align 4, !dbg !64
  %389 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 8, !dbg !64
  %.extract13 = load i32, ptr addrspace(3) %389, align 8, !dbg !64
  %390 = getelementptr inbounds i8, ptr addrspace(3) %380, i64 12, !dbg !64
  %.extract14 = load i32, ptr addrspace(3) %390, align 4, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %313, i1 %29) #2, !dbg !64
  %.extract15 = extractelement <4 x i32> %387, i64 0, !dbg !64
  %.extract16 = extractelement <4 x i32> %387, i64 1, !dbg !64
  %.extract17 = extractelement <4 x i32> %387, i64 2, !dbg !64
  %.extract18 = extractelement <4 x i32> %387, i64 3, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %315, i1 %29) #2, !dbg !64
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpqgx3pqeahxytpbugniotlx23eddvrfgqdj7j6uh47lplu3t6xy.py", directory: "inductor_cache/pq")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_16", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 54, scope: !7)
!27 = !DILocation(line: 34, column: 47, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 59, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 63, scope: !7)
!35 = !DILocation(line: 36, column: 43, scope: !7)
!36 = !DILocation(line: 36, column: 53, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 65, scope: !7)
!39 = !DILocation(line: 37, column: 43, scope: !7)
!40 = !DILocation(line: 37, column: 53, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 65, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 41, column: 33, scope: !7)
!60 = !DILocation(line: 41, column: 46, scope: !7)
!61 = !DILocation(line: 41, column: 30, scope: !7)
!62 = !DILocation(line: 41, column: 38, scope: !7)
!63 = !DILocation(line: 41, column: 25, scope: !7)
!64 = !DILocation(line: 41, column: 57, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!66 = !DILocation(line: 41, column: 4, scope: !7)
