; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_clone_div_linalg_vector_norm_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = srem i32 %12, 4, !dbg !16
  %14 = sext i32 %10 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 %11) #3, !dbg !18
  %17 = sext i32 %13 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !20
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !20
  %21 = shl nsw i32 %12, 2, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #3, !dbg !23
  %25 = bitcast i32 %24 to float, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #3, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = or disjoint i32 %21, 1, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %11) #3, !dbg !26
  %32 = bitcast i32 %31 to float, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %11) #3, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = or disjoint i32 %21, 2, !dbg !27
  %36 = sext i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !29
  %39 = bitcast i32 %38 to float, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = or disjoint i32 %21, 3, !dbg !30
  %43 = sext i32 %42 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %11) #3, !dbg !32
  %46 = bitcast i32 %45 to float, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %11) #3, !dbg !32
  %48 = bitcast i32 %47 to float, !dbg !32
  %49 = fmul float %25, %25, !dbg !33
  %50 = fmul float %27, %27, !dbg !33
  %51 = fmul float %32, %32, !dbg !34
  %52 = fmul float %34, %34, !dbg !34
  %53 = fadd float %49, %51, !dbg !35
  %54 = fadd float %50, %52, !dbg !35
  %55 = fmul float %39, %39, !dbg !36
  %56 = fmul float %41, %41, !dbg !36
  %57 = fadd float %53, %55, !dbg !37
  %58 = fadd float %54, %56, !dbg !37
  %59 = fmul float %46, %46, !dbg !38
  %60 = fmul float %48, %48, !dbg !38
  %61 = fadd float %57, %59, !dbg !39
  %62 = fadd float %58, %60, !dbg !39
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %63, 0, !dbg !40
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %64, 0, !dbg !40
  br i1 %.not.i, label %70, label %65, !dbg !40

65:                                               ; preds = %4
  br i1 %.not1.i, label %68, label %66, !dbg !40

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

70:                                               ; preds = %4
  br i1 %.not1.i, label %73, label %71, !dbg !40

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !40
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %75, 0, !dbg !40
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !40
  br i1 %.not.i1, label %82, label %77, !dbg !40

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !40

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !40

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !40
  %87 = extractvalue { i32, i32 } %16, 1, !dbg !18
  %88 = bitcast i32 %87 to float, !dbg !18
  %89 = bitcast i32 %20 to float, !dbg !20
  %90 = fmul float %88, %89, !dbg !41
  %91 = extractvalue { i32, i32 } %16, 0, !dbg !18
  %92 = bitcast i32 %91 to float, !dbg !18
  %93 = bitcast i32 %19 to float, !dbg !20
  %94 = fmul float %92, %93, !dbg !41
  %95 = sdiv i32 %10, 64, !dbg !42
  %96 = sdiv i32 %10, 16, !dbg !43
  %97 = srem i32 %96, 4, !dbg !44
  %98 = mul i32 %12, 4, !dbg !45
  %.decomposed = sub i32 %.frozen, %98, !dbg !45
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %.0.i) #3, !dbg !46
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %.0.i3) #3, !dbg !46
  %101 = shl nsw i32 %97, 2, !dbg !47
  %102 = shl nsw i32 %13, 4, !dbg !48
  %103 = shl nsw i32 %95, 6, !dbg !49
  %104 = add i32 %103, %.decomposed, !dbg !50
  %105 = add i32 %104, %101, !dbg !51
  %106 = add i32 %105, %102, !dbg !52
  %107 = sext i32 %106 to i64, !dbg !53
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !53
  %109 = bitcast float %99 to i32, !dbg !54
  %110 = bitcast float %100 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %11) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwrvdwpdc3yptfw7ebrestuigttjm5r4vgkxottbi7rpczjctj65.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_poi_fused_clone_div_linalg_vector_norm_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_div_linalg_vector_norm_mul_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_div_linalg_vector_norm_mul_3", linkageName: "triton_poi_fused_clone_div_linalg_vector_norm_mul_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 26, scope: !7)
!17 = !DILocation(line: 30, column: 30, scope: !7)
!18 = !DILocation(line: 30, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 32, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 37, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 41, scope: !7)
!27 = !DILocation(line: 34, column: 34, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 42, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 44, column: 27, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 29, column: 19, scope: !7)
!43 = !DILocation(line: 28, column: 21, scope: !7)
!44 = !DILocation(line: 28, column: 27, scope: !7)
!45 = !DILocation(line: 27, column: 19, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 32, scope: !7)
!48 = !DILocation(line: 46, column: 40, scope: !7)
!49 = !DILocation(line: 46, column: 48, scope: !7)
!50 = !DILocation(line: 46, column: 30, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 46, column: 45, scope: !7)
!53 = !DILocation(line: 46, column: 25, scope: !7)
!54 = !DILocation(line: 46, column: 60, scope: !7)
!55 = !DILocation(line: 46, column: 4, scope: !7)
