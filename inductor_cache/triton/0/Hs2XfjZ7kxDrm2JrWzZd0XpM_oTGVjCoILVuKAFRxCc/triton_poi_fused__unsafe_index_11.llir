; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 8, !dbg !14
  %13 = srem i32 %12, 8, !dbg !15
  %14 = mul i32 %12, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = sdiv i32 %11, 64, !dbg !17
  %16 = srem i32 %15, 64, !dbg !18
  %17 = sext i32 %13 to i64, !dbg !19
  %18 = getelementptr i64, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !20
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !20
  %21 = sext i32 %.decomposed to i64, !dbg !21
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !21
  %23 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !22
  %24 = extractvalue { i64, i64 } %23, 0, !dbg !22
  %25 = extractvalue { i64, i64 } %23, 1, !dbg !22
  %26 = lshr i64 %19, 61, !dbg !23
  %27 = and i64 %26, 4, !dbg !23
  %28 = add i64 %27, %19, !dbg !23
  %29 = lshr i64 %24, 61, !dbg !24
  %30 = and i64 %29, 4, !dbg !24
  %31 = lshr i64 %25, 61, !dbg !24
  %32 = and i64 %31, 4, !dbg !24
  %33 = shl i64 %28, 2, !dbg !25
  %34 = add i64 %33, %24, !dbg !24
  %35 = add i64 %34, %30, !dbg !26
  %36 = add i64 %33, %25, !dbg !24
  %37 = add i64 %36, %32, !dbg !26
  %38 = shl nsw i32 %15, 4, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %40, i64 %39, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %42, i64 %39, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = shl nsw i32 %16, 4, !dbg !31
  %49 = sext i32 %48 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %49, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %49, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !34
  %55 = bitcast i32 %54 to float, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %45, %55, !dbg !35
  %59 = fadd float %47, %57, !dbg !35
  %60 = fcmp olt float %58, 0.000000e+00, !dbg !36
  %61 = fcmp olt float %59, 0.000000e+00, !dbg !36
  %62 = select i1 %60, float 0.000000e+00, float %58, !dbg !40
  %63 = select i1 %61, float 0.000000e+00, float %59, !dbg !40
  %64 = sext i32 %11 to i64, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !41
  %66 = bitcast float %62 to i32, !dbg !42
  %67 = bitcast float %63 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %66, i32 %67, ptr addrspace(1) %65, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpxz6cpbytcsfms4foqlfffv764xux36ywagh6zpiagd6rzz75vl.py", directory: "inductor_cache/px")
!4 = !{ptr @triton_poi_fused__unsafe_index_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_11", linkageName: "triton_poi_fused__unsafe_index_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 37, column: 32, scope: !7)
!25 = !DILocation(line: 38, column: 39, scope: !7)
!26 = !DILocation(line: 38, column: 37, scope: !7)
!27 = !DILocation(line: 38, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 46, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 54, scope: !7)
!31 = !DILocation(line: 39, column: 50, scope: !7)
!32 = !DILocation(line: 39, column: 47, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 55, scope: !7)
!35 = !DILocation(line: 40, column: 19, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
