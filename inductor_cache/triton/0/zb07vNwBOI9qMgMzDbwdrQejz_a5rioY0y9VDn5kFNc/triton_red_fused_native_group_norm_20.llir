; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2032, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %12 = sdiv i32 %.frozen, 32, !dbg !13
  %13 = mul i32 %12, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nsw i32 %.decomposed, 4, !dbg !15
  %15 = shl i32 %12, 17, !dbg !16
  %16 = and i32 %10, 12
  %17 = or disjoint i32 %14, %16
  %18 = add i32 %17, %15
  %19 = shl nuw nsw i32 %11, 5, !dbg !17
  %20 = add i32 %18, %19, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !20
  %25 = bitcast i32 %24 to float, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = select i1 %8, float %31, float 0.000000e+00, !dbg !21
  %33 = select i1 %8, float %29, float 0.000000e+00, !dbg !21
  %34 = select i1 %8, float %27, float 0.000000e+00, !dbg !21
  %35 = select i1 %8, float %25, float 0.000000e+00, !dbg !21
  %36 = shl nuw nsw i32 %11, 5, !dbg !17
  %37 = or disjoint i32 %36, 65536, !dbg !17
  %38 = add i32 %18, %37, !dbg !18
  %39 = sext i32 %38 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !20
  %45 = bitcast i32 %44 to float, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = fsub float %49, %32, !dbg !22
  %51 = fsub float %47, %33, !dbg !22
  %52 = fsub float %45, %34, !dbg !22
  %53 = fsub float %43, %35, !dbg !22
  %54 = select i1 %8, float 2.000000e+00, float 1.000000e+00, !dbg !26
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %54) #5, !dbg !27
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %54) #5, !dbg !27
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %54) #5, !dbg !27
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %54) #5, !dbg !27
  %59 = fadd float %32, %55, !dbg !28
  %60 = fsub float %49, %59, !dbg !29
  %61 = fmul float %50, %60, !dbg !30
  %62 = fadd float %61, 0.000000e+00, !dbg !31
  %63 = fadd float %33, %56, !dbg !28
  %64 = fsub float %47, %63, !dbg !29
  %65 = fmul float %51, %64, !dbg !30
  %66 = fadd float %65, 0.000000e+00, !dbg !31
  %67 = fadd float %34, %57, !dbg !28
  %68 = fsub float %45, %67, !dbg !29
  %69 = fmul float %52, %68, !dbg !30
  %70 = fadd float %69, 0.000000e+00, !dbg !31
  %71 = fadd float %35, %58, !dbg !28
  %72 = fsub float %43, %71, !dbg !29
  %73 = fmul float %53, %72, !dbg !30
  %74 = fadd float %73, 0.000000e+00, !dbg !31
  %75 = select i1 %8, float %59, float 0.000000e+00, !dbg !21
  %76 = select i1 %8, float %63, float 0.000000e+00, !dbg !21
  %77 = select i1 %8, float %67, float 0.000000e+00, !dbg !21
  %78 = select i1 %8, float %71, float 0.000000e+00, !dbg !21
  %79 = select i1 %8, float %70, float 0.000000e+00, !dbg !32
  %80 = select i1 %8, float %74, float 0.000000e+00, !dbg !32
  %81 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %82 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %83 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %84 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !26
  %85 = lshr i32 %9, 5, !dbg !12
  %86 = and i32 %9, 31, !dbg !12
  %87 = fsub float %76, %75, !dbg !33
  %88 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !36
  %89 = fcmp oeq float %88, 0.000000e+00, !dbg !37
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %88) #5, !dbg !38
  %91 = select i1 %89, float 0.000000e+00, float %90, !dbg !39
  %92 = fmul float %87, %91, !dbg !40
  %93 = fadd float %75, %92, !dbg !41
  %94 = fadd float %62, %66, !dbg !42
  %95 = select i1 %8, float %94, float 0.000000e+00, !dbg !42
  %96 = fmul float %87, %87, !dbg !43
  %97 = fmul float %96, %81, !dbg !44
  %98 = fmul float %97, %91, !dbg !45
  %99 = fadd float %95, %98, !dbg !46
  %100 = fsub float %77, %93, !dbg !33
  %101 = select i1 %8, float 6.000000e+00, float 0.000000e+00, !dbg !36
  %102 = fcmp oeq float %101, 0.000000e+00, !dbg !37
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %101) #5, !dbg !38
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !39
  %105 = fmul float %104, %100, !dbg !40
  %106 = fadd float %93, %105, !dbg !41
  %107 = fadd float %79, %99, !dbg !42
  %108 = fmul float %100, %100, !dbg !43
  %109 = fmul float %88, %108, !dbg !44
  %110 = fmul float %104, %109, !dbg !45
  %111 = fadd float %107, %110, !dbg !46
  %112 = fsub float %78, %106, !dbg !33
  %113 = select i1 %8, float 8.000000e+00, float 0.000000e+00, !dbg !36
  %114 = fcmp oeq float %113, 0.000000e+00, !dbg !37
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %113) #5, !dbg !38
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !39
  %117 = fmul float %116, %112, !dbg !40
  %118 = fadd float %106, %117, !dbg !41
  %119 = fadd float %80, %111, !dbg !42
  %120 = fmul float %112, %112, !dbg !43
  %121 = fmul float %101, %120, !dbg !44
  %122 = fmul float %116, %121, !dbg !45
  %123 = fadd float %119, %122, !dbg !46
  %124 = bitcast float %118 to i32, !dbg !47
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 16, i32 31), !dbg !47
  %126 = bitcast i32 %125 to float, !dbg !47
  %127 = bitcast float %123 to i32, !dbg !47
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !47
  %129 = bitcast i32 %128 to float, !dbg !47
  %130 = bitcast float %113 to i32, !dbg !47
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 16, i32 31), !dbg !47
  %132 = bitcast i32 %131 to float, !dbg !47
  %133 = fsub float %126, %118, !dbg !33
  %134 = fadd float %113, %132, !dbg !36
  %135 = fcmp oeq float %134, 0.000000e+00, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %134) #5, !dbg !38
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !39
  %138 = fmul float %137, %133, !dbg !40
  %139 = fadd float %118, %138, !dbg !41
  %140 = fadd float %123, %129, !dbg !42
  %141 = fmul float %133, %133, !dbg !43
  %142 = fmul float %113, %141, !dbg !44
  %143 = fmul float %137, %142, !dbg !45
  %144 = fadd float %140, %143, !dbg !46
  %145 = bitcast float %139 to i32, !dbg !47
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !47
  %147 = bitcast i32 %146 to float, !dbg !47
  %148 = bitcast float %144 to i32, !dbg !47
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 8, i32 31), !dbg !47
  %150 = bitcast i32 %149 to float, !dbg !47
  %151 = bitcast float %134 to i32, !dbg !47
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !47
  %153 = bitcast i32 %152 to float, !dbg !47
  %154 = fsub float %147, %139, !dbg !33
  %155 = fadd float %134, %153, !dbg !36
  %156 = fcmp oeq float %155, 0.000000e+00, !dbg !37
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %155) #5, !dbg !38
  %158 = select i1 %156, float 0.000000e+00, float %157, !dbg !39
  %159 = fmul float %154, %158, !dbg !40
  %160 = fadd float %139, %159, !dbg !41
  %161 = fadd float %144, %150, !dbg !42
  %162 = fmul float %154, %154, !dbg !43
  %163 = fmul float %134, %162, !dbg !44
  %164 = fmul float %158, %163, !dbg !45
  %165 = fadd float %161, %164, !dbg !46
  %166 = bitcast float %160 to i32, !dbg !47
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !47
  %168 = bitcast i32 %167 to float, !dbg !47
  %169 = bitcast float %165 to i32, !dbg !47
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 4, i32 31), !dbg !47
  %171 = bitcast i32 %170 to float, !dbg !47
  %172 = bitcast float %155 to i32, !dbg !47
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !47
  %174 = bitcast i32 %173 to float, !dbg !47
  %175 = fsub float %168, %160, !dbg !33
  %176 = fadd float %155, %174, !dbg !36
  %177 = fcmp oeq float %176, 0.000000e+00, !dbg !37
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %176) #5, !dbg !38
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !39
  %180 = fmul float %175, %179, !dbg !40
  %181 = fadd float %160, %180, !dbg !41
  %182 = fadd float %165, %171, !dbg !42
  %183 = fmul float %175, %175, !dbg !43
  %184 = fmul float %155, %183, !dbg !44
  %185 = fmul float %179, %184, !dbg !45
  %186 = fadd float %182, %185, !dbg !46
  %187 = bitcast float %181 to i32, !dbg !47
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 2, i32 31), !dbg !47
  %189 = bitcast i32 %188 to float, !dbg !47
  %190 = bitcast float %186 to i32, !dbg !47
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 2, i32 31), !dbg !47
  %192 = bitcast i32 %191 to float, !dbg !47
  %193 = bitcast float %176 to i32, !dbg !47
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !47
  %195 = bitcast i32 %194 to float, !dbg !47
  %196 = fsub float %189, %181, !dbg !33
  %197 = fadd float %176, %195, !dbg !36
  %198 = fcmp oeq float %197, 0.000000e+00, !dbg !37
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %197) #5, !dbg !38
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !39
  %201 = fmul float %196, %200, !dbg !40
  %202 = fadd float %181, %201, !dbg !41
  %203 = fadd float %186, %192, !dbg !42
  %204 = fmul float %196, %196, !dbg !43
  %205 = fmul float %176, %204, !dbg !44
  %206 = fmul float %200, %205, !dbg !45
  %207 = fadd float %203, %206, !dbg !46
  %208 = bitcast float %202 to i32, !dbg !47
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 1, i32 31), !dbg !47
  %210 = bitcast i32 %209 to float, !dbg !47
  %211 = bitcast float %207 to i32, !dbg !47
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !47
  %213 = bitcast i32 %212 to float, !dbg !47
  %214 = bitcast float %197 to i32, !dbg !47
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 1, i32 31), !dbg !47
  %216 = bitcast i32 %215 to float, !dbg !47
  %217 = fsub float %210, %202, !dbg !33
  %218 = fadd float %197, %216, !dbg !36
  %219 = fcmp oeq float %218, 0.000000e+00, !dbg !37
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %218) #5, !dbg !38
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !39
  %222 = fmul float %217, %221, !dbg !40
  %223 = fadd float %202, %222, !dbg !41
  %224 = fadd float %207, %213, !dbg !42
  %225 = fmul float %217, %217, !dbg !43
  %226 = fmul float %197, %225, !dbg !44
  %227 = fmul float %221, %226, !dbg !45
  %228 = fadd float %224, %227, !dbg !46
  %229 = icmp eq i32 %86, 0, !dbg !47
  %230 = and i32 %85, 15, !dbg !47
  %231 = zext nneg i32 %230 to i64, !dbg !47
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i64 %231, !dbg !47
  %233 = bitcast float %223 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 %229) #5, !dbg !47
  %234 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %231, !dbg !47
  %235 = bitcast float %228 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 %229) #5, !dbg !47
  %236 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %231, !dbg !47
  %237 = bitcast float %218 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 %229) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %238 = icmp slt i32 %9, 16, !dbg !47
  %239 = sext i32 %9 to i64, !dbg !47
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i64 %239, !dbg !47
  %241 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %240, i1 %238) #5, !dbg !47
  %242 = bitcast i32 %241 to float, !dbg !47
  %243 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %239, !dbg !47
  %244 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %243, i1 %238) #5, !dbg !47
  %245 = bitcast i32 %244 to float, !dbg !47
  %246 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %239, !dbg !47
  %247 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %246, i1 %238) #5, !dbg !47
  %248 = bitcast i32 %247 to float, !dbg !47
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !47
  %250 = bitcast i32 %249 to float, !dbg !47
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 8, i32 31), !dbg !47
  %252 = bitcast i32 %251 to float, !dbg !47
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !47
  %254 = bitcast i32 %253 to float, !dbg !47
  %255 = fsub float %250, %242, !dbg !33
  %256 = fadd float %248, %254, !dbg !36
  %257 = fcmp oeq float %256, 0.000000e+00, !dbg !37
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %254, float %256) #5, !dbg !38
  %259 = select i1 %257, float 0.000000e+00, float %258, !dbg !39
  %260 = fmul float %255, %259, !dbg !40
  %261 = fadd float %260, %242, !dbg !41
  %262 = fadd float %245, %252, !dbg !42
  %263 = fmul float %255, %255, !dbg !43
  %264 = fmul float %263, %248, !dbg !44
  %265 = fmul float %264, %259, !dbg !45
  %266 = fadd float %262, %265, !dbg !46
  %267 = bitcast float %261 to i32, !dbg !47
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !47
  %269 = bitcast i32 %268 to float, !dbg !47
  %270 = bitcast float %266 to i32, !dbg !47
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !47
  %272 = bitcast i32 %271 to float, !dbg !47
  %273 = bitcast float %256 to i32, !dbg !47
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 4, i32 31), !dbg !47
  %275 = bitcast i32 %274 to float, !dbg !47
  %276 = fsub float %269, %261, !dbg !33
  %277 = fadd float %256, %275, !dbg !36
  %278 = fcmp oeq float %277, 0.000000e+00, !dbg !37
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %275, float %277) #5, !dbg !38
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !39
  %281 = fmul float %276, %280, !dbg !40
  %282 = fadd float %261, %281, !dbg !41
  %283 = fadd float %266, %272, !dbg !42
  %284 = fmul float %276, %276, !dbg !43
  %285 = fmul float %256, %284, !dbg !44
  %286 = fmul float %280, %285, !dbg !45
  %287 = fadd float %283, %286, !dbg !46
  %288 = bitcast float %282 to i32, !dbg !47
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 2, i32 31), !dbg !47
  %290 = bitcast i32 %289 to float, !dbg !47
  %291 = bitcast float %287 to i32, !dbg !47
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !47
  %293 = bitcast i32 %292 to float, !dbg !47
  %294 = bitcast float %277 to i32, !dbg !47
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 2, i32 31), !dbg !47
  %296 = bitcast i32 %295 to float, !dbg !47
  %297 = fsub float %290, %282, !dbg !33
  %298 = fadd float %277, %296, !dbg !36
  %299 = fcmp oeq float %298, 0.000000e+00, !dbg !37
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %298) #5, !dbg !38
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !39
  %302 = fmul float %297, %301, !dbg !40
  %303 = fadd float %282, %302, !dbg !41
  %304 = fadd float %287, %293, !dbg !42
  %305 = fmul float %297, %297, !dbg !43
  %306 = fmul float %277, %305, !dbg !44
  %307 = fmul float %301, %306, !dbg !45
  %308 = fadd float %304, %307, !dbg !46
  %309 = bitcast float %303 to i32, !dbg !47
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 1, i32 31), !dbg !47
  %311 = bitcast i32 %310 to float, !dbg !47
  %312 = bitcast float %308 to i32, !dbg !47
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !47
  %314 = bitcast i32 %313 to float, !dbg !47
  %315 = bitcast float %298 to i32, !dbg !47
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 1, i32 31), !dbg !47
  %317 = bitcast i32 %316 to float, !dbg !47
  %318 = fsub float %311, %303, !dbg !33
  %319 = fadd float %298, %317, !dbg !36
  %320 = fcmp oeq float %319, 0.000000e+00, !dbg !37
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float %319) #5, !dbg !38
  %322 = select i1 %320, float 0.000000e+00, float %321, !dbg !39
  %323 = fmul float %318, %322, !dbg !40
  %324 = fadd float %303, %323, !dbg !41
  %325 = fadd float %308, %314, !dbg !42
  %326 = fmul float %318, %318, !dbg !43
  %327 = fmul float %298, %326, !dbg !44
  %328 = fmul float %322, %327, !dbg !45
  %329 = fadd float %325, %328, !dbg !46
  %330 = and i32 %9, 15, !dbg !47
  %331 = icmp eq i32 %330, 0, !dbg !47
  %332 = and i1 %238, %331, !dbg !47
  %333 = bitcast float %324 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %333, i1 %332) #5, !dbg !47
  %334 = bitcast float %329 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %334, i1 %332) #5, !dbg !47
  %335 = bitcast float %319 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %335, i1 %332) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %336 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %337 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !47
  %338 = sext i32 %7 to i64, !dbg !48
  %339 = getelementptr float, ptr addrspace(1) %1, i64 %338, !dbg !48
  %urem = and i32 %9, 511, !dbg !49
  %340 = icmp eq i32 %urem, 0, !dbg !49
  %341 = and i1 %340, %8, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %339, i1 %341) #5, !dbg !49
  %342 = getelementptr float, ptr addrspace(1) %2, i64 %338, !dbg !50
  %343 = bitcast float %337 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %343, ptr addrspace(1) %342, i1 %341) #5, !dbg !51
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %337, float 4.096000e+03) #5, !dbg !52
  %345 = fadd float %344, 0x3EE4F8B580000000, !dbg !53
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %346, 0, !dbg !54
  br i1 %.not.i, label %349, label %347, !dbg !54

347:                                              ; preds = %6
  %348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %345), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

349:                                              ; preds = %6
  %350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %345), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %347, %349
  %.0.i = phi float [ %348, %347 ], [ %350, %349 ], !dbg !54
  %351 = getelementptr float, ptr addrspace(1) %3, i64 %338, !dbg !55
  %352 = bitcast float %.0.i to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %352, ptr addrspace(1) %351, i1 %341) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caanpv4wj6homnvnh5dkj5z3p4bi4v5rwrggoh4uv3o7ail2thxp.py", directory: "inductor_cache/aa")
!4 = !{ptr @triton_red_fused_native_group_norm_20, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_20, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_20", linkageName: "triton_red_fused_native_group_norm_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 37, column: 63, scope: !7)
!17 = !DILocation(line: 37, column: 51, scope: !7)
!18 = !DILocation(line: 37, column: 56, scope: !7)
!19 = !DILocation(line: 37, column: 34, scope: !7)
!20 = !DILocation(line: 37, column: 68, scope: !7)
!21 = !DILocation(line: 42, column: 60, scope: !7)
!22 = !DILocation(line: 183, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 40, column: 51, scope: !7)
!26 = !DILocation(line: 44, column: 64, scope: !7)
!27 = !DILocation(line: 185, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 185, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 186, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 186, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 186, column: 22, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 43, column: 56, scope: !7)
!33 = !DILocation(line: 192, column: 21, scope: !34, inlinedAt: !35)
!34 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!35 = !DILocation(line: 46, column: 41, scope: !7)
!36 = !DILocation(line: 193, column: 28, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 194, column: 39, scope: !34, inlinedAt: !35)
!38 = !DILocation(line: 194, column: 60, scope: !34, inlinedAt: !35)
!39 = !DILocation(line: 194, column: 49, scope: !34, inlinedAt: !35)
!40 = !DILocation(line: 196, column: 25, scope: !34, inlinedAt: !35)
!41 = !DILocation(line: 196, column: 17, scope: !34, inlinedAt: !35)
!42 = !DILocation(line: 197, column: 15, scope: !34, inlinedAt: !35)
!43 = !DILocation(line: 197, column: 30, scope: !34, inlinedAt: !35)
!44 = !DILocation(line: 197, column: 38, scope: !34, inlinedAt: !35)
!45 = !DILocation(line: 197, column: 49, scope: !34, inlinedAt: !35)
!46 = !DILocation(line: 197, column: 22, scope: !34, inlinedAt: !35)
!47 = !DILocation(line: 204, column: 46, scope: !23, inlinedAt: !35)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 36, scope: !7)
!52 = !DILocation(line: 54, column: 18, scope: !7)
!53 = !DILocation(line: 56, column: 18, scope: !7)
!54 = !DILocation(line: 57, column: 27, scope: !7)
!55 = !DILocation(line: 58, column: 25, scope: !7)
!56 = !DILocation(line: 58, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 4, scope: !7)
