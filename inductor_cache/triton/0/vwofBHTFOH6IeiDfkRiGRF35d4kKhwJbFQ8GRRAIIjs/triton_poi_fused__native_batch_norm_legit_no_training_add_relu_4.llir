; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = sdiv i32 %18, 512, !dbg !14
  %21 = sdiv i32 %19, 512, !dbg !14
  %22 = srem i32 %20, 128, !dbg !15
  %23 = srem i32 %21, 128, !dbg !15
  %24 = sext i32 %18 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = sext i32 %19 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !17
  %30 = sext i32 %22 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !18
  %32 = sext i32 %23 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !21
  %51 = bitcast i32 %50 to float, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !21
  %53 = bitcast i32 %52 to float, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !21
  %57 = bitcast i32 %56 to float, !dbg !21
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !21
  %59 = bitcast i32 %58 to float, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !22
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !27
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !28
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !31
  %103 = bitcast i32 %102 to float, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %105 = bitcast i32 %104 to float, !dbg !31
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %107 = bitcast i32 %106 to float, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !31
  %111 = bitcast i32 %110 to float, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !32
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !33
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !33
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !33
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !33
  %122 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !34
  %123 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !35
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !35
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !35
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #3, !dbg !35
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !35
  %132 = fadd float %45, 0x3EE4F8B580000000, !dbg !36
  %133 = fadd float %47, 0x3EE4F8B580000000, !dbg !36
  %134 = fadd float %49, 0x3EE4F8B580000000, !dbg !36
  %135 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %136 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %137 = fadd float %55, 0x3EE4F8B580000000, !dbg !36
  %138 = fadd float %57, 0x3EE4F8B580000000, !dbg !36
  %139 = fadd float %59, 0x3EE4F8B580000000, !dbg !36
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %140, 0, !dbg !37
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %141, 0, !dbg !37
  br i1 %.not.i, label %147, label %142, !dbg !37

142:                                              ; preds = %12
  br i1 %.not1.i, label %145, label %143, !dbg !37

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

147:                                              ; preds = %12
  br i1 %.not1.i, label %150, label %148, !dbg !37

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %143, %145, %148, %150
  %.0.i = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !37
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %152, 0, !dbg !37
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %153, 0, !dbg !37
  br i1 %.not.i1, label %159, label %154, !dbg !37

154:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %157, label %155, !dbg !37

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %162, label %160, !dbg !37

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %155, %157, %160, %162
  %.0.i3 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !37
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i6 = icmp eq i32 %164, 0, !dbg !37
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i9 = icmp eq i32 %165, 0, !dbg !37
  br i1 %.not.i6, label %171, label %166, !dbg !37

166:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %169, label %167, !dbg !37

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

171:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %174, label %172, !dbg !37

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #3, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %167, %169, %172, %174
  %.0.i8 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !37
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i11 = icmp eq i32 %176, 0, !dbg !37
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i14 = icmp eq i32 %177, 0, !dbg !37
  br i1 %.not.i11, label %183, label %178, !dbg !37

178:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %181, label %179, !dbg !37

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

183:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %186, label %184, !dbg !37

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %179, %181, %184, %186
  %.0.i13 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !37
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i16 = icmp eq i32 %188, 0, !dbg !37
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i19 = icmp eq i32 %189, 0, !dbg !37
  br i1 %.not.i16, label %195, label %190, !dbg !37

190:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %193, label %191, !dbg !37

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

195:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %198, label %196, !dbg !37

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !37
  br label %__nv_sqrtf.exit20, !dbg !37

__nv_sqrtf.exit20:                                ; preds = %191, %193, %196, %198
  %.0.i18 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !37
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i21 = icmp eq i32 %200, 0, !dbg !37
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i24 = icmp eq i32 %201, 0, !dbg !37
  br i1 %.not.i21, label %207, label %202, !dbg !37

202:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %205, label %203, !dbg !37

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

207:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %210, label %208, !dbg !37

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !37
  br label %__nv_sqrtf.exit25, !dbg !37

__nv_sqrtf.exit25:                                ; preds = %203, %205, %208, %210
  %.0.i23 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !37
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i26 = icmp eq i32 %212, 0, !dbg !37
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i29 = icmp eq i32 %213, 0, !dbg !37
  br i1 %.not.i26, label %219, label %214, !dbg !37

214:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %217, label %215, !dbg !37

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

219:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %222, label %220, !dbg !37

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !37
  br label %__nv_sqrtf.exit30, !dbg !37

__nv_sqrtf.exit30:                                ; preds = %215, %217, %220, %222
  %.0.i28 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !37
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i31 = icmp eq i32 %224, 0, !dbg !37
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i34 = icmp eq i32 %225, 0, !dbg !37
  br i1 %.not.i31, label %231, label %226, !dbg !37

226:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %229, label %227, !dbg !37

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #3, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #3, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

231:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %234, label %232, !dbg !37

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #3, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #3, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

__nv_sqrtf.exit35:                                ; preds = %227, %229, %232, %234
  %.0.i33 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !37
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !38
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !38
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !38
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !38
  %244 = fadd float %97, 0x3EE4F8B580000000, !dbg !39
  %245 = fadd float %99, 0x3EE4F8B580000000, !dbg !39
  %246 = fadd float %101, 0x3EE4F8B580000000, !dbg !39
  %247 = fadd float %103, 0x3EE4F8B580000000, !dbg !39
  %248 = fadd float %105, 0x3EE4F8B580000000, !dbg !39
  %249 = fadd float %107, 0x3EE4F8B580000000, !dbg !39
  %250 = fadd float %109, 0x3EE4F8B580000000, !dbg !39
  %251 = fadd float %111, 0x3EE4F8B580000000, !dbg !39
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i36 = icmp eq i32 %252, 0, !dbg !40
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i39 = icmp eq i32 %253, 0, !dbg !40
  br i1 %.not.i36, label %259, label %254, !dbg !40

254:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %257, label %255, !dbg !40

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %244) #3, !dbg !40
  br label %__nv_sqrtf.exit40, !dbg !40

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %244) #3, !dbg !40
  br label %__nv_sqrtf.exit40, !dbg !40

259:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %262, label %260, !dbg !40

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %244) #3, !dbg !40
  br label %__nv_sqrtf.exit40, !dbg !40

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %244) #3, !dbg !40
  br label %__nv_sqrtf.exit40, !dbg !40

__nv_sqrtf.exit40:                                ; preds = %255, %257, %260, %262
  %.0.i38 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !40
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i41 = icmp eq i32 %264, 0, !dbg !40
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i44 = icmp eq i32 %265, 0, !dbg !40
  br i1 %.not.i41, label %271, label %266, !dbg !40

266:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %269, label %267, !dbg !40

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %245) #3, !dbg !40
  br label %__nv_sqrtf.exit45, !dbg !40

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %245) #3, !dbg !40
  br label %__nv_sqrtf.exit45, !dbg !40

271:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %274, label %272, !dbg !40

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %245) #3, !dbg !40
  br label %__nv_sqrtf.exit45, !dbg !40

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %245) #3, !dbg !40
  br label %__nv_sqrtf.exit45, !dbg !40

__nv_sqrtf.exit45:                                ; preds = %267, %269, %272, %274
  %.0.i43 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !40
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i46 = icmp eq i32 %276, 0, !dbg !40
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i49 = icmp eq i32 %277, 0, !dbg !40
  br i1 %.not.i46, label %283, label %278, !dbg !40

278:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %281, label %279, !dbg !40

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %246) #3, !dbg !40
  br label %__nv_sqrtf.exit50, !dbg !40

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %246) #3, !dbg !40
  br label %__nv_sqrtf.exit50, !dbg !40

283:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %286, label %284, !dbg !40

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %246) #3, !dbg !40
  br label %__nv_sqrtf.exit50, !dbg !40

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %246) #3, !dbg !40
  br label %__nv_sqrtf.exit50, !dbg !40

__nv_sqrtf.exit50:                                ; preds = %279, %281, %284, %286
  %.0.i48 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !40
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i51 = icmp eq i32 %288, 0, !dbg !40
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i54 = icmp eq i32 %289, 0, !dbg !40
  br i1 %.not.i51, label %295, label %290, !dbg !40

290:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %293, label %291, !dbg !40

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %247) #3, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %247) #3, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

295:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %298, label %296, !dbg !40

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %247) #3, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %247) #3, !dbg !40
  br label %__nv_sqrtf.exit55, !dbg !40

__nv_sqrtf.exit55:                                ; preds = %291, %293, %296, %298
  %.0.i53 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !40
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i56 = icmp eq i32 %300, 0, !dbg !40
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i59 = icmp eq i32 %301, 0, !dbg !40
  br i1 %.not.i56, label %307, label %302, !dbg !40

302:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %305, label %303, !dbg !40

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %248) #3, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %248) #3, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

307:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %310, label %308, !dbg !40

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %248) #3, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %248) #3, !dbg !40
  br label %__nv_sqrtf.exit60, !dbg !40

__nv_sqrtf.exit60:                                ; preds = %303, %305, %308, %310
  %.0.i58 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !40
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i61 = icmp eq i32 %312, 0, !dbg !40
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i64 = icmp eq i32 %313, 0, !dbg !40
  br i1 %.not.i61, label %319, label %314, !dbg !40

314:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %317, label %315, !dbg !40

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #3, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #3, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

319:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %322, label %320, !dbg !40

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #3, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #3, !dbg !40
  br label %__nv_sqrtf.exit65, !dbg !40

__nv_sqrtf.exit65:                                ; preds = %315, %317, %320, %322
  %.0.i63 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !40
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i66 = icmp eq i32 %324, 0, !dbg !40
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i69 = icmp eq i32 %325, 0, !dbg !40
  br i1 %.not.i66, label %331, label %326, !dbg !40

326:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %329, label %327, !dbg !40

327:                                              ; preds = %326
  %328 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #3, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

329:                                              ; preds = %326
  %330 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #3, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

331:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %334, label %332, !dbg !40

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #3, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #3, !dbg !40
  br label %__nv_sqrtf.exit70, !dbg !40

__nv_sqrtf.exit70:                                ; preds = %327, %329, %332, %334
  %.0.i68 = phi float [ %328, %327 ], [ %330, %329 ], [ %333, %332 ], [ %335, %334 ], !dbg !40
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i71 = icmp eq i32 %336, 0, !dbg !40
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i74 = icmp eq i32 %337, 0, !dbg !40
  br i1 %.not.i71, label %343, label %338, !dbg !40

338:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %341, label %339, !dbg !40

339:                                              ; preds = %338
  %340 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #3, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

341:                                              ; preds = %338
  %342 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #3, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

343:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %346, label %344, !dbg !40

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #3, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #3, !dbg !40
  br label %__nv_sqrtf.exit75, !dbg !40

__nv_sqrtf.exit75:                                ; preds = %339, %341, %344, %346
  %.0.i73 = phi float [ %340, %339 ], [ %342, %341 ], [ %345, %344 ], [ %347, %346 ], !dbg !40
  %348 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !27
  %349 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !19
  %350 = insertelement <2 x i32> %349, i32 %93, i64 1, !dbg !19
  %351 = bitcast <2 x i32> %350 to <2 x float>, !dbg !19
  %352 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !27
  %353 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %354 = insertelement <2 x i32> %353, i32 %92, i64 1, !dbg !19
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !19
  %356 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !27
  %357 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !19
  %358 = insertelement <2 x i32> %357, i32 %91, i64 1, !dbg !19
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !19
  %360 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !27
  %361 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !19
  %362 = insertelement <2 x i32> %361, i32 %90, i64 1, !dbg !19
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !19
  %364 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !27
  %365 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %366 = insertelement <2 x i32> %365, i32 %89, i64 1, !dbg !19
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !19
  %368 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !27
  %369 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !19
  %370 = insertelement <2 x i32> %369, i32 %88, i64 1, !dbg !19
  %371 = bitcast <2 x i32> %370 to <2 x float>, !dbg !19
  %372 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !27
  %373 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !19
  %374 = insertelement <2 x i32> %373, i32 %87, i64 1, !dbg !19
  %375 = bitcast <2 x i32> %374 to <2 x float>, !dbg !19
  %376 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !27
  %377 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !19
  %378 = insertelement <2 x i32> %377, i32 %86, i64 1, !dbg !19
  %379 = bitcast <2 x i32> %378 to <2 x float>, !dbg !19
  %380 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %381 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !23
  %382 = insertelement <2 x i32> %381, i32 %121, i64 1, !dbg !23
  %383 = bitcast <2 x i32> %382 to <2 x float>, !dbg !23
  %384 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !25
  %385 = insertelement <2 x i32> %384, i32 %131, i64 1, !dbg !25
  %386 = bitcast <2 x i32> %385 to <2 x float>, !dbg !25
  %387 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %388 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !23
  %389 = insertelement <2 x i32> %388, i32 %120, i64 1, !dbg !23
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !23
  %391 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !25
  %392 = insertelement <2 x i32> %391, i32 %130, i64 1, !dbg !25
  %393 = bitcast <2 x i32> %392 to <2 x float>, !dbg !25
  %394 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %395 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !23
  %396 = insertelement <2 x i32> %395, i32 %119, i64 1, !dbg !23
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !23
  %398 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !25
  %399 = insertelement <2 x i32> %398, i32 %129, i64 1, !dbg !25
  %400 = bitcast <2 x i32> %399 to <2 x float>, !dbg !25
  %401 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %402 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !23
  %403 = insertelement <2 x i32> %402, i32 %118, i64 1, !dbg !23
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !23
  %405 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !25
  %406 = insertelement <2 x i32> %405, i32 %128, i64 1, !dbg !25
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !25
  %408 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %409 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !23
  %410 = insertelement <2 x i32> %409, i32 %117, i64 1, !dbg !23
  %411 = bitcast <2 x i32> %410 to <2 x float>, !dbg !23
  %412 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !25
  %413 = insertelement <2 x i32> %412, i32 %127, i64 1, !dbg !25
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !25
  %415 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %416 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !23
  %417 = insertelement <2 x i32> %416, i32 %116, i64 1, !dbg !23
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !23
  %419 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !25
  %420 = insertelement <2 x i32> %419, i32 %126, i64 1, !dbg !25
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !25
  %422 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %423 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !23
  %424 = insertelement <2 x i32> %423, i32 %115, i64 1, !dbg !23
  %425 = bitcast <2 x i32> %424 to <2 x float>, !dbg !23
  %426 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !25
  %427 = insertelement <2 x i32> %426, i32 %125, i64 1, !dbg !25
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !25
  %429 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %430 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !23
  %431 = insertelement <2 x i32> %430, i32 %114, i64 1, !dbg !23
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !23
  %433 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !25
  %434 = insertelement <2 x i32> %433, i32 %124, i64 1, !dbg !25
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !25
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !41
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !41
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !41
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !41
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !41
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !41
  %442 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !41
  %443 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !41
  %444 = insertelement <2 x i32> poison, i32 %429, i64 0, !dbg !17
  %445 = insertelement <2 x i32> %444, i32 %376, i64 1, !dbg !17
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !17
  %447 = fsub <2 x float> %446, %379, !dbg !42
  %448 = insertelement <2 x float> poison, float %236, i64 0, !dbg !43
  %449 = insertelement <2 x float> %448, float %436, i64 1, !dbg !43
  %450 = fmul <2 x float> %447, %449, !dbg !43
  %451 = fmul <2 x float> %450, %432, !dbg !44
  %452 = fadd <2 x float> %451, %435, !dbg !45
  %453 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !17
  %454 = insertelement <2 x i32> %453, i32 %372, i64 1, !dbg !17
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !17
  %456 = fsub <2 x float> %455, %375, !dbg !42
  %457 = insertelement <2 x float> poison, float %237, i64 0, !dbg !43
  %458 = insertelement <2 x float> %457, float %437, i64 1, !dbg !43
  %459 = fmul <2 x float> %456, %458, !dbg !43
  %460 = fmul <2 x float> %459, %425, !dbg !44
  %461 = fadd <2 x float> %460, %428, !dbg !45
  %462 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !17
  %463 = insertelement <2 x i32> %462, i32 %368, i64 1, !dbg !17
  %464 = bitcast <2 x i32> %463 to <2 x float>, !dbg !17
  %465 = fsub <2 x float> %464, %371, !dbg !42
  %466 = insertelement <2 x float> poison, float %238, i64 0, !dbg !43
  %467 = insertelement <2 x float> %466, float %438, i64 1, !dbg !43
  %468 = fmul <2 x float> %465, %467, !dbg !43
  %469 = fmul <2 x float> %468, %418, !dbg !44
  %470 = fadd <2 x float> %469, %421, !dbg !45
  %471 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !17
  %472 = insertelement <2 x i32> %471, i32 %364, i64 1, !dbg !17
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !17
  %474 = fsub <2 x float> %473, %367, !dbg !42
  %475 = insertelement <2 x float> poison, float %239, i64 0, !dbg !43
  %476 = insertelement <2 x float> %475, float %439, i64 1, !dbg !43
  %477 = fmul <2 x float> %474, %476, !dbg !43
  %478 = fmul <2 x float> %477, %411, !dbg !44
  %479 = fadd <2 x float> %478, %414, !dbg !45
  %480 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !17
  %481 = insertelement <2 x i32> %480, i32 %360, i64 1, !dbg !17
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !17
  %483 = fsub <2 x float> %482, %363, !dbg !42
  %484 = insertelement <2 x float> poison, float %240, i64 0, !dbg !43
  %485 = insertelement <2 x float> %484, float %440, i64 1, !dbg !43
  %486 = fmul <2 x float> %483, %485, !dbg !43
  %487 = fmul <2 x float> %486, %404, !dbg !44
  %488 = fadd <2 x float> %487, %407, !dbg !45
  %489 = insertelement <2 x i32> poison, i32 %394, i64 0, !dbg !17
  %490 = insertelement <2 x i32> %489, i32 %356, i64 1, !dbg !17
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !17
  %492 = fsub <2 x float> %491, %359, !dbg !42
  %493 = insertelement <2 x float> poison, float %241, i64 0, !dbg !43
  %494 = insertelement <2 x float> %493, float %441, i64 1, !dbg !43
  %495 = fmul <2 x float> %492, %494, !dbg !43
  %496 = fmul <2 x float> %495, %397, !dbg !44
  %497 = fadd <2 x float> %496, %400, !dbg !45
  %498 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !17
  %499 = insertelement <2 x i32> %498, i32 %352, i64 1, !dbg !17
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !17
  %501 = fsub <2 x float> %500, %355, !dbg !42
  %502 = insertelement <2 x float> poison, float %242, i64 0, !dbg !43
  %503 = insertelement <2 x float> %502, float %442, i64 1, !dbg !43
  %504 = fmul <2 x float> %501, %503, !dbg !43
  %505 = fmul <2 x float> %504, %390, !dbg !44
  %506 = fadd <2 x float> %505, %393, !dbg !45
  %507 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !17
  %508 = insertelement <2 x i32> %507, i32 %348, i64 1, !dbg !17
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !17
  %510 = fsub <2 x float> %509, %351, !dbg !42
  %511 = insertelement <2 x float> poison, float %243, i64 0, !dbg !43
  %512 = insertelement <2 x float> %511, float %443, i64 1, !dbg !43
  %513 = fmul <2 x float> %510, %512, !dbg !43
  %514 = fmul <2 x float> %513, %383, !dbg !44
  %515 = fadd <2 x float> %514, %386, !dbg !45
  %shift = shufflevector <2 x float> %452, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %516 = fadd <2 x float> %452, %shift, !dbg !46
  %517 = extractelement <2 x float> %516, i64 0, !dbg !46
  %shift76 = shufflevector <2 x float> %461, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %518 = fadd <2 x float> %461, %shift76, !dbg !46
  %519 = extractelement <2 x float> %518, i64 0, !dbg !46
  %shift77 = shufflevector <2 x float> %470, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %520 = fadd <2 x float> %470, %shift77, !dbg !46
  %521 = extractelement <2 x float> %520, i64 0, !dbg !46
  %shift78 = shufflevector <2 x float> %479, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %522 = fadd <2 x float> %479, %shift78, !dbg !46
  %523 = extractelement <2 x float> %522, i64 0, !dbg !46
  %shift79 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %524 = fadd <2 x float> %488, %shift79, !dbg !46
  %525 = extractelement <2 x float> %524, i64 0, !dbg !46
  %shift80 = shufflevector <2 x float> %497, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %526 = fadd <2 x float> %497, %shift80, !dbg !46
  %527 = extractelement <2 x float> %526, i64 0, !dbg !46
  %shift81 = shufflevector <2 x float> %506, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %528 = fadd <2 x float> %506, %shift81, !dbg !46
  %529 = extractelement <2 x float> %528, i64 0, !dbg !46
  %shift82 = shufflevector <2 x float> %515, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %530 = fadd <2 x float> %515, %shift82, !dbg !46
  %531 = extractelement <2 x float> %530, i64 0, !dbg !46
  %532 = fcmp olt float %517, 0.000000e+00, !dbg !47
  %533 = fcmp olt float %519, 0.000000e+00, !dbg !47
  %534 = fcmp olt float %521, 0.000000e+00, !dbg !47
  %535 = fcmp olt float %523, 0.000000e+00, !dbg !47
  %536 = fcmp olt float %525, 0.000000e+00, !dbg !47
  %537 = fcmp olt float %527, 0.000000e+00, !dbg !47
  %538 = fcmp olt float %529, 0.000000e+00, !dbg !47
  %539 = fcmp olt float %531, 0.000000e+00, !dbg !47
  %540 = select i1 %532, float 0.000000e+00, float %517, !dbg !51
  %541 = select i1 %533, float 0.000000e+00, float %519, !dbg !51
  %542 = select i1 %534, float 0.000000e+00, float %521, !dbg !51
  %543 = select i1 %535, float 0.000000e+00, float %523, !dbg !51
  %544 = select i1 %536, float 0.000000e+00, float %525, !dbg !51
  %545 = select i1 %537, float 0.000000e+00, float %527, !dbg !51
  %546 = select i1 %538, float 0.000000e+00, float %529, !dbg !51
  %547 = select i1 %539, float 0.000000e+00, float %531, !dbg !51
  %548 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !52
  %549 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !52
  %550 = bitcast float %540 to i32, !dbg !53
  %551 = bitcast float %541 to i32, !dbg !53
  %552 = bitcast float %542 to i32, !dbg !53
  %553 = bitcast float %543 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %551, i32 %552, i32 %553, ptr addrspace(1) %548, i1 true) #3, !dbg !53
  %554 = bitcast float %544 to i32, !dbg !53
  %555 = bitcast float %545 to i32, !dbg !53
  %556 = bitcast float %546 to i32, !dbg !53
  %557 = bitcast float %547 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %554, i32 %555, i32 %556, i32 %557, ptr addrspace(1) %549, i1 true) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cefr6hyzcw546gna7aio5nxh2andpurwqp6b4n4wzlwokhd7sgg7.py", directory: "inductor_cache/ef")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 57, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 58, column: 28, scope: !7)
!53 = !DILocation(line: 58, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
