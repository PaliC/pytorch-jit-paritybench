; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 12, !dbg !13
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %21 = bitcast i32 %20 to float, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %23 = bitcast i32 %22 to float, !dbg !16
  %24 = select i1 %7, float %23, float 0.000000e+00, !dbg !17
  %25 = select i1 %7, float %21, float 0.000000e+00, !dbg !17
  %26 = select i1 %7, float %19, float 0.000000e+00, !dbg !17
  %27 = select i1 %7, float %17, float 0.000000e+00, !dbg !17
  %28 = or disjoint i64 %13, 2048, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !15
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %32 = bitcast i32 %31 to float, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %34 = bitcast i32 %33 to float, !dbg !16
  %35 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %36 = bitcast i32 %35 to float, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %38 = bitcast i32 %37 to float, !dbg !16
  %39 = fsub float %38, %24, !dbg !19
  %40 = fsub float %36, %25, !dbg !19
  %41 = fsub float %34, %26, !dbg !19
  %42 = fsub float %32, %27, !dbg !19
  %43 = select i1 %7, float 2.000000e+00, float 1.000000e+00, !dbg !23
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %43) #5, !dbg !24
  %45 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %40, float %43) #5, !dbg !24
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float %43) #5, !dbg !24
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float %43) #5, !dbg !24
  %48 = fadd float %24, %44, !dbg !25
  %49 = fsub float %38, %48, !dbg !26
  %50 = fmul float %39, %49, !dbg !27
  %51 = fadd float %50, 0.000000e+00, !dbg !28
  %52 = fadd float %25, %45, !dbg !25
  %53 = fsub float %36, %52, !dbg !26
  %54 = fmul float %40, %53, !dbg !27
  %55 = fadd float %54, 0.000000e+00, !dbg !28
  %56 = fadd float %26, %46, !dbg !25
  %57 = fsub float %34, %56, !dbg !26
  %58 = fmul float %41, %57, !dbg !27
  %59 = fadd float %58, 0.000000e+00, !dbg !28
  %60 = fadd float %27, %47, !dbg !25
  %61 = fsub float %32, %60, !dbg !26
  %62 = fmul float %42, %61, !dbg !27
  %63 = fadd float %62, 0.000000e+00, !dbg !28
  %64 = select i1 %7, float %48, float 0.000000e+00, !dbg !17
  %65 = select i1 %7, float %52, float 0.000000e+00, !dbg !17
  %66 = select i1 %7, float %56, float 0.000000e+00, !dbg !17
  %67 = select i1 %7, float %60, float 0.000000e+00, !dbg !17
  %68 = select i1 %7, float %59, float 0.000000e+00, !dbg !29
  %69 = select i1 %7, float %63, float 0.000000e+00, !dbg !29
  %70 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %71 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %72 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %73 = select i1 %7, float 2.000000e+00, float 0.000000e+00, !dbg !23
  %74 = lshr i32 %8, 5, !dbg !12
  %75 = and i32 %8, 31, !dbg !12
  %76 = fsub float %65, %64, !dbg !30
  %77 = select i1 %7, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %78 = fcmp oeq float %77, 0.000000e+00, !dbg !34
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %77) #5, !dbg !35
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !36
  %81 = fmul float %76, %80, !dbg !37
  %82 = fadd float %64, %81, !dbg !38
  %83 = fadd float %51, %55, !dbg !39
  %84 = select i1 %7, float %83, float 0.000000e+00, !dbg !39
  %85 = fmul float %76, %76, !dbg !40
  %86 = fmul float %85, %70, !dbg !41
  %87 = fmul float %86, %80, !dbg !42
  %88 = fadd float %84, %87, !dbg !43
  %89 = fsub float %66, %82, !dbg !30
  %90 = select i1 %7, float 6.000000e+00, float 0.000000e+00, !dbg !33
  %91 = fcmp oeq float %90, 0.000000e+00, !dbg !34
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float %90) #5, !dbg !35
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !36
  %94 = fmul float %93, %89, !dbg !37
  %95 = fadd float %82, %94, !dbg !38
  %96 = fadd float %68, %88, !dbg !39
  %97 = fmul float %89, %89, !dbg !40
  %98 = fmul float %77, %97, !dbg !41
  %99 = fmul float %93, %98, !dbg !42
  %100 = fadd float %96, %99, !dbg !43
  %101 = fsub float %67, %95, !dbg !30
  %102 = select i1 %7, float 8.000000e+00, float 0.000000e+00, !dbg !33
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !34
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %102) #5, !dbg !35
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !36
  %106 = fmul float %105, %101, !dbg !37
  %107 = fadd float %95, %106, !dbg !38
  %108 = fadd float %69, %100, !dbg !39
  %109 = fmul float %101, %101, !dbg !40
  %110 = fmul float %90, %109, !dbg !41
  %111 = fmul float %105, %110, !dbg !42
  %112 = fadd float %108, %111, !dbg !43
  %113 = bitcast float %107 to i32, !dbg !44
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 16, i32 31), !dbg !44
  %115 = bitcast i32 %114 to float, !dbg !44
  %116 = bitcast float %112 to i32, !dbg !44
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !44
  %118 = bitcast i32 %117 to float, !dbg !44
  %119 = bitcast float %102 to i32, !dbg !44
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !44
  %121 = bitcast i32 %120 to float, !dbg !44
  %122 = fsub float %115, %107, !dbg !30
  %123 = fadd float %102, %121, !dbg !33
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !34
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %123) #5, !dbg !35
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !36
  %127 = fmul float %126, %122, !dbg !37
  %128 = fadd float %107, %127, !dbg !38
  %129 = fadd float %112, %118, !dbg !39
  %130 = fmul float %122, %122, !dbg !40
  %131 = fmul float %102, %130, !dbg !41
  %132 = fmul float %126, %131, !dbg !42
  %133 = fadd float %129, %132, !dbg !43
  %134 = bitcast float %128 to i32, !dbg !44
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 8, i32 31), !dbg !44
  %136 = bitcast i32 %135 to float, !dbg !44
  %137 = bitcast float %133 to i32, !dbg !44
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 8, i32 31), !dbg !44
  %139 = bitcast i32 %138 to float, !dbg !44
  %140 = bitcast float %123 to i32, !dbg !44
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !44
  %142 = bitcast i32 %141 to float, !dbg !44
  %143 = fsub float %136, %128, !dbg !30
  %144 = fadd float %123, %142, !dbg !33
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %144) #5, !dbg !35
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !36
  %148 = fmul float %143, %147, !dbg !37
  %149 = fadd float %128, %148, !dbg !38
  %150 = fadd float %133, %139, !dbg !39
  %151 = fmul float %143, %143, !dbg !40
  %152 = fmul float %123, %151, !dbg !41
  %153 = fmul float %147, %152, !dbg !42
  %154 = fadd float %150, %153, !dbg !43
  %155 = bitcast float %149 to i32, !dbg !44
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !44
  %157 = bitcast i32 %156 to float, !dbg !44
  %158 = bitcast float %154 to i32, !dbg !44
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 4, i32 31), !dbg !44
  %160 = bitcast i32 %159 to float, !dbg !44
  %161 = bitcast float %144 to i32, !dbg !44
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !44
  %163 = bitcast i32 %162 to float, !dbg !44
  %164 = fsub float %157, %149, !dbg !30
  %165 = fadd float %144, %163, !dbg !33
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !34
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %165) #5, !dbg !35
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !36
  %169 = fmul float %164, %168, !dbg !37
  %170 = fadd float %149, %169, !dbg !38
  %171 = fadd float %154, %160, !dbg !39
  %172 = fmul float %164, %164, !dbg !40
  %173 = fmul float %144, %172, !dbg !41
  %174 = fmul float %168, %173, !dbg !42
  %175 = fadd float %171, %174, !dbg !43
  %176 = bitcast float %170 to i32, !dbg !44
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !44
  %178 = bitcast i32 %177 to float, !dbg !44
  %179 = bitcast float %175 to i32, !dbg !44
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !44
  %181 = bitcast i32 %180 to float, !dbg !44
  %182 = bitcast float %165 to i32, !dbg !44
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !44
  %184 = bitcast i32 %183 to float, !dbg !44
  %185 = fsub float %178, %170, !dbg !30
  %186 = fadd float %165, %184, !dbg !33
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !34
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %186) #5, !dbg !35
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !36
  %190 = fmul float %185, %189, !dbg !37
  %191 = fadd float %170, %190, !dbg !38
  %192 = fadd float %175, %181, !dbg !39
  %193 = fmul float %185, %185, !dbg !40
  %194 = fmul float %165, %193, !dbg !41
  %195 = fmul float %189, %194, !dbg !42
  %196 = fadd float %192, %195, !dbg !43
  %197 = bitcast float %191 to i32, !dbg !44
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !44
  %199 = bitcast i32 %198 to float, !dbg !44
  %200 = bitcast float %196 to i32, !dbg !44
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !44
  %202 = bitcast i32 %201 to float, !dbg !44
  %203 = bitcast float %186 to i32, !dbg !44
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !44
  %205 = bitcast i32 %204 to float, !dbg !44
  %206 = fsub float %199, %191, !dbg !30
  %207 = fadd float %186, %205, !dbg !33
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !34
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %207) #5, !dbg !35
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !36
  %211 = fmul float %206, %210, !dbg !37
  %212 = fadd float %191, %211, !dbg !38
  %213 = fadd float %196, %202, !dbg !39
  %214 = fmul float %206, %206, !dbg !40
  %215 = fmul float %186, %214, !dbg !41
  %216 = fmul float %210, %215, !dbg !42
  %217 = fadd float %213, %216, !dbg !43
  %218 = icmp eq i32 %75, 0, !dbg !44
  %219 = and i32 %74, 15, !dbg !44
  %220 = zext nneg i32 %219 to i64, !dbg !44
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i64 %220, !dbg !44
  %222 = bitcast float %212 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 %218) #5, !dbg !44
  %223 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %220, !dbg !44
  %224 = bitcast float %217 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %218) #5, !dbg !44
  %225 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %220, !dbg !44
  %226 = bitcast float %207 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 %218) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %227 = icmp slt i32 %8, 16, !dbg !44
  %228 = sext i32 %8 to i64, !dbg !44
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i64 %228, !dbg !44
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %229, i1 %227) #5, !dbg !44
  %231 = bitcast i32 %230 to float, !dbg !44
  %232 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %228, !dbg !44
  %233 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %232, i1 %227) #5, !dbg !44
  %234 = bitcast i32 %233 to float, !dbg !44
  %235 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %228, !dbg !44
  %236 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %235, i1 %227) #5, !dbg !44
  %237 = bitcast i32 %236 to float, !dbg !44
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !44
  %239 = bitcast i32 %238 to float, !dbg !44
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 8, i32 31), !dbg !44
  %241 = bitcast i32 %240 to float, !dbg !44
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 8, i32 31), !dbg !44
  %243 = bitcast i32 %242 to float, !dbg !44
  %244 = fsub float %239, %231, !dbg !30
  %245 = fadd float %237, %243, !dbg !33
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !34
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !35
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !36
  %249 = fmul float %244, %248, !dbg !37
  %250 = fadd float %249, %231, !dbg !38
  %251 = fadd float %234, %241, !dbg !39
  %252 = fmul float %244, %244, !dbg !40
  %253 = fmul float %252, %237, !dbg !41
  %254 = fmul float %253, %248, !dbg !42
  %255 = fadd float %251, %254, !dbg !43
  %256 = bitcast float %250 to i32, !dbg !44
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 4, i32 31), !dbg !44
  %258 = bitcast i32 %257 to float, !dbg !44
  %259 = bitcast float %255 to i32, !dbg !44
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 4, i32 31), !dbg !44
  %261 = bitcast i32 %260 to float, !dbg !44
  %262 = bitcast float %245 to i32, !dbg !44
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 4, i32 31), !dbg !44
  %264 = bitcast i32 %263 to float, !dbg !44
  %265 = fsub float %258, %250, !dbg !30
  %266 = fadd float %245, %264, !dbg !33
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !34
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !35
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !36
  %270 = fmul float %265, %269, !dbg !37
  %271 = fadd float %250, %270, !dbg !38
  %272 = fadd float %255, %261, !dbg !39
  %273 = fmul float %265, %265, !dbg !40
  %274 = fmul float %245, %273, !dbg !41
  %275 = fmul float %269, %274, !dbg !42
  %276 = fadd float %272, %275, !dbg !43
  %277 = bitcast float %271 to i32, !dbg !44
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 2, i32 31), !dbg !44
  %279 = bitcast i32 %278 to float, !dbg !44
  %280 = bitcast float %276 to i32, !dbg !44
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 2, i32 31), !dbg !44
  %282 = bitcast i32 %281 to float, !dbg !44
  %283 = bitcast float %266 to i32, !dbg !44
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !44
  %285 = bitcast i32 %284 to float, !dbg !44
  %286 = fsub float %279, %271, !dbg !30
  %287 = fadd float %266, %285, !dbg !33
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !34
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !35
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !36
  %291 = fmul float %286, %290, !dbg !37
  %292 = fadd float %271, %291, !dbg !38
  %293 = fadd float %276, %282, !dbg !39
  %294 = fmul float %286, %286, !dbg !40
  %295 = fmul float %266, %294, !dbg !41
  %296 = fmul float %290, %295, !dbg !42
  %297 = fadd float %293, %296, !dbg !43
  %298 = bitcast float %292 to i32, !dbg !44
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 1, i32 31), !dbg !44
  %300 = bitcast i32 %299 to float, !dbg !44
  %301 = bitcast float %297 to i32, !dbg !44
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 1, i32 31), !dbg !44
  %303 = bitcast i32 %302 to float, !dbg !44
  %304 = bitcast float %287 to i32, !dbg !44
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 1, i32 31), !dbg !44
  %306 = bitcast i32 %305 to float, !dbg !44
  %307 = fsub float %300, %292, !dbg !30
  %308 = fadd float %287, %306, !dbg !33
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !34
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !35
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !36
  %312 = fmul float %307, %311, !dbg !37
  %313 = fadd float %292, %312, !dbg !38
  %314 = fadd float %297, %303, !dbg !39
  %315 = fmul float %307, %307, !dbg !40
  %316 = fmul float %287, %315, !dbg !41
  %317 = fmul float %311, %316, !dbg !42
  %318 = fadd float %314, %317, !dbg !43
  %319 = and i32 %8, 15, !dbg !44
  %320 = icmp eq i32 %319, 0, !dbg !44
  %321 = and i1 %227, %320, !dbg !44
  %322 = bitcast float %313 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %322, i1 %321) #5, !dbg !44
  %323 = bitcast float %318 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %323, i1 %321) #5, !dbg !44
  %324 = bitcast float %308 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %324, i1 %321) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %325 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %326 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !44
  %327 = sext i32 %6 to i64, !dbg !45
  %328 = getelementptr float, ptr addrspace(1) %2, i64 %327, !dbg !45
  %urem = and i32 %8, 511, !dbg !46
  %329 = icmp eq i32 %urem, 0, !dbg !46
  %330 = and i1 %329, %7, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %325, ptr addrspace(1) %328, i1 %330) #5, !dbg !46
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 4.096000e+03) #5, !dbg !47
  %332 = fadd float %331, 0x3EE4F8B580000000, !dbg !48
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %333, 0, !dbg !49
  br i1 %.not.i, label %336, label %334, !dbg !49

334:                                              ; preds = %5
  %335 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %332), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

336:                                              ; preds = %5
  %337 = tail call float @llvm.nvvm.rsqrt.approx.f(float %332), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %334, %336
  %.0.i = phi float [ %335, %334 ], [ %337, %336 ], !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %338 = getelementptr float, ptr addrspace(1) %0, i64 %327, !dbg !51
  %339 = bitcast float %.0.i to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %338, i1 %330) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c45fqgy5jgdxf7cxrpgo2bbqbecioaqjkmyabwnqcq4eo3kr3h3x.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_2", linkageName: "triton_red_fused__native_batch_norm_legit_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 34, column: 39, scope: !7)
!19 = !DILocation(line: 183, column: 24, scope: !20, inlinedAt: !22)
!20 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = !DILocation(line: 37, column: 51, scope: !7)
!23 = !DILocation(line: 41, column: 64, scope: !7)
!24 = !DILocation(line: 185, column: 34, scope: !20, inlinedAt: !22)
!25 = !DILocation(line: 185, column: 26, scope: !20, inlinedAt: !22)
!26 = !DILocation(line: 186, column: 39, scope: !20, inlinedAt: !22)
!27 = !DILocation(line: 186, column: 31, scope: !20, inlinedAt: !22)
!28 = !DILocation(line: 186, column: 22, scope: !20, inlinedAt: !22)
!29 = !DILocation(line: 40, column: 56, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !32)
!31 = distinct !DILexicalBlockFile(scope: !20, file: !21, discriminator: 0)
!32 = !DILocation(line: 43, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !32)
!43 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 204, column: 46, scope: !20, inlinedAt: !32)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 36, scope: !7)
!47 = !DILocation(line: 50, column: 18, scope: !7)
!48 = !DILocation(line: 52, column: 18, scope: !7)
!49 = !DILocation(line: 53, column: 27, scope: !7)
!50 = !DILocation(line: 54, column: 4, scope: !7)
!51 = !DILocation(line: 55, column: 28, scope: !7)
!52 = !DILocation(line: 55, column: 39, scope: !7)
!53 = !DILocation(line: 55, column: 4, scope: !7)
