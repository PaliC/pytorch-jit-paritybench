; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %16 = icmp slt i32 %15, 6144, !dbg !14
  %.frozen = freeze i32 %15, !dbg !15
  %17 = sdiv i32 %.frozen, 64, !dbg !15
  %18 = srem i32 %17, 24, !dbg !16
  %.frozen3 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen3, 1536, !dbg !17
  %20 = mul i32 %17, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %20, !dbg !18
  %.frozen1 = freeze i32 %15, !dbg !19
  %21 = sdiv i32 %.frozen1, 8, !dbg !19
  %22 = srem i32 %21, 8, !dbg !20
  %23 = mul i32 %21, 8, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %23, !dbg !21
  %24 = icmp slt i32 %18, 12, !dbg !22
  %25 = mul i32 %19, 1536, !dbg !23
  %srem.decomposed = sub i32 %.frozen3, %25, !dbg !23
  %26 = mul nsw i32 %19, 768, !dbg !24
  %27 = add nsw i32 %26, %srem.decomposed, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = and i1 %16, %24, !dbg !27
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #1, !dbg !28
  %32 = bitcast i32 %31 to float, !dbg !28
  %33 = sext i32 %22 to i64, !dbg !29
  %34 = getelementptr i64, ptr addrspace(1) %1, i64 %33, !dbg !29
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %34, i1 %30, i1 %30) #1, !dbg !30
  %36 = lshr i64 %35, 61, !dbg !31
  %37 = and i64 %36, 4, !dbg !31
  %38 = add i64 %37, %35, !dbg !31
  %39 = sext i32 %.decomposed2 to i64, !dbg !32
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !32
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %40, i1 %30, i1 %30) #1, !dbg !33
  %42 = lshr i64 %41, 61, !dbg !34
  %43 = and i64 %42, 4, !dbg !34
  %44 = shl i64 %38, 2, !dbg !35
  %45 = shl nsw i32 %18, 4, !dbg !36
  %46 = sext i32 %45 to i64, !dbg !37
  %47 = mul nsw i32 %19, 192, !dbg !38
  %48 = sext i32 %47 to i64, !dbg !39
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !40
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %43, !dbg !40
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %44, !dbg !40
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %46, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %52, i64 %48, !dbg !40
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %30, i32 0, i1 %30) #1, !dbg !41
  %55 = bitcast i32 %54 to float, !dbg !41
  %56 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !42
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %56, i1 %30, i1 %30) #1, !dbg !43
  %58 = lshr i64 %57, 61, !dbg !44
  %59 = and i64 %58, 4, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %59, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %44, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %46, !dbg !45
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %48, !dbg !45
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %30, i32 0, i1 %30) #1, !dbg !46
  %66 = bitcast i32 %65 to float, !dbg !46
  %67 = fsub float %66, %55, !dbg !47
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !48
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %30, i32 0, i1 %30) #1, !dbg !49
  %70 = bitcast i32 %69 to float, !dbg !49
  %71 = fmul float %67, %70, !dbg !50
  %72 = fadd float %71, %55, !dbg !51
  %73 = fsub float %72, %32, !dbg !52
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !53
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %30, i32 0, i1 %30) #1, !dbg !54
  %76 = bitcast i32 %75 to float, !dbg !54
  %77 = fmul float %73, %76, !dbg !55
  %78 = fadd float %77, %32, !dbg !56
  %79 = icmp sgt i32 %18, 11, !dbg !57
  %80 = shl nsw i32 %18, 6, !dbg !58
  %81 = add nsw i32 %.decomposed, -768, !dbg !58
  %82 = add nsw i32 %81, %26, !dbg !59
  %83 = add nsw i32 %82, %80, !dbg !60
  %84 = sext i32 %83 to i64, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %84, !dbg !61
  %86 = and i1 %16, %79, !dbg !62
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 0, i1 %86) #1, !dbg !63
  %88 = sext i32 %15 to i64, !dbg !64
  %89 = getelementptr float, ptr addrspace(1) %8, i64 %88, !dbg !64
  %90 = bitcast float %78 to i32, !dbg !65
  %91 = select i1 %24, i32 %90, i32 %87, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %89, i1 %16) #1, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4onsmqxexb42rjmqt4gjbj3u5cmcbzdcucbhfgzoqqgmqdhfvuc.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused_cat_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_16", linkageName: "triton_poi_fused_cat_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 26, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 49, scope: !7)
!25 = !DILocation(line: 35, column: 45, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 61, scope: !7)
!28 = !DILocation(line: 35, column: 54, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 33, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 35, scope: !7)
!35 = !DILocation(line: 45, column: 41, scope: !7)
!36 = !DILocation(line: 45, column: 53, scope: !7)
!37 = !DILocation(line: 45, column: 49, scope: !7)
!38 = !DILocation(line: 45, column: 63, scope: !7)
!39 = !DILocation(line: 45, column: 59, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 68, scope: !7)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 49, column: 35, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 68, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 31, scope: !7)
!54 = !DILocation(line: 56, column: 36, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 19, scope: !7)
!57 = !DILocation(line: 61, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 40, scope: !7)
!59 = !DILocation(line: 64, column: 36, scope: !7)
!60 = !DILocation(line: 64, column: 54, scope: !7)
!61 = !DILocation(line: 64, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 71, scope: !7)
!63 = !DILocation(line: 64, column: 63, scope: !7)
!64 = !DILocation(line: 66, column: 25, scope: !7)
!65 = !DILocation(line: 66, column: 37, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 66, column: 4, scope: !7)
