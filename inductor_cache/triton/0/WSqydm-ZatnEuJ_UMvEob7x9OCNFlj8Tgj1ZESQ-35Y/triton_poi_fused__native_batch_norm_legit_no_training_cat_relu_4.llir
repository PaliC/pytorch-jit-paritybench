; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %19 = insertelement <2 x i32> %18, i32 %16, i64 1, !dbg !14
  %20 = sdiv <2 x i32> %19, splat (i32 256), !dbg !14
  %21 = srem <2 x i32> %20, splat (i32 320), !dbg !15
  %22 = srem i32 %16, 256, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %23 = sdiv i32 %.frozen, 81920, !dbg !17
  %.frozen61 = freeze i32 %17, !dbg !17
  %24 = sdiv i32 %.frozen61, 81920, !dbg !17
  %25 = shufflevector <2 x i32> %21, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !18
  %26 = extractelement <2 x i32> %21, i64 1, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !19
  %29 = extractelement <2 x i32> %21, i64 0, !dbg !19
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %78 = icmp slt <2 x i32> %21, splat (i32 256), !dbg !27
  %79 = mul i32 %23, 81920, !dbg !28
  %srem.decomposed = sub i32 %.frozen, %79, !dbg !28
  %80 = mul i32 %24, 81920, !dbg !28
  %srem1.decomposed = sub i32 %.frozen61, %80, !dbg !28
  %81 = mul nsw i32 %23, 73728, !dbg !29
  %82 = mul nsw i32 %24, 73728, !dbg !29
  %83 = add nsw i32 %81, %srem.decomposed, !dbg !30
  %84 = add nsw i32 %82, %srem1.decomposed, !dbg !30
  %85 = sext i32 %83 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = sext i32 %84 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !31
  %89 = extractelement <2 x i1> %78, i64 1, !dbg !32
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !32
  %91 = extractelement <2 x i1> %78, i64 0, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !32
  %93 = mul nsw i32 %23, 69632, !dbg !33
  %94 = mul nsw i32 %24, 69632, !dbg !33
  %95 = add nsw i32 %93, %srem.decomposed, !dbg !34
  %96 = add nsw i32 %94, %srem1.decomposed, !dbg !34
  %97 = sext i32 %95 to i64, !dbg !35
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !35
  %99 = sext i32 %96 to i64, !dbg !35
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !35
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !36
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !37
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !38
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %104, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !38
  %107 = add nsw i32 %22, 65536, !dbg !39
  %108 = and <4 x i32> %25, <i32 -16, i32 -16, i32 -32, i32 -32>, !dbg !40
  %109 = icmp eq <4 x i32> %108, <i32 288, i32 288, i32 256, i32 256>, !dbg !40
  %110 = extractelement <4 x i1> %109, i64 3, !dbg !41
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !41
  %112 = extractelement <4 x i1> %109, i64 2, !dbg !41
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !41
  %114 = shl nsw i32 %26, 8, !dbg !42
  %115 = shl nsw i32 %29, 8, !dbg !42
  %116 = add nsw i32 %93, %107, !dbg !42
  %117 = add nsw i32 %116, -73728, !dbg !43
  %118 = add nsw i32 %117, %114, !dbg !44
  %119 = add nsw i32 %94, %107, !dbg !42
  %120 = add nsw i32 %119, -73728, !dbg !43
  %121 = add nsw i32 %120, %115, !dbg !44
  %122 = sext i32 %118 to i64, !dbg !45
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !45
  %124 = sext i32 %121 to i64, !dbg !45
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !45
  %126 = extractelement <4 x i1> %109, i64 1, !dbg !46
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !46
  %128 = extractelement <4 x i1> %109, i64 0, !dbg !46
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !46
  %130 = icmp sgt i32 %26, 303, !dbg !18
  %131 = icmp sgt i32 %29, 303, !dbg !18
  %132 = add nsw i32 %116, -77824, !dbg !47
  %133 = add nsw i32 %132, %114, !dbg !48
  %134 = add nsw i32 %119, -77824, !dbg !47
  %135 = add nsw i32 %134, %115, !dbg !48
  %136 = sext i32 %133 to i64, !dbg !49
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !49
  %138 = sext i32 %135 to i64, !dbg !49
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !49
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !50
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !50
  %142 = fadd float %43, 0x3F50624DE0000000, !dbg !51
  %143 = fadd float %45, 0x3F50624DE0000000, !dbg !51
  %144 = fadd float %47, 0x3F50624DE0000000, !dbg !51
  %145 = fadd float %49, 0x3F50624DE0000000, !dbg !51
  %146 = fadd float %51, 0x3F50624DE0000000, !dbg !51
  %147 = fadd float %53, 0x3F50624DE0000000, !dbg !51
  %148 = fadd float %55, 0x3F50624DE0000000, !dbg !51
  %149 = fadd float %57, 0x3F50624DE0000000, !dbg !51
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i = icmp eq i32 %150, 0, !dbg !52
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i = icmp eq i32 %151, 0, !dbg !52
  br i1 %.not.i, label %157, label %152, !dbg !52

152:                                              ; preds = %10
  br i1 %.not1.i, label %155, label %153, !dbg !52

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

157:                                              ; preds = %10
  br i1 %.not1.i, label %160, label %158, !dbg !52

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !52
  br label %__nv_sqrtf.exit, !dbg !52

__nv_sqrtf.exit:                                  ; preds = %153, %155, %158, %160
  %.0.i = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !52
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %162, 0, !dbg !52
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %163, 0, !dbg !52
  br i1 %.not.i11, label %169, label %164, !dbg !52

164:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %167, label %165, !dbg !52

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

169:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %172, label %170, !dbg !52

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %165, %167, %170, %172
  %.0.i13 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !52
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i16 = icmp eq i32 %174, 0, !dbg !52
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i19 = icmp eq i32 %175, 0, !dbg !52
  br i1 %.not.i16, label %181, label %176, !dbg !52

176:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %179, label %177, !dbg !52

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

181:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %184, label %182, !dbg !52

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !52
  br label %__nv_sqrtf.exit20, !dbg !52

__nv_sqrtf.exit20:                                ; preds = %177, %179, %182, %184
  %.0.i18 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !52
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i21 = icmp eq i32 %186, 0, !dbg !52
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i24 = icmp eq i32 %187, 0, !dbg !52
  br i1 %.not.i21, label %193, label %188, !dbg !52

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !52

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

193:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %196, label %194, !dbg !52

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !52
  br label %__nv_sqrtf.exit25, !dbg !52

__nv_sqrtf.exit25:                                ; preds = %189, %191, %194, %196
  %.0.i23 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !52
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i26 = icmp eq i32 %198, 0, !dbg !52
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i29 = icmp eq i32 %199, 0, !dbg !52
  br i1 %.not.i26, label %205, label %200, !dbg !52

200:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %203, label %201, !dbg !52

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !52
  br label %__nv_sqrtf.exit30, !dbg !52

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !52
  br label %__nv_sqrtf.exit30, !dbg !52

205:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %208, label %206, !dbg !52

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !52
  br label %__nv_sqrtf.exit30, !dbg !52

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !52
  br label %__nv_sqrtf.exit30, !dbg !52

__nv_sqrtf.exit30:                                ; preds = %201, %203, %206, %208
  %.0.i28 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !52
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i31 = icmp eq i32 %210, 0, !dbg !52
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i34 = icmp eq i32 %211, 0, !dbg !52
  br i1 %.not.i31, label %217, label %212, !dbg !52

212:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %215, label %213, !dbg !52

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

217:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %220, label %218, !dbg !52

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !52
  br label %__nv_sqrtf.exit35, !dbg !52

__nv_sqrtf.exit35:                                ; preds = %213, %215, %218, %220
  %.0.i33 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !52
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i36 = icmp eq i32 %222, 0, !dbg !52
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i39 = icmp eq i32 %223, 0, !dbg !52
  br i1 %.not.i36, label %229, label %224, !dbg !52

224:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %227, label %225, !dbg !52

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

229:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %232, label %230, !dbg !52

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %148) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

__nv_sqrtf.exit40:                                ; preds = %225, %227, %230, %232
  %.0.i38 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !52
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i41 = icmp eq i32 %234, 0, !dbg !52
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i44 = icmp eq i32 %235, 0, !dbg !52
  br i1 %.not.i41, label %241, label %236, !dbg !52

236:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %239, label %237, !dbg !52

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

241:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %244, label %242, !dbg !52

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

__nv_sqrtf.exit45:                                ; preds = %237, %239, %242, %244
  %.0.i43 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !52
  %246 = shufflevector <2 x i1> %78, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %247 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %248 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %249 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %250 = icmp slt <2 x i32> %21, splat (i32 304), !dbg !53
  %251 = shufflevector <2 x i1> %250, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !53
  %252 = add nsw <2 x i32> %21, splat (i32 -256), !dbg !54
  %253 = icmp slt <2 x i32> %21, splat (i32 288), !dbg !55
  %254 = shufflevector <2 x i1> %253, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !55
  %255 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !41
  %256 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !46
  %257 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !50
  %258 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !20
  %259 = insertelement <8 x i32> %258, i32 %38, i64 1, !dbg !20
  %260 = insertelement <8 x i32> %259, i32 %37, i64 2, !dbg !20
  %261 = insertelement <8 x i32> %260, i32 %36, i64 3, !dbg !20
  %262 = insertelement <8 x i32> %261, i32 %35, i64 4, !dbg !20
  %263 = insertelement <8 x i32> %262, i32 %34, i64 5, !dbg !20
  %264 = insertelement <8 x i32> %263, i32 %33, i64 6, !dbg !20
  %265 = insertelement <8 x i32> %264, i32 %32, i64 7, !dbg !20
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !20
  %267 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !41
  %271 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !46
  %272 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !50
  %273 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %274 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %276 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !41
  %277 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !46
  %278 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !50
  %279 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %280 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %281 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %282 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !41
  %283 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !46
  %284 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !50
  %285 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !36
  %287 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !38
  %288 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !41
  %289 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !46
  %290 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !50
  %291 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %292 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !36
  %293 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !38
  %294 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !41
  %295 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !46
  %296 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %298 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !36
  %299 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !41
  %301 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !46
  %302 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !50
  %303 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %304 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !36
  %305 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !38
  %306 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !41
  %307 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !46
  %308 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !50
  %309 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !26
  %310 = insertelement <8 x i32> %309, i32 %76, i64 1, !dbg !26
  %311 = insertelement <8 x i32> %310, i32 %75, i64 2, !dbg !26
  %312 = insertelement <8 x i32> %311, i32 %74, i64 3, !dbg !26
  %313 = insertelement <8 x i32> %312, i32 %73, i64 4, !dbg !26
  %314 = insertelement <8 x i32> %313, i32 %72, i64 5, !dbg !26
  %315 = insertelement <8 x i32> %314, i32 %71, i64 6, !dbg !26
  %316 = insertelement <8 x i32> %315, i32 %70, i64 7, !dbg !26
  %317 = bitcast <8 x i32> %316 to <8 x float>, !dbg !26
  %318 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !24
  %319 = insertelement <8 x i32> %318, i32 %66, i64 1, !dbg !24
  %320 = insertelement <8 x i32> %319, i32 %65, i64 2, !dbg !24
  %321 = insertelement <8 x i32> %320, i32 %64, i64 3, !dbg !24
  %322 = insertelement <8 x i32> %321, i32 %63, i64 4, !dbg !24
  %323 = insertelement <8 x i32> %322, i32 %62, i64 5, !dbg !24
  %324 = insertelement <8 x i32> %323, i32 %61, i64 6, !dbg !24
  %325 = insertelement <8 x i32> %324, i32 %60, i64 7, !dbg !24
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !24
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !56
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !56
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !56
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !56
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !56
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !56
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !56
  %335 = icmp ult <2 x i32> %252, splat (i32 48), !dbg !54
  %336 = shufflevector <2 x i1> %335, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !54
  %337 = insertelement <8 x i32> poison, i32 %247, i64 0, !dbg !32
  %338 = insertelement <8 x i32> %337, i32 %267, i64 1, !dbg !32
  %339 = insertelement <8 x i32> %338, i32 %273, i64 2, !dbg !32
  %340 = insertelement <8 x i32> %339, i32 %279, i64 3, !dbg !32
  %341 = insertelement <8 x i32> %340, i32 %285, i64 4, !dbg !32
  %342 = insertelement <8 x i32> %341, i32 %291, i64 5, !dbg !32
  %343 = insertelement <8 x i32> %342, i32 %297, i64 6, !dbg !32
  %344 = insertelement <8 x i32> %343, i32 %303, i64 7, !dbg !32
  %345 = bitcast <8 x i32> %344 to <8 x float>, !dbg !32
  %346 = insertelement <8 x i32> poison, i32 %248, i64 0, !dbg !36
  %347 = insertelement <8 x i32> %346, i32 %268, i64 1, !dbg !36
  %348 = insertelement <8 x i32> %347, i32 %274, i64 2, !dbg !36
  %349 = insertelement <8 x i32> %348, i32 %280, i64 3, !dbg !36
  %350 = insertelement <8 x i32> %349, i32 %286, i64 4, !dbg !36
  %351 = insertelement <8 x i32> %350, i32 %292, i64 5, !dbg !36
  %352 = insertelement <8 x i32> %351, i32 %298, i64 6, !dbg !36
  %353 = insertelement <8 x i32> %352, i32 %304, i64 7, !dbg !36
  %354 = bitcast <8 x i32> %353 to <8 x float>, !dbg !36
  %355 = fadd <8 x float> %345, %354, !dbg !57
  %356 = insertelement <8 x i32> poison, i32 %249, i64 0, !dbg !38
  %357 = insertelement <8 x i32> %356, i32 %269, i64 1, !dbg !38
  %358 = insertelement <8 x i32> %357, i32 %275, i64 2, !dbg !38
  %359 = insertelement <8 x i32> %358, i32 %281, i64 3, !dbg !38
  %360 = insertelement <8 x i32> %359, i32 %287, i64 4, !dbg !38
  %361 = insertelement <8 x i32> %360, i32 %293, i64 5, !dbg !38
  %362 = insertelement <8 x i32> %361, i32 %299, i64 6, !dbg !38
  %363 = insertelement <8 x i32> %362, i32 %305, i64 7, !dbg !38
  %364 = bitcast <8 x i32> %363 to <8 x float>, !dbg !38
  %365 = fadd <8 x float> %355, %364, !dbg !58
  %366 = insertelement <8 x i32> poison, i32 %255, i64 0, !dbg !59
  %367 = insertelement <8 x i32> %366, i32 %270, i64 1, !dbg !59
  %368 = insertelement <8 x i32> %367, i32 %276, i64 2, !dbg !59
  %369 = insertelement <8 x i32> %368, i32 %282, i64 3, !dbg !59
  %370 = insertelement <8 x i32> %369, i32 %288, i64 4, !dbg !59
  %371 = insertelement <8 x i32> %370, i32 %294, i64 5, !dbg !59
  %372 = insertelement <8 x i32> %371, i32 %300, i64 6, !dbg !59
  %373 = insertelement <8 x i32> %372, i32 %306, i64 7, !dbg !59
  %374 = insertelement <8 x i32> poison, i32 %256, i64 0, !dbg !59
  %375 = insertelement <8 x i32> %374, i32 %271, i64 1, !dbg !59
  %376 = insertelement <8 x i32> %375, i32 %277, i64 2, !dbg !59
  %377 = insertelement <8 x i32> %376, i32 %283, i64 3, !dbg !59
  %378 = insertelement <8 x i32> %377, i32 %289, i64 4, !dbg !59
  %379 = insertelement <8 x i32> %378, i32 %295, i64 5, !dbg !59
  %380 = insertelement <8 x i32> %379, i32 %301, i64 6, !dbg !59
  %381 = insertelement <8 x i32> %380, i32 %307, i64 7, !dbg !59
  %382 = select <8 x i1> %254, <8 x i32> %373, <8 x i32> %381, !dbg !59
  %383 = bitcast <8 x i32> %382 to <8 x float>, !dbg !59
  %384 = select <8 x i1> %336, <8 x float> %383, <8 x float> zeroinitializer, !dbg !60
  %385 = insertelement <8 x i32> poison, i32 %257, i64 0, !dbg !50
  %386 = insertelement <8 x i32> %385, i32 %272, i64 1, !dbg !50
  %387 = insertelement <8 x i32> %386, i32 %278, i64 2, !dbg !50
  %388 = insertelement <8 x i32> %387, i32 %284, i64 3, !dbg !50
  %389 = insertelement <8 x i32> %388, i32 %290, i64 4, !dbg !50
  %390 = insertelement <8 x i32> %389, i32 %296, i64 5, !dbg !50
  %391 = insertelement <8 x i32> %390, i32 %302, i64 6, !dbg !50
  %392 = insertelement <8 x i32> %391, i32 %308, i64 7, !dbg !50
  %393 = bitcast <8 x i32> %392 to <8 x float>, !dbg !50
  %394 = select <8 x i1> %251, <8 x float> %384, <8 x float> %393, !dbg !61
  %395 = select <8 x i1> %246, <8 x float> %365, <8 x float> %394, !dbg !62
  %396 = fsub <8 x float> %395, %266, !dbg !63
  %397 = insertelement <8 x float> poison, float %334, i64 0, !dbg !64
  %398 = insertelement <8 x float> %397, float %333, i64 1, !dbg !64
  %399 = insertelement <8 x float> %398, float %332, i64 2, !dbg !64
  %400 = insertelement <8 x float> %399, float %331, i64 3, !dbg !64
  %401 = insertelement <8 x float> %400, float %330, i64 4, !dbg !64
  %402 = insertelement <8 x float> %401, float %329, i64 5, !dbg !64
  %403 = insertelement <8 x float> %402, float %328, i64 6, !dbg !64
  %404 = insertelement <8 x float> %403, float %327, i64 7, !dbg !64
  %405 = fmul <8 x float> %396, %404, !dbg !64
  %406 = fmul <8 x float> %405, %326, !dbg !65
  %407 = fadd <8 x float> %406, %317, !dbg !66
  %408 = fcmp olt <8 x float> %407, zeroinitializer, !dbg !67
  %409 = extractelement <8 x i1> %408, i64 7, !dbg !71
  %410 = extractelement <8 x i1> %408, i64 6, !dbg !71
  %411 = extractelement <8 x i1> %408, i64 5, !dbg !71
  %412 = extractelement <8 x i1> %408, i64 4, !dbg !71
  %413 = extractelement <8 x i1> %408, i64 3, !dbg !71
  %414 = extractelement <8 x i1> %408, i64 2, !dbg !71
  %415 = extractelement <8 x i1> %408, i64 1, !dbg !71
  %416 = extractelement <8 x i1> %408, i64 0, !dbg !71
  %417 = sext i32 %16 to i64, !dbg !72
  %418 = getelementptr float, ptr addrspace(1) %7, i64 %417, !dbg !72
  %419 = sext i32 %17 to i64, !dbg !72
  %420 = getelementptr float, ptr addrspace(1) %7, i64 %419, !dbg !72
  %bc = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %421 = extractelement <8 x i32> %bc, i64 7, !dbg !73
  %bc46 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %422 = extractelement <8 x i32> %bc46, i64 6, !dbg !73
  %bc47 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %423 = extractelement <8 x i32> %bc47, i64 5, !dbg !73
  %bc48 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %424 = extractelement <8 x i32> %bc48, i64 4, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %421, i32 %422, i32 %423, i32 %424, ptr addrspace(1) %418, i1 true) #3, !dbg !73
  %bc49 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %425 = extractelement <8 x i32> %bc49, i64 3, !dbg !73
  %bc50 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %426 = extractelement <8 x i32> %bc50, i64 2, !dbg !73
  %bc51 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %427 = extractelement <8 x i32> %bc51, i64 1, !dbg !73
  %bc52 = bitcast <8 x float> %395 to <8 x i32>, !dbg !73
  %428 = extractelement <8 x i32> %bc52, i64 0, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %425, i32 %426, i32 %427, i32 %428, ptr addrspace(1) %420, i1 true) #3, !dbg !73
  %429 = getelementptr float, ptr addrspace(1) %8, i64 %417, !dbg !74
  %430 = getelementptr float, ptr addrspace(1) %8, i64 %419, !dbg !74
  %bc53 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %431 = extractelement <8 x i32> %bc53, i64 7, !dbg !75
  %432 = select i1 %409, i32 0, i32 %431, !dbg !71
  %bc54 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %433 = extractelement <8 x i32> %bc54, i64 6, !dbg !75
  %434 = select i1 %410, i32 0, i32 %433, !dbg !71
  %bc55 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %435 = extractelement <8 x i32> %bc55, i64 5, !dbg !75
  %436 = select i1 %411, i32 0, i32 %435, !dbg !71
  %bc56 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %437 = extractelement <8 x i32> %bc56, i64 4, !dbg !75
  %438 = select i1 %412, i32 0, i32 %437, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %432, i32 %434, i32 %436, i32 %438, ptr addrspace(1) %429, i1 true) #3, !dbg !75
  %bc57 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %439 = extractelement <8 x i32> %bc57, i64 3, !dbg !75
  %440 = select i1 %413, i32 0, i32 %439, !dbg !71
  %bc58 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %441 = extractelement <8 x i32> %bc58, i64 2, !dbg !75
  %442 = select i1 %414, i32 0, i32 %441, !dbg !71
  %bc59 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %443 = extractelement <8 x i32> %bc59, i64 1, !dbg !75
  %444 = select i1 %415, i32 0, i32 %443, !dbg !71
  %bc60 = bitcast <8 x float> %407 to <8 x i32>, !dbg !75
  %445 = extractelement <8 x i32> %bc60, i64 0, !dbg !75
  %446 = select i1 %416, i32 0, i32 %445, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %442, i32 %444, i32 %446, ptr addrspace(1) %430, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjiug5swwll4xxmkn4p357n4r2ol7f3qy6xvyyw4k62bwgwjzwpb.py", directory: "inductor_cache/ji")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 68, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 52, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 57, scope: !7)
!33 = !DILocation(line: 38, column: 52, scope: !7)
!34 = !DILocation(line: 38, column: 46, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 57, scope: !7)
!37 = !DILocation(line: 40, column: 30, scope: !7)
!38 = !DILocation(line: 40, column: 57, scope: !7)
!39 = !DILocation(line: 59, column: 39, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 59, column: 75, scope: !7)
!42 = !DILocation(line: 64, column: 49, scope: !7)
!43 = !DILocation(line: 64, column: 44, scope: !7)
!44 = !DILocation(line: 64, column: 74, scope: !7)
!45 = !DILocation(line: 64, column: 31, scope: !7)
!46 = !DILocation(line: 64, column: 85, scope: !7)
!47 = !DILocation(line: 72, column: 44, scope: !7)
!48 = !DILocation(line: 72, column: 74, scope: !7)
!49 = !DILocation(line: 72, column: 31, scope: !7)
!50 = !DILocation(line: 72, column: 85, scope: !7)
!51 = !DILocation(line: 79, column: 20, scope: !7)
!52 = !DILocation(line: 80, column: 27, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 82, column: 20, scope: !7)
!57 = !DILocation(line: 39, column: 18, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 65, column: 35, scope: !7)
!60 = !DILocation(line: 67, column: 35, scope: !7)
!61 = !DILocation(line: 73, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 77, column: 20, scope: !7)
!64 = !DILocation(line: 85, column: 20, scope: !7)
!65 = !DILocation(line: 86, column: 20, scope: !7)
!66 = !DILocation(line: 87, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 89, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 90, column: 25, scope: !7)
!73 = !DILocation(line: 90, column: 37, scope: !7)
!74 = !DILocation(line: 91, column: 25, scope: !7)
!75 = !DILocation(line: 91, column: 37, scope: !7)
!76 = !DILocation(line: 91, column: 4, scope: !7)
