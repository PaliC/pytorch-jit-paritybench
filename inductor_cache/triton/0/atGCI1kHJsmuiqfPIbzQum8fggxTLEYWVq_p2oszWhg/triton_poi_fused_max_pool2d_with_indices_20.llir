; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %10, 8, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = shl i32 %8, 3, !dbg !12
  %15 = and i32 %14, 56, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %15, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = and i32 %8, 15, !dbg !16
  %23 = lshr i32 %8, 3, !dbg !16
  %24 = and i32 %23, 15, !dbg !16
  %25 = or disjoint i32 %21, %22, !dbg !17
  %26 = or disjoint i32 %21, %10, !dbg !17
  %27 = or disjoint i32 %21, %11, !dbg !17
  %28 = or disjoint i32 %21, %24, !dbg !17
  %29 = icmp slt i32 %25, 16, !dbg !18
  %30 = icmp slt i32 %26, 16, !dbg !18
  %31 = icmp slt i32 %27, 16, !dbg !18
  %32 = icmp slt i32 %28, 16, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %33 = sdiv i32 %.frozen, 4, !dbg !19
  %34 = mul i32 %33, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %.frozen19 = freeze i32 %18, !dbg !21
  %35 = sdiv i32 %.frozen19, 512, !dbg !21
  %36 = mul i32 %35, 512, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %36, !dbg !22
  %.frozen21 = freeze i32 %19, !dbg !21
  %37 = sdiv i32 %.frozen21, 512, !dbg !21
  %38 = mul i32 %37, 512, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %38, !dbg !22
  %39 = shl nsw i32 %.decomposed, 1, !dbg !23
  %40 = shl i32 %33, 4, !dbg !24
  %41 = add i32 %39, %40, !dbg !25
  %42 = shl i32 %16, 6, !dbg !26
  %43 = shl i32 %17, 6, !dbg !26
  %44 = or disjoint i32 %42, 1024, !dbg !26
  %45 = or disjoint i32 %42, 1536, !dbg !26
  %46 = or disjoint i32 %42, 2048, !dbg !26
  %47 = or disjoint i32 %42, 2560, !dbg !26
  %48 = or disjoint i32 %42, 3072, !dbg !26
  %49 = or disjoint i32 %42, 3584, !dbg !26
  %50 = add i32 %41, %42, !dbg !27
  %51 = add i32 %41, %43, !dbg !27
  %52 = add i32 %41, %44, !dbg !27
  %53 = add i32 %41, %45, !dbg !27
  %54 = add i32 %41, %46, !dbg !27
  %55 = add i32 %41, %47, !dbg !27
  %56 = add i32 %41, %48, !dbg !27
  %57 = add i32 %41, %49, !dbg !27
  %58 = sext i32 %50 to i64, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !28
  %60 = sext i32 %51 to i64, !dbg !28
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !28
  %62 = sext i32 %52 to i64, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !28
  %64 = sext i32 %53 to i64, !dbg !28
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !28
  %66 = sext i32 %54 to i64, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !28
  %68 = sext i32 %55 to i64, !dbg !28
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !28
  %70 = sext i32 %56 to i64, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !28
  %72 = sext i32 %57 to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %29) #2, !dbg !29
  %75 = bitcast i32 %74 to float, !dbg !29
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %29) #2, !dbg !29
  %77 = bitcast i32 %76 to float, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %29) #2, !dbg !29
  %79 = bitcast i32 %78 to float, !dbg !29
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %29) #2, !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %29) #2, !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %29) #2, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %29) #2, !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = or disjoint i32 %39, 1, !dbg !30
  %91 = add i32 %90, %40, !dbg !31
  %92 = add i32 %91, %42, !dbg !32
  %93 = add i32 %91, %43, !dbg !32
  %94 = add i32 %91, %44, !dbg !32
  %95 = add i32 %91, %45, !dbg !32
  %96 = add i32 %91, %46, !dbg !32
  %97 = add i32 %91, %47, !dbg !32
  %98 = add i32 %91, %48, !dbg !32
  %99 = add i32 %91, %49, !dbg !32
  %100 = sext i32 %92 to i64, !dbg !33
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !33
  %102 = sext i32 %93 to i64, !dbg !33
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !33
  %104 = sext i32 %94 to i64, !dbg !33
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !33
  %106 = sext i32 %95 to i64, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !33
  %108 = sext i32 %96 to i64, !dbg !33
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !33
  %110 = sext i32 %97 to i64, !dbg !33
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !33
  %112 = sext i32 %98 to i64, !dbg !33
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !33
  %114 = sext i32 %99 to i64, !dbg !33
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !33
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %29) #2, !dbg !34
  %117 = bitcast i32 %116 to float, !dbg !34
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %29) #2, !dbg !34
  %119 = bitcast i32 %118 to float, !dbg !34
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %29) #2, !dbg !34
  %121 = bitcast i32 %120 to float, !dbg !34
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %29) #2, !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %29) #2, !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %29) #2, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %29) #2, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %29) #2, !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = add i32 %41, 8, !dbg !35
  %133 = add i32 %132, %42, !dbg !36
  %134 = add i32 %132, %43, !dbg !36
  %135 = add i32 %132, %44, !dbg !36
  %136 = add i32 %132, %45, !dbg !36
  %137 = add i32 %132, %46, !dbg !36
  %138 = add i32 %132, %47, !dbg !36
  %139 = add i32 %132, %48, !dbg !36
  %140 = add i32 %132, %49, !dbg !36
  %141 = sext i32 %133 to i64, !dbg !37
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !37
  %143 = sext i32 %134 to i64, !dbg !37
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !37
  %145 = sext i32 %135 to i64, !dbg !37
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !37
  %147 = sext i32 %136 to i64, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !37
  %149 = sext i32 %137 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !37
  %151 = sext i32 %138 to i64, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !37
  %153 = sext i32 %139 to i64, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !37
  %155 = sext i32 %140 to i64, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !37
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 %29) #2, !dbg !38
  %158 = bitcast i32 %157 to float, !dbg !38
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %29) #2, !dbg !38
  %160 = bitcast i32 %159 to float, !dbg !38
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %29) #2, !dbg !38
  %162 = bitcast i32 %161 to float, !dbg !38
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %29) #2, !dbg !38
  %164 = bitcast i32 %163 to float, !dbg !38
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %29) #2, !dbg !38
  %166 = bitcast i32 %165 to float, !dbg !38
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %29) #2, !dbg !38
  %168 = bitcast i32 %167 to float, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %29) #2, !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %29) #2, !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = add i32 %41, 9, !dbg !39
  %174 = add i32 %173, %42, !dbg !40
  %175 = add i32 %173, %43, !dbg !40
  %176 = add i32 %173, %44, !dbg !40
  %177 = add i32 %173, %45, !dbg !40
  %178 = add i32 %173, %46, !dbg !40
  %179 = add i32 %173, %47, !dbg !40
  %180 = add i32 %173, %48, !dbg !40
  %181 = add i32 %173, %49, !dbg !40
  %182 = sext i32 %174 to i64, !dbg !41
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !41
  %184 = sext i32 %175 to i64, !dbg !41
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !41
  %186 = sext i32 %176 to i64, !dbg !41
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !41
  %188 = sext i32 %177 to i64, !dbg !41
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !41
  %190 = sext i32 %178 to i64, !dbg !41
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !41
  %192 = sext i32 %179 to i64, !dbg !41
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !41
  %194 = sext i32 %180 to i64, !dbg !41
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !41
  %196 = sext i32 %181 to i64, !dbg !41
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !41
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %183, i1 %29) #2, !dbg !42
  %199 = bitcast i32 %198 to float, !dbg !42
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %29) #2, !dbg !42
  %201 = bitcast i32 %200 to float, !dbg !42
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %29) #2, !dbg !42
  %203 = bitcast i32 %202 to float, !dbg !42
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 %29) #2, !dbg !42
  %205 = bitcast i32 %204 to float, !dbg !42
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %29) #2, !dbg !42
  %207 = bitcast i32 %206 to float, !dbg !42
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %29) #2, !dbg !42
  %209 = bitcast i32 %208 to float, !dbg !42
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %29) #2, !dbg !42
  %211 = bitcast i32 %210 to float, !dbg !42
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %29) #2, !dbg !42
  %213 = bitcast i32 %212 to float, !dbg !42
  %214 = fcmp ogt float %117, %75, !dbg !43
  %215 = fcmp ogt float %119, %77, !dbg !43
  %216 = fcmp ogt float %121, %79, !dbg !43
  %217 = fcmp ogt float %123, %81, !dbg !43
  %218 = fcmp ogt float %125, %83, !dbg !43
  %219 = fcmp ogt float %127, %85, !dbg !43
  %220 = fcmp ogt float %129, %87, !dbg !43
  %221 = fcmp ogt float %131, %89, !dbg !43
  %222 = fcmp uno float %117, 0.000000e+00, !dbg !47
  %223 = fcmp uno float %119, 0.000000e+00, !dbg !47
  %224 = fcmp uno float %121, 0.000000e+00, !dbg !47
  %225 = fcmp uno float %123, 0.000000e+00, !dbg !47
  %226 = fcmp uno float %125, 0.000000e+00, !dbg !47
  %227 = fcmp uno float %127, 0.000000e+00, !dbg !47
  %228 = fcmp uno float %129, 0.000000e+00, !dbg !47
  %229 = fcmp uno float %131, 0.000000e+00, !dbg !47
  %230 = or i1 %214, %222, !dbg !48
  %231 = or i1 %215, %223, !dbg !48
  %232 = or i1 %216, %224, !dbg !48
  %233 = or i1 %217, %225, !dbg !48
  %234 = or i1 %218, %226, !dbg !48
  %235 = or i1 %219, %227, !dbg !48
  %236 = or i1 %220, %228, !dbg !48
  %237 = or i1 %221, %229, !dbg !48
  %238 = select i1 %230, float %117, float %75, !dbg !49
  %239 = select i1 %231, float %119, float %77, !dbg !49
  %240 = select i1 %232, float %121, float %79, !dbg !49
  %241 = select i1 %233, float %123, float %81, !dbg !49
  %242 = select i1 %234, float %125, float %83, !dbg !49
  %243 = select i1 %235, float %127, float %85, !dbg !49
  %244 = select i1 %236, float %129, float %87, !dbg !49
  %245 = select i1 %237, float %131, float %89, !dbg !49
  %246 = fcmp olt float %238, %158, !dbg !50
  %247 = fcmp olt float %239, %160, !dbg !50
  %248 = fcmp olt float %240, %162, !dbg !50
  %249 = fcmp olt float %241, %164, !dbg !50
  %250 = fcmp olt float %242, %166, !dbg !50
  %251 = fcmp olt float %243, %168, !dbg !50
  %252 = fcmp olt float %244, %170, !dbg !50
  %253 = fcmp olt float %245, %172, !dbg !50
  %254 = fcmp uno float %158, 0.000000e+00, !dbg !52
  %255 = fcmp uno float %160, 0.000000e+00, !dbg !52
  %256 = fcmp uno float %162, 0.000000e+00, !dbg !52
  %257 = fcmp uno float %164, 0.000000e+00, !dbg !52
  %258 = fcmp uno float %166, 0.000000e+00, !dbg !52
  %259 = fcmp uno float %168, 0.000000e+00, !dbg !52
  %260 = fcmp uno float %170, 0.000000e+00, !dbg !52
  %261 = fcmp uno float %172, 0.000000e+00, !dbg !52
  %262 = or i1 %246, %254, !dbg !53
  %263 = or i1 %247, %255, !dbg !53
  %264 = or i1 %248, %256, !dbg !53
  %265 = or i1 %249, %257, !dbg !53
  %266 = or i1 %250, %258, !dbg !53
  %267 = or i1 %251, %259, !dbg !53
  %268 = or i1 %252, %260, !dbg !53
  %269 = or i1 %253, %261, !dbg !53
  %270 = select i1 %262, float %158, float %238, !dbg !54
  %271 = select i1 %263, float %160, float %239, !dbg !54
  %272 = select i1 %264, float %162, float %240, !dbg !54
  %273 = select i1 %265, float %164, float %241, !dbg !54
  %274 = select i1 %266, float %166, float %242, !dbg !54
  %275 = select i1 %267, float %168, float %243, !dbg !54
  %276 = select i1 %268, float %170, float %244, !dbg !54
  %277 = select i1 %269, float %172, float %245, !dbg !54
  %278 = fcmp olt float %270, %199, !dbg !55
  %279 = fcmp olt float %271, %201, !dbg !55
  %280 = fcmp olt float %272, %203, !dbg !55
  %281 = fcmp olt float %273, %205, !dbg !55
  %282 = fcmp olt float %274, %207, !dbg !55
  %283 = fcmp olt float %275, %209, !dbg !55
  %284 = fcmp olt float %276, %211, !dbg !55
  %285 = fcmp olt float %277, %213, !dbg !55
  %286 = fcmp uno float %199, 0.000000e+00, !dbg !57
  %287 = fcmp uno float %201, 0.000000e+00, !dbg !57
  %288 = fcmp uno float %203, 0.000000e+00, !dbg !57
  %289 = fcmp uno float %205, 0.000000e+00, !dbg !57
  %290 = fcmp uno float %207, 0.000000e+00, !dbg !57
  %291 = fcmp uno float %209, 0.000000e+00, !dbg !57
  %292 = fcmp uno float %211, 0.000000e+00, !dbg !57
  %293 = fcmp uno float %213, 0.000000e+00, !dbg !57
  %294 = or i1 %278, %286, !dbg !58
  %295 = or i1 %279, %287, !dbg !58
  %296 = or i1 %280, %288, !dbg !58
  %297 = or i1 %281, %289, !dbg !58
  %298 = or i1 %282, %290, !dbg !58
  %299 = or i1 %283, %291, !dbg !58
  %300 = or i1 %284, %292, !dbg !58
  %301 = or i1 %285, %293, !dbg !58
  %302 = zext i1 %214 to i8, !dbg !59
  %303 = zext i1 %215 to i8, !dbg !59
  %304 = zext i1 %216 to i8, !dbg !59
  %305 = zext i1 %217 to i8, !dbg !59
  %306 = zext i1 %218 to i8, !dbg !59
  %307 = zext i1 %219 to i8, !dbg !59
  %308 = zext i1 %220 to i8, !dbg !59
  %309 = zext i1 %221 to i8, !dbg !59
  %310 = select i1 %246, i8 2, i8 %302, !dbg !60
  %311 = select i1 %247, i8 2, i8 %303, !dbg !60
  %312 = select i1 %248, i8 2, i8 %304, !dbg !60
  %313 = select i1 %249, i8 2, i8 %305, !dbg !60
  %314 = select i1 %250, i8 2, i8 %306, !dbg !60
  %315 = select i1 %251, i8 2, i8 %307, !dbg !60
  %316 = select i1 %252, i8 2, i8 %308, !dbg !60
  %317 = select i1 %253, i8 2, i8 %309, !dbg !60
  %318 = select i1 %278, i8 3, i8 %310, !dbg !61
  %319 = select i1 %279, i8 3, i8 %311, !dbg !61
  %320 = select i1 %280, i8 3, i8 %312, !dbg !61
  %321 = select i1 %281, i8 3, i8 %313, !dbg !61
  %322 = select i1 %282, i8 3, i8 %314, !dbg !61
  %323 = select i1 %283, i8 3, i8 %315, !dbg !61
  %324 = select i1 %284, i8 3, i8 %316, !dbg !61
  %325 = select i1 %285, i8 3, i8 %317, !dbg !61
  %326 = shl i32 %26, 9, !dbg !62
  %327 = shl i32 %27, 9, !dbg !62
  %328 = shl i32 %28, 9, !dbg !62
  %329 = add i32 %328, %.decomposed22, !dbg !63
  %330 = shl i32 %35, 13, !dbg !64
  %331 = shl i32 %37, 13, !dbg !64
  %332 = add i32 %330, %.decomposed20, !dbg !63
  %333 = add i32 %332, %326, !dbg !65
  %334 = add i32 %332, %327, !dbg !65
  %335 = add i32 %329, %331, !dbg !65
  %336 = sext i32 %333 to i64, !dbg !66
  %337 = getelementptr float, ptr addrspace(1) %1, i64 %336, !dbg !66
  %338 = sext i32 %334 to i64, !dbg !66
  %339 = getelementptr float, ptr addrspace(1) %1, i64 %338, !dbg !66
  %340 = shl i32 %8, 6, !dbg !67
  %341 = and i32 %340, 960, !dbg !67
  %342 = or disjoint i32 %341, %10, !dbg !67
  %343 = and i32 %12, 508, !dbg !67
  %344 = lshr exact i32 %341, 3, !dbg !67
  %345 = lshr exact i32 %341, 2, !dbg !67
  %346 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %345, !dbg !67
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %342, !dbg !67
  %348 = bitcast float %270 to i32, !dbg !67
  %349 = select i1 %294, i32 %198, i32 %348, !dbg !68
  %350 = insertelement <1 x i32> poison, i32 %349, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %350, i1 true) #2, !dbg !67
  %351 = or disjoint i32 %342, 8, !dbg !67
  %352 = getelementptr float, ptr addrspace(3) %346, i32 %351, !dbg !67
  %353 = bitcast float %271 to i32, !dbg !67
  %354 = select i1 %295, i32 %200, i32 %353, !dbg !68
  %355 = insertelement <1 x i32> poison, i32 %354, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %355, i1 true) #2, !dbg !67
  %356 = or disjoint i32 %342, 16, !dbg !67
  %357 = getelementptr float, ptr addrspace(3) %346, i32 %356, !dbg !67
  %358 = bitcast float %272 to i32, !dbg !67
  %359 = select i1 %296, i32 %202, i32 %358, !dbg !68
  %360 = insertelement <1 x i32> poison, i32 %359, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %360, i1 true) #2, !dbg !67
  %361 = or disjoint i32 %342, 24, !dbg !67
  %362 = getelementptr float, ptr addrspace(3) %346, i32 %361, !dbg !67
  %363 = bitcast float %273 to i32, !dbg !67
  %364 = select i1 %297, i32 %204, i32 %363, !dbg !68
  %365 = insertelement <1 x i32> poison, i32 %364, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %365, i1 true) #2, !dbg !67
  %366 = or disjoint i32 %342, 32, !dbg !67
  %367 = getelementptr float, ptr addrspace(3) %346, i32 %366, !dbg !67
  %368 = bitcast float %274 to i32, !dbg !67
  %369 = select i1 %298, i32 %206, i32 %368, !dbg !68
  %370 = insertelement <1 x i32> poison, i32 %369, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %370, i1 true) #2, !dbg !67
  %371 = or disjoint i32 %342, 40, !dbg !67
  %372 = getelementptr float, ptr addrspace(3) %346, i32 %371, !dbg !67
  %373 = bitcast float %275 to i32, !dbg !67
  %374 = select i1 %299, i32 %208, i32 %373, !dbg !68
  %375 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %375, i1 true) #2, !dbg !67
  %376 = or disjoint i32 %342, 48, !dbg !67
  %377 = getelementptr float, ptr addrspace(3) %346, i32 %376, !dbg !67
  %378 = bitcast float %276 to i32, !dbg !67
  %379 = select i1 %300, i32 %210, i32 %378, !dbg !68
  %380 = insertelement <1 x i32> poison, i32 %379, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %380, i1 true) #2, !dbg !67
  %381 = or disjoint i32 %342, 56, !dbg !67
  %382 = getelementptr float, ptr addrspace(3) %346, i32 %381, !dbg !67
  %383 = bitcast float %277 to i32, !dbg !67
  %384 = select i1 %301, i32 %212, i32 %383, !dbg !68
  %385 = insertelement <1 x i32> poison, i32 %384, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %382, <1 x i32> %385, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %386 = lshr i32 %12, 4, !dbg !67
  %387 = and i32 %386, 28, !dbg !67
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !67
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %343, !dbg !67
  %390 = or disjoint i32 %343, 512, !dbg !67
  %391 = lshr i32 %390, 4, !dbg !67
  %392 = and i32 %391, 60, !dbg !67
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %392, !dbg !67
  %394 = getelementptr inbounds float, ptr addrspace(3) %393, i32 %390, !dbg !67
  %395 = load <4 x i32>, ptr addrspace(3) %394, align 16, !dbg !67
  %.extract = load i32, ptr addrspace(3) %389, align 16, !dbg !67
  %396 = getelementptr inbounds i8, ptr addrspace(3) %389, i32 4, !dbg !67
  %.extract12 = load i32, ptr addrspace(3) %396, align 4, !dbg !67
  %397 = getelementptr inbounds i8, ptr addrspace(3) %389, i32 8, !dbg !67
  %.extract13 = load i32, ptr addrspace(3) %397, align 8, !dbg !67
  %398 = getelementptr inbounds i8, ptr addrspace(3) %389, i32 12, !dbg !67
  %.extract14 = load i32, ptr addrspace(3) %398, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %337, i1 %30) #2, !dbg !67
  %.extract15 = extractelement <4 x i32> %395, i64 0, !dbg !67
  %.extract16 = extractelement <4 x i32> %395, i64 1, !dbg !67
  %.extract17 = extractelement <4 x i32> %395, i64 2, !dbg !67
  %.extract18 = extractelement <4 x i32> %395, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %339, i1 %31) #2, !dbg !67
  %399 = sext i32 %335 to i64, !dbg !69
  %400 = getelementptr i8, ptr addrspace(1) %2, i64 %399, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %401 = and i32 %14, 1016, !dbg !70
  %402 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %344, !dbg !70
  %403 = getelementptr i8, ptr addrspace(3) %402, i32 %342, !dbg !70
  %404 = insertelement <1 x i8> poison, i8 %318, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %403, <1 x i8> %404, i1 true) #2, !dbg !70
  %405 = getelementptr i8, ptr addrspace(3) %402, i32 %351, !dbg !70
  %406 = insertelement <1 x i8> poison, i8 %319, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %405, <1 x i8> %406, i1 true) #2, !dbg !70
  %407 = getelementptr i8, ptr addrspace(3) %402, i32 %356, !dbg !70
  %408 = insertelement <1 x i8> poison, i8 %320, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %407, <1 x i8> %408, i1 true) #2, !dbg !70
  %409 = getelementptr i8, ptr addrspace(3) %402, i32 %361, !dbg !70
  %410 = insertelement <1 x i8> poison, i8 %321, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %409, <1 x i8> %410, i1 true) #2, !dbg !70
  %411 = getelementptr i8, ptr addrspace(3) %402, i32 %366, !dbg !70
  %412 = insertelement <1 x i8> poison, i8 %322, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %411, <1 x i8> %412, i1 true) #2, !dbg !70
  %413 = getelementptr i8, ptr addrspace(3) %402, i32 %371, !dbg !70
  %414 = insertelement <1 x i8> poison, i8 %323, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %413, <1 x i8> %414, i1 true) #2, !dbg !70
  %415 = getelementptr i8, ptr addrspace(3) %402, i32 %376, !dbg !70
  %416 = insertelement <1 x i8> poison, i8 %324, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %415, <1 x i8> %416, i1 true) #2, !dbg !70
  %417 = getelementptr i8, ptr addrspace(3) %402, i32 %381, !dbg !70
  %418 = insertelement <1 x i8> poison, i8 %325, i64 0, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %417, <1 x i8> %418, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %419 = and i32 %8, 120, !dbg !70
  %420 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %419, !dbg !70
  %421 = getelementptr inbounds i8, ptr addrspace(3) %420, i32 %401, !dbg !70
  %422 = load i32, ptr addrspace(3) %421, align 8, !dbg !70
  %423 = getelementptr inbounds i8, ptr addrspace(3) %421, i32 4, !dbg !70
  %424 = load i32, ptr addrspace(3) %423, align 4, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %422, i32 %424, ptr addrspace(1) %400, i1 %32) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2bakdvh2uq4ms7hcguhpgqn3tnxojrpx4g5mgcp5d7ellzbaila.py", directory: "inductor_cache/2b")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 48, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 53, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 49, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 57, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 49, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 57, scope: !7)
!39 = !DILocation(line: 37, column: 41, scope: !7)
!40 = !DILocation(line: 37, column: 49, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 57, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 44, scope: !7)
!65 = !DILocation(line: 51, column: 39, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 55, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 56, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
