; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %16, 384, !dbg !14
  %21 = icmp slt i32 %17, 384, !dbg !14
  %22 = icmp slt i32 %18, 384, !dbg !14
  %23 = icmp slt i32 %19, 384, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %15, 252, !dbg !17
  %27 = or disjoint i32 %25, %26, !dbg !18
  %28 = or disjoint i32 %27, 1, !dbg !18
  %29 = or disjoint i32 %27, 2, !dbg !18
  %30 = or disjoint i32 %27, 3, !dbg !18
  %31 = icmp slt i32 %27, 256, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %32 = sdiv i32 %.frozen, 96, !dbg !20
  %33 = mul i32 %32, 96, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %.frozen85 = freeze i32 %17, !dbg !20
  %34 = sdiv i32 %.frozen85, 96, !dbg !20
  %35 = mul i32 %34, 96, !dbg !21
  %.decomposed86 = sub i32 %.frozen85, %35, !dbg !21
  %.frozen87 = freeze i32 %18, !dbg !20
  %36 = sdiv i32 %.frozen87, 96, !dbg !20
  %37 = mul i32 %36, 96, !dbg !21
  %.decomposed88 = sub i32 %.frozen87, %37, !dbg !21
  %.frozen89 = freeze i32 %19, !dbg !20
  %38 = sdiv i32 %.frozen89, 96, !dbg !20
  %39 = mul i32 %38, 96, !dbg !21
  %.decomposed90 = sub i32 %.frozen89, %39, !dbg !21
  %.frozen91 = freeze i32 %27, !dbg !22
  %40 = sdiv i32 %.frozen91, 16, !dbg !22
  %41 = mul i32 %40, 16, !dbg !23
  %.decomposed92 = sub i32 %.frozen91, %41, !dbg !23
  %42 = srem i32 %28, 16, !dbg !23
  %43 = srem i32 %29, 16, !dbg !23
  %44 = srem i32 %30, 16, !dbg !23
  %45 = shl i32 %16, 8, !dbg !24
  %46 = shl i32 %17, 8, !dbg !24
  %47 = shl i32 %18, 8, !dbg !24
  %48 = shl i32 %19, 8, !dbg !24
  %49 = add i32 %27, %45, !dbg !25
  %50 = add i32 %27, %46, !dbg !25
  %51 = add i32 %27, %47, !dbg !25
  %52 = add i32 %27, %48, !dbg !25
  %53 = sext i32 %49 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %50 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = sext i32 %51 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !26
  %59 = sext i32 %52 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !26
  %61 = and i1 %20, %31, !dbg !27
  %62 = and i1 %21, %31, !dbg !27
  %63 = and i1 %22, %31, !dbg !27
  %64 = and i1 %23, %31, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #4, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %62) #4, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %63) #4, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %64) #4, !dbg !28
  %69 = sext i32 %.decomposed to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = sext i32 %.decomposed86 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = sext i32 %.decomposed88 to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !29
  %75 = sext i32 %.decomposed90 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %20) #4, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #4, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #4, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #4, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %21) #4, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %22) #4, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %22) #4, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %22) #4, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %22) #4, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %23) #4, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %23) #4, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %23) #4, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %23) #4, !dbg !30
  %93 = shl nsw i32 %.decomposed, 8, !dbg !31
  %94 = shl nsw i32 %.decomposed86, 8, !dbg !31
  %95 = shl nsw i32 %.decomposed88, 8, !dbg !31
  %96 = shl nsw i32 %.decomposed90, 8, !dbg !31
  %97 = add i32 %93, %27, !dbg !32
  %98 = add i32 %27, %94, !dbg !32
  %99 = add i32 %27, %95, !dbg !32
  %100 = add i32 %27, %96, !dbg !32
  %101 = sext i32 %97 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !33
  %103 = sext i32 %98 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !33
  %105 = sext i32 %99 to i64, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !33
  %107 = sext i32 %100 to i64, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !33
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %61) #4, !dbg !34
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 %62) #4, !dbg !34
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %63) #4, !dbg !34
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %64) #4, !dbg !34
  %113 = srem i32 %40, 8, !dbg !35
  %114 = shl nsw i32 %113, 3, !dbg !36
  %115 = shl nsw i32 %.decomposed, 6, !dbg !37
  %116 = shl nsw i32 %.decomposed86, 6, !dbg !37
  %117 = shl nsw i32 %.decomposed88, 6, !dbg !37
  %118 = shl nsw i32 %.decomposed90, 6, !dbg !37
  %119 = add nsw i32 %114, %115, !dbg !38
  %120 = add nsw i32 %114, %116, !dbg !38
  %121 = add nsw i32 %114, %117, !dbg !38
  %122 = add nsw i32 %114, %118, !dbg !38
  %.lhs.trunc = trunc nsw i32 %.decomposed92 to i8, !dbg !39
  %123 = srem i8 %.lhs.trunc, 8, !dbg !39
  %.sext = sext i8 %123 to i32, !dbg !39
  %.lhs.trunc79 = trunc nsw i32 %42 to i8, !dbg !39
  %124 = srem i8 %.lhs.trunc79, 8, !dbg !39
  %.sext80 = sext i8 %124 to i32, !dbg !39
  %.lhs.trunc81 = trunc nsw i32 %43 to i8, !dbg !39
  %125 = srem i8 %.lhs.trunc81, 8, !dbg !39
  %.sext82 = sext i8 %125 to i32, !dbg !39
  %.lhs.trunc83 = trunc nsw i32 %44 to i8, !dbg !39
  %126 = srem i8 %.lhs.trunc83, 8, !dbg !39
  %.sext84 = sext i8 %126 to i32, !dbg !39
  %127 = add nsw i32 %119, %.sext, !dbg !40
  %128 = add nsw i32 %119, %.sext80, !dbg !40
  %129 = add nsw i32 %119, %.sext82, !dbg !40
  %130 = add nsw i32 %119, %.sext84, !dbg !40
  %131 = add nsw i32 %120, %.sext, !dbg !40
  %132 = add nsw i32 %120, %.sext80, !dbg !40
  %133 = add nsw i32 %120, %.sext82, !dbg !40
  %134 = add nsw i32 %120, %.sext84, !dbg !40
  %135 = add nsw i32 %121, %.sext, !dbg !40
  %136 = add nsw i32 %121, %.sext80, !dbg !40
  %137 = add nsw i32 %121, %.sext82, !dbg !40
  %138 = add nsw i32 %121, %.sext84, !dbg !40
  %139 = add nsw i32 %122, %.sext, !dbg !40
  %140 = add nsw i32 %122, %.sext80, !dbg !40
  %141 = add nsw i32 %122, %.sext82, !dbg !40
  %142 = add nsw i32 %122, %.sext84, !dbg !40
  %143 = sext i32 %127 to i64, !dbg !41
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !41
  %145 = sext i32 %128 to i64, !dbg !41
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !41
  %147 = sext i32 %129 to i64, !dbg !41
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !41
  %149 = sext i32 %130 to i64, !dbg !41
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !41
  %151 = sext i32 %131 to i64, !dbg !41
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !41
  %153 = sext i32 %132 to i64, !dbg !41
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !41
  %155 = sext i32 %133 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !41
  %157 = sext i32 %134 to i64, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !41
  %159 = sext i32 %135 to i64, !dbg !41
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %159, !dbg !41
  %161 = sext i32 %136 to i64, !dbg !41
  %162 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !41
  %163 = sext i32 %137 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %163, !dbg !41
  %165 = sext i32 %138 to i64, !dbg !41
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %165, !dbg !41
  %167 = sext i32 %139 to i64, !dbg !41
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %167, !dbg !41
  %169 = sext i32 %140 to i64, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !41
  %171 = sext i32 %141 to i64, !dbg !41
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !41
  %173 = sext i32 %142 to i64, !dbg !41
  %174 = getelementptr float, ptr addrspace(1) %3, i64 %173, !dbg !41
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %61) #4, !dbg !42
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %61) #4, !dbg !42
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %61) #4, !dbg !42
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %61) #4, !dbg !42
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %62) #4, !dbg !42
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %62) #4, !dbg !42
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %62) #4, !dbg !42
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %62) #4, !dbg !42
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %63) #4, !dbg !42
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %63) #4, !dbg !42
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %63) #4, !dbg !42
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %63) #4, !dbg !42
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %64) #4, !dbg !42
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %64) #4, !dbg !42
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %64) #4, !dbg !42
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %64) #4, !dbg !42
  %191 = shl i32 %32, 8, !dbg !43
  %192 = shl i32 %34, 8, !dbg !43
  %193 = shl i32 %36, 8, !dbg !43
  %194 = shl i32 %38, 8, !dbg !43
  %195 = add i32 %191, %27, !dbg !44
  %196 = add i32 %27, %192, !dbg !44
  %197 = add i32 %27, %193, !dbg !44
  %198 = add i32 %27, %194, !dbg !44
  %199 = sext i32 %195 to i64, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !45
  %201 = sext i32 %196 to i64, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %4, i64 %201, !dbg !45
  %203 = sext i32 %197 to i64, !dbg !45
  %204 = getelementptr float, ptr addrspace(1) %4, i64 %203, !dbg !45
  %205 = sext i32 %198 to i64, !dbg !45
  %206 = getelementptr float, ptr addrspace(1) %4, i64 %205, !dbg !45
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %61) #4, !dbg !46
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %202, i1 %62) #4, !dbg !46
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %204, i1 %63) #4, !dbg !46
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %64) #4, !dbg !46
  %211 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !47
  %212 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !47
  %213 = getelementptr float, ptr addrspace(1) %5, i64 %203, !dbg !47
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %205, !dbg !47
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %211, i1 %61) #4, !dbg !48
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !48
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !48
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !48
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !48
  %220 = bitcast i32 %216 to float, !dbg !48
  %221 = bitcast i32 %217 to float, !dbg !48
  %222 = bitcast i32 %218 to float, !dbg !48
  %223 = bitcast i32 %219 to float, !dbg !48
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %212, i1 %62) #4, !dbg !48
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !48
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !48
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !48
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !48
  %229 = bitcast i32 %225 to float, !dbg !48
  %230 = bitcast i32 %226 to float, !dbg !48
  %231 = bitcast i32 %227 to float, !dbg !48
  %232 = bitcast i32 %228 to float, !dbg !48
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %213, i1 %63) #4, !dbg !48
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !48
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !48
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !48
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !48
  %238 = bitcast i32 %234 to float, !dbg !48
  %239 = bitcast i32 %235 to float, !dbg !48
  %240 = bitcast i32 %236 to float, !dbg !48
  %241 = bitcast i32 %237 to float, !dbg !48
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %64) #4, !dbg !48
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !48
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !48
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !48
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !48
  %247 = bitcast i32 %243 to float, !dbg !48
  %248 = bitcast i32 %244 to float, !dbg !48
  %249 = bitcast i32 %245 to float, !dbg !48
  %250 = bitcast i32 %246 to float, !dbg !48
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float 9.600000e+01) #4, !dbg !49
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float 9.600000e+01) #4, !dbg !49
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float 9.600000e+01) #4, !dbg !49
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 9.600000e+01) #4, !dbg !49
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 9.600000e+01) #4, !dbg !49
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float 9.600000e+01) #4, !dbg !49
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float 9.600000e+01) #4, !dbg !49
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float 9.600000e+01) #4, !dbg !49
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 9.600000e+01) #4, !dbg !49
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %239, float 9.600000e+01) #4, !dbg !49
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float 9.600000e+01) #4, !dbg !49
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float 9.600000e+01) #4, !dbg !49
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float 9.600000e+01) #4, !dbg !49
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float 9.600000e+01) #4, !dbg !49
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 9.600000e+01) #4, !dbg !49
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float 9.600000e+01) #4, !dbg !49
  %267 = fadd float %251, 0x3EB0C6F7A0000000, !dbg !50
  %268 = fadd float %252, 0x3EB0C6F7A0000000, !dbg !50
  %269 = fadd float %253, 0x3EB0C6F7A0000000, !dbg !50
  %270 = fadd float %254, 0x3EB0C6F7A0000000, !dbg !50
  %271 = fadd float %255, 0x3EB0C6F7A0000000, !dbg !50
  %272 = fadd float %256, 0x3EB0C6F7A0000000, !dbg !50
  %273 = fadd float %257, 0x3EB0C6F7A0000000, !dbg !50
  %274 = fadd float %258, 0x3EB0C6F7A0000000, !dbg !50
  %275 = fadd float %259, 0x3EB0C6F7A0000000, !dbg !50
  %276 = fadd float %260, 0x3EB0C6F7A0000000, !dbg !50
  %277 = fadd float %261, 0x3EB0C6F7A0000000, !dbg !50
  %278 = fadd float %262, 0x3EB0C6F7A0000000, !dbg !50
  %279 = fadd float %263, 0x3EB0C6F7A0000000, !dbg !50
  %280 = fadd float %264, 0x3EB0C6F7A0000000, !dbg !50
  %281 = fadd float %265, 0x3EB0C6F7A0000000, !dbg !50
  %282 = fadd float %266, 0x3EB0C6F7A0000000, !dbg !50
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i = icmp eq i32 %283, 0, !dbg !51
  br i1 %.not.i, label %286, label %284, !dbg !51

284:                                              ; preds = %9
  %285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %267), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

286:                                              ; preds = %9
  %287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %267), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %284, %286
  %.0.i = phi float [ %285, %284 ], [ %287, %286 ], !dbg !51
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i34 = icmp eq i32 %288, 0, !dbg !51
  br i1 %.not.i34, label %291, label %289, !dbg !51

289:                                              ; preds = %__nv_rsqrtf.exit
  %290 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %268), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

291:                                              ; preds = %__nv_rsqrtf.exit
  %292 = tail call float @llvm.nvvm.rsqrt.approx.f(float %268), !dbg !51
  br label %__nv_rsqrtf.exit36, !dbg !51

__nv_rsqrtf.exit36:                               ; preds = %289, %291
  %.0.i35 = phi float [ %290, %289 ], [ %292, %291 ], !dbg !51
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i37 = icmp eq i32 %293, 0, !dbg !51
  br i1 %.not.i37, label %296, label %294, !dbg !51

294:                                              ; preds = %__nv_rsqrtf.exit36
  %295 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %269), !dbg !51
  br label %__nv_rsqrtf.exit39, !dbg !51

296:                                              ; preds = %__nv_rsqrtf.exit36
  %297 = tail call float @llvm.nvvm.rsqrt.approx.f(float %269), !dbg !51
  br label %__nv_rsqrtf.exit39, !dbg !51

__nv_rsqrtf.exit39:                               ; preds = %294, %296
  %.0.i38 = phi float [ %295, %294 ], [ %297, %296 ], !dbg !51
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i40 = icmp eq i32 %298, 0, !dbg !51
  br i1 %.not.i40, label %301, label %299, !dbg !51

299:                                              ; preds = %__nv_rsqrtf.exit39
  %300 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !51
  br label %__nv_rsqrtf.exit42, !dbg !51

301:                                              ; preds = %__nv_rsqrtf.exit39
  %302 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !51
  br label %__nv_rsqrtf.exit42, !dbg !51

__nv_rsqrtf.exit42:                               ; preds = %299, %301
  %.0.i41 = phi float [ %300, %299 ], [ %302, %301 ], !dbg !51
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i43 = icmp eq i32 %303, 0, !dbg !51
  br i1 %.not.i43, label %306, label %304, !dbg !51

304:                                              ; preds = %__nv_rsqrtf.exit42
  %305 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %271), !dbg !51
  br label %__nv_rsqrtf.exit45, !dbg !51

306:                                              ; preds = %__nv_rsqrtf.exit42
  %307 = tail call float @llvm.nvvm.rsqrt.approx.f(float %271), !dbg !51
  br label %__nv_rsqrtf.exit45, !dbg !51

__nv_rsqrtf.exit45:                               ; preds = %304, %306
  %.0.i44 = phi float [ %305, %304 ], [ %307, %306 ], !dbg !51
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i46 = icmp eq i32 %308, 0, !dbg !51
  br i1 %.not.i46, label %311, label %309, !dbg !51

309:                                              ; preds = %__nv_rsqrtf.exit45
  %310 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %272), !dbg !51
  br label %__nv_rsqrtf.exit48, !dbg !51

311:                                              ; preds = %__nv_rsqrtf.exit45
  %312 = tail call float @llvm.nvvm.rsqrt.approx.f(float %272), !dbg !51
  br label %__nv_rsqrtf.exit48, !dbg !51

__nv_rsqrtf.exit48:                               ; preds = %309, %311
  %.0.i47 = phi float [ %310, %309 ], [ %312, %311 ], !dbg !51
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i49 = icmp eq i32 %313, 0, !dbg !51
  br i1 %.not.i49, label %316, label %314, !dbg !51

314:                                              ; preds = %__nv_rsqrtf.exit48
  %315 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %273), !dbg !51
  br label %__nv_rsqrtf.exit51, !dbg !51

316:                                              ; preds = %__nv_rsqrtf.exit48
  %317 = tail call float @llvm.nvvm.rsqrt.approx.f(float %273), !dbg !51
  br label %__nv_rsqrtf.exit51, !dbg !51

__nv_rsqrtf.exit51:                               ; preds = %314, %316
  %.0.i50 = phi float [ %315, %314 ], [ %317, %316 ], !dbg !51
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i52 = icmp eq i32 %318, 0, !dbg !51
  br i1 %.not.i52, label %321, label %319, !dbg !51

319:                                              ; preds = %__nv_rsqrtf.exit51
  %320 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %274), !dbg !51
  br label %__nv_rsqrtf.exit54, !dbg !51

321:                                              ; preds = %__nv_rsqrtf.exit51
  %322 = tail call float @llvm.nvvm.rsqrt.approx.f(float %274), !dbg !51
  br label %__nv_rsqrtf.exit54, !dbg !51

__nv_rsqrtf.exit54:                               ; preds = %319, %321
  %.0.i53 = phi float [ %320, %319 ], [ %322, %321 ], !dbg !51
  %323 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i55 = icmp eq i32 %323, 0, !dbg !51
  br i1 %.not.i55, label %326, label %324, !dbg !51

324:                                              ; preds = %__nv_rsqrtf.exit54
  %325 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !51
  br label %__nv_rsqrtf.exit57, !dbg !51

326:                                              ; preds = %__nv_rsqrtf.exit54
  %327 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !51
  br label %__nv_rsqrtf.exit57, !dbg !51

__nv_rsqrtf.exit57:                               ; preds = %324, %326
  %.0.i56 = phi float [ %325, %324 ], [ %327, %326 ], !dbg !51
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i58 = icmp eq i32 %328, 0, !dbg !51
  br i1 %.not.i58, label %331, label %329, !dbg !51

329:                                              ; preds = %__nv_rsqrtf.exit57
  %330 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !51
  br label %__nv_rsqrtf.exit60, !dbg !51

331:                                              ; preds = %__nv_rsqrtf.exit57
  %332 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !51
  br label %__nv_rsqrtf.exit60, !dbg !51

__nv_rsqrtf.exit60:                               ; preds = %329, %331
  %.0.i59 = phi float [ %330, %329 ], [ %332, %331 ], !dbg !51
  %333 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i61 = icmp eq i32 %333, 0, !dbg !51
  br i1 %.not.i61, label %336, label %334, !dbg !51

334:                                              ; preds = %__nv_rsqrtf.exit60
  %335 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %277), !dbg !51
  br label %__nv_rsqrtf.exit63, !dbg !51

336:                                              ; preds = %__nv_rsqrtf.exit60
  %337 = tail call float @llvm.nvvm.rsqrt.approx.f(float %277), !dbg !51
  br label %__nv_rsqrtf.exit63, !dbg !51

__nv_rsqrtf.exit63:                               ; preds = %334, %336
  %.0.i62 = phi float [ %335, %334 ], [ %337, %336 ], !dbg !51
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i64 = icmp eq i32 %338, 0, !dbg !51
  br i1 %.not.i64, label %341, label %339, !dbg !51

339:                                              ; preds = %__nv_rsqrtf.exit63
  %340 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %278), !dbg !51
  br label %__nv_rsqrtf.exit66, !dbg !51

341:                                              ; preds = %__nv_rsqrtf.exit63
  %342 = tail call float @llvm.nvvm.rsqrt.approx.f(float %278), !dbg !51
  br label %__nv_rsqrtf.exit66, !dbg !51

__nv_rsqrtf.exit66:                               ; preds = %339, %341
  %.0.i65 = phi float [ %340, %339 ], [ %342, %341 ], !dbg !51
  %343 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i67 = icmp eq i32 %343, 0, !dbg !51
  br i1 %.not.i67, label %346, label %344, !dbg !51

344:                                              ; preds = %__nv_rsqrtf.exit66
  %345 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %279), !dbg !51
  br label %__nv_rsqrtf.exit69, !dbg !51

346:                                              ; preds = %__nv_rsqrtf.exit66
  %347 = tail call float @llvm.nvvm.rsqrt.approx.f(float %279), !dbg !51
  br label %__nv_rsqrtf.exit69, !dbg !51

__nv_rsqrtf.exit69:                               ; preds = %344, %346
  %.0.i68 = phi float [ %345, %344 ], [ %347, %346 ], !dbg !51
  %348 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i70 = icmp eq i32 %348, 0, !dbg !51
  br i1 %.not.i70, label %351, label %349, !dbg !51

349:                                              ; preds = %__nv_rsqrtf.exit69
  %350 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %280), !dbg !51
  br label %__nv_rsqrtf.exit72, !dbg !51

351:                                              ; preds = %__nv_rsqrtf.exit69
  %352 = tail call float @llvm.nvvm.rsqrt.approx.f(float %280), !dbg !51
  br label %__nv_rsqrtf.exit72, !dbg !51

__nv_rsqrtf.exit72:                               ; preds = %349, %351
  %.0.i71 = phi float [ %350, %349 ], [ %352, %351 ], !dbg !51
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i73 = icmp eq i32 %353, 0, !dbg !51
  br i1 %.not.i73, label %356, label %354, !dbg !51

354:                                              ; preds = %__nv_rsqrtf.exit72
  %355 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %281), !dbg !51
  br label %__nv_rsqrtf.exit75, !dbg !51

356:                                              ; preds = %__nv_rsqrtf.exit72
  %357 = tail call float @llvm.nvvm.rsqrt.approx.f(float %281), !dbg !51
  br label %__nv_rsqrtf.exit75, !dbg !51

__nv_rsqrtf.exit75:                               ; preds = %354, %356
  %.0.i74 = phi float [ %355, %354 ], [ %357, %356 ], !dbg !51
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !51
  %.not.i76 = icmp eq i32 %358, 0, !dbg !51
  br i1 %.not.i76, label %361, label %359, !dbg !51

359:                                              ; preds = %__nv_rsqrtf.exit75
  %360 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %282), !dbg !51
  br label %__nv_rsqrtf.exit78, !dbg !51

361:                                              ; preds = %__nv_rsqrtf.exit75
  %362 = tail call float @llvm.nvvm.rsqrt.approx.f(float %282), !dbg !51
  br label %__nv_rsqrtf.exit78, !dbg !51

__nv_rsqrtf.exit78:                               ; preds = %359, %361
  %.0.i77 = phi float [ %360, %359 ], [ %362, %361 ], !dbg !51
  %363 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %364 = bitcast i32 %363 to float, !dbg !28
  %365 = bitcast i32 %92 to float, !dbg !30
  %366 = fadd float %364, %365, !dbg !52
  %367 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !34
  %368 = bitcast i32 %367 to float, !dbg !34
  %369 = bitcast i32 %190 to float, !dbg !42
  %370 = fadd float %368, %369, !dbg !53
  %371 = fadd float %366, %370, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !46
  %373 = bitcast i32 %372 to float, !dbg !46
  %374 = fsub float %371, %373, !dbg !55
  %375 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %376 = bitcast i32 %375 to float, !dbg !28
  %377 = fadd float %376, %365, !dbg !52
  %378 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !34
  %379 = bitcast i32 %378 to float, !dbg !34
  %380 = bitcast i32 %189 to float, !dbg !42
  %381 = fadd float %379, %380, !dbg !53
  %382 = fadd float %377, %381, !dbg !54
  %383 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !46
  %384 = bitcast i32 %383 to float, !dbg !46
  %385 = fsub float %382, %384, !dbg !55
  %386 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %387 = bitcast i32 %386 to float, !dbg !28
  %388 = fadd float %387, %365, !dbg !52
  %389 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !34
  %390 = bitcast i32 %389 to float, !dbg !34
  %391 = bitcast i32 %188 to float, !dbg !42
  %392 = fadd float %390, %391, !dbg !53
  %393 = fadd float %388, %392, !dbg !54
  %394 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !46
  %395 = bitcast i32 %394 to float, !dbg !46
  %396 = fsub float %393, %395, !dbg !55
  %397 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %398 = bitcast i32 %397 to float, !dbg !28
  %399 = fadd float %398, %365, !dbg !52
  %400 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !34
  %401 = bitcast i32 %400 to float, !dbg !34
  %402 = bitcast i32 %187 to float, !dbg !42
  %403 = fadd float %401, %402, !dbg !53
  %404 = fadd float %399, %403, !dbg !54
  %405 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !46
  %406 = bitcast i32 %405 to float, !dbg !46
  %407 = fsub float %404, %406, !dbg !55
  %408 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %409 = bitcast i32 %408 to float, !dbg !28
  %410 = bitcast i32 %88 to float, !dbg !30
  %411 = fadd float %409, %410, !dbg !52
  %412 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !34
  %413 = bitcast i32 %412 to float, !dbg !34
  %414 = bitcast i32 %186 to float, !dbg !42
  %415 = fadd float %413, %414, !dbg !53
  %416 = fadd float %411, %415, !dbg !54
  %417 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !46
  %418 = bitcast i32 %417 to float, !dbg !46
  %419 = fsub float %416, %418, !dbg !55
  %420 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %421 = bitcast i32 %420 to float, !dbg !28
  %422 = fadd float %421, %410, !dbg !52
  %423 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !34
  %424 = bitcast i32 %423 to float, !dbg !34
  %425 = bitcast i32 %185 to float, !dbg !42
  %426 = fadd float %424, %425, !dbg !53
  %427 = fadd float %422, %426, !dbg !54
  %428 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !46
  %429 = bitcast i32 %428 to float, !dbg !46
  %430 = fsub float %427, %429, !dbg !55
  %431 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %432 = bitcast i32 %431 to float, !dbg !28
  %433 = fadd float %432, %410, !dbg !52
  %434 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !34
  %435 = bitcast i32 %434 to float, !dbg !34
  %436 = bitcast i32 %184 to float, !dbg !42
  %437 = fadd float %435, %436, !dbg !53
  %438 = fadd float %433, %437, !dbg !54
  %439 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !46
  %440 = bitcast i32 %439 to float, !dbg !46
  %441 = fsub float %438, %440, !dbg !55
  %442 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %443 = bitcast i32 %442 to float, !dbg !28
  %444 = fadd float %443, %410, !dbg !52
  %445 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !34
  %446 = bitcast i32 %445 to float, !dbg !34
  %447 = bitcast i32 %183 to float, !dbg !42
  %448 = fadd float %446, %447, !dbg !53
  %449 = fadd float %444, %448, !dbg !54
  %450 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !46
  %451 = bitcast i32 %450 to float, !dbg !46
  %452 = fsub float %449, %451, !dbg !55
  %453 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %454 = bitcast i32 %453 to float, !dbg !28
  %455 = bitcast i32 %84 to float, !dbg !30
  %456 = fadd float %454, %455, !dbg !52
  %457 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !34
  %458 = bitcast i32 %457 to float, !dbg !34
  %459 = bitcast i32 %182 to float, !dbg !42
  %460 = fadd float %458, %459, !dbg !53
  %461 = fadd float %456, %460, !dbg !54
  %462 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !46
  %463 = bitcast i32 %462 to float, !dbg !46
  %464 = fsub float %461, %463, !dbg !55
  %465 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %466 = bitcast i32 %465 to float, !dbg !28
  %467 = fadd float %466, %455, !dbg !52
  %468 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !34
  %469 = bitcast i32 %468 to float, !dbg !34
  %470 = bitcast i32 %181 to float, !dbg !42
  %471 = fadd float %469, %470, !dbg !53
  %472 = fadd float %467, %471, !dbg !54
  %473 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !46
  %474 = bitcast i32 %473 to float, !dbg !46
  %475 = fsub float %472, %474, !dbg !55
  %476 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %477 = bitcast i32 %476 to float, !dbg !28
  %478 = fadd float %477, %455, !dbg !52
  %479 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !34
  %480 = bitcast i32 %479 to float, !dbg !34
  %481 = bitcast i32 %180 to float, !dbg !42
  %482 = fadd float %480, %481, !dbg !53
  %483 = fadd float %478, %482, !dbg !54
  %484 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !46
  %485 = bitcast i32 %484 to float, !dbg !46
  %486 = fsub float %483, %485, !dbg !55
  %487 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %488 = bitcast i32 %487 to float, !dbg !28
  %489 = fadd float %488, %455, !dbg !52
  %490 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !34
  %491 = bitcast i32 %490 to float, !dbg !34
  %492 = bitcast i32 %179 to float, !dbg !42
  %493 = fadd float %491, %492, !dbg !53
  %494 = fadd float %489, %493, !dbg !54
  %495 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !46
  %496 = bitcast i32 %495 to float, !dbg !46
  %497 = fsub float %494, %496, !dbg !55
  %498 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %499 = bitcast i32 %498 to float, !dbg !28
  %500 = bitcast i32 %80 to float, !dbg !30
  %501 = fadd float %499, %500, !dbg !52
  %502 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %503 = bitcast i32 %502 to float, !dbg !34
  %504 = bitcast i32 %178 to float, !dbg !42
  %505 = fadd float %503, %504, !dbg !53
  %506 = fadd float %501, %505, !dbg !54
  %507 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !46
  %508 = bitcast i32 %507 to float, !dbg !46
  %509 = fsub float %506, %508, !dbg !55
  %510 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %511 = bitcast i32 %510 to float, !dbg !28
  %512 = fadd float %511, %500, !dbg !52
  %513 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %514 = bitcast i32 %513 to float, !dbg !34
  %515 = bitcast i32 %177 to float, !dbg !42
  %516 = fadd float %514, %515, !dbg !53
  %517 = fadd float %512, %516, !dbg !54
  %518 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !46
  %519 = bitcast i32 %518 to float, !dbg !46
  %520 = fsub float %517, %519, !dbg !55
  %521 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %522 = bitcast i32 %521 to float, !dbg !28
  %523 = fadd float %522, %500, !dbg !52
  %524 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %525 = bitcast i32 %524 to float, !dbg !34
  %526 = bitcast i32 %176 to float, !dbg !42
  %527 = fadd float %525, %526, !dbg !53
  %528 = fadd float %523, %527, !dbg !54
  %529 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !46
  %530 = bitcast i32 %529 to float, !dbg !46
  %531 = fsub float %528, %530, !dbg !55
  %532 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %533 = bitcast i32 %532 to float, !dbg !28
  %534 = fadd float %533, %500, !dbg !52
  %535 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %536 = bitcast i32 %535 to float, !dbg !34
  %537 = bitcast i32 %175 to float, !dbg !42
  %538 = fadd float %536, %537, !dbg !53
  %539 = fadd float %534, %538, !dbg !54
  %540 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !46
  %541 = bitcast i32 %540 to float, !dbg !46
  %542 = fsub float %539, %541, !dbg !55
  %543 = lshr i32 %12, 2, !dbg !17
  %544 = and i32 %543, 63, !dbg !17
  %545 = or disjoint i32 %544, %25, !dbg !18
  %546 = or disjoint i32 %545, 192, !dbg !18
  %547 = icmp slt i32 %546, 256, !dbg !19
  %548 = and i32 %15, 12, !dbg !12
  %549 = or disjoint i32 %11, %548, !dbg !13
  %550 = icmp slt i32 %549, 384, !dbg !14
  %551 = and i1 %550, %547, !dbg !27
  %552 = or disjoint i32 %545, 128, !dbg !18
  %553 = icmp slt i32 %552, 256, !dbg !19
  %554 = and i1 %550, %553, !dbg !27
  %555 = or disjoint i32 %545, 64, !dbg !18
  %556 = icmp slt i32 %555, 256, !dbg !19
  %557 = and i1 %550, %556, !dbg !27
  %558 = icmp slt i32 %545, 256, !dbg !19
  %559 = and i1 %550, %558, !dbg !27
  %.frozen93 = freeze i32 %549, !dbg !20
  %560 = sdiv i32 %.frozen93, 96, !dbg !20
  %561 = mul i32 %560, 96, !dbg !21
  %.decomposed94 = sub i32 %.frozen93, %561, !dbg !21
  %562 = fmul float %542, %.0.i, !dbg !56
  %563 = fmul float %531, %.0.i35, !dbg !56
  %564 = fmul float %520, %.0.i38, !dbg !56
  %565 = fmul float %509, %.0.i41, !dbg !56
  %566 = fmul float %497, %.0.i44, !dbg !56
  %567 = fmul float %486, %.0.i47, !dbg !56
  %568 = fmul float %475, %.0.i50, !dbg !56
  %569 = fmul float %464, %.0.i53, !dbg !56
  %570 = fmul float %452, %.0.i56, !dbg !56
  %571 = fmul float %441, %.0.i59, !dbg !56
  %572 = fmul float %430, %.0.i62, !dbg !56
  %573 = fmul float %419, %.0.i65, !dbg !56
  %574 = fmul float %407, %.0.i68, !dbg !56
  %575 = fmul float %396, %.0.i71, !dbg !56
  %576 = fmul float %385, %.0.i74, !dbg !56
  %577 = fmul float %374, %.0.i77, !dbg !56
  %578 = mul i32 %545, 96, !dbg !57
  %579 = mul i32 %555, 96, !dbg !57
  %580 = mul i32 %552, 96, !dbg !57
  %581 = mul i32 %546, 96, !dbg !57
  %582 = mul i32 %560, 24576, !dbg !58
  %583 = add i32 %582, %.decomposed94, !dbg !59
  %584 = add i32 %583, %578, !dbg !60
  %585 = add i32 %583, %579, !dbg !60
  %586 = add i32 %583, %580, !dbg !60
  %587 = add i32 %583, %581, !dbg !60
  %588 = sext i32 %584 to i64, !dbg !61
  %589 = getelementptr float, ptr addrspace(1) %6, i64 %588, !dbg !61
  %590 = sext i32 %585 to i64, !dbg !61
  %591 = getelementptr float, ptr addrspace(1) %6, i64 %590, !dbg !61
  %592 = sext i32 %586 to i64, !dbg !61
  %593 = getelementptr float, ptr addrspace(1) %6, i64 %592, !dbg !61
  %594 = sext i32 %587 to i64, !dbg !61
  %595 = getelementptr float, ptr addrspace(1) %6, i64 %594, !dbg !61
  %596 = shl i32 %12, 6, !dbg !62
  %597 = and i32 %596, 4032, !dbg !62
  %598 = or disjoint i32 %597, %14, !dbg !62
  %599 = and i32 %15, 1020, !dbg !62
  %600 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %597, !dbg !62
  %601 = getelementptr float, ptr addrspace(3) %600, i32 %598, !dbg !62
  %602 = bitcast float %562 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %601, <1 x i32> %602, i1 true) #4, !dbg !62
  %603 = or disjoint i32 %598, 16, !dbg !62
  %604 = lshr i32 %603, 2, !dbg !62
  %605 = getelementptr float, ptr addrspace(3) @global_smem, i32 %604, !dbg !62
  %606 = getelementptr float, ptr addrspace(3) %605, i32 %603, !dbg !62
  %607 = bitcast float %563 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %606, <1 x i32> %607, i1 true) #4, !dbg !62
  %608 = or disjoint i32 %598, 32, !dbg !62
  %609 = lshr i32 %608, 2, !dbg !62
  %610 = getelementptr float, ptr addrspace(3) @global_smem, i32 %609, !dbg !62
  %611 = getelementptr float, ptr addrspace(3) %610, i32 %608, !dbg !62
  %612 = bitcast float %564 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %611, <1 x i32> %612, i1 true) #4, !dbg !62
  %613 = or disjoint i32 %598, 48, !dbg !62
  %614 = lshr i32 %613, 2, !dbg !62
  %615 = getelementptr float, ptr addrspace(3) @global_smem, i32 %614, !dbg !62
  %616 = getelementptr float, ptr addrspace(3) %615, i32 %613, !dbg !62
  %617 = bitcast float %565 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %616, <1 x i32> %617, i1 true) #4, !dbg !62
  %618 = or disjoint i32 %598, 4, !dbg !62
  %619 = getelementptr float, ptr addrspace(3) %600, i32 %618, !dbg !62
  %620 = bitcast float %566 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %619, <1 x i32> %620, i1 true) #4, !dbg !62
  %621 = or disjoint i32 %598, 20, !dbg !62
  %622 = lshr i32 %621, 2, !dbg !62
  %623 = and i32 %622, 1012, !dbg !62
  %624 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !62
  %625 = getelementptr float, ptr addrspace(3) %624, i32 %621, !dbg !62
  %626 = bitcast float %567 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %626, i1 true) #4, !dbg !62
  %627 = or disjoint i32 %598, 36, !dbg !62
  %628 = lshr i32 %627, 2, !dbg !62
  %629 = and i32 %628, 1016, !dbg !62
  %630 = getelementptr float, ptr addrspace(3) @global_smem, i32 %629, !dbg !62
  %631 = getelementptr float, ptr addrspace(3) %630, i32 %627, !dbg !62
  %632 = bitcast float %568 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %631, <1 x i32> %632, i1 true) #4, !dbg !62
  %633 = or disjoint i32 %598, 52, !dbg !62
  %634 = lshr i32 %633, 2, !dbg !62
  %635 = and i32 %634, 1020, !dbg !62
  %636 = getelementptr float, ptr addrspace(3) @global_smem, i32 %635, !dbg !62
  %637 = getelementptr float, ptr addrspace(3) %636, i32 %633, !dbg !62
  %638 = bitcast float %569 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %637, <1 x i32> %638, i1 true) #4, !dbg !62
  %639 = or disjoint i32 %598, 8, !dbg !62
  %640 = getelementptr float, ptr addrspace(3) %600, i32 %639, !dbg !62
  %641 = bitcast float %570 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 true) #4, !dbg !62
  %642 = or disjoint i32 %598, 24, !dbg !62
  %643 = lshr i32 %642, 2, !dbg !62
  %644 = and i32 %643, 1012, !dbg !62
  %645 = getelementptr float, ptr addrspace(3) @global_smem, i32 %644, !dbg !62
  %646 = getelementptr float, ptr addrspace(3) %645, i32 %642, !dbg !62
  %647 = bitcast float %571 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %647, i1 true) #4, !dbg !62
  %648 = or disjoint i32 %598, 40, !dbg !62
  %649 = lshr i32 %648, 2, !dbg !62
  %650 = and i32 %649, 1016, !dbg !62
  %651 = getelementptr float, ptr addrspace(3) @global_smem, i32 %650, !dbg !62
  %652 = getelementptr float, ptr addrspace(3) %651, i32 %648, !dbg !62
  %653 = bitcast float %572 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %652, <1 x i32> %653, i1 true) #4, !dbg !62
  %654 = or disjoint i32 %598, 56, !dbg !62
  %655 = lshr i32 %654, 2, !dbg !62
  %656 = and i32 %655, 1020, !dbg !62
  %657 = getelementptr float, ptr addrspace(3) @global_smem, i32 %656, !dbg !62
  %658 = getelementptr float, ptr addrspace(3) %657, i32 %654, !dbg !62
  %659 = bitcast float %573 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %658, <1 x i32> %659, i1 true) #4, !dbg !62
  %660 = or disjoint i32 %598, 12, !dbg !62
  %661 = getelementptr float, ptr addrspace(3) %600, i32 %660, !dbg !62
  %662 = bitcast float %574 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %661, <1 x i32> %662, i1 true) #4, !dbg !62
  %663 = or disjoint i32 %598, 28, !dbg !62
  %664 = lshr i32 %663, 2, !dbg !62
  %665 = and i32 %664, 1012, !dbg !62
  %666 = getelementptr float, ptr addrspace(3) @global_smem, i32 %665, !dbg !62
  %667 = getelementptr float, ptr addrspace(3) %666, i32 %663, !dbg !62
  %668 = bitcast float %575 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %667, <1 x i32> %668, i1 true) #4, !dbg !62
  %669 = or disjoint i32 %598, 44, !dbg !62
  %670 = lshr i32 %669, 2, !dbg !62
  %671 = and i32 %670, 1016, !dbg !62
  %672 = getelementptr float, ptr addrspace(3) @global_smem, i32 %671, !dbg !62
  %673 = getelementptr float, ptr addrspace(3) %672, i32 %669, !dbg !62
  %674 = bitcast float %576 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %673, <1 x i32> %674, i1 true) #4, !dbg !62
  %675 = or disjoint i32 %598, 60, !dbg !62
  %676 = lshr i32 %675, 2, !dbg !62
  %677 = and i32 %676, 1020, !dbg !62
  %678 = getelementptr float, ptr addrspace(3) @global_smem, i32 %677, !dbg !62
  %679 = getelementptr float, ptr addrspace(3) %678, i32 %675, !dbg !62
  %680 = bitcast float %577 to <1 x i32>, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %679, <1 x i32> %680, i1 true) #4, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %681 = and i32 %12, 252, !dbg !62
  %682 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %681, !dbg !62
  %683 = getelementptr inbounds float, ptr addrspace(3) %682, i32 %599, !dbg !62
  %684 = or disjoint i32 %599, 1024, !dbg !62
  %685 = lshr exact i32 %684, 2, !dbg !62
  %686 = and i32 %685, 508, !dbg !62
  %687 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %686, !dbg !62
  %688 = getelementptr inbounds float, ptr addrspace(3) %687, i32 %684, !dbg !62
  %689 = load <4 x i32>, ptr addrspace(3) %688, align 16, !dbg !62
  %690 = or disjoint i32 %599, 2048, !dbg !62
  %691 = lshr exact i32 %690, 2, !dbg !62
  %692 = and i32 %691, 764, !dbg !62
  %693 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %692, !dbg !62
  %694 = getelementptr inbounds float, ptr addrspace(3) %693, i32 %690, !dbg !62
  %695 = load <4 x i32>, ptr addrspace(3) %694, align 16, !dbg !62
  %696 = or disjoint i32 %599, 3072, !dbg !62
  %697 = lshr exact i32 %696, 2, !dbg !62
  %698 = and i32 %697, 1020, !dbg !62
  %699 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %698, !dbg !62
  %700 = getelementptr inbounds float, ptr addrspace(3) %699, i32 %696, !dbg !62
  %701 = load <4 x i32>, ptr addrspace(3) %700, align 16, !dbg !62
  %.extract = load i32, ptr addrspace(3) %683, align 16, !dbg !62
  %702 = getelementptr inbounds i8, ptr addrspace(3) %683, i32 4, !dbg !62
  %.extract19 = load i32, ptr addrspace(3) %702, align 4, !dbg !62
  %703 = getelementptr inbounds i8, ptr addrspace(3) %683, i32 8, !dbg !62
  %.extract20 = load i32, ptr addrspace(3) %703, align 8, !dbg !62
  %704 = getelementptr inbounds i8, ptr addrspace(3) %683, i32 12, !dbg !62
  %.extract21 = load i32, ptr addrspace(3) %704, align 4, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %589, i1 %559) #4, !dbg !62
  %.extract22 = extractelement <4 x i32> %689, i64 0, !dbg !62
  %.extract23 = extractelement <4 x i32> %689, i64 1, !dbg !62
  %.extract24 = extractelement <4 x i32> %689, i64 2, !dbg !62
  %.extract25 = extractelement <4 x i32> %689, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %591, i1 %557) #4, !dbg !62
  %.extract26 = extractelement <4 x i32> %695, i64 0, !dbg !62
  %.extract27 = extractelement <4 x i32> %695, i64 1, !dbg !62
  %.extract28 = extractelement <4 x i32> %695, i64 2, !dbg !62
  %.extract29 = extractelement <4 x i32> %695, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %593, i1 %554) #4, !dbg !62
  %.extract30 = extractelement <4 x i32> %701, i64 0, !dbg !62
  %.extract31 = extractelement <4 x i32> %701, i64 1, !dbg !62
  %.extract32 = extractelement <4 x i32> %701, i64 2, !dbg !62
  %.extract33 = extractelement <4 x i32> %701, i64 3, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %595, i1 %551) #4, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 52, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 39, scope: !7)
!32 = !DILocation(line: 36, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 39, scope: !7)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 48, scope: !7)
!38 = !DILocation(line: 37, column: 45, scope: !7)
!39 = !DILocation(line: 37, column: 60, scope: !7)
!40 = !DILocation(line: 37, column: 55, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 66, scope: !7)
!43 = !DILocation(line: 38, column: 39, scope: !7)
!44 = !DILocation(line: 38, column: 35, scope: !7)
!45 = !DILocation(line: 38, column: 30, scope: !7)
!46 = !DILocation(line: 38, column: 44, scope: !7)
!47 = !DILocation(line: 39, column: 30, scope: !7)
!48 = !DILocation(line: 39, column: 44, scope: !7)
!49 = !DILocation(line: 45, column: 19, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 28, scope: !7)
!52 = !DILocation(line: 40, column: 18, scope: !7)
!53 = !DILocation(line: 41, column: 18, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 49, column: 19, scope: !7)
!57 = !DILocation(line: 50, column: 33, scope: !7)
!58 = !DILocation(line: 50, column: 44, scope: !7)
!59 = !DILocation(line: 50, column: 30, scope: !7)
!60 = !DILocation(line: 50, column: 38, scope: !7)
!61 = !DILocation(line: 50, column: 25, scope: !7)
!62 = !DILocation(line: 50, column: 56, scope: !7)
!63 = !DILocation(line: 50, column: 4, scope: !7)
