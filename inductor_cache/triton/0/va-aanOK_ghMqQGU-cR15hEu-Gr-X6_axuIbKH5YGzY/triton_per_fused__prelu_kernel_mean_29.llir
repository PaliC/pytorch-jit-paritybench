; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__prelu_kernel_mean_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 512, !dbg !14
  %16 = icmp slt i32 %14, 512, !dbg !14
  %17 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %18 = sdiv i32 %.frozen, 128, !dbg !16
  %19 = mul i32 %18, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %8, 4, !dbg !18
  %21 = and i32 %20, 3968, !dbg !18
  %22 = shl i32 %18, 13, !dbg !19
  %23 = add i32 %22, %.decomposed, !dbg !20
  %24 = add i32 %23, %21, !dbg !21
  %25 = add i32 %23, 4096, !dbg !20
  %26 = add nuw i32 %25, %21, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = sext i32 %.decomposed to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #3, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = fcmp ogt float %36, 0.000000e+00, !dbg !26
  %61 = fcmp ogt float %37, 0.000000e+00, !dbg !26
  %62 = fcmp ogt float %38, 0.000000e+00, !dbg !26
  %63 = fcmp ogt float %39, 0.000000e+00, !dbg !26
  %64 = fcmp ogt float %45, 0.000000e+00, !dbg !26
  %65 = fcmp ogt float %46, 0.000000e+00, !dbg !26
  %66 = fcmp ogt float %47, 0.000000e+00, !dbg !26
  %67 = fcmp ogt float %48, 0.000000e+00, !dbg !26
  %68 = fmul float %36, %56, !dbg !27
  %69 = fmul float %37, %57, !dbg !27
  %70 = fmul float %38, %58, !dbg !27
  %71 = fmul float %39, %59, !dbg !27
  %72 = fmul float %45, %56, !dbg !27
  %73 = fmul float %46, %57, !dbg !27
  %74 = fmul float %47, %58, !dbg !27
  %75 = fmul float %48, %59, !dbg !27
  %76 = select i1 %60, float %36, float %68, !dbg !28
  %77 = select i1 %61, float %37, float %69, !dbg !28
  %78 = select i1 %62, float %38, float %70, !dbg !28
  %79 = select i1 %63, float %39, float %71, !dbg !28
  %80 = select i1 %64, float %45, float %72, !dbg !28
  %81 = select i1 %65, float %46, float %73, !dbg !28
  %82 = select i1 %66, float %47, float %74, !dbg !28
  %83 = select i1 %67, float %48, float %75, !dbg !28
  %84 = fadd float %76, %80, !dbg !29
  %85 = select i1 %15, float %84, float 0.000000e+00, !dbg !29
  %86 = fadd float %77, %81, !dbg !29
  %87 = select i1 %15, float %86, float 0.000000e+00, !dbg !29
  %88 = fadd float %78, %82, !dbg !29
  %89 = select i1 %15, float %88, float 0.000000e+00, !dbg !29
  %90 = fadd float %79, %83, !dbg !29
  %91 = select i1 %15, float %90, float 0.000000e+00, !dbg !29
  %92 = bitcast float %85 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 16, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %85, %94, !dbg !29
  %96 = bitcast float %95 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = fadd float %95, %98, !dbg !29
  %100 = bitcast float %87 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %87, %102, !dbg !29
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !29
  %108 = bitcast float %89 to i32, !dbg !34
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 16, i32 31), !dbg !34
  %110 = bitcast i32 %109 to float, !dbg !34
  %111 = fadd float %89, %110, !dbg !29
  %112 = bitcast float %111 to i32, !dbg !34
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 8, i32 31), !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = fadd float %111, %114, !dbg !29
  %116 = bitcast float %91 to i32, !dbg !34
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !34
  %118 = bitcast i32 %117 to float, !dbg !34
  %119 = fadd float %91, %118, !dbg !29
  %120 = bitcast float %119 to i32, !dbg !34
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !34
  %122 = bitcast i32 %121 to float, !dbg !34
  %123 = fadd float %119, %122, !dbg !29
  %124 = icmp eq i32 %9, 0, !dbg !34
  %125 = and i32 %17, 7, !dbg !34
  %126 = shl nuw nsw i32 %11, 3, !dbg !34
  %127 = or disjoint i32 %126, %125, !dbg !34
  %128 = zext nneg i32 %127 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i64 %128, !dbg !34
  %130 = bitcast float %99 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 %124) #3, !dbg !34
  %131 = or disjoint i32 %126, 8, !dbg !34
  %132 = or disjoint i32 %131, %125, !dbg !34
  %133 = zext nneg i32 %132 to i64, !dbg !34
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i64 %133, !dbg !34
  %135 = bitcast float %107 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 %124) #3, !dbg !34
  %136 = or disjoint i32 %126, 16, !dbg !34
  %137 = or disjoint i32 %136, %125, !dbg !34
  %138 = zext nneg i32 %137 to i64, !dbg !34
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !34
  %140 = bitcast float %115 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 %124) #3, !dbg !34
  %141 = or disjoint i32 %126, 24, !dbg !34
  %142 = or disjoint i32 %141, %125, !dbg !34
  %143 = zext nneg i32 %142 to i64, !dbg !34
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i64 %143, !dbg !34
  %145 = bitcast float %123 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 %124) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %146 = icmp slt i32 %8, 256, !dbg !34
  %147 = sext i32 %8 to i64, !dbg !34
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i64 %147, !dbg !34
  %149 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %148, i1 %146) #3, !dbg !34
  %150 = bitcast i32 %149 to float, !dbg !34
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !34
  %152 = bitcast i32 %151 to float, !dbg !34
  %153 = fadd float %150, %152, !dbg !29
  %154 = bitcast float %153 to i32, !dbg !34
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !34
  %156 = bitcast i32 %155 to float, !dbg !34
  %157 = fadd float %153, %156, !dbg !29
  %158 = bitcast float %157 to i32, !dbg !34
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !34
  %160 = bitcast i32 %159 to float, !dbg !34
  %161 = fadd float %157, %160, !dbg !29
  %162 = and i32 %8, 7, !dbg !34
  %163 = icmp eq i32 %162, 0, !dbg !34
  %164 = and i1 %146, %163, !dbg !34
  %165 = bitcast float %161 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %165, i1 %164) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %166 = zext nneg i32 %126 to i64, !dbg !34
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !34
  %168 = load i32, ptr addrspace(3) %167, align 16, !dbg !34
  %169 = zext nneg i32 %131 to i64, !dbg !34
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i64 %169, !dbg !34
  %171 = load i32, ptr addrspace(3) %170, align 16, !dbg !34
  %172 = zext nneg i32 %136 to i64, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i64 %172, !dbg !34
  %174 = load i32, ptr addrspace(3) %173, align 16, !dbg !34
  %175 = zext nneg i32 %141 to i64, !dbg !34
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i64 %175, !dbg !34
  %177 = load i32, ptr addrspace(3) %176, align 16, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %178 = zext nneg i32 %11 to i64, !dbg !35
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %178, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %179, i32 %168, i32 %171, i32 %174, i32 %177, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %180 = zext nneg i32 %12 to i64, !dbg !35
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %180, !dbg !35
  %182 = load float, ptr addrspace(3) %181, align 4, !dbg !35
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float 6.400000e+01) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %184 = sext i32 %14 to i64, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !37
  %186 = icmp eq i32 %125, 0, !dbg !38
  %187 = bitcast float %183 to i32, !dbg !38
  %188 = and i1 %186, %16, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %185, i1 %188) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwzeedwqtte5tyc6hw2e3n52we4tfqtddjszyi4ywp2rgbp7ftnt.py", directory: "inductor_cache/wz")
!4 = !{ptr @triton_per_fused__prelu_kernel_mean_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__prelu_kernel_mean_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__prelu_kernel_mean_29", linkageName: "triton_per_fused__prelu_kernel_mean_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 32, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 41, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 4, scope: !7)
!37 = !DILocation(line: 45, column: 28, scope: !7)
!38 = !DILocation(line: 45, column: 40, scope: !7)
!39 = !DILocation(line: 45, column: 4, scope: !7)
