; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_sqrt_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %9 = sdiv i32 %.frozen, 4, !dbg !13
  %10 = mul i32 %9, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %10, !dbg !14
  %11 = shl i32 %8, 2, !dbg !15
  %12 = and i32 %11, 60, !dbg !15
  %13 = add nsw i32 %.decomposed, %12, !dbg !16
  %14 = shl i32 %9, 6, !dbg !17
  %15 = add i32 %13, %14, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %7, i32 0, i1 %7) #5, !dbg !20
  %19 = bitcast i32 %18 to float, !dbg !20
  %20 = select i1 %7, float %19, float 0.000000e+00, !dbg !21
  %21 = bitcast float %20 to i32, !dbg !22
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 8, i32 31), !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = fadd float %20, %23, !dbg !26
  %25 = bitcast float %24 to i32, !dbg !22
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 4, i32 31), !dbg !22
  %27 = bitcast i32 %26 to float, !dbg !22
  %28 = fadd float %24, %27, !dbg !26
  %29 = bitcast float %28 to i32, !dbg !22
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 2, i32 31), !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = fadd float %28, %31, !dbg !26
  %33 = bitcast float %32 to i32, !dbg !22
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 1, i32 31), !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = fadd float %32, %35, !dbg !26
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 1.600000e+01) #5, !dbg !28
  %38 = fsub float %19, %37, !dbg !29
  %39 = fmul float %38, %38, !dbg !30
  %40 = select i1 %7, float %39, float 0.000000e+00, !dbg !31
  %41 = bitcast float %40 to i32, !dbg !32
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !32
  %43 = bitcast i32 %42 to float, !dbg !32
  %44 = fadd float %40, %43, !dbg !34
  %45 = bitcast float %44 to i32, !dbg !32
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = fadd float %44, %47, !dbg !34
  %49 = bitcast float %48 to i32, !dbg !32
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = fadd float %48, %51, !dbg !34
  %53 = bitcast float %52 to i32, !dbg !32
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !32
  %55 = bitcast i32 %54 to float, !dbg !32
  %56 = fadd float %52, %55, !dbg !34
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 1.600000e+01) #5, !dbg !35
  %58 = fadd float %57, 0x3E112E0BE0000000, !dbg !36
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %59, 0, !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %60, 0, !dbg !37
  br i1 %.not.i, label %66, label %61, !dbg !37

61:                                               ; preds = %5
  br i1 %.not1.i, label %64, label %62, !dbg !37

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

66:                                               ; preds = %5
  br i1 %.not1.i, label %69, label %67, !dbg !37

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %71 = sext i32 %6 to i64, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !39
  %73 = and i32 %8, 63, !dbg !40
  %74 = icmp eq i32 %73, 0, !dbg !40
  %75 = bitcast float %37 to i32, !dbg !40
  %76 = and i1 %74, %7, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %75, ptr addrspace(1) %72, i1 %76) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !42
  %78 = bitcast float %.0.i to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %77, i1 %76) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py", directory: "inductor_cache/vo")
!4 = !{ptr @triton_per_fused_add_mean_sqrt_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_sqrt_var_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_sqrt_var_0", linkageName: "triton_per_fused_add_mean_sqrt_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 37, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 45, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 35, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 35, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 47, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 20, scope: !7)
!37 = !DILocation(line: 53, column: 27, scope: !7)
!38 = !DILocation(line: 54, column: 4, scope: !7)
!39 = !DILocation(line: 55, column: 28, scope: !7)
!40 = !DILocation(line: 55, column: 40, scope: !7)
!41 = !DILocation(line: 56, column: 4, scope: !7)
!42 = !DILocation(line: 57, column: 28, scope: !7)
!43 = !DILocation(line: 57, column: 40, scope: !7)
!44 = !DILocation(line: 57, column: 4, scope: !7)
