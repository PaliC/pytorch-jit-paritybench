#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":36:24)
#loc22 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":47:26)
#loc35 = loc(callsite(#loc1 at #loc15))
#loc38 = loc(callsite(#loc1 at #loc22))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mean_sqrt_var_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999971E-10> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = arith.divsi %0, %c4_i32 : i32 loc(#loc6)
    %6 = arith.muli %3, %cst_2 : tensor<1x16xi32, #blocked> loc(#loc7)
    %7 = tt.splat %4 : i32 -> tensor<1x16xi32, #blocked> loc(#loc8)
    %8 = arith.addi %7, %6 : tensor<1x16xi32, #blocked> loc(#loc8)
    %9 = arith.muli %5, %c64_i32 : i32 loc(#loc9)
    %10 = tt.splat %9 : i32 -> tensor<1x16xi32, #blocked> loc(#loc10)
    %11 = arith.addi %8, %10 : tensor<1x16xi32, #blocked> loc(#loc10)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.addptr %12, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc11)
    %14 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc12)
    %15 = tt.load %13, %14, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = arith.select %14, %15, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc13)
    %17 = "tt.reduce"(%16) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc15)), %arg6: f32 loc(callsite(#loc1 at #loc15))):
      %34 = arith.addf %arg5, %arg6 : f32 loc(#loc39)
      tt.reduce.return %34 : f32 loc(#loc34)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc34)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc17)
    %19 = arith.divf %18, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc18)
    %20 = tt.broadcast %19 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc19)
    %21 = arith.subf %15, %20 : tensor<1x16xf32, #blocked> loc(#loc19)
    %22 = arith.mulf %21, %21 : tensor<1x16xf32, #blocked> loc(#loc20)
    %23 = arith.select %14, %22, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc21)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc22)), %arg6: f32 loc(callsite(#loc1 at #loc22))):
      %34 = arith.addf %arg5, %arg6 : f32 loc(#loc40)
      tt.reduce.return %34 : f32 loc(#loc37)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc37)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc23)
    %26 = arith.divf %25, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc24)
    %27 = arith.addf %26, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc25)
    %28 = tt.extern_elementwise %27 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc26)
    gpu.barrier loc(#loc27)
    %29 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc28)
    %30 = tt.splat %29 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %31 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc29)
    tt.store %30, %19, %31 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    gpu.barrier loc(#loc30)
    %32 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc31)
    %33 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    tt.store %33, %28, %31 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":23:28)
#loc3 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":25:21)
#loc4 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":26:34)
#loc5 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":30:19)
#loc6 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":31:19)
#loc7 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:37)
#loc8 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:35)
#loc9 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:45)
#loc10 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:42)
#loc11 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:30)
#loc12 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":33:50)
#loc13 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":35:33)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc17 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":36:27)
#loc18 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":42:19)
#loc19 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":43:19)
#loc20 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":44:20)
#loc21 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":46:35)
#loc23 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":47:29)
#loc24 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":50:20)
#loc25 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":52:20)
#loc26 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":53:27)
#loc27 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":54:4)
#loc28 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":55:28)
#loc29 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":55:40)
#loc30 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":56:4)
#loc31 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":57:28)
#loc32 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":57:40)
#loc33 = loc("inductor_cache/vo/cvotqwwtp5mascy4qqolnzvkd6sy5drgmo7grovll6psdaevla3w.py":57:4)
#loc34 = loc(callsite(#loc14 at #loc15))
#loc36 = loc(callsite(#loc16 at #loc14))
#loc37 = loc(callsite(#loc14 at #loc22))
#loc39 = loc(callsite(#loc36 at #loc15))
#loc40 = loc(callsite(#loc36 at #loc22))
