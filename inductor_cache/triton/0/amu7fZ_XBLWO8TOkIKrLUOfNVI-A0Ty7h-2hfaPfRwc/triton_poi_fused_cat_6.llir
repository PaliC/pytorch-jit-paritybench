; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %30 = sdiv i32 %.frozen, 4096, !dbg !14
  %31 = srem i32 %30, 128, !dbg !15
  %32 = mul i32 %30, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %32, !dbg !16
  %33 = srem i32 %29, 4096, !dbg !16
  %34 = sdiv i32 %28, 524288, !dbg !17
  %35 = icmp slt i32 %31, 32, !dbg !18
  %36 = shl nsw i32 %.decomposed, 5, !dbg !19
  %37 = shl nsw i32 %33, 5, !dbg !19
  %38 = shl nsw i32 %34, 17, !dbg !20
  %39 = add nsw i32 %36, %38, !dbg !21
  %40 = add nsw i32 %38, %37, !dbg !21
  %41 = add nsw i32 %39, %31, !dbg !22
  %42 = add nsw i32 %40, %31, !dbg !22
  %43 = sext i32 %41 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %42 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %35, i32 0, i1 %35) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %35, i32 0, i1 %35) #3, !dbg !24
  %49 = sext i32 %31 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %35, i32 0, i1 %35) #3, !dbg !26
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !27
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %57 = bitcast i32 %56 to float, !dbg !28
  %58 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %59 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %60, 0, !dbg !30
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %61, 0, !dbg !30
  br i1 %.not.i, label %67, label %62, !dbg !30

62:                                               ; preds = %22
  br i1 %.not1.i, label %65, label %63, !dbg !30

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

67:                                               ; preds = %22
  br i1 %.not1.i, label %70, label %68, !dbg !30

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !30
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %72, 0, !dbg !30
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %73, 0, !dbg !30
  br i1 %.not.i1, label %79, label %74, !dbg !30

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !30

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !30

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %75, %77, %80, %82
  %.0.i3 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !30
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %35, i32 0, i1 %35) #3, !dbg !33
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %35, i32 0, i1 %35) #3, !dbg !35
  %92 = and i32 %31, -32, !dbg !36
  %93 = icmp eq i32 %92, 32, !dbg !36
  %94 = add nsw i32 %31, -32, !dbg !37
  %95 = add nsw i32 %39, %94, !dbg !38
  %96 = add nsw i32 %40, %94, !dbg !38
  %97 = sext i32 %95 to i64, !dbg !39
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !39
  %99 = sext i32 %96 to i64, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %99, !dbg !39
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %93, i32 0, i1 %93) #3, !dbg !40
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %93, i32 0, i1 %93) #3, !dbg !40
  %103 = sext i32 %94 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !41
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #3, !dbg !42
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #3, !dbg !42
  %107 = getelementptr float, ptr addrspace(1) %7, i64 %103, !dbg !43
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %93, i32 0, i1 %93) #3, !dbg !44
  %109 = bitcast i32 %108 to float, !dbg !44
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %93, i32 0, i1 %93) #3, !dbg !44
  %111 = bitcast i32 %110 to float, !dbg !44
  %112 = fadd float %109, 0x3EE4F8B580000000, !dbg !45
  %113 = fadd float %111, 0x3EE4F8B580000000, !dbg !45
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %114, 0, !dbg !46
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !46
  br i1 %.not.i6, label %121, label %116, !dbg !46

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !46

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !46

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !46
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %126, 0, !dbg !46
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !46
  br i1 %.not.i11, label %133, label %128, !dbg !46

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !46

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !46

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !46
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %103, !dbg !48
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %93, i32 0, i1 %93) #3, !dbg !49
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %93, i32 0, i1 %93) #3, !dbg !49
  %143 = getelementptr float, ptr addrspace(1) %9, i64 %103, !dbg !50
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %93, i32 0, i1 %93) #3, !dbg !51
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %93, i32 0, i1 %93) #3, !dbg !51
  %146 = icmp eq i32 %92, 64, !dbg !52
  %147 = add nsw i32 %31, -64, !dbg !53
  %148 = add nsw i32 %39, %147, !dbg !54
  %149 = add nsw i32 %40, %147, !dbg !54
  %150 = sext i32 %148 to i64, !dbg !55
  %151 = getelementptr float, ptr addrspace(1) %10, i64 %150, !dbg !55
  %152 = sext i32 %149 to i64, !dbg !55
  %153 = getelementptr float, ptr addrspace(1) %10, i64 %152, !dbg !55
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %146, i32 0, i1 %146) #3, !dbg !56
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %146, i32 0, i1 %146) #3, !dbg !56
  %156 = sext i32 %147 to i64, !dbg !57
  %157 = getelementptr float, ptr addrspace(1) %11, i64 %156, !dbg !57
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %146, i32 0, i1 %146) #3, !dbg !58
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %146, i32 0, i1 %146) #3, !dbg !58
  %160 = getelementptr float, ptr addrspace(1) %12, i64 %156, !dbg !59
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %146, i32 0, i1 %146) #3, !dbg !60
  %162 = bitcast i32 %161 to float, !dbg !60
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %146, i32 0, i1 %146) #3, !dbg !60
  %164 = bitcast i32 %163 to float, !dbg !60
  %165 = fadd float %162, 0x3EE4F8B580000000, !dbg !61
  %166 = fadd float %164, 0x3EE4F8B580000000, !dbg !61
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !62
  %.not.i16 = icmp eq i32 %167, 0, !dbg !62
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !62
  %.not1.i19 = icmp eq i32 %168, 0, !dbg !62
  br i1 %.not.i16, label %174, label %169, !dbg !62

169:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %172, label %170, !dbg !62

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

174:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %177, label %175, !dbg !62

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !62
  br label %__nv_sqrtf.exit20, !dbg !62

__nv_sqrtf.exit20:                                ; preds = %170, %172, %175, %177
  %.0.i18 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !62
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !62
  %.not.i21 = icmp eq i32 %179, 0, !dbg !62
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !62
  %.not1.i24 = icmp eq i32 %180, 0, !dbg !62
  br i1 %.not.i21, label %186, label %181, !dbg !62

181:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %184, label %182, !dbg !62

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

186:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %189, label %187, !dbg !62

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !62
  br label %__nv_sqrtf.exit25, !dbg !62

__nv_sqrtf.exit25:                                ; preds = %182, %184, %187, %189
  %.0.i23 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !62
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !63
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !63
  %193 = getelementptr float, ptr addrspace(1) %13, i64 %156, !dbg !64
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %146, i32 0, i1 %146) #3, !dbg !65
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %146, i32 0, i1 %146) #3, !dbg !65
  %196 = getelementptr float, ptr addrspace(1) %14, i64 %156, !dbg !66
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %146, i32 0, i1 %146) #3, !dbg !67
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %146, i32 0, i1 %146) #3, !dbg !67
  %199 = icmp sgt i32 %31, 95, !dbg !68
  %200 = add nsw i32 %31, -96, !dbg !69
  %201 = add nsw i32 %39, %200, !dbg !70
  %202 = add nsw i32 %40, %200, !dbg !70
  %203 = sext i32 %201 to i64, !dbg !71
  %204 = getelementptr float, ptr addrspace(1) %15, i64 %203, !dbg !71
  %205 = sext i32 %202 to i64, !dbg !71
  %206 = getelementptr float, ptr addrspace(1) %15, i64 %205, !dbg !71
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %199, i32 0, i1 %199) #3, !dbg !72
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %199, i32 0, i1 %199) #3, !dbg !72
  %209 = sext i32 %200 to i64, !dbg !73
  %210 = getelementptr float, ptr addrspace(1) %16, i64 %209, !dbg !73
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %199, i32 0, i1 %199) #3, !dbg !74
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %199, i32 0, i1 %199) #3, !dbg !74
  %213 = getelementptr float, ptr addrspace(1) %17, i64 %209, !dbg !75
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %199, i32 0, i1 %199) #3, !dbg !76
  %215 = bitcast i32 %214 to float, !dbg !76
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %199, i32 0, i1 %199) #3, !dbg !76
  %217 = bitcast i32 %216 to float, !dbg !76
  %218 = fadd float %215, 0x3EE4F8B580000000, !dbg !77
  %219 = fadd float %217, 0x3EE4F8B580000000, !dbg !77
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not.i26 = icmp eq i32 %220, 0, !dbg !78
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !78
  %.not1.i29 = icmp eq i32 %221, 0, !dbg !78
  br i1 %.not.i26, label %227, label %222, !dbg !78

222:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %225, label %223, !dbg !78

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !78
  br label %__nv_sqrtf.exit30, !dbg !78

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !78
  br label %__nv_sqrtf.exit30, !dbg !78

227:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %230, label %228, !dbg !78

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !78
  br label %__nv_sqrtf.exit30, !dbg !78

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !78
  br label %__nv_sqrtf.exit30, !dbg !78

__nv_sqrtf.exit30:                                ; preds = %223, %225, %228, %230
  %.0.i28 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !78
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !78
  %.not.i31 = icmp eq i32 %232, 0, !dbg !78
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !78
  %.not1.i34 = icmp eq i32 %233, 0, !dbg !78
  br i1 %.not.i31, label %239, label %234, !dbg !78

234:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %237, label %235, !dbg !78

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !78
  br label %__nv_sqrtf.exit35, !dbg !78

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !78
  br label %__nv_sqrtf.exit35, !dbg !78

239:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %242, label %240, !dbg !78

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !78
  br label %__nv_sqrtf.exit35, !dbg !78

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !78
  br label %__nv_sqrtf.exit35, !dbg !78

__nv_sqrtf.exit35:                                ; preds = %235, %237, %240, %242
  %.0.i33 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !78
  %244 = insertelement <8 x i32> poison, i32 %208, i64 0, !dbg !72
  %245 = insertelement <8 x i32> %244, i32 %207, i64 1, !dbg !72
  %246 = insertelement <8 x i32> %245, i32 %47, i64 2, !dbg !72
  %247 = insertelement <8 x i32> %246, i32 %48, i64 3, !dbg !72
  %248 = insertelement <8 x i32> %247, i32 %101, i64 4, !dbg !72
  %249 = insertelement <8 x i32> %248, i32 %102, i64 5, !dbg !72
  %250 = insertelement <8 x i32> %249, i32 %154, i64 6, !dbg !72
  %251 = insertelement <8 x i32> %250, i32 %155, i64 7, !dbg !72
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !72
  %253 = insertelement <8 x i32> poison, i32 %212, i64 0, !dbg !74
  %254 = insertelement <8 x i32> %253, i32 %211, i64 1, !dbg !74
  %255 = insertelement <8 x i32> %254, i32 %51, i64 2, !dbg !74
  %256 = insertelement <8 x i32> %255, i32 %52, i64 3, !dbg !74
  %257 = insertelement <8 x i32> %256, i32 %105, i64 4, !dbg !74
  %258 = insertelement <8 x i32> %257, i32 %106, i64 5, !dbg !74
  %259 = insertelement <8 x i32> %258, i32 %158, i64 6, !dbg !74
  %260 = insertelement <8 x i32> %259, i32 %159, i64 7, !dbg !74
  %261 = bitcast <8 x i32> %260 to <8 x float>, !dbg !74
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !79
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !79
  %264 = getelementptr float, ptr addrspace(1) %18, i64 %209, !dbg !80
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %199, i32 0, i1 %199) #3, !dbg !81
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %199, i32 0, i1 %199) #3, !dbg !81
  %267 = getelementptr float, ptr addrspace(1) %19, i64 %209, !dbg !82
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %199, i32 0, i1 %199) #3, !dbg !83
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %199, i32 0, i1 %199) #3, !dbg !83
  %270 = fsub <8 x float> %252, %261, !dbg !84
  %271 = insertelement <8 x float> poison, float %263, i64 0, !dbg !85
  %272 = insertelement <8 x float> %271, float %262, i64 1, !dbg !85
  %273 = insertelement <8 x float> %272, float %84, i64 2, !dbg !85
  %274 = insertelement <8 x float> %273, float %85, i64 3, !dbg !85
  %275 = insertelement <8 x float> %274, float %138, i64 4, !dbg !85
  %276 = insertelement <8 x float> %275, float %139, i64 5, !dbg !85
  %277 = insertelement <8 x float> %276, float %191, i64 6, !dbg !85
  %278 = insertelement <8 x float> %277, float %192, i64 7, !dbg !85
  %279 = fmul <8 x float> %270, %278, !dbg !85
  %280 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !81
  %281 = insertelement <8 x i32> %280, i32 %265, i64 1, !dbg !81
  %282 = insertelement <8 x i32> %281, i32 %87, i64 2, !dbg !81
  %283 = insertelement <8 x i32> %282, i32 %88, i64 3, !dbg !81
  %284 = insertelement <8 x i32> %283, i32 %141, i64 4, !dbg !81
  %285 = insertelement <8 x i32> %284, i32 %142, i64 5, !dbg !81
  %286 = insertelement <8 x i32> %285, i32 %194, i64 6, !dbg !81
  %287 = insertelement <8 x i32> %286, i32 %195, i64 7, !dbg !81
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !81
  %289 = fmul <8 x float> %279, %288, !dbg !86
  %290 = insertelement <8 x i32> poison, i32 %269, i64 0, !dbg !83
  %291 = insertelement <8 x i32> %290, i32 %268, i64 1, !dbg !83
  %292 = insertelement <8 x i32> %291, i32 %90, i64 2, !dbg !83
  %293 = insertelement <8 x i32> %292, i32 %91, i64 3, !dbg !83
  %294 = insertelement <8 x i32> %293, i32 %144, i64 4, !dbg !83
  %295 = insertelement <8 x i32> %294, i32 %145, i64 5, !dbg !83
  %296 = insertelement <8 x i32> %295, i32 %197, i64 6, !dbg !83
  %297 = insertelement <8 x i32> %296, i32 %198, i64 7, !dbg !83
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !83
  %299 = fadd <8 x float> %289, %298, !dbg !87
  %300 = fcmp olt <8 x float> %299, zeroinitializer, !dbg !88
  %301 = extractelement <8 x i1> %300, i64 7, !dbg !92
  %302 = extractelement <8 x float> %299, i64 7, !dbg !92
  %303 = select i1 %301, float 0.000000e+00, float %302, !dbg !92
  %304 = extractelement <8 x i1> %300, i64 6, !dbg !92
  %305 = extractelement <8 x float> %299, i64 6, !dbg !92
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !92
  %307 = extractelement <8 x i1> %300, i64 5, !dbg !94
  %308 = extractelement <8 x float> %299, i64 5, !dbg !94
  %309 = select i1 %307, float 0.000000e+00, float %308, !dbg !94
  %310 = extractelement <8 x i1> %300, i64 4, !dbg !94
  %311 = extractelement <8 x float> %299, i64 4, !dbg !94
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !94
  %313 = extractelement <8 x i1> %300, i64 3, !dbg !96
  %314 = extractelement <8 x float> %299, i64 3, !dbg !96
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !96
  %316 = extractelement <8 x i1> %300, i64 2, !dbg !96
  %317 = extractelement <8 x float> %299, i64 2, !dbg !96
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !96
  %319 = extractelement <8 x i1> %300, i64 1, !dbg !98
  %320 = extractelement <8 x float> %299, i64 1, !dbg !98
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !98
  %322 = extractelement <8 x i1> %300, i64 0, !dbg !98
  %323 = extractelement <8 x float> %299, i64 0, !dbg !98
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !98
  %325 = select i1 %199, float %321, float 0.000000e+00, !dbg !99
  %326 = select i1 %199, float %324, float 0.000000e+00, !dbg !99
  %327 = select i1 %146, float %306, float %325, !dbg !100
  %328 = select i1 %146, float %303, float %326, !dbg !100
  %329 = select i1 %93, float %312, float %327, !dbg !100
  %330 = select i1 %93, float %309, float %328, !dbg !100
  %331 = select i1 %35, float %318, float %329, !dbg !100
  %332 = select i1 %35, float %315, float %330, !dbg !100
  %333 = sext i32 %28 to i64, !dbg !101
  %334 = getelementptr float, ptr addrspace(1) %20, i64 %333, !dbg !101
  %335 = bitcast float %331 to i32, !dbg !102
  %336 = bitcast float %332 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %335, i32 %336, ptr addrspace(1) %334, i1 true) #3, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdjpae4h7o5lvnebqaymxslsjixfcmae5gebwa5njpyo7wmw7k4v.py", directory: "inductor_cache/dj")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 33, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 56, column: 20, scope: !7)
!37 = !DILocation(line: 57, column: 60, scope: !7)
!38 = !DILocation(line: 57, column: 52, scope: !7)
!39 = !DILocation(line: 57, column: 31, scope: !7)
!40 = !DILocation(line: 57, column: 66, scope: !7)
!41 = !DILocation(line: 58, column: 31, scope: !7)
!42 = !DILocation(line: 58, column: 44, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 60, column: 44, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 27, scope: !7)
!47 = !DILocation(line: 65, column: 20, scope: !7)
!48 = !DILocation(line: 69, column: 31, scope: !7)
!49 = !DILocation(line: 69, column: 44, scope: !7)
!50 = !DILocation(line: 71, column: 31, scope: !7)
!51 = !DILocation(line: 71, column: 44, scope: !7)
!52 = !DILocation(line: 80, column: 20, scope: !7)
!53 = !DILocation(line: 81, column: 61, scope: !7)
!54 = !DILocation(line: 81, column: 53, scope: !7)
!55 = !DILocation(line: 81, column: 32, scope: !7)
!56 = !DILocation(line: 81, column: 67, scope: !7)
!57 = !DILocation(line: 82, column: 32, scope: !7)
!58 = !DILocation(line: 82, column: 45, scope: !7)
!59 = !DILocation(line: 84, column: 32, scope: !7)
!60 = !DILocation(line: 84, column: 45, scope: !7)
!61 = !DILocation(line: 86, column: 20, scope: !7)
!62 = !DILocation(line: 87, column: 27, scope: !7)
!63 = !DILocation(line: 89, column: 20, scope: !7)
!64 = !DILocation(line: 93, column: 32, scope: !7)
!65 = !DILocation(line: 93, column: 45, scope: !7)
!66 = !DILocation(line: 95, column: 32, scope: !7)
!67 = !DILocation(line: 95, column: 45, scope: !7)
!68 = !DILocation(line: 101, column: 20, scope: !7)
!69 = !DILocation(line: 104, column: 61, scope: !7)
!70 = !DILocation(line: 104, column: 53, scope: !7)
!71 = !DILocation(line: 104, column: 32, scope: !7)
!72 = !DILocation(line: 104, column: 67, scope: !7)
!73 = !DILocation(line: 105, column: 32, scope: !7)
!74 = !DILocation(line: 105, column: 45, scope: !7)
!75 = !DILocation(line: 107, column: 32, scope: !7)
!76 = !DILocation(line: 107, column: 45, scope: !7)
!77 = !DILocation(line: 109, column: 20, scope: !7)
!78 = !DILocation(line: 110, column: 27, scope: !7)
!79 = !DILocation(line: 112, column: 20, scope: !7)
!80 = !DILocation(line: 116, column: 32, scope: !7)
!81 = !DILocation(line: 116, column: 45, scope: !7)
!82 = !DILocation(line: 118, column: 32, scope: !7)
!83 = !DILocation(line: 118, column: 45, scope: !7)
!84 = !DILocation(line: 106, column: 20, scope: !7)
!85 = !DILocation(line: 115, column: 20, scope: !7)
!86 = !DILocation(line: 117, column: 20, scope: !7)
!87 = !DILocation(line: 119, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !89, inlinedAt: !91)
!89 = distinct !DILexicalBlockFile(scope: !7, file: !90, discriminator: 0)
!90 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!91 = !DILocation(line: 121, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !93)
!93 = !DILocation(line: 98, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !95)
!95 = !DILocation(line: 74, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !97)
!97 = !DILocation(line: 50, column: 42, scope: !7)
!98 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !91)
!99 = !DILocation(line: 123, column: 35, scope: !7)
!100 = !DILocation(line: 0, scope: !7)
!101 = !DILocation(line: 127, column: 25, scope: !7)
!102 = !DILocation(line: 127, column: 37, scope: !7)
!103 = !DILocation(line: 127, column: 4, scope: !7)
