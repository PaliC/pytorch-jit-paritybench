; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = or disjoint i32 %18, %12, !dbg !17
  %20 = or disjoint i32 %18, %10, !dbg !17
  %21 = icmp slt i32 %19, 512, !dbg !18
  %22 = icmp slt i32 %20, 512, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %23 = sdiv i32 %.frozen, 2, !dbg !19
  %24 = mul i32 %23, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %.frozen4 = freeze i32 %14, !dbg !21
  %25 = sdiv i32 %.frozen4, 4, !dbg !21
  %26 = mul i32 %25, 4, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %26, !dbg !22
  %27 = shl nsw i32 %.decomposed, 10, !dbg !23
  %28 = add i32 %27, %19, !dbg !24
  %29 = shl i32 %23, 12, !dbg !25
  %30 = add i32 %28, %29, !dbg !26
  %31 = sext i32 %30 to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !27
  %33 = and i1 %15, %21, !dbg !28
  %34 = and i1 %16, %22, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #2, !dbg !29
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %38 = add i32 %28, 512, !dbg !30
  %39 = add i32 %38, %29, !dbg !31
  %40 = sext i32 %39 to i64, !dbg !32
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !32
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %33) #2, !dbg !33
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !33
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !33
  %45 = add i32 %28, 2048, !dbg !34
  %46 = add i32 %45, %29, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !36
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %33) #2, !dbg !37
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !37
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !37
  %52 = add i32 %28, 2560, !dbg !38
  %53 = add i32 %52, %29, !dbg !39
  %54 = sext i32 %53 to i64, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !40
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %33) #2, !dbg !41
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !41
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !41
  %59 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !29
  %60 = insertelement <2 x i32> %59, i32 %37, i64 1, !dbg !29
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !29
  %62 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !33
  %63 = insertelement <2 x i32> %62, i32 %44, i64 1, !dbg !33
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !33
  %65 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !37
  %66 = insertelement <2 x i32> %65, i32 %51, i64 1, !dbg !37
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !37
  %68 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !41
  %69 = insertelement <2 x i32> %68, i32 %58, i64 1, !dbg !41
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !41
  %71 = fcmp ogt <2 x float> %64, %61, !dbg !42
  %72 = fcmp uno <2 x float> %64, zeroinitializer, !dbg !46
  %73 = or <2 x i1> %71, %72, !dbg !47
  %.v = select <2 x i1> %73, <2 x i32> %63, <2 x i32> %60, !dbg !48
  %74 = bitcast <2 x i32> %.v to <2 x float>, !dbg !48
  %75 = fcmp olt <2 x float> %74, %67, !dbg !49
  %76 = fcmp uno <2 x float> %67, zeroinitializer, !dbg !51
  %77 = or <2 x i1> %76, %75, !dbg !52
  %.v3 = select <2 x i1> %77, <2 x i32> %66, <2 x i32> %.v, !dbg !53
  %78 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !53
  %79 = fcmp olt <2 x float> %78, %70, !dbg !54
  %80 = bitcast i32 %57 to float, !dbg !56
  %81 = fcmp uno float %80, 0.000000e+00, !dbg !56
  %82 = bitcast i32 %58 to float, !dbg !56
  %83 = fcmp uno float %82, 0.000000e+00, !dbg !56
  %84 = extractelement <2 x i1> %79, i64 0, !dbg !57
  %85 = or i1 %81, %84, !dbg !57
  %86 = extractelement <2 x i1> %79, i64 1, !dbg !57
  %87 = or i1 %83, %86, !dbg !57
  %88 = zext <2 x i1> %71 to <2 x i8>, !dbg !58
  %89 = select <2 x i1> %75, <2 x i8> splat (i8 2), <2 x i8> %88, !dbg !59
  %90 = select <2 x i1> %79, <2 x i8> splat (i8 3), <2 x i8> %89, !dbg !60
  %91 = shl i32 %20, 2, !dbg !61
  %92 = add i32 %91, %.decomposed5, !dbg !62
  %93 = shl i32 %25, 11, !dbg !63
  %94 = add i32 %92, %93, !dbg !64
  %95 = sext i32 %94 to i64, !dbg !65
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !65
  %97 = shl i32 %8, 5, !dbg !66
  %98 = and i32 %97, 224, !dbg !66
  %99 = or disjoint i32 %98, %10, !dbg !66
  %100 = and i32 %11, 254, !dbg !66
  %101 = lshr exact i32 %98, 1, !dbg !66
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %101, !dbg !66
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !66
  %104 = extractelement <2 x i32> %.v3, i64 0, !dbg !66
  %105 = select i1 %85, i32 %57, i32 %104, !dbg !67
  %106 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %106, i1 true) #2, !dbg !66
  %107 = or disjoint i32 %99, 16, !dbg !66
  %108 = lshr i32 %107, 3, !dbg !66
  %109 = and i32 %108, 30, !dbg !66
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !66
  %111 = getelementptr float, ptr addrspace(3) %110, i32 %107, !dbg !66
  %112 = extractelement <2 x i32> %.v3, i64 1, !dbg !66
  %113 = select i1 %87, i32 %58, i32 %112, !dbg !67
  %114 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %114, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %115 = lshr i32 %11, 3, !dbg !66
  %116 = and i32 %115, 30, !dbg !66
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !66
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %100, !dbg !66
  %.extract = load i32, ptr addrspace(3) %118, align 8, !dbg !66
  %119 = getelementptr inbounds i8, ptr addrspace(3) %118, i32 4, !dbg !66
  %.extract2 = load i32, ptr addrspace(3) %119, align 4, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %96, i1 %34) #2, !dbg !66
  %120 = shl i32 %13, 9, !dbg !68
  %121 = add i32 %19, %120, !dbg !69
  %122 = sext i32 %121 to i64, !dbg !70
  %123 = getelementptr i8, ptr addrspace(1) %2, i64 %122, !dbg !70
  %124 = bitcast <2 x i8> %90 to i16, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %124, ptr addrspace(1) %123, i1 %33) #2, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4mtp4minipb7uxxbhskson2tncsyqw7fpx55awfmdokoylz2di.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 63, scope: !7)
!29 = !DILocation(line: 34, column: 55, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 61, scope: !7)
!34 = !DILocation(line: 36, column: 42, scope: !7)
!35 = !DILocation(line: 36, column: 52, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 62, scope: !7)
!38 = !DILocation(line: 37, column: 42, scope: !7)
!39 = !DILocation(line: 37, column: 52, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 62, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 38, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !50)
!50 = !DILocation(line: 39, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !50)
!53 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !50)
!54 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !55)
!55 = !DILocation(line: 40, column: 40, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !55)
!58 = !DILocation(line: 44, column: 33, scope: !7)
!59 = !DILocation(line: 47, column: 35, scope: !7)
!60 = !DILocation(line: 50, column: 35, scope: !7)
!61 = !DILocation(line: 51, column: 32, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 42, scope: !7)
!64 = !DILocation(line: 51, column: 37, scope: !7)
!65 = !DILocation(line: 51, column: 25, scope: !7)
!66 = !DILocation(line: 51, column: 53, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !55)
!68 = !DILocation(line: 52, column: 34, scope: !7)
!69 = !DILocation(line: 52, column: 30, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 46, scope: !7)
!72 = !DILocation(line: 52, column: 4, scope: !7)
