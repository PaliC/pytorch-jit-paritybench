; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %11, 64, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %15, 1280, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = lshr i32 %11, 2, !dbg !17
  %20 = and i32 %19, 15, !dbg !17
  %21 = lshr exact i32 %14, 2, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !17
  %23 = or disjoint i32 %18, %22, !dbg !18
  %24 = or disjoint i32 %23, 32, !dbg !18
  %25 = icmp slt i32 %23, 49, !dbg !19
  %26 = icmp slt i32 %24, 49, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %27 = sdiv i32 %.frozen, 320, !dbg !20
  %28 = mul i32 %27, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = mul i32 %23, 320, !dbg !22
  %30 = mul i32 %24, 320, !dbg !22
  %31 = mul i32 %27, 15680, !dbg !23
  %32 = add i32 %31, %.decomposed, !dbg !24
  %33 = add i32 %32, %29, !dbg !25
  %34 = add i32 %32, %30, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = and i1 %16, %25, !dbg !27
  %40 = and i1 %26, %16, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #4, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #4, !dbg !28
  %43 = sext i32 %.decomposed to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !29
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #4, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !31
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %16) #4, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !32
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = bitcast i32 %49 to float, !dbg !32
  %54 = bitcast i32 %50 to float, !dbg !32
  %55 = bitcast i32 %51 to float, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %16) #4, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !35
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %16) #4, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %62 = fadd float %54, 0x3EE4F8B580000000, !dbg !37
  %63 = fadd float %55, 0x3EE4F8B580000000, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %64, 0, !dbg !38
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %65, 0, !dbg !38
  br i1 %.not.i, label %71, label %66, !dbg !38

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !38

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !38
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %76, 0, !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %77, 0, !dbg !38
  br i1 %.not.i4, label %83, label %78, !dbg !38

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %81, label %79, !dbg !38

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %86, label %84, !dbg !38

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %79, %81, %84, %86
  %.0.i6 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !38
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i9 = icmp eq i32 %88, 0, !dbg !38
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i12 = icmp eq i32 %89, 0, !dbg !38
  br i1 %.not.i9, label %95, label %90, !dbg !38

90:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %93, label %91, !dbg !38

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

95:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %98, label %96, !dbg !38

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit13, !dbg !38

__nv_sqrtf.exit13:                                ; preds = %91, %93, %96, %98
  %.0.i11 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !38
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i14 = icmp eq i32 %100, 0, !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i17 = icmp eq i32 %101, 0, !dbg !38
  br i1 %.not.i14, label %107, label %102, !dbg !38

102:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %105, label %103, !dbg !38

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

107:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %110, label %108, !dbg !38

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit18, !dbg !38

__nv_sqrtf.exit18:                                ; preds = %103, %105, %108, %110
  %.0.i16 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !38
  %112 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = fsub float %113, %115, !dbg !39
  %117 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !30
  %120 = bitcast i32 %119 to float, !dbg !30
  %121 = fsub float %118, %120, !dbg !39
  %122 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !30
  %125 = bitcast i32 %124 to float, !dbg !30
  %126 = fsub float %123, %125, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !30
  %130 = bitcast i32 %129 to float, !dbg !30
  %131 = fsub float %128, %130, !dbg !39
  %132 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fsub float %133, %115, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = fsub float %136, %120, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = fsub float %139, %125, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = fsub float %142, %130, !dbg !39
  %144 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !36
  %147 = bitcast i32 %146 to float, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %153 = bitcast i32 %152 to float, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %155 = bitcast i32 %154 to float, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = and i32 %11, 63, !dbg !17
  %161 = or disjoint i32 %18, %160, !dbg !18
  %162 = icmp slt i32 %161, 49, !dbg !19
  %.lobit = lshr exact i32 %14, 6, !dbg !12
  %163 = or disjoint i32 %.lobit, %10, !dbg !13
  %164 = or disjoint i32 %163, 14, !dbg !13
  %165 = icmp slt i32 %164, 1280, !dbg !14
  %166 = and i1 %165, %162, !dbg !27
  %167 = or disjoint i32 %163, 12, !dbg !13
  %168 = icmp slt i32 %167, 1280, !dbg !14
  %169 = and i1 %168, %162, !dbg !27
  %170 = or disjoint i32 %163, 10, !dbg !13
  %171 = icmp slt i32 %170, 1280, !dbg !14
  %172 = and i1 %171, %162, !dbg !27
  %173 = or disjoint i32 %163, 8, !dbg !13
  %174 = icmp slt i32 %173, 1280, !dbg !14
  %175 = and i1 %174, %162, !dbg !27
  %176 = or disjoint i32 %163, 6, !dbg !13
  %177 = icmp slt i32 %176, 1280, !dbg !14
  %178 = and i1 %177, %162, !dbg !27
  %179 = or disjoint i32 %163, 4, !dbg !13
  %180 = icmp slt i32 %179, 1280, !dbg !14
  %181 = and i1 %180, %162, !dbg !27
  %182 = or disjoint i32 %163, 2, !dbg !13
  %183 = icmp slt i32 %182, 1280, !dbg !14
  %184 = and i1 %183, %162, !dbg !27
  %185 = icmp slt i32 %163, 1280, !dbg !14
  %186 = and i1 %185, %162, !dbg !27
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !40
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %191 = fmul float %143, %187, !dbg !41
  %192 = fmul float %140, %188, !dbg !41
  %193 = fmul float %137, %189, !dbg !41
  %194 = fmul float %134, %190, !dbg !41
  %195 = fmul float %131, %187, !dbg !41
  %196 = fmul float %126, %188, !dbg !41
  %197 = fmul float %121, %189, !dbg !41
  %198 = fmul float %116, %190, !dbg !41
  %199 = fmul float %191, %159, !dbg !42
  %200 = fmul float %192, %157, !dbg !42
  %201 = fmul float %193, %155, !dbg !42
  %202 = fmul float %194, %153, !dbg !42
  %203 = fmul float %195, %159, !dbg !42
  %204 = fmul float %196, %157, !dbg !42
  %205 = fmul float %197, %155, !dbg !42
  %206 = fmul float %198, %153, !dbg !42
  %207 = fadd float %199, %151, !dbg !43
  %208 = fadd float %200, %149, !dbg !43
  %209 = fadd float %201, %147, !dbg !43
  %210 = fadd float %202, %145, !dbg !43
  %211 = fadd float %203, %151, !dbg !43
  %212 = fadd float %204, %149, !dbg !43
  %213 = fadd float %205, %147, !dbg !43
  %214 = fadd float %206, %145, !dbg !43
  %215 = mul i32 %163, 49, !dbg !44
  %216 = mul i32 %182, 49, !dbg !44
  %217 = mul i32 %179, 49, !dbg !44
  %218 = mul i32 %176, 49, !dbg !44
  %219 = mul i32 %173, 49, !dbg !44
  %220 = mul i32 %170, 49, !dbg !44
  %221 = mul i32 %167, 49, !dbg !44
  %222 = mul i32 %164, 49, !dbg !44
  %223 = add i32 %161, %215, !dbg !45
  %224 = add i32 %161, %216, !dbg !45
  %225 = add i32 %161, %217, !dbg !45
  %226 = add i32 %161, %218, !dbg !45
  %227 = add i32 %161, %219, !dbg !45
  %228 = add i32 %161, %220, !dbg !45
  %229 = add i32 %161, %221, !dbg !45
  %230 = add i32 %161, %222, !dbg !45
  %231 = sext i32 %223 to i64, !dbg !46
  %232 = getelementptr float, ptr addrspace(1) %5, i64 %231, !dbg !46
  %233 = sext i32 %224 to i64, !dbg !46
  %234 = getelementptr float, ptr addrspace(1) %5, i64 %233, !dbg !46
  %235 = sext i32 %225 to i64, !dbg !46
  %236 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !46
  %237 = sext i32 %226 to i64, !dbg !46
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %237, !dbg !46
  %239 = sext i32 %227 to i64, !dbg !46
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %239, !dbg !46
  %241 = sext i32 %228 to i64, !dbg !46
  %242 = getelementptr float, ptr addrspace(1) %5, i64 %241, !dbg !46
  %243 = sext i32 %229 to i64, !dbg !46
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !46
  %245 = sext i32 %230 to i64, !dbg !46
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !46
  %247 = shl i32 %11, 8, !dbg !47
  %248 = and i32 %247, 768, !dbg !47
  %249 = or disjoint i32 %248, %20, !dbg !47
  %250 = or disjoint i32 %249, %21, !dbg !47
  %251 = and i32 %11, 127, !dbg !47
  %252 = lshr exact i32 %248, 4, !dbg !47
  %253 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %252, !dbg !47
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !47
  %255 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !47
  %256 = or disjoint i32 %250, 64, !dbg !47
  %257 = lshr i32 %256, 6, !dbg !47
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !47
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !47
  %260 = bitcast float %208 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !47
  %261 = or disjoint i32 %250, 128, !dbg !47
  %262 = lshr i32 %261, 6, !dbg !47
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !47
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !47
  %265 = bitcast float %209 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !47
  %266 = or disjoint i32 %250, 192, !dbg !47
  %267 = lshr i32 %266, 6, !dbg !47
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !47
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !47
  %270 = bitcast float %210 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !47
  %271 = or disjoint i32 %250, 32, !dbg !47
  %272 = getelementptr float, ptr addrspace(3) %253, i32 %271, !dbg !47
  %273 = bitcast float %211 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !47
  %274 = or disjoint i32 %250, 96, !dbg !47
  %275 = lshr i32 %274, 6, !dbg !47
  %276 = getelementptr float, ptr addrspace(3) @global_smem, i32 %275, !dbg !47
  %277 = getelementptr float, ptr addrspace(3) %276, i32 %274, !dbg !47
  %278 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !47
  %279 = or disjoint i32 %250, 160, !dbg !47
  %280 = lshr i32 %279, 6, !dbg !47
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !47
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %279, !dbg !47
  %283 = bitcast float %213 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !47
  %284 = or disjoint i32 %250, 224, !dbg !47
  %285 = lshr i32 %284, 6, !dbg !47
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !47
  %287 = getelementptr float, ptr addrspace(3) %286, i32 %284, !dbg !47
  %288 = bitcast float %214 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %289 = lshr i32 %251, 6, !dbg !47
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !47
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %251, !dbg !47
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !47
  %293 = or disjoint i32 %251, 128, !dbg !47
  %294 = lshr i32 %293, 6, !dbg !47
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !47
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !47
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !47
  %298 = or disjoint i32 %251, 256, !dbg !47
  %299 = lshr i32 %298, 6, !dbg !47
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !47
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !47
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !47
  %303 = or disjoint i32 %251, 384, !dbg !47
  %304 = lshr i32 %303, 6, !dbg !47
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !47
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !47
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !47
  %308 = or disjoint i32 %251, 512, !dbg !47
  %309 = lshr i32 %308, 6, !dbg !47
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !47
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !47
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !47
  %313 = or disjoint i32 %251, 640, !dbg !47
  %314 = lshr i32 %313, 6, !dbg !47
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !47
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !47
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !47
  %318 = or disjoint i32 %251, 768, !dbg !47
  %319 = lshr i32 %318, 6, !dbg !47
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !47
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !47
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !47
  %323 = or disjoint i32 %251, 896, !dbg !47
  %324 = lshr i32 %323, 6, !dbg !47
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !47
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !47
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %292, ptr addrspace(1) %232, i1 %186) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %297, ptr addrspace(1) %234, i1 %184) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %302, ptr addrspace(1) %236, i1 %181) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %307, ptr addrspace(1) %238, i1 %178) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %312, ptr addrspace(1) %240, i1 %175) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %317, ptr addrspace(1) %242, i1 %172) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %244, i1 %169) #4, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %327, ptr addrspace(1) %246, i1 %166) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjyb7tnoj7pg3sq776mg5am7rq7xibfy6wyeesdstdpkssclhev.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
