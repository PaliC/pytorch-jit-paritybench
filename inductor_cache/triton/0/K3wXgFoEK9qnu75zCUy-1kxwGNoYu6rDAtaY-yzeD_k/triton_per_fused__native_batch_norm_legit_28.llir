; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 4, !dbg !12
  %12 = and i32 %8, 7, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = icmp slt i32 %13, 512, !dbg !14
  %15 = lshr i32 %8, 5, !dbg !15
  %16 = shl i32 %8, 6, !dbg !16
  %17 = and i32 %16, 8064, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 128, !dbg !17
  %19 = shl i32 %18, 13, !dbg !18
  %20 = mul i32 %18, 128, !dbg !19
  %.decomposed = sub i32 %.frozen, %20, !dbg !19
  %21 = add nsw i32 %.decomposed, %17, !dbg !20
  %22 = add i32 %21, %19, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !22
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !23
  %30 = bitcast i32 %26 to float, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = select i1 %14, float %30, float 0.000000e+00, !dbg !24
  %35 = select i1 %14, float %31, float 0.000000e+00, !dbg !24
  %36 = select i1 %14, float %32, float 0.000000e+00, !dbg !24
  %37 = select i1 %14, float %33, float 0.000000e+00, !dbg !24
  %38 = bitcast float %34 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 16, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %34, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 8, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !29
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !29
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !29
  %54 = bitcast float %35 to i32, !dbg !25
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !25
  %56 = bitcast i32 %55 to float, !dbg !25
  %57 = fadd float %35, %56, !dbg !29
  %58 = bitcast float %57 to i32, !dbg !25
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !25
  %60 = bitcast i32 %59 to float, !dbg !25
  %61 = fadd float %57, %60, !dbg !29
  %62 = bitcast float %61 to i32, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %61, %64, !dbg !29
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !29
  %70 = bitcast float %36 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %36, %72, !dbg !29
  %74 = bitcast float %73 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %73, %76, !dbg !29
  %78 = bitcast float %77 to i32, !dbg !25
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = fadd float %77, %80, !dbg !29
  %82 = bitcast float %81 to i32, !dbg !25
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = fadd float %81, %84, !dbg !29
  %86 = bitcast float %37 to i32, !dbg !25
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = fadd float %37, %88, !dbg !29
  %90 = bitcast float %89 to i32, !dbg !25
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !25
  %92 = bitcast i32 %91 to float, !dbg !25
  %93 = fadd float %89, %92, !dbg !29
  %94 = bitcast float %93 to i32, !dbg !25
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = fadd float %93, %96, !dbg !29
  %98 = bitcast float %97 to i32, !dbg !25
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = fadd float %97, %100, !dbg !29
  %102 = icmp samesign ult i32 %9, 2, !dbg !25
  %103 = and i32 %15, 3, !dbg !25
  %104 = shl nuw nsw i32 %11, 2, !dbg !25
  %105 = or disjoint i32 %104, %103, !dbg !25
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !25
  %107 = bitcast float %53 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %102) #5, !dbg !25
  %108 = or disjoint i32 %104, 4, !dbg !25
  %109 = or disjoint i32 %108, %103, !dbg !25
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !25
  %111 = bitcast float %69 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 %102) #5, !dbg !25
  %112 = or disjoint i32 %104, 8, !dbg !25
  %113 = or disjoint i32 %112, %103, !dbg !25
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !25
  %115 = bitcast float %85 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 %102) #5, !dbg !25
  %116 = or disjoint i32 %104, 12, !dbg !25
  %117 = or disjoint i32 %116, %103, !dbg !25
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !25
  %119 = bitcast float %101 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 %102) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %120 = icmp slt i32 %8, 32, !dbg !25
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !25
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #5, !dbg !25
  %123 = bitcast i32 %122 to float, !dbg !25
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fadd float %123, %125, !dbg !29
  %127 = bitcast float %126 to i32, !dbg !25
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = fadd float %126, %129, !dbg !29
  %131 = and i32 %8, 3, !dbg !25
  %132 = icmp eq i32 %131, 0, !dbg !25
  %133 = and i1 %120, %132, !dbg !25
  %134 = bitcast float %130 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %134, i1 %133) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !25
  %136 = load float, ptr addrspace(3) %135, align 16, !dbg !25
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !25
  %138 = load float, ptr addrspace(3) %137, align 16, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !25
  %140 = load float, ptr addrspace(3) %139, align 16, !dbg !25
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !25
  %142 = load float, ptr addrspace(3) %141, align 16, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %144 = bitcast float %136 to i32, !dbg !31
  %145 = bitcast float %138 to i32, !dbg !31
  %146 = bitcast float %140 to i32, !dbg !31
  %147 = bitcast float %142 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %143, i32 %144, i32 %145, i32 %146, i32 %147, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !31
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 6.400000e+01) #5, !dbg !31
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 6.400000e+01) #5, !dbg !31
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 6.400000e+01) #5, !dbg !31
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 6.400000e+01) #5, !dbg !31
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 6.400000e+01) #5, !dbg !31
  %155 = fsub float %30, %151, !dbg !32
  %156 = fsub float %31, %152, !dbg !32
  %157 = fsub float %32, %153, !dbg !32
  %158 = fsub float %33, %154, !dbg !32
  %159 = fmul float %155, %155, !dbg !33
  %160 = fmul float %156, %156, !dbg !33
  %161 = fmul float %157, %157, !dbg !33
  %162 = fmul float %158, %158, !dbg !33
  %163 = select i1 %14, float %159, float 0.000000e+00, !dbg !34
  %164 = select i1 %14, float %160, float 0.000000e+00, !dbg !34
  %165 = select i1 %14, float %161, float 0.000000e+00, !dbg !34
  %166 = select i1 %14, float %162, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %167 = bitcast float %163 to i32, !dbg !35
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 16, i32 31), !dbg !35
  %169 = bitcast i32 %168 to float, !dbg !35
  %170 = fadd float %163, %169, !dbg !37
  %171 = bitcast float %170 to i32, !dbg !35
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !35
  %173 = bitcast i32 %172 to float, !dbg !35
  %174 = fadd float %170, %173, !dbg !37
  %175 = bitcast float %174 to i32, !dbg !35
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 4, i32 31), !dbg !35
  %177 = bitcast i32 %176 to float, !dbg !35
  %178 = fadd float %174, %177, !dbg !37
  %179 = bitcast float %178 to i32, !dbg !35
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 2, i32 31), !dbg !35
  %181 = bitcast i32 %180 to float, !dbg !35
  %182 = fadd float %178, %181, !dbg !37
  %183 = bitcast float %164 to i32, !dbg !35
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 16, i32 31), !dbg !35
  %185 = bitcast i32 %184 to float, !dbg !35
  %186 = fadd float %164, %185, !dbg !37
  %187 = bitcast float %186 to i32, !dbg !35
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !35
  %189 = bitcast i32 %188 to float, !dbg !35
  %190 = fadd float %186, %189, !dbg !37
  %191 = bitcast float %190 to i32, !dbg !35
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !35
  %193 = bitcast i32 %192 to float, !dbg !35
  %194 = fadd float %190, %193, !dbg !37
  %195 = bitcast float %194 to i32, !dbg !35
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 2, i32 31), !dbg !35
  %197 = bitcast i32 %196 to float, !dbg !35
  %198 = fadd float %194, %197, !dbg !37
  %199 = bitcast float %165 to i32, !dbg !35
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !35
  %201 = bitcast i32 %200 to float, !dbg !35
  %202 = fadd float %165, %201, !dbg !37
  %203 = bitcast float %202 to i32, !dbg !35
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !35
  %205 = bitcast i32 %204 to float, !dbg !35
  %206 = fadd float %202, %205, !dbg !37
  %207 = bitcast float %206 to i32, !dbg !35
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !35
  %209 = bitcast i32 %208 to float, !dbg !35
  %210 = fadd float %206, %209, !dbg !37
  %211 = bitcast float %210 to i32, !dbg !35
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !35
  %213 = bitcast i32 %212 to float, !dbg !35
  %214 = fadd float %210, %213, !dbg !37
  %215 = bitcast float %166 to i32, !dbg !35
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 16, i32 31), !dbg !35
  %217 = bitcast i32 %216 to float, !dbg !35
  %218 = fadd float %166, %217, !dbg !37
  %219 = bitcast float %218 to i32, !dbg !35
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 8, i32 31), !dbg !35
  %221 = bitcast i32 %220 to float, !dbg !35
  %222 = fadd float %218, %221, !dbg !37
  %223 = bitcast float %222 to i32, !dbg !35
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !35
  %225 = bitcast i32 %224 to float, !dbg !35
  %226 = fadd float %222, %225, !dbg !37
  %227 = bitcast float %226 to i32, !dbg !35
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !35
  %229 = bitcast i32 %228 to float, !dbg !35
  %230 = fadd float %226, %229, !dbg !37
  %231 = bitcast float %182 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %231, i1 %102) #5, !dbg !35
  %232 = bitcast float %198 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %232, i1 %102) #5, !dbg !35
  %233 = bitcast float %214 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %233, i1 %102) #5, !dbg !35
  %234 = bitcast float %230 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %234, i1 %102) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %120) #5, !dbg !35
  %236 = bitcast i32 %235 to float, !dbg !35
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = fadd float %236, %238, !dbg !37
  %240 = bitcast float %239 to i32, !dbg !35
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !35
  %242 = bitcast i32 %241 to float, !dbg !35
  %243 = fadd float %239, %242, !dbg !37
  %244 = bitcast float %243 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %244, i1 %133) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %245 = load i32, ptr addrspace(3) %135, align 16, !dbg !35
  %246 = load i32, ptr addrspace(3) %137, align 16, !dbg !35
  %247 = load i32, ptr addrspace(3) %139, align 16, !dbg !35
  %248 = load i32, ptr addrspace(3) %141, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %143, i32 %245, i32 %246, i32 %247, i32 %248, i1 true) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %249 = load float, ptr addrspace(3) %148, align 4, !dbg !38
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 6.400000e+01) #5, !dbg !39
  %251 = fadd float %250, 0x3EE4F8B580000000, !dbg !40
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %252, 0, !dbg !38
  br i1 %.not.i, label %255, label %253, !dbg !38

253:                                              ; preds = %5
  %254 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %251), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

255:                                              ; preds = %5
  %256 = tail call float @llvm.nvvm.rsqrt.approx.f(float %251), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %253, %255
  %.0.i = phi float [ %254, %253 ], [ %256, %255 ], !dbg !38
  %257 = or disjoint i32 %7, %12, !dbg !13
  %258 = icmp slt i32 %257, 512, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %259 = sext i32 %257 to i64, !dbg !42
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !42
  %261 = lshr i32 %9, 3, !dbg !43
  %262 = shl nuw nsw i32 %103, 2, !dbg !43
  %263 = or disjoint i32 %262, %261, !dbg !43
  %264 = icmp eq i32 %263, 0, !dbg !43
  %265 = bitcast float %.0.i to i32, !dbg !43
  %266 = and i1 %264, %258, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %260, i1 %266) #5, !dbg !43
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %259, !dbg !44
  %268 = bitcast float %150 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %267, i1 %266) #5, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdtowktg3jlqifd7up5nrmemcxra3zod2esq42z7msagpm2nddbq.py", directory: "inductor_cache/dt")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_28", linkageName: "triton_per_fused__native_batch_norm_legit_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 34, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 45, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 60, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 73, scope: !7)
!24 = !DILocation(line: 35, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 44, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 49, column: 28, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 4, scope: !7)
!42 = !DILocation(line: 51, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
