; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_23 = internal constant [8 x i8] c"unknown\00"
@assertFile_23 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_23 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp252 < 4\00"
@assertFunc_22 = internal constant [8 x i8] c"unknown\00"
@assertFile_22 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_22 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp247 < 4\00"
@assertFunc_21 = internal constant [8 x i8] c"unknown\00"
@assertFile_21 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_21 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp230 < 4\00"
@assertFunc_20 = internal constant [8 x i8] c"unknown\00"
@assertFile_20 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_20 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp225 < 4\00"
@assertFunc_19 = internal constant [8 x i8] c"unknown\00"
@assertFile_19 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_19 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp208 < 4\00"
@assertFunc_18 = internal constant [8 x i8] c"unknown\00"
@assertFile_18 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_18 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp203 < 4\00"
@assertFunc_17 = internal constant [8 x i8] c"unknown\00"
@assertFile_17 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_17 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp187 < 4\00"
@assertFunc_16 = internal constant [8 x i8] c"unknown\00"
@assertFile_16 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_16 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp182 < 4\00"
@assertFunc_15 = internal constant [8 x i8] c"unknown\00"
@assertFile_15 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_15 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp165 < 4\00"
@assertFunc_14 = internal constant [8 x i8] c"unknown\00"
@assertFile_14 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_14 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp160 < 4\00"
@assertFunc_13 = internal constant [8 x i8] c"unknown\00"
@assertFile_13 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_13 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp143 < 4\00"
@assertFunc_12 = internal constant [8 x i8] c"unknown\00"
@assertFile_12 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_12 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp138 < 4\00"
@assertFunc_11 = internal constant [8 x i8] c"unknown\00"
@assertFile_11 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_11 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp121 < 4\00"
@assertFunc_10 = internal constant [8 x i8] c"unknown\00"
@assertFile_10 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_10 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp116 < 4\00"
@assertFunc_9 = internal constant [8 x i8] c"unknown\00"
@assertFile_9 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_9 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp100 < 4\00"
@assertFunc_8 = internal constant [8 x i8] c"unknown\00"
@assertFile_8 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_8 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp95 < 4\00"
@assertFunc_7 = internal constant [8 x i8] c"unknown\00"
@assertFile_7 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_7 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp78 < 4\00"
@assertFunc_6 = internal constant [8 x i8] c"unknown\00"
@assertFile_6 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_6 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp73 < 4\00"
@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp55 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp50 < 4\00"
@assertFunc_3 = internal constant [8 x i8] c"unknown\00"
@assertFile_3 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_3 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp32 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp27 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_1 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/rw/crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !11 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %26 = shl i32 %25, 8, !dbg !13
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %28 = shl i32 %27, 1, !dbg !14
  %29 = and i32 %28, 254, !dbg !14
  %30 = or disjoint i32 %26, %29, !dbg !15
  %31 = icmp slt i32 %30, 1024, !dbg !16
  %.frozen = freeze i32 %30, !dbg !17
  %32 = sdiv i32 %.frozen, 16, !dbg !17
  %33 = mul i32 %32, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %33, !dbg !18
  %34 = shl i32 %32, 6, !dbg !19
  %35 = add i32 %34, %.decomposed, !dbg !20
  %36 = sext i32 %35 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !21
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %31) #4, !dbg !22
  %39 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !23
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 %31) #4, !dbg !24
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !24
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !24
  %43 = getelementptr i64, ptr addrspace(1) %2, i64 %36, !dbg !25
  %44 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %43, i1 %31) #4, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !27
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %31) #4, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !29
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %31) #4, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !31
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %31) #4, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !33
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %31) #4, !dbg !34
  %53 = add i32 %35, 16, !dbg !35
  %54 = sext i32 %53 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %31) #4, !dbg !37
  %57 = getelementptr i64, ptr addrspace(1) %1, i64 %54, !dbg !38
  %58 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %57, i1 %31) #4, !dbg !39
  %59 = extractvalue { i64, i64 } %58, 0, !dbg !39
  %60 = extractvalue { i64, i64 } %58, 1, !dbg !39
  %61 = getelementptr i64, ptr addrspace(1) %2, i64 %54, !dbg !40
  %62 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %61, i1 %31) #4, !dbg !41
  %63 = extractvalue { i64, i64 } %62, 0, !dbg !41
  %64 = extractvalue { i64, i64 } %62, 1, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !42
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %31) #4, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !44
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %31) #4, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %54, !dbg !46
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %31) #4, !dbg !47
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !48
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %31) #4, !dbg !49
  %73 = add i32 %35, 32, !dbg !50
  %74 = sext i32 %73 to i64, !dbg !51
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !51
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %31) #4, !dbg !52
  %77 = getelementptr i64, ptr addrspace(1) %1, i64 %74, !dbg !53
  %78 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %77, i1 %31) #4, !dbg !54
  %79 = extractvalue { i64, i64 } %78, 0, !dbg !54
  %80 = extractvalue { i64, i64 } %78, 1, !dbg !54
  %81 = getelementptr i64, ptr addrspace(1) %2, i64 %74, !dbg !55
  %82 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %81, i1 %31) #4, !dbg !56
  %83 = extractvalue { i64, i64 } %82, 0, !dbg !56
  %84 = extractvalue { i64, i64 } %82, 1, !dbg !56
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !57
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %31) #4, !dbg !58
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %74, !dbg !59
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %31) #4, !dbg !60
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !61
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %31) #4, !dbg !62
  %91 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !63
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 %31) #4, !dbg !64
  %93 = add i32 %35, 48, !dbg !65
  %94 = sext i32 %93 to i64, !dbg !66
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !66
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %31) #4, !dbg !67
  %97 = getelementptr i64, ptr addrspace(1) %1, i64 %94, !dbg !68
  %98 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %97, i1 %31) #4, !dbg !69
  %99 = extractvalue { i64, i64 } %98, 0, !dbg !69
  %100 = extractvalue { i64, i64 } %98, 1, !dbg !69
  %101 = getelementptr i64, ptr addrspace(1) %2, i64 %94, !dbg !70
  %102 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %101, i1 %31) #4, !dbg !71
  %103 = extractvalue { i64, i64 } %102, 0, !dbg !71
  %104 = extractvalue { i64, i64 } %102, 1, !dbg !71
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !72
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %105, i1 %31) #4, !dbg !73
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %94, !dbg !74
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %107, i1 %31) #4, !dbg !75
  %109 = getelementptr float, ptr addrspace(1) %6, i64 %94, !dbg !76
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %109, i1 %31) #4, !dbg !77
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %94, !dbg !78
  %112 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %111, i1 %31) #4, !dbg !79
  %113 = getelementptr i64, ptr addrspace(1) %8, i64 %36, !dbg !80
  %114 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %113, i1 %31) #4, !dbg !81
  %115 = extractvalue { i64, i64 } %114, 0, !dbg !81
  %116 = extractvalue { i64, i64 } %114, 1, !dbg !81
  %117 = getelementptr i64, ptr addrspace(1) %9, i64 %36, !dbg !82
  %118 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %117, i1 %31) #4, !dbg !83
  %119 = extractvalue { i64, i64 } %118, 0, !dbg !83
  %120 = extractvalue { i64, i64 } %118, 1, !dbg !83
  %121 = getelementptr float, ptr addrspace(1) %10, i64 %36, !dbg !84
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %121, i1 %31) #4, !dbg !85
  %123 = getelementptr float, ptr addrspace(1) %11, i64 %36, !dbg !86
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %123, i1 %31) #4, !dbg !87
  %125 = getelementptr float, ptr addrspace(1) %12, i64 %36, !dbg !88
  %126 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %125, i1 %31) #4, !dbg !89
  %127 = getelementptr float, ptr addrspace(1) %13, i64 %36, !dbg !90
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %127, i1 %31) #4, !dbg !91
  %129 = getelementptr i64, ptr addrspace(1) %8, i64 %54, !dbg !92
  %130 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %129, i1 %31) #4, !dbg !93
  %131 = extractvalue { i64, i64 } %130, 0, !dbg !93
  %132 = extractvalue { i64, i64 } %130, 1, !dbg !93
  %133 = getelementptr i64, ptr addrspace(1) %9, i64 %54, !dbg !94
  %134 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %133, i1 %31) #4, !dbg !95
  %135 = extractvalue { i64, i64 } %134, 0, !dbg !95
  %136 = extractvalue { i64, i64 } %134, 1, !dbg !95
  %137 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !96
  %138 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %137, i1 %31) #4, !dbg !97
  %139 = getelementptr float, ptr addrspace(1) %11, i64 %54, !dbg !98
  %140 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %139, i1 %31) #4, !dbg !99
  %141 = getelementptr float, ptr addrspace(1) %12, i64 %54, !dbg !100
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %141, i1 %31) #4, !dbg !101
  %143 = getelementptr float, ptr addrspace(1) %13, i64 %54, !dbg !102
  %144 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %143, i1 %31) #4, !dbg !103
  %145 = getelementptr i64, ptr addrspace(1) %8, i64 %74, !dbg !104
  %146 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %145, i1 %31) #4, !dbg !105
  %147 = extractvalue { i64, i64 } %146, 0, !dbg !105
  %148 = extractvalue { i64, i64 } %146, 1, !dbg !105
  %149 = getelementptr i64, ptr addrspace(1) %9, i64 %74, !dbg !106
  %150 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %149, i1 %31) #4, !dbg !107
  %151 = extractvalue { i64, i64 } %150, 0, !dbg !107
  %152 = extractvalue { i64, i64 } %150, 1, !dbg !107
  %153 = getelementptr float, ptr addrspace(1) %10, i64 %74, !dbg !108
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %153, i1 %31) #4, !dbg !109
  %155 = getelementptr float, ptr addrspace(1) %11, i64 %74, !dbg !110
  %156 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %155, i1 %31) #4, !dbg !111
  %157 = getelementptr float, ptr addrspace(1) %12, i64 %74, !dbg !112
  %158 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %157, i1 %31) #4, !dbg !113
  %159 = getelementptr float, ptr addrspace(1) %13, i64 %74, !dbg !114
  %160 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %159, i1 %31) #4, !dbg !115
  %161 = getelementptr i64, ptr addrspace(1) %8, i64 %94, !dbg !116
  %162 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %161, i1 %31) #4, !dbg !117
  %163 = extractvalue { i64, i64 } %162, 0, !dbg !117
  %164 = extractvalue { i64, i64 } %162, 1, !dbg !117
  %165 = getelementptr i64, ptr addrspace(1) %9, i64 %94, !dbg !118
  %166 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %165, i1 %31) #4, !dbg !119
  %167 = extractvalue { i64, i64 } %166, 0, !dbg !119
  %168 = extractvalue { i64, i64 } %166, 1, !dbg !119
  %169 = getelementptr float, ptr addrspace(1) %10, i64 %94, !dbg !120
  %170 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %169, i1 %31) #4, !dbg !121
  %171 = getelementptr float, ptr addrspace(1) %11, i64 %94, !dbg !122
  %172 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %171, i1 %31) #4, !dbg !123
  %173 = getelementptr float, ptr addrspace(1) %12, i64 %94, !dbg !124
  %174 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %173, i1 %31) #4, !dbg !125
  %175 = getelementptr float, ptr addrspace(1) %13, i64 %94, !dbg !126
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %175, i1 %31) #4, !dbg !127
  %177 = getelementptr i64, ptr addrspace(1) %14, i64 %36, !dbg !128
  %178 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %177, i1 %31) #4, !dbg !129
  %179 = extractvalue { i64, i64 } %178, 0, !dbg !129
  %180 = extractvalue { i64, i64 } %178, 1, !dbg !129
  %181 = getelementptr i64, ptr addrspace(1) %15, i64 %36, !dbg !130
  %182 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %181, i1 %31) #4, !dbg !131
  %183 = extractvalue { i64, i64 } %182, 0, !dbg !131
  %184 = extractvalue { i64, i64 } %182, 1, !dbg !131
  %185 = getelementptr float, ptr addrspace(1) %16, i64 %36, !dbg !132
  %186 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %185, i1 %31) #4, !dbg !133
  %187 = getelementptr float, ptr addrspace(1) %17, i64 %36, !dbg !134
  %188 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %187, i1 %31) #4, !dbg !135
  %189 = getelementptr float, ptr addrspace(1) %18, i64 %36, !dbg !136
  %190 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %189, i1 %31) #4, !dbg !137
  %191 = getelementptr float, ptr addrspace(1) %19, i64 %36, !dbg !138
  %192 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %191, i1 %31) #4, !dbg !139
  %193 = getelementptr i64, ptr addrspace(1) %14, i64 %54, !dbg !140
  %194 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %193, i1 %31) #4, !dbg !141
  %195 = extractvalue { i64, i64 } %194, 0, !dbg !141
  %196 = extractvalue { i64, i64 } %194, 1, !dbg !141
  %197 = getelementptr i64, ptr addrspace(1) %15, i64 %54, !dbg !142
  %198 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %197, i1 %31) #4, !dbg !143
  %199 = extractvalue { i64, i64 } %198, 0, !dbg !143
  %200 = extractvalue { i64, i64 } %198, 1, !dbg !143
  %201 = getelementptr float, ptr addrspace(1) %16, i64 %54, !dbg !144
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %201, i1 %31) #4, !dbg !145
  %203 = getelementptr float, ptr addrspace(1) %17, i64 %54, !dbg !146
  %204 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %203, i1 %31) #4, !dbg !147
  %205 = getelementptr float, ptr addrspace(1) %18, i64 %54, !dbg !148
  %206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %205, i1 %31) #4, !dbg !149
  %207 = getelementptr float, ptr addrspace(1) %19, i64 %54, !dbg !150
  %208 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %207, i1 %31) #4, !dbg !151
  %209 = getelementptr i64, ptr addrspace(1) %14, i64 %74, !dbg !152
  %210 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %209, i1 %31) #4, !dbg !153
  %211 = extractvalue { i64, i64 } %210, 0, !dbg !153
  %212 = extractvalue { i64, i64 } %210, 1, !dbg !153
  %213 = getelementptr i64, ptr addrspace(1) %15, i64 %74, !dbg !154
  %214 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %213, i1 %31) #4, !dbg !155
  %215 = extractvalue { i64, i64 } %214, 0, !dbg !155
  %216 = extractvalue { i64, i64 } %214, 1, !dbg !155
  %217 = getelementptr float, ptr addrspace(1) %16, i64 %74, !dbg !156
  %218 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %217, i1 %31) #4, !dbg !157
  %219 = getelementptr float, ptr addrspace(1) %17, i64 %74, !dbg !158
  %220 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %219, i1 %31) #4, !dbg !159
  %221 = getelementptr float, ptr addrspace(1) %18, i64 %74, !dbg !160
  %222 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %221, i1 %31) #4, !dbg !161
  %223 = getelementptr float, ptr addrspace(1) %19, i64 %74, !dbg !162
  %224 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %223, i1 %31) #4, !dbg !163
  %225 = getelementptr i64, ptr addrspace(1) %14, i64 %94, !dbg !164
  %226 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %225, i1 %31) #4, !dbg !165
  %227 = extractvalue { i64, i64 } %226, 0, !dbg !165
  %228 = extractvalue { i64, i64 } %226, 1, !dbg !165
  %229 = getelementptr i64, ptr addrspace(1) %15, i64 %94, !dbg !166
  %230 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %229, i1 %31) #4, !dbg !167
  %231 = extractvalue { i64, i64 } %230, 0, !dbg !167
  %232 = extractvalue { i64, i64 } %230, 1, !dbg !167
  %233 = getelementptr float, ptr addrspace(1) %16, i64 %94, !dbg !168
  %234 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %233, i1 %31) #4, !dbg !169
  %235 = getelementptr float, ptr addrspace(1) %17, i64 %94, !dbg !170
  %236 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %235, i1 %31) #4, !dbg !171
  %237 = getelementptr float, ptr addrspace(1) %18, i64 %94, !dbg !172
  %238 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %237, i1 %31) #4, !dbg !173
  %239 = getelementptr float, ptr addrspace(1) %19, i64 %94, !dbg !174
  %240 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %239, i1 %31) #4, !dbg !175
  %241 = insertelement <2 x i64> poison, i64 %41, i64 0, !dbg !176
  %242 = insertelement <2 x i64> %241, i64 %42, i64 1, !dbg !176
  %243 = lshr <2 x i64> %242, splat (i64 61), !dbg !176
  %244 = and <2 x i64> %243, splat (i64 4), !dbg !176
  %245 = add <2 x i64> %244, %242, !dbg !176
  %246 = extractelement <2 x i64> %245, i64 0, !dbg !177
  %247 = extractelement <2 x i64> %245, i64 1, !dbg !177
  %248 = or i64 %246, %247, !dbg !177
  %.not13 = icmp ugt i64 %248, 3, !dbg !177
  %249 = and i1 %31, %.not13, !dbg !177
  br i1 %249, label %250, label %251, !dbg !177

250:                                              ; preds = %24
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 107, ptr nonnull @assertFunc_0, i64 1), !dbg !177
  unreachable, !dbg !177

251:                                              ; preds = %24
  %252 = extractvalue { i64, i64 } %44, 1, !dbg !26
  %253 = extractvalue { i64, i64 } %44, 0, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !177
  %254 = insertelement <2 x i64> poison, i64 %253, i64 0, !dbg !178
  %255 = insertelement <2 x i64> %254, i64 %252, i64 1, !dbg !178
  %256 = lshr <2 x i64> %255, splat (i64 61), !dbg !178
  %257 = and <2 x i64> %256, splat (i64 4), !dbg !178
  %258 = add <2 x i64> %257, %255, !dbg !178
  %259 = extractelement <2 x i64> %258, i64 0, !dbg !179
  %260 = extractelement <2 x i64> %258, i64 1, !dbg !179
  %261 = or i64 %259, %260, !dbg !179
  %.not46 = icmp ugt i64 %261, 3, !dbg !179
  %262 = and i1 %31, %.not46, !dbg !179
  br i1 %262, label %263, label %264, !dbg !179

263:                                              ; preds = %251
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 111, ptr nonnull @assertFunc_1, i64 1), !dbg !179
  unreachable, !dbg !179

264:                                              ; preds = %251
  tail call void @llvm.nvvm.barrier0(), !dbg !179
  %265 = sext i32 %34 to i64, !dbg !180
  %266 = getelementptr float, ptr addrspace(1) %3, i64 %259, !dbg !181
  %.idx = shl i64 %246, 4, !dbg !181
  %267 = getelementptr i8, ptr addrspace(1) %266, i64 %.idx, !dbg !181
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %265, !dbg !181
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !181
  %.idx7 = shl i64 %247, 4, !dbg !181
  %270 = getelementptr i8, ptr addrspace(1) %269, i64 %.idx7, !dbg !181
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %265, !dbg !181
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 %31) #4, !dbg !182
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 %31) #4, !dbg !182
  %274 = insertelement <2 x i64> poison, i64 %59, i64 0, !dbg !183
  %275 = insertelement <2 x i64> %274, i64 %60, i64 1, !dbg !183
  %276 = lshr <2 x i64> %275, splat (i64 61), !dbg !183
  %277 = and <2 x i64> %276, splat (i64 4), !dbg !183
  %278 = add <2 x i64> %277, %275, !dbg !183
  %279 = extractelement <2 x i64> %278, i64 0, !dbg !184
  %280 = extractelement <2 x i64> %278, i64 1, !dbg !184
  %281 = or i64 %279, %280, !dbg !184
  %.not810 = icmp ugt i64 %281, 3, !dbg !184
  %282 = and i1 %31, %.not810, !dbg !184
  br i1 %282, label %283, label %284, !dbg !184

283:                                              ; preds = %264
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 122, ptr nonnull @assertFunc_2, i64 1), !dbg !184
  unreachable, !dbg !184

284:                                              ; preds = %264
  tail call void @llvm.nvvm.barrier0(), !dbg !184
  %285 = insertelement <2 x i64> poison, i64 %63, i64 0, !dbg !185
  %286 = insertelement <2 x i64> %285, i64 %64, i64 1, !dbg !185
  %287 = lshr <2 x i64> %286, splat (i64 61), !dbg !185
  %288 = and <2 x i64> %287, splat (i64 4), !dbg !185
  %289 = add <2 x i64> %288, %286, !dbg !185
  %290 = extractelement <2 x i64> %289, i64 0, !dbg !186
  %291 = extractelement <2 x i64> %289, i64 1, !dbg !186
  %292 = or i64 %290, %291, !dbg !186
  %.not1113 = icmp ugt i64 %292, 3, !dbg !186
  %293 = and i1 %31, %.not1113, !dbg !186
  br i1 %293, label %294, label %295, !dbg !186

294:                                              ; preds = %284
  tail call void @__assertfail(ptr nonnull @assertMessage_3, ptr nonnull @assertFile_3, i32 126, ptr nonnull @assertFunc_3, i64 1), !dbg !186
  unreachable, !dbg !186

295:                                              ; preds = %284
  tail call void @llvm.nvvm.barrier0(), !dbg !186
  %296 = getelementptr float, ptr addrspace(1) %3, i64 %290, !dbg !187
  %297 = getelementptr i8, ptr addrspace(1) %296, i64 64, !dbg !187
  %.idx14 = shl i64 %279, 4, !dbg !187
  %298 = getelementptr i8, ptr addrspace(1) %297, i64 %.idx14, !dbg !187
  %299 = getelementptr float, ptr addrspace(1) %298, i64 %265, !dbg !187
  %300 = getelementptr float, ptr addrspace(1) %3, i64 %291, !dbg !187
  %301 = getelementptr i8, ptr addrspace(1) %300, i64 64, !dbg !187
  %.idx15 = shl i64 %280, 4, !dbg !187
  %302 = getelementptr i8, ptr addrspace(1) %301, i64 %.idx15, !dbg !187
  %303 = getelementptr float, ptr addrspace(1) %302, i64 %265, !dbg !187
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %31) #4, !dbg !188
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 %31) #4, !dbg !188
  %306 = insertelement <2 x i64> poison, i64 %79, i64 0, !dbg !189
  %307 = insertelement <2 x i64> %306, i64 %80, i64 1, !dbg !189
  %308 = lshr <2 x i64> %307, splat (i64 61), !dbg !189
  %309 = and <2 x i64> %308, splat (i64 4), !dbg !189
  %310 = add <2 x i64> %309, %307, !dbg !189
  %311 = extractelement <2 x i64> %310, i64 0, !dbg !190
  %312 = extractelement <2 x i64> %310, i64 1, !dbg !190
  %313 = or i64 %311, %312, !dbg !190
  %.not1618 = icmp ugt i64 %313, 3, !dbg !190
  %314 = and i1 %31, %.not1618, !dbg !190
  br i1 %314, label %315, label %316, !dbg !190

315:                                              ; preds = %295
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 138, ptr nonnull @assertFunc_4, i64 1), !dbg !190
  unreachable, !dbg !190

316:                                              ; preds = %295
  tail call void @llvm.nvvm.barrier0(), !dbg !190
  %317 = insertelement <2 x i64> poison, i64 %83, i64 0, !dbg !191
  %318 = insertelement <2 x i64> %317, i64 %84, i64 1, !dbg !191
  %319 = lshr <2 x i64> %318, splat (i64 61), !dbg !191
  %320 = and <2 x i64> %319, splat (i64 4), !dbg !191
  %321 = add <2 x i64> %320, %318, !dbg !191
  %322 = extractelement <2 x i64> %321, i64 0, !dbg !192
  %323 = extractelement <2 x i64> %321, i64 1, !dbg !192
  %324 = or i64 %322, %323, !dbg !192
  %.not1921 = icmp ugt i64 %324, 3, !dbg !192
  %325 = and i1 %31, %.not1921, !dbg !192
  br i1 %325, label %326, label %327, !dbg !192

326:                                              ; preds = %316
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 142, ptr nonnull @assertFunc_5, i64 1), !dbg !192
  unreachable, !dbg !192

327:                                              ; preds = %316
  tail call void @llvm.nvvm.barrier0(), !dbg !192
  %328 = getelementptr float, ptr addrspace(1) %3, i64 %322, !dbg !193
  %329 = getelementptr i8, ptr addrspace(1) %328, i64 128, !dbg !193
  %.idx22 = shl i64 %311, 4, !dbg !193
  %330 = getelementptr i8, ptr addrspace(1) %329, i64 %.idx22, !dbg !193
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %265, !dbg !193
  %332 = getelementptr float, ptr addrspace(1) %3, i64 %323, !dbg !193
  %333 = getelementptr i8, ptr addrspace(1) %332, i64 128, !dbg !193
  %.idx23 = shl i64 %312, 4, !dbg !193
  %334 = getelementptr i8, ptr addrspace(1) %333, i64 %.idx23, !dbg !193
  %335 = getelementptr float, ptr addrspace(1) %334, i64 %265, !dbg !193
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %31) #4, !dbg !194
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %31) #4, !dbg !194
  %338 = insertelement <2 x i64> poison, i64 %99, i64 0, !dbg !195
  %339 = insertelement <2 x i64> %338, i64 %100, i64 1, !dbg !195
  %340 = lshr <2 x i64> %339, splat (i64 61), !dbg !195
  %341 = and <2 x i64> %340, splat (i64 4), !dbg !195
  %342 = add <2 x i64> %341, %339, !dbg !195
  %343 = extractelement <2 x i64> %342, i64 0, !dbg !196
  %344 = extractelement <2 x i64> %342, i64 1, !dbg !196
  %345 = or i64 %343, %344, !dbg !196
  %.not2426 = icmp ugt i64 %345, 3, !dbg !196
  %346 = and i1 %31, %.not2426, !dbg !196
  br i1 %346, label %347, label %348, !dbg !196

347:                                              ; preds = %327
  tail call void @__assertfail(ptr nonnull @assertMessage_6, ptr nonnull @assertFile_6, i32 154, ptr nonnull @assertFunc_6, i64 1), !dbg !196
  unreachable, !dbg !196

348:                                              ; preds = %327
  tail call void @llvm.nvvm.barrier0(), !dbg !196
  %349 = insertelement <2 x i64> poison, i64 %103, i64 0, !dbg !197
  %350 = insertelement <2 x i64> %349, i64 %104, i64 1, !dbg !197
  %351 = lshr <2 x i64> %350, splat (i64 61), !dbg !197
  %352 = and <2 x i64> %351, splat (i64 4), !dbg !197
  %353 = add <2 x i64> %352, %350, !dbg !197
  %354 = extractelement <2 x i64> %353, i64 0, !dbg !198
  %355 = extractelement <2 x i64> %353, i64 1, !dbg !198
  %356 = or i64 %354, %355, !dbg !198
  %.not2729 = icmp ugt i64 %356, 3, !dbg !198
  %357 = and i1 %31, %.not2729, !dbg !198
  br i1 %357, label %358, label %359, !dbg !198

358:                                              ; preds = %348
  tail call void @__assertfail(ptr nonnull @assertMessage_7, ptr nonnull @assertFile_7, i32 158, ptr nonnull @assertFunc_7, i64 1), !dbg !198
  unreachable, !dbg !198

359:                                              ; preds = %348
  tail call void @llvm.nvvm.barrier0(), !dbg !198
  %360 = getelementptr float, ptr addrspace(1) %3, i64 %354, !dbg !199
  %361 = getelementptr i8, ptr addrspace(1) %360, i64 192, !dbg !199
  %.idx30 = shl i64 %343, 4, !dbg !199
  %362 = getelementptr i8, ptr addrspace(1) %361, i64 %.idx30, !dbg !199
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %265, !dbg !199
  %364 = getelementptr float, ptr addrspace(1) %3, i64 %355, !dbg !199
  %365 = getelementptr i8, ptr addrspace(1) %364, i64 192, !dbg !199
  %.idx31 = shl i64 %344, 4, !dbg !199
  %366 = getelementptr i8, ptr addrspace(1) %365, i64 %.idx31, !dbg !199
  %367 = getelementptr float, ptr addrspace(1) %366, i64 %265, !dbg !199
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 %31) #4, !dbg !200
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %31) #4, !dbg !200
  %370 = insertelement <2 x i64> poison, i64 %115, i64 0, !dbg !201
  %371 = insertelement <2 x i64> %370, i64 %116, i64 1, !dbg !201
  %372 = lshr <2 x i64> %371, splat (i64 61), !dbg !201
  %373 = and <2 x i64> %372, splat (i64 4), !dbg !201
  %374 = add <2 x i64> %373, %371, !dbg !201
  %375 = extractelement <2 x i64> %374, i64 0, !dbg !202
  %376 = extractelement <2 x i64> %374, i64 1, !dbg !202
  %377 = or i64 %375, %376, !dbg !202
  %.not3234 = icmp ugt i64 %377, 3, !dbg !202
  %378 = and i1 %31, %.not3234, !dbg !202
  br i1 %378, label %379, label %380, !dbg !202

379:                                              ; preds = %359
  tail call void @__assertfail(ptr nonnull @assertMessage_8, ptr nonnull @assertFile_8, i32 170, ptr nonnull @assertFunc_8, i64 1), !dbg !202
  unreachable, !dbg !202

380:                                              ; preds = %359
  tail call void @llvm.nvvm.barrier0(), !dbg !202
  %381 = insertelement <2 x i64> poison, i64 %119, i64 0, !dbg !203
  %382 = insertelement <2 x i64> %381, i64 %120, i64 1, !dbg !203
  %383 = lshr <2 x i64> %382, splat (i64 61), !dbg !203
  %384 = and <2 x i64> %383, splat (i64 4), !dbg !203
  %385 = add <2 x i64> %384, %382, !dbg !203
  %386 = extractelement <2 x i64> %385, i64 0, !dbg !204
  %387 = extractelement <2 x i64> %385, i64 1, !dbg !204
  %388 = or i64 %386, %387, !dbg !204
  %.not3537 = icmp ugt i64 %388, 3, !dbg !204
  %389 = and i1 %31, %.not3537, !dbg !204
  br i1 %389, label %390, label %391, !dbg !204

390:                                              ; preds = %380
  tail call void @__assertfail(ptr nonnull @assertMessage_9, ptr nonnull @assertFile_9, i32 174, ptr nonnull @assertFunc_9, i64 1), !dbg !204
  unreachable, !dbg !204

391:                                              ; preds = %380
  tail call void @llvm.nvvm.barrier0(), !dbg !204
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %386, !dbg !205
  %.idx38 = shl i64 %375, 4, !dbg !205
  %393 = getelementptr i8, ptr addrspace(1) %392, i64 %.idx38, !dbg !205
  %394 = getelementptr float, ptr addrspace(1) %393, i64 %265, !dbg !205
  %395 = getelementptr float, ptr addrspace(1) %3, i64 %387, !dbg !205
  %.idx39 = shl i64 %376, 4, !dbg !205
  %396 = getelementptr i8, ptr addrspace(1) %395, i64 %.idx39, !dbg !205
  %397 = getelementptr float, ptr addrspace(1) %396, i64 %265, !dbg !205
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %394, i1 %31) #4, !dbg !206
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 %31) #4, !dbg !206
  %400 = insertelement <2 x i64> poison, i64 %131, i64 0, !dbg !207
  %401 = insertelement <2 x i64> %400, i64 %132, i64 1, !dbg !207
  %402 = lshr <2 x i64> %401, splat (i64 61), !dbg !207
  %403 = and <2 x i64> %402, splat (i64 4), !dbg !207
  %404 = add <2 x i64> %403, %401, !dbg !207
  %405 = extractelement <2 x i64> %404, i64 0, !dbg !208
  %406 = extractelement <2 x i64> %404, i64 1, !dbg !208
  %407 = or i64 %405, %406, !dbg !208
  %.not4042 = icmp ugt i64 %407, 3, !dbg !208
  %408 = and i1 %31, %.not4042, !dbg !208
  br i1 %408, label %409, label %410, !dbg !208

409:                                              ; preds = %391
  tail call void @__assertfail(ptr nonnull @assertMessage_10, ptr nonnull @assertFile_10, i32 185, ptr nonnull @assertFunc_10, i64 1), !dbg !208
  unreachable, !dbg !208

410:                                              ; preds = %391
  tail call void @llvm.nvvm.barrier0(), !dbg !208
  %411 = insertelement <2 x i64> poison, i64 %135, i64 0, !dbg !209
  %412 = insertelement <2 x i64> %411, i64 %136, i64 1, !dbg !209
  %413 = lshr <2 x i64> %412, splat (i64 61), !dbg !209
  %414 = and <2 x i64> %413, splat (i64 4), !dbg !209
  %415 = add <2 x i64> %414, %412, !dbg !209
  %416 = extractelement <2 x i64> %415, i64 0, !dbg !210
  %417 = extractelement <2 x i64> %415, i64 1, !dbg !210
  %418 = or i64 %416, %417, !dbg !210
  %.not4345 = icmp ugt i64 %418, 3, !dbg !210
  %419 = and i1 %31, %.not4345, !dbg !210
  br i1 %419, label %420, label %421, !dbg !210

420:                                              ; preds = %410
  tail call void @__assertfail(ptr nonnull @assertMessage_11, ptr nonnull @assertFile_11, i32 189, ptr nonnull @assertFunc_11, i64 1), !dbg !210
  unreachable, !dbg !210

421:                                              ; preds = %410
  tail call void @llvm.nvvm.barrier0(), !dbg !210
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %416, !dbg !211
  %423 = getelementptr i8, ptr addrspace(1) %422, i64 64, !dbg !211
  %.idx46 = shl i64 %405, 4, !dbg !211
  %424 = getelementptr i8, ptr addrspace(1) %423, i64 %.idx46, !dbg !211
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %265, !dbg !211
  %426 = getelementptr float, ptr addrspace(1) %3, i64 %417, !dbg !211
  %427 = getelementptr i8, ptr addrspace(1) %426, i64 64, !dbg !211
  %.idx47 = shl i64 %406, 4, !dbg !211
  %428 = getelementptr i8, ptr addrspace(1) %427, i64 %.idx47, !dbg !211
  %429 = getelementptr float, ptr addrspace(1) %428, i64 %265, !dbg !211
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %31) #4, !dbg !212
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %429, i1 %31) #4, !dbg !212
  %432 = insertelement <2 x i64> poison, i64 %147, i64 0, !dbg !213
  %433 = insertelement <2 x i64> %432, i64 %148, i64 1, !dbg !213
  %434 = lshr <2 x i64> %433, splat (i64 61), !dbg !213
  %435 = and <2 x i64> %434, splat (i64 4), !dbg !213
  %436 = add <2 x i64> %435, %433, !dbg !213
  %437 = extractelement <2 x i64> %436, i64 0, !dbg !214
  %438 = extractelement <2 x i64> %436, i64 1, !dbg !214
  %439 = or i64 %437, %438, !dbg !214
  %.not4850 = icmp ugt i64 %439, 3, !dbg !214
  %440 = and i1 %31, %.not4850, !dbg !214
  br i1 %440, label %441, label %442, !dbg !214

441:                                              ; preds = %421
  tail call void @__assertfail(ptr nonnull @assertMessage_12, ptr nonnull @assertFile_12, i32 201, ptr nonnull @assertFunc_12, i64 1), !dbg !214
  unreachable, !dbg !214

442:                                              ; preds = %421
  tail call void @llvm.nvvm.barrier0(), !dbg !214
  %443 = insertelement <2 x i64> poison, i64 %151, i64 0, !dbg !215
  %444 = insertelement <2 x i64> %443, i64 %152, i64 1, !dbg !215
  %445 = lshr <2 x i64> %444, splat (i64 61), !dbg !215
  %446 = and <2 x i64> %445, splat (i64 4), !dbg !215
  %447 = add <2 x i64> %446, %444, !dbg !215
  %448 = extractelement <2 x i64> %447, i64 0, !dbg !216
  %449 = extractelement <2 x i64> %447, i64 1, !dbg !216
  %450 = or i64 %448, %449, !dbg !216
  %.not5153 = icmp ugt i64 %450, 3, !dbg !216
  %451 = and i1 %31, %.not5153, !dbg !216
  br i1 %451, label %452, label %453, !dbg !216

452:                                              ; preds = %442
  tail call void @__assertfail(ptr nonnull @assertMessage_13, ptr nonnull @assertFile_13, i32 205, ptr nonnull @assertFunc_13, i64 1), !dbg !216
  unreachable, !dbg !216

453:                                              ; preds = %442
  tail call void @llvm.nvvm.barrier0(), !dbg !216
  %454 = getelementptr float, ptr addrspace(1) %3, i64 %448, !dbg !217
  %455 = getelementptr i8, ptr addrspace(1) %454, i64 128, !dbg !217
  %.idx54 = shl i64 %437, 4, !dbg !217
  %456 = getelementptr i8, ptr addrspace(1) %455, i64 %.idx54, !dbg !217
  %457 = getelementptr float, ptr addrspace(1) %456, i64 %265, !dbg !217
  %458 = getelementptr float, ptr addrspace(1) %3, i64 %449, !dbg !217
  %459 = getelementptr i8, ptr addrspace(1) %458, i64 128, !dbg !217
  %.idx55 = shl i64 %438, 4, !dbg !217
  %460 = getelementptr i8, ptr addrspace(1) %459, i64 %.idx55, !dbg !217
  %461 = getelementptr float, ptr addrspace(1) %460, i64 %265, !dbg !217
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %457, i1 %31) #4, !dbg !218
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %461, i1 %31) #4, !dbg !218
  %464 = insertelement <2 x i64> poison, i64 %163, i64 0, !dbg !219
  %465 = insertelement <2 x i64> %464, i64 %164, i64 1, !dbg !219
  %466 = lshr <2 x i64> %465, splat (i64 61), !dbg !219
  %467 = and <2 x i64> %466, splat (i64 4), !dbg !219
  %468 = add <2 x i64> %467, %465, !dbg !219
  %469 = extractelement <2 x i64> %468, i64 0, !dbg !220
  %470 = extractelement <2 x i64> %468, i64 1, !dbg !220
  %471 = or i64 %469, %470, !dbg !220
  %.not5658 = icmp ugt i64 %471, 3, !dbg !220
  %472 = and i1 %31, %.not5658, !dbg !220
  br i1 %472, label %473, label %474, !dbg !220

473:                                              ; preds = %453
  tail call void @__assertfail(ptr nonnull @assertMessage_14, ptr nonnull @assertFile_14, i32 217, ptr nonnull @assertFunc_14, i64 1), !dbg !220
  unreachable, !dbg !220

474:                                              ; preds = %453
  tail call void @llvm.nvvm.barrier0(), !dbg !220
  %475 = insertelement <2 x i64> poison, i64 %167, i64 0, !dbg !221
  %476 = insertelement <2 x i64> %475, i64 %168, i64 1, !dbg !221
  %477 = lshr <2 x i64> %476, splat (i64 61), !dbg !221
  %478 = and <2 x i64> %477, splat (i64 4), !dbg !221
  %479 = add <2 x i64> %478, %476, !dbg !221
  %480 = extractelement <2 x i64> %479, i64 0, !dbg !222
  %481 = extractelement <2 x i64> %479, i64 1, !dbg !222
  %482 = or i64 %480, %481, !dbg !222
  %.not5961 = icmp ugt i64 %482, 3, !dbg !222
  %483 = and i1 %31, %.not5961, !dbg !222
  br i1 %483, label %484, label %485, !dbg !222

484:                                              ; preds = %474
  tail call void @__assertfail(ptr nonnull @assertMessage_15, ptr nonnull @assertFile_15, i32 221, ptr nonnull @assertFunc_15, i64 1), !dbg !222
  unreachable, !dbg !222

485:                                              ; preds = %474
  tail call void @llvm.nvvm.barrier0(), !dbg !222
  %486 = getelementptr float, ptr addrspace(1) %3, i64 %480, !dbg !223
  %487 = getelementptr i8, ptr addrspace(1) %486, i64 192, !dbg !223
  %.idx62 = shl i64 %469, 4, !dbg !223
  %488 = getelementptr i8, ptr addrspace(1) %487, i64 %.idx62, !dbg !223
  %489 = getelementptr float, ptr addrspace(1) %488, i64 %265, !dbg !223
  %490 = getelementptr float, ptr addrspace(1) %3, i64 %481, !dbg !223
  %491 = getelementptr i8, ptr addrspace(1) %490, i64 192, !dbg !223
  %.idx63 = shl i64 %470, 4, !dbg !223
  %492 = getelementptr i8, ptr addrspace(1) %491, i64 %.idx63, !dbg !223
  %493 = getelementptr float, ptr addrspace(1) %492, i64 %265, !dbg !223
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %489, i1 %31) #4, !dbg !224
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %493, i1 %31) #4, !dbg !224
  %496 = insertelement <2 x i64> poison, i64 %179, i64 0, !dbg !225
  %497 = insertelement <2 x i64> %496, i64 %180, i64 1, !dbg !225
  %498 = lshr <2 x i64> %497, splat (i64 61), !dbg !225
  %499 = and <2 x i64> %498, splat (i64 4), !dbg !225
  %500 = add <2 x i64> %499, %497, !dbg !225
  %501 = extractelement <2 x i64> %500, i64 0, !dbg !226
  %502 = extractelement <2 x i64> %500, i64 1, !dbg !226
  %503 = or i64 %501, %502, !dbg !226
  %.not6466 = icmp ugt i64 %503, 3, !dbg !226
  %504 = and i1 %31, %.not6466, !dbg !226
  br i1 %504, label %505, label %506, !dbg !226

505:                                              ; preds = %485
  tail call void @__assertfail(ptr nonnull @assertMessage_16, ptr nonnull @assertFile_16, i32 233, ptr nonnull @assertFunc_16, i64 1), !dbg !226
  unreachable, !dbg !226

506:                                              ; preds = %485
  tail call void @llvm.nvvm.barrier0(), !dbg !226
  %507 = insertelement <2 x i64> poison, i64 %183, i64 0, !dbg !227
  %508 = insertelement <2 x i64> %507, i64 %184, i64 1, !dbg !227
  %509 = lshr <2 x i64> %508, splat (i64 61), !dbg !227
  %510 = and <2 x i64> %509, splat (i64 4), !dbg !227
  %511 = add <2 x i64> %510, %508, !dbg !227
  %512 = extractelement <2 x i64> %511, i64 0, !dbg !228
  %513 = extractelement <2 x i64> %511, i64 1, !dbg !228
  %514 = or i64 %512, %513, !dbg !228
  %.not6769 = icmp ugt i64 %514, 3, !dbg !228
  %515 = and i1 %31, %.not6769, !dbg !228
  br i1 %515, label %516, label %517, !dbg !228

516:                                              ; preds = %506
  tail call void @__assertfail(ptr nonnull @assertMessage_17, ptr nonnull @assertFile_17, i32 237, ptr nonnull @assertFunc_17, i64 1), !dbg !228
  unreachable, !dbg !228

517:                                              ; preds = %506
  tail call void @llvm.nvvm.barrier0(), !dbg !228
  %518 = getelementptr float, ptr addrspace(1) %3, i64 %512, !dbg !229
  %.idx70 = shl i64 %501, 4, !dbg !229
  %519 = getelementptr i8, ptr addrspace(1) %518, i64 %.idx70, !dbg !229
  %520 = getelementptr float, ptr addrspace(1) %519, i64 %265, !dbg !229
  %521 = getelementptr float, ptr addrspace(1) %3, i64 %513, !dbg !229
  %.idx71 = shl i64 %502, 4, !dbg !229
  %522 = getelementptr i8, ptr addrspace(1) %521, i64 %.idx71, !dbg !229
  %523 = getelementptr float, ptr addrspace(1) %522, i64 %265, !dbg !229
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %520, i1 %31) #4, !dbg !230
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %523, i1 %31) #4, !dbg !230
  %526 = insertelement <2 x i64> poison, i64 %195, i64 0, !dbg !231
  %527 = insertelement <2 x i64> %526, i64 %196, i64 1, !dbg !231
  %528 = lshr <2 x i64> %527, splat (i64 61), !dbg !231
  %529 = and <2 x i64> %528, splat (i64 4), !dbg !231
  %530 = add <2 x i64> %529, %527, !dbg !231
  %531 = extractelement <2 x i64> %530, i64 0, !dbg !232
  %532 = extractelement <2 x i64> %530, i64 1, !dbg !232
  %533 = or i64 %531, %532, !dbg !232
  %.not7274 = icmp ugt i64 %533, 3, !dbg !232
  %534 = and i1 %31, %.not7274, !dbg !232
  br i1 %534, label %535, label %536, !dbg !232

535:                                              ; preds = %517
  tail call void @__assertfail(ptr nonnull @assertMessage_18, ptr nonnull @assertFile_18, i32 248, ptr nonnull @assertFunc_18, i64 1), !dbg !232
  unreachable, !dbg !232

536:                                              ; preds = %517
  tail call void @llvm.nvvm.barrier0(), !dbg !232
  %537 = insertelement <2 x i64> poison, i64 %199, i64 0, !dbg !233
  %538 = insertelement <2 x i64> %537, i64 %200, i64 1, !dbg !233
  %539 = lshr <2 x i64> %538, splat (i64 61), !dbg !233
  %540 = and <2 x i64> %539, splat (i64 4), !dbg !233
  %541 = add <2 x i64> %540, %538, !dbg !233
  %542 = extractelement <2 x i64> %541, i64 0, !dbg !234
  %543 = extractelement <2 x i64> %541, i64 1, !dbg !234
  %544 = or i64 %542, %543, !dbg !234
  %.not7577 = icmp ugt i64 %544, 3, !dbg !234
  %545 = and i1 %31, %.not7577, !dbg !234
  br i1 %545, label %546, label %547, !dbg !234

546:                                              ; preds = %536
  tail call void @__assertfail(ptr nonnull @assertMessage_19, ptr nonnull @assertFile_19, i32 252, ptr nonnull @assertFunc_19, i64 1), !dbg !234
  unreachable, !dbg !234

547:                                              ; preds = %536
  tail call void @llvm.nvvm.barrier0(), !dbg !234
  %548 = getelementptr float, ptr addrspace(1) %3, i64 %542, !dbg !235
  %549 = getelementptr i8, ptr addrspace(1) %548, i64 64, !dbg !235
  %.idx78 = shl i64 %531, 4, !dbg !235
  %550 = getelementptr i8, ptr addrspace(1) %549, i64 %.idx78, !dbg !235
  %551 = getelementptr float, ptr addrspace(1) %550, i64 %265, !dbg !235
  %552 = getelementptr float, ptr addrspace(1) %3, i64 %543, !dbg !235
  %553 = getelementptr i8, ptr addrspace(1) %552, i64 64, !dbg !235
  %.idx79 = shl i64 %532, 4, !dbg !235
  %554 = getelementptr i8, ptr addrspace(1) %553, i64 %.idx79, !dbg !235
  %555 = getelementptr float, ptr addrspace(1) %554, i64 %265, !dbg !235
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %551, i1 %31) #4, !dbg !236
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %555, i1 %31) #4, !dbg !236
  %558 = insertelement <2 x i64> poison, i64 %211, i64 0, !dbg !237
  %559 = insertelement <2 x i64> %558, i64 %212, i64 1, !dbg !237
  %560 = lshr <2 x i64> %559, splat (i64 61), !dbg !237
  %561 = and <2 x i64> %560, splat (i64 4), !dbg !237
  %562 = add <2 x i64> %561, %559, !dbg !237
  %563 = extractelement <2 x i64> %562, i64 0, !dbg !238
  %564 = extractelement <2 x i64> %562, i64 1, !dbg !238
  %565 = or i64 %563, %564, !dbg !238
  %.not8082 = icmp ugt i64 %565, 3, !dbg !238
  %566 = and i1 %31, %.not8082, !dbg !238
  br i1 %566, label %567, label %568, !dbg !238

567:                                              ; preds = %547
  tail call void @__assertfail(ptr nonnull @assertMessage_20, ptr nonnull @assertFile_20, i32 264, ptr nonnull @assertFunc_20, i64 1), !dbg !238
  unreachable, !dbg !238

568:                                              ; preds = %547
  tail call void @llvm.nvvm.barrier0(), !dbg !238
  %569 = insertelement <2 x i64> poison, i64 %215, i64 0, !dbg !239
  %570 = insertelement <2 x i64> %569, i64 %216, i64 1, !dbg !239
  %571 = lshr <2 x i64> %570, splat (i64 61), !dbg !239
  %572 = and <2 x i64> %571, splat (i64 4), !dbg !239
  %573 = add <2 x i64> %572, %570, !dbg !239
  %574 = extractelement <2 x i64> %573, i64 0, !dbg !240
  %575 = extractelement <2 x i64> %573, i64 1, !dbg !240
  %576 = or i64 %574, %575, !dbg !240
  %.not8385 = icmp ugt i64 %576, 3, !dbg !240
  %577 = and i1 %31, %.not8385, !dbg !240
  br i1 %577, label %578, label %579, !dbg !240

578:                                              ; preds = %568
  tail call void @__assertfail(ptr nonnull @assertMessage_21, ptr nonnull @assertFile_21, i32 268, ptr nonnull @assertFunc_21, i64 1), !dbg !240
  unreachable, !dbg !240

579:                                              ; preds = %568
  tail call void @llvm.nvvm.barrier0(), !dbg !240
  %580 = getelementptr float, ptr addrspace(1) %3, i64 %574, !dbg !241
  %581 = getelementptr i8, ptr addrspace(1) %580, i64 128, !dbg !241
  %.idx86 = shl i64 %563, 4, !dbg !241
  %582 = getelementptr i8, ptr addrspace(1) %581, i64 %.idx86, !dbg !241
  %583 = getelementptr float, ptr addrspace(1) %582, i64 %265, !dbg !241
  %584 = getelementptr float, ptr addrspace(1) %3, i64 %575, !dbg !241
  %585 = getelementptr i8, ptr addrspace(1) %584, i64 128, !dbg !241
  %.idx87 = shl i64 %564, 4, !dbg !241
  %586 = getelementptr i8, ptr addrspace(1) %585, i64 %.idx87, !dbg !241
  %587 = getelementptr float, ptr addrspace(1) %586, i64 %265, !dbg !241
  %588 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %583, i1 %31) #4, !dbg !242
  %589 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %587, i1 %31) #4, !dbg !242
  %590 = insertelement <2 x i64> poison, i64 %227, i64 0, !dbg !243
  %591 = insertelement <2 x i64> %590, i64 %228, i64 1, !dbg !243
  %592 = lshr <2 x i64> %591, splat (i64 61), !dbg !243
  %593 = and <2 x i64> %592, splat (i64 4), !dbg !243
  %594 = add <2 x i64> %593, %591, !dbg !243
  %595 = extractelement <2 x i64> %594, i64 0, !dbg !244
  %596 = extractelement <2 x i64> %594, i64 1, !dbg !244
  %597 = or i64 %595, %596, !dbg !244
  %.not8890 = icmp ugt i64 %597, 3, !dbg !244
  %598 = and i1 %31, %.not8890, !dbg !244
  br i1 %598, label %599, label %600, !dbg !244

599:                                              ; preds = %579
  tail call void @__assertfail(ptr nonnull @assertMessage_22, ptr nonnull @assertFile_22, i32 280, ptr nonnull @assertFunc_22, i64 1), !dbg !244
  unreachable, !dbg !244

600:                                              ; preds = %579
  tail call void @llvm.nvvm.barrier0(), !dbg !244
  %601 = insertelement <2 x i64> poison, i64 %231, i64 0, !dbg !245
  %602 = insertelement <2 x i64> %601, i64 %232, i64 1, !dbg !245
  %603 = lshr <2 x i64> %602, splat (i64 61), !dbg !245
  %604 = and <2 x i64> %603, splat (i64 4), !dbg !245
  %605 = add <2 x i64> %604, %602, !dbg !245
  %606 = extractelement <2 x i64> %605, i64 0, !dbg !246
  %607 = extractelement <2 x i64> %605, i64 1, !dbg !246
  %608 = or i64 %606, %607, !dbg !246
  %.not9193 = icmp ugt i64 %608, 3, !dbg !246
  %609 = and i1 %31, %.not9193, !dbg !246
  br i1 %609, label %610, label %611, !dbg !246

610:                                              ; preds = %600
  tail call void @__assertfail(ptr nonnull @assertMessage_23, ptr nonnull @assertFile_23, i32 284, ptr nonnull @assertFunc_23, i64 1), !dbg !246
  unreachable, !dbg !246

611:                                              ; preds = %600
  %612 = extractvalue { i32, i32 } %38, 1, !dbg !22
  %613 = insertelement <2 x i32> poison, i32 %525, i64 0, !dbg !230
  %614 = insertelement <2 x i32> %613, i32 %557, i64 1, !dbg !230
  %615 = bitcast <2 x i32> %614 to <2 x float>, !dbg !230
  %616 = extractvalue { i32, i32 } %186, 1, !dbg !133
  %617 = extractvalue { i32, i32 } %188, 1, !dbg !135
  %618 = extractvalue { i32, i32 } %190, 1, !dbg !137
  %619 = extractvalue { i32, i32 } %192, 1, !dbg !139
  %620 = extractvalue { i32, i32 } %56, 1, !dbg !37
  %621 = extractvalue { i32, i32 } %202, 1, !dbg !145
  %622 = extractvalue { i32, i32 } %204, 1, !dbg !147
  %623 = extractvalue { i32, i32 } %206, 1, !dbg !149
  %624 = extractvalue { i32, i32 } %208, 1, !dbg !151
  %625 = extractvalue { i32, i32 } %76, 1, !dbg !52
  %626 = bitcast i32 %625 to float, !dbg !52
  %627 = bitcast i32 %589 to float, !dbg !242
  %628 = extractvalue { i32, i32 } %218, 1, !dbg !157
  %629 = bitcast i32 %628 to float, !dbg !157
  %630 = fmul float %629, %627, !dbg !247
  %631 = extractvalue { i32, i32 } %220, 1, !dbg !159
  %632 = bitcast i32 %631 to float, !dbg !159
  %633 = fadd float %630, %632, !dbg !248
  %634 = extractvalue { i32, i32 } %222, 1, !dbg !161
  %635 = bitcast i32 %634 to float, !dbg !161
  %636 = fadd float %633, %635, !dbg !249
  %637 = extractvalue { i32, i32 } %224, 1, !dbg !163
  %638 = bitcast i32 %637 to float, !dbg !163
  %639 = fadd float %636, %638, !dbg !250
  %640 = fsub float %626, %639, !dbg !251
  %641 = tail call float @llvm.fabs.f32(float %640), !dbg !252
  %642 = extractvalue { i32, i32 } %38, 0, !dbg !22
  %643 = insertelement <2 x i32> poison, i32 %524, i64 0, !dbg !230
  %644 = insertelement <2 x i32> %643, i32 %556, i64 1, !dbg !230
  %645 = bitcast <2 x i32> %644 to <2 x float>, !dbg !230
  %646 = extractvalue { i32, i32 } %186, 0, !dbg !133
  %647 = extractvalue { i32, i32 } %188, 0, !dbg !135
  %648 = extractvalue { i32, i32 } %190, 0, !dbg !137
  %649 = extractvalue { i32, i32 } %192, 0, !dbg !139
  %650 = extractvalue { i32, i32 } %56, 0, !dbg !37
  %651 = extractvalue { i32, i32 } %202, 0, !dbg !145
  %652 = extractvalue { i32, i32 } %204, 0, !dbg !147
  %653 = extractvalue { i32, i32 } %206, 0, !dbg !149
  %654 = extractvalue { i32, i32 } %208, 0, !dbg !151
  %655 = extractvalue { i32, i32 } %76, 0, !dbg !52
  %656 = bitcast i32 %655 to float, !dbg !52
  %657 = bitcast i32 %588 to float, !dbg !242
  %658 = extractvalue { i32, i32 } %218, 0, !dbg !157
  %659 = bitcast i32 %658 to float, !dbg !157
  %660 = fmul float %659, %657, !dbg !247
  %661 = extractvalue { i32, i32 } %220, 0, !dbg !159
  %662 = bitcast i32 %661 to float, !dbg !159
  %663 = fadd float %660, %662, !dbg !248
  %664 = extractvalue { i32, i32 } %222, 0, !dbg !161
  %665 = bitcast i32 %664 to float, !dbg !161
  %666 = fadd float %663, %665, !dbg !249
  %667 = extractvalue { i32, i32 } %224, 0, !dbg !163
  %668 = bitcast i32 %667 to float, !dbg !163
  %669 = fadd float %666, %668, !dbg !250
  %670 = fsub float %656, %669, !dbg !251
  %671 = tail call float @llvm.fabs.f32(float %670), !dbg !252
  %672 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !206
  %673 = insertelement <2 x i32> %672, i32 %431, i64 1, !dbg !206
  %674 = bitcast <2 x i32> %673 to <2 x float>, !dbg !206
  %675 = extractvalue { i32, i32 } %122, 1, !dbg !85
  %676 = extractvalue { i32, i32 } %124, 1, !dbg !87
  %677 = extractvalue { i32, i32 } %126, 1, !dbg !89
  %678 = extractvalue { i32, i32 } %128, 1, !dbg !91
  %679 = extractvalue { i32, i32 } %138, 1, !dbg !97
  %680 = extractvalue { i32, i32 } %140, 1, !dbg !99
  %681 = extractvalue { i32, i32 } %142, 1, !dbg !101
  %682 = extractvalue { i32, i32 } %144, 1, !dbg !103
  %683 = bitcast i32 %463 to float, !dbg !218
  %684 = extractvalue { i32, i32 } %154, 1, !dbg !109
  %685 = bitcast i32 %684 to float, !dbg !109
  %686 = fmul float %685, %683, !dbg !253
  %687 = extractvalue { i32, i32 } %156, 1, !dbg !111
  %688 = bitcast i32 %687 to float, !dbg !111
  %689 = fadd float %686, %688, !dbg !254
  %690 = extractvalue { i32, i32 } %158, 1, !dbg !113
  %691 = bitcast i32 %690 to float, !dbg !113
  %692 = fadd float %689, %691, !dbg !255
  %693 = extractvalue { i32, i32 } %160, 1, !dbg !115
  %694 = bitcast i32 %693 to float, !dbg !115
  %695 = fadd float %692, %694, !dbg !256
  %696 = fsub float %626, %695, !dbg !257
  %697 = tail call float @llvm.fabs.f32(float %696), !dbg !258
  %698 = extractvalue { i32, i32 } %96, 1, !dbg !67
  %699 = bitcast i32 %698 to float, !dbg !67
  %700 = bitcast i32 %495 to float, !dbg !224
  %701 = extractvalue { i32, i32 } %170, 1, !dbg !121
  %702 = bitcast i32 %701 to float, !dbg !121
  %703 = fmul float %702, %700, !dbg !259
  %704 = extractvalue { i32, i32 } %172, 1, !dbg !123
  %705 = bitcast i32 %704 to float, !dbg !123
  %706 = fadd float %703, %705, !dbg !260
  %707 = extractvalue { i32, i32 } %174, 1, !dbg !125
  %708 = bitcast i32 %707 to float, !dbg !125
  %709 = fadd float %706, %708, !dbg !261
  %710 = extractvalue { i32, i32 } %176, 1, !dbg !127
  %711 = bitcast i32 %710 to float, !dbg !127
  %712 = fadd float %709, %711, !dbg !262
  %713 = fsub float %699, %712, !dbg !263
  %714 = tail call float @llvm.fabs.f32(float %713), !dbg !264
  %715 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !206
  %716 = insertelement <2 x i32> %715, i32 %430, i64 1, !dbg !206
  %717 = bitcast <2 x i32> %716 to <2 x float>, !dbg !206
  %718 = extractvalue { i32, i32 } %122, 0, !dbg !85
  %719 = extractvalue { i32, i32 } %124, 0, !dbg !87
  %720 = extractvalue { i32, i32 } %126, 0, !dbg !89
  %721 = extractvalue { i32, i32 } %128, 0, !dbg !91
  %722 = extractvalue { i32, i32 } %138, 0, !dbg !97
  %723 = extractvalue { i32, i32 } %140, 0, !dbg !99
  %724 = extractvalue { i32, i32 } %142, 0, !dbg !101
  %725 = extractvalue { i32, i32 } %144, 0, !dbg !103
  %726 = bitcast i32 %462 to float, !dbg !218
  %727 = extractvalue { i32, i32 } %154, 0, !dbg !109
  %728 = bitcast i32 %727 to float, !dbg !109
  %729 = fmul float %728, %726, !dbg !253
  %730 = extractvalue { i32, i32 } %156, 0, !dbg !111
  %731 = bitcast i32 %730 to float, !dbg !111
  %732 = fadd float %729, %731, !dbg !254
  %733 = extractvalue { i32, i32 } %158, 0, !dbg !113
  %734 = bitcast i32 %733 to float, !dbg !113
  %735 = fadd float %732, %734, !dbg !255
  %736 = extractvalue { i32, i32 } %160, 0, !dbg !115
  %737 = bitcast i32 %736 to float, !dbg !115
  %738 = fadd float %735, %737, !dbg !256
  %739 = fsub float %656, %738, !dbg !257
  %740 = tail call float @llvm.fabs.f32(float %739), !dbg !258
  %741 = extractvalue { i32, i32 } %96, 0, !dbg !67
  %742 = bitcast i32 %741 to float, !dbg !67
  %743 = bitcast i32 %494 to float, !dbg !224
  %744 = extractvalue { i32, i32 } %170, 0, !dbg !121
  %745 = bitcast i32 %744 to float, !dbg !121
  %746 = fmul float %745, %743, !dbg !259
  %747 = extractvalue { i32, i32 } %172, 0, !dbg !123
  %748 = bitcast i32 %747 to float, !dbg !123
  %749 = fadd float %746, %748, !dbg !260
  %750 = extractvalue { i32, i32 } %174, 0, !dbg !125
  %751 = bitcast i32 %750 to float, !dbg !125
  %752 = fadd float %749, %751, !dbg !261
  %753 = extractvalue { i32, i32 } %176, 0, !dbg !127
  %754 = bitcast i32 %753 to float, !dbg !127
  %755 = fadd float %752, %754, !dbg !262
  %756 = fsub float %742, %755, !dbg !263
  %757 = tail call float @llvm.fabs.f32(float %756), !dbg !264
  %758 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !182
  %759 = insertelement <2 x i32> %758, i32 %305, i64 1, !dbg !182
  %760 = bitcast <2 x i32> %759 to <2 x float>, !dbg !182
  %761 = extractvalue { i32, i32 } %46, 1, !dbg !28
  %762 = extractvalue { i32, i32 } %48, 1, !dbg !30
  %763 = extractvalue { i32, i32 } %50, 1, !dbg !32
  %764 = extractvalue { i32, i32 } %52, 1, !dbg !34
  %765 = extractvalue { i32, i32 } %66, 1, !dbg !43
  %766 = extractvalue { i32, i32 } %68, 1, !dbg !45
  %767 = extractvalue { i32, i32 } %70, 1, !dbg !47
  %768 = extractvalue { i32, i32 } %72, 1, !dbg !49
  %769 = insertelement <2 x i32> poison, i32 %612, i64 0, !dbg !22
  %770 = insertelement <2 x i32> %769, i32 %620, i64 1, !dbg !22
  %771 = bitcast <2 x i32> %770 to <2 x float>, !dbg !22
  %772 = insertelement <2 x i32> poison, i32 %616, i64 0, !dbg !133
  %773 = insertelement <2 x i32> %772, i32 %621, i64 1, !dbg !133
  %774 = bitcast <2 x i32> %773 to <2 x float>, !dbg !133
  %775 = fmul <2 x float> %774, %615, !dbg !265
  %776 = insertelement <2 x i32> poison, i32 %617, i64 0, !dbg !135
  %777 = insertelement <2 x i32> %776, i32 %622, i64 1, !dbg !135
  %778 = bitcast <2 x i32> %777 to <2 x float>, !dbg !135
  %779 = fadd <2 x float> %775, %778, !dbg !266
  %780 = insertelement <2 x i32> poison, i32 %618, i64 0, !dbg !137
  %781 = insertelement <2 x i32> %780, i32 %623, i64 1, !dbg !137
  %782 = bitcast <2 x i32> %781 to <2 x float>, !dbg !137
  %783 = fadd <2 x float> %779, %782, !dbg !267
  %784 = insertelement <2 x i32> poison, i32 %619, i64 0, !dbg !139
  %785 = insertelement <2 x i32> %784, i32 %624, i64 1, !dbg !139
  %786 = bitcast <2 x i32> %785 to <2 x float>, !dbg !139
  %787 = fadd <2 x float> %783, %786, !dbg !268
  %788 = fsub <2 x float> %771, %787, !dbg !269
  %789 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %788), !dbg !270
  %shift = shufflevector <2 x float> %789, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !271
  %790 = fadd <2 x float> %789, %shift, !dbg !271
  %791 = extractelement <2 x float> %790, i64 0, !dbg !271
  %792 = fadd float %791, %641, !dbg !272
  %793 = insertelement <2 x i32> poison, i32 %675, i64 0, !dbg !85
  %794 = insertelement <2 x i32> %793, i32 %679, i64 1, !dbg !85
  %795 = bitcast <2 x i32> %794 to <2 x float>, !dbg !85
  %796 = fmul <2 x float> %795, %674, !dbg !273
  %797 = insertelement <2 x i32> poison, i32 %676, i64 0, !dbg !87
  %798 = insertelement <2 x i32> %797, i32 %680, i64 1, !dbg !87
  %799 = bitcast <2 x i32> %798 to <2 x float>, !dbg !87
  %800 = fadd <2 x float> %796, %799, !dbg !274
  %801 = insertelement <2 x i32> poison, i32 %677, i64 0, !dbg !89
  %802 = insertelement <2 x i32> %801, i32 %681, i64 1, !dbg !89
  %803 = bitcast <2 x i32> %802 to <2 x float>, !dbg !89
  %804 = fadd <2 x float> %800, %803, !dbg !275
  %805 = insertelement <2 x i32> poison, i32 %678, i64 0, !dbg !91
  %806 = insertelement <2 x i32> %805, i32 %682, i64 1, !dbg !91
  %807 = bitcast <2 x i32> %806 to <2 x float>, !dbg !91
  %808 = fadd <2 x float> %804, %807, !dbg !276
  %809 = fsub <2 x float> %771, %808, !dbg !277
  %810 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %809), !dbg !278
  %shift96 = shufflevector <2 x float> %810, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !279
  %811 = fadd <2 x float> %810, %shift96, !dbg !279
  %812 = extractelement <2 x float> %811, i64 0, !dbg !279
  %813 = fadd float %812, %697, !dbg !280
  %814 = fadd float %813, %714, !dbg !281
  %815 = insertelement <2 x i32> poison, i32 %761, i64 0, !dbg !28
  %816 = insertelement <2 x i32> %815, i32 %765, i64 1, !dbg !28
  %817 = bitcast <2 x i32> %816 to <2 x float>, !dbg !28
  %818 = fmul <2 x float> %817, %760, !dbg !282
  %819 = insertelement <2 x i32> poison, i32 %762, i64 0, !dbg !30
  %820 = insertelement <2 x i32> %819, i32 %766, i64 1, !dbg !30
  %821 = bitcast <2 x i32> %820 to <2 x float>, !dbg !30
  %822 = fadd <2 x float> %818, %821, !dbg !283
  %823 = insertelement <2 x i32> poison, i32 %763, i64 0, !dbg !32
  %824 = insertelement <2 x i32> %823, i32 %767, i64 1, !dbg !32
  %825 = bitcast <2 x i32> %824 to <2 x float>, !dbg !32
  %826 = fadd <2 x float> %822, %825, !dbg !284
  %827 = insertelement <2 x i32> poison, i32 %764, i64 0, !dbg !34
  %828 = insertelement <2 x i32> %827, i32 %768, i64 1, !dbg !34
  %829 = bitcast <2 x i32> %828 to <2 x float>, !dbg !34
  %830 = fadd <2 x float> %826, %829, !dbg !285
  %831 = fsub <2 x float> %771, %830, !dbg !286
  %832 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %831), !dbg !287
  %shift97 = shufflevector <2 x float> %832, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !288
  %833 = fadd <2 x float> %832, %shift97, !dbg !288
  %834 = extractelement <2 x float> %833, i64 0, !dbg !288
  %835 = bitcast i32 %337 to float, !dbg !194
  %836 = extractvalue { i32, i32 } %86, 1, !dbg !58
  %837 = bitcast i32 %836 to float, !dbg !58
  %838 = fmul float %837, %835, !dbg !289
  %839 = extractvalue { i32, i32 } %88, 1, !dbg !60
  %840 = bitcast i32 %839 to float, !dbg !60
  %841 = fadd float %838, %840, !dbg !290
  %842 = extractvalue { i32, i32 } %90, 1, !dbg !62
  %843 = bitcast i32 %842 to float, !dbg !62
  %844 = fadd float %841, %843, !dbg !291
  %845 = extractvalue { i32, i32 } %92, 1, !dbg !64
  %846 = bitcast i32 %845 to float, !dbg !64
  %847 = fadd float %844, %846, !dbg !292
  %848 = fsub float %626, %847, !dbg !293
  %849 = tail call float @llvm.fabs.f32(float %848), !dbg !294
  %850 = fadd float %834, %849, !dbg !295
  %851 = bitcast i32 %369 to float, !dbg !200
  %852 = extractvalue { i32, i32 } %106, 1, !dbg !73
  %853 = bitcast i32 %852 to float, !dbg !73
  %854 = fmul float %853, %851, !dbg !296
  %855 = extractvalue { i32, i32 } %108, 1, !dbg !75
  %856 = bitcast i32 %855 to float, !dbg !75
  %857 = fadd float %854, %856, !dbg !297
  %858 = extractvalue { i32, i32 } %110, 1, !dbg !77
  %859 = bitcast i32 %858 to float, !dbg !77
  %860 = fadd float %857, %859, !dbg !298
  %861 = extractvalue { i32, i32 } %112, 1, !dbg !79
  %862 = bitcast i32 %861 to float, !dbg !79
  %863 = fadd float %860, %862, !dbg !299
  %864 = fsub float %699, %863, !dbg !300
  %865 = tail call float @llvm.fabs.f32(float %864), !dbg !301
  %866 = fadd float %850, %865, !dbg !302
  %867 = insertelement <2 x i32> poison, i32 %272, i64 0, !dbg !182
  %868 = insertelement <2 x i32> %867, i32 %304, i64 1, !dbg !182
  %869 = bitcast <2 x i32> %868 to <2 x float>, !dbg !182
  %870 = extractvalue { i32, i32 } %46, 0, !dbg !28
  %871 = extractvalue { i32, i32 } %48, 0, !dbg !30
  %872 = extractvalue { i32, i32 } %50, 0, !dbg !32
  %873 = extractvalue { i32, i32 } %52, 0, !dbg !34
  %874 = extractvalue { i32, i32 } %66, 0, !dbg !43
  %875 = extractvalue { i32, i32 } %68, 0, !dbg !45
  %876 = extractvalue { i32, i32 } %70, 0, !dbg !47
  %877 = extractvalue { i32, i32 } %72, 0, !dbg !49
  %878 = insertelement <2 x i32> poison, i32 %642, i64 0, !dbg !22
  %879 = insertelement <2 x i32> %878, i32 %650, i64 1, !dbg !22
  %880 = bitcast <2 x i32> %879 to <2 x float>, !dbg !22
  %881 = insertelement <2 x i32> poison, i32 %646, i64 0, !dbg !133
  %882 = insertelement <2 x i32> %881, i32 %651, i64 1, !dbg !133
  %883 = bitcast <2 x i32> %882 to <2 x float>, !dbg !133
  %884 = fmul <2 x float> %883, %645, !dbg !265
  %885 = insertelement <2 x i32> poison, i32 %647, i64 0, !dbg !135
  %886 = insertelement <2 x i32> %885, i32 %652, i64 1, !dbg !135
  %887 = bitcast <2 x i32> %886 to <2 x float>, !dbg !135
  %888 = fadd <2 x float> %884, %887, !dbg !266
  %889 = insertelement <2 x i32> poison, i32 %648, i64 0, !dbg !137
  %890 = insertelement <2 x i32> %889, i32 %653, i64 1, !dbg !137
  %891 = bitcast <2 x i32> %890 to <2 x float>, !dbg !137
  %892 = fadd <2 x float> %888, %891, !dbg !267
  %893 = insertelement <2 x i32> poison, i32 %649, i64 0, !dbg !139
  %894 = insertelement <2 x i32> %893, i32 %654, i64 1, !dbg !139
  %895 = bitcast <2 x i32> %894 to <2 x float>, !dbg !139
  %896 = fadd <2 x float> %892, %895, !dbg !268
  %897 = fsub <2 x float> %880, %896, !dbg !269
  %898 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %897), !dbg !270
  %shift98 = shufflevector <2 x float> %898, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !271
  %899 = fadd <2 x float> %898, %shift98, !dbg !271
  %900 = extractelement <2 x float> %899, i64 0, !dbg !271
  %901 = fadd float %900, %671, !dbg !272
  %902 = insertelement <2 x i32> poison, i32 %718, i64 0, !dbg !85
  %903 = insertelement <2 x i32> %902, i32 %722, i64 1, !dbg !85
  %904 = bitcast <2 x i32> %903 to <2 x float>, !dbg !85
  %905 = fmul <2 x float> %904, %717, !dbg !273
  %906 = insertelement <2 x i32> poison, i32 %719, i64 0, !dbg !87
  %907 = insertelement <2 x i32> %906, i32 %723, i64 1, !dbg !87
  %908 = bitcast <2 x i32> %907 to <2 x float>, !dbg !87
  %909 = fadd <2 x float> %905, %908, !dbg !274
  %910 = insertelement <2 x i32> poison, i32 %720, i64 0, !dbg !89
  %911 = insertelement <2 x i32> %910, i32 %724, i64 1, !dbg !89
  %912 = bitcast <2 x i32> %911 to <2 x float>, !dbg !89
  %913 = fadd <2 x float> %909, %912, !dbg !275
  %914 = insertelement <2 x i32> poison, i32 %721, i64 0, !dbg !91
  %915 = insertelement <2 x i32> %914, i32 %725, i64 1, !dbg !91
  %916 = bitcast <2 x i32> %915 to <2 x float>, !dbg !91
  %917 = fadd <2 x float> %913, %916, !dbg !276
  %918 = fsub <2 x float> %880, %917, !dbg !277
  %919 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %918), !dbg !278
  %shift99 = shufflevector <2 x float> %919, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !279
  %920 = fadd <2 x float> %919, %shift99, !dbg !279
  %921 = extractelement <2 x float> %920, i64 0, !dbg !279
  %922 = fadd float %921, %740, !dbg !280
  %923 = fadd float %922, %757, !dbg !281
  %924 = insertelement <2 x i32> poison, i32 %870, i64 0, !dbg !28
  %925 = insertelement <2 x i32> %924, i32 %874, i64 1, !dbg !28
  %926 = bitcast <2 x i32> %925 to <2 x float>, !dbg !28
  %927 = fmul <2 x float> %926, %869, !dbg !282
  %928 = insertelement <2 x i32> poison, i32 %871, i64 0, !dbg !30
  %929 = insertelement <2 x i32> %928, i32 %875, i64 1, !dbg !30
  %930 = bitcast <2 x i32> %929 to <2 x float>, !dbg !30
  %931 = fadd <2 x float> %927, %930, !dbg !283
  %932 = insertelement <2 x i32> poison, i32 %872, i64 0, !dbg !32
  %933 = insertelement <2 x i32> %932, i32 %876, i64 1, !dbg !32
  %934 = bitcast <2 x i32> %933 to <2 x float>, !dbg !32
  %935 = fadd <2 x float> %931, %934, !dbg !284
  %936 = insertelement <2 x i32> poison, i32 %873, i64 0, !dbg !34
  %937 = insertelement <2 x i32> %936, i32 %877, i64 1, !dbg !34
  %938 = bitcast <2 x i32> %937 to <2 x float>, !dbg !34
  %939 = fadd <2 x float> %935, %938, !dbg !285
  %940 = fsub <2 x float> %880, %939, !dbg !286
  %941 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %940), !dbg !287
  %shift100 = shufflevector <2 x float> %941, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !288
  %942 = fadd <2 x float> %941, %shift100, !dbg !288
  %943 = extractelement <2 x float> %942, i64 0, !dbg !288
  %944 = bitcast i32 %336 to float, !dbg !194
  %945 = extractvalue { i32, i32 } %86, 0, !dbg !58
  %946 = bitcast i32 %945 to float, !dbg !58
  %947 = fmul float %946, %944, !dbg !289
  %948 = extractvalue { i32, i32 } %88, 0, !dbg !60
  %949 = bitcast i32 %948 to float, !dbg !60
  %950 = fadd float %947, %949, !dbg !290
  %951 = extractvalue { i32, i32 } %90, 0, !dbg !62
  %952 = bitcast i32 %951 to float, !dbg !62
  %953 = fadd float %950, %952, !dbg !291
  %954 = extractvalue { i32, i32 } %92, 0, !dbg !64
  %955 = bitcast i32 %954 to float, !dbg !64
  %956 = fadd float %953, %955, !dbg !292
  %957 = fsub float %656, %956, !dbg !293
  %958 = tail call float @llvm.fabs.f32(float %957), !dbg !294
  %959 = fadd float %943, %958, !dbg !295
  %960 = bitcast i32 %368 to float, !dbg !200
  %961 = extractvalue { i32, i32 } %106, 0, !dbg !73
  %962 = bitcast i32 %961 to float, !dbg !73
  %963 = fmul float %962, %960, !dbg !296
  %964 = extractvalue { i32, i32 } %108, 0, !dbg !75
  %965 = bitcast i32 %964 to float, !dbg !75
  %966 = fadd float %963, %965, !dbg !297
  %967 = extractvalue { i32, i32 } %110, 0, !dbg !77
  %968 = bitcast i32 %967 to float, !dbg !77
  %969 = fadd float %966, %968, !dbg !298
  %970 = extractvalue { i32, i32 } %112, 0, !dbg !79
  %971 = bitcast i32 %970 to float, !dbg !79
  %972 = fadd float %969, %971, !dbg !299
  %973 = fsub float %742, %972, !dbg !300
  %974 = tail call float @llvm.fabs.f32(float %973), !dbg !301
  %975 = fadd float %959, %974, !dbg !302
  %976 = extractvalue { i32, i32 } %240, 1, !dbg !175
  %977 = bitcast i32 %976 to float, !dbg !175
  %978 = extractvalue { i32, i32 } %240, 0, !dbg !175
  %979 = bitcast i32 %978 to float, !dbg !175
  %980 = extractvalue { i32, i32 } %238, 1, !dbg !173
  %981 = bitcast i32 %980 to float, !dbg !173
  %982 = extractvalue { i32, i32 } %238, 0, !dbg !173
  %983 = bitcast i32 %982 to float, !dbg !173
  %984 = extractvalue { i32, i32 } %236, 1, !dbg !171
  %985 = bitcast i32 %984 to float, !dbg !171
  %986 = extractvalue { i32, i32 } %236, 0, !dbg !171
  %987 = bitcast i32 %986 to float, !dbg !171
  %988 = extractvalue { i32, i32 } %234, 1, !dbg !169
  %989 = bitcast i32 %988 to float, !dbg !169
  %990 = extractvalue { i32, i32 } %234, 0, !dbg !169
  %991 = bitcast i32 %990 to float, !dbg !169
  tail call void @llvm.nvvm.barrier0(), !dbg !246
  %992 = getelementptr float, ptr addrspace(1) %3, i64 %606, !dbg !303
  %993 = getelementptr i8, ptr addrspace(1) %992, i64 192, !dbg !303
  %.idx94 = shl i64 %595, 4, !dbg !303
  %994 = getelementptr i8, ptr addrspace(1) %993, i64 %.idx94, !dbg !303
  %995 = getelementptr float, ptr addrspace(1) %994, i64 %265, !dbg !303
  %996 = getelementptr float, ptr addrspace(1) %3, i64 %607, !dbg !303
  %997 = getelementptr i8, ptr addrspace(1) %996, i64 192, !dbg !303
  %.idx95 = shl i64 %596, 4, !dbg !303
  %998 = getelementptr i8, ptr addrspace(1) %997, i64 %.idx95, !dbg !303
  %999 = getelementptr float, ptr addrspace(1) %998, i64 %265, !dbg !303
  %1000 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %995, i1 %31) #4, !dbg !304
  %1001 = bitcast i32 %1000 to float, !dbg !304
  %1002 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %999, i1 %31) #4, !dbg !304
  %1003 = bitcast i32 %1002 to float, !dbg !304
  %1004 = fmul float %991, %1001, !dbg !305
  %1005 = fmul float %989, %1003, !dbg !305
  %1006 = fadd float %1004, %987, !dbg !306
  %1007 = fadd float %1005, %985, !dbg !306
  %1008 = fadd float %1006, %983, !dbg !307
  %1009 = fadd float %1007, %981, !dbg !307
  %1010 = fadd float %1008, %979, !dbg !308
  %1011 = fadd float %1009, %977, !dbg !308
  %1012 = fsub float %742, %1010, !dbg !309
  %1013 = fsub float %699, %1011, !dbg !309
  %1014 = tail call float @llvm.fabs.f32(float %1012), !dbg !310
  %1015 = tail call float @llvm.fabs.f32(float %1013), !dbg !310
  %1016 = fadd float %901, %1014, !dbg !311
  %1017 = fadd float %792, %1015, !dbg !311
  %1018 = sext i32 %30 to i64, !dbg !312
  %1019 = getelementptr float, ptr addrspace(1) %20, i64 %1018, !dbg !312
  %1020 = bitcast float %975 to i32, !dbg !313
  %1021 = bitcast float %866 to i32, !dbg !313
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1020, i32 %1021, ptr addrspace(1) %1019, i1 %31) #4, !dbg !313
  %1022 = getelementptr float, ptr addrspace(1) %21, i64 %1018, !dbg !314
  %1023 = bitcast float %923 to i32, !dbg !315
  %1024 = bitcast float %814 to i32, !dbg !315
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1023, i32 %1024, ptr addrspace(1) %1022, i1 %31) #4, !dbg !315
  %1025 = getelementptr float, ptr addrspace(1) %22, i64 %1018, !dbg !316
  %1026 = bitcast float %1016 to i32, !dbg !317
  %1027 = bitcast float %1017 to i32, !dbg !317
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %1026, i32 %1027, ptr addrspace(1) %1025, i1 %31) #4, !dbg !317
  ret void, !dbg !318
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crwqui53wpq2b2e3yuou7udu5imdn7n2ortmuxg4iesh42oboror.py", directory: "inductor_cache/rw")
!4 = !{ptr @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4", linkageName: "triton_poi_fused_grid_sampler_2d_linalg_vector_norm_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 19, scope: !11)
!18 = !DILocation(line: 24, column: 19, scope: !11)
!19 = !DILocation(line: 27, column: 38, scope: !11)
!20 = !DILocation(line: 27, column: 35, scope: !11)
!21 = !DILocation(line: 27, column: 30, scope: !11)
!22 = !DILocation(line: 27, column: 43, scope: !11)
!23 = !DILocation(line: 28, column: 30, scope: !11)
!24 = !DILocation(line: 28, column: 43, scope: !11)
!25 = !DILocation(line: 29, column: 30, scope: !11)
!26 = !DILocation(line: 29, column: 43, scope: !11)
!27 = !DILocation(line: 30, column: 31, scope: !11)
!28 = !DILocation(line: 30, column: 44, scope: !11)
!29 = !DILocation(line: 31, column: 31, scope: !11)
!30 = !DILocation(line: 31, column: 44, scope: !11)
!31 = !DILocation(line: 32, column: 31, scope: !11)
!32 = !DILocation(line: 32, column: 44, scope: !11)
!33 = !DILocation(line: 33, column: 31, scope: !11)
!34 = !DILocation(line: 33, column: 44, scope: !11)
!35 = !DILocation(line: 34, column: 41, scope: !11)
!36 = !DILocation(line: 34, column: 31, scope: !11)
!37 = !DILocation(line: 34, column: 49, scope: !11)
!38 = !DILocation(line: 35, column: 31, scope: !11)
!39 = !DILocation(line: 35, column: 49, scope: !11)
!40 = !DILocation(line: 36, column: 31, scope: !11)
!41 = !DILocation(line: 36, column: 49, scope: !11)
!42 = !DILocation(line: 37, column: 31, scope: !11)
!43 = !DILocation(line: 37, column: 49, scope: !11)
!44 = !DILocation(line: 38, column: 31, scope: !11)
!45 = !DILocation(line: 38, column: 49, scope: !11)
!46 = !DILocation(line: 39, column: 31, scope: !11)
!47 = !DILocation(line: 39, column: 49, scope: !11)
!48 = !DILocation(line: 40, column: 31, scope: !11)
!49 = !DILocation(line: 40, column: 49, scope: !11)
!50 = !DILocation(line: 41, column: 41, scope: !11)
!51 = !DILocation(line: 41, column: 31, scope: !11)
!52 = !DILocation(line: 41, column: 49, scope: !11)
!53 = !DILocation(line: 42, column: 31, scope: !11)
!54 = !DILocation(line: 42, column: 49, scope: !11)
!55 = !DILocation(line: 43, column: 31, scope: !11)
!56 = !DILocation(line: 43, column: 49, scope: !11)
!57 = !DILocation(line: 44, column: 31, scope: !11)
!58 = !DILocation(line: 44, column: 49, scope: !11)
!59 = !DILocation(line: 45, column: 31, scope: !11)
!60 = !DILocation(line: 45, column: 49, scope: !11)
!61 = !DILocation(line: 46, column: 31, scope: !11)
!62 = !DILocation(line: 46, column: 49, scope: !11)
!63 = !DILocation(line: 47, column: 31, scope: !11)
!64 = !DILocation(line: 47, column: 49, scope: !11)
!65 = !DILocation(line: 48, column: 41, scope: !11)
!66 = !DILocation(line: 48, column: 31, scope: !11)
!67 = !DILocation(line: 48, column: 49, scope: !11)
!68 = !DILocation(line: 49, column: 31, scope: !11)
!69 = !DILocation(line: 49, column: 49, scope: !11)
!70 = !DILocation(line: 50, column: 31, scope: !11)
!71 = !DILocation(line: 50, column: 49, scope: !11)
!72 = !DILocation(line: 51, column: 31, scope: !11)
!73 = !DILocation(line: 51, column: 49, scope: !11)
!74 = !DILocation(line: 52, column: 31, scope: !11)
!75 = !DILocation(line: 52, column: 49, scope: !11)
!76 = !DILocation(line: 53, column: 31, scope: !11)
!77 = !DILocation(line: 53, column: 49, scope: !11)
!78 = !DILocation(line: 54, column: 31, scope: !11)
!79 = !DILocation(line: 54, column: 49, scope: !11)
!80 = !DILocation(line: 55, column: 31, scope: !11)
!81 = !DILocation(line: 55, column: 44, scope: !11)
!82 = !DILocation(line: 56, column: 31, scope: !11)
!83 = !DILocation(line: 56, column: 44, scope: !11)
!84 = !DILocation(line: 57, column: 33, scope: !11)
!85 = !DILocation(line: 57, column: 46, scope: !11)
!86 = !DILocation(line: 58, column: 33, scope: !11)
!87 = !DILocation(line: 58, column: 46, scope: !11)
!88 = !DILocation(line: 59, column: 33, scope: !11)
!89 = !DILocation(line: 59, column: 46, scope: !11)
!90 = !DILocation(line: 60, column: 33, scope: !11)
!91 = !DILocation(line: 60, column: 46, scope: !11)
!92 = !DILocation(line: 61, column: 32, scope: !11)
!93 = !DILocation(line: 61, column: 50, scope: !11)
!94 = !DILocation(line: 62, column: 32, scope: !11)
!95 = !DILocation(line: 62, column: 50, scope: !11)
!96 = !DILocation(line: 63, column: 33, scope: !11)
!97 = !DILocation(line: 63, column: 51, scope: !11)
!98 = !DILocation(line: 64, column: 33, scope: !11)
!99 = !DILocation(line: 64, column: 51, scope: !11)
!100 = !DILocation(line: 65, column: 33, scope: !11)
!101 = !DILocation(line: 65, column: 51, scope: !11)
!102 = !DILocation(line: 66, column: 33, scope: !11)
!103 = !DILocation(line: 66, column: 51, scope: !11)
!104 = !DILocation(line: 67, column: 32, scope: !11)
!105 = !DILocation(line: 67, column: 50, scope: !11)
!106 = !DILocation(line: 68, column: 32, scope: !11)
!107 = !DILocation(line: 68, column: 50, scope: !11)
!108 = !DILocation(line: 69, column: 33, scope: !11)
!109 = !DILocation(line: 69, column: 51, scope: !11)
!110 = !DILocation(line: 70, column: 33, scope: !11)
!111 = !DILocation(line: 70, column: 51, scope: !11)
!112 = !DILocation(line: 71, column: 33, scope: !11)
!113 = !DILocation(line: 71, column: 51, scope: !11)
!114 = !DILocation(line: 72, column: 33, scope: !11)
!115 = !DILocation(line: 72, column: 51, scope: !11)
!116 = !DILocation(line: 73, column: 32, scope: !11)
!117 = !DILocation(line: 73, column: 50, scope: !11)
!118 = !DILocation(line: 74, column: 32, scope: !11)
!119 = !DILocation(line: 74, column: 50, scope: !11)
!120 = !DILocation(line: 75, column: 33, scope: !11)
!121 = !DILocation(line: 75, column: 51, scope: !11)
!122 = !DILocation(line: 76, column: 33, scope: !11)
!123 = !DILocation(line: 76, column: 51, scope: !11)
!124 = !DILocation(line: 77, column: 33, scope: !11)
!125 = !DILocation(line: 77, column: 51, scope: !11)
!126 = !DILocation(line: 78, column: 33, scope: !11)
!127 = !DILocation(line: 78, column: 51, scope: !11)
!128 = !DILocation(line: 79, column: 33, scope: !11)
!129 = !DILocation(line: 79, column: 46, scope: !11)
!130 = !DILocation(line: 80, column: 33, scope: !11)
!131 = !DILocation(line: 80, column: 46, scope: !11)
!132 = !DILocation(line: 81, column: 33, scope: !11)
!133 = !DILocation(line: 81, column: 46, scope: !11)
!134 = !DILocation(line: 82, column: 33, scope: !11)
!135 = !DILocation(line: 82, column: 46, scope: !11)
!136 = !DILocation(line: 83, column: 33, scope: !11)
!137 = !DILocation(line: 83, column: 46, scope: !11)
!138 = !DILocation(line: 84, column: 33, scope: !11)
!139 = !DILocation(line: 84, column: 46, scope: !11)
!140 = !DILocation(line: 85, column: 33, scope: !11)
!141 = !DILocation(line: 85, column: 51, scope: !11)
!142 = !DILocation(line: 86, column: 33, scope: !11)
!143 = !DILocation(line: 86, column: 51, scope: !11)
!144 = !DILocation(line: 87, column: 33, scope: !11)
!145 = !DILocation(line: 87, column: 51, scope: !11)
!146 = !DILocation(line: 88, column: 33, scope: !11)
!147 = !DILocation(line: 88, column: 51, scope: !11)
!148 = !DILocation(line: 89, column: 33, scope: !11)
!149 = !DILocation(line: 89, column: 51, scope: !11)
!150 = !DILocation(line: 90, column: 33, scope: !11)
!151 = !DILocation(line: 90, column: 51, scope: !11)
!152 = !DILocation(line: 91, column: 33, scope: !11)
!153 = !DILocation(line: 91, column: 51, scope: !11)
!154 = !DILocation(line: 92, column: 33, scope: !11)
!155 = !DILocation(line: 92, column: 51, scope: !11)
!156 = !DILocation(line: 93, column: 33, scope: !11)
!157 = !DILocation(line: 93, column: 51, scope: !11)
!158 = !DILocation(line: 94, column: 33, scope: !11)
!159 = !DILocation(line: 94, column: 51, scope: !11)
!160 = !DILocation(line: 95, column: 33, scope: !11)
!161 = !DILocation(line: 95, column: 51, scope: !11)
!162 = !DILocation(line: 96, column: 33, scope: !11)
!163 = !DILocation(line: 96, column: 51, scope: !11)
!164 = !DILocation(line: 97, column: 33, scope: !11)
!165 = !DILocation(line: 97, column: 51, scope: !11)
!166 = !DILocation(line: 98, column: 33, scope: !11)
!167 = !DILocation(line: 98, column: 51, scope: !11)
!168 = !DILocation(line: 99, column: 33, scope: !11)
!169 = !DILocation(line: 99, column: 51, scope: !11)
!170 = !DILocation(line: 100, column: 33, scope: !11)
!171 = !DILocation(line: 100, column: 51, scope: !11)
!172 = !DILocation(line: 101, column: 33, scope: !11)
!173 = !DILocation(line: 101, column: 51, scope: !11)
!174 = !DILocation(line: 102, column: 33, scope: !11)
!175 = !DILocation(line: 102, column: 51, scope: !11)
!176 = !DILocation(line: 106, column: 32, scope: !11)
!177 = !DILocation(line: 107, column: 60, scope: !11)
!178 = !DILocation(line: 110, column: 33, scope: !11)
!179 = !DILocation(line: 111, column: 62, scope: !11)
!180 = !DILocation(line: 112, column: 48, scope: !11)
!181 = !DILocation(line: 112, column: 31, scope: !11)
!182 = !DILocation(line: 112, column: 56, scope: !11)
!183 = !DILocation(line: 121, column: 35, scope: !11)
!184 = !DILocation(line: 122, column: 62, scope: !11)
!185 = !DILocation(line: 125, column: 35, scope: !11)
!186 = !DILocation(line: 126, column: 62, scope: !11)
!187 = !DILocation(line: 127, column: 31, scope: !11)
!188 = !DILocation(line: 127, column: 62, scope: !11)
!189 = !DILocation(line: 137, column: 35, scope: !11)
!190 = !DILocation(line: 138, column: 62, scope: !11)
!191 = !DILocation(line: 141, column: 35, scope: !11)
!192 = !DILocation(line: 142, column: 62, scope: !11)
!193 = !DILocation(line: 143, column: 31, scope: !11)
!194 = !DILocation(line: 143, column: 62, scope: !11)
!195 = !DILocation(line: 153, column: 35, scope: !11)
!196 = !DILocation(line: 154, column: 62, scope: !11)
!197 = !DILocation(line: 157, column: 35, scope: !11)
!198 = !DILocation(line: 158, column: 62, scope: !11)
!199 = !DILocation(line: 159, column: 31, scope: !11)
!200 = !DILocation(line: 159, column: 62, scope: !11)
!201 = !DILocation(line: 169, column: 35, scope: !11)
!202 = !DILocation(line: 170, column: 62, scope: !11)
!203 = !DILocation(line: 173, column: 36, scope: !11)
!204 = !DILocation(line: 174, column: 64, scope: !11)
!205 = !DILocation(line: 175, column: 32, scope: !11)
!206 = !DILocation(line: 175, column: 59, scope: !11)
!207 = !DILocation(line: 184, column: 38, scope: !11)
!208 = !DILocation(line: 185, column: 64, scope: !11)
!209 = !DILocation(line: 188, column: 38, scope: !11)
!210 = !DILocation(line: 189, column: 64, scope: !11)
!211 = !DILocation(line: 190, column: 32, scope: !11)
!212 = !DILocation(line: 190, column: 65, scope: !11)
!213 = !DILocation(line: 200, column: 38, scope: !11)
!214 = !DILocation(line: 201, column: 64, scope: !11)
!215 = !DILocation(line: 204, column: 38, scope: !11)
!216 = !DILocation(line: 205, column: 64, scope: !11)
!217 = !DILocation(line: 206, column: 32, scope: !11)
!218 = !DILocation(line: 206, column: 65, scope: !11)
!219 = !DILocation(line: 216, column: 38, scope: !11)
!220 = !DILocation(line: 217, column: 64, scope: !11)
!221 = !DILocation(line: 220, column: 38, scope: !11)
!222 = !DILocation(line: 221, column: 64, scope: !11)
!223 = !DILocation(line: 222, column: 32, scope: !11)
!224 = !DILocation(line: 222, column: 65, scope: !11)
!225 = !DILocation(line: 232, column: 38, scope: !11)
!226 = !DILocation(line: 233, column: 64, scope: !11)
!227 = !DILocation(line: 236, column: 38, scope: !11)
!228 = !DILocation(line: 237, column: 64, scope: !11)
!229 = !DILocation(line: 238, column: 32, scope: !11)
!230 = !DILocation(line: 238, column: 60, scope: !11)
!231 = !DILocation(line: 247, column: 38, scope: !11)
!232 = !DILocation(line: 248, column: 64, scope: !11)
!233 = !DILocation(line: 251, column: 38, scope: !11)
!234 = !DILocation(line: 252, column: 64, scope: !11)
!235 = !DILocation(line: 253, column: 32, scope: !11)
!236 = !DILocation(line: 253, column: 65, scope: !11)
!237 = !DILocation(line: 263, column: 38, scope: !11)
!238 = !DILocation(line: 264, column: 64, scope: !11)
!239 = !DILocation(line: 267, column: 38, scope: !11)
!240 = !DILocation(line: 268, column: 64, scope: !11)
!241 = !DILocation(line: 269, column: 32, scope: !11)
!242 = !DILocation(line: 269, column: 65, scope: !11)
!243 = !DILocation(line: 279, column: 38, scope: !11)
!244 = !DILocation(line: 280, column: 64, scope: !11)
!245 = !DILocation(line: 283, column: 38, scope: !11)
!246 = !DILocation(line: 284, column: 64, scope: !11)
!247 = !DILocation(line: 270, column: 22, scope: !11)
!248 = !DILocation(line: 271, column: 22, scope: !11)
!249 = !DILocation(line: 272, column: 22, scope: !11)
!250 = !DILocation(line: 273, column: 22, scope: !11)
!251 = !DILocation(line: 274, column: 21, scope: !11)
!252 = !DILocation(line: 275, column: 25, scope: !11)
!253 = !DILocation(line: 207, column: 22, scope: !11)
!254 = !DILocation(line: 208, column: 22, scope: !11)
!255 = !DILocation(line: 209, column: 22, scope: !11)
!256 = !DILocation(line: 210, column: 22, scope: !11)
!257 = !DILocation(line: 211, column: 21, scope: !11)
!258 = !DILocation(line: 212, column: 25, scope: !11)
!259 = !DILocation(line: 223, column: 22, scope: !11)
!260 = !DILocation(line: 224, column: 22, scope: !11)
!261 = !DILocation(line: 225, column: 22, scope: !11)
!262 = !DILocation(line: 226, column: 22, scope: !11)
!263 = !DILocation(line: 227, column: 21, scope: !11)
!264 = !DILocation(line: 228, column: 25, scope: !11)
!265 = !DILocation(line: 239, column: 22, scope: !11)
!266 = !DILocation(line: 240, column: 22, scope: !11)
!267 = !DILocation(line: 241, column: 22, scope: !11)
!268 = !DILocation(line: 242, column: 22, scope: !11)
!269 = !DILocation(line: 243, column: 20, scope: !11)
!270 = !DILocation(line: 244, column: 25, scope: !11)
!271 = !DILocation(line: 260, column: 22, scope: !11)
!272 = !DILocation(line: 276, column: 22, scope: !11)
!273 = !DILocation(line: 176, column: 22, scope: !11)
!274 = !DILocation(line: 177, column: 22, scope: !11)
!275 = !DILocation(line: 178, column: 22, scope: !11)
!276 = !DILocation(line: 179, column: 22, scope: !11)
!277 = !DILocation(line: 180, column: 20, scope: !11)
!278 = !DILocation(line: 181, column: 25, scope: !11)
!279 = !DILocation(line: 197, column: 22, scope: !11)
!280 = !DILocation(line: 213, column: 22, scope: !11)
!281 = !DILocation(line: 229, column: 22, scope: !11)
!282 = !DILocation(line: 113, column: 20, scope: !11)
!283 = !DILocation(line: 114, column: 20, scope: !11)
!284 = !DILocation(line: 115, column: 20, scope: !11)
!285 = !DILocation(line: 116, column: 20, scope: !11)
!286 = !DILocation(line: 117, column: 19, scope: !11)
!287 = !DILocation(line: 118, column: 24, scope: !11)
!288 = !DILocation(line: 134, column: 20, scope: !11)
!289 = !DILocation(line: 144, column: 20, scope: !11)
!290 = !DILocation(line: 145, column: 20, scope: !11)
!291 = !DILocation(line: 146, column: 20, scope: !11)
!292 = !DILocation(line: 147, column: 20, scope: !11)
!293 = !DILocation(line: 148, column: 20, scope: !11)
!294 = !DILocation(line: 149, column: 24, scope: !11)
!295 = !DILocation(line: 150, column: 20, scope: !11)
!296 = !DILocation(line: 160, column: 20, scope: !11)
!297 = !DILocation(line: 161, column: 20, scope: !11)
!298 = !DILocation(line: 162, column: 20, scope: !11)
!299 = !DILocation(line: 163, column: 20, scope: !11)
!300 = !DILocation(line: 164, column: 20, scope: !11)
!301 = !DILocation(line: 165, column: 24, scope: !11)
!302 = !DILocation(line: 166, column: 20, scope: !11)
!303 = !DILocation(line: 285, column: 32, scope: !11)
!304 = !DILocation(line: 285, column: 65, scope: !11)
!305 = !DILocation(line: 286, column: 22, scope: !11)
!306 = !DILocation(line: 287, column: 22, scope: !11)
!307 = !DILocation(line: 288, column: 22, scope: !11)
!308 = !DILocation(line: 289, column: 22, scope: !11)
!309 = !DILocation(line: 290, column: 21, scope: !11)
!310 = !DILocation(line: 291, column: 25, scope: !11)
!311 = !DILocation(line: 292, column: 22, scope: !11)
!312 = !DILocation(line: 293, column: 25, scope: !11)
!313 = !DILocation(line: 293, column: 37, scope: !11)
!314 = !DILocation(line: 294, column: 25, scope: !11)
!315 = !DILocation(line: 294, column: 38, scope: !11)
!316 = !DILocation(line: 295, column: 25, scope: !11)
!317 = !DILocation(line: 295, column: 38, scope: !11)
!318 = !DILocation(line: 295, column: 4, scope: !11)
