#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__unsafe_index_add_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":19:0)) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst = arith.constant dense<2.500000e-01> : tensor<512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16384> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<3> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<65536> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst_7 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_7 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_7 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_6 : tensor<512xi32, #blocked> loc(#loc9)
    %9 = arith.remsi %8, %cst_5 : tensor<512xi32, #blocked> loc(#loc10)
    %10 = arith.divsi %7, %cst_4 : tensor<512xi32, #blocked> loc(#loc11)
    %11 = arith.muli %10, %cst_3 : tensor<512xi32, #blocked> loc(#loc12)
    %12 = arith.remsi %5, %cst_4 : tensor<512xi32, #blocked> loc(#loc13)
    %13 = arith.muli %12, %cst_2 : tensor<512xi32, #blocked> loc(#loc14)
    %14 = arith.addi %11, %13 : tensor<512xi32, #blocked> loc(#loc15)
    %15 = arith.remsi %7, %cst_4 : tensor<512xi32, #blocked> loc(#loc16)
    %16 = arith.muli %15, %cst_1 : tensor<512xi32, #blocked> loc(#loc17)
    %17 = arith.addi %14, %16 : tensor<512xi32, #blocked> loc(#loc18)
    %18 = arith.muli %8, %cst_6 : tensor<512xi32, #blocked> loc(#loc19)
    %19 = arith.addi %17, %18 : tensor<512xi32, #blocked> loc(#loc20)
    %20 = arith.divsi %5, %cst_4 : tensor<512xi32, #blocked> loc(#loc21)
    %21 = arith.addi %19, %20 : tensor<512xi32, #blocked> loc(#loc22)
    %22 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc23)
    %23 = tt.addptr %22, %21 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc23)
    %24 = tt.load %23 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc24)
    %25 = arith.muli %15, %cst_4 : tensor<512xi32, #blocked> loc(#loc25)
    %26 = arith.muli %9, %cst_0 : tensor<512xi32, #blocked> loc(#loc26)
    %27 = arith.addi %25, %26 : tensor<512xi32, #blocked> loc(#loc27)
    %28 = arith.addi %27, %12 : tensor<512xi32, #blocked> loc(#loc28)
    %29 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc29)
    %30 = tt.addptr %29, %28 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc29)
    %31 = tt.load %30 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc30)
    %32 = arith.addf %24, %31 : tensor<512xf32, #blocked> loc(#loc31)
    %33 = arith.sitofp %7 : tensor<512xi32, #blocked> to tensor<512xf32, #blocked> loc(#loc32)
    %34 = arith.mulf %33, %cst : tensor<512xf32, #blocked> loc(#loc33)
    %35 = arith.fptosi %34 : tensor<512xf32, #blocked> to tensor<512xi32, #blocked> loc(#loc34)
    %36 = arith.sitofp %5 : tensor<512xi32, #blocked> to tensor<512xf32, #blocked> loc(#loc35)
    %37 = arith.mulf %36, %cst : tensor<512xf32, #blocked> loc(#loc36)
    %38 = arith.fptosi %37 : tensor<512xf32, #blocked> to tensor<512xi32, #blocked> loc(#loc37)
    %39 = arith.muli %35, %cst_3 : tensor<512xi32, #blocked> loc(#loc38)
    %40 = arith.addi %38, %39 : tensor<512xi32, #blocked> loc(#loc39)
    %41 = arith.muli %8, %cst_2 : tensor<512xi32, #blocked> loc(#loc40)
    %42 = arith.addi %40, %41 : tensor<512xi32, #blocked> loc(#loc41)
    %43 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc42)
    %44 = tt.addptr %43, %42 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc42)
    %45 = tt.load %44 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc43)
    %46 = arith.addf %32, %45 : tensor<512xf32, #blocked> loc(#loc44)
    %47 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc45)
    %48 = tt.addptr %47, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc45)
    tt.store %48, %46 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":21:28)
#loc3 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":21:33)
#loc4 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":22:36)
#loc5 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":22:23)
#loc6 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":24:19)
#loc7 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":25:21)
#loc8 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":25:28)
#loc9 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":26:19)
#loc10 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":27:30)
#loc11 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:40)
#loc12 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:34)
#loc13 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:57)
#loc14 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:52)
#loc15 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:45)
#loc16 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:76)
#loc17 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:71)
#loc18 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:63)
#loc19 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:88)
#loc20 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:82)
#loc21 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:100)
#loc22 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:94)
#loc23 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:30)
#loc24 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":29:105)
#loc25 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:34)
#loc26 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:48)
#loc27 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:45)
#loc28 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:55)
#loc29 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:30)
#loc30 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":30:66)
#loc31 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":31:18)
#loc32 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":33:19)
#loc33 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":35:18)
#loc34 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":36:19)
#loc35 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":38:19)
#loc36 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":39:19)
#loc37 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":40:21)
#loc38 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:42)
#loc39 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:39)
#loc40 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:54)
#loc41 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:49)
#loc42 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:31)
#loc43 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":41:59)
#loc44 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":42:19)
#loc45 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":43:25)
#loc46 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":43:37)
#loc47 = loc("inductor_cache/if/cif4wrfhoewrzmmzbv7ovqbrp6lxm7okp2v7vkmjalr7spsbtein.py":43:4)
