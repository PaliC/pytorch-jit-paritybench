; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 2, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 32, !dbg !12
  %14 = lshr exact i32 %13, 2, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = and i32 %10, 64, !dbg !12
  %17 = lshr exact i32 %16, 2, !dbg !12
  %18 = or disjoint i32 %15, %17, !dbg !12
  %19 = and i32 %10, 3, !dbg !12
  %20 = and i32 %10, 31, !dbg !12
  %21 = or disjoint i32 %18, %9, !dbg !13
  %22 = or disjoint i32 %9, %20, !dbg !13
  %23 = icmp slt i32 %21, 64, !dbg !14
  %24 = icmp slt i32 %22, 64, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %.lobit2 = lshr exact i32 %13, 5, !dbg !17
  %27 = lshr exact i32 %16, 5, !dbg !17
  %28 = or disjoint i32 %.lobit2, %27, !dbg !17
  %29 = or disjoint i32 %26, %19, !dbg !18
  %30 = or disjoint i32 %28, %26, !dbg !18
  %31 = icmp slt i32 %29, 4, !dbg !19
  %32 = icmp slt i32 %30, 4, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %33 = sdiv i32 %.frozen, 16, !dbg !20
  %34 = mul i32 %33, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %.frozen4 = freeze i32 %22, !dbg !20
  %35 = sdiv i32 %.frozen4, 16, !dbg !20
  %36 = mul i32 %35, 16, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %36, !dbg !21
  %37 = shl i32 %21, 2, !dbg !22
  %38 = add i32 %29, %37, !dbg !23
  %39 = sext i32 %38 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = and i1 %23, %31, !dbg !25
  %42 = and i1 %24, %32, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %41) #2, !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = sext i32 %29 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %31) #2, !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = shl nsw i32 %33, 2, !dbg !29
  %50 = add i32 %49, %29, !dbg !30
  %51 = shl nsw i32 %.decomposed, 4, !dbg !31
  %52 = add i32 %50, %51, !dbg !32
  %53 = sext i32 %52 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %41) #2, !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %31) #2, !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = shl i32 %30, 4, !dbg !37
  %61 = add i32 %60, %.decomposed5, !dbg !38
  %62 = shl i32 %35, 6, !dbg !39
  %63 = add i32 %61, %62, !dbg !40
  %64 = sext i32 %63 to i64, !dbg !41
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !41
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %42) #2, !dbg !42
  %67 = bitcast i32 %66 to float, !dbg !42
  %68 = fadd float %44, %48, !dbg !43
  %69 = shl i32 %10, 5, !dbg !43
  %70 = and i32 %69, 96, !dbg !43
  %71 = and i32 %11, 7, !dbg !43
  %72 = or disjoint i32 %71, %70, !dbg !43
  %73 = or disjoint i32 %72, %14, !dbg !43
  %74 = or disjoint i32 %73, %17, !dbg !43
  %75 = and i32 %10, 127, !dbg !43
  %76 = lshr exact i32 %70, 5, !dbg !43
  %77 = add nuw nsw i32 %74, %76, !dbg !43
  %78 = zext nneg i32 %77 to i64, !dbg !43
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %78, !dbg !43
  %80 = bitcast float %68 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %81 = lshr i32 %75, 5, !dbg !43
  %82 = add nuw nsw i32 %81, %75, !dbg !43
  %83 = zext nneg i32 %82 to i64, !dbg !43
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %83, !dbg !43
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !43
  %86 = fadd float %56, %59, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %87 = bitcast float %86 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %87, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %88 = load float, ptr addrspace(3) %84, align 4, !dbg !44
  %89 = fadd float %88, %67, !dbg !45
  %90 = fadd float %85, %89, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %91 = shl i32 %10, 2, !dbg !48
  %92 = and i32 %91, 124, !dbg !48
  %93 = or disjoint i32 %92, %.lobit2, !dbg !48
  %94 = or disjoint i32 %93, %27, !dbg !48
  %95 = lshr exact i32 %92, 2, !dbg !48
  %96 = add nuw nsw i32 %94, %95, !dbg !48
  %97 = zext nneg i32 %96 to i64, !dbg !48
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %97, !dbg !48
  %99 = bitcast float %90 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %100 = lshr i32 %75, 2, !dbg !48
  %101 = add nuw nsw i32 %100, %75, !dbg !48
  %102 = zext nneg i32 %101 to i64, !dbg !48
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !48
  %104 = load i32, ptr addrspace(3) %103, align 4, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %40, i1 %41) #2, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhl5kuio54xfofpszixfd6m6oiveeuiktrlzlgnc4ey5tozrhbh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_10", linkageName: "triton_poi_fused_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 36, column: 46, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
!48 = !DILocation(line: 42, column: 46, scope: !7)
!49 = !DILocation(line: 42, column: 4, scope: !7)
