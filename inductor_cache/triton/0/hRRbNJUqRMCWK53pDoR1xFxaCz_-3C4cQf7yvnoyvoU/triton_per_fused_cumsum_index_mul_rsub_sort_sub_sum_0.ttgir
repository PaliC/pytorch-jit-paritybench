#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 1, 32], warpsPerCTA = [1, 2, 1], order = [2, 1, 0]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [1, 2, 16], warpsPerCTA = [2, 1, 1], order = [2, 1, 0]}>
#blocked4 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [2, 2, 8], warpsPerCTA = [2, 1, 1], order = [2, 1, 0]}>
#blocked5 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [4, 2, 4], warpsPerCTA = [2, 1, 1], order = [2, 1, 0]}>
#blocked6 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [8, 2, 2], warpsPerCTA = [2, 1, 1], order = [2, 1, 0]}>
#blocked7 = #triton_gpu.blocked<{sizePerThread = [1, 1, 1], threadsPerWarp = [16, 2, 1], warpsPerCTA = [2, 1, 1], order = [2, 1, 0]}>
#loc = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0)
#loc1 = loc(unknown)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":610:12)
#loc18 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":47:71)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":582:73)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":506:51)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":507:53)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":516:50)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":519:51)
#loc78 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":56:26)
#loc101 = loc(callsite(#loc1 at #loc27))
#loc107 = loc(callsite(#loc1 at #loc32))
#loc118 = loc(callsite(#loc1 at #loc42))
#loc124 = loc(callsite(#loc1 at #loc47))
#loc141 = loc(callsite(#loc1 at #loc78))
#loc152 = loc(callsite(#loc101 at #loc22))
#loc158 = loc(callsite(#loc107 at #loc22))
#loc170 = loc(callsite(#loc118 at #loc22))
#loc177 = loc(callsite(#loc124 at #loc22))
#loc200 = loc(callsite(#loc152 at #loc17))
#loc206 = loc(callsite(#loc158 at #loc17))
#loc218 = loc(callsite(#loc170 at #loc17))
#loc225 = loc(callsite(#loc177 at #loc17))
#loc243 = loc(callsite(#loc200 at #loc18))
#loc246 = loc(callsite(#loc206 at #loc18))
#loc249 = loc(callsite(#loc218 at #loc18))
#loc252 = loc(callsite(#loc225 at #loc18))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":24:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked2> loc(#loc1)
    %cst_3 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked3> loc(#loc1)
    %cst_4 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked4> loc(#loc1)
    %cst_5 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked5> loc(#loc1)
    %cst_6 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked6> loc(#loc1)
    %cst_7 = arith.constant dense<1> : tensor<1x2x1xi32, #blocked7> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<0> : tensor<1x64xi16, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_10 = arith.constant dense<2.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<0> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_15 = arith.constant dense<64> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<4> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %cst_17 = arith.constant dense<16> : tensor<1x64xi64, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.divsi %1, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.muli %2, %cst_11 : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %1, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.addi %3, %4 : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.addptr %6, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.load %7 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %10 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %5 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %12 = tt.load %11 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = arith.mulf %12, %cst_10 : tensor<1x64xf32, #blocked> loc(#loc11)
    %14 = arith.subf %13, %cst_0 : tensor<1x64xf32, #blocked> loc(#loc12)
    %15 = arith.mulf %8, %14 : tensor<1x64xf32, #blocked> loc(#loc13)
    %16 = arith.subf %cst_0, %15 : tensor<1x64xf32, #blocked> loc(#loc14)
    %17 = arith.trunci %1 : tensor<1x64xi32, #blocked> to tensor<1x64xi16, #blocked> loc(#loc15)
    %18 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked6}>}>> loc(#loc144)
    %19 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked5}>}>> loc(#loc144)
    %20 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked4}>}>> loc(#loc144)
    %21 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked3}>}>> loc(#loc144)
    %22 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked2}>}>> loc(#loc144)
    %23 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked7}>}>> loc(#loc144)
    %24 = tt.expand_dims %18 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked6}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked6}>> loc(#loc144)
    %25 = tt.expand_dims %19 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked5}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked5}>> loc(#loc144)
    %26 = tt.expand_dims %20 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked4}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked4}>> loc(#loc144)
    %27 = tt.expand_dims %21 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked3}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked3}>> loc(#loc144)
    %28 = tt.expand_dims %22 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked2}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked2}>> loc(#loc144)
    %29 = tt.expand_dims %23 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #triton_gpu.slice<{dim = 2, parent = #blocked7}>}>> -> tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked7}>> loc(#loc144)
    %30 = tt.expand_dims %24 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked6}>> -> tensor<1x2x1xi32, #blocked6> loc(#loc144)
    %31 = tt.expand_dims %25 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked5}>> -> tensor<1x2x1xi32, #blocked5> loc(#loc144)
    %32 = tt.expand_dims %26 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked4}>> -> tensor<1x2x1xi32, #blocked4> loc(#loc144)
    %33 = tt.expand_dims %27 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked3}>> -> tensor<1x2x1xi32, #blocked3> loc(#loc144)
    %34 = tt.expand_dims %28 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked2}>> -> tensor<1x2x1xi32, #blocked2> loc(#loc144)
    %35 = tt.expand_dims %29 {axis = 2 : i32} : tensor<1x2xi32, #triton_gpu.slice<{dim = 2, parent = #blocked7}>> -> tensor<1x2x1xi32, #blocked7> loc(#loc144)
    %36 = tt.broadcast %30 : tensor<1x2x1xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc145)
    %37 = tt.reshape %36 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc146)
    %38 = tt.reshape %16 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %39 = tt.bitcast %38 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %40 = arith.subi %cst_6, %30 : tensor<1x2x1xi32, #blocked6> loc(#loc197)
    %41 = arith.subi %cst_5, %31 : tensor<1x2x1xi32, #blocked5> loc(#loc197)
    %42 = arith.subi %cst_4, %32 : tensor<1x2x1xi32, #blocked4> loc(#loc197)
    %43 = arith.subi %cst_3, %33 : tensor<1x2x1xi32, #blocked3> loc(#loc197)
    %44 = arith.subi %cst_2, %34 : tensor<1x2x1xi32, #blocked2> loc(#loc197)
    %45 = arith.subi %cst_7, %35 : tensor<1x2x1xi32, #blocked7> loc(#loc197)
    %46 = tt.broadcast %45 : tensor<1x2x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %47 = arith.muli %39, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %48 = "tt.reduce"(%47) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %49 = tt.expand_dims %48 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %50 = tt.broadcast %49 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %51 = tt.broadcast %35 : tensor<1x2x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %52 = arith.muli %39, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %53 = "tt.reduce"(%52) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %54 = tt.expand_dims %53 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %55 = tt.broadcast %54 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %56 = tt.reshape %50 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %57 = tt.reshape %55 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %58 = tt.bitcast %56 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %59 = tt.bitcast %57 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %60 = tt.reshape %17 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %61 = arith.trunci %40 : tensor<1x2x1xi32, #blocked6> to tensor<1x2x1xi16, #blocked6> loc(#loc215)
    %62 = arith.trunci %41 : tensor<1x2x1xi32, #blocked5> to tensor<1x2x1xi16, #blocked5> loc(#loc215)
    %63 = arith.trunci %42 : tensor<1x2x1xi32, #blocked4> to tensor<1x2x1xi16, #blocked4> loc(#loc215)
    %64 = arith.trunci %43 : tensor<1x2x1xi32, #blocked3> to tensor<1x2x1xi16, #blocked3> loc(#loc215)
    %65 = arith.trunci %44 : tensor<1x2x1xi32, #blocked2> to tensor<1x2x1xi16, #blocked2> loc(#loc215)
    %66 = arith.trunci %45 : tensor<1x2x1xi32, #blocked7> to tensor<1x2x1xi16, #blocked7> loc(#loc215)
    %67 = tt.broadcast %66 : tensor<1x2x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %68 = arith.muli %60, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %69 = "tt.reduce"(%68) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %70 = tt.expand_dims %69 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %71 = tt.broadcast %70 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %72 = arith.trunci %30 : tensor<1x2x1xi32, #blocked6> to tensor<1x2x1xi16, #blocked6> loc(#loc222)
    %73 = arith.trunci %31 : tensor<1x2x1xi32, #blocked5> to tensor<1x2x1xi16, #blocked5> loc(#loc222)
    %74 = arith.trunci %32 : tensor<1x2x1xi32, #blocked4> to tensor<1x2x1xi16, #blocked4> loc(#loc222)
    %75 = arith.trunci %33 : tensor<1x2x1xi32, #blocked3> to tensor<1x2x1xi16, #blocked3> loc(#loc222)
    %76 = arith.trunci %34 : tensor<1x2x1xi32, #blocked2> to tensor<1x2x1xi16, #blocked2> loc(#loc222)
    %77 = arith.trunci %35 : tensor<1x2x1xi32, #blocked7> to tensor<1x2x1xi16, #blocked7> loc(#loc222)
    %78 = tt.broadcast %77 : tensor<1x2x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %79 = arith.muli %60, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %80 = "tt.reduce"(%79) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %81 = tt.expand_dims %80 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %82 = tt.broadcast %81 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %83 = tt.reshape %71 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %84 = tt.reshape %82 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %85 = tt.bitcast %16 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %86 = arith.cmpf olt, %58, %59 : tensor<1x64xf32, #blocked> loc(#loc232)
    %87 = arith.extui %86 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %88 = arith.xori %87, %37 : tensor<1x64xi32, #blocked> loc(#loc233)
    %89 = arith.cmpi ne, %88, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %90 = arith.xori %56, %57 : tensor<1x64xi32, #blocked> loc(#loc235)
    %91 = arith.select %89, %90, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %92 = arith.xori %85, %91 : tensor<1x64xi32, #blocked> loc(#loc237)
    %93 = arith.xori %83, %84 : tensor<1x64xi16, #blocked> loc(#loc238)
    %94 = arith.select %89, %93, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %95 = arith.xori %17, %94 : tensor<1x64xi16, #blocked> loc(#loc240)
    %96 = tt.bitcast %92 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %97 = tt.broadcast %31 : tensor<1x2x1xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc145)
    %98 = tt.reshape %97 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc146)
    %99 = tt.reshape %96 : tensor<1x64xf32, #blocked> -> tensor<16x2x2xf32, #blocked6> loc(#loc195)
    %100 = tt.bitcast %99 : tensor<16x2x2xf32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc196)
    %101 = tt.broadcast %40 : tensor<1x2x1xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %102 = arith.muli %100, %101 : tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %103 = "tt.reduce"(%102) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc242)
    %104 = tt.expand_dims %103 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc202)
    %105 = tt.broadcast %104 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc203)
    %106 = arith.muli %100, %36 : tensor<16x2x2xi32, #blocked6> loc(#loc204)
    %107 = "tt.reduce"(%106) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc245)
    %108 = tt.expand_dims %107 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc208)
    %109 = tt.broadcast %108 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc209)
    %110 = tt.reshape %105 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %111 = tt.reshape %109 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %112 = tt.bitcast %110 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %113 = tt.bitcast %111 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %114 = tt.reshape %95 : tensor<1x64xi16, #blocked> -> tensor<16x2x2xi16, #blocked6> loc(#loc214)
    %115 = tt.broadcast %61 : tensor<1x2x1xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %116 = arith.muli %114, %115 : tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %117 = "tt.reduce"(%116) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc248)
    %118 = tt.expand_dims %117 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc220)
    %119 = tt.broadcast %118 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc221)
    %120 = tt.broadcast %72 : tensor<1x2x1xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %121 = arith.muli %114, %120 : tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %122 = "tt.reduce"(%121) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc251)
    %123 = tt.expand_dims %122 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc227)
    %124 = tt.broadcast %123 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc228)
    %125 = tt.reshape %119 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %126 = tt.reshape %124 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %127 = tt.bitcast %96 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %128 = arith.cmpf olt, %112, %113 : tensor<1x64xf32, #blocked> loc(#loc232)
    %129 = arith.extui %128 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %130 = arith.xori %129, %98 : tensor<1x64xi32, #blocked> loc(#loc233)
    %131 = arith.cmpi ne, %130, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %132 = arith.xori %110, %111 : tensor<1x64xi32, #blocked> loc(#loc235)
    %133 = arith.select %131, %132, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %134 = arith.xori %127, %133 : tensor<1x64xi32, #blocked> loc(#loc237)
    %135 = arith.xori %125, %126 : tensor<1x64xi16, #blocked> loc(#loc238)
    %136 = arith.select %131, %135, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %137 = arith.xori %95, %136 : tensor<1x64xi16, #blocked> loc(#loc240)
    %138 = tt.bitcast %134 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %139 = tt.reshape %138 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %140 = tt.bitcast %139 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %141 = arith.muli %140, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %142 = "tt.reduce"(%141) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %143 = tt.expand_dims %142 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %144 = tt.broadcast %143 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %145 = arith.muli %140, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %146 = "tt.reduce"(%145) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %147 = tt.expand_dims %146 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %148 = tt.broadcast %147 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %149 = tt.reshape %144 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %150 = tt.reshape %148 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %151 = tt.bitcast %149 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %152 = tt.bitcast %150 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %153 = tt.reshape %137 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %154 = arith.muli %153, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %155 = "tt.reduce"(%154) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %156 = tt.expand_dims %155 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %157 = tt.broadcast %156 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %158 = arith.muli %153, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %159 = "tt.reduce"(%158) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %160 = tt.expand_dims %159 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %161 = tt.broadcast %160 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %162 = tt.reshape %157 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %163 = tt.reshape %161 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %164 = tt.bitcast %138 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %165 = arith.cmpf olt, %151, %152 : tensor<1x64xf32, #blocked> loc(#loc232)
    %166 = arith.extui %165 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %167 = arith.xori %166, %98 : tensor<1x64xi32, #blocked> loc(#loc233)
    %168 = arith.cmpi ne, %167, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %169 = arith.xori %149, %150 : tensor<1x64xi32, #blocked> loc(#loc235)
    %170 = arith.select %168, %169, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %171 = arith.xori %164, %170 : tensor<1x64xi32, #blocked> loc(#loc237)
    %172 = arith.xori %162, %163 : tensor<1x64xi16, #blocked> loc(#loc238)
    %173 = arith.select %168, %172, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %174 = arith.xori %137, %173 : tensor<1x64xi16, #blocked> loc(#loc240)
    %175 = tt.bitcast %171 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %176 = tt.broadcast %32 : tensor<1x2x1xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc145)
    %177 = tt.reshape %176 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc146)
    %178 = tt.reshape %175 : tensor<1x64xf32, #blocked> -> tensor<8x2x4xf32, #blocked5> loc(#loc195)
    %179 = tt.bitcast %178 : tensor<8x2x4xf32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc196)
    %180 = tt.broadcast %41 : tensor<1x2x1xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc198)
    %181 = arith.muli %179, %180 : tensor<8x2x4xi32, #blocked5> loc(#loc198)
    %182 = "tt.reduce"(%181) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc242)
    %183 = tt.expand_dims %182 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc202)
    %184 = tt.broadcast %183 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc203)
    %185 = arith.muli %179, %97 : tensor<8x2x4xi32, #blocked5> loc(#loc204)
    %186 = "tt.reduce"(%185) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc245)
    %187 = tt.expand_dims %186 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc208)
    %188 = tt.broadcast %187 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc209)
    %189 = tt.reshape %184 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %190 = tt.reshape %188 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %191 = tt.bitcast %189 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %192 = tt.bitcast %190 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %193 = tt.reshape %174 : tensor<1x64xi16, #blocked> -> tensor<8x2x4xi16, #blocked5> loc(#loc214)
    %194 = tt.broadcast %62 : tensor<1x2x1xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc216)
    %195 = arith.muli %193, %194 : tensor<8x2x4xi16, #blocked5> loc(#loc216)
    %196 = "tt.reduce"(%195) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc248)
    %197 = tt.expand_dims %196 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc220)
    %198 = tt.broadcast %197 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc221)
    %199 = tt.broadcast %73 : tensor<1x2x1xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc223)
    %200 = arith.muli %193, %199 : tensor<8x2x4xi16, #blocked5> loc(#loc223)
    %201 = "tt.reduce"(%200) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc251)
    %202 = tt.expand_dims %201 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc227)
    %203 = tt.broadcast %202 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc228)
    %204 = tt.reshape %198 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %205 = tt.reshape %203 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %206 = tt.bitcast %175 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %207 = arith.cmpf olt, %191, %192 : tensor<1x64xf32, #blocked> loc(#loc232)
    %208 = arith.extui %207 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %209 = arith.xori %208, %177 : tensor<1x64xi32, #blocked> loc(#loc233)
    %210 = arith.cmpi ne, %209, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %211 = arith.xori %189, %190 : tensor<1x64xi32, #blocked> loc(#loc235)
    %212 = arith.select %210, %211, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %213 = arith.xori %206, %212 : tensor<1x64xi32, #blocked> loc(#loc237)
    %214 = arith.xori %204, %205 : tensor<1x64xi16, #blocked> loc(#loc238)
    %215 = arith.select %210, %214, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %216 = arith.xori %174, %215 : tensor<1x64xi16, #blocked> loc(#loc240)
    %217 = tt.bitcast %213 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %218 = tt.reshape %217 : tensor<1x64xf32, #blocked> -> tensor<16x2x2xf32, #blocked6> loc(#loc195)
    %219 = tt.bitcast %218 : tensor<16x2x2xf32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc196)
    %220 = arith.muli %219, %101 : tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %221 = "tt.reduce"(%220) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc242)
    %222 = tt.expand_dims %221 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc202)
    %223 = tt.broadcast %222 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc203)
    %224 = arith.muli %219, %36 : tensor<16x2x2xi32, #blocked6> loc(#loc204)
    %225 = "tt.reduce"(%224) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc245)
    %226 = tt.expand_dims %225 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc208)
    %227 = tt.broadcast %226 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc209)
    %228 = tt.reshape %223 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %229 = tt.reshape %227 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %230 = tt.bitcast %228 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %231 = tt.bitcast %229 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %232 = tt.reshape %216 : tensor<1x64xi16, #blocked> -> tensor<16x2x2xi16, #blocked6> loc(#loc214)
    %233 = arith.muli %232, %115 : tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %234 = "tt.reduce"(%233) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc248)
    %235 = tt.expand_dims %234 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc220)
    %236 = tt.broadcast %235 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc221)
    %237 = arith.muli %232, %120 : tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %238 = "tt.reduce"(%237) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc251)
    %239 = tt.expand_dims %238 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc227)
    %240 = tt.broadcast %239 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc228)
    %241 = tt.reshape %236 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %242 = tt.reshape %240 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %243 = tt.bitcast %217 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %244 = arith.cmpf olt, %230, %231 : tensor<1x64xf32, #blocked> loc(#loc232)
    %245 = arith.extui %244 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %246 = arith.xori %245, %177 : tensor<1x64xi32, #blocked> loc(#loc233)
    %247 = arith.cmpi ne, %246, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %248 = arith.xori %228, %229 : tensor<1x64xi32, #blocked> loc(#loc235)
    %249 = arith.select %247, %248, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %250 = arith.xori %243, %249 : tensor<1x64xi32, #blocked> loc(#loc237)
    %251 = arith.xori %241, %242 : tensor<1x64xi16, #blocked> loc(#loc238)
    %252 = arith.select %247, %251, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %253 = arith.xori %216, %252 : tensor<1x64xi16, #blocked> loc(#loc240)
    %254 = tt.bitcast %250 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %255 = tt.reshape %254 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %256 = tt.bitcast %255 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %257 = arith.muli %256, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %258 = "tt.reduce"(%257) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %259 = tt.expand_dims %258 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %260 = tt.broadcast %259 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %261 = arith.muli %256, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %262 = "tt.reduce"(%261) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %263 = tt.expand_dims %262 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %264 = tt.broadcast %263 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %265 = tt.reshape %260 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %266 = tt.reshape %264 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %267 = tt.bitcast %265 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %268 = tt.bitcast %266 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %269 = tt.reshape %253 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %270 = arith.muli %269, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %271 = "tt.reduce"(%270) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %272 = tt.expand_dims %271 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %273 = tt.broadcast %272 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %274 = arith.muli %269, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %275 = "tt.reduce"(%274) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %276 = tt.expand_dims %275 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %277 = tt.broadcast %276 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %278 = tt.reshape %273 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %279 = tt.reshape %277 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %280 = tt.bitcast %254 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %281 = arith.cmpf olt, %267, %268 : tensor<1x64xf32, #blocked> loc(#loc232)
    %282 = arith.extui %281 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %283 = arith.xori %282, %177 : tensor<1x64xi32, #blocked> loc(#loc233)
    %284 = arith.cmpi ne, %283, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %285 = arith.xori %265, %266 : tensor<1x64xi32, #blocked> loc(#loc235)
    %286 = arith.select %284, %285, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %287 = arith.xori %280, %286 : tensor<1x64xi32, #blocked> loc(#loc237)
    %288 = arith.xori %278, %279 : tensor<1x64xi16, #blocked> loc(#loc238)
    %289 = arith.select %284, %288, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %290 = arith.xori %253, %289 : tensor<1x64xi16, #blocked> loc(#loc240)
    %291 = tt.bitcast %287 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %292 = tt.broadcast %33 : tensor<1x2x1xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc145)
    %293 = tt.reshape %292 : tensor<2x2x16xi32, #blocked3> -> tensor<1x64xi32, #blocked> loc(#loc146)
    %294 = tt.reshape %291 : tensor<1x64xf32, #blocked> -> tensor<4x2x8xf32, #blocked4> loc(#loc195)
    %295 = tt.bitcast %294 : tensor<4x2x8xf32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc196)
    %296 = tt.broadcast %42 : tensor<1x2x1xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc198)
    %297 = arith.muli %295, %296 : tensor<4x2x8xi32, #blocked4> loc(#loc198)
    %298 = "tt.reduce"(%297) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc242)
    %299 = tt.expand_dims %298 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc202)
    %300 = tt.broadcast %299 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc203)
    %301 = arith.muli %295, %176 : tensor<4x2x8xi32, #blocked4> loc(#loc204)
    %302 = "tt.reduce"(%301) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc245)
    %303 = tt.expand_dims %302 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc208)
    %304 = tt.broadcast %303 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc209)
    %305 = tt.reshape %300 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %306 = tt.reshape %304 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %307 = tt.bitcast %305 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %308 = tt.bitcast %306 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %309 = tt.reshape %290 : tensor<1x64xi16, #blocked> -> tensor<4x2x8xi16, #blocked4> loc(#loc214)
    %310 = tt.broadcast %63 : tensor<1x2x1xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc216)
    %311 = arith.muli %309, %310 : tensor<4x2x8xi16, #blocked4> loc(#loc216)
    %312 = "tt.reduce"(%311) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc248)
    %313 = tt.expand_dims %312 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc220)
    %314 = tt.broadcast %313 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc221)
    %315 = tt.broadcast %74 : tensor<1x2x1xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc223)
    %316 = arith.muli %309, %315 : tensor<4x2x8xi16, #blocked4> loc(#loc223)
    %317 = "tt.reduce"(%316) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc251)
    %318 = tt.expand_dims %317 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc227)
    %319 = tt.broadcast %318 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc228)
    %320 = tt.reshape %314 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %321 = tt.reshape %319 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %322 = tt.bitcast %291 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %323 = arith.cmpf olt, %307, %308 : tensor<1x64xf32, #blocked> loc(#loc232)
    %324 = arith.extui %323 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %325 = arith.xori %324, %293 : tensor<1x64xi32, #blocked> loc(#loc233)
    %326 = arith.cmpi ne, %325, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %327 = arith.xori %305, %306 : tensor<1x64xi32, #blocked> loc(#loc235)
    %328 = arith.select %326, %327, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %329 = arith.xori %322, %328 : tensor<1x64xi32, #blocked> loc(#loc237)
    %330 = arith.xori %320, %321 : tensor<1x64xi16, #blocked> loc(#loc238)
    %331 = arith.select %326, %330, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %332 = arith.xori %290, %331 : tensor<1x64xi16, #blocked> loc(#loc240)
    %333 = tt.bitcast %329 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %334 = tt.reshape %333 : tensor<1x64xf32, #blocked> -> tensor<8x2x4xf32, #blocked5> loc(#loc195)
    %335 = tt.bitcast %334 : tensor<8x2x4xf32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc196)
    %336 = arith.muli %335, %180 : tensor<8x2x4xi32, #blocked5> loc(#loc198)
    %337 = "tt.reduce"(%336) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc242)
    %338 = tt.expand_dims %337 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc202)
    %339 = tt.broadcast %338 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc203)
    %340 = arith.muli %335, %97 : tensor<8x2x4xi32, #blocked5> loc(#loc204)
    %341 = "tt.reduce"(%340) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc245)
    %342 = tt.expand_dims %341 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc208)
    %343 = tt.broadcast %342 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc209)
    %344 = tt.reshape %339 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %345 = tt.reshape %343 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %346 = tt.bitcast %344 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %347 = tt.bitcast %345 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %348 = tt.reshape %332 : tensor<1x64xi16, #blocked> -> tensor<8x2x4xi16, #blocked5> loc(#loc214)
    %349 = arith.muli %348, %194 : tensor<8x2x4xi16, #blocked5> loc(#loc216)
    %350 = "tt.reduce"(%349) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc248)
    %351 = tt.expand_dims %350 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc220)
    %352 = tt.broadcast %351 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc221)
    %353 = arith.muli %348, %199 : tensor<8x2x4xi16, #blocked5> loc(#loc223)
    %354 = "tt.reduce"(%353) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc251)
    %355 = tt.expand_dims %354 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc227)
    %356 = tt.broadcast %355 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc228)
    %357 = tt.reshape %352 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %358 = tt.reshape %356 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %359 = tt.bitcast %333 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %360 = arith.cmpf olt, %346, %347 : tensor<1x64xf32, #blocked> loc(#loc232)
    %361 = arith.extui %360 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %362 = arith.xori %361, %293 : tensor<1x64xi32, #blocked> loc(#loc233)
    %363 = arith.cmpi ne, %362, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %364 = arith.xori %344, %345 : tensor<1x64xi32, #blocked> loc(#loc235)
    %365 = arith.select %363, %364, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %366 = arith.xori %359, %365 : tensor<1x64xi32, #blocked> loc(#loc237)
    %367 = arith.xori %357, %358 : tensor<1x64xi16, #blocked> loc(#loc238)
    %368 = arith.select %363, %367, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %369 = arith.xori %332, %368 : tensor<1x64xi16, #blocked> loc(#loc240)
    %370 = tt.bitcast %366 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %371 = tt.reshape %370 : tensor<1x64xf32, #blocked> -> tensor<16x2x2xf32, #blocked6> loc(#loc195)
    %372 = tt.bitcast %371 : tensor<16x2x2xf32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc196)
    %373 = arith.muli %372, %101 : tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %374 = "tt.reduce"(%373) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc242)
    %375 = tt.expand_dims %374 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc202)
    %376 = tt.broadcast %375 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc203)
    %377 = arith.muli %372, %36 : tensor<16x2x2xi32, #blocked6> loc(#loc204)
    %378 = "tt.reduce"(%377) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc245)
    %379 = tt.expand_dims %378 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc208)
    %380 = tt.broadcast %379 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc209)
    %381 = tt.reshape %376 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %382 = tt.reshape %380 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %383 = tt.bitcast %381 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %384 = tt.bitcast %382 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %385 = tt.reshape %369 : tensor<1x64xi16, #blocked> -> tensor<16x2x2xi16, #blocked6> loc(#loc214)
    %386 = arith.muli %385, %115 : tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %387 = "tt.reduce"(%386) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc248)
    %388 = tt.expand_dims %387 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc220)
    %389 = tt.broadcast %388 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc221)
    %390 = arith.muli %385, %120 : tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %391 = "tt.reduce"(%390) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc251)
    %392 = tt.expand_dims %391 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc227)
    %393 = tt.broadcast %392 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc228)
    %394 = tt.reshape %389 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %395 = tt.reshape %393 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %396 = tt.bitcast %370 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %397 = arith.cmpf olt, %383, %384 : tensor<1x64xf32, #blocked> loc(#loc232)
    %398 = arith.extui %397 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %399 = arith.xori %398, %293 : tensor<1x64xi32, #blocked> loc(#loc233)
    %400 = arith.cmpi ne, %399, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %401 = arith.xori %381, %382 : tensor<1x64xi32, #blocked> loc(#loc235)
    %402 = arith.select %400, %401, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %403 = arith.xori %396, %402 : tensor<1x64xi32, #blocked> loc(#loc237)
    %404 = arith.xori %394, %395 : tensor<1x64xi16, #blocked> loc(#loc238)
    %405 = arith.select %400, %404, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %406 = arith.xori %369, %405 : tensor<1x64xi16, #blocked> loc(#loc240)
    %407 = tt.bitcast %403 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %408 = tt.reshape %407 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %409 = tt.bitcast %408 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %410 = arith.muli %409, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %411 = "tt.reduce"(%410) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %412 = tt.expand_dims %411 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %413 = tt.broadcast %412 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %414 = arith.muli %409, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %415 = "tt.reduce"(%414) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %416 = tt.expand_dims %415 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %417 = tt.broadcast %416 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %418 = tt.reshape %413 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %419 = tt.reshape %417 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %420 = tt.bitcast %418 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %421 = tt.bitcast %419 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %422 = tt.reshape %406 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %423 = arith.muli %422, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %424 = "tt.reduce"(%423) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %425 = tt.expand_dims %424 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %426 = tt.broadcast %425 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %427 = arith.muli %422, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %428 = "tt.reduce"(%427) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %429 = tt.expand_dims %428 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %430 = tt.broadcast %429 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %431 = tt.reshape %426 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %432 = tt.reshape %430 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %433 = tt.bitcast %407 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %434 = arith.cmpf olt, %420, %421 : tensor<1x64xf32, #blocked> loc(#loc232)
    %435 = arith.extui %434 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %436 = arith.xori %435, %293 : tensor<1x64xi32, #blocked> loc(#loc233)
    %437 = arith.cmpi ne, %436, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %438 = arith.xori %418, %419 : tensor<1x64xi32, #blocked> loc(#loc235)
    %439 = arith.select %437, %438, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %440 = arith.xori %433, %439 : tensor<1x64xi32, #blocked> loc(#loc237)
    %441 = arith.xori %431, %432 : tensor<1x64xi16, #blocked> loc(#loc238)
    %442 = arith.select %437, %441, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %443 = arith.xori %406, %442 : tensor<1x64xi16, #blocked> loc(#loc240)
    %444 = tt.bitcast %440 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %445 = tt.broadcast %34 : tensor<1x2x1xi32, #blocked2> -> tensor<1x2x32xi32, #blocked2> loc(#loc145)
    %446 = tt.reshape %445 : tensor<1x2x32xi32, #blocked2> -> tensor<1x64xi32, #blocked> loc(#loc146)
    %447 = tt.reshape %444 : tensor<1x64xf32, #blocked> -> tensor<2x2x16xf32, #blocked3> loc(#loc195)
    %448 = tt.bitcast %447 : tensor<2x2x16xf32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc196)
    %449 = tt.broadcast %43 : tensor<1x2x1xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc198)
    %450 = arith.muli %448, %449 : tensor<2x2x16xi32, #blocked3> loc(#loc198)
    %451 = "tt.reduce"(%450) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<2x2x16xi32, #blocked3>) -> tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc242)
    %452 = tt.expand_dims %451 {axis = 1 : i32} : tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi32, #blocked3> loc(#loc202)
    %453 = tt.broadcast %452 : tensor<2x1x16xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc203)
    %454 = arith.muli %448, %292 : tensor<2x2x16xi32, #blocked3> loc(#loc204)
    %455 = "tt.reduce"(%454) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<2x2x16xi32, #blocked3>) -> tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc245)
    %456 = tt.expand_dims %455 {axis = 1 : i32} : tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi32, #blocked3> loc(#loc208)
    %457 = tt.broadcast %456 : tensor<2x1x16xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc209)
    %458 = tt.reshape %453 : tensor<2x2x16xi32, #blocked3> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %459 = tt.reshape %457 : tensor<2x2x16xi32, #blocked3> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %460 = tt.bitcast %458 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %461 = tt.bitcast %459 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %462 = tt.reshape %443 : tensor<1x64xi16, #blocked> -> tensor<2x2x16xi16, #blocked3> loc(#loc214)
    %463 = tt.broadcast %64 : tensor<1x2x1xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc216)
    %464 = arith.muli %462, %463 : tensor<2x2x16xi16, #blocked3> loc(#loc216)
    %465 = "tt.reduce"(%464) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<2x2x16xi16, #blocked3>) -> tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc248)
    %466 = tt.expand_dims %465 {axis = 1 : i32} : tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi16, #blocked3> loc(#loc220)
    %467 = tt.broadcast %466 : tensor<2x1x16xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc221)
    %468 = tt.broadcast %75 : tensor<1x2x1xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc223)
    %469 = arith.muli %462, %468 : tensor<2x2x16xi16, #blocked3> loc(#loc223)
    %470 = "tt.reduce"(%469) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<2x2x16xi16, #blocked3>) -> tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc251)
    %471 = tt.expand_dims %470 {axis = 1 : i32} : tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi16, #blocked3> loc(#loc227)
    %472 = tt.broadcast %471 : tensor<2x1x16xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc228)
    %473 = tt.reshape %467 : tensor<2x2x16xi16, #blocked3> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %474 = tt.reshape %472 : tensor<2x2x16xi16, #blocked3> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %475 = tt.bitcast %444 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %476 = arith.cmpf olt, %460, %461 : tensor<1x64xf32, #blocked> loc(#loc232)
    %477 = arith.extui %476 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %478 = arith.xori %477, %446 : tensor<1x64xi32, #blocked> loc(#loc233)
    %479 = arith.cmpi ne, %478, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %480 = arith.xori %458, %459 : tensor<1x64xi32, #blocked> loc(#loc235)
    %481 = arith.select %479, %480, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %482 = arith.xori %475, %481 : tensor<1x64xi32, #blocked> loc(#loc237)
    %483 = arith.xori %473, %474 : tensor<1x64xi16, #blocked> loc(#loc238)
    %484 = arith.select %479, %483, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %485 = arith.xori %443, %484 : tensor<1x64xi16, #blocked> loc(#loc240)
    %486 = tt.bitcast %482 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %487 = tt.reshape %486 : tensor<1x64xf32, #blocked> -> tensor<4x2x8xf32, #blocked4> loc(#loc195)
    %488 = tt.bitcast %487 : tensor<4x2x8xf32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc196)
    %489 = arith.muli %488, %296 : tensor<4x2x8xi32, #blocked4> loc(#loc198)
    %490 = "tt.reduce"(%489) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc242)
    %491 = tt.expand_dims %490 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc202)
    %492 = tt.broadcast %491 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc203)
    %493 = arith.muli %488, %176 : tensor<4x2x8xi32, #blocked4> loc(#loc204)
    %494 = "tt.reduce"(%493) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc245)
    %495 = tt.expand_dims %494 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc208)
    %496 = tt.broadcast %495 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc209)
    %497 = tt.reshape %492 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %498 = tt.reshape %496 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %499 = tt.bitcast %497 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %500 = tt.bitcast %498 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %501 = tt.reshape %485 : tensor<1x64xi16, #blocked> -> tensor<4x2x8xi16, #blocked4> loc(#loc214)
    %502 = arith.muli %501, %310 : tensor<4x2x8xi16, #blocked4> loc(#loc216)
    %503 = "tt.reduce"(%502) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc248)
    %504 = tt.expand_dims %503 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc220)
    %505 = tt.broadcast %504 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc221)
    %506 = arith.muli %501, %315 : tensor<4x2x8xi16, #blocked4> loc(#loc223)
    %507 = "tt.reduce"(%506) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc251)
    %508 = tt.expand_dims %507 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc227)
    %509 = tt.broadcast %508 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc228)
    %510 = tt.reshape %505 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %511 = tt.reshape %509 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %512 = tt.bitcast %486 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %513 = arith.cmpf olt, %499, %500 : tensor<1x64xf32, #blocked> loc(#loc232)
    %514 = arith.extui %513 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %515 = arith.xori %514, %446 : tensor<1x64xi32, #blocked> loc(#loc233)
    %516 = arith.cmpi ne, %515, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %517 = arith.xori %497, %498 : tensor<1x64xi32, #blocked> loc(#loc235)
    %518 = arith.select %516, %517, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %519 = arith.xori %512, %518 : tensor<1x64xi32, #blocked> loc(#loc237)
    %520 = arith.xori %510, %511 : tensor<1x64xi16, #blocked> loc(#loc238)
    %521 = arith.select %516, %520, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %522 = arith.xori %485, %521 : tensor<1x64xi16, #blocked> loc(#loc240)
    %523 = tt.bitcast %519 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %524 = tt.reshape %523 : tensor<1x64xf32, #blocked> -> tensor<8x2x4xf32, #blocked5> loc(#loc195)
    %525 = tt.bitcast %524 : tensor<8x2x4xf32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc196)
    %526 = arith.muli %525, %180 : tensor<8x2x4xi32, #blocked5> loc(#loc198)
    %527 = "tt.reduce"(%526) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc242)
    %528 = tt.expand_dims %527 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc202)
    %529 = tt.broadcast %528 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc203)
    %530 = arith.muli %525, %97 : tensor<8x2x4xi32, #blocked5> loc(#loc204)
    %531 = "tt.reduce"(%530) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc245)
    %532 = tt.expand_dims %531 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc208)
    %533 = tt.broadcast %532 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc209)
    %534 = tt.reshape %529 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %535 = tt.reshape %533 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %536 = tt.bitcast %534 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %537 = tt.bitcast %535 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %538 = tt.reshape %522 : tensor<1x64xi16, #blocked> -> tensor<8x2x4xi16, #blocked5> loc(#loc214)
    %539 = arith.muli %538, %194 : tensor<8x2x4xi16, #blocked5> loc(#loc216)
    %540 = "tt.reduce"(%539) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc248)
    %541 = tt.expand_dims %540 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc220)
    %542 = tt.broadcast %541 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc221)
    %543 = arith.muli %538, %199 : tensor<8x2x4xi16, #blocked5> loc(#loc223)
    %544 = "tt.reduce"(%543) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc251)
    %545 = tt.expand_dims %544 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc227)
    %546 = tt.broadcast %545 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc228)
    %547 = tt.reshape %542 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %548 = tt.reshape %546 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %549 = tt.bitcast %523 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %550 = arith.cmpf olt, %536, %537 : tensor<1x64xf32, #blocked> loc(#loc232)
    %551 = arith.extui %550 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %552 = arith.xori %551, %446 : tensor<1x64xi32, #blocked> loc(#loc233)
    %553 = arith.cmpi ne, %552, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %554 = arith.xori %534, %535 : tensor<1x64xi32, #blocked> loc(#loc235)
    %555 = arith.select %553, %554, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %556 = arith.xori %549, %555 : tensor<1x64xi32, #blocked> loc(#loc237)
    %557 = arith.xori %547, %548 : tensor<1x64xi16, #blocked> loc(#loc238)
    %558 = arith.select %553, %557, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %559 = arith.xori %522, %558 : tensor<1x64xi16, #blocked> loc(#loc240)
    %560 = tt.bitcast %556 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %561 = tt.reshape %560 : tensor<1x64xf32, #blocked> -> tensor<16x2x2xf32, #blocked6> loc(#loc195)
    %562 = tt.bitcast %561 : tensor<16x2x2xf32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc196)
    %563 = arith.muli %562, %101 : tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %564 = "tt.reduce"(%563) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc242)
    %565 = tt.expand_dims %564 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc202)
    %566 = tt.broadcast %565 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc203)
    %567 = arith.muli %562, %36 : tensor<16x2x2xi32, #blocked6> loc(#loc204)
    %568 = "tt.reduce"(%567) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc245)
    %569 = tt.expand_dims %568 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc208)
    %570 = tt.broadcast %569 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc209)
    %571 = tt.reshape %566 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %572 = tt.reshape %570 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %573 = tt.bitcast %571 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %574 = tt.bitcast %572 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %575 = tt.reshape %559 : tensor<1x64xi16, #blocked> -> tensor<16x2x2xi16, #blocked6> loc(#loc214)
    %576 = arith.muli %575, %115 : tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %577 = "tt.reduce"(%576) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc248)
    %578 = tt.expand_dims %577 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc220)
    %579 = tt.broadcast %578 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc221)
    %580 = arith.muli %575, %120 : tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %581 = "tt.reduce"(%580) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc251)
    %582 = tt.expand_dims %581 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc227)
    %583 = tt.broadcast %582 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc228)
    %584 = tt.reshape %579 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %585 = tt.reshape %583 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %586 = tt.bitcast %560 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %587 = arith.cmpf olt, %573, %574 : tensor<1x64xf32, #blocked> loc(#loc232)
    %588 = arith.extui %587 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %589 = arith.xori %588, %446 : tensor<1x64xi32, #blocked> loc(#loc233)
    %590 = arith.cmpi ne, %589, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %591 = arith.xori %571, %572 : tensor<1x64xi32, #blocked> loc(#loc235)
    %592 = arith.select %590, %591, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %593 = arith.xori %586, %592 : tensor<1x64xi32, #blocked> loc(#loc237)
    %594 = arith.xori %584, %585 : tensor<1x64xi16, #blocked> loc(#loc238)
    %595 = arith.select %590, %594, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %596 = arith.xori %559, %595 : tensor<1x64xi16, #blocked> loc(#loc240)
    %597 = tt.bitcast %593 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %598 = tt.reshape %597 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %599 = tt.bitcast %598 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %600 = arith.muli %599, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %601 = "tt.reduce"(%600) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %602 = tt.expand_dims %601 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %603 = tt.broadcast %602 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %604 = arith.muli %599, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %605 = "tt.reduce"(%604) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %606 = tt.expand_dims %605 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %607 = tt.broadcast %606 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %608 = tt.reshape %603 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %609 = tt.reshape %607 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %610 = tt.bitcast %608 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %611 = tt.bitcast %609 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %612 = tt.reshape %596 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %613 = arith.muli %612, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %614 = "tt.reduce"(%613) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %615 = tt.expand_dims %614 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %616 = tt.broadcast %615 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %617 = arith.muli %612, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %618 = "tt.reduce"(%617) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %619 = tt.expand_dims %618 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %620 = tt.broadcast %619 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %621 = tt.reshape %616 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %622 = tt.reshape %620 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %623 = tt.bitcast %597 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %624 = arith.cmpf olt, %610, %611 : tensor<1x64xf32, #blocked> loc(#loc232)
    %625 = arith.extui %624 : tensor<1x64xi1, #blocked> to tensor<1x64xi32, #blocked> loc(#loc233)
    %626 = arith.xori %625, %446 : tensor<1x64xi32, #blocked> loc(#loc233)
    %627 = arith.cmpi ne, %626, %cst_8 : tensor<1x64xi32, #blocked> loc(#loc234)
    %628 = arith.xori %608, %609 : tensor<1x64xi32, #blocked> loc(#loc235)
    %629 = arith.select %627, %628, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %630 = arith.xori %623, %629 : tensor<1x64xi32, #blocked> loc(#loc237)
    %631 = arith.xori %621, %622 : tensor<1x64xi16, #blocked> loc(#loc238)
    %632 = arith.select %627, %631, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %633 = arith.xori %596, %632 : tensor<1x64xi16, #blocked> loc(#loc240)
    %634 = tt.bitcast %630 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %635 = tt.reshape %634 : tensor<1x64xf32, #blocked> -> tensor<1x2x32xf32, #blocked2> loc(#loc195)
    %636 = tt.bitcast %635 : tensor<1x2x32xf32, #blocked2> -> tensor<1x2x32xi32, #blocked2> loc(#loc196)
    %637 = tt.broadcast %44 : tensor<1x2x1xi32, #blocked2> -> tensor<1x2x32xi32, #blocked2> loc(#loc198)
    %638 = arith.muli %636, %637 : tensor<1x2x32xi32, #blocked2> loc(#loc198)
    %639 = "tt.reduce"(%638) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<1x2x32xi32, #blocked2>) -> tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc242)
    %640 = tt.expand_dims %639 {axis = 1 : i32} : tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<1x1x32xi32, #blocked2> loc(#loc202)
    %641 = tt.broadcast %640 : tensor<1x1x32xi32, #blocked2> -> tensor<1x2x32xi32, #blocked2> loc(#loc203)
    %642 = arith.muli %636, %445 : tensor<1x2x32xi32, #blocked2> loc(#loc204)
    %643 = "tt.reduce"(%642) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<1x2x32xi32, #blocked2>) -> tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc245)
    %644 = tt.expand_dims %643 {axis = 1 : i32} : tensor<1x32xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<1x1x32xi32, #blocked2> loc(#loc208)
    %645 = tt.broadcast %644 : tensor<1x1x32xi32, #blocked2> -> tensor<1x2x32xi32, #blocked2> loc(#loc209)
    %646 = tt.reshape %641 : tensor<1x2x32xi32, #blocked2> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %647 = tt.reshape %645 : tensor<1x2x32xi32, #blocked2> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %648 = tt.bitcast %646 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %649 = tt.bitcast %647 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %650 = tt.reshape %633 : tensor<1x64xi16, #blocked> -> tensor<1x2x32xi16, #blocked2> loc(#loc214)
    %651 = tt.broadcast %65 : tensor<1x2x1xi16, #blocked2> -> tensor<1x2x32xi16, #blocked2> loc(#loc216)
    %652 = arith.muli %650, %651 : tensor<1x2x32xi16, #blocked2> loc(#loc216)
    %653 = "tt.reduce"(%652) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<1x2x32xi16, #blocked2>) -> tensor<1x32xi16, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc248)
    %654 = tt.expand_dims %653 {axis = 1 : i32} : tensor<1x32xi16, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<1x1x32xi16, #blocked2> loc(#loc220)
    %655 = tt.broadcast %654 : tensor<1x1x32xi16, #blocked2> -> tensor<1x2x32xi16, #blocked2> loc(#loc221)
    %656 = tt.broadcast %76 : tensor<1x2x1xi16, #blocked2> -> tensor<1x2x32xi16, #blocked2> loc(#loc223)
    %657 = arith.muli %650, %656 : tensor<1x2x32xi16, #blocked2> loc(#loc223)
    %658 = "tt.reduce"(%657) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<1x2x32xi16, #blocked2>) -> tensor<1x32xi16, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc251)
    %659 = tt.expand_dims %658 {axis = 1 : i32} : tensor<1x32xi16, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<1x1x32xi16, #blocked2> loc(#loc227)
    %660 = tt.broadcast %659 : tensor<1x1x32xi16, #blocked2> -> tensor<1x2x32xi16, #blocked2> loc(#loc228)
    %661 = tt.reshape %655 : tensor<1x2x32xi16, #blocked2> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %662 = tt.reshape %660 : tensor<1x2x32xi16, #blocked2> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %663 = tt.bitcast %634 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %664 = arith.cmpf olt, %648, %649 : tensor<1x64xf32, #blocked> loc(#loc232)
    %665 = arith.xori %646, %647 : tensor<1x64xi32, #blocked> loc(#loc235)
    %666 = arith.select %664, %665, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %667 = arith.xori %663, %666 : tensor<1x64xi32, #blocked> loc(#loc237)
    %668 = arith.xori %661, %662 : tensor<1x64xi16, #blocked> loc(#loc238)
    %669 = arith.select %664, %668, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %670 = arith.xori %633, %669 : tensor<1x64xi16, #blocked> loc(#loc240)
    %671 = tt.bitcast %667 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %672 = tt.reshape %671 : tensor<1x64xf32, #blocked> -> tensor<2x2x16xf32, #blocked3> loc(#loc195)
    %673 = tt.bitcast %672 : tensor<2x2x16xf32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc196)
    %674 = arith.muli %673, %449 : tensor<2x2x16xi32, #blocked3> loc(#loc198)
    %675 = "tt.reduce"(%674) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<2x2x16xi32, #blocked3>) -> tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc242)
    %676 = tt.expand_dims %675 {axis = 1 : i32} : tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi32, #blocked3> loc(#loc202)
    %677 = tt.broadcast %676 : tensor<2x1x16xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc203)
    %678 = arith.muli %673, %292 : tensor<2x2x16xi32, #blocked3> loc(#loc204)
    %679 = "tt.reduce"(%678) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<2x2x16xi32, #blocked3>) -> tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc245)
    %680 = tt.expand_dims %679 {axis = 1 : i32} : tensor<2x16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi32, #blocked3> loc(#loc208)
    %681 = tt.broadcast %680 : tensor<2x1x16xi32, #blocked3> -> tensor<2x2x16xi32, #blocked3> loc(#loc209)
    %682 = tt.reshape %677 : tensor<2x2x16xi32, #blocked3> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %683 = tt.reshape %681 : tensor<2x2x16xi32, #blocked3> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %684 = tt.bitcast %682 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %685 = tt.bitcast %683 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %686 = tt.reshape %670 : tensor<1x64xi16, #blocked> -> tensor<2x2x16xi16, #blocked3> loc(#loc214)
    %687 = arith.muli %686, %463 : tensor<2x2x16xi16, #blocked3> loc(#loc216)
    %688 = "tt.reduce"(%687) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<2x2x16xi16, #blocked3>) -> tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc248)
    %689 = tt.expand_dims %688 {axis = 1 : i32} : tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi16, #blocked3> loc(#loc220)
    %690 = tt.broadcast %689 : tensor<2x1x16xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc221)
    %691 = arith.muli %686, %468 : tensor<2x2x16xi16, #blocked3> loc(#loc223)
    %692 = "tt.reduce"(%691) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<2x2x16xi16, #blocked3>) -> tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc251)
    %693 = tt.expand_dims %692 {axis = 1 : i32} : tensor<2x16xi16, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<2x1x16xi16, #blocked3> loc(#loc227)
    %694 = tt.broadcast %693 : tensor<2x1x16xi16, #blocked3> -> tensor<2x2x16xi16, #blocked3> loc(#loc228)
    %695 = tt.reshape %690 : tensor<2x2x16xi16, #blocked3> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %696 = tt.reshape %694 : tensor<2x2x16xi16, #blocked3> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %697 = tt.bitcast %671 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %698 = arith.cmpf olt, %684, %685 : tensor<1x64xf32, #blocked> loc(#loc232)
    %699 = arith.xori %682, %683 : tensor<1x64xi32, #blocked> loc(#loc235)
    %700 = arith.select %698, %699, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %701 = arith.xori %697, %700 : tensor<1x64xi32, #blocked> loc(#loc237)
    %702 = arith.xori %695, %696 : tensor<1x64xi16, #blocked> loc(#loc238)
    %703 = arith.select %698, %702, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %704 = arith.xori %670, %703 : tensor<1x64xi16, #blocked> loc(#loc240)
    %705 = tt.bitcast %701 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %706 = tt.reshape %705 : tensor<1x64xf32, #blocked> -> tensor<4x2x8xf32, #blocked4> loc(#loc195)
    %707 = tt.bitcast %706 : tensor<4x2x8xf32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc196)
    %708 = arith.muli %707, %296 : tensor<4x2x8xi32, #blocked4> loc(#loc198)
    %709 = "tt.reduce"(%708) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc242)
    %710 = tt.expand_dims %709 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc202)
    %711 = tt.broadcast %710 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc203)
    %712 = arith.muli %707, %176 : tensor<4x2x8xi32, #blocked4> loc(#loc204)
    %713 = "tt.reduce"(%712) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<4x2x8xi32, #blocked4>) -> tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc245)
    %714 = tt.expand_dims %713 {axis = 1 : i32} : tensor<4x8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi32, #blocked4> loc(#loc208)
    %715 = tt.broadcast %714 : tensor<4x1x8xi32, #blocked4> -> tensor<4x2x8xi32, #blocked4> loc(#loc209)
    %716 = tt.reshape %711 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %717 = tt.reshape %715 : tensor<4x2x8xi32, #blocked4> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %718 = tt.bitcast %716 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %719 = tt.bitcast %717 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %720 = tt.reshape %704 : tensor<1x64xi16, #blocked> -> tensor<4x2x8xi16, #blocked4> loc(#loc214)
    %721 = arith.muli %720, %310 : tensor<4x2x8xi16, #blocked4> loc(#loc216)
    %722 = "tt.reduce"(%721) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc248)
    %723 = tt.expand_dims %722 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc220)
    %724 = tt.broadcast %723 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc221)
    %725 = arith.muli %720, %315 : tensor<4x2x8xi16, #blocked4> loc(#loc223)
    %726 = "tt.reduce"(%725) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<4x2x8xi16, #blocked4>) -> tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> loc(#loc251)
    %727 = tt.expand_dims %726 {axis = 1 : i32} : tensor<4x8xi16, #triton_gpu.slice<{dim = 1, parent = #blocked4}>> -> tensor<4x1x8xi16, #blocked4> loc(#loc227)
    %728 = tt.broadcast %727 : tensor<4x1x8xi16, #blocked4> -> tensor<4x2x8xi16, #blocked4> loc(#loc228)
    %729 = tt.reshape %724 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %730 = tt.reshape %728 : tensor<4x2x8xi16, #blocked4> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %731 = tt.bitcast %705 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %732 = arith.cmpf olt, %718, %719 : tensor<1x64xf32, #blocked> loc(#loc232)
    %733 = arith.xori %716, %717 : tensor<1x64xi32, #blocked> loc(#loc235)
    %734 = arith.select %732, %733, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %735 = arith.xori %731, %734 : tensor<1x64xi32, #blocked> loc(#loc237)
    %736 = arith.xori %729, %730 : tensor<1x64xi16, #blocked> loc(#loc238)
    %737 = arith.select %732, %736, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %738 = arith.xori %704, %737 : tensor<1x64xi16, #blocked> loc(#loc240)
    %739 = tt.bitcast %735 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %740 = tt.reshape %739 : tensor<1x64xf32, #blocked> -> tensor<8x2x4xf32, #blocked5> loc(#loc195)
    %741 = tt.bitcast %740 : tensor<8x2x4xf32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc196)
    %742 = arith.muli %741, %180 : tensor<8x2x4xi32, #blocked5> loc(#loc198)
    %743 = "tt.reduce"(%742) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc242)
    %744 = tt.expand_dims %743 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc202)
    %745 = tt.broadcast %744 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc203)
    %746 = arith.muli %741, %97 : tensor<8x2x4xi32, #blocked5> loc(#loc204)
    %747 = "tt.reduce"(%746) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<8x2x4xi32, #blocked5>) -> tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc245)
    %748 = tt.expand_dims %747 {axis = 1 : i32} : tensor<8x4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi32, #blocked5> loc(#loc208)
    %749 = tt.broadcast %748 : tensor<8x1x4xi32, #blocked5> -> tensor<8x2x4xi32, #blocked5> loc(#loc209)
    %750 = tt.reshape %745 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %751 = tt.reshape %749 : tensor<8x2x4xi32, #blocked5> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %752 = tt.bitcast %750 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %753 = tt.bitcast %751 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %754 = tt.reshape %738 : tensor<1x64xi16, #blocked> -> tensor<8x2x4xi16, #blocked5> loc(#loc214)
    %755 = arith.muli %754, %194 : tensor<8x2x4xi16, #blocked5> loc(#loc216)
    %756 = "tt.reduce"(%755) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc248)
    %757 = tt.expand_dims %756 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc220)
    %758 = tt.broadcast %757 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc221)
    %759 = arith.muli %754, %199 : tensor<8x2x4xi16, #blocked5> loc(#loc223)
    %760 = "tt.reduce"(%759) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<8x2x4xi16, #blocked5>) -> tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> loc(#loc251)
    %761 = tt.expand_dims %760 {axis = 1 : i32} : tensor<8x4xi16, #triton_gpu.slice<{dim = 1, parent = #blocked5}>> -> tensor<8x1x4xi16, #blocked5> loc(#loc227)
    %762 = tt.broadcast %761 : tensor<8x1x4xi16, #blocked5> -> tensor<8x2x4xi16, #blocked5> loc(#loc228)
    %763 = tt.reshape %758 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %764 = tt.reshape %762 : tensor<8x2x4xi16, #blocked5> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %765 = tt.bitcast %739 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %766 = arith.cmpf olt, %752, %753 : tensor<1x64xf32, #blocked> loc(#loc232)
    %767 = arith.xori %750, %751 : tensor<1x64xi32, #blocked> loc(#loc235)
    %768 = arith.select %766, %767, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %769 = arith.xori %765, %768 : tensor<1x64xi32, #blocked> loc(#loc237)
    %770 = arith.xori %763, %764 : tensor<1x64xi16, #blocked> loc(#loc238)
    %771 = arith.select %766, %770, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %772 = arith.xori %738, %771 : tensor<1x64xi16, #blocked> loc(#loc240)
    %773 = tt.bitcast %769 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %774 = tt.reshape %773 : tensor<1x64xf32, #blocked> -> tensor<16x2x2xf32, #blocked6> loc(#loc195)
    %775 = tt.bitcast %774 : tensor<16x2x2xf32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc196)
    %776 = arith.muli %775, %101 : tensor<16x2x2xi32, #blocked6> loc(#loc198)
    %777 = "tt.reduce"(%776) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc242)
    %778 = tt.expand_dims %777 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc202)
    %779 = tt.broadcast %778 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc203)
    %780 = arith.muli %775, %36 : tensor<16x2x2xi32, #blocked6> loc(#loc204)
    %781 = "tt.reduce"(%780) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<16x2x2xi32, #blocked6>) -> tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc245)
    %782 = tt.expand_dims %781 {axis = 1 : i32} : tensor<16x2xi32, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi32, #blocked6> loc(#loc208)
    %783 = tt.broadcast %782 : tensor<16x1x2xi32, #blocked6> -> tensor<16x2x2xi32, #blocked6> loc(#loc209)
    %784 = tt.reshape %779 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %785 = tt.reshape %783 : tensor<16x2x2xi32, #blocked6> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %786 = tt.bitcast %784 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %787 = tt.bitcast %785 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %788 = tt.reshape %772 : tensor<1x64xi16, #blocked> -> tensor<16x2x2xi16, #blocked6> loc(#loc214)
    %789 = arith.muli %788, %115 : tensor<16x2x2xi16, #blocked6> loc(#loc216)
    %790 = "tt.reduce"(%789) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc248)
    %791 = tt.expand_dims %790 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc220)
    %792 = tt.broadcast %791 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc221)
    %793 = arith.muli %788, %120 : tensor<16x2x2xi16, #blocked6> loc(#loc223)
    %794 = "tt.reduce"(%793) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<16x2x2xi16, #blocked6>) -> tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> loc(#loc251)
    %795 = tt.expand_dims %794 {axis = 1 : i32} : tensor<16x2xi16, #triton_gpu.slice<{dim = 1, parent = #blocked6}>> -> tensor<16x1x2xi16, #blocked6> loc(#loc227)
    %796 = tt.broadcast %795 : tensor<16x1x2xi16, #blocked6> -> tensor<16x2x2xi16, #blocked6> loc(#loc228)
    %797 = tt.reshape %792 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %798 = tt.reshape %796 : tensor<16x2x2xi16, #blocked6> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %799 = tt.bitcast %773 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %800 = arith.cmpf olt, %786, %787 : tensor<1x64xf32, #blocked> loc(#loc232)
    %801 = arith.xori %784, %785 : tensor<1x64xi32, #blocked> loc(#loc235)
    %802 = arith.select %800, %801, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %803 = arith.xori %799, %802 : tensor<1x64xi32, #blocked> loc(#loc237)
    %804 = arith.xori %797, %798 : tensor<1x64xi16, #blocked> loc(#loc238)
    %805 = arith.select %800, %804, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %806 = arith.xori %772, %805 : tensor<1x64xi16, #blocked> loc(#loc240)
    %807 = tt.bitcast %803 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %808 = tt.reshape %807 : tensor<1x64xf32, #blocked> -> tensor<32x2x1xf32, #blocked7> loc(#loc195)
    %809 = tt.bitcast %808 : tensor<32x2x1xf32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc196)
    %810 = arith.muli %809, %46 : tensor<32x2x1xi32, #blocked7> loc(#loc198)
    %811 = "tt.reduce"(%810) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc200 at #loc18)), %arg8: i32 loc(callsite(#loc200 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc254)
      tt.reduce.return %876 : i32 loc(#loc242)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc242)
    %812 = tt.expand_dims %811 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc202)
    %813 = tt.broadcast %812 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc203)
    %814 = arith.muli %809, %51 : tensor<32x2x1xi32, #blocked7> loc(#loc204)
    %815 = "tt.reduce"(%814) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i32 loc(callsite(#loc206 at #loc18)), %arg8: i32 loc(callsite(#loc206 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i32 loc(#loc255)
      tt.reduce.return %876 : i32 loc(#loc245)
    }) : (tensor<32x2x1xi32, #blocked7>) -> tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc245)
    %816 = tt.expand_dims %815 {axis = 1 : i32} : tensor<32x1xi32, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi32, #blocked7> loc(#loc208)
    %817 = tt.broadcast %816 : tensor<32x1x1xi32, #blocked7> -> tensor<32x2x1xi32, #blocked7> loc(#loc209)
    %818 = tt.reshape %813 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc210)
    %819 = tt.reshape %817 : tensor<32x2x1xi32, #blocked7> -> tensor<1x64xi32, #blocked> loc(#loc211)
    %820 = tt.bitcast %818 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc212)
    %821 = tt.bitcast %819 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc213)
    %822 = tt.reshape %806 : tensor<1x64xi16, #blocked> -> tensor<32x2x1xi16, #blocked7> loc(#loc214)
    %823 = arith.muli %822, %67 : tensor<32x2x1xi16, #blocked7> loc(#loc216)
    %824 = "tt.reduce"(%823) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc218 at #loc18)), %arg8: i16 loc(callsite(#loc218 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc256)
      tt.reduce.return %876 : i16 loc(#loc248)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc248)
    %825 = tt.expand_dims %824 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc220)
    %826 = tt.broadcast %825 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc221)
    %827 = arith.muli %822, %78 : tensor<32x2x1xi16, #blocked7> loc(#loc223)
    %828 = "tt.reduce"(%827) <{axis = 1 : i32}> ({
    ^bb0(%arg7: i16 loc(callsite(#loc225 at #loc18)), %arg8: i16 loc(callsite(#loc225 at #loc18))):
      %876 = arith.addi %arg7, %arg8 : i16 loc(#loc257)
      tt.reduce.return %876 : i16 loc(#loc251)
    }) : (tensor<32x2x1xi16, #blocked7>) -> tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> loc(#loc251)
    %829 = tt.expand_dims %828 {axis = 1 : i32} : tensor<32x1xi16, #triton_gpu.slice<{dim = 1, parent = #blocked7}>> -> tensor<32x1x1xi16, #blocked7> loc(#loc227)
    %830 = tt.broadcast %829 : tensor<32x1x1xi16, #blocked7> -> tensor<32x2x1xi16, #blocked7> loc(#loc228)
    %831 = tt.reshape %826 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc229)
    %832 = tt.reshape %830 : tensor<32x2x1xi16, #blocked7> -> tensor<1x64xi16, #blocked> loc(#loc230)
    %833 = tt.bitcast %807 : tensor<1x64xf32, #blocked> -> tensor<1x64xi32, #blocked> loc(#loc231)
    %834 = arith.cmpf olt, %820, %821 : tensor<1x64xf32, #blocked> loc(#loc232)
    %835 = arith.xori %818, %819 : tensor<1x64xi32, #blocked> loc(#loc235)
    %836 = arith.select %834, %835, %cst_8 : tensor<1x64xi1, #blocked>, tensor<1x64xi32, #blocked> loc(#loc236)
    %837 = arith.xori %833, %836 : tensor<1x64xi32, #blocked> loc(#loc237)
    %838 = arith.xori %831, %832 : tensor<1x64xi16, #blocked> loc(#loc238)
    %839 = arith.select %834, %838, %cst_9 : tensor<1x64xi1, #blocked>, tensor<1x64xi16, #blocked> loc(#loc239)
    %840 = arith.xori %806, %839 : tensor<1x64xi16, #blocked> loc(#loc240)
    %841 = tt.bitcast %837 : tensor<1x64xi32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc241)
    %842 = triton_gpu.convert_layout %840 : tensor<1x64xi16, #blocked> -> tensor<1x64xi16, #blocked1> loc(#loc63)
    %843 = arith.extsi %842 : tensor<1x64xi16, #blocked1> to tensor<1x64xi64, #blocked1> loc(#loc64)
    %844 = arith.extsi %840 : tensor<1x64xi16, #blocked> to tensor<1x64xi64, #blocked> loc(#loc64)
    %845 = arith.addi %843, %cst_15 : tensor<1x64xi64, #blocked1> loc(#loc65)
    %846 = arith.addi %844, %cst : tensor<1x64xi64, #blocked> loc(#loc65)
    %847 = arith.cmpi slt, %843, %cst_14 : tensor<1x64xi64, #blocked1> loc(#loc66)
    %848 = arith.cmpi slt, %844, %cst_13 : tensor<1x64xi64, #blocked> loc(#loc66)
    %849 = arith.select %847, %845, %843 : tensor<1x64xi1, #blocked1>, tensor<1x64xi64, #blocked1> loc(#loc67)
    %850 = arith.select %848, %846, %844 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc67)
    %851 = arith.cmpi sge, %850, %cst_13 : tensor<1x64xi64, #blocked> loc(#loc68)
    %852 = arith.cmpi slt, %850, %cst : tensor<1x64xi64, #blocked> loc(#loc69)
    %853 = arith.andi %851, %852 : tensor<1x64xi1, #blocked> loc(#loc70)
    tt.assert %853, "index out of bounds: 0 <= tmp18 < 64" : tensor<1x64xi1, #blocked> loc(#loc71)
    %854 = arith.divsi %849, %cst_17 : tensor<1x64xi64, #blocked1> loc(#loc72)
    %855 = arith.remsi %854, %cst_16 : tensor<1x64xi64, #blocked1> loc(#loc73)
    %856 = arith.muli %855, %cst_15 : tensor<1x64xi64, #blocked1> loc(#loc74)
    %857 = arith.remsi %849, %cst_17 : tensor<1x64xi64, #blocked1> loc(#loc75)
    %858 = arith.addi %856, %857 : tensor<1x64xi64, #blocked1> loc(#loc76)
    %859 = tt.addptr %9, %858 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi64, #blocked1> loc(#loc63)
    %860 = tt.load %859 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc77)
    %861 = "tt.reduce"(%860) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc78)), %arg8: f32 loc(callsite(#loc1 at #loc78))):
      %876 = arith.addf %arg7, %arg8 : f32 loc(#loc194)
      tt.reduce.return %876 : f32 loc(#loc140)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc140)
    %862 = tt.expand_dims %861 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc79)
    %863 = "tt.scan"(%860) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg7: f32 loc(unknown), %arg8: f32 loc(unknown)):
      %876 = arith.addf %arg7, %arg8 : f32 loc(#loc142)
      tt.scan.return %876 : f32 loc(#loc80)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1x64xf32, #blocked1> loc(#loc80)
    %864 = arith.subf %cst_1, %860 : tensor<1x64xf32, #blocked1> loc(#loc82)
    %865 = "tt.scan"(%864) <{axis = 1 : i32, reverse = false}> ({
    ^bb0(%arg7: f32 loc(unknown), %arg8: f32 loc(unknown)):
      %876 = arith.addf %arg7, %arg8 : f32 loc(#loc143)
      tt.scan.return %876 : f32 loc(#loc83)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1x64xf32, #blocked1> loc(#loc83)
    %866 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc84)
    %867 = tt.addptr %866, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc84)
    tt.store %867, %841 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc85)
    %868 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc86)
    %869 = tt.addptr %868, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc86)
    %870 = triton_gpu.convert_layout %863 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc87)
    tt.store %869, %870 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc87)
    %871 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc88)
    %872 = tt.addptr %871, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc88)
    %873 = triton_gpu.convert_layout %865 : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc89)
    tt.store %872, %873 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc89)
    %874 = tt.addptr %arg3, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc90)
    %875 = tt.splat %874 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc91)
    tt.store %875, %862 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc91)
    tt.return loc(#loc92)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":31:34)
#loc3 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:40)
#loc4 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:34)
#loc5 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:53)
#loc6 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:48)
#loc7 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:30)
#loc8 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":35:60)
#loc9 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":36:30)
#loc10 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":36:60)
#loc11 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":38:18)
#loc12 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":40:18)
#loc13 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":41:18)
#loc14 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":42:18)
#loc15 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":44:19)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":575:44)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":575:60)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":575:68)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":501:22)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":502:14)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":505:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":506:40)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":506:54)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":506:67)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":507:41)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":507:56)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":507:69)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":508:30)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":509:32)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":510:20)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":511:22)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":514:29)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":516:36)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":516:23)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":516:53)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":516:66)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":519:37)
#loc46 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":519:23)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":519:54)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":519:67)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":521:36)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":522:38)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":533:14)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":536:22)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":547:19)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":547:28)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":548:38)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":548:46)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":548:15)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":549:48)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":549:59)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":549:22)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":551:18)
#loc63 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:31)
#loc64 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":48:21)
#loc65 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":50:20)
#loc66 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":51:20)
#loc67 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":52:35)
#loc68 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":53:27)
#loc69 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":53:45)
#loc70 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":53:37)
#loc71 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":53:50)
#loc72 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:46)
#loc73 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:52)
#loc74 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:36)
#loc75 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:68)
#loc76 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:60)
#loc77 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":54:75)
#loc79 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":56:29)
#loc80 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":59:46)
#loc81 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":13:20)
#loc82 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":60:19)
#loc83 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":63:46)
#loc84 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":64:25)
#loc85 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":64:72)
#loc86 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":65:25)
#loc87 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":65:72)
#loc88 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":66:25)
#loc89 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":66:72)
#loc90 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":67:25)
#loc91 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":67:68)
#loc92 = loc("inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py":67:4)
#loc93 = loc(callsite(#loc16 at #loc17))
#loc94 = loc(callsite(#loc19 at #loc17))
#loc95 = loc(callsite(#loc20 at #loc17))
#loc96 = loc(callsite(#loc21 at #loc22))
#loc97 = loc(callsite(#loc23 at #loc22))
#loc98 = loc(callsite(#loc24 at #loc22))
#loc99 = loc(callsite(#loc25 at #loc22))
#loc100 = loc(callsite(#loc26 at #loc27))
#loc102 = loc(callsite(#loc28 at #loc26))
#loc103 = loc(callsite(#loc29 at #loc22))
#loc104 = loc(callsite(#loc30 at #loc22))
#loc105 = loc(callsite(#loc31 at #loc22))
#loc106 = loc(callsite(#loc26 at #loc32))
#loc108 = loc(callsite(#loc33 at #loc22))
#loc109 = loc(callsite(#loc34 at #loc22))
#loc110 = loc(callsite(#loc35 at #loc22))
#loc111 = loc(callsite(#loc36 at #loc22))
#loc112 = loc(callsite(#loc37 at #loc22))
#loc113 = loc(callsite(#loc38 at #loc22))
#loc114 = loc(callsite(#loc39 at #loc22))
#loc115 = loc(callsite(#loc40 at #loc22))
#loc116 = loc(callsite(#loc41 at #loc22))
#loc117 = loc(callsite(#loc26 at #loc42))
#loc119 = loc(callsite(#loc43 at #loc22))
#loc120 = loc(callsite(#loc44 at #loc22))
#loc121 = loc(callsite(#loc45 at #loc22))
#loc122 = loc(callsite(#loc46 at #loc22))
#loc123 = loc(callsite(#loc26 at #loc47))
#loc125 = loc(callsite(#loc48 at #loc22))
#loc126 = loc(callsite(#loc49 at #loc22))
#loc127 = loc(callsite(#loc50 at #loc22))
#loc128 = loc(callsite(#loc51 at #loc22))
#loc129 = loc(callsite(#loc52 at #loc22))
#loc130 = loc(callsite(#loc53 at #loc22))
#loc131 = loc(callsite(#loc54 at #loc22))
#loc132 = loc(callsite(#loc55 at #loc22))
#loc133 = loc(callsite(#loc56 at #loc22))
#loc134 = loc(callsite(#loc57 at #loc22))
#loc135 = loc(callsite(#loc58 at #loc22))
#loc136 = loc(callsite(#loc59 at #loc22))
#loc137 = loc(callsite(#loc60 at #loc22))
#loc138 = loc(callsite(#loc61 at #loc22))
#loc139 = loc(callsite(#loc62 at #loc22))
#loc140 = loc(callsite(#loc26 at #loc78))
#loc142 = loc(callsite(#loc81 at #loc80))
#loc143 = loc(callsite(#loc81 at #loc83))
#loc144 = loc(callsite(#loc93 at #loc18))
#loc145 = loc(callsite(#loc94 at #loc18))
#loc146 = loc(callsite(#loc95 at #loc18))
#loc147 = loc(callsite(#loc96 at #loc17))
#loc148 = loc(callsite(#loc97 at #loc17))
#loc149 = loc(callsite(#loc98 at #loc17))
#loc150 = loc(callsite(#loc99 at #loc17))
#loc151 = loc(callsite(#loc100 at #loc22))
#loc153 = loc(callsite(#loc102 at #loc27))
#loc154 = loc(callsite(#loc103 at #loc17))
#loc155 = loc(callsite(#loc104 at #loc17))
#loc156 = loc(callsite(#loc105 at #loc17))
#loc157 = loc(callsite(#loc106 at #loc22))
#loc159 = loc(callsite(#loc102 at #loc32))
#loc160 = loc(callsite(#loc108 at #loc17))
#loc161 = loc(callsite(#loc109 at #loc17))
#loc162 = loc(callsite(#loc110 at #loc17))
#loc163 = loc(callsite(#loc111 at #loc17))
#loc164 = loc(callsite(#loc112 at #loc17))
#loc165 = loc(callsite(#loc113 at #loc17))
#loc166 = loc(callsite(#loc114 at #loc17))
#loc167 = loc(callsite(#loc115 at #loc17))
#loc168 = loc(callsite(#loc116 at #loc17))
#loc169 = loc(callsite(#loc117 at #loc22))
#loc171 = loc(callsite(#loc102 at #loc42))
#loc172 = loc(callsite(#loc119 at #loc17))
#loc173 = loc(callsite(#loc120 at #loc17))
#loc174 = loc(callsite(#loc121 at #loc17))
#loc175 = loc(callsite(#loc122 at #loc17))
#loc176 = loc(callsite(#loc123 at #loc22))
#loc178 = loc(callsite(#loc102 at #loc47))
#loc179 = loc(callsite(#loc125 at #loc17))
#loc180 = loc(callsite(#loc126 at #loc17))
#loc181 = loc(callsite(#loc127 at #loc17))
#loc182 = loc(callsite(#loc128 at #loc17))
#loc183 = loc(callsite(#loc129 at #loc17))
#loc184 = loc(callsite(#loc130 at #loc17))
#loc185 = loc(callsite(#loc131 at #loc17))
#loc186 = loc(callsite(#loc132 at #loc17))
#loc187 = loc(callsite(#loc133 at #loc17))
#loc188 = loc(callsite(#loc134 at #loc17))
#loc189 = loc(callsite(#loc135 at #loc17))
#loc190 = loc(callsite(#loc136 at #loc17))
#loc191 = loc(callsite(#loc137 at #loc17))
#loc192 = loc(callsite(#loc138 at #loc17))
#loc193 = loc(callsite(#loc139 at #loc17))
#loc194 = loc(callsite(#loc102 at #loc78))
#loc195 = loc(callsite(#loc147 at #loc18))
#loc196 = loc(callsite(#loc148 at #loc18))
#loc197 = loc(callsite(#loc149 at #loc18))
#loc198 = loc(callsite(#loc150 at #loc18))
#loc199 = loc(callsite(#loc151 at #loc17))
#loc201 = loc(callsite(#loc153 at #loc22))
#loc202 = loc(callsite(#loc154 at #loc18))
#loc203 = loc(callsite(#loc155 at #loc18))
#loc204 = loc(callsite(#loc156 at #loc18))
#loc205 = loc(callsite(#loc157 at #loc17))
#loc207 = loc(callsite(#loc159 at #loc22))
#loc208 = loc(callsite(#loc160 at #loc18))
#loc209 = loc(callsite(#loc161 at #loc18))
#loc210 = loc(callsite(#loc162 at #loc18))
#loc211 = loc(callsite(#loc163 at #loc18))
#loc212 = loc(callsite(#loc164 at #loc18))
#loc213 = loc(callsite(#loc165 at #loc18))
#loc214 = loc(callsite(#loc166 at #loc18))
#loc215 = loc(callsite(#loc167 at #loc18))
#loc216 = loc(callsite(#loc168 at #loc18))
#loc217 = loc(callsite(#loc169 at #loc17))
#loc219 = loc(callsite(#loc171 at #loc22))
#loc220 = loc(callsite(#loc172 at #loc18))
#loc221 = loc(callsite(#loc173 at #loc18))
#loc222 = loc(callsite(#loc174 at #loc18))
#loc223 = loc(callsite(#loc175 at #loc18))
#loc224 = loc(callsite(#loc176 at #loc17))
#loc226 = loc(callsite(#loc178 at #loc22))
#loc227 = loc(callsite(#loc179 at #loc18))
#loc228 = loc(callsite(#loc180 at #loc18))
#loc229 = loc(callsite(#loc181 at #loc18))
#loc230 = loc(callsite(#loc182 at #loc18))
#loc231 = loc(callsite(#loc183 at #loc18))
#loc232 = loc(callsite(#loc184 at #loc18))
#loc233 = loc(callsite(#loc185 at #loc18))
#loc234 = loc(callsite(#loc186 at #loc18))
#loc235 = loc(callsite(#loc187 at #loc18))
#loc236 = loc(callsite(#loc188 at #loc18))
#loc237 = loc(callsite(#loc189 at #loc18))
#loc238 = loc(callsite(#loc190 at #loc18))
#loc239 = loc(callsite(#loc191 at #loc18))
#loc240 = loc(callsite(#loc192 at #loc18))
#loc241 = loc(callsite(#loc193 at #loc18))
#loc242 = loc(callsite(#loc199 at #loc18))
#loc244 = loc(callsite(#loc201 at #loc17))
#loc245 = loc(callsite(#loc205 at #loc18))
#loc247 = loc(callsite(#loc207 at #loc17))
#loc248 = loc(callsite(#loc217 at #loc18))
#loc250 = loc(callsite(#loc219 at #loc17))
#loc251 = loc(callsite(#loc224 at #loc18))
#loc253 = loc(callsite(#loc226 at #loc17))
#loc254 = loc(callsite(#loc244 at #loc18))
#loc255 = loc(callsite(#loc247 at #loc18))
#loc256 = loc(callsite(#loc250 at #loc18))
#loc257 = loc(callsite(#loc253 at #loc18))
