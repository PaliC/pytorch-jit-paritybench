; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/rb/crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp18 < 64\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = and i32 %8, 1, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %12 = shl nuw nsw i32 %11, 2, !dbg !13
  %13 = and i32 %12, 192, !dbg !13
  %14 = and i32 %8, 15, !dbg !14
  %15 = or disjoint i32 %13, %14, !dbg !15
  %16 = zext nneg i32 %15 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = fmul float %22, 2.000000e+00, !dbg !20
  %24 = fadd float %23, -1.000000e+00, !dbg !21
  %25 = fmul float %24, %19, !dbg !22
  %26 = fsub float 1.000000e+00, %25, !dbg !23
  %27 = trunc nuw nsw i32 %11 to i16, !dbg !24
  %28 = lshr i32 %8, 1, !dbg !25
  %.lobit = and i32 %28, 1, !dbg !25
  %29 = lshr i32 %8, 2, !dbg !25
  %.lobit1 = and i32 %29, 1, !dbg !25
  %30 = lshr i32 %8, 3, !dbg !25
  %.lobit2 = and i32 %30, 1, !dbg !25
  %31 = lshr i32 %8, 4, !dbg !25
  %.lobit3 = and i32 %31, 1, !dbg !25
  %.lobit4 = and i32 %9, 1, !dbg !25
  %32 = bitcast float %26 to i32, !dbg !30
  %33 = xor i32 %.lobit, 1, !dbg !32
  %34 = xor i32 %.lobit1, 1, !dbg !32
  %35 = xor i32 %.lobit2, 1, !dbg !32
  %36 = xor i32 %.lobit3, 1, !dbg !32
  %37 = xor i32 %.lobit4, 1, !dbg !32
  %38 = xor i32 %10, 1, !dbg !32
  %39 = mul nuw nsw i32 %38, %32, !dbg !33
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 1, i32 31), !dbg !34
  %41 = add i32 %39, %40, !dbg !37
  %42 = mul nuw nsw i32 %10, %32, !dbg !39
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !34
  %44 = add i32 %42, %43, !dbg !37
  %45 = bitcast i32 %41 to float, !dbg !40
  %46 = bitcast i32 %44 to float, !dbg !41
  %47 = trunc nuw nsw i32 %33 to i16, !dbg !42
  %48 = trunc nuw nsw i32 %34 to i16, !dbg !42
  %49 = trunc nuw nsw i32 %35 to i16, !dbg !42
  %50 = trunc nuw nsw i32 %36 to i16, !dbg !42
  %51 = trunc nuw nsw i32 %37 to i16, !dbg !42
  %52 = trunc nuw nsw i32 %38 to i16, !dbg !42
  %53 = mul nuw nsw i16 %52, %27, !dbg !43
  %54 = zext nneg i16 %53 to i32, !dbg !34
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !34
  %56 = trunc i32 %55 to i16, !dbg !34
  %57 = add i16 %53, %56, !dbg !37
  %58 = trunc nuw nsw i32 %.lobit to i16, !dbg !44
  %59 = trunc nuw nsw i32 %.lobit1 to i16, !dbg !44
  %60 = trunc nuw nsw i32 %.lobit2 to i16, !dbg !44
  %61 = trunc nuw nsw i32 %.lobit3 to i16, !dbg !44
  %62 = trunc nuw nsw i32 %.lobit4 to i16, !dbg !44
  %63 = trunc nuw nsw i32 %10 to i16, !dbg !44
  %64 = mul nuw nsw i16 %27, %63, !dbg !45
  %65 = zext nneg i16 %64 to i32, !dbg !34
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !34
  %67 = trunc i32 %66 to i16, !dbg !34
  %68 = add i16 %64, %67, !dbg !37
  %69 = trunc i32 %28 to i1, !dbg !46
  %70 = fcmp uge float %45, %46, !dbg !46
  %.not = xor i1 %70, %69, !dbg !46
  %71 = xor i32 %41, %44, !dbg !47
  %72 = select i1 %.not, i32 0, i32 %71, !dbg !48
  %73 = xor i32 %72, %32, !dbg !49
  %74 = xor i16 %68, %57, !dbg !50
  %75 = select i1 %.not, i16 0, i16 %74, !dbg !51
  %76 = xor i16 %75, %27, !dbg !52
  %77 = mul nuw nsw i32 %73, %33, !dbg !33
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !34
  %79 = add i32 %77, %78, !dbg !37
  %80 = mul nuw nsw i32 %73, %.lobit, !dbg !39
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !34
  %82 = add i32 %80, %81, !dbg !37
  %83 = bitcast i32 %79 to float, !dbg !40
  %84 = bitcast i32 %82 to float, !dbg !41
  %85 = mul nuw nsw i16 %76, %47, !dbg !43
  %86 = zext i16 %85 to i32, !dbg !34
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 2, i32 31), !dbg !34
  %88 = trunc i32 %87 to i16, !dbg !34
  %89 = add i16 %85, %88, !dbg !37
  %90 = mul nuw nsw i16 %76, %58, !dbg !45
  %91 = zext i16 %90 to i32, !dbg !34
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 2, i32 31), !dbg !34
  %93 = trunc i32 %92 to i16, !dbg !34
  %94 = add i16 %90, %93, !dbg !37
  %95 = trunc i32 %29 to i1, !dbg !46
  %96 = fcmp uge float %83, %84, !dbg !46
  %.not5 = xor i1 %96, %95, !dbg !46
  %97 = xor i32 %79, %82, !dbg !47
  %98 = select i1 %.not5, i32 0, i32 %97, !dbg !48
  %99 = xor i32 %98, %73, !dbg !49
  %100 = xor i16 %89, %94, !dbg !50
  %101 = select i1 %.not5, i16 0, i16 %100, !dbg !51
  %102 = xor i16 %101, %76, !dbg !52
  %103 = mul nuw nsw i32 %99, %38, !dbg !33
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !34
  %105 = add i32 %103, %104, !dbg !37
  %106 = mul nuw nsw i32 %99, %10, !dbg !39
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !34
  %108 = add i32 %106, %107, !dbg !37
  %109 = bitcast i32 %105 to float, !dbg !40
  %110 = bitcast i32 %108 to float, !dbg !41
  %111 = mul nuw nsw i16 %102, %52, !dbg !43
  %112 = zext i16 %111 to i32, !dbg !34
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !34
  %114 = trunc i32 %113 to i16, !dbg !34
  %115 = add i16 %111, %114, !dbg !37
  %116 = mul nuw nsw i16 %102, %63, !dbg !45
  %117 = zext i16 %116 to i32, !dbg !34
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !34
  %119 = trunc i32 %118 to i16, !dbg !34
  %120 = add i16 %116, %119, !dbg !37
  %121 = fcmp uge float %109, %110, !dbg !46
  %.not6 = xor i1 %121, %95, !dbg !46
  %122 = xor i32 %105, %108, !dbg !47
  %123 = select i1 %.not6, i32 0, i32 %122, !dbg !48
  %124 = xor i32 %123, %99, !dbg !49
  %125 = xor i16 %115, %120, !dbg !50
  %126 = select i1 %.not6, i16 0, i16 %125, !dbg !51
  %127 = xor i16 %126, %102, !dbg !52
  %128 = mul nuw nsw i32 %124, %34, !dbg !33
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !34
  %130 = add i32 %128, %129, !dbg !37
  %131 = mul nuw nsw i32 %124, %.lobit1, !dbg !39
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !34
  %133 = add i32 %131, %132, !dbg !37
  %134 = bitcast i32 %130 to float, !dbg !40
  %135 = bitcast i32 %133 to float, !dbg !41
  %136 = mul nuw nsw i16 %127, %48, !dbg !43
  %137 = zext i16 %136 to i32, !dbg !34
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !34
  %139 = trunc i32 %138 to i16, !dbg !34
  %140 = add i16 %136, %139, !dbg !37
  %141 = mul nuw nsw i16 %127, %59, !dbg !45
  %142 = zext i16 %141 to i32, !dbg !34
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !34
  %144 = trunc i32 %143 to i16, !dbg !34
  %145 = add i16 %141, %144, !dbg !37
  %146 = trunc i32 %30 to i1, !dbg !46
  %147 = fcmp uge float %134, %135, !dbg !46
  %.not7 = xor i1 %147, %146, !dbg !46
  %148 = xor i32 %130, %133, !dbg !47
  %149 = select i1 %.not7, i32 0, i32 %148, !dbg !48
  %150 = xor i32 %149, %124, !dbg !49
  %151 = xor i16 %140, %145, !dbg !50
  %152 = select i1 %.not7, i16 0, i16 %151, !dbg !51
  %153 = xor i16 %152, %127, !dbg !52
  %154 = mul nuw nsw i32 %150, %33, !dbg !33
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !34
  %156 = add i32 %154, %155, !dbg !37
  %157 = mul nuw nsw i32 %150, %.lobit, !dbg !39
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !34
  %159 = add i32 %157, %158, !dbg !37
  %160 = bitcast i32 %156 to float, !dbg !40
  %161 = bitcast i32 %159 to float, !dbg !41
  %162 = mul nuw nsw i16 %153, %47, !dbg !43
  %163 = zext i16 %162 to i32, !dbg !34
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !34
  %165 = trunc i32 %164 to i16, !dbg !34
  %166 = add i16 %162, %165, !dbg !37
  %167 = mul nuw nsw i16 %153, %58, !dbg !45
  %168 = zext i16 %167 to i32, !dbg !34
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !34
  %170 = trunc i32 %169 to i16, !dbg !34
  %171 = add i16 %167, %170, !dbg !37
  %172 = fcmp uge float %160, %161, !dbg !46
  %.not8 = xor i1 %172, %146, !dbg !46
  %173 = xor i32 %156, %159, !dbg !47
  %174 = select i1 %.not8, i32 0, i32 %173, !dbg !48
  %175 = xor i32 %174, %150, !dbg !49
  %176 = xor i16 %166, %171, !dbg !50
  %177 = select i1 %.not8, i16 0, i16 %176, !dbg !51
  %178 = xor i16 %177, %153, !dbg !52
  %179 = mul nuw nsw i32 %175, %38, !dbg !33
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !34
  %181 = add i32 %179, %180, !dbg !37
  %182 = mul nuw nsw i32 %175, %10, !dbg !39
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 1, i32 31), !dbg !34
  %184 = add i32 %182, %183, !dbg !37
  %185 = bitcast i32 %181 to float, !dbg !40
  %186 = bitcast i32 %184 to float, !dbg !41
  %187 = mul nuw nsw i16 %178, %52, !dbg !43
  %188 = zext i16 %187 to i32, !dbg !34
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !34
  %190 = trunc i32 %189 to i16, !dbg !34
  %191 = add i16 %187, %190, !dbg !37
  %192 = mul nuw nsw i16 %178, %63, !dbg !45
  %193 = zext i16 %192 to i32, !dbg !34
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !34
  %195 = trunc i32 %194 to i16, !dbg !34
  %196 = add i16 %192, %195, !dbg !37
  %197 = fcmp uge float %185, %186, !dbg !46
  %.not9 = xor i1 %197, %146, !dbg !46
  %198 = xor i32 %181, %184, !dbg !47
  %199 = select i1 %.not9, i32 0, i32 %198, !dbg !48
  %200 = xor i32 %199, %175, !dbg !49
  %201 = xor i16 %191, %196, !dbg !50
  %202 = select i1 %.not9, i16 0, i16 %201, !dbg !51
  %203 = xor i16 %202, %178, !dbg !52
  %204 = mul nuw nsw i32 %200, %35, !dbg !33
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !34
  %206 = add i32 %204, %205, !dbg !37
  %207 = mul nuw nsw i32 %200, %.lobit2, !dbg !39
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !34
  %209 = add i32 %207, %208, !dbg !37
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = bitcast i32 %209 to float, !dbg !41
  %212 = mul nuw nsw i16 %203, %49, !dbg !43
  %213 = zext i16 %212 to i32, !dbg !34
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !34
  %215 = trunc i32 %214 to i16, !dbg !34
  %216 = add i16 %212, %215, !dbg !37
  %217 = mul nuw nsw i16 %203, %60, !dbg !45
  %218 = zext i16 %217 to i32, !dbg !34
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !34
  %220 = trunc i32 %219 to i16, !dbg !34
  %221 = add i16 %217, %220, !dbg !37
  %222 = trunc i32 %31 to i1, !dbg !46
  %223 = fcmp uge float %210, %211, !dbg !46
  %.not10 = xor i1 %223, %222, !dbg !46
  %224 = xor i32 %206, %209, !dbg !47
  %225 = select i1 %.not10, i32 0, i32 %224, !dbg !48
  %226 = xor i32 %225, %200, !dbg !49
  %227 = xor i16 %216, %221, !dbg !50
  %228 = select i1 %.not10, i16 0, i16 %227, !dbg !51
  %229 = xor i16 %228, %203, !dbg !52
  %230 = mul nuw nsw i32 %226, %34, !dbg !33
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 4, i32 31), !dbg !34
  %232 = add i32 %230, %231, !dbg !37
  %233 = mul nuw nsw i32 %226, %.lobit1, !dbg !39
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 4, i32 31), !dbg !34
  %235 = add i32 %233, %234, !dbg !37
  %236 = bitcast i32 %232 to float, !dbg !40
  %237 = bitcast i32 %235 to float, !dbg !41
  %238 = mul nuw nsw i16 %229, %48, !dbg !43
  %239 = zext i16 %238 to i32, !dbg !34
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 4, i32 31), !dbg !34
  %241 = trunc i32 %240 to i16, !dbg !34
  %242 = add i16 %238, %241, !dbg !37
  %243 = mul nuw nsw i16 %229, %59, !dbg !45
  %244 = zext i16 %243 to i32, !dbg !34
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !34
  %246 = trunc i32 %245 to i16, !dbg !34
  %247 = add i16 %243, %246, !dbg !37
  %248 = fcmp uge float %236, %237, !dbg !46
  %.not11 = xor i1 %248, %222, !dbg !46
  %249 = xor i32 %232, %235, !dbg !47
  %250 = select i1 %.not11, i32 0, i32 %249, !dbg !48
  %251 = xor i32 %250, %226, !dbg !49
  %252 = xor i16 %242, %247, !dbg !50
  %253 = select i1 %.not11, i16 0, i16 %252, !dbg !51
  %254 = xor i16 %253, %229, !dbg !52
  %255 = mul nuw nsw i32 %251, %33, !dbg !33
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !34
  %257 = add i32 %255, %256, !dbg !37
  %258 = mul nuw nsw i32 %251, %.lobit, !dbg !39
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !34
  %260 = add i32 %258, %259, !dbg !37
  %261 = bitcast i32 %257 to float, !dbg !40
  %262 = bitcast i32 %260 to float, !dbg !41
  %263 = mul nuw nsw i16 %254, %47, !dbg !43
  %264 = zext i16 %263 to i32, !dbg !34
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 2, i32 31), !dbg !34
  %266 = trunc i32 %265 to i16, !dbg !34
  %267 = add i16 %263, %266, !dbg !37
  %268 = mul nuw nsw i16 %254, %58, !dbg !45
  %269 = zext i16 %268 to i32, !dbg !34
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !34
  %271 = trunc i32 %270 to i16, !dbg !34
  %272 = add i16 %268, %271, !dbg !37
  %273 = fcmp uge float %261, %262, !dbg !46
  %.not12 = xor i1 %273, %222, !dbg !46
  %274 = xor i32 %257, %260, !dbg !47
  %275 = select i1 %.not12, i32 0, i32 %274, !dbg !48
  %276 = xor i32 %275, %251, !dbg !49
  %277 = xor i16 %267, %272, !dbg !50
  %278 = select i1 %.not12, i16 0, i16 %277, !dbg !51
  %279 = xor i16 %278, %254, !dbg !52
  %280 = mul nuw nsw i32 %276, %38, !dbg !33
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !34
  %282 = add i32 %280, %281, !dbg !37
  %283 = mul nuw nsw i32 %276, %10, !dbg !39
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 1, i32 31), !dbg !34
  %285 = add i32 %283, %284, !dbg !37
  %286 = bitcast i32 %282 to float, !dbg !40
  %287 = bitcast i32 %285 to float, !dbg !41
  %288 = mul nuw nsw i16 %279, %52, !dbg !43
  %289 = zext i16 %288 to i32, !dbg !34
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 1, i32 31), !dbg !34
  %291 = trunc i32 %290 to i16, !dbg !34
  %292 = add i16 %288, %291, !dbg !37
  %293 = mul nuw nsw i16 %279, %63, !dbg !45
  %294 = zext i16 %293 to i32, !dbg !34
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !34
  %296 = trunc i32 %295 to i16, !dbg !34
  %297 = add i16 %293, %296, !dbg !37
  %298 = fcmp uge float %286, %287, !dbg !46
  %.not13 = xor i1 %298, %222, !dbg !46
  %299 = xor i32 %282, %285, !dbg !47
  %300 = select i1 %.not13, i32 0, i32 %299, !dbg !48
  %301 = xor i32 %300, %276, !dbg !49
  %302 = xor i16 %292, %297, !dbg !50
  %303 = select i1 %.not13, i16 0, i16 %302, !dbg !51
  %304 = xor i16 %303, %279, !dbg !52
  %305 = mul nuw nsw i32 %301, %36, !dbg !33
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 16, i32 31), !dbg !34
  %307 = add i32 %305, %306, !dbg !37
  %308 = mul nuw nsw i32 %301, %.lobit3, !dbg !39
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 16, i32 31), !dbg !34
  %310 = add i32 %308, %309, !dbg !37
  %311 = bitcast i32 %307 to float, !dbg !40
  %312 = bitcast i32 %310 to float, !dbg !41
  %313 = mul nuw nsw i16 %304, %50, !dbg !43
  %314 = zext i16 %313 to i32, !dbg !34
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 16, i32 31), !dbg !34
  %316 = trunc i32 %315 to i16, !dbg !34
  %317 = add i16 %313, %316, !dbg !37
  %318 = mul nuw nsw i16 %304, %61, !dbg !45
  %319 = zext i16 %318 to i32, !dbg !34
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 16, i32 31), !dbg !34
  %321 = trunc i32 %320 to i16, !dbg !34
  %322 = add i16 %318, %321, !dbg !37
  %323 = trunc i32 %9 to i1, !dbg !46
  %324 = fcmp uge float %311, %312, !dbg !46
  %.not14 = xor i1 %324, %323, !dbg !46
  %325 = xor i32 %307, %310, !dbg !47
  %326 = select i1 %.not14, i32 0, i32 %325, !dbg !48
  %327 = xor i32 %326, %301, !dbg !49
  %328 = xor i16 %317, %322, !dbg !50
  %329 = select i1 %.not14, i16 0, i16 %328, !dbg !51
  %330 = xor i16 %329, %304, !dbg !52
  %331 = mul nuw nsw i32 %327, %35, !dbg !33
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 8, i32 31), !dbg !34
  %333 = add i32 %331, %332, !dbg !37
  %334 = mul nuw nsw i32 %327, %.lobit2, !dbg !39
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 8, i32 31), !dbg !34
  %336 = add i32 %334, %335, !dbg !37
  %337 = bitcast i32 %333 to float, !dbg !40
  %338 = bitcast i32 %336 to float, !dbg !41
  %339 = mul nuw nsw i16 %330, %49, !dbg !43
  %340 = zext i16 %339 to i32, !dbg !34
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !34
  %342 = trunc i32 %341 to i16, !dbg !34
  %343 = add i16 %339, %342, !dbg !37
  %344 = mul nuw nsw i16 %330, %60, !dbg !45
  %345 = zext i16 %344 to i32, !dbg !34
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !34
  %347 = trunc i32 %346 to i16, !dbg !34
  %348 = add i16 %344, %347, !dbg !37
  %349 = fcmp uge float %337, %338, !dbg !46
  %.not15 = xor i1 %349, %323, !dbg !46
  %350 = xor i32 %333, %336, !dbg !47
  %351 = select i1 %.not15, i32 0, i32 %350, !dbg !48
  %352 = xor i32 %351, %327, !dbg !49
  %353 = xor i16 %343, %348, !dbg !50
  %354 = select i1 %.not15, i16 0, i16 %353, !dbg !51
  %355 = xor i16 %354, %330, !dbg !52
  %356 = mul nuw nsw i32 %352, %34, !dbg !33
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 4, i32 31), !dbg !34
  %358 = add i32 %356, %357, !dbg !37
  %359 = mul nuw nsw i32 %352, %.lobit1, !dbg !39
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 4, i32 31), !dbg !34
  %361 = add i32 %359, %360, !dbg !37
  %362 = bitcast i32 %358 to float, !dbg !40
  %363 = bitcast i32 %361 to float, !dbg !41
  %364 = mul nuw nsw i16 %355, %48, !dbg !43
  %365 = zext i16 %364 to i32, !dbg !34
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 4, i32 31), !dbg !34
  %367 = trunc i32 %366 to i16, !dbg !34
  %368 = add i16 %364, %367, !dbg !37
  %369 = mul nuw nsw i16 %355, %59, !dbg !45
  %370 = zext i16 %369 to i32, !dbg !34
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !34
  %372 = trunc i32 %371 to i16, !dbg !34
  %373 = add i16 %369, %372, !dbg !37
  %374 = fcmp uge float %362, %363, !dbg !46
  %.not16 = xor i1 %374, %323, !dbg !46
  %375 = xor i32 %358, %361, !dbg !47
  %376 = select i1 %.not16, i32 0, i32 %375, !dbg !48
  %377 = xor i32 %376, %352, !dbg !49
  %378 = xor i16 %368, %373, !dbg !50
  %379 = select i1 %.not16, i16 0, i16 %378, !dbg !51
  %380 = xor i16 %379, %355, !dbg !52
  %381 = mul nuw nsw i32 %377, %33, !dbg !33
  %382 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %381, i32 2, i32 31), !dbg !34
  %383 = add i32 %381, %382, !dbg !37
  %384 = mul nuw nsw i32 %377, %.lobit, !dbg !39
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 2, i32 31), !dbg !34
  %386 = add i32 %384, %385, !dbg !37
  %387 = bitcast i32 %383 to float, !dbg !40
  %388 = bitcast i32 %386 to float, !dbg !41
  %389 = mul nuw nsw i16 %380, %47, !dbg !43
  %390 = zext i16 %389 to i32, !dbg !34
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !34
  %392 = trunc i32 %391 to i16, !dbg !34
  %393 = add i16 %389, %392, !dbg !37
  %394 = mul nuw nsw i16 %380, %58, !dbg !45
  %395 = zext i16 %394 to i32, !dbg !34
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !34
  %397 = trunc i32 %396 to i16, !dbg !34
  %398 = add i16 %394, %397, !dbg !37
  %399 = fcmp uge float %387, %388, !dbg !46
  %.not17 = xor i1 %399, %323, !dbg !46
  %400 = xor i32 %383, %386, !dbg !47
  %401 = select i1 %.not17, i32 0, i32 %400, !dbg !48
  %402 = xor i32 %401, %377, !dbg !49
  %403 = xor i16 %393, %398, !dbg !50
  %404 = select i1 %.not17, i16 0, i16 %403, !dbg !51
  %405 = xor i16 %404, %380, !dbg !52
  %406 = mul nuw nsw i32 %402, %38, !dbg !33
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !34
  %408 = add i32 %406, %407, !dbg !37
  %409 = mul nuw nsw i32 %402, %10, !dbg !39
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %409, i32 1, i32 31), !dbg !34
  %411 = add i32 %409, %410, !dbg !37
  %412 = bitcast i32 %408 to float, !dbg !40
  %413 = bitcast i32 %411 to float, !dbg !41
  %414 = mul nuw nsw i16 %405, %52, !dbg !43
  %415 = zext i16 %414 to i32, !dbg !34
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !34
  %417 = trunc i32 %416 to i16, !dbg !34
  %418 = add i16 %414, %417, !dbg !37
  %419 = mul nuw nsw i16 %405, %63, !dbg !45
  %420 = zext i16 %419 to i32, !dbg !34
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 1, i32 31), !dbg !34
  %422 = trunc i32 %421 to i16, !dbg !34
  %423 = add i16 %419, %422, !dbg !37
  %424 = fcmp uge float %412, %413, !dbg !46
  %.not18 = xor i1 %424, %323, !dbg !46
  %425 = xor i32 %408, %411, !dbg !47
  %426 = select i1 %.not18, i32 0, i32 %425, !dbg !48
  %427 = xor i32 %426, %402, !dbg !49
  %428 = xor i16 %418, %423, !dbg !50
  %429 = select i1 %.not18, i16 0, i16 %428, !dbg !51
  %430 = xor i16 %429, %405, !dbg !52
  %431 = mul nuw nsw i32 %427, %37, !dbg !33
  %432 = shl i32 %8, 1, !dbg !34
  %433 = and i32 %432, 62, !dbg !34
  %434 = or disjoint i32 %433, %.lobit4, !dbg !34
  %435 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %434, !dbg !34
  %436 = insertelement <1 x i32> poison, i32 %431, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %436, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %437 = icmp slt i32 %8, 64, !dbg !34
  %438 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %8, !dbg !34
  %439 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %437) #4, !dbg !34
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %439, i32 1, i32 31), !dbg !34
  %441 = add i32 %440, %439, !dbg !37
  %442 = icmp eq i32 %10, 0, !dbg !34
  %443 = and i1 %437, %442, !dbg !34
  %444 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %444, i1 %443) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %445 = getelementptr i32, ptr addrspace(3) @global_smem, i32 %433, !dbg !34
  %446 = load i32, ptr addrspace(3) %445, align 8, !dbg !34
  %447 = mul nuw nsw i32 %427, %.lobit4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %448 = insertelement <1 x i32> poison, i32 %447, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %448, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %449 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %437) #4, !dbg !34
  %450 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %449, i32 1, i32 31), !dbg !34
  %451 = add i32 %450, %449, !dbg !37
  %452 = insertelement <1 x i32> poison, i32 %451, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %452, i1 %443) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %453 = load i32, ptr addrspace(3) %445, align 8, !dbg !34
  %454 = bitcast i32 %446 to float, !dbg !40
  %455 = bitcast i32 %453 to float, !dbg !41
  %456 = mul nuw nsw i16 %430, %51, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %457 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %434, !dbg !34
  %458 = insertelement <1 x i16> poison, i16 %456, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %457, <1 x i16> %458, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %459 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %8, !dbg !34
  %460 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %459, i1 %437) #4, !dbg !34
  %461 = zext i16 %460 to i32, !dbg !34
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 1, i32 31), !dbg !34
  %463 = trunc i32 %462 to i16, !dbg !34
  %464 = add i16 %460, %463, !dbg !37
  %465 = insertelement <1 x i16> poison, i16 %464, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %459, <1 x i16> %465, i1 %443) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %466 = getelementptr i16, ptr addrspace(3) @global_smem, i32 %433, !dbg !34
  %467 = load i16, ptr addrspace(3) %466, align 4, !dbg !34
  %468 = mul nuw nsw i16 %430, %62, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %469 = insertelement <1 x i16> poison, i16 %468, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %457, <1 x i16> %469, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %470 = tail call i16 asm sideeffect "@$2 ld.shared.b16 $0, [ $1 + 0 ];", "=h,r,b"(ptr addrspace(3) %459, i1 %437) #4, !dbg !34
  %471 = zext i16 %470 to i32, !dbg !34
  %472 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %471, i32 1, i32 31), !dbg !34
  %473 = trunc i32 %472 to i16, !dbg !34
  %474 = add i16 %470, %473, !dbg !37
  %475 = insertelement <1 x i16> poison, i16 %474, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %459, <1 x i16> %475, i1 %443) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %476 = load i16, ptr addrspace(3) %466, align 4, !dbg !34
  %477 = fcmp olt float %454, %455, !dbg !53
  %478 = xor i32 %453, %446, !dbg !47
  %479 = select i1 %477, i32 %478, i32 0, !dbg !48
  %480 = xor i32 %427, %479, !dbg !49
  %481 = xor i16 %476, %467, !dbg !50
  %482 = select i1 %477, i16 %481, i16 0, !dbg !51
  %483 = xor i16 %430, %482, !dbg !52
  %484 = mul nuw nsw i32 %480, %36, !dbg !33
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 16, i32 31), !dbg !34
  %486 = add i32 %484, %485, !dbg !37
  %487 = mul nuw nsw i32 %480, %.lobit3, !dbg !39
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 16, i32 31), !dbg !34
  %489 = add i32 %487, %488, !dbg !37
  %490 = bitcast i32 %486 to float, !dbg !40
  %491 = bitcast i32 %489 to float, !dbg !41
  %492 = mul nuw nsw i16 %483, %50, !dbg !43
  %493 = zext i16 %492 to i32, !dbg !34
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 16, i32 31), !dbg !34
  %495 = trunc i32 %494 to i16, !dbg !34
  %496 = add i16 %492, %495, !dbg !37
  %497 = mul nuw nsw i16 %483, %61, !dbg !45
  %498 = zext i16 %497 to i32, !dbg !34
  %499 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %498, i32 16, i32 31), !dbg !34
  %500 = trunc i32 %499 to i16, !dbg !34
  %501 = add i16 %497, %500, !dbg !37
  %502 = fcmp olt float %490, %491, !dbg !53
  %503 = xor i32 %486, %489, !dbg !47
  %504 = select i1 %502, i32 %503, i32 0, !dbg !48
  %505 = xor i32 %504, %480, !dbg !49
  %506 = xor i16 %496, %501, !dbg !50
  %507 = select i1 %502, i16 %506, i16 0, !dbg !51
  %508 = xor i16 %507, %483, !dbg !52
  %509 = mul nuw nsw i32 %505, %35, !dbg !33
  %510 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %509, i32 8, i32 31), !dbg !34
  %511 = add i32 %509, %510, !dbg !37
  %512 = mul nuw nsw i32 %505, %.lobit2, !dbg !39
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 8, i32 31), !dbg !34
  %514 = add i32 %512, %513, !dbg !37
  %515 = bitcast i32 %511 to float, !dbg !40
  %516 = bitcast i32 %514 to float, !dbg !41
  %517 = mul nuw nsw i16 %508, %49, !dbg !43
  %518 = zext i16 %517 to i32, !dbg !34
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 8, i32 31), !dbg !34
  %520 = trunc i32 %519 to i16, !dbg !34
  %521 = add i16 %517, %520, !dbg !37
  %522 = mul nuw nsw i16 %508, %60, !dbg !45
  %523 = zext i16 %522 to i32, !dbg !34
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 8, i32 31), !dbg !34
  %525 = trunc i32 %524 to i16, !dbg !34
  %526 = add i16 %522, %525, !dbg !37
  %527 = fcmp olt float %515, %516, !dbg !53
  %528 = xor i32 %511, %514, !dbg !47
  %529 = select i1 %527, i32 %528, i32 0, !dbg !48
  %530 = xor i32 %529, %505, !dbg !49
  %531 = xor i16 %521, %526, !dbg !50
  %532 = select i1 %527, i16 %531, i16 0, !dbg !51
  %533 = xor i16 %532, %508, !dbg !52
  %534 = mul nuw nsw i32 %530, %34, !dbg !33
  %535 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %534, i32 4, i32 31), !dbg !34
  %536 = add i32 %534, %535, !dbg !37
  %537 = mul nuw nsw i32 %530, %.lobit1, !dbg !39
  %538 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %537, i32 4, i32 31), !dbg !34
  %539 = add i32 %537, %538, !dbg !37
  %540 = bitcast i32 %536 to float, !dbg !40
  %541 = bitcast i32 %539 to float, !dbg !41
  %542 = mul nuw nsw i16 %533, %48, !dbg !43
  %543 = zext i16 %542 to i32, !dbg !34
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %543, i32 4, i32 31), !dbg !34
  %545 = trunc i32 %544 to i16, !dbg !34
  %546 = add i16 %542, %545, !dbg !37
  %547 = mul nuw nsw i16 %533, %59, !dbg !45
  %548 = zext i16 %547 to i32, !dbg !34
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 4, i32 31), !dbg !34
  %550 = trunc i32 %549 to i16, !dbg !34
  %551 = add i16 %547, %550, !dbg !37
  %552 = fcmp olt float %540, %541, !dbg !53
  %553 = xor i32 %536, %539, !dbg !47
  %554 = select i1 %552, i32 %553, i32 0, !dbg !48
  %555 = xor i32 %554, %530, !dbg !49
  %556 = xor i16 %546, %551, !dbg !50
  %557 = select i1 %552, i16 %556, i16 0, !dbg !51
  %558 = xor i16 %557, %533, !dbg !52
  %559 = mul nuw nsw i32 %555, %33, !dbg !33
  %560 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %559, i32 2, i32 31), !dbg !34
  %561 = add i32 %559, %560, !dbg !37
  %562 = mul nuw nsw i32 %555, %.lobit, !dbg !39
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 2, i32 31), !dbg !34
  %564 = add i32 %562, %563, !dbg !37
  %565 = bitcast i32 %561 to float, !dbg !40
  %566 = bitcast i32 %564 to float, !dbg !41
  %567 = mul nuw nsw i16 %558, %47, !dbg !43
  %568 = zext i16 %567 to i32, !dbg !34
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 2, i32 31), !dbg !34
  %570 = trunc i32 %569 to i16, !dbg !34
  %571 = add i16 %567, %570, !dbg !37
  %572 = mul nuw nsw i16 %558, %58, !dbg !45
  %573 = zext i16 %572 to i32, !dbg !34
  %574 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %573, i32 2, i32 31), !dbg !34
  %575 = trunc i32 %574 to i16, !dbg !34
  %576 = add i16 %572, %575, !dbg !37
  %577 = fcmp olt float %565, %566, !dbg !53
  %578 = xor i32 %561, %564, !dbg !47
  %579 = select i1 %577, i32 %578, i32 0, !dbg !48
  %580 = xor i32 %579, %555, !dbg !49
  %581 = xor i16 %571, %576, !dbg !50
  %582 = select i1 %577, i16 %581, i16 0, !dbg !51
  %583 = xor i16 %582, %558, !dbg !52
  %584 = mul nuw nsw i32 %580, %38, !dbg !33
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 1, i32 31), !dbg !34
  %586 = add i32 %584, %585, !dbg !37
  %587 = mul nuw nsw i32 %580, %10, !dbg !39
  %588 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %587, i32 1, i32 31), !dbg !34
  %589 = add i32 %587, %588, !dbg !37
  %590 = bitcast i32 %586 to float, !dbg !40
  %591 = bitcast i32 %589 to float, !dbg !41
  %592 = mul nuw nsw i16 %583, %52, !dbg !43
  %593 = zext i16 %592 to i32, !dbg !34
  %594 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 1, i32 31), !dbg !34
  %595 = trunc i32 %594 to i16, !dbg !34
  %596 = add i16 %592, %595, !dbg !37
  %597 = mul nuw nsw i16 %583, %63, !dbg !45
  %598 = zext i16 %597 to i32, !dbg !34
  %599 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %598, i32 1, i32 31), !dbg !34
  %600 = trunc i32 %599 to i16, !dbg !34
  %601 = add i16 %597, %600, !dbg !37
  %602 = fcmp olt float %590, %591, !dbg !53
  %603 = xor i16 %596, %601, !dbg !50
  %604 = select i1 %602, i16 %603, i16 0, !dbg !51
  %605 = xor i16 %604, %583, !dbg !52
  %606 = sext i16 %605 to i64, !dbg !54
  %607 = add nsw i64 %606, 64, !dbg !55
  %608 = icmp slt i16 %605, 0, !dbg !56
  %609 = select i1 %608, i64 %607, i64 %606, !dbg !57
  %610 = icmp ugt i64 %609, 63, !dbg !58
  br i1 %610, label %611, label %612, !dbg !59

611:                                              ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 53, ptr nonnull @assertFunc_0, i64 1), !dbg !59
  unreachable, !dbg !59

612:                                              ; preds = %7
  %613 = xor i32 %586, %589, !dbg !47
  %614 = select i1 %602, i32 %613, i32 0, !dbg !48
  %615 = xor i32 %614, %580, !dbg !49
  %616 = and i32 %8, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %617 = shl nuw nsw i64 %609, 2, !dbg !60
  %618 = and i64 %617, 192, !dbg !60
  %619 = and i64 %609, 15, !dbg !61
  %620 = or disjoint i64 %618, %619, !dbg !62
  %621 = getelementptr float, ptr addrspace(1) %1, i64 %620, !dbg !63
  %622 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %621, i1 true) #4, !dbg !64
  %623 = bitcast i32 %622 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %624 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 16, i32 31), !dbg !65
  %625 = bitcast i32 %624 to float, !dbg !65
  %626 = fadd float %623, %625, !dbg !68
  %627 = bitcast float %626 to i32, !dbg !65
  %628 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %627, i32 8, i32 31), !dbg !65
  %629 = bitcast i32 %628 to float, !dbg !65
  %630 = fadd float %626, %629, !dbg !68
  %631 = bitcast float %630 to i32, !dbg !65
  %632 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %631, i32 4, i32 31), !dbg !65
  %633 = bitcast i32 %632 to float, !dbg !65
  %634 = fadd float %630, %633, !dbg !68
  %635 = bitcast float %634 to i32, !dbg !65
  %636 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %635, i32 2, i32 31), !dbg !65
  %637 = bitcast i32 %636 to float, !dbg !65
  %638 = fadd float %634, %637, !dbg !68
  %639 = bitcast float %638 to i32, !dbg !65
  %640 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %639, i32 1, i32 31), !dbg !65
  %641 = bitcast i32 %640 to float, !dbg !65
  %642 = fadd float %638, %641, !dbg !68
  %643 = icmp eq i32 %616, 0, !dbg !65
  %644 = getelementptr float, ptr addrspace(3) @global_smem, i32 %.lobit4, !dbg !65
  %645 = bitcast float %642 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 %643) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %646 = icmp slt i32 %8, 2, !dbg !65
  %647 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %438, i1 %646) #4, !dbg !65
  %648 = bitcast i32 %647 to float, !dbg !65
  %649 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %647, i32 1, i32 31), !dbg !65
  %650 = bitcast i32 %649 to float, !dbg !65
  %651 = fadd float %648, %650, !dbg !68
  %652 = and i1 %646, %442, !dbg !65
  %653 = bitcast float %651 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %653, i1 %652) #4, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %654 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %655 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %622, i32 1, i32 0), !dbg !70
  %656 = bitcast i32 %655 to float, !dbg !70
  %657 = fadd float %623, %656, !dbg !71
  %658 = select i1 %643, float %623, float %657, !dbg !70
  %659 = bitcast float %658 to i32, !dbg !70
  %660 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %659, i32 2, i32 0), !dbg !70
  %661 = bitcast i32 %660 to float, !dbg !70
  %662 = icmp samesign ugt i32 %616, 1, !dbg !70
  %663 = fadd float %658, %661, !dbg !71
  %664 = select i1 %662, float %663, float %658, !dbg !70
  %665 = bitcast float %664 to i32, !dbg !70
  %666 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %665, i32 4, i32 0), !dbg !70
  %667 = bitcast i32 %666 to float, !dbg !70
  %668 = icmp samesign ugt i32 %616, 3, !dbg !70
  %669 = fadd float %664, %667, !dbg !71
  %670 = select i1 %668, float %669, float %664, !dbg !70
  %671 = bitcast float %670 to i32, !dbg !70
  %672 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %671, i32 8, i32 0), !dbg !70
  %673 = bitcast i32 %672 to float, !dbg !70
  %674 = icmp samesign ugt i32 %616, 7, !dbg !70
  %675 = fadd float %670, %673, !dbg !71
  %676 = select i1 %674, float %675, float %670, !dbg !70
  %677 = bitcast float %676 to i32, !dbg !70
  %678 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %677, i32 16, i32 0), !dbg !70
  %679 = bitcast i32 %678 to float, !dbg !70
  %680 = icmp samesign ugt i32 %616, 15, !dbg !70
  %681 = fadd float %676, %679, !dbg !71
  %682 = select i1 %680, float %681, float %676, !dbg !70
  %683 = icmp eq i32 %616, 31, !dbg !70
  %684 = bitcast float %682 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %684, i1 %683) #4, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.not20 = icmp eq i32 %.lobit4, 0, !dbg !70
  %685 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !70
  %686 = fadd float %685, %682, !dbg !71
  %687 = select i1 %.not20, float %682, float %686, !dbg !70
  %688 = bitcast float %687 to i32, !dbg !70
  %689 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %688, i32 1, i32 0), !dbg !70
  %690 = fsub float 1.000000e+00, %623, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %691 = bitcast float %690 to i32, !dbg !74
  %692 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %691, i32 1, i32 0), !dbg !74
  %693 = bitcast i32 %692 to float, !dbg !74
  %694 = fadd float %690, %693, !dbg !75
  %695 = select i1 %643, float %690, float %694, !dbg !74
  %696 = bitcast float %695 to i32, !dbg !74
  %697 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %696, i32 2, i32 0), !dbg !74
  %698 = bitcast i32 %697 to float, !dbg !74
  %699 = fadd float %695, %698, !dbg !75
  %700 = select i1 %662, float %699, float %695, !dbg !74
  %701 = bitcast float %700 to i32, !dbg !74
  %702 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %701, i32 4, i32 0), !dbg !74
  %703 = bitcast i32 %702 to float, !dbg !74
  %704 = fadd float %700, %703, !dbg !75
  %705 = select i1 %668, float %704, float %700, !dbg !74
  %706 = bitcast float %705 to i32, !dbg !74
  %707 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %706, i32 8, i32 0), !dbg !74
  %708 = bitcast i32 %707 to float, !dbg !74
  %709 = fadd float %705, %708, !dbg !75
  %710 = select i1 %674, float %709, float %705, !dbg !74
  %711 = bitcast float %710 to i32, !dbg !74
  %712 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %711, i32 16, i32 0), !dbg !74
  %713 = bitcast i32 %712 to float, !dbg !74
  %714 = fadd float %710, %713, !dbg !75
  %715 = select i1 %680, float %714, float %710, !dbg !74
  %716 = bitcast float %715 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %716, i1 %683) #4, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %717 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !74
  %718 = fadd float %717, %715, !dbg !75
  %719 = select i1 %.not20, float %715, float %718, !dbg !74
  %720 = bitcast float %719 to i32, !dbg !74
  %721 = tail call i32 @llvm.nvvm.shfl.sync.up.i32(i32 -1, i32 %720, i32 1, i32 0), !dbg !74
  %722 = zext nneg i32 %11 to i64, !dbg !76
  %723 = getelementptr float, ptr addrspace(1) %2, i64 %722, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %615, ptr addrspace(1) %723, i1 true) #4, !dbg !77
  %724 = getelementptr float, ptr addrspace(1) %4, i64 %722, !dbg !78
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %688, ptr addrspace(1) %724, i1 true) #4, !dbg !79
  %725 = getelementptr float, ptr addrspace(1) %5, i64 %722, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %720, ptr addrspace(1) %725, i1 true) #4, !dbg !81
  %726 = icmp eq i32 %11, 0, !dbg !82
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %654, ptr addrspace(1) %3, i1 %726) #4, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.up.i32(i32, i32, i32, i32) #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crb4eoqwd3wlz3jvgg6aezka343bwo7qr7oml6e4p6gbppyiamw6.py", directory: "inductor_cache/rb")
!4 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0", linkageName: "triton_per_fused_cumsum_index_mul_rsub_sort_sub_sum_0", scope: !3, file: !3, line: 24, type: !9, scopeLine: 24, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 31, column: 34, scope: !11)
!13 = !DILocation(line: 35, column: 34, scope: !11)
!14 = !DILocation(line: 35, column: 53, scope: !11)
!15 = !DILocation(line: 35, column: 48, scope: !11)
!16 = !DILocation(line: 35, column: 30, scope: !11)
!17 = !DILocation(line: 35, column: 60, scope: !11)
!18 = !DILocation(line: 36, column: 30, scope: !11)
!19 = !DILocation(line: 36, column: 60, scope: !11)
!20 = !DILocation(line: 38, column: 18, scope: !11)
!21 = !DILocation(line: 40, column: 18, scope: !11)
!22 = !DILocation(line: 41, column: 18, scope: !11)
!23 = !DILocation(line: 42, column: 18, scope: !11)
!24 = !DILocation(line: 44, column: 19, scope: !11)
!25 = !DILocation(line: 575, column: 44, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = distinct !DILexicalBlockFile(scope: !11, file: !27, discriminator: 0)
!29 = !DILocation(line: 47, column: 71, scope: !11)
!30 = !DILocation(line: 502, column: 14, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!32 = !DILocation(line: 505, column: 21, scope: !31, inlinedAt: !29)
!33 = !DILocation(line: 506, column: 40, scope: !31, inlinedAt: !29)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !29)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !29)
!38 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!39 = !DILocation(line: 507, column: 41, scope: !31, inlinedAt: !29)
!40 = !DILocation(line: 510, column: 20, scope: !31, inlinedAt: !29)
!41 = !DILocation(line: 511, column: 22, scope: !31, inlinedAt: !29)
!42 = !DILocation(line: 516, column: 36, scope: !31, inlinedAt: !29)
!43 = !DILocation(line: 516, column: 23, scope: !31, inlinedAt: !29)
!44 = !DILocation(line: 519, column: 37, scope: !31, inlinedAt: !29)
!45 = !DILocation(line: 519, column: 23, scope: !31, inlinedAt: !29)
!46 = !DILocation(line: 547, column: 28, scope: !31, inlinedAt: !29)
!47 = !DILocation(line: 548, column: 38, scope: !31, inlinedAt: !29)
!48 = !DILocation(line: 548, column: 46, scope: !31, inlinedAt: !29)
!49 = !DILocation(line: 548, column: 15, scope: !31, inlinedAt: !29)
!50 = !DILocation(line: 549, column: 48, scope: !31, inlinedAt: !29)
!51 = !DILocation(line: 549, column: 59, scope: !31, inlinedAt: !29)
!52 = !DILocation(line: 549, column: 22, scope: !31, inlinedAt: !29)
!53 = !DILocation(line: 536, column: 22, scope: !31, inlinedAt: !29)
!54 = !DILocation(line: 48, column: 21, scope: !11)
!55 = !DILocation(line: 50, column: 20, scope: !11)
!56 = !DILocation(line: 51, column: 20, scope: !11)
!57 = !DILocation(line: 52, column: 35, scope: !11)
!58 = !DILocation(line: 53, column: 37, scope: !11)
!59 = !DILocation(line: 53, column: 50, scope: !11)
!60 = !DILocation(line: 54, column: 36, scope: !11)
!61 = !DILocation(line: 54, column: 68, scope: !11)
!62 = !DILocation(line: 54, column: 60, scope: !11)
!63 = !DILocation(line: 54, column: 31, scope: !11)
!64 = !DILocation(line: 54, column: 75, scope: !11)
!65 = !DILocation(line: 267, column: 36, scope: !66, inlinedAt: !67)
!66 = distinct !DILexicalBlockFile(scope: !11, file: !36, discriminator: 0)
!67 = !DILocation(line: 56, column: 26, scope: !11)
!68 = !DILocation(line: 256, column: 15, scope: !69, inlinedAt: !67)
!69 = distinct !DILexicalBlockFile(scope: !66, file: !36, discriminator: 0)
!70 = !DILocation(line: 59, column: 46, scope: !11)
!71 = !DILocation(line: 13, column: 20, scope: !72, inlinedAt: !70)
!72 = distinct !DILexicalBlockFile(scope: !11, file: !3, discriminator: 0)
!73 = !DILocation(line: 60, column: 19, scope: !11)
!74 = !DILocation(line: 63, column: 46, scope: !11)
!75 = !DILocation(line: 13, column: 20, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 64, column: 25, scope: !11)
!77 = !DILocation(line: 64, column: 72, scope: !11)
!78 = !DILocation(line: 65, column: 25, scope: !11)
!79 = !DILocation(line: 65, column: 72, scope: !11)
!80 = !DILocation(line: 66, column: 25, scope: !11)
!81 = !DILocation(line: 66, column: 72, scope: !11)
!82 = !DILocation(line: 67, column: 68, scope: !11)
!83 = !DILocation(line: 67, column: 4, scope: !11)
