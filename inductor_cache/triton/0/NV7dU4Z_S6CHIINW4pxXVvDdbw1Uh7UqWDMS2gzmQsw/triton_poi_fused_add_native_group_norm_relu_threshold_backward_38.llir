; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_threshold_backward_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = srem i32 %15, 2048, !dbg !14
  %18 = srem i32 %16, 2048, !dbg !14
  %19 = sdiv i32 %15, 32768, !dbg !15
  %20 = sext i32 %15 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %16 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !17
  %26 = shl nsw i32 %19, 6, !dbg !18
  %.lhs.trunc = trunc nsw i32 %17 to i16, !dbg !19
  %27 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %27 to i32, !dbg !19
  %28 = add nsw i32 %26, %.sext, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %41 = bitcast i32 %40 to float, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %43 = bitcast i32 %42 to float, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %45 = bitcast i32 %44 to float, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %47 = bitcast i32 %46 to float, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %49 = bitcast i32 %48 to float, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = sext i32 %17 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !25
  %58 = sext i32 %18 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !27
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !30
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 5.120000e+02) #4, !dbg !31
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 5.120000e+02) #4, !dbg !31
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 5.120000e+02) #4, !dbg !31
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 5.120000e+02) #4, !dbg !31
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 5.120000e+02) #4, !dbg !31
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 5.120000e+02) #4, !dbg !31
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 5.120000e+02) #4, !dbg !31
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 5.120000e+02) #4, !dbg !31
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !32
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !32
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !32
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !32
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !32
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !32
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !32
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %86, 0, !dbg !33
  br i1 %.not.i, label %89, label %87, !dbg !33

87:                                               ; preds = %9
  %88 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

89:                                               ; preds = %9
  %90 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %87, %89
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], !dbg !33
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %91, 0, !dbg !33
  br i1 %.not.i15, label %94, label %92, !dbg !33

92:                                               ; preds = %__nv_rsqrtf.exit
  %93 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %79), !dbg !33
  br label %__nv_rsqrtf.exit17, !dbg !33

94:                                               ; preds = %__nv_rsqrtf.exit
  %95 = tail call float @llvm.nvvm.rsqrt.approx.f(float %79), !dbg !33
  br label %__nv_rsqrtf.exit17, !dbg !33

__nv_rsqrtf.exit17:                               ; preds = %92, %94
  %.0.i16 = phi float [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i18 = icmp eq i32 %96, 0, !dbg !33
  br i1 %.not.i18, label %99, label %97, !dbg !33

97:                                               ; preds = %__nv_rsqrtf.exit17
  %98 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %80), !dbg !33
  br label %__nv_rsqrtf.exit20, !dbg !33

99:                                               ; preds = %__nv_rsqrtf.exit17
  %100 = tail call float @llvm.nvvm.rsqrt.approx.f(float %80), !dbg !33
  br label %__nv_rsqrtf.exit20, !dbg !33

__nv_rsqrtf.exit20:                               ; preds = %97, %99
  %.0.i19 = phi float [ %98, %97 ], [ %100, %99 ], !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i21 = icmp eq i32 %101, 0, !dbg !33
  br i1 %.not.i21, label %104, label %102, !dbg !33

102:                                              ; preds = %__nv_rsqrtf.exit20
  %103 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %81), !dbg !33
  br label %__nv_rsqrtf.exit23, !dbg !33

104:                                              ; preds = %__nv_rsqrtf.exit20
  %105 = tail call float @llvm.nvvm.rsqrt.approx.f(float %81), !dbg !33
  br label %__nv_rsqrtf.exit23, !dbg !33

__nv_rsqrtf.exit23:                               ; preds = %102, %104
  %.0.i22 = phi float [ %103, %102 ], [ %105, %104 ], !dbg !33
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i24 = icmp eq i32 %106, 0, !dbg !33
  br i1 %.not.i24, label %109, label %107, !dbg !33

107:                                              ; preds = %__nv_rsqrtf.exit23
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %82), !dbg !33
  br label %__nv_rsqrtf.exit26, !dbg !33

109:                                              ; preds = %__nv_rsqrtf.exit23
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %82), !dbg !33
  br label %__nv_rsqrtf.exit26, !dbg !33

__nv_rsqrtf.exit26:                               ; preds = %107, %109
  %.0.i25 = phi float [ %108, %107 ], [ %110, %109 ], !dbg !33
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i27 = icmp eq i32 %111, 0, !dbg !33
  br i1 %.not.i27, label %114, label %112, !dbg !33

112:                                              ; preds = %__nv_rsqrtf.exit26
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %83), !dbg !33
  br label %__nv_rsqrtf.exit29, !dbg !33

114:                                              ; preds = %__nv_rsqrtf.exit26
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %83), !dbg !33
  br label %__nv_rsqrtf.exit29, !dbg !33

__nv_rsqrtf.exit29:                               ; preds = %112, %114
  %.0.i28 = phi float [ %113, %112 ], [ %115, %114 ], !dbg !33
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i30 = icmp eq i32 %116, 0, !dbg !33
  br i1 %.not.i30, label %119, label %117, !dbg !33

117:                                              ; preds = %__nv_rsqrtf.exit29
  %118 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %84), !dbg !33
  br label %__nv_rsqrtf.exit32, !dbg !33

119:                                              ; preds = %__nv_rsqrtf.exit29
  %120 = tail call float @llvm.nvvm.rsqrt.approx.f(float %84), !dbg !33
  br label %__nv_rsqrtf.exit32, !dbg !33

__nv_rsqrtf.exit32:                               ; preds = %117, %119
  %.0.i31 = phi float [ %118, %117 ], [ %120, %119 ], !dbg !33
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %121, 0, !dbg !33
  br i1 %.not.i33, label %124, label %122, !dbg !33

122:                                              ; preds = %__nv_rsqrtf.exit32
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %85), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

124:                                              ; preds = %__nv_rsqrtf.exit32
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %85), !dbg !33
  br label %__nv_rsqrtf.exit35, !dbg !33

__nv_rsqrtf.exit35:                               ; preds = %122, %124
  %.0.i34 = phi float [ %123, %122 ], [ %125, %124 ], !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %127 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !22
  %128 = insertelement <4 x i32> %127, i32 %36, i64 1, !dbg !22
  %129 = insertelement <4 x i32> %128, i32 %37, i64 2, !dbg !22
  %130 = insertelement <4 x i32> %129, i32 %38, i64 3, !dbg !22
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %133 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %134 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %135 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %136 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !22
  %137 = insertelement <4 x i32> %136, i32 %32, i64 1, !dbg !22
  %138 = insertelement <4 x i32> %137, i32 %33, i64 2, !dbg !22
  %139 = insertelement <4 x i32> %138, i32 %34, i64 3, !dbg !22
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %142 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %143 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %144 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !30
  %147 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !30
  %148 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %149 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %150 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %151 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %152 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %155 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !28
  %158 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !28
  %160 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %161 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %162 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %163 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %164 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %165 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %166 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %167 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %168 = shl i32 %12, 2, !dbg !12
  %169 = and i32 %168, 508, !dbg !12
  %170 = or disjoint i32 %169, 512, !dbg !12
  %171 = or disjoint i32 %11, %170, !dbg !13
  %172 = or disjoint i32 %11, %169, !dbg !13
  %173 = sext i32 %172 to i64, !dbg !34
  %174 = getelementptr float, ptr addrspace(1) %6, i64 %173, !dbg !34
  %175 = sext i32 %171 to i64, !dbg !34
  %176 = getelementptr float, ptr addrspace(1) %6, i64 %175, !dbg !34
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %178 = getelementptr inbounds i8, ptr addrspace(3) %177, i32 16, !dbg !35
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !35
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !35
  %181 = getelementptr inbounds i8, ptr addrspace(3) %179, i32 4, !dbg !35
  %182 = getelementptr inbounds i8, ptr addrspace(3) %179, i32 8, !dbg !35
  %183 = getelementptr inbounds i8, ptr addrspace(3) %179, i32 12, !dbg !35
  %184 = getelementptr i1, ptr addrspace(1) %7, i64 %20, !dbg !36
  %185 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !17
  %186 = insertelement <4 x i32> %185, i32 %142, i64 1, !dbg !17
  %187 = insertelement <4 x i32> %186, i32 %141, i64 2, !dbg !17
  %188 = insertelement <4 x i32> %187, i32 %135, i64 3, !dbg !17
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !17
  %190 = fsub <4 x float> %189, %140, !dbg !37
  %191 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !30
  %192 = insertelement <4 x i32> %191, i32 %150, i64 1, !dbg !30
  %193 = insertelement <4 x i32> %192, i32 %149, i64 2, !dbg !30
  %194 = insertelement <4 x i32> %193, i32 %148, i64 3, !dbg !30
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !30
  %196 = insertelement <4 x i32> poison, i32 %159, i64 0, !dbg !28
  %197 = insertelement <4 x i32> %196, i32 %158, i64 1, !dbg !28
  %198 = insertelement <4 x i32> %197, i32 %157, i64 2, !dbg !28
  %199 = insertelement <4 x i32> %198, i32 %156, i64 3, !dbg !28
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !28
  %201 = insertelement <4 x i32> poison, i32 %167, i64 0, !dbg !26
  %202 = insertelement <4 x i32> %201, i32 %166, i64 1, !dbg !26
  %203 = insertelement <4 x i32> %202, i32 %165, i64 2, !dbg !26
  %204 = insertelement <4 x i32> %203, i32 %164, i64 3, !dbg !26
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !26
  %206 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !38
  %207 = insertelement <4 x float> %206, float %.0.i16, i64 1, !dbg !38
  %208 = insertelement <4 x float> %207, float %.0.i19, i64 2, !dbg !38
  %209 = insertelement <4 x float> %208, float %.0.i22, i64 3, !dbg !38
  %210 = fmul <4 x float> %190, %209, !dbg !38
  %211 = fmul <4 x float> %210, %205, !dbg !39
  %212 = fadd <4 x float> %211, %200, !dbg !40
  %213 = fadd <4 x float> %212, %195, !dbg !41
  %214 = fcmp olt <4 x float> %213, zeroinitializer, !dbg !42
  %215 = select <4 x i1> %214, <4 x float> zeroinitializer, <4 x float> %213, !dbg !46
  %216 = fcmp ole <4 x float> %215, zeroinitializer, !dbg !47
  %bc = bitcast <4 x float> %215 to <4 x i32>, !dbg !35
  %217 = extractelement <4 x i32> %bc, i64 0, !dbg !35
  %bc36 = bitcast <4 x float> %215 to <4 x i32>, !dbg !35
  %218 = extractelement <4 x i32> %bc36, i64 1, !dbg !35
  %bc37 = bitcast <4 x float> %215 to <4 x i32>, !dbg !35
  %219 = extractelement <4 x i32> %bc37, i64 2, !dbg !35
  %bc38 = bitcast <4 x float> %215 to <4 x i32>, !dbg !35
  %220 = extractelement <4 x i32> %bc38, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %177, i32 %217, i32 %218, i32 %219, i32 %220, i1 true) #4, !dbg !35
  %221 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !17
  %222 = insertelement <4 x i32> %221, i32 %133, i64 1, !dbg !17
  %223 = insertelement <4 x i32> %222, i32 %132, i64 2, !dbg !17
  %224 = insertelement <4 x i32> %223, i32 %126, i64 3, !dbg !17
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !17
  %226 = fsub <4 x float> %225, %131, !dbg !37
  %227 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !30
  %228 = insertelement <4 x i32> %227, i32 %146, i64 1, !dbg !30
  %229 = insertelement <4 x i32> %228, i32 %145, i64 2, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %144, i64 3, !dbg !30
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !30
  %232 = insertelement <4 x i32> poison, i32 %155, i64 0, !dbg !28
  %233 = insertelement <4 x i32> %232, i32 %154, i64 1, !dbg !28
  %234 = insertelement <4 x i32> %233, i32 %153, i64 2, !dbg !28
  %235 = insertelement <4 x i32> %234, i32 %152, i64 3, !dbg !28
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !28
  %237 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !26
  %238 = insertelement <4 x i32> %237, i32 %162, i64 1, !dbg !26
  %239 = insertelement <4 x i32> %238, i32 %161, i64 2, !dbg !26
  %240 = insertelement <4 x i32> %239, i32 %160, i64 3, !dbg !26
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !26
  %242 = insertelement <4 x float> poison, float %.0.i25, i64 0, !dbg !38
  %243 = insertelement <4 x float> %242, float %.0.i28, i64 1, !dbg !38
  %244 = insertelement <4 x float> %243, float %.0.i31, i64 2, !dbg !38
  %245 = insertelement <4 x float> %244, float %.0.i34, i64 3, !dbg !38
  %246 = fmul <4 x float> %226, %245, !dbg !38
  %247 = fmul <4 x float> %246, %241, !dbg !39
  %248 = fadd <4 x float> %247, %236, !dbg !40
  %249 = fadd <4 x float> %248, %231, !dbg !41
  %250 = fcmp olt <4 x float> %249, zeroinitializer, !dbg !42
  %251 = select <4 x i1> %250, <4 x float> zeroinitializer, <4 x float> %249, !dbg !46
  %252 = fcmp ole <4 x float> %251, zeroinitializer, !dbg !47
  %bc39 = bitcast <4 x float> %251 to <4 x i32>, !dbg !35
  %253 = extractelement <4 x i32> %bc39, i64 0, !dbg !35
  %bc40 = bitcast <4 x float> %251 to <4 x i32>, !dbg !35
  %254 = extractelement <4 x i32> %bc40, i64 1, !dbg !35
  %bc41 = bitcast <4 x float> %251 to <4 x i32>, !dbg !35
  %255 = extractelement <4 x i32> %bc41, i64 2, !dbg !35
  %bc42 = bitcast <4 x float> %251 to <4 x i32>, !dbg !35
  %256 = extractelement <4 x i32> %bc42, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %178, i32 %253, i32 %254, i32 %255, i32 %256, i1 true) #4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %257 = load <4 x i32>, ptr addrspace(3) %180, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %179, align 16, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %181, align 4, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %182, align 8, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %183, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %174, i1 true) #4, !dbg !35
  %.extract11 = extractelement <4 x i32> %257, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %257, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %257, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %257, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %176, i1 true) #4, !dbg !35
  %258 = zext <4 x i1> %216 to <4 x i8>, !dbg !48
  %259 = bitcast <4 x i8> %258 to i32, !dbg !48
  %260 = zext <4 x i1> %252 to <4 x i8>, !dbg !48
  %261 = bitcast <4 x i8> %260 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %259, i32 %261, ptr addrspace(1) %184, i1 true) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cereij7hao45vrw77sqll4qz46nm7655kyptfcjzrewhwh2xzqin.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_threshold_backward_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_threshold_backward_38, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_threshold_backward_38", linkageName: "triton_poi_fused_add_native_group_norm_relu_threshold_backward_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 27, scope: !7)
!34 = !DILocation(line: 47, column: 25, scope: !7)
!35 = !DILocation(line: 47, column: 37, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 19, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 44, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 46, column: 21, scope: !7)
!48 = !DILocation(line: 48, column: 37, scope: !7)
!49 = !DILocation(line: 48, column: 4, scope: !7)
