; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %.lobit1 = lshr i32 %13, 6, !dbg !12
  %16 = and i32 %.lobit1, 3, !dbg !12
  %17 = or disjoint i32 %12, %15, !dbg !13
  %18 = or disjoint i32 %12, %16, !dbg !13
  %19 = or disjoint i32 %18, 4, !dbg !13
  %20 = or disjoint i32 %18, 8, !dbg !13
  %21 = or disjoint i32 %18, 12, !dbg !13
  %22 = icmp slt i32 %17, 36, !dbg !14
  %23 = icmp slt i32 %18, 36, !dbg !14
  %24 = icmp slt i32 %19, 36, !dbg !14
  %25 = icmp slt i32 %20, 36, !dbg !14
  %26 = icmp slt i32 %21, 36, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 8, !dbg !16
  %29 = lshr i32 %13, 2, !dbg !17
  %30 = and i32 %29, 63, !dbg !17
  %31 = and i32 %14, 252, !dbg !17
  %32 = and i32 %13, 255, !dbg !17
  %33 = or disjoint i32 %28, %30, !dbg !18
  %34 = or disjoint i32 %33, 64, !dbg !18
  %35 = or disjoint i32 %33, 128, !dbg !18
  %36 = or disjoint i32 %33, 192, !dbg !18
  %37 = or disjoint i32 %28, %31, !dbg !18
  %38 = or disjoint i32 %28, %32, !dbg !18
  %39 = icmp slt i32 %33, 512, !dbg !19
  %40 = icmp slt i32 %34, 512, !dbg !19
  %41 = icmp slt i32 %35, 512, !dbg !19
  %42 = icmp slt i32 %36, 512, !dbg !19
  %43 = icmp slt i32 %37, 512, !dbg !19
  %44 = icmp slt i32 %38, 512, !dbg !19
  %45 = srem i32 %38, 128, !dbg !20
  %46 = sdiv i32 %37, 128, !dbg !21
  %47 = mul i32 %33, 36, !dbg !22
  %48 = mul i32 %34, 36, !dbg !22
  %49 = mul i32 %35, 36, !dbg !22
  %50 = mul i32 %36, 36, !dbg !22
  %51 = add i32 %47, %17, !dbg !23
  %52 = add i32 %17, %48, !dbg !23
  %53 = add i32 %17, %49, !dbg !23
  %54 = add i32 %17, %50, !dbg !23
  %55 = sext i32 %51 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = sext i32 %52 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = sext i32 %53 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !24
  %61 = sext i32 %54 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !24
  %63 = and i1 %22, %39, !dbg !25
  %64 = and i1 %40, %22, !dbg !25
  %65 = and i1 %41, %22, !dbg !25
  %66 = and i1 %42, %22, !dbg !25
  %67 = and i1 %23, %43, !dbg !25
  %68 = and i1 %24, %43, !dbg !25
  %69 = and i1 %25, %43, !dbg !25
  %70 = and i1 %26, %43, !dbg !25
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %63) #4, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %64) #4, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %65) #4, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %66) #4, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !26
  %91 = shl i32 %13, 10, !dbg !26
  %92 = and i32 %91, 3072, !dbg !26
  %93 = or disjoint i32 %92, %30, !dbg !26
  %94 = and i32 %14, 1020, !dbg !26
  %95 = lshr exact i32 %92, 6, !dbg !26
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !26
  %98 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #4, !dbg !26
  %99 = or disjoint i32 %93, 256, !dbg !26
  %100 = lshr i32 %99, 8, !dbg !26
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !26
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !26
  %103 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #4, !dbg !26
  %104 = or disjoint i32 %93, 512, !dbg !26
  %105 = lshr i32 %104, 8, !dbg !26
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !26
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !26
  %108 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #4, !dbg !26
  %109 = or disjoint i32 %93, 768, !dbg !26
  %110 = lshr i32 %109, 8, !dbg !26
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !26
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !26
  %113 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #4, !dbg !26
  %114 = or disjoint i32 %93, 64, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %96, i32 %114, !dbg !26
  %116 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !26
  %117 = or disjoint i32 %93, 320, !dbg !26
  %118 = lshr i32 %117, 8, !dbg !26
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !26
  %121 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !26
  %122 = or disjoint i32 %93, 576, !dbg !26
  %123 = lshr i32 %122, 8, !dbg !26
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !26
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !26
  %126 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !26
  %127 = or disjoint i32 %93, 832, !dbg !26
  %128 = lshr i32 %127, 8, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !26
  %131 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #4, !dbg !26
  %132 = or disjoint i32 %93, 128, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) %96, i32 %132, !dbg !26
  %134 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !26
  %135 = or disjoint i32 %93, 384, !dbg !26
  %136 = lshr i32 %135, 8, !dbg !26
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !26
  %139 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !26
  %140 = or disjoint i32 %93, 640, !dbg !26
  %141 = lshr i32 %140, 8, !dbg !26
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !26
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !26
  %144 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #4, !dbg !26
  %145 = or disjoint i32 %93, 896, !dbg !26
  %146 = lshr i32 %145, 8, !dbg !26
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !26
  %149 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !26
  %150 = or disjoint i32 %93, 192, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %96, i32 %150, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #4, !dbg !26
  %153 = or disjoint i32 %93, 448, !dbg !26
  %154 = lshr i32 %153, 8, !dbg !26
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !26
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !26
  %157 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #4, !dbg !26
  %158 = or disjoint i32 %93, 704, !dbg !26
  %159 = lshr i32 %158, 8, !dbg !26
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !26
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !26
  %162 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #4, !dbg !26
  %163 = or disjoint i32 %93, 960, !dbg !26
  %164 = lshr i32 %163, 8, !dbg !26
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !26
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !26
  %167 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %168 = lshr i32 %94, 8, !dbg !26
  %169 = or disjoint i32 %168, %94, !dbg !26
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !26
  %171 = load float, ptr addrspace(3) %170, align 4, !dbg !26
  %172 = or disjoint i32 %94, 1, !dbg !26
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !26
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %172, !dbg !26
  %175 = load float, ptr addrspace(3) %174, align 4, !dbg !26
  %176 = or disjoint i32 %94, 2, !dbg !26
  %177 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %176, !dbg !26
  %178 = load float, ptr addrspace(3) %177, align 4, !dbg !26
  %179 = or disjoint i32 %94, 3, !dbg !26
  %180 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %179, !dbg !26
  %181 = load float, ptr addrspace(3) %180, align 4, !dbg !26
  %182 = or disjoint i32 %94, 1024, !dbg !26
  %183 = lshr i32 %182, 8, !dbg !26
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !26
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !26
  %186 = load float, ptr addrspace(3) %185, align 4, !dbg !26
  %187 = or disjoint i32 %94, 1025, !dbg !26
  %188 = lshr i32 %187, 8, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !26
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !26
  %191 = load float, ptr addrspace(3) %190, align 4, !dbg !26
  %192 = or disjoint i32 %94, 1026, !dbg !26
  %193 = lshr i32 %192, 8, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !26
  %196 = load float, ptr addrspace(3) %195, align 4, !dbg !26
  %197 = or disjoint i32 %94, 1027, !dbg !26
  %198 = lshr i32 %197, 8, !dbg !26
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !26
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !26
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !26
  %202 = or disjoint i32 %94, 2048, !dbg !26
  %203 = lshr i32 %202, 8, !dbg !26
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !26
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !26
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !26
  %207 = or disjoint i32 %94, 2049, !dbg !26
  %208 = lshr i32 %207, 8, !dbg !26
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !26
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !26
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !26
  %212 = or disjoint i32 %94, 2050, !dbg !26
  %213 = lshr i32 %212, 8, !dbg !26
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !26
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !26
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !26
  %217 = or disjoint i32 %94, 2051, !dbg !26
  %218 = lshr i32 %217, 8, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !26
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !26
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !26
  %222 = or disjoint i32 %94, 3072, !dbg !26
  %223 = lshr i32 %222, 8, !dbg !26
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !26
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !26
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !26
  %227 = or disjoint i32 %94, 3073, !dbg !26
  %228 = lshr i32 %227, 8, !dbg !26
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !26
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !26
  %231 = load float, ptr addrspace(3) %230, align 4, !dbg !26
  %232 = or disjoint i32 %94, 3074, !dbg !26
  %233 = lshr i32 %232, 8, !dbg !26
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !26
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !26
  %236 = load float, ptr addrspace(3) %235, align 4, !dbg !26
  %237 = or disjoint i32 %94, 3075, !dbg !26
  %238 = lshr i32 %237, 8, !dbg !26
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !26
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !26
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !26
  %242 = shl i32 %18, 9, !dbg !27
  %243 = shl i32 %19, 9, !dbg !27
  %244 = shl i32 %20, 9, !dbg !27
  %245 = shl i32 %21, 9, !dbg !27
  %246 = add i32 %37, %242, !dbg !28
  %247 = add i32 %37, %243, !dbg !28
  %248 = add i32 %37, %244, !dbg !28
  %249 = add i32 %37, %245, !dbg !28
  %250 = sext i32 %246 to i64, !dbg !29
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !29
  %252 = sext i32 %247 to i64, !dbg !29
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !29
  %254 = sext i32 %248 to i64, !dbg !29
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !29
  %256 = sext i32 %249 to i64, !dbg !29
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !29
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %67) #4, !dbg !30
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %68) #4, !dbg !30
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %69) #4, !dbg !30
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %257, i1 %70) #4, !dbg !30
  %262 = sext i32 %45 to i64, !dbg !31
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !31
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %263, i1 %44) #4, !dbg !32
  %265 = shl i32 %18, 2, !dbg !33
  %266 = shl i32 %19, 2, !dbg !33
  %267 = shl i32 %20, 2, !dbg !33
  %268 = shl i32 %21, 2, !dbg !33
  %269 = add i32 %46, %265, !dbg !34
  %270 = add i32 %46, %266, !dbg !34
  %271 = add i32 %46, %267, !dbg !34
  %272 = add i32 %46, %268, !dbg !34
  %273 = sext i32 %269 to i64, !dbg !35
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %273, !dbg !35
  %275 = sext i32 %270 to i64, !dbg !35
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %275, !dbg !35
  %277 = sext i32 %271 to i64, !dbg !35
  %278 = getelementptr float, ptr addrspace(1) %3, i64 %277, !dbg !35
  %279 = sext i32 %272 to i64, !dbg !35
  %280 = getelementptr float, ptr addrspace(1) %3, i64 %279, !dbg !35
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %67) #4, !dbg !36
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %67) #4, !dbg !36
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %67) #4, !dbg !36
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 %67) #4, !dbg !36
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %68) #4, !dbg !36
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %68) #4, !dbg !36
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %68) #4, !dbg !36
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %276, i1 %68) #4, !dbg !36
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %69) #4, !dbg !36
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %69) #4, !dbg !36
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %69) #4, !dbg !36
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %278, i1 %69) #4, !dbg !36
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %70) #4, !dbg !36
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %70) #4, !dbg !36
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %70) #4, !dbg !36
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 %70) #4, !dbg !36
  %297 = getelementptr float, ptr addrspace(1) %4, i64 %273, !dbg !37
  %298 = getelementptr float, ptr addrspace(1) %4, i64 %275, !dbg !37
  %299 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !37
  %300 = getelementptr float, ptr addrspace(1) %4, i64 %279, !dbg !37
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %67) #4, !dbg !38
  %302 = bitcast i32 %301 to float, !dbg !38
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %67) #4, !dbg !38
  %304 = bitcast i32 %303 to float, !dbg !38
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %67) #4, !dbg !38
  %306 = bitcast i32 %305 to float, !dbg !38
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 %67) #4, !dbg !38
  %308 = bitcast i32 %307 to float, !dbg !38
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %68) #4, !dbg !38
  %310 = bitcast i32 %309 to float, !dbg !38
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %68) #4, !dbg !38
  %312 = bitcast i32 %311 to float, !dbg !38
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %68) #4, !dbg !38
  %314 = bitcast i32 %313 to float, !dbg !38
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 %68) #4, !dbg !38
  %316 = bitcast i32 %315 to float, !dbg !38
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %69) #4, !dbg !38
  %318 = bitcast i32 %317 to float, !dbg !38
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %69) #4, !dbg !38
  %320 = bitcast i32 %319 to float, !dbg !38
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %69) #4, !dbg !38
  %322 = bitcast i32 %321 to float, !dbg !38
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 %69) #4, !dbg !38
  %324 = bitcast i32 %323 to float, !dbg !38
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %70) #4, !dbg !38
  %326 = bitcast i32 %325 to float, !dbg !38
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %70) #4, !dbg !38
  %328 = bitcast i32 %327 to float, !dbg !38
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %70) #4, !dbg !38
  %330 = bitcast i32 %329 to float, !dbg !38
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 %70) #4, !dbg !38
  %332 = bitcast i32 %331 to float, !dbg !38
  %333 = getelementptr float, ptr addrspace(1) %5, i64 %262, !dbg !39
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %44) #4, !dbg !40
  %335 = getelementptr float, ptr addrspace(1) %6, i64 %262, !dbg !41
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %44) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %32, !dbg !43
  %338 = insertelement <1 x i32> poison, i32 %264, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %31, !dbg !43
  %340 = load float, ptr addrspace(3) %339, align 16, !dbg !43
  %341 = or disjoint i32 %31, 1, !dbg !43
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !43
  %343 = load float, ptr addrspace(3) %342, align 4, !dbg !43
  %344 = or disjoint i32 %31, 2, !dbg !43
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !43
  %346 = load float, ptr addrspace(3) %345, align 8, !dbg !43
  %347 = or disjoint i32 %31, 3, !dbg !43
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %347, !dbg !43
  %349 = load float, ptr addrspace(3) %348, align 4, !dbg !43
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float 1.280000e+02) #4, !dbg !44
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float 1.280000e+02) #4, !dbg !44
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float 1.280000e+02) #4, !dbg !44
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float 1.280000e+02) #4, !dbg !44
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float 1.280000e+02) #4, !dbg !44
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float 1.280000e+02) #4, !dbg !44
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float 1.280000e+02) #4, !dbg !44
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float 1.280000e+02) #4, !dbg !44
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float 1.280000e+02) #4, !dbg !44
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %320, float 1.280000e+02) #4, !dbg !44
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %322, float 1.280000e+02) #4, !dbg !44
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %324, float 1.280000e+02) #4, !dbg !44
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float 1.280000e+02) #4, !dbg !44
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float 1.280000e+02) #4, !dbg !44
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float 1.280000e+02) #4, !dbg !44
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float 1.280000e+02) #4, !dbg !44
  %366 = fadd float %350, 0x3EE4F8B580000000, !dbg !45
  %367 = fadd float %351, 0x3EE4F8B580000000, !dbg !45
  %368 = fadd float %352, 0x3EE4F8B580000000, !dbg !45
  %369 = fadd float %353, 0x3EE4F8B580000000, !dbg !45
  %370 = fadd float %354, 0x3EE4F8B580000000, !dbg !45
  %371 = fadd float %355, 0x3EE4F8B580000000, !dbg !45
  %372 = fadd float %356, 0x3EE4F8B580000000, !dbg !45
  %373 = fadd float %357, 0x3EE4F8B580000000, !dbg !45
  %374 = fadd float %358, 0x3EE4F8B580000000, !dbg !45
  %375 = fadd float %359, 0x3EE4F8B580000000, !dbg !45
  %376 = fadd float %360, 0x3EE4F8B580000000, !dbg !45
  %377 = fadd float %361, 0x3EE4F8B580000000, !dbg !45
  %378 = fadd float %362, 0x3EE4F8B580000000, !dbg !45
  %379 = fadd float %363, 0x3EE4F8B580000000, !dbg !45
  %380 = fadd float %364, 0x3EE4F8B580000000, !dbg !45
  %381 = fadd float %365, 0x3EE4F8B580000000, !dbg !45
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i = icmp eq i32 %382, 0, !dbg !46
  br i1 %.not.i, label %385, label %383, !dbg !46

383:                                              ; preds = %10
  %384 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %366), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

385:                                              ; preds = %10
  %386 = tail call float @llvm.nvvm.rsqrt.approx.f(float %366), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %383, %385
  %.0.i = phi float [ %384, %383 ], [ %386, %385 ], !dbg !46
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i4 = icmp eq i32 %387, 0, !dbg !46
  br i1 %.not.i4, label %390, label %388, !dbg !46

388:                                              ; preds = %__nv_rsqrtf.exit
  %389 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

390:                                              ; preds = %__nv_rsqrtf.exit
  %391 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !46
  br label %__nv_rsqrtf.exit6, !dbg !46

__nv_rsqrtf.exit6:                                ; preds = %388, %390
  %.0.i5 = phi float [ %389, %388 ], [ %391, %390 ], !dbg !46
  %392 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i7 = icmp eq i32 %392, 0, !dbg !46
  br i1 %.not.i7, label %395, label %393, !dbg !46

393:                                              ; preds = %__nv_rsqrtf.exit6
  %394 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %368), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

395:                                              ; preds = %__nv_rsqrtf.exit6
  %396 = tail call float @llvm.nvvm.rsqrt.approx.f(float %368), !dbg !46
  br label %__nv_rsqrtf.exit9, !dbg !46

__nv_rsqrtf.exit9:                                ; preds = %393, %395
  %.0.i8 = phi float [ %394, %393 ], [ %396, %395 ], !dbg !46
  %397 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i10 = icmp eq i32 %397, 0, !dbg !46
  br i1 %.not.i10, label %400, label %398, !dbg !46

398:                                              ; preds = %__nv_rsqrtf.exit9
  %399 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %369), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

400:                                              ; preds = %__nv_rsqrtf.exit9
  %401 = tail call float @llvm.nvvm.rsqrt.approx.f(float %369), !dbg !46
  br label %__nv_rsqrtf.exit12, !dbg !46

__nv_rsqrtf.exit12:                               ; preds = %398, %400
  %.0.i11 = phi float [ %399, %398 ], [ %401, %400 ], !dbg !46
  %402 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i13 = icmp eq i32 %402, 0, !dbg !46
  br i1 %.not.i13, label %405, label %403, !dbg !46

403:                                              ; preds = %__nv_rsqrtf.exit12
  %404 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %370), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

405:                                              ; preds = %__nv_rsqrtf.exit12
  %406 = tail call float @llvm.nvvm.rsqrt.approx.f(float %370), !dbg !46
  br label %__nv_rsqrtf.exit15, !dbg !46

__nv_rsqrtf.exit15:                               ; preds = %403, %405
  %.0.i14 = phi float [ %404, %403 ], [ %406, %405 ], !dbg !46
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i16 = icmp eq i32 %407, 0, !dbg !46
  br i1 %.not.i16, label %410, label %408, !dbg !46

408:                                              ; preds = %__nv_rsqrtf.exit15
  %409 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %371), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

410:                                              ; preds = %__nv_rsqrtf.exit15
  %411 = tail call float @llvm.nvvm.rsqrt.approx.f(float %371), !dbg !46
  br label %__nv_rsqrtf.exit18, !dbg !46

__nv_rsqrtf.exit18:                               ; preds = %408, %410
  %.0.i17 = phi float [ %409, %408 ], [ %411, %410 ], !dbg !46
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i19 = icmp eq i32 %412, 0, !dbg !46
  br i1 %.not.i19, label %415, label %413, !dbg !46

413:                                              ; preds = %__nv_rsqrtf.exit18
  %414 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %372), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

415:                                              ; preds = %__nv_rsqrtf.exit18
  %416 = tail call float @llvm.nvvm.rsqrt.approx.f(float %372), !dbg !46
  br label %__nv_rsqrtf.exit21, !dbg !46

__nv_rsqrtf.exit21:                               ; preds = %413, %415
  %.0.i20 = phi float [ %414, %413 ], [ %416, %415 ], !dbg !46
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i22 = icmp eq i32 %417, 0, !dbg !46
  br i1 %.not.i22, label %420, label %418, !dbg !46

418:                                              ; preds = %__nv_rsqrtf.exit21
  %419 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %373), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

420:                                              ; preds = %__nv_rsqrtf.exit21
  %421 = tail call float @llvm.nvvm.rsqrt.approx.f(float %373), !dbg !46
  br label %__nv_rsqrtf.exit24, !dbg !46

__nv_rsqrtf.exit24:                               ; preds = %418, %420
  %.0.i23 = phi float [ %419, %418 ], [ %421, %420 ], !dbg !46
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i25 = icmp eq i32 %422, 0, !dbg !46
  br i1 %.not.i25, label %425, label %423, !dbg !46

423:                                              ; preds = %__nv_rsqrtf.exit24
  %424 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %374), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

425:                                              ; preds = %__nv_rsqrtf.exit24
  %426 = tail call float @llvm.nvvm.rsqrt.approx.f(float %374), !dbg !46
  br label %__nv_rsqrtf.exit27, !dbg !46

__nv_rsqrtf.exit27:                               ; preds = %423, %425
  %.0.i26 = phi float [ %424, %423 ], [ %426, %425 ], !dbg !46
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i28 = icmp eq i32 %427, 0, !dbg !46
  br i1 %.not.i28, label %430, label %428, !dbg !46

428:                                              ; preds = %__nv_rsqrtf.exit27
  %429 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %375), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

430:                                              ; preds = %__nv_rsqrtf.exit27
  %431 = tail call float @llvm.nvvm.rsqrt.approx.f(float %375), !dbg !46
  br label %__nv_rsqrtf.exit30, !dbg !46

__nv_rsqrtf.exit30:                               ; preds = %428, %430
  %.0.i29 = phi float [ %429, %428 ], [ %431, %430 ], !dbg !46
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i31 = icmp eq i32 %432, 0, !dbg !46
  br i1 %.not.i31, label %435, label %433, !dbg !46

433:                                              ; preds = %__nv_rsqrtf.exit30
  %434 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %376), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

435:                                              ; preds = %__nv_rsqrtf.exit30
  %436 = tail call float @llvm.nvvm.rsqrt.approx.f(float %376), !dbg !46
  br label %__nv_rsqrtf.exit33, !dbg !46

__nv_rsqrtf.exit33:                               ; preds = %433, %435
  %.0.i32 = phi float [ %434, %433 ], [ %436, %435 ], !dbg !46
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i34 = icmp eq i32 %437, 0, !dbg !46
  br i1 %.not.i34, label %440, label %438, !dbg !46

438:                                              ; preds = %__nv_rsqrtf.exit33
  %439 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %377), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

440:                                              ; preds = %__nv_rsqrtf.exit33
  %441 = tail call float @llvm.nvvm.rsqrt.approx.f(float %377), !dbg !46
  br label %__nv_rsqrtf.exit36, !dbg !46

__nv_rsqrtf.exit36:                               ; preds = %438, %440
  %.0.i35 = phi float [ %439, %438 ], [ %441, %440 ], !dbg !46
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i37 = icmp eq i32 %442, 0, !dbg !46
  br i1 %.not.i37, label %445, label %443, !dbg !46

443:                                              ; preds = %__nv_rsqrtf.exit36
  %444 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %378), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

445:                                              ; preds = %__nv_rsqrtf.exit36
  %446 = tail call float @llvm.nvvm.rsqrt.approx.f(float %378), !dbg !46
  br label %__nv_rsqrtf.exit39, !dbg !46

__nv_rsqrtf.exit39:                               ; preds = %443, %445
  %.0.i38 = phi float [ %444, %443 ], [ %446, %445 ], !dbg !46
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i40 = icmp eq i32 %447, 0, !dbg !46
  br i1 %.not.i40, label %450, label %448, !dbg !46

448:                                              ; preds = %__nv_rsqrtf.exit39
  %449 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %379), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

450:                                              ; preds = %__nv_rsqrtf.exit39
  %451 = tail call float @llvm.nvvm.rsqrt.approx.f(float %379), !dbg !46
  br label %__nv_rsqrtf.exit42, !dbg !46

__nv_rsqrtf.exit42:                               ; preds = %448, %450
  %.0.i41 = phi float [ %449, %448 ], [ %451, %450 ], !dbg !46
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i43 = icmp eq i32 %452, 0, !dbg !46
  br i1 %.not.i43, label %455, label %453, !dbg !46

453:                                              ; preds = %__nv_rsqrtf.exit42
  %454 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %380), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

455:                                              ; preds = %__nv_rsqrtf.exit42
  %456 = tail call float @llvm.nvvm.rsqrt.approx.f(float %380), !dbg !46
  br label %__nv_rsqrtf.exit45, !dbg !46

__nv_rsqrtf.exit45:                               ; preds = %453, %455
  %.0.i44 = phi float [ %454, %453 ], [ %456, %455 ], !dbg !46
  %457 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i46 = icmp eq i32 %457, 0, !dbg !46
  br i1 %.not.i46, label %460, label %458, !dbg !46

458:                                              ; preds = %__nv_rsqrtf.exit45
  %459 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %381), !dbg !46
  br label %__nv_rsqrtf.exit48, !dbg !46

460:                                              ; preds = %__nv_rsqrtf.exit45
  %461 = tail call float @llvm.nvvm.rsqrt.approx.f(float %381), !dbg !46
  br label %__nv_rsqrtf.exit48, !dbg !46

__nv_rsqrtf.exit48:                               ; preds = %458, %460
  %.0.i47 = phi float [ %459, %458 ], [ %461, %460 ], !dbg !46
  %462 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !30
  %463 = bitcast i32 %462 to float, !dbg !30
  %464 = fadd float %349, %463, !dbg !47
  %465 = fadd float %241, %464, !dbg !43
  %466 = bitcast i32 %296 to float, !dbg !36
  %467 = fsub float %465, %466, !dbg !48
  %468 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !30
  %469 = bitcast i32 %468 to float, !dbg !30
  %470 = fadd float %346, %469, !dbg !47
  %471 = fadd float %236, %470, !dbg !43
  %472 = bitcast i32 %295 to float, !dbg !36
  %473 = fsub float %471, %472, !dbg !48
  %474 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !30
  %475 = bitcast i32 %474 to float, !dbg !30
  %476 = fadd float %343, %475, !dbg !47
  %477 = fadd float %231, %476, !dbg !43
  %478 = bitcast i32 %294 to float, !dbg !36
  %479 = fsub float %477, %478, !dbg !48
  %480 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !30
  %481 = bitcast i32 %480 to float, !dbg !30
  %482 = fadd float %340, %481, !dbg !47
  %483 = fadd float %226, %482, !dbg !43
  %484 = bitcast i32 %293 to float, !dbg !36
  %485 = fsub float %483, %484, !dbg !48
  %486 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !30
  %487 = bitcast i32 %486 to float, !dbg !30
  %488 = fadd float %349, %487, !dbg !47
  %489 = fadd float %221, %488, !dbg !43
  %490 = bitcast i32 %292 to float, !dbg !36
  %491 = fsub float %489, %490, !dbg !48
  %492 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !30
  %493 = bitcast i32 %492 to float, !dbg !30
  %494 = fadd float %346, %493, !dbg !47
  %495 = fadd float %216, %494, !dbg !43
  %496 = bitcast i32 %291 to float, !dbg !36
  %497 = fsub float %495, %496, !dbg !48
  %498 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !30
  %499 = bitcast i32 %498 to float, !dbg !30
  %500 = fadd float %343, %499, !dbg !47
  %501 = fadd float %211, %500, !dbg !43
  %502 = bitcast i32 %290 to float, !dbg !36
  %503 = fsub float %501, %502, !dbg !48
  %504 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !30
  %505 = bitcast i32 %504 to float, !dbg !30
  %506 = fadd float %340, %505, !dbg !47
  %507 = fadd float %206, %506, !dbg !43
  %508 = bitcast i32 %289 to float, !dbg !36
  %509 = fsub float %507, %508, !dbg !48
  %510 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !30
  %511 = bitcast i32 %510 to float, !dbg !30
  %512 = fadd float %349, %511, !dbg !47
  %513 = fadd float %201, %512, !dbg !43
  %514 = bitcast i32 %288 to float, !dbg !36
  %515 = fsub float %513, %514, !dbg !48
  %516 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !30
  %517 = bitcast i32 %516 to float, !dbg !30
  %518 = fadd float %346, %517, !dbg !47
  %519 = fadd float %196, %518, !dbg !43
  %520 = bitcast i32 %287 to float, !dbg !36
  %521 = fsub float %519, %520, !dbg !48
  %522 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !30
  %523 = bitcast i32 %522 to float, !dbg !30
  %524 = fadd float %343, %523, !dbg !47
  %525 = fadd float %191, %524, !dbg !43
  %526 = bitcast i32 %286 to float, !dbg !36
  %527 = fsub float %525, %526, !dbg !48
  %528 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !30
  %529 = bitcast i32 %528 to float, !dbg !30
  %530 = fadd float %340, %529, !dbg !47
  %531 = fadd float %186, %530, !dbg !43
  %532 = bitcast i32 %285 to float, !dbg !36
  %533 = fsub float %531, %532, !dbg !48
  %534 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !30
  %535 = bitcast i32 %534 to float, !dbg !30
  %536 = fadd float %349, %535, !dbg !47
  %537 = fadd float %181, %536, !dbg !43
  %538 = bitcast i32 %284 to float, !dbg !36
  %539 = fsub float %537, %538, !dbg !48
  %540 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !30
  %541 = bitcast i32 %540 to float, !dbg !30
  %542 = fadd float %346, %541, !dbg !47
  %543 = fadd float %178, %542, !dbg !43
  %544 = bitcast i32 %283 to float, !dbg !36
  %545 = fsub float %543, %544, !dbg !48
  %546 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !30
  %547 = bitcast i32 %546 to float, !dbg !30
  %548 = fadd float %343, %547, !dbg !47
  %549 = fadd float %175, %548, !dbg !43
  %550 = bitcast i32 %282 to float, !dbg !36
  %551 = fsub float %549, %550, !dbg !48
  %552 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !30
  %553 = bitcast i32 %552 to float, !dbg !30
  %554 = fadd float %340, %553, !dbg !47
  %555 = fadd float %171, %554, !dbg !43
  %556 = bitcast i32 %281 to float, !dbg !36
  %557 = fsub float %555, %556, !dbg !48
  %558 = bitcast i32 %336 to float, !dbg !42
  %559 = bitcast i32 %334 to float, !dbg !40
  %560 = fmul float %557, %.0.i, !dbg !49
  %561 = fmul float %551, %.0.i5, !dbg !49
  %562 = fmul float %545, %.0.i8, !dbg !49
  %563 = fmul float %539, %.0.i11, !dbg !49
  %564 = fmul float %533, %.0.i14, !dbg !49
  %565 = fmul float %527, %.0.i17, !dbg !49
  %566 = fmul float %521, %.0.i20, !dbg !49
  %567 = fmul float %515, %.0.i23, !dbg !49
  %568 = fmul float %509, %.0.i26, !dbg !49
  %569 = fmul float %503, %.0.i29, !dbg !49
  %570 = fmul float %497, %.0.i32, !dbg !49
  %571 = fmul float %491, %.0.i35, !dbg !49
  %572 = fmul float %485, %.0.i38, !dbg !49
  %573 = fmul float %479, %.0.i41, !dbg !49
  %574 = fmul float %473, %.0.i44, !dbg !49
  %575 = fmul float %467, %.0.i47, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %576 = bitcast float %560 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %576, i1 true) #4, !dbg !49
  %577 = bitcast float %561 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %577, i1 true) #4, !dbg !49
  %578 = bitcast float %562 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %578, i1 true) #4, !dbg !49
  %579 = bitcast float %563 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %579, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %580 = load float, ptr addrspace(3) %337, align 4, !dbg !49
  %581 = getelementptr inbounds i8, ptr addrspace(3) %337, i32 1028, !dbg !49
  %582 = load float, ptr addrspace(3) %581, align 4, !dbg !49
  %583 = getelementptr inbounds i8, ptr addrspace(3) %337, i32 2056, !dbg !49
  %584 = load float, ptr addrspace(3) %583, align 4, !dbg !49
  %585 = getelementptr inbounds i8, ptr addrspace(3) %337, i32 3084, !dbg !49
  %586 = load float, ptr addrspace(3) %585, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %587 = bitcast float %564 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %587, i1 true) #4, !dbg !49
  %588 = bitcast float %565 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %588, i1 true) #4, !dbg !49
  %589 = bitcast float %566 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %589, i1 true) #4, !dbg !49
  %590 = bitcast float %567 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %590, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %591 = load float, ptr addrspace(3) %337, align 4, !dbg !49
  %592 = load float, ptr addrspace(3) %581, align 4, !dbg !49
  %593 = load float, ptr addrspace(3) %583, align 4, !dbg !49
  %594 = load float, ptr addrspace(3) %585, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %595 = bitcast float %568 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %595, i1 true) #4, !dbg !49
  %596 = bitcast float %569 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %596, i1 true) #4, !dbg !49
  %597 = bitcast float %570 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %597, i1 true) #4, !dbg !49
  %598 = bitcast float %571 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %598, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %599 = load float, ptr addrspace(3) %337, align 4, !dbg !49
  %600 = load float, ptr addrspace(3) %581, align 4, !dbg !49
  %601 = load float, ptr addrspace(3) %583, align 4, !dbg !49
  %602 = load float, ptr addrspace(3) %585, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %603 = bitcast float %572 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %603, i1 true) #4, !dbg !49
  %604 = bitcast float %573 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %604, i1 true) #4, !dbg !49
  %605 = bitcast float %574 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %605, i1 true) #4, !dbg !49
  %606 = bitcast float %575 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %606, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %607 = load float, ptr addrspace(3) %337, align 4, !dbg !49
  %608 = load float, ptr addrspace(3) %581, align 4, !dbg !49
  %609 = load float, ptr addrspace(3) %583, align 4, !dbg !49
  %610 = load float, ptr addrspace(3) %585, align 4, !dbg !49
  %611 = fmul float %580, %559, !dbg !50
  %612 = fmul float %582, %559, !dbg !50
  %613 = fmul float %584, %559, !dbg !50
  %614 = fmul float %586, %559, !dbg !50
  %615 = fmul float %591, %559, !dbg !50
  %616 = fmul float %592, %559, !dbg !50
  %617 = fmul float %593, %559, !dbg !50
  %618 = fmul float %594, %559, !dbg !50
  %619 = fmul float %599, %559, !dbg !50
  %620 = fmul float %600, %559, !dbg !50
  %621 = fmul float %601, %559, !dbg !50
  %622 = fmul float %602, %559, !dbg !50
  %623 = fmul float %607, %559, !dbg !50
  %624 = fmul float %608, %559, !dbg !50
  %625 = fmul float %609, %559, !dbg !50
  %626 = fmul float %610, %559, !dbg !50
  %627 = fadd float %611, %558, !dbg !51
  %628 = fadd float %612, %558, !dbg !51
  %629 = fadd float %613, %558, !dbg !51
  %630 = fadd float %614, %558, !dbg !51
  %631 = fadd float %615, %558, !dbg !51
  %632 = fadd float %616, %558, !dbg !51
  %633 = fadd float %617, %558, !dbg !51
  %634 = fadd float %618, %558, !dbg !51
  %635 = fadd float %619, %558, !dbg !51
  %636 = fadd float %620, %558, !dbg !51
  %637 = fadd float %621, %558, !dbg !51
  %638 = fadd float %622, %558, !dbg !51
  %639 = fadd float %623, %558, !dbg !51
  %640 = fadd float %624, %558, !dbg !51
  %641 = fadd float %625, %558, !dbg !51
  %642 = fadd float %626, %558, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %643 = bitcast float %560 to i32, !dbg !53
  %644 = bitcast float %561 to i32, !dbg !53
  %645 = bitcast float %562 to i32, !dbg !53
  %646 = bitcast float %563 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %643, i32 %644, i32 %645, i32 %646, ptr addrspace(1) %251, i1 %67) #4, !dbg !53
  %647 = bitcast float %564 to i32, !dbg !53
  %648 = bitcast float %565 to i32, !dbg !53
  %649 = bitcast float %566 to i32, !dbg !53
  %650 = bitcast float %567 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %647, i32 %648, i32 %649, i32 %650, ptr addrspace(1) %253, i1 %68) #4, !dbg !53
  %651 = bitcast float %568 to i32, !dbg !53
  %652 = bitcast float %569 to i32, !dbg !53
  %653 = bitcast float %570 to i32, !dbg !53
  %654 = bitcast float %571 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %651, i32 %652, i32 %653, i32 %654, ptr addrspace(1) %255, i1 %69) #4, !dbg !53
  %655 = bitcast float %572 to i32, !dbg !53
  %656 = bitcast float %573 to i32, !dbg !53
  %657 = bitcast float %574 to i32, !dbg !53
  %658 = bitcast float %575 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %655, i32 %656, i32 %657, i32 %658, ptr addrspace(1) %257, i1 %70) #4, !dbg !53
  %659 = getelementptr float, ptr addrspace(1) %7, i64 %250, !dbg !54
  %660 = getelementptr float, ptr addrspace(1) %7, i64 %252, !dbg !54
  %661 = getelementptr float, ptr addrspace(1) %7, i64 %254, !dbg !54
  %662 = getelementptr float, ptr addrspace(1) %7, i64 %256, !dbg !54
  %663 = bitcast float %627 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %663, i1 true) #4, !dbg !55
  %664 = bitcast float %628 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %664, i1 true) #4, !dbg !55
  %665 = bitcast float %629 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %665, i1 true) #4, !dbg !55
  %666 = bitcast float %630 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %666, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %667 = load i32, ptr addrspace(3) %170, align 4, !dbg !55
  %668 = load i32, ptr addrspace(3) %174, align 4, !dbg !55
  %669 = load i32, ptr addrspace(3) %177, align 4, !dbg !55
  %670 = load i32, ptr addrspace(3) %180, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %671 = bitcast float %631 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %671, i1 true) #4, !dbg !55
  %672 = bitcast float %632 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %672, i1 true) #4, !dbg !55
  %673 = bitcast float %633 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %673, i1 true) #4, !dbg !55
  %674 = bitcast float %634 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %674, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %675 = load i32, ptr addrspace(3) %170, align 4, !dbg !55
  %676 = load i32, ptr addrspace(3) %174, align 4, !dbg !55
  %677 = load i32, ptr addrspace(3) %177, align 4, !dbg !55
  %678 = load i32, ptr addrspace(3) %180, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %679 = bitcast float %635 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %679, i1 true) #4, !dbg !55
  %680 = bitcast float %636 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %680, i1 true) #4, !dbg !55
  %681 = bitcast float %637 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %681, i1 true) #4, !dbg !55
  %682 = bitcast float %638 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %682, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %683 = load i32, ptr addrspace(3) %170, align 4, !dbg !55
  %684 = load i32, ptr addrspace(3) %174, align 4, !dbg !55
  %685 = load i32, ptr addrspace(3) %177, align 4, !dbg !55
  %686 = load i32, ptr addrspace(3) %180, align 4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %687 = bitcast float %639 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %687, i1 true) #4, !dbg !55
  %688 = bitcast float %640 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %688, i1 true) #4, !dbg !55
  %689 = bitcast float %641 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %689, i1 true) #4, !dbg !55
  %690 = bitcast float %642 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %585, <1 x i32> %690, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %691 = load i32, ptr addrspace(3) %170, align 4, !dbg !55
  %692 = load i32, ptr addrspace(3) %174, align 4, !dbg !55
  %693 = load i32, ptr addrspace(3) %177, align 4, !dbg !55
  %694 = load i32, ptr addrspace(3) %180, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %667, i32 %668, i32 %669, i32 %670, ptr addrspace(1) %659, i1 %67) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %675, i32 %676, i32 %677, i32 %678, ptr addrspace(1) %660, i1 %68) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %683, i32 %684, i32 %685, i32 %686, ptr addrspace(1) %661, i1 %69) #4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %691, i32 %692, i32 %693, i32 %694, ptr addrspace(1) %662, i1 %70) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuezwpyzmrfzsvk3mdk2ecowuynelffkh4aenby4vtokvwqdcunh.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_8", linkageName: "triton_poi_fused_add_native_layer_norm_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 34, scope: !7)
!30 = !DILocation(line: 33, column: 48, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 37, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 38, column: 31, scope: !7)
!42 = !DILocation(line: 38, column: 36, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 28, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 47, column: 19, scope: !7)
!50 = !DILocation(line: 48, column: 20, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 50, column: 4, scope: !7)
!53 = !DILocation(line: 51, column: 49, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 46, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
