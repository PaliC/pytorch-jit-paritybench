; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/pu/cpudv6ijpmx4ozjltexc4h5wmrewlhvmmmvzfo2mop5gy64wq47y.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 6\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/pu/cpudv6ijpmx4ozjltexc4h5wmrewlhvmmmvzfo2mop5gy64wq47y.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 6\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_clone_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %6 = shl i32 %5, 7, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = and i32 %7, 127, !dbg !14
  %9 = or disjoint i32 %6, %8, !dbg !15
  %10 = icmp slt i32 %9, 2304, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %11 = sdiv i32 %.frozen, 4, !dbg !17
  %12 = srem i32 %11, 9, !dbg !18
  %13 = sdiv i32 %9, 36, !dbg !19
  %14 = srem i32 %13, 16, !dbg !20
  %.lhs.trunc = trunc nsw i32 %12 to i8, !dbg !21
  %.lhs.trunc.frozen = freeze i8 %.lhs.trunc, !dbg !21
  %15 = sdiv i8 %.lhs.trunc.frozen, 3, !dbg !21
  %.sext = sext i8 %15 to i32, !dbg !21
  %16 = shl nsw i32 %.sext, 2, !dbg !22
  %.lhs.trunc5 = trunc nsw i32 %14 to i8, !dbg !23
  %.lhs.trunc5.frozen = freeze i8 %.lhs.trunc5, !dbg !23
  %17 = sdiv i8 %.lhs.trunc5.frozen, 4, !dbg !23
  %.sext6 = sext i8 %17 to i32, !dbg !23
  %18 = add nsw i32 %16, %.sext6, !dbg !24
  %19 = sext i32 %18 to i64, !dbg !25
  %20 = getelementptr i64, ptr addrspace(1) %0, i64 %19, !dbg !25
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 %10) #3, !dbg !26
  %22 = mul i8 %15, 3, !dbg !27
  %.decomposed = sub i8 %.lhs.trunc.frozen, %22, !dbg !27
  %.sext8 = sext i8 %.decomposed to i32, !dbg !27
  %23 = shl nsw i32 %.sext8, 2, !dbg !28
  %24 = mul i8 %17, 4, !dbg !29
  %.decomposed11 = sub i8 %.lhs.trunc5.frozen, %24, !dbg !29
  %.sext10 = sext i8 %.decomposed11 to i32, !dbg !29
  %25 = add nsw i32 %23, %.sext10, !dbg !30
  %26 = sext i32 %25 to i64, !dbg !31
  %27 = getelementptr i64, ptr addrspace(1) %0, i64 %26, !dbg !31
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %27, i1 %10) #3, !dbg !32
  %29 = add i64 %21, 6, !dbg !33
  %30 = icmp slt i64 %21, 0, !dbg !34
  %31 = select i1 %30, i64 %29, i64 %21, !dbg !35
  %32 = icmp ugt i64 %31, 5, !dbg !36
  %.not1 = and i1 %10, %32, !dbg !37
  br i1 %.not1, label %33, label %34, !dbg !37

33:                                               ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 35, ptr nonnull @assertFunc_0, i64 1), !dbg !37
  unreachable, !dbg !37

34:                                               ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %35 = add i64 %28, 6, !dbg !38
  %36 = icmp slt i64 %28, 0, !dbg !39
  %37 = select i1 %36, i64 %35, i64 %28, !dbg !40
  %38 = icmp ugt i64 %37, 5, !dbg !41
  %.not2 = and i1 %10, %38, !dbg !42
  br i1 %.not2, label %39, label %40, !dbg !42

39:                                               ; preds = %34
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 39, ptr nonnull @assertFunc_1, i64 1), !dbg !42
  unreachable, !dbg !42

40:                                               ; preds = %34
  %41 = sdiv i32 %9, 576, !dbg !43
  %42 = mul i32 %11, 4, !dbg !44
  %.decomposed12 = sub i32 %.frozen, %42, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %43 = shl i64 %31, 32, !dbg !45
  %sext = add i64 %43, -4294967296, !dbg !45
  %44 = shl i64 %37, 32, !dbg !46
  %sext3 = add i64 %44, -4294967296, !dbg !46
  %45 = or i64 %sext3, %sext, !dbg !47
  %46 = icmp ult i64 %45, 17179869184, !dbg !47
  %47 = shl nsw i32 %41, 6, !dbg !48
  %48 = sext i32 %47 to i64, !dbg !49
  %.idx = shl i64 %37, 4, !dbg !50
  %49 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !50
  %50 = sext i32 %.decomposed12 to i64, !dbg !50
  %51 = getelementptr float, ptr addrspace(1) %49, i64 %50, !dbg !50
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 -80, !dbg !50
  %.idx4 = shl i64 %31, 6, !dbg !50
  %53 = getelementptr i8, ptr addrspace(1) %52, i64 %.idx4, !dbg !50
  %54 = getelementptr float, ptr addrspace(1) %53, i64 %48, !dbg !50
  %55 = and i1 %10, %46, !dbg !51
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55) #3, !dbg !52
  %57 = sext i32 %9 to i64, !dbg !53
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %56, ptr addrspace(1) %58, i1 %10) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpudv6ijpmx4ozjltexc4h5wmrewlhvmmmvzfo2mop5gy64wq47y.py", directory: "inductor_cache/pu")
!4 = !{ptr @triton_poi_fused_clone_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_clone_3", linkageName: "triton_poi_fused_clone_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 23, column: 21, scope: !11)
!17 = !DILocation(line: 24, column: 21, scope: !11)
!18 = !DILocation(line: 24, column: 26, scope: !11)
!19 = !DILocation(line: 25, column: 21, scope: !11)
!20 = !DILocation(line: 25, column: 27, scope: !11)
!21 = !DILocation(line: 29, column: 39, scope: !11)
!22 = !DILocation(line: 29, column: 33, scope: !11)
!23 = !DILocation(line: 29, column: 51, scope: !11)
!24 = !DILocation(line: 29, column: 45, scope: !11)
!25 = !DILocation(line: 29, column: 30, scope: !11)
!26 = !DILocation(line: 29, column: 56, scope: !11)
!27 = !DILocation(line: 30, column: 39, scope: !11)
!28 = !DILocation(line: 30, column: 34, scope: !11)
!29 = !DILocation(line: 30, column: 52, scope: !11)
!30 = !DILocation(line: 30, column: 47, scope: !11)
!31 = !DILocation(line: 30, column: 30, scope: !11)
!32 = !DILocation(line: 30, column: 58, scope: !11)
!33 = !DILocation(line: 32, column: 18, scope: !11)
!34 = !DILocation(line: 33, column: 18, scope: !11)
!35 = !DILocation(line: 34, column: 32, scope: !11)
!36 = !DILocation(line: 35, column: 37, scope: !11)
!37 = !DILocation(line: 35, column: 60, scope: !11)
!38 = !DILocation(line: 36, column: 18, scope: !11)
!39 = !DILocation(line: 37, column: 18, scope: !11)
!40 = !DILocation(line: 38, column: 32, scope: !11)
!41 = !DILocation(line: 39, column: 37, scope: !11)
!42 = !DILocation(line: 39, column: 60, scope: !11)
!43 = !DILocation(line: 27, column: 19, scope: !11)
!44 = !DILocation(line: 26, column: 19, scope: !11)
!45 = !DILocation(line: 43, column: 21, scope: !11)
!46 = !DILocation(line: 48, column: 21, scope: !11)
!47 = !DILocation(line: 52, column: 20, scope: !11)
!48 = !DILocation(line: 53, column: 66, scope: !11)
!49 = !DILocation(line: 53, column: 63, scope: !11)
!50 = !DILocation(line: 53, column: 31, scope: !11)
!51 = !DILocation(line: 53, column: 79, scope: !11)
!52 = !DILocation(line: 53, column: 71, scope: !11)
!53 = !DILocation(line: 54, column: 25, scope: !11)
!54 = !DILocation(line: 54, column: 37, scope: !11)
!55 = !DILocation(line: 54, column: 4, scope: !11)
