; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_div_exp_log_mul_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %15 = sdiv i32 %13, 64, !dbg !15
  %16 = srem i32 %13, 16, !dbg !16
  %17 = srem i32 %13, 4, !dbg !17
  %18 = sext i32 %13 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %14) #2, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #2, !dbg !21
  %24 = shl nsw i32 %15, 4, !dbg !22
  %25 = add nsw i32 %24, %16, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %14) #2, !dbg !25
  %29 = sext i32 %17 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %14) #2, !dbg !27
  %32 = fmul float %22, 0x3FF7154760000000, !dbg !28
  %33 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %32) #2, !dbg !28
  %34 = fadd float %33, 1.000000e+00, !dbg !29
  %35 = fcmp olt float %34, 0x3810000000000000, !dbg !30
  %36 = fmul float %34, 0x4160000000000000, !dbg !30
  %.02.i = select i1 %35, float %36, float %34, !dbg !30
  %i.i.0.i = select i1 %35, float -2.300000e+01, float 0.000000e+00, !dbg !30
  %37 = bitcast float %.02.i to i32, !dbg !30
  %38 = add i32 %37, -1059760811, !dbg !30
  %39 = and i32 %38, -8388608, !dbg !30
  %40 = sub i32 %37, %39, !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = sitofp i32 %39 to float, !dbg !30
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not.i = icmp eq i32 %43, 0, !dbg !30
  %44 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %42, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !30
  %45 = tail call float @llvm.nvvm.fma.rn.f(float %42, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !30
  %.08.i = select i1 %.not.i, float %45, float %44, !dbg !30
  %46 = fadd float %41, -1.000000e+00, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not1.i = icmp eq i32 %47, 0, !dbg !30
  %48 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %46, float 0x3FC2073EC0000000) #2, !dbg !30
  %49 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %46, float 0x3FC2073EC0000000) #2, !dbg !30
  %.010.i = select i1 %.not1.i, float %49, float %48, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not2.i = icmp eq i32 %50, 0, !dbg !30
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %46, float 0xBFBF19B980000000) #2, !dbg !30
  %52 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %46, float 0xBFBF19B980000000) #2, !dbg !30
  %.011.i = select i1 %.not2.i, float %52, float %51, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not3.i = icmp eq i32 %53, 0, !dbg !30
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %46, float 0x3FC1E52AA0000000) #2, !dbg !30
  %55 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %46, float 0x3FC1E52AA0000000) #2, !dbg !30
  %.012.i = select i1 %.not3.i, float %55, float %54, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not4.i = icmp eq i32 %56, 0, !dbg !30
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %46, float 0xBFC55B1720000000) #2, !dbg !30
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %46, float 0xBFC55B1720000000) #2, !dbg !30
  %.09.i = select i1 %.not4.i, float %58, float %57, !dbg !30
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not5.i = icmp eq i32 %59, 0, !dbg !30
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %46, float 0x3FC99DA160000000) #2, !dbg !30
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %46, float 0x3FC99DA160000000) #2, !dbg !30
  %.05.i = select i1 %.not5.i, float %61, float %60, !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not6.i = icmp eq i32 %62, 0, !dbg !30
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %46, float 0xBFCFFFE440000000) #2, !dbg !30
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %46, float 0xBFCFFFE440000000) #2, !dbg !30
  %.01.i = select i1 %.not6.i, float %64, float %63, !dbg !30
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not7.i = icmp eq i32 %65, 0, !dbg !30
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %46, float 0x3FD5554F00000000) #2, !dbg !30
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %46, float 0x3FD5554F00000000) #2, !dbg !30
  %.0.i = select i1 %.not7.i, float %67, float %66, !dbg !30
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not8.i = icmp eq i32 %68, 0, !dbg !30
  %69 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %46, float -5.000000e-01) #2, !dbg !30
  %70 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %46, float -5.000000e-01) #2, !dbg !30
  %.07.i = select i1 %.not8.i, float %70, float %69, !dbg !30
  %71 = fmul float %46, %.07.i, !dbg !30
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not9.i = icmp eq i32 %72, 0, !dbg !30
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %71, float %46, float %46) #2, !dbg !30
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %71, float %46, float %46) #2, !dbg !30
  %.06.i = select i1 %.not9.i, float %74, float %73, !dbg !30
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not10.i = icmp eq i32 %75, 0, !dbg !30
  %76 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !30
  %77 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !30
  %.04.i = select i1 %.not10.i, float %77, float %76, !dbg !30
  %78 = icmp ugt i32 %37, 2139095039, !dbg !30
  br i1 %78, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !30

__nv_fmaf_rn.exit.i.i:                            ; preds = %7
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !30
  %.not11.i = icmp eq i32 %79, 0, !dbg !30
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !30
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !30
  %.03.i = select i1 %.not11.i, float %81, float %80, !dbg !30
  br label %__nv_logf.exit, !dbg !30

__nv_logf.exit:                                   ; preds = %7, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %7 ], !dbg !30
  %82 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %83 = bitcast i32 %82 to float, !dbg !27
  %84 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %85 = bitcast i32 %84 to float, !dbg !27
  %86 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %87 = bitcast i32 %86 to float, !dbg !25
  %88 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = bitcast i32 %23 to float, !dbg !21
  %91 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %92 = bitcast i32 %91 to float, !dbg !19
  %93 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %94 = bitcast i32 %93 to float, !dbg !19
  %95 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !30
  %r.i.1.i = select i1 %95, float 0xFFF0000000000000, float %r.i.0.i, !dbg !30
  %96 = tail call float @llvm.fabs.f32(float %90), !dbg !31
  %97 = fsub float %r.i.1.i, %96, !dbg !32
  %98 = fadd float %96, %89, !dbg !33
  %99 = fadd float %96, %87, !dbg !33
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %98) #2, !dbg !34
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %99) #2, !dbg !34
  %102 = fsub float %94, %85, !dbg !35
  %103 = fsub float %92, %83, !dbg !35
  %104 = fmul float %102, %100, !dbg !36
  %105 = fmul float %103, %101, !dbg !36
  %106 = fadd float %104, %94, !dbg !37
  %107 = fadd float %105, %92, !dbg !37
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !38
  %109 = bitcast float %106 to i32, !dbg !39
  %110 = bitcast float %107 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %14) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck54mogighltmkrknqfrmp2oy7mcxx7wd3psruo6rhae64lupuzq.py", directory: "inductor_cache/k5")
!4 = !{ptr @triton_poi_fused_abs_add_div_exp_log_mul_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_div_exp_log_mul_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_div_exp_log_mul_sub_1", linkageName: "triton_poi_fused_abs_add_div_exp_log_mul_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 23, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 23, scope: !7)
!31 = !DILocation(line: 39, column: 23, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 25, scope: !7)
!39 = !DILocation(line: 46, column: 37, scope: !7)
!40 = !DILocation(line: 46, column: 4, scope: !7)
