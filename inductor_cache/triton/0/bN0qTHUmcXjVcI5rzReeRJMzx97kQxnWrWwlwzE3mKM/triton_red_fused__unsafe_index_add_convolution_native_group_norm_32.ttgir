#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [16, 1], order = [1, 0]}>
#loc = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0)
#loc1 = loc(unknown)
#loc70 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":67:44)
#loc103 = loc(callsite(#loc1 at #loc70))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__unsafe_index_add_convolution_native_group_norm_32(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<64x64xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<64x64xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<64x64xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1024> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<1024> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<8192> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<8192> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<1024> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<32> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<8> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<8192> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<4096> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<16> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_18 = arith.constant dense<1.000000e+00> : tensor<64x64xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_7 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc7)
    %16 = arith.remsi %8, %cst_8 : tensor<64x1xi32, #blocked> loc(#loc8)
    %17 = arith.divsi %8, %cst_8 : tensor<64x1xi32, #blocked> loc(#loc9)
    %18 = arith.remsi %17, %cst_9 : tensor<64x1xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc11)
    %21 = tt.load %20, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %22 = arith.muli %16, %cst_14 : tensor<64x1xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %22 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc14)
    %24 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<64x64x!tt.ptr<i64>, #blocked> loc(#loc15)
    %25 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc16)
    %26 = tt.broadcast %11 : tensor<64x1xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc16)
    %27 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc17)
    %28 = arith.muli %9, %cst_15 : tensor<64x1xi32, #blocked1> loc(#loc18)
    %29 = tt.broadcast %28 : tensor<64x1xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc19)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc20)
    %31 = arith.muli %17, %cst_16 : tensor<64x1xi32, #blocked> loc(#loc21)
    %32 = arith.extsi %31 : tensor<64x1xi32, #blocked> to tensor<64x1xi64, #blocked> loc(#loc22)
    %33 = tt.broadcast %32 : tensor<64x1xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc22)
    %34 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc23)
    %35 = tt.broadcast %21 : tensor<64x1xf32, #blocked> -> tensor<64x64xf32, #blocked> loc(#loc24)
    %36 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc25)
    %37:3 = scf.for %arg10 = %c0_i32 to %c8192_i32 step %c64_i32 iter_args(%arg11 = %cst, %arg12 = %cst, %arg13 = %cst) -> (tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>)  : i32 {
      %48 = tt.splat %arg10 : i32 -> tensor<1x64xi32, #blocked> loc(#loc27)
      %49 = tt.splat %arg10 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc27)
      %50 = arith.addi %48, %14 : tensor<1x64xi32, #blocked> loc(#loc27)
      %51 = arith.addi %49, %15 : tensor<1x64xi32, #blocked1> loc(#loc27)
      %52 = arith.cmpi slt, %50, %cst_10 : tensor<1x64xi32, #blocked> loc(#loc28)
      %53 = arith.cmpi slt, %51, %cst_11 : tensor<1x64xi32, #blocked1> loc(#loc28)
      %54 = arith.divsi %50, %cst_12 : tensor<1x64xi32, #blocked> loc(#loc29)
      %55 = arith.divsi %50, %cst_13 : tensor<1x64xi32, #blocked> loc(#loc30)
      %56 = arith.remsi %55, %cst_13 : tensor<1x64xi32, #blocked> loc(#loc31)
      %57 = arith.remsi %50, %cst_13 : tensor<1x64xi32, #blocked> loc(#loc32)
      %58 = tt.broadcast %54 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc14)
      %59 = arith.addi %58, %23 : tensor<64x64xi32, #blocked> loc(#loc14)
      %60 = tt.addptr %24, %59 : tensor<64x64x!tt.ptr<i64>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc15)
      %61 = tt.broadcast %52 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc16)
      %62 = tt.broadcast %53 : tensor<1x64xi1, #blocked1> -> tensor<64x64xi1, #blocked1> loc(#loc16)
      %63 = arith.andi %61, %25 : tensor<64x64xi1, #blocked> loc(#loc16)
      %64 = arith.andi %62, %26 : tensor<64x64xi1, #blocked1> loc(#loc16)
      %65 = tt.load %60, %63, %cst_2 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<i64>, #blocked> loc(#loc33)
      %66 = tt.addptr %27, %56 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc17)
      %67 = tt.load %66, %52, %cst_5 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc34)
      %68 = tt.addptr %27, %57 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc35)
      %69 = tt.load %68, %52, %cst_5 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc36)
      %70 = tt.broadcast %51 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc19)
      %71 = arith.addi %70, %29 : tensor<64x64xi32, #blocked1> loc(#loc19)
      %72 = tt.addptr %30, %71 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc20)
      %73 = tt.load %72, %64, %cst_4 evictionPolicy = evict_first : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc37)
      %74 = triton_gpu.convert_layout %73 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked> loc(#loc37)
      %75 = arith.addi %65, %cst_0 : tensor<64x64xi64, #blocked> loc(#loc38)
      %76 = arith.cmpi slt, %65, %cst_2 : tensor<64x64xi64, #blocked> loc(#loc39)
      %77 = arith.select %76, %75, %65 : tensor<64x64xi1, #blocked>, tensor<64x64xi64, #blocked> loc(#loc40)
      %78 = arith.addi %67, %cst_17 : tensor<1x64xi64, #blocked> loc(#loc41)
      %79 = arith.cmpi slt, %67, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc42)
      %80 = arith.select %79, %78, %67 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc43)
      %81 = arith.addi %69, %cst_17 : tensor<1x64xi64, #blocked> loc(#loc44)
      %82 = arith.cmpi slt, %69, %cst_5 : tensor<1x64xi64, #blocked> loc(#loc45)
      %83 = arith.select %82, %81, %69 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc46)
      %84 = arith.muli %80, %cst_17 : tensor<1x64xi64, #blocked> loc(#loc47)
      %85 = arith.addi %83, %84 : tensor<1x64xi64, #blocked> loc(#loc48)
      %86 = tt.broadcast %85 : tensor<1x64xi64, #blocked> -> tensor<64x64xi64, #blocked> loc(#loc48)
      %87 = arith.muli %77, %cst_1 : tensor<64x64xi64, #blocked> loc(#loc49)
      %88 = arith.addi %86, %87 : tensor<64x64xi64, #blocked> loc(#loc50)
      %89 = arith.addi %88, %33 : tensor<64x64xi64, #blocked> loc(#loc22)
      %90 = tt.addptr %34, %89 : tensor<64x64x!tt.ptr<f32>, #blocked>, tensor<64x64xi64, #blocked> loc(#loc23)
      %91 = tt.load %90, %63 evictionPolicy = evict_last : tensor<64x64x!tt.ptr<f32>, #blocked> loc(#loc51)
      %92 = arith.addf %91, %35 : tensor<64x64xf32, #blocked> loc(#loc24)
      %93 = arith.addf %92, %74 : tensor<64x64xf32, #blocked> loc(#loc52)
      %94 = arith.cmpi eq, %arg10, %c0_i32 : i32 loc(#loc53)
      %95:3 = scf.if %94 -> (tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>) {
        scf.yield %cst, %93, %cst_18 : tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked> loc(#loc94)
      } else {
        %101 = arith.subf %93, %arg11 : tensor<64x64xf32, #blocked> loc(#loc95)
        %102 = arith.addf %arg13, %cst_18 : tensor<64x64xf32, #blocked> loc(#loc96)
        %103 = arith.divf %101, %102 : tensor<64x64xf32, #blocked> loc(#loc97)
        %104 = arith.addf %arg11, %103 : tensor<64x64xf32, #blocked> loc(#loc98)
        %105 = arith.subf %93, %104 : tensor<64x64xf32, #blocked> loc(#loc99)
        %106 = arith.mulf %101, %105 : tensor<64x64xf32, #blocked> loc(#loc100)
        %107 = arith.addf %arg12, %106 : tensor<64x64xf32, #blocked> loc(#loc101)
        scf.yield %107, %104, %102 : tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked> loc(#loc101)
      } loc(#loc93)
      %96 = arith.select %63, %95#1, %arg11 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc64)
      %97 = arith.select %63, %95#0, %arg12 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc65)
      %98 = arith.select %63, %95#2, %arg13 : tensor<64x64xi1, #blocked>, tensor<64x64xf32, #blocked> loc(#loc66)
      %99 = tt.addptr %36, %71 : tensor<64x64x!tt.ptr<f32>, #blocked1>, tensor<64x64xi32, #blocked1> loc(#loc25)
      %100 = triton_gpu.convert_layout %93 : tensor<64x64xf32, #blocked> -> tensor<64x64xf32, #blocked1> loc(#loc67)
      tt.store %99, %100, %64 : tensor<64x64x!tt.ptr<f32>, #blocked1> loc(#loc67)
      scf.yield %96, %97, %98 : tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked> loc(#loc68)
    } loc(#loc26)
    %38:3 = "tt.reduce"(%37#0, %37#1, %37#2) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc70)), %arg11: f32 loc(callsite(#loc1 at #loc70)), %arg12: f32 loc(callsite(#loc1 at #loc70)), %arg13: f32 loc(callsite(#loc1 at #loc70)), %arg14: f32 loc(callsite(#loc1 at #loc70)), %arg15: f32 loc(callsite(#loc1 at #loc70))):
      %48 = arith.subf %arg13, %arg10 : f32 loc(#loc116)
      %49 = arith.addf %arg12, %arg15 : f32 loc(#loc117)
      %50 = arith.cmpf oeq, %49, %cst_3 : f32 loc(#loc118)
      %51 = arith.divf %arg15, %49 : f32 loc(#loc119)
      %52 = arith.select %50, %cst_3, %51 : f32 loc(#loc120)
      %53 = arith.mulf %48, %52 : f32 loc(#loc121)
      %54 = arith.addf %arg10, %53 : f32 loc(#loc122)
      %55 = arith.addf %arg11, %arg14 : f32 loc(#loc123)
      %56 = arith.mulf %48, %48 : f32 loc(#loc124)
      %57 = arith.mulf %56, %arg12 : f32 loc(#loc125)
      %58 = arith.mulf %57, %52 : f32 loc(#loc126)
      %59 = arith.addf %55, %58 : f32 loc(#loc127)
      tt.reduce.return %54, %59, %49 : f32, f32, f32 loc(#loc102)
    }) : (tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>, tensor<64x64xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc102)
    %39 = tt.expand_dims %38#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc83)
    %40 = tt.expand_dims %38#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc84)
    %41 = tt.expand_dims %38#2 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc85)
    %42 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc86)
    %43 = tt.addptr %42, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc86)
    tt.store %43, %39, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc87)
    %44 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc88)
    %45 = tt.addptr %44, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc88)
    tt.store %45, %40, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc89)
    %46 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc90)
    %47 = tt.addptr %46, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc90)
    tt.store %47, %41, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc91)
    tt.return loc(#loc92)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":22:28)
#loc3 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":22:33)
#loc4 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":23:44)
#loc5 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":23:23)
#loc6 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":24:21)
#loc7 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":25:33)
#loc8 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":26:19)
#loc9 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":27:19)
#loc10 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":28:26)
#loc11 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":29:31)
#loc12 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":29:36)
#loc13 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":41:41)
#loc14 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":41:39)
#loc15 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":41:34)
#loc16 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":41:54)
#loc17 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":42:34)
#loc18 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":44:45)
#loc19 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":44:40)
#loc20 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":44:35)
#loc21 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:69)
#loc22 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:64)
#loc23 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:35)
#loc24 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":56:24)
#loc25 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":65:29)
#loc26 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":34:36)
#loc27 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":35:27)
#loc28 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":36:25)
#loc29 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":37:23)
#loc30 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":38:25)
#loc31 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":38:31)
#loc32 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":39:23)
#loc33 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":41:46)
#loc34 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":42:39)
#loc35 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":43:34)
#loc36 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":43:39)
#loc37 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":44:50)
#loc38 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":46:22)
#loc39 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":47:22)
#loc40 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":48:36)
#loc41 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":49:22)
#loc42 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":50:22)
#loc43 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":51:36)
#loc44 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":52:23)
#loc45 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":53:23)
#loc46 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":54:39)
#loc47 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:46)
#loc48 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:43)
#loc49 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:57)
#loc50 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:53)
#loc51 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":55:74)
#loc52 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":57:24)
#loc53 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":60:66)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc55 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":60:55)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc64 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":62:62)
#loc65 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":63:58)
#loc66 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":64:66)
#loc67 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":65:51)
#loc68 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":65:8)
#loc69 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc79 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc80 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc81 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc82 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc83 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":69:22)
#loc84 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":70:22)
#loc85 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":71:22)
#loc86 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":72:25)
#loc87 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":72:37)
#loc88 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":73:25)
#loc89 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":73:37)
#loc90 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":74:25)
#loc91 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":74:37)
#loc92 = loc("inductor_cache/ev/cevs6i6q26spr7hsyvqpkfcs2drivefnrj7vzvsvq37xezghna4p.py":74:4)
#loc93 = loc(callsite(#loc54 at #loc55))
#loc94 = loc(callsite(#loc56 at #loc55))
#loc95 = loc(callsite(#loc57 at #loc55))
#loc96 = loc(callsite(#loc58 at #loc55))
#loc97 = loc(callsite(#loc59 at #loc55))
#loc98 = loc(callsite(#loc60 at #loc55))
#loc99 = loc(callsite(#loc61 at #loc55))
#loc100 = loc(callsite(#loc62 at #loc55))
#loc101 = loc(callsite(#loc63 at #loc55))
#loc102 = loc(callsite(#loc69 at #loc70))
#loc104 = loc(callsite(#loc71 at #loc69))
#loc105 = loc(callsite(#loc72 at #loc69))
#loc106 = loc(callsite(#loc73 at #loc69))
#loc107 = loc(callsite(#loc74 at #loc69))
#loc108 = loc(callsite(#loc75 at #loc69))
#loc109 = loc(callsite(#loc76 at #loc69))
#loc110 = loc(callsite(#loc77 at #loc69))
#loc111 = loc(callsite(#loc78 at #loc69))
#loc112 = loc(callsite(#loc79 at #loc69))
#loc113 = loc(callsite(#loc80 at #loc69))
#loc114 = loc(callsite(#loc81 at #loc69))
#loc115 = loc(callsite(#loc82 at #loc69))
#loc116 = loc(callsite(#loc104 at #loc70))
#loc117 = loc(callsite(#loc105 at #loc70))
#loc118 = loc(callsite(#loc106 at #loc70))
#loc119 = loc(callsite(#loc107 at #loc70))
#loc120 = loc(callsite(#loc108 at #loc70))
#loc121 = loc(callsite(#loc109 at #loc70))
#loc122 = loc(callsite(#loc110 at #loc70))
#loc123 = loc(callsite(#loc111 at #loc70))
#loc124 = loc(callsite(#loc112 at #loc70))
#loc125 = loc(callsite(#loc113 at #loc70))
#loc126 = loc(callsite(#loc114 at #loc70))
#loc127 = loc(callsite(#loc115 at #loc70))
