; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 9, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 510, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %.frozen = freeze i32 %23, !dbg !14
  %24 = sdiv i32 %.frozen, 128, !dbg !14
  %25 = mul i32 %24, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %25, !dbg !15
  %26 = icmp slt i32 %.decomposed, 64, !dbg !16
  %27 = shl nsw i32 %24, 6, !dbg !17
  %28 = add nsw i32 %27, %.decomposed, !dbg !18
  %29 = sext i32 %28 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !19
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !20
  %32 = sext i32 %.decomposed to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !21
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %39 = bitcast i32 %37 to float, !dbg !24
  %40 = bitcast i32 %38 to float, !dbg !24
  %41 = fadd float %39, 0x3EE4F8B580000000, !dbg !25
  %42 = fadd float %40, 0x3EE4F8B580000000, !dbg !25
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %43, 0, !dbg !26
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %44, 0, !dbg !26
  br i1 %.not.i, label %50, label %45, !dbg !26

45:                                               ; preds = %17
  br i1 %.not1.i, label %48, label %46, !dbg !26

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

50:                                               ; preds = %17
  br i1 %.not1.i, label %53, label %51, !dbg !26

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !26
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %55, 0, !dbg !26
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !26
  br i1 %.not.i1, label %62, label %57, !dbg !26

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !26

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !26

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !26
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !28
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !30
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %71, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !31
  %73 = and i32 %.decomposed, -32, !dbg !32
  %74 = icmp eq i32 %73, 64, !dbg !32
  %75 = shl nsw i32 %24, 5, !dbg !33
  %76 = add nsw i32 %.decomposed, -64, !dbg !34
  %77 = add nsw i32 %75, %76, !dbg !35
  %78 = sext i32 %77 to i64, !dbg !36
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !36
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !37
  %81 = sext i32 %76 to i64, !dbg !38
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !38
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !39
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %81, !dbg !40
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !41
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !41
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !41
  %88 = bitcast i32 %86 to float, !dbg !41
  %89 = bitcast i32 %87 to float, !dbg !41
  %90 = fadd float %88, 0x3EE4F8B580000000, !dbg !42
  %91 = fadd float %89, 0x3EE4F8B580000000, !dbg !42
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %92, 0, !dbg !43
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !43
  br i1 %.not.i6, label %99, label %94, !dbg !43

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !43

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !43

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !43
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %104, 0, !dbg !43
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !43
  br i1 %.not.i11, label %111, label %106, !dbg !43

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !43

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !43

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !43
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !44
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !44
  %118 = getelementptr float, ptr addrspace(1) %8, i64 %81, !dbg !45
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %118, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !46
  %120 = getelementptr float, ptr addrspace(1) %9, i64 %81, !dbg !47
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !48
  %122 = icmp sgt i32 %.decomposed, 95, !dbg !49
  %123 = add nsw i32 %.decomposed, -96, !dbg !50
  %124 = add nsw i32 %75, %123, !dbg !51
  %125 = sext i32 %124 to i64, !dbg !52
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %125, !dbg !52
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %126, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !53
  %128 = sext i32 %123 to i64, !dbg !54
  %129 = getelementptr float, ptr addrspace(1) %11, i64 %128, !dbg !54
  %130 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %129, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !55
  %131 = getelementptr float, ptr addrspace(1) %12, i64 %128, !dbg !56
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !57
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !57
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !57
  %135 = bitcast i32 %133 to float, !dbg !57
  %136 = bitcast i32 %134 to float, !dbg !57
  %137 = fadd float %135, 0x3EE4F8B580000000, !dbg !58
  %138 = fadd float %136, 0x3EE4F8B580000000, !dbg !58
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i16 = icmp eq i32 %139, 0, !dbg !59
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i19 = icmp eq i32 %140, 0, !dbg !59
  br i1 %.not.i16, label %146, label %141, !dbg !59

141:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %144, label %142, !dbg !59

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %137) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %137) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !59

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %137) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %137) #3, !dbg !59
  br label %__nv_sqrtf.exit20, !dbg !59

__nv_sqrtf.exit20:                                ; preds = %142, %144, %147, %149
  %.0.i18 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !59
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i21 = icmp eq i32 %151, 0, !dbg !59
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i24 = icmp eq i32 %152, 0, !dbg !59
  br i1 %.not.i21, label %158, label %153, !dbg !59

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !59

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #3, !dbg !59
  br label %__nv_sqrtf.exit25, !dbg !59

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #3, !dbg !59
  br label %__nv_sqrtf.exit25, !dbg !59

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !59

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #3, !dbg !59
  br label %__nv_sqrtf.exit25, !dbg !59

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #3, !dbg !59
  br label %__nv_sqrtf.exit25, !dbg !59

__nv_sqrtf.exit25:                                ; preds = %154, %156, %159, %161
  %.0.i23 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !59
  %163 = extractvalue { i32, i32 } %127, 1, !dbg !53
  %164 = extractvalue { i32, i32 } %130, 1, !dbg !55
  %165 = extractvalue { i32, i32 } %127, 0, !dbg !53
  %166 = extractvalue { i32, i32 } %130, 0, !dbg !55
  %167 = extractvalue { i32, i32 } %80, 1, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = extractvalue { i32, i32 } %83, 1, !dbg !39
  %170 = bitcast i32 %169 to float, !dbg !39
  %171 = fsub float %168, %170, !dbg !60
  %172 = fmul float %171, %117, !dbg !61
  %173 = extractvalue { i32, i32 } %119, 1, !dbg !46
  %174 = bitcast i32 %173 to float, !dbg !46
  %175 = fmul float %172, %174, !dbg !62
  %176 = extractvalue { i32, i32 } %121, 1, !dbg !48
  %177 = bitcast i32 %176 to float, !dbg !48
  %178 = fadd float %175, %177, !dbg !63
  %179 = fcmp olt float %178, 0.000000e+00, !dbg !64
  %180 = select i1 %179, float 0.000000e+00, float %178, !dbg !68
  %181 = extractvalue { i32, i32 } %80, 0, !dbg !37
  %182 = bitcast i32 %181 to float, !dbg !37
  %183 = extractvalue { i32, i32 } %83, 0, !dbg !39
  %184 = bitcast i32 %183 to float, !dbg !39
  %185 = fsub float %182, %184, !dbg !60
  %186 = fmul float %185, %116, !dbg !61
  %187 = extractvalue { i32, i32 } %119, 0, !dbg !46
  %188 = bitcast i32 %187 to float, !dbg !46
  %189 = fmul float %186, %188, !dbg !62
  %190 = extractvalue { i32, i32 } %121, 0, !dbg !48
  %191 = bitcast i32 %190 to float, !dbg !48
  %192 = fadd float %189, %191, !dbg !63
  %193 = fcmp olt float %192, 0.000000e+00, !dbg !64
  %194 = select i1 %193, float 0.000000e+00, float %192, !dbg !68
  %195 = extractvalue { i32, i32 } %31, 1, !dbg !20
  %196 = extractvalue { i32, i32 } %34, 1, !dbg !22
  %197 = extractvalue { i32, i32 } %70, 1, !dbg !29
  %198 = extractvalue { i32, i32 } %72, 1, !dbg !31
  %199 = extractvalue { i32, i32 } %31, 0, !dbg !20
  %200 = extractvalue { i32, i32 } %34, 0, !dbg !22
  %201 = extractvalue { i32, i32 } %70, 0, !dbg !29
  %202 = extractvalue { i32, i32 } %72, 0, !dbg !31
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !69
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !69
  %205 = getelementptr float, ptr addrspace(1) %13, i64 %128, !dbg !70
  %206 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %205, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !71
  %207 = extractvalue { i32, i32 } %206, 0, !dbg !71
  %208 = extractvalue { i32, i32 } %206, 1, !dbg !71
  %209 = getelementptr float, ptr addrspace(1) %14, i64 %128, !dbg !72
  %210 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %209, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !73
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !73
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !73
  %213 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !53
  %214 = insertelement <4 x i32> %213, i32 %165, i64 1, !dbg !53
  %215 = insertelement <4 x i32> %214, i32 %199, i64 2, !dbg !53
  %216 = insertelement <4 x i32> %215, i32 %195, i64 3, !dbg !53
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !53
  %218 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !55
  %219 = insertelement <4 x i32> %218, i32 %166, i64 1, !dbg !55
  %220 = insertelement <4 x i32> %219, i32 %200, i64 2, !dbg !55
  %221 = insertelement <4 x i32> %220, i32 %196, i64 3, !dbg !55
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !55
  %223 = fsub <4 x float> %217, %222, !dbg !74
  %224 = insertelement <4 x float> poison, float %204, i64 0, !dbg !75
  %225 = insertelement <4 x float> %224, float %203, i64 1, !dbg !75
  %226 = insertelement <4 x float> %225, float %67, i64 2, !dbg !75
  %227 = insertelement <4 x float> %226, float %68, i64 3, !dbg !75
  %228 = fmul <4 x float> %223, %227, !dbg !75
  %229 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !71
  %230 = insertelement <4 x i32> %229, i32 %207, i64 1, !dbg !71
  %231 = insertelement <4 x i32> %230, i32 %201, i64 2, !dbg !71
  %232 = insertelement <4 x i32> %231, i32 %197, i64 3, !dbg !71
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !71
  %234 = fmul <4 x float> %228, %233, !dbg !76
  %235 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !73
  %236 = insertelement <4 x i32> %235, i32 %211, i64 1, !dbg !73
  %237 = insertelement <4 x i32> %236, i32 %202, i64 2, !dbg !73
  %238 = insertelement <4 x i32> %237, i32 %198, i64 3, !dbg !73
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !73
  %240 = fadd <4 x float> %234, %239, !dbg !77
  %241 = fcmp olt <4 x float> %240, zeroinitializer, !dbg !78
  %242 = extractelement <4 x i1> %241, i64 3, !dbg !80
  %243 = extractelement <4 x float> %240, i64 3, !dbg !80
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !80
  %245 = extractelement <4 x i1> %241, i64 2, !dbg !80
  %246 = extractelement <4 x float> %240, i64 2, !dbg !80
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !80
  %248 = extractelement <4 x i1> %241, i64 1, !dbg !82
  %249 = extractelement <4 x float> %240, i64 1, !dbg !82
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !82
  %251 = extractelement <4 x i1> %241, i64 0, !dbg !82
  %252 = extractelement <4 x float> %240, i64 0, !dbg !82
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !82
  %254 = select i1 %122, float %250, float 0.000000e+00, !dbg !83
  %255 = select i1 %122, float %253, float 0.000000e+00, !dbg !83
  %256 = select i1 %74, float %194, float %254, !dbg !84
  %257 = select i1 %74, float %180, float %255, !dbg !84
  %258 = select i1 %26, float %247, float %256, !dbg !84
  %259 = select i1 %26, float %244, float %257, !dbg !84
  %260 = sext i32 %23 to i64, !dbg !85
  %261 = getelementptr float, ptr addrspace(1) %15, i64 %260, !dbg !85
  %262 = bitcast float %258 to i32, !dbg !86
  %263 = bitcast float %259 to i32, !dbg !86
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %262, i32 %263, ptr addrspace(1) %261, i1 true) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl2n2cs2yrhypzwb63mp2j6ki3dnka2gcody5jy5n6kmfprlppoi.py", directory: "inductor_cache/l2")
!4 = !{ptr @triton_poi_fused_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_6", linkageName: "triton_poi_fused_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 55, column: 20, scope: !7)
!33 = !DILocation(line: 56, column: 34, scope: !7)
!34 = !DILocation(line: 56, column: 48, scope: !7)
!35 = !DILocation(line: 56, column: 40, scope: !7)
!36 = !DILocation(line: 56, column: 31, scope: !7)
!37 = !DILocation(line: 56, column: 54, scope: !7)
!38 = !DILocation(line: 57, column: 31, scope: !7)
!39 = !DILocation(line: 57, column: 44, scope: !7)
!40 = !DILocation(line: 59, column: 31, scope: !7)
!41 = !DILocation(line: 59, column: 44, scope: !7)
!42 = !DILocation(line: 61, column: 20, scope: !7)
!43 = !DILocation(line: 62, column: 27, scope: !7)
!44 = !DILocation(line: 64, column: 20, scope: !7)
!45 = !DILocation(line: 68, column: 31, scope: !7)
!46 = !DILocation(line: 68, column: 44, scope: !7)
!47 = !DILocation(line: 70, column: 31, scope: !7)
!48 = !DILocation(line: 70, column: 44, scope: !7)
!49 = !DILocation(line: 76, column: 20, scope: !7)
!50 = !DILocation(line: 79, column: 49, scope: !7)
!51 = !DILocation(line: 79, column: 41, scope: !7)
!52 = !DILocation(line: 79, column: 32, scope: !7)
!53 = !DILocation(line: 79, column: 55, scope: !7)
!54 = !DILocation(line: 80, column: 32, scope: !7)
!55 = !DILocation(line: 80, column: 45, scope: !7)
!56 = !DILocation(line: 82, column: 32, scope: !7)
!57 = !DILocation(line: 82, column: 45, scope: !7)
!58 = !DILocation(line: 84, column: 20, scope: !7)
!59 = !DILocation(line: 85, column: 27, scope: !7)
!60 = !DILocation(line: 58, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 73, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 87, column: 20, scope: !7)
!70 = !DILocation(line: 91, column: 32, scope: !7)
!71 = !DILocation(line: 91, column: 45, scope: !7)
!72 = !DILocation(line: 93, column: 32, scope: !7)
!73 = !DILocation(line: 93, column: 45, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 90, column: 20, scope: !7)
!76 = !DILocation(line: 92, column: 20, scope: !7)
!77 = !DILocation(line: 94, column: 20, scope: !7)
!78 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !79)
!79 = !DILocation(line: 96, column: 42, scope: !7)
!80 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !81)
!81 = !DILocation(line: 49, column: 42, scope: !7)
!82 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !79)
!83 = !DILocation(line: 98, column: 35, scope: !7)
!84 = !DILocation(line: 0, scope: !7)
!85 = !DILocation(line: 101, column: 25, scope: !7)
!86 = !DILocation(line: 101, column: 37, scope: !7)
!87 = !DILocation(line: 101, column: 4, scope: !7)
