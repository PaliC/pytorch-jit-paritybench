; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_83(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %20 = icmp slt i32 %16, 50432, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %21 = sdiv i32 %.frozen, 197, !dbg !15
  %22 = mul i32 %21, 197, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %.frozen8 = freeze i32 %18, !dbg !15
  %23 = sdiv i32 %.frozen8, 197, !dbg !15
  %24 = mul i32 %23, 197, !dbg !16
  %.decomposed9 = sub i32 %.frozen8, %24, !dbg !16
  %.frozen10 = freeze i32 %19, !dbg !15
  %25 = sdiv i32 %.frozen10, 197, !dbg !15
  %26 = mul i32 %25, 197, !dbg !16
  %.decomposed11 = sub i32 %.frozen10, %26, !dbg !16
  %27 = sdiv i32 %16, 197, !dbg !15
  %28 = sdiv i32 %16, 12608, !dbg !17
  %29 = srem i32 %21, 64, !dbg !18
  %30 = srem i32 %23, 64, !dbg !18
  %31 = srem i32 %25, 64, !dbg !18
  %32 = sdiv i32 %16, 1576, !dbg !19
  %33 = srem i32 %32, 8, !dbg !20
  %34 = srem i32 %27, 8, !dbg !21
  %35 = srem i32 %21, 8, !dbg !21
  %36 = srem i32 %23, 8, !dbg !21
  %37 = srem i32 %25, 8, !dbg !21
  %38 = icmp slt i32 %.decomposed, 150, !dbg !22
  %39 = icmp slt i32 %.decomposed9, 150, !dbg !22
  %40 = icmp slt i32 %.decomposed11, 150, !dbg !22
  %41 = mul nsw i32 %27, 150, !dbg !23
  %42 = mul nsw i32 %21, 150, !dbg !23
  %43 = mul nsw i32 %23, 150, !dbg !23
  %44 = mul nsw i32 %25, 150, !dbg !23
  %45 = add nsw i32 %42, %.decomposed, !dbg !24
  %46 = add nsw i32 %43, %.decomposed9, !dbg !24
  %47 = add nsw i32 %44, %.decomposed11, !dbg !24
  %48 = sext i32 %45 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %46 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %47 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = and i1 %38, %20, !dbg !26
  %55 = and i1 %39, %20, !dbg !26
  %56 = and i1 %40, %20, !dbg !26
  %57 = icmp sgt i32 %.decomposed, 149, !dbg !27
  %58 = icmp sgt i32 %.decomposed9, 149, !dbg !27
  %59 = icmp sgt i32 %.decomposed11, 149, !dbg !27
  %60 = add nsw i32 %.decomposed, -150, !dbg !28
  %61 = add nsw i32 %.decomposed9, -150, !dbg !28
  %62 = add nsw i32 %.decomposed11, -150, !dbg !28
  %63 = shl nsw i32 %60, 6, !dbg !29
  %64 = shl nsw i32 %61, 6, !dbg !29
  %65 = shl nsw i32 %62, 6, !dbg !29
  %66 = add nsw i32 %63, %29, !dbg !30
  %67 = add nsw i32 %64, %30, !dbg !30
  %68 = add nsw i32 %65, %31, !dbg !30
  %69 = mul nsw i32 %28, 3008, !dbg !31
  %70 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %71 = insertelement <2 x i32> %70, i32 %16, i64 1, !dbg !18
  %72 = srem <2 x i32> %71, <i32 64, i32 197>, !dbg !18
  %73 = extractelement <2 x i32> %72, i64 1, !dbg !27
  %74 = icmp slt i32 %73, 150, !dbg !22
  %75 = add nsw i32 %41, %73, !dbg !24
  %76 = sext i32 %75 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = and i1 %20, %74, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %78, i32 0, i1 %78) #1, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %54, i32 0, i1 %54) #1, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %55, i32 0, i1 %55) #1, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %56, i32 0, i1 %56) #1, !dbg !32
  %83 = icmp sgt i32 %73, 149, !dbg !27
  %84 = insertelement <2 x i32> <i32 poison, i32 -150>, i32 %69, i64 0, !dbg !30
  %85 = add nsw <2 x i32> %84, %72, !dbg !30
  %86 = extractelement <2 x i32> %85, i64 1, !dbg !29
  %87 = shl nsw i32 %86, 6, !dbg !29
  %88 = extractelement <2 x i32> %85, i64 0, !dbg !33
  %89 = add nsw i32 %88, %87, !dbg !33
  %90 = add nsw i32 %66, %69, !dbg !33
  %91 = add nsw i32 %67, %69, !dbg !33
  %92 = add nsw i32 %68, %69, !dbg !33
  %93 = sext i32 %89 to i64, !dbg !34
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !34
  %95 = sext i32 %90 to i64, !dbg !34
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !34
  %97 = sext i32 %91 to i64, !dbg !34
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !34
  %99 = sext i32 %92 to i64, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !34
  %101 = and i1 %20, %83, !dbg !35
  %102 = and i1 %57, %20, !dbg !35
  %103 = and i1 %58, %20, !dbg !35
  %104 = and i1 %59, %20, !dbg !35
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %101, i32 0, i1 %101) #1, !dbg !36
  %106 = bitcast i32 %105 to float, !dbg !36
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %102, i32 0, i1 %102) #1, !dbg !36
  %108 = bitcast i32 %107 to float, !dbg !36
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %103, i32 0, i1 %103) #1, !dbg !36
  %110 = bitcast i32 %109 to float, !dbg !36
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %104, i32 0, i1 %104) #1, !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = sext i32 %33 to i64, !dbg !37
  %114 = getelementptr i64, ptr addrspace(1) %2, i64 %113, !dbg !37
  %115 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 %101, i1 %101) #1, !dbg !38
  %116 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 %102, i1 %102) #1, !dbg !38
  %117 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 %103, i1 %103) #1, !dbg !38
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 %104, i1 %104) #1, !dbg !38
  %119 = lshr i64 %115, 61, !dbg !39
  %120 = and i64 %119, 4, !dbg !39
  %121 = add i64 %120, %115, !dbg !39
  %122 = lshr i64 %116, 61, !dbg !39
  %123 = and i64 %122, 4, !dbg !39
  %124 = add i64 %123, %116, !dbg !39
  %125 = lshr i64 %117, 61, !dbg !39
  %126 = and i64 %125, 4, !dbg !39
  %127 = add i64 %126, %117, !dbg !39
  %128 = lshr i64 %118, 61, !dbg !39
  %129 = and i64 %128, 4, !dbg !39
  %130 = add i64 %129, %118, !dbg !39
  %131 = sext i32 %34 to i64, !dbg !40
  %132 = getelementptr i64, ptr addrspace(1) %3, i64 %131, !dbg !40
  %133 = sext i32 %35 to i64, !dbg !40
  %134 = getelementptr i64, ptr addrspace(1) %3, i64 %133, !dbg !40
  %135 = sext i32 %36 to i64, !dbg !40
  %136 = getelementptr i64, ptr addrspace(1) %3, i64 %135, !dbg !40
  %137 = sext i32 %37 to i64, !dbg !40
  %138 = getelementptr i64, ptr addrspace(1) %3, i64 %137, !dbg !40
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %132, i1 %101, i1 %101) #1, !dbg !41
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %134, i1 %102, i1 %102) #1, !dbg !41
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %136, i1 %103, i1 %103) #1, !dbg !41
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %138, i1 %104, i1 %104) #1, !dbg !41
  %143 = lshr i64 %139, 61, !dbg !42
  %144 = and i64 %143, 4, !dbg !42
  %145 = add i64 %144, %139, !dbg !42
  %146 = lshr i64 %140, 61, !dbg !42
  %147 = and i64 %146, 4, !dbg !42
  %148 = add i64 %147, %140, !dbg !42
  %149 = lshr i64 %141, 61, !dbg !42
  %150 = and i64 %149, 4, !dbg !42
  %151 = add i64 %150, %141, !dbg !42
  %152 = lshr i64 %142, 61, !dbg !42
  %153 = and i64 %152, 4, !dbg !42
  %154 = add i64 %153, %142, !dbg !42
  %155 = mul i64 %121, 188, !dbg !43
  %156 = mul i64 %124, 188, !dbg !43
  %157 = mul i64 %127, 188, !dbg !43
  %158 = mul i64 %130, 188, !dbg !43
  %159 = mul nsw i32 %28, 752, !dbg !44
  %160 = sext i32 %159 to i64, !dbg !45
  %161 = sext i32 %86 to i64, !dbg !46
  %162 = sext i32 %60 to i64, !dbg !46
  %163 = sext i32 %61 to i64, !dbg !46
  %164 = sext i32 %62 to i64, !dbg !46
  %.idx = mul i64 %145, 188, !dbg !47
  %165 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %155, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %160, !dbg !47
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %161, !dbg !47
  %.idx1 = mul i64 %148, 188, !dbg !47
  %169 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !47
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %156, !dbg !47
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %160, !dbg !47
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %162, !dbg !47
  %.idx2 = mul i64 %151, 188, !dbg !47
  %173 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx2, !dbg !47
  %174 = getelementptr float, ptr addrspace(1) %173, i64 %157, !dbg !47
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %160, !dbg !47
  %176 = getelementptr float, ptr addrspace(1) %175, i64 %163, !dbg !47
  %.idx3 = mul i64 %154, 188, !dbg !47
  %177 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx3, !dbg !47
  %178 = getelementptr float, ptr addrspace(1) %177, i64 %158, !dbg !47
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %160, !dbg !47
  %180 = getelementptr float, ptr addrspace(1) %179, i64 %164, !dbg !47
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %101, i32 0, i1 %101) #1, !dbg !48
  %182 = bitcast i32 %181 to float, !dbg !48
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %102, i32 0, i1 %102) #1, !dbg !48
  %184 = bitcast i32 %183 to float, !dbg !48
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %176, i1 %103, i32 0, i1 %103) #1, !dbg !48
  %186 = bitcast i32 %185 to float, !dbg !48
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %180, i1 %104, i32 0, i1 %104) #1, !dbg !48
  %188 = bitcast i32 %187 to float, !dbg !48
  %189 = getelementptr i64, ptr addrspace(1) %5, i64 %131, !dbg !49
  %190 = getelementptr i64, ptr addrspace(1) %5, i64 %133, !dbg !49
  %191 = getelementptr i64, ptr addrspace(1) %5, i64 %135, !dbg !49
  %192 = getelementptr i64, ptr addrspace(1) %5, i64 %137, !dbg !49
  %193 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %189, i1 %101, i1 %101) #1, !dbg !50
  %194 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %190, i1 %102, i1 %102) #1, !dbg !50
  %195 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %191, i1 %103, i1 %103) #1, !dbg !50
  %196 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %192, i1 %104, i1 %104) #1, !dbg !50
  %197 = lshr i64 %193, 61, !dbg !51
  %198 = and i64 %197, 4, !dbg !51
  %199 = add i64 %198, %193, !dbg !51
  %200 = lshr i64 %194, 61, !dbg !51
  %201 = and i64 %200, 4, !dbg !51
  %202 = add i64 %201, %194, !dbg !51
  %203 = lshr i64 %195, 61, !dbg !51
  %204 = and i64 %203, 4, !dbg !51
  %205 = add i64 %204, %195, !dbg !51
  %206 = lshr i64 %196, 61, !dbg !51
  %207 = and i64 %206, 4, !dbg !51
  %208 = add i64 %207, %196, !dbg !51
  %.idx4 = mul i64 %199, 188, !dbg !52
  %209 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx4, !dbg !52
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %155, !dbg !52
  %211 = getelementptr float, ptr addrspace(1) %210, i64 %160, !dbg !52
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %161, !dbg !52
  %.idx5 = mul i64 %202, 188, !dbg !52
  %213 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx5, !dbg !52
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %156, !dbg !52
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %160, !dbg !52
  %216 = getelementptr float, ptr addrspace(1) %215, i64 %162, !dbg !52
  %.idx6 = mul i64 %205, 188, !dbg !52
  %217 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx6, !dbg !52
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %157, !dbg !52
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %160, !dbg !52
  %220 = getelementptr float, ptr addrspace(1) %219, i64 %163, !dbg !52
  %.idx7 = mul i64 %208, 188, !dbg !52
  %221 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx7, !dbg !52
  %222 = getelementptr float, ptr addrspace(1) %221, i64 %158, !dbg !52
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %160, !dbg !52
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %164, !dbg !52
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %101, i32 0, i1 %101) #1, !dbg !53
  %226 = bitcast i32 %225 to float, !dbg !53
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %228 = bitcast i32 %227 to float, !dbg !53
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %220, i1 %103, i32 0, i1 %103) #1, !dbg !53
  %230 = bitcast i32 %229 to float, !dbg !53
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %104, i32 0, i1 %104) #1, !dbg !53
  %232 = bitcast i32 %231 to float, !dbg !53
  %233 = fsub float %226, %182, !dbg !54
  %234 = fsub float %228, %184, !dbg !54
  %235 = fsub float %230, %186, !dbg !54
  %236 = fsub float %232, %188, !dbg !54
  %237 = getelementptr float, ptr addrspace(1) %6, i64 %131, !dbg !55
  %238 = getelementptr float, ptr addrspace(1) %6, i64 %133, !dbg !55
  %239 = getelementptr float, ptr addrspace(1) %6, i64 %135, !dbg !55
  %240 = getelementptr float, ptr addrspace(1) %6, i64 %137, !dbg !55
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %101, i32 0, i1 %101) #1, !dbg !56
  %242 = bitcast i32 %241 to float, !dbg !56
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %238, i1 %102, i32 0, i1 %102) #1, !dbg !56
  %244 = bitcast i32 %243 to float, !dbg !56
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %103, i32 0, i1 %103) #1, !dbg !56
  %246 = bitcast i32 %245 to float, !dbg !56
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %104, i32 0, i1 %104) #1, !dbg !56
  %248 = bitcast i32 %247 to float, !dbg !56
  %249 = fmul float %233, %242, !dbg !57
  %250 = fmul float %234, %244, !dbg !57
  %251 = fmul float %235, %246, !dbg !57
  %252 = fmul float %236, %248, !dbg !57
  %253 = fadd float %249, %182, !dbg !58
  %254 = fadd float %250, %184, !dbg !58
  %255 = fadd float %251, %186, !dbg !58
  %256 = fadd float %252, %188, !dbg !58
  %257 = fsub float %253, %106, !dbg !59
  %258 = fsub float %254, %108, !dbg !59
  %259 = fsub float %255, %110, !dbg !59
  %260 = fsub float %256, %112, !dbg !59
  %261 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !60
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %101, i32 0, i1 %101) #1, !dbg !61
  %263 = bitcast i32 %262 to float, !dbg !61
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %102, i32 0, i1 %102) #1, !dbg !61
  %265 = bitcast i32 %264 to float, !dbg !61
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %103, i32 0, i1 %103) #1, !dbg !61
  %267 = bitcast i32 %266 to float, !dbg !61
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %104, i32 0, i1 %104) #1, !dbg !61
  %269 = bitcast i32 %268 to float, !dbg !61
  %270 = fmul float %257, %263, !dbg !62
  %271 = fmul float %258, %265, !dbg !62
  %272 = fmul float %259, %267, !dbg !62
  %273 = fmul float %260, %269, !dbg !62
  %274 = fadd float %270, %106, !dbg !63
  %275 = fadd float %271, %108, !dbg !63
  %276 = fadd float %272, %110, !dbg !63
  %277 = fadd float %273, %112, !dbg !63
  %278 = sext i32 %16 to i64, !dbg !64
  %279 = getelementptr float, ptr addrspace(1) %8, i64 %278, !dbg !64
  %280 = bitcast float %274 to i32, !dbg !65
  %281 = select i1 %74, i32 %79, i32 %280, !dbg !66
  %282 = bitcast float %275 to i32, !dbg !65
  %283 = select i1 %38, i32 %80, i32 %282, !dbg !66
  %284 = bitcast float %276 to i32, !dbg !65
  %285 = select i1 %39, i32 %81, i32 %284, !dbg !66
  %286 = bitcast float %277 to i32, !dbg !65
  %287 = select i1 %40, i32 %82, i32 %286, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %283, i32 %285, i32 %287, ptr addrspace(1) %279, i1 %20) #1, !dbg !65
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkyykhfrtc4ovku2knj7s3lj5ullhv6oz67kp4spbvydv5hfbvk.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused_cat_83, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_83, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_83", linkageName: "triton_poi_fused_cat_83", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 29, scope: !7)
!21 = !DILocation(line: 29, column: 28, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 34, scope: !7)
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 53, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 40, column: 48, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 59, scope: !7)
!32 = !DILocation(line: 36, column: 46, scope: !7)
!33 = !DILocation(line: 40, column: 54, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 71, scope: !7)
!36 = !DILocation(line: 40, column: 64, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 36, scope: !7)
!42 = !DILocation(line: 49, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 46, scope: !7)
!44 = !DILocation(line: 50, column: 58, scope: !7)
!45 = !DILocation(line: 50, column: 54, scope: !7)
!46 = !DILocation(line: 50, column: 64, scope: !7)
!47 = !DILocation(line: 50, column: 31, scope: !7)
!48 = !DILocation(line: 50, column: 79, scope: !7)
!49 = !DILocation(line: 51, column: 31, scope: !7)
!50 = !DILocation(line: 51, column: 36, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 55, column: 31, scope: !7)
!53 = !DILocation(line: 55, column: 79, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 58, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 61, column: 31, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 20, scope: !7)
!63 = !DILocation(line: 63, column: 19, scope: !7)
!64 = !DILocation(line: 67, column: 25, scope: !7)
!65 = !DILocation(line: 67, column: 37, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 4, scope: !7)
