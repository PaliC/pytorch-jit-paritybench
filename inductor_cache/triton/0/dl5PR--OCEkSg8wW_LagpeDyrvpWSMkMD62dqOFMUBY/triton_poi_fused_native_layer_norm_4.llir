; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_native_layer_norm_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = mul i32 %14, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = shl i32 %14, 6, !dbg !17
  %17 = add i32 %16, %.decomposed, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !20
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %23 = bitcast i32 %21 to float, !dbg !20
  %24 = bitcast i32 %22 to float, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !21
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %13) #1, !dbg !22
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !22
  %29 = bitcast i32 %27 to float, !dbg !22
  %30 = bitcast i32 %28 to float, !dbg !22
  %31 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = add i32 %17, 16, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !27
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !27
  %40 = bitcast i32 %38 to float, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !28
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %13) #1, !dbg !29
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !29
  %46 = bitcast i32 %44 to float, !dbg !29
  %47 = bitcast i32 %45 to float, !dbg !29
  %48 = add i32 %17, 32, !dbg !30
  %49 = sext i32 %48 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %13) #1, !dbg !32
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !32
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !32
  %54 = bitcast i32 %52 to float, !dbg !32
  %55 = bitcast i32 %53 to float, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !33
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %13) #1, !dbg !34
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !34
  %60 = bitcast i32 %58 to float, !dbg !34
  %61 = bitcast i32 %59 to float, !dbg !34
  %62 = add i32 %17, 48, !dbg !35
  %63 = sext i32 %62 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !36
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %13) #1, !dbg !37
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !37
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !37
  %68 = bitcast i32 %66 to float, !dbg !37
  %69 = bitcast i32 %67 to float, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !38
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %13) #1, !dbg !39
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !39
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !39
  %74 = bitcast i32 %72 to float, !dbg !39
  %75 = bitcast i32 %73 to float, !dbg !39
  %76 = fmul float %29, %33, !dbg !40
  %77 = fmul float %30, %33, !dbg !40
  %78 = fadd float %76, %23, !dbg !41
  %79 = fadd float %77, %24, !dbg !41
  %80 = fmul float %33, %46, !dbg !42
  %81 = fmul float %33, %47, !dbg !42
  %82 = fadd float %80, %40, !dbg !43
  %83 = fadd float %81, %41, !dbg !43
  %84 = fadd float %78, %82, !dbg !44
  %85 = fadd float %79, %83, !dbg !44
  %86 = fmul float %33, %60, !dbg !45
  %87 = fmul float %33, %61, !dbg !45
  %88 = fadd float %86, %54, !dbg !46
  %89 = fadd float %87, %55, !dbg !46
  %90 = fadd float %84, %88, !dbg !47
  %91 = fadd float %85, %89, !dbg !47
  %92 = fmul float %33, %74, !dbg !48
  %93 = fmul float %33, %75, !dbg !48
  %94 = fadd float %92, %68, !dbg !49
  %95 = fadd float %93, %69, !dbg !49
  %96 = fadd float %90, %94, !dbg !50
  %97 = fadd float %91, %95, !dbg !50
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 4.000000e+00) #1, !dbg !51
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 4.000000e+00) #1, !dbg !51
  %100 = fsub float %78, %98, !dbg !52
  %101 = fsub float %79, %99, !dbg !52
  %102 = fmul float %100, %100, !dbg !53
  %103 = fmul float %101, %101, !dbg !53
  %104 = fsub float %82, %98, !dbg !54
  %105 = fsub float %83, %99, !dbg !54
  %106 = fmul float %104, %104, !dbg !55
  %107 = fmul float %105, %105, !dbg !55
  %108 = fadd float %102, %106, !dbg !56
  %109 = fadd float %103, %107, !dbg !56
  %110 = fsub float %88, %98, !dbg !57
  %111 = fsub float %89, %99, !dbg !57
  %112 = fmul float %110, %110, !dbg !58
  %113 = fmul float %111, %111, !dbg !58
  %114 = fadd float %108, %112, !dbg !59
  %115 = fadd float %113, %109, !dbg !59
  %116 = fsub float %94, %98, !dbg !60
  %117 = fsub float %95, %99, !dbg !60
  %118 = fmul float %116, %116, !dbg !61
  %119 = fmul float %117, %117, !dbg !61
  %120 = fadd float %114, %118, !dbg !62
  %121 = fadd float %115, %119, !dbg !62
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 4.000000e+00) #1, !dbg !63
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float 4.000000e+00) #1, !dbg !63
  %124 = sext i32 %12 to i64, !dbg !64
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !64
  %126 = bitcast float %98 to i32, !dbg !65
  %127 = bitcast float %99 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %125, i1 %13) #1, !dbg !65
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %124, !dbg !66
  %129 = bitcast float %122 to i32, !dbg !67
  %130 = bitcast float %123 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %130, ptr addrspace(1) %128, i1 %13) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckjw2r27fgashebxw5phmmoesfx2whje4lhkrwcrxrwldkukwqyd.py", directory: "inductor_cache/kj")
!4 = !{ptr @triton_poi_fused_native_layer_norm_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_4", linkageName: "triton_poi_fused_native_layer_norm_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 31, column: 40, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 48, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 48, scope: !7)
!30 = !DILocation(line: 33, column: 41, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 49, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 49, scope: !7)
!35 = !DILocation(line: 35, column: 41, scope: !7)
!36 = !DILocation(line: 35, column: 31, scope: !7)
!37 = !DILocation(line: 35, column: 49, scope: !7)
!38 = !DILocation(line: 36, column: 31, scope: !7)
!39 = !DILocation(line: 36, column: 49, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 19, scope: !7)
!45 = !DILocation(line: 42, column: 20, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 50, column: 19, scope: !7)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 19, scope: !7)
!55 = !DILocation(line: 53, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 20, scope: !7)
!59 = !DILocation(line: 57, column: 20, scope: !7)
!60 = !DILocation(line: 58, column: 20, scope: !7)
!61 = !DILocation(line: 59, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 20, scope: !7)
!63 = !DILocation(line: 61, column: 20, scope: !7)
!64 = !DILocation(line: 62, column: 25, scope: !7)
!65 = !DILocation(line: 62, column: 37, scope: !7)
!66 = !DILocation(line: 63, column: 25, scope: !7)
!67 = !DILocation(line: 63, column: 37, scope: !7)
!68 = !DILocation(line: 63, column: 4, scope: !7)
