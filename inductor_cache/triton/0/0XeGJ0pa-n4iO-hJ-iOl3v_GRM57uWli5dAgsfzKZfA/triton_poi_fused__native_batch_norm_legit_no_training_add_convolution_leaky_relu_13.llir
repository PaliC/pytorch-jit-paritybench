; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 3, !dbg !12
  %15 = and i32 %14, 1016, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = srem i32 %16, 128, !dbg !14
  %19 = srem i32 %17, 128, !dbg !14
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = sext i32 %17 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !16
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !16
  %26 = sext i32 %18 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !17
  %28 = sext i32 %19 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !20
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #4, !dbg !28
  %68 = fadd float %43, 0x3EE4F8B580000000, !dbg !29
  %69 = fadd float %44, 0x3EE4F8B580000000, !dbg !29
  %70 = fadd float %45, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %46, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %52, 0x3EE4F8B580000000, !dbg !29
  %73 = fadd float %53, 0x3EE4F8B580000000, !dbg !29
  %74 = fadd float %54, 0x3EE4F8B580000000, !dbg !29
  %75 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %76, 0, !dbg !30
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %77, 0, !dbg !30
  br i1 %.not.i, label %83, label %78, !dbg !30

78:                                               ; preds = %10
  br i1 %.not1.i, label %81, label %79, !dbg !30

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

83:                                               ; preds = %10
  br i1 %.not1.i, label %86, label %84, !dbg !30

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !30
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i30 = icmp eq i32 %88, 0, !dbg !30
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i33 = icmp eq i32 %89, 0, !dbg !30
  br i1 %.not.i30, label %95, label %90, !dbg !30

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %93, label %91, !dbg !30

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit34, !dbg !30

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit34, !dbg !30

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %98, label %96, !dbg !30

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit34, !dbg !30

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !30
  br label %__nv_sqrtf.exit34, !dbg !30

__nv_sqrtf.exit34:                                ; preds = %91, %93, %96, %98
  %.0.i32 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !30
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i35 = icmp eq i32 %100, 0, !dbg !30
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i38 = icmp eq i32 %101, 0, !dbg !30
  br i1 %.not.i35, label %107, label %102, !dbg !30

102:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %105, label %103, !dbg !30

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !30
  br label %__nv_sqrtf.exit39, !dbg !30

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !30
  br label %__nv_sqrtf.exit39, !dbg !30

107:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %110, label %108, !dbg !30

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !30
  br label %__nv_sqrtf.exit39, !dbg !30

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !30
  br label %__nv_sqrtf.exit39, !dbg !30

__nv_sqrtf.exit39:                                ; preds = %103, %105, %108, %110
  %.0.i37 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !30
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i40 = icmp eq i32 %112, 0, !dbg !30
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i43 = icmp eq i32 %113, 0, !dbg !30
  br i1 %.not.i40, label %119, label %114, !dbg !30

114:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %117, label %115, !dbg !30

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !30
  br label %__nv_sqrtf.exit44, !dbg !30

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !30
  br label %__nv_sqrtf.exit44, !dbg !30

119:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %122, label %120, !dbg !30

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !30
  br label %__nv_sqrtf.exit44, !dbg !30

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !30
  br label %__nv_sqrtf.exit44, !dbg !30

__nv_sqrtf.exit44:                                ; preds = %115, %117, %120, %122
  %.0.i42 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !30
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i45 = icmp eq i32 %124, 0, !dbg !30
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i48 = icmp eq i32 %125, 0, !dbg !30
  br i1 %.not.i45, label %131, label %126, !dbg !30

126:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %129, label %127, !dbg !30

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !30
  br label %__nv_sqrtf.exit49, !dbg !30

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !30
  br label %__nv_sqrtf.exit49, !dbg !30

131:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %134, label %132, !dbg !30

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !30
  br label %__nv_sqrtf.exit49, !dbg !30

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !30
  br label %__nv_sqrtf.exit49, !dbg !30

__nv_sqrtf.exit49:                                ; preds = %127, %129, %132, %134
  %.0.i47 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i50 = icmp eq i32 %136, 0, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i53 = icmp eq i32 %137, 0, !dbg !30
  br i1 %.not.i50, label %143, label %138, !dbg !30

138:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %141, label %139, !dbg !30

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit54, !dbg !30

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit54, !dbg !30

143:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %146, label %144, !dbg !30

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit54, !dbg !30

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !30
  br label %__nv_sqrtf.exit54, !dbg !30

__nv_sqrtf.exit54:                                ; preds = %139, %141, %144, %146
  %.0.i52 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !30
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i55 = icmp eq i32 %148, 0, !dbg !30
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i58 = icmp eq i32 %149, 0, !dbg !30
  br i1 %.not.i55, label %155, label %150, !dbg !30

150:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %153, label %151, !dbg !30

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !30
  br label %__nv_sqrtf.exit59, !dbg !30

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !30
  br label %__nv_sqrtf.exit59, !dbg !30

155:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %158, label %156, !dbg !30

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !30
  br label %__nv_sqrtf.exit59, !dbg !30

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !30
  br label %__nv_sqrtf.exit59, !dbg !30

__nv_sqrtf.exit59:                                ; preds = %151, %153, %156, %158
  %.0.i57 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !30
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i60 = icmp eq i32 %160, 0, !dbg !30
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i63 = icmp eq i32 %161, 0, !dbg !30
  br i1 %.not.i60, label %167, label %162, !dbg !30

162:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %165, label %163, !dbg !30

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !30
  br label %__nv_sqrtf.exit64, !dbg !30

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !30
  br label %__nv_sqrtf.exit64, !dbg !30

167:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %170, label %168, !dbg !30

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !30
  br label %__nv_sqrtf.exit64, !dbg !30

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !30
  br label %__nv_sqrtf.exit64, !dbg !30

__nv_sqrtf.exit64:                                ; preds = %163, %165, %168, %170
  %.0.i62 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !30
  %172 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %173 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %174 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !20
  %175 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %176 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !20
  %178 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %180 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %182 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !20
  %184 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %185 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %186 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %187 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %188 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %189 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %190 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %191 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %192 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %194 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %195 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %196 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %198 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %203 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %204 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !26
  %205 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !26
  %206 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !26
  %207 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !26
  %208 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %209 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %210 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %211 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %212 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %213 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %214 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %215 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %216 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %217 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %219 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %220 = shl i32 %13, 2, !dbg !12
  %221 = and i32 %220, 508, !dbg !12
  %222 = or disjoint i32 %221, 512, !dbg !12
  %223 = or disjoint i32 %12, %222, !dbg !13
  %224 = sext i32 %223 to i64, !dbg !15
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !15
  %226 = or disjoint i32 %12, %221, !dbg !13
  %227 = sext i32 %226 to i64, !dbg !15
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !15
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !31
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !31
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !31
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !31
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !31
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !31
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !31
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !31
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !32
  %238 = getelementptr inbounds i8, ptr addrspace(3) %237, i32 16, !dbg !32
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !32
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !32
  %241 = getelementptr inbounds i8, ptr addrspace(3) %239, i32 4, !dbg !32
  %242 = getelementptr inbounds i8, ptr addrspace(3) %239, i32 8, !dbg !32
  %243 = getelementptr inbounds i8, ptr addrspace(3) %239, i32 12, !dbg !32
  %244 = getelementptr i1, ptr addrspace(1) %8, i64 %20, !dbg !33
  %245 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !16
  %246 = insertelement <4 x i32> %245, i32 %190, i64 1, !dbg !16
  %247 = insertelement <4 x i32> %246, i32 %187, i64 2, !dbg !16
  %248 = insertelement <4 x i32> %247, i32 %184, i64 3, !dbg !16
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !16
  %250 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !18
  %251 = insertelement <4 x i32> %250, i32 %191, i64 1, !dbg !18
  %252 = insertelement <4 x i32> %251, i32 %188, i64 2, !dbg !18
  %253 = insertelement <4 x i32> %252, i32 %185, i64 3, !dbg !18
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !18
  %255 = fadd <4 x float> %249, %254, !dbg !34
  %256 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !20
  %257 = insertelement <4 x i32> %256, i32 %192, i64 1, !dbg !20
  %258 = insertelement <4 x i32> %257, i32 %189, i64 2, !dbg !20
  %259 = insertelement <4 x i32> %258, i32 %186, i64 3, !dbg !20
  %260 = bitcast <4 x i32> %259 to <4 x float>, !dbg !20
  %261 = fsub <4 x float> %255, %260, !dbg !35
  %262 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !28
  %263 = insertelement <4 x i32> %262, i32 %202, i64 1, !dbg !28
  %264 = insertelement <4 x i32> %263, i32 %201, i64 2, !dbg !28
  %265 = insertelement <4 x i32> %264, i32 %200, i64 3, !dbg !28
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !28
  %267 = insertelement <4 x i32> poison, i32 %211, i64 0, !dbg !26
  %268 = insertelement <4 x i32> %267, i32 %210, i64 1, !dbg !26
  %269 = insertelement <4 x i32> %268, i32 %209, i64 2, !dbg !26
  %270 = insertelement <4 x i32> %269, i32 %208, i64 3, !dbg !26
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !26
  %272 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !24
  %273 = insertelement <4 x i32> %272, i32 %218, i64 1, !dbg !24
  %274 = insertelement <4 x i32> %273, i32 %217, i64 2, !dbg !24
  %275 = insertelement <4 x i32> %274, i32 %216, i64 3, !dbg !24
  %276 = bitcast <4 x i32> %275 to <4 x float>, !dbg !24
  %277 = insertelement <4 x float> poison, float %229, i64 0, !dbg !36
  %278 = insertelement <4 x float> %277, float %230, i64 1, !dbg !36
  %279 = insertelement <4 x float> %278, float %231, i64 2, !dbg !36
  %280 = insertelement <4 x float> %279, float %232, i64 3, !dbg !36
  %281 = fmul <4 x float> %261, %280, !dbg !36
  %282 = fmul <4 x float> %281, %276, !dbg !37
  %283 = fadd <4 x float> %282, %271, !dbg !38
  %284 = fadd <4 x float> %283, %266, !dbg !39
  %285 = fcmp ogt <4 x float> %284, zeroinitializer, !dbg !40
  %286 = extractelement <4 x float> %284, i64 0, !dbg !41
  %287 = fmul float %286, 0x3F847AE140000000, !dbg !42
  %288 = extractelement <4 x float> %284, i64 1, !dbg !41
  %289 = fmul float %288, 0x3F847AE140000000, !dbg !42
  %290 = extractelement <4 x float> %284, i64 2, !dbg !41
  %291 = fmul float %290, 0x3F847AE140000000, !dbg !42
  %292 = extractelement <4 x float> %284, i64 3, !dbg !41
  %293 = fmul float %292, 0x3F847AE140000000, !dbg !42
  %294 = extractelement <4 x i1> %285, i64 0, !dbg !41
  %295 = select i1 %294, float %286, float %287, !dbg !41
  %296 = extractelement <4 x i1> %285, i64 1, !dbg !41
  %297 = select i1 %296, float %288, float %289, !dbg !41
  %298 = extractelement <4 x i1> %285, i64 2, !dbg !41
  %299 = select i1 %298, float %290, float %291, !dbg !41
  %300 = extractelement <4 x i1> %285, i64 3, !dbg !41
  %301 = select i1 %300, float %292, float %293, !dbg !41
  %bc = bitcast <4 x float> %255 to <4 x i32>, !dbg !32
  %302 = extractelement <4 x i32> %bc, i64 0, !dbg !32
  %bc65 = bitcast <4 x float> %255 to <4 x i32>, !dbg !32
  %303 = extractelement <4 x i32> %bc65, i64 1, !dbg !32
  %bc66 = bitcast <4 x float> %255 to <4 x i32>, !dbg !32
  %304 = extractelement <4 x i32> %bc66, i64 2, !dbg !32
  %bc67 = bitcast <4 x float> %255 to <4 x i32>, !dbg !32
  %305 = extractelement <4 x i32> %bc67, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %237, i32 %302, i32 %303, i32 %304, i32 %305, i1 true) #4, !dbg !32
  %306 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !16
  %307 = insertelement <4 x i32> %306, i32 %178, i64 1, !dbg !16
  %308 = insertelement <4 x i32> %307, i32 %175, i64 2, !dbg !16
  %309 = insertelement <4 x i32> %308, i32 %172, i64 3, !dbg !16
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !16
  %311 = insertelement <4 x i32> poison, i32 %182, i64 0, !dbg !18
  %312 = insertelement <4 x i32> %311, i32 %179, i64 1, !dbg !18
  %313 = insertelement <4 x i32> %312, i32 %176, i64 2, !dbg !18
  %314 = insertelement <4 x i32> %313, i32 %173, i64 3, !dbg !18
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !18
  %316 = fadd <4 x float> %310, %315, !dbg !34
  %317 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !20
  %318 = insertelement <4 x i32> %317, i32 %180, i64 1, !dbg !20
  %319 = insertelement <4 x i32> %318, i32 %177, i64 2, !dbg !20
  %320 = insertelement <4 x i32> %319, i32 %174, i64 3, !dbg !20
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !20
  %322 = fsub <4 x float> %316, %321, !dbg !35
  %323 = insertelement <4 x i32> poison, i32 %199, i64 0, !dbg !28
  %324 = insertelement <4 x i32> %323, i32 %198, i64 1, !dbg !28
  %325 = insertelement <4 x i32> %324, i32 %197, i64 2, !dbg !28
  %326 = insertelement <4 x i32> %325, i32 %196, i64 3, !dbg !28
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !28
  %328 = insertelement <4 x i32> poison, i32 %207, i64 0, !dbg !26
  %329 = insertelement <4 x i32> %328, i32 %206, i64 1, !dbg !26
  %330 = insertelement <4 x i32> %329, i32 %205, i64 2, !dbg !26
  %331 = insertelement <4 x i32> %330, i32 %204, i64 3, !dbg !26
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !26
  %333 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !24
  %334 = insertelement <4 x i32> %333, i32 %214, i64 1, !dbg !24
  %335 = insertelement <4 x i32> %334, i32 %213, i64 2, !dbg !24
  %336 = insertelement <4 x i32> %335, i32 %212, i64 3, !dbg !24
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !24
  %338 = insertelement <4 x float> poison, float %233, i64 0, !dbg !36
  %339 = insertelement <4 x float> %338, float %234, i64 1, !dbg !36
  %340 = insertelement <4 x float> %339, float %235, i64 2, !dbg !36
  %341 = insertelement <4 x float> %340, float %236, i64 3, !dbg !36
  %342 = fmul <4 x float> %322, %341, !dbg !36
  %343 = fmul <4 x float> %342, %337, !dbg !37
  %344 = fadd <4 x float> %343, %332, !dbg !38
  %345 = fadd <4 x float> %344, %327, !dbg !39
  %346 = fcmp ogt <4 x float> %345, zeroinitializer, !dbg !40
  %347 = extractelement <4 x float> %345, i64 0, !dbg !41
  %348 = fmul float %347, 0x3F847AE140000000, !dbg !42
  %349 = extractelement <4 x float> %345, i64 1, !dbg !41
  %350 = fmul float %349, 0x3F847AE140000000, !dbg !42
  %351 = extractelement <4 x float> %345, i64 2, !dbg !41
  %352 = fmul float %351, 0x3F847AE140000000, !dbg !42
  %353 = extractelement <4 x float> %345, i64 3, !dbg !41
  %354 = fmul float %353, 0x3F847AE140000000, !dbg !42
  %355 = extractelement <4 x i1> %346, i64 0, !dbg !41
  %356 = select i1 %355, float %347, float %348, !dbg !41
  %357 = extractelement <4 x i1> %346, i64 1, !dbg !41
  %358 = select i1 %357, float %349, float %350, !dbg !41
  %359 = extractelement <4 x i1> %346, i64 2, !dbg !41
  %360 = select i1 %359, float %351, float %352, !dbg !41
  %361 = extractelement <4 x i1> %346, i64 3, !dbg !41
  %362 = select i1 %361, float %353, float %354, !dbg !41
  %bc68 = bitcast <4 x float> %316 to <4 x i32>, !dbg !32
  %363 = extractelement <4 x i32> %bc68, i64 0, !dbg !32
  %bc69 = bitcast <4 x float> %316 to <4 x i32>, !dbg !32
  %364 = extractelement <4 x i32> %bc69, i64 1, !dbg !32
  %bc70 = bitcast <4 x float> %316 to <4 x i32>, !dbg !32
  %365 = extractelement <4 x i32> %bc70, i64 2, !dbg !32
  %bc71 = bitcast <4 x float> %316 to <4 x i32>, !dbg !32
  %366 = extractelement <4 x i32> %bc71, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %238, i32 %363, i32 %364, i32 %365, i32 %366, i1 true) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %367 = load <4 x i32>, ptr addrspace(3) %240, align 16, !dbg !32
  %.extract = load i32, ptr addrspace(3) %239, align 16, !dbg !32
  %.extract8 = load i32, ptr addrspace(3) %241, align 4, !dbg !32
  %.extract9 = load i32, ptr addrspace(3) %242, align 8, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %243, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %228, i1 true) #4, !dbg !32
  %.extract11 = extractelement <4 x i32> %367, i64 0, !dbg !32
  %.extract12 = extractelement <4 x i32> %367, i64 1, !dbg !32
  %.extract13 = extractelement <4 x i32> %367, i64 2, !dbg !32
  %.extract14 = extractelement <4 x i32> %367, i64 3, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %225, i1 true) #4, !dbg !32
  %368 = zext <4 x i1> %285 to <4 x i8>, !dbg !43
  %369 = bitcast <4 x i8> %368 to i32, !dbg !43
  %370 = zext <4 x i1> %346 to <4 x i8>, !dbg !43
  %371 = bitcast <4 x i8> %370 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %369, i32 %371, ptr addrspace(1) %244, i1 true) #4, !dbg !43
  %372 = getelementptr float, ptr addrspace(1) %1, i64 %227, !dbg !44
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %374 = bitcast float %295 to i32, !dbg !45
  %375 = bitcast float %297 to i32, !dbg !45
  %376 = bitcast float %299 to i32, !dbg !45
  %377 = bitcast float %301 to i32, !dbg !45
  %378 = bitcast float %356 to i32, !dbg !45
  %379 = bitcast float %358 to i32, !dbg !45
  %380 = bitcast float %360 to i32, !dbg !45
  %381 = bitcast float %362 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %237, i32 %374, i32 %375, i32 %376, i32 %377, i1 true) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %238, i32 %378, i32 %379, i32 %380, i32 %381, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %382 = load <4 x i32>, ptr addrspace(3) %240, align 16, !dbg !45
  %.extract22 = load i32, ptr addrspace(3) %239, align 16, !dbg !45
  %.extract23 = load i32, ptr addrspace(3) %241, align 4, !dbg !45
  %.extract24 = load i32, ptr addrspace(3) %242, align 8, !dbg !45
  %.extract25 = load i32, ptr addrspace(3) %243, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %372, i1 true) #4, !dbg !45
  %.extract26 = extractelement <4 x i32> %382, i64 0, !dbg !45
  %.extract27 = extractelement <4 x i32> %382, i64 1, !dbg !45
  %.extract28 = extractelement <4 x i32> %382, i64 2, !dbg !45
  %.extract29 = extractelement <4 x i32> %382, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %373, i1 true) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cscwif2vept34abdszkgkbtt3kj6gsyow3sinrybqup6l7hgzym6.py", directory: "inductor_cache/sc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 51, column: 39, scope: !7)
!33 = !DILocation(line: 52, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 20, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 35, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 37, scope: !7)
!44 = !DILocation(line: 53, column: 28, scope: !7)
!45 = !DILocation(line: 53, column: 40, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
