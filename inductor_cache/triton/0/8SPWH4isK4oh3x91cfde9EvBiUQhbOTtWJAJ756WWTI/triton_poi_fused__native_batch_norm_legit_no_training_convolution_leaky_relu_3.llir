; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = icmp slt i32 %14, 51200, !dbg !14
  %19 = sdiv i32 %14, 25, !dbg !15
  %20 = sdiv i32 %15, 25, !dbg !15
  %21 = sdiv i32 %16, 25, !dbg !15
  %22 = sdiv i32 %17, 25, !dbg !15
  %23 = srem i32 %19, 512, !dbg !16
  %24 = srem i32 %20, 512, !dbg !16
  %25 = srem i32 %21, 512, !dbg !16
  %26 = srem i32 %22, 512, !dbg !16
  %27 = sext i32 %14 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !18
  %30 = sext i32 %23 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = sext i32 %24 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = sext i32 %25 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %36 = sext i32 %26 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #3, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %18) #3, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %18) #3, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %18) #3, !dbg !24
  %55 = bitcast i32 %54 to float, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %18) #3, !dbg !24
  %59 = bitcast i32 %58 to float, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %18) #3, !dbg !24
  %61 = bitcast i32 %60 to float, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %18) #3, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %18) #3, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %18) #3, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %18) #3, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %18) #3, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %18) #3, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %18) #3, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %18) #3, !dbg !28
  %78 = fadd float %55, 0x3EE4F8B580000000, !dbg !29
  %79 = fadd float %57, 0x3EE4F8B580000000, !dbg !29
  %80 = fadd float %59, 0x3EE4F8B580000000, !dbg !29
  %81 = fadd float %61, 0x3EE4F8B580000000, !dbg !29
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %82, 0, !dbg !30
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %83, 0, !dbg !30
  br i1 %.not.i, label %89, label %84, !dbg !30

84:                                               ; preds = %8
  br i1 %.not1.i, label %87, label %85, !dbg !30

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

89:                                               ; preds = %8
  br i1 %.not1.i, label %92, label %90, !dbg !30

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !30
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %94, 0, !dbg !30
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %95, 0, !dbg !30
  br i1 %.not.i1, label %101, label %96, !dbg !30

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !30

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !30

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %97, %99, %102, %104
  %.0.i3 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !30
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %106, 0, !dbg !30
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !30
  br i1 %.not.i6, label %113, label %108, !dbg !30

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !30

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !30

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !30
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %118, 0, !dbg !30
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %119, 0, !dbg !30
  br i1 %.not.i11, label %125, label %120, !dbg !30

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !30

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

125:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %128, label %126, !dbg !30

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %121, %123, %126, %128
  %.0.i13 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !18
  %131 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !20
  %132 = insertelement <4 x i32> %131, i32 %40, i64 1, !dbg !20
  %133 = insertelement <4 x i32> %132, i32 %39, i64 2, !dbg !20
  %134 = insertelement <4 x i32> %133, i32 %38, i64 3, !dbg !20
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !20
  %136 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !22
  %137 = insertelement <4 x i32> %136, i32 %48, i64 1, !dbg !22
  %138 = insertelement <4 x i32> %137, i32 %47, i64 2, !dbg !22
  %139 = insertelement <4 x i32> %138, i32 %46, i64 3, !dbg !22
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !22
  %141 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !18
  %142 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !18
  %143 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !18
  %144 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !28
  %145 = insertelement <4 x i32> %144, i32 %76, i64 1, !dbg !28
  %146 = insertelement <4 x i32> %145, i32 %75, i64 2, !dbg !28
  %147 = insertelement <4 x i32> %146, i32 %74, i64 3, !dbg !28
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !28
  %149 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !26
  %150 = insertelement <4 x i32> %149, i32 %68, i64 1, !dbg !26
  %151 = insertelement <4 x i32> %150, i32 %67, i64 2, !dbg !26
  %152 = insertelement <4 x i32> %151, i32 %66, i64 3, !dbg !26
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !26
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %158 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !18
  %159 = insertelement <4 x i32> %158, i32 %141, i64 1, !dbg !18
  %160 = insertelement <4 x i32> %159, i32 %142, i64 2, !dbg !18
  %161 = insertelement <4 x i32> %160, i32 %143, i64 3, !dbg !18
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !18
  %163 = fadd <4 x float> %162, %135, !dbg !32
  %164 = fsub <4 x float> %163, %140, !dbg !33
  %165 = insertelement <4 x float> poison, float %157, i64 0, !dbg !34
  %166 = insertelement <4 x float> %165, float %156, i64 1, !dbg !34
  %167 = insertelement <4 x float> %166, float %155, i64 2, !dbg !34
  %168 = insertelement <4 x float> %167, float %154, i64 3, !dbg !34
  %169 = fmul <4 x float> %164, %168, !dbg !34
  %170 = fmul <4 x float> %169, %153, !dbg !35
  %171 = fadd <4 x float> %170, %148, !dbg !36
  %172 = fcmp ogt <4 x float> %171, zeroinitializer, !dbg !37
  %173 = extractelement <4 x float> %171, i64 3, !dbg !38
  %174 = fmul float %173, 0x3FC99999A0000000, !dbg !39
  %175 = extractelement <4 x float> %171, i64 2, !dbg !38
  %176 = fmul float %175, 0x3FC99999A0000000, !dbg !39
  %177 = extractelement <4 x float> %171, i64 1, !dbg !38
  %178 = fmul float %177, 0x3FC99999A0000000, !dbg !39
  %179 = extractelement <4 x float> %171, i64 0, !dbg !38
  %180 = fmul float %179, 0x3FC99999A0000000, !dbg !39
  %181 = extractelement <4 x i1> %172, i64 3, !dbg !38
  %182 = select i1 %181, float %173, float %174, !dbg !38
  %183 = extractelement <4 x i1> %172, i64 2, !dbg !38
  %184 = select i1 %183, float %175, float %176, !dbg !38
  %185 = extractelement <4 x i1> %172, i64 1, !dbg !38
  %186 = select i1 %185, float %177, float %178, !dbg !38
  %187 = extractelement <4 x i1> %172, i64 0, !dbg !38
  %188 = select i1 %187, float %179, float %180, !dbg !38
  %bc = bitcast <4 x float> %163 to <4 x i32>, !dbg !40
  %189 = extractelement <4 x i32> %bc, i64 3, !dbg !40
  %bc16 = bitcast <4 x float> %163 to <4 x i32>, !dbg !40
  %190 = extractelement <4 x i32> %bc16, i64 2, !dbg !40
  %bc17 = bitcast <4 x float> %163 to <4 x i32>, !dbg !40
  %191 = extractelement <4 x i32> %bc17, i64 1, !dbg !40
  %bc18 = bitcast <4 x float> %163 to <4 x i32>, !dbg !40
  %192 = extractelement <4 x i32> %bc18, i64 0, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %190, i32 %191, i32 %192, ptr addrspace(1) %28, i1 %18) #3, !dbg !40
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !41
  %194 = bitcast float %182 to i32, !dbg !42
  %195 = bitcast float %184 to i32, !dbg !42
  %196 = bitcast float %186 to i32, !dbg !42
  %197 = bitcast float %188 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %194, i32 %195, i32 %196, i32 %197, ptr addrspace(1) %193, i1 %18) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clldlzny4whg3wldh2kjabjetlaatiaivqmlmy7fpl7bstnv3geg.py", directory: "inductor_cache/ll")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 35, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 39, scope: !7)
!41 = !DILocation(line: 50, column: 28, scope: !7)
!42 = !DILocation(line: 50, column: 40, scope: !7)
!43 = !DILocation(line: 50, column: 4, scope: !7)
