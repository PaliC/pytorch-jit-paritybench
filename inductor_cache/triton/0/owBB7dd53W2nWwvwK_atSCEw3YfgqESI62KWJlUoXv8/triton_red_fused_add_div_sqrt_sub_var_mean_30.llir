; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_sqrt_sub_var_mean_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 2044, !dbg !11
  %12 = shl i32 %6, 11, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = bitcast i32 %17 to float, !dbg !15
  %22 = bitcast i32 %18 to float, !dbg !15
  %23 = bitcast i32 %19 to float, !dbg !15
  %24 = bitcast i32 %20 to float, !dbg !15
  %25 = fsub float %22, %21, !dbg !16
  %26 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float 2.000000e+00) #5, !dbg !21
  %27 = fmul float %26, %25, !dbg !22
  %28 = fadd float %27, %21, !dbg !23
  %29 = fmul float %25, %25, !dbg !24
  %30 = fmul float %26, %29, !dbg !25
  %31 = fadd float %30, 0.000000e+00, !dbg !26
  %32 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float 3.000000e+00) #5, !dbg !21
  %33 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float 4.000000e+00) #5, !dbg !21
  %34 = fsub float %23, %28, !dbg !16
  %35 = fmul float %32, %34, !dbg !22
  %36 = fadd float %28, %35, !dbg !23
  %37 = fsub float %24, %36, !dbg !16
  %38 = insertelement <2 x float> poison, float %34, i64 0, !dbg !24
  %39 = insertelement <2 x float> %38, float %37, i64 1, !dbg !24
  %40 = fmul <2 x float> %39, %39, !dbg !24
  %41 = fmul <2 x float> %40, <float 2.000000e+00, float 3.000000e+00>, !dbg !27
  %42 = insertelement <2 x float> poison, float %32, i64 0, !dbg !25
  %43 = insertelement <2 x float> %42, float %33, i64 1, !dbg !25
  %44 = fmul <2 x float> %43, %41, !dbg !25
  %45 = extractelement <2 x float> %44, i64 0, !dbg !26
  %46 = fadd float %31, %45, !dbg !26
  %47 = fmul float %33, %37, !dbg !22
  %48 = fadd float %36, %47, !dbg !23
  %49 = extractelement <2 x float> %44, i64 1, !dbg !26
  %50 = fadd float %46, %49, !dbg !26
  %51 = bitcast float %48 to i32, !dbg !28
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = bitcast float %50 to i32, !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 1082130432, i32 16, i32 31), !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = fsub float %53, %48, !dbg !16
  %60 = fadd float %58, 4.000000e+00, !dbg !29
  %61 = fcmp oeq float %60, 0.000000e+00, !dbg !30
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float %60) #5, !dbg !21
  %63 = select i1 %61, float 0.000000e+00, float %62, !dbg !31
  %64 = fmul float %63, %59, !dbg !22
  %65 = fadd float %48, %64, !dbg !23
  %66 = fadd float %50, %56, !dbg !32
  %67 = fmul float %59, %59, !dbg !24
  %68 = fmul float %67, 4.000000e+00, !dbg !27
  %69 = fmul float %63, %68, !dbg !25
  %70 = fadd float %66, %69, !dbg !26
  %71 = bitcast float %65 to i32, !dbg !28
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = bitcast float %70 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = bitcast float %60 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fsub float %73, %65, !dbg !16
  %81 = fadd float %60, %79, !dbg !29
  %82 = fcmp oeq float %81, 0.000000e+00, !dbg !30
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %79, float %81) #5, !dbg !21
  %84 = select i1 %82, float 0.000000e+00, float %83, !dbg !31
  %85 = fmul float %84, %80, !dbg !22
  %86 = fadd float %65, %85, !dbg !23
  %87 = fadd float %70, %76, !dbg !32
  %88 = fmul float %80, %80, !dbg !24
  %89 = fmul float %60, %88, !dbg !27
  %90 = fmul float %84, %89, !dbg !25
  %91 = fadd float %87, %90, !dbg !26
  %92 = bitcast float %86 to i32, !dbg !28
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 4, i32 31), !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = bitcast float %91 to i32, !dbg !28
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = bitcast float %81 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fsub float %94, %86, !dbg !16
  %102 = fadd float %81, %100, !dbg !29
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !30
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float %102) #5, !dbg !21
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !31
  %106 = fmul float %101, %105, !dbg !22
  %107 = fadd float %86, %106, !dbg !23
  %108 = fadd float %91, %97, !dbg !32
  %109 = fmul float %101, %101, !dbg !24
  %110 = fmul float %81, %109, !dbg !27
  %111 = fmul float %105, %110, !dbg !25
  %112 = fadd float %108, %111, !dbg !26
  %113 = bitcast float %107 to i32, !dbg !28
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = bitcast float %112 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = bitcast float %102 to i32, !dbg !28
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = fsub float %115, %107, !dbg !16
  %123 = fadd float %102, %121, !dbg !29
  %124 = fcmp oeq float %123, 0.000000e+00, !dbg !30
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %123) #5, !dbg !21
  %126 = select i1 %124, float 0.000000e+00, float %125, !dbg !31
  %127 = fmul float %122, %126, !dbg !22
  %128 = fadd float %107, %127, !dbg !23
  %129 = fadd float %112, %118, !dbg !32
  %130 = fmul float %122, %122, !dbg !24
  %131 = fmul float %102, %130, !dbg !27
  %132 = fmul float %126, %131, !dbg !25
  %133 = fadd float %129, %132, !dbg !26
  %134 = bitcast float %128 to i32, !dbg !28
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = bitcast float %133 to i32, !dbg !28
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !28
  %139 = bitcast i32 %138 to float, !dbg !28
  %140 = bitcast float %123 to i32, !dbg !28
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 1, i32 31), !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = fsub float %136, %128, !dbg !16
  %144 = fadd float %123, %142, !dbg !29
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !30
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %144) #5, !dbg !21
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !31
  %148 = fmul float %143, %147, !dbg !22
  %149 = fadd float %128, %148, !dbg !23
  %150 = fadd float %133, %139, !dbg !32
  %151 = fmul float %143, %143, !dbg !24
  %152 = fmul float %123, %151, !dbg !27
  %153 = fmul float %147, %152, !dbg !25
  %154 = fadd float %150, %153, !dbg !26
  %155 = icmp eq i32 %8, 0, !dbg !28
  %156 = and i32 %9, 15, !dbg !28
  %157 = zext nneg i32 %156 to i64, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i64 %157, !dbg !28
  %159 = bitcast float %149 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 %155) #5, !dbg !28
  %160 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %157, !dbg !28
  %161 = bitcast float %154 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 %155) #5, !dbg !28
  %162 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %157, !dbg !28
  %163 = bitcast float %144 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 %155) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %164 = icmp slt i32 %7, 16, !dbg !28
  %165 = sext i32 %7 to i64, !dbg !28
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i64 %165, !dbg !28
  %167 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %166, i1 %164) #5, !dbg !28
  %168 = bitcast i32 %167 to float, !dbg !28
  %169 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %165, !dbg !28
  %170 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %169, i1 %164) #5, !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %165, !dbg !28
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %164) #5, !dbg !28
  %174 = bitcast i32 %173 to float, !dbg !28
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !28
  %178 = bitcast i32 %177 to float, !dbg !28
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !28
  %180 = bitcast i32 %179 to float, !dbg !28
  %181 = fsub float %176, %168, !dbg !16
  %182 = fadd float %174, %180, !dbg !29
  %183 = fcmp oeq float %182, 0.000000e+00, !dbg !30
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %182) #5, !dbg !21
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !31
  %186 = fmul float %181, %185, !dbg !22
  %187 = fadd float %186, %168, !dbg !23
  %188 = fadd float %171, %178, !dbg !32
  %189 = fmul float %181, %181, !dbg !24
  %190 = fmul float %189, %174, !dbg !27
  %191 = fmul float %190, %185, !dbg !25
  %192 = fadd float %188, %191, !dbg !26
  %193 = bitcast float %187 to i32, !dbg !28
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !28
  %195 = bitcast i32 %194 to float, !dbg !28
  %196 = bitcast float %192 to i32, !dbg !28
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !28
  %198 = bitcast i32 %197 to float, !dbg !28
  %199 = bitcast float %182 to i32, !dbg !28
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 4, i32 31), !dbg !28
  %201 = bitcast i32 %200 to float, !dbg !28
  %202 = fsub float %195, %187, !dbg !16
  %203 = fadd float %182, %201, !dbg !29
  %204 = fcmp oeq float %203, 0.000000e+00, !dbg !30
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %203) #5, !dbg !21
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !31
  %207 = fmul float %202, %206, !dbg !22
  %208 = fadd float %187, %207, !dbg !23
  %209 = fadd float %192, %198, !dbg !32
  %210 = fmul float %202, %202, !dbg !24
  %211 = fmul float %182, %210, !dbg !27
  %212 = fmul float %206, %211, !dbg !25
  %213 = fadd float %209, %212, !dbg !26
  %214 = bitcast float %208 to i32, !dbg !28
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !28
  %216 = bitcast i32 %215 to float, !dbg !28
  %217 = bitcast float %213 to i32, !dbg !28
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !28
  %219 = bitcast i32 %218 to float, !dbg !28
  %220 = bitcast float %203 to i32, !dbg !28
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !28
  %222 = bitcast i32 %221 to float, !dbg !28
  %223 = fsub float %216, %208, !dbg !16
  %224 = fadd float %203, %222, !dbg !29
  %225 = fcmp oeq float %224, 0.000000e+00, !dbg !30
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %224) #5, !dbg !21
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !31
  %228 = fmul float %223, %227, !dbg !22
  %229 = fadd float %208, %228, !dbg !23
  %230 = fadd float %213, %219, !dbg !32
  %231 = fmul float %223, %223, !dbg !24
  %232 = fmul float %203, %231, !dbg !27
  %233 = fmul float %227, %232, !dbg !25
  %234 = fadd float %230, %233, !dbg !26
  %235 = bitcast float %229 to i32, !dbg !28
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !28
  %237 = bitcast i32 %236 to float, !dbg !28
  %238 = bitcast float %234 to i32, !dbg !28
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !28
  %240 = bitcast i32 %239 to float, !dbg !28
  %241 = bitcast float %224 to i32, !dbg !28
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 1, i32 31), !dbg !28
  %243 = bitcast i32 %242 to float, !dbg !28
  %244 = fsub float %237, %229, !dbg !16
  %245 = fadd float %224, %243, !dbg !29
  %246 = fcmp oeq float %245, 0.000000e+00, !dbg !30
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %245) #5, !dbg !21
  %248 = select i1 %246, float 0.000000e+00, float %247, !dbg !31
  %249 = fmul float %244, %248, !dbg !22
  %250 = fadd float %229, %249, !dbg !23
  %251 = fadd float %234, %240, !dbg !32
  %252 = fmul float %244, %244, !dbg !24
  %253 = fmul float %224, %252, !dbg !27
  %254 = fmul float %248, %253, !dbg !25
  %255 = fadd float %251, %254, !dbg !26
  %256 = and i32 %7, 15, !dbg !28
  %257 = icmp eq i32 %256, 0, !dbg !28
  %258 = and i1 %164, %257, !dbg !28
  %259 = bitcast float %250 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %259, i1 %258) #5, !dbg !28
  %260 = bitcast float %255 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %260, i1 %258) #5, !dbg !28
  %261 = bitcast float %245 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %261, i1 %258) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %262 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %263 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !28
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float 2.048000e+03) #5, !dbg !33
  %265 = fadd float %264, 0x3DDB7CDFE0000000, !dbg !34
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %266, 0, !dbg !35
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i = icmp eq i32 %267, 0, !dbg !35
  br i1 %.not.i, label %273, label %268, !dbg !35

268:                                              ; preds = %5
  br i1 %.not1.i, label %271, label %269, !dbg !35

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

273:                                              ; preds = %5
  br i1 %.not1.i, label %276, label %274, !dbg !35

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %269, %271, %274, %276
  %.0.i = phi float [ %270, %269 ], [ %272, %271 ], [ %275, %274 ], [ %277, %276 ], !dbg !35
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i16 = icmp eq i32 %284, 0, !dbg !35
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !35
  %.not1.i19 = icmp eq i32 %285, 0, !dbg !35
  br i1 %.not.i16, label %291, label %286, !dbg !35

286:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %289, label %287, !dbg !35

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

291:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %294, label %292, !dbg !35

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %265) #5, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %287, %289, %292, %294
  %.0.i18 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %296 = sext i32 %6 to i64, !dbg !37
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !37
  %urem = and i32 %7, 511, !dbg !38
  %298 = icmp eq i32 %urem, 0, !dbg !38
  %299 = bitcast float %.0.i to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %297, i1 %298) #5, !dbg !38
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !39
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !39
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !39
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !39
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !39
  %305 = bitcast i32 %301 to float, !dbg !39
  %306 = bitcast i32 %302 to float, !dbg !39
  %307 = bitcast i32 %303 to float, !dbg !39
  %308 = bitcast i32 %304 to float, !dbg !39
  %309 = fsub float %305, %262, !dbg !40
  %310 = fsub float %306, %262, !dbg !40
  %311 = fsub float %307, %262, !dbg !40
  %312 = fsub float %308, %262, !dbg !40
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %.0.i18) #5, !dbg !41
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %.0.i18) #5, !dbg !41
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %.0.i18) #5, !dbg !41
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %.0.i18) #5, !dbg !41
  %317 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !42
  %318 = bitcast float %313 to i32, !dbg !43
  %319 = bitcast float %314 to i32, !dbg !43
  %320 = bitcast float %315 to i32, !dbg !43
  %321 = bitcast float %316 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %318, i32 %319, i32 %320, i32 %321, ptr addrspace(1) %317, i1 true) #5, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm3v24p2cde6oh4x2dyqz3e6foza7esuyuqr3bcdeiwjcui3ptuj.py", directory: "inductor_cache/m3")
!4 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_30, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_sqrt_sub_var_mean_30, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_sqrt_sub_var_mean_30", linkageName: "triton_red_fused_add_div_sqrt_sub_var_mean_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 33, scope: !7)
!12 = !DILocation(line: 34, column: 44, scope: !7)
!13 = !DILocation(line: 34, column: 39, scope: !7)
!14 = !DILocation(line: 34, column: 34, scope: !7)
!15 = !DILocation(line: 34, column: 49, scope: !7)
!16 = !DILocation(line: 192, column: 21, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 43, column: 41, scope: !7)
!21 = !DILocation(line: 194, column: 60, scope: !17, inlinedAt: !20)
!22 = !DILocation(line: 196, column: 25, scope: !17, inlinedAt: !20)
!23 = !DILocation(line: 196, column: 17, scope: !17, inlinedAt: !20)
!24 = !DILocation(line: 197, column: 30, scope: !17, inlinedAt: !20)
!25 = !DILocation(line: 197, column: 49, scope: !17, inlinedAt: !20)
!26 = !DILocation(line: 197, column: 22, scope: !17, inlinedAt: !20)
!27 = !DILocation(line: 197, column: 38, scope: !17, inlinedAt: !20)
!28 = !DILocation(line: 204, column: 46, scope: !19, inlinedAt: !20)
!29 = !DILocation(line: 193, column: 28, scope: !17, inlinedAt: !20)
!30 = !DILocation(line: 194, column: 39, scope: !17, inlinedAt: !20)
!31 = !DILocation(line: 194, column: 49, scope: !17, inlinedAt: !20)
!32 = !DILocation(line: 197, column: 15, scope: !17, inlinedAt: !20)
!33 = !DILocation(line: 49, column: 18, scope: !7)
!34 = !DILocation(line: 51, column: 18, scope: !7)
!35 = !DILocation(line: 52, column: 26, scope: !7)
!36 = !DILocation(line: 53, column: 4, scope: !7)
!37 = !DILocation(line: 54, column: 28, scope: !7)
!38 = !DILocation(line: 54, column: 39, scope: !7)
!39 = !DILocation(line: 59, column: 50, scope: !7)
!40 = !DILocation(line: 60, column: 24, scope: !7)
!41 = !DILocation(line: 61, column: 24, scope: !7)
!42 = !DILocation(line: 62, column: 29, scope: !7)
!43 = !DILocation(line: 62, column: 51, scope: !7)
!44 = !DILocation(line: 55, column: 4, scope: !7)
