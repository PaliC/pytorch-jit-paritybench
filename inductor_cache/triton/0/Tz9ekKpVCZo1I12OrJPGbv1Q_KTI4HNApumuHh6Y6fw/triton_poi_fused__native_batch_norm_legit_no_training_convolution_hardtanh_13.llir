; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 1, !dbg !12
  %14 = shl nuw nsw i32 %13, 2, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 6, !dbg !15
  %18 = lshr i32 %12, 1, !dbg !16
  %19 = and i32 %18, 63, !dbg !16
  %20 = or disjoint i32 %17, %19, !dbg !17
  %21 = icmp slt i32 %20, 64, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %22 = sdiv i32 %.frozen, 256, !dbg !19
  %23 = mul i32 %22, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %23, !dbg !20
  %24 = shl i32 %20, 8, !dbg !21
  %25 = add i32 %24, %.decomposed, !dbg !22
  %26 = shl i32 %22, 14, !dbg !23
  %27 = add i32 %25, %26, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #4, !dbg !26
  %31 = sext i32 %.decomposed to i64, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !27
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !29
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !30
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !30
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !30
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !30
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !30
  %40 = bitcast i32 %36 to float, !dbg !30
  %41 = bitcast i32 %37 to float, !dbg !30
  %42 = bitcast i32 %38 to float, !dbg !30
  %43 = bitcast i32 %39 to float, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !31
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !33
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !34
  %48 = fadd float %40, 0x3EE4F8B580000000, !dbg !35
  %49 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %50 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %51 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %52, 0, !dbg !36
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %53, 0, !dbg !36
  br i1 %.not.i, label %59, label %54, !dbg !36

54:                                               ; preds = %9
  br i1 %.not1.i, label %57, label %55, !dbg !36

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !36

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !36
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i6 = icmp eq i32 %64, 0, !dbg !36
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i9 = icmp eq i32 %65, 0, !dbg !36
  br i1 %.not.i6, label %71, label %66, !dbg !36

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %74, label %72, !dbg !36

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %67, %69, %72, %74
  %.0.i8 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i11 = icmp eq i32 %76, 0, !dbg !36
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i14 = icmp eq i32 %77, 0, !dbg !36
  br i1 %.not.i11, label %83, label %78, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

83:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %79, %81, %84, %86
  %.0.i13 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i16 = icmp eq i32 %88, 0, !dbg !36
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i19 = icmp eq i32 %89, 0, !dbg !36
  br i1 %.not.i16, label %95, label %90, !dbg !36

90:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !36
  br label %__nv_sqrtf.exit20, !dbg !36

__nv_sqrtf.exit20:                                ; preds = %91, %93, %96, %98
  %.0.i18 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !36
  %100 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !32
  %114 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !32
  %115 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !32
  %116 = shl i32 %12, 2, !dbg !16
  %117 = and i32 %116, 60, !dbg !16
  %118 = or disjoint i32 %17, %117, !dbg !17
  %119 = icmp slt i32 %118, 64, !dbg !18
  %120 = lshr i32 %12, 4, !dbg !12
  %121 = and i32 %120, 7, !dbg !12
  %122 = or disjoint i32 %11, %121, !dbg !13
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !37
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !37
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !37
  %127 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !26
  %128 = insertelement <4 x i32> %127, i32 %102, i64 1, !dbg !26
  %129 = insertelement <4 x i32> %128, i32 %104, i64 2, !dbg !26
  %130 = insertelement <4 x i32> %129, i32 %106, i64 3, !dbg !26
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !26
  %132 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !28
  %133 = insertelement <4 x i32> %132, i32 %103, i64 1, !dbg !28
  %134 = insertelement <4 x i32> %133, i32 %105, i64 2, !dbg !28
  %135 = insertelement <4 x i32> %134, i32 %107, i64 3, !dbg !28
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !28
  %137 = fsub <4 x float> %131, %136, !dbg !38
  %138 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !34
  %139 = insertelement <4 x i32> %138, i32 %109, i64 1, !dbg !34
  %140 = insertelement <4 x i32> %139, i32 %110, i64 2, !dbg !34
  %141 = insertelement <4 x i32> %140, i32 %111, i64 3, !dbg !34
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !34
  %143 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !32
  %144 = insertelement <4 x i32> %143, i32 %113, i64 1, !dbg !32
  %145 = insertelement <4 x i32> %144, i32 %114, i64 2, !dbg !32
  %146 = insertelement <4 x i32> %145, i32 %115, i64 3, !dbg !32
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !32
  %148 = insertelement <4 x float> poison, float %126, i64 0, !dbg !39
  %149 = insertelement <4 x float> %148, float %125, i64 1, !dbg !39
  %150 = insertelement <4 x float> %149, float %124, i64 2, !dbg !39
  %151 = insertelement <4 x float> %150, float %123, i64 3, !dbg !39
  %152 = fmul <4 x float> %137, %151, !dbg !39
  %153 = fmul <4 x float> %152, %147, !dbg !40
  %154 = fadd <4 x float> %153, %142, !dbg !41
  %155 = fcmp ole <4 x float> %154, zeroinitializer, !dbg !42
  %156 = select <4 x i1> %155, <4 x float> zeroinitializer, <4 x float> %154, !dbg !42
  %157 = fcmp olt <4 x float> %156, splat (float 6.000000e+00), !dbg !46
  %158 = extractelement <4 x float> %156, i64 3, !dbg !48
  %159 = fcmp uno float %158, 0.000000e+00, !dbg !48
  %160 = extractelement <4 x float> %156, i64 2, !dbg !48
  %161 = fcmp uno float %160, 0.000000e+00, !dbg !48
  %162 = extractelement <4 x float> %156, i64 1, !dbg !48
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !48
  %164 = extractelement <4 x float> %156, i64 0, !dbg !48
  %165 = fcmp uno float %164, 0.000000e+00, !dbg !48
  %166 = extractelement <4 x i1> %157, i64 3, !dbg !49
  %167 = or i1 %166, %159, !dbg !49
  %168 = extractelement <4 x i1> %157, i64 2, !dbg !49
  %169 = or i1 %168, %161, !dbg !49
  %170 = extractelement <4 x i1> %157, i64 1, !dbg !49
  %171 = or i1 %170, %163, !dbg !49
  %172 = extractelement <4 x i1> %157, i64 0, !dbg !49
  %173 = or i1 %172, %165, !dbg !49
  %174 = select i1 %167, float %158, float 6.000000e+00, !dbg !50
  %175 = select i1 %169, float %160, float 6.000000e+00, !dbg !50
  %176 = select i1 %171, float %162, float 6.000000e+00, !dbg !50
  %177 = select i1 %173, float %164, float 6.000000e+00, !dbg !50
  %178 = shl i32 %122, 6, !dbg !51
  %179 = add i32 %118, %178, !dbg !52
  %180 = sext i32 %179 to i64, !dbg !53
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %180, !dbg !53
  %182 = shl nuw nsw i32 %13, 8, !dbg !54
  %183 = or disjoint i32 %182, %19, !dbg !54
  %184 = and i32 %116, 508, !dbg !54
  %.idx = shl nuw nsw i32 %13, 4, !dbg !54
  %185 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !54
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !54
  %187 = bitcast float %174 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #4, !dbg !54
  %188 = or disjoint i32 %183, 64, !dbg !54
  %189 = lshr i32 %188, 6, !dbg !54
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !54
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !54
  %192 = bitcast float %175 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !54
  %193 = or disjoint i32 %183, 128, !dbg !54
  %194 = lshr i32 %193, 6, !dbg !54
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !54
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %193, !dbg !54
  %197 = bitcast float %176 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !54
  %198 = or disjoint i32 %183, 192, !dbg !54
  %199 = lshr i32 %198, 6, !dbg !54
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !54
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %198, !dbg !54
  %202 = bitcast float %177 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %203 = lshr i32 %184, 6, !dbg !54
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !54
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %184, !dbg !54
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !54
  %207 = or disjoint i32 %184, 1, !dbg !54
  %208 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %207, !dbg !54
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !54
  %210 = or disjoint i32 %184, 2, !dbg !54
  %211 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %210, !dbg !54
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !54
  %213 = or disjoint i32 %184, 3, !dbg !54
  %214 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %213, !dbg !54
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %209, i32 %212, i32 %215, ptr addrspace(1) %181, i1 %119) #4, !dbg !54
  %216 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !55
  %217 = bitcast float %174 to i32, !dbg !56
  %218 = bitcast float %175 to i32, !dbg !56
  %219 = bitcast float %176 to i32, !dbg !56
  %220 = bitcast float %177 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %216, i1 %21) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpknmvqg7o7ryzve5e4ilo6o5kibt3mf532coh37zavfxdjwata5.py", directory: "inductor_cache/pk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!49 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 33, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 45, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 57, scope: !7)
!57 = !DILocation(line: 53, column: 4, scope: !7)
