; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %9, i64 1, !dbg !14
  %13 = sdiv <2 x i32> %12, splat (i32 65536), !dbg !14
  %14 = trunc nsw <2 x i32> %13 to <2 x i16>, !dbg !15
  %15 = srem <2 x i16> %14, splat (i16 64), !dbg !15
  %16 = shufflevector <2 x i16> %15, <2 x i16> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !15
  %17 = extractelement <2 x i16> %15, i64 1, !dbg !16
  %.sext = sext i16 %17 to i32, !dbg !15
  %18 = extractelement <2 x i16> %15, i64 0, !dbg !16
  %.sext2 = sext i16 %18 to i32, !dbg !15
  %19 = sdiv <2 x i32> %12, splat (i32 1024), !dbg !17
  %20 = srem <2 x i32> %19, splat (i32 64), !dbg !18
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !18
  %22 = add nsw i32 %.sext, -1, !dbg !19
  %23 = add nsw i32 %.sext2, -1, !dbg !19
  %24 = extractelement <2 x i32> %20, i64 1, !dbg !20
  %25 = add nsw i32 %24, -1, !dbg !21
  %26 = extractelement <2 x i32> %20, i64 0, !dbg !20
  %27 = add nsw i32 %26, -1, !dbg !21
  %28 = icmp sgt <8 x i16> %16, <i16 61, i16 61, i16 1, i16 1, i16 -1, i16 -1, i16 0, i16 0>, !dbg !22
  %29 = extractelement <8 x i1> %28, i64 7, !dbg !23
  %30 = icmp sgt <8 x i32> %21, <i32 61, i32 61, i32 1, i32 1, i32 -1, i32 -1, i32 0, i32 0>, !dbg !24
  %31 = extractelement <8 x i1> %30, i64 7, !dbg !25
  %32 = and i1 %31, %29, !dbg !25
  %33 = extractelement <8 x i1> %28, i64 6, !dbg !23
  %34 = extractelement <8 x i1> %30, i64 6, !dbg !25
  %35 = and i1 %34, %33, !dbg !25
  %36 = add i32 %9, -66560, !dbg !26
  %37 = add i32 %9, -66048, !dbg !26
  %38 = sext i32 %36 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = sext i32 %37 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32, i32 0, i1 %32) #1, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !28
  %47 = bitcast i32 %43 to float, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = bitcast i32 %45 to float, !dbg !28
  %50 = bitcast i32 %46 to float, !dbg !28
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35, i32 0, i1 %35) #1, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = bitcast i32 %52 to float, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = extractelement <8 x i1> %30, i64 5, !dbg !29
  %61 = and i1 %60, %29, !dbg !29
  %62 = extractelement <8 x i1> %30, i64 4, !dbg !29
  %63 = and i1 %62, %33, !dbg !29
  %64 = add i32 %9, -65536, !dbg !30
  %65 = add i32 %9, -65024, !dbg !30
  %66 = sext i32 %64 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = sext i32 %65 to i64, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = bitcast i32 %73 to float, !dbg !32
  %78 = bitcast i32 %74 to float, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = bitcast i32 %82 to float, !dbg !32
  %87 = bitcast i32 %83 to float, !dbg !32
  %88 = fadd float %47, %75, !dbg !33
  %89 = fadd float %48, %76, !dbg !33
  %90 = fadd float %49, %77, !dbg !33
  %91 = fadd float %50, %78, !dbg !33
  %92 = fadd float %56, %84, !dbg !33
  %93 = fadd float %57, %85, !dbg !33
  %94 = fadd float %58, %86, !dbg !33
  %95 = fadd float %59, %87, !dbg !33
  %96 = add nsw i32 %24, 1, !dbg !34
  %97 = icmp ult i32 %96, 64, !dbg !34
  %98 = add nsw i32 %26, 1, !dbg !34
  %99 = icmp ult i32 %98, 64, !dbg !34
  %100 = and i1 %29, %97, !dbg !23
  %101 = and i1 %33, %99, !dbg !23
  %102 = add i32 %9, -64512, !dbg !35
  %103 = add i32 %9, -64000, !dbg !35
  %104 = sext i32 %102 to i64, !dbg !36
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !36
  %106 = sext i32 %103 to i64, !dbg !36
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !36
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #1, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !37
  %113 = bitcast i32 %109 to float, !dbg !37
  %114 = bitcast i32 %110 to float, !dbg !37
  %115 = bitcast i32 %111 to float, !dbg !37
  %116 = bitcast i32 %112 to float, !dbg !37
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #1, !dbg !37
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !37
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !37
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !37
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !37
  %122 = bitcast i32 %118 to float, !dbg !37
  %123 = bitcast i32 %119 to float, !dbg !37
  %124 = bitcast i32 %120 to float, !dbg !37
  %125 = bitcast i32 %121 to float, !dbg !37
  %126 = fadd float %88, %113, !dbg !38
  %127 = fadd float %89, %114, !dbg !38
  %128 = fadd float %90, %115, !dbg !38
  %129 = fadd float %91, %116, !dbg !38
  %130 = fadd float %92, %122, !dbg !38
  %131 = fadd float %93, %123, !dbg !38
  %132 = fadd float %94, %124, !dbg !38
  %133 = fadd float %95, %125, !dbg !38
  %134 = extractelement <8 x i1> %28, i64 5, !dbg !39
  %135 = and i1 %31, %134, !dbg !40
  %136 = extractelement <8 x i1> %28, i64 4, !dbg !39
  %137 = and i1 %34, %136, !dbg !40
  %138 = add i32 %9, -1024, !dbg !41
  %139 = add i32 %9, -512, !dbg !41
  %140 = sext i32 %138 to i64, !dbg !42
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !42
  %142 = sext i32 %139 to i64, !dbg !42
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !42
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135, i32 0, i1 %135) #1, !dbg !43
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !43
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !43
  %149 = bitcast i32 %145 to float, !dbg !43
  %150 = bitcast i32 %146 to float, !dbg !43
  %151 = bitcast i32 %147 to float, !dbg !43
  %152 = bitcast i32 %148 to float, !dbg !43
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #1, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !43
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !43
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !43
  %158 = bitcast i32 %154 to float, !dbg !43
  %159 = bitcast i32 %155 to float, !dbg !43
  %160 = bitcast i32 %156 to float, !dbg !43
  %161 = bitcast i32 %157 to float, !dbg !43
  %162 = fadd float %126, %149, !dbg !44
  %163 = fadd float %127, %150, !dbg !44
  %164 = fadd float %128, %151, !dbg !44
  %165 = fadd float %129, %152, !dbg !44
  %166 = fadd float %130, %158, !dbg !44
  %167 = fadd float %131, %159, !dbg !44
  %168 = fadd float %132, %160, !dbg !44
  %169 = fadd float %133, %161, !dbg !44
  %170 = or i32 %24, %.sext, !dbg !45
  %171 = icmp sgt i32 %170, -1, !dbg !45
  %172 = or i32 %26, %.sext2, !dbg !45
  %173 = icmp sgt i32 %172, -1, !dbg !45
  %174 = sext i32 %9 to i64, !dbg !46
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !46
  %176 = sext i32 %10 to i64, !dbg !46
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !46
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %171, i32 0, i1 %171, i32 0, i1 %171, i32 0, i1 %171, i32 0, i1 %171) #1, !dbg !47
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !47
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !47
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !47
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !47
  %183 = bitcast i32 %179 to float, !dbg !47
  %184 = bitcast i32 %180 to float, !dbg !47
  %185 = bitcast i32 %181 to float, !dbg !47
  %186 = bitcast i32 %182 to float, !dbg !47
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173) #1, !dbg !47
  %188 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !47
  %189 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !47
  %190 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !47
  %191 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !47
  %192 = bitcast i32 %188 to float, !dbg !47
  %193 = bitcast i32 %189 to float, !dbg !47
  %194 = bitcast i32 %190 to float, !dbg !47
  %195 = bitcast i32 %191 to float, !dbg !47
  %196 = fadd float %162, %183, !dbg !48
  %197 = fadd float %163, %184, !dbg !48
  %198 = fadd float %164, %185, !dbg !48
  %199 = fadd float %165, %186, !dbg !48
  %200 = fadd float %166, %192, !dbg !48
  %201 = fadd float %167, %193, !dbg !48
  %202 = fadd float %168, %194, !dbg !48
  %203 = fadd float %169, %195, !dbg !48
  %204 = and i1 %134, %97, !dbg !39
  %205 = and i1 %136, %99, !dbg !39
  %206 = add i32 %9, 1024, !dbg !49
  %207 = add i32 %9, 1536, !dbg !49
  %208 = sext i32 %206 to i64, !dbg !50
  %209 = getelementptr float, ptr addrspace(1) %0, i64 %208, !dbg !50
  %210 = sext i32 %207 to i64, !dbg !50
  %211 = getelementptr float, ptr addrspace(1) %0, i64 %210, !dbg !50
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %209, i1 %204, i32 0, i1 %204, i32 0, i1 %204, i32 0, i1 %204, i32 0, i1 %204) #1, !dbg !51
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !51
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !51
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !51
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !51
  %217 = bitcast i32 %213 to float, !dbg !51
  %218 = bitcast i32 %214 to float, !dbg !51
  %219 = bitcast i32 %215 to float, !dbg !51
  %220 = bitcast i32 %216 to float, !dbg !51
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %211, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205, i32 0, i1 %205) #1, !dbg !51
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !51
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !51
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !51
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !51
  %226 = bitcast i32 %222 to float, !dbg !51
  %227 = bitcast i32 %223 to float, !dbg !51
  %228 = bitcast i32 %224 to float, !dbg !51
  %229 = bitcast i32 %225 to float, !dbg !51
  %230 = fadd float %196, %217, !dbg !52
  %231 = fadd float %197, %218, !dbg !52
  %232 = fadd float %198, %219, !dbg !52
  %233 = fadd float %199, %220, !dbg !52
  %234 = fadd float %200, %226, !dbg !52
  %235 = fadd float %201, %227, !dbg !52
  %236 = fadd float %202, %228, !dbg !52
  %237 = fadd float %203, %229, !dbg !52
  %238 = add nsw i32 %.sext, 1, !dbg !53
  %239 = icmp ult i32 %238, 64, !dbg !53
  %240 = add nsw i32 %.sext2, 1, !dbg !53
  %241 = icmp ult i32 %240, 64, !dbg !53
  %242 = and i1 %31, %239, !dbg !54
  %243 = and i1 %34, %241, !dbg !54
  %244 = add i32 %9, 64512, !dbg !55
  %245 = add i32 %9, 65024, !dbg !55
  %246 = sext i32 %244 to i64, !dbg !56
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !56
  %248 = sext i32 %245 to i64, !dbg !56
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !56
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %242, i32 0, i1 %242, i32 0, i1 %242, i32 0, i1 %242, i32 0, i1 %242) #1, !dbg !57
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !57
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !57
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !57
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !57
  %255 = bitcast i32 %251 to float, !dbg !57
  %256 = bitcast i32 %252 to float, !dbg !57
  %257 = bitcast i32 %253 to float, !dbg !57
  %258 = bitcast i32 %254 to float, !dbg !57
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %249, i1 %243, i32 0, i1 %243, i32 0, i1 %243, i32 0, i1 %243, i32 0, i1 %243) #1, !dbg !57
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !57
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !57
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !57
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !57
  %264 = bitcast i32 %260 to float, !dbg !57
  %265 = bitcast i32 %261 to float, !dbg !57
  %266 = bitcast i32 %262 to float, !dbg !57
  %267 = bitcast i32 %263 to float, !dbg !57
  %268 = fadd float %230, %255, !dbg !58
  %269 = fadd float %231, %256, !dbg !58
  %270 = fadd float %232, %257, !dbg !58
  %271 = fadd float %233, %258, !dbg !58
  %272 = fadd float %234, %264, !dbg !58
  %273 = fadd float %235, %265, !dbg !58
  %274 = fadd float %236, %266, !dbg !58
  %275 = fadd float %237, %267, !dbg !58
  %276 = and i1 %60, %239, !dbg !59
  %277 = and i1 %62, %241, !dbg !59
  %278 = add i32 %9, 65536, !dbg !60
  %279 = add i32 %9, 66048, !dbg !60
  %280 = sext i32 %278 to i64, !dbg !61
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !61
  %282 = sext i32 %279 to i64, !dbg !61
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !61
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %276, i32 0, i1 %276, i32 0, i1 %276, i32 0, i1 %276, i32 0, i1 %276) #1, !dbg !62
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !62
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !62
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !62
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !62
  %289 = bitcast i32 %285 to float, !dbg !62
  %290 = bitcast i32 %286 to float, !dbg !62
  %291 = bitcast i32 %287 to float, !dbg !62
  %292 = bitcast i32 %288 to float, !dbg !62
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %283, i1 %277, i32 0, i1 %277, i32 0, i1 %277, i32 0, i1 %277, i32 0, i1 %277) #1, !dbg !62
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !62
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !62
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !62
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !62
  %298 = bitcast i32 %294 to float, !dbg !62
  %299 = bitcast i32 %295 to float, !dbg !62
  %300 = bitcast i32 %296 to float, !dbg !62
  %301 = bitcast i32 %297 to float, !dbg !62
  %302 = fadd float %268, %289, !dbg !63
  %303 = fadd float %269, %290, !dbg !63
  %304 = fadd float %270, %291, !dbg !63
  %305 = fadd float %271, %292, !dbg !63
  %306 = fadd float %272, %298, !dbg !63
  %307 = fadd float %273, %299, !dbg !63
  %308 = fadd float %274, %300, !dbg !63
  %309 = fadd float %275, %301, !dbg !63
  %310 = or i32 %238, %96, !dbg !64
  %311 = icmp ult i32 %310, 64, !dbg !64
  %312 = or i32 %240, %98, !dbg !64
  %313 = icmp ult i32 %312, 64, !dbg !64
  %314 = add i32 %9, 66560, !dbg !65
  %315 = add i32 %9, 67072, !dbg !65
  %316 = sext i32 %314 to i64, !dbg !66
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !66
  %318 = sext i32 %315 to i64, !dbg !66
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !66
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %317, i1 %311, i32 0, i1 %311, i32 0, i1 %311, i32 0, i1 %311, i32 0, i1 %311) #1, !dbg !67
  %321 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !67
  %322 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !67
  %323 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !67
  %324 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !67
  %325 = bitcast i32 %321 to float, !dbg !67
  %326 = bitcast i32 %322 to float, !dbg !67
  %327 = bitcast i32 %323 to float, !dbg !67
  %328 = bitcast i32 %324 to float, !dbg !67
  %329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %319, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313, i32 0, i1 %313) #1, !dbg !67
  %330 = extractvalue { i32, i32, i32, i32 } %329, 0, !dbg !67
  %331 = extractvalue { i32, i32, i32, i32 } %329, 1, !dbg !67
  %332 = extractvalue { i32, i32, i32, i32 } %329, 2, !dbg !67
  %333 = extractvalue { i32, i32, i32, i32 } %329, 3, !dbg !67
  %334 = bitcast i32 %330 to float, !dbg !67
  %335 = bitcast i32 %331 to float, !dbg !67
  %336 = bitcast i32 %332 to float, !dbg !67
  %337 = bitcast i32 %333 to float, !dbg !67
  %338 = fadd float %302, %325, !dbg !68
  %339 = fadd float %303, %326, !dbg !68
  %340 = fadd float %304, %327, !dbg !68
  %341 = fadd float %305, %328, !dbg !68
  %342 = fadd float %306, %334, !dbg !68
  %343 = fadd float %307, %335, !dbg !68
  %344 = fadd float %308, %336, !dbg !68
  %345 = fadd float %309, %337, !dbg !68
  %346 = extractelement <8 x i1> %30, i64 3, !dbg !69
  %347 = select i1 %346, i32 %25, i32 0, !dbg !69
  %348 = extractelement <8 x i1> %30, i64 2, !dbg !69
  %349 = select i1 %348, i32 %27, i32 0, !dbg !69
  %350 = extractelement <8 x i1> %28, i64 3, !dbg !70
  %351 = select i1 %350, i32 %22, i32 0, !dbg !70
  %352 = extractelement <8 x i1> %28, i64 2, !dbg !70
  %353 = select i1 %352, i32 %23, i32 0, !dbg !70
  %354 = add nsw i32 %24, 2, !dbg !71
  %355 = add nsw i32 %26, 2, !dbg !71
  %356 = icmp slt i32 %24, 62, !dbg !20
  %357 = icmp slt i32 %26, 62, !dbg !20
  %358 = add nsw i32 %.sext, 2, !dbg !72
  %359 = add nsw i32 %.sext2, 2, !dbg !72
  %360 = icmp slt i16 %17, 62, !dbg !16
  %361 = icmp slt i16 %18, 62, !dbg !16
  %362 = insertelement <8 x i1> poison, i1 %356, i64 0, !dbg !73
  %363 = shufflevector <8 x i1> %362, <8 x i1> %28, <2 x i32> <i32 0, i32 9>, !dbg !73
  %364 = insertelement <2 x i32> <i32 poison, i32 64>, i32 %354, i64 0, !dbg !73
  %365 = select <2 x i1> %363, <2 x i32> %364, <2 x i32> zeroinitializer, !dbg !73
  %366 = shufflevector <8 x i1> %30, <8 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !74
  %367 = insertelement <2 x i1> %366, i1 %360, i64 1, !dbg !74
  %368 = insertelement <2 x i32> <i32 64, i32 poison>, i32 %358, i64 1, !dbg !74
  %369 = select <2 x i1> %367, <2 x i32> %368, <2 x i32> zeroinitializer, !dbg !74
  %370 = add nsw <2 x i32> %369, %365, !dbg !75
  %371 = insertelement <8 x i1> poison, i1 %357, i64 0, !dbg !73
  %372 = shufflevector <8 x i1> %371, <8 x i1> %28, <2 x i32> <i32 0, i32 8>, !dbg !73
  %373 = insertelement <2 x i32> <i32 poison, i32 64>, i32 %355, i64 0, !dbg !73
  %374 = select <2 x i1> %372, <2 x i32> %373, <2 x i32> zeroinitializer, !dbg !73
  %375 = shufflevector <8 x i1> %30, <8 x i1> poison, <2 x i32> <i32 0, i32 poison>, !dbg !74
  %376 = insertelement <2 x i1> %375, i1 %361, i64 1, !dbg !74
  %377 = insertelement <2 x i32> <i32 64, i32 poison>, i32 %359, i64 1, !dbg !74
  %378 = select <2 x i1> %376, <2 x i32> %377, <2 x i32> zeroinitializer, !dbg !74
  %379 = add nsw <2 x i32> %378, %374, !dbg !75
  %380 = extractelement <2 x i32> %370, i64 0
  %reass.add = sub nsw i32 %380, %347
  %381 = extractelement <2 x i32> %370, i64 1
  %reass.mul = mul nsw i32 %reass.add, %381
  %reass.add8 = sub nsw i32 %347, %380
  %reass.mul9 = mul nsw i32 %reass.add8, %351
  %382 = add nsw i32 %reass.mul9, %reass.mul, !dbg !76
  %383 = extractelement <2 x i32> %379, i64 0
  %reass.add10 = sub nsw i32 %383, %349
  %384 = extractelement <2 x i32> %379, i64 1
  %reass.mul11 = mul nsw i32 %reass.add10, %384
  %reass.add12 = sub nsw i32 %349, %383
  %reass.mul13 = mul nsw i32 %reass.add12, %353
  %385 = add nsw i32 %reass.mul13, %reass.mul11, !dbg !76
  %386 = sitofp i32 %382 to float, !dbg !77
  %387 = sitofp i32 %385 to float, !dbg !77
  %388 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %338, float %386) #1, !dbg !77
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %386) #1, !dbg !77
  %390 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %386) #1, !dbg !77
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float %386) #1, !dbg !77
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %342, float %387) #1, !dbg !77
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float %387) #1, !dbg !77
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %344, float %387) #1, !dbg !77
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %387) #1, !dbg !77
  %396 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !78
  %397 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !78
  %398 = bitcast float %388 to i32, !dbg !79
  %399 = bitcast float %389 to i32, !dbg !79
  %400 = bitcast float %390 to i32, !dbg !79
  %401 = bitcast float %391 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %398, i32 %399, i32 %400, i32 %401, ptr addrspace(1) %396, i1 true) #1, !dbg !79
  %402 = bitcast float %392 to i32, !dbg !79
  %403 = bitcast float %393 to i32, !dbg !79
  %404 = bitcast float %394 to i32, !dbg !79
  %405 = bitcast float %395 to i32, !dbg !79
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %402, i32 %403, i32 %404, i32 %405, ptr addrspace(1) %397, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp7szdbsnlr5575dori7ozkt77wmqzgmc2iv6uvgnuhu5juptb2k.py", directory: "inductor_cache/p7")
!4 = !{ptr @triton_poi_fused_avg_pool2d_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_7", linkageName: "triton_poi_fused_avg_pool2d_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 30, scope: !7)
!16 = !DILocation(line: 79, column: 256, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 18, scope: !7)
!20 = !DILocation(line: 79, column: 197, scope: !7)
!21 = !DILocation(line: 33, column: 18, scope: !7)
!22 = !DILocation(line: 79, column: 221, scope: !7)
!23 = !DILocation(line: 50, column: 19, scope: !7)
!24 = !DILocation(line: 79, column: 162, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 42, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 47, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 42, scope: !7)
!31 = !DILocation(line: 44, column: 31, scope: !7)
!32 = !DILocation(line: 44, column: 47, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 42, scope: !7)
!36 = !DILocation(line: 51, column: 31, scope: !7)
!37 = !DILocation(line: 51, column: 47, scope: !7)
!38 = !DILocation(line: 52, column: 20, scope: !7)
!39 = !DILocation(line: 63, column: 20, scope: !7)
!40 = !DILocation(line: 57, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 41, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 46, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 31, scope: !7)
!47 = !DILocation(line: 61, column: 36, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 38, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 43, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 20, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 39, scope: !7)
!56 = !DILocation(line: 71, column: 31, scope: !7)
!57 = !DILocation(line: 71, column: 44, scope: !7)
!58 = !DILocation(line: 72, column: 20, scope: !7)
!59 = !DILocation(line: 73, column: 20, scope: !7)
!60 = !DILocation(line: 74, column: 39, scope: !7)
!61 = !DILocation(line: 74, column: 31, scope: !7)
!62 = !DILocation(line: 74, column: 44, scope: !7)
!63 = !DILocation(line: 75, column: 20, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 39, scope: !7)
!66 = !DILocation(line: 77, column: 31, scope: !7)
!67 = !DILocation(line: 77, column: 44, scope: !7)
!68 = !DILocation(line: 78, column: 20, scope: !7)
!69 = !DILocation(line: 79, column: 57, scope: !7)
!70 = !DILocation(line: 79, column: 122, scope: !7)
!71 = !DILocation(line: 79, column: 166, scope: !7)
!72 = !DILocation(line: 79, column: 225, scope: !7)
!73 = !DILocation(line: 79, column: 185, scope: !7)
!74 = !DILocation(line: 79, column: 153, scope: !7)
!75 = !DILocation(line: 79, column: 173, scope: !7)
!76 = !DILocation(line: 79, column: 398, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
