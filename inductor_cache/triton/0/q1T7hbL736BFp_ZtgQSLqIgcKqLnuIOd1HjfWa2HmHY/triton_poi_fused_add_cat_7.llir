; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = mul i32 %15, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen1 = freeze i32 %14, !dbg !17
  %18 = sdiv i32 %.frozen1, 16384, !dbg !17
  %19 = sext i32 %14 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = icmp slt i32 %16, 16, !dbg !20
  %27 = mul i32 %18, 16384, !dbg !21
  %srem.decomposed = sub i32 %.frozen1, %27, !dbg !21
  %28 = shl nsw i32 %18, 12, !dbg !22
  %29 = add nsw i32 %28, %srem.decomposed, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #1, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = add nsw i32 %16, -16, !dbg !26
  %38 = icmp ult i32 %37, 12, !dbg !26
  %39 = shl nsw i32 %16, 8, !dbg !27
  %40 = mul nsw i32 %18, 3072, !dbg !28
  %41 = add nsw i32 %40, %.decomposed, !dbg !27
  %42 = add nsw i32 %41, -4096, !dbg !29
  %43 = add nsw i32 %42, %39, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !31
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #1, !dbg !32
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !32
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !32
  %49 = bitcast i32 %47 to float, !dbg !32
  %50 = bitcast i32 %48 to float, !dbg !32
  %51 = add nsw i32 %16, -28, !dbg !33
  %52 = icmp ult i32 %51, 12, !dbg !33
  %53 = add nsw i32 %41, -7168, !dbg !34
  %54 = add nsw i32 %53, %39, !dbg !35
  %55 = sext i32 %54 to i64, !dbg !36
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !36
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !37
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !37
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !37
  %60 = bitcast i32 %58 to float, !dbg !37
  %61 = bitcast i32 %59 to float, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !39
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !39
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !39
  %66 = bitcast i32 %64 to float, !dbg !39
  %67 = bitcast i32 %65 to float, !dbg !39
  %68 = fadd float %60, %66, !dbg !40
  %69 = fadd float %61, %67, !dbg !40
  %70 = add nsw i32 %16, -40, !dbg !41
  %71 = icmp ult i32 %70, 12, !dbg !41
  %72 = add nsw i32 %41, -10240, !dbg !42
  %73 = add nsw i32 %72, %39, !dbg !43
  %74 = sext i32 %73 to i64, !dbg !44
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !44
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !45
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !45
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !45
  %79 = bitcast i32 %77 to float, !dbg !45
  %80 = bitcast i32 %78 to float, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !46
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !47
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !47
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !47
  %85 = bitcast i32 %83 to float, !dbg !47
  %86 = bitcast i32 %84 to float, !dbg !47
  %87 = fadd float %79, %85, !dbg !48
  %88 = fadd float %80, %86, !dbg !48
  %89 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !49
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !50
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !50
  %93 = bitcast i32 %91 to float, !dbg !50
  %94 = bitcast i32 %92 to float, !dbg !50
  %95 = fadd float %87, %93, !dbg !51
  %96 = fadd float %88, %94, !dbg !51
  %97 = icmp sgt i32 %16, 51, !dbg !52
  %98 = add nsw i32 %41, -13312, !dbg !53
  %99 = add nsw i32 %98, %39, !dbg !54
  %100 = sext i32 %99 to i64, !dbg !55
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !55
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %101, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !56
  %103 = extractvalue { i32, i32 } %102, 0, !dbg !56
  %104 = extractvalue { i32, i32 } %102, 1, !dbg !56
  %105 = bitcast i32 %103 to float, !dbg !56
  %106 = bitcast i32 %104 to float, !dbg !56
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !57
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %107, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !58
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !58
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !58
  %111 = bitcast i32 %109 to float, !dbg !58
  %112 = bitcast i32 %110 to float, !dbg !58
  %113 = fadd float %105, %111, !dbg !59
  %114 = fadd float %106, %112, !dbg !59
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !60
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !61
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !61
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !61
  %119 = bitcast i32 %117 to float, !dbg !61
  %120 = bitcast i32 %118 to float, !dbg !61
  %121 = fadd float %113, %119, !dbg !62
  %122 = fadd float %114, %120, !dbg !62
  %123 = getelementptr float, ptr addrspace(1) %5, i64 %100, !dbg !63
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !64
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !64
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !64
  %127 = bitcast i32 %125 to float, !dbg !64
  %128 = bitcast i32 %126 to float, !dbg !64
  %129 = fadd float %121, %127, !dbg !65
  %130 = fadd float %122, %128, !dbg !65
  %131 = select i1 %97, float %129, float 0.000000e+00, !dbg !66
  %132 = select i1 %97, float %130, float 0.000000e+00, !dbg !66
  %133 = select i1 %71, float %95, float %131, !dbg !67
  %134 = select i1 %71, float %96, float %132, !dbg !67
  %135 = select i1 %52, float %68, float %133, !dbg !67
  %136 = select i1 %52, float %69, float %134, !dbg !67
  %137 = select i1 %38, float %49, float %135, !dbg !68
  %138 = select i1 %38, float %50, float %136, !dbg !68
  %139 = select i1 %26, float %35, float %137, !dbg !69
  %140 = select i1 %26, float %36, float %138, !dbg !69
  %141 = fadd float %139, %24, !dbg !70
  %142 = fadd float %140, %25, !dbg !70
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !71
  %144 = bitcast float %141 to i32, !dbg !72
  %145 = bitcast float %142 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %144, i32 %145, ptr addrspace(1) %143, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccun4wqrgvrdp7z7jven75tvlkvwwdcqyos6bgcbgmofqpguzdip.py", directory: "inductor_cache/cu")
!4 = !{ptr @triton_poi_fused_add_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_7", linkageName: "triton_poi_fused_add_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 51, scope: !7)
!23 = !DILocation(line: 34, column: 46, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 56, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 41, scope: !7)
!28 = !DILocation(line: 39, column: 60, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 55, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 65, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 36, scope: !7)
!35 = !DILocation(line: 44, column: 55, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 65, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 65, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 36, scope: !7)
!43 = !DILocation(line: 53, column: 55, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 65, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 65, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 31, scope: !7)
!50 = !DILocation(line: 56, column: 65, scope: !7)
!51 = !DILocation(line: 57, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 36, scope: !7)
!54 = !DILocation(line: 63, column: 55, scope: !7)
!55 = !DILocation(line: 63, column: 31, scope: !7)
!56 = !DILocation(line: 63, column: 65, scope: !7)
!57 = !DILocation(line: 64, column: 31, scope: !7)
!58 = !DILocation(line: 64, column: 65, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 31, scope: !7)
!61 = !DILocation(line: 66, column: 65, scope: !7)
!62 = !DILocation(line: 67, column: 20, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 65, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 35, scope: !7)
!67 = !DILocation(line: 0, scope: !7)
!68 = !DILocation(line: 74, column: 34, scope: !7)
!69 = !DILocation(line: 75, column: 33, scope: !7)
!70 = !DILocation(line: 76, column: 20, scope: !7)
!71 = !DILocation(line: 77, column: 28, scope: !7)
!72 = !DILocation(line: 77, column: 40, scope: !7)
!73 = !DILocation(line: 77, column: 4, scope: !7)
