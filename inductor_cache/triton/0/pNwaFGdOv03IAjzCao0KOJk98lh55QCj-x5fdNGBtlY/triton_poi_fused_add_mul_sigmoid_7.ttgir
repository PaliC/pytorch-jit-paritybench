#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_mul_sigmoid_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":19:0)) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x2xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2097152> : tensor<1x2xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<4096> : tensor<512x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x2xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<1x2xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<512> : tensor<512x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<512> : tensor<512x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c2_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2 : i32, start = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x2xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x2xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x2xi32, #blocked1> loc(#loc5)
    %10 = tt.get_program_id x : i32 loc(#loc6)
    %11 = arith.muli %10, %c512_i32 : i32 loc(#loc7)
    %12 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc8)
    %13 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc8)
    %14 = tt.expand_dims %12 {axis = 1 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<512x1xi32, #blocked> loc(#loc8)
    %15 = tt.expand_dims %13 {axis = 1 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<512x1xi32, #blocked1> loc(#loc8)
    %16 = tt.splat %11 : i32 -> tensor<512x1xi32, #blocked> loc(#loc9)
    %17 = tt.splat %11 : i32 -> tensor<512x1xi32, #blocked1> loc(#loc9)
    %18 = arith.addi %16, %14 : tensor<512x1xi32, #blocked> loc(#loc9)
    %19 = arith.addi %17, %15 : tensor<512x1xi32, #blocked1> loc(#loc9)
    %20 = arith.cmpi slt, %18, %cst_6 : tensor<512x1xi32, #blocked> loc(#loc10)
    %21 = arith.cmpi slt, %19, %cst_7 : tensor<512x1xi32, #blocked1> loc(#loc10)
    %22 = arith.divsi %8, %cst_4 : tensor<1x2xi32, #blocked> loc(#loc11)
    %23 = arith.divsi %9, %cst_5 : tensor<1x2xi32, #blocked1> loc(#loc11)
    %24 = arith.remsi %9, %cst_5 : tensor<1x2xi32, #blocked1> loc(#loc12)
    %25 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2x!tt.ptr<f32>, #blocked> loc(#loc13)
    %26 = tt.addptr %25, %8 : tensor<1x2x!tt.ptr<f32>, #blocked>, tensor<1x2xi32, #blocked> loc(#loc13)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<1x2x!tt.ptr<f32>, #blocked> loc(#loc14)
    %28 = arith.muli %8, %cst_3 : tensor<1x2xi32, #blocked> loc(#loc15)
    %29 = tt.broadcast %18 : tensor<512x1xi32, #blocked> -> tensor<512x2xi32, #blocked> loc(#loc16)
    %30 = tt.broadcast %28 : tensor<1x2xi32, #blocked> -> tensor<512x2xi32, #blocked> loc(#loc16)
    %31 = arith.addi %29, %30 : tensor<512x2xi32, #blocked> loc(#loc16)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x2x!tt.ptr<f32>, #blocked> loc(#loc17)
    %33 = tt.addptr %32, %31 : tensor<512x2x!tt.ptr<f32>, #blocked>, tensor<512x2xi32, #blocked> loc(#loc17)
    %34 = tt.broadcast %20 : tensor<512x1xi1, #blocked> -> tensor<512x2xi1, #blocked> loc(#loc18)
    %35 = tt.broadcast %21 : tensor<512x1xi1, #blocked1> -> tensor<512x2xi1, #blocked1> loc(#loc18)
    %36 = tt.load %33, %34 evictionPolicy = evict_last : tensor<512x2x!tt.ptr<f32>, #blocked> loc(#loc18)
    %37 = arith.muli %22, %cst_3 : tensor<1x2xi32, #blocked> loc(#loc19)
    %38 = tt.broadcast %37 : tensor<1x2xi32, #blocked> -> tensor<512x2xi32, #blocked> loc(#loc20)
    %39 = arith.addi %29, %38 : tensor<512x2xi32, #blocked> loc(#loc20)
    %40 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x2x!tt.ptr<f32>, #blocked> loc(#loc21)
    %41 = tt.addptr %40, %39 : tensor<512x2x!tt.ptr<f32>, #blocked>, tensor<512x2xi32, #blocked> loc(#loc21)
    %42 = tt.load %41, %34 evictionPolicy = evict_last : tensor<512x2x!tt.ptr<f32>, #blocked> loc(#loc22)
    %43 = arith.subf %cst, %27 : tensor<1x2xf32, #blocked> loc(#loc38)
    %44 = math.exp %43 : tensor<1x2xf32, #blocked> loc(#loc39)
    %45 = arith.addf %44, %cst_0 : tensor<1x2xf32, #blocked> loc(#loc40)
    %46 = arith.divf %cst_0, %45 : tensor<1x2xf32, #blocked> loc(#loc41)
    %47 = tt.broadcast %46 : tensor<1x2xf32, #blocked> -> tensor<512x2xf32, #blocked> loc(#loc28)
    %48 = arith.mulf %47, %36 : tensor<512x2xf32, #blocked> loc(#loc28)
    %49 = arith.mulf %42, %36 : tensor<512x2xf32, #blocked> loc(#loc29)
    %50 = arith.addf %48, %49 : tensor<512x2xf32, #blocked> loc(#loc30)
    %51 = arith.muli %19, %cst_2 : tensor<512x1xi32, #blocked1> loc(#loc31)
    %52 = tt.broadcast %24 : tensor<1x2xi32, #blocked1> -> tensor<512x2xi32, #blocked1> loc(#loc32)
    %53 = tt.broadcast %51 : tensor<512x1xi32, #blocked1> -> tensor<512x2xi32, #blocked1> loc(#loc32)
    %54 = arith.addi %52, %53 : tensor<512x2xi32, #blocked1> loc(#loc32)
    %55 = arith.muli %23, %cst_1 : tensor<1x2xi32, #blocked1> loc(#loc33)
    %56 = tt.broadcast %55 : tensor<1x2xi32, #blocked1> -> tensor<512x2xi32, #blocked1> loc(#loc34)
    %57 = arith.addi %54, %56 : tensor<512x2xi32, #blocked1> loc(#loc34)
    %58 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x2x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %59 = tt.addptr %58, %57 : tensor<512x2x!tt.ptr<f32>, #blocked1>, tensor<512x2xi32, #blocked1> loc(#loc35)
    %60 = triton_gpu.convert_layout %50 : tensor<512x2xf32, #blocked> -> tensor<512x2xf32, #blocked1> loc(#loc36)
    tt.store %59, %60, %35 : tensor<512x2x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":22:28)
#loc3 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":22:33)
#loc4 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":23:44)
#loc5 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":23:23)
#loc6 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":25:28)
#loc7 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":25:33)
#loc8 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":26:44)
#loc9 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":26:23)
#loc10 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":27:21)
#loc11 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":30:19)
#loc12 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":31:19)
#loc13 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":32:30)
#loc14 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":32:35)
#loc15 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:39)
#loc16 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:35)
#loc17 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:30)
#loc18 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":33:44)
#loc19 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:39)
#loc20 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:35)
#loc21 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:30)
#loc22 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":34:44)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc24 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":35:22)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc27 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc28 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":36:18)
#loc29 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":37:18)
#loc30 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":38:18)
#loc31 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:35)
#loc32 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:30)
#loc33 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:48)
#loc34 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:40)
#loc35 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:25)
#loc36 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:59)
#loc37 = loc("inductor_cache/b5/cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py":39:4)
#loc38 = loc(callsite(#loc23 at #loc24))
#loc39 = loc(callsite(#loc25 at #loc24))
#loc40 = loc(callsite(#loc26 at #loc24))
#loc41 = loc(callsite(#loc27 at #loc24))
