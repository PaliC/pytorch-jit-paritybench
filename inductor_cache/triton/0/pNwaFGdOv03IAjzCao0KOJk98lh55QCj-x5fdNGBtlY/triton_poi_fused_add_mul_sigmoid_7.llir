; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_sigmoid_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = or disjoint i32 %8, 1, !dbg !12
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !13
  %11 = shl i32 %10, 9, !dbg !14
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !15
  %13 = shl i32 %12, 2, !dbg !15
  %14 = and i32 %13, 508, !dbg !15
  %15 = and i32 %12, 127, !dbg !15
  %16 = or disjoint i32 %11, %14, !dbg !16
  %17 = or disjoint i32 %11, %15, !dbg !16
  %18 = or disjoint i32 %17, 128, !dbg !16
  %19 = or disjoint i32 %17, 256, !dbg !16
  %20 = or disjoint i32 %17, 384, !dbg !16
  %21 = icmp slt i32 %16, 512, !dbg !17
  %22 = icmp slt i32 %17, 512, !dbg !17
  %23 = icmp slt i32 %18, 512, !dbg !17
  %24 = icmp slt i32 %19, 512, !dbg !17
  %25 = icmp slt i32 %20, 512, !dbg !17
  %.frozen = freeze i32 %8, !dbg !18
  %26 = sdiv i32 %.frozen, 4096, !dbg !18
  %27 = sdiv i32 %9, 4096, !dbg !18
  %28 = mul i32 %26, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %28, !dbg !19
  %29 = sext i32 %8 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !20
  %31 = sext i32 %9 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !21
  %37 = bitcast i32 %36 to float, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #2, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = shl i32 %7, 10, !dbg !22
  %44 = shl i32 %9, 9, !dbg !22
  %45 = add i32 %16, %43, !dbg !23
  %46 = add i32 %16, %44, !dbg !23
  %47 = sext i32 %45 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %49 = sext i32 %46 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %21) #2, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %56 = bitcast i32 %52 to float, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %21) #2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = bitcast i32 %61 to float, !dbg !25
  %66 = bitcast i32 %62 to float, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = shl nsw i32 %26, 9, !dbg !26
  %70 = shl nsw i32 %27, 9, !dbg !26
  %71 = add i32 %16, %69, !dbg !27
  %72 = add i32 %70, %16, !dbg !27
  %73 = sext i32 %71 to i64, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !28
  %75 = sext i32 %72 to i64, !dbg !28
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !28
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %21) #2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %21) #2, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !29
  %91 = bitcast i32 %87 to float, !dbg !29
  %92 = bitcast i32 %88 to float, !dbg !29
  %93 = bitcast i32 %89 to float, !dbg !29
  %94 = bitcast i32 %90 to float, !dbg !29
  %95 = fsub float 0.000000e+00, %37, !dbg !30
  %96 = fsub float 0.000000e+00, %42, !dbg !30
  %97 = fmul float %95, 0x3FF7154760000000, !dbg !34
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #2, !dbg !34
  %99 = fmul float %96, 0x3FF7154760000000, !dbg !34
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #2, !dbg !34
  %101 = fadd float %98, 1.000000e+00, !dbg !35
  %102 = fadd float %100, 1.000000e+00, !dbg !35
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #2, !dbg !36
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #2, !dbg !36
  %105 = fmul float %103, %56, !dbg !37
  %106 = fmul float %103, %57, !dbg !37
  %107 = fmul float %103, %58, !dbg !37
  %108 = fmul float %103, %59, !dbg !37
  %109 = fmul float %104, %65, !dbg !37
  %110 = fmul float %104, %66, !dbg !37
  %111 = fmul float %104, %67, !dbg !37
  %112 = fmul float %104, %68, !dbg !37
  %113 = fmul float %56, %82, !dbg !38
  %114 = fmul float %57, %83, !dbg !38
  %115 = fmul float %58, %84, !dbg !38
  %116 = fmul float %59, %85, !dbg !38
  %117 = fmul float %65, %91, !dbg !38
  %118 = fmul float %66, %92, !dbg !38
  %119 = fmul float %67, %93, !dbg !38
  %120 = fmul float %68, %94, !dbg !38
  %121 = fadd float %113, %105, !dbg !39
  %122 = fadd float %114, %106, !dbg !39
  %123 = fadd float %115, %107, !dbg !39
  %124 = fadd float %116, %108, !dbg !39
  %125 = fadd float %117, %109, !dbg !39
  %126 = fadd float %118, %110, !dbg !39
  %127 = fadd float %119, %111, !dbg !39
  %128 = fadd float %120, %112, !dbg !39
  %129 = shl i32 %17, 12, !dbg !40
  %130 = shl i32 %18, 12, !dbg !40
  %131 = shl i32 %19, 12, !dbg !40
  %132 = shl i32 %20, 12, !dbg !40
  %133 = shl i32 %26, 21, !dbg !41
  %134 = add i32 %133, %.decomposed, !dbg !42
  %135 = add i32 %134, %129, !dbg !43
  %136 = add i32 %134, %130, !dbg !43
  %137 = add i32 %134, %131, !dbg !43
  %138 = add i32 %134, %132, !dbg !43
  %139 = sext i32 %135 to i64, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !44
  %141 = sext i32 %136 to i64, !dbg !44
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !44
  %143 = sext i32 %137 to i64, !dbg !44
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !44
  %145 = sext i32 %138 to i64, !dbg !44
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !44
  %147 = shl i32 %12, 3, !dbg !45
  %148 = and i32 %147, 1016, !dbg !45
  %149 = shl i32 %12, 1, !dbg !45
  %150 = and i32 %149, 254, !dbg !45
  %.idx = shl nuw nsw i32 %148, 3, !dbg !45
  %151 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !45
  %152 = bitcast float %121 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !45
  %153 = shl nuw nsw i32 %148, 1, !dbg !45
  %154 = or disjoint i32 %153, 4, !dbg !45
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !45
  %156 = bitcast float %122 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !45
  %157 = or disjoint i32 %153, 8, !dbg !45
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !45
  %159 = bitcast float %123 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !45
  %160 = or disjoint i32 %153, 12, !dbg !45
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %160, !dbg !45
  %162 = bitcast float %124 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !45
  %163 = or disjoint i32 %148, 1, !dbg !45
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !45
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %163, !dbg !45
  %166 = bitcast float %125 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #2, !dbg !45
  %167 = or disjoint i32 %148, 3, !dbg !45
  %168 = or disjoint i32 %148, 2, !dbg !45
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !45
  %170 = getelementptr inbounds float, ptr addrspace(3) %169, i32 %167, !dbg !45
  %171 = bitcast float %126 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !45
  %172 = or disjoint i32 %148, 5, !dbg !45
  %173 = or disjoint i32 %148, 4, !dbg !45
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !45
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !45
  %176 = bitcast float %127 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !45
  %177 = or disjoint i32 %148, 7, !dbg !45
  %178 = or disjoint i32 %148, 6, !dbg !45
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %178, !dbg !45
  %180 = getelementptr inbounds float, ptr addrspace(3) %179, i32 %177, !dbg !45
  %181 = bitcast float %128 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %182 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !45
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %150, !dbg !45
  %184 = or disjoint i32 %150, 256, !dbg !45
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !45
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %184, !dbg !45
  %187 = load <2 x i32>, ptr addrspace(3) %186, align 8, !dbg !45
  %188 = or disjoint i32 %150, 512, !dbg !45
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !45
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %188, !dbg !45
  %191 = load <2 x i32>, ptr addrspace(3) %190, align 8, !dbg !45
  %192 = or disjoint i32 %150, 768, !dbg !45
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !45
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %192, !dbg !45
  %195 = load <2 x i32>, ptr addrspace(3) %194, align 8, !dbg !45
  %.extract = load i32, ptr addrspace(3) %183, align 8, !dbg !45
  %196 = getelementptr inbounds i8, ptr addrspace(3) %183, i32 4, !dbg !45
  %.extract8 = load i32, ptr addrspace(3) %196, align 4, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract8, ptr addrspace(1) %140, i1 %22) #2, !dbg !45
  %.extract9 = extractelement <2 x i32> %187, i64 0, !dbg !45
  %.extract10 = extractelement <2 x i32> %187, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract9, i32 %.extract10, ptr addrspace(1) %142, i1 %23) #2, !dbg !45
  %.extract11 = extractelement <2 x i32> %191, i64 0, !dbg !45
  %.extract12 = extractelement <2 x i32> %191, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %144, i1 %24) #2, !dbg !45
  %.extract13 = extractelement <2 x i32> %195, i64 0, !dbg !45
  %.extract14 = extractelement <2 x i32> %195, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %146, i1 %25) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb5bxsnzq7b2lpf7hmgdz3chuzcyhdyyfigw6y3tqjos6t2ri72v.py", directory: "inductor_cache/b5")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_7", linkageName: "triton_poi_fused_add_mul_sigmoid_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 25, column: 28, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 44, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 39, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 35, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 35, scope: !7)
!41 = !DILocation(line: 39, column: 48, scope: !7)
!42 = !DILocation(line: 39, column: 30, scope: !7)
!43 = !DILocation(line: 39, column: 40, scope: !7)
!44 = !DILocation(line: 39, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 59, scope: !7)
!46 = !DILocation(line: 39, column: 4, scope: !7)
