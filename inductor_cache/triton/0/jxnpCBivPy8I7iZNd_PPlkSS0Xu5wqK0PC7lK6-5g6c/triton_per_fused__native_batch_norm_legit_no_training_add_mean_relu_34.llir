; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 2048, !dbg !14
  %17 = shl i32 %12, 2, !dbg !15
  %18 = and i32 %17, 60, !dbg !15
  %19 = srem i32 %15, 512, !dbg !16
  %20 = shl i32 %15, 6, !dbg !17
  %21 = or disjoint i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %25 = sext i32 %19 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #5, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #5, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #5, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #5, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #5, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #5, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #5, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #5, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !30
  %49 = fadd float %36, 0x3EE4F8B580000000, !dbg !31
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i11 = icmp eq i32 %56, 0, !dbg !32
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i14 = icmp eq i32 %57, 0, !dbg !32
  br i1 %.not.i11, label %63, label %58, !dbg !32

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %61, label %59, !dbg !32

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %66, label %64, !dbg !32

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %59, %61, %64, %66
  %.0.i13 = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %75 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %76 = and i32 %12, 7, !dbg !12
  %77 = or disjoint i32 %11, %76, !dbg !13
  %78 = icmp slt i32 %77, 2048, !dbg !14
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !33
  %80 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !20
  %81 = insertelement <4 x i32> %80, i32 %69, i64 1, !dbg !20
  %82 = insertelement <4 x i32> %81, i32 %70, i64 2, !dbg !20
  %83 = insertelement <4 x i32> %82, i32 %71, i64 3, !dbg !20
  %84 = bitcast <4 x i32> %83 to <4 x float>, !dbg !20
  %85 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !34
  %86 = bitcast <4 x i32> %85 to <4 x float>, !dbg !34
  %87 = shufflevector <4 x float> %86, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %88 = fsub <4 x float> %84, %87, !dbg !34
  %89 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !30
  %90 = insertelement <4 x i32> %89, i32 %73, i64 1, !dbg !30
  %91 = insertelement <4 x i32> %90, i32 %74, i64 2, !dbg !30
  %92 = insertelement <4 x i32> %91, i32 %75, i64 3, !dbg !30
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !30
  %94 = insertelement <4 x float> poison, float %79, i64 0, !dbg !35
  %95 = shufflevector <4 x float> %94, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !35
  %96 = fmul <4 x float> %88, %95, !dbg !35
  %97 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !36
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !36
  %99 = shufflevector <4 x float> %98, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !36
  %100 = fmul <4 x float> %96, %99, !dbg !36
  %101 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !37
  %102 = bitcast <4 x i32> %101 to <4 x float>, !dbg !37
  %103 = shufflevector <4 x float> %102, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %104 = fadd <4 x float> %100, %103, !dbg !37
  %105 = fadd <4 x float> %104, %93, !dbg !38
  %106 = fcmp olt <4 x float> %105, zeroinitializer, !dbg !39
  %107 = extractelement <4 x i1> %106, i64 3, !dbg !43
  %108 = extractelement <4 x float> %105, i64 3, !dbg !43
  %109 = select i1 %107, float 0.000000e+00, float %108, !dbg !43
  %110 = extractelement <4 x i1> %106, i64 2, !dbg !43
  %111 = extractelement <4 x float> %105, i64 2, !dbg !43
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !43
  %113 = extractelement <4 x i1> %106, i64 1, !dbg !43
  %114 = extractelement <4 x float> %105, i64 1, !dbg !43
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !43
  %116 = extractelement <4 x i1> %106, i64 0, !dbg !43
  %117 = extractelement <4 x float> %105, i64 0, !dbg !43
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !43
  %119 = fadd float %109, %112, !dbg !44
  %120 = fadd float %115, %119, !dbg !44
  %121 = fadd float %118, %120, !dbg !44
  %122 = select i1 %16, float %121, float 0.000000e+00, !dbg !44
  %123 = bitcast float %122 to i32, !dbg !49
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !49
  %125 = bitcast i32 %124 to float, !dbg !49
  %126 = fadd float %122, %125, !dbg !44
  %127 = bitcast float %126 to i32, !dbg !49
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !49
  %129 = bitcast i32 %128 to float, !dbg !49
  %130 = fadd float %126, %129, !dbg !44
  %131 = bitcast float %130 to i32, !dbg !49
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !49
  %133 = bitcast i32 %132 to float, !dbg !49
  %134 = fadd float %130, %133, !dbg !44
  %135 = bitcast float %134 to i32, !dbg !49
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !49
  %137 = bitcast i32 %136 to float, !dbg !49
  %138 = fadd float %134, %137, !dbg !44
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %140 = bitcast float %138 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !50
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !50
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 6.400000e+01) #5, !dbg !50
  %144 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !51
  %145 = bitcast float %109 to i32, !dbg !52
  %146 = bitcast float %112 to i32, !dbg !52
  %147 = bitcast float %115 to i32, !dbg !52
  %148 = bitcast float %118 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %146, i32 %147, i32 %148, ptr addrspace(1) %144, i1 %16) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %149 = sext i32 %77 to i64, !dbg !54
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !54
  %151 = and i32 %12, 120, !dbg !55
  %152 = icmp eq i32 %151, 0, !dbg !55
  %153 = bitcast float %143 to i32, !dbg !55
  %154 = and i1 %152, %78, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %150, i1 %154) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py", directory: "inductor_cache/7p")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 54, column: 26, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 25, scope: !7)
!52 = !DILocation(line: 57, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
!54 = !DILocation(line: 59, column: 28, scope: !7)
!55 = !DILocation(line: 59, column: 40, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
