; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_div_1(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 5, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 2, !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = shl i32 %6, 2, !dbg !15
  %12 = and i32 %11, 12, !dbg !15
  %13 = shl i32 %9, 4, !dbg !16
  %14 = or disjoint i32 %13, %12, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #2, !dbg !19
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !19
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !19
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !19
  %22 = bitcast i32 %18 to float, !dbg !19
  %23 = bitcast i32 %19 to float, !dbg !19
  %24 = bitcast i32 %20 to float, !dbg !19
  %25 = bitcast i32 %21 to float, !dbg !19
  %26 = fmul float %22, 0x3FE6A09E60000000, !dbg !20
  %27 = fmul float %23, 0x3FE6A09E60000000, !dbg !20
  %28 = fmul float %24, 0x3FE6A09E60000000, !dbg !20
  %29 = fmul float %25, 0x3FE6A09E60000000, !dbg !20
  %30 = select i1 %10, float %26, float 0xFFF0000000000000, !dbg !21
  %31 = select i1 %10, float %27, float 0xFFF0000000000000, !dbg !21
  %32 = select i1 %10, float %28, float 0xFFF0000000000000, !dbg !21
  %33 = select i1 %10, float %29, float 0xFFF0000000000000, !dbg !21
  %34 = fcmp ogt float %30, %31, !dbg !22
  %35 = fcmp uno float %30, 0.000000e+00, !dbg !27
  %36 = or i1 %34, %35, !dbg !28
  %37 = select i1 %36, float %30, float %31, !dbg !29
  %38 = fcmp ogt float %37, %32, !dbg !22
  %39 = fcmp uno float %37, 0.000000e+00, !dbg !27
  %40 = or i1 %38, %39, !dbg !28
  %41 = select i1 %40, float %37, float %32, !dbg !29
  %42 = fcmp ogt float %41, %33, !dbg !22
  %43 = fcmp uno float %41, 0.000000e+00, !dbg !27
  %44 = or i1 %42, %43, !dbg !28
  %45 = select i1 %44, float %41, float %33, !dbg !29
  %46 = bitcast float %45 to i32, !dbg !30
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = fcmp ogt float %45, %48, !dbg !22
  %50 = fcmp uno float %45, 0.000000e+00, !dbg !27
  %51 = or i1 %49, %50, !dbg !28
  %52 = select i1 %51, float %45, float %48, !dbg !29
  %53 = bitcast float %52 to i32, !dbg !30
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = fcmp ogt float %52, %55, !dbg !22
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !27
  %58 = or i1 %56, %57, !dbg !28
  %59 = select i1 %58, float %52, float %55, !dbg !29
  %60 = fsub float %26, %59, !dbg !31
  %61 = fsub float %27, %59, !dbg !31
  %62 = fsub float %28, %59, !dbg !31
  %63 = fsub float %29, %59, !dbg !31
  %64 = fmul float %60, 2.500000e-01, !dbg !32
  %65 = fmul float %61, 2.500000e-01, !dbg !32
  %66 = fmul float %62, 2.500000e-01, !dbg !32
  %67 = fmul float %63, 2.500000e-01, !dbg !32
  %68 = fmul float %64, 0x3FF7154760000000, !dbg !33
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #2, !dbg !33
  %70 = fmul float %65, 0x3FF7154760000000, !dbg !33
  %71 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %70) #2, !dbg !33
  %72 = fmul float %66, 0x3FF7154760000000, !dbg !33
  %73 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %72) #2, !dbg !33
  %74 = fmul float %67, 0x3FF7154760000000, !dbg !33
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #2, !dbg !33
  %76 = fadd float %69, %71, !dbg !34
  %77 = fadd float %76, %73, !dbg !34
  %78 = fadd float %77, %75, !dbg !34
  %79 = select i1 %10, float %78, float 0.000000e+00, !dbg !34
  %80 = bitcast float %79 to i32, !dbg !39
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !39
  %82 = bitcast i32 %81 to float, !dbg !39
  %83 = fadd float %79, %82, !dbg !34
  %84 = bitcast float %83 to i32, !dbg !39
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !39
  %86 = bitcast i32 %85 to float, !dbg !39
  %87 = fadd float %83, %86, !dbg !34
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %87) #2, !dbg !40
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %87) #2, !dbg !40
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %87) #2, !dbg !40
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %87) #2, !dbg !40
  %92 = bitcast float %88 to i32, !dbg !41
  %93 = bitcast float %89 to i32, !dbg !41
  %94 = bitcast float %90 to i32, !dbg !41
  %95 = bitcast float %91 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %92, i32 %93, i32 %94, i32 %95, ptr addrspace(1) %16, i1 %10) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvytcglrdq2g3zpwxv2emfaxpqzczrpvboofrtrbldyoxqne4as.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_per_fused__softmax_div_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_div_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_div_1", linkageName: "triton_per_fused__softmax_div_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 37, column: 33, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 38, column: 37, scope: !7)
!27 = !DILocation(line: 120, column: 21, scope: !23, inlinedAt: !26)
!28 = !DILocation(line: 120, column: 16, scope: !23, inlinedAt: !26)
!29 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !26)
!30 = !DILocation(line: 131, column: 29, scope: !25, inlinedAt: !26)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 24, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 45, column: 26, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 48, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
