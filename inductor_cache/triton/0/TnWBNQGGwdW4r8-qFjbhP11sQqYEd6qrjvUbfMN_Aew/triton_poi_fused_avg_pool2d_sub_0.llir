; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = sext i32 %9 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !15
  %13 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %12, i1 %10) #1, !dbg !16
  %14 = extractvalue { i32, i32 } %13, 0, !dbg !16
  %15 = extractvalue { i32, i32 } %13, 1, !dbg !16
  %16 = bitcast i32 %14 to float, !dbg !16
  %17 = bitcast i32 %15 to float, !dbg !16
  %18 = add i32 %9, -12, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = add i32 %9, -8, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = add i32 %9, -4, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = add i32 %9, 4, !dbg !23
  %28 = sext i32 %27 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !25
  %31 = shufflevector <2 x i32> %30, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !25
  %32 = sdiv <2 x i32> %31, <i32 8, i32 4>, !dbg !25
  %33 = srem <2 x i32> %32, splat (i32 2), !dbg !26
  %34 = extractelement <2 x i32> %33, i64 0, !dbg !27
  %35 = icmp sgt i32 %34, 0, !dbg !28
  %36 = extractelement <2 x i32> %33, i64 1, !dbg !27
  %37 = icmp sgt i32 %36, 0, !dbg !29
  %38 = and i1 %35, %37, !dbg !30
  %39 = and i1 %10, %38, !dbg !31
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !32
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !32
  %43 = bitcast i32 %41 to float, !dbg !32
  %44 = bitcast i32 %42 to float, !dbg !32
  %45 = icmp sgt i32 %36, -1, !dbg !33
  %46 = and i1 %35, %45, !dbg !34
  %47 = and i1 %10, %46, !dbg !35
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !36
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !36
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !36
  %51 = bitcast i32 %49 to float, !dbg !36
  %52 = bitcast i32 %50 to float, !dbg !36
  %53 = fadd float %43, %51, !dbg !37
  %54 = fadd float %44, %52, !dbg !37
  %55 = icmp slt <2 x i32> %33, splat (i32 1), !dbg !38
  %56 = extractelement <2 x i1> %55, i64 1, !dbg !39
  %57 = and i1 %35, %56, !dbg !39
  %58 = and i1 %10, %57, !dbg !40
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !41
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !41
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !41
  %62 = bitcast i32 %60 to float, !dbg !41
  %63 = bitcast i32 %61 to float, !dbg !41
  %64 = fadd float %53, %62, !dbg !42
  %65 = fadd float %54, %63, !dbg !42
  %66 = icmp sgt i32 %34, -1, !dbg !43
  %67 = and i1 %66, %37, !dbg !44
  %68 = and i1 %10, %67, !dbg !45
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !46
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !46
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !46
  %72 = bitcast i32 %70 to float, !dbg !46
  %73 = bitcast i32 %71 to float, !dbg !46
  %74 = fadd float %64, %72, !dbg !47
  %75 = fadd float %65, %73, !dbg !47
  %76 = or i32 %34, %36, !dbg !27
  %77 = icmp sgt i32 %76, -1, !dbg !27
  %78 = and i1 %10, %77, !dbg !48
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %12, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #1, !dbg !49
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !49
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !49
  %82 = bitcast i32 %80 to float, !dbg !49
  %83 = bitcast i32 %81 to float, !dbg !49
  %84 = fadd float %74, %82, !dbg !50
  %85 = fadd float %75, %83, !dbg !50
  %86 = and i1 %66, %56, !dbg !51
  %87 = and i1 %10, %86, !dbg !52
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %87, i32 0, i1 %87, i32 0, i1 %87) #1, !dbg !53
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !53
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !53
  %91 = bitcast i32 %89 to float, !dbg !53
  %92 = bitcast i32 %90 to float, !dbg !53
  %93 = fadd float %84, %91, !dbg !54
  %94 = fadd float %85, %92, !dbg !54
  %95 = extractelement <2 x i1> %55, i64 0, !dbg !55
  %96 = and i1 %95, %37, !dbg !55
  %97 = and i1 %10, %96, !dbg !56
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !57
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !57
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !57
  %101 = bitcast i32 %99 to float, !dbg !57
  %102 = bitcast i32 %100 to float, !dbg !57
  %103 = fadd float %93, %101, !dbg !58
  %104 = fadd float %94, %102, !dbg !58
  %105 = and i1 %95, %45, !dbg !59
  %106 = add i32 %9, 8, !dbg !60
  %107 = sext i32 %106 to i64, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !61
  %109 = and i1 %10, %105, !dbg !62
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #1, !dbg !63
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !63
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !63
  %113 = bitcast i32 %111 to float, !dbg !63
  %114 = bitcast i32 %112 to float, !dbg !63
  %115 = fadd float %103, %113, !dbg !64
  %116 = fadd float %104, %114, !dbg !64
  %117 = and i1 %95, %56, !dbg !65
  %118 = add i32 %9, 12, !dbg !66
  %119 = sext i32 %118 to i64, !dbg !67
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !67
  %121 = and i1 %10, %117, !dbg !68
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #1, !dbg !69
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !69
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !69
  %125 = bitcast i32 %123 to float, !dbg !69
  %126 = bitcast i32 %124 to float, !dbg !69
  %127 = fadd float %115, %125, !dbg !70
  %128 = fadd float %116, %126, !dbg !70
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 4.000000e+00) #1, !dbg !71
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 4.000000e+00) #1, !dbg !71
  %131 = fsub float %129, %16, !dbg !72
  %132 = fsub float %130, %17, !dbg !72
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !73
  %134 = bitcast float %131 to i32, !dbg !74
  %135 = bitcast float %132 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %134, i32 %135, ptr addrspace(1) %133, i1 %10) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck5bkgvktrvgqrcbtghdfcpnljigsrbh2xj7oy5snwvpdm6vhehr.py", directory: "inductor_cache/k5")
!4 = !{ptr @triton_poi_fused_avg_pool2d_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_sub_0", linkageName: "triton_poi_fused_avg_pool2d_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 27, column: 31, scope: !7)
!16 = !DILocation(line: 27, column: 36, scope: !7)
!17 = !DILocation(line: 39, column: 39, scope: !7)
!18 = !DILocation(line: 39, column: 31, scope: !7)
!19 = !DILocation(line: 45, column: 38, scope: !7)
!20 = !DILocation(line: 45, column: 31, scope: !7)
!21 = !DILocation(line: 52, column: 38, scope: !7)
!22 = !DILocation(line: 52, column: 31, scope: !7)
!23 = !DILocation(line: 65, column: 35, scope: !7)
!24 = !DILocation(line: 65, column: 31, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 26, scope: !7)
!27 = !DILocation(line: 61, column: 20, scope: !7)
!28 = !DILocation(line: 30, column: 19, scope: !7)
!29 = !DILocation(line: 35, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 52, scope: !7)
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 41, column: 21, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 51, scope: !7)
!36 = !DILocation(line: 45, column: 43, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 69, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 19, scope: !7)
!40 = !DILocation(line: 52, column: 51, scope: !7)
!41 = !DILocation(line: 52, column: 43, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 21, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 51, scope: !7)
!46 = !DILocation(line: 59, column: 43, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 44, scope: !7)
!49 = !DILocation(line: 62, column: 36, scope: !7)
!50 = !DILocation(line: 63, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 48, scope: !7)
!53 = !DILocation(line: 65, column: 40, scope: !7)
!54 = !DILocation(line: 66, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 48, scope: !7)
!57 = !DILocation(line: 72, column: 40, scope: !7)
!58 = !DILocation(line: 73, column: 20, scope: !7)
!59 = !DILocation(line: 74, column: 20, scope: !7)
!60 = !DILocation(line: 75, column: 35, scope: !7)
!61 = !DILocation(line: 75, column: 31, scope: !7)
!62 = !DILocation(line: 75, column: 48, scope: !7)
!63 = !DILocation(line: 75, column: 40, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 20, scope: !7)
!66 = !DILocation(line: 78, column: 36, scope: !7)
!67 = !DILocation(line: 78, column: 31, scope: !7)
!68 = !DILocation(line: 78, column: 49, scope: !7)
!69 = !DILocation(line: 78, column: 41, scope: !7)
!70 = !DILocation(line: 79, column: 20, scope: !7)
!71 = !DILocation(line: 81, column: 20, scope: !7)
!72 = !DILocation(line: 82, column: 20, scope: !7)
!73 = !DILocation(line: 83, column: 28, scope: !7)
!74 = !DILocation(line: 83, column: 40, scope: !7)
!75 = !DILocation(line: 83, column: 4, scope: !7)
