; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_sort_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 1, !dbg !12
  %9 = and i32 %7, 3, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = lshr i32 %7, 2, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %12, !dbg !13
  %15 = or disjoint i32 %14, 32, !dbg !13
  %16 = or disjoint i32 %14, 64, !dbg !13
  %17 = or disjoint i32 %14, 96, !dbg !13
  %18 = icmp slt i32 %13, 512, !dbg !14
  %19 = icmp slt i32 %14, 512, !dbg !14
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp ne i32 %9, 3, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %24 = sdiv i32 %.frozen, 8, !dbg !16
  %25 = mul i32 %24, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = mul i32 %24, 10, !dbg !18
  %27 = add i32 %26, %.decomposed, !dbg !19
  %28 = add i32 %27, 1, !dbg !19
  %29 = add i32 %27, 2, !dbg !19
  %30 = add i32 %27, 3, !dbg !19
  %31 = sext i32 %27 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !20
  %33 = sext i32 %28 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !20
  %35 = sext i32 %29 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %30 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = and i1 %23, %19, !dbg !21
  %40 = and i1 %23, %20, !dbg !21
  %41 = and i1 %23, %21, !dbg !21
  %42 = and i1 %23, %22, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 false, i32 0, i1 false) #3, !dbg !22
  %47 = shl i32 %7, 2, !dbg !22
  %48 = and i32 %47, 508, !dbg !22
  %49 = lshr exact i32 %48, 2, !dbg !22
  %50 = add nuw nsw i32 %49, %48, !dbg !22
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !22
  %52 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #3, !dbg !22
  %53 = or disjoint i32 %48, 1, !dbg !22
  %54 = add nuw nsw i32 %49, %53, !dbg !22
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !22
  %56 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #3, !dbg !22
  %57 = or disjoint i32 %48, 2, !dbg !22
  %58 = add nuw nsw i32 %49, %57, !dbg !22
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !22
  %60 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #3, !dbg !22
  %61 = or disjoint i32 %48, 3, !dbg !22
  %62 = add nuw nsw i32 %49, %61, !dbg !22
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !22
  %64 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %65 = lshr i32 %10, 2, !dbg !22
  %66 = add nuw nsw i32 %65, %10, !dbg !22
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !22
  %68 = load i32, ptr addrspace(3) %67, align 4, !dbg !22
  %69 = or disjoint i32 %10, 128, !dbg !22
  %70 = lshr i32 %69, 2, !dbg !22
  %71 = add nuw nsw i32 %70, %69, !dbg !22
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !22
  %73 = load i32, ptr addrspace(3) %72, align 4, !dbg !22
  %74 = or disjoint i32 %10, 256, !dbg !22
  %75 = lshr i32 %74, 2, !dbg !22
  %76 = add nuw nsw i32 %75, %74, !dbg !22
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !22
  %78 = load i32, ptr addrspace(3) %77, align 4, !dbg !22
  %79 = or disjoint i32 %10, 384, !dbg !22
  %80 = lshr i32 %79, 2, !dbg !22
  %81 = add nuw nsw i32 %80, %79, !dbg !22
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !22
  %83 = load i32, ptr addrspace(3) %82, align 4, !dbg !22
  %84 = trunc nuw nsw i32 %9 to i16, !dbg !23
  %85 = lshr i32 %7, 1, !dbg !24
  %86 = xor i32 %8, 1, !dbg !29
  %87 = mul nuw nsw i32 %68, %86, !dbg !31
  %88 = mul nuw nsw i32 %73, %86, !dbg !31
  %89 = mul nuw nsw i32 %78, %86, !dbg !31
  %90 = mul nuw nsw i32 %83, %86, !dbg !31
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !32
  %92 = add i32 %91, %87, !dbg !35
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !32
  %94 = add i32 %93, %88, !dbg !35
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !32
  %96 = add i32 %95, %89, !dbg !35
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !32
  %98 = add i32 %97, %90, !dbg !35
  %99 = mul nuw nsw i32 %68, %8, !dbg !37
  %100 = mul nuw nsw i32 %73, %8, !dbg !37
  %101 = mul nuw nsw i32 %78, %8, !dbg !37
  %102 = mul nuw nsw i32 %83, %8, !dbg !37
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !32
  %104 = add i32 %103, %99, !dbg !35
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !32
  %106 = add i32 %105, %100, !dbg !35
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !32
  %108 = add i32 %107, %101, !dbg !35
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !32
  %110 = add i32 %109, %102, !dbg !35
  %111 = bitcast i32 %92 to float, !dbg !38
  %112 = bitcast i32 %94 to float, !dbg !38
  %113 = bitcast i32 %96 to float, !dbg !38
  %114 = bitcast i32 %98 to float, !dbg !38
  %115 = bitcast i32 %104 to float, !dbg !39
  %116 = bitcast i32 %106 to float, !dbg !39
  %117 = bitcast i32 %108 to float, !dbg !39
  %118 = bitcast i32 %110 to float, !dbg !39
  %119 = trunc i32 %85 to i16, !dbg !40
  %120 = and i16 %119, 1, !dbg !40
  %121 = xor i16 %120, 1, !dbg !40
  %122 = trunc nuw nsw i32 %86 to i16, !dbg !40
  %123 = mul nuw nsw i16 %122, %84, !dbg !41
  %124 = zext nneg i16 %123 to i32, !dbg !32
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !32
  %126 = trunc i32 %125 to i16, !dbg !32
  %127 = add i16 %123, %126, !dbg !35
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !32
  %129 = trunc i32 %128 to i16, !dbg !32
  %130 = add i16 %123, %129, !dbg !35
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !32
  %132 = trunc i32 %131 to i16, !dbg !32
  %133 = add i16 %123, %132, !dbg !35
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !32
  %135 = trunc i32 %134 to i16, !dbg !32
  %136 = add i16 %123, %135, !dbg !35
  %137 = trunc nuw nsw i32 %8 to i16, !dbg !42
  %138 = mul nuw nsw i16 %84, %137, !dbg !43
  %139 = zext nneg i16 %138 to i32, !dbg !32
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !32
  %141 = trunc i32 %140 to i16, !dbg !32
  %142 = add i16 %138, %141, !dbg !35
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !32
  %144 = trunc i32 %143 to i16, !dbg !32
  %145 = add i16 %138, %144, !dbg !35
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !32
  %147 = trunc i32 %146 to i16, !dbg !32
  %148 = add i16 %138, %147, !dbg !35
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !32
  %150 = trunc i32 %149 to i16, !dbg !32
  %151 = add i16 %138, %150, !dbg !35
  %152 = icmp slt i16 %127, 3, !dbg !44
  %153 = icmp slt i16 %130, 3, !dbg !44
  %154 = icmp slt i16 %133, 3, !dbg !44
  %155 = icmp slt i16 %136, 3, !dbg !44
  %156 = icmp slt i16 %142, 3, !dbg !45
  %157 = icmp slt i16 %145, 3, !dbg !45
  %158 = icmp slt i16 %148, 3, !dbg !45
  %159 = icmp slt i16 %151, 3, !dbg !45
  %160 = fcmp ogt float %111, %115, !dbg !46
  %161 = fcmp ogt float %112, %116, !dbg !46
  %162 = fcmp ogt float %113, %117, !dbg !46
  %163 = fcmp ogt float %114, %118, !dbg !46
  %164 = xor i1 %152, true, !dbg !47
  %165 = and i1 %156, %164, !dbg !47
  %166 = xor i1 %153, true, !dbg !47
  %167 = and i1 %157, %166, !dbg !47
  %168 = xor i1 %154, true, !dbg !47
  %169 = and i1 %158, %168, !dbg !47
  %170 = xor i1 %155, true, !dbg !47
  %171 = and i1 %159, %170, !dbg !47
  %172 = xor i1 %152, %156, !dbg !48
  %173 = xor i1 %172, true, !dbg !48
  %174 = xor i1 %153, %157, !dbg !48
  %175 = xor i1 %174, true, !dbg !48
  %176 = xor i1 %154, %158, !dbg !48
  %177 = xor i1 %176, true, !dbg !48
  %178 = xor i1 %155, %159, !dbg !48
  %179 = xor i1 %178, true, !dbg !48
  %180 = and i1 %160, %173, !dbg !49
  %181 = and i1 %161, %175, !dbg !49
  %182 = and i1 %162, %177, !dbg !49
  %183 = and i1 %163, %179, !dbg !49
  %184 = or i1 %165, %180, !dbg !50
  %185 = or i1 %167, %181, !dbg !50
  %186 = or i1 %169, %182, !dbg !50
  %187 = or i1 %171, %183, !dbg !50
  %188 = trunc i32 %85 to i1, !dbg !51
  %189 = xor i1 %184, %188, !dbg !51
  %190 = xor i1 %185, %188, !dbg !51
  %191 = xor i1 %186, %188, !dbg !51
  %192 = xor i1 %187, %188, !dbg !51
  %193 = xor i32 %104, %92, !dbg !52
  %194 = xor i32 %106, %94, !dbg !52
  %195 = xor i32 %108, %96, !dbg !52
  %196 = xor i32 %110, %98, !dbg !52
  %197 = select i1 %189, i32 %193, i32 0, !dbg !53
  %198 = select i1 %190, i32 %194, i32 0, !dbg !53
  %199 = select i1 %191, i32 %195, i32 0, !dbg !53
  %200 = select i1 %192, i32 %196, i32 0, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %201 = shl i32 %7, 7, !dbg !53
  %202 = and i32 %201, 384, !dbg !53
  %203 = or disjoint i32 %202, %12, !dbg !53
  %204 = lshr exact i32 %202, 7, !dbg !53
  %205 = add nuw nsw i32 %204, %203, !dbg !53
  %206 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %205, !dbg !53
  %207 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #3, !dbg !53
  %208 = or disjoint i32 %203, 32, !dbg !53
  %209 = add nuw nsw i32 %208, %204, !dbg !53
  %210 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %209, !dbg !53
  %211 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #3, !dbg !53
  %212 = or disjoint i32 %203, 64, !dbg !53
  %213 = add nuw nsw i32 %212, %204, !dbg !53
  %214 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %213, !dbg !53
  %215 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #3, !dbg !53
  %216 = or disjoint i32 %203, 96, !dbg !53
  %217 = add nuw nsw i32 %216, %204, !dbg !53
  %218 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %217, !dbg !53
  %219 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %220 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %10, !dbg !53
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !53
  %222 = add nuw nsw i32 %10, 129, !dbg !53
  %223 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %222, !dbg !53
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !53
  %225 = add nuw nsw i32 %10, 258, !dbg !53
  %226 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %225, !dbg !53
  %227 = load i32, ptr addrspace(3) %226, align 4, !dbg !53
  %228 = add nuw nsw i32 %10, 387, !dbg !53
  %229 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %228, !dbg !53
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !53
  %231 = xor i32 %221, %43, !dbg !54
  %232 = xor i32 %224, %44, !dbg !54
  %233 = xor i32 %227, %45, !dbg !54
  %234 = xor i32 %230, %46, !dbg !54
  %235 = xor i16 %142, %127, !dbg !55
  %236 = xor i16 %145, %130, !dbg !55
  %237 = xor i16 %148, %133, !dbg !55
  %238 = xor i16 %151, %136, !dbg !55
  %239 = select i1 %189, i16 %235, i16 0, !dbg !56
  %240 = select i1 %190, i16 %236, i16 0, !dbg !56
  %241 = select i1 %191, i16 %237, i16 0, !dbg !56
  %242 = select i1 %192, i16 %238, i16 0, !dbg !56
  %243 = xor i16 %239, %84, !dbg !57
  %244 = xor i16 %240, %84, !dbg !57
  %245 = xor i16 %241, %84, !dbg !57
  %246 = xor i16 %242, %84, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %247 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %205, !dbg !57
  %248 = insertelement <1 x i16> poison, i16 %243, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %247, <1 x i16> %248, i1 true) #3, !dbg !57
  %249 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %209, !dbg !57
  %250 = insertelement <1 x i16> poison, i16 %244, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %249, <1 x i16> %250, i1 true) #3, !dbg !57
  %251 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %213, !dbg !57
  %252 = insertelement <1 x i16> poison, i16 %245, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %251, <1 x i16> %252, i1 true) #3, !dbg !57
  %253 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %217, !dbg !57
  %254 = insertelement <1 x i16> poison, i16 %246, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %253, <1 x i16> %254, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %255 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %10, !dbg !57
  %256 = load i16, ptr addrspace(3) %255, align 2, !dbg !57
  %257 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %222, !dbg !57
  %258 = load i16, ptr addrspace(3) %257, align 2, !dbg !57
  %259 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %225, !dbg !57
  %260 = load i16, ptr addrspace(3) %259, align 2, !dbg !57
  %261 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %228, !dbg !57
  %262 = load i16, ptr addrspace(3) %261, align 2, !dbg !57
  %263 = bitcast i32 %231 to float, !dbg !38
  %264 = bitcast i32 %232 to float, !dbg !38
  %265 = bitcast i32 %233 to float, !dbg !39
  %266 = bitcast i32 %234 to float, !dbg !39
  %267 = mul nuw nsw i16 %243, %121, !dbg !41
  %268 = mul nuw nsw i16 %244, %121, !dbg !41
  %269 = mul nuw nsw i16 %245, %121, !dbg !41
  %270 = mul nuw nsw i16 %246, %121, !dbg !41
  %271 = zext i16 %267 to i32, !dbg !32
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !32
  %273 = trunc i32 %272 to i16, !dbg !32
  %274 = add i16 %267, %273, !dbg !35
  %275 = zext i16 %268 to i32, !dbg !32
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !32
  %277 = trunc i32 %276 to i16, !dbg !32
  %278 = add i16 %268, %277, !dbg !35
  %279 = zext i16 %269 to i32, !dbg !32
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !32
  %281 = trunc i32 %280 to i16, !dbg !32
  %282 = add i16 %269, %281, !dbg !35
  %283 = zext i16 %270 to i32, !dbg !32
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 2, i32 31), !dbg !32
  %285 = trunc i32 %284 to i16, !dbg !32
  %286 = add i16 %270, %285, !dbg !35
  %287 = mul nuw nsw i16 %243, %120, !dbg !43
  %288 = mul nuw nsw i16 %244, %120, !dbg !43
  %289 = mul nuw nsw i16 %245, %120, !dbg !43
  %290 = mul nuw nsw i16 %246, %120, !dbg !43
  %291 = zext i16 %287 to i32, !dbg !32
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 2, i32 31), !dbg !32
  %293 = trunc i32 %292 to i16, !dbg !32
  %294 = add i16 %287, %293, !dbg !35
  %295 = zext i16 %288 to i32, !dbg !32
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !32
  %297 = trunc i32 %296 to i16, !dbg !32
  %298 = add i16 %288, %297, !dbg !35
  %299 = zext i16 %289 to i32, !dbg !32
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 2, i32 31), !dbg !32
  %301 = trunc i32 %300 to i16, !dbg !32
  %302 = add i16 %289, %301, !dbg !35
  %303 = zext i16 %290 to i32, !dbg !32
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !32
  %305 = trunc i32 %304 to i16, !dbg !32
  %306 = add i16 %290, %305, !dbg !35
  %307 = icmp slt i16 %274, 3, !dbg !44
  %308 = icmp slt i16 %278, 3, !dbg !44
  %309 = icmp slt i16 %282, 3, !dbg !44
  %310 = icmp slt i16 %286, 3, !dbg !44
  %311 = icmp slt i16 %294, 3, !dbg !45
  %312 = icmp slt i16 %298, 3, !dbg !45
  %313 = icmp slt i16 %302, 3, !dbg !45
  %314 = icmp slt i16 %306, 3, !dbg !45
  %315 = fcmp ogt float %263, %265, !dbg !46
  %316 = fcmp ogt float %264, %266, !dbg !46
  %317 = xor i1 %307, true, !dbg !47
  %318 = and i1 %311, %317, !dbg !47
  %319 = xor i1 %308, true, !dbg !47
  %320 = and i1 %312, %319, !dbg !47
  %321 = xor i1 %309, true, !dbg !47
  %322 = and i1 %313, %321, !dbg !47
  %323 = xor i1 %310, true, !dbg !47
  %324 = and i1 %314, %323, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %325 = zext i1 %318 to i8, !dbg !47
  %326 = zext i1 %320 to i8, !dbg !47
  %327 = zext i1 %322 to i8, !dbg !47
  %328 = zext i1 %324 to i8, !dbg !47
  %329 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %205, !dbg !47
  %330 = insertelement <1 x i8> poison, i8 %325, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %330, i1 true) #3, !dbg !47
  %331 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %209, !dbg !47
  %332 = insertelement <1 x i8> poison, i8 %326, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %331, <1 x i8> %332, i1 true) #3, !dbg !47
  %333 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %213, !dbg !47
  %334 = insertelement <1 x i8> poison, i8 %327, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %333, <1 x i8> %334, i1 true) #3, !dbg !47
  %335 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %217, !dbg !47
  %336 = insertelement <1 x i8> poison, i8 %328, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %335, <1 x i8> %336, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %337 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !47
  %338 = load i8, ptr addrspace(3) %337, align 1, !dbg !47
  %339 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %222, !dbg !47
  %340 = load i8, ptr addrspace(3) %339, align 1, !dbg !47
  %341 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !47
  %342 = load i8, ptr addrspace(3) %341, align 1, !dbg !47
  %343 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %228, !dbg !47
  %344 = load i8, ptr addrspace(3) %343, align 1, !dbg !47
  %345 = trunc i8 %338 to i1, !dbg !47
  %346 = trunc i8 %340 to i1, !dbg !47
  %347 = trunc i8 %342 to i1, !dbg !47
  %348 = trunc i8 %344 to i1, !dbg !47
  %349 = xor i1 %307, %311, !dbg !48
  %350 = xor i1 %349, true, !dbg !48
  %351 = xor i1 %308, %312, !dbg !48
  %352 = xor i1 %351, true, !dbg !48
  %353 = xor i1 %309, %313, !dbg !48
  %354 = xor i1 %353, true, !dbg !48
  %355 = xor i1 %310, %314, !dbg !48
  %356 = xor i1 %355, true, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %357 = zext i1 %350 to i8, !dbg !48
  %358 = zext i1 %352 to i8, !dbg !48
  %359 = zext i1 %354 to i8, !dbg !48
  %360 = zext i1 %356 to i8, !dbg !48
  %361 = insertelement <1 x i8> poison, i8 %357, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %329, <1 x i8> %361, i1 true) #3, !dbg !48
  %362 = insertelement <1 x i8> poison, i8 %358, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %331, <1 x i8> %362, i1 true) #3, !dbg !48
  %363 = insertelement <1 x i8> poison, i8 %359, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %333, <1 x i8> %363, i1 true) #3, !dbg !48
  %364 = insertelement <1 x i8> poison, i8 %360, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %335, <1 x i8> %364, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %365 = load i8, ptr addrspace(3) %337, align 1, !dbg !48
  %366 = load i8, ptr addrspace(3) %339, align 1, !dbg !48
  %367 = load i8, ptr addrspace(3) %341, align 1, !dbg !48
  %368 = load i8, ptr addrspace(3) %343, align 1, !dbg !48
  %369 = trunc i8 %365 to i1, !dbg !48
  %370 = trunc i8 %366 to i1, !dbg !48
  %371 = trunc i8 %367 to i1, !dbg !48
  %372 = trunc i8 %368 to i1, !dbg !48
  %373 = and i1 %315, %369, !dbg !49
  %374 = and i1 %316, %370, !dbg !49
  %375 = and i1 %315, %371, !dbg !49
  %376 = and i1 %316, %372, !dbg !49
  %377 = or i1 %373, %345, !dbg !50
  %378 = or i1 %374, %346, !dbg !50
  %379 = or i1 %375, %347, !dbg !50
  %380 = or i1 %376, %348, !dbg !50
  %381 = select i1 %377, i32 %233, i32 %231, !dbg !54
  %382 = select i1 %378, i32 %234, i32 %232, !dbg !54
  %383 = select i1 %379, i32 %231, i32 %233, !dbg !54
  %384 = select i1 %380, i32 %232, i32 %234, !dbg !54
  %385 = xor i16 %294, %274, !dbg !55
  %386 = xor i16 %298, %278, !dbg !55
  %387 = xor i16 %302, %282, !dbg !55
  %388 = xor i16 %306, %286, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %389 = insertelement <1 x i16> poison, i16 %385, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %247, <1 x i16> %389, i1 true) #3, !dbg !55
  %390 = insertelement <1 x i16> poison, i16 %386, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %249, <1 x i16> %390, i1 true) #3, !dbg !55
  %391 = insertelement <1 x i16> poison, i16 %387, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %251, <1 x i16> %391, i1 true) #3, !dbg !55
  %392 = insertelement <1 x i16> poison, i16 %388, i64 0, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %253, <1 x i16> %392, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %393 = load i16, ptr addrspace(3) %255, align 2, !dbg !55
  %394 = load i16, ptr addrspace(3) %257, align 2, !dbg !55
  %395 = load i16, ptr addrspace(3) %259, align 2, !dbg !55
  %396 = load i16, ptr addrspace(3) %261, align 2, !dbg !55
  %397 = select i1 %377, i16 %393, i16 0, !dbg !56
  %398 = select i1 %378, i16 %394, i16 0, !dbg !56
  %399 = select i1 %379, i16 %395, i16 0, !dbg !56
  %400 = select i1 %380, i16 %396, i16 0, !dbg !56
  %401 = xor i16 %397, %256, !dbg !57
  %402 = xor i16 %398, %258, !dbg !57
  %403 = xor i16 %399, %260, !dbg !57
  %404 = xor i16 %400, %262, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %405 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %50, !dbg !57
  %406 = insertelement <1 x i16> poison, i16 %401, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %405, <1 x i16> %406, i1 true) #3, !dbg !57
  %407 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %54, !dbg !57
  %408 = insertelement <1 x i16> poison, i16 %402, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %407, <1 x i16> %408, i1 true) #3, !dbg !57
  %409 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %58, !dbg !57
  %410 = insertelement <1 x i16> poison, i16 %403, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %409, <1 x i16> %410, i1 true) #3, !dbg !57
  %411 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %62, !dbg !57
  %412 = insertelement <1 x i16> poison, i16 %404, i64 0, !dbg !57
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %411, <1 x i16> %412, i1 true) #3, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %413 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %66, !dbg !57
  %414 = load i16, ptr addrspace(3) %413, align 2, !dbg !57
  %415 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %71, !dbg !57
  %416 = load i16, ptr addrspace(3) %415, align 2, !dbg !57
  %417 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %76, !dbg !57
  %418 = load i16, ptr addrspace(3) %417, align 2, !dbg !57
  %419 = getelementptr inbounds i16, ptr addrspace(3) @global_smem, i32 %81, !dbg !57
  %420 = load i16, ptr addrspace(3) %419, align 2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %421 = insertelement <1 x i32> poison, i32 %381, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %421, i1 true) #3, !dbg !58
  %422 = insertelement <1 x i32> poison, i32 %382, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %422, i1 true) #3, !dbg !58
  %423 = insertelement <1 x i32> poison, i32 %383, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %423, i1 true) #3, !dbg !58
  %424 = insertelement <1 x i32> poison, i32 %384, i64 0, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %424, i1 true) #3, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %425 = load i32, ptr addrspace(3) %67, align 4, !dbg !58
  %426 = load i32, ptr addrspace(3) %72, align 4, !dbg !58
  %427 = load i32, ptr addrspace(3) %77, align 4, !dbg !58
  %428 = load i32, ptr addrspace(3) %82, align 4, !dbg !58
  %429 = mul nuw nsw i32 %425, %86, !dbg !31
  %430 = mul nuw nsw i32 %426, %86, !dbg !31
  %431 = mul nuw nsw i32 %427, %86, !dbg !31
  %432 = mul nuw nsw i32 %428, %86, !dbg !31
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %429, i32 1, i32 31), !dbg !32
  %434 = add i32 %433, %429, !dbg !35
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %430, i32 1, i32 31), !dbg !32
  %436 = add i32 %435, %430, !dbg !35
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %431, i32 1, i32 31), !dbg !32
  %438 = add i32 %437, %431, !dbg !35
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 1, i32 31), !dbg !32
  %440 = add i32 %439, %432, !dbg !35
  %441 = mul nuw nsw i32 %425, %8, !dbg !37
  %442 = mul nuw nsw i32 %426, %8, !dbg !37
  %443 = mul nuw nsw i32 %427, %8, !dbg !37
  %444 = mul nuw nsw i32 %428, %8, !dbg !37
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !32
  %446 = add i32 %445, %441, !dbg !35
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 1, i32 31), !dbg !32
  %448 = add i32 %447, %442, !dbg !35
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %443, i32 1, i32 31), !dbg !32
  %450 = add i32 %449, %443, !dbg !35
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 1, i32 31), !dbg !32
  %452 = add i32 %451, %444, !dbg !35
  %453 = bitcast i32 %434 to float, !dbg !38
  %454 = bitcast i32 %436 to float, !dbg !38
  %455 = bitcast i32 %438 to float, !dbg !38
  %456 = bitcast i32 %440 to float, !dbg !38
  %457 = bitcast i32 %446 to float, !dbg !39
  %458 = bitcast i32 %448 to float, !dbg !39
  %459 = bitcast i32 %450 to float, !dbg !39
  %460 = bitcast i32 %452 to float, !dbg !39
  %461 = mul nuw nsw i16 %414, %122, !dbg !41
  %462 = mul nuw nsw i16 %416, %122, !dbg !41
  %463 = mul nuw nsw i16 %418, %122, !dbg !41
  %464 = mul nuw nsw i16 %420, %122, !dbg !41
  %465 = zext i16 %461 to i32, !dbg !32
  %466 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %465, i32 1, i32 31), !dbg !32
  %467 = trunc i32 %466 to i16, !dbg !32
  %468 = add i16 %461, %467, !dbg !35
  %469 = zext i16 %462 to i32, !dbg !32
  %470 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %469, i32 1, i32 31), !dbg !32
  %471 = trunc i32 %470 to i16, !dbg !32
  %472 = add i16 %462, %471, !dbg !35
  %473 = zext i16 %463 to i32, !dbg !32
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 1, i32 31), !dbg !32
  %475 = trunc i32 %474 to i16, !dbg !32
  %476 = add i16 %463, %475, !dbg !35
  %477 = zext i16 %464 to i32, !dbg !32
  %478 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %477, i32 1, i32 31), !dbg !32
  %479 = trunc i32 %478 to i16, !dbg !32
  %480 = add i16 %464, %479, !dbg !35
  %481 = mul nuw nsw i16 %414, %137, !dbg !43
  %482 = mul nuw nsw i16 %416, %137, !dbg !43
  %483 = mul nuw nsw i16 %418, %137, !dbg !43
  %484 = mul nuw nsw i16 %420, %137, !dbg !43
  %485 = zext i16 %481 to i32, !dbg !32
  %486 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %485, i32 1, i32 31), !dbg !32
  %487 = trunc i32 %486 to i16, !dbg !32
  %488 = add i16 %481, %487, !dbg !35
  %489 = zext i16 %482 to i32, !dbg !32
  %490 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %489, i32 1, i32 31), !dbg !32
  %491 = trunc i32 %490 to i16, !dbg !32
  %492 = add i16 %482, %491, !dbg !35
  %493 = zext i16 %483 to i32, !dbg !32
  %494 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 1, i32 31), !dbg !32
  %495 = trunc i32 %494 to i16, !dbg !32
  %496 = add i16 %483, %495, !dbg !35
  %497 = zext i16 %484 to i32, !dbg !32
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !32
  %499 = trunc i32 %498 to i16, !dbg !32
  %500 = add i16 %484, %499, !dbg !35
  %501 = icmp slt i16 %468, 3, !dbg !44
  %502 = icmp slt i16 %472, 3, !dbg !44
  %503 = icmp slt i16 %476, 3, !dbg !44
  %504 = icmp slt i16 %480, 3, !dbg !44
  %505 = icmp slt i16 %488, 3, !dbg !45
  %506 = icmp slt i16 %492, 3, !dbg !45
  %507 = icmp slt i16 %496, 3, !dbg !45
  %508 = icmp slt i16 %500, 3, !dbg !45
  %509 = fcmp ogt float %453, %457, !dbg !46
  %510 = fcmp ogt float %454, %458, !dbg !46
  %511 = fcmp ogt float %455, %459, !dbg !46
  %512 = fcmp ogt float %456, %460, !dbg !46
  %513 = xor i1 %501, true, !dbg !47
  %514 = and i1 %505, %513, !dbg !47
  %515 = xor i1 %502, true, !dbg !47
  %516 = and i1 %506, %515, !dbg !47
  %517 = xor i1 %503, true, !dbg !47
  %518 = and i1 %507, %517, !dbg !47
  %519 = xor i1 %504, true, !dbg !47
  %520 = and i1 %508, %519, !dbg !47
  %521 = xor i1 %501, %505, !dbg !48
  %522 = xor i1 %521, true, !dbg !48
  %523 = xor i1 %502, %506, !dbg !48
  %524 = xor i1 %523, true, !dbg !48
  %525 = xor i1 %503, %507, !dbg !48
  %526 = xor i1 %525, true, !dbg !48
  %527 = xor i1 %504, %508, !dbg !48
  %528 = xor i1 %527, true, !dbg !48
  %529 = and i1 %509, %522, !dbg !49
  %530 = and i1 %510, %524, !dbg !49
  %531 = and i1 %511, %526, !dbg !49
  %532 = and i1 %512, %528, !dbg !49
  %533 = or i1 %514, %529, !dbg !50
  %534 = or i1 %516, %530, !dbg !50
  %535 = or i1 %518, %531, !dbg !50
  %536 = or i1 %520, %532, !dbg !50
  %537 = xor i16 %488, %468, !dbg !55
  %538 = xor i16 %492, %472, !dbg !55
  %539 = xor i16 %496, %476, !dbg !55
  %540 = xor i16 %500, %480, !dbg !55
  %541 = select i1 %533, i16 %537, i16 0, !dbg !56
  %542 = select i1 %534, i16 %538, i16 0, !dbg !56
  %543 = select i1 %535, i16 %539, i16 0, !dbg !56
  %544 = select i1 %536, i16 %540, i16 0, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %545 = insertelement <1 x i16> poison, i16 %541, i64 0, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %247, <1 x i16> %545, i1 true) #3, !dbg !56
  %546 = insertelement <1 x i16> poison, i16 %542, i64 0, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %249, <1 x i16> %546, i1 true) #3, !dbg !56
  %547 = insertelement <1 x i16> poison, i16 %543, i64 0, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %251, <1 x i16> %547, i1 true) #3, !dbg !56
  %548 = insertelement <1 x i16> poison, i16 %544, i64 0, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %253, <1 x i16> %548, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %549 = load i16, ptr addrspace(3) %255, align 2, !dbg !56
  %550 = load i16, ptr addrspace(3) %257, align 2, !dbg !56
  %551 = load i16, ptr addrspace(3) %259, align 2, !dbg !56
  %552 = load i16, ptr addrspace(3) %261, align 2, !dbg !56
  %553 = xor i16 %549, %401, !dbg !57
  %554 = xor i16 %550, %402, !dbg !57
  %555 = xor i16 %551, %403, !dbg !57
  %556 = xor i16 %552, %404, !dbg !57
  %557 = mul i32 %14, 3, !dbg !59
  %558 = mul i32 %15, 3, !dbg !59
  %559 = mul i32 %16, 3, !dbg !59
  %560 = mul i32 %17, 3, !dbg !59
  %561 = add i32 %557, %9, !dbg !60
  %562 = add i32 %558, %9, !dbg !60
  %563 = add i32 %559, %9, !dbg !60
  %564 = add i32 %560, %9, !dbg !60
  %565 = sext i32 %561 to i64, !dbg !61
  %566 = getelementptr i16, ptr addrspace(1) %1, i64 %565, !dbg !61
  %567 = sext i32 %562 to i64, !dbg !61
  %568 = getelementptr i16, ptr addrspace(1) %1, i64 %567, !dbg !61
  %569 = sext i32 %563 to i64, !dbg !61
  %570 = getelementptr i16, ptr addrspace(1) %1, i64 %569, !dbg !61
  %571 = sext i32 %564 to i64, !dbg !61
  %572 = getelementptr i16, ptr addrspace(1) %1, i64 %571, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %573 = insertelement <1 x i16> poison, i16 %553, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %405, <1 x i16> %573, i1 true) #3, !dbg !62
  %574 = insertelement <1 x i16> poison, i16 %554, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %407, <1 x i16> %574, i1 true) #3, !dbg !62
  %575 = insertelement <1 x i16> poison, i16 %555, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %409, <1 x i16> %575, i1 true) #3, !dbg !62
  %576 = insertelement <1 x i16> poison, i16 %556, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.shared.b16 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %411, <1 x i16> %576, i1 true) #3, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %577 = load i16, ptr addrspace(3) %413, align 2, !dbg !62
  %578 = load i16, ptr addrspace(3) %415, align 2, !dbg !62
  %579 = load i16, ptr addrspace(3) %417, align 2, !dbg !62
  %580 = load i16, ptr addrspace(3) %419, align 2, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %577, ptr addrspace(1) %566, i1 %39) #3, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %578, ptr addrspace(1) %568, i1 %40) #3, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %579, ptr addrspace(1) %570, i1 %41) #3, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %580, ptr addrspace(1) %572, i1 %42) #3, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmfpbriu5l7n7aqripryac7hspwe6imvcqnmw6qqwc42q7q6sqkw.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused_sort_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_1", linkageName: "triton_per_fused_sort_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 56, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 575, column: 44, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 38, column: 69, scope: !7)
!29 = !DILocation(line: 505, column: 21, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!31 = !DILocation(line: 506, column: 40, scope: !30, inlinedAt: !28)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !28)
!33 = distinct !DILexicalBlockFile(scope: !30, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !28)
!36 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!37 = !DILocation(line: 507, column: 41, scope: !30, inlinedAt: !28)
!38 = !DILocation(line: 510, column: 20, scope: !30, inlinedAt: !28)
!39 = !DILocation(line: 511, column: 22, scope: !30, inlinedAt: !28)
!40 = !DILocation(line: 516, column: 36, scope: !30, inlinedAt: !28)
!41 = !DILocation(line: 516, column: 23, scope: !30, inlinedAt: !28)
!42 = !DILocation(line: 519, column: 37, scope: !30, inlinedAt: !28)
!43 = !DILocation(line: 519, column: 23, scope: !30, inlinedAt: !28)
!44 = !DILocation(line: 529, column: 37, scope: !30, inlinedAt: !28)
!45 = !DILocation(line: 530, column: 39, scope: !30, inlinedAt: !28)
!46 = !DILocation(line: 538, column: 22, scope: !30, inlinedAt: !28)
!47 = !DILocation(line: 544, column: 31, scope: !30, inlinedAt: !28)
!48 = !DILocation(line: 545, column: 29, scope: !30, inlinedAt: !28)
!49 = !DILocation(line: 545, column: 48, scope: !30, inlinedAt: !28)
!50 = !DILocation(line: 545, column: 8, scope: !30, inlinedAt: !28)
!51 = !DILocation(line: 547, column: 28, scope: !30, inlinedAt: !28)
!52 = !DILocation(line: 548, column: 38, scope: !30, inlinedAt: !28)
!53 = !DILocation(line: 548, column: 46, scope: !30, inlinedAt: !28)
!54 = !DILocation(line: 548, column: 15, scope: !30, inlinedAt: !28)
!55 = !DILocation(line: 549, column: 48, scope: !30, inlinedAt: !28)
!56 = !DILocation(line: 549, column: 59, scope: !30, inlinedAt: !28)
!57 = !DILocation(line: 549, column: 22, scope: !30, inlinedAt: !28)
!58 = !DILocation(line: 551, column: 18, scope: !30, inlinedAt: !28)
!59 = !DILocation(line: 39, column: 32, scope: !7)
!60 = !DILocation(line: 39, column: 30, scope: !7)
!61 = !DILocation(line: 39, column: 25, scope: !7)
!62 = !DILocation(line: 39, column: 43, scope: !7)
!63 = !DILocation(line: 39, column: 4, scope: !7)
