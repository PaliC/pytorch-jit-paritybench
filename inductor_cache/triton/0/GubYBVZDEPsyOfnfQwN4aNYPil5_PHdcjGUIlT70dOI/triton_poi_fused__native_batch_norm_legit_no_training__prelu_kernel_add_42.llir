; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = sdiv i32 %21, 16, !dbg !14
  %23 = srem i32 %22, 64, !dbg !15
  %24 = sext i32 %21 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !16
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %27 = sext i32 %23 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !28
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %24, !dbg !32
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !34
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !36
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %12, i64 %24, !dbg !38
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !39
  %59 = fadd float %33, 0x3EE4F8B580000000, !dbg !40
  %60 = fadd float %35, 0x3EE4F8B580000000, !dbg !40
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %61, 0, !dbg !41
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %62, 0, !dbg !41
  br i1 %.not.i, label %68, label %63, !dbg !41

63:                                               ; preds = %15
  br i1 %.not1.i, label %66, label %64, !dbg !41

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

68:                                               ; preds = %15
  br i1 %.not1.i, label %71, label %69, !dbg !41

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !41
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %73, 0, !dbg !41
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %74, 0, !dbg !41
  br i1 %.not.i1, label %80, label %75, !dbg !41

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !41

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !41

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %76, %78, %81, %83
  %.0.i3 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !41
  %85 = extractvalue { i32, i32 } %26, 1, !dbg !17
  %86 = bitcast i32 %85 to float, !dbg !17
  %87 = bitcast i32 %30 to float, !dbg !19
  %88 = fsub float %86, %87, !dbg !42
  %89 = extractvalue { i32, i32 } %26, 0, !dbg !17
  %90 = bitcast i32 %89 to float, !dbg !17
  %91 = bitcast i32 %29 to float, !dbg !19
  %92 = fsub float %90, %91, !dbg !42
  %93 = extractvalue { i32, i32 } %58, 1, !dbg !39
  %94 = extractvalue { i32, i32 } %58, 0, !dbg !39
  %95 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !37
  %96 = insertelement <2 x i32> %95, i32 %44, i64 1, !dbg !37
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !37
  %98 = bitcast i32 %55 to float, !dbg !37
  %99 = extractvalue { i32, i32 } %53, 1, !dbg !35
  %100 = extractvalue { i32, i32 } %53, 0, !dbg !35
  %101 = extractvalue { i32, i32 } %51, 1, !dbg !33
  %102 = bitcast i32 %101 to float, !dbg !33
  %103 = extractvalue { i32, i32 } %51, 0, !dbg !33
  %104 = bitcast i32 %103 to float, !dbg !33
  %105 = bitcast i32 %49 to float, !dbg !31
  %106 = bitcast i32 %48 to float, !dbg !31
  %107 = extractvalue { i32, i32 } %46, 1, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = extractvalue { i32, i32 } %46, 0, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = bitcast i32 %41 to float, !dbg !25
  %112 = bitcast i32 %40 to float, !dbg !25
  %113 = bitcast i32 %38 to float, !dbg !23
  %114 = bitcast i32 %37 to float, !dbg !23
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !43
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !43
  %117 = fmul float %92, %115, !dbg !44
  %118 = fmul float %88, %116, !dbg !44
  %119 = fmul float %117, %114, !dbg !45
  %120 = fmul float %118, %113, !dbg !45
  %121 = fadd float %119, %112, !dbg !46
  %122 = fadd float %120, %111, !dbg !46
  %123 = fcmp ogt float %110, 0.000000e+00, !dbg !47
  %124 = fcmp ogt float %108, 0.000000e+00, !dbg !47
  %125 = fmul float %106, %110, !dbg !48
  %126 = fmul float %108, %105, !dbg !48
  %127 = select i1 %123, float %110, float %125, !dbg !49
  %128 = select i1 %124, float %108, float %126, !dbg !49
  %129 = fadd float %127, %104, !dbg !50
  %130 = fadd float %128, %102, !dbg !50
  %131 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !35
  %132 = insertelement <2 x i32> %131, i32 %43, i64 1, !dbg !35
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !35
  %134 = insertelement <2 x float> %133, float %121, i64 1, !dbg !51
  %135 = fcmp ogt <2 x float> %134, zeroinitializer, !dbg !51
  %136 = insertelement <2 x float> %134, float %98, i64 0, !dbg !52
  %137 = fmul <2 x float> %136, %133, !dbg !52
  %138 = select <2 x i1> %135, <2 x float> %134, <2 x float> %137, !dbg !53
  %139 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !54
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !54
  %141 = insertelement <2 x float> %140, float %129, i64 1, !dbg !54
  %142 = fadd <2 x float> %138, %141, !dbg !54
  %143 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !51
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !51
  %145 = insertelement <2 x float> %144, float %122, i64 1, !dbg !51
  %146 = fcmp ogt <2 x float> %145, zeroinitializer, !dbg !51
  %147 = fmul <2 x float> %145, %97, !dbg !52
  %148 = select <2 x i1> %146, <2 x float> %145, <2 x float> %147, !dbg !53
  %149 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !54
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !54
  %151 = insertelement <2 x float> %150, float %130, i64 1, !dbg !54
  %152 = fadd <2 x float> %148, %151, !dbg !54
  %153 = extractelement <2 x float> %142, i64 0, !dbg !55
  %154 = extractelement <2 x float> %142, i64 1, !dbg !56
  %155 = fadd float %153, %154, !dbg !55
  %156 = extractelement <2 x float> %152, i64 0, !dbg !55
  %157 = extractelement <2 x float> %152, i64 1, !dbg !56
  %158 = fadd float %156, %157, !dbg !55
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !57
  %160 = bitcast float %154 to i32, !dbg !56
  %161 = bitcast float %157 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %159, i1 true) #3, !dbg !56
  %162 = getelementptr float, ptr addrspace(1) %13, i64 %24, !dbg !58
  %163 = bitcast float %155 to i32, !dbg !59
  %164 = bitcast float %158 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %163, i32 %164, ptr addrspace(1) %162, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cco4dkkh3p75bnp254axej5yppfdsnykyxc6lh7hpthsl2nftu6t.py", directory: "inductor_cache/co")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_42", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 26, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 35, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 60, column: 35, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 40, scope: !7)
!57 = !DILocation(line: 63, column: 28, scope: !7)
!58 = !DILocation(line: 64, column: 25, scope: !7)
!59 = !DILocation(line: 64, column: 37, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
