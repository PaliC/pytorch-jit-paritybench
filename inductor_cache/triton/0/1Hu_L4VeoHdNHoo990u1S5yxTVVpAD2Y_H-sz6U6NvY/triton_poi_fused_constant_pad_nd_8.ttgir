#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_constant_pad_nd_8(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":19:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<6144> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<384> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<-408> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<-1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<7776> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<24> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<18> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<432> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<31104> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_10 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_9 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_8 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_7 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = arith.remsi %8, %cst_8 : tensor<256xi32, #blocked> loc(#loc10)
    %10 = arith.divsi %4, %cst_6 : tensor<256xi32, #blocked> loc(#loc11)
    %11 = arith.remsi %4, %cst_9 : tensor<256xi32, #blocked> loc(#loc12)
    %12 = arith.addi %7, %cst_5 : tensor<256xi32, #blocked> loc(#loc13)
    %13 = arith.extsi %12 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc14)
    %14 = arith.cmpi sge, %13, %cst_4 : tensor<256xi64, #blocked> loc(#loc14)
    %15 = arith.cmpi slt, %13, %cst_3 : tensor<256xi64, #blocked> loc(#loc15)
    %16 = arith.addi %9, %cst_5 : tensor<256xi32, #blocked> loc(#loc16)
    %17 = arith.extsi %16 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc17)
    %18 = arith.cmpi sge, %17, %cst_4 : tensor<256xi64, #blocked> loc(#loc17)
    %19 = arith.cmpi slt, %17, %cst_3 : tensor<256xi64, #blocked> loc(#loc18)
    %20 = arith.andi %14, %15 : tensor<256xi1, #blocked> loc(#loc19)
    %21 = arith.andi %20, %18 : tensor<256xi1, #blocked> loc(#loc20)
    %22 = arith.andi %21, %19 : tensor<256xi1, #blocked> loc(#loc21)
    %23 = arith.addi %11, %cst_2 : tensor<256xi32, #blocked> loc(#loc22)
    %24 = arith.muli %7, %cst_1 : tensor<256xi32, #blocked> loc(#loc23)
    %25 = arith.addi %23, %24 : tensor<256xi32, #blocked> loc(#loc24)
    %26 = arith.muli %10, %cst_0 : tensor<256xi32, #blocked> loc(#loc25)
    %27 = arith.addi %25, %26 : tensor<256xi32, #blocked> loc(#loc26)
    %28 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %29 = tt.addptr %28, %27 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc27)
    %30 = arith.andi %22, %5 : tensor<256xi1, #blocked> loc(#loc28)
    %31 = tt.load %29, %30, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc29)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %33 = tt.addptr %32, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc30)
    tt.store %33, %31, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc31)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":21:28)
#loc3 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":21:33)
#loc4 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":22:36)
#loc5 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":22:23)
#loc6 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":23:21)
#loc7 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":24:21)
#loc8 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":24:28)
#loc9 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":25:21)
#loc10 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":25:27)
#loc11 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":26:19)
#loc12 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":27:19)
#loc13 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":29:18)
#loc14 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":31:19)
#loc15 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":33:18)
#loc16 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":34:18)
#loc17 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":35:19)
#loc18 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":36:18)
#loc19 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":37:18)
#loc20 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":38:18)
#loc21 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":39:19)
#loc22 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:40)
#loc23 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:49)
#loc24 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:45)
#loc25 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:59)
#loc26 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:54)
#loc27 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:31)
#loc28 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:72)
#loc29 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":40:64)
#loc30 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":41:25)
#loc31 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":41:37)
#loc32 = loc("inductor_cache/uz/cuzvdedtrwg76ivv3g2tvu5ltopfyzlo5fz4en6pe5rb2wrlf7ed.py":41:4)
