; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_mul_pow_rsqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = shl i32 %.fr, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %.lobit38 = lshr i32 %9, 7, !dbg !12
  %11 = and i32 %.lobit38, 3, !dbg !12
  %12 = or disjoint i32 %8, %10, !dbg !13
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = icmp slt i32 %12, 384, !dbg !14
  %16 = icmp slt i32 %13, 384, !dbg !14
  %17 = icmp slt i32 %14, 384, !dbg !14
  %18 = lshr i32 %9, 3, !dbg !15
  %19 = and i32 %18, 15, !dbg !15
  %20 = lshr i32 %9, 3, !dbg !15
  %21 = and i32 %20, 16, !dbg !15
  %22 = or disjoint i32 %19, %21, !dbg !15
  %23 = lshr i32 %9, 3, !dbg !15
  %24 = and i32 %23, 32, !dbg !15
  %25 = or disjoint i32 %22, %24, !dbg !15
  %26 = or disjoint i32 %25, 64, !dbg !15
  %27 = or disjoint i32 %25, 128, !dbg !15
  %28 = or disjoint i32 %25, 192, !dbg !15
  %29 = or disjoint i32 %25, 256, !dbg !15
  %30 = or disjoint i32 %25, 320, !dbg !15
  %31 = or disjoint i32 %25, 384, !dbg !15
  %32 = or disjoint i32 %25, 448, !dbg !15
  %33 = shl i32 %9, 2, !dbg !15
  %34 = and i32 %33, 508, !dbg !15
  %35 = srem i32 %13, 96, !dbg !16
  %36 = srem i32 %14, 96, !dbg !16
  %37 = mul nsw i32 %35, 864, !dbg !17
  %38 = mul nsw i32 %36, 864, !dbg !17
  %39 = srem i32 %12, 96, !dbg !18
  %40 = sub nsw i32 %12, %39, !dbg !18
  %41 = shl i32 %9, 5
  %42 = and i32 %41, 4064
  %.reass = or disjoint i32 %42, %11
  %43 = and i32 %9, 511
  %44 = lshr exact i32 %42, 1
  %45 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %44
  %46 = getelementptr float, ptr addrspace(3) %45, i32 %.reass
  %47 = or disjoint i32 %.reass, 8
  %48 = lshr i32 %47, 3
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i32 %48
  %50 = getelementptr float, ptr addrspace(3) %49, i32 %47
  %51 = or disjoint i32 %.reass, 16
  %52 = lshr i32 %51, 3
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52
  %54 = getelementptr float, ptr addrspace(3) %53, i32 %51
  %55 = or disjoint i32 %.reass, 24
  %56 = lshr i32 %55, 3
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %55
  %59 = or disjoint i32 %.reass, 4
  %60 = getelementptr float, ptr addrspace(3) %45, i32 %59
  %61 = or disjoint i32 %.reass, 12
  %62 = lshr i32 %61, 3
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61
  %65 = or disjoint i32 %.reass, 20
  %66 = lshr i32 %65, 3
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65
  %69 = or disjoint i32 %.reass, 28
  %70 = lshr i32 %69, 3
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69
  %73 = lshr i32 %43, 3
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %73
  %75 = getelementptr inbounds float, ptr addrspace(3) %74, i32 %43
  %76 = or disjoint i32 %43, 512
  %77 = lshr i32 %76, 3
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %76
  %80 = or disjoint i32 %43, 1024
  %81 = lshr i32 %80, 3
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81
  %83 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %80
  %84 = or disjoint i32 %43, 1536
  %85 = lshr i32 %84, 3
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84
  %88 = or disjoint i32 %43, 2048
  %89 = lshr i32 %88, 3
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %88
  %92 = or disjoint i32 %43, 2560
  %93 = lshr i32 %92, 3
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %92
  %96 = or disjoint i32 %43, 3072
  %97 = lshr i32 %96, 3
  %98 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %97
  %99 = getelementptr inbounds float, ptr addrspace(3) %98, i32 %96
  %100 = or disjoint i32 %43, 3584
  %101 = lshr i32 %100, 3
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100
  %104 = zext nneg i32 %34 to i64, !dbg !19
  %105 = sext i32 %38 to i64, !dbg !19
  %106 = sext i32 %37 to i64, !dbg !19
  %107 = zext nneg i32 %30 to i64, !dbg !19
  %108 = zext nneg i32 %31 to i64, !dbg !19
  %109 = zext nneg i32 %32 to i64, !dbg !19
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !19
  %invariant.gep46 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !19
  %110 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !20
  br label %111, !dbg !19

111:                                              ; preds = %6, %111
  %112 = phi i1 [ true, %6 ], [ false, %111 ]
  %indvars.iv = phi i64 [ 0, %6 ], [ 512, %111 ]
  %113 = phi <8 x float> [ zeroinitializer, %6 ], [ %230, %111 ]
  %114 = or disjoint i64 %indvars.iv, %107, !dbg !21
  %115 = or disjoint i64 %indvars.iv, %108, !dbg !21
  %116 = or disjoint i64 %indvars.iv, %109, !dbg !21
  %117 = or disjoint i64 %indvars.iv, %104, !dbg !21
  %118 = icmp samesign ult i64 %114, 864, !dbg !22
  %119 = icmp samesign ult i64 %115, 864, !dbg !22
  %120 = icmp samesign ult i64 %116, 864, !dbg !22
  %121 = icmp samesign ult i64 %117, 864, !dbg !22
  %122 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %123 = or disjoint i32 %25, %122, !dbg !23
  %.udiv = udiv i32 %123, 9, !dbg !23
  %124 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %125 = or disjoint i32 %26, %124, !dbg !23
  %126 = udiv i32 %125, 9, !dbg !23
  %127 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %128 = or disjoint i32 %27, %127, !dbg !23
  %129 = udiv i32 %128, 9, !dbg !23
  %130 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %131 = or disjoint i32 %28, %130, !dbg !23
  %132 = udiv i32 %131, 9, !dbg !23
  %133 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %134 = or disjoint i32 %29, %133, !dbg !23
  %135 = udiv i32 %134, 9, !dbg !23
  %136 = trunc nuw nsw i64 %114 to i32, !dbg !23
  %137 = udiv i32 %136, 9, !dbg !23
  %138 = trunc nuw nsw i64 %115 to i32, !dbg !23
  %139 = udiv i32 %138, 9, !dbg !23
  %140 = trunc nuw nsw i64 %116 to i32, !dbg !23
  %141 = udiv i32 %140, 9, !dbg !23
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %117, !dbg !24
  %gep47 = getelementptr float, ptr addrspace(1) %invariant.gep46, i64 %117, !dbg !24
  %142 = and i1 %15, %118, !dbg !25
  %143 = and i1 %15, %119, !dbg !25
  %144 = and i1 %15, %120, !dbg !25
  %145 = and i1 %16, %121, !dbg !25
  %146 = and i1 %17, %121, !dbg !25
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145) #5, !dbg !26
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !26
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !26
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !26
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !26
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep47, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146) #5, !dbg !26
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !26
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !26
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %157 = insertelement <1 x i32> poison, i32 %148, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %157, i1 true) #5, !dbg !26
  %158 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %158, i1 true) #5, !dbg !26
  %159 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %159, i1 true) #5, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %160, i1 true) #5, !dbg !26
  %161 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %161, i1 true) #5, !dbg !26
  %162 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %162, i1 true) #5, !dbg !26
  %163 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %163, i1 true) #5, !dbg !26
  %164 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %164, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %165 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %166 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %167 = load float, ptr addrspace(3) %83, align 4, !dbg !26
  %168 = load float, ptr addrspace(3) %87, align 4, !dbg !26
  %169 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %170 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %171 = load float, ptr addrspace(3) %99, align 4, !dbg !26
  %172 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %173 = add i32 %.udiv, %40, !dbg !27
  %174 = add i32 %126, %40, !dbg !27
  %175 = add i32 %129, %40, !dbg !27
  %176 = add i32 %132, %40, !dbg !27
  %177 = add i32 %135, %40, !dbg !27
  %178 = add i32 %137, %40, !dbg !27
  %179 = add i32 %139, %40, !dbg !27
  %180 = add i32 %141, %40, !dbg !27
  %181 = sext i32 %173 to i64, !dbg !28
  %182 = getelementptr float, ptr addrspace(1) %2, i64 %181, !dbg !28
  %183 = sext i32 %174 to i64, !dbg !28
  %184 = getelementptr float, ptr addrspace(1) %2, i64 %183, !dbg !28
  %185 = sext i32 %175 to i64, !dbg !28
  %186 = getelementptr float, ptr addrspace(1) %2, i64 %185, !dbg !28
  %187 = sext i32 %176 to i64, !dbg !28
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %187, !dbg !28
  %189 = sext i32 %177 to i64, !dbg !28
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %189, !dbg !28
  %191 = sext i32 %178 to i64, !dbg !28
  %192 = getelementptr float, ptr addrspace(1) %2, i64 %191, !dbg !28
  %193 = sext i32 %179 to i64, !dbg !28
  %194 = getelementptr float, ptr addrspace(1) %2, i64 %193, !dbg !28
  %195 = sext i32 %180 to i64, !dbg !28
  %196 = getelementptr float, ptr addrspace(1) %2, i64 %195, !dbg !28
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %188, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %190, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %142, i32 0, i1 %142) #5, !dbg !29
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %194, i1 %143, i32 0, i1 %143) #5, !dbg !29
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %196, i1 %144, i32 0, i1 %144) #5, !dbg !29
  %205 = insertelement <8 x i32> poison, i32 %197, i64 0, !dbg !29
  %206 = insertelement <8 x i32> %205, i32 %198, i64 1, !dbg !29
  %207 = insertelement <8 x i32> %206, i32 %199, i64 2, !dbg !29
  %208 = insertelement <8 x i32> %207, i32 %200, i64 3, !dbg !29
  %209 = insertelement <8 x i32> %208, i32 %201, i64 4, !dbg !29
  %210 = insertelement <8 x i32> %209, i32 %202, i64 5, !dbg !29
  %211 = insertelement <8 x i32> %210, i32 %203, i64 6, !dbg !29
  %212 = insertelement <8 x i32> %211, i32 %204, i64 7, !dbg !29
  %213 = bitcast <8 x i32> %212 to <8 x float>, !dbg !29
  %214 = fadd <8 x float> %213, splat (float 1.000000e+00), !dbg !30
  %215 = insertelement <8 x float> poison, float %165, i64 0, !dbg !31
  %216 = insertelement <8 x float> %215, float %166, i64 1, !dbg !31
  %217 = insertelement <8 x float> %216, float %167, i64 2, !dbg !31
  %218 = insertelement <8 x float> %217, float %168, i64 3, !dbg !31
  %219 = insertelement <8 x float> %218, float %169, i64 4, !dbg !31
  %220 = insertelement <8 x float> %219, float %170, i64 5, !dbg !31
  %221 = insertelement <8 x float> %220, float %171, i64 6, !dbg !31
  %222 = insertelement <8 x float> %221, float %172, i64 7, !dbg !31
  %223 = fmul <8 x float> %222, %214, !dbg !31
  %224 = fmul <8 x float> %223, %223, !dbg !32
  %225 = fadd <8 x float> %113, %224, !dbg !33
  %226 = insertelement <8 x i1> %110, i1 %142, i64 1, !dbg !20
  %227 = insertelement <8 x i1> %226, i1 %143, i64 2, !dbg !20
  %228 = insertelement <8 x i1> %227, i1 %144, i64 3, !dbg !20
  %229 = shufflevector <8 x i1> %228, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3>, !dbg !20
  %230 = select <8 x i1> %229, <8 x float> %225, <8 x float> %113, !dbg !20
  br i1 %112, label %111, label %231, !dbg !19

231:                                              ; preds = %111
  %232 = and i32 %9, 31, !dbg !12
  %233 = lshr i32 %9, 5, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %shift = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %234 = fadd <8 x float> %230, %shift, !dbg !38
  %shift59 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %235 = fadd <8 x float> %shift59, %234, !dbg !38
  %shift60 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %236 = fadd <8 x float> %shift60, %235, !dbg !38
  %shift61 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %237 = fadd <8 x float> %shift61, %236, !dbg !38
  %shift62 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %238 = fadd <8 x float> %shift62, %237, !dbg !38
  %shift63 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %239 = fadd <8 x float> %shift63, %238, !dbg !38
  %shift64 = shufflevector <8 x float> %230, <8 x float> poison, <8 x i32> <i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %240 = fadd <8 x float> %shift64, %239, !dbg !38
  %241 = extractelement <8 x float> %240, i64 0, !dbg !38
  %242 = bitcast float %241 to i32, !dbg !34
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 16, i32 31), !dbg !34
  %244 = bitcast i32 %243 to float, !dbg !34
  %245 = fadd float %241, %244, !dbg !38
  %246 = bitcast float %245 to i32, !dbg !34
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 8, i32 31), !dbg !34
  %248 = bitcast i32 %247 to float, !dbg !34
  %249 = fadd float %245, %248, !dbg !38
  %250 = lshr i32 %232, 3, !dbg !34
  %251 = icmp samesign ult i32 %232, 8, !dbg !34
  %252 = and i32 %233, 15, !dbg !34
  %253 = shl nuw nsw i32 %10, 4, !dbg !34
  %254 = or disjoint i32 %253, %252, !dbg !34
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !34
  %256 = bitcast float %249 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 %251) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %257 = icmp slt i32 %9, 128, !dbg !34
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !34
  %259 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %258, i1 %257) #5, !dbg !34
  %260 = bitcast i32 %259 to float, !dbg !34
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 8, i32 31), !dbg !34
  %262 = bitcast i32 %261 to float, !dbg !34
  %263 = fadd float %260, %262, !dbg !38
  %264 = bitcast float %263 to i32, !dbg !34
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !34
  %266 = bitcast i32 %265 to float, !dbg !34
  %267 = fadd float %263, %266, !dbg !38
  %268 = bitcast float %267 to i32, !dbg !34
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 2, i32 31), !dbg !34
  %270 = bitcast i32 %269 to float, !dbg !34
  %271 = fadd float %267, %270, !dbg !38
  %272 = bitcast float %271 to i32, !dbg !34
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 1, i32 31), !dbg !34
  %274 = bitcast i32 %273 to float, !dbg !34
  %275 = fadd float %271, %274, !dbg !38
  %276 = and i32 %9, 15, !dbg !34
  %277 = icmp eq i32 %276, 0, !dbg !34
  %278 = and i1 %257, %277, !dbg !34
  %279 = bitcast float %275 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %279, i1 %278) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %280 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !34
  %281 = load float, ptr addrspace(3) %280, align 16, !dbg !34
  %282 = fadd float %281, 0x3E45798EE0000000, !dbg !40
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %283, 0, !dbg !41
  br i1 %.not.i, label %286, label %284, !dbg !41

284:                                              ; preds = %231
  %285 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %282), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

286:                                              ; preds = %231
  %287 = tail call float @llvm.nvvm.rsqrt.approx.f(float %282), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %284, %286
  %.0.i = phi float [ %285, %284 ], [ %287, %286 ], !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %288 = sext i32 %12 to i64, !dbg !43
  %289 = getelementptr float, ptr addrspace(1) %0, i64 %288, !dbg !43
  %290 = shl nuw nsw i32 %252, 2, !dbg !44
  %291 = or disjoint i32 %290, %250, !dbg !44
  %292 = icmp eq i32 %291, 0, !dbg !44
  %293 = bitcast float %.0.i to i32, !dbg !44
  %294 = and i1 %292, %15, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %289, i1 %294) #5, !dbg !44
  %295 = mul i32 %13, 864, !dbg !45
  %296 = mul i32 %14, 864, !dbg !45
  %297 = shl i32 %9, 9
  %298 = and i32 %297, 3584
  %.reass27 = or disjoint i32 %298, %19
  %299 = or disjoint i32 %21, %.reass27
  %300 = or disjoint i32 %299, %24
  %301 = and i32 %33, 2044
  %302 = lshr exact i32 %298, 5
  %303 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %302
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300
  %305 = or disjoint i32 %300, 64
  %306 = getelementptr float, ptr addrspace(3) %303, i32 %305
  %307 = or disjoint i32 %300, 128
  %308 = getelementptr float, ptr addrspace(3) %303, i32 %307
  %309 = or disjoint i32 %300, 192
  %310 = getelementptr float, ptr addrspace(3) %303, i32 %309
  %311 = or disjoint i32 %300, 256
  %312 = getelementptr float, ptr addrspace(3) %303, i32 %311
  %313 = or disjoint i32 %300, 320
  %314 = getelementptr float, ptr addrspace(3) %303, i32 %313
  %315 = or disjoint i32 %300, 384
  %316 = getelementptr float, ptr addrspace(3) %303, i32 %315
  %317 = or disjoint i32 %300, 448
  %318 = getelementptr float, ptr addrspace(3) %303, i32 %317
  %319 = lshr i32 %33, 7
  %320 = and i32 %319, 12
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %301
  %323 = or disjoint i32 %301, 2048
  %324 = lshr i32 %323, 7
  %325 = and i32 %324, 28
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %323
  %invariant.gep48 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !46
  %invariant.gep50 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !46
  %328 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 4
  %329 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 8
  %330 = getelementptr inbounds i8, ptr addrspace(3) %322, i32 12
  br label %331, !dbg !46

331:                                              ; preds = %__nv_rsqrtf.exit, %331
  %332 = phi i1 [ true, %__nv_rsqrtf.exit ], [ false, %331 ]
  %indvars.iv36 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ 512, %331 ]
  %333 = or disjoint i64 %indvars.iv36, %104, !dbg !47
  %334 = or disjoint i64 %indvars.iv36, %107, !dbg !47
  %335 = or disjoint i64 %indvars.iv36, %108, !dbg !47
  %336 = or disjoint i64 %indvars.iv36, %109, !dbg !47
  %337 = icmp samesign ult i64 %333, 864, !dbg !48
  %338 = icmp samesign ult i64 %334, 864, !dbg !48
  %339 = icmp samesign ult i64 %335, 864, !dbg !48
  %340 = icmp samesign ult i64 %336, 864, !dbg !48
  %341 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !49
  %342 = or disjoint i32 %25, %341, !dbg !49
  %.udiv35 = udiv i32 %342, 9, !dbg !49
  %343 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !49
  %344 = or disjoint i32 %26, %343, !dbg !49
  %345 = udiv i32 %344, 9, !dbg !49
  %346 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !49
  %347 = or disjoint i32 %27, %346, !dbg !49
  %348 = udiv i32 %347, 9, !dbg !49
  %349 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !49
  %350 = or disjoint i32 %28, %349, !dbg !49
  %351 = udiv i32 %350, 9, !dbg !49
  %352 = trunc nuw nsw i64 %indvars.iv36 to i32, !dbg !49
  %353 = or disjoint i32 %29, %352, !dbg !49
  %354 = udiv i32 %353, 9, !dbg !49
  %355 = trunc nuw nsw i64 %334 to i32, !dbg !49
  %356 = udiv i32 %355, 9, !dbg !49
  %357 = trunc nuw nsw i64 %335 to i32, !dbg !49
  %358 = udiv i32 %357, 9, !dbg !49
  %359 = trunc nuw nsw i64 %336 to i32, !dbg !49
  %360 = udiv i32 %359, 9, !dbg !49
  %gep49 = getelementptr float, ptr addrspace(1) %invariant.gep48, i64 %333, !dbg !50
  %gep51 = getelementptr float, ptr addrspace(1) %invariant.gep50, i64 %333, !dbg !50
  %361 = and i1 %16, %337, !dbg !51
  %362 = and i1 %17, %337, !dbg !51
  %363 = and i1 %15, %338, !dbg !51
  %364 = and i1 %15, %339, !dbg !51
  %365 = and i1 %15, %340, !dbg !51
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep49, i1 %361, i32 0, i1 %361, i32 0, i1 %361, i32 0, i1 %361, i32 0, i1 %361) #5, !dbg !52
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !52
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !52
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !52
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !52
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep51, i1 %362, i32 0, i1 %362, i32 0, i1 %362, i32 0, i1 %362, i32 0, i1 %362) #5, !dbg !52
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !52
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !52
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !52
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %376 = insertelement <1 x i32> poison, i32 %367, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %376, i1 true) #5, !dbg !52
  %377 = insertelement <1 x i32> poison, i32 %368, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %50, <1 x i32> %377, i1 true) #5, !dbg !52
  %378 = insertelement <1 x i32> poison, i32 %369, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %378, i1 true) #5, !dbg !52
  %379 = insertelement <1 x i32> poison, i32 %370, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %379, i1 true) #5, !dbg !52
  %380 = insertelement <1 x i32> poison, i32 %372, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %380, i1 true) #5, !dbg !52
  %381 = insertelement <1 x i32> poison, i32 %373, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %381, i1 true) #5, !dbg !52
  %382 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %382, i1 true) #5, !dbg !52
  %383 = insertelement <1 x i32> poison, i32 %375, i64 0, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %383, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %384 = load float, ptr addrspace(3) %75, align 4, !dbg !52
  %385 = load float, ptr addrspace(3) %79, align 4, !dbg !52
  %386 = load float, ptr addrspace(3) %83, align 4, !dbg !52
  %387 = load float, ptr addrspace(3) %87, align 4, !dbg !52
  %388 = load float, ptr addrspace(3) %91, align 4, !dbg !52
  %389 = load float, ptr addrspace(3) %95, align 4, !dbg !52
  %390 = load float, ptr addrspace(3) %99, align 4, !dbg !52
  %391 = load float, ptr addrspace(3) %103, align 4, !dbg !52
  %392 = add i32 %.udiv35, %40, !dbg !53
  %393 = add i32 %345, %40, !dbg !53
  %394 = add i32 %348, %40, !dbg !53
  %395 = add i32 %351, %40, !dbg !53
  %396 = add i32 %354, %40, !dbg !53
  %397 = add i32 %356, %40, !dbg !53
  %398 = add i32 %358, %40, !dbg !53
  %399 = add i32 %360, %40, !dbg !53
  %400 = sext i32 %392 to i64, !dbg !54
  %401 = getelementptr float, ptr addrspace(1) %2, i64 %400, !dbg !54
  %402 = sext i32 %393 to i64, !dbg !54
  %403 = getelementptr float, ptr addrspace(1) %2, i64 %402, !dbg !54
  %404 = sext i32 %394 to i64, !dbg !54
  %405 = getelementptr float, ptr addrspace(1) %2, i64 %404, !dbg !54
  %406 = sext i32 %395 to i64, !dbg !54
  %407 = getelementptr float, ptr addrspace(1) %2, i64 %406, !dbg !54
  %408 = sext i32 %396 to i64, !dbg !54
  %409 = getelementptr float, ptr addrspace(1) %2, i64 %408, !dbg !54
  %410 = sext i32 %397 to i64, !dbg !54
  %411 = getelementptr float, ptr addrspace(1) %2, i64 %410, !dbg !54
  %412 = sext i32 %398 to i64, !dbg !54
  %413 = getelementptr float, ptr addrspace(1) %2, i64 %412, !dbg !54
  %414 = sext i32 %399 to i64, !dbg !54
  %415 = getelementptr float, ptr addrspace(1) %2, i64 %414, !dbg !54
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %15, i32 0, i1 %15) #5, !dbg !55
  %417 = bitcast i32 %416 to float, !dbg !55
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %403, i1 %15, i32 0, i1 %15) #5, !dbg !55
  %419 = bitcast i32 %418 to float, !dbg !55
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %15, i32 0, i1 %15) #5, !dbg !55
  %421 = bitcast i32 %420 to float, !dbg !55
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %15, i32 0, i1 %15) #5, !dbg !55
  %423 = bitcast i32 %422 to float, !dbg !55
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %409, i1 %15, i32 0, i1 %15) #5, !dbg !55
  %425 = bitcast i32 %424 to float, !dbg !55
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %411, i1 %363, i32 0, i1 %363) #5, !dbg !55
  %427 = bitcast i32 %426 to float, !dbg !55
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %413, i1 %364, i32 0, i1 %364) #5, !dbg !55
  %429 = bitcast i32 %428 to float, !dbg !55
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %415, i1 %365, i32 0, i1 %365) #5, !dbg !55
  %431 = bitcast i32 %430 to float, !dbg !55
  %432 = fadd float %417, 1.000000e+00, !dbg !56
  %433 = fadd float %419, 1.000000e+00, !dbg !56
  %434 = fadd float %421, 1.000000e+00, !dbg !56
  %435 = fadd float %423, 1.000000e+00, !dbg !56
  %436 = fadd float %425, 1.000000e+00, !dbg !56
  %437 = fadd float %427, 1.000000e+00, !dbg !56
  %438 = fadd float %429, 1.000000e+00, !dbg !56
  %439 = fadd float %431, 1.000000e+00, !dbg !56
  %440 = fmul float %384, %432, !dbg !57
  %441 = fmul float %385, %433, !dbg !57
  %442 = fmul float %386, %434, !dbg !57
  %443 = fmul float %387, %435, !dbg !57
  %444 = fmul float %388, %436, !dbg !57
  %445 = fmul float %389, %437, !dbg !57
  %446 = fmul float %390, %438, !dbg !57
  %447 = fmul float %391, %439, !dbg !57
  %448 = fmul float %.0.i, %440, !dbg !58
  %449 = fmul float %.0.i, %441, !dbg !58
  %450 = fmul float %.0.i, %442, !dbg !58
  %451 = fmul float %.0.i, %443, !dbg !58
  %452 = fmul float %.0.i, %444, !dbg !58
  %453 = fmul float %.0.i, %445, !dbg !58
  %454 = fmul float %.0.i, %446, !dbg !58
  %455 = fmul float %.0.i, %447, !dbg !58
  %456 = trunc nuw nsw i64 %333 to i32, !dbg !59
  %457 = add i32 %295, %456, !dbg !59
  %458 = add i32 %296, %456, !dbg !59
  %459 = sext i32 %457 to i64, !dbg !60
  %460 = getelementptr float, ptr addrspace(1) %3, i64 %459, !dbg !60
  %461 = sext i32 %458 to i64, !dbg !60
  %462 = getelementptr float, ptr addrspace(1) %3, i64 %461, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %463 = bitcast float %448 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %463, i1 true) #5, !dbg !61
  %464 = bitcast float %449 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %464, i1 true) #5, !dbg !61
  %465 = bitcast float %450 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %465, i1 true) #5, !dbg !61
  %466 = bitcast float %451 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %466, i1 true) #5, !dbg !61
  %467 = bitcast float %452 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %467, i1 true) #5, !dbg !61
  %468 = bitcast float %453 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %468, i1 true) #5, !dbg !61
  %469 = bitcast float %454 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %469, i1 true) #5, !dbg !61
  %470 = bitcast float %455 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %470, i1 true) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %471 = load <4 x i32>, ptr addrspace(3) %327, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %322, align 16, !dbg !61
  %.extract13 = load i32, ptr addrspace(3) %328, align 4, !dbg !61
  %.extract14 = load i32, ptr addrspace(3) %329, align 8, !dbg !61
  %.extract15 = load i32, ptr addrspace(3) %330, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %460, i1 %361) #5, !dbg !61
  %.extract16 = extractelement <4 x i32> %471, i64 0, !dbg !61
  %.extract17 = extractelement <4 x i32> %471, i64 1, !dbg !61
  %.extract18 = extractelement <4 x i32> %471, i64 2, !dbg !61
  %.extract19 = extractelement <4 x i32> %471, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract16, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %462, i1 %362) #5, !dbg !61
  br i1 %332, label %331, label %472, !dbg !46

472:                                              ; preds = %331
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_pow_rsqrt_sum_0", linkageName: "triton_red_fused_add_mul_pow_rsqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 36, column: 42, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 43, column: 46, scope: !7)
!21 = !DILocation(line: 31, column: 27, scope: !7)
!22 = !DILocation(line: 32, column: 25, scope: !7)
!23 = !DILocation(line: 34, column: 23, scope: !7)
!24 = !DILocation(line: 35, column: 34, scope: !7)
!25 = !DILocation(line: 35, column: 56, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 36, column: 39, scope: !7)
!28 = !DILocation(line: 36, column: 34, scope: !7)
!29 = !DILocation(line: 36, column: 47, scope: !7)
!30 = !DILocation(line: 38, column: 22, scope: !7)
!31 = !DILocation(line: 39, column: 22, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 42, column: 23, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 28, scope: !7)
!42 = !DILocation(line: 48, column: 4, scope: !7)
!43 = !DILocation(line: 49, column: 28, scope: !7)
!44 = !DILocation(line: 49, column: 40, scope: !7)
!45 = !DILocation(line: 61, column: 38, scope: !7)
!46 = !DILocation(line: 50, column: 36, scope: !7)
!47 = !DILocation(line: 51, column: 27, scope: !7)
!48 = !DILocation(line: 52, column: 25, scope: !7)
!49 = !DILocation(line: 54, column: 23, scope: !7)
!50 = !DILocation(line: 55, column: 35, scope: !7)
!51 = !DILocation(line: 55, column: 57, scope: !7)
!52 = !DILocation(line: 55, column: 49, scope: !7)
!53 = !DILocation(line: 56, column: 40, scope: !7)
!54 = !DILocation(line: 56, column: 35, scope: !7)
!55 = !DILocation(line: 56, column: 48, scope: !7)
!56 = !DILocation(line: 58, column: 24, scope: !7)
!57 = !DILocation(line: 59, column: 24, scope: !7)
!58 = !DILocation(line: 60, column: 24, scope: !7)
!59 = !DILocation(line: 61, column: 34, scope: !7)
!60 = !DILocation(line: 61, column: 29, scope: !7)
!61 = !DILocation(line: 61, column: 50, scope: !7)
!62 = !DILocation(line: 50, column: 4, scope: !7)
