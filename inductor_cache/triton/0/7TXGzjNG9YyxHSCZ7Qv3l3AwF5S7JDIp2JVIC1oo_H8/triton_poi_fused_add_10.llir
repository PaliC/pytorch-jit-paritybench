; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 1, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = lshr i32 %10, 1, !dbg !12
  %14 = and i32 %13, 16, !dbg !12
  %15 = lshr i32 %10, 1, !dbg !12
  %16 = and i32 %15, 32, !dbg !12
  %17 = and i32 %10, 1, !dbg !12
  %18 = shl nuw nsw i32 %17, 1, !dbg !12
  %19 = shl i32 %10, 1, !dbg !12
  %20 = and i32 %19, 62, !dbg !12
  %21 = or disjoint i32 %14, %12, !dbg !12
  %22 = or disjoint i32 %21, %16, !dbg !12
  %23 = or disjoint i32 %22, %9, !dbg !13
  %24 = or disjoint i32 %9, %20, !dbg !13
  %25 = icmp slt i32 %23, 64, !dbg !14
  %26 = icmp slt i32 %24, 64, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 2, !dbg !16
  %.lobit16 = lshr i32 %10, 5, !dbg !17
  %29 = and i32 %.lobit16, 3, !dbg !17
  %30 = or disjoint i32 %28, %18, !dbg !18
  %31 = or disjoint i32 %29, %28, !dbg !18
  %32 = icmp slt i32 %30, 4, !dbg !19
  %33 = icmp slt i32 %31, 4, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %34 = sdiv i32 %.frozen, 16, !dbg !20
  %35 = mul i32 %34, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %.frozen7 = freeze i32 %24, !dbg !20
  %36 = sdiv i32 %.frozen7, 16, !dbg !20
  %37 = mul i32 %36, 16, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %37, !dbg !21
  %38 = shl i32 %23, 2, !dbg !22
  %39 = add i32 %30, %38, !dbg !23
  %40 = sext i32 %39 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = and i1 %25, %32, !dbg !25
  %43 = and i1 %26, %33, !dbg !25
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #2, !dbg !26
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !26
  %47 = bitcast i32 %45 to float, !dbg !26
  %48 = bitcast i32 %46 to float, !dbg !26
  %49 = sext i32 %30 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %32) #2, !dbg !28
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !28
  %54 = bitcast i32 %52 to float, !dbg !28
  %55 = bitcast i32 %53 to float, !dbg !28
  %56 = shl nsw i32 %34, 2, !dbg !29
  %57 = add i32 %56, %30, !dbg !30
  %58 = shl nsw i32 %.decomposed, 4, !dbg !31
  %59 = add i32 %57, %58, !dbg !32
  %60 = sext i32 %59 to i64, !dbg !33
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !33
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %42) #2, !dbg !34
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !34
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !34
  %65 = bitcast i32 %63 to float, !dbg !34
  %66 = bitcast i32 %64 to float, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !35
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %32) #2, !dbg !36
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !36
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !36
  %71 = bitcast i32 %69 to float, !dbg !36
  %72 = bitcast i32 %70 to float, !dbg !36
  %73 = shl i32 %31, 4, !dbg !37
  %74 = add i32 %73, %.decomposed8, !dbg !38
  %75 = shl i32 %36, 6, !dbg !39
  %76 = add i32 %74, %75, !dbg !40
  %77 = sext i32 %76 to i64, !dbg !41
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !41
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %43) #2, !dbg !42
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !42
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !42
  %82 = bitcast i32 %80 to float, !dbg !42
  %83 = bitcast i32 %81 to float, !dbg !42
  %84 = fadd float %47, %54, !dbg !43
  %85 = fadd float %48, %55, !dbg !43
  %86 = shl nuw nsw i32 %17, 7, !dbg !43
  %87 = or disjoint i32 %86, %12, !dbg !43
  %88 = or disjoint i32 %87, %14, !dbg !43
  %89 = or disjoint i32 %88, %16, !dbg !43
  %90 = and i32 %19, 254, !dbg !43
  %.idx = shl nuw nsw i32 %17, 4, !dbg !43
  %91 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !43
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !43
  %93 = bitcast float %84 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !43
  %94 = or disjoint i32 %89, 64, !dbg !43
  %95 = lshr i32 %94, 5, !dbg !43
  %96 = and i32 %95, 134217726, !dbg !43
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !43
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %94, !dbg !43
  %99 = bitcast float %85 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %100 = lshr i32 %19, 5, !dbg !43
  %101 = and i32 %100, 6, !dbg !43
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !43
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %90, !dbg !43
  %104 = load float, ptr addrspace(3) %103, align 8, !dbg !43
  %105 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 4, !dbg !43
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !43
  %107 = fadd float %65, %71, !dbg !44
  %108 = fadd float %66, %72, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %109 = bitcast float %107 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %109, i1 true) #2, !dbg !44
  %110 = bitcast float %108 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %110, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %111 = load float, ptr addrspace(3) %103, align 8, !dbg !44
  %112 = load float, ptr addrspace(3) %105, align 4, !dbg !44
  %113 = fadd float %111, %82, !dbg !45
  %114 = fadd float %112, %83, !dbg !45
  %115 = fadd float %104, %113, !dbg !46
  %116 = fadd float %106, %114, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %117 = shl i32 %10, 3, !dbg !48
  %118 = and i32 %117, 248, !dbg !48
  %119 = or disjoint i32 %29, %118, !dbg !48
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %118, !dbg !48
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %119, !dbg !48
  %122 = bitcast float %115 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !48
  %123 = or disjoint i32 %119, 4, !dbg !48
  %124 = lshr i32 %123, 2, !dbg !48
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !48
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %123, !dbg !48
  %127 = bitcast float %116 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %128 = lshr i32 %90, 2, !dbg !48
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !48
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %90, !dbg !48
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !48
  %132 = or disjoint i32 %90, 1, !dbg !48
  %133 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %132, !dbg !48
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %134, ptr addrspace(1) %41, i1 %42) #2, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhl5kuio54xfofpszixfd6m6oiveeuiktrlzlgnc4ey5tozrhbh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_10", linkageName: "triton_poi_fused_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 50, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 36, column: 46, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 51, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
!48 = !DILocation(line: 42, column: 46, scope: !7)
!49 = !DILocation(line: 42, column: 4, scope: !7)
