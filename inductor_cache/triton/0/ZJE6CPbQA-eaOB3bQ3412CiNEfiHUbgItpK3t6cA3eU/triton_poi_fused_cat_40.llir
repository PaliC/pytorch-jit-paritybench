; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) nocapture readnone %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %33 = shl i32 %32, 7, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = and i32 %34, 127, !dbg !12
  %36 = or disjoint i32 %33, %35, !dbg !13
  %37 = sdiv i32 %36, 4, !dbg !14
  %.frozen1 = freeze i32 %36, !dbg !15
  %38 = sdiv i32 %.frozen1, 1024, !dbg !15
  %.frozen = freeze i32 %36, !dbg !16
  %39 = sdiv i32 %.frozen, 2, !dbg !16
  %40 = srem i32 %39, 2, !dbg !17
  %41 = mul i32 %39, 2, !dbg !18
  %.decomposed = sub i32 %.frozen, %41, !dbg !18
  %42 = mul i32 %38, 1024, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %42, !dbg !19
  %43 = shl nsw i32 %38, 9, !dbg !20
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !21
  %45 = sext i32 %44 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = shl nsw i32 %38, 7, !dbg !23
  %48 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !24
  %49 = insertelement <2 x i32> %48, i32 %37, i64 1, !dbg !24
  %50 = srem <2 x i32> %49, <i32 4, i32 256>, !dbg !24
  %51 = extractelement <2 x i32> %50, i64 1, !dbg !25
  %52 = icmp slt i32 %51, 128, !dbg !26
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %52, i32 0, i1 %52) #1, !dbg !27
  %54 = and i32 %51, -32, !dbg !28
  %55 = icmp eq i32 %54, 128, !dbg !28
  %56 = insertelement <2 x i32> <i32 poison, i32 -128>, i32 %47, i64 0, !dbg !29
  %57 = add nsw <2 x i32> %56, %50, !dbg !29
  %58 = extractelement <2 x i32> %57, i64 1, !dbg !30
  %59 = shl nsw i32 %58, 2, !dbg !30
  %60 = extractelement <2 x i32> %57, i64 0, !dbg !31
  %61 = add nsw i32 %60, %59, !dbg !32
  %62 = sext i32 %61 to i64, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %55, i32 0, i1 %55) #1, !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = shl nsw i32 %38, 5, !dbg !35
  %67 = add nsw i32 %58, %66, !dbg !36
  %68 = sext i32 %67 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %55, i32 0, i1 %55) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = fsub float %71, %71, !dbg !39
  %73 = sext i32 %.decomposed to i64, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %6, i64 %73, !dbg !40
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %55, i32 0, i1 %55) #1, !dbg !41
  %76 = bitcast i32 %75 to float, !dbg !41
  %77 = fmul float %72, %76, !dbg !42
  %78 = fadd float %77, %71, !dbg !43
  %79 = fsub float %78, %65, !dbg !44
  %80 = sext i32 %40 to i64, !dbg !45
  %81 = getelementptr float, ptr addrspace(1) %7, i64 %80, !dbg !45
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %55, i32 0, i1 %55) #1, !dbg !46
  %83 = bitcast i32 %82 to float, !dbg !46
  %84 = fmul float %79, %83, !dbg !47
  %85 = fadd float %84, %65, !dbg !48
  %86 = icmp eq i32 %54, 160, !dbg !49
  %87 = shl nsw i32 %51, 2, !dbg !50
  %88 = add nsw i32 %87, -640, !dbg !50
  %89 = add nsw i32 %60, %88, !dbg !51
  %90 = sext i32 %89 to i64, !dbg !52
  %91 = getelementptr float, ptr addrspace(1) %8, i64 %90, !dbg !52
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %86, i32 0, i1 %86) #1, !dbg !53
  %93 = bitcast i32 %92 to float, !dbg !53
  %94 = getelementptr i64, ptr addrspace(1) %9, i64 %80, !dbg !54
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %94, i1 %86, i1 %86) #1, !dbg !55
  %96 = lshr i64 %95, 62, !dbg !56
  %97 = and i64 %96, 2, !dbg !56
  %98 = add i64 %97, %95, !dbg !56
  %99 = getelementptr i64, ptr addrspace(1) %10, i64 %73, !dbg !57
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %99, i1 %86, i1 %86) #1, !dbg !58
  %101 = lshr i64 %100, 62, !dbg !59
  %102 = and i64 %101, 2, !dbg !59
  %103 = shl i64 %98, 1, !dbg !60
  %104 = sext i32 %88 to i64, !dbg !61
  %105 = sext i32 %47 to i64, !dbg !62
  %106 = getelementptr float, ptr addrspace(1) %11, i64 %100, !dbg !63
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %102, !dbg !63
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %103, !dbg !63
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %104, !dbg !63
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %105, !dbg !63
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %86, i32 0, i1 %86) #1, !dbg !64
  %112 = bitcast i32 %111 to float, !dbg !64
  %113 = getelementptr i64, ptr addrspace(1) %12, i64 %73, !dbg !65
  %114 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %113, i1 %86, i1 %86) #1, !dbg !66
  %115 = lshr i64 %114, 62, !dbg !67
  %116 = and i64 %115, 2, !dbg !67
  %117 = getelementptr float, ptr addrspace(1) %11, i64 %114, !dbg !68
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %116, !dbg !68
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %103, !dbg !68
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %104, !dbg !68
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %105, !dbg !68
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %86, i32 0, i1 %86) #1, !dbg !69
  %123 = bitcast i32 %122 to float, !dbg !69
  %124 = fsub float %123, %112, !dbg !70
  %125 = getelementptr float, ptr addrspace(1) %13, i64 %73, !dbg !71
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %86, i32 0, i1 %86) #1, !dbg !72
  %127 = bitcast i32 %126 to float, !dbg !72
  %128 = fmul float %124, %127, !dbg !73
  %129 = fadd float %128, %112, !dbg !74
  %130 = fsub float %129, %93, !dbg !75
  %131 = getelementptr float, ptr addrspace(1) %14, i64 %80, !dbg !76
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %86, i32 0, i1 %86) #1, !dbg !77
  %133 = bitcast i32 %132 to float, !dbg !77
  %134 = fmul float %130, %133, !dbg !78
  %135 = fadd float %134, %93, !dbg !79
  %136 = icmp eq i32 %54, 192, !dbg !80
  %137 = add nsw i32 %51, -192, !dbg !81
  %138 = shl nsw i32 %137, 2, !dbg !82
  %139 = add nsw i32 %60, %138, !dbg !83
  %140 = sext i32 %139 to i64, !dbg !84
  %141 = getelementptr float, ptr addrspace(1) %15, i64 %140, !dbg !84
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %136, i32 0, i1 %136) #1, !dbg !85
  %143 = bitcast i32 %142 to float, !dbg !85
  %144 = getelementptr i64, ptr addrspace(1) %16, i64 %80, !dbg !86
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %144, i1 %136, i1 %136) #1, !dbg !87
  %146 = add i64 %145, 3, !dbg !88
  %147 = icmp slt i64 %145, 0, !dbg !89
  %148 = select i1 %147, i64 %146, i64 %145, !dbg !90
  %149 = getelementptr i64, ptr addrspace(1) %17, i64 %73, !dbg !91
  %150 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %149, i1 %136, i1 %136) #1, !dbg !92
  %151 = add i64 %150, 3, !dbg !93
  %152 = icmp slt i64 %150, 0, !dbg !94
  %153 = select i1 %152, i64 %151, i64 %150, !dbg !95
  %154 = mul i64 %148, 3, !dbg !96
  %155 = mul nsw i32 %137, 9, !dbg !97
  %156 = sext i32 %155 to i64, !dbg !98
  %157 = mul nsw i32 %38, 288, !dbg !99
  %158 = sext i32 %157 to i64, !dbg !100
  %159 = getelementptr float, ptr addrspace(1) %18, i64 %153, !dbg !101
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %154, !dbg !101
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %156, !dbg !101
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %158, !dbg !101
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %136, i32 0, i1 %136) #1, !dbg !102
  %164 = bitcast i32 %163 to float, !dbg !102
  %165 = getelementptr i64, ptr addrspace(1) %19, i64 %73, !dbg !103
  %166 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %165, i1 %136, i1 %136) #1, !dbg !104
  %167 = add i64 %166, 3, !dbg !105
  %168 = icmp slt i64 %166, 0, !dbg !106
  %169 = select i1 %168, i64 %167, i64 %166, !dbg !107
  %170 = getelementptr float, ptr addrspace(1) %18, i64 %169, !dbg !108
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %154, !dbg !108
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %156, !dbg !108
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %158, !dbg !108
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %136, i32 0, i1 %136) #1, !dbg !109
  %175 = bitcast i32 %174 to float, !dbg !109
  %176 = fsub float %175, %164, !dbg !110
  %177 = getelementptr float, ptr addrspace(1) %20, i64 %73, !dbg !111
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %136, i32 0, i1 %136) #1, !dbg !112
  %179 = bitcast i32 %178 to float, !dbg !112
  %180 = fmul float %176, %179, !dbg !113
  %181 = fadd float %180, %164, !dbg !114
  %182 = fsub float %181, %143, !dbg !115
  %183 = getelementptr float, ptr addrspace(1) %21, i64 %80, !dbg !116
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %136, i32 0, i1 %136) #1, !dbg !117
  %185 = bitcast i32 %184 to float, !dbg !117
  %186 = fmul float %182, %185, !dbg !118
  %187 = fadd float %186, %143, !dbg !119
  %188 = icmp sgt i32 %51, 223, !dbg !25
  %189 = add nsw i32 %51, -224, !dbg !120
  %190 = shl nsw i32 %189, 2, !dbg !121
  %191 = add nsw i32 %60, %190, !dbg !31
  %192 = sext i32 %191 to i64, !dbg !122
  %193 = getelementptr float, ptr addrspace(1) %22, i64 %192, !dbg !122
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %188, i32 0, i1 %188) #1, !dbg !123
  %195 = bitcast i32 %194 to float, !dbg !123
  %196 = getelementptr i64, ptr addrspace(1) %23, i64 %80, !dbg !124
  %197 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %196, i1 %188, i1 %188) #1, !dbg !125
  %198 = add i64 %197, 6, !dbg !126
  %199 = icmp slt i64 %197, 0, !dbg !127
  %200 = select i1 %199, i64 %198, i64 %197, !dbg !128
  %201 = getelementptr i64, ptr addrspace(1) %24, i64 %73, !dbg !129
  %202 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %201, i1 %188, i1 %188) #1, !dbg !130
  %203 = add i64 %202, 6, !dbg !131
  %204 = icmp slt i64 %202, 0, !dbg !132
  %205 = select i1 %204, i64 %203, i64 %202, !dbg !133
  %206 = mul i64 %200, 6, !dbg !134
  %207 = mul nsw i32 %189, 36, !dbg !135
  %208 = sext i32 %207 to i64, !dbg !136
  %209 = mul i32 %38, 1152, !dbg !137
  %210 = sext i32 %209 to i64, !dbg !138
  %211 = getelementptr float, ptr addrspace(1) %25, i64 %205, !dbg !139
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %206, !dbg !139
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %208, !dbg !139
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %210, !dbg !139
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %188, i32 0, i1 %188) #1, !dbg !140
  %216 = bitcast i32 %215 to float, !dbg !140
  %217 = getelementptr i64, ptr addrspace(1) %26, i64 %73, !dbg !141
  %218 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %217, i1 %188, i1 %188) #1, !dbg !142
  %219 = add i64 %218, 6, !dbg !143
  %220 = icmp slt i64 %218, 0, !dbg !144
  %221 = select i1 %220, i64 %219, i64 %218, !dbg !145
  %222 = getelementptr float, ptr addrspace(1) %25, i64 %221, !dbg !146
  %223 = getelementptr float, ptr addrspace(1) %222, i64 %206, !dbg !146
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %208, !dbg !146
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %210, !dbg !146
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %188, i32 0, i1 %188) #1, !dbg !147
  %227 = bitcast i32 %226 to float, !dbg !147
  %228 = fsub float %227, %216, !dbg !148
  %229 = getelementptr float, ptr addrspace(1) %27, i64 %73, !dbg !149
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %188, i32 0, i1 %188) #1, !dbg !150
  %231 = bitcast i32 %230 to float, !dbg !150
  %232 = fmul float %228, %231, !dbg !151
  %233 = fadd float %232, %216, !dbg !152
  %234 = fsub float %233, %195, !dbg !153
  %235 = getelementptr float, ptr addrspace(1) %28, i64 %80, !dbg !154
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %188, i32 0, i1 %188) #1, !dbg !155
  %237 = bitcast i32 %236 to float, !dbg !155
  %238 = fmul float %234, %237, !dbg !156
  %239 = fadd float %238, %195, !dbg !157
  %240 = select i1 %188, float %239, float 0.000000e+00, !dbg !158
  %241 = select i1 %136, float %187, float %240, !dbg !159
  %242 = select i1 %86, float %135, float %241, !dbg !159
  %243 = select i1 %55, float %85, float %242, !dbg !159
  %244 = sext i32 %36 to i64, !dbg !160
  %245 = getelementptr float, ptr addrspace(1) %29, i64 %244, !dbg !160
  %246 = bitcast float %243 to i32, !dbg !161
  %247 = select i1 %52, i32 %53, i32 %246, !dbg !162
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %247, ptr addrspace(1) %245, i1 true) #1, !dbg !161
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cepfvyuoprqnl4rrg5ydqqffkor4n5igg4op6hxv7mrhrztzys63.py", directory: "inductor_cache/ep")
!4 = !{ptr @triton_poi_fused_cat_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_40", linkageName: "triton_poi_fused_cat_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 48, scope: !7)
!21 = !DILocation(line: 35, column: 44, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 40, column: 58, scope: !7)
!24 = !DILocation(line: 26, column: 19, scope: !7)
!25 = !DILocation(line: 125, column: 20, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 39, scope: !7)
!31 = !DILocation(line: 128, column: 55, scope: !7)
!32 = !DILocation(line: 40, column: 54, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 63, scope: !7)
!35 = !DILocation(line: 50, column: 34, scope: !7)
!36 = !DILocation(line: 50, column: 40, scope: !7)
!37 = !DILocation(line: 50, column: 31, scope: !7)
!38 = !DILocation(line: 50, column: 55, scope: !7)
!39 = !DILocation(line: 55, column: 20, scope: !7)
!40 = !DILocation(line: 56, column: 31, scope: !7)
!41 = !DILocation(line: 56, column: 36, scope: !7)
!42 = !DILocation(line: 57, column: 20, scope: !7)
!43 = !DILocation(line: 58, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 31, scope: !7)
!46 = !DILocation(line: 60, column: 36, scope: !7)
!47 = !DILocation(line: 61, column: 20, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 20, scope: !7)
!50 = !DILocation(line: 69, column: 39, scope: !7)
!51 = !DILocation(line: 69, column: 54, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 63, scope: !7)
!54 = !DILocation(line: 70, column: 31, scope: !7)
!55 = !DILocation(line: 70, column: 36, scope: !7)
!56 = !DILocation(line: 74, column: 35, scope: !7)
!57 = !DILocation(line: 75, column: 32, scope: !7)
!58 = !DILocation(line: 75, column: 37, scope: !7)
!59 = !DILocation(line: 78, column: 35, scope: !7)
!60 = !DILocation(line: 79, column: 42, scope: !7)
!61 = !DILocation(line: 79, column: 50, scope: !7)
!62 = !DILocation(line: 79, column: 68, scope: !7)
!63 = !DILocation(line: 79, column: 32, scope: !7)
!64 = !DILocation(line: 79, column: 77, scope: !7)
!65 = !DILocation(line: 80, column: 32, scope: !7)
!66 = !DILocation(line: 80, column: 37, scope: !7)
!67 = !DILocation(line: 83, column: 35, scope: !7)
!68 = !DILocation(line: 84, column: 32, scope: !7)
!69 = !DILocation(line: 84, column: 77, scope: !7)
!70 = !DILocation(line: 85, column: 20, scope: !7)
!71 = !DILocation(line: 86, column: 32, scope: !7)
!72 = !DILocation(line: 86, column: 37, scope: !7)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 20, scope: !7)
!75 = !DILocation(line: 89, column: 20, scope: !7)
!76 = !DILocation(line: 90, column: 32, scope: !7)
!77 = !DILocation(line: 90, column: 37, scope: !7)
!78 = !DILocation(line: 91, column: 20, scope: !7)
!79 = !DILocation(line: 92, column: 20, scope: !7)
!80 = !DILocation(line: 98, column: 20, scope: !7)
!81 = !DILocation(line: 99, column: 49, scope: !7)
!82 = !DILocation(line: 99, column: 40, scope: !7)
!83 = !DILocation(line: 99, column: 55, scope: !7)
!84 = !DILocation(line: 99, column: 32, scope: !7)
!85 = !DILocation(line: 99, column: 64, scope: !7)
!86 = !DILocation(line: 100, column: 32, scope: !7)
!87 = !DILocation(line: 100, column: 37, scope: !7)
!88 = !DILocation(line: 102, column: 20, scope: !7)
!89 = !DILocation(line: 103, column: 20, scope: !7)
!90 = !DILocation(line: 104, column: 35, scope: !7)
!91 = !DILocation(line: 105, column: 32, scope: !7)
!92 = !DILocation(line: 105, column: 37, scope: !7)
!93 = !DILocation(line: 106, column: 20, scope: !7)
!94 = !DILocation(line: 107, column: 20, scope: !7)
!95 = !DILocation(line: 108, column: 35, scope: !7)
!96 = !DILocation(line: 109, column: 42, scope: !7)
!97 = !DILocation(line: 109, column: 53, scope: !7)
!98 = !DILocation(line: 109, column: 50, scope: !7)
!99 = !DILocation(line: 109, column: 72, scope: !7)
!100 = !DILocation(line: 109, column: 68, scope: !7)
!101 = !DILocation(line: 109, column: 32, scope: !7)
!102 = !DILocation(line: 109, column: 77, scope: !7)
!103 = !DILocation(line: 110, column: 32, scope: !7)
!104 = !DILocation(line: 110, column: 37, scope: !7)
!105 = !DILocation(line: 111, column: 20, scope: !7)
!106 = !DILocation(line: 112, column: 20, scope: !7)
!107 = !DILocation(line: 113, column: 35, scope: !7)
!108 = !DILocation(line: 114, column: 32, scope: !7)
!109 = !DILocation(line: 114, column: 77, scope: !7)
!110 = !DILocation(line: 115, column: 20, scope: !7)
!111 = !DILocation(line: 116, column: 32, scope: !7)
!112 = !DILocation(line: 116, column: 37, scope: !7)
!113 = !DILocation(line: 117, column: 20, scope: !7)
!114 = !DILocation(line: 118, column: 20, scope: !7)
!115 = !DILocation(line: 119, column: 20, scope: !7)
!116 = !DILocation(line: 120, column: 32, scope: !7)
!117 = !DILocation(line: 120, column: 37, scope: !7)
!118 = !DILocation(line: 121, column: 20, scope: !7)
!119 = !DILocation(line: 122, column: 20, scope: !7)
!120 = !DILocation(line: 128, column: 49, scope: !7)
!121 = !DILocation(line: 128, column: 40, scope: !7)
!122 = !DILocation(line: 128, column: 32, scope: !7)
!123 = !DILocation(line: 128, column: 64, scope: !7)
!124 = !DILocation(line: 129, column: 32, scope: !7)
!125 = !DILocation(line: 129, column: 37, scope: !7)
!126 = !DILocation(line: 131, column: 21, scope: !7)
!127 = !DILocation(line: 132, column: 21, scope: !7)
!128 = !DILocation(line: 133, column: 38, scope: !7)
!129 = !DILocation(line: 134, column: 33, scope: !7)
!130 = !DILocation(line: 134, column: 38, scope: !7)
!131 = !DILocation(line: 135, column: 22, scope: !7)
!132 = !DILocation(line: 136, column: 22, scope: !7)
!133 = !DILocation(line: 137, column: 38, scope: !7)
!134 = !DILocation(line: 138, column: 44, scope: !7)
!135 = !DILocation(line: 138, column: 57, scope: !7)
!136 = !DILocation(line: 138, column: 53, scope: !7)
!137 = !DILocation(line: 138, column: 77, scope: !7)
!138 = !DILocation(line: 138, column: 72, scope: !7)
!139 = !DILocation(line: 138, column: 33, scope: !7)
!140 = !DILocation(line: 138, column: 82, scope: !7)
!141 = !DILocation(line: 139, column: 33, scope: !7)
!142 = !DILocation(line: 139, column: 38, scope: !7)
!143 = !DILocation(line: 140, column: 22, scope: !7)
!144 = !DILocation(line: 141, column: 22, scope: !7)
!145 = !DILocation(line: 142, column: 38, scope: !7)
!146 = !DILocation(line: 143, column: 33, scope: !7)
!147 = !DILocation(line: 143, column: 82, scope: !7)
!148 = !DILocation(line: 144, column: 22, scope: !7)
!149 = !DILocation(line: 145, column: 33, scope: !7)
!150 = !DILocation(line: 145, column: 38, scope: !7)
!151 = !DILocation(line: 146, column: 22, scope: !7)
!152 = !DILocation(line: 147, column: 22, scope: !7)
!153 = !DILocation(line: 148, column: 22, scope: !7)
!154 = !DILocation(line: 149, column: 33, scope: !7)
!155 = !DILocation(line: 149, column: 38, scope: !7)
!156 = !DILocation(line: 150, column: 22, scope: !7)
!157 = !DILocation(line: 151, column: 21, scope: !7)
!158 = !DILocation(line: 153, column: 37, scope: !7)
!159 = !DILocation(line: 0, scope: !7)
!160 = !DILocation(line: 158, column: 25, scope: !7)
!161 = !DILocation(line: 158, column: 38, scope: !7)
!162 = !DILocation(line: 157, column: 34, scope: !7)
!163 = !DILocation(line: 158, column: 4, scope: !7)
