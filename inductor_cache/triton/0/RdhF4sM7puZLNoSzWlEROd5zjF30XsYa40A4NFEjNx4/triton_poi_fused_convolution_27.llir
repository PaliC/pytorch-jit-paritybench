; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = lshr i32 %7, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %11, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !19
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %29 = sdiv i32 %.frozen, 128, !dbg !20
  %30 = mul i32 %29, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen17 = freeze i32 %14, !dbg !20
  %31 = sdiv i32 %.frozen17, 128, !dbg !20
  %32 = mul i32 %31, 128, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %32, !dbg !21
  %.frozen19 = freeze i32 %15, !dbg !20
  %33 = sdiv i32 %.frozen19, 128, !dbg !20
  %34 = mul i32 %33, 128, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %34, !dbg !21
  %35 = add i32 %23, 2048, !dbg !22
  %36 = shl nsw i32 %.decomposed, 4, !dbg !23
  %37 = shl nsw i32 %.decomposed18, 4, !dbg !23
  %38 = add i32 %35, %36, !dbg !24
  %39 = shl i32 %29, 12, !dbg !25
  %40 = shl i32 %31, 12, !dbg !25
  %41 = add i32 %38, %39, !dbg !26
  %42 = add i32 %40, %37, !dbg !24
  %43 = add i32 %42, %35, !dbg !26
  %44 = sext i32 %41 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = sext i32 %43 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = and i1 %16, %26, !dbg !28
  %49 = and i1 %17, %26, !dbg !28
  %50 = and i1 %18, %27, !dbg !28
  %51 = and i1 %28, %18, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %48) #2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %49) #2, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !29
  %62 = shl i32 %24, 7, !dbg !30
  %63 = shl i32 %25, 7, !dbg !30
  %64 = shl i32 %33, 11, !dbg !31
  %65 = add i32 %64, %.decomposed20, !dbg !32
  %66 = add i32 %65, %62, !dbg !33
  %67 = add i32 %65, %63, !dbg !33
  %68 = sext i32 %66 to i64, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !34
  %70 = sext i32 %67 to i64, !dbg !34
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !34
  %72 = shl i32 %7, 8, !dbg !35
  %73 = and i32 %72, 768, !dbg !35
  %74 = or disjoint i32 %73, %9, !dbg !35
  %75 = and i32 %10, 508, !dbg !35
  %76 = lshr exact i32 %73, 4, !dbg !35
  %77 = add nuw nsw i32 %76, %74, !dbg !35
  %78 = zext nneg i32 %77 to i64, !dbg !35
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %78, !dbg !35
  %80 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !35
  %81 = or disjoint i32 %74, 64, !dbg !35
  %82 = lshr i32 %81, 4, !dbg !35
  %83 = and i32 %82, 52, !dbg !35
  %84 = add nuw nsw i32 %83, %81, !dbg !35
  %85 = zext nneg i32 %84 to i64, !dbg !35
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %85, !dbg !35
  %87 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #2, !dbg !35
  %88 = or disjoint i32 %74, 128, !dbg !35
  %89 = lshr i32 %88, 4, !dbg !35
  %90 = and i32 %89, 56, !dbg !35
  %91 = add nuw nsw i32 %90, %88, !dbg !35
  %92 = zext nneg i32 %91 to i64, !dbg !35
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %92, !dbg !35
  %94 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !35
  %95 = or disjoint i32 %74, 192, !dbg !35
  %96 = lshr i32 %95, 4, !dbg !35
  %97 = and i32 %96, 60, !dbg !35
  %98 = add nuw nsw i32 %97, %95, !dbg !35
  %99 = zext nneg i32 %98 to i64, !dbg !35
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !35
  %101 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !35
  %102 = or disjoint i32 %74, 32, !dbg !35
  %103 = add nuw nsw i32 %102, %76, !dbg !35
  %104 = zext nneg i32 %103 to i64, !dbg !35
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !35
  %106 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !35
  %107 = or disjoint i32 %74, 96, !dbg !35
  %108 = lshr i32 %107, 4, !dbg !35
  %109 = and i32 %108, 52, !dbg !35
  %110 = add nuw nsw i32 %109, %107, !dbg !35
  %111 = zext nneg i32 %110 to i64, !dbg !35
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %111, !dbg !35
  %113 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !35
  %114 = or disjoint i32 %74, 160, !dbg !35
  %115 = lshr i32 %114, 4, !dbg !35
  %116 = and i32 %115, 56, !dbg !35
  %117 = add nuw nsw i32 %116, %114, !dbg !35
  %118 = zext nneg i32 %117 to i64, !dbg !35
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !35
  %120 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !35
  %121 = or disjoint i32 %74, 224, !dbg !35
  %122 = lshr i32 %121, 4, !dbg !35
  %123 = and i32 %122, 60, !dbg !35
  %124 = add nuw nsw i32 %123, %121, !dbg !35
  %125 = zext nneg i32 %124 to i64, !dbg !35
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !35
  %127 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %128 = lshr i32 %10, 4, !dbg !35
  %129 = and i32 %128, 28, !dbg !35
  %130 = add nuw nsw i32 %129, %75, !dbg !35
  %131 = zext nneg i32 %130 to i64, !dbg !35
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %131, !dbg !35
  %133 = or disjoint i32 %75, 512, !dbg !35
  %134 = lshr i32 %133, 4, !dbg !35
  %135 = and i32 %134, 60, !dbg !35
  %136 = add nuw nsw i32 %135, %133, !dbg !35
  %137 = zext nneg i32 %136 to i64, !dbg !35
  %138 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %137, !dbg !35
  %139 = load <4 x i32>, ptr addrspace(3) %138, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %132, align 16, !dbg !35
  %140 = getelementptr inbounds i8, ptr addrspace(3) %132, i64 4, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %140, align 4, !dbg !35
  %141 = getelementptr inbounds i8, ptr addrspace(3) %132, i64 8, !dbg !35
  %.extract11 = load i32, ptr addrspace(3) %141, align 8, !dbg !35
  %142 = getelementptr inbounds i8, ptr addrspace(3) %132, i64 12, !dbg !35
  %.extract12 = load i32, ptr addrspace(3) %142, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %69, i1 %50) #2, !dbg !35
  %.extract13 = extractelement <4 x i32> %139, i64 0, !dbg !35
  %.extract14 = extractelement <4 x i32> %139, i64 1, !dbg !35
  %.extract15 = extractelement <4 x i32> %139, i64 2, !dbg !35
  %.extract16 = extractelement <4 x i32> %139, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %71, i1 %51) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciaoniwbuo5qtiwl4lb7ubev6vhbrjh34jdmuqgieshtdflcaydh.py", directory: "inductor_cache/ia")
!4 = !{ptr @triton_poi_fused_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_27", linkageName: "triton_poi_fused_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 37, scope: !7)
!23 = !DILocation(line: 31, column: 45, scope: !7)
!24 = !DILocation(line: 31, column: 42, scope: !7)
!25 = !DILocation(line: 31, column: 55, scope: !7)
!26 = !DILocation(line: 31, column: 50, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 68, scope: !7)
!29 = !DILocation(line: 31, column: 60, scope: !7)
!30 = !DILocation(line: 32, column: 34, scope: !7)
!31 = !DILocation(line: 32, column: 44, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 39, scope: !7)
!34 = !DILocation(line: 32, column: 25, scope: !7)
!35 = !DILocation(line: 32, column: 55, scope: !7)
!36 = !DILocation(line: 32, column: 4, scope: !7)
