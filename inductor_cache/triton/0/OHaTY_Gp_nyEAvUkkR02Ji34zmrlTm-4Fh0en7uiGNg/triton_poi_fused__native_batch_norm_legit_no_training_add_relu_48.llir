; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 14, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %12, %15, !dbg !13
  %19 = or disjoint i32 %12, %17, !dbg !13
  %20 = icmp slt i32 %18, 416, !dbg !14
  %21 = icmp slt i32 %19, 416, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = or disjoint i32 %23, %15, !dbg !17
  %26 = icmp slt i32 %24, 16, !dbg !18
  %27 = icmp slt i32 %25, 16, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %28 = sdiv i32 %.frozen, 104, !dbg !19
  %29 = mul i32 %28, 104, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %.frozen9 = freeze i32 %19, !dbg !19
  %30 = sdiv i32 %.frozen9, 104, !dbg !19
  %31 = mul i32 %30, 104, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %31, !dbg !20
  %32 = mul i32 %24, 104, !dbg !21
  %33 = add i32 %32, %.decomposed, !dbg !22
  %34 = mul i32 %28, 1664, !dbg !23
  %35 = add i32 %33, %34, !dbg !24
  %36 = sext i32 %35 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = and i1 %20, %26, !dbg !26
  %39 = and i1 %21, %27, !dbg !26
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !27
  %41 = sext i32 %.decomposed to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #4, !dbg !31
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = bitcast i32 %47 to float, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %20) #4, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %20) #4, !dbg !35
  %54 = shl nsw i32 %.decomposed10, 4, !dbg !36
  %55 = mul i32 %30, 6656, !dbg !37
  %56 = add i32 %54, %25, !dbg !38
  %57 = add i32 %56, 3328, !dbg !39
  %58 = add i32 %57, %55, !dbg !40
  %59 = sext i32 %58 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !41
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %39) #4, !dbg !42
  %62 = fadd float %48, 0x3EE4F8B580000000, !dbg !43
  %63 = fadd float %49, 0x3EE4F8B580000000, !dbg !43
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %64, 0, !dbg !44
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %65, 0, !dbg !44
  br i1 %.not.i, label %71, label %66, !dbg !44

66:                                               ; preds = %10
  br i1 %.not1.i, label %69, label %67, !dbg !44

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

71:                                               ; preds = %10
  br i1 %.not1.i, label %74, label %72, !dbg !44

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !44
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i4 = icmp eq i32 %76, 0, !dbg !44
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i7 = icmp eq i32 %77, 0, !dbg !44
  br i1 %.not.i4, label %83, label %78, !dbg !44

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %81, label %79, !dbg !44

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %86, label %84, !dbg !44

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !44
  br label %__nv_sqrtf.exit8, !dbg !44

__nv_sqrtf.exit8:                                 ; preds = %79, %81, %84, %86
  %.0.i6 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !44
  %88 = extractvalue { i32, i32 } %40, 1, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = extractvalue { i32, i32 } %43, 1, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fsub float %89, %91, !dbg !45
  %93 = extractvalue { i32, i32 } %40, 0, !dbg !27
  %94 = bitcast i32 %93 to float, !dbg !27
  %95 = extractvalue { i32, i32 } %43, 0, !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = fsub float %94, %96, !dbg !45
  %98 = extractvalue { i32, i32 } %61, 1, !dbg !42
  %99 = bitcast i32 %98 to float, !dbg !42
  %100 = extractvalue { i32, i32 } %61, 0, !dbg !42
  %101 = bitcast i32 %100 to float, !dbg !42
  %102 = extractvalue { i32, i32 } %53, 1, !dbg !35
  %103 = bitcast i32 %102 to float, !dbg !35
  %104 = extractvalue { i32, i32 } %53, 0, !dbg !35
  %105 = bitcast i32 %104 to float, !dbg !35
  %106 = extractvalue { i32, i32 } %51, 1, !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = extractvalue { i32, i32 } %51, 0, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !46
  %112 = fmul float %97, %110, !dbg !47
  %113 = fmul float %92, %111, !dbg !47
  %114 = fmul float %112, %109, !dbg !48
  %115 = fmul float %113, %107, !dbg !48
  %116 = fadd float %114, %105, !dbg !49
  %117 = fadd float %115, %103, !dbg !49
  %118 = fcmp olt float %116, 0.000000e+00, !dbg !50
  %119 = fcmp olt float %117, 0.000000e+00, !dbg !50
  %120 = select i1 %118, float 0.000000e+00, float %116, !dbg !54
  %121 = select i1 %119, float 0.000000e+00, float %117, !dbg !54
  %122 = shl i32 %13, 5, !dbg !54
  %123 = and i32 %122, 224, !dbg !54
  %124 = or disjoint i32 %123, %17, !dbg !54
  %125 = and i32 %14, 254, !dbg !54
  %126 = lshr exact i32 %123, 2, !dbg !54
  %127 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %126, !dbg !54
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %124, !dbg !54
  %129 = bitcast float %120 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !54
  %130 = or disjoint i32 %124, 16, !dbg !54
  %131 = lshr i32 %130, 4, !dbg !54
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !54
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !54
  %134 = bitcast float %121 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %135 = lshr i32 %125, 4, !dbg !54
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !54
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %125, !dbg !54
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !54
  %139 = or disjoint i32 %125, 1, !dbg !54
  %140 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %139, !dbg !54
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !54
  %142 = fadd float %138, %101, !dbg !55
  %143 = fadd float %141, %99, !dbg !55
  %144 = mul i32 %30, 3328, !dbg !56
  %145 = add i32 %56, %144, !dbg !57
  %146 = sext i32 %145 to i64, !dbg !58
  %147 = getelementptr float, ptr addrspace(1) %6, i64 %146, !dbg !58
  %148 = bitcast float %138 to i32, !dbg !59
  %149 = bitcast float %141 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %148, i32 %149, ptr addrspace(1) %147, i1 %39) #4, !dbg !59
  %150 = getelementptr float, ptr addrspace(1) %7, i64 %36, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %151 = lshr exact i32 %123, 1, !dbg !61
  %152 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %151, !dbg !61
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %124, !dbg !61
  %154 = bitcast float %142 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !61
  %.idx = shl nuw nsw i32 %131, 3, !dbg !61
  %155 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !61
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %130, !dbg !61
  %157 = bitcast float %143 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %158 = and i32 %13, 127, !dbg !61
  %159 = add nuw nsw i32 %135, %158, !dbg !61
  %.idx1 = shl nuw nsw i32 %159, 3, !dbg !61
  %160 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !61
  %.extract = load i32, ptr addrspace(3) %160, align 8, !dbg !61
  %161 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 4, !dbg !61
  %.extract3 = load i32, ptr addrspace(3) %161, align 4, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract3, ptr addrspace(1) %150, i1 %38) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccsr7end2fqr27pnhuhsdgzqizb4lrtjkq3re3vahmuau62jq277.py", directory: "inductor_cache/cs")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_48", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 49, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 62, scope: !7)
!27 = !DILocation(line: 31, column: 54, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 46, scope: !7)
!37 = !DILocation(line: 36, column: 56, scope: !7)
!38 = !DILocation(line: 36, column: 38, scope: !7)
!39 = !DILocation(line: 36, column: 43, scope: !7)
!40 = !DILocation(line: 36, column: 51, scope: !7)
!41 = !DILocation(line: 36, column: 31, scope: !7)
!42 = !DILocation(line: 36, column: 61, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 26, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 19, scope: !7)
!48 = !DILocation(line: 46, column: 20, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 49, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 43, scope: !7)
!57 = !DILocation(line: 51, column: 38, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 55, scope: !7)
!60 = !DILocation(line: 52, column: 25, scope: !7)
!61 = !DILocation(line: 52, column: 56, scope: !7)
!62 = !DILocation(line: 52, column: 4, scope: !7)
