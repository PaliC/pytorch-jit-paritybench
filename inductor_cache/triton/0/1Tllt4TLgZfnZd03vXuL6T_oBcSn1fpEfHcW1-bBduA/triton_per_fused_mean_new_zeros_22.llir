; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_new_zeros_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = lshr i32 %8, 5, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %16 = sdiv i32 %.frozen, 256, !dbg !15
  %17 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %8, 5, !dbg !17
  %19 = and i32 %18, 1792, !dbg !17
  %20 = add nsw i32 %.decomposed, %19, !dbg !18
  %21 = shl i32 %16, 11, !dbg !19
  %22 = add i32 %20, %21, !dbg !20
  %23 = sext i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = bitcast i32 %29 to float, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %40 = bitcast i32 %36 to float, !dbg !24
  %41 = bitcast i32 %37 to float, !dbg !24
  %42 = bitcast i32 %38 to float, !dbg !24
  %43 = bitcast i32 %39 to float, !dbg !24
  %44 = fmul float %30, %40, !dbg !25
  %45 = fmul float %31, %41, !dbg !25
  %46 = fmul float %32, %42, !dbg !25
  %47 = fmul float %33, %43, !dbg !25
  %48 = bitcast float %44 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 16, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %44, %50, !dbg !30
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !30
  %56 = bitcast float %45 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %45, %58, !dbg !30
  %60 = bitcast float %59 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %59, %62, !dbg !30
  %64 = bitcast float %46 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %46, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %67, %70, !dbg !30
  %72 = bitcast float %47 to i32, !dbg !26
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = fadd float %47, %74, !dbg !30
  %76 = bitcast float %75 to i32, !dbg !26
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !26
  %78 = bitcast i32 %77 to float, !dbg !26
  %79 = fadd float %75, %78, !dbg !30
  %80 = icmp eq i32 %9, 0, !dbg !26
  %81 = and i32 %15, 1, !dbg !26
  %82 = shl nuw nsw i32 %11, 1, !dbg !26
  %83 = or disjoint i32 %82, %81, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = bitcast float %55 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 %80) #3, !dbg !26
  %86 = or disjoint i32 %82, 2, !dbg !26
  %87 = or disjoint i32 %86, %81, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %89 = bitcast float %63 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 %80) #3, !dbg !26
  %90 = or disjoint i32 %82, 4, !dbg !26
  %91 = or disjoint i32 %90, %81, !dbg !26
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !26
  %93 = bitcast float %71 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 %80) #3, !dbg !26
  %94 = or disjoint i32 %82, 6, !dbg !26
  %95 = or disjoint i32 %94, %81, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = bitcast float %79 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 %80) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %98 = icmp slt i32 %8, 64, !dbg !26
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %100 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %99, i1 %98) #3, !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = fadd float %101, %103, !dbg !30
  %105 = and i32 %8, 1, !dbg !26
  %106 = icmp eq i32 %105, 0, !dbg !26
  %107 = and i1 %98, %106, !dbg !26
  %108 = bitcast float %104 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %108, i1 %107) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !26
  %110 = load i32, ptr addrspace(3) %109, align 16, !dbg !26
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !26
  %112 = load i32, ptr addrspace(3) %111, align 8, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %114 = load i32, ptr addrspace(3) %113, align 16, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %116 = load i32, ptr addrspace(3) %115, align 8, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %117, i32 %110, i32 %112, i32 %114, i32 %116, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !32
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 8.000000e+00) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %121 = sext i32 %14 to i64, !dbg !34
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !34
  %123 = icmp eq i32 %81, 0, !dbg !35
  %124 = bitcast float %120 to i32, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %122, i1 %123) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdabaftt3e4bnd3ey2w7mnpdav55qsh3zlxjjolpwrebvvuyhkgx.py", directory: "inductor_cache/da")
!4 = !{ptr @triton_per_fused_mean_new_zeros_22, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_new_zeros_22, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_new_zeros_22", linkageName: "triton_per_fused_mean_new_zeros_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 49, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 54, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 37, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 44, column: 4, scope: !7)
!34 = !DILocation(line: 45, column: 28, scope: !7)
!35 = !DILocation(line: 45, column: 40, scope: !7)
!36 = !DILocation(line: 45, column: 4, scope: !7)
