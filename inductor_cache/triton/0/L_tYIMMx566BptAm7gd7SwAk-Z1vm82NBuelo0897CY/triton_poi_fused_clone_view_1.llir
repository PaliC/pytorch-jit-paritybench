; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = or disjoint i32 %12, 32, !dbg !12
  %14 = or disjoint i32 %12, 64, !dbg !12
  %15 = or disjoint i32 %12, 96, !dbg !12
  %16 = or disjoint i32 %12, 128, !dbg !12
  %17 = or disjoint i32 %12, 160, !dbg !12
  %18 = or disjoint i32 %12, 192, !dbg !12
  %19 = or disjoint i32 %12, 224, !dbg !12
  %20 = or disjoint i32 %7, %10, !dbg !13
  %21 = or disjoint i32 %7, %12, !dbg !13
  %22 = or disjoint i32 %7, %13, !dbg !13
  %23 = or disjoint i32 %7, %14, !dbg !13
  %24 = or disjoint i32 %7, %15, !dbg !13
  %25 = or disjoint i32 %7, %16, !dbg !13
  %26 = or disjoint i32 %7, %17, !dbg !13
  %27 = or disjoint i32 %7, %18, !dbg !13
  %28 = or disjoint i32 %7, %19, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %30 = shl i32 %29, 4, !dbg !15
  %31 = lshr i32 %8, 6, !dbg !16
  %32 = and i32 %31, 3, !dbg !16
  %33 = shl i32 %8, 1, !dbg !16
  %34 = and i32 %33, 14, !dbg !16
  %35 = or disjoint i32 %30, %32, !dbg !17
  %36 = or disjoint i32 %35, 4, !dbg !17
  %37 = or disjoint i32 %35, 8, !dbg !17
  %38 = or disjoint i32 %35, 12, !dbg !17
  %39 = or disjoint i32 %30, %34, !dbg !17
  %40 = icmp slt i32 %35, 30, !dbg !18
  %41 = icmp slt i32 %36, 30, !dbg !18
  %42 = icmp slt i32 %37, 30, !dbg !18
  %43 = icmp slt i32 %38, 30, !dbg !18
  %44 = icmp slt i32 %39, 30, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %45 = sdiv i32 %.frozen, 4096, !dbg !19
  %46 = mul i32 %45, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %46, !dbg !20
  %47 = shl i32 %35, 12, !dbg !21
  %48 = shl i32 %36, 12, !dbg !21
  %49 = shl i32 %37, 12, !dbg !21
  %50 = shl i32 %38, 12, !dbg !21
  %51 = mul i32 %45, 122880, !dbg !22
  %52 = add i32 %51, %.decomposed, !dbg !23
  %53 = add i32 %52, %47, !dbg !24
  %54 = add i32 %52, %48, !dbg !24
  %55 = add i32 %52, %49, !dbg !24
  %56 = add i32 %52, %50, !dbg !24
  %57 = sext i32 %53 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = sext i32 %54 to i64, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !25
  %61 = sext i32 %55 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !25
  %63 = sext i32 %56 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %40) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %41) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %42) #2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %43) #2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = sext i32 %35 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !27
  %103 = sext i32 %36 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !27
  %105 = sext i32 %37 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !27
  %107 = sext i32 %38 to i64, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !27
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %40) #2, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %40) #2, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %40) #2, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %40) #2, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %41) #2, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %41) #2, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %41) #2, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %41) #2, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %42) #2, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %42) #2, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %42) #2, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %42) #2, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %43) #2, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %43) #2, !dbg !28
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %43) #2, !dbg !28
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %43) #2, !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = fadd float %70, %113, !dbg !29
  %130 = fadd float %71, %113, !dbg !29
  %131 = fadd float %72, %113, !dbg !29
  %132 = fadd float %73, %113, !dbg !29
  %133 = fadd float %79, %118, !dbg !29
  %134 = fadd float %80, %118, !dbg !29
  %135 = fadd float %81, %118, !dbg !29
  %136 = fadd float %82, %118, !dbg !29
  %137 = fadd float %88, %123, !dbg !29
  %138 = fadd float %89, %123, !dbg !29
  %139 = fadd float %90, %123, !dbg !29
  %140 = fadd float %91, %123, !dbg !29
  %141 = fadd float %97, %128, !dbg !29
  %142 = fadd float %98, %128, !dbg !29
  %143 = fadd float %99, %128, !dbg !29
  %144 = fadd float %100, %128, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %145 = mul i32 %21, 30, !dbg !31
  %146 = mul i32 %22, 30, !dbg !31
  %147 = mul i32 %23, 30, !dbg !31
  %148 = mul i32 %24, 30, !dbg !31
  %149 = mul i32 %25, 30, !dbg !31
  %150 = mul i32 %26, 30, !dbg !31
  %151 = mul i32 %27, 30, !dbg !31
  %152 = mul i32 %28, 30, !dbg !31
  %153 = add i32 %39, %145, !dbg !32
  %154 = add i32 %39, %146, !dbg !32
  %155 = add i32 %39, %147, !dbg !32
  %156 = add i32 %39, %148, !dbg !32
  %157 = add i32 %39, %149, !dbg !32
  %158 = add i32 %39, %150, !dbg !32
  %159 = add i32 %39, %151, !dbg !32
  %160 = add i32 %39, %152, !dbg !32
  %161 = sext i32 %153 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !33
  %163 = sext i32 %154 to i64, !dbg !33
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !33
  %165 = sext i32 %155 to i64, !dbg !33
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !33
  %167 = sext i32 %156 to i64, !dbg !33
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !33
  %169 = sext i32 %157 to i64, !dbg !33
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !33
  %171 = sext i32 %158 to i64, !dbg !33
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !33
  %173 = sext i32 %159 to i64, !dbg !33
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !33
  %175 = sext i32 %160 to i64, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %0, i64 %175, !dbg !33
  %177 = shl i32 %8, 6, !dbg !34
  %178 = and i32 %177, 4032, !dbg !34
  %179 = or disjoint i32 %178, %32, !dbg !34
  %180 = and i32 %33, 510, !dbg !34
  %181 = lshr exact i32 %178, 2, !dbg !34
  %182 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %181, !dbg !34
  %183 = getelementptr float, ptr addrspace(3) %182, i32 %179, !dbg !34
  %184 = bitcast float %129 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %184, i1 true) #2, !dbg !34
  %185 = or disjoint i32 %179, 16, !dbg !34
  %186 = lshr i32 %185, 4, !dbg !34
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !34
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %185, !dbg !34
  %189 = bitcast float %130 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !34
  %190 = or disjoint i32 %179, 32, !dbg !34
  %191 = lshr i32 %190, 4, !dbg !34
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !34
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !34
  %194 = bitcast float %131 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !34
  %195 = or disjoint i32 %179, 48, !dbg !34
  %196 = lshr i32 %195, 4, !dbg !34
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !34
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !34
  %199 = bitcast float %132 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !34
  %200 = or disjoint i32 %179, 4, !dbg !34
  %201 = getelementptr float, ptr addrspace(3) %182, i32 %200, !dbg !34
  %202 = bitcast float %133 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !34
  %203 = or disjoint i32 %179, 20, !dbg !34
  %204 = lshr i32 %203, 4, !dbg !34
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %204, !dbg !34
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %203, !dbg !34
  %207 = bitcast float %134 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !34
  %208 = or disjoint i32 %179, 36, !dbg !34
  %209 = lshr i32 %208, 4, !dbg !34
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !34
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %208, !dbg !34
  %212 = bitcast float %135 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !34
  %213 = or disjoint i32 %179, 52, !dbg !34
  %214 = lshr i32 %213, 4, !dbg !34
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !34
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !34
  %217 = bitcast float %136 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !34
  %218 = or disjoint i32 %179, 8, !dbg !34
  %219 = getelementptr float, ptr addrspace(3) %182, i32 %218, !dbg !34
  %220 = bitcast float %137 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #2, !dbg !34
  %221 = or disjoint i32 %179, 24, !dbg !34
  %222 = lshr i32 %221, 4, !dbg !34
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !34
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !34
  %225 = bitcast float %138 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !34
  %226 = or disjoint i32 %179, 40, !dbg !34
  %227 = lshr i32 %226, 4, !dbg !34
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !34
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %226, !dbg !34
  %230 = bitcast float %139 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !34
  %231 = or disjoint i32 %179, 56, !dbg !34
  %232 = lshr i32 %231, 4, !dbg !34
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !34
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !34
  %235 = bitcast float %140 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !34
  %236 = or disjoint i32 %179, 12, !dbg !34
  %237 = getelementptr float, ptr addrspace(3) %182, i32 %236, !dbg !34
  %238 = bitcast float %141 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #2, !dbg !34
  %239 = or disjoint i32 %179, 28, !dbg !34
  %240 = lshr i32 %239, 4, !dbg !34
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !34
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %239, !dbg !34
  %243 = bitcast float %142 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #2, !dbg !34
  %244 = or disjoint i32 %179, 44, !dbg !34
  %245 = lshr i32 %244, 4, !dbg !34
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !34
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %244, !dbg !34
  %248 = bitcast float %143 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !34
  %249 = or disjoint i32 %179, 60, !dbg !34
  %250 = lshr i32 %249, 4, !dbg !34
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !34
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !34
  %253 = bitcast float %144 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %254 = lshr i32 %180, 4, !dbg !34
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !34
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %180, !dbg !34
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !34
  %258 = or disjoint i32 %180, 1, !dbg !34
  %259 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %258, !dbg !34
  %260 = load i32, ptr addrspace(3) %259, align 4, !dbg !34
  %261 = or disjoint i32 %180, 512, !dbg !34
  %262 = lshr i32 %261, 4, !dbg !34
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !34
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !34
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !34
  %266 = or disjoint i32 %180, 513, !dbg !34
  %267 = lshr i32 %266, 4, !dbg !34
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !34
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !34
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !34
  %271 = or disjoint i32 %180, 1024, !dbg !34
  %272 = lshr i32 %271, 4, !dbg !34
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !34
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !34
  %275 = load i32, ptr addrspace(3) %274, align 4, !dbg !34
  %276 = or disjoint i32 %180, 1025, !dbg !34
  %277 = lshr i32 %276, 4, !dbg !34
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !34
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %276, !dbg !34
  %280 = load i32, ptr addrspace(3) %279, align 4, !dbg !34
  %281 = or disjoint i32 %180, 1536, !dbg !34
  %282 = lshr i32 %281, 4, !dbg !34
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !34
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !34
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !34
  %286 = or disjoint i32 %180, 1537, !dbg !34
  %287 = lshr i32 %286, 4, !dbg !34
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !34
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !34
  %290 = load i32, ptr addrspace(3) %289, align 4, !dbg !34
  %291 = or disjoint i32 %180, 2048, !dbg !34
  %292 = lshr i32 %291, 4, !dbg !34
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !34
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !34
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !34
  %296 = or disjoint i32 %180, 2049, !dbg !34
  %297 = lshr i32 %296, 4, !dbg !34
  %298 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %297, !dbg !34
  %299 = getelementptr inbounds float, ptr addrspace(3) %298, i32 %296, !dbg !34
  %300 = load i32, ptr addrspace(3) %299, align 4, !dbg !34
  %301 = or disjoint i32 %180, 2560, !dbg !34
  %302 = lshr i32 %301, 4, !dbg !34
  %303 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %302, !dbg !34
  %304 = getelementptr inbounds float, ptr addrspace(3) %303, i32 %301, !dbg !34
  %305 = load i32, ptr addrspace(3) %304, align 4, !dbg !34
  %306 = or disjoint i32 %180, 2561, !dbg !34
  %307 = lshr i32 %306, 4, !dbg !34
  %308 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %307, !dbg !34
  %309 = getelementptr inbounds float, ptr addrspace(3) %308, i32 %306, !dbg !34
  %310 = load i32, ptr addrspace(3) %309, align 4, !dbg !34
  %311 = or disjoint i32 %180, 3072, !dbg !34
  %312 = lshr i32 %311, 4, !dbg !34
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %312, !dbg !34
  %314 = getelementptr inbounds float, ptr addrspace(3) %313, i32 %311, !dbg !34
  %315 = load i32, ptr addrspace(3) %314, align 4, !dbg !34
  %316 = or disjoint i32 %180, 3073, !dbg !34
  %317 = lshr i32 %316, 4, !dbg !34
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %317, !dbg !34
  %319 = getelementptr inbounds float, ptr addrspace(3) %318, i32 %316, !dbg !34
  %320 = load i32, ptr addrspace(3) %319, align 4, !dbg !34
  %321 = or disjoint i32 %180, 3584, !dbg !34
  %322 = lshr i32 %321, 4, !dbg !34
  %323 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %322, !dbg !34
  %324 = getelementptr inbounds float, ptr addrspace(3) %323, i32 %321, !dbg !34
  %325 = load i32, ptr addrspace(3) %324, align 4, !dbg !34
  %326 = or disjoint i32 %180, 3585, !dbg !34
  %327 = lshr i32 %326, 4, !dbg !34
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !34
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %326, !dbg !34
  %330 = load i32, ptr addrspace(3) %329, align 4, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %257, i32 %260, ptr addrspace(1) %162, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %265, i32 %270, ptr addrspace(1) %164, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %275, i32 %280, ptr addrspace(1) %166, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %290, ptr addrspace(1) %168, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %295, i32 %300, ptr addrspace(1) %170, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %305, i32 %310, ptr addrspace(1) %172, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %315, i32 %320, ptr addrspace(1) %174, i1 %44) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %325, i32 %330, ptr addrspace(1) %176, i1 %44) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5bjpbddbrlxa42ykuf3p3bm3kg2xnbe37r4dqmwxg6hgmeffcn5.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused_clone_view_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_1", linkageName: "triton_poi_fused_clone_view_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 57, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 33, scope: !7)
!33 = !DILocation(line: 36, column: 28, scope: !7)
!34 = !DILocation(line: 36, column: 47, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
