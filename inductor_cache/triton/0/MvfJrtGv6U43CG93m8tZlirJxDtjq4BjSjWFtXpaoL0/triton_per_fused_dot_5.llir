; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_dot_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 1, !dbg !10
  %9 = and i32 %8, 126, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !11
  %12 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32 } %12, 1, !dbg !12
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !13
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !14
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !14
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !14
  %19 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !12
  %20 = insertelement <2 x i32> %19, i32 %14, i64 1, !dbg !12
  %21 = bitcast <2 x i32> %20 to <2 x float>, !dbg !12
  %22 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %23 = insertelement <2 x i32> %22, i32 %18, i64 1, !dbg !14
  %24 = bitcast <2 x i32> %23 to <2 x float>, !dbg !14
  %25 = fmul <2 x float> %21, %24, !dbg !15
  %shift = shufflevector <2 x float> %25, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !16
  %26 = fadd <2 x float> %25, %shift, !dbg !16
  %27 = extractelement <2 x float> %26, i64 0, !dbg !16
  %28 = bitcast float %27 to i32, !dbg !21
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 16, i32 31), !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = fadd float %27, %30, !dbg !16
  %32 = bitcast float %31 to i32, !dbg !21
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 8, i32 31), !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = fadd float %31, %34, !dbg !16
  %36 = bitcast float %35 to i32, !dbg !21
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = fadd float %35, %38, !dbg !16
  %40 = bitcast float %39 to i32, !dbg !21
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = fadd float %39, %42, !dbg !16
  %44 = bitcast float %43 to i32, !dbg !21
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !21
  %46 = bitcast i32 %45 to float, !dbg !21
  %47 = fadd float %43, %46, !dbg !16
  %48 = icmp eq i32 %6, 0, !dbg !21
  %49 = and i32 %7, 1, !dbg !21
  %50 = zext nneg i32 %49 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(3) @global_smem, i64 %50, !dbg !21
  %52 = bitcast float %47 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 %48) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %53 = icmp slt i32 %5, 2, !dbg !21
  %54 = sext i32 %5 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i64 %54, !dbg !21
  %56 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %55, i1 %53) #3, !dbg !21
  %57 = bitcast i32 %56 to float, !dbg !21
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !21
  %59 = bitcast i32 %58 to float, !dbg !21
  %60 = fadd float %57, %59, !dbg !16
  %61 = and i32 %5, 1, !dbg !21
  %62 = icmp eq i32 %61, 0, !dbg !21
  %63 = and i1 %53, %62, !dbg !21
  %64 = bitcast float %60 to <1 x i32>, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %64, i1 %63) #3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %65 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !21
  %urem = and i32 %5, 63, !dbg !22
  %66 = icmp eq i32 %urem, 0, !dbg !22
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %65, ptr addrspace(1) %2, i1 %66) #3, !dbg !22
  ret void, !dbg !23
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c33myiqdhgvthwth74tl63yvzr6ejuxlmrem2jrrm3vqaru6rmgl.py", directory: "inductor_cache/33")
!4 = !{ptr @triton_per_fused_dot_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_dot_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_dot_5", linkageName: "triton_per_fused_dot_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 18, scope: !7)
!16 = !DILocation(line: 256, column: 15, scope: !17, inlinedAt: !20)
!17 = distinct !DILexicalBlockFile(scope: !19, file: !18, discriminator: 0)
!18 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!19 = distinct !DILexicalBlockFile(scope: !7, file: !18, discriminator: 0)
!20 = !DILocation(line: 34, column: 24, scope: !7)
!21 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !20)
!22 = !DILocation(line: 35, column: 67, scope: !7)
!23 = !DILocation(line: 35, column: 4, scope: !7)
