; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = lshr i32 %8, 2, !dbg !12
  %15 = and i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = and i32 %8, 3, !dbg !12
  %18 = and i32 %8, 31, !dbg !12
  %19 = or disjoint i32 %16, %7, !dbg !13
  %20 = or disjoint i32 %7, %18, !dbg !13
  %21 = icmp slt i32 %19, 64, !dbg !14
  %22 = icmp slt i32 %20, 64, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 2, !dbg !16
  %.lobit24 = lshr i32 %8, 5, !dbg !17
  %25 = and i32 %.lobit24, 3, !dbg !17
  %26 = or disjoint i32 %24, %17, !dbg !18
  %27 = or disjoint i32 %25, %24, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %30 = sdiv i32 %.frozen, 16, !dbg !20
  %31 = mul i32 %30, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = shl i32 %19, 2, !dbg !22
  %33 = add i32 %26, %32, !dbg !23
  %34 = sext i32 %33 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = and i1 %21, %28, !dbg !25
  %37 = and i1 %22, %29, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %36) #2, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = sext i32 %26 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %28) #2, !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = shl i32 %27, 4, !dbg !29
  %45 = add i32 %44, %.decomposed, !dbg !30
  %46 = shl i32 %30, 6, !dbg !31
  %47 = add i32 %45, %46, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %37) #2, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = fadd float %39, %43, !dbg !35
  %53 = shl i32 %8, 5, !dbg !35
  %54 = and i32 %53, 96, !dbg !35
  %55 = and i32 %9, 7, !dbg !35
  %56 = or disjoint i32 %55, %54, !dbg !35
  %57 = or disjoint i32 %56, %12, !dbg !35
  %58 = or disjoint i32 %57, %15, !dbg !35
  %59 = and i32 %8, 127, !dbg !35
  %60 = lshr exact i32 %54, 3, !dbg !35
  %61 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !35
  %62 = getelementptr inbounds float, ptr addrspace(3) %61, i32 %58, !dbg !35
  %63 = bitcast float %52 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %64 = lshr i32 %59, 5, !dbg !35
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !35
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %59, !dbg !35
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !35
  %68 = fadd float %67, %51, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %69 = shl i32 %8, 2, !dbg !38
  %70 = and i32 %69, 124, !dbg !38
  %71 = or disjoint i32 %25, %70, !dbg !38
  %72 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %70, !dbg !38
  %73 = getelementptr float, ptr addrspace(3) %72, i32 %71, !dbg !38
  %74 = bitcast float %68 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %75 = lshr i32 %59, 2, !dbg !38
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !38
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %59, !dbg !38
  %78 = load i32, ptr addrspace(3) %77, align 4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %35, i1 %36) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwycoh6leq7cxltlk4gqfyergojbbsdhiujc2cauimyrvvj4p7cr.py", directory: "inductor_cache/wy")
!4 = !{ptr @triton_poi_fused_add_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_5", linkageName: "triton_poi_fused_add_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 46, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 51, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 4, scope: !7)
!38 = !DILocation(line: 38, column: 46, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
