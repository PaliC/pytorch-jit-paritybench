; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = srem i32 %14, 4, !dbg !16
  %16 = mul i32 %14, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = sdiv i32 %12, 64, !dbg !18
  %18 = icmp slt i32 %15, 1, !dbg !19
  %19 = shl nsw i32 %17, 4, !dbg !20
  %20 = add nsw i32 %19, %.decomposed, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = and i1 %13, %18, !dbg !23
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !24
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !24
  %27 = icmp eq i32 %15, 1, !dbg !25
  %28 = and i1 %13, %27, !dbg !26
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !27
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !27
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !27
  %32 = bitcast i32 %30 to float, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !29
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %38 = bitcast i32 %36 to float, !dbg !29
  %39 = bitcast i32 %37 to float, !dbg !29
  %40 = fadd float %32, %38, !dbg !30
  %41 = fadd float %33, %39, !dbg !30
  %42 = icmp eq i32 %15, 2, !dbg !31
  %43 = and i1 %13, %42, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !33
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %47 = bitcast i32 %45 to float, !dbg !33
  %48 = bitcast i32 %46 to float, !dbg !33
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !34
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !34
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !34
  %52 = bitcast i32 %50 to float, !dbg !34
  %53 = bitcast i32 %51 to float, !dbg !34
  %54 = fadd float %47, %52, !dbg !35
  %55 = fadd float %48, %53, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !36
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !37
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !37
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !37
  %60 = bitcast i32 %58 to float, !dbg !37
  %61 = bitcast i32 %59 to float, !dbg !37
  %62 = fadd float %54, %60, !dbg !38
  %63 = fadd float %55, %61, !dbg !38
  %64 = icmp sgt i32 %15, 2, !dbg !39
  %65 = and i1 %13, %64, !dbg !40
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !41
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !41
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !41
  %69 = bitcast i32 %67 to float, !dbg !41
  %70 = bitcast i32 %68 to float, !dbg !41
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !42
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !42
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !42
  %74 = bitcast i32 %72 to float, !dbg !42
  %75 = bitcast i32 %73 to float, !dbg !42
  %76 = fadd float %69, %74, !dbg !43
  %77 = fadd float %70, %75, !dbg !43
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !44
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !44
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !44
  %81 = bitcast i32 %79 to float, !dbg !44
  %82 = bitcast i32 %80 to float, !dbg !44
  %83 = fadd float %76, %81, !dbg !45
  %84 = fadd float %77, %82, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !46
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #1, !dbg !47
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !47
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !47
  %89 = bitcast i32 %87 to float, !dbg !47
  %90 = bitcast i32 %88 to float, !dbg !47
  %91 = fadd float %83, %89, !dbg !48
  %92 = fadd float %84, %90, !dbg !48
  %93 = select i1 %64, float %91, float 0.000000e+00, !dbg !49
  %94 = select i1 %64, float %92, float 0.000000e+00, !dbg !49
  %95 = select i1 %42, float %62, float %93, !dbg !50
  %96 = select i1 %42, float %63, float %94, !dbg !50
  %97 = select i1 %27, float %40, float %95, !dbg !50
  %98 = select i1 %27, float %41, float %96, !dbg !50
  %99 = sext i32 %12 to i64, !dbg !51
  %100 = getelementptr float, ptr addrspace(1) %4, i64 %99, !dbg !51
  %101 = bitcast float %97 to i32, !dbg !52
  %102 = select i1 %18, i32 %25, i32 %101, !dbg !53
  %103 = bitcast float %98 to i32, !dbg !52
  %104 = select i1 %18, i32 %26, i32 %103, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %104, ptr addrspace(1) %100, i1 %13) #1, !dbg !52
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5h2yvuni2jmoqkitpy24j5r5nj5n32rsiwvhiax2aazrmra76du.py", directory: "inductor_cache/5h")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 38, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 50, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 51, scope: !7)
!27 = !DILocation(line: 38, column: 44, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 44, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 47, column: 52, scope: !7)
!33 = !DILocation(line: 47, column: 44, scope: !7)
!34 = !DILocation(line: 48, column: 44, scope: !7)
!35 = !DILocation(line: 49, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 44, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 57, column: 52, scope: !7)
!41 = !DILocation(line: 57, column: 44, scope: !7)
!42 = !DILocation(line: 58, column: 44, scope: !7)
!43 = !DILocation(line: 59, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 44, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 31, scope: !7)
!47 = !DILocation(line: 62, column: 44, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 65, column: 35, scope: !7)
!50 = !DILocation(line: 0, scope: !7)
!51 = !DILocation(line: 69, column: 25, scope: !7)
!52 = !DILocation(line: 69, column: 37, scope: !7)
!53 = !DILocation(line: 68, column: 33, scope: !7)
!54 = !DILocation(line: 69, column: 4, scope: !7)
