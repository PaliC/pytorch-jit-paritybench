; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_62(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 832, !dbg !14
  %18 = mul i32 %17, 832, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = icmp slt i32 %.decomposed, 256, !dbg !16
  %20 = shl nsw i32 %17, 8, !dbg !17
  %21 = add nsw i32 %20, %.decomposed, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !20
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #1, !dbg !22
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %32 = add nsw i32 %.decomposed, -256, !dbg !23
  %33 = icmp ult i32 %32, 320, !dbg !23
  %34 = mul nsw i32 %17, 320, !dbg !24
  %35 = add nsw i32 %34, %32, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = sext i32 %32 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !28
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %42, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #1, !dbg !29
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !29
  %46 = add nsw i32 %.decomposed, -576, !dbg !30
  %47 = icmp ult i32 %46, 128, !dbg !30
  %48 = shl nsw i32 %17, 7, !dbg !31
  %49 = add nsw i32 %48, %46, !dbg !32
  %50 = sext i32 %49 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !33
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !34
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !34
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !34
  %55 = sext i32 %46 to i64, !dbg !35
  %56 = getelementptr float, ptr addrspace(1) %5, i64 %55, !dbg !35
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !36
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !36
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !36
  %60 = icmp sgt i32 %.decomposed, 703, !dbg !37
  %61 = add nsw i32 %.decomposed, -704, !dbg !38
  %62 = add nsw i32 %48, %61, !dbg !39
  %63 = sext i32 %62 to i64, !dbg !40
  %64 = getelementptr float, ptr addrspace(1) %6, i64 %63, !dbg !40
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !41
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !41
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !41
  %68 = sext i32 %61 to i64, !dbg !42
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %68, !dbg !42
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !43
  %71 = extractvalue { i32, i32 } %70, 0, !dbg !43
  %72 = extractvalue { i32, i32 } %70, 1, !dbg !43
  %73 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !41
  %74 = insertelement <8 x i32> %73, i32 %66, i64 1, !dbg !41
  %75 = insertelement <8 x i32> %74, i32 %54, i64 2, !dbg !41
  %76 = insertelement <8 x i32> %75, i32 %53, i64 3, !dbg !41
  %77 = insertelement <8 x i32> %76, i32 %40, i64 4, !dbg !41
  %78 = insertelement <8 x i32> %77, i32 %39, i64 5, !dbg !41
  %79 = insertelement <8 x i32> %78, i32 %26, i64 6, !dbg !41
  %80 = insertelement <8 x i32> %79, i32 %25, i64 7, !dbg !41
  %81 = bitcast <8 x i32> %80 to <8 x float>, !dbg !41
  %82 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !43
  %83 = insertelement <8 x i32> %82, i32 %71, i64 1, !dbg !43
  %84 = insertelement <8 x i32> %83, i32 %59, i64 2, !dbg !43
  %85 = insertelement <8 x i32> %84, i32 %58, i64 3, !dbg !43
  %86 = insertelement <8 x i32> %85, i32 %45, i64 4, !dbg !43
  %87 = insertelement <8 x i32> %86, i32 %44, i64 5, !dbg !43
  %88 = insertelement <8 x i32> %87, i32 %31, i64 6, !dbg !43
  %89 = insertelement <8 x i32> %88, i32 %30, i64 7, !dbg !43
  %90 = bitcast <8 x i32> %89 to <8 x float>, !dbg !43
  %91 = fadd <8 x float> %81, %90, !dbg !44
  %92 = fcmp olt <8 x float> %91, zeroinitializer, !dbg !45
  %93 = extractelement <8 x i1> %92, i64 7, !dbg !49
  %94 = extractelement <8 x float> %91, i64 7, !dbg !49
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !49
  %96 = extractelement <8 x i1> %92, i64 6, !dbg !49
  %97 = extractelement <8 x float> %91, i64 6, !dbg !49
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !49
  %99 = extractelement <8 x i1> %92, i64 5, !dbg !51
  %100 = extractelement <8 x float> %91, i64 5, !dbg !51
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !51
  %102 = extractelement <8 x i1> %92, i64 4, !dbg !51
  %103 = extractelement <8 x float> %91, i64 4, !dbg !51
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !51
  %105 = extractelement <8 x i1> %92, i64 3, !dbg !53
  %106 = extractelement <8 x float> %91, i64 3, !dbg !53
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !53
  %108 = extractelement <8 x i1> %92, i64 2, !dbg !53
  %109 = extractelement <8 x float> %91, i64 2, !dbg !53
  %110 = select i1 %108, float 0.000000e+00, float %109, !dbg !53
  %111 = extractelement <8 x i1> %92, i64 1, !dbg !55
  %112 = extractelement <8 x float> %91, i64 1, !dbg !55
  %113 = select i1 %111, float 0.000000e+00, float %112, !dbg !55
  %114 = extractelement <8 x i1> %92, i64 0, !dbg !55
  %115 = extractelement <8 x float> %91, i64 0, !dbg !55
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !55
  %117 = select i1 %60, float %113, float 0.000000e+00, !dbg !56
  %118 = select i1 %60, float %116, float 0.000000e+00, !dbg !56
  %119 = select i1 %47, float %107, float %117, !dbg !57
  %120 = select i1 %47, float %110, float %118, !dbg !57
  %121 = select i1 %33, float %101, float %119, !dbg !57
  %122 = select i1 %33, float %104, float %120, !dbg !57
  %123 = select i1 %19, float %95, float %121, !dbg !57
  %124 = select i1 %19, float %98, float %122, !dbg !57
  %125 = sext i32 %16 to i64, !dbg !58
  %126 = getelementptr float, ptr addrspace(1) %8, i64 %125, !dbg !58
  %127 = bitcast float %123 to i32, !dbg !59
  %128 = bitcast float %124 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyema6duncc66k33xilo4wzwilo4xbgmmshbheivo6boqn55wprp.py", directory: "inductor_cache/ye")
!4 = !{ptr @triton_poi_fused_cat_62, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_62, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_62", linkageName: "triton_poi_fused_cat_62", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 43, column: 35, scope: !7)
!25 = !DILocation(line: 43, column: 41, scope: !7)
!26 = !DILocation(line: 43, column: 31, scope: !7)
!27 = !DILocation(line: 43, column: 56, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 45, scope: !7)
!30 = !DILocation(line: 53, column: 20, scope: !7)
!31 = !DILocation(line: 54, column: 35, scope: !7)
!32 = !DILocation(line: 54, column: 41, scope: !7)
!33 = !DILocation(line: 54, column: 31, scope: !7)
!34 = !DILocation(line: 54, column: 56, scope: !7)
!35 = !DILocation(line: 55, column: 31, scope: !7)
!36 = !DILocation(line: 55, column: 45, scope: !7)
!37 = !DILocation(line: 61, column: 20, scope: !7)
!38 = !DILocation(line: 64, column: 50, scope: !7)
!39 = !DILocation(line: 64, column: 41, scope: !7)
!40 = !DILocation(line: 64, column: 31, scope: !7)
!41 = !DILocation(line: 64, column: 56, scope: !7)
!42 = !DILocation(line: 65, column: 31, scope: !7)
!43 = !DILocation(line: 65, column: 45, scope: !7)
!44 = !DILocation(line: 66, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 68, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !50)
!50 = !DILocation(line: 36, column: 40, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !52)
!52 = !DILocation(line: 47, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 58, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!56 = !DILocation(line: 70, column: 35, scope: !7)
!57 = !DILocation(line: 0, scope: !7)
!58 = !DILocation(line: 74, column: 25, scope: !7)
!59 = !DILocation(line: 74, column: 37, scope: !7)
!60 = !DILocation(line: 74, column: 4, scope: !7)
