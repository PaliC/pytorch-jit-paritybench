; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 2, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit4 = lshr i32 %14, 5, !dbg !12
  %15 = and i32 %.lobit4, 3, !dbg !12
  %16 = and i32 %14, 1, !dbg !12
  %17 = shl nuw nsw i32 %16, 1, !dbg !12
  %18 = or disjoint i32 %15, %13, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = icmp slt i32 %18, 4, !dbg !14
  %21 = icmp slt i32 %19, 4, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 6, !dbg !16
  %24 = shl i32 %14, 1, !dbg !17
  %25 = and i32 %24, 62, !dbg !17
  %26 = lshr i32 %14, 1, !dbg !17
  %27 = and i32 %26, 15, !dbg !17
  %28 = lshr i32 %14, 1, !dbg !17
  %29 = and i32 %28, 16, !dbg !17
  %30 = lshr i32 %14, 1, !dbg !17
  %31 = and i32 %30, 32, !dbg !17
  %32 = or disjoint i32 %23, %25, !dbg !18
  %33 = or disjoint i32 %32, 1, !dbg !18
  %34 = or disjoint i32 %29, %27, !dbg !17
  %35 = or disjoint i32 %34, %31, !dbg !17
  %36 = or disjoint i32 %35, %23, !dbg !18
  %37 = icmp slt i32 %32, 36, !dbg !19
  %38 = icmp slt i32 %36, 36, !dbg !19
  %.frozen = freeze i32 %32, !dbg !20
  %39 = sdiv i32 %.frozen, 9, !dbg !20
  %.frozen5 = freeze i32 %33, !dbg !20
  %40 = sdiv i32 %.frozen5, 9, !dbg !20
  %41 = mul i32 %39, 9, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %42 = mul i32 %40, 9, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %42, !dbg !21
  %43 = mul i32 %18, 36, !dbg !22
  %44 = add i32 %32, %43, !dbg !23
  %45 = sext i32 %44 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !24
  %47 = and i1 %20, %37, !dbg !25
  %48 = and i1 %21, %38, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %47) #2, !dbg !26
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %52 = bitcast i32 %50 to float, !dbg !26
  %53 = bitcast i32 %51 to float, !dbg !26
  %54 = sext i32 %18 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %20) #2, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %20) #2, !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = shl i32 %18, 2, !dbg !29
  %60 = add i32 %39, %59, !dbg !30
  %61 = add i32 %59, %40, !dbg !30
  %62 = sext i32 %60 to i64, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !31
  %64 = sext i32 %61 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %47) #2, !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %47) #2, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = sext i32 %.decomposed to i64, !dbg !33
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !33
  %72 = sext i32 %.decomposed6 to i64, !dbg !33
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !33
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %37) #2, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %37) #2, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = add i32 %18, 4, !dbg !35
  %79 = sext i32 %78 to i64, !dbg !36
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %20) #2, !dbg !37
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %20) #2, !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = mul i32 %18, 9, !dbg !38
  %85 = add i32 %.decomposed, %84, !dbg !39
  %86 = add i32 %84, %.decomposed6, !dbg !39
  %87 = mul i32 %39, 36, !dbg !40
  %88 = mul i32 %40, 36, !dbg !40
  %89 = add i32 %85, %87, !dbg !41
  %90 = add i32 %86, %88, !dbg !41
  %91 = sext i32 %89 to i64, !dbg !42
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !42
  %93 = sext i32 %90 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %93, !dbg !42
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %47) #2, !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %47) #2, !dbg !43
  %98 = bitcast i32 %97 to float, !dbg !43
  %99 = add i32 %18, 12, !dbg !44
  %100 = sext i32 %99 to i64, !dbg !45
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !45
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %20) #2, !dbg !46
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %20) #2, !dbg !46
  %104 = bitcast i32 %103 to float, !dbg !46
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %62, !dbg !47
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %64, !dbg !47
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %47) #2, !dbg !48
  %108 = bitcast i32 %107 to float, !dbg !48
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %47) #2, !dbg !48
  %110 = bitcast i32 %109 to float, !dbg !48
  %111 = sext i32 %85 to i64, !dbg !49
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %111, !dbg !49
  %113 = sext i32 %86 to i64, !dbg !49
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !49
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %47) #2, !dbg !50
  %116 = bitcast i32 %115 to float, !dbg !50
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %47) #2, !dbg !50
  %118 = bitcast i32 %117 to float, !dbg !50
  %119 = add i32 %18, 8, !dbg !51
  %120 = sext i32 %119 to i64, !dbg !52
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !52
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %20) #2, !dbg !53
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %20) #2, !dbg !53
  %124 = bitcast i32 %123 to float, !dbg !53
  %125 = shl i32 %36, 2, !dbg !54
  %126 = add i32 %125, %19, !dbg !55
  %127 = sext i32 %126 to i64, !dbg !56
  %128 = getelementptr float, ptr addrspace(1) %8, i64 %127, !dbg !56
  %129 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %128, i1 %48) #2, !dbg !57
  %130 = extractvalue { i32, i32 } %129, 0, !dbg !57
  %131 = extractvalue { i32, i32 } %129, 1, !dbg !57
  %132 = bitcast i32 %130 to float, !dbg !57
  %133 = bitcast i32 %131 to float, !dbg !57
  %134 = add i32 %19, 16, !dbg !58
  %135 = sext i32 %134 to i64, !dbg !59
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !59
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %136, i1 %21) #2, !dbg !60
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !60
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !60
  %140 = bitcast i32 %138 to float, !dbg !60
  %141 = bitcast i32 %139 to float, !dbg !60
  %142 = fmul float %52, %58, !dbg !61
  %143 = fmul float %53, %58, !dbg !61
  %144 = fmul float %67, %75, !dbg !62
  %145 = fmul float %69, %77, !dbg !62
  %146 = fmul float %144, %83, !dbg !63
  %147 = fmul float %145, %83, !dbg !63
  %148 = fadd float %142, %146, !dbg !64
  %149 = fadd float %143, %147, !dbg !64
  %150 = fmul float %96, %104, !dbg !65
  %151 = fmul float %98, %104, !dbg !65
  %152 = fadd float %148, %150, !dbg !66
  %153 = fadd float %149, %151, !dbg !66
  %154 = fmul float %108, %116, !dbg !67
  %155 = fmul float %110, %118, !dbg !67
  %156 = fmul float %154, %124, !dbg !68
  %157 = fmul float %155, %124, !dbg !68
  %158 = fadd float %152, %156, !dbg !69
  %159 = fadd float %153, %157, !dbg !69
  %160 = shl i32 %14, 3, !dbg !69
  %161 = and i32 %160, 248, !dbg !69
  %162 = or disjoint i32 %15, %161, !dbg !69
  %163 = and i32 %24, 254, !dbg !69
  %164 = lshr exact i32 %161, 1, !dbg !69
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !69
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %162, !dbg !69
  %167 = bitcast float %158 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !69
  %168 = or disjoint i32 %162, 4, !dbg !69
  %169 = lshr i32 %168, 1, !dbg !69
  %170 = and i32 %169, 126, !dbg !69
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !69
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %168, !dbg !69
  %173 = bitcast float %159 to <1 x i32>, !dbg !69
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %174 = and i32 %14, 126, !dbg !69
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !69
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %163, !dbg !69
  %177 = load float, ptr addrspace(3) %176, align 8, !dbg !69
  %178 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 4, !dbg !69
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !69
  %180 = fmul float %132, %140, !dbg !70
  %181 = fmul float %133, %141, !dbg !70
  %182 = fadd float %180, %177, !dbg !71
  %183 = fadd float %181, %179, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !73
  %185 = shl nuw nsw i32 %16, 7, !dbg !74
  %186 = or disjoint i32 %185, %27, !dbg !74
  %187 = or disjoint i32 %186, %29, !dbg !74
  %188 = or disjoint i32 %187, %31, !dbg !74
  %.idx = shl nuw nsw i32 %16, 3, !dbg !74
  %189 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !74
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %188, !dbg !74
  %191 = bitcast float %182 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !74
  %192 = or disjoint i32 %188, 64, !dbg !74
  %193 = lshr i32 %192, 6, !dbg !74
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !74
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %192, !dbg !74
  %196 = bitcast float %183 to <1 x i32>, !dbg !74
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !74
  %197 = lshr i32 %163, 6, !dbg !74
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !74
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %163, !dbg !74
  %200 = load i32, ptr addrspace(3) %199, align 4, !dbg !74
  %201 = or disjoint i32 %163, 1, !dbg !74
  %202 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %201, !dbg !74
  %203 = load i32, ptr addrspace(3) %202, align 4, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %203, ptr addrspace(1) %184, i1 %47) #2, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca54oo7hq6llhgwkmfk3vfcyeurtjctvmqtxpvhgney6n7x3nlmy.py", directory: "inductor_cache/a5")
!4 = !{ptr @triton_poi_fused_add_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_2", linkageName: "triton_poi_fused_add_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 34, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 39, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 50, scope: !7)
!44 = !DILocation(line: 38, column: 36, scope: !7)
!45 = !DILocation(line: 38, column: 31, scope: !7)
!46 = !DILocation(line: 38, column: 41, scope: !7)
!47 = !DILocation(line: 39, column: 31, scope: !7)
!48 = !DILocation(line: 39, column: 43, scope: !7)
!49 = !DILocation(line: 40, column: 31, scope: !7)
!50 = !DILocation(line: 40, column: 43, scope: !7)
!51 = !DILocation(line: 41, column: 35, scope: !7)
!52 = !DILocation(line: 41, column: 31, scope: !7)
!53 = !DILocation(line: 41, column: 40, scope: !7)
!54 = !DILocation(line: 42, column: 38, scope: !7)
!55 = !DILocation(line: 42, column: 36, scope: !7)
!56 = !DILocation(line: 42, column: 31, scope: !7)
!57 = !DILocation(line: 42, column: 43, scope: !7)
!58 = !DILocation(line: 43, column: 36, scope: !7)
!59 = !DILocation(line: 43, column: 31, scope: !7)
!60 = !DILocation(line: 43, column: 41, scope: !7)
!61 = !DILocation(line: 44, column: 18, scope: !7)
!62 = !DILocation(line: 45, column: 18, scope: !7)
!63 = !DILocation(line: 46, column: 18, scope: !7)
!64 = !DILocation(line: 47, column: 18, scope: !7)
!65 = !DILocation(line: 48, column: 19, scope: !7)
!66 = !DILocation(line: 49, column: 19, scope: !7)
!67 = !DILocation(line: 50, column: 20, scope: !7)
!68 = !DILocation(line: 51, column: 20, scope: !7)
!69 = !DILocation(line: 52, column: 20, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 54, column: 20, scope: !7)
!72 = !DILocation(line: 55, column: 4, scope: !7)
!73 = !DILocation(line: 56, column: 28, scope: !7)
!74 = !DILocation(line: 56, column: 48, scope: !7)
!75 = !DILocation(line: 56, column: 4, scope: !7)
