; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = or disjoint i32 %8, %14, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 5, !dbg !15
  %20 = or disjoint i32 %19, %14, !dbg !16
  %21 = or disjoint i32 %19, %11, !dbg !16
  %22 = or disjoint i32 %19, %12, !dbg !16
  %23 = icmp slt i32 %20, 64, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !17
  %25 = icmp slt i32 %22, 64, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %26 = sdiv i32 %.frozen, 4096, !dbg !18
  %27 = mul i32 %26, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = shl i32 %15, 6, !dbg !20
  %29 = shl i32 %16, 6, !dbg !20
  %30 = add i32 %20, %28, !dbg !21
  %31 = add i32 %20, %29, !dbg !21
  %32 = sext i32 %30 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %31 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = sext i32 %20 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %23) #2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %23) #2, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %23) #2, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !27
  %81 = bitcast i32 %77 to float, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = bitcast i32 %80 to float, !dbg !27
  %85 = fadd float %41, %61, !dbg !28
  %86 = fadd float %42, %62, !dbg !28
  %87 = fadd float %43, %63, !dbg !28
  %88 = fadd float %44, %64, !dbg !28
  %89 = fadd float %50, %61, !dbg !28
  %90 = fadd float %51, %62, !dbg !28
  %91 = fadd float %52, %63, !dbg !28
  %92 = fadd float %53, %64, !dbg !28
  %93 = fadd float %85, %72, !dbg !29
  %94 = fadd float %86, %73, !dbg !29
  %95 = fadd float %87, %74, !dbg !29
  %96 = fadd float %88, %75, !dbg !29
  %97 = fadd float %89, %81, !dbg !29
  %98 = fadd float %90, %82, !dbg !29
  %99 = fadd float %91, %83, !dbg !29
  %100 = fadd float %92, %84, !dbg !29
  %101 = shl i32 %21, 12, !dbg !30
  %102 = shl i32 %22, 12, !dbg !30
  %103 = shl i32 %26, 18, !dbg !31
  %104 = add i32 %103, %.decomposed, !dbg !32
  %105 = add i32 %104, %101, !dbg !33
  %106 = add i32 %104, %102, !dbg !33
  %107 = sext i32 %105 to i64, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !34
  %109 = sext i32 %106 to i64, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !34
  %111 = shl i32 %9, 7, !dbg !35
  %112 = and i32 %111, 896, !dbg !35
  %113 = or disjoint i32 %112, %11, !dbg !35
  %114 = and i32 %13, 508, !dbg !35
  %115 = lshr exact i32 %112, 1, !dbg !35
  %116 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %115, !dbg !35
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %113, !dbg !35
  %118 = bitcast float %93 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !35
  %119 = or disjoint i32 %113, 32, !dbg !35
  %120 = lshr i32 %119, 3, !dbg !35
  %121 = and i32 %120, 116, !dbg !35
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !35
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %119, !dbg !35
  %124 = bitcast float %94 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !35
  %125 = or disjoint i32 %113, 64, !dbg !35
  %126 = lshr i32 %125, 3, !dbg !35
  %127 = and i32 %126, 120, !dbg !35
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !35
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %125, !dbg !35
  %130 = bitcast float %95 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !35
  %131 = or disjoint i32 %113, 96, !dbg !35
  %132 = lshr i32 %131, 3, !dbg !35
  %133 = and i32 %132, 124, !dbg !35
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %133, !dbg !35
  %135 = getelementptr float, ptr addrspace(3) %134, i32 %131, !dbg !35
  %136 = bitcast float %96 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !35
  %137 = or disjoint i32 %113, 16, !dbg !35
  %138 = getelementptr float, ptr addrspace(3) %116, i32 %137, !dbg !35
  %139 = bitcast float %97 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !35
  %140 = or disjoint i32 %113, 48, !dbg !35
  %141 = lshr i32 %140, 3, !dbg !35
  %142 = and i32 %141, 116, !dbg !35
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !35
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !35
  %145 = bitcast float %98 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !35
  %146 = or disjoint i32 %113, 80, !dbg !35
  %147 = lshr i32 %146, 3, !dbg !35
  %148 = and i32 %147, 120, !dbg !35
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !35
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %146, !dbg !35
  %151 = bitcast float %99 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !35
  %152 = or disjoint i32 %113, 112, !dbg !35
  %153 = lshr i32 %152, 3, !dbg !35
  %154 = and i32 %153, 124, !dbg !35
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !35
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %152, !dbg !35
  %157 = bitcast float %100 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %158 = lshr i32 %13, 3, !dbg !35
  %159 = and i32 %158, 60, !dbg !35
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !35
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %114, !dbg !35
  %162 = or disjoint i32 %114, 512, !dbg !35
  %163 = lshr i32 %162, 3, !dbg !35
  %164 = and i32 %163, 124, !dbg !35
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !35
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %162, !dbg !35
  %167 = load <4 x i32>, ptr addrspace(3) %166, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %161, align 16, !dbg !35
  %168 = getelementptr inbounds i8, ptr addrspace(3) %161, i32 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %168, align 4, !dbg !35
  %169 = getelementptr inbounds i8, ptr addrspace(3) %161, i32 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %169, align 8, !dbg !35
  %170 = getelementptr inbounds i8, ptr addrspace(3) %161, i32 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %170, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %108, i1 %24) #2, !dbg !35
  %.extract11 = extractelement <4 x i32> %167, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %167, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %167, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %167, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %110, i1 %25) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2azcitplqiajftz4frpjloezo4q5y4qt7zgz5o3ag4yfttc72qr.py", directory: "inductor_cache/2a")
!4 = !{ptr @triton_poi_fused_add_convolution_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_9", linkageName: "triton_poi_fused_add_convolution_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 47, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 40, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 58, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
