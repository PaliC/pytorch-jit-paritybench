; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = or disjoint i32 %24, %16, !dbg !17
  %26 = or disjoint i32 %24, %13, !dbg !17
  %27 = or disjoint i32 %24, %14, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %28 = sdiv i32 %.frozen, 64, !dbg !18
  %29 = mul i32 %28, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = shl i32 %17, 12, !dbg !20
  %31 = shl i32 %18, 12, !dbg !20
  %32 = add i32 %25, %30, !dbg !21
  %33 = add i32 %25, %31, !dbg !21
  %34 = sext i32 %32 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %21) #2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = shl i32 %11, 7, !dbg !23
  %49 = and i32 %48, 896, !dbg !23
  %50 = or disjoint i32 %49, %13, !dbg !23
  %51 = and i32 %15, 508, !dbg !23
  %52 = lshr exact i32 %49, 1, !dbg !23
  %53 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !23
  %54 = getelementptr float, ptr addrspace(3) %53, i32 %50, !dbg !23
  %55 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #2, !dbg !23
  %56 = or disjoint i32 %50, 32, !dbg !23
  %57 = lshr i32 %56, 5, !dbg !23
  %.idx = shl nuw nsw i32 %57, 4, !dbg !23
  %58 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %59 = getelementptr float, ptr addrspace(3) %58, i32 %56, !dbg !23
  %60 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !23
  %61 = or disjoint i32 %50, 64, !dbg !23
  %62 = lshr i32 %61, 5, !dbg !23
  %.idx1 = shl nuw nsw i32 %62, 4, !dbg !23
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61, !dbg !23
  %65 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !23
  %66 = or disjoint i32 %50, 96, !dbg !23
  %67 = lshr i32 %66, 5, !dbg !23
  %.idx2 = shl nuw nsw i32 %67, 4, !dbg !23
  %68 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !23
  %70 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !23
  %71 = or disjoint i32 %50, 16, !dbg !23
  %72 = getelementptr float, ptr addrspace(3) %53, i32 %71, !dbg !23
  %73 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !23
  %74 = or disjoint i32 %50, 48, !dbg !23
  %75 = lshr i32 %74, 5, !dbg !23
  %.idx3 = shl nuw nsw i32 %75, 4, !dbg !23
  %76 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %74, !dbg !23
  %78 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !23
  %79 = or disjoint i32 %50, 80, !dbg !23
  %80 = lshr i32 %79, 5, !dbg !23
  %.idx4 = shl nuw nsw i32 %80, 4, !dbg !23
  %81 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !23
  %83 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !23
  %84 = or disjoint i32 %50, 112, !dbg !23
  %85 = lshr i32 %84, 5, !dbg !23
  %.idx5 = shl nuw nsw i32 %85, 4, !dbg !23
  %86 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !23
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !23
  %88 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %89 = lshr i32 %51, 5, !dbg !23
  %90 = and i32 %11, 127, !dbg !23
  %91 = add nuw nsw i32 %89, %90, !dbg !23
  %.idx6 = shl nuw nsw i32 %91, 4, !dbg !23
  %92 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !23
  %93 = load float, ptr addrspace(3) %92, align 16, !dbg !23
  %94 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 4, !dbg !23
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !23
  %96 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 8, !dbg !23
  %97 = load float, ptr addrspace(3) %96, align 8, !dbg !23
  %98 = getelementptr inbounds i8, ptr addrspace(3) %92, i32 12, !dbg !23
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !23
  %100 = or disjoint i32 %51, 512, !dbg !23
  %101 = lshr i32 %100, 5, !dbg !23
  %.idx10 = shl nuw nsw i32 %101, 4, !dbg !23
  %102 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !23
  %103 = getelementptr inbounds float, ptr addrspace(3) %102, i32 %100, !dbg !23
  %104 = load float, ptr addrspace(3) %103, align 16, !dbg !23
  %105 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 4, !dbg !23
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !23
  %107 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 8, !dbg !23
  %108 = load float, ptr addrspace(3) %107, align 8, !dbg !23
  %109 = getelementptr inbounds i8, ptr addrspace(3) %103, i32 12, !dbg !23
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !23
  %111 = sext i32 %.decomposed to i64, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !24
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %22) #2, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !25
  %118 = bitcast i32 %114 to float, !dbg !25
  %119 = bitcast i32 %115 to float, !dbg !25
  %120 = bitcast i32 %116 to float, !dbg !25
  %121 = bitcast i32 %117 to float, !dbg !25
  %122 = shl i32 %26, 6, !dbg !26
  %123 = shl i32 %27, 6, !dbg !26
  %124 = shl i32 %28, 18, !dbg !27
  %125 = add i32 %124, %.decomposed, !dbg !28
  %126 = add i32 %125, %122, !dbg !29
  %127 = add i32 %125, %123, !dbg !29
  %128 = sext i32 %126 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !30
  %130 = sext i32 %127 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !30
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %22) #2, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !31
  %137 = bitcast i32 %133 to float, !dbg !31
  %138 = bitcast i32 %134 to float, !dbg !31
  %139 = bitcast i32 %135 to float, !dbg !31
  %140 = bitcast i32 %136 to float, !dbg !31
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %22) #2, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !31
  %146 = bitcast i32 %142 to float, !dbg !31
  %147 = bitcast i32 %143 to float, !dbg !31
  %148 = bitcast i32 %144 to float, !dbg !31
  %149 = bitcast i32 %145 to float, !dbg !31
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !32
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %22) #2, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !33
  %156 = bitcast i32 %152 to float, !dbg !33
  %157 = bitcast i32 %153 to float, !dbg !33
  %158 = bitcast i32 %154 to float, !dbg !33
  %159 = bitcast i32 %155 to float, !dbg !33
  %160 = fmul float %118, %137, !dbg !34
  %161 = fmul float %119, %138, !dbg !34
  %162 = fmul float %120, %139, !dbg !34
  %163 = fmul float %121, %140, !dbg !34
  %164 = fmul float %118, %146, !dbg !34
  %165 = fmul float %119, %147, !dbg !34
  %166 = fmul float %120, %148, !dbg !34
  %167 = fmul float %121, %149, !dbg !34
  %168 = fadd float %160, %156, !dbg !35
  %169 = fadd float %161, %157, !dbg !35
  %170 = fadd float %162, %158, !dbg !35
  %171 = fadd float %163, %159, !dbg !35
  %172 = fadd float %164, %156, !dbg !35
  %173 = fadd float %165, %157, !dbg !35
  %174 = fadd float %166, %158, !dbg !35
  %175 = fadd float %167, %159, !dbg !35
  %176 = fadd float %93, %168, !dbg !36
  %177 = fadd float %95, %169, !dbg !36
  %178 = fadd float %97, %170, !dbg !36
  %179 = fadd float %99, %171, !dbg !36
  %180 = fadd float %104, %172, !dbg !36
  %181 = fadd float %106, %173, !dbg !36
  %182 = fadd float %108, %174, !dbg !36
  %183 = fadd float %110, %175, !dbg !36
  %184 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !37
  %185 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %186 = lshr exact i32 %49, 3, !dbg !38
  %187 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %186, !dbg !38
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %50, !dbg !38
  %189 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !38
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !38
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %56, !dbg !38
  %192 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !38
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %62, !dbg !38
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %61, !dbg !38
  %195 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !38
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !38
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %66, !dbg !38
  %198 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !38
  %199 = getelementptr float, ptr addrspace(3) %187, i32 %71, !dbg !38
  %200 = bitcast float %180 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !38
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !38
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %74, !dbg !38
  %203 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !38
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !38
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %79, !dbg !38
  %206 = bitcast float %182 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !38
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !38
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %84, !dbg !38
  %209 = bitcast float %183 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %89, !dbg !38
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %51, !dbg !38
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !38
  %213 = or disjoint i32 %51, 1, !dbg !38
  %214 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %213, !dbg !38
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !38
  %216 = or disjoint i32 %51, 2, !dbg !38
  %217 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %216, !dbg !38
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !38
  %219 = or disjoint i32 %51, 3, !dbg !38
  %220 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %219, !dbg !38
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !38
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %101, !dbg !38
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %100, !dbg !38
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !38
  %225 = or disjoint i32 %51, 513, !dbg !38
  %226 = lshr i32 %225, 5, !dbg !38
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !38
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !38
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !38
  %230 = or disjoint i32 %51, 514, !dbg !38
  %231 = lshr i32 %230, 5, !dbg !38
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !38
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !38
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !38
  %235 = or disjoint i32 %51, 515, !dbg !38
  %236 = lshr i32 %235, 5, !dbg !38
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !38
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !38
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %212, i32 %215, i32 %218, i32 %221, ptr addrspace(1) %184, i1 %20) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %224, i32 %229, i32 %234, i32 %239, ptr addrspace(1) %185, i1 %21) #2, !dbg !38
  %240 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !39
  %241 = getelementptr float, ptr addrspace(1) %5, i64 %130, !dbg !39
  %242 = bitcast float %176 to i32, !dbg !40
  %243 = bitcast float %177 to i32, !dbg !40
  %244 = bitcast float %178 to i32, !dbg !40
  %245 = bitcast float %179 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %242, i32 %243, i32 %244, i32 %245, ptr addrspace(1) %240, i1 %22) #2, !dbg !40
  %246 = bitcast float %180 to i32, !dbg !40
  %247 = bitcast float %181 to i32, !dbg !40
  %248 = bitcast float %182 to i32, !dbg !40
  %249 = bitcast float %183 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %247, i32 %248, i32 %249, ptr addrspace(1) %241, i1 %22) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 50, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 56, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
