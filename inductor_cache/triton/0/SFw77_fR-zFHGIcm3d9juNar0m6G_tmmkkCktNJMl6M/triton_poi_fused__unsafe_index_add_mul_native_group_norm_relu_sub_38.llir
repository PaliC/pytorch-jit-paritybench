; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 9, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 510, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %.frozen = freeze i32 %22, !dbg !14
  %23 = sdiv i32 %.frozen, 16, !dbg !14
  %24 = srem i32 %23, 16, !dbg !15
  %25 = mul i32 %23, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %25, !dbg !16
  %26 = sdiv i32 %22, 256, !dbg !17
  %27 = srem i32 %26, 128, !dbg !18
  %28 = sext i32 %24 to i64, !dbg !19
  %29 = getelementptr i64, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !20
  %32 = sext i32 %.decomposed to i64, !dbg !21
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !22
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !22
  %37 = getelementptr i64, ptr addrspace(1) %4, i64 %32, !dbg !23
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !24
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !24
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !25
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !26
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !26
  %45 = getelementptr i64, ptr addrspace(1) %7, i64 %28, !dbg !27
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !28
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !30
  %52 = bitcast i32 %51 to float, !dbg !30
  %53 = sext i32 %22 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !31
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !32
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !32
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !32
  %58 = bitcast i32 %56 to float, !dbg !32
  %59 = bitcast i32 %57 to float, !dbg !32
  %60 = sdiv i32 %22, 1024, !dbg !33
  %61 = sext i32 %60 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %11, i64 %61, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !35
  %66 = bitcast i32 %65 to float, !dbg !35
  %67 = getelementptr float, ptr addrspace(1) %12, i64 %61, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !37
  %71 = bitcast i32 %70 to float, !dbg !37
  %72 = sext i32 %27 to i64, !dbg !38
  %73 = getelementptr float, ptr addrspace(1) %13, i64 %72, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !39
  %75 = bitcast i32 %74 to float, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !39
  %77 = bitcast i32 %76 to float, !dbg !39
  %78 = getelementptr float, ptr addrspace(1) %14, i64 %72, !dbg !40
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !41
  %80 = bitcast i32 %79 to float, !dbg !41
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !41
  %82 = bitcast i32 %81 to float, !dbg !41
  %83 = lshr i64 %30, 60, !dbg !42
  %84 = and i64 %83, 8, !dbg !42
  %85 = add i64 %84, %30, !dbg !42
  %86 = lshr i64 %35, 60, !dbg !43
  %87 = and i64 %86, 8, !dbg !43
  %88 = add i64 %87, %35, !dbg !43
  %89 = lshr i64 %36, 60, !dbg !43
  %90 = and i64 %89, 8, !dbg !43
  %91 = add i64 %90, %36, !dbg !43
  %92 = shl i64 %85, 3, !dbg !44
  %93 = shl nsw i32 %26, 6, !dbg !45
  %94 = sext i32 %93 to i64, !dbg !46
  %95 = add i64 %92, %94, !dbg !47
  %96 = add i64 %95, %88, !dbg !46
  %97 = add i64 %95, %91, !dbg !46
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !48
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !49
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !49
  %102 = lshr i64 %39, 60, !dbg !50
  %103 = and i64 %102, 8, !dbg !50
  %104 = add i64 %103, %39, !dbg !50
  %105 = lshr i64 %40, 60, !dbg !50
  %106 = and i64 %105, 8, !dbg !50
  %107 = add i64 %106, %40, !dbg !50
  %108 = add i64 %95, %104, !dbg !51
  %109 = add i64 %95, %107, !dbg !51
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !52
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !52
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !53
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !53
  %114 = getelementptr float, ptr addrspace(1) %6, i64 %96, !dbg !54
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %97, !dbg !54
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !55
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !55
  %118 = getelementptr float, ptr addrspace(1) %6, i64 %108, !dbg !56
  %119 = getelementptr float, ptr addrspace(1) %6, i64 %109, !dbg !56
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !57
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !57
  %122 = lshr i64 %46, 60, !dbg !58
  %123 = and i64 %122, 8, !dbg !58
  %124 = add i64 %123, %46, !dbg !58
  %125 = shl i64 %124, 3, !dbg !59
  %126 = add i64 %125, %94, !dbg !60
  %127 = add i64 %126, %88, !dbg !61
  %128 = add i64 %126, %91, !dbg !61
  %129 = getelementptr float, ptr addrspace(1) %6, i64 %127, !dbg !62
  %130 = getelementptr float, ptr addrspace(1) %6, i64 %128, !dbg !62
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !63
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #1, !dbg !63
  %133 = add i64 %126, %104, !dbg !64
  %134 = add i64 %126, %107, !dbg !64
  %135 = getelementptr float, ptr addrspace(1) %6, i64 %133, !dbg !65
  %136 = getelementptr float, ptr addrspace(1) %6, i64 %134, !dbg !65
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !66
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !66
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !67
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !67
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 true) #1, !dbg !68
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !68
  %143 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !69
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !69
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !70
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !70
  %147 = insertelement <2 x i32> poison, i32 %141, i64 0, !dbg !68
  %148 = insertelement <2 x i32> %147, i32 %100, i64 1, !dbg !68
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !68
  %150 = insertelement <2 x i32> poison, i32 %145, i64 0, !dbg !70
  %151 = insertelement <2 x i32> %150, i32 %112, i64 1, !dbg !70
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !70
  %153 = fsub <2 x float> %152, %149, !dbg !71
  %154 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !72
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !72
  %156 = shufflevector <2 x float> %155, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %157 = fmul <2 x float> %153, %156, !dbg !72
  %158 = fadd <2 x float> %157, %149, !dbg !73
  %159 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !68
  %160 = insertelement <2 x i32> %159, i32 %101, i64 1, !dbg !68
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !68
  %162 = insertelement <2 x i32> poison, i32 %146, i64 0, !dbg !70
  %163 = insertelement <2 x i32> %162, i32 %113, i64 1, !dbg !70
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !70
  %165 = fsub <2 x float> %164, %161, !dbg !71
  %166 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !72
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !72
  %168 = shufflevector <2 x float> %167, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %169 = fmul <2 x float> %165, %168, !dbg !72
  %170 = fadd <2 x float> %169, %161, !dbg !73
  %171 = extractelement <2 x float> %158, i64 0, !dbg !74
  %172 = extractelement <2 x float> %158, i64 1, !dbg !75
  %173 = fsub float %171, %172, !dbg !74
  %174 = extractelement <2 x float> %170, i64 0, !dbg !74
  %175 = extractelement <2 x float> %170, i64 1, !dbg !75
  %176 = fsub float %174, %175, !dbg !74
  %177 = fmul float %173, %50, !dbg !76
  %178 = fmul float %176, %52, !dbg !76
  %179 = fadd float %172, %177, !dbg !75
  %180 = fadd float %175, %178, !dbg !75
  %181 = getelementptr float, ptr addrspace(1) %9, i64 %96, !dbg !77
  %182 = getelementptr float, ptr addrspace(1) %9, i64 %97, !dbg !77
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 true) #1, !dbg !78
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !78
  %185 = getelementptr float, ptr addrspace(1) %9, i64 %108, !dbg !79
  %186 = getelementptr float, ptr addrspace(1) %9, i64 %109, !dbg !79
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 true) #1, !dbg !80
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #1, !dbg !80
  %189 = getelementptr float, ptr addrspace(1) %9, i64 %127, !dbg !81
  %190 = getelementptr float, ptr addrspace(1) %9, i64 %128, !dbg !81
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %189, i1 true) #1, !dbg !82
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #1, !dbg !82
  %193 = getelementptr float, ptr addrspace(1) %9, i64 %133, !dbg !83
  %194 = getelementptr float, ptr addrspace(1) %9, i64 %134, !dbg !83
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 true) #1, !dbg !84
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !84
  %197 = insertelement <2 x i32> poison, i32 %116, i64 0, !dbg !55
  %198 = insertelement <2 x i32> %197, i32 %183, i64 1, !dbg !55
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !55
  %200 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !57
  %201 = insertelement <2 x i32> %200, i32 %187, i64 1, !dbg !57
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !57
  %203 = fsub <2 x float> %202, %199, !dbg !85
  %204 = fmul <2 x float> %203, %156, !dbg !86
  %205 = fadd <2 x float> %204, %199, !dbg !87
  %206 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !63
  %207 = insertelement <2 x i32> %206, i32 %191, i64 1, !dbg !63
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !63
  %209 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !66
  %210 = insertelement <2 x i32> %209, i32 %195, i64 1, !dbg !66
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !66
  %212 = fsub <2 x float> %211, %208, !dbg !88
  %213 = fmul <2 x float> %212, %156, !dbg !89
  %214 = fadd <2 x float> %213, %208, !dbg !90
  %215 = fsub <2 x float> %214, %205, !dbg !91
  %216 = insertelement <2 x float> poison, float %50, i64 0, !dbg !92
  %217 = shufflevector <2 x float> %216, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %218 = fmul <2 x float> %215, %217, !dbg !92
  %219 = fadd <2 x float> %205, %218, !dbg !93
  %220 = extractelement <2 x float> %219, i64 0, !dbg !94
  %221 = fadd float %220, %179, !dbg !94
  %222 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !55
  %223 = insertelement <2 x i32> %222, i32 %184, i64 1, !dbg !55
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !55
  %225 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !57
  %226 = insertelement <2 x i32> %225, i32 %188, i64 1, !dbg !57
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !57
  %228 = fsub <2 x float> %227, %224, !dbg !85
  %229 = fmul <2 x float> %228, %168, !dbg !86
  %230 = fadd <2 x float> %229, %224, !dbg !87
  %231 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !63
  %232 = insertelement <2 x i32> %231, i32 %192, i64 1, !dbg !63
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !63
  %234 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !66
  %235 = insertelement <2 x i32> %234, i32 %196, i64 1, !dbg !66
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !66
  %237 = fsub <2 x float> %236, %233, !dbg !88
  %238 = fmul <2 x float> %237, %168, !dbg !89
  %239 = fadd <2 x float> %238, %233, !dbg !90
  %240 = fsub <2 x float> %239, %230, !dbg !91
  %241 = insertelement <2 x float> poison, float %52, i64 0, !dbg !92
  %242 = shufflevector <2 x float> %241, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !92
  %243 = fmul <2 x float> %240, %242, !dbg !92
  %244 = fadd <2 x float> %230, %243, !dbg !93
  %245 = extractelement <2 x float> %244, i64 0, !dbg !94
  %246 = fadd float %245, %180, !dbg !94
  %247 = extractelement <2 x float> %219, i64 1, !dbg !95
  %248 = fadd float %221, %247, !dbg !95
  %249 = extractelement <2 x float> %244, i64 1, !dbg !95
  %250 = fadd float %246, %249, !dbg !95
  %251 = fsub float %58, %64, !dbg !96
  %252 = fsub float %59, %66, !dbg !96
  %253 = fmul float %251, %69, !dbg !97
  %254 = fmul float %252, %71, !dbg !97
  %255 = fmul float %253, %75, !dbg !98
  %256 = fmul float %254, %77, !dbg !98
  %257 = fadd float %255, %80, !dbg !99
  %258 = fadd float %256, %82, !dbg !99
  %259 = fcmp olt float %257, 0.000000e+00, !dbg !100
  %260 = fcmp olt float %258, 0.000000e+00, !dbg !100
  %261 = select i1 %259, float 0.000000e+00, float %257, !dbg !104
  %262 = select i1 %260, float 0.000000e+00, float %258, !dbg !104
  %263 = fadd float %261, %248, !dbg !105
  %264 = fadd float %262, %250, !dbg !105
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !106
  %266 = bitcast float %263 to i32, !dbg !107
  %267 = bitcast float %264 to i32, !dbg !107
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %266, i32 %267, ptr addrspace(1) %265, i1 true) #1, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj6o5ho33tozruqvkzfyodmocmwmynfysqaqjolqtqsrknqneoyj.py", directory: "inductor_cache/j6")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38", linkageName: "triton_poi_fused__unsafe_index_add_mul_native_group_norm_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 38, scope: !7)
!34 = !DILocation(line: 36, column: 32, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 37, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 43, column: 32, scope: !7)
!43 = !DILocation(line: 46, column: 32, scope: !7)
!44 = !DILocation(line: 47, column: 39, scope: !7)
!45 = !DILocation(line: 47, column: 49, scope: !7)
!46 = !DILocation(line: 47, column: 46, scope: !7)
!47 = !DILocation(line: 47, column: 37, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !7)
!49 = !DILocation(line: 47, column: 54, scope: !7)
!50 = !DILocation(line: 50, column: 35, scope: !7)
!51 = !DILocation(line: 51, column: 48, scope: !7)
!52 = !DILocation(line: 51, column: 31, scope: !7)
!53 = !DILocation(line: 51, column: 56, scope: !7)
!54 = !DILocation(line: 55, column: 31, scope: !7)
!55 = !DILocation(line: 55, column: 55, scope: !7)
!56 = !DILocation(line: 56, column: 31, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 62, column: 35, scope: !7)
!59 = !DILocation(line: 63, column: 40, scope: !7)
!60 = !DILocation(line: 63, column: 38, scope: !7)
!61 = !DILocation(line: 63, column: 48, scope: !7)
!62 = !DILocation(line: 63, column: 31, scope: !7)
!63 = !DILocation(line: 63, column: 56, scope: !7)
!64 = !DILocation(line: 64, column: 49, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 57, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 56, scope: !7)
!69 = !DILocation(line: 72, column: 31, scope: !7)
!70 = !DILocation(line: 72, column: 57, scope: !7)
!71 = !DILocation(line: 73, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 20, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 76, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 77, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 31, scope: !7)
!78 = !DILocation(line: 80, column: 55, scope: !7)
!79 = !DILocation(line: 81, column: 31, scope: !7)
!80 = !DILocation(line: 81, column: 56, scope: !7)
!81 = !DILocation(line: 85, column: 31, scope: !7)
!82 = !DILocation(line: 85, column: 56, scope: !7)
!83 = !DILocation(line: 86, column: 31, scope: !7)
!84 = !DILocation(line: 86, column: 57, scope: !7)
!85 = !DILocation(line: 57, column: 20, scope: !7)
!86 = !DILocation(line: 58, column: 20, scope: !7)
!87 = !DILocation(line: 59, column: 20, scope: !7)
!88 = !DILocation(line: 65, column: 20, scope: !7)
!89 = !DILocation(line: 66, column: 20, scope: !7)
!90 = !DILocation(line: 67, column: 20, scope: !7)
!91 = !DILocation(line: 68, column: 20, scope: !7)
!92 = !DILocation(line: 69, column: 20, scope: !7)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 79, column: 20, scope: !7)
!95 = !DILocation(line: 93, column: 20, scope: !7)
!96 = !DILocation(line: 94, column: 20, scope: !7)
!97 = !DILocation(line: 95, column: 20, scope: !7)
!98 = !DILocation(line: 96, column: 20, scope: !7)
!99 = !DILocation(line: 97, column: 20, scope: !7)
!100 = !DILocation(line: 118, column: 15, scope: !101, inlinedAt: !103)
!101 = distinct !DILexicalBlockFile(scope: !7, file: !102, discriminator: 0)
!102 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!103 = !DILocation(line: 99, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !101, inlinedAt: !103)
!105 = !DILocation(line: 100, column: 20, scope: !7)
!106 = !DILocation(line: 101, column: 28, scope: !7)
!107 = !DILocation(line: 101, column: 40, scope: !7)
!108 = !DILocation(line: 101, column: 4, scope: !7)
