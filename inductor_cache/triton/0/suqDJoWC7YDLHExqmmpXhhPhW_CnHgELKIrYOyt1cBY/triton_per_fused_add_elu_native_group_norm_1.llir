; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_elu_native_group_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = and i32 %12, 63, !dbg !12
  %16 = lshr i32 %15, 4, !dbg !13
  %17 = shl i32 %10, 6, !dbg !14
  %18 = or disjoint i32 %17, %15, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11) #5, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = zext nneg i32 %16 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %11, i32 0, i1 %11) #5, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = select i1 %11, float %22, float 0.000000e+00, !dbg !24
  %34 = bitcast float %33 to i32, !dbg !25
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = fadd float %33, %36, !dbg !29
  %38 = bitcast float %37 to i32, !dbg !25
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = fadd float %37, %40, !dbg !29
  %42 = bitcast float %41 to i32, !dbg !25
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !25
  %44 = bitcast i32 %43 to float, !dbg !25
  %45 = fadd float %41, %44, !dbg !29
  %46 = bitcast float %45 to i32, !dbg !25
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = fadd float %45, %48, !dbg !29
  %50 = bitcast float %49 to i32, !dbg !25
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !25
  %52 = bitcast i32 %51 to float, !dbg !25
  %53 = fadd float %49, %52, !dbg !29
  %54 = icmp eq i32 %13, 0, !dbg !25
  %55 = and i32 %14, 1, !dbg !25
  %56 = zext nneg i32 %55 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !25
  %58 = bitcast float %53 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %54) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %59 = icmp slt i32 %12, 2, !dbg !25
  %60 = sext i32 %12 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !25
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = fadd float %63, %65, !dbg !29
  %67 = and i32 %12, 1, !dbg !25
  %68 = icmp eq i32 %67, 0, !dbg !25
  %69 = and i1 %59, %68, !dbg !25
  %70 = bitcast float %66 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %70, i1 %69) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %71 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 6.400000e+01) #5, !dbg !31
  %73 = fsub float %22, %72, !dbg !32
  %74 = fmul float %73, %73, !dbg !33
  %75 = select i1 %11, float %74, float 0.000000e+00, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %76 = bitcast float %75 to i32, !dbg !35
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !35
  %78 = bitcast i32 %77 to float, !dbg !35
  %79 = fadd float %75, %78, !dbg !37
  %80 = bitcast float %79 to i32, !dbg !35
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !35
  %82 = bitcast i32 %81 to float, !dbg !35
  %83 = fadd float %79, %82, !dbg !37
  %84 = bitcast float %83 to i32, !dbg !35
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !35
  %86 = bitcast i32 %85 to float, !dbg !35
  %87 = fadd float %83, %86, !dbg !37
  %88 = bitcast float %87 to i32, !dbg !35
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !35
  %90 = bitcast i32 %89 to float, !dbg !35
  %91 = fadd float %87, %90, !dbg !37
  %92 = bitcast float %91 to i32, !dbg !35
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !35
  %94 = bitcast i32 %93 to float, !dbg !35
  %95 = fadd float %91, %94, !dbg !37
  %96 = bitcast float %95 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %96, i1 %54) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !35
  %100 = bitcast i32 %99 to float, !dbg !35
  %101 = fadd float %98, %100, !dbg !37
  %102 = bitcast float %101 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %102, i1 %69) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %103 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 6.400000e+01) #5, !dbg !38
  %105 = fadd float %104, 0x3EE4F8B580000000, !dbg !39
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %106, 0, !dbg !40
  br i1 %.not.i, label %109, label %107, !dbg !40

107:                                              ; preds = %9
  %108 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

109:                                              ; preds = %9
  %110 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %107, %109
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], !dbg !40
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i1 = icmp eq i32 %111, 0, !dbg !40
  br i1 %.not.i1, label %114, label %112, !dbg !40

112:                                              ; preds = %__nv_rsqrtf.exit
  %113 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %105), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

114:                                              ; preds = %__nv_rsqrtf.exit
  %115 = tail call float @llvm.nvvm.rsqrt.approx.f(float %105), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

__nv_rsqrtf.exit3:                                ; preds = %112, %114
  %.0.i2 = phi float [ %113, %112 ], [ %115, %114 ], !dbg !40
  %116 = fmul float %73, %.0.i2, !dbg !41
  %117 = fmul float %116, %26, !dbg !42
  %118 = fadd float %117, %29, !dbg !43
  %119 = fadd float %118, %32, !dbg !44
  %120 = fmul float %119, 0x3FF7154760000000, !dbg !45
  %121 = tail call float @llvm.nvvm.round.f(float %120) #5, !dbg !45
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i4 = icmp eq i32 %122, 0, !dbg !45
  %123 = tail call float @llvm.nvvm.fabs.ftz.f(float %119) #5, !dbg !45
  %124 = tail call float @llvm.nvvm.fabs.f(float %119) #5, !dbg !45
  %.03.i = select i1 %.not.i4, float %124, float %123, !dbg !45
  %125 = fcmp olt float %.03.i, 0x3FDA3D70A0000000, !dbg !45
  %t.0.i = select i1 %125, float 0.000000e+00, float %121, !dbg !45
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %128 = fcmp oeq float %t.0.i, 1.280000e+02, !dbg !45
  %j.0.i = select i1 %128, float 1.270000e+02, float %t.0.i, !dbg !45
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not8.i = icmp eq i32 %134, 0, !dbg !45
  br i1 %.not8.i, label %137, label %135, !dbg !45

135:                                              ; preds = %__nv_rsqrtf.exit3
  %136 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %j.0.i) #5, !dbg !45
  br label %__nv_expm1f.exit, !dbg !45

137:                                              ; preds = %__nv_rsqrtf.exit3
  %138 = tail call float @llvm.nvvm.ex2.approx.f(float %j.0.i) #5, !dbg !45
  br label %__nv_expm1f.exit, !dbg !45

__nv_expm1f.exit:                                 ; preds = %135, %137
  %.0.i5 = phi float [ %136, %135 ], [ %138, %137 ], !dbg !45
  %139 = fcmp ogt float %119, 0.000000e+00, !dbg !46
  %.not7.i = icmp eq i32 %133, 0, !dbg !45
  %.not6.i = icmp eq i32 %132, 0, !dbg !45
  %.not5.i = icmp eq i32 %131, 0, !dbg !45
  %.not4.i = icmp eq i32 %130, 0, !dbg !45
  %.not3.i = icmp eq i32 %129, 0, !dbg !45
  %.not2.i = icmp eq i32 %127, 0, !dbg !45
  %140 = fneg float %t.0.i, !dbg !45
  %.not1.i = icmp eq i32 %126, 0, !dbg !45
  %141 = tail call float @llvm.nvvm.fma.rn.f(float %140, float 0x3FE62E4000000000, float %119) #5, !dbg !45
  %142 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %140, float 0x3FE62E4000000000, float %119) #5, !dbg !45
  %.04.i = select i1 %.not1.i, float %141, float %142, !dbg !45
  %143 = tail call float @llvm.nvvm.fma.rn.f(float %140, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !45
  %144 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %140, float 0x3EB7F7D1C0000000, float %.04.i) #5, !dbg !45
  %.05.i = select i1 %.not2.i, float %143, float %144, !dbg !45
  %145 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !45
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F56BD7CC0000000, float %.05.i, float 0x3F812ACC60000000) #5, !dbg !45
  %.07.i = select i1 %.not3.i, float %145, float %146, !dbg !45
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !45
  %148 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.05.i, float 0x3FA5557C60000000) #5, !dbg !45
  %.08.i = select i1 %.not4.i, float %147, float %148, !dbg !45
  %149 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !45
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %.05.i, float 0x3FC5553EC0000000) #5, !dbg !45
  %.09.i = select i1 %.not5.i, float %149, float %150, !dbg !45
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !45
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %.05.i, float 0x3FDFFFFFC0000000) #5, !dbg !45
  %.06.i = select i1 %.not6.i, float %151, float %152, !dbg !45
  %153 = fmul float %.05.i, %.06.i, !dbg !45
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %153, float %.05.i, float %.05.i) #5, !dbg !45
  %155 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %153, float %.05.i, float %.05.i) #5, !dbg !45
  %.01.i = select i1 %.not7.i, float %154, float %155, !dbg !45
  %156 = fadd float %.0.i5, -1.000000e+00, !dbg !45
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not9.i = icmp eq i32 %157, 0, !dbg !45
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %.0.i5, float %156) #5, !dbg !45
  %159 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %.0.i5, float %156) #5, !dbg !45
  %.02.i = select i1 %.not9.i, float %159, float %158, !dbg !45
  %160 = fadd float %.02.i, %.02.i, !dbg !45
  %u.0.i = select i1 %128, float %160, float %.02.i, !dbg !45
  %161 = fcmp ogt float %j.0.i, 1.280000e+02, !dbg !45
  %u.1.i = select i1 %161, float 0x7FF0000000000000, float %u.0.i, !dbg !45
  %162 = fcmp olt float %j.0.i, -2.500000e+01, !dbg !45
  %u.2.i = select i1 %162, float -1.000000e+00, float %u.1.i, !dbg !45
  %163 = fcmp oeq float %119, 0.000000e+00, !dbg !45
  %164 = fadd float %119, %119, !dbg !45
  %u.3.i = select i1 %163, float %164, float %u.2.i, !dbg !45
  %165 = select i1 %139, float %119, float %u.3.i, !dbg !47
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !48
  %167 = bitcast float %165 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %166, i1 %11) #5, !dbg !49
  %168 = sext i32 %10 to i64, !dbg !50
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %168, !dbg !50
  %170 = icmp eq i32 %15, 0, !dbg !51
  %171 = bitcast float %.0.i to i32, !dbg !51
  %172 = and i1 %170, %11, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %171, ptr addrspace(1) %169, i1 %172) #5, !dbg !51
  %173 = getelementptr float, ptr addrspace(1) %5, i64 %168, !dbg !52
  %174 = bitcast float %72 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %174, ptr addrspace(1) %173, i1 %172) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.round.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvxdt4ikijlyaa57pkp2bu6aj2adut2tjwbomnawshifx7se2zpv.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_per_fused_add_elu_native_group_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_elu_native_group_norm_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_elu_native_group_norm_1", linkageName: "triton_per_fused_add_elu_native_group_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 31, scope: !7)
!19 = !DILocation(line: 33, column: 36, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 44, scope: !7)
!24 = !DILocation(line: 39, column: 33, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 40, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 35, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !36)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 28, scope: !7)
!41 = !DILocation(line: 55, column: 20, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 28, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 65, column: 35, scope: !7)
!48 = !DILocation(line: 66, column: 28, scope: !7)
!49 = !DILocation(line: 66, column: 48, scope: !7)
!50 = !DILocation(line: 67, column: 25, scope: !7)
!51 = !DILocation(line: 67, column: 37, scope: !7)
!52 = !DILocation(line: 68, column: 25, scope: !7)
!53 = !DILocation(line: 68, column: 37, scope: !7)
!54 = !DILocation(line: 68, column: 4, scope: !7)
