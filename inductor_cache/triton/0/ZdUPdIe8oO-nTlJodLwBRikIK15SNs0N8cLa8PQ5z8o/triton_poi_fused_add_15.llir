; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = and i32 %12, 252, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 64, !dbg !13
  %17 = or disjoint i32 %15, 128, !dbg !13
  %18 = or disjoint i32 %15, 192, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 4, !dbg !16
  %.lobit12 = lshr i32 %9, 6, !dbg !17
  %27 = and i32 %.lobit12, 3, !dbg !17
  %28 = or disjoint i32 %26, %13, !dbg !18
  %29 = or disjoint i32 %26, %27, !dbg !18
  %30 = or disjoint i32 %29, 4, !dbg !18
  %31 = or disjoint i32 %29, 8, !dbg !18
  %32 = or disjoint i32 %29, 12, !dbg !18
  %33 = icmp slt i32 %28, 192, !dbg !19
  %34 = icmp slt i32 %29, 192, !dbg !19
  %35 = icmp slt i32 %30, 192, !dbg !19
  %36 = icmp slt i32 %31, 192, !dbg !19
  %37 = icmp slt i32 %32, 192, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %38 = sdiv i32 %.frozen, 64, !dbg !20
  %39 = mul i32 %38, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %40 = mul i32 %15, 192, !dbg !22
  %41 = mul i32 %16, 192, !dbg !22
  %42 = mul i32 %17, 192, !dbg !22
  %43 = mul i32 %18, 192, !dbg !22
  %44 = add i32 %28, %40, !dbg !23
  %45 = add i32 %28, %41, !dbg !23
  %46 = add i32 %28, %42, !dbg !23
  %47 = add i32 %28, %43, !dbg !23
  %48 = sext i32 %44 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %45 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %46 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %47 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = and i1 %20, %33, !dbg !25
  %57 = and i1 %21, %33, !dbg !25
  %58 = and i1 %22, %33, !dbg !25
  %59 = and i1 %23, %33, !dbg !25
  %60 = and i1 %24, %34, !dbg !25
  %61 = and i1 %35, %24, !dbg !25
  %62 = and i1 %36, %24, !dbg !25
  %63 = and i1 %37, %24, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %56) #2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %57) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %58) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %59) #2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = sext i32 %28 to i64, !dbg !27
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !27
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %33) #2, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !28
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !28
  %107 = bitcast i32 %103 to float, !dbg !28
  %108 = bitcast i32 %104 to float, !dbg !28
  %109 = bitcast i32 %105 to float, !dbg !28
  %110 = bitcast i32 %106 to float, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !29
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %56) #2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !30
  %120 = bitcast i32 %116 to float, !dbg !30
  %121 = bitcast i32 %117 to float, !dbg !30
  %122 = bitcast i32 %118 to float, !dbg !30
  %123 = bitcast i32 %119 to float, !dbg !30
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %57) #2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !30
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !30
  %129 = bitcast i32 %125 to float, !dbg !30
  %130 = bitcast i32 %126 to float, !dbg !30
  %131 = bitcast i32 %127 to float, !dbg !30
  %132 = bitcast i32 %128 to float, !dbg !30
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %58) #2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !30
  %138 = bitcast i32 %134 to float, !dbg !30
  %139 = bitcast i32 %135 to float, !dbg !30
  %140 = bitcast i32 %136 to float, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %59) #2, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = fmul float %107, %120, !dbg !31
  %152 = fmul float %108, %121, !dbg !31
  %153 = fmul float %109, %122, !dbg !31
  %154 = fmul float %110, %123, !dbg !31
  %155 = fmul float %107, %129, !dbg !31
  %156 = fmul float %108, %130, !dbg !31
  %157 = fmul float %109, %131, !dbg !31
  %158 = fmul float %110, %132, !dbg !31
  %159 = fmul float %107, %138, !dbg !31
  %160 = fmul float %108, %139, !dbg !31
  %161 = fmul float %109, %140, !dbg !31
  %162 = fmul float %110, %141, !dbg !31
  %163 = fmul float %107, %147, !dbg !31
  %164 = fmul float %108, %148, !dbg !31
  %165 = fmul float %109, %149, !dbg !31
  %166 = fmul float %110, %150, !dbg !31
  %167 = fadd float %151, %69, !dbg !32
  %168 = fadd float %152, %70, !dbg !32
  %169 = fadd float %153, %71, !dbg !32
  %170 = fadd float %154, %72, !dbg !32
  %171 = fadd float %155, %78, !dbg !32
  %172 = fadd float %156, %79, !dbg !32
  %173 = fadd float %157, %80, !dbg !32
  %174 = fadd float %158, %81, !dbg !32
  %175 = fadd float %159, %87, !dbg !32
  %176 = fadd float %160, %88, !dbg !32
  %177 = fadd float %161, %89, !dbg !32
  %178 = fadd float %162, %90, !dbg !32
  %179 = fadd float %163, %96, !dbg !32
  %180 = fadd float %164, %97, !dbg !32
  %181 = fadd float %165, %98, !dbg !32
  %182 = fadd float %166, %99, !dbg !32
  %183 = shl i32 %29, 6, !dbg !33
  %184 = shl i32 %30, 6, !dbg !33
  %185 = shl i32 %31, 6, !dbg !33
  %186 = shl i32 %32, 6, !dbg !33
  %187 = mul i32 %38, 12288, !dbg !34
  %188 = add i32 %187, %.decomposed, !dbg !35
  %189 = add i32 %188, %183, !dbg !36
  %190 = add i32 %188, %184, !dbg !36
  %191 = add i32 %188, %185, !dbg !36
  %192 = add i32 %188, %186, !dbg !36
  %193 = sext i32 %189 to i64, !dbg !37
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !37
  %195 = sext i32 %190 to i64, !dbg !37
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !37
  %197 = sext i32 %191 to i64, !dbg !37
  %198 = getelementptr float, ptr addrspace(1) %3, i64 %197, !dbg !37
  %199 = sext i32 %192 to i64, !dbg !37
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !37
  %201 = shl i32 %9, 10, !dbg !38
  %202 = and i32 %201, 3072, !dbg !38
  %203 = or disjoint i32 %202, %11, !dbg !38
  %204 = and i32 %12, 1020, !dbg !38
  %205 = lshr exact i32 %202, 4, !dbg !38
  %206 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %205, !dbg !38
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %203, !dbg !38
  %208 = bitcast float %167 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !38
  %209 = or disjoint i32 %203, 256, !dbg !38
  %210 = lshr i32 %209, 6, !dbg !38
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !38
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %209, !dbg !38
  %213 = bitcast float %168 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !38
  %214 = or disjoint i32 %203, 512, !dbg !38
  %215 = lshr i32 %214, 6, !dbg !38
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !38
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !38
  %218 = bitcast float %169 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !38
  %219 = or disjoint i32 %203, 768, !dbg !38
  %220 = lshr i32 %219, 6, !dbg !38
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !38
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %219, !dbg !38
  %223 = bitcast float %170 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !38
  %224 = or disjoint i32 %203, 64, !dbg !38
  %225 = getelementptr float, ptr addrspace(3) %206, i32 %224, !dbg !38
  %226 = bitcast float %171 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !38
  %227 = or disjoint i32 %203, 320, !dbg !38
  %228 = lshr i32 %227, 6, !dbg !38
  %229 = and i32 %228, 52, !dbg !38
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !38
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %227, !dbg !38
  %232 = bitcast float %172 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #2, !dbg !38
  %233 = or disjoint i32 %203, 576, !dbg !38
  %234 = lshr i32 %233, 6, !dbg !38
  %235 = and i32 %234, 56, !dbg !38
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !38
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !38
  %238 = bitcast float %173 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #2, !dbg !38
  %239 = or disjoint i32 %203, 832, !dbg !38
  %240 = lshr i32 %239, 6, !dbg !38
  %241 = and i32 %240, 60, !dbg !38
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !38
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %239, !dbg !38
  %244 = bitcast float %174 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !38
  %245 = or disjoint i32 %203, 128, !dbg !38
  %246 = getelementptr float, ptr addrspace(3) %206, i32 %245, !dbg !38
  %247 = bitcast float %175 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !38
  %248 = or disjoint i32 %203, 384, !dbg !38
  %249 = lshr i32 %248, 6, !dbg !38
  %250 = and i32 %249, 52, !dbg !38
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !38
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %248, !dbg !38
  %253 = bitcast float %176 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !38
  %254 = or disjoint i32 %203, 640, !dbg !38
  %255 = lshr i32 %254, 6, !dbg !38
  %256 = and i32 %255, 56, !dbg !38
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !38
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !38
  %259 = bitcast float %177 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !38
  %260 = or disjoint i32 %203, 896, !dbg !38
  %261 = lshr i32 %260, 6, !dbg !38
  %262 = and i32 %261, 60, !dbg !38
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !38
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %260, !dbg !38
  %265 = bitcast float %178 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !38
  %266 = or disjoint i32 %203, 192, !dbg !38
  %267 = getelementptr float, ptr addrspace(3) %206, i32 %266, !dbg !38
  %268 = bitcast float %179 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #2, !dbg !38
  %269 = or disjoint i32 %203, 448, !dbg !38
  %270 = lshr i32 %269, 6, !dbg !38
  %271 = and i32 %270, 52, !dbg !38
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !38
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %269, !dbg !38
  %274 = bitcast float %180 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !38
  %275 = or disjoint i32 %203, 704, !dbg !38
  %276 = lshr i32 %275, 6, !dbg !38
  %277 = and i32 %276, 56, !dbg !38
  %278 = getelementptr float, ptr addrspace(3) @global_smem, i32 %277, !dbg !38
  %279 = getelementptr float, ptr addrspace(3) %278, i32 %275, !dbg !38
  %280 = bitcast float %181 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #2, !dbg !38
  %281 = or disjoint i32 %203, 960, !dbg !38
  %282 = lshr i32 %281, 6, !dbg !38
  %283 = and i32 %282, 60, !dbg !38
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !38
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %281, !dbg !38
  %286 = bitcast float %182 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %287 = lshr i32 %12, 6, !dbg !38
  %288 = and i32 %287, 12, !dbg !38
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %288, !dbg !38
  %290 = getelementptr inbounds float, ptr addrspace(3) %289, i32 %204, !dbg !38
  %291 = or disjoint i32 %204, 1024, !dbg !38
  %292 = lshr i32 %291, 6, !dbg !38
  %293 = and i32 %292, 28, !dbg !38
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %293, !dbg !38
  %295 = getelementptr inbounds float, ptr addrspace(3) %294, i32 %291, !dbg !38
  %296 = load <4 x i32>, ptr addrspace(3) %295, align 16, !dbg !38
  %297 = or disjoint i32 %204, 2048, !dbg !38
  %298 = lshr i32 %297, 6, !dbg !38
  %299 = and i32 %298, 44, !dbg !38
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !38
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %297, !dbg !38
  %302 = load <4 x i32>, ptr addrspace(3) %301, align 16, !dbg !38
  %303 = or disjoint i32 %204, 3072, !dbg !38
  %304 = lshr i32 %303, 6, !dbg !38
  %305 = and i32 %304, 60, !dbg !38
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !38
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %303, !dbg !38
  %308 = load <4 x i32>, ptr addrspace(3) %307, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %290, align 16, !dbg !38
  %309 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 4, !dbg !38
  %.extract18 = load i32, ptr addrspace(3) %309, align 4, !dbg !38
  %310 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 8, !dbg !38
  %.extract19 = load i32, ptr addrspace(3) %310, align 8, !dbg !38
  %311 = getelementptr inbounds i8, ptr addrspace(3) %290, i32 12, !dbg !38
  %.extract20 = load i32, ptr addrspace(3) %311, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %194, i1 %60) #2, !dbg !38
  %.extract21 = extractelement <4 x i32> %296, i64 0, !dbg !38
  %.extract22 = extractelement <4 x i32> %296, i64 1, !dbg !38
  %.extract23 = extractelement <4 x i32> %296, i64 2, !dbg !38
  %.extract24 = extractelement <4 x i32> %296, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %196, i1 %61) #2, !dbg !38
  %.extract25 = extractelement <4 x i32> %302, i64 0, !dbg !38
  %.extract26 = extractelement <4 x i32> %302, i64 1, !dbg !38
  %.extract27 = extractelement <4 x i32> %302, i64 2, !dbg !38
  %.extract28 = extractelement <4 x i32> %302, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %198, i1 %62) #2, !dbg !38
  %.extract29 = extractelement <4 x i32> %308, i64 0, !dbg !38
  %.extract30 = extractelement <4 x i32> %308, i64 1, !dbg !38
  %.extract31 = extractelement <4 x i32> %308, i64 2, !dbg !38
  %.extract32 = extractelement <4 x i32> %308, i64 3, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %200, i1 %63) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
