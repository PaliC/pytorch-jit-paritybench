; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 513, !dbg !13
  %24 = or disjoint i32 %18, 514, !dbg !13
  %25 = or disjoint i32 %18, 515, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %26 = sdiv i32 %.frozen, 196, !dbg !14
  %.frozen76 = freeze i32 %22, !dbg !14
  %27 = sdiv i32 %.frozen76, 196, !dbg !14
  %28 = srem i32 %26, 768, !dbg !15
  %29 = srem i32 %27, 768, !dbg !15
  %30 = mul i32 %26, 196, !dbg !16
  %.decomposed = sub i32 %.frozen, %30, !dbg !16
  %31 = srem i32 %19, 196, !dbg !16
  %32 = srem i32 %20, 196, !dbg !16
  %33 = srem i32 %21, 196, !dbg !16
  %34 = mul i32 %27, 196, !dbg !16
  %.decomposed77 = sub i32 %.frozen76, %34, !dbg !16
  %35 = srem i32 %23, 196, !dbg !16
  %36 = srem i32 %24, 196, !dbg !16
  %37 = srem i32 %25, 196, !dbg !16
  %.frozen80 = freeze i32 %18, !dbg !17
  %38 = sdiv i32 %.frozen80, 150528, !dbg !17
  %.frozen78 = freeze i32 %22, !dbg !17
  %39 = sdiv i32 %.frozen78, 150528, !dbg !17
  %40 = icmp slt i32 %28, 384, !dbg !18
  %41 = icmp slt i32 %29, 384, !dbg !18
  %42 = mul nsw i32 %.decomposed, 384, !dbg !19
  %43 = mul nsw i32 %31, 384, !dbg !19
  %44 = mul nsw i32 %32, 384, !dbg !19
  %45 = mul nsw i32 %33, 384, !dbg !19
  %46 = mul nsw i32 %.decomposed77, 384, !dbg !19
  %47 = mul nsw i32 %35, 384, !dbg !19
  %48 = mul nsw i32 %36, 384, !dbg !19
  %49 = mul nsw i32 %37, 384, !dbg !19
  %50 = mul nsw i32 %38, 75264, !dbg !20
  %51 = mul nsw i32 %39, 75264, !dbg !20
  %52 = add nsw i32 %42, %50, !dbg !21
  %53 = add nsw i32 %50, %43, !dbg !21
  %54 = add nsw i32 %50, %44, !dbg !21
  %55 = add nsw i32 %50, %45, !dbg !21
  %56 = add nsw i32 %46, %51, !dbg !21
  %57 = add nsw i32 %47, %51, !dbg !21
  %58 = add nsw i32 %48, %51, !dbg !21
  %59 = add nsw i32 %49, %51, !dbg !21
  %60 = add nsw i32 %52, %28, !dbg !22
  %61 = add nsw i32 %53, %28, !dbg !22
  %62 = add nsw i32 %54, %28, !dbg !22
  %63 = add nsw i32 %55, %28, !dbg !22
  %64 = add nsw i32 %56, %29, !dbg !22
  %65 = add nsw i32 %57, %29, !dbg !22
  %66 = add nsw i32 %58, %29, !dbg !22
  %67 = add nsw i32 %59, %29, !dbg !22
  %68 = sext i32 %60 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %61 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = sext i32 %62 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = sext i32 %63 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !23
  %76 = sext i32 %64 to i64, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !23
  %78 = sext i32 %65 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !23
  %80 = sext i32 %66 to i64, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !23
  %82 = sext i32 %67 to i64, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !23
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %40, i32 0, i1 %40) #3, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %40, i32 0, i1 %40) #3, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %40, i32 0, i1 %40) #3, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %40, i32 0, i1 %40) #3, !dbg !24
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %41, i32 0, i1 %41) #3, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %41, i32 0, i1 %41) #3, !dbg !24
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %41, i32 0, i1 %41) #3, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %41, i32 0, i1 %41) #3, !dbg !24
  %92 = sext i32 %28 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !25
  %94 = sext i32 %29 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %41, i32 0, i1 %41) #3, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %41, i32 0, i1 %41) #3, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %41, i32 0, i1 %41) #3, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %41, i32 0, i1 %41) #3, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !27
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %40, i32 0, i1 %40) #3, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %40, i32 0, i1 %40) #3, !dbg !28
  %109 = bitcast i32 %108 to float, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %40, i32 0, i1 %40) #3, !dbg !28
  %111 = bitcast i32 %110 to float, !dbg !28
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %40, i32 0, i1 %40) #3, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %41, i32 0, i1 %41) #3, !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %41, i32 0, i1 %41) #3, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %41, i32 0, i1 %41) #3, !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %41, i32 0, i1 %41) #3, !dbg !28
  %121 = bitcast i32 %120 to float, !dbg !28
  %122 = fadd float %107, 0x3F50624DE0000000, !dbg !29
  %123 = fadd float %109, 0x3F50624DE0000000, !dbg !29
  %124 = fadd float %111, 0x3F50624DE0000000, !dbg !29
  %125 = fadd float %113, 0x3F50624DE0000000, !dbg !29
  %126 = fadd float %115, 0x3F50624DE0000000, !dbg !29
  %127 = fadd float %117, 0x3F50624DE0000000, !dbg !29
  %128 = fadd float %119, 0x3F50624DE0000000, !dbg !29
  %129 = fadd float %121, 0x3F50624DE0000000, !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %130, 0, !dbg !30
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %131, 0, !dbg !30
  br i1 %.not.i, label %137, label %132, !dbg !30

132:                                              ; preds = %12
  br i1 %.not1.i, label %135, label %133, !dbg !30

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

137:                                              ; preds = %12
  br i1 %.not1.i, label %140, label %138, !dbg !30

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %133, %135, %138, %140
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !30
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %142, 0, !dbg !30
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %143, 0, !dbg !30
  br i1 %.not.i1, label %149, label %144, !dbg !30

144:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %147, label %145, !dbg !30

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

149:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %152, label %150, !dbg !30

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %145, %147, %150, %152
  %.0.i3 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !30
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %154, 0, !dbg !30
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %155, 0, !dbg !30
  br i1 %.not.i6, label %161, label %156, !dbg !30

156:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %159, label %157, !dbg !30

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

161:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %164, label %162, !dbg !30

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %157, %159, %162, %164
  %.0.i8 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !30
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %166, 0, !dbg !30
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %167, 0, !dbg !30
  br i1 %.not.i11, label %173, label %168, !dbg !30

168:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %171, label %169, !dbg !30

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

173:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %176, label %174, !dbg !30

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %169, %171, %174, %176
  %.0.i13 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !30
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %178, 0, !dbg !30
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %179, 0, !dbg !30
  br i1 %.not.i16, label %185, label %180, !dbg !30

180:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %183, label %181, !dbg !30

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

185:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %188, label %186, !dbg !30

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %181, %183, %186, %188
  %.0.i18 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !30
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %190, 0, !dbg !30
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %191, 0, !dbg !30
  br i1 %.not.i21, label %197, label %192, !dbg !30

192:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %195, label %193, !dbg !30

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

197:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %200, label %198, !dbg !30

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %193, %195, %198, %200
  %.0.i23 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !30
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %202, 0, !dbg !30
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %203, 0, !dbg !30
  br i1 %.not.i26, label %209, label %204, !dbg !30

204:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %207, label %205, !dbg !30

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

209:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %212, label %210, !dbg !30

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %205, %207, %210, %212
  %.0.i28 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !30
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %214, 0, !dbg !30
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %215, 0, !dbg !30
  br i1 %.not.i31, label %221, label %216, !dbg !30

216:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %219, label %217, !dbg !30

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

221:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %224, label %222, !dbg !30

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %217, %219, %222, %224
  %.0.i33 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !30
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !32
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !32
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %244 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !34
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %94, !dbg !34
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %40, i32 0, i1 %40) #3, !dbg !35
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %41, i32 0, i1 %41) #3, !dbg !35
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %41, i32 0, i1 %41) #3, !dbg !35
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %41, i32 0, i1 %41) #3, !dbg !35
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %41, i32 0, i1 %41) #3, !dbg !35
  %254 = icmp sgt i32 %28, 383, !dbg !36
  %255 = icmp sgt i32 %29, 383, !dbg !36
  %256 = add nsw i32 %28, -384, !dbg !37
  %257 = add nsw i32 %29, -384, !dbg !37
  %258 = add nsw i32 %52, %256, !dbg !38
  %259 = add nsw i32 %53, %256, !dbg !38
  %260 = add nsw i32 %54, %256, !dbg !38
  %261 = add nsw i32 %55, %256, !dbg !38
  %262 = add nsw i32 %56, %257, !dbg !38
  %263 = add nsw i32 %57, %257, !dbg !38
  %264 = add nsw i32 %58, %257, !dbg !38
  %265 = add nsw i32 %59, %257, !dbg !38
  %266 = sext i32 %258 to i64, !dbg !39
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %266, !dbg !39
  %268 = sext i32 %259 to i64, !dbg !39
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %268, !dbg !39
  %270 = sext i32 %260 to i64, !dbg !39
  %271 = getelementptr float, ptr addrspace(1) %5, i64 %270, !dbg !39
  %272 = sext i32 %261 to i64, !dbg !39
  %273 = getelementptr float, ptr addrspace(1) %5, i64 %272, !dbg !39
  %274 = sext i32 %262 to i64, !dbg !39
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !39
  %276 = sext i32 %263 to i64, !dbg !39
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !39
  %278 = sext i32 %264 to i64, !dbg !39
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !39
  %280 = sext i32 %265 to i64, !dbg !39
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !39
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %267, i1 %254, i32 0, i1 %254) #3, !dbg !40
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %269, i1 %254, i32 0, i1 %254) #3, !dbg !40
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %271, i1 %254, i32 0, i1 %254) #3, !dbg !40
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %273, i1 %254, i32 0, i1 %254) #3, !dbg !40
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %275, i1 %255, i32 0, i1 %255) #3, !dbg !40
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %255, i32 0, i1 %255) #3, !dbg !40
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %255, i32 0, i1 %255) #3, !dbg !40
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %255, i32 0, i1 %255) #3, !dbg !40
  %290 = sext i32 %256 to i64, !dbg !41
  %291 = getelementptr float, ptr addrspace(1) %6, i64 %290, !dbg !41
  %292 = sext i32 %257 to i64, !dbg !41
  %293 = getelementptr float, ptr addrspace(1) %6, i64 %292, !dbg !41
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %254, i32 0, i1 %254) #3, !dbg !42
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %254, i32 0, i1 %254) #3, !dbg !42
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %254, i32 0, i1 %254) #3, !dbg !42
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %254, i32 0, i1 %254) #3, !dbg !42
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %255, i32 0, i1 %255) #3, !dbg !42
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %255, i32 0, i1 %255) #3, !dbg !42
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %255, i32 0, i1 %255) #3, !dbg !42
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %255, i32 0, i1 %255) #3, !dbg !42
  %302 = getelementptr float, ptr addrspace(1) %7, i64 %290, !dbg !43
  %303 = getelementptr float, ptr addrspace(1) %7, i64 %292, !dbg !43
  %304 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %254, i32 0, i1 %254) #3, !dbg !44
  %305 = bitcast i32 %304 to float, !dbg !44
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %254, i32 0, i1 %254) #3, !dbg !44
  %307 = bitcast i32 %306 to float, !dbg !44
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %254, i32 0, i1 %254) #3, !dbg !44
  %309 = bitcast i32 %308 to float, !dbg !44
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %302, i1 %254, i32 0, i1 %254) #3, !dbg !44
  %311 = bitcast i32 %310 to float, !dbg !44
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %255, i32 0, i1 %255) #3, !dbg !44
  %313 = bitcast i32 %312 to float, !dbg !44
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %255, i32 0, i1 %255) #3, !dbg !44
  %315 = bitcast i32 %314 to float, !dbg !44
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %255, i32 0, i1 %255) #3, !dbg !44
  %317 = bitcast i32 %316 to float, !dbg !44
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %255, i32 0, i1 %255) #3, !dbg !44
  %319 = bitcast i32 %318 to float, !dbg !44
  %320 = fadd float %305, 0x3F50624DE0000000, !dbg !45
  %321 = fadd float %307, 0x3F50624DE0000000, !dbg !45
  %322 = fadd float %309, 0x3F50624DE0000000, !dbg !45
  %323 = fadd float %311, 0x3F50624DE0000000, !dbg !45
  %324 = fadd float %313, 0x3F50624DE0000000, !dbg !45
  %325 = fadd float %315, 0x3F50624DE0000000, !dbg !45
  %326 = fadd float %317, 0x3F50624DE0000000, !dbg !45
  %327 = fadd float %319, 0x3F50624DE0000000, !dbg !45
  %328 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i36 = icmp eq i32 %328, 0, !dbg !46
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i39 = icmp eq i32 %329, 0, !dbg !46
  br i1 %.not.i36, label %335, label %330, !dbg !46

330:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %333, label %331, !dbg !46

331:                                              ; preds = %330
  %332 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %320) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

333:                                              ; preds = %330
  %334 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %320) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

335:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %338, label %336, !dbg !46

336:                                              ; preds = %335
  %337 = tail call float @llvm.nvvm.sqrt.rn.f(float %320) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

338:                                              ; preds = %335
  %339 = tail call float @llvm.nvvm.sqrt.approx.f(float %320) #3, !dbg !46
  br label %__nv_sqrtf.exit40, !dbg !46

__nv_sqrtf.exit40:                                ; preds = %331, %333, %336, %338
  %.0.i38 = phi float [ %332, %331 ], [ %334, %333 ], [ %337, %336 ], [ %339, %338 ], !dbg !46
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i41 = icmp eq i32 %340, 0, !dbg !46
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i44 = icmp eq i32 %341, 0, !dbg !46
  br i1 %.not.i41, label %347, label %342, !dbg !46

342:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %345, label %343, !dbg !46

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %321) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %321) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

347:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %350, label %348, !dbg !46

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %321) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %321) #3, !dbg !46
  br label %__nv_sqrtf.exit45, !dbg !46

__nv_sqrtf.exit45:                                ; preds = %343, %345, %348, %350
  %.0.i43 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !46
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i46 = icmp eq i32 %352, 0, !dbg !46
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i49 = icmp eq i32 %353, 0, !dbg !46
  br i1 %.not.i46, label %359, label %354, !dbg !46

354:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %357, label %355, !dbg !46

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %322) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %322) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

359:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %362, label %360, !dbg !46

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %322) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %322) #3, !dbg !46
  br label %__nv_sqrtf.exit50, !dbg !46

__nv_sqrtf.exit50:                                ; preds = %355, %357, %360, %362
  %.0.i48 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !46
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i51 = icmp eq i32 %364, 0, !dbg !46
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i54 = icmp eq i32 %365, 0, !dbg !46
  br i1 %.not.i51, label %371, label %366, !dbg !46

366:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %369, label %367, !dbg !46

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %323) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %323) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

371:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %374, label %372, !dbg !46

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.f(float %323) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.f(float %323) #3, !dbg !46
  br label %__nv_sqrtf.exit55, !dbg !46

__nv_sqrtf.exit55:                                ; preds = %367, %369, %372, %374
  %.0.i53 = phi float [ %368, %367 ], [ %370, %369 ], [ %373, %372 ], [ %375, %374 ], !dbg !46
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i56 = icmp eq i32 %376, 0, !dbg !46
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i59 = icmp eq i32 %377, 0, !dbg !46
  br i1 %.not.i56, label %383, label %378, !dbg !46

378:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %381, label %379, !dbg !46

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %324) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %324) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

383:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %386, label %384, !dbg !46

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.f(float %324) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.f(float %324) #3, !dbg !46
  br label %__nv_sqrtf.exit60, !dbg !46

__nv_sqrtf.exit60:                                ; preds = %379, %381, %384, %386
  %.0.i58 = phi float [ %380, %379 ], [ %382, %381 ], [ %385, %384 ], [ %387, %386 ], !dbg !46
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i61 = icmp eq i32 %388, 0, !dbg !46
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i64 = icmp eq i32 %389, 0, !dbg !46
  br i1 %.not.i61, label %395, label %390, !dbg !46

390:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %393, label %391, !dbg !46

391:                                              ; preds = %390
  %392 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %325) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

393:                                              ; preds = %390
  %394 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %325) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

395:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %398, label %396, !dbg !46

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.f(float %325) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.f(float %325) #3, !dbg !46
  br label %__nv_sqrtf.exit65, !dbg !46

__nv_sqrtf.exit65:                                ; preds = %391, %393, %396, %398
  %.0.i63 = phi float [ %392, %391 ], [ %394, %393 ], [ %397, %396 ], [ %399, %398 ], !dbg !46
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i66 = icmp eq i32 %400, 0, !dbg !46
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i69 = icmp eq i32 %401, 0, !dbg !46
  br i1 %.not.i66, label %407, label %402, !dbg !46

402:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %405, label %403, !dbg !46

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %326) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %326) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

407:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %410, label %408, !dbg !46

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.f(float %326) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.f(float %326) #3, !dbg !46
  br label %__nv_sqrtf.exit70, !dbg !46

__nv_sqrtf.exit70:                                ; preds = %403, %405, %408, %410
  %.0.i68 = phi float [ %404, %403 ], [ %406, %405 ], [ %409, %408 ], [ %411, %410 ], !dbg !46
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i71 = icmp eq i32 %412, 0, !dbg !46
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i74 = icmp eq i32 %413, 0, !dbg !46
  br i1 %.not.i71, label %419, label %414, !dbg !46

414:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %417, label %415, !dbg !46

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %327) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %327) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

419:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %422, label %420, !dbg !46

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.f(float %327) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.f(float %327) #3, !dbg !46
  br label %__nv_sqrtf.exit75, !dbg !46

__nv_sqrtf.exit75:                                ; preds = %415, %417, %420, %422
  %.0.i73 = phi float [ %416, %415 ], [ %418, %417 ], [ %421, %420 ], [ %423, %422 ], !dbg !46
  %424 = insertelement <16 x i32> poison, i32 %289, i64 0, !dbg !40
  %425 = insertelement <16 x i32> %424, i32 %288, i64 1, !dbg !40
  %426 = insertelement <16 x i32> %425, i32 %287, i64 2, !dbg !40
  %427 = insertelement <16 x i32> %426, i32 %286, i64 3, !dbg !40
  %428 = insertelement <16 x i32> %427, i32 %285, i64 4, !dbg !40
  %429 = insertelement <16 x i32> %428, i32 %284, i64 5, !dbg !40
  %430 = insertelement <16 x i32> %429, i32 %283, i64 6, !dbg !40
  %431 = insertelement <16 x i32> %430, i32 %282, i64 7, !dbg !40
  %432 = insertelement <16 x i32> %431, i32 %84, i64 8, !dbg !40
  %433 = insertelement <16 x i32> %432, i32 %85, i64 9, !dbg !40
  %434 = insertelement <16 x i32> %433, i32 %86, i64 10, !dbg !40
  %435 = insertelement <16 x i32> %434, i32 %87, i64 11, !dbg !40
  %436 = insertelement <16 x i32> %435, i32 %88, i64 12, !dbg !40
  %437 = insertelement <16 x i32> %436, i32 %89, i64 13, !dbg !40
  %438 = insertelement <16 x i32> %437, i32 %90, i64 14, !dbg !40
  %439 = insertelement <16 x i32> %438, i32 %91, i64 15, !dbg !40
  %440 = bitcast <16 x i32> %439 to <16 x float>, !dbg !40
  %441 = insertelement <16 x i32> poison, i32 %301, i64 0, !dbg !42
  %442 = insertelement <16 x i32> %441, i32 %300, i64 1, !dbg !42
  %443 = insertelement <16 x i32> %442, i32 %299, i64 2, !dbg !42
  %444 = insertelement <16 x i32> %443, i32 %298, i64 3, !dbg !42
  %445 = insertelement <16 x i32> %444, i32 %297, i64 4, !dbg !42
  %446 = insertelement <16 x i32> %445, i32 %296, i64 5, !dbg !42
  %447 = insertelement <16 x i32> %446, i32 %295, i64 6, !dbg !42
  %448 = insertelement <16 x i32> %447, i32 %294, i64 7, !dbg !42
  %449 = insertelement <16 x i32> %448, i32 %96, i64 8, !dbg !42
  %450 = insertelement <16 x i32> %449, i32 %97, i64 9, !dbg !42
  %451 = insertelement <16 x i32> %450, i32 %98, i64 10, !dbg !42
  %452 = insertelement <16 x i32> %451, i32 %99, i64 11, !dbg !42
  %453 = insertelement <16 x i32> %452, i32 %100, i64 12, !dbg !42
  %454 = insertelement <16 x i32> %453, i32 %101, i64 13, !dbg !42
  %455 = insertelement <16 x i32> %454, i32 %102, i64 14, !dbg !42
  %456 = insertelement <16 x i32> %455, i32 %103, i64 15, !dbg !42
  %457 = bitcast <16 x i32> %456 to <16 x float>, !dbg !42
  %458 = mul i32 %39, 150528, !dbg !47
  %.decomposed79 = sub i32 %.frozen78, %458, !dbg !47
  %459 = mul i32 %38, 150528, !dbg !47
  %.decomposed81 = sub i32 %.frozen80, %459, !dbg !47
  %460 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !48
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !48
  %462 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !48
  %463 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !48
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !48
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !48
  %466 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !48
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !48
  %468 = getelementptr float, ptr addrspace(1) %8, i64 %290, !dbg !49
  %469 = getelementptr float, ptr addrspace(1) %8, i64 %292, !dbg !49
  %470 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %254, i32 0, i1 %254) #3, !dbg !50
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %254, i32 0, i1 %254) #3, !dbg !50
  %472 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %254, i32 0, i1 %254) #3, !dbg !50
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %468, i1 %254, i32 0, i1 %254) #3, !dbg !50
  %474 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %255, i32 0, i1 %255) #3, !dbg !50
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %255, i32 0, i1 %255) #3, !dbg !50
  %476 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %255, i32 0, i1 %255) #3, !dbg !50
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %469, i1 %255, i32 0, i1 %255) #3, !dbg !50
  %478 = getelementptr float, ptr addrspace(1) %9, i64 %290, !dbg !51
  %479 = getelementptr float, ptr addrspace(1) %9, i64 %292, !dbg !51
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %254, i32 0, i1 %254) #3, !dbg !52
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %254, i32 0, i1 %254) #3, !dbg !52
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %254, i32 0, i1 %254) #3, !dbg !52
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %254, i32 0, i1 %254) #3, !dbg !52
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %255, i32 0, i1 %255) #3, !dbg !52
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %255, i32 0, i1 %255) #3, !dbg !52
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %255, i32 0, i1 %255) #3, !dbg !52
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %255, i32 0, i1 %255) #3, !dbg !52
  %488 = fsub <16 x float> %440, %457, !dbg !53
  %489 = insertelement <16 x float> poison, float %467, i64 0, !dbg !54
  %490 = insertelement <16 x float> %489, float %466, i64 1, !dbg !54
  %491 = insertelement <16 x float> %490, float %465, i64 2, !dbg !54
  %492 = insertelement <16 x float> %491, float %464, i64 3, !dbg !54
  %493 = insertelement <16 x float> %492, float %463, i64 4, !dbg !54
  %494 = insertelement <16 x float> %493, float %462, i64 5, !dbg !54
  %495 = insertelement <16 x float> %494, float %461, i64 6, !dbg !54
  %496 = insertelement <16 x float> %495, float %460, i64 7, !dbg !54
  %497 = insertelement <16 x float> %496, float %226, i64 8, !dbg !54
  %498 = insertelement <16 x float> %497, float %227, i64 9, !dbg !54
  %499 = insertelement <16 x float> %498, float %228, i64 10, !dbg !54
  %500 = insertelement <16 x float> %499, float %229, i64 11, !dbg !54
  %501 = insertelement <16 x float> %500, float %230, i64 12, !dbg !54
  %502 = insertelement <16 x float> %501, float %231, i64 13, !dbg !54
  %503 = insertelement <16 x float> %502, float %232, i64 14, !dbg !54
  %504 = insertelement <16 x float> %503, float %233, i64 15, !dbg !54
  %505 = fmul <16 x float> %488, %504, !dbg !54
  %506 = insertelement <16 x i32> poison, i32 %477, i64 0, !dbg !50
  %507 = insertelement <16 x i32> %506, i32 %476, i64 1, !dbg !50
  %508 = insertelement <16 x i32> %507, i32 %475, i64 2, !dbg !50
  %509 = insertelement <16 x i32> %508, i32 %474, i64 3, !dbg !50
  %510 = insertelement <16 x i32> %509, i32 %473, i64 4, !dbg !50
  %511 = insertelement <16 x i32> %510, i32 %472, i64 5, !dbg !50
  %512 = insertelement <16 x i32> %511, i32 %471, i64 6, !dbg !50
  %513 = insertelement <16 x i32> %512, i32 %470, i64 7, !dbg !50
  %514 = insertelement <16 x i32> %513, i32 %236, i64 8, !dbg !50
  %515 = insertelement <16 x i32> %514, i32 %237, i64 9, !dbg !50
  %516 = insertelement <16 x i32> %515, i32 %238, i64 10, !dbg !50
  %517 = insertelement <16 x i32> %516, i32 %239, i64 11, !dbg !50
  %518 = insertelement <16 x i32> %517, i32 %240, i64 12, !dbg !50
  %519 = insertelement <16 x i32> %518, i32 %241, i64 13, !dbg !50
  %520 = insertelement <16 x i32> %519, i32 %242, i64 14, !dbg !50
  %521 = insertelement <16 x i32> %520, i32 %243, i64 15, !dbg !50
  %522 = bitcast <16 x i32> %521 to <16 x float>, !dbg !50
  %523 = fmul <16 x float> %505, %522, !dbg !55
  %524 = insertelement <16 x i32> poison, i32 %487, i64 0, !dbg !52
  %525 = insertelement <16 x i32> %524, i32 %486, i64 1, !dbg !52
  %526 = insertelement <16 x i32> %525, i32 %485, i64 2, !dbg !52
  %527 = insertelement <16 x i32> %526, i32 %484, i64 3, !dbg !52
  %528 = insertelement <16 x i32> %527, i32 %483, i64 4, !dbg !52
  %529 = insertelement <16 x i32> %528, i32 %482, i64 5, !dbg !52
  %530 = insertelement <16 x i32> %529, i32 %481, i64 6, !dbg !52
  %531 = insertelement <16 x i32> %530, i32 %480, i64 7, !dbg !52
  %532 = insertelement <16 x i32> %531, i32 %246, i64 8, !dbg !52
  %533 = insertelement <16 x i32> %532, i32 %247, i64 9, !dbg !52
  %534 = insertelement <16 x i32> %533, i32 %248, i64 10, !dbg !52
  %535 = insertelement <16 x i32> %534, i32 %249, i64 11, !dbg !52
  %536 = insertelement <16 x i32> %535, i32 %250, i64 12, !dbg !52
  %537 = insertelement <16 x i32> %536, i32 %251, i64 13, !dbg !52
  %538 = insertelement <16 x i32> %537, i32 %252, i64 14, !dbg !52
  %539 = insertelement <16 x i32> %538, i32 %253, i64 15, !dbg !52
  %540 = bitcast <16 x i32> %539 to <16 x float>, !dbg !52
  %541 = fadd <16 x float> %523, %540, !dbg !56
  %542 = fcmp olt <16 x float> %541, zeroinitializer, !dbg !57
  %543 = extractelement <16 x i1> %542, i64 15, !dbg !61
  %544 = extractelement <16 x float> %541, i64 15, !dbg !61
  %545 = select i1 %543, float 0.000000e+00, float %544, !dbg !61
  %546 = extractelement <16 x i1> %542, i64 14, !dbg !61
  %547 = extractelement <16 x float> %541, i64 14, !dbg !61
  %548 = select i1 %546, float 0.000000e+00, float %547, !dbg !61
  %549 = extractelement <16 x i1> %542, i64 13, !dbg !61
  %550 = extractelement <16 x float> %541, i64 13, !dbg !61
  %551 = select i1 %549, float 0.000000e+00, float %550, !dbg !61
  %552 = extractelement <16 x i1> %542, i64 12, !dbg !61
  %553 = extractelement <16 x float> %541, i64 12, !dbg !61
  %554 = select i1 %552, float 0.000000e+00, float %553, !dbg !61
  %555 = extractelement <16 x i1> %542, i64 11, !dbg !61
  %556 = extractelement <16 x float> %541, i64 11, !dbg !61
  %557 = select i1 %555, float 0.000000e+00, float %556, !dbg !61
  %558 = extractelement <16 x i1> %542, i64 10, !dbg !61
  %559 = extractelement <16 x float> %541, i64 10, !dbg !61
  %560 = select i1 %558, float 0.000000e+00, float %559, !dbg !61
  %561 = extractelement <16 x i1> %542, i64 9, !dbg !61
  %562 = extractelement <16 x float> %541, i64 9, !dbg !61
  %563 = select i1 %561, float 0.000000e+00, float %562, !dbg !61
  %564 = extractelement <16 x i1> %542, i64 8, !dbg !61
  %565 = extractelement <16 x float> %541, i64 8, !dbg !61
  %566 = select i1 %564, float 0.000000e+00, float %565, !dbg !61
  %567 = extractelement <16 x i1> %542, i64 7, !dbg !63
  %568 = extractelement <16 x float> %541, i64 7, !dbg !63
  %569 = select i1 %567, float 0.000000e+00, float %568, !dbg !63
  %570 = extractelement <16 x i1> %542, i64 6, !dbg !63
  %571 = extractelement <16 x float> %541, i64 6, !dbg !63
  %572 = select i1 %570, float 0.000000e+00, float %571, !dbg !63
  %573 = extractelement <16 x i1> %542, i64 5, !dbg !63
  %574 = extractelement <16 x float> %541, i64 5, !dbg !63
  %575 = select i1 %573, float 0.000000e+00, float %574, !dbg !63
  %576 = extractelement <16 x i1> %542, i64 4, !dbg !63
  %577 = extractelement <16 x float> %541, i64 4, !dbg !63
  %578 = select i1 %576, float 0.000000e+00, float %577, !dbg !63
  %579 = extractelement <16 x i1> %542, i64 3, !dbg !63
  %580 = extractelement <16 x float> %541, i64 3, !dbg !63
  %581 = select i1 %579, float 0.000000e+00, float %580, !dbg !63
  %582 = extractelement <16 x i1> %542, i64 2, !dbg !63
  %583 = extractelement <16 x float> %541, i64 2, !dbg !63
  %584 = select i1 %582, float 0.000000e+00, float %583, !dbg !63
  %585 = extractelement <16 x i1> %542, i64 1, !dbg !63
  %586 = extractelement <16 x float> %541, i64 1, !dbg !63
  %587 = select i1 %585, float 0.000000e+00, float %586, !dbg !63
  %588 = extractelement <16 x i1> %542, i64 0, !dbg !63
  %589 = extractelement <16 x float> %541, i64 0, !dbg !63
  %590 = select i1 %588, float 0.000000e+00, float %589, !dbg !63
  %591 = select i1 %40, float %566, float %569, !dbg !64
  %592 = select i1 %40, float %563, float %572, !dbg !64
  %593 = select i1 %40, float %560, float %575, !dbg !64
  %594 = select i1 %40, float %557, float %578, !dbg !64
  %595 = select i1 %41, float %554, float %581, !dbg !64
  %596 = select i1 %41, float %551, float %584, !dbg !64
  %597 = select i1 %41, float %548, float %587, !dbg !64
  %598 = select i1 %41, float %545, float %590, !dbg !64
  %599 = mul i32 %38, 401408, !dbg !65
  %600 = mul i32 %39, 401408, !dbg !65
  %601 = add i32 %599, %.decomposed81, !dbg !66
  %602 = add i32 %600, %.decomposed79, !dbg !66
  %603 = sext i32 %601 to i64, !dbg !67
  %604 = getelementptr float, ptr addrspace(1) %10, i64 %603, !dbg !67
  %605 = sext i32 %602 to i64, !dbg !67
  %606 = getelementptr float, ptr addrspace(1) %10, i64 %605, !dbg !67
  %607 = bitcast float %591 to i32, !dbg !68
  %608 = bitcast float %592 to i32, !dbg !68
  %609 = bitcast float %593 to i32, !dbg !68
  %610 = bitcast float %594 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %607, i32 %608, i32 %609, i32 %610, ptr addrspace(1) %604, i1 true) #3, !dbg !68
  %611 = bitcast float %595 to i32, !dbg !68
  %612 = bitcast float %596 to i32, !dbg !68
  %613 = bitcast float %597 to i32, !dbg !68
  %614 = bitcast float %598 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %611, i32 %612, i32 %613, i32 %614, ptr addrspace(1) %606, i1 true) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2f4tkw7ts2b6vrbc54do4jex325drxeb6wa4fgo6mehmexgv6sq.py", directory: "inductor_cache/2f")
!4 = !{ptr @triton_poi_fused_cat_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_47", linkageName: "triton_poi_fused_cat_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 51, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 57, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 61, scope: !7)
!38 = !DILocation(line: 56, column: 52, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 67, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 45, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 45, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 27, column: 19, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 31, scope: !7)
!50 = !DILocation(line: 68, column: 45, scope: !7)
!51 = !DILocation(line: 70, column: 31, scope: !7)
!52 = !DILocation(line: 70, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 71, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 73, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !62)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 77, column: 37, scope: !7)
!66 = !DILocation(line: 77, column: 30, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 49, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
