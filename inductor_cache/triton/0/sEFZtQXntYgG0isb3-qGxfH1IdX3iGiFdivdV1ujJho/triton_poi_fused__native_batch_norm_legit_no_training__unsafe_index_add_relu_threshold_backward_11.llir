; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = icmp slt i32 %20, 4, !dbg !16
  %.frozen = freeze i32 %18, !dbg !17
  %22 = sdiv i32 %.frozen, 128, !dbg !17
  %23 = mul i32 %22, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %23, !dbg !18
  %.frozen10 = freeze i32 %20, !dbg !19
  %24 = sdiv i32 %.frozen10, 2, !dbg !19
  %25 = mul i32 %24, 2, !dbg !20
  %.decomposed11 = sub i32 %.frozen10, %25, !dbg !20
  %26 = shl i32 %20, 7, !dbg !21
  %27 = add i32 %.decomposed, %26, !dbg !22
  %28 = shl i32 %22, 9, !dbg !23
  %29 = add i32 %27, %28, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = and i1 %21, %19, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #4, !dbg !27
  %34 = sext i32 %.decomposed to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %19) #4, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #4, !dbg !31
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %41 = bitcast i32 %39 to float, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !32
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #4, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !34
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #4, !dbg !35
  %47 = sext i32 %24 to i64, !dbg !36
  %48 = getelementptr i64, ptr addrspace(1) %5, i64 %47, !dbg !36
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %21) #4, !dbg !37
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %21) #4, !dbg !37
  %51 = sext i32 %.decomposed11 to i64, !dbg !38
  %52 = getelementptr i64, ptr addrspace(1) %5, i64 %51, !dbg !38
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %21) #4, !dbg !39
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %21) #4, !dbg !39
  %55 = fadd float %41, 0x3EE4F8B580000000, !dbg !40
  %56 = fadd float %42, 0x3EE4F8B580000000, !dbg !40
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %57, 0, !dbg !41
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %58, 0, !dbg !41
  br i1 %.not.i, label %64, label %59, !dbg !41

59:                                               ; preds = %12
  br i1 %.not1.i, label %62, label %60, !dbg !41

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

64:                                               ; preds = %12
  br i1 %.not1.i, label %67, label %65, !dbg !41

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !41
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i5 = icmp eq i32 %69, 0, !dbg !41
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i8 = icmp eq i32 %70, 0, !dbg !41
  br i1 %.not.i5, label %76, label %71, !dbg !41

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %74, label %72, !dbg !41

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %79, label %77, !dbg !41

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !41
  br label %__nv_sqrtf.exit9, !dbg !41

__nv_sqrtf.exit9:                                 ; preds = %72, %74, %77, %79
  %.0.i7 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !41
  %81 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %82 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %83 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %84 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %85 = extractvalue { i32, i32 } %46, 1, !dbg !35
  %86 = extractvalue { i32, i32 } %46, 0, !dbg !35
  %87 = extractvalue { i32, i32 } %44, 1, !dbg !33
  %88 = extractvalue { i32, i32 } %44, 0, !dbg !33
  %89 = and i32 %15, 127, !dbg !12
  %90 = or disjoint i32 %89, 128, !dbg !12
  %91 = or disjoint i32 %14, %90, !dbg !13
  %92 = icmp slt i32 %91, 512, !dbg !14
  %93 = and i1 %21, %92, !dbg !26
  %94 = or disjoint i32 %14, %89, !dbg !13
  %95 = icmp slt i32 %94, 512, !dbg !14
  %96 = and i1 %21, %95, !dbg !26
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !42
  %99 = lshr i64 %50, 57, !dbg !43
  %100 = and i64 %99, 64, !dbg !43
  %101 = add i64 %100, %50, !dbg !43
  %102 = lshr i64 %54, 57, !dbg !44
  %103 = and i64 %102, 64, !dbg !44
  %104 = add i64 %103, %54, !dbg !44
  %105 = shl i32 %22, 19, !dbg !45
  %106 = sext i32 %105 to i64, !dbg !46
  %.idx = shl i64 %104, 9, !dbg !47
  %107 = getelementptr i8, ptr addrspace(1) %6, i64 %.idx, !dbg !47
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %34, !dbg !47
  %.idx1 = shl i64 %101, 15, !dbg !47
  %109 = getelementptr i8, ptr addrspace(1) %108, i64 %.idx1, !dbg !47
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %106, !dbg !47
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %110, i1 %32) #4, !dbg !48
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !48
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !48
  %114 = bitcast i32 %112 to float, !dbg !48
  %115 = bitcast i32 %113 to float, !dbg !48
  %116 = shl i32 %94, 2, !dbg !49
  %117 = shl i32 %91, 2, !dbg !49
  %118 = add i32 %116, %20, !dbg !50
  %119 = add i32 %117, %20, !dbg !50
  %120 = sext i32 %118 to i64, !dbg !51
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %120, !dbg !51
  %122 = sext i32 %119 to i64, !dbg !51
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %122, !dbg !51
  %.idx2 = shl nuw nsw i32 %17, 3, !dbg !52
  %124 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !52
  %125 = shl nuw nsw i32 %17, 1, !dbg !52
  %126 = or disjoint i32 %125, 2, !dbg !52
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !52
  %.idx3 = shl nuw nsw i32 %89, 3, !dbg !52
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !52
  %.idx4 = shl nuw nsw i32 %90, 3, !dbg !52
  %129 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !52
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !53
  %131 = getelementptr i1, ptr addrspace(1) %9, i64 %30, !dbg !54
  %132 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !27
  %133 = insertelement <2 x i32> %132, i32 %81, i64 1, !dbg !27
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !27
  %135 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !29
  %136 = insertelement <2 x i32> %135, i32 %82, i64 1, !dbg !29
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !29
  %138 = fsub <2 x float> %134, %137, !dbg !55
  %139 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !35
  %140 = insertelement <2 x i32> %139, i32 %85, i64 1, !dbg !35
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !35
  %142 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !33
  %143 = insertelement <2 x i32> %142, i32 %87, i64 1, !dbg !33
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !33
  %145 = insertelement <2 x float> poison, float %97, i64 0, !dbg !56
  %146 = insertelement <2 x float> %145, float %98, i64 1, !dbg !56
  %147 = fmul <2 x float> %138, %146, !dbg !56
  %148 = fmul <2 x float> %147, %144, !dbg !57
  %149 = fadd <2 x float> %148, %141, !dbg !58
  %150 = fcmp olt <2 x float> %149, zeroinitializer, !dbg !59
  %151 = select <2 x i1> %150, <2 x float> zeroinitializer, <2 x float> %149, !dbg !63
  %152 = extractelement <2 x float> %151, i64 0, !dbg !52
  %153 = fadd float %152, %114, !dbg !64
  %154 = extractelement <2 x float> %151, i64 1, !dbg !52
  %155 = fadd float %154, %115, !dbg !64
  %156 = fcmp ole <2 x float> %151, zeroinitializer, !dbg !65
  %157 = bitcast float %152 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %157, i1 true) #4, !dbg !52
  %158 = bitcast float %154 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %158, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %159 = load i32, ptr addrspace(3) %128, align 8, !dbg !52
  %160 = load i32, ptr addrspace(3) %129, align 8, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %159, ptr addrspace(1) %121, i1 %96) #4, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %123, i1 %93) #4, !dbg !52
  %161 = bitcast float %153 to i32, !dbg !66
  %162 = bitcast float %155 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %162, ptr addrspace(1) %130, i1 %32) #4, !dbg !66
  %163 = zext <2 x i1> %156 to <2 x i8>, !dbg !67
  %164 = bitcast <2 x i8> %163 to i16, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %164, ptr addrspace(1) %131, i1 %32) #4, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py", directory: "inductor_cache/it")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 34, column: 44, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 61, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 31, scope: !7)
!37 = !DILocation(line: 39, column: 36, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 26, scope: !7)
!42 = !DILocation(line: 46, column: 18, scope: !7)
!43 = !DILocation(line: 57, column: 35, scope: !7)
!44 = !DILocation(line: 60, column: 35, scope: !7)
!45 = !DILocation(line: 61, column: 68, scope: !7)
!46 = !DILocation(line: 61, column: 61, scope: !7)
!47 = !DILocation(line: 61, column: 31, scope: !7)
!48 = !DILocation(line: 61, column: 73, scope: !7)
!49 = !DILocation(line: 65, column: 32, scope: !7)
!50 = !DILocation(line: 65, column: 30, scope: !7)
!51 = !DILocation(line: 65, column: 25, scope: !7)
!52 = !DILocation(line: 65, column: 44, scope: !7)
!53 = !DILocation(line: 66, column: 25, scope: !7)
!54 = !DILocation(line: 67, column: 25, scope: !7)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 49, column: 19, scope: !7)
!57 = !DILocation(line: 50, column: 20, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 53, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 21, scope: !7)
!66 = !DILocation(line: 66, column: 55, scope: !7)
!67 = !DILocation(line: 67, column: 55, scope: !7)
!68 = !DILocation(line: 67, column: 4, scope: !7)
