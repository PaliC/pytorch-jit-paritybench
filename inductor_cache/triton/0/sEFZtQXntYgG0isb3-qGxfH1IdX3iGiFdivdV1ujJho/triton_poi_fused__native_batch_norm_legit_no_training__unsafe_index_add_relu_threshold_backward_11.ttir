#loc = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0)
module {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_threshold_backward_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg5: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg9: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0), %arg11: i32 loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<8192> : tensor<1x1xi64> loc(#loc1)
    %cst_0 = arith.constant dense<128> : tensor<1x1xi64> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<1x1xi64> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x1xi64> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<1x256xf32> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x256xi32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x256xf32> loc(#loc1)
    %cst_6 = arith.constant dense<524288> : tensor<1x256xi32> loc(#loc1)
    %cst_7 = arith.constant dense<9.99999974E-6> : tensor<1x256xf32> loc(#loc1)
    %cst_8 = arith.constant dense<128> : tensor<1x256xi32> loc(#loc1)
    %cst_9 = arith.constant dense<512> : tensor<1x256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<256xi32> -> tensor<1x256xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<1x256xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<1x256xi32> loc(#loc6)
    %6 = arith.cmpi slt, %5, %cst_9 : tensor<1x256xi32> loc(#loc7)
    %7 = tt.get_program_id x : i32 loc(#loc8)
    %8 = arith.cmpi slt, %7, %c4_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i1 -> tensor<1x1xi1> loc(#loc9)
    %10 = arith.remsi %5, %cst_8 : tensor<1x256xi32> loc(#loc10)
    %11 = arith.divsi %5, %cst_8 : tensor<1x256xi32> loc(#loc11)
    %12 = arith.divsi %7, %c2_i32 : i32 loc(#loc12)
    %13 = arith.remsi %7, %c2_i32 : i32 loc(#loc13)
    %14 = arith.muli %7, %c128_i32 : i32 loc(#loc14)
    %15 = tt.splat %14 : i32 -> tensor<1x256xi32> loc(#loc15)
    %16 = arith.addi %10, %15 : tensor<1x256xi32> loc(#loc15)
    %17 = arith.muli %11, %cst_9 : tensor<1x256xi32> loc(#loc16)
    %18 = arith.addi %16, %17 : tensor<1x256xi32> loc(#loc17)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc18)
    %20 = tt.addptr %19, %18 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc18)
    %21 = tt.splat %8 : i1 -> tensor<1x256xi1> loc(#loc19)
    %22 = arith.andi %21, %6 : tensor<1x256xi1> loc(#loc19)
    %23 = tt.load %20, %22 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>> loc(#loc20)
    %24 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc21)
    %25 = tt.addptr %24, %10 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc21)
    %26 = tt.load %25, %6 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>> loc(#loc22)
    %27 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc23)
    %28 = tt.addptr %27, %10 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc23)
    %29 = tt.load %28, %6 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>> loc(#loc24)
    %30 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc25)
    %31 = tt.addptr %30, %10 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc25)
    %32 = tt.load %31, %6 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>> loc(#loc26)
    %33 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc27)
    %34 = tt.addptr %33, %10 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc27)
    %35 = tt.load %34, %6 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>> loc(#loc28)
    %36 = tt.addptr %arg5, %12 : !tt.ptr<i64>, i32 loc(#loc29)
    %37 = tt.splat %36 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>> loc(#loc29)
    %38 = tt.load %37, %9 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>> loc(#loc30)
    %39 = tt.addptr %arg5, %13 : !tt.ptr<i64>, i32 loc(#loc31)
    %40 = tt.splat %39 : !tt.ptr<i64> -> tensor<1x1x!tt.ptr<i64>> loc(#loc31)
    %41 = tt.load %40, %9 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<i64>> loc(#loc32)
    %42 = arith.subf %23, %26 : tensor<1x256xf32> loc(#loc33)
    %43 = arith.addf %29, %cst_7 : tensor<1x256xf32> loc(#loc34)
    %44 = tt.extern_elementwise %43 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x256xf32>) -> tensor<1x256xf32> loc(#loc35)
    %45 = arith.divf %cst_3, %44 : tensor<1x256xf32> loc(#loc36)
    %46 = arith.mulf %42, %45 : tensor<1x256xf32> loc(#loc37)
    %47 = arith.mulf %46, %32 : tensor<1x256xf32> loc(#loc38)
    %48 = arith.addf %47, %35 : tensor<1x256xf32> loc(#loc39)
    %49 = arith.cmpf ogt, %cst_5, %48 : tensor<1x256xf32> loc(#loc68)
    %50 = arith.select %49, %cst_5, %48 : tensor<1x256xi1>, tensor<1x256xf32> loc(#loc69)
    %51 = arith.addi %38, %cst_1 : tensor<1x1xi64> loc(#loc43)
    %52 = arith.cmpi slt, %38, %cst_2 : tensor<1x1xi64> loc(#loc44)
    %53 = arith.select %52, %51, %38 : tensor<1x1xi1>, tensor<1x1xi64> loc(#loc45)
    %54 = arith.addi %41, %cst_1 : tensor<1x1xi64> loc(#loc46)
    %55 = arith.cmpi slt, %41, %cst_2 : tensor<1x1xi64> loc(#loc47)
    %56 = arith.select %55, %54, %41 : tensor<1x1xi1>, tensor<1x1xi64> loc(#loc48)
    %57 = arith.muli %56, %cst_0 : tensor<1x1xi64> loc(#loc49)
    %58 = tt.broadcast %57 : tensor<1x1xi64> -> tensor<1x256xi64> loc(#loc49)
    %59 = arith.extsi %10 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc50)
    %60 = arith.addi %59, %58 : tensor<1x256xi64> loc(#loc50)
    %61 = arith.muli %53, %cst : tensor<1x1xi64> loc(#loc51)
    %62 = tt.broadcast %61 : tensor<1x1xi64> -> tensor<1x256xi64> loc(#loc51)
    %63 = arith.addi %60, %62 : tensor<1x256xi64> loc(#loc52)
    %64 = arith.muli %11, %cst_6 : tensor<1x256xi32> loc(#loc53)
    %65 = arith.extsi %64 : tensor<1x256xi32> to tensor<1x256xi64> loc(#loc54)
    %66 = arith.addi %63, %65 : tensor<1x256xi64> loc(#loc54)
    %67 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc55)
    %68 = tt.addptr %67, %66 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi64> loc(#loc55)
    %69 = tt.load %68, %22 : tensor<1x256x!tt.ptr<f32>> loc(#loc56)
    %70 = arith.addf %69, %50 : tensor<1x256xf32> loc(#loc57)
    %71 = arith.cmpf ole, %50, %cst_5 : tensor<1x256xf32> loc(#loc58)
    %72 = arith.muli %5, %cst_4 : tensor<1x256xi32> loc(#loc59)
    %73 = tt.splat %7 : i32 -> tensor<1x256xi32> loc(#loc60)
    %74 = arith.addi %73, %72 : tensor<1x256xi32> loc(#loc60)
    %75 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc61)
    %76 = tt.addptr %75, %74 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc61)
    tt.store %76, %50, %22 : tensor<1x256x!tt.ptr<f32>> loc(#loc62)
    %77 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>> loc(#loc63)
    %78 = tt.addptr %77, %18 : tensor<1x256x!tt.ptr<f32>>, tensor<1x256xi32> loc(#loc63)
    tt.store %78, %70, %22 : tensor<1x256x!tt.ptr<f32>> loc(#loc64)
    %79 = tt.splat %arg9 : !tt.ptr<i1> -> tensor<1x256x!tt.ptr<i1>> loc(#loc65)
    %80 = tt.addptr %79, %18 : tensor<1x256x!tt.ptr<i1>>, tensor<1x256xi32> loc(#loc65)
    %81 = tt.bitcast %80 : tensor<1x256x!tt.ptr<i1>> -> tensor<1x256x!tt.ptr<i8>> loc(#loc66)
    %82 = arith.extui %71 : tensor<1x256xi1> to tensor<1x256xi8> loc(#loc66)
    tt.store %81, %82, %22 : tensor<1x256x!tt.ptr<i8>> loc(#loc66)
    tt.return loc(#loc67)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":22:28)
#loc3 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":22:33)
#loc4 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":23:36)
#loc5 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":23:44)
#loc6 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":23:23)
#loc7 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":24:21)
#loc8 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":25:28)
#loc9 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":27:21)
#loc10 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":29:19)
#loc11 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":30:19)
#loc12 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":32:19)
#loc13 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":33:19)
#loc14 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:39)
#loc15 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:35)
#loc16 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:48)
#loc17 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:44)
#loc18 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:30)
#loc19 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:61)
#loc20 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":34:53)
#loc21 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":35:30)
#loc22 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":35:35)
#loc23 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":36:30)
#loc24 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":36:35)
#loc25 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":37:31)
#loc26 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":37:36)
#loc27 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":38:31)
#loc28 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":38:36)
#loc29 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":39:31)
#loc30 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":39:36)
#loc31 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":40:31)
#loc32 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":40:36)
#loc33 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":41:18)
#loc34 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":43:18)
#loc35 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":44:26)
#loc36 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":46:18)
#loc37 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":49:19)
#loc38 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":50:20)
#loc39 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":51:20)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc41 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":53:42)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc43 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":55:20)
#loc44 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":56:20)
#loc45 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":57:35)
#loc46 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":58:20)
#loc47 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":59:20)
#loc48 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":60:35)
#loc49 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:40)
#loc50 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:36)
#loc51 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:53)
#loc52 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:48)
#loc53 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:68)
#loc54 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:61)
#loc55 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:31)
#loc56 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":61:73)
#loc57 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":62:20)
#loc58 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":64:21)
#loc59 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":65:32)
#loc60 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":65:30)
#loc61 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":65:25)
#loc62 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":65:44)
#loc63 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":66:25)
#loc64 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":66:55)
#loc65 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":67:25)
#loc66 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":67:55)
#loc67 = loc("inductor_cache/it/citd5yg7ejk45apfbx7igkkulax7rxggcumlpabdmhx5deldjlxp.py":67:4)
#loc68 = loc(callsite(#loc40 at #loc41))
#loc69 = loc(callsite(#loc42 at #loc41))
