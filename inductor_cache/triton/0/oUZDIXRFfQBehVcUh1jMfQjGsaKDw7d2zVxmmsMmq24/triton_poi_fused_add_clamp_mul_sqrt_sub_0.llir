; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_clamp_mul_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 15, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 16, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 4, !dbg !15
  %11 = mul i32 %10, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = shl nsw i32 %.decomposed, 2, !dbg !17
  %13 = sext i32 %12 to i64, !dbg !18
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !18
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %9) #3, !dbg !19
  %16 = or disjoint i32 %12, 1, !dbg !20
  %17 = sext i32 %16 to i64, !dbg !21
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !21
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %9) #3, !dbg !22
  %20 = or disjoint i32 %12, 2, !dbg !23
  %21 = sext i32 %20 to i64, !dbg !24
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !24
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %9) #3, !dbg !25
  %24 = or disjoint i32 %12, 3, !dbg !26
  %25 = sext i32 %24 to i64, !dbg !27
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !27
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %9) #3, !dbg !28
  %28 = shl nsw i32 %10, 2, !dbg !29
  %29 = sext i32 %28 to i64, !dbg !30
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !30
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %9) #3, !dbg !31
  %32 = or disjoint i32 %28, 1, !dbg !32
  %33 = sext i32 %32 to i64, !dbg !33
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !33
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %9) #3, !dbg !34
  %36 = or disjoint i32 %28, 2, !dbg !35
  %37 = sext i32 %36 to i64, !dbg !36
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !36
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %9) #3, !dbg !37
  %40 = or disjoint i32 %28, 3, !dbg !38
  %41 = sext i32 %40 to i64, !dbg !39
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !39
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %9) #3, !dbg !40
  %44 = sext i32 %8 to i64, !dbg !41
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !41
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %9) #3, !dbg !42
  %47 = bitcast i32 %46 to float, !dbg !42
  %48 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !19
  %49 = insertelement <2 x i32> %48, i32 %31, i64 1, !dbg !19
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !19
  %51 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !22
  %52 = insertelement <2 x i32> %51, i32 %35, i64 1, !dbg !22
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !22
  %54 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !25
  %55 = insertelement <2 x i32> %54, i32 %39, i64 1, !dbg !25
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !25
  %57 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !28
  %58 = insertelement <2 x i32> %57, i32 %43, i64 1, !dbg !28
  %59 = bitcast <2 x i32> %58 to <2 x float>, !dbg !28
  %60 = fmul <2 x float> %50, %50, !dbg !43
  %61 = fmul <2 x float> %53, %53, !dbg !44
  %62 = fadd <2 x float> %60, %61, !dbg !45
  %63 = fmul <2 x float> %56, %56, !dbg !46
  %64 = fadd <2 x float> %62, %63, !dbg !47
  %65 = fmul <2 x float> %59, %59, !dbg !48
  %66 = fadd <2 x float> %64, %65, !dbg !49
  %shift = shufflevector <2 x float> %66, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %67 = fadd <2 x float> %66, %shift, !dbg !50
  %68 = extractelement <2 x float> %67, i64 0, !dbg !50
  %69 = fmul float %47, 2.000000e+00, !dbg !51
  %70 = fsub float %68, %69, !dbg !52
  %71 = fcmp ogt float %70, 0x3D71979980000000, !dbg !53
  %72 = fcmp uno float %70, 0.000000e+00, !dbg !57
  %73 = or i1 %71, %72, !dbg !58
  %74 = select i1 %73, float %70, float 0x3D71979980000000, !dbg !59
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %75, 0, !dbg !60
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %76, 0, !dbg !60
  br i1 %.not.i, label %82, label %77, !dbg !60

77:                                               ; preds = %3
  br i1 %.not1.i, label %80, label %78, !dbg !60

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

82:                                               ; preds = %3
  br i1 %.not1.i, label %85, label %83, !dbg !60

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !60
  %87 = and i32 %6, 16, !dbg !12
  %88 = icmp eq i32 %87, 0, !dbg !61
  %89 = bitcast float %.0.i to i32, !dbg !61
  %90 = and i1 %88, %9, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %45, i1 %90) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cellbj2zm3dikrz2pd4veadxedrbrgjk4kp5ybyl2u2uzdthgqxw.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused_add_clamp_mul_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_clamp_mul_sqrt_sub_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_clamp_mul_sqrt_sub_0", linkageName: "triton_poi_fused_add_clamp_mul_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 29, column: 34, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 30, column: 34, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 31, column: 33, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 38, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 35, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 42, scope: !7)
!38 = !DILocation(line: 34, column: 35, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 42, scope: !7)
!41 = !DILocation(line: 35, column: 35, scope: !7)
!42 = !DILocation(line: 35, column: 40, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 38, column: 18, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 42, column: 19, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 53, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 55, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !54, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!60 = !DILocation(line: 56, column: 27, scope: !7)
!61 = !DILocation(line: 57, column: 40, scope: !7)
!62 = !DILocation(line: 57, column: 4, scope: !7)
