; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %15, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 6, !dbg !15
  %21 = and i32 %16, 60, !dbg !16
  %22 = or disjoint i32 %20, %21, !dbg !17
  %23 = icmp slt i32 %22, 64, !dbg !18
  %24 = shl i32 %17, 6, !dbg !19
  %25 = shl i32 %18, 6, !dbg !19
  %26 = add i32 %22, %24, !dbg !20
  %27 = add i32 %22, %25, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %23) #4, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %23) #4, !dbg !22
  %34 = sext i32 %22 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %23) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %23) #4, !dbg !28
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #4, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !31
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !32
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %23) #4, !dbg !32
  %55 = fadd float %43, 0x3EE4F8B580000000, !dbg !33
  %56 = fadd float %44, 0x3EE4F8B580000000, !dbg !33
  %57 = fadd float %45, 0x3EE4F8B580000000, !dbg !33
  %58 = fadd float %46, 0x3EE4F8B580000000, !dbg !33
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %59, 0, !dbg !34
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %60, 0, !dbg !34
  br i1 %.not.i, label %66, label %61, !dbg !34

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !34

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !34

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !34
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i18 = icmp eq i32 %71, 0, !dbg !34
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i21 = icmp eq i32 %72, 0, !dbg !34
  br i1 %.not.i18, label %78, label %73, !dbg !34

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %76, label %74, !dbg !34

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %81, label %79, !dbg !34

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !34
  br label %__nv_sqrtf.exit22, !dbg !34

__nv_sqrtf.exit22:                                ; preds = %74, %76, %79, %81
  %.0.i20 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !34
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i23 = icmp eq i32 %83, 0, !dbg !34
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i26 = icmp eq i32 %84, 0, !dbg !34
  br i1 %.not.i23, label %90, label %85, !dbg !34

85:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %88, label %86, !dbg !34

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

90:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %93, label %91, !dbg !34

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !34
  br label %__nv_sqrtf.exit27, !dbg !34

__nv_sqrtf.exit27:                                ; preds = %86, %88, %91, %93
  %.0.i25 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !34
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i28 = icmp eq i32 %95, 0, !dbg !34
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i31 = icmp eq i32 %96, 0, !dbg !34
  br i1 %.not.i28, label %102, label %97, !dbg !34

97:                                               ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %100, label %98, !dbg !34

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

102:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %105, label %103, !dbg !34

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !34
  br label %__nv_sqrtf.exit32, !dbg !34

__nv_sqrtf.exit32:                                ; preds = %98, %100, %103, %105
  %.0.i30 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !22
  %112 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !22
  %114 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %116 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %118 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !32
  %130 = bitcast i32 %129 to float, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !32
  %132 = bitcast i32 %131 to float, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !32
  %134 = bitcast i32 %133 to float, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %141 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %142 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %143 = and i32 %16, 12, !dbg !12
  %144 = or disjoint i32 %11, %143, !dbg !13
  %.frozen = freeze i32 %144, !dbg !35
  %145 = sdiv i32 %.frozen, 1024, !dbg !35
  %146 = mul i32 %145, 1024, !dbg !36
  %.decomposed = sub i32 %.frozen, %146, !dbg !36
  %147 = lshr i32 %12, 2, !dbg !16
  %148 = and i32 %147, 31, !dbg !16
  %149 = or disjoint i32 %148, %20, !dbg !17
  %150 = or disjoint i32 %149, 32, !dbg !17
  %151 = icmp slt i32 %150, 64, !dbg !18
  %152 = icmp slt i32 %149, 64, !dbg !18
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %157 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !24
  %158 = insertelement <4 x i32> %157, i32 %110, i64 1, !dbg !24
  %159 = insertelement <4 x i32> %158, i32 %112, i64 2, !dbg !24
  %160 = insertelement <4 x i32> %159, i32 %114, i64 3, !dbg !24
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !24
  %162 = shufflevector <4 x float> %161, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !24
  %163 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !22
  %164 = insertelement <8 x i32> %163, i32 %109, i64 1, !dbg !22
  %165 = insertelement <8 x i32> %164, i32 %111, i64 2, !dbg !22
  %166 = insertelement <8 x i32> %165, i32 %113, i64 3, !dbg !22
  %167 = insertelement <8 x i32> %166, i32 %115, i64 4, !dbg !22
  %168 = insertelement <8 x i32> %167, i32 %116, i64 5, !dbg !22
  %169 = insertelement <8 x i32> %168, i32 %117, i64 6, !dbg !22
  %170 = insertelement <8 x i32> %169, i32 %118, i64 7, !dbg !22
  %171 = bitcast <8 x i32> %170 to <8 x float>, !dbg !22
  %172 = fsub <8 x float> %171, %162, !dbg !38
  %173 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !30
  %174 = insertelement <4 x i32> %173, i32 %136, i64 1, !dbg !30
  %175 = insertelement <4 x i32> %174, i32 %137, i64 2, !dbg !30
  %176 = insertelement <4 x i32> %175, i32 %138, i64 3, !dbg !30
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !30
  %178 = shufflevector <4 x float> %177, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %179 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !28
  %180 = insertelement <4 x i32> %179, i32 %140, i64 1, !dbg !28
  %181 = insertelement <4 x i32> %180, i32 %141, i64 2, !dbg !28
  %182 = insertelement <4 x i32> %181, i32 %142, i64 3, !dbg !28
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !28
  %184 = shufflevector <4 x float> %183, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %185 = insertelement <8 x float> poison, float %156, i64 0, !dbg !39
  %186 = insertelement <8 x float> %185, float %155, i64 1, !dbg !39
  %187 = insertelement <8 x float> %186, float %154, i64 2, !dbg !39
  %188 = insertelement <8 x float> %187, float %153, i64 3, !dbg !39
  %189 = shufflevector <8 x float> %188, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %190 = fmul <8 x float> %172, %189, !dbg !39
  %191 = fmul <8 x float> %190, %184, !dbg !40
  %192 = fadd <8 x float> %191, %178, !dbg !41
  %193 = fcmp ogt <8 x float> %192, zeroinitializer, !dbg !42
  %194 = extractelement <8 x float> %192, i64 7, !dbg !43
  %195 = fmul float %194, 0x3FB99999A0000000, !dbg !44
  %196 = extractelement <8 x float> %192, i64 6, !dbg !43
  %197 = fmul float %196, 0x3FB99999A0000000, !dbg !44
  %198 = extractelement <8 x float> %192, i64 5, !dbg !43
  %199 = fmul float %198, 0x3FB99999A0000000, !dbg !44
  %200 = extractelement <8 x float> %192, i64 4, !dbg !43
  %201 = fmul float %200, 0x3FB99999A0000000, !dbg !44
  %202 = extractelement <8 x float> %192, i64 3, !dbg !43
  %203 = fmul float %202, 0x3FB99999A0000000, !dbg !44
  %204 = extractelement <8 x float> %192, i64 2, !dbg !43
  %205 = fmul float %204, 0x3FB99999A0000000, !dbg !44
  %206 = extractelement <8 x float> %192, i64 1, !dbg !43
  %207 = fmul float %206, 0x3FB99999A0000000, !dbg !44
  %208 = extractelement <8 x float> %192, i64 0, !dbg !43
  %209 = fmul float %208, 0x3FB99999A0000000, !dbg !44
  %210 = extractelement <8 x i1> %193, i64 7, !dbg !43
  %211 = select i1 %210, float %194, float %195, !dbg !43
  %212 = extractelement <8 x i1> %193, i64 6, !dbg !43
  %213 = select i1 %212, float %196, float %197, !dbg !43
  %214 = extractelement <8 x i1> %193, i64 5, !dbg !43
  %215 = select i1 %214, float %198, float %199, !dbg !43
  %216 = extractelement <8 x i1> %193, i64 4, !dbg !43
  %217 = select i1 %216, float %200, float %201, !dbg !43
  %218 = extractelement <8 x i1> %193, i64 3, !dbg !43
  %219 = select i1 %218, float %202, float %203, !dbg !43
  %220 = extractelement <8 x i1> %193, i64 2, !dbg !43
  %221 = select i1 %220, float %204, float %205, !dbg !43
  %222 = extractelement <8 x i1> %193, i64 1, !dbg !43
  %223 = select i1 %222, float %206, float %207, !dbg !43
  %224 = extractelement <8 x i1> %193, i64 0, !dbg !43
  %225 = select i1 %224, float %208, float %209, !dbg !43
  %226 = fadd float %211, %134, !dbg !45
  %227 = fadd float %213, %132, !dbg !45
  %228 = fadd float %215, %130, !dbg !45
  %229 = fadd float %217, %128, !dbg !45
  %230 = fadd float %219, %126, !dbg !45
  %231 = fadd float %221, %124, !dbg !45
  %232 = fadd float %223, %122, !dbg !45
  %233 = fadd float %225, %120, !dbg !45
  %234 = shl i32 %149, 10, !dbg !46
  %235 = shl i32 %150, 10, !dbg !46
  %236 = shl i32 %145, 16, !dbg !47
  %237 = add i32 %236, %.decomposed, !dbg !48
  %238 = add i32 %237, %234, !dbg !49
  %239 = add i32 %237, %235, !dbg !49
  %240 = sext i32 %238 to i64, !dbg !50
  %241 = getelementptr float, ptr addrspace(1) %6, i64 %240, !dbg !50
  %242 = sext i32 %239 to i64, !dbg !50
  %243 = getelementptr float, ptr addrspace(1) %6, i64 %242, !dbg !50
  %244 = shl i32 %12, 6, !dbg !51
  %245 = and i32 %244, 960, !dbg !51
  %246 = or disjoint i32 %245, %14, !dbg !51
  %247 = and i32 %16, 508, !dbg !51
  %248 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %245, !dbg !51
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !51
  %250 = bitcast float %226 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !51
  %251 = or disjoint i32 %246, 16, !dbg !51
  %252 = lshr i32 %251, 2, !dbg !51
  %253 = and i32 %252, 244, !dbg !51
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !51
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %251, !dbg !51
  %256 = bitcast float %227 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !51
  %257 = or disjoint i32 %246, 32, !dbg !51
  %258 = lshr i32 %257, 2, !dbg !51
  %259 = and i32 %258, 248, !dbg !51
  %260 = getelementptr float, ptr addrspace(3) @global_smem, i32 %259, !dbg !51
  %261 = getelementptr float, ptr addrspace(3) %260, i32 %257, !dbg !51
  %262 = bitcast float %228 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !51
  %263 = or disjoint i32 %246, 48, !dbg !51
  %264 = lshr i32 %263, 2, !dbg !51
  %265 = and i32 %264, 252, !dbg !51
  %266 = getelementptr float, ptr addrspace(3) @global_smem, i32 %265, !dbg !51
  %267 = getelementptr float, ptr addrspace(3) %266, i32 %263, !dbg !51
  %268 = bitcast float %229 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !51
  %269 = or disjoint i32 %246, 8, !dbg !51
  %270 = getelementptr float, ptr addrspace(3) %248, i32 %269, !dbg !51
  %271 = bitcast float %230 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !51
  %272 = or disjoint i32 %246, 24, !dbg !51
  %273 = lshr i32 %272, 2, !dbg !51
  %274 = and i32 %273, 244, !dbg !51
  %275 = getelementptr float, ptr addrspace(3) @global_smem, i32 %274, !dbg !51
  %276 = getelementptr float, ptr addrspace(3) %275, i32 %272, !dbg !51
  %277 = bitcast float %231 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !51
  %278 = or disjoint i32 %246, 40, !dbg !51
  %279 = lshr i32 %278, 2, !dbg !51
  %280 = and i32 %279, 248, !dbg !51
  %281 = getelementptr float, ptr addrspace(3) @global_smem, i32 %280, !dbg !51
  %282 = getelementptr float, ptr addrspace(3) %281, i32 %278, !dbg !51
  %283 = bitcast float %232 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #4, !dbg !51
  %284 = or disjoint i32 %246, 56, !dbg !51
  %285 = lshr i32 %284, 2, !dbg !51
  %286 = and i32 %285, 252, !dbg !51
  %287 = getelementptr float, ptr addrspace(3) @global_smem, i32 %286, !dbg !51
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !51
  %289 = bitcast float %233 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %290 = and i32 %12, 124, !dbg !51
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !51
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %247, !dbg !51
  %293 = or disjoint i32 %247, 512, !dbg !51
  %294 = lshr exact i32 %293, 2, !dbg !51
  %295 = and i32 %294, 252, !dbg !51
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !51
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %293, !dbg !51
  %298 = load <4 x i32>, ptr addrspace(3) %297, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %292, align 16, !dbg !51
  %299 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 4, !dbg !51
  %.extract11 = load i32, ptr addrspace(3) %299, align 4, !dbg !51
  %300 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 8, !dbg !51
  %.extract12 = load i32, ptr addrspace(3) %300, align 8, !dbg !51
  %301 = getelementptr inbounds i8, ptr addrspace(3) %292, i32 12, !dbg !51
  %.extract13 = load i32, ptr addrspace(3) %301, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %241, i1 %152) #4, !dbg !51
  %.extract14 = extractelement <4 x i32> %298, i64 0, !dbg !51
  %.extract15 = extractelement <4 x i32> %298, i64 1, !dbg !51
  %.extract16 = extractelement <4 x i32> %298, i64 2, !dbg !51
  %.extract17 = extractelement <4 x i32> %298, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %243, i1 %151) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq7wge5z5oqhdnws2bqcykzpth2pf2tauikosgh72fhuvnje2g73.py", directory: "inductor_cache/q7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 46, scope: !7)
!48 = !DILocation(line: 55, column: 30, scope: !7)
!49 = !DILocation(line: 55, column: 40, scope: !7)
!50 = !DILocation(line: 55, column: 25, scope: !7)
!51 = !DILocation(line: 55, column: 58, scope: !7)
!52 = !DILocation(line: 55, column: 4, scope: !7)
