; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 504, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = icmp slt i32 %17, 512, !dbg !14
  %21 = icmp slt i32 %19, 512, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 1, !dbg !16
  %24 = lshr i32 %12, 6, !dbg !17
  %.lobit = and i32 %24, 1, !dbg !17
  %25 = or disjoint i32 %23, %.lobit, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %26 = sdiv i32 %.frozen, 128, !dbg !19
  %27 = mul i32 %26, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = srem i32 %18, 128, !dbg !20
  %29 = srem i32 %19, 128, !dbg !20
  %30 = shl i32 %25, 7, !dbg !21
  %31 = shl i32 %26, 19, !dbg !22
  %32 = add i32 %31, %30, !dbg !23
  %33 = add i32 %32, %.decomposed, !dbg !24
  %34 = add i32 %32, %28, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #4, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #4, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = and i32 %13, 1016, !dbg !26
  %50 = lshr i32 %13, 6, !dbg !26
  %51 = and i32 %50, 8, !dbg !26
  %52 = add nuw nsw i32 %51, %49, !dbg !26
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %53, i32 %40, i32 %41, i32 %42, i32 %43, i1 true) #4, !dbg !26
  %54 = getelementptr inbounds i8, ptr addrspace(3) %53, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %54, i32 %45, i32 %46, i32 %47, i32 %48, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !26
  %56 = load <4 x float>, ptr addrspace(3) %55, align 16, !dbg !26
  %57 = add nuw nsw i32 %16, 520, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %57, !dbg !26
  %59 = load <4 x float>, ptr addrspace(3) %58, align 16, !dbg !26
  %60 = sext i32 %29 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %21) #4, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %21) #4, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = bitcast i32 %66 to float, !dbg !30
  %71 = bitcast i32 %67 to float, !dbg !30
  %72 = bitcast i32 %68 to float, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %21) #4, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !33
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %21) #4, !dbg !34
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !35
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !35
  %80 = fadd float %72, 0x3EE4F8B580000000, !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %81, 0, !dbg !36
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %82, 0, !dbg !36
  br i1 %.not.i, label %88, label %83, !dbg !36

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !36

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

88:                                               ; preds = %9
  br i1 %.not1.i, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %93, 0, !dbg !36
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %94, 0, !dbg !36
  br i1 %.not.i13, label %100, label %95, !dbg !36

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %98, label %96, !dbg !36

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %96, %98, %101, %103
  %.0.i15 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !36
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %105, 0, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i21 = icmp eq i32 %106, 0, !dbg !36
  br i1 %.not.i18, label %112, label %107, !dbg !36

107:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %110, label %108, !dbg !36

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

112:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %115, label %113, !dbg !36

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

__nv_sqrtf.exit22:                                ; preds = %108, %110, %113, %115
  %.0.i20 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !36
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i23 = icmp eq i32 %117, 0, !dbg !36
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i26 = icmp eq i32 %118, 0, !dbg !36
  br i1 %.not.i23, label %124, label %119, !dbg !36

119:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %122, label %120, !dbg !36

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

124:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %127, label %125, !dbg !36

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

__nv_sqrtf.exit27:                                ; preds = %120, %122, %125, %127
  %.0.i25 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %133 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !34
  %137 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %141 = and i32 %12, 127, !dbg !12
  %142 = or disjoint i32 %141, %11, !dbg !13
  %143 = or disjoint i32 %142, 384, !dbg !13
  %144 = icmp slt i32 %143, 512, !dbg !14
  %145 = or disjoint i32 %142, 256, !dbg !13
  %146 = icmp slt i32 %145, 512, !dbg !14
  %147 = or disjoint i32 %142, 128, !dbg !13
  %148 = icmp slt i32 %147, 512, !dbg !14
  %149 = icmp slt i32 %142, 512, !dbg !14
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %154 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !28
  %155 = insertelement <4 x i32> %154, i32 %130, i64 1, !dbg !28
  %156 = insertelement <4 x i32> %155, i32 %131, i64 2, !dbg !28
  %157 = insertelement <4 x i32> %156, i32 %132, i64 3, !dbg !28
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !28
  %159 = shufflevector <4 x float> %158, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %160 = shufflevector <4 x float> %59, <4 x float> %56, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !38
  %161 = fsub <8 x float> %160, %159, !dbg !38
  %162 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !34
  %163 = insertelement <4 x i32> %162, i32 %134, i64 1, !dbg !34
  %164 = insertelement <4 x i32> %163, i32 %135, i64 2, !dbg !34
  %165 = insertelement <4 x i32> %164, i32 %136, i64 3, !dbg !34
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !34
  %167 = shufflevector <4 x float> %166, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %168 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !32
  %169 = insertelement <4 x i32> %168, i32 %138, i64 1, !dbg !32
  %170 = insertelement <4 x i32> %169, i32 %139, i64 2, !dbg !32
  %171 = insertelement <4 x i32> %170, i32 %140, i64 3, !dbg !32
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !32
  %173 = shufflevector <4 x float> %172, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %174 = insertelement <8 x float> poison, float %153, i64 0, !dbg !39
  %175 = insertelement <8 x float> %174, float %152, i64 1, !dbg !39
  %176 = insertelement <8 x float> %175, float %151, i64 2, !dbg !39
  %177 = insertelement <8 x float> %176, float %150, i64 3, !dbg !39
  %178 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %179 = fmul <8 x float> %161, %178, !dbg !39
  %180 = fmul <8 x float> %179, %173, !dbg !40
  %181 = fadd <8 x float> %180, %167, !dbg !41
  %182 = fcmp olt <8 x float> %181, zeroinitializer, !dbg !42
  %183 = select <8 x i1> %182, <8 x float> zeroinitializer, <8 x float> %181, !dbg !46
  %184 = fcmp ole <8 x float> %183, zeroinitializer, !dbg !47
  %185 = shl i32 %142, 12, !dbg !48
  %186 = shl i32 %147, 12, !dbg !48
  %187 = shl i32 %145, 12, !dbg !48
  %188 = shl i32 %143, 12, !dbg !48
  %189 = add i32 %185, %23, !dbg !49
  %190 = add i32 %186, %23, !dbg !49
  %191 = add i32 %187, %23, !dbg !49
  %192 = add i32 %188, %23, !dbg !49
  %193 = sext i32 %189 to i64, !dbg !50
  %194 = getelementptr float, ptr addrspace(1) %5, i64 %193, !dbg !50
  %195 = sext i32 %190 to i64, !dbg !50
  %196 = getelementptr float, ptr addrspace(1) %5, i64 %195, !dbg !50
  %197 = sext i32 %191 to i64, !dbg !50
  %198 = getelementptr float, ptr addrspace(1) %5, i64 %197, !dbg !50
  %199 = sext i32 %192 to i64, !dbg !50
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %201 = shl i32 %12, 1, !dbg !51
  %202 = and i32 %201, 254, !dbg !51
  %203 = lshr exact i32 %49, 1, !dbg !51
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !51
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %49, !dbg !51
  %206 = extractelement <8 x float> %183, i64 7, !dbg !51
  %207 = bitcast float %206 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %207, i1 true) #4, !dbg !51
  %208 = or disjoint i32 %49, 2, !dbg !51
  %209 = lshr exact i32 %208, 1, !dbg !51
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !51
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !51
  %212 = extractelement <8 x float> %183, i64 6, !dbg !51
  %213 = bitcast float %212 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %213, i1 true) #4, !dbg !51
  %214 = or disjoint i32 %49, 4, !dbg !51
  %215 = lshr exact i32 %214, 1, !dbg !51
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !51
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !51
  %218 = extractelement <8 x float> %183, i64 5, !dbg !51
  %219 = bitcast float %218 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %219, i1 true) #4, !dbg !51
  %220 = or disjoint i32 %49, 6, !dbg !51
  %221 = lshr exact i32 %220, 1, !dbg !51
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !51
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !51
  %224 = extractelement <8 x float> %183, i64 4, !dbg !51
  %225 = bitcast float %224 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %225, i1 true) #4, !dbg !51
  %226 = or disjoint i32 %49, 1, !dbg !51
  %227 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %226, !dbg !51
  %228 = extractelement <8 x float> %183, i64 3, !dbg !51
  %229 = bitcast float %228 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %229, i1 true) #4, !dbg !51
  %230 = or disjoint i32 %49, 3, !dbg !51
  %231 = lshr i32 %230, 1, !dbg !51
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !51
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !51
  %234 = extractelement <8 x float> %183, i64 2, !dbg !51
  %235 = bitcast float %234 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %235, i1 true) #4, !dbg !51
  %236 = or disjoint i32 %49, 5, !dbg !51
  %237 = lshr i32 %236, 1, !dbg !51
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !51
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !51
  %240 = extractelement <8 x float> %183, i64 1, !dbg !51
  %241 = bitcast float %240 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %241, i1 true) #4, !dbg !51
  %242 = or disjoint i32 %49, 7, !dbg !51
  %243 = lshr i32 %242, 1, !dbg !51
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %243, !dbg !51
  %245 = getelementptr inbounds float, ptr addrspace(3) %244, i32 %242, !dbg !51
  %246 = extractelement <8 x float> %183, i64 0, !dbg !51
  %247 = bitcast float %246 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %247, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %248 = lshr exact i32 %202, 1, !dbg !51
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !51
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %202, !dbg !51
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !51
  %252 = or disjoint i32 %202, 1, !dbg !51
  %253 = getelementptr float, ptr addrspace(3) %249, i32 %252, !dbg !51
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !51
  %255 = or disjoint i32 %202, 256, !dbg !51
  %256 = lshr exact i32 %255, 1, !dbg !51
  %257 = getelementptr float, ptr addrspace(3) @global_smem, i32 %256, !dbg !51
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %255, !dbg !51
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !51
  %260 = or disjoint i32 %202, 257, !dbg !51
  %261 = lshr i32 %260, 1, !dbg !51
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !51
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !51
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !51
  %265 = or disjoint i32 %202, 512, !dbg !51
  %266 = lshr exact i32 %265, 1, !dbg !51
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !51
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !51
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !51
  %270 = or disjoint i32 %202, 513, !dbg !51
  %271 = lshr i32 %270, 1, !dbg !51
  %272 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !51
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !51
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !51
  %275 = or disjoint i32 %202, 768, !dbg !51
  %276 = lshr exact i32 %275, 1, !dbg !51
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !51
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %275, !dbg !51
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !51
  %280 = or disjoint i32 %202, 769, !dbg !51
  %281 = lshr i32 %280, 1, !dbg !51
  %282 = getelementptr float, ptr addrspace(3) @global_smem, i32 %281, !dbg !51
  %283 = getelementptr float, ptr addrspace(3) %282, i32 %280, !dbg !51
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %251, i32 %254, ptr addrspace(1) %194, i1 %149) #4, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %259, i32 %264, ptr addrspace(1) %196, i1 %148) #4, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %269, i32 %274, ptr addrspace(1) %198, i1 %146) #4, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %279, i32 %284, ptr addrspace(1) %200, i1 %144) #4, !dbg !51
  %285 = getelementptr i1, ptr addrspace(1) %6, i64 %35, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %286 = extractelement <8 x i1> %184, i64 7, !dbg !53
  %287 = zext i1 %286 to i8, !dbg !53
  %288 = extractelement <8 x i1> %184, i64 6, !dbg !53
  %289 = zext i1 %288 to i8, !dbg !53
  %290 = extractelement <8 x i1> %184, i64 5, !dbg !53
  %291 = zext i1 %290 to i8, !dbg !53
  %292 = extractelement <8 x i1> %184, i64 4, !dbg !53
  %293 = zext i1 %292 to i8, !dbg !53
  %294 = extractelement <8 x i1> %184, i64 3, !dbg !53
  %295 = zext i1 %294 to i8, !dbg !53
  %296 = extractelement <8 x i1> %184, i64 2, !dbg !53
  %297 = zext i1 %296 to i8, !dbg !53
  %298 = extractelement <8 x i1> %184, i64 1, !dbg !53
  %299 = zext i1 %298 to i8, !dbg !53
  %300 = extractelement <8 x i1> %184, i64 0, !dbg !53
  %301 = zext i1 %300 to i8, !dbg !53
  %302 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %302, i8 %287, i8 %289, i8 %291, i8 %293, i1 true) #4, !dbg !53
  %303 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %57, !dbg !53
  tail call void asm sideeffect "@$5 st.shared.v4.b8 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,h,h,h,h,b"(ptr addrspace(3) %303, i8 %295, i8 %297, i8 %299, i8 %301, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %304 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %52, !dbg !53
  %305 = load <2 x i32>, ptr addrspace(3) %304, align 8, !dbg !53
  %306 = bitcast <2 x i32> %305 to <64 x i1>, !dbg !53
  %307 = extractelement <64 x i1> %306, i64 24, !dbg !53
  %308 = extractelement <64 x i1> %306, i64 56, !dbg !53
  %309 = bitcast <2 x i32> %305 to <8 x i8>, !dbg !53
  %310 = extractelement <8 x i8> %309, i64 0, !dbg !53
  %311 = and i8 %310, 1, !dbg !53
  %312 = shufflevector <8 x i8> %309, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !53
  %313 = and <2 x i8> %312, splat (i8 1), !dbg !53
  %314 = zext i1 %307 to i8, !dbg !53
  %315 = extractelement <8 x i8> %309, i64 4, !dbg !53
  %316 = and i8 %315, 1, !dbg !53
  %317 = shufflevector <8 x i8> %309, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !53
  %318 = and <2 x i8> %317, splat (i8 1), !dbg !53
  %319 = zext i1 %308 to i8, !dbg !53
  %320 = insertelement <4 x i8> poison, i8 %311, i64 0, !dbg !53
  %321 = shufflevector <2 x i8> %313, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %322 = shufflevector <4 x i8> %320, <4 x i8> %321, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %323 = insertelement <4 x i8> %322, i8 %314, i64 3, !dbg !53
  %324 = bitcast <4 x i8> %323 to i32, !dbg !53
  %325 = insertelement <4 x i8> poison, i8 %316, i64 0, !dbg !53
  %326 = shufflevector <2 x i8> %318, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %327 = shufflevector <4 x i8> %325, <4 x i8> %326, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %328 = insertelement <4 x i8> %327, i8 %319, i64 3, !dbg !53
  %329 = bitcast <4 x i8> %328 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %324, i32 %329, ptr addrspace(1) %285, i1 %20) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crok7bpymkf7mdejpl4kfrlwkyvrj6qr4fxnzeldeqy5232r2d3g.py", directory: "inductor_cache/ro")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 47, scope: !7)
!52 = !DILocation(line: 53, column: 25, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
