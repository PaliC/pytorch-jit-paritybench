; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 4096, !dbg !14
  %.frozen2 = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen2, 4096, !dbg !14
  %15 = srem i32 %13, 128, !dbg !15
  %16 = srem i32 %14, 128, !dbg !15
  %17 = mul i32 %13, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = mul i32 %14, 4096, !dbg !16
  %.decomposed3 = sub i32 %.frozen2, %18, !dbg !16
  %.frozen4 = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen4, 524288, !dbg !17
  %.frozen5 = freeze i32 %12, !dbg !17
  %20 = sdiv i32 %.frozen5, 524288, !dbg !17
  %21 = icmp slt i32 %15, 64, !dbg !18
  %22 = icmp slt i32 %16, 64, !dbg !18
  %23 = mul i32 %19, 524288, !dbg !19
  %srem.decomposed = sub i32 %.frozen4, %23, !dbg !19
  %24 = mul i32 %20, 524288, !dbg !19
  %srem1.decomposed = sub i32 %.frozen5, %24, !dbg !19
  %25 = shl nsw i32 %19, 18, !dbg !20
  %26 = shl nsw i32 %20, 18, !dbg !20
  %27 = add nsw i32 %25, %srem.decomposed, !dbg !21
  %28 = add nsw i32 %26, %srem1.decomposed, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = fsub float 0.000000e+00, %58, !dbg !26
  %72 = fsub float 0.000000e+00, %59, !dbg !26
  %73 = fsub float 0.000000e+00, %60, !dbg !26
  %74 = fsub float 0.000000e+00, %61, !dbg !26
  %75 = fsub float 0.000000e+00, %67, !dbg !26
  %76 = fsub float 0.000000e+00, %68, !dbg !26
  %77 = fsub float 0.000000e+00, %69, !dbg !26
  %78 = fsub float 0.000000e+00, %70, !dbg !26
  %79 = fmul float %71, 0x3FF7154760000000, !dbg !30
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !30
  %81 = fmul float %72, 0x3FF7154760000000, !dbg !30
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !30
  %83 = fmul float %73, 0x3FF7154760000000, !dbg !30
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !30
  %85 = fmul float %74, 0x3FF7154760000000, !dbg !30
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !30
  %87 = fmul float %75, 0x3FF7154760000000, !dbg !30
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !30
  %89 = fmul float %76, 0x3FF7154760000000, !dbg !30
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !30
  %91 = fmul float %77, 0x3FF7154760000000, !dbg !30
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !30
  %93 = fmul float %78, 0x3FF7154760000000, !dbg !30
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !30
  %95 = fadd float %80, 1.000000e+00, !dbg !31
  %96 = fadd float %82, 1.000000e+00, !dbg !31
  %97 = fadd float %84, 1.000000e+00, !dbg !31
  %98 = fadd float %86, 1.000000e+00, !dbg !31
  %99 = fadd float %88, 1.000000e+00, !dbg !31
  %100 = fadd float %90, 1.000000e+00, !dbg !31
  %101 = fadd float %92, 1.000000e+00, !dbg !31
  %102 = fadd float %94, 1.000000e+00, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !32
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #1, !dbg !32
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %97) #1, !dbg !32
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %98) #1, !dbg !32
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %99) #1, !dbg !32
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %100) #1, !dbg !32
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #1, !dbg !32
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #1, !dbg !32
  %111 = fmul float %103, %58, !dbg !33
  %112 = fmul float %104, %59, !dbg !33
  %113 = fmul float %105, %60, !dbg !33
  %114 = fmul float %106, %61, !dbg !33
  %115 = fmul float %107, %67, !dbg !33
  %116 = fmul float %108, %68, !dbg !33
  %117 = fmul float %109, %69, !dbg !33
  %118 = fmul float %110, %70, !dbg !33
  %119 = fadd float %111, %38, !dbg !34
  %120 = fadd float %112, %39, !dbg !34
  %121 = fadd float %113, %40, !dbg !34
  %122 = fadd float %114, %41, !dbg !34
  %123 = fadd float %115, %47, !dbg !34
  %124 = fadd float %116, %48, !dbg !34
  %125 = fadd float %117, %49, !dbg !34
  %126 = fadd float %118, %50, !dbg !34
  %127 = icmp sgt i32 %15, 63, !dbg !35
  %128 = icmp sgt i32 %16, 63, !dbg !35
  %129 = shl nsw i32 %15, 12, !dbg !36
  %130 = shl nsw i32 %16, 12, !dbg !36
  %131 = add nsw i32 %.decomposed, -262144, !dbg !36
  %132 = add nsw i32 %131, %25, !dbg !37
  %133 = add nsw i32 %132, %129, !dbg !38
  %134 = add nsw i32 %.decomposed3, -262144, !dbg !36
  %135 = add nsw i32 %134, %26, !dbg !37
  %136 = add nsw i32 %135, %130, !dbg !38
  %137 = sext i32 %133 to i64, !dbg !39
  %138 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !39
  %139 = sext i32 %136 to i64, !dbg !39
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !39
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #1, !dbg !40
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !40
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !40
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !40
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !40
  %146 = bitcast i32 %142 to float, !dbg !40
  %147 = bitcast i32 %143 to float, !dbg !40
  %148 = bitcast i32 %144 to float, !dbg !40
  %149 = bitcast i32 %145 to float, !dbg !40
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !40
  %155 = bitcast i32 %151 to float, !dbg !40
  %156 = bitcast i32 %152 to float, !dbg !40
  %157 = bitcast i32 %153 to float, !dbg !40
  %158 = bitcast i32 %154 to float, !dbg !40
  %159 = fsub float 0.000000e+00, %146, !dbg !41
  %160 = fsub float 0.000000e+00, %147, !dbg !41
  %161 = fsub float 0.000000e+00, %148, !dbg !41
  %162 = fsub float 0.000000e+00, %149, !dbg !41
  %163 = fsub float 0.000000e+00, %155, !dbg !41
  %164 = fsub float 0.000000e+00, %156, !dbg !41
  %165 = fsub float 0.000000e+00, %157, !dbg !41
  %166 = fsub float 0.000000e+00, %158, !dbg !41
  %167 = fmul float %159, 0x3FF7154760000000, !dbg !43
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #1, !dbg !43
  %169 = fmul float %160, 0x3FF7154760000000, !dbg !43
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %169) #1, !dbg !43
  %171 = fmul float %161, 0x3FF7154760000000, !dbg !43
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %171) #1, !dbg !43
  %173 = fmul float %162, 0x3FF7154760000000, !dbg !43
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %173) #1, !dbg !43
  %175 = fmul float %163, 0x3FF7154760000000, !dbg !43
  %176 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %175) #1, !dbg !43
  %177 = fmul float %164, 0x3FF7154760000000, !dbg !43
  %178 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %177) #1, !dbg !43
  %179 = fmul float %165, 0x3FF7154760000000, !dbg !43
  %180 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %179) #1, !dbg !43
  %181 = fmul float %166, 0x3FF7154760000000, !dbg !43
  %182 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %181) #1, !dbg !43
  %183 = fadd float %168, 1.000000e+00, !dbg !44
  %184 = fadd float %170, 1.000000e+00, !dbg !44
  %185 = fadd float %172, 1.000000e+00, !dbg !44
  %186 = fadd float %174, 1.000000e+00, !dbg !44
  %187 = fadd float %176, 1.000000e+00, !dbg !44
  %188 = fadd float %178, 1.000000e+00, !dbg !44
  %189 = fadd float %180, 1.000000e+00, !dbg !44
  %190 = fadd float %182, 1.000000e+00, !dbg !44
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %183) #1, !dbg !45
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %184) #1, !dbg !45
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %185) #1, !dbg !45
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %186) #1, !dbg !45
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %187) #1, !dbg !45
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %188) #1, !dbg !45
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %189) #1, !dbg !45
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %190) #1, !dbg !45
  %199 = fmul float %191, %146, !dbg !46
  %200 = fmul float %192, %147, !dbg !46
  %201 = fmul float %193, %148, !dbg !46
  %202 = fmul float %194, %149, !dbg !46
  %203 = fmul float %195, %155, !dbg !46
  %204 = fmul float %196, %156, !dbg !46
  %205 = fmul float %197, %157, !dbg !46
  %206 = fmul float %198, %158, !dbg !46
  %207 = select i1 %21, float %119, float %199, !dbg !47
  %208 = select i1 %21, float %120, float %200, !dbg !47
  %209 = select i1 %21, float %121, float %201, !dbg !47
  %210 = select i1 %21, float %122, float %202, !dbg !47
  %211 = select i1 %22, float %123, float %203, !dbg !47
  %212 = select i1 %22, float %124, float %204, !dbg !47
  %213 = select i1 %22, float %125, float %205, !dbg !47
  %214 = select i1 %22, float %126, float %206, !dbg !47
  %215 = sext i32 %11 to i64, !dbg !48
  %216 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !48
  %217 = sext i32 %12 to i64, !dbg !48
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !48
  %219 = bitcast float %207 to i32, !dbg !49
  %220 = bitcast float %208 to i32, !dbg !49
  %221 = bitcast float %209 to i32, !dbg !49
  %222 = bitcast float %210 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %220, i32 %221, i32 %222, ptr addrspace(1) %216, i1 true) #1, !dbg !49
  %223 = bitcast float %211 to i32, !dbg !49
  %224 = bitcast float %212 to i32, !dbg !49
  %225 = bitcast float %213 to i32, !dbg !49
  %226 = bitcast float %214 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %218, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn4mtfc6ufiv26fpzuwv6k7wfqny2bo4jyljxe7ks5wv3j5pvnlc.py", directory: "inductor_cache/n4")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 54, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 59, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 59, scope: !7)
!26 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 35, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 42, scope: !7)
!37 = !DILocation(line: 43, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 56, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 68, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !42)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
