; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_add_div_mul_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 64, !dbg !14
  %14 = srem i32 %11, 4, !dbg !15
  %15 = srem i32 %12, 4, !dbg !15
  %16 = sdiv i32 %11, 16, !dbg !16
  %17 = shl i32 %11, 2, !dbg !17
  %18 = shl i32 %12, 2, !dbg !17
  %19 = sext i32 %17 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %13) #1, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !19
  %25 = shl nsw i32 %14, 2, !dbg !20
  %26 = shl nsw i32 %15, 2, !dbg !20
  %27 = shl nsw i32 %16, 4, !dbg !21
  %28 = add i32 %25, %27, !dbg !22
  %29 = add i32 %27, %26, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %13) #1, !dbg !24
  %36 = or disjoint i32 %17, 1, !dbg !25
  %37 = or disjoint i32 %18, 1, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %13) #1, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %13) #1, !dbg !27
  %44 = or disjoint i32 %25, 1, !dbg !28
  %45 = or disjoint i32 %26, 1, !dbg !28
  %46 = add i32 %44, %27, !dbg !29
  %47 = add i32 %45, %27, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %13) #1, !dbg !31
  %54 = or disjoint i32 %17, 2, !dbg !32
  %55 = or disjoint i32 %18, 2, !dbg !32
  %56 = sext i32 %54 to i64, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !33
  %58 = sext i32 %55 to i64, !dbg !33
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %13) #1, !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %13) #1, !dbg !34
  %63 = bitcast i32 %62 to float, !dbg !34
  %64 = or disjoint i32 %25, 2, !dbg !35
  %65 = or disjoint i32 %26, 2, !dbg !35
  %66 = add i32 %64, %27, !dbg !36
  %67 = add i32 %65, %27, !dbg !36
  %68 = sext i32 %66 to i64, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !37
  %70 = sext i32 %67 to i64, !dbg !37
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %13) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %13) #1, !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = or disjoint i32 %17, 3, !dbg !39
  %77 = or disjoint i32 %18, 3, !dbg !39
  %78 = sext i32 %76 to i64, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !40
  %80 = sext i32 %77 to i64, !dbg !40
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !40
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %13) #1, !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %13) #1, !dbg !41
  %85 = bitcast i32 %84 to float, !dbg !41
  %86 = or disjoint i32 %25, 3, !dbg !42
  %87 = or disjoint i32 %26, 3, !dbg !42
  %88 = add i32 %86, %27, !dbg !43
  %89 = add i32 %87, %27, !dbg !43
  %90 = sext i32 %88 to i64, !dbg !44
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !44
  %92 = sext i32 %89 to i64, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %13) #1, !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %13) #1, !dbg !45
  %97 = bitcast i32 %96 to float, !dbg !45
  %98 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %99 = insertelement <2 x i32> %98, i32 %42, i64 1, !dbg !19
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !19
  %101 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %102 = insertelement <2 x i32> %101, i32 %52, i64 1, !dbg !24
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !24
  %104 = fmul <2 x float> %103, splat (float 1.000000e+09), !dbg !46
  %105 = fsub <2 x float> %100, %104, !dbg !47
  %106 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %107 = insertelement <2 x i32> %106, i32 %43, i64 1, !dbg !19
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !19
  %109 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %110 = insertelement <2 x i32> %109, i32 %53, i64 1, !dbg !24
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !24
  %112 = fmul <2 x float> %111, splat (float 1.000000e+09), !dbg !46
  %113 = fsub <2 x float> %108, %112, !dbg !47
  %114 = extractelement <2 x float> %105, i64 0, !dbg !48
  %115 = extractelement <2 x float> %105, i64 1, !dbg !48
  %116 = fcmp ogt float %114, %115, !dbg !48
  %117 = extractelement <2 x float> %113, i64 0, !dbg !48
  %118 = extractelement <2 x float> %113, i64 1, !dbg !48
  %119 = fcmp ogt float %117, %118, !dbg !48
  %120 = fcmp uno float %114, 0.000000e+00, !dbg !52
  %121 = fcmp uno float %117, 0.000000e+00, !dbg !52
  %122 = or i1 %120, %116, !dbg !53
  %123 = or i1 %121, %119, !dbg !53
  %124 = select i1 %122, float %114, float %115, !dbg !54
  %125 = select i1 %123, float %117, float %118, !dbg !54
  %126 = fmul float %73, 1.000000e+09, !dbg !55
  %127 = fmul float %75, 1.000000e+09, !dbg !55
  %128 = fsub float %61, %126, !dbg !56
  %129 = fsub float %63, %127, !dbg !56
  %130 = fcmp ogt float %124, %128, !dbg !57
  %131 = fcmp ogt float %125, %129, !dbg !57
  %132 = fcmp uno float %124, 0.000000e+00, !dbg !59
  %133 = fcmp uno float %125, 0.000000e+00, !dbg !59
  %134 = or i1 %132, %130, !dbg !60
  %135 = or i1 %133, %131, !dbg !60
  %136 = select i1 %134, float %124, float %128, !dbg !61
  %137 = select i1 %135, float %125, float %129, !dbg !61
  %138 = fmul float %95, 1.000000e+09, !dbg !62
  %139 = fmul float %97, 1.000000e+09, !dbg !62
  %140 = fsub float %83, %138, !dbg !63
  %141 = fsub float %85, %139, !dbg !63
  %142 = fcmp ogt float %136, %140, !dbg !64
  %143 = fcmp ogt float %137, %141, !dbg !64
  %144 = fcmp uno float %136, 0.000000e+00, !dbg !66
  %145 = fcmp uno float %137, 0.000000e+00, !dbg !66
  %146 = or i1 %144, %142, !dbg !67
  %147 = or i1 %145, %143, !dbg !67
  %148 = select i1 %146, float %136, float %140, !dbg !68
  %149 = select i1 %147, float %137, float %141, !dbg !68
  %150 = fsub float %114, %148, !dbg !69
  %151 = fsub float %117, %149, !dbg !69
  %152 = fmul float %150, 0x3FF7154760000000, !dbg !70
  %153 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %152) #1, !dbg !70
  %154 = fmul float %151, 0x3FF7154760000000, !dbg !70
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !70
  %156 = fsub float %115, %148, !dbg !71
  %157 = fsub float %118, %149, !dbg !71
  %158 = fmul float %156, 0x3FF7154760000000, !dbg !72
  %159 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %158) #1, !dbg !72
  %160 = fmul float %157, 0x3FF7154760000000, !dbg !72
  %161 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %160) #1, !dbg !72
  %162 = fadd float %153, %159, !dbg !73
  %163 = fadd float %155, %161, !dbg !73
  %164 = fsub float %128, %148, !dbg !74
  %165 = fsub float %129, %149, !dbg !74
  %166 = fmul float %164, 0x3FF7154760000000, !dbg !75
  %167 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %166) #1, !dbg !75
  %168 = fmul float %165, 0x3FF7154760000000, !dbg !75
  %169 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %168) #1, !dbg !75
  %170 = fadd float %162, %167, !dbg !76
  %171 = fadd float %163, %169, !dbg !76
  %172 = fsub float %140, %148, !dbg !77
  %173 = fsub float %141, %149, !dbg !77
  %174 = fmul float %172, 0x3FF7154760000000, !dbg !78
  %175 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %174) #1, !dbg !78
  %176 = fmul float %173, 0x3FF7154760000000, !dbg !78
  %177 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %176) #1, !dbg !78
  %178 = fadd float %170, %175, !dbg !79
  %179 = fadd float %171, %177, !dbg !79
  %180 = sext i32 %11 to i64, !dbg !80
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !80
  %182 = bitcast float %148 to i32, !dbg !81
  %183 = bitcast float %149 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %181, i1 %13) #1, !dbg !81
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %180, !dbg !82
  %185 = bitcast float %178 to i32, !dbg !83
  %186 = bitcast float %179 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %185, i32 %186, ptr addrspace(1) %184, i1 %13) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2nsy72zwdgl2i4kp73u62li67wegzwgmlksjxgdqbjydemw4ky3.py", directory: "inductor_cache/2n")
!4 = !{ptr @triton_poi_fused__softmax_add_div_mul_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_add_div_mul_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_add_div_mul_1", linkageName: "triton_poi_fused__softmax_add_div_mul_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 32, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 37, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 45, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 49, scope: !7)
!32 = !DILocation(line: 31, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 42, scope: !7)
!35 = !DILocation(line: 32, column: 35, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 50, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 42, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 42, scope: !7)
!44 = !DILocation(line: 34, column: 31, scope: !7)
!45 = !DILocation(line: 34, column: 50, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 39, column: 18, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 43, column: 41, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 45, column: 20, scope: !7)
!56 = !DILocation(line: 46, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !58)
!58 = !DILocation(line: 47, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !58)
!62 = !DILocation(line: 49, column: 20, scope: !7)
!63 = !DILocation(line: 50, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !65)
!65 = !DILocation(line: 51, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !65)
!69 = !DILocation(line: 52, column: 19, scope: !7)
!70 = !DILocation(line: 53, column: 24, scope: !7)
!71 = !DILocation(line: 54, column: 20, scope: !7)
!72 = !DILocation(line: 55, column: 24, scope: !7)
!73 = !DILocation(line: 56, column: 20, scope: !7)
!74 = !DILocation(line: 57, column: 20, scope: !7)
!75 = !DILocation(line: 58, column: 24, scope: !7)
!76 = !DILocation(line: 59, column: 20, scope: !7)
!77 = !DILocation(line: 60, column: 20, scope: !7)
!78 = !DILocation(line: 61, column: 24, scope: !7)
!79 = !DILocation(line: 62, column: 20, scope: !7)
!80 = !DILocation(line: 63, column: 25, scope: !7)
!81 = !DILocation(line: 63, column: 37, scope: !7)
!82 = !DILocation(line: 64, column: 25, scope: !7)
!83 = !DILocation(line: 64, column: 37, scope: !7)
!84 = !DILocation(line: 64, column: 4, scope: !7)
