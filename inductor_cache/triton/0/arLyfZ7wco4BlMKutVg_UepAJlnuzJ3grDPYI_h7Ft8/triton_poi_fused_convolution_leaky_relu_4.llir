; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 4, !dbg !12
  %13 = and i32 %12, 240, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 252, !dbg !12
  %17 = and i32 %9, 255, !dbg !12
  %18 = or disjoint i32 %8, %11, !dbg !13
  %19 = or disjoint i32 %18, 64, !dbg !13
  %20 = or disjoint i32 %18, 128, !dbg !13
  %21 = or disjoint i32 %18, 192, !dbg !13
  %22 = or disjoint i32 %8, %13, !dbg !13
  %23 = or disjoint i32 %8, %16, !dbg !13
  %24 = or disjoint i32 %8, %17, !dbg !13
  %25 = icmp slt i32 %18, 256, !dbg !14
  %26 = icmp slt i32 %19, 256, !dbg !14
  %27 = icmp slt i32 %20, 256, !dbg !14
  %28 = icmp slt i32 %21, 256, !dbg !14
  %29 = icmp slt i32 %22, 256, !dbg !14
  %30 = icmp slt i32 %23, 256, !dbg !14
  %31 = icmp slt i32 %24, 256, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %33 = shl i32 %32, 4, !dbg !16
  %34 = lshr i32 %9, 4, !dbg !17
  %35 = and i32 %34, 15, !dbg !17
  %.lobit46 = lshr i32 %9, 6, !dbg !17
  %36 = and i32 %.lobit46, 3, !dbg !17
  %37 = or disjoint i32 %33, %15, !dbg !18
  %38 = or disjoint i32 %33, %35, !dbg !18
  %39 = or disjoint i32 %33, %36, !dbg !18
  %40 = or disjoint i32 %39, 4, !dbg !18
  %41 = or disjoint i32 %39, 8, !dbg !18
  %42 = or disjoint i32 %39, 12, !dbg !18
  %43 = icmp slt i32 %37, 2116, !dbg !19
  %44 = icmp slt i32 %38, 2116, !dbg !19
  %45 = icmp slt i32 %39, 2116, !dbg !19
  %46 = icmp slt i32 %40, 2116, !dbg !19
  %47 = icmp slt i32 %41, 2116, !dbg !19
  %48 = icmp slt i32 %42, 2116, !dbg !19
  %.frozen = freeze i32 %22, !dbg !20
  %49 = sdiv i32 %.frozen, 64, !dbg !20
  %50 = mul i32 %49, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %50, !dbg !21
  %.frozen45 = freeze i32 %23, !dbg !20
  %51 = sdiv i32 %.frozen45, 64, !dbg !20
  %52 = mul i32 %51, 64, !dbg !21
  %.decomposed46 = sub i32 %.frozen45, %52, !dbg !21
  %53 = srem i32 %24, 64, !dbg !21
  %54 = mul i32 %18, 2116, !dbg !22
  %55 = mul i32 %19, 2116, !dbg !22
  %56 = mul i32 %20, 2116, !dbg !22
  %57 = mul i32 %21, 2116, !dbg !22
  %58 = add i32 %37, %54, !dbg !23
  %59 = add i32 %37, %55, !dbg !23
  %60 = add i32 %37, %56, !dbg !23
  %61 = add i32 %37, %57, !dbg !23
  %62 = sext i32 %58 to i64, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !24
  %64 = sext i32 %59 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = sext i32 %60 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %61 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = and i1 %25, %43, !dbg !25
  %71 = and i1 %26, %43, !dbg !25
  %72 = and i1 %27, %43, !dbg !25
  %73 = and i1 %28, %43, !dbg !25
  %74 = and i1 %29, %44, !dbg !25
  %75 = and i1 %30, %45, !dbg !25
  %76 = and i1 %46, %30, !dbg !25
  %77 = and i1 %47, %30, !dbg !25
  %78 = and i1 %48, %30, !dbg !25
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %70) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %71) #2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !26
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %72) #2, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !26
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %73) #2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !26
  %99 = shl i32 %9, 10, !dbg !26
  %100 = and i32 %99, 3072, !dbg !26
  %101 = or disjoint i32 %100, %11, !dbg !26
  %102 = and i32 %14, 1020, !dbg !26
  %103 = lshr exact i32 %100, 4, !dbg !26
  %104 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !26
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %101, !dbg !26
  %106 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !26
  %107 = or disjoint i32 %101, 256, !dbg !26
  %108 = lshr i32 %107, 8, !dbg !26
  %.idx = shl nuw nsw i32 %108, 4, !dbg !26
  %109 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !26
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !26
  %111 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !26
  %112 = or disjoint i32 %101, 512, !dbg !26
  %113 = lshr i32 %112, 8, !dbg !26
  %.idx7 = shl nuw nsw i32 %113, 4, !dbg !26
  %114 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !26
  %116 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !26
  %117 = or disjoint i32 %101, 768, !dbg !26
  %118 = lshr i32 %117, 8, !dbg !26
  %.idx8 = shl nuw nsw i32 %118, 4, !dbg !26
  %119 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !26
  %121 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !26
  %122 = or disjoint i32 %101, 64, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) %104, i32 %122, !dbg !26
  %124 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #2, !dbg !26
  %125 = or disjoint i32 %101, 320, !dbg !26
  %126 = lshr i32 %125, 8, !dbg !26
  %.idx9 = shl nuw nsw i32 %126, 4, !dbg !26
  %127 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !26
  %128 = getelementptr float, ptr addrspace(3) %127, i32 %125, !dbg !26
  %129 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #2, !dbg !26
  %130 = or disjoint i32 %101, 576, !dbg !26
  %131 = lshr i32 %130, 8, !dbg !26
  %.idx10 = shl nuw nsw i32 %131, 4, !dbg !26
  %132 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !26
  %134 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !26
  %135 = or disjoint i32 %101, 832, !dbg !26
  %136 = lshr i32 %135, 8, !dbg !26
  %.idx11 = shl nuw nsw i32 %136, 4, !dbg !26
  %137 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !26
  %139 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !26
  %140 = or disjoint i32 %101, 128, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) %104, i32 %140, !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !26
  %143 = or disjoint i32 %101, 384, !dbg !26
  %144 = lshr i32 %143, 8, !dbg !26
  %.idx12 = shl nuw nsw i32 %144, 4, !dbg !26
  %145 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !26
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !26
  %147 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !26
  %148 = or disjoint i32 %101, 640, !dbg !26
  %149 = lshr i32 %148, 8, !dbg !26
  %.idx13 = shl nuw nsw i32 %149, 4, !dbg !26
  %150 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !26
  %153 = or disjoint i32 %101, 896, !dbg !26
  %154 = lshr i32 %153, 8, !dbg !26
  %.idx14 = shl nuw nsw i32 %154, 4, !dbg !26
  %155 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !26
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !26
  %157 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !26
  %158 = or disjoint i32 %101, 192, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %104, i32 %158, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !26
  %161 = or disjoint i32 %101, 448, !dbg !26
  %162 = lshr i32 %161, 8, !dbg !26
  %.idx15 = shl nuw nsw i32 %162, 4, !dbg !26
  %163 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !26
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !26
  %165 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !26
  %166 = or disjoint i32 %101, 704, !dbg !26
  %167 = lshr i32 %166, 8, !dbg !26
  %.idx16 = shl nuw nsw i32 %167, 4, !dbg !26
  %168 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !26
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !26
  %170 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !26
  %171 = or disjoint i32 %101, 960, !dbg !26
  %172 = lshr i32 %171, 8, !dbg !26
  %.idx17 = shl nuw nsw i32 %172, 4, !dbg !26
  %173 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !26
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !26
  %175 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %176 = lshr i32 %14, 6, !dbg !26
  %177 = and i32 %176, 12, !dbg !26
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !26
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %102, !dbg !26
  %180 = or disjoint i32 %102, 1024, !dbg !26
  %181 = lshr i32 %180, 6, !dbg !26
  %182 = and i32 %181, 28, !dbg !26
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !26
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %180, !dbg !26
  %185 = or disjoint i32 %102, 2048, !dbg !26
  %186 = lshr i32 %185, 6, !dbg !26
  %187 = and i32 %186, 44, !dbg !26
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %185, !dbg !26
  %190 = or disjoint i32 %102, 3072, !dbg !26
  %191 = lshr i32 %190, 6, !dbg !26
  %192 = and i32 %191, 60, !dbg !26
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %190, !dbg !26
  %195 = lshr exact i32 %100, 6, !dbg !26
  %196 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %195, !dbg !26
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %101, !dbg !26
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !26
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %107, !dbg !26
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %112, !dbg !26
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !26
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %117, !dbg !26
  %204 = getelementptr float, ptr addrspace(3) %196, i32 %122, !dbg !26
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !26
  %206 = getelementptr float, ptr addrspace(3) %205, i32 %125, !dbg !26
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !26
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %130, !dbg !26
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !26
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %135, !dbg !26
  %211 = getelementptr float, ptr addrspace(3) %196, i32 %140, !dbg !26
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !26
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %143, !dbg !26
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !26
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %148, !dbg !26
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !26
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %153, !dbg !26
  %218 = getelementptr float, ptr addrspace(3) %196, i32 %158, !dbg !26
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !26
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %161, !dbg !26
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !26
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %166, !dbg !26
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !26
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %171, !dbg !26
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !26
  %226 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 1028, !dbg !26
  %227 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 2056, !dbg !26
  %228 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 3084, !dbg !26
  %229 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 4112, !dbg !26
  %230 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 5140, !dbg !26
  %231 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 6168, !dbg !26
  %232 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 7196, !dbg !26
  %233 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 8224, !dbg !26
  %234 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 9252, !dbg !26
  %235 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 10280, !dbg !26
  %236 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 11308, !dbg !26
  %237 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 12336, !dbg !26
  %238 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 13364, !dbg !26
  %239 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 14392, !dbg !26
  %240 = getelementptr inbounds i8, ptr addrspace(3) %225, i32 15420, !dbg !26
  %241 = sext i32 %53 to i64, !dbg !27
  %242 = getelementptr float, ptr addrspace(1) %1, i64 %241, !dbg !27
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !28
  %244 = load <4 x float>, ptr addrspace(3) %179, align 16, !dbg !26
  %245 = shufflevector <4 x float> %244, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %246 = load <4 x float>, ptr addrspace(3) %184, align 16, !dbg !26
  %247 = shufflevector <4 x float> %246, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %248 = load <4 x float>, ptr addrspace(3) %189, align 16, !dbg !26
  %249 = shufflevector <4 x float> %248, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %250 = load <4 x float>, ptr addrspace(3) %194, align 16, !dbg !26
  %251 = shufflevector <4 x float> %250, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %106, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %111, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %116, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %121, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %124, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %129, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %134, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %139, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %142, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %147, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %152, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %157, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %160, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %165, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %170, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %175, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %252 = load float, ptr addrspace(3) %225, align 4, !dbg !26
  %253 = load float, ptr addrspace(3) %226, align 4, !dbg !26
  %254 = load float, ptr addrspace(3) %227, align 4, !dbg !26
  %255 = load float, ptr addrspace(3) %228, align 4, !dbg !26
  %256 = load float, ptr addrspace(3) %229, align 4, !dbg !26
  %257 = load float, ptr addrspace(3) %230, align 4, !dbg !26
  %258 = load float, ptr addrspace(3) %231, align 4, !dbg !26
  %259 = load float, ptr addrspace(3) %232, align 4, !dbg !26
  %260 = load float, ptr addrspace(3) %233, align 4, !dbg !26
  %261 = load float, ptr addrspace(3) %234, align 4, !dbg !26
  %262 = load float, ptr addrspace(3) %235, align 4, !dbg !26
  %263 = load float, ptr addrspace(3) %236, align 4, !dbg !26
  %264 = load float, ptr addrspace(3) %237, align 4, !dbg !26
  %265 = load float, ptr addrspace(3) %238, align 4, !dbg !26
  %266 = load float, ptr addrspace(3) %239, align 4, !dbg !26
  %267 = load float, ptr addrspace(3) %240, align 4, !dbg !26
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %31) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %269 = insertelement <1 x i32> poison, i32 %268, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %269, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %270 = load <4 x float>, ptr addrspace(3) %243, align 16, !dbg !28
  %271 = shufflevector <4 x float> %270, <4 x float> poison, <16 x i32> <i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0, i32 3, i32 2, i32 1, i32 0>, !dbg !28
  %272 = insertelement <32 x float> poison, float %267, i64 0, !dbg !30
  %273 = insertelement <32 x float> %272, float %266, i64 1, !dbg !30
  %274 = insertelement <32 x float> %273, float %265, i64 2, !dbg !30
  %275 = insertelement <32 x float> %274, float %264, i64 3, !dbg !30
  %276 = insertelement <32 x float> %275, float %263, i64 4, !dbg !30
  %277 = insertelement <32 x float> %276, float %262, i64 5, !dbg !30
  %278 = insertelement <32 x float> %277, float %261, i64 6, !dbg !30
  %279 = insertelement <32 x float> %278, float %260, i64 7, !dbg !30
  %280 = insertelement <32 x float> %279, float %259, i64 8, !dbg !30
  %281 = insertelement <32 x float> %280, float %258, i64 9, !dbg !30
  %282 = insertelement <32 x float> %281, float %257, i64 10, !dbg !30
  %283 = insertelement <32 x float> %282, float %256, i64 11, !dbg !30
  %284 = insertelement <32 x float> %283, float %255, i64 12, !dbg !30
  %285 = insertelement <32 x float> %284, float %254, i64 13, !dbg !30
  %286 = insertelement <32 x float> %285, float %253, i64 14, !dbg !30
  %287 = insertelement <32 x float> %286, float %252, i64 15, !dbg !30
  %288 = shufflevector <4 x float> %251, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %289 = shufflevector <32 x float> %287, <32 x float> %288, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %290 = shufflevector <4 x float> %249, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %291 = shufflevector <32 x float> %289, <32 x float> %290, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %292 = shufflevector <4 x float> %247, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %293 = shufflevector <32 x float> %291, <32 x float> %292, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %294 = shufflevector <4 x float> %245, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %295 = shufflevector <32 x float> %293, <32 x float> %294, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 34, i32 35>, !dbg !30
  %296 = insertelement <32 x i32> poison, i32 %268, i64 0, !dbg !30
  %297 = bitcast <32 x i32> %296 to <32 x float>, !dbg !30
  %298 = shufflevector <32 x float> %297, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %299 = shufflevector <16 x float> %271, <16 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %300 = shufflevector <32 x float> %298, <32 x float> %299, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>, !dbg !30
  %301 = fadd <32 x float> %295, %300, !dbg !30
  %302 = fcmp ogt <32 x float> %301, zeroinitializer, !dbg !31
  %303 = extractelement <32 x float> %301, i64 31, !dbg !28
  %304 = fmul float %303, 0x3F847AE140000000, !dbg !32
  %305 = extractelement <32 x float> %301, i64 30, !dbg !28
  %306 = fmul float %305, 0x3F847AE140000000, !dbg !32
  %307 = extractelement <32 x float> %301, i64 29, !dbg !28
  %308 = fmul float %307, 0x3F847AE140000000, !dbg !32
  %309 = extractelement <32 x float> %301, i64 28, !dbg !28
  %310 = fmul float %309, 0x3F847AE140000000, !dbg !32
  %311 = extractelement <32 x float> %301, i64 27, !dbg !28
  %312 = fmul float %311, 0x3F847AE140000000, !dbg !32
  %313 = extractelement <32 x float> %301, i64 26, !dbg !28
  %314 = fmul float %313, 0x3F847AE140000000, !dbg !32
  %315 = extractelement <32 x float> %301, i64 25, !dbg !28
  %316 = fmul float %315, 0x3F847AE140000000, !dbg !32
  %317 = extractelement <32 x float> %301, i64 24, !dbg !28
  %318 = fmul float %317, 0x3F847AE140000000, !dbg !32
  %319 = extractelement <32 x float> %301, i64 23, !dbg !28
  %320 = fmul float %319, 0x3F847AE140000000, !dbg !32
  %321 = extractelement <32 x float> %301, i64 22, !dbg !28
  %322 = fmul float %321, 0x3F847AE140000000, !dbg !32
  %323 = extractelement <32 x float> %301, i64 21, !dbg !28
  %324 = fmul float %323, 0x3F847AE140000000, !dbg !32
  %325 = extractelement <32 x float> %301, i64 20, !dbg !28
  %326 = fmul float %325, 0x3F847AE140000000, !dbg !32
  %327 = extractelement <32 x float> %301, i64 19, !dbg !28
  %328 = fmul float %327, 0x3F847AE140000000, !dbg !32
  %329 = extractelement <32 x float> %301, i64 18, !dbg !28
  %330 = fmul float %329, 0x3F847AE140000000, !dbg !32
  %331 = extractelement <32 x float> %301, i64 17, !dbg !28
  %332 = fmul float %331, 0x3F847AE140000000, !dbg !32
  %333 = extractelement <32 x float> %301, i64 16, !dbg !28
  %334 = fmul float %333, 0x3F847AE140000000, !dbg !32
  %335 = extractelement <32 x i1> %302, i64 31, !dbg !28
  %336 = select i1 %335, float %303, float %304, !dbg !28
  %337 = extractelement <32 x i1> %302, i64 30, !dbg !28
  %338 = select i1 %337, float %305, float %306, !dbg !28
  %339 = extractelement <32 x i1> %302, i64 29, !dbg !28
  %340 = select i1 %339, float %307, float %308, !dbg !28
  %341 = extractelement <32 x i1> %302, i64 28, !dbg !28
  %342 = select i1 %341, float %309, float %310, !dbg !28
  %343 = extractelement <32 x i1> %302, i64 27, !dbg !28
  %344 = select i1 %343, float %311, float %312, !dbg !28
  %345 = extractelement <32 x i1> %302, i64 26, !dbg !28
  %346 = select i1 %345, float %313, float %314, !dbg !28
  %347 = extractelement <32 x i1> %302, i64 25, !dbg !28
  %348 = select i1 %347, float %315, float %316, !dbg !28
  %349 = extractelement <32 x i1> %302, i64 24, !dbg !28
  %350 = select i1 %349, float %317, float %318, !dbg !28
  %351 = extractelement <32 x i1> %302, i64 23, !dbg !28
  %352 = select i1 %351, float %319, float %320, !dbg !28
  %353 = extractelement <32 x i1> %302, i64 22, !dbg !28
  %354 = select i1 %353, float %321, float %322, !dbg !28
  %355 = extractelement <32 x i1> %302, i64 21, !dbg !28
  %356 = select i1 %355, float %323, float %324, !dbg !28
  %357 = extractelement <32 x i1> %302, i64 20, !dbg !28
  %358 = select i1 %357, float %325, float %326, !dbg !28
  %359 = extractelement <32 x i1> %302, i64 19, !dbg !28
  %360 = select i1 %359, float %327, float %328, !dbg !28
  %361 = extractelement <32 x i1> %302, i64 18, !dbg !28
  %362 = select i1 %361, float %329, float %330, !dbg !28
  %363 = extractelement <32 x i1> %302, i64 17, !dbg !28
  %364 = select i1 %363, float %331, float %332, !dbg !28
  %365 = extractelement <32 x i1> %302, i64 16, !dbg !28
  %366 = select i1 %365, float %333, float %334, !dbg !28
  %367 = shl i32 %38, 6, !dbg !33
  %368 = shl i32 %39, 6, !dbg !33
  %369 = shl i32 %40, 6, !dbg !33
  %370 = shl i32 %41, 6, !dbg !33
  %371 = shl i32 %42, 6, !dbg !33
  %372 = add i32 %367, %.decomposed, !dbg !34
  %373 = mul i32 %49, 135424, !dbg !35
  %374 = mul i32 %51, 135424, !dbg !35
  %375 = add i32 %372, %373, !dbg !36
  %376 = add i32 %374, %.decomposed46, !dbg !34
  %377 = add i32 %376, %368, !dbg !36
  %378 = add i32 %376, %369, !dbg !36
  %379 = add i32 %376, %370, !dbg !36
  %380 = add i32 %376, %371, !dbg !36
  %381 = sext i32 %375 to i64, !dbg !37
  %382 = getelementptr i1, ptr addrspace(1) %2, i64 %381, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %383 = extractelement <32 x i1> %302, i64 15, !dbg !38
  %384 = zext i1 %383 to i8, !dbg !38
  %385 = extractelement <32 x i1> %302, i64 14, !dbg !38
  %386 = zext i1 %385 to i8, !dbg !38
  %387 = extractelement <32 x i1> %302, i64 13, !dbg !38
  %388 = zext i1 %387 to i8, !dbg !38
  %389 = extractelement <32 x i1> %302, i64 12, !dbg !38
  %390 = zext i1 %389 to i8, !dbg !38
  %391 = extractelement <32 x i1> %302, i64 11, !dbg !38
  %392 = zext i1 %391 to i8, !dbg !38
  %393 = extractelement <32 x i1> %302, i64 10, !dbg !38
  %394 = zext i1 %393 to i8, !dbg !38
  %395 = extractelement <32 x i1> %302, i64 9, !dbg !38
  %396 = zext i1 %395 to i8, !dbg !38
  %397 = extractelement <32 x i1> %302, i64 8, !dbg !38
  %398 = zext i1 %397 to i8, !dbg !38
  %399 = extractelement <32 x i1> %302, i64 7, !dbg !38
  %400 = zext i1 %399 to i8, !dbg !38
  %401 = extractelement <32 x i1> %302, i64 6, !dbg !38
  %402 = zext i1 %401 to i8, !dbg !38
  %403 = extractelement <32 x i1> %302, i64 5, !dbg !38
  %404 = zext i1 %403 to i8, !dbg !38
  %405 = extractelement <32 x i1> %302, i64 4, !dbg !38
  %406 = zext i1 %405 to i8, !dbg !38
  %407 = extractelement <32 x i1> %302, i64 3, !dbg !38
  %408 = zext i1 %407 to i8, !dbg !38
  %409 = extractelement <32 x i1> %302, i64 2, !dbg !38
  %410 = zext i1 %409 to i8, !dbg !38
  %411 = extractelement <32 x i1> %302, i64 1, !dbg !38
  %412 = zext i1 %411 to i8, !dbg !38
  %413 = extractelement <32 x i1> %302, i64 0, !dbg !38
  %414 = zext i1 %413 to i8, !dbg !38
  %415 = and i32 %12, 4080, !dbg !38
  %416 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !38
  %417 = insertelement <1 x i8> poison, i8 %384, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %416, <1 x i8> %417, i1 true) #2, !dbg !38
  %418 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 272, !dbg !38
  %419 = insertelement <1 x i8> poison, i8 %386, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %418, <1 x i8> %419, i1 true) #2, !dbg !38
  %420 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 544, !dbg !38
  %421 = insertelement <1 x i8> poison, i8 %388, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %420, <1 x i8> %421, i1 true) #2, !dbg !38
  %422 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 816, !dbg !38
  %423 = insertelement <1 x i8> poison, i8 %390, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %422, <1 x i8> %423, i1 true) #2, !dbg !38
  %424 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 1088, !dbg !38
  %425 = insertelement <1 x i8> poison, i8 %392, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %424, <1 x i8> %425, i1 true) #2, !dbg !38
  %426 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 1360, !dbg !38
  %427 = insertelement <1 x i8> poison, i8 %394, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %426, <1 x i8> %427, i1 true) #2, !dbg !38
  %428 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 1632, !dbg !38
  %429 = insertelement <1 x i8> poison, i8 %396, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %428, <1 x i8> %429, i1 true) #2, !dbg !38
  %430 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 1904, !dbg !38
  %431 = insertelement <1 x i8> poison, i8 %398, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %430, <1 x i8> %431, i1 true) #2, !dbg !38
  %432 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 2176, !dbg !38
  %433 = insertelement <1 x i8> poison, i8 %400, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %432, <1 x i8> %433, i1 true) #2, !dbg !38
  %434 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 2448, !dbg !38
  %435 = insertelement <1 x i8> poison, i8 %402, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %434, <1 x i8> %435, i1 true) #2, !dbg !38
  %436 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 2720, !dbg !38
  %437 = insertelement <1 x i8> poison, i8 %404, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %436, <1 x i8> %437, i1 true) #2, !dbg !38
  %438 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 2992, !dbg !38
  %439 = insertelement <1 x i8> poison, i8 %406, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %438, <1 x i8> %439, i1 true) #2, !dbg !38
  %440 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 3264, !dbg !38
  %441 = insertelement <1 x i8> poison, i8 %408, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %440, <1 x i8> %441, i1 true) #2, !dbg !38
  %442 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 3536, !dbg !38
  %443 = insertelement <1 x i8> poison, i8 %410, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %442, <1 x i8> %443, i1 true) #2, !dbg !38
  %444 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 3808, !dbg !38
  %445 = insertelement <1 x i8> poison, i8 %412, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %444, <1 x i8> %445, i1 true) #2, !dbg !38
  %446 = getelementptr inbounds i8, ptr addrspace(3) %416, i32 4080, !dbg !38
  %447 = insertelement <1 x i8> poison, i8 %414, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %446, <1 x i8> %447, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %448 = and i32 %9, 240, !dbg !38
  %449 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %448, !dbg !38
  %450 = getelementptr inbounds i8, ptr addrspace(3) %449, i32 %415, !dbg !38
  %451 = load <4 x i32>, ptr addrspace(3) %450, align 16, !dbg !38
  %452 = bitcast <4 x i32> %451 to <128 x i1>, !dbg !38
  %453 = extractelement <128 x i1> %452, i64 24, !dbg !38
  %454 = extractelement <128 x i1> %452, i64 56, !dbg !38
  %455 = extractelement <128 x i1> %452, i64 88, !dbg !38
  %456 = extractelement <128 x i1> %452, i64 120, !dbg !38
  %457 = bitcast <4 x i32> %451 to <16 x i8>, !dbg !38
  %458 = extractelement <16 x i8> %457, i64 0, !dbg !38
  %459 = and i8 %458, 1, !dbg !38
  %460 = shufflevector <16 x i8> %457, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !38
  %461 = and <2 x i8> %460, splat (i8 1), !dbg !38
  %462 = zext i1 %453 to i8, !dbg !38
  %463 = extractelement <16 x i8> %457, i64 4, !dbg !38
  %464 = and i8 %463, 1, !dbg !38
  %465 = shufflevector <16 x i8> %457, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !38
  %466 = and <2 x i8> %465, splat (i8 1), !dbg !38
  %467 = zext i1 %454 to i8, !dbg !38
  %468 = extractelement <16 x i8> %457, i64 8, !dbg !38
  %469 = and i8 %468, 1, !dbg !38
  %470 = shufflevector <16 x i8> %457, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !38
  %471 = and <2 x i8> %470, splat (i8 1), !dbg !38
  %472 = zext i1 %455 to i8, !dbg !38
  %473 = extractelement <16 x i8> %457, i64 12, !dbg !38
  %474 = and i8 %473, 1, !dbg !38
  %475 = shufflevector <16 x i8> %457, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !38
  %476 = and <2 x i8> %475, splat (i8 1), !dbg !38
  %477 = zext i1 %456 to i8, !dbg !38
  %478 = insertelement <4 x i8> poison, i8 %459, i64 0, !dbg !38
  %479 = shufflevector <2 x i8> %461, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %480 = shufflevector <4 x i8> %478, <4 x i8> %479, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %481 = insertelement <4 x i8> %480, i8 %462, i64 3, !dbg !38
  %482 = bitcast <4 x i8> %481 to i32, !dbg !38
  %483 = insertelement <4 x i8> poison, i8 %464, i64 0, !dbg !38
  %484 = shufflevector <2 x i8> %466, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %485 = shufflevector <4 x i8> %483, <4 x i8> %484, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %486 = insertelement <4 x i8> %485, i8 %467, i64 3, !dbg !38
  %487 = bitcast <4 x i8> %486 to i32, !dbg !38
  %488 = insertelement <4 x i8> poison, i8 %469, i64 0, !dbg !38
  %489 = shufflevector <2 x i8> %471, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %490 = shufflevector <4 x i8> %488, <4 x i8> %489, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %491 = insertelement <4 x i8> %490, i8 %472, i64 3, !dbg !38
  %492 = bitcast <4 x i8> %491 to i32, !dbg !38
  %493 = insertelement <4 x i8> poison, i8 %474, i64 0, !dbg !38
  %494 = shufflevector <2 x i8> %476, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !38
  %495 = shufflevector <4 x i8> %493, <4 x i8> %494, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !38
  %496 = insertelement <4 x i8> %495, i8 %477, i64 3, !dbg !38
  %497 = bitcast <4 x i8> %496 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %482, i32 %487, i32 %492, i32 %497, ptr addrspace(1) %382, i1 %74) #2, !dbg !38
  %498 = sext i32 %377 to i64, !dbg !39
  %499 = getelementptr float, ptr addrspace(1) %3, i64 %498, !dbg !39
  %500 = sext i32 %378 to i64, !dbg !39
  %501 = getelementptr float, ptr addrspace(1) %3, i64 %500, !dbg !39
  %502 = sext i32 %379 to i64, !dbg !39
  %503 = getelementptr float, ptr addrspace(1) %3, i64 %502, !dbg !39
  %504 = sext i32 %380 to i64, !dbg !39
  %505 = getelementptr float, ptr addrspace(1) %3, i64 %504, !dbg !39
  %506 = bitcast float %336 to i32, !dbg !40
  %507 = bitcast float %338 to i32, !dbg !40
  %508 = bitcast float %340 to i32, !dbg !40
  %509 = bitcast float %342 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %506, i32 %507, i32 %508, i32 %509, ptr addrspace(1) %499, i1 %75) #2, !dbg !40
  %510 = bitcast float %344 to i32, !dbg !40
  %511 = bitcast float %346 to i32, !dbg !40
  %512 = bitcast float %348 to i32, !dbg !40
  %513 = bitcast float %350 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %510, i32 %511, i32 %512, i32 %513, ptr addrspace(1) %501, i1 %76) #2, !dbg !40
  %514 = bitcast float %352 to i32, !dbg !40
  %515 = bitcast float %354 to i32, !dbg !40
  %516 = bitcast float %356 to i32, !dbg !40
  %517 = bitcast float %358 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %515, i32 %516, i32 %517, ptr addrspace(1) %503, i1 %77) #2, !dbg !40
  %518 = bitcast float %360 to i32, !dbg !40
  %519 = bitcast float %362 to i32, !dbg !40
  %520 = bitcast float %364 to i32, !dbg !40
  %521 = bitcast float %366 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %518, i32 %519, i32 %520, i32 %521, ptr addrspace(1) %505, i1 %78) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm46eun44r2txrc2b4j3kzsp2qgf22imegf4vmicbfgdsczfx4ns.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_4", linkageName: "triton_poi_fused_convolution_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 33, scope: !7)
!34 = !DILocation(line: 40, column: 30, scope: !7)
!35 = !DILocation(line: 40, column: 45, scope: !7)
!36 = !DILocation(line: 40, column: 38, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 56, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 56, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
