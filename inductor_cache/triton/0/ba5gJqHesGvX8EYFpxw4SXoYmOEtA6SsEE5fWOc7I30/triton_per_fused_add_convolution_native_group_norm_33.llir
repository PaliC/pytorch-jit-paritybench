; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_native_group_norm_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = and i32 %9, 31, !dbg !11
  %11 = lshr i32 %9, 5, !dbg !11
  %12 = shl i32 %9, 2, !dbg !11
  %13 = and i32 %12, 252, !dbg !11
  %14 = lshr i32 %13, 4, !dbg !12
  %15 = srem i32 %8, 32, !dbg !13
  %16 = shl i32 %8, 8, !dbg !14
  %17 = or disjoint i32 %16, %13, !dbg !15
  %18 = sext i32 %17 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !17
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %31 = shl nsw i32 %15, 4, !dbg !20
  %32 = or disjoint i32 %31, %14, !dbg !21
  %33 = sext i32 %32 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %39 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !17
  %40 = insertelement <2 x i32> %39, i32 %22, i64 1, !dbg !17
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !17
  %42 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %43 = insertelement <2 x i32> %42, i32 %28, i64 1, !dbg !19
  %44 = bitcast <2 x i32> %43 to <2 x float>, !dbg !19
  %45 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %46 = insertelement <2 x i32> %45, i32 %36, i64 1, !dbg !23
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !23
  %48 = fadd <2 x float> %44, %47, !dbg !24
  %49 = fadd <2 x float> %48, %41, !dbg !25
  %50 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !17
  %51 = insertelement <2 x i32> %50, i32 %24, i64 1, !dbg !17
  %52 = bitcast <2 x i32> %51 to <2 x float>, !dbg !17
  %53 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !19
  %54 = insertelement <2 x i32> %53, i32 %30, i64 1, !dbg !19
  %55 = bitcast <2 x i32> %54 to <2 x float>, !dbg !19
  %56 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !23
  %57 = insertelement <2 x i32> %56, i32 %38, i64 1, !dbg !23
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !23
  %59 = fadd <2 x float> %55, %58, !dbg !24
  %60 = fadd <2 x float> %59, %52, !dbg !25
  %61 = extractelement <2 x float> %49, i64 0, !dbg !26
  %62 = extractelement <2 x float> %49, i64 1, !dbg !26
  %63 = fadd float %61, %62, !dbg !27
  %64 = extractelement <2 x float> %60, i64 0, !dbg !26
  %65 = fadd float %63, %64, !dbg !27
  %66 = extractelement <2 x float> %60, i64 1, !dbg !26
  %67 = fadd float %65, %66, !dbg !27
  %68 = bitcast float %67 to i32, !dbg !32
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = fadd float %67, %70, !dbg !27
  %72 = bitcast float %71 to i32, !dbg !32
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 8, i32 31), !dbg !32
  %74 = bitcast i32 %73 to float, !dbg !32
  %75 = fadd float %71, %74, !dbg !27
  %76 = bitcast float %75 to i32, !dbg !32
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !32
  %78 = bitcast i32 %77 to float, !dbg !32
  %79 = fadd float %75, %78, !dbg !27
  %80 = bitcast float %79 to i32, !dbg !32
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !32
  %82 = bitcast i32 %81 to float, !dbg !32
  %83 = fadd float %79, %82, !dbg !27
  %84 = bitcast float %83 to i32, !dbg !32
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = fadd float %83, %86, !dbg !27
  %88 = icmp eq i32 %10, 0, !dbg !32
  %89 = and i32 %11, 1, !dbg !32
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !32
  %91 = bitcast float %87 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 %88) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %92 = icmp slt i32 %9, 2, !dbg !32
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !32
  %94 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %92) #5, !dbg !32
  %95 = bitcast i32 %94 to float, !dbg !32
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !32
  %97 = bitcast i32 %96 to float, !dbg !32
  %98 = fadd float %95, %97, !dbg !27
  %99 = and i32 %9, 1, !dbg !32
  %100 = icmp eq i32 %99, 0, !dbg !32
  %101 = and i1 %92, %100, !dbg !32
  %102 = bitcast float %98 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %102, i1 %101) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %103 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %104 = fadd float %103, 0.000000e+00, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 2.560000e+02) #5, !dbg !37
  %106 = fsub float %61, %105, !dbg !26
  %107 = fsub float %62, %105, !dbg !26
  %108 = fsub float %64, %105, !dbg !26
  %109 = fsub float %66, %105, !dbg !26
  %110 = fmul float %106, %106, !dbg !38
  %111 = fmul float %107, %107, !dbg !38
  %112 = fmul float %108, %108, !dbg !38
  %113 = fmul float %109, %109, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %114 = fadd float %110, %111, !dbg !41
  %115 = fadd float %112, %114, !dbg !41
  %116 = fadd float %113, %115, !dbg !41
  %117 = bitcast float %116 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 16, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = fadd float %116, %119, !dbg !41
  %121 = bitcast float %120 to i32, !dbg !39
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !39
  %123 = bitcast i32 %122 to float, !dbg !39
  %124 = fadd float %120, %123, !dbg !41
  %125 = bitcast float %124 to i32, !dbg !39
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = fadd float %124, %127, !dbg !41
  %129 = bitcast float %128 to i32, !dbg !39
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !39
  %131 = bitcast i32 %130 to float, !dbg !39
  %132 = fadd float %128, %131, !dbg !41
  %133 = bitcast float %132 to i32, !dbg !39
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 1, i32 31), !dbg !39
  %135 = bitcast i32 %134 to float, !dbg !39
  %136 = fadd float %132, %135, !dbg !41
  %137 = bitcast float %136 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %137, i1 %88) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %138 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %93, i1 %92) #5, !dbg !39
  %139 = bitcast i32 %138 to float, !dbg !39
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !39
  %141 = bitcast i32 %140 to float, !dbg !39
  %142 = fadd float %139, %141, !dbg !41
  %143 = bitcast float %142 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %143, i1 %101) #5, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %144 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !39
  %145 = fadd float %144, 0.000000e+00, !dbg !42
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 2.560000e+02) #5, !dbg !44
  %147 = fadd float %146, 0x3EE4F8B580000000, !dbg !45
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %148, 0, !dbg !46
  br i1 %.not.i, label %151, label %149, !dbg !46

149:                                              ; preds = %7
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

151:                                              ; preds = %7
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %149, %151
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], !dbg !46
  %153 = bitcast float %61 to i32, !dbg !47
  %154 = bitcast float %62 to i32, !dbg !47
  %155 = bitcast float %64 to i32, !dbg !47
  %156 = bitcast float %66 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %25, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %157 = sext i32 %8 to i64, !dbg !49
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !49
  %urem = and i32 %9, 63, !dbg !50
  %159 = icmp eq i32 %urem, 0, !dbg !50
  %160 = bitcast float %.0.i to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %160, ptr addrspace(1) %158, i1 %159) #5, !dbg !50
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !51
  %162 = bitcast float %105 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %161, i1 %159) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6xaehjc6ejhhnfhgv5325gys3iyhc6y33ovobkokqltkc72hxbl.py", directory: "inductor_cache/6x")
!4 = !{ptr @triton_per_fused_add_convolution_native_group_norm_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_native_group_norm_33, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_native_group_norm_33", linkageName: "triton_per_fused_add_convolution_native_group_norm_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 30, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 35, column: 34, scope: !7)
!19 = !DILocation(line: 35, column: 48, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 36, column: 35, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 43, scope: !7)
!24 = !DILocation(line: 37, column: 18, scope: !7)
!25 = !DILocation(line: 38, column: 18, scope: !7)
!26 = !DILocation(line: 45, column: 19, scope: !7)
!27 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !31)
!28 = distinct !DILexicalBlockFile(scope: !30, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!31 = !DILocation(line: 41, column: 57, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 44, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !30, inlinedAt: !40)
!40 = !DILocation(line: 48, column: 59, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !28, inlinedAt: !40)
!42 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !43)
!43 = !DILocation(line: 48, column: 45, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 28, scope: !7)
!47 = !DILocation(line: 54, column: 48, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
!49 = !DILocation(line: 56, column: 28, scope: !7)
!50 = !DILocation(line: 56, column: 40, scope: !7)
!51 = !DILocation(line: 57, column: 25, scope: !7)
!52 = !DILocation(line: 57, column: 37, scope: !7)
!53 = !DILocation(line: 57, column: 4, scope: !7)
