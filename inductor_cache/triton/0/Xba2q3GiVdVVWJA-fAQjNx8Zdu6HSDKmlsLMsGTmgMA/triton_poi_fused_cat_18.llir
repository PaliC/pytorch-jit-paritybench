; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %19 = or disjoint i32 %17, 512, !dbg !13
  %20 = sdiv i32 %17, 256, !dbg !14
  %21 = sdiv i32 %19, 256, !dbg !14
  %22 = srem i32 %21, 1024, !dbg !15
  %.frozen2 = freeze i32 %17, !dbg !16
  %23 = sdiv i32 %.frozen2, 262144, !dbg !16
  %.frozen3 = freeze i32 %19, !dbg !16
  %24 = sdiv i32 %.frozen3, 262144, !dbg !16
  %.frozen = freeze i32 %17, !dbg !17
  %25 = sdiv i32 %.frozen, 16, !dbg !17
  %26 = sdiv i32 %19, 16, !dbg !17
  %27 = srem i32 %25, 16, !dbg !18
  %28 = srem i32 %26, 16, !dbg !18
  %29 = mul i32 %25, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = srem i32 %18, 16, !dbg !19
  %31 = icmp slt i32 %22, 512, !dbg !20
  %32 = mul i32 %23, 262144, !dbg !21
  %srem.decomposed = sub i32 %.frozen2, %32, !dbg !21
  %33 = mul i32 %24, 262144, !dbg !21
  %srem1.decomposed = sub i32 %.frozen3, %33, !dbg !21
  %34 = shl nsw i32 %23, 17, !dbg !22
  %35 = shl nsw i32 %24, 17, !dbg !22
  %36 = add nsw i32 %34, %srem.decomposed, !dbg !23
  %37 = add nsw i32 %35, %srem1.decomposed, !dbg !23
  %38 = sext i32 %36 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = sext i32 %37 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %27 to i64, !dbg !25
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !25
  %44 = sext i32 %28 to i64, !dbg !25
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !25
  %46 = sext i32 %.decomposed to i64, !dbg !26
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !26
  %48 = sext i32 %30 to i64, !dbg !26
  %49 = getelementptr i64, ptr addrspace(1) %2, i64 %48, !dbg !26
  %50 = mul nsw i32 %22, 576, !dbg !27
  %51 = sext i32 %50 to i64, !dbg !28
  %52 = mul i32 %23, 294912, !dbg !29
  %53 = mul i32 %24, 294912, !dbg !29
  %54 = sext i32 %52 to i64, !dbg !30
  %55 = sext i32 %53 to i64, !dbg !30
  %56 = getelementptr i64, ptr addrspace(1) %4, i64 %46, !dbg !31
  %57 = getelementptr i64, ptr addrspace(1) %4, i64 %48, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !33
  %61 = icmp sgt i32 %22, 511, !dbg !34
  %62 = add nsw i32 %22, -512, !dbg !35
  %63 = shl nsw i32 %62, 8, !dbg !36
  %64 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !37
  %65 = insertelement <2 x i32> %64, i32 %20, i64 1, !dbg !37
  %66 = srem <2 x i32> %65, <i32 256, i32 1024>, !dbg !37
  %67 = extractelement <2 x i32> %66, i64 1, !dbg !34
  %68 = icmp slt i32 %67, 512, !dbg !20
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !38
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !38
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !38
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !38
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !38
  %74 = bitcast i32 %70 to float, !dbg !38
  %75 = bitcast i32 %71 to float, !dbg !38
  %76 = bitcast i32 %72 to float, !dbg !38
  %77 = bitcast i32 %73 to float, !dbg !38
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !38
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !38
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !38
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !38
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !38
  %83 = bitcast i32 %79 to float, !dbg !38
  %84 = bitcast i32 %80 to float, !dbg !38
  %85 = bitcast i32 %81 to float, !dbg !38
  %86 = bitcast i32 %82 to float, !dbg !38
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %68, i1 %68) #1, !dbg !39
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %68, i1 %68) #1, !dbg !39
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %68, i1 %68) #1, !dbg !39
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %68, i1 %68) #1, !dbg !39
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %45, i1 %31, i1 %31) #1, !dbg !39
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %45, i1 %31, i1 %31) #1, !dbg !39
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %45, i1 %31, i1 %31) #1, !dbg !39
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %45, i1 %31, i1 %31) #1, !dbg !39
  %95 = add i64 %87, 24, !dbg !40
  %96 = add i64 %91, 24, !dbg !40
  %97 = icmp slt i64 %87, 0, !dbg !41
  %98 = icmp slt i64 %91, 0, !dbg !41
  %99 = select i1 %97, i64 %95, i64 %87, !dbg !42
  %100 = select i1 %98, i64 %96, i64 %91, !dbg !42
  %101 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %47, i1 %68, i1 %68, i1 %68) #1, !dbg !43
  %102 = extractvalue { i64, i64 } %101, 0, !dbg !43
  %103 = extractvalue { i64, i64 } %101, 1, !dbg !43
  %104 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %49, i1 %68, i1 %68, i1 %68) #1, !dbg !43
  %105 = extractvalue { i64, i64 } %104, 0, !dbg !43
  %106 = extractvalue { i64, i64 } %104, 1, !dbg !43
  %107 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %47, i1 %31, i1 %31, i1 %31) #1, !dbg !43
  %108 = extractvalue { i64, i64 } %107, 0, !dbg !43
  %109 = extractvalue { i64, i64 } %107, 1, !dbg !43
  %110 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %49, i1 %31, i1 %31, i1 %31) #1, !dbg !43
  %111 = extractvalue { i64, i64 } %110, 0, !dbg !43
  %112 = extractvalue { i64, i64 } %110, 1, !dbg !43
  %113 = add i64 %102, 24, !dbg !44
  %114 = add i64 %103, 24, !dbg !44
  %115 = add i64 %105, 24, !dbg !44
  %116 = add i64 %106, 24, !dbg !44
  %117 = add i64 %108, 24, !dbg !44
  %118 = add i64 %109, 24, !dbg !44
  %119 = add i64 %111, 24, !dbg !44
  %120 = add i64 %112, 24, !dbg !44
  %121 = icmp slt i64 %102, 0, !dbg !45
  %122 = icmp slt i64 %103, 0, !dbg !45
  %123 = icmp slt i64 %105, 0, !dbg !45
  %124 = icmp slt i64 %106, 0, !dbg !45
  %125 = icmp slt i64 %108, 0, !dbg !45
  %126 = icmp slt i64 %109, 0, !dbg !45
  %127 = icmp slt i64 %111, 0, !dbg !45
  %128 = icmp slt i64 %112, 0, !dbg !45
  %129 = select i1 %121, i64 %113, i64 %102, !dbg !46
  %130 = select i1 %122, i64 %114, i64 %103, !dbg !46
  %131 = select i1 %123, i64 %115, i64 %105, !dbg !46
  %132 = select i1 %124, i64 %116, i64 %106, !dbg !46
  %133 = select i1 %125, i64 %117, i64 %108, !dbg !46
  %134 = select i1 %126, i64 %118, i64 %109, !dbg !46
  %135 = select i1 %127, i64 %119, i64 %111, !dbg !46
  %136 = select i1 %128, i64 %120, i64 %112, !dbg !46
  %137 = mul i64 %99, 24, !dbg !47
  %138 = mul i64 %100, 24, !dbg !47
  %139 = mul nsw i32 %67, 576, !dbg !27
  %140 = sext i32 %139 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !48
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %137, !dbg !48
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %140, !dbg !48
  %144 = getelementptr float, ptr addrspace(1) %143, i64 %54, !dbg !48
  %145 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !48
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %137, !dbg !48
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %140, !dbg !48
  %148 = getelementptr float, ptr addrspace(1) %147, i64 %54, !dbg !48
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %131, !dbg !48
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %137, !dbg !48
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %140, !dbg !48
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %54, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !48
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %137, !dbg !48
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %140, !dbg !48
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %54, !dbg !48
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !48
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %138, !dbg !48
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %51, !dbg !48
  %160 = getelementptr float, ptr addrspace(1) %159, i64 %55, !dbg !48
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !48
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %138, !dbg !48
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %51, !dbg !48
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %55, !dbg !48
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !48
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %138, !dbg !48
  %167 = getelementptr float, ptr addrspace(1) %166, i64 %51, !dbg !48
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %55, !dbg !48
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %136, !dbg !48
  %170 = getelementptr float, ptr addrspace(1) %169, i64 %138, !dbg !48
  %171 = getelementptr float, ptr addrspace(1) %170, i64 %51, !dbg !48
  %172 = getelementptr float, ptr addrspace(1) %171, i64 %55, !dbg !48
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %174 = bitcast i32 %173 to float, !dbg !49
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %176 = bitcast i32 %175 to float, !dbg !49
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %178 = bitcast i32 %177 to float, !dbg !49
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %68, i32 0, i1 %68) #1, !dbg !49
  %180 = bitcast i32 %179 to float, !dbg !49
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %31, i32 0, i1 %31) #1, !dbg !49
  %182 = bitcast i32 %181 to float, !dbg !49
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %31, i32 0, i1 %31) #1, !dbg !49
  %184 = bitcast i32 %183 to float, !dbg !49
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %31, i32 0, i1 %31) #1, !dbg !49
  %186 = bitcast i32 %185 to float, !dbg !49
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %31, i32 0, i1 %31) #1, !dbg !49
  %188 = bitcast i32 %187 to float, !dbg !49
  %189 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %56, i1 %68, i1 %68, i1 %68) #1, !dbg !50
  %190 = extractvalue { i64, i64 } %189, 0, !dbg !50
  %191 = extractvalue { i64, i64 } %189, 1, !dbg !50
  %192 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %57, i1 %68, i1 %68, i1 %68) #1, !dbg !50
  %193 = extractvalue { i64, i64 } %192, 0, !dbg !50
  %194 = extractvalue { i64, i64 } %192, 1, !dbg !50
  %195 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %56, i1 %31, i1 %31, i1 %31) #1, !dbg !50
  %196 = extractvalue { i64, i64 } %195, 0, !dbg !50
  %197 = extractvalue { i64, i64 } %195, 1, !dbg !50
  %198 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %57, i1 %31, i1 %31, i1 %31) #1, !dbg !50
  %199 = extractvalue { i64, i64 } %198, 0, !dbg !50
  %200 = extractvalue { i64, i64 } %198, 1, !dbg !50
  %201 = add i64 %190, 24, !dbg !51
  %202 = add i64 %191, 24, !dbg !51
  %203 = add i64 %193, 24, !dbg !51
  %204 = add i64 %194, 24, !dbg !51
  %205 = add i64 %196, 24, !dbg !51
  %206 = add i64 %197, 24, !dbg !51
  %207 = add i64 %199, 24, !dbg !51
  %208 = add i64 %200, 24, !dbg !51
  %209 = icmp slt i64 %190, 0, !dbg !52
  %210 = icmp slt i64 %191, 0, !dbg !52
  %211 = icmp slt i64 %193, 0, !dbg !52
  %212 = icmp slt i64 %194, 0, !dbg !52
  %213 = icmp slt i64 %196, 0, !dbg !52
  %214 = icmp slt i64 %197, 0, !dbg !52
  %215 = icmp slt i64 %199, 0, !dbg !52
  %216 = icmp slt i64 %200, 0, !dbg !52
  %217 = select i1 %209, i64 %201, i64 %190, !dbg !53
  %218 = select i1 %210, i64 %202, i64 %191, !dbg !53
  %219 = select i1 %211, i64 %203, i64 %193, !dbg !53
  %220 = select i1 %212, i64 %204, i64 %194, !dbg !53
  %221 = select i1 %213, i64 %205, i64 %196, !dbg !53
  %222 = select i1 %214, i64 %206, i64 %197, !dbg !53
  %223 = select i1 %215, i64 %207, i64 %199, !dbg !53
  %224 = select i1 %216, i64 %208, i64 %200, !dbg !53
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !54
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %137, !dbg !54
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %140, !dbg !54
  %228 = getelementptr float, ptr addrspace(1) %227, i64 %54, !dbg !54
  %229 = getelementptr float, ptr addrspace(1) %3, i64 %218, !dbg !54
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %137, !dbg !54
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %140, !dbg !54
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %54, !dbg !54
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %219, !dbg !54
  %234 = getelementptr float, ptr addrspace(1) %233, i64 %137, !dbg !54
  %235 = getelementptr float, ptr addrspace(1) %234, i64 %140, !dbg !54
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %54, !dbg !54
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %220, !dbg !54
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %137, !dbg !54
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %140, !dbg !54
  %240 = getelementptr float, ptr addrspace(1) %239, i64 %54, !dbg !54
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %221, !dbg !54
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %138, !dbg !54
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %51, !dbg !54
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %55, !dbg !54
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !54
  %246 = getelementptr float, ptr addrspace(1) %245, i64 %138, !dbg !54
  %247 = getelementptr float, ptr addrspace(1) %246, i64 %51, !dbg !54
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %55, !dbg !54
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !54
  %250 = getelementptr float, ptr addrspace(1) %249, i64 %138, !dbg !54
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %51, !dbg !54
  %252 = getelementptr float, ptr addrspace(1) %251, i64 %55, !dbg !54
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !54
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %138, !dbg !54
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %51, !dbg !54
  %256 = getelementptr float, ptr addrspace(1) %255, i64 %55, !dbg !54
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %258 = bitcast i32 %257 to float, !dbg !55
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %260 = bitcast i32 %259 to float, !dbg !55
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %236, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %262 = bitcast i32 %261 to float, !dbg !55
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %240, i1 %68, i32 0, i1 %68) #1, !dbg !55
  %264 = bitcast i32 %263 to float, !dbg !55
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %31, i32 0, i1 %31) #1, !dbg !55
  %266 = bitcast i32 %265 to float, !dbg !55
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %31, i32 0, i1 %31) #1, !dbg !55
  %268 = bitcast i32 %267 to float, !dbg !55
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %252, i1 %31, i32 0, i1 %31) #1, !dbg !55
  %270 = bitcast i32 %269 to float, !dbg !55
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %31, i32 0, i1 %31) #1, !dbg !55
  %272 = bitcast i32 %271 to float, !dbg !55
  %273 = fsub float %258, %174, !dbg !56
  %274 = fsub float %260, %176, !dbg !56
  %275 = fsub float %262, %178, !dbg !56
  %276 = fsub float %264, %180, !dbg !56
  %277 = fsub float %266, %182, !dbg !56
  %278 = fsub float %268, %184, !dbg !56
  %279 = fsub float %270, %186, !dbg !56
  %280 = fsub float %272, %188, !dbg !56
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !57
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !57
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !57
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !57
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !57
  %286 = bitcast i32 %282 to float, !dbg !57
  %287 = bitcast i32 %283 to float, !dbg !57
  %288 = bitcast i32 %284 to float, !dbg !57
  %289 = bitcast i32 %285 to float, !dbg !57
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31, i32 0, i1 %31) #1, !dbg !57
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !57
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !57
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !57
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !57
  %295 = bitcast i32 %291 to float, !dbg !57
  %296 = bitcast i32 %292 to float, !dbg !57
  %297 = bitcast i32 %293 to float, !dbg !57
  %298 = bitcast i32 %294 to float, !dbg !57
  %299 = fmul float %273, %286, !dbg !58
  %300 = fmul float %274, %287, !dbg !58
  %301 = fmul float %275, %288, !dbg !58
  %302 = fmul float %276, %289, !dbg !58
  %303 = fmul float %277, %295, !dbg !58
  %304 = fmul float %278, %296, !dbg !58
  %305 = fmul float %279, %297, !dbg !58
  %306 = fmul float %280, %298, !dbg !58
  %307 = fadd float %299, %174, !dbg !59
  %308 = fadd float %300, %176, !dbg !59
  %309 = fadd float %301, %178, !dbg !59
  %310 = fadd float %302, %180, !dbg !59
  %311 = fadd float %303, %182, !dbg !59
  %312 = fadd float %304, %184, !dbg !59
  %313 = fadd float %305, %186, !dbg !59
  %314 = fadd float %306, %188, !dbg !59
  %315 = fsub float %307, %74, !dbg !60
  %316 = fsub float %308, %75, !dbg !60
  %317 = fsub float %309, %76, !dbg !60
  %318 = fsub float %310, %77, !dbg !60
  %319 = fsub float %311, %83, !dbg !60
  %320 = fsub float %312, %84, !dbg !60
  %321 = fsub float %313, %85, !dbg !60
  %322 = fsub float %314, %86, !dbg !60
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %68, i32 0, i1 %68) #1, !dbg !61
  %324 = bitcast i32 %323 to float, !dbg !61
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %68, i32 0, i1 %68) #1, !dbg !61
  %326 = bitcast i32 %325 to float, !dbg !61
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %68, i32 0, i1 %68) #1, !dbg !61
  %328 = bitcast i32 %327 to float, !dbg !61
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %68, i32 0, i1 %68) #1, !dbg !61
  %330 = bitcast i32 %329 to float, !dbg !61
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %31, i32 0, i1 %31) #1, !dbg !61
  %332 = bitcast i32 %331 to float, !dbg !61
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %31, i32 0, i1 %31) #1, !dbg !61
  %334 = bitcast i32 %333 to float, !dbg !61
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %31, i32 0, i1 %31) #1, !dbg !61
  %336 = bitcast i32 %335 to float, !dbg !61
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %31, i32 0, i1 %31) #1, !dbg !61
  %338 = bitcast i32 %337 to float, !dbg !61
  %339 = fmul float %315, %324, !dbg !62
  %340 = fmul float %316, %326, !dbg !62
  %341 = fmul float %317, %328, !dbg !62
  %342 = fmul float %318, %330, !dbg !62
  %343 = fmul float %319, %332, !dbg !62
  %344 = fmul float %320, %334, !dbg !62
  %345 = fmul float %321, %336, !dbg !62
  %346 = fmul float %322, %338, !dbg !62
  %347 = fadd float %339, %74, !dbg !63
  %348 = fadd float %340, %75, !dbg !63
  %349 = fadd float %341, %76, !dbg !63
  %350 = fadd float %342, %77, !dbg !63
  %351 = fadd float %343, %83, !dbg !63
  %352 = fadd float %344, %84, !dbg !63
  %353 = fadd float %345, %85, !dbg !63
  %354 = fadd float %346, %86, !dbg !63
  %355 = icmp sgt i32 %67, 511, !dbg !34
  %356 = insertelement <2 x i32> <i32 poison, i32 -512>, i32 %34, i64 0, !dbg !64
  %357 = add nsw <2 x i32> %356, %66, !dbg !64
  %358 = extractelement <2 x i32> %357, i64 1, !dbg !36
  %359 = shl nsw i32 %358, 8, !dbg !36
  %360 = extractelement <2 x i32> %357, i64 0, !dbg !65
  %361 = add nsw i32 %360, %359, !dbg !65
  %362 = extractelement <2 x i32> %66, i64 0, !dbg !64
  %363 = add nsw i32 %35, %362, !dbg !64
  %364 = add nsw i32 %363, %63, !dbg !65
  %365 = sext i32 %361 to i64, !dbg !66
  %366 = getelementptr float, ptr addrspace(1) %7, i64 %365, !dbg !66
  %367 = sext i32 %364 to i64, !dbg !66
  %368 = getelementptr float, ptr addrspace(1) %7, i64 %367, !dbg !66
  %369 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %366, i1 %355, i32 0, i1 %355, i32 0, i1 %355, i32 0, i1 %355, i32 0, i1 %355) #1, !dbg !67
  %370 = extractvalue { i32, i32, i32, i32 } %369, 0, !dbg !67
  %371 = extractvalue { i32, i32, i32, i32 } %369, 1, !dbg !67
  %372 = extractvalue { i32, i32, i32, i32 } %369, 2, !dbg !67
  %373 = extractvalue { i32, i32, i32, i32 } %369, 3, !dbg !67
  %374 = bitcast i32 %370 to float, !dbg !67
  %375 = bitcast i32 %371 to float, !dbg !67
  %376 = bitcast i32 %372 to float, !dbg !67
  %377 = bitcast i32 %373 to float, !dbg !67
  %378 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61, i32 0, i1 %61) #1, !dbg !67
  %379 = extractvalue { i32, i32, i32, i32 } %378, 0, !dbg !67
  %380 = extractvalue { i32, i32, i32, i32 } %378, 1, !dbg !67
  %381 = extractvalue { i32, i32, i32, i32 } %378, 2, !dbg !67
  %382 = extractvalue { i32, i32, i32, i32 } %378, 3, !dbg !67
  %383 = bitcast i32 %379 to float, !dbg !67
  %384 = bitcast i32 %380 to float, !dbg !67
  %385 = bitcast i32 %381 to float, !dbg !67
  %386 = bitcast i32 %382 to float, !dbg !67
  %387 = sext i32 %358 to i64, !dbg !68
  %388 = getelementptr float, ptr addrspace(1) %8, i64 %387, !dbg !68
  %389 = sext i32 %62 to i64, !dbg !68
  %390 = getelementptr float, ptr addrspace(1) %8, i64 %389, !dbg !68
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %355, i32 0, i1 %355) #1, !dbg !69
  %392 = bitcast i32 %391 to float, !dbg !69
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %355, i32 0, i1 %355) #1, !dbg !69
  %394 = bitcast i32 %393 to float, !dbg !69
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %355, i32 0, i1 %355) #1, !dbg !69
  %396 = bitcast i32 %395 to float, !dbg !69
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %388, i1 %355, i32 0, i1 %355) #1, !dbg !69
  %398 = bitcast i32 %397 to float, !dbg !69
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %61, i32 0, i1 %61) #1, !dbg !69
  %400 = bitcast i32 %399 to float, !dbg !69
  %401 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %61, i32 0, i1 %61) #1, !dbg !69
  %402 = bitcast i32 %401 to float, !dbg !69
  %403 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %61, i32 0, i1 %61) #1, !dbg !69
  %404 = bitcast i32 %403 to float, !dbg !69
  %405 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %390, i1 %61, i32 0, i1 %61) #1, !dbg !69
  %406 = bitcast i32 %405 to float, !dbg !69
  %407 = fadd float %374, %392, !dbg !70
  %408 = fadd float %375, %394, !dbg !70
  %409 = fadd float %376, %396, !dbg !70
  %410 = fadd float %377, %398, !dbg !70
  %411 = fadd float %383, %400, !dbg !70
  %412 = fadd float %384, %402, !dbg !70
  %413 = fadd float %385, %404, !dbg !70
  %414 = fadd float %386, %406, !dbg !70
  %415 = select i1 %68, float %347, float %407, !dbg !71
  %416 = select i1 %68, float %348, float %408, !dbg !71
  %417 = select i1 %68, float %349, float %409, !dbg !71
  %418 = select i1 %68, float %350, float %410, !dbg !71
  %419 = select i1 %31, float %351, float %411, !dbg !71
  %420 = select i1 %31, float %352, float %412, !dbg !71
  %421 = select i1 %31, float %353, float %413, !dbg !71
  %422 = select i1 %31, float %354, float %414, !dbg !71
  %423 = sext i32 %17 to i64, !dbg !72
  %424 = getelementptr float, ptr addrspace(1) %9, i64 %423, !dbg !72
  %425 = sext i32 %19 to i64, !dbg !72
  %426 = getelementptr float, ptr addrspace(1) %9, i64 %425, !dbg !72
  %427 = bitcast float %415 to i32, !dbg !73
  %428 = bitcast float %416 to i32, !dbg !73
  %429 = bitcast float %417 to i32, !dbg !73
  %430 = bitcast float %418 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %427, i32 %428, i32 %429, i32 %430, ptr addrspace(1) %424, i1 true) #1, !dbg !73
  %431 = bitcast float %419 to i32, !dbg !73
  %432 = bitcast float %420 to i32, !dbg !73
  %433 = bitcast float %421 to i32, !dbg !73
  %434 = bitcast float %422 to i32, !dbg !73
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %431, i32 %432, i32 %433, i32 %434, ptr addrspace(1) %426, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxoakdwinlm2hlg6lub7lt6nuca37jqmht45twit55xwpum3px77.py", directory: "inductor_cache/xo")
!4 = !{ptr @triton_poi_fused_cat_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_18", linkageName: "triton_poi_fused_cat_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 27, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 53, scope: !7)
!23 = !DILocation(line: 35, column: 46, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 41, column: 31, scope: !7)
!27 = !DILocation(line: 45, column: 55, scope: !7)
!28 = !DILocation(line: 45, column: 50, scope: !7)
!29 = !DILocation(line: 45, column: 68, scope: !7)
!30 = !DILocation(line: 45, column: 61, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 56, column: 31, scope: !7)
!34 = !DILocation(line: 61, column: 20, scope: !7)
!35 = !DILocation(line: 64, column: 50, scope: !7)
!36 = !DILocation(line: 64, column: 41, scope: !7)
!37 = !DILocation(line: 26, column: 19, scope: !7)
!38 = !DILocation(line: 35, column: 58, scope: !7)
!39 = !DILocation(line: 36, column: 35, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 33, scope: !7)
!43 = !DILocation(line: 41, column: 36, scope: !7)
!44 = !DILocation(line: 42, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 20, scope: !7)
!46 = !DILocation(line: 44, column: 35, scope: !7)
!47 = !DILocation(line: 45, column: 42, scope: !7)
!48 = !DILocation(line: 45, column: 31, scope: !7)
!49 = !DILocation(line: 45, column: 73, scope: !7)
!50 = !DILocation(line: 46, column: 36, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 20, scope: !7)
!53 = !DILocation(line: 49, column: 35, scope: !7)
!54 = !DILocation(line: 50, column: 31, scope: !7)
!55 = !DILocation(line: 50, column: 73, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 36, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 54, column: 20, scope: !7)
!60 = !DILocation(line: 55, column: 20, scope: !7)
!61 = !DILocation(line: 56, column: 36, scope: !7)
!62 = !DILocation(line: 57, column: 20, scope: !7)
!63 = !DILocation(line: 58, column: 19, scope: !7)
!64 = !DILocation(line: 64, column: 36, scope: !7)
!65 = !DILocation(line: 64, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 31, scope: !7)
!67 = !DILocation(line: 64, column: 68, scope: !7)
!68 = !DILocation(line: 65, column: 31, scope: !7)
!69 = !DILocation(line: 65, column: 45, scope: !7)
!70 = !DILocation(line: 66, column: 20, scope: !7)
!71 = !DILocation(line: 0, scope: !7)
!72 = !DILocation(line: 70, column: 25, scope: !7)
!73 = !DILocation(line: 70, column: 37, scope: !7)
!74 = !DILocation(line: 70, column: 4, scope: !7)
