; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 32, !dbg !14
  %21 = mul i32 %20, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = srem i32 %20, 16, !dbg !16
  %23 = sdiv i32 %19, 512, !dbg !17
  %24 = shl nsw i32 %22, 6, !dbg !18
  %25 = shl i32 %23, 11, !dbg !19
  %26 = add i32 %25, %.decomposed, !dbg !20
  %27 = add i32 %26, %24, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = add i32 %26, 32, !dbg !24
  %32 = add i32 %31, %24, !dbg !25
  %33 = sext i32 %32 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %36 = add i32 %26, 1024, !dbg !28
  %37 = add i32 %36, %24, !dbg !29
  %38 = sext i32 %37 to i64, !dbg !30
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !31
  %41 = add i32 %26, 1056, !dbg !32
  %42 = add i32 %41, %24, !dbg !33
  %43 = sext i32 %42 to i64, !dbg !34
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !34
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !35
  %46 = sext i32 %.decomposed to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !36
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !38
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !39
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !39
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !39
  %53 = bitcast i32 %51 to float, !dbg !39
  %54 = bitcast i32 %52 to float, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !40
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !41
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !42
  %58 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !43
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !44
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !46
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !47
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !47
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !47
  %65 = bitcast i32 %63 to float, !dbg !47
  %66 = bitcast i32 %64 to float, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !48
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !49
  %69 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !50
  %70 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !51
  %71 = fadd float %53, 0x3EE4F8B580000000, !dbg !52
  %72 = fadd float %54, 0x3EE4F8B580000000, !dbg !52
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %73, 0, !dbg !53
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %74, 0, !dbg !53
  br i1 %.not.i, label %80, label %75, !dbg !53

75:                                               ; preds = %13
  br i1 %.not1.i, label %78, label %76, !dbg !53

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

80:                                               ; preds = %13
  br i1 %.not1.i, label %83, label %81, !dbg !53

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !53
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i1 = icmp eq i32 %85, 0, !dbg !53
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !53
  br i1 %.not.i1, label %92, label %87, !dbg !53

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !53

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !53

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !53
  br label %__nv_sqrtf.exit5, !dbg !53

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !53
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !54
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !54
  %99 = fadd float %65, 0x3EE4F8B580000000, !dbg !55
  %100 = fadd float %66, 0x3EE4F8B580000000, !dbg !55
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i6 = icmp eq i32 %101, 0, !dbg !56
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !56
  br i1 %.not.i6, label %108, label %103, !dbg !56

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !56

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !56

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !56
  br label %__nv_sqrtf.exit10, !dbg !56

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !56
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i11 = icmp eq i32 %113, 0, !dbg !56
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i14 = icmp eq i32 %114, 0, !dbg !56
  br i1 %.not.i11, label %120, label %115, !dbg !56

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !56

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !56

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !56
  br label %__nv_sqrtf.exit15, !dbg !56

__nv_sqrtf.exit15:                                ; preds = %116, %118, %121, %123
  %.0.i13 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !56
  %125 = extractvalue { i32, i32 } %35, 1, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %128 = bitcast i32 %127 to float, !dbg !23
  %129 = fadd float %128, %126, !dbg !57
  %130 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %131 = bitcast i32 %130 to float, !dbg !31
  %132 = fadd float %129, %131, !dbg !58
  %133 = extractvalue { i32, i32 } %45, 1, !dbg !35
  %134 = bitcast i32 %133 to float, !dbg !35
  %135 = fadd float %132, %134, !dbg !59
  %136 = fmul float %135, 2.500000e-01, !dbg !60
  %137 = extractvalue { i32, i32 } %60, 1, !dbg !45
  %138 = bitcast i32 %137 to float, !dbg !45
  %139 = fsub float %136, %138, !dbg !61
  %140 = extractvalue { i32, i32 } %35, 0, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %143 = bitcast i32 %142 to float, !dbg !23
  %144 = fadd float %143, %141, !dbg !57
  %145 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %146 = bitcast i32 %145 to float, !dbg !31
  %147 = fadd float %144, %146, !dbg !58
  %148 = extractvalue { i32, i32 } %45, 0, !dbg !35
  %149 = bitcast i32 %148 to float, !dbg !35
  %150 = fadd float %147, %149, !dbg !59
  %151 = fmul float %150, 2.500000e-01, !dbg !60
  %152 = extractvalue { i32, i32 } %60, 0, !dbg !45
  %153 = bitcast i32 %152 to float, !dbg !45
  %154 = fsub float %151, %153, !dbg !61
  %155 = extractvalue { i32, i32 } %48, 1, !dbg !37
  %156 = bitcast i32 %155 to float, !dbg !37
  %157 = fsub float %136, %156, !dbg !62
  %158 = fmul float %157, %98, !dbg !63
  %159 = extractvalue { i32, i32 } %56, 1, !dbg !41
  %160 = bitcast i32 %159 to float, !dbg !41
  %161 = fmul float %158, %160, !dbg !64
  %162 = extractvalue { i32, i32 } %58, 1, !dbg !43
  %163 = bitcast i32 %162 to float, !dbg !43
  %164 = fadd float %161, %163, !dbg !65
  %165 = fcmp olt float %164, 0.000000e+00, !dbg !66
  %166 = select i1 %165, float 0.000000e+00, float %164, !dbg !70
  %167 = extractvalue { i32, i32 } %48, 0, !dbg !37
  %168 = bitcast i32 %167 to float, !dbg !37
  %169 = fsub float %151, %168, !dbg !62
  %170 = fmul float %169, %97, !dbg !63
  %171 = extractvalue { i32, i32 } %56, 0, !dbg !41
  %172 = bitcast i32 %171 to float, !dbg !41
  %173 = fmul float %170, %172, !dbg !64
  %174 = extractvalue { i32, i32 } %58, 0, !dbg !43
  %175 = bitcast i32 %174 to float, !dbg !43
  %176 = fadd float %173, %175, !dbg !65
  %177 = fcmp olt float %176, 0.000000e+00, !dbg !66
  %178 = select i1 %177, float 0.000000e+00, float %176, !dbg !70
  %179 = extractvalue { i32, i32 } %70, 1, !dbg !51
  %180 = bitcast i32 %179 to float, !dbg !51
  %181 = extractvalue { i32, i32 } %70, 0, !dbg !51
  %182 = bitcast i32 %181 to float, !dbg !51
  %183 = extractvalue { i32, i32 } %68, 1, !dbg !49
  %184 = bitcast i32 %183 to float, !dbg !49
  %185 = extractvalue { i32, i32 } %68, 0, !dbg !49
  %186 = bitcast i32 %185 to float, !dbg !49
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !71
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !71
  %189 = fmul float %154, %187, !dbg !72
  %190 = fmul float %139, %188, !dbg !72
  %191 = fmul float %189, %186, !dbg !73
  %192 = fmul float %190, %184, !dbg !73
  %193 = fadd float %191, %182, !dbg !74
  %194 = fadd float %192, %180, !dbg !74
  %195 = sext i32 %19 to i64, !dbg !75
  %196 = getelementptr float, ptr addrspace(1) %9, i64 %195, !dbg !75
  %197 = bitcast float %151 to i32, !dbg !76
  %198 = bitcast float %136 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 true) #3, !dbg !76
  %199 = getelementptr float, ptr addrspace(1) %10, i64 %195, !dbg !77
  %200 = bitcast float %178 to i32, !dbg !78
  %201 = bitcast float %166 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %201, ptr addrspace(1) %199, i1 true) #3, !dbg !78
  %202 = getelementptr float, ptr addrspace(1) %11, i64 %195, !dbg !79
  %203 = bitcast float %193 to i32, !dbg !80
  %204 = bitcast float %194 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %203, i32 %204, ptr addrspace(1) %202, i1 true) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfb2tcol6zexfvnh2xch4tqjz4bgd4isvwlbiff76qx5kevblb5t.py", directory: "inductor_cache/fb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 38, scope: !7)
!19 = !DILocation(line: 28, column: 48, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 43, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 53, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 58, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 50, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 60, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 50, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 60, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 36, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 36, scope: !7)
!44 = !DILocation(line: 36, column: 31, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 37, column: 31, scope: !7)
!47 = !DILocation(line: 37, column: 36, scope: !7)
!48 = !DILocation(line: 38, column: 31, scope: !7)
!49 = !DILocation(line: 38, column: 36, scope: !7)
!50 = !DILocation(line: 39, column: 31, scope: !7)
!51 = !DILocation(line: 39, column: 36, scope: !7)
!52 = !DILocation(line: 47, column: 20, scope: !7)
!53 = !DILocation(line: 48, column: 27, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 60, column: 27, scope: !7)
!57 = !DILocation(line: 40, column: 18, scope: !7)
!58 = !DILocation(line: 41, column: 18, scope: !7)
!59 = !DILocation(line: 42, column: 18, scope: !7)
!60 = !DILocation(line: 44, column: 18, scope: !7)
!61 = !DILocation(line: 58, column: 19, scope: !7)
!62 = !DILocation(line: 45, column: 19, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 54, column: 20, scope: !7)
!65 = !DILocation(line: 55, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 57, column: 42, scope: !7)
!70 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 61, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 20, scope: !7)
!73 = !DILocation(line: 64, column: 20, scope: !7)
!74 = !DILocation(line: 65, column: 20, scope: !7)
!75 = !DILocation(line: 66, column: 25, scope: !7)
!76 = !DILocation(line: 66, column: 36, scope: !7)
!77 = !DILocation(line: 67, column: 25, scope: !7)
!78 = !DILocation(line: 67, column: 37, scope: !7)
!79 = !DILocation(line: 68, column: 25, scope: !7)
!80 = !DILocation(line: 68, column: 37, scope: !7)
!81 = !DILocation(line: 68, column: 4, scope: !7)
