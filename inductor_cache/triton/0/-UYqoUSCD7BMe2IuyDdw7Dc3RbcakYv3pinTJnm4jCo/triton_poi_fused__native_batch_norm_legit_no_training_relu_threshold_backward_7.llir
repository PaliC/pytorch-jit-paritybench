; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 24, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = lshr i32 %12, 2, !dbg !16
  %20 = and i32 %19, 31, !dbg !16
  %21 = or disjoint i32 %18, %20, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %22 = sdiv i32 %.frozen, 256, !dbg !18
  %23 = mul i32 %22, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %23, !dbg !19
  %24 = srem i32 %16, 256, !dbg !19
  %25 = shl i32 %21, 8, !dbg !20
  %26 = shl i32 %22, 20, !dbg !21
  %27 = add i32 %26, %25, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %27, %24, !dbg !23
  %30 = sext i32 %28 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = sext i32 %29 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !25
  %36 = sext i32 %.decomposed to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = sext i32 %24 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = bitcast i32 %46 to float, !dbg !29
  %51 = bitcast i32 %47 to float, !dbg !29
  %52 = bitcast i32 %48 to float, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !32
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !33
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !34
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !34
  %72 = fadd float %51, 0x3EE4F8B580000000, !dbg !34
  %73 = fadd float %52, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !34
  %75 = fadd float %59, 0x3EE4F8B580000000, !dbg !34
  %76 = fadd float %60, 0x3EE4F8B580000000, !dbg !34
  %77 = fadd float %61, 0x3EE4F8B580000000, !dbg !34
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %78, 0, !dbg !35
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %79, 0, !dbg !35
  br i1 %.not.i, label %85, label %80, !dbg !35

80:                                               ; preds = %9
  br i1 %.not1.i, label %83, label %81, !dbg !35

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

85:                                               ; preds = %9
  br i1 %.not1.i, label %88, label %86, !dbg !35

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %81, %83, %86, %88
  %.0.i = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i3 = icmp eq i32 %90, 0, !dbg !35
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i6 = icmp eq i32 %91, 0, !dbg !35
  br i1 %.not.i3, label %97, label %92, !dbg !35

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %100, label %98, !dbg !35

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

__nv_sqrtf.exit7:                                 ; preds = %93, %95, %98, %100
  %.0.i5 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !35
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i8 = icmp eq i32 %102, 0, !dbg !35
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i11 = icmp eq i32 %103, 0, !dbg !35
  br i1 %.not.i8, label %109, label %104, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

109:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %112, label %110, !dbg !35

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %105, %107, %110, %112
  %.0.i10 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !35
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %114, 0, !dbg !35
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i16 = icmp eq i32 %115, 0, !dbg !35
  br i1 %.not.i13, label %121, label %116, !dbg !35

116:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

121:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %124, label %122, !dbg !35

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %117, %119, %122, %124
  %.0.i15 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !35
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i18 = icmp eq i32 %126, 0, !dbg !35
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i21 = icmp eq i32 %127, 0, !dbg !35
  br i1 %.not.i18, label %133, label %128, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

133:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %136, label %134, !dbg !35

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

__nv_sqrtf.exit22:                                ; preds = %129, %131, %134, %136
  %.0.i20 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !35
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i23 = icmp eq i32 %138, 0, !dbg !35
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i26 = icmp eq i32 %139, 0, !dbg !35
  br i1 %.not.i23, label %145, label %140, !dbg !35

140:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

145:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %148, label %146, !dbg !35

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

__nv_sqrtf.exit27:                                ; preds = %141, %143, %146, %148
  %.0.i25 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !35
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i28 = icmp eq i32 %150, 0, !dbg !35
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i31 = icmp eq i32 %151, 0, !dbg !35
  br i1 %.not.i28, label %157, label %152, !dbg !35

152:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %155, label %153, !dbg !35

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

157:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %160, label %158, !dbg !35

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

__nv_sqrtf.exit32:                                ; preds = %153, %155, %158, %160
  %.0.i30 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !35
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i33 = icmp eq i32 %162, 0, !dbg !35
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i36 = icmp eq i32 %163, 0, !dbg !35
  br i1 %.not.i33, label %169, label %164, !dbg !35

164:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

169:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %172, label %170, !dbg !35

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

__nv_sqrtf.exit37:                                ; preds = %165, %167, %170, %172
  %.0.i35 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !35
  %174 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %176 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %178 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %180 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %182 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %183 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %184 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %185 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %186 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %188 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %189 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %190 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !33
  %192 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !33
  %193 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %199 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %200 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %202 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %203 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %204 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %206 = shl i32 %12, 2, !dbg !16
  %207 = and i32 %206, 28, !dbg !16
  %208 = or disjoint i32 %18, %207, !dbg !17
  %209 = lshr i32 %12, 3, !dbg !12
  %210 = and i32 %209, 15, !dbg !12
  %211 = or disjoint i32 %210, 16, !dbg !12
  %212 = or disjoint i32 %11, %211, !dbg !13
  %213 = or disjoint i32 %11, %210, !dbg !13
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !36
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !36
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !36
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !36
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !36
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !36
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !36
  %222 = shl i32 %213, 12, !dbg !37
  %223 = shl i32 %212, 12, !dbg !37
  %224 = add i32 %208, %222, !dbg !38
  %225 = add i32 %208, %223, !dbg !38
  %226 = sext i32 %224 to i64, !dbg !39
  %227 = getelementptr float, ptr addrspace(1) %5, i64 %226, !dbg !39
  %228 = sext i32 %225 to i64, !dbg !39
  %229 = getelementptr float, ptr addrspace(1) %5, i64 %228, !dbg !39
  %230 = shl i32 %12, 8, !dbg !40
  %231 = and i32 %230, 768, !dbg !40
  %232 = or disjoint i32 %231, %20, !dbg !40
  %233 = and i32 %206, 508, !dbg !40
  %234 = lshr exact i32 %231, 3, !dbg !40
  %235 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %234, !dbg !40
  %236 = getelementptr float, ptr addrspace(3) %235, i32 %232, !dbg !40
  %237 = or disjoint i32 %232, 32, !dbg !40
  %238 = lshr i32 %237, 5, !dbg !40
  %239 = getelementptr float, ptr addrspace(3) @global_smem, i32 %238, !dbg !40
  %240 = getelementptr float, ptr addrspace(3) %239, i32 %237, !dbg !40
  %241 = or disjoint i32 %232, 64, !dbg !40
  %242 = lshr i32 %241, 5, !dbg !40
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !40
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !40
  %245 = or disjoint i32 %232, 96, !dbg !40
  %246 = lshr i32 %245, 5, !dbg !40
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !40
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !40
  %249 = or disjoint i32 %232, 128, !dbg !40
  %250 = lshr i32 %249, 5, !dbg !40
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !40
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !40
  %253 = or disjoint i32 %232, 160, !dbg !40
  %254 = lshr i32 %253, 5, !dbg !40
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !40
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !40
  %257 = or disjoint i32 %232, 192, !dbg !40
  %258 = lshr i32 %257, 5, !dbg !40
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !40
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !40
  %261 = or disjoint i32 %232, 224, !dbg !40
  %262 = lshr i32 %261, 5, !dbg !40
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !40
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !40
  %265 = lshr i32 %233, 5, !dbg !40
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !40
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %233, !dbg !40
  %268 = or disjoint i32 %233, 1, !dbg !40
  %269 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %268, !dbg !40
  %270 = or disjoint i32 %233, 2, !dbg !40
  %271 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %270, !dbg !40
  %272 = or disjoint i32 %233, 3, !dbg !40
  %273 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %272, !dbg !40
  %274 = or disjoint i32 %233, 512, !dbg !40
  %275 = lshr i32 %274, 5, !dbg !40
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !40
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !40
  %278 = or disjoint i32 %233, 513, !dbg !40
  %279 = lshr i32 %278, 5, !dbg !40
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !40
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !40
  %282 = or disjoint i32 %233, 514, !dbg !40
  %283 = lshr i32 %282, 5, !dbg !40
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %283, !dbg !40
  %285 = getelementptr inbounds float, ptr addrspace(3) %284, i32 %282, !dbg !40
  %286 = or disjoint i32 %233, 515, !dbg !40
  %287 = lshr i32 %286, 5, !dbg !40
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !40
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !40
  %290 = getelementptr i1, ptr addrspace(1) %6, i64 %30, !dbg !41
  %291 = insertelement <4 x i32> poison, i32 %188, i64 0, !dbg !25
  %292 = insertelement <4 x i32> %291, i32 %186, i64 1, !dbg !25
  %293 = insertelement <4 x i32> %292, i32 %184, i64 2, !dbg !25
  %294 = insertelement <4 x i32> %293, i32 %182, i64 3, !dbg !25
  %295 = bitcast <4 x i32> %294 to <4 x float>, !dbg !25
  %296 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !27
  %297 = insertelement <4 x i32> %296, i32 %187, i64 1, !dbg !27
  %298 = insertelement <4 x i32> %297, i32 %185, i64 2, !dbg !27
  %299 = insertelement <4 x i32> %298, i32 %183, i64 3, !dbg !27
  %300 = bitcast <4 x i32> %299 to <4 x float>, !dbg !27
  %301 = fsub <4 x float> %295, %300, !dbg !42
  %302 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !33
  %303 = insertelement <4 x i32> %302, i32 %196, i64 1, !dbg !33
  %304 = insertelement <4 x i32> %303, i32 %195, i64 2, !dbg !33
  %305 = insertelement <4 x i32> %304, i32 %194, i64 3, !dbg !33
  %306 = bitcast <4 x i32> %305 to <4 x float>, !dbg !33
  %307 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !31
  %308 = insertelement <4 x i32> %307, i32 %204, i64 1, !dbg !31
  %309 = insertelement <4 x i32> %308, i32 %203, i64 2, !dbg !31
  %310 = insertelement <4 x i32> %309, i32 %202, i64 3, !dbg !31
  %311 = bitcast <4 x i32> %310 to <4 x float>, !dbg !31
  %312 = insertelement <4 x float> poison, float %214, i64 0, !dbg !43
  %313 = insertelement <4 x float> %312, float %215, i64 1, !dbg !43
  %314 = insertelement <4 x float> %313, float %216, i64 2, !dbg !43
  %315 = insertelement <4 x float> %314, float %217, i64 3, !dbg !43
  %316 = fmul <4 x float> %301, %315, !dbg !43
  %317 = fmul <4 x float> %316, %311, !dbg !44
  %318 = fadd <4 x float> %317, %306, !dbg !45
  %319 = fcmp olt <4 x float> %318, zeroinitializer, !dbg !46
  %320 = select <4 x i1> %319, <4 x float> zeroinitializer, <4 x float> %318, !dbg !50
  %321 = fcmp ole <4 x float> %320, zeroinitializer, !dbg !51
  %322 = extractelement <4 x float> %320, i64 0, !dbg !40
  %323 = bitcast float %322 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %323, i1 true) #4, !dbg !40
  %324 = extractelement <4 x float> %320, i64 1, !dbg !40
  %325 = bitcast float %324 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %325, i1 true) #4, !dbg !40
  %326 = extractelement <4 x float> %320, i64 2, !dbg !40
  %327 = bitcast float %326 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %327, i1 true) #4, !dbg !40
  %328 = extractelement <4 x float> %320, i64 3, !dbg !40
  %329 = bitcast float %328 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %329, i1 true) #4, !dbg !40
  %330 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !25
  %331 = insertelement <4 x i32> %330, i32 %178, i64 1, !dbg !25
  %332 = insertelement <4 x i32> %331, i32 %176, i64 2, !dbg !25
  %333 = insertelement <4 x i32> %332, i32 %174, i64 3, !dbg !25
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !25
  %335 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !27
  %336 = insertelement <4 x i32> %335, i32 %179, i64 1, !dbg !27
  %337 = insertelement <4 x i32> %336, i32 %177, i64 2, !dbg !27
  %338 = insertelement <4 x i32> %337, i32 %175, i64 3, !dbg !27
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !27
  %340 = fsub <4 x float> %334, %339, !dbg !42
  %341 = insertelement <4 x i32> poison, i32 %193, i64 0, !dbg !33
  %342 = insertelement <4 x i32> %341, i32 %192, i64 1, !dbg !33
  %343 = insertelement <4 x i32> %342, i32 %191, i64 2, !dbg !33
  %344 = insertelement <4 x i32> %343, i32 %190, i64 3, !dbg !33
  %345 = bitcast <4 x i32> %344 to <4 x float>, !dbg !33
  %346 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !31
  %347 = insertelement <4 x i32> %346, i32 %200, i64 1, !dbg !31
  %348 = insertelement <4 x i32> %347, i32 %199, i64 2, !dbg !31
  %349 = insertelement <4 x i32> %348, i32 %198, i64 3, !dbg !31
  %350 = bitcast <4 x i32> %349 to <4 x float>, !dbg !31
  %351 = insertelement <4 x float> poison, float %218, i64 0, !dbg !43
  %352 = insertelement <4 x float> %351, float %219, i64 1, !dbg !43
  %353 = insertelement <4 x float> %352, float %220, i64 2, !dbg !43
  %354 = insertelement <4 x float> %353, float %221, i64 3, !dbg !43
  %355 = fmul <4 x float> %340, %354, !dbg !43
  %356 = fmul <4 x float> %355, %350, !dbg !44
  %357 = fadd <4 x float> %356, %345, !dbg !45
  %358 = fcmp olt <4 x float> %357, zeroinitializer, !dbg !46
  %359 = select <4 x i1> %358, <4 x float> zeroinitializer, <4 x float> %357, !dbg !50
  %360 = fcmp ole <4 x float> %359, zeroinitializer, !dbg !51
  %361 = extractelement <4 x float> %359, i64 0, !dbg !40
  %362 = bitcast float %361 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %362, i1 true) #4, !dbg !40
  %363 = extractelement <4 x float> %359, i64 1, !dbg !40
  %364 = bitcast float %363 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %364, i1 true) #4, !dbg !40
  %365 = extractelement <4 x float> %359, i64 2, !dbg !40
  %366 = bitcast float %365 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %366, i1 true) #4, !dbg !40
  %367 = extractelement <4 x float> %359, i64 3, !dbg !40
  %368 = bitcast float %367 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %368, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %369 = load i32, ptr addrspace(3) %267, align 4, !dbg !40
  %370 = load i32, ptr addrspace(3) %269, align 4, !dbg !40
  %371 = load i32, ptr addrspace(3) %271, align 4, !dbg !40
  %372 = load i32, ptr addrspace(3) %273, align 4, !dbg !40
  %373 = load i32, ptr addrspace(3) %277, align 4, !dbg !40
  %374 = load i32, ptr addrspace(3) %281, align 4, !dbg !40
  %375 = load i32, ptr addrspace(3) %285, align 4, !dbg !40
  %376 = load i32, ptr addrspace(3) %289, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %370, i32 %371, i32 %372, ptr addrspace(1) %227, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %373, i32 %374, i32 %375, i32 %376, ptr addrspace(1) %229, i1 true) #4, !dbg !40
  %377 = zext <4 x i1> %321 to <4 x i8>, !dbg !52
  %378 = bitcast <4 x i8> %377 to i32, !dbg !52
  %379 = zext <4 x i1> %360 to <4 x i8>, !dbg !52
  %380 = bitcast <4 x i8> %379 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %378, i32 %380, ptr addrspace(1) %290, i1 true) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 52, column: 47, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 21, scope: !7)
!52 = !DILocation(line: 53, column: 59, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
