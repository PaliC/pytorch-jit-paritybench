; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = lshr i32 %13, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = and i32 %13, 256, !dbg !12
  %18 = lshr exact i32 %17, 4, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = or disjoint i32 %19, 32, !dbg !12
  %21 = or disjoint i32 %12, %14, !dbg !13
  %22 = or disjoint i32 %12, %19, !dbg !13
  %23 = or disjoint i32 %12, %20, !dbg !13
  %24 = icmp slt i32 %21, 256, !dbg !14
  %25 = icmp slt i32 %22, 256, !dbg !14
  %26 = icmp slt i32 %23, 256, !dbg !14
  %27 = lshr i32 %13, 6, !dbg !15
  %.lobit2 = and i32 %27, 1, !dbg !15
  %28 = lshr i32 %13, 6, !dbg !15
  %29 = and i32 %28, 2, !dbg !15
  %30 = or disjoint i32 %.lobit2, %29, !dbg !15
  %31 = lshr exact i32 %17, 6, !dbg !15
  %32 = or disjoint i32 %30, %31, !dbg !15
  %33 = or disjoint i32 %32, 8, !dbg !15
  %34 = or disjoint i32 %32, 24, !dbg !15
  %35 = or disjoint i32 %32, 40, !dbg !15
  %36 = or disjoint i32 %32, 56, !dbg !15
  %37 = shl i32 %13, 2, !dbg !15
  %38 = and i32 %37, 60, !dbg !15
  %39 = srem i32 %21, 64, !dbg !16
  %40 = shl nsw i32 %39, 1, !dbg !17
  %41 = shl i32 %22, 13, !dbg !18
  %42 = shl i32 %23, 13, !dbg !18
  %43 = shl i32 %21, 10, !dbg !19
  %44 = sext i32 %43 to i64, !dbg !20
  %45 = and i32 %34, 15
  %46 = and i32 %35, 15
  %47 = and i32 %36, 15
  %48 = zext nneg i32 %32 to i64
  %49 = getelementptr i64, ptr addrspace(1) %0, i64 %48
  %50 = zext nneg i32 %33 to i64
  %51 = getelementptr i64, ptr addrspace(1) %0, i64 %50
  %52 = zext nneg i32 %45 to i64
  %53 = getelementptr i64, ptr addrspace(1) %0, i64 %52
  %54 = zext nneg i32 %46 to i64
  %55 = getelementptr i64, ptr addrspace(1) %0, i64 %54
  %56 = zext nneg i32 %47 to i64
  %57 = getelementptr i64, ptr addrspace(1) %0, i64 %56
  %58 = shl i32 %13, 8
  %59 = and i32 %58, 3840
  %.reass = or disjoint i32 %59, %16
  %60 = or disjoint i32 %.reass, %18
  %61 = and i32 %13, 511
  %62 = lshr exact i32 %59, 4
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %62
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %60
  %65 = or disjoint i32 %60, 64
  %66 = lshr i32 %65, 6
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65
  %69 = or disjoint i32 %60, 128
  %70 = lshr i32 %69, 6
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69
  %73 = or disjoint i32 %60, 192
  %74 = lshr i32 %73, 6
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73
  %77 = or disjoint i32 %60, 32
  %78 = getelementptr float, ptr addrspace(3) %63, i32 %77
  %79 = or disjoint i32 %60, 96
  %80 = lshr i32 %79, 6
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79
  %83 = or disjoint i32 %60, 160
  %84 = lshr i32 %83, 6
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83
  %87 = or disjoint i32 %60, 224
  %88 = lshr i32 %87, 6
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87
  %91 = lshr i32 %61, 6
  %92 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %91
  %93 = getelementptr inbounds float, ptr addrspace(3) %92, i32 %61
  %94 = or disjoint i32 %61, 512
  %95 = lshr i32 %94, 6
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94
  %98 = or disjoint i32 %61, 1024
  %99 = lshr i32 %98, 6
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %98
  %102 = or disjoint i32 %61, 1536
  %103 = lshr i32 %102, 6
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %102
  %106 = or disjoint i32 %61, 2048
  %107 = lshr i32 %106, 6
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %106
  %110 = or disjoint i32 %61, 2560
  %111 = lshr i32 %110, 6
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110
  %114 = or disjoint i32 %61, 3072
  %115 = lshr i32 %114, 6
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114
  %118 = or disjoint i32 %61, 3584
  %119 = lshr i32 %118, 6
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %118
  %122 = shl i32 %13, 6
  %123 = and i32 %122, 4032
  %.reass56 = or disjoint i32 %123, %32
  %124 = and i32 %37, 2044
  %125 = lshr exact i32 %123, 2
  %126 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %125
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %.reass56
  %128 = or disjoint i32 %.reass56, 8
  %129 = getelementptr float, ptr addrspace(3) %126, i32 %128
  %130 = or disjoint i32 %.reass56, 16
  %131 = getelementptr float, ptr addrspace(3) %126, i32 %130
  %132 = or disjoint i32 %.reass56, 24
  %133 = getelementptr float, ptr addrspace(3) %126, i32 %132
  %134 = or disjoint i32 %.reass56, 32
  %135 = getelementptr float, ptr addrspace(3) %126, i32 %134
  %136 = or disjoint i32 %.reass56, 40
  %137 = getelementptr float, ptr addrspace(3) %126, i32 %136
  %138 = or disjoint i32 %.reass56, 48
  %139 = getelementptr float, ptr addrspace(3) %126, i32 %138
  %140 = or disjoint i32 %.reass56, 56
  %141 = getelementptr float, ptr addrspace(3) %126, i32 %140
  %142 = lshr i32 %37, 4
  %143 = and i32 %142, 124
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %124
  %146 = or disjoint i32 %124, 2048
  %147 = lshr i32 %146, 4
  %148 = and i32 %147, 252
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %146
  %151 = zext nneg i32 %38 to i64, !dbg !21
  %152 = sext i32 %41 to i64, !dbg !21
  %153 = sext i32 %42 to i64, !dbg !21
  %154 = zext nneg i32 %36 to i64, !dbg !21
  %155 = zext nneg i32 %35 to i64, !dbg !21
  %156 = zext nneg i32 %34 to i64, !dbg !21
  %157 = zext nneg i32 %33 to i64, !dbg !21
  %158 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 4
  %159 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 8
  %160 = getelementptr inbounds i8, ptr addrspace(3) %145, i32 12
  %161 = insertelement <8 x i1> poison, i1 %24, i64 0, !dbg !22
  %162 = shufflevector <8 x i1> %161, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !22
  br label %163, !dbg !21

163:                                              ; preds = %10, %._crit_edge
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %._crit_edge ]
  %164 = phi float [ 0.000000e+00, %10 ], [ %576, %._crit_edge ]
  %165 = phi float [ 0.000000e+00, %10 ], [ %577, %._crit_edge ]
  %166 = phi float [ 0.000000e+00, %10 ], [ %578, %._crit_edge ]
  %167 = phi float [ 0.000000e+00, %10 ], [ %579, %._crit_edge ]
  %168 = phi float [ 0.000000e+00, %10 ], [ %580, %._crit_edge ]
  %169 = phi float [ 0.000000e+00, %10 ], [ %581, %._crit_edge ]
  %170 = phi float [ 0.000000e+00, %10 ], [ %582, %._crit_edge ]
  %171 = phi float [ 0.000000e+00, %10 ], [ %583, %._crit_edge ]
  %172 = phi float [ 0.000000e+00, %10 ], [ %568, %._crit_edge ]
  %173 = phi float [ 0.000000e+00, %10 ], [ %569, %._crit_edge ]
  %174 = phi float [ 0.000000e+00, %10 ], [ %570, %._crit_edge ]
  %175 = phi float [ 0.000000e+00, %10 ], [ %571, %._crit_edge ]
  %176 = phi float [ 0.000000e+00, %10 ], [ %572, %._crit_edge ]
  %177 = phi float [ 0.000000e+00, %10 ], [ %573, %._crit_edge ]
  %178 = phi float [ 0.000000e+00, %10 ], [ %574, %._crit_edge ]
  %179 = phi float [ 0.000000e+00, %10 ], [ %575, %._crit_edge ]
  %180 = phi <8 x float> [ zeroinitializer, %10 ], [ %567, %._crit_edge ]
  %181 = or disjoint i64 %indvars.iv, %157, !dbg !23
  %182 = or disjoint i64 %indvars.iv, %156, !dbg !23
  %183 = or disjoint i64 %indvars.iv, %155, !dbg !23
  %184 = or disjoint i64 %indvars.iv, %154, !dbg !23
  %185 = or disjoint i64 %indvars.iv, %151, !dbg !23
  %186 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !24
  %187 = lshr i64 %indvars.iv, 8, !dbg !24
  %188 = trunc nuw nsw i64 %181 to i32, !dbg !24
  %189 = lshr i64 %181, 8, !dbg !24
  %190 = trunc nuw nsw i64 %182 to i32, !dbg !24
  %191 = lshr i64 %182, 8, !dbg !24
  %192 = trunc nuw nsw i64 %183 to i32, !dbg !24
  %193 = lshr i64 %183, 8, !dbg !24
  %194 = trunc nuw nsw i64 %184 to i32, !dbg !24
  %195 = lshr i64 %184, 8, !dbg !24
  %196 = and i64 %187, 15, !dbg !25
  %197 = and i64 %189, 15, !dbg !25
  %198 = and i64 %191, 15, !dbg !25
  %199 = and i64 %193, 15, !dbg !25
  %200 = and i64 %195, 15, !dbg !25
  %201 = trunc i64 %indvars.iv to i32, !dbg !26
  %202 = lshr exact i32 %201, 4, !dbg !26
  %203 = and i32 %202, 12, !dbg !26
  %204 = lshr i64 %181, 4, !dbg !26
  %205 = and i64 %204, 15, !dbg !26
  %206 = or disjoint i32 %203, 1, !dbg !26
  %207 = lshr i64 %182, 4, !dbg !26
  %208 = and i64 %207, 15, !dbg !26
  %209 = or disjoint i32 %203, 2, !dbg !26
  %210 = lshr i64 %183, 4, !dbg !26
  %211 = and i64 %210, 15, !dbg !26
  %212 = or disjoint i32 %203, 3, !dbg !26
  %213 = lshr i64 %184, 4, !dbg !26
  %214 = and i64 %213, 15, !dbg !26
  %215 = lshr i32 %186, 12, !dbg !27
  %216 = lshr i32 %188, 12, !dbg !27
  %217 = lshr i32 %190, 12, !dbg !27
  %218 = lshr i32 %192, 12, !dbg !27
  %219 = lshr i32 %194, 12, !dbg !27
  %220 = getelementptr i64, ptr addrspace(1) %0, i64 %196, !dbg !28
  %221 = getelementptr i64, ptr addrspace(1) %0, i64 %197, !dbg !28
  %222 = getelementptr i64, ptr addrspace(1) %0, i64 %198, !dbg !28
  %223 = getelementptr i64, ptr addrspace(1) %0, i64 %199, !dbg !28
  %224 = getelementptr i64, ptr addrspace(1) %0, i64 %200, !dbg !28
  %225 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %220, i1 true, i1 true) #3, !dbg !29
  %226 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %221, i1 true, i1 true) #3, !dbg !29
  %227 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %220, i1 true, i1 true) #3, !dbg !29
  %228 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %222, i1 true, i1 true) #3, !dbg !29
  %229 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %220, i1 true, i1 true) #3, !dbg !29
  %230 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %223, i1 true, i1 true) #3, !dbg !29
  %231 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %220, i1 true, i1 true) #3, !dbg !29
  %232 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %224, i1 true, i1 true) #3, !dbg !29
  %233 = zext nneg i32 %203 to i64, !dbg !30
  %234 = getelementptr i64, ptr addrspace(1) %0, i64 %233, !dbg !30
  %235 = getelementptr i64, ptr addrspace(1) %0, i64 %205, !dbg !30
  %236 = zext nneg i32 %206 to i64, !dbg !30
  %237 = getelementptr i64, ptr addrspace(1) %0, i64 %236, !dbg !30
  %238 = getelementptr i64, ptr addrspace(1) %0, i64 %208, !dbg !30
  %239 = zext nneg i32 %209 to i64, !dbg !30
  %240 = getelementptr i64, ptr addrspace(1) %0, i64 %239, !dbg !30
  %241 = getelementptr i64, ptr addrspace(1) %0, i64 %211, !dbg !30
  %242 = zext nneg i32 %212 to i64, !dbg !30
  %243 = getelementptr i64, ptr addrspace(1) %0, i64 %242, !dbg !30
  %244 = getelementptr i64, ptr addrspace(1) %0, i64 %214, !dbg !30
  %245 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %234, i1 true, i1 true) #3, !dbg !31
  %246 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %235, i1 true, i1 true) #3, !dbg !31
  %247 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %237, i1 true, i1 true) #3, !dbg !31
  %248 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %238, i1 true, i1 true) #3, !dbg !31
  %249 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %240, i1 true, i1 true) #3, !dbg !31
  %250 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %241, i1 true, i1 true) #3, !dbg !31
  %251 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %243, i1 true, i1 true) #3, !dbg !31
  %252 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %244, i1 true, i1 true) #3, !dbg !31
  %253 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #3, !dbg !32
  %254 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %51, i1 true, i1 true) #3, !dbg !32
  %255 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #3, !dbg !32
  %256 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %53, i1 true, i1 true) #3, !dbg !32
  %257 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #3, !dbg !32
  %258 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %55, i1 true, i1 true) #3, !dbg !32
  %259 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #3, !dbg !32
  %260 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %57, i1 true, i1 true) #3, !dbg !32
  %261 = or disjoint i32 %215, %40, !dbg !33
  %262 = add nsw i32 %216, %40, !dbg !33
  %263 = add nsw i32 %215, %40, !dbg !33
  %264 = add nsw i32 %217, %40, !dbg !33
  %265 = add nsw i32 %218, %40, !dbg !33
  %266 = add nsw i32 %219, %40, !dbg !33
  %267 = sext i32 %261 to i64, !dbg !34
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !34
  %269 = sext i32 %262 to i64, !dbg !34
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !34
  %271 = sext i32 %263 to i64, !dbg !34
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !34
  %273 = sext i32 %264 to i64, !dbg !34
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !34
  %275 = sext i32 %265 to i64, !dbg !34
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !34
  %277 = sext i32 %266 to i64, !dbg !34
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !34
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %24, i32 0, i1 %24) #3, !dbg !35
  %287 = add nuw nsw i64 %185, %152, !dbg !36
  %288 = add nuw nsw i64 %185, %153, !dbg !36
  %289 = getelementptr float, ptr addrspace(1) %3, i64 %287, !dbg !37
  %290 = getelementptr float, ptr addrspace(1) %3, i64 %288, !dbg !37
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %289, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !38
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !38
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !38
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !38
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !38
  %296 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %290, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !38
  %297 = extractvalue { i32, i32, i32, i32 } %296, 0, !dbg !38
  %298 = extractvalue { i32, i32, i32, i32 } %296, 1, !dbg !38
  %299 = extractvalue { i32, i32, i32, i32 } %296, 2, !dbg !38
  %300 = extractvalue { i32, i32, i32, i32 } %296, 3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %301 = insertelement <1 x i32> poison, i32 %292, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %301, i1 true) #3, !dbg !38
  %302 = insertelement <1 x i32> poison, i32 %293, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %302, i1 true) #3, !dbg !38
  %303 = insertelement <1 x i32> poison, i32 %294, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %303, i1 true) #3, !dbg !38
  %304 = insertelement <1 x i32> poison, i32 %295, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %304, i1 true) #3, !dbg !38
  %305 = insertelement <1 x i32> poison, i32 %297, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %305, i1 true) #3, !dbg !38
  %306 = insertelement <1 x i32> poison, i32 %298, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %306, i1 true) #3, !dbg !38
  %307 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %307, i1 true) #3, !dbg !38
  %308 = insertelement <1 x i32> poison, i32 %300, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %308, i1 true) #3, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %309 = load float, ptr addrspace(3) %93, align 4, !dbg !38
  %310 = load float, ptr addrspace(3) %97, align 4, !dbg !38
  %311 = load float, ptr addrspace(3) %101, align 4, !dbg !38
  %312 = load float, ptr addrspace(3) %105, align 4, !dbg !38
  %313 = load float, ptr addrspace(3) %109, align 4, !dbg !38
  %314 = load float, ptr addrspace(3) %113, align 4, !dbg !38
  %315 = load float, ptr addrspace(3) %117, align 4, !dbg !38
  %316 = load float, ptr addrspace(3) %121, align 4, !dbg !38
  %317 = lshr i64 %225, 60, !dbg !39
  %318 = and i64 %317, 8, !dbg !39
  %319 = add i64 %318, %225, !dbg !39
  %320 = lshr i64 %226, 60, !dbg !39
  %321 = and i64 %320, 8, !dbg !39
  %322 = add i64 %321, %226, !dbg !39
  %323 = lshr i64 %227, 60, !dbg !39
  %324 = and i64 %323, 8, !dbg !39
  %325 = add i64 %324, %227, !dbg !39
  %326 = lshr i64 %228, 60, !dbg !39
  %327 = and i64 %326, 8, !dbg !39
  %328 = add i64 %327, %228, !dbg !39
  %329 = lshr i64 %229, 60, !dbg !39
  %330 = and i64 %329, 8, !dbg !39
  %331 = add i64 %330, %229, !dbg !39
  %332 = lshr i64 %230, 60, !dbg !39
  %333 = and i64 %332, 8, !dbg !39
  %334 = add i64 %333, %230, !dbg !39
  %335 = lshr i64 %231, 60, !dbg !39
  %336 = and i64 %335, 8, !dbg !39
  %337 = add i64 %336, %231, !dbg !39
  %338 = lshr i64 %232, 60, !dbg !39
  %339 = and i64 %338, 8, !dbg !39
  %340 = add i64 %339, %232, !dbg !39
  %341 = lshr i64 %245, 60, !dbg !40
  %342 = and i64 %341, 8, !dbg !40
  %343 = add i64 %342, %245, !dbg !40
  %344 = lshr i64 %246, 60, !dbg !40
  %345 = and i64 %344, 8, !dbg !40
  %346 = add i64 %345, %246, !dbg !40
  %347 = lshr i64 %247, 60, !dbg !40
  %348 = and i64 %347, 8, !dbg !40
  %349 = add i64 %348, %247, !dbg !40
  %350 = lshr i64 %248, 60, !dbg !40
  %351 = and i64 %350, 8, !dbg !40
  %352 = add i64 %351, %248, !dbg !40
  %353 = lshr i64 %249, 60, !dbg !40
  %354 = and i64 %353, 8, !dbg !40
  %355 = add i64 %354, %249, !dbg !40
  %356 = lshr i64 %250, 60, !dbg !40
  %357 = and i64 %356, 8, !dbg !40
  %358 = add i64 %357, %250, !dbg !40
  %359 = lshr i64 %251, 60, !dbg !40
  %360 = and i64 %359, 8, !dbg !40
  %361 = add i64 %360, %251, !dbg !40
  %362 = lshr i64 %252, 60, !dbg !40
  %363 = and i64 %362, 8, !dbg !40
  %364 = add i64 %363, %252, !dbg !40
  %365 = lshr i64 %253, 60, !dbg !41
  %366 = and i64 %365, 8, !dbg !41
  %367 = lshr i64 %254, 60, !dbg !41
  %368 = and i64 %367, 8, !dbg !41
  %369 = lshr i64 %255, 60, !dbg !41
  %370 = and i64 %369, 8, !dbg !41
  %371 = lshr i64 %256, 60, !dbg !41
  %372 = and i64 %371, 8, !dbg !41
  %373 = lshr i64 %257, 60, !dbg !41
  %374 = and i64 %373, 8, !dbg !41
  %375 = lshr i64 %258, 60, !dbg !41
  %376 = and i64 %375, 8, !dbg !41
  %377 = lshr i64 %259, 60, !dbg !41
  %378 = and i64 %377, 8, !dbg !41
  %379 = lshr i64 %260, 60, !dbg !41
  %380 = and i64 %379, 8, !dbg !41
  %381 = shl nuw nsw i32 %215, 9, !dbg !42
  %382 = shl nuw nsw i32 %216, 9, !dbg !42
  %383 = shl nuw nsw i32 %217, 9, !dbg !42
  %384 = shl nuw nsw i32 %218, 9, !dbg !42
  %385 = shl nuw nsw i32 %219, 9, !dbg !42
  %386 = zext nneg i32 %381 to i64, !dbg !43
  %387 = zext nneg i32 %382 to i64, !dbg !43
  %388 = zext nneg i32 %383 to i64, !dbg !43
  %389 = zext nneg i32 %384 to i64, !dbg !43
  %390 = zext nneg i32 %385 to i64, !dbg !43
  %391 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !44
  %392 = getelementptr float, ptr addrspace(1) %391, i64 %366, !dbg !44
  %.idx = shl i64 %343, 5, !dbg !44
  %393 = getelementptr i8, ptr addrspace(1) %392, i64 %.idx, !dbg !44
  %.idx4 = shl i64 %319, 8, !dbg !44
  %394 = getelementptr i8, ptr addrspace(1) %393, i64 %.idx4, !dbg !44
  %395 = getelementptr float, ptr addrspace(1) %394, i64 %386, !dbg !44
  %396 = getelementptr float, ptr addrspace(1) %395, i64 %44, !dbg !44
  %397 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !44
  %398 = getelementptr float, ptr addrspace(1) %397, i64 %368, !dbg !44
  %.idx5 = shl i64 %346, 5, !dbg !44
  %399 = getelementptr i8, ptr addrspace(1) %398, i64 %.idx5, !dbg !44
  %.idx6 = shl i64 %322, 8, !dbg !44
  %400 = getelementptr i8, ptr addrspace(1) %399, i64 %.idx6, !dbg !44
  %401 = getelementptr float, ptr addrspace(1) %400, i64 %387, !dbg !44
  %402 = getelementptr float, ptr addrspace(1) %401, i64 %44, !dbg !44
  %403 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !44
  %404 = getelementptr float, ptr addrspace(1) %403, i64 %370, !dbg !44
  %.idx7 = shl i64 %349, 5, !dbg !44
  %405 = getelementptr i8, ptr addrspace(1) %404, i64 %.idx7, !dbg !44
  %.idx8 = shl i64 %325, 8, !dbg !44
  %406 = getelementptr i8, ptr addrspace(1) %405, i64 %.idx8, !dbg !44
  %407 = getelementptr float, ptr addrspace(1) %406, i64 %386, !dbg !44
  %408 = getelementptr float, ptr addrspace(1) %407, i64 %44, !dbg !44
  %409 = getelementptr float, ptr addrspace(1) %1, i64 %256, !dbg !44
  %410 = getelementptr float, ptr addrspace(1) %409, i64 %372, !dbg !44
  %.idx9 = shl i64 %352, 5, !dbg !44
  %411 = getelementptr i8, ptr addrspace(1) %410, i64 %.idx9, !dbg !44
  %.idx10 = shl i64 %328, 8, !dbg !44
  %412 = getelementptr i8, ptr addrspace(1) %411, i64 %.idx10, !dbg !44
  %413 = getelementptr float, ptr addrspace(1) %412, i64 %388, !dbg !44
  %414 = getelementptr float, ptr addrspace(1) %413, i64 %44, !dbg !44
  %415 = getelementptr float, ptr addrspace(1) %1, i64 %257, !dbg !44
  %416 = getelementptr float, ptr addrspace(1) %415, i64 %374, !dbg !44
  %.idx11 = shl i64 %355, 5, !dbg !44
  %417 = getelementptr i8, ptr addrspace(1) %416, i64 %.idx11, !dbg !44
  %.idx12 = shl i64 %331, 8, !dbg !44
  %418 = getelementptr i8, ptr addrspace(1) %417, i64 %.idx12, !dbg !44
  %419 = getelementptr float, ptr addrspace(1) %418, i64 %386, !dbg !44
  %420 = getelementptr float, ptr addrspace(1) %419, i64 %44, !dbg !44
  %421 = getelementptr float, ptr addrspace(1) %1, i64 %258, !dbg !44
  %422 = getelementptr float, ptr addrspace(1) %421, i64 %376, !dbg !44
  %.idx13 = shl i64 %358, 5, !dbg !44
  %423 = getelementptr i8, ptr addrspace(1) %422, i64 %.idx13, !dbg !44
  %.idx14 = shl i64 %334, 8, !dbg !44
  %424 = getelementptr i8, ptr addrspace(1) %423, i64 %.idx14, !dbg !44
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %389, !dbg !44
  %426 = getelementptr float, ptr addrspace(1) %425, i64 %44, !dbg !44
  %427 = getelementptr float, ptr addrspace(1) %1, i64 %259, !dbg !44
  %428 = getelementptr float, ptr addrspace(1) %427, i64 %378, !dbg !44
  %.idx15 = shl i64 %361, 5, !dbg !44
  %429 = getelementptr i8, ptr addrspace(1) %428, i64 %.idx15, !dbg !44
  %.idx16 = shl i64 %337, 8, !dbg !44
  %430 = getelementptr i8, ptr addrspace(1) %429, i64 %.idx16, !dbg !44
  %431 = getelementptr float, ptr addrspace(1) %430, i64 %386, !dbg !44
  %432 = getelementptr float, ptr addrspace(1) %431, i64 %44, !dbg !44
  %433 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !44
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %380, !dbg !44
  %.idx17 = shl i64 %364, 5, !dbg !44
  %435 = getelementptr i8, ptr addrspace(1) %434, i64 %.idx17, !dbg !44
  %.idx18 = shl i64 %340, 8, !dbg !44
  %436 = getelementptr i8, ptr addrspace(1) %435, i64 %.idx18, !dbg !44
  %437 = getelementptr float, ptr addrspace(1) %436, i64 %390, !dbg !44
  %438 = getelementptr float, ptr addrspace(1) %437, i64 %44, !dbg !44
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %396, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %440 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %402, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %441 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %442 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %414, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %443 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %420, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %444 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %426, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %445 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %432, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %446 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %24, i32 0, i1 %24) #3, !dbg !45
  %447 = insertelement <8 x i32> poison, i32 %279, i64 0, !dbg !35
  %448 = insertelement <8 x i32> %447, i32 %280, i64 1, !dbg !35
  %449 = insertelement <8 x i32> %448, i32 %281, i64 2, !dbg !35
  %450 = insertelement <8 x i32> %449, i32 %282, i64 3, !dbg !35
  %451 = insertelement <8 x i32> %450, i32 %283, i64 4, !dbg !35
  %452 = insertelement <8 x i32> %451, i32 %284, i64 5, !dbg !35
  %453 = insertelement <8 x i32> %452, i32 %285, i64 6, !dbg !35
  %454 = insertelement <8 x i32> %453, i32 %286, i64 7, !dbg !35
  %455 = bitcast <8 x i32> %454 to <8 x float>, !dbg !35
  %456 = insertelement <8 x i32> poison, i32 %439, i64 0, !dbg !45
  %457 = insertelement <8 x i32> %456, i32 %440, i64 1, !dbg !45
  %458 = insertelement <8 x i32> %457, i32 %441, i64 2, !dbg !45
  %459 = insertelement <8 x i32> %458, i32 %442, i64 3, !dbg !45
  %460 = insertelement <8 x i32> %459, i32 %443, i64 4, !dbg !45
  %461 = insertelement <8 x i32> %460, i32 %444, i64 5, !dbg !45
  %462 = insertelement <8 x i32> %461, i32 %445, i64 6, !dbg !45
  %463 = insertelement <8 x i32> %462, i32 %446, i64 7, !dbg !45
  %464 = bitcast <8 x i32> %463 to <8 x float>, !dbg !45
  %465 = fadd <8 x float> %455, %464, !dbg !46
  %466 = insertelement <8 x float> poison, float %309, i64 0, !dbg !47
  %467 = insertelement <8 x float> %466, float %310, i64 1, !dbg !47
  %468 = insertelement <8 x float> %467, float %311, i64 2, !dbg !47
  %469 = insertelement <8 x float> %468, float %312, i64 3, !dbg !47
  %470 = insertelement <8 x float> %469, float %313, i64 4, !dbg !47
  %471 = insertelement <8 x float> %470, float %314, i64 5, !dbg !47
  %472 = insertelement <8 x float> %471, float %315, i64 6, !dbg !47
  %473 = insertelement <8 x float> %472, float %316, i64 7, !dbg !47
  %474 = fadd <8 x float> %473, %465, !dbg !47
  %475 = icmp eq i64 %indvars.iv, 0, !dbg !48
  br i1 %475, label %._crit_edge, label %476, !dbg !49

476:                                              ; preds = %163
  %477 = fsub <8 x float> %474, %180, !dbg !53
  %478 = extractelement <8 x float> %477, i64 0, !dbg !53
  %479 = fsub <8 x float> %474, %180, !dbg !53
  %480 = extractelement <8 x float> %479, i64 1, !dbg !53
  %481 = fsub <8 x float> %474, %180, !dbg !53
  %482 = extractelement <8 x float> %481, i64 2, !dbg !53
  %483 = fsub <8 x float> %474, %180, !dbg !53
  %484 = extractelement <8 x float> %483, i64 3, !dbg !53
  %485 = fsub <8 x float> %474, %180, !dbg !53
  %486 = extractelement <8 x float> %485, i64 4, !dbg !53
  %487 = fsub <8 x float> %474, %180, !dbg !53
  %488 = extractelement <8 x float> %487, i64 5, !dbg !53
  %489 = fsub <8 x float> %474, %180, !dbg !53
  %490 = extractelement <8 x float> %489, i64 6, !dbg !53
  %491 = fsub <8 x float> %474, %180, !dbg !53
  %492 = extractelement <8 x float> %491, i64 7, !dbg !53
  %493 = fadd float %164, 1.000000e+00, !dbg !54
  %494 = fadd float %165, 1.000000e+00, !dbg !54
  %495 = fadd float %166, 1.000000e+00, !dbg !54
  %496 = fadd float %167, 1.000000e+00, !dbg !54
  %497 = fadd float %168, 1.000000e+00, !dbg !54
  %498 = fadd float %169, 1.000000e+00, !dbg !54
  %499 = fadd float %170, 1.000000e+00, !dbg !54
  %500 = fadd float %171, 1.000000e+00, !dbg !54
  %501 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %493) #3, !dbg !55
  %502 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %480, float %494) #3, !dbg !55
  %503 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %482, float %495) #3, !dbg !55
  %504 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %484, float %496) #3, !dbg !55
  %505 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %486, float %497) #3, !dbg !55
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %488, float %498) #3, !dbg !55
  %507 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %490, float %499) #3, !dbg !55
  %508 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %492, float %500) #3, !dbg !55
  %509 = insertelement <8 x float> poison, float %501, i64 0, !dbg !56
  %510 = insertelement <8 x float> %509, float %502, i64 1, !dbg !56
  %511 = insertelement <8 x float> %510, float %503, i64 2, !dbg !56
  %512 = insertelement <8 x float> %511, float %504, i64 3, !dbg !56
  %513 = insertelement <8 x float> %512, float %505, i64 4, !dbg !56
  %514 = insertelement <8 x float> %513, float %506, i64 5, !dbg !56
  %515 = insertelement <8 x float> %514, float %507, i64 6, !dbg !56
  %516 = insertelement <8 x float> %515, float %508, i64 7, !dbg !56
  %517 = fadd <8 x float> %180, %516, !dbg !56
  %518 = fsub <8 x float> %474, %517, !dbg !57
  %519 = fsub <8 x float> %474, %517, !dbg !57
  %520 = fsub <8 x float> %474, %517, !dbg !57
  %521 = fsub <8 x float> %474, %517, !dbg !57
  %522 = fsub <8 x float> %474, %517, !dbg !57
  %523 = fsub <8 x float> %474, %517, !dbg !57
  %524 = fsub <8 x float> %474, %517, !dbg !57
  %525 = fsub <8 x float> %474, %517, !dbg !57
  %526 = fmul <8 x float> %477, %518, !dbg !58
  %527 = extractelement <8 x float> %526, i64 0, !dbg !58
  %528 = fmul <8 x float> %479, %519, !dbg !58
  %529 = extractelement <8 x float> %528, i64 1, !dbg !58
  %530 = fmul <8 x float> %481, %520, !dbg !58
  %531 = extractelement <8 x float> %530, i64 2, !dbg !58
  %532 = fmul <8 x float> %483, %521, !dbg !58
  %533 = extractelement <8 x float> %532, i64 3, !dbg !58
  %534 = fmul <8 x float> %485, %522, !dbg !58
  %535 = extractelement <8 x float> %534, i64 4, !dbg !58
  %536 = fmul <8 x float> %487, %523, !dbg !58
  %537 = extractelement <8 x float> %536, i64 5, !dbg !58
  %538 = fmul <8 x float> %489, %524, !dbg !58
  %539 = extractelement <8 x float> %538, i64 6, !dbg !58
  %540 = fmul <8 x float> %491, %525, !dbg !58
  %541 = extractelement <8 x float> %540, i64 7, !dbg !58
  %542 = fadd float %172, %527, !dbg !59
  %543 = fadd float %173, %529, !dbg !59
  %544 = fadd float %174, %531, !dbg !59
  %545 = fadd float %175, %533, !dbg !59
  %546 = fadd float %176, %535, !dbg !59
  %547 = fadd float %177, %537, !dbg !59
  %548 = fadd float %178, %539, !dbg !59
  %549 = fadd float %179, %541, !dbg !59
  br label %._crit_edge, !dbg !49

._crit_edge:                                      ; preds = %163, %476
  %550 = phi float [ %542, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %551 = phi float [ %543, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %552 = phi float [ %544, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %553 = phi float [ %545, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %554 = phi float [ %546, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %555 = phi float [ %547, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %556 = phi float [ %548, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %557 = phi float [ %549, %476 ], [ 0.000000e+00, %163 ], !dbg !52
  %558 = phi float [ %493, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %559 = phi float [ %494, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %560 = phi float [ %495, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %561 = phi float [ %496, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %562 = phi float [ %497, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %563 = phi float [ %498, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %564 = phi float [ %499, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %565 = phi float [ %500, %476 ], [ 1.000000e+00, %163 ], !dbg !52
  %566 = phi <8 x float> [ %517, %476 ], [ %474, %163 ]
  %567 = select <8 x i1> %162, <8 x float> %566, <8 x float> %180, !dbg !22
  %568 = select i1 %24, float %550, float %172, !dbg !60
  %569 = select i1 %24, float %551, float %173, !dbg !60
  %570 = select i1 %24, float %552, float %174, !dbg !60
  %571 = select i1 %24, float %553, float %175, !dbg !60
  %572 = select i1 %24, float %554, float %176, !dbg !60
  %573 = select i1 %24, float %555, float %177, !dbg !60
  %574 = select i1 %24, float %556, float %178, !dbg !60
  %575 = select i1 %24, float %557, float %179, !dbg !60
  %576 = select i1 %24, float %558, float %164, !dbg !61
  %577 = select i1 %24, float %559, float %165, !dbg !61
  %578 = select i1 %24, float %560, float %166, !dbg !61
  %579 = select i1 %24, float %561, float %167, !dbg !61
  %580 = select i1 %24, float %562, float %168, !dbg !61
  %581 = select i1 %24, float %563, float %169, !dbg !61
  %582 = select i1 %24, float %564, float %170, !dbg !61
  %583 = select i1 %24, float %565, float %171, !dbg !61
  %584 = getelementptr float, ptr addrspace(1) %4, i64 %287, !dbg !62
  %585 = getelementptr float, ptr addrspace(1) %4, i64 %288, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %586 = extractelement <8 x float> %474, i64 0, !dbg !63
  %587 = bitcast float %586 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %587, i1 true) #3, !dbg !63
  %588 = extractelement <8 x float> %474, i64 1, !dbg !63
  %589 = bitcast float %588 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %589, i1 true) #3, !dbg !63
  %590 = extractelement <8 x float> %474, i64 2, !dbg !63
  %591 = bitcast float %590 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %591, i1 true) #3, !dbg !63
  %592 = extractelement <8 x float> %474, i64 3, !dbg !63
  %593 = bitcast float %592 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %593, i1 true) #3, !dbg !63
  %594 = extractelement <8 x float> %474, i64 4, !dbg !63
  %595 = bitcast float %594 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %595, i1 true) #3, !dbg !63
  %596 = extractelement <8 x float> %474, i64 5, !dbg !63
  %597 = bitcast float %596 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %597, i1 true) #3, !dbg !63
  %598 = extractelement <8 x float> %474, i64 6, !dbg !63
  %599 = bitcast float %598 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %599, i1 true) #3, !dbg !63
  %600 = extractelement <8 x float> %474, i64 7, !dbg !63
  %601 = bitcast float %600 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %601, i1 true) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %602 = load <4 x i32>, ptr addrspace(3) %150, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %145, align 16, !dbg !63
  %.extract41 = load i32, ptr addrspace(3) %158, align 4, !dbg !63
  %.extract42 = load i32, ptr addrspace(3) %159, align 8, !dbg !63
  %.extract43 = load i32, ptr addrspace(3) %160, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract42, i32 %.extract43, ptr addrspace(1) %584, i1 %25) #3, !dbg !63
  %.extract44 = extractelement <4 x i32> %602, i64 0, !dbg !63
  %.extract45 = extractelement <4 x i32> %602, i64 1, !dbg !63
  %.extract46 = extractelement <4 x i32> %602, i64 2, !dbg !63
  %.extract47 = extractelement <4 x i32> %602, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract45, i32 %.extract46, i32 %.extract47, ptr addrspace(1) %585, i1 %26) #3, !dbg !63
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !21
  %603 = icmp samesign ult i64 %indvars.iv, 8128, !dbg !21
  br i1 %603, label %163, label %604, !dbg !21

604:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %605 = extractelement <8 x float> %567, i64 0, !dbg !66
  %606 = extractelement <8 x float> %567, i64 1, !dbg !66
  %607 = fsub float %606, %605, !dbg !66
  %608 = fadd float %576, %577, !dbg !68
  %609 = fcmp oeq float %608, 0.000000e+00, !dbg !69
  %610 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %577, float %608) #3, !dbg !70
  %611 = select i1 %609, float 0.000000e+00, float %610, !dbg !71
  %612 = fmul float %607, %611, !dbg !72
  %613 = fadd float %605, %612, !dbg !73
  %614 = fadd float %568, %569, !dbg !74
  %615 = fmul float %607, %607, !dbg !75
  %616 = fmul float %615, %576, !dbg !76
  %617 = fmul float %616, %611, !dbg !77
  %618 = fadd float %614, %617, !dbg !78
  %619 = extractelement <8 x float> %567, i64 2, !dbg !66
  %620 = fsub float %619, %613, !dbg !66
  %621 = fadd float %578, %608, !dbg !68
  %622 = fcmp oeq float %621, 0.000000e+00, !dbg !69
  %623 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %578, float %621) #3, !dbg !70
  %624 = select i1 %622, float 0.000000e+00, float %623, !dbg !71
  %625 = fmul float %624, %620, !dbg !72
  %626 = fadd float %613, %625, !dbg !73
  %627 = fadd float %570, %618, !dbg !74
  %628 = fmul float %620, %620, !dbg !75
  %629 = fmul float %608, %628, !dbg !76
  %630 = fmul float %624, %629, !dbg !77
  %631 = fadd float %627, %630, !dbg !78
  %632 = extractelement <8 x float> %567, i64 3, !dbg !66
  %633 = fsub float %632, %626, !dbg !66
  %634 = fadd float %579, %621, !dbg !68
  %635 = fcmp oeq float %634, 0.000000e+00, !dbg !69
  %636 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %579, float %634) #3, !dbg !70
  %637 = select i1 %635, float 0.000000e+00, float %636, !dbg !71
  %638 = fmul float %637, %633, !dbg !72
  %639 = fadd float %626, %638, !dbg !73
  %640 = fadd float %571, %631, !dbg !74
  %641 = fmul float %633, %633, !dbg !75
  %642 = fmul float %621, %641, !dbg !76
  %643 = fmul float %637, %642, !dbg !77
  %644 = fadd float %640, %643, !dbg !78
  %645 = extractelement <8 x float> %567, i64 4, !dbg !66
  %646 = fsub float %645, %639, !dbg !66
  %647 = fadd float %580, %634, !dbg !68
  %648 = fcmp oeq float %647, 0.000000e+00, !dbg !69
  %649 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %580, float %647) #3, !dbg !70
  %650 = select i1 %648, float 0.000000e+00, float %649, !dbg !71
  %651 = fmul float %650, %646, !dbg !72
  %652 = fadd float %639, %651, !dbg !73
  %653 = fadd float %572, %644, !dbg !74
  %654 = fmul float %646, %646, !dbg !75
  %655 = fmul float %634, %654, !dbg !76
  %656 = fmul float %650, %655, !dbg !77
  %657 = fadd float %653, %656, !dbg !78
  %658 = extractelement <8 x float> %567, i64 5, !dbg !66
  %659 = fsub float %658, %652, !dbg !66
  %660 = fadd float %581, %647, !dbg !68
  %661 = fcmp oeq float %660, 0.000000e+00, !dbg !69
  %662 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %581, float %660) #3, !dbg !70
  %663 = select i1 %661, float 0.000000e+00, float %662, !dbg !71
  %664 = fmul float %663, %659, !dbg !72
  %665 = fadd float %652, %664, !dbg !73
  %666 = fadd float %573, %657, !dbg !74
  %667 = fmul float %659, %659, !dbg !75
  %668 = fmul float %647, %667, !dbg !76
  %669 = fmul float %663, %668, !dbg !77
  %670 = fadd float %666, %669, !dbg !78
  %671 = extractelement <8 x float> %567, i64 6, !dbg !66
  %672 = fsub float %671, %665, !dbg !66
  %673 = fadd float %582, %660, !dbg !68
  %674 = fcmp oeq float %673, 0.000000e+00, !dbg !69
  %675 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %582, float %673) #3, !dbg !70
  %676 = select i1 %674, float 0.000000e+00, float %675, !dbg !71
  %677 = fmul float %676, %672, !dbg !72
  %678 = fadd float %665, %677, !dbg !73
  %679 = fadd float %574, %670, !dbg !74
  %680 = fmul float %672, %672, !dbg !75
  %681 = fmul float %660, %680, !dbg !76
  %682 = fmul float %676, %681, !dbg !77
  %683 = fadd float %679, %682, !dbg !78
  %684 = extractelement <8 x float> %567, i64 7, !dbg !66
  %685 = fsub float %684, %678, !dbg !66
  %686 = fadd float %583, %673, !dbg !68
  %687 = fcmp oeq float %686, 0.000000e+00, !dbg !69
  %688 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %583, float %686) #3, !dbg !70
  %689 = select i1 %687, float 0.000000e+00, float %688, !dbg !71
  %690 = fmul float %689, %685, !dbg !72
  %691 = fadd float %678, %690, !dbg !73
  %692 = fadd float %575, %683, !dbg !74
  %693 = fmul float %685, %685, !dbg !75
  %694 = fmul float %673, %693, !dbg !76
  %695 = fmul float %689, %694, !dbg !77
  %696 = fadd float %692, %695, !dbg !78
  %697 = lshr i32 %13, 6, !dbg !64
  %698 = and i32 %697, 7, !dbg !64
  %699 = shl nuw nsw i32 %14, 3, !dbg !64
  %700 = or disjoint i32 %699, %698, !dbg !64
  %701 = getelementptr float, ptr addrspace(3) @global_smem, i32 %700, !dbg !64
  %702 = bitcast float %691 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %701, <1 x i32> %702, i1 true) #3, !dbg !64
  %703 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %700, !dbg !64
  %704 = bitcast float %696 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %703, <1 x i32> %704, i1 true) #3, !dbg !64
  %705 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %700, !dbg !64
  %706 = bitcast float %686 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %705, <1 x i32> %706, i1 true) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %707 = icmp slt i32 %13, 512, !dbg !64
  %708 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !64
  %709 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %708, i1 %707) #3, !dbg !64
  %710 = bitcast i32 %709 to float, !dbg !64
  %711 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %13, !dbg !64
  %712 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %711, i1 %707) #3, !dbg !64
  %713 = bitcast i32 %712 to float, !dbg !64
  %714 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %13, !dbg !64
  %715 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %714, i1 %707) #3, !dbg !64
  %716 = bitcast i32 %715 to float, !dbg !64
  %717 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %709, i32 4, i32 31), !dbg !64
  %718 = bitcast i32 %717 to float, !dbg !64
  %719 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %712, i32 4, i32 31), !dbg !64
  %720 = bitcast i32 %719 to float, !dbg !64
  %721 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %715, i32 4, i32 31), !dbg !64
  %722 = bitcast i32 %721 to float, !dbg !64
  %723 = fsub float %718, %710, !dbg !66
  %724 = fadd float %716, %722, !dbg !68
  %725 = fcmp oeq float %724, 0.000000e+00, !dbg !69
  %726 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %722, float %724) #3, !dbg !70
  %727 = select i1 %725, float 0.000000e+00, float %726, !dbg !71
  %728 = fmul float %723, %727, !dbg !72
  %729 = fadd float %728, %710, !dbg !73
  %730 = fadd float %713, %720, !dbg !74
  %731 = fmul float %723, %723, !dbg !75
  %732 = fmul float %731, %716, !dbg !76
  %733 = fmul float %732, %727, !dbg !77
  %734 = fadd float %730, %733, !dbg !78
  %735 = bitcast float %729 to i32, !dbg !64
  %736 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %735, i32 2, i32 31), !dbg !64
  %737 = bitcast i32 %736 to float, !dbg !64
  %738 = bitcast float %734 to i32, !dbg !64
  %739 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %738, i32 2, i32 31), !dbg !64
  %740 = bitcast i32 %739 to float, !dbg !64
  %741 = bitcast float %724 to i32, !dbg !64
  %742 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %741, i32 2, i32 31), !dbg !64
  %743 = bitcast i32 %742 to float, !dbg !64
  %744 = fsub float %737, %729, !dbg !66
  %745 = fadd float %724, %743, !dbg !68
  %746 = fcmp oeq float %745, 0.000000e+00, !dbg !69
  %747 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %743, float %745) #3, !dbg !70
  %748 = select i1 %746, float 0.000000e+00, float %747, !dbg !71
  %749 = fmul float %744, %748, !dbg !72
  %750 = fadd float %729, %749, !dbg !73
  %751 = fadd float %734, %740, !dbg !74
  %752 = fmul float %744, %744, !dbg !75
  %753 = fmul float %724, %752, !dbg !76
  %754 = fmul float %748, %753, !dbg !77
  %755 = fadd float %751, %754, !dbg !78
  %756 = bitcast float %750 to i32, !dbg !64
  %757 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %756, i32 1, i32 31), !dbg !64
  %758 = bitcast i32 %757 to float, !dbg !64
  %759 = bitcast float %755 to i32, !dbg !64
  %760 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %759, i32 1, i32 31), !dbg !64
  %761 = bitcast i32 %760 to float, !dbg !64
  %762 = bitcast float %745 to i32, !dbg !64
  %763 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %762, i32 1, i32 31), !dbg !64
  %764 = bitcast i32 %763 to float, !dbg !64
  %765 = fsub float %758, %750, !dbg !66
  %766 = fadd float %745, %764, !dbg !68
  %767 = fcmp oeq float %766, 0.000000e+00, !dbg !69
  %768 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %764, float %766) #3, !dbg !70
  %769 = select i1 %767, float 0.000000e+00, float %768, !dbg !71
  %770 = fmul float %765, %769, !dbg !72
  %771 = fadd float %750, %770, !dbg !73
  %772 = fadd float %755, %761, !dbg !74
  %773 = fmul float %765, %765, !dbg !75
  %774 = fmul float %745, %773, !dbg !76
  %775 = fmul float %769, %774, !dbg !77
  %776 = fadd float %772, %775, !dbg !78
  %777 = and i32 %13, 7, !dbg !64
  %778 = icmp eq i32 %777, 0, !dbg !64
  %779 = and i1 %707, %778, !dbg !64
  %780 = bitcast float %771 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %708, <1 x i32> %780, i1 %779) #3, !dbg !64
  %781 = bitcast float %776 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %711, <1 x i32> %781, i1 %779) #3, !dbg !64
  %782 = bitcast float %766 to <1 x i32>, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %714, <1 x i32> %782, i1 %779) #3, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %783 = getelementptr float, ptr addrspace(3) @global_smem, i32 %699, !dbg !64
  %784 = load i32, ptr addrspace(3) %783, align 16, !dbg !64
  %785 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %699, !dbg !64
  %786 = load i32, ptr addrspace(3) %785, align 16, !dbg !64
  %787 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %699, !dbg !64
  %788 = load i32, ptr addrspace(3) %787, align 16, !dbg !64
  %789 = sext i32 %21 to i64, !dbg !79
  %790 = getelementptr float, ptr addrspace(1) %5, i64 %789, !dbg !79
  %791 = icmp eq i32 %698, 0, !dbg !80
  %792 = and i1 %791, %24, !dbg !80
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %784, ptr addrspace(1) %790, i1 %792) #3, !dbg !80
  %793 = getelementptr float, ptr addrspace(1) %6, i64 %789, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %786, ptr addrspace(1) %793, i1 %792) #3, !dbg !82
  %794 = getelementptr float, ptr addrspace(1) %7, i64 %789, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %788, ptr addrspace(1) %794, i1 %792) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctnhk2r467eoeoptdlq6oaxcbntq3dkpsvrynoq6gnxejh5fsqdg.py", directory: "inductor_cache/tn")
!4 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_add_convolution_native_group_norm_26, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", linkageName: "triton_red_fused__unsafe_index_add_convolution_native_group_norm_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 43, column: 45, scope: !7)
!19 = !DILocation(line: 54, column: 76, scope: !7)
!20 = !DILocation(line: 54, column: 71, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 61, column: 62, scope: !7)
!23 = !DILocation(line: 32, column: 27, scope: !7)
!24 = !DILocation(line: 34, column: 25, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 39, column: 34, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 34, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 35, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 43, column: 40, scope: !7)
!37 = !DILocation(line: 43, column: 35, scope: !7)
!38 = !DILocation(line: 43, column: 50, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 50, column: 36, scope: !7)
!41 = !DILocation(line: 53, column: 39, scope: !7)
!42 = !DILocation(line: 54, column: 66, scope: !7)
!43 = !DILocation(line: 54, column: 62, scope: !7)
!44 = !DILocation(line: 54, column: 35, scope: !7)
!45 = !DILocation(line: 54, column: 81, scope: !7)
!46 = !DILocation(line: 55, column: 24, scope: !7)
!47 = !DILocation(line: 56, column: 24, scope: !7)
!48 = !DILocation(line: 59, column: 66, scope: !7)
!49 = !DILocation(line: 178, column: 7, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 59, column: 55, scope: !7)
!53 = !DILocation(line: 183, column: 24, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 184, column: 30, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 185, column: 34, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 185, column: 26, scope: !50, inlinedAt: !52)
!57 = !DILocation(line: 186, column: 39, scope: !50, inlinedAt: !52)
!58 = !DILocation(line: 186, column: 31, scope: !50, inlinedAt: !52)
!59 = !DILocation(line: 186, column: 22, scope: !50, inlinedAt: !52)
!60 = !DILocation(line: 62, column: 58, scope: !7)
!61 = !DILocation(line: 63, column: 66, scope: !7)
!62 = !DILocation(line: 64, column: 29, scope: !7)
!63 = !DILocation(line: 64, column: 51, scope: !7)
!64 = !DILocation(line: 204, column: 46, scope: !50, inlinedAt: !65)
!65 = !DILocation(line: 66, column: 44, scope: !7)
!66 = !DILocation(line: 192, column: 21, scope: !67, inlinedAt: !65)
!67 = distinct !DILexicalBlockFile(scope: !50, file: !51, discriminator: 0)
!68 = !DILocation(line: 193, column: 28, scope: !67, inlinedAt: !65)
!69 = !DILocation(line: 194, column: 39, scope: !67, inlinedAt: !65)
!70 = !DILocation(line: 194, column: 60, scope: !67, inlinedAt: !65)
!71 = !DILocation(line: 194, column: 49, scope: !67, inlinedAt: !65)
!72 = !DILocation(line: 196, column: 25, scope: !67, inlinedAt: !65)
!73 = !DILocation(line: 196, column: 17, scope: !67, inlinedAt: !65)
!74 = !DILocation(line: 197, column: 15, scope: !67, inlinedAt: !65)
!75 = !DILocation(line: 197, column: 30, scope: !67, inlinedAt: !65)
!76 = !DILocation(line: 197, column: 38, scope: !67, inlinedAt: !65)
!77 = !DILocation(line: 197, column: 49, scope: !67, inlinedAt: !65)
!78 = !DILocation(line: 197, column: 22, scope: !67, inlinedAt: !65)
!79 = !DILocation(line: 71, column: 25, scope: !7)
!80 = !DILocation(line: 71, column: 37, scope: !7)
!81 = !DILocation(line: 72, column: 25, scope: !7)
!82 = !DILocation(line: 72, column: 37, scope: !7)
!83 = !DILocation(line: 73, column: 25, scope: !7)
!84 = !DILocation(line: 73, column: 37, scope: !7)
!85 = !DILocation(line: 73, column: 4, scope: !7)
