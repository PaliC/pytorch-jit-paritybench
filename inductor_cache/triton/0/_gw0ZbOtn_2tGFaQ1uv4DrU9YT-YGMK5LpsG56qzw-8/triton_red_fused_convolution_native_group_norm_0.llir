; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 32, !dbg !13
  %18 = shl i32 %8, 13, !dbg !14
  %19 = shl nsw i32 %17, 1, !dbg !15
  %20 = or disjoint i32 %18, %16
  %.idx = shl nuw nsw i32 %16, 3
  %21 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %22 = shl nuw nsw i32 %16, 1
  %23 = or disjoint i32 %22, 2
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23
  %25 = or disjoint i32 %22, 4
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25
  %27 = or disjoint i32 %22, 6
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27
  %.idx1 = shl nuw nsw i32 %11, 3
  %29 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %12, 3
  %30 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %38 = sext i32 %20 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !16
  %39 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 4
  %40 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 8
  %41 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 12
  br label %42, !dbg !16

42:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %43 = phi float [ 0.000000e+00, %7 ], [ %131, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %7 ], [ %132, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %7 ], [ %133, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %7 ], [ %134, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %7 ], [ %127, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %7 ], [ %128, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %7 ], [ %129, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %7 ], [ %130, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %7 ], [ %123, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %124, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %125, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %126, %._crit_edge ]
  %55 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !17
  %56 = lshr i32 %55, 12, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %62 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %62, i1 true) #3, !dbg !19
  %63 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %63, i1 true) #3, !dbg !19
  %64 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %64, i1 true) #3, !dbg !19
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %65, i1 true) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %66 = load float, ptr addrspace(3) %29, align 8, !dbg !19
  %67 = load float, ptr addrspace(3) %30, align 8, !dbg !19
  %68 = load float, ptr addrspace(3) %31, align 8, !dbg !19
  %69 = load float, ptr addrspace(3) %32, align 8, !dbg !19
  %70 = add nuw nsw i32 %56, %19, !dbg !20
  %71 = sext i32 %70 to i64, !dbg !21
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = fadd float %66, %74, !dbg !23
  %82 = fadd float %67, %76, !dbg !23
  %83 = fadd float %68, %78, !dbg !23
  %84 = fadd float %69, %80, !dbg !23
  %85 = icmp eq i64 %indvars.iv, 0, !dbg !24
  br i1 %85, label %._crit_edge, label %86, !dbg !25

86:                                               ; preds = %42
  %87 = fsub float %81, %51, !dbg !29
  %88 = fsub float %82, %52, !dbg !29
  %89 = fsub float %83, %53, !dbg !29
  %90 = fsub float %84, %54, !dbg !29
  %91 = fadd float %43, 1.000000e+00, !dbg !30
  %92 = fadd float %44, 1.000000e+00, !dbg !30
  %93 = fadd float %45, 1.000000e+00, !dbg !30
  %94 = fadd float %46, 1.000000e+00, !dbg !30
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %91) #3, !dbg !31
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float %92) #3, !dbg !31
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %93) #3, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %94) #3, !dbg !31
  %99 = fadd float %51, %95, !dbg !32
  %100 = fadd float %52, %96, !dbg !32
  %101 = fadd float %53, %97, !dbg !32
  %102 = fadd float %54, %98, !dbg !32
  %103 = fsub float %81, %99, !dbg !33
  %104 = fsub float %82, %100, !dbg !33
  %105 = fsub float %83, %101, !dbg !33
  %106 = fsub float %84, %102, !dbg !33
  %107 = fmul float %87, %103, !dbg !34
  %108 = fmul float %88, %104, !dbg !34
  %109 = fmul float %89, %105, !dbg !34
  %110 = fmul float %90, %106, !dbg !34
  %111 = fadd float %47, %107, !dbg !35
  %112 = fadd float %48, %108, !dbg !35
  %113 = fadd float %49, %109, !dbg !35
  %114 = fadd float %50, %110, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %42, %86
  %115 = phi float [ %111, %86 ], [ 0.000000e+00, %42 ], !dbg !28
  %116 = phi float [ %112, %86 ], [ 0.000000e+00, %42 ], !dbg !28
  %117 = phi float [ %113, %86 ], [ 0.000000e+00, %42 ], !dbg !28
  %118 = phi float [ %114, %86 ], [ 0.000000e+00, %42 ], !dbg !28
  %.pn11 = phi float [ %99, %86 ], [ %81, %42 ]
  %.pn9 = phi float [ %100, %86 ], [ %82, %42 ]
  %.pn7 = phi float [ %101, %86 ], [ %83, %42 ]
  %.pn5 = phi float [ %102, %86 ], [ %84, %42 ]
  %119 = phi float [ %91, %86 ], [ 1.000000e+00, %42 ], !dbg !28
  %120 = phi float [ %92, %86 ], [ 1.000000e+00, %42 ], !dbg !28
  %121 = phi float [ %93, %86 ], [ 1.000000e+00, %42 ], !dbg !28
  %122 = phi float [ %94, %86 ], [ 1.000000e+00, %42 ], !dbg !28
  %123 = select i1 %9, float %.pn11, float %51, !dbg !36
  %124 = select i1 %9, float %.pn9, float %52, !dbg !36
  %125 = select i1 %9, float %.pn7, float %53, !dbg !36
  %126 = select i1 %9, float %.pn5, float %54, !dbg !36
  %127 = select i1 %9, float %115, float %47, !dbg !37
  %128 = select i1 %9, float %116, float %48, !dbg !37
  %129 = select i1 %9, float %117, float %49, !dbg !37
  %130 = select i1 %9, float %118, float %50, !dbg !37
  %131 = select i1 %9, float %119, float %43, !dbg !38
  %132 = select i1 %9, float %120, float %44, !dbg !38
  %133 = select i1 %9, float %121, float %45, !dbg !38
  %134 = select i1 %9, float %122, float %46, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %135 = bitcast float %81 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %135, i1 true) #3, !dbg !39
  %136 = bitcast float %82 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %136, i1 true) #3, !dbg !39
  %137 = bitcast float %83 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %137, i1 true) #3, !dbg !39
  %138 = bitcast float %84 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %138, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %37, align 16, !dbg !39
  %.extract15 = load i32, ptr addrspace(3) %39, align 4, !dbg !39
  %.extract16 = load i32, ptr addrspace(3) %40, align 8, !dbg !39
  %.extract17 = load i32, ptr addrspace(3) %41, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %gep, i1 %9) #3, !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %139 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %139, label %42, label %140, !dbg !16

140:                                              ; preds = %._crit_edge
  %141 = lshr i32 %10, 5, !dbg !12
  %142 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %143 = fsub float %124, %123, !dbg !42
  %144 = fadd float %131, %132, !dbg !44
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !45
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %144) #3, !dbg !46
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !47
  %148 = fmul float %143, %147, !dbg !48
  %149 = fadd float %123, %148, !dbg !49
  %150 = fadd float %127, %128, !dbg !50
  %151 = fmul float %143, %143, !dbg !51
  %152 = fmul float %151, %131, !dbg !52
  %153 = fmul float %152, %147, !dbg !53
  %154 = fadd float %150, %153, !dbg !54
  %155 = fsub float %125, %149, !dbg !42
  %156 = fadd float %133, %144, !dbg !44
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !45
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %156) #3, !dbg !46
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !47
  %160 = fmul float %159, %155, !dbg !48
  %161 = fadd float %149, %160, !dbg !49
  %162 = fadd float %129, %154, !dbg !50
  %163 = fmul float %155, %155, !dbg !51
  %164 = fmul float %144, %163, !dbg !52
  %165 = fmul float %159, %164, !dbg !53
  %166 = fadd float %162, %165, !dbg !54
  %167 = fsub float %126, %161, !dbg !42
  %168 = fadd float %134, %156, !dbg !44
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !45
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %168) #3, !dbg !46
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !47
  %172 = fmul float %171, %167, !dbg !48
  %173 = fadd float %161, %172, !dbg !49
  %174 = fadd float %130, %166, !dbg !50
  %175 = fmul float %167, %167, !dbg !51
  %176 = fmul float %156, %175, !dbg !52
  %177 = fmul float %171, %176, !dbg !53
  %178 = fadd float %174, %177, !dbg !54
  %179 = bitcast float %173 to i32, !dbg !40
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 16, i32 31), !dbg !40
  %181 = bitcast i32 %180 to float, !dbg !40
  %182 = bitcast float %178 to i32, !dbg !40
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 16, i32 31), !dbg !40
  %184 = bitcast i32 %183 to float, !dbg !40
  %185 = bitcast float %168 to i32, !dbg !40
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 16, i32 31), !dbg !40
  %187 = bitcast i32 %186 to float, !dbg !40
  %188 = fsub float %181, %173, !dbg !42
  %189 = fadd float %168, %187, !dbg !44
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !45
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %189) #3, !dbg !46
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !47
  %193 = fmul float %192, %188, !dbg !48
  %194 = fadd float %173, %193, !dbg !49
  %195 = fadd float %178, %184, !dbg !50
  %196 = fmul float %188, %188, !dbg !51
  %197 = fmul float %168, %196, !dbg !52
  %198 = fmul float %192, %197, !dbg !53
  %199 = fadd float %195, %198, !dbg !54
  %200 = bitcast float %194 to i32, !dbg !40
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 8, i32 31), !dbg !40
  %202 = bitcast i32 %201 to float, !dbg !40
  %203 = bitcast float %199 to i32, !dbg !40
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !40
  %205 = bitcast i32 %204 to float, !dbg !40
  %206 = bitcast float %189 to i32, !dbg !40
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 8, i32 31), !dbg !40
  %208 = bitcast i32 %207 to float, !dbg !40
  %209 = fsub float %202, %194, !dbg !42
  %210 = fadd float %189, %208, !dbg !44
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !45
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %210) #3, !dbg !46
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !47
  %214 = fmul float %209, %213, !dbg !48
  %215 = fadd float %194, %214, !dbg !49
  %216 = fadd float %199, %205, !dbg !50
  %217 = fmul float %209, %209, !dbg !51
  %218 = fmul float %189, %217, !dbg !52
  %219 = fmul float %213, %218, !dbg !53
  %220 = fadd float %216, %219, !dbg !54
  %221 = bitcast float %215 to i32, !dbg !40
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 4, i32 31), !dbg !40
  %223 = bitcast i32 %222 to float, !dbg !40
  %224 = bitcast float %220 to i32, !dbg !40
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 4, i32 31), !dbg !40
  %226 = bitcast i32 %225 to float, !dbg !40
  %227 = bitcast float %210 to i32, !dbg !40
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 4, i32 31), !dbg !40
  %229 = bitcast i32 %228 to float, !dbg !40
  %230 = fsub float %223, %215, !dbg !42
  %231 = fadd float %210, %229, !dbg !44
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !45
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %231) #3, !dbg !46
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !47
  %235 = fmul float %230, %234, !dbg !48
  %236 = fadd float %215, %235, !dbg !49
  %237 = fadd float %220, %226, !dbg !50
  %238 = fmul float %230, %230, !dbg !51
  %239 = fmul float %210, %238, !dbg !52
  %240 = fmul float %234, %239, !dbg !53
  %241 = fadd float %237, %240, !dbg !54
  %242 = bitcast float %236 to i32, !dbg !40
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !40
  %244 = bitcast i32 %243 to float, !dbg !40
  %245 = bitcast float %241 to i32, !dbg !40
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 2, i32 31), !dbg !40
  %247 = bitcast i32 %246 to float, !dbg !40
  %248 = bitcast float %231 to i32, !dbg !40
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !40
  %250 = bitcast i32 %249 to float, !dbg !40
  %251 = fsub float %244, %236, !dbg !42
  %252 = fadd float %231, %250, !dbg !44
  %253 = fcmp oeq float %252, 0.000000e+00, !dbg !45
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float %252) #3, !dbg !46
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !47
  %256 = fmul float %251, %255, !dbg !48
  %257 = fadd float %236, %256, !dbg !49
  %258 = fadd float %241, %247, !dbg !50
  %259 = fmul float %251, %251, !dbg !51
  %260 = fmul float %231, %259, !dbg !52
  %261 = fmul float %255, %260, !dbg !53
  %262 = fadd float %258, %261, !dbg !54
  %263 = bitcast float %257 to i32, !dbg !40
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 1, i32 31), !dbg !40
  %265 = bitcast i32 %264 to float, !dbg !40
  %266 = bitcast float %262 to i32, !dbg !40
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !40
  %268 = bitcast i32 %267 to float, !dbg !40
  %269 = bitcast float %252 to i32, !dbg !40
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !40
  %271 = bitcast i32 %270 to float, !dbg !40
  %272 = fsub float %265, %257, !dbg !42
  %273 = fadd float %252, %271, !dbg !44
  %274 = fcmp oeq float %273, 0.000000e+00, !dbg !45
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %271, float %273) #3, !dbg !46
  %276 = select i1 %274, float 0.000000e+00, float %275, !dbg !47
  %277 = fmul float %272, %276, !dbg !48
  %278 = fadd float %257, %277, !dbg !49
  %279 = fadd float %262, %268, !dbg !50
  %280 = fmul float %272, %272, !dbg !51
  %281 = fmul float %252, %280, !dbg !52
  %282 = fmul float %276, %281, !dbg !53
  %283 = fadd float %279, %282, !dbg !54
  %284 = icmp eq i32 %142, 0, !dbg !40
  %285 = and i32 %141, 15, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %285, !dbg !40
  %287 = bitcast float %278 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 %284) #3, !dbg !40
  %288 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %285, !dbg !40
  %289 = bitcast float %283 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 %284) #3, !dbg !40
  %290 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %285, !dbg !40
  %291 = bitcast float %273 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 %284) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %292 = icmp slt i32 %10, 16, !dbg !40
  %293 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %294 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %293, i1 %292) #3, !dbg !40
  %295 = bitcast i32 %294 to float, !dbg !40
  %296 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !40
  %297 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %296, i1 %292) #3, !dbg !40
  %298 = bitcast i32 %297 to float, !dbg !40
  %299 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !40
  %300 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %299, i1 %292) #3, !dbg !40
  %301 = bitcast i32 %300 to float, !dbg !40
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !40
  %303 = bitcast i32 %302 to float, !dbg !40
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 8, i32 31), !dbg !40
  %305 = bitcast i32 %304 to float, !dbg !40
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 8, i32 31), !dbg !40
  %307 = bitcast i32 %306 to float, !dbg !40
  %308 = fsub float %303, %295, !dbg !42
  %309 = fadd float %301, %307, !dbg !44
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !45
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %307, float %309) #3, !dbg !46
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !47
  %313 = fmul float %308, %312, !dbg !48
  %314 = fadd float %313, %295, !dbg !49
  %315 = fadd float %298, %305, !dbg !50
  %316 = fmul float %308, %308, !dbg !51
  %317 = fmul float %316, %301, !dbg !52
  %318 = fmul float %317, %312, !dbg !53
  %319 = fadd float %315, %318, !dbg !54
  %320 = bitcast float %314 to i32, !dbg !40
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 4, i32 31), !dbg !40
  %322 = bitcast i32 %321 to float, !dbg !40
  %323 = bitcast float %319 to i32, !dbg !40
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 4, i32 31), !dbg !40
  %325 = bitcast i32 %324 to float, !dbg !40
  %326 = bitcast float %309 to i32, !dbg !40
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 4, i32 31), !dbg !40
  %328 = bitcast i32 %327 to float, !dbg !40
  %329 = fsub float %322, %314, !dbg !42
  %330 = fadd float %309, %328, !dbg !44
  %331 = fcmp oeq float %330, 0.000000e+00, !dbg !45
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %328, float %330) #3, !dbg !46
  %333 = select i1 %331, float 0.000000e+00, float %332, !dbg !47
  %334 = fmul float %329, %333, !dbg !48
  %335 = fadd float %314, %334, !dbg !49
  %336 = fadd float %319, %325, !dbg !50
  %337 = fmul float %329, %329, !dbg !51
  %338 = fmul float %309, %337, !dbg !52
  %339 = fmul float %333, %338, !dbg !53
  %340 = fadd float %336, %339, !dbg !54
  %341 = bitcast float %335 to i32, !dbg !40
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 2, i32 31), !dbg !40
  %343 = bitcast i32 %342 to float, !dbg !40
  %344 = bitcast float %340 to i32, !dbg !40
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 2, i32 31), !dbg !40
  %346 = bitcast i32 %345 to float, !dbg !40
  %347 = bitcast float %330 to i32, !dbg !40
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 2, i32 31), !dbg !40
  %349 = bitcast i32 %348 to float, !dbg !40
  %350 = fsub float %343, %335, !dbg !42
  %351 = fadd float %330, %349, !dbg !44
  %352 = fcmp oeq float %351, 0.000000e+00, !dbg !45
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %351) #3, !dbg !46
  %354 = select i1 %352, float 0.000000e+00, float %353, !dbg !47
  %355 = fmul float %350, %354, !dbg !48
  %356 = fadd float %335, %355, !dbg !49
  %357 = fadd float %340, %346, !dbg !50
  %358 = fmul float %350, %350, !dbg !51
  %359 = fmul float %330, %358, !dbg !52
  %360 = fmul float %354, %359, !dbg !53
  %361 = fadd float %357, %360, !dbg !54
  %362 = bitcast float %356 to i32, !dbg !40
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 1, i32 31), !dbg !40
  %364 = bitcast i32 %363 to float, !dbg !40
  %365 = bitcast float %361 to i32, !dbg !40
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 1, i32 31), !dbg !40
  %367 = bitcast i32 %366 to float, !dbg !40
  %368 = bitcast float %351 to i32, !dbg !40
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 1, i32 31), !dbg !40
  %370 = bitcast i32 %369 to float, !dbg !40
  %371 = fsub float %364, %356, !dbg !42
  %372 = fadd float %351, %370, !dbg !44
  %373 = fcmp oeq float %372, 0.000000e+00, !dbg !45
  %374 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %370, float %372) #3, !dbg !46
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !47
  %376 = fmul float %371, %375, !dbg !48
  %377 = fadd float %356, %376, !dbg !49
  %378 = fadd float %361, %367, !dbg !50
  %379 = fmul float %371, %371, !dbg !51
  %380 = fmul float %351, %379, !dbg !52
  %381 = fmul float %375, %380, !dbg !53
  %382 = fadd float %378, %381, !dbg !54
  %383 = and i32 %10, 15, !dbg !40
  %384 = icmp eq i32 %383, 0, !dbg !40
  %385 = and i1 %292, %384, !dbg !40
  %386 = bitcast float %377 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %386, i1 %385) #3, !dbg !40
  %387 = bitcast float %382 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %387, i1 %385) #3, !dbg !40
  %388 = bitcast float %372 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %388, i1 %385) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %389 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %390 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  %391 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !40
  %392 = sext i32 %8 to i64, !dbg !55
  %393 = getelementptr float, ptr addrspace(1) %2, i64 %392, !dbg !55
  %394 = icmp eq i32 %11, 0, !dbg !56
  %395 = and i1 %394, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %389, ptr addrspace(1) %393, i1 %395) #3, !dbg !56
  %396 = getelementptr float, ptr addrspace(1) %3, i64 %392, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %390, ptr addrspace(1) %396, i1 %395) #3, !dbg !58
  %397 = getelementptr float, ptr addrspace(1) %4, i64 %392, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %391, ptr addrspace(1) %397, i1 %395) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2w44232yt5xr4tyjxebg3ja3teiyogkjys3nyh44jvqpcb4x76.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_0", linkageName: "triton_red_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 46, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 62, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 53, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 36, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 55, column: 4, scope: !7)
