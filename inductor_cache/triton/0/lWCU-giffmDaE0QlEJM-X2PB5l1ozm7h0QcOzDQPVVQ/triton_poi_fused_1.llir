; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %.lobit3 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit3, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %11, 16, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %11, 2304, !dbg !14
  %22 = icmp slt i32 %12, 2304, !dbg !14
  %23 = icmp slt i32 %13, 2304, !dbg !14
  %24 = icmp slt i32 %14, 2304, !dbg !14
  %25 = icmp slt i32 %15, 2304, !dbg !14
  %26 = icmp slt i32 %16, 2304, !dbg !14
  %27 = icmp slt i32 %17, 2304, !dbg !14
  %28 = icmp slt i32 %18, 2304, !dbg !14
  %29 = icmp slt i32 %19, 2304, !dbg !14
  %30 = icmp slt i32 %20, 2304, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 5, !dbg !16
  %33 = shl i32 %7, 2, !dbg !17
  %34 = and i32 %33, 28, !dbg !17
  %35 = and i32 %7, 31, !dbg !17
  %36 = or disjoint i32 %32, %34, !dbg !18
  %37 = or disjoint i32 %32, %35, !dbg !18
  %38 = icmp slt i32 %36, 256, !dbg !19
  %39 = icmp slt i32 %37, 256, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %40 = sdiv i32 %.frozen, 3, !dbg !20
  %41 = mul i32 %40, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %.frozen4 = freeze i32 %14, !dbg !20
  %42 = sdiv i32 %.frozen4, 3, !dbg !20
  %43 = mul i32 %42, 3, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %43, !dbg !21
  %.frozen6 = freeze i32 %15, !dbg !20
  %44 = sdiv i32 %.frozen6, 3, !dbg !20
  %45 = mul i32 %44, 3, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %45, !dbg !21
  %.frozen8 = freeze i32 %16, !dbg !20
  %46 = sdiv i32 %.frozen8, 3, !dbg !20
  %47 = mul i32 %46, 3, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %47, !dbg !21
  %.frozen10 = freeze i32 %17, !dbg !20
  %48 = sdiv i32 %.frozen10, 3, !dbg !20
  %49 = mul i32 %48, 3, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %49, !dbg !21
  %.frozen12 = freeze i32 %18, !dbg !20
  %50 = sdiv i32 %.frozen12, 3, !dbg !20
  %51 = mul i32 %50, 3, !dbg !21
  %.decomposed13 = sub i32 %.frozen12, %51, !dbg !21
  %.frozen14 = freeze i32 %19, !dbg !20
  %52 = sdiv i32 %.frozen14, 3, !dbg !20
  %53 = mul i32 %52, 3, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %53, !dbg !21
  %.frozen16 = freeze i32 %20, !dbg !20
  %54 = sdiv i32 %.frozen16, 3, !dbg !20
  %55 = mul i32 %54, 3, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %55, !dbg !21
  %56 = shl i32 %11, 8, !dbg !22
  %57 = shl i32 %12, 8, !dbg !22
  %58 = add i32 %36, %56, !dbg !23
  %59 = add i32 %36, %57, !dbg !23
  %60 = sext i32 %58 to i64, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !24
  %62 = sext i32 %59 to i64, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !24
  %64 = and i1 %21, %38, !dbg !25
  %65 = and i1 %22, %38, !dbg !25
  %66 = and i1 %23, %39, !dbg !25
  %67 = and i1 %24, %39, !dbg !25
  %68 = and i1 %25, %39, !dbg !25
  %69 = and i1 %26, %39, !dbg !25
  %70 = and i1 %27, %39, !dbg !25
  %71 = and i1 %28, %39, !dbg !25
  %72 = and i1 %29, %39, !dbg !25
  %73 = and i1 %30, %39, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %64) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %65) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = mul i32 %37, 3, !dbg !27
  %85 = add i32 %84, %.decomposed, !dbg !28
  %86 = mul i32 %40, 768, !dbg !29
  %87 = mul i32 %42, 768, !dbg !29
  %88 = mul i32 %44, 768, !dbg !29
  %89 = mul i32 %46, 768, !dbg !29
  %90 = mul i32 %48, 768, !dbg !29
  %91 = mul i32 %50, 768, !dbg !29
  %92 = mul i32 %52, 768, !dbg !29
  %93 = mul i32 %54, 768, !dbg !29
  %94 = add i32 %85, %86, !dbg !30
  %95 = add i32 %87, %.decomposed5, !dbg !28
  %96 = add i32 %95, %84, !dbg !30
  %97 = add i32 %88, %.decomposed7, !dbg !28
  %98 = add i32 %97, %84, !dbg !30
  %99 = add i32 %89, %.decomposed9, !dbg !28
  %100 = add i32 %99, %84, !dbg !30
  %101 = add i32 %90, %.decomposed11, !dbg !28
  %102 = add i32 %101, %84, !dbg !30
  %103 = add i32 %91, %.decomposed13, !dbg !28
  %104 = add i32 %103, %84, !dbg !30
  %105 = add i32 %92, %.decomposed15, !dbg !28
  %106 = add i32 %105, %84, !dbg !30
  %107 = add i32 %93, %.decomposed17, !dbg !28
  %108 = add i32 %107, %84, !dbg !30
  %109 = sext i32 %94 to i64, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !31
  %111 = sext i32 %96 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !31
  %113 = sext i32 %98 to i64, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !31
  %115 = sext i32 %100 to i64, !dbg !31
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !31
  %117 = sext i32 %102 to i64, !dbg !31
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !31
  %119 = sext i32 %104 to i64, !dbg !31
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !31
  %121 = sext i32 %106 to i64, !dbg !31
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !31
  %123 = sext i32 %108 to i64, !dbg !31
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !31
  %125 = and i32 %33, 508, !dbg !32
  %126 = and i32 %7, 127, !dbg !32
  %127 = lshr i32 %33, 5, !dbg !32
  %128 = and i32 %127, 15, !dbg !32
  %129 = add nuw nsw i32 %128, %125, !dbg !32
  %130 = zext nneg i32 %129 to i64, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !32
  %132 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !32
  %133 = or disjoint i32 %125, 1, !dbg !32
  %134 = add nuw nsw i32 %133, %128, !dbg !32
  %135 = zext nneg i32 %134 to i64, !dbg !32
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !32
  %137 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !32
  %138 = or disjoint i32 %125, 2, !dbg !32
  %139 = add nuw nsw i32 %138, %128, !dbg !32
  %140 = zext nneg i32 %139 to i64, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !32
  %142 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !32
  %143 = or disjoint i32 %125, 3, !dbg !32
  %144 = add nuw nsw i32 %143, %128, !dbg !32
  %145 = zext nneg i32 %144 to i64, !dbg !32
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %145, !dbg !32
  %147 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %148 = lshr i32 %126, 5, !dbg !32
  %149 = add nuw nsw i32 %148, %126, !dbg !32
  %150 = zext nneg i32 %149 to i64, !dbg !32
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %150, !dbg !32
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  %153 = or disjoint i32 %126, 128, !dbg !32
  %154 = lshr i32 %153, 5, !dbg !32
  %155 = add nuw nsw i32 %154, %153, !dbg !32
  %156 = zext nneg i32 %155 to i64, !dbg !32
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %156, !dbg !32
  %158 = load i32, ptr addrspace(3) %157, align 4, !dbg !32
  %159 = or disjoint i32 %126, 256, !dbg !32
  %160 = lshr i32 %159, 5, !dbg !32
  %161 = add nuw nsw i32 %160, %159, !dbg !32
  %162 = zext nneg i32 %161 to i64, !dbg !32
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %162, !dbg !32
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !32
  %165 = or disjoint i32 %126, 384, !dbg !32
  %166 = lshr i32 %165, 5, !dbg !32
  %167 = add nuw nsw i32 %166, %165, !dbg !32
  %168 = zext nneg i32 %167 to i64, !dbg !32
  %169 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %168, !dbg !32
  %170 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %171 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %171, i1 true) #2, !dbg !32
  %172 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %172, i1 true) #2, !dbg !32
  %173 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %173, i1 true) #2, !dbg !32
  %174 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %174, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = load i32, ptr addrspace(3) %151, align 4, !dbg !32
  %176 = load i32, ptr addrspace(3) %157, align 4, !dbg !32
  %177 = load i32, ptr addrspace(3) %163, align 4, !dbg !32
  %178 = load i32, ptr addrspace(3) %169, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %110, i1 %66) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %158, ptr addrspace(1) %112, i1 %67) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %114, i1 %68) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %170, ptr addrspace(1) %116, i1 %69) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %118, i1 %70) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %120, i1 %71) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %177, ptr addrspace(1) %122, i1 %72) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %178, ptr addrspace(1) %124, i1 %73) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx2dlrnjasuevhkfz2a3e2tfm6vp2vik4fmidsud77fkiztioexl.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_1", linkageName: "triton_poi_fused_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 32, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 41, scope: !7)
!30 = !DILocation(line: 33, column: 37, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 52, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)
