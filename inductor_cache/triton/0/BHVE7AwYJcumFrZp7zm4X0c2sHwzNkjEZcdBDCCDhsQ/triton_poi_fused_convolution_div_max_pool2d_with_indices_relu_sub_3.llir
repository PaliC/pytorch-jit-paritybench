; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 57600, !dbg !14
  %11 = srem i32 %9, 64, !dbg !15
  %12 = sdiv i32 %9, 14400, !dbg !16
  %13 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %15 = sdiv <2 x i32> %14, <i32 64, i32 960>, !dbg !17
  %16 = srem <2 x i32> %15, splat (i32 15), !dbg !18
  %17 = mul nsw <2 x i32> %16, <i32 128, i32 3968>, !dbg !19
  %18 = mul i32 %12, 61504, !dbg !20
  %19 = add i32 %18, %11, !dbg !21
  %20 = extractelement <2 x i32> %17, i64 0, !dbg !22
  %21 = add i32 %19, %20, !dbg !23
  %22 = extractelement <2 x i32> %17, i64 1, !dbg !24
  %23 = add i32 %21, %22, !dbg !25
  %24 = sext i32 %23 to i64, !dbg !26
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !26
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %10) #1, !dbg !27
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !27
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !27
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !27
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !27
  %31 = bitcast i32 %27 to float, !dbg !27
  %32 = bitcast i32 %28 to float, !dbg !27
  %33 = bitcast i32 %29 to float, !dbg !27
  %34 = bitcast i32 %30 to float, !dbg !27
  %35 = add i32 %19, 64, !dbg !28
  %36 = add i32 %35, %20, !dbg !29
  %37 = add i32 %36, %22, !dbg !30
  %38 = sext i32 %37 to i64, !dbg !31
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !31
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %10) #1, !dbg !32
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !32
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !32
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !32
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !32
  %45 = bitcast i32 %41 to float, !dbg !32
  %46 = bitcast i32 %42 to float, !dbg !32
  %47 = bitcast i32 %43 to float, !dbg !32
  %48 = bitcast i32 %44 to float, !dbg !32
  %49 = add i32 %19, 128, !dbg !33
  %50 = add i32 %49, %20, !dbg !34
  %51 = add i32 %50, %22, !dbg !35
  %52 = sext i32 %51 to i64, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !36
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %10) #1, !dbg !37
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !37
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !37
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !37
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !37
  %59 = bitcast i32 %55 to float, !dbg !37
  %60 = bitcast i32 %56 to float, !dbg !37
  %61 = bitcast i32 %57 to float, !dbg !37
  %62 = bitcast i32 %58 to float, !dbg !37
  %63 = add i32 %19, 1984, !dbg !38
  %64 = add i32 %63, %20, !dbg !39
  %65 = add i32 %64, %22, !dbg !40
  %66 = sext i32 %65 to i64, !dbg !41
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !41
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %10) #1, !dbg !42
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !42
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !42
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !42
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !42
  %73 = bitcast i32 %69 to float, !dbg !42
  %74 = bitcast i32 %70 to float, !dbg !42
  %75 = bitcast i32 %71 to float, !dbg !42
  %76 = bitcast i32 %72 to float, !dbg !42
  %77 = add i32 %19, 2048, !dbg !43
  %78 = add i32 %77, %20, !dbg !44
  %79 = add i32 %78, %22, !dbg !45
  %80 = sext i32 %79 to i64, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !46
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %10) #1, !dbg !47
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !47
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !47
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !47
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !47
  %87 = bitcast i32 %83 to float, !dbg !47
  %88 = bitcast i32 %84 to float, !dbg !47
  %89 = bitcast i32 %85 to float, !dbg !47
  %90 = bitcast i32 %86 to float, !dbg !47
  %91 = add i32 %19, 2112, !dbg !48
  %92 = add i32 %91, %20, !dbg !49
  %93 = add i32 %92, %22, !dbg !50
  %94 = sext i32 %93 to i64, !dbg !51
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !51
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %10) #1, !dbg !52
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !52
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !52
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !52
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !52
  %101 = bitcast i32 %97 to float, !dbg !52
  %102 = bitcast i32 %98 to float, !dbg !52
  %103 = bitcast i32 %99 to float, !dbg !52
  %104 = bitcast i32 %100 to float, !dbg !52
  %105 = add i32 %19, 3968, !dbg !53
  %106 = add i32 %105, %20, !dbg !54
  %107 = add i32 %106, %22, !dbg !55
  %108 = sext i32 %107 to i64, !dbg !56
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !56
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %10) #1, !dbg !57
  %111 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !57
  %112 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !57
  %113 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !57
  %114 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !57
  %115 = bitcast i32 %111 to float, !dbg !57
  %116 = bitcast i32 %112 to float, !dbg !57
  %117 = bitcast i32 %113 to float, !dbg !57
  %118 = bitcast i32 %114 to float, !dbg !57
  %119 = add i32 %19, 4032, !dbg !58
  %120 = add i32 %119, %20, !dbg !59
  %121 = add i32 %120, %22, !dbg !60
  %122 = sext i32 %121 to i64, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !61
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %10) #1, !dbg !62
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !62
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !62
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !62
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !62
  %129 = bitcast i32 %125 to float, !dbg !62
  %130 = bitcast i32 %126 to float, !dbg !62
  %131 = bitcast i32 %127 to float, !dbg !62
  %132 = bitcast i32 %128 to float, !dbg !62
  %133 = add i32 %19, 4096, !dbg !63
  %134 = add i32 %133, %20, !dbg !22
  %135 = add i32 %134, %22, !dbg !24
  %136 = sext i32 %135 to i64, !dbg !64
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !64
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %10) #1, !dbg !65
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !65
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !65
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !65
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !65
  %143 = bitcast i32 %139 to float, !dbg !65
  %144 = bitcast i32 %140 to float, !dbg !65
  %145 = bitcast i32 %141 to float, !dbg !65
  %146 = bitcast i32 %142 to float, !dbg !65
  %147 = fcmp ogt float %45, %31, !dbg !66
  %148 = fcmp ogt float %46, %32, !dbg !66
  %149 = fcmp ogt float %47, %33, !dbg !66
  %150 = fcmp ogt float %48, %34, !dbg !66
  %151 = fcmp uno float %45, 0.000000e+00, !dbg !70
  %152 = fcmp uno float %46, 0.000000e+00, !dbg !70
  %153 = fcmp uno float %47, 0.000000e+00, !dbg !70
  %154 = fcmp uno float %48, 0.000000e+00, !dbg !70
  %155 = or i1 %147, %151, !dbg !71
  %156 = or i1 %148, %152, !dbg !71
  %157 = or i1 %149, %153, !dbg !71
  %158 = or i1 %150, %154, !dbg !71
  %159 = select i1 %155, float %45, float %31, !dbg !72
  %160 = select i1 %156, float %46, float %32, !dbg !72
  %161 = select i1 %157, float %47, float %33, !dbg !72
  %162 = select i1 %158, float %48, float %34, !dbg !72
  %163 = fcmp olt float %159, %59, !dbg !73
  %164 = fcmp olt float %160, %60, !dbg !73
  %165 = fcmp olt float %161, %61, !dbg !73
  %166 = fcmp olt float %162, %62, !dbg !73
  %167 = fcmp uno float %59, 0.000000e+00, !dbg !75
  %168 = fcmp uno float %60, 0.000000e+00, !dbg !75
  %169 = fcmp uno float %61, 0.000000e+00, !dbg !75
  %170 = fcmp uno float %62, 0.000000e+00, !dbg !75
  %171 = or i1 %167, %163, !dbg !76
  %172 = or i1 %168, %164, !dbg !76
  %173 = or i1 %169, %165, !dbg !76
  %174 = or i1 %170, %166, !dbg !76
  %175 = select i1 %171, float %59, float %159, !dbg !77
  %176 = select i1 %172, float %60, float %160, !dbg !77
  %177 = select i1 %173, float %61, float %161, !dbg !77
  %178 = select i1 %174, float %62, float %162, !dbg !77
  %179 = fcmp olt float %175, %73, !dbg !78
  %180 = fcmp olt float %176, %74, !dbg !78
  %181 = fcmp olt float %177, %75, !dbg !78
  %182 = fcmp olt float %178, %76, !dbg !78
  %183 = fcmp uno float %73, 0.000000e+00, !dbg !80
  %184 = fcmp uno float %74, 0.000000e+00, !dbg !80
  %185 = fcmp uno float %75, 0.000000e+00, !dbg !80
  %186 = fcmp uno float %76, 0.000000e+00, !dbg !80
  %187 = or i1 %183, %179, !dbg !81
  %188 = or i1 %184, %180, !dbg !81
  %189 = or i1 %185, %181, !dbg !81
  %190 = or i1 %186, %182, !dbg !81
  %191 = select i1 %187, float %73, float %175, !dbg !82
  %192 = select i1 %188, float %74, float %176, !dbg !82
  %193 = select i1 %189, float %75, float %177, !dbg !82
  %194 = select i1 %190, float %76, float %178, !dbg !82
  %195 = fcmp olt float %191, %87, !dbg !83
  %196 = fcmp olt float %192, %88, !dbg !83
  %197 = fcmp olt float %193, %89, !dbg !83
  %198 = fcmp olt float %194, %90, !dbg !83
  %199 = fcmp uno float %87, 0.000000e+00, !dbg !85
  %200 = fcmp uno float %88, 0.000000e+00, !dbg !85
  %201 = fcmp uno float %89, 0.000000e+00, !dbg !85
  %202 = fcmp uno float %90, 0.000000e+00, !dbg !85
  %203 = or i1 %199, %195, !dbg !86
  %204 = or i1 %200, %196, !dbg !86
  %205 = or i1 %201, %197, !dbg !86
  %206 = or i1 %202, %198, !dbg !86
  %207 = select i1 %203, float %87, float %191, !dbg !87
  %208 = select i1 %204, float %88, float %192, !dbg !87
  %209 = select i1 %205, float %89, float %193, !dbg !87
  %210 = select i1 %206, float %90, float %194, !dbg !87
  %211 = fcmp olt float %207, %101, !dbg !88
  %212 = fcmp olt float %208, %102, !dbg !88
  %213 = fcmp olt float %209, %103, !dbg !88
  %214 = fcmp olt float %210, %104, !dbg !88
  %215 = fcmp uno float %101, 0.000000e+00, !dbg !90
  %216 = fcmp uno float %102, 0.000000e+00, !dbg !90
  %217 = fcmp uno float %103, 0.000000e+00, !dbg !90
  %218 = fcmp uno float %104, 0.000000e+00, !dbg !90
  %219 = or i1 %215, %211, !dbg !91
  %220 = or i1 %216, %212, !dbg !91
  %221 = or i1 %217, %213, !dbg !91
  %222 = or i1 %218, %214, !dbg !91
  %223 = select i1 %219, float %101, float %207, !dbg !92
  %224 = select i1 %220, float %102, float %208, !dbg !92
  %225 = select i1 %221, float %103, float %209, !dbg !92
  %226 = select i1 %222, float %104, float %210, !dbg !92
  %227 = fcmp olt float %223, %115, !dbg !93
  %228 = fcmp olt float %224, %116, !dbg !93
  %229 = fcmp olt float %225, %117, !dbg !93
  %230 = fcmp olt float %226, %118, !dbg !93
  %231 = fcmp uno float %115, 0.000000e+00, !dbg !95
  %232 = fcmp uno float %116, 0.000000e+00, !dbg !95
  %233 = fcmp uno float %117, 0.000000e+00, !dbg !95
  %234 = fcmp uno float %118, 0.000000e+00, !dbg !95
  %235 = or i1 %231, %227, !dbg !96
  %236 = or i1 %232, %228, !dbg !96
  %237 = or i1 %233, %229, !dbg !96
  %238 = or i1 %234, %230, !dbg !96
  %239 = select i1 %235, float %115, float %223, !dbg !97
  %240 = select i1 %236, float %116, float %224, !dbg !97
  %241 = select i1 %237, float %117, float %225, !dbg !97
  %242 = select i1 %238, float %118, float %226, !dbg !97
  %243 = fcmp olt float %239, %129, !dbg !98
  %244 = fcmp olt float %240, %130, !dbg !98
  %245 = fcmp olt float %241, %131, !dbg !98
  %246 = fcmp olt float %242, %132, !dbg !98
  %247 = fcmp uno float %129, 0.000000e+00, !dbg !100
  %248 = fcmp uno float %130, 0.000000e+00, !dbg !100
  %249 = fcmp uno float %131, 0.000000e+00, !dbg !100
  %250 = fcmp uno float %132, 0.000000e+00, !dbg !100
  %251 = or i1 %247, %243, !dbg !101
  %252 = or i1 %248, %244, !dbg !101
  %253 = or i1 %249, %245, !dbg !101
  %254 = or i1 %250, %246, !dbg !101
  %255 = select i1 %251, float %129, float %239, !dbg !102
  %256 = select i1 %252, float %130, float %240, !dbg !102
  %257 = select i1 %253, float %131, float %241, !dbg !102
  %258 = select i1 %254, float %132, float %242, !dbg !102
  %259 = fcmp olt float %255, %143, !dbg !103
  %260 = fcmp olt float %256, %144, !dbg !103
  %261 = fcmp olt float %257, %145, !dbg !103
  %262 = fcmp olt float %258, %146, !dbg !103
  %263 = fcmp uno float %143, 0.000000e+00, !dbg !105
  %264 = fcmp uno float %144, 0.000000e+00, !dbg !105
  %265 = fcmp uno float %145, 0.000000e+00, !dbg !105
  %266 = fcmp uno float %146, 0.000000e+00, !dbg !105
  %267 = or i1 %263, %259, !dbg !106
  %268 = or i1 %264, %260, !dbg !106
  %269 = or i1 %265, %261, !dbg !106
  %270 = or i1 %266, %262, !dbg !106
  %271 = sext i32 %9 to i64, !dbg !107
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !107
  %273 = bitcast float %255 to i32, !dbg !108
  %274 = select i1 %267, i32 %139, i32 %273, !dbg !109
  %275 = bitcast float %256 to i32, !dbg !108
  %276 = select i1 %268, i32 %140, i32 %275, !dbg !109
  %277 = bitcast float %257 to i32, !dbg !108
  %278 = select i1 %269, i32 %141, i32 %277, !dbg !109
  %279 = bitcast float %258 to i32, !dbg !108
  %280 = select i1 %270, i32 %142, i32 %279, !dbg !109
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %274, i32 %276, i32 %278, i32 %280, ptr addrspace(1) %272, i1 %10) #1, !dbg !108
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chf56a34jv6szr4pxmql7y3buutdvvnuccb5hwmnh3ug6zs75tnq.py", directory: "inductor_cache/hf")
!4 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_3", linkageName: "triton_poi_fused_convolution_div_max_pool2d_with_indices_relu_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 60, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 37, column: 52, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 62, scope: !7)
!25 = !DILocation(line: 29, column: 54, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 65, scope: !7)
!28 = !DILocation(line: 30, column: 40, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 30, column: 59, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 70, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 60, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 71, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 32, column: 51, scope: !7)
!40 = !DILocation(line: 32, column: 61, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 72, scope: !7)
!43 = !DILocation(line: 33, column: 42, scope: !7)
!44 = !DILocation(line: 33, column: 51, scope: !7)
!45 = !DILocation(line: 33, column: 61, scope: !7)
!46 = !DILocation(line: 33, column: 30, scope: !7)
!47 = !DILocation(line: 33, column: 72, scope: !7)
!48 = !DILocation(line: 34, column: 42, scope: !7)
!49 = !DILocation(line: 34, column: 51, scope: !7)
!50 = !DILocation(line: 34, column: 61, scope: !7)
!51 = !DILocation(line: 34, column: 30, scope: !7)
!52 = !DILocation(line: 34, column: 72, scope: !7)
!53 = !DILocation(line: 35, column: 43, scope: !7)
!54 = !DILocation(line: 35, column: 52, scope: !7)
!55 = !DILocation(line: 35, column: 62, scope: !7)
!56 = !DILocation(line: 35, column: 31, scope: !7)
!57 = !DILocation(line: 35, column: 73, scope: !7)
!58 = !DILocation(line: 36, column: 43, scope: !7)
!59 = !DILocation(line: 36, column: 52, scope: !7)
!60 = !DILocation(line: 36, column: 62, scope: !7)
!61 = !DILocation(line: 36, column: 31, scope: !7)
!62 = !DILocation(line: 36, column: 73, scope: !7)
!63 = !DILocation(line: 37, column: 43, scope: !7)
!64 = !DILocation(line: 37, column: 31, scope: !7)
!65 = !DILocation(line: 37, column: 73, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 38, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 39, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 40, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !84)
!84 = !DILocation(line: 41, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 42, column: 41, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 43, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 44, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 45, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!107 = !DILocation(line: 46, column: 25, scope: !7)
!108 = !DILocation(line: 46, column: 37, scope: !7)
!109 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!110 = !DILocation(line: 46, column: 4, scope: !7)
