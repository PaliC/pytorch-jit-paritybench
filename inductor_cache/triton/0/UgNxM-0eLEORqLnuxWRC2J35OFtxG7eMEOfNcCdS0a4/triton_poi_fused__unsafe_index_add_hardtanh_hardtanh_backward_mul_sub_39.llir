; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 8, !dbg !14
  %19 = srem i32 %18, 8, !dbg !15
  %20 = mul i32 %18, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 64, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %26 = sext i32 %.decomposed to i64, !dbg !20
  %27 = getelementptr i64, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %29 = extractvalue { i64, i64 } %28, 0, !dbg !21
  %30 = extractvalue { i64, i64 } %28, 1, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !22
  %32 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %33 = extractvalue { i64, i64 } %32, 0, !dbg !23
  %34 = extractvalue { i64, i64 } %32, 1, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = getelementptr i64, ptr addrspace(1) %5, i64 %22, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = sext i32 %17 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !31
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = lshr i64 %24, 61, !dbg !32
  %55 = and i64 %54, 4, !dbg !32
  %56 = add i64 %55, %24, !dbg !32
  %57 = lshr i64 %29, 61, !dbg !33
  %58 = and i64 %57, 4, !dbg !33
  %59 = lshr i64 %30, 61, !dbg !33
  %60 = and i64 %59, 4, !dbg !33
  %61 = shl i64 %56, 2, !dbg !34
  %62 = shl nsw i32 %21, 4, !dbg !35
  %63 = sext i32 %62 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !37
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %58, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %61, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %63, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %60, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %61, !dbg !37
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %63, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !38
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !38
  %74 = lshr i64 %33, 61, !dbg !39
  %75 = and i64 %74, 4, !dbg !39
  %76 = lshr i64 %34, 61, !dbg !39
  %77 = and i64 %76, 4, !dbg !39
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !40
  %79 = getelementptr float, ptr addrspace(1) %78, i64 %75, !dbg !40
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %61, !dbg !40
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %63, !dbg !40
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %77, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %61, !dbg !40
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %63, !dbg !40
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !41
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !41
  %88 = lshr i64 %40, 61, !dbg !42
  %89 = and i64 %88, 4, !dbg !42
  %90 = add i64 %89, %40, !dbg !42
  %91 = shl i64 %90, 2, !dbg !43
  %92 = getelementptr float, ptr addrspace(1) %65, i64 %91, !dbg !44
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %63, !dbg !44
  %94 = getelementptr float, ptr addrspace(1) %69, i64 %91, !dbg !44
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %63, !dbg !44
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !45
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !45
  %98 = getelementptr float, ptr addrspace(1) %79, i64 %91, !dbg !46
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %63, !dbg !46
  %100 = getelementptr float, ptr addrspace(1) %83, i64 %91, !dbg !46
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %63, !dbg !46
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !47
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !47
  %104 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !45
  %105 = insertelement <2 x i32> %104, i32 %72, i64 1, !dbg !45
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !45
  %107 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !47
  %108 = insertelement <2 x i32> %107, i32 %86, i64 1, !dbg !47
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !47
  %110 = fsub <2 x float> %109, %106, !dbg !48
  %111 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !49
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !49
  %113 = shufflevector <2 x float> %112, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %114 = fmul <2 x float> %110, %113, !dbg !49
  %115 = fadd <2 x float> %114, %106, !dbg !50
  %116 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !45
  %117 = insertelement <2 x i32> %116, i32 %73, i64 1, !dbg !45
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !45
  %119 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !47
  %120 = insertelement <2 x i32> %119, i32 %87, i64 1, !dbg !47
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !47
  %122 = fsub <2 x float> %121, %118, !dbg !48
  %123 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !49
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !49
  %125 = shufflevector <2 x float> %124, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %126 = fmul <2 x float> %122, %125, !dbg !49
  %127 = fadd <2 x float> %126, %118, !dbg !50
  %128 = extractelement <2 x float> %115, i64 0, !dbg !51
  %129 = extractelement <2 x float> %115, i64 1, !dbg !52
  %130 = fsub float %128, %129, !dbg !51
  %131 = extractelement <2 x float> %127, i64 0, !dbg !51
  %132 = extractelement <2 x float> %127, i64 1, !dbg !52
  %133 = fsub float %131, %132, !dbg !51
  %134 = fmul float %130, %44, !dbg !53
  %135 = fmul float %133, %46, !dbg !53
  %136 = fadd float %129, %134, !dbg !52
  %137 = fadd float %132, %135, !dbg !52
  %138 = fadd float %136, %52, !dbg !54
  %139 = fadd float %137, %53, !dbg !54
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !55
  %141 = getelementptr i1, ptr addrspace(1) %9, i64 %47, !dbg !56
  %142 = insertelement <2 x float> <float poison, float 6.000000e+00>, float %138, i64 0, !dbg !57
  %143 = insertelement <2 x float> <float 0.000000e+00, float poison>, float %139, i64 1, !dbg !57
  %144 = fcmp ole <2 x float> %142, %143, !dbg !57
  %.inv = fcmp ole float %138, 0.000000e+00, !dbg !57
  %145 = select i1 %.inv, float 0.000000e+00, float %138, !dbg !57
  %.inv1 = fcmp ole float %139, 0.000000e+00, !dbg !57
  %146 = insertelement <2 x float> %142, float 0.000000e+00, i64 1, !dbg !61
  %147 = insertelement <2 x float> %143, float 6.000000e+00, i64 0, !dbg !61
  %148 = fcmp oge <2 x float> %146, %147, !dbg !61
  %149 = select i1 %.inv1, float 0.000000e+00, float %139, !dbg !57
  %150 = fcmp olt float %145, 6.000000e+00, !dbg !62
  %151 = fcmp olt float %149, 6.000000e+00, !dbg !62
  %152 = fcmp uno float %145, 0.000000e+00, !dbg !64
  %153 = fcmp uno float %149, 0.000000e+00, !dbg !64
  %154 = or i1 %150, %152, !dbg !65
  %155 = or i1 %151, %153, !dbg !65
  %156 = or <2 x i1> %148, %144, !dbg !66
  %157 = bitcast float %145 to i32, !dbg !67
  %158 = select i1 %154, i32 %157, i32 1086324736, !dbg !68
  %159 = bitcast float %149 to i32, !dbg !67
  %160 = select i1 %155, i32 %159, i32 1086324736, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %160, ptr addrspace(1) %140, i1 true) #1, !dbg !67
  %161 = zext <2 x i1> %156 to <2 x i8>, !dbg !69
  %162 = bitcast <2 x i8> %161 to i16, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %162, ptr addrspace(1) %141, i1 true) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkg6ct6oggohvqh7i5dqijztlutzpjir4kusl4yvhnch3wxurbw.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39", linkageName: "triton_poi_fused__unsafe_index_add_hardtanh_hardtanh_backward_mul_sub_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 49, scope: !7)
!36 = !DILocation(line: 42, column: 46, scope: !7)
!37 = !DILocation(line: 42, column: 30, scope: !7)
!38 = !DILocation(line: 42, column: 54, scope: !7)
!39 = !DILocation(line: 45, column: 35, scope: !7)
!40 = !DILocation(line: 46, column: 31, scope: !7)
!41 = !DILocation(line: 46, column: 56, scope: !7)
!42 = !DILocation(line: 52, column: 35, scope: !7)
!43 = !DILocation(line: 53, column: 40, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 56, scope: !7)
!46 = !DILocation(line: 54, column: 31, scope: !7)
!47 = !DILocation(line: 54, column: 57, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 25, scope: !7)
!56 = !DILocation(line: 70, column: 25, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 63, column: 42, scope: !7)
!61 = !DILocation(line: 67, column: 21, scope: !7)
!62 = !DILocation(line: 110, column: 15, scope: !58, inlinedAt: !63)
!63 = !DILocation(line: 65, column: 42, scope: !7)
!64 = !DILocation(line: 112, column: 21, scope: !58, inlinedAt: !63)
!65 = !DILocation(line: 112, column: 16, scope: !58, inlinedAt: !63)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 113, column: 29, scope: !58, inlinedAt: !63)
!69 = !DILocation(line: 70, column: 37, scope: !7)
!70 = !DILocation(line: 70, column: 4, scope: !7)
