; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 10, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %23 = srem i32 %21, 64, !dbg !14
  %.frozen = freeze i32 %21, !dbg !15
  %24 = sdiv i32 %.frozen, 22528, !dbg !15
  %.frozen99 = freeze i32 %22, !dbg !15
  %25 = sdiv i32 %.frozen99, 22528, !dbg !15
  %26 = mul i32 %24, 22528, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = mul i32 %25, 22528, !dbg !16
  %srem1.decomposed = sub i32 %.frozen99, %27, !dbg !16
  %28 = shl nsw i32 %24, 13, !dbg !17
  %29 = shl nsw i32 %25, 13, !dbg !17
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !18
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !18
  %32 = sext i32 %30 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = sext i32 %31 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = shl nsw i32 %24, 11, !dbg !20
  %37 = shl nsw i32 %25, 11, !dbg !20
  %38 = add nsw i32 %36, %23, !dbg !21
  %39 = add nsw i32 %38, -8192, !dbg !22
  %40 = add nsw i32 %37, %23, !dbg !21
  %41 = add nsw i32 %40, -8192, !dbg !22
  %42 = add nsw i32 %38, -10240, !dbg !23
  %43 = add nsw i32 %40, -10240, !dbg !23
  %44 = add nsw i32 %38, -12288, !dbg !24
  %45 = add nsw i32 %40, -12288, !dbg !24
  %46 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !25
  %47 = insertelement <2 x i32> %46, i32 %21, i64 1, !dbg !25
  %48 = sdiv <2 x i32> %47, splat (i32 64), !dbg !25
  %49 = srem <2 x i32> %48, splat (i32 352), !dbg !26
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !27
  %51 = sext i32 %50 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !28
  %53 = extractelement <2 x i32> %49, i64 0, !dbg !27
  %54 = sext i32 %53 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %8, i64 %54, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %10, i64 %51, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %11, i64 %51, !dbg !34
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %54, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %102 = icmp slt <2 x i32> %49, splat (i32 128), !dbg !36
  %103 = extractelement <2 x i1> %102, i64 1, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !37
  %105 = extractelement <2 x i1> %102, i64 0, !dbg !37
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !37
  %107 = and <2 x i32> %49, splat (i32 -32), !dbg !38
  %108 = icmp eq <2 x i32> %107, splat (i32 128), !dbg !38
  %109 = shl nsw i32 %50, 6, !dbg !21
  %110 = shl nsw i32 %53, 6, !dbg !21
  %111 = add nsw i32 %39, %109, !dbg !39
  %112 = add nsw i32 %41, %110, !dbg !39
  %113 = sext i32 %111 to i64, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !40
  %115 = sext i32 %112 to i64, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !40
  %117 = extractelement <2 x i1> %108, i64 1, !dbg !41
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #3, !dbg !41
  %119 = extractelement <2 x i1> %108, i64 0, !dbg !41
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !41
  %121 = icmp eq <2 x i32> %107, splat (i32 160), !dbg !42
  %122 = add nsw i32 %42, %109, !dbg !43
  %123 = add nsw i32 %43, %110, !dbg !43
  %124 = sext i32 %122 to i64, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !44
  %126 = sext i32 %123 to i64, !dbg !44
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !44
  %128 = extractelement <2 x i1> %121, i64 1, !dbg !45
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !45
  %130 = extractelement <2 x i1> %121, i64 0, !dbg !45
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !45
  %132 = icmp eq <2 x i32> %107, splat (i32 192), !dbg !46
  %133 = add nsw i32 %44, %109, !dbg !47
  %134 = add nsw i32 %45, %110, !dbg !47
  %135 = sext i32 %133 to i64, !dbg !48
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !48
  %137 = sext i32 %134 to i64, !dbg !48
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !48
  %139 = extractelement <2 x i1> %132, i64 1, !dbg !49
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %141 = extractelement <2 x i1> %132, i64 0, !dbg !49
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !49
  %143 = icmp eq <2 x i32> %107, splat (i32 224), !dbg !50
  %144 = add nsw i32 %38, -14336, !dbg !51
  %145 = add nsw i32 %144, %109, !dbg !52
  %146 = add nsw i32 %40, -14336, !dbg !51
  %147 = add nsw i32 %146, %110, !dbg !52
  %148 = sext i32 %145 to i64, !dbg !53
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !53
  %150 = sext i32 %147 to i64, !dbg !53
  %151 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !53
  %152 = extractelement <2 x i1> %143, i64 1, !dbg !54
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152) #3, !dbg !54
  %154 = extractelement <2 x i1> %143, i64 0, !dbg !54
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #3, !dbg !54
  %156 = icmp eq <2 x i32> %107, splat (i32 256), !dbg !55
  %157 = add nsw i32 %38, -16384, !dbg !56
  %158 = add nsw i32 %157, %109, !dbg !57
  %159 = add nsw i32 %40, -16384, !dbg !56
  %160 = add nsw i32 %159, %110, !dbg !57
  %161 = sext i32 %158 to i64, !dbg !58
  %162 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !58
  %163 = sext i32 %160 to i64, !dbg !58
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !58
  %165 = extractelement <2 x i1> %156, i64 1, !dbg !59
  %166 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165, i32 0, i1 %165) #3, !dbg !59
  %167 = extractelement <2 x i1> %156, i64 0, !dbg !59
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %167, i32 0, i1 %167, i32 0, i1 %167, i32 0, i1 %167, i32 0, i1 %167) #3, !dbg !59
  %169 = icmp eq <2 x i32> %107, splat (i32 288), !dbg !60
  %170 = add nsw i32 %38, -18432, !dbg !61
  %171 = add nsw i32 %170, %109, !dbg !62
  %172 = add nsw i32 %40, -18432, !dbg !61
  %173 = add nsw i32 %172, %110, !dbg !62
  %174 = sext i32 %171 to i64, !dbg !63
  %175 = getelementptr float, ptr addrspace(1) %6, i64 %174, !dbg !63
  %176 = sext i32 %173 to i64, !dbg !63
  %177 = getelementptr float, ptr addrspace(1) %6, i64 %176, !dbg !63
  %178 = extractelement <2 x i1> %169, i64 1, !dbg !64
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %175, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !64
  %180 = extractelement <2 x i1> %169, i64 0, !dbg !64
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %177, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #3, !dbg !64
  %182 = icmp sgt i32 %50, 319, !dbg !27
  %183 = icmp sgt i32 %53, 319, !dbg !27
  %184 = add nsw i32 %38, -20480, !dbg !65
  %185 = add nsw i32 %184, %109, !dbg !66
  %186 = add nsw i32 %40, -20480, !dbg !65
  %187 = add nsw i32 %186, %110, !dbg !66
  %188 = sext i32 %185 to i64, !dbg !67
  %189 = getelementptr float, ptr addrspace(1) %7, i64 %188, !dbg !67
  %190 = sext i32 %187 to i64, !dbg !67
  %191 = getelementptr float, ptr addrspace(1) %7, i64 %190, !dbg !67
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %189, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182, i32 0, i1 %182) #3, !dbg !68
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !68
  %194 = fadd float %67, 0x3EE4F8B580000000, !dbg !69
  %195 = fadd float %69, 0x3EE4F8B580000000, !dbg !69
  %196 = fadd float %71, 0x3EE4F8B580000000, !dbg !69
  %197 = fadd float %73, 0x3EE4F8B580000000, !dbg !69
  %198 = fadd float %75, 0x3EE4F8B580000000, !dbg !69
  %199 = fadd float %77, 0x3EE4F8B580000000, !dbg !69
  %200 = fadd float %79, 0x3EE4F8B580000000, !dbg !69
  %201 = fadd float %81, 0x3EE4F8B580000000, !dbg !69
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i = icmp eq i32 %202, 0, !dbg !70
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i = icmp eq i32 %203, 0, !dbg !70
  br i1 %.not.i, label %209, label %204, !dbg !70

204:                                              ; preds = %15
  br i1 %.not1.i, label %207, label %205, !dbg !70

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

209:                                              ; preds = %15
  br i1 %.not1.i, label %212, label %210, !dbg !70

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

__nv_sqrtf.exit:                                  ; preds = %205, %207, %210, %212
  %.0.i = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !70
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i57 = icmp eq i32 %214, 0, !dbg !70
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i60 = icmp eq i32 %215, 0, !dbg !70
  br i1 %.not.i57, label %221, label %216, !dbg !70

216:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %219, label %217, !dbg !70

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %195) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %195) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

221:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %224, label %222, !dbg !70

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.f(float %195) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.f(float %195) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

__nv_sqrtf.exit61:                                ; preds = %217, %219, %222, %224
  %.0.i59 = phi float [ %218, %217 ], [ %220, %219 ], [ %223, %222 ], [ %225, %224 ], !dbg !70
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i62 = icmp eq i32 %226, 0, !dbg !70
  %227 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i65 = icmp eq i32 %227, 0, !dbg !70
  br i1 %.not.i62, label %233, label %228, !dbg !70

228:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %231, label %229, !dbg !70

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %196) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %196) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

233:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %236, label %234, !dbg !70

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.f(float %196) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.f(float %196) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

__nv_sqrtf.exit66:                                ; preds = %229, %231, %234, %236
  %.0.i64 = phi float [ %230, %229 ], [ %232, %231 ], [ %235, %234 ], [ %237, %236 ], !dbg !70
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i67 = icmp eq i32 %238, 0, !dbg !70
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i70 = icmp eq i32 %239, 0, !dbg !70
  br i1 %.not.i67, label %245, label %240, !dbg !70

240:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %243, label %241, !dbg !70

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %197) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %197) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

245:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %248, label %246, !dbg !70

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.f(float %197) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.f(float %197) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

__nv_sqrtf.exit71:                                ; preds = %241, %243, %246, %248
  %.0.i69 = phi float [ %242, %241 ], [ %244, %243 ], [ %247, %246 ], [ %249, %248 ], !dbg !70
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i72 = icmp eq i32 %250, 0, !dbg !70
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i75 = icmp eq i32 %251, 0, !dbg !70
  br i1 %.not.i72, label %257, label %252, !dbg !70

252:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %255, label %253, !dbg !70

253:                                              ; preds = %252
  %254 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

255:                                              ; preds = %252
  %256 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

257:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %260, label %258, !dbg !70

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

__nv_sqrtf.exit76:                                ; preds = %253, %255, %258, %260
  %.0.i74 = phi float [ %254, %253 ], [ %256, %255 ], [ %259, %258 ], [ %261, %260 ], !dbg !70
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i77 = icmp eq i32 %262, 0, !dbg !70
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i80 = icmp eq i32 %263, 0, !dbg !70
  br i1 %.not.i77, label %269, label %264, !dbg !70

264:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %267, label %265, !dbg !70

265:                                              ; preds = %264
  %266 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %199) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

267:                                              ; preds = %264
  %268 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %199) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

269:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %272, label %270, !dbg !70

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.f(float %199) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.f(float %199) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

__nv_sqrtf.exit81:                                ; preds = %265, %267, %270, %272
  %.0.i79 = phi float [ %266, %265 ], [ %268, %267 ], [ %271, %270 ], [ %273, %272 ], !dbg !70
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i82 = icmp eq i32 %274, 0, !dbg !70
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i85 = icmp eq i32 %275, 0, !dbg !70
  br i1 %.not.i82, label %281, label %276, !dbg !70

276:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %279, label %277, !dbg !70

277:                                              ; preds = %276
  %278 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

279:                                              ; preds = %276
  %280 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

281:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %284, label %282, !dbg !70

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

__nv_sqrtf.exit86:                                ; preds = %277, %279, %282, %284
  %.0.i84 = phi float [ %278, %277 ], [ %280, %279 ], [ %283, %282 ], [ %285, %284 ], !dbg !70
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i87 = icmp eq i32 %286, 0, !dbg !70
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i90 = icmp eq i32 %287, 0, !dbg !70
  br i1 %.not.i87, label %293, label %288, !dbg !70

288:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %291, label %289, !dbg !70

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

293:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %296, label %294, !dbg !70

294:                                              ; preds = %293
  %295 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

296:                                              ; preds = %293
  %297 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

__nv_sqrtf.exit91:                                ; preds = %289, %291, %294, %296
  %.0.i89 = phi float [ %290, %289 ], [ %292, %291 ], [ %295, %294 ], [ %297, %296 ], !dbg !70
  %298 = shufflevector <2 x i1> %169, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !60
  %299 = shufflevector <2 x i1> %143, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !50
  %300 = shufflevector <2 x i1> %132, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !46
  %301 = shufflevector <2 x i1> %121, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %302 = shufflevector <2 x i1> %108, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %303 = shufflevector <2 x i1> %102, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %304 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !37
  %305 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !41
  %306 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !45
  %307 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !49
  %308 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !54
  %309 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !59
  %310 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !64
  %311 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !68
  %312 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !29
  %313 = insertelement <8 x i32> %312, i32 %62, i64 1, !dbg !29
  %314 = insertelement <8 x i32> %313, i32 %61, i64 2, !dbg !29
  %315 = insertelement <8 x i32> %314, i32 %60, i64 3, !dbg !29
  %316 = insertelement <8 x i32> %315, i32 %59, i64 4, !dbg !29
  %317 = insertelement <8 x i32> %316, i32 %58, i64 5, !dbg !29
  %318 = insertelement <8 x i32> %317, i32 %57, i64 6, !dbg !29
  %319 = insertelement <8 x i32> %318, i32 %56, i64 7, !dbg !29
  %320 = bitcast <8 x i32> %319 to <8 x float>, !dbg !29
  %321 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !37
  %322 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !41
  %323 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !45
  %324 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !49
  %325 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !54
  %326 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !59
  %327 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !64
  %328 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !68
  %329 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !37
  %330 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !41
  %331 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !45
  %332 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !49
  %333 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !54
  %334 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !59
  %335 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !64
  %336 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !68
  %337 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !37
  %338 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !41
  %339 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !45
  %340 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !49
  %341 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !54
  %342 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !59
  %343 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !64
  %344 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !68
  %345 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !37
  %346 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !41
  %347 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !45
  %348 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !49
  %349 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !54
  %350 = extractvalue { i32, i32, i32, i32 } %166, 3, !dbg !59
  %351 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !64
  %352 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !68
  %353 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !37
  %354 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !41
  %355 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !45
  %356 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !49
  %357 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !54
  %358 = extractvalue { i32, i32, i32, i32 } %166, 2, !dbg !59
  %359 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !64
  %360 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !68
  %361 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !37
  %362 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !41
  %363 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !45
  %364 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !49
  %365 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !54
  %366 = extractvalue { i32, i32, i32, i32 } %166, 1, !dbg !59
  %367 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !64
  %368 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !68
  %369 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !37
  %370 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !41
  %371 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !45
  %372 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !49
  %373 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !54
  %374 = extractvalue { i32, i32, i32, i32 } %166, 0, !dbg !59
  %375 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !64
  %376 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !68
  %377 = insertelement <8 x i32> poison, i32 %310, i64 0, !dbg !71
  %378 = insertelement <8 x i32> %377, i32 %327, i64 1, !dbg !71
  %379 = insertelement <8 x i32> %378, i32 %335, i64 2, !dbg !71
  %380 = insertelement <8 x i32> %379, i32 %343, i64 3, !dbg !71
  %381 = insertelement <8 x i32> %380, i32 %351, i64 4, !dbg !71
  %382 = insertelement <8 x i32> %381, i32 %359, i64 5, !dbg !71
  %383 = insertelement <8 x i32> %382, i32 %367, i64 6, !dbg !71
  %384 = insertelement <8 x i32> %383, i32 %375, i64 7, !dbg !71
  %385 = insertelement <8 x i32> poison, i32 %311, i64 0, !dbg !71
  %386 = insertelement <8 x i32> %385, i32 %328, i64 1, !dbg !71
  %387 = insertelement <8 x i32> %386, i32 %336, i64 2, !dbg !71
  %388 = insertelement <8 x i32> %387, i32 %344, i64 3, !dbg !71
  %389 = insertelement <8 x i32> %388, i32 %352, i64 4, !dbg !71
  %390 = insertelement <8 x i32> %389, i32 %360, i64 5, !dbg !71
  %391 = insertelement <8 x i32> %390, i32 %368, i64 6, !dbg !71
  %392 = insertelement <8 x i32> %391, i32 %376, i64 7, !dbg !71
  %393 = select <8 x i1> %298, <8 x i32> %384, <8 x i32> %392, !dbg !71
  %394 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !35
  %395 = insertelement <8 x i32> %394, i32 %100, i64 1, !dbg !35
  %396 = insertelement <8 x i32> %395, i32 %99, i64 2, !dbg !35
  %397 = insertelement <8 x i32> %396, i32 %98, i64 3, !dbg !35
  %398 = insertelement <8 x i32> %397, i32 %97, i64 4, !dbg !35
  %399 = insertelement <8 x i32> %398, i32 %96, i64 5, !dbg !35
  %400 = insertelement <8 x i32> %399, i32 %95, i64 6, !dbg !35
  %401 = insertelement <8 x i32> %400, i32 %94, i64 7, !dbg !35
  %402 = bitcast <8 x i32> %401 to <8 x float>, !dbg !35
  %403 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !33
  %404 = insertelement <8 x i32> %403, i32 %90, i64 1, !dbg !33
  %405 = insertelement <8 x i32> %404, i32 %89, i64 2, !dbg !33
  %406 = insertelement <8 x i32> %405, i32 %88, i64 3, !dbg !33
  %407 = insertelement <8 x i32> %406, i32 %87, i64 4, !dbg !33
  %408 = insertelement <8 x i32> %407, i32 %86, i64 5, !dbg !33
  %409 = insertelement <8 x i32> %408, i32 %85, i64 6, !dbg !33
  %410 = insertelement <8 x i32> %409, i32 %84, i64 7, !dbg !33
  %411 = bitcast <8 x i32> %410 to <8 x float>, !dbg !33
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !72
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i59) #3, !dbg !72
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i64) #3, !dbg !72
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i69) #3, !dbg !72
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i74) #3, !dbg !72
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i79) #3, !dbg !72
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i84) #3, !dbg !72
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i89) #3, !dbg !72
  %420 = shufflevector <2 x i1> %156, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !73
  %421 = insertelement <8 x i32> poison, i32 %309, i64 0, !dbg !73
  %422 = insertelement <8 x i32> %421, i32 %326, i64 1, !dbg !73
  %423 = insertelement <8 x i32> %422, i32 %334, i64 2, !dbg !73
  %424 = insertelement <8 x i32> %423, i32 %342, i64 3, !dbg !73
  %425 = insertelement <8 x i32> %424, i32 %350, i64 4, !dbg !73
  %426 = insertelement <8 x i32> %425, i32 %358, i64 5, !dbg !73
  %427 = insertelement <8 x i32> %426, i32 %366, i64 6, !dbg !73
  %428 = insertelement <8 x i32> %427, i32 %374, i64 7, !dbg !73
  %429 = select <8 x i1> %420, <8 x i32> %428, <8 x i32> %393, !dbg !73
  %430 = insertelement <8 x i32> poison, i32 %308, i64 0, !dbg !74
  %431 = insertelement <8 x i32> %430, i32 %325, i64 1, !dbg !74
  %432 = insertelement <8 x i32> %431, i32 %333, i64 2, !dbg !74
  %433 = insertelement <8 x i32> %432, i32 %341, i64 3, !dbg !74
  %434 = insertelement <8 x i32> %433, i32 %349, i64 4, !dbg !74
  %435 = insertelement <8 x i32> %434, i32 %357, i64 5, !dbg !74
  %436 = insertelement <8 x i32> %435, i32 %365, i64 6, !dbg !74
  %437 = insertelement <8 x i32> %436, i32 %373, i64 7, !dbg !74
  %438 = select <8 x i1> %299, <8 x i32> %437, <8 x i32> %429, !dbg !74
  %439 = insertelement <8 x i32> poison, i32 %307, i64 0, !dbg !75
  %440 = insertelement <8 x i32> %439, i32 %324, i64 1, !dbg !75
  %441 = insertelement <8 x i32> %440, i32 %332, i64 2, !dbg !75
  %442 = insertelement <8 x i32> %441, i32 %340, i64 3, !dbg !75
  %443 = insertelement <8 x i32> %442, i32 %348, i64 4, !dbg !75
  %444 = insertelement <8 x i32> %443, i32 %356, i64 5, !dbg !75
  %445 = insertelement <8 x i32> %444, i32 %364, i64 6, !dbg !75
  %446 = insertelement <8 x i32> %445, i32 %372, i64 7, !dbg !75
  %447 = select <8 x i1> %300, <8 x i32> %446, <8 x i32> %438, !dbg !75
  %448 = insertelement <8 x i32> poison, i32 %306, i64 0, !dbg !76
  %449 = insertelement <8 x i32> %448, i32 %323, i64 1, !dbg !76
  %450 = insertelement <8 x i32> %449, i32 %331, i64 2, !dbg !76
  %451 = insertelement <8 x i32> %450, i32 %339, i64 3, !dbg !76
  %452 = insertelement <8 x i32> %451, i32 %347, i64 4, !dbg !76
  %453 = insertelement <8 x i32> %452, i32 %355, i64 5, !dbg !76
  %454 = insertelement <8 x i32> %453, i32 %363, i64 6, !dbg !76
  %455 = insertelement <8 x i32> %454, i32 %371, i64 7, !dbg !76
  %456 = select <8 x i1> %301, <8 x i32> %455, <8 x i32> %447, !dbg !76
  %457 = insertelement <8 x i32> poison, i32 %305, i64 0, !dbg !77
  %458 = insertelement <8 x i32> %457, i32 %322, i64 1, !dbg !77
  %459 = insertelement <8 x i32> %458, i32 %330, i64 2, !dbg !77
  %460 = insertelement <8 x i32> %459, i32 %338, i64 3, !dbg !77
  %461 = insertelement <8 x i32> %460, i32 %346, i64 4, !dbg !77
  %462 = insertelement <8 x i32> %461, i32 %354, i64 5, !dbg !77
  %463 = insertelement <8 x i32> %462, i32 %362, i64 6, !dbg !77
  %464 = insertelement <8 x i32> %463, i32 %370, i64 7, !dbg !77
  %465 = select <8 x i1> %302, <8 x i32> %464, <8 x i32> %456, !dbg !77
  %466 = insertelement <8 x i32> poison, i32 %304, i64 0, !dbg !78
  %467 = insertelement <8 x i32> %466, i32 %321, i64 1, !dbg !78
  %468 = insertelement <8 x i32> %467, i32 %329, i64 2, !dbg !78
  %469 = insertelement <8 x i32> %468, i32 %337, i64 3, !dbg !78
  %470 = insertelement <8 x i32> %469, i32 %345, i64 4, !dbg !78
  %471 = insertelement <8 x i32> %470, i32 %353, i64 5, !dbg !78
  %472 = insertelement <8 x i32> %471, i32 %361, i64 6, !dbg !78
  %473 = insertelement <8 x i32> %472, i32 %369, i64 7, !dbg !78
  %474 = select <8 x i1> %303, <8 x i32> %473, <8 x i32> %465, !dbg !78
  %475 = bitcast <8 x i32> %474 to <8 x float>, !dbg !78
  %476 = fsub <8 x float> %475, %320, !dbg !79
  %477 = insertelement <8 x float> poison, float %419, i64 0, !dbg !80
  %478 = insertelement <8 x float> %477, float %418, i64 1, !dbg !80
  %479 = insertelement <8 x float> %478, float %417, i64 2, !dbg !80
  %480 = insertelement <8 x float> %479, float %416, i64 3, !dbg !80
  %481 = insertelement <8 x float> %480, float %415, i64 4, !dbg !80
  %482 = insertelement <8 x float> %481, float %414, i64 5, !dbg !80
  %483 = insertelement <8 x float> %482, float %413, i64 6, !dbg !80
  %484 = insertelement <8 x float> %483, float %412, i64 7, !dbg !80
  %485 = fmul <8 x float> %476, %484, !dbg !80
  %486 = fmul <8 x float> %485, %411, !dbg !81
  %487 = fadd <8 x float> %486, %402, !dbg !82
  %488 = fcmp olt <8 x float> %487, zeroinitializer, !dbg !83
  %489 = extractelement <8 x i1> %488, i64 7, !dbg !87
  %490 = extractelement <8 x i1> %488, i64 6, !dbg !87
  %491 = extractelement <8 x i1> %488, i64 5, !dbg !87
  %492 = extractelement <8 x i1> %488, i64 4, !dbg !87
  %493 = extractelement <8 x i1> %488, i64 3, !dbg !87
  %494 = extractelement <8 x i1> %488, i64 2, !dbg !87
  %495 = extractelement <8 x i1> %488, i64 1, !dbg !87
  %496 = extractelement <8 x i1> %488, i64 0, !dbg !87
  %497 = sext i32 %21 to i64, !dbg !88
  %498 = getelementptr float, ptr addrspace(1) %12, i64 %497, !dbg !88
  %499 = sext i32 %22 to i64, !dbg !88
  %500 = getelementptr float, ptr addrspace(1) %12, i64 %499, !dbg !88
  %501 = extractelement <8 x i32> %474, i64 4, !dbg !89
  %502 = extractelement <8 x i32> %474, i64 5, !dbg !89
  %503 = extractelement <8 x i32> %474, i64 6, !dbg !89
  %504 = extractelement <8 x i32> %474, i64 7, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %504, i32 %503, i32 %502, i32 %501, ptr addrspace(1) %498, i1 true) #3, !dbg !89
  %505 = extractelement <8 x i32> %474, i64 0, !dbg !89
  %506 = extractelement <8 x i32> %474, i64 1, !dbg !89
  %507 = extractelement <8 x i32> %474, i64 2, !dbg !89
  %508 = extractelement <8 x i32> %474, i64 3, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %508, i32 %507, i32 %506, i32 %505, ptr addrspace(1) %500, i1 true) #3, !dbg !89
  %509 = getelementptr float, ptr addrspace(1) %13, i64 %497, !dbg !90
  %510 = getelementptr float, ptr addrspace(1) %13, i64 %499, !dbg !90
  %bc = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %511 = extractelement <8 x i32> %bc, i64 7, !dbg !91
  %512 = select i1 %489, i32 0, i32 %511, !dbg !87
  %bc92 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %513 = extractelement <8 x i32> %bc92, i64 6, !dbg !91
  %514 = select i1 %490, i32 0, i32 %513, !dbg !87
  %bc93 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %515 = extractelement <8 x i32> %bc93, i64 5, !dbg !91
  %516 = select i1 %491, i32 0, i32 %515, !dbg !87
  %bc94 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %517 = extractelement <8 x i32> %bc94, i64 4, !dbg !91
  %518 = select i1 %492, i32 0, i32 %517, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %512, i32 %514, i32 %516, i32 %518, ptr addrspace(1) %509, i1 true) #3, !dbg !91
  %bc95 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %519 = extractelement <8 x i32> %bc95, i64 3, !dbg !91
  %520 = select i1 %493, i32 0, i32 %519, !dbg !87
  %bc96 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %521 = extractelement <8 x i32> %bc96, i64 2, !dbg !91
  %522 = select i1 %494, i32 0, i32 %521, !dbg !87
  %bc97 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %523 = extractelement <8 x i32> %bc97, i64 1, !dbg !91
  %524 = select i1 %495, i32 0, i32 %523, !dbg !87
  %bc98 = bitcast <8 x float> %487 to <8 x i32>, !dbg !91
  %525 = extractelement <8 x i32> %bc98, i64 0, !dbg !91
  %526 = select i1 %496, i32 0, i32 %525, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %520, i32 %522, i32 %524, i32 %526, ptr addrspace(1) %510, i1 true) #3, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccp667pbow56efzhmgdxiwmpoxzoatf4m54sdtkw3yn6kgp57dbt.py", directory: "inductor_cache/cp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 50, scope: !7)
!18 = !DILocation(line: 37, column: 45, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 42, column: 40, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 27, scope: !7)
!27 = !DILocation(line: 68, column: 20, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 32, scope: !7)
!33 = !DILocation(line: 30, column: 37, scope: !7)
!34 = !DILocation(line: 31, column: 32, scope: !7)
!35 = !DILocation(line: 31, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 55, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 65, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 55, scope: !7)
!44 = !DILocation(line: 47, column: 31, scope: !7)
!45 = !DILocation(line: 47, column: 65, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 55, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 65, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 55, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 65, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 36, scope: !7)
!57 = !DILocation(line: 62, column: 55, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 62, column: 65, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 36, scope: !7)
!62 = !DILocation(line: 67, column: 55, scope: !7)
!63 = !DILocation(line: 67, column: 31, scope: !7)
!64 = !DILocation(line: 67, column: 65, scope: !7)
!65 = !DILocation(line: 71, column: 36, scope: !7)
!66 = !DILocation(line: 71, column: 55, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 65, scope: !7)
!69 = !DILocation(line: 81, column: 20, scope: !7)
!70 = !DILocation(line: 82, column: 27, scope: !7)
!71 = !DILocation(line: 72, column: 35, scope: !7)
!72 = !DILocation(line: 84, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 35, scope: !7)
!74 = !DILocation(line: 74, column: 35, scope: !7)
!75 = !DILocation(line: 75, column: 35, scope: !7)
!76 = !DILocation(line: 76, column: 35, scope: !7)
!77 = !DILocation(line: 77, column: 34, scope: !7)
!78 = !DILocation(line: 78, column: 33, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 87, column: 20, scope: !7)
!81 = !DILocation(line: 88, column: 20, scope: !7)
!82 = !DILocation(line: 89, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 91, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 92, column: 25, scope: !7)
!89 = !DILocation(line: 92, column: 37, scope: !7)
!90 = !DILocation(line: 93, column: 25, scope: !7)
!91 = !DILocation(line: 93, column: 37, scope: !7)
!92 = !DILocation(line: 93, column: 4, scope: !7)
