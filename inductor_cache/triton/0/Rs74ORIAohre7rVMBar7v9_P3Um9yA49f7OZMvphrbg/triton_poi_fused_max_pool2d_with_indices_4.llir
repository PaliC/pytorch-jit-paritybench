; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 6, !dbg !15
  %17 = shl i32 %8, 4, !dbg !16
  %18 = and i32 %17, 48, !dbg !16
  %19 = lshr i32 %8, 4, !dbg !16
  %20 = and i32 %19, 15, !dbg !16
  %21 = or disjoint i32 %16, %18, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = or disjoint i32 %16, %20, !dbg !17
  %26 = or disjoint i32 %25, 16, !dbg !17
  %27 = or disjoint i32 %25, 32, !dbg !17
  %28 = or disjoint i32 %25, 48, !dbg !17
  %29 = icmp slt i32 %21, 128, !dbg !18
  %30 = icmp slt i32 %25, 128, !dbg !18
  %31 = icmp slt i32 %26, 128, !dbg !18
  %32 = icmp slt i32 %27, 128, !dbg !18
  %33 = icmp slt i32 %28, 128, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %34 = sdiv i32 %.frozen, 16, !dbg !19
  %35 = mul i32 %34, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %.frozen40 = freeze i32 %14, !dbg !21
  %36 = sdiv i32 %.frozen40, 256, !dbg !21
  %37 = mul i32 %36, 256, !dbg !22
  %.decomposed41 = sub i32 %.frozen40, %37, !dbg !22
  %38 = shl nsw i32 %.decomposed, 8, !dbg !23
  %39 = shl i32 %34, 13, !dbg !24
  %40 = add i32 %39, %38, !dbg !25
  %41 = add i32 %40, %21, !dbg !26
  %42 = add i32 %40, %22, !dbg !26
  %43 = add i32 %40, %23, !dbg !26
  %44 = add i32 %40, %24, !dbg !26
  %45 = sext i32 %41 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %42 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %43 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = sext i32 %44 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %29) #2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %29) #2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %29) #2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %29) #2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !28
  %73 = or disjoint i32 %40, 128, !dbg !29
  %74 = add i32 %73, %21, !dbg !30
  %75 = add i32 %73, %22, !dbg !30
  %76 = add i32 %73, %23, !dbg !30
  %77 = add i32 %73, %24, !dbg !30
  %78 = sext i32 %74 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !31
  %80 = sext i32 %75 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = sext i32 %76 to i64, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !31
  %84 = sext i32 %77 to i64, !dbg !31
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !31
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %29) #2, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !32
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %29) #2, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %29) #2, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !32
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %29) #2, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !32
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !32
  %106 = add i32 %40, 4096, !dbg !33
  %107 = add i32 %106, %21, !dbg !34
  %108 = add i32 %106, %22, !dbg !34
  %109 = add i32 %106, %23, !dbg !34
  %110 = add i32 %106, %24, !dbg !34
  %111 = sext i32 %107 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !35
  %113 = sext i32 %108 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !35
  %115 = sext i32 %109 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !35
  %117 = sext i32 %110 to i64, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !35
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %29) #2, !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !36
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %29) #2, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !36
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %29) #2, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !36
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !36
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %118, i1 %29) #2, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !36
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !36
  %139 = add i32 %40, 4224, !dbg !37
  %140 = add i32 %139, %21, !dbg !38
  %141 = add i32 %139, %22, !dbg !38
  %142 = add i32 %139, %23, !dbg !38
  %143 = add i32 %139, %24, !dbg !38
  %144 = sext i32 %140 to i64, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !39
  %146 = sext i32 %141 to i64, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !39
  %148 = sext i32 %142 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !39
  %150 = sext i32 %143 to i64, !dbg !39
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !39
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %29) #2, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !40
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !40
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !40
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %29) #2, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !40
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !40
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %29) #2, !dbg !40
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !40
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !40
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !40
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !40
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %29) #2, !dbg !40
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !40
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !40
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !40
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !40
  %172 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !28
  %173 = insertelement <4 x i32> %172, i32 %55, i64 1, !dbg !28
  %174 = insertelement <4 x i32> %173, i32 %56, i64 2, !dbg !28
  %175 = insertelement <4 x i32> %174, i32 %57, i64 3, !dbg !28
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !28
  %177 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !32
  %178 = insertelement <4 x i32> %177, i32 %88, i64 1, !dbg !32
  %179 = insertelement <4 x i32> %178, i32 %89, i64 2, !dbg !32
  %180 = insertelement <4 x i32> %179, i32 %90, i64 3, !dbg !32
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !32
  %182 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !36
  %183 = insertelement <4 x i32> %182, i32 %121, i64 1, !dbg !36
  %184 = insertelement <4 x i32> %183, i32 %122, i64 2, !dbg !36
  %185 = insertelement <4 x i32> %184, i32 %123, i64 3, !dbg !36
  %186 = bitcast <4 x i32> %185 to <4 x float>, !dbg !36
  %187 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !40
  %188 = insertelement <4 x i32> %187, i32 %154, i64 1, !dbg !40
  %189 = insertelement <4 x i32> %188, i32 %155, i64 2, !dbg !40
  %190 = insertelement <4 x i32> %189, i32 %156, i64 3, !dbg !40
  %191 = bitcast <4 x i32> %190 to <4 x float>, !dbg !40
  %192 = fcmp ogt <4 x float> %181, %176, !dbg !41
  %193 = fcmp uno <4 x float> %181, zeroinitializer, !dbg !45
  %194 = or <4 x i1> %192, %193, !dbg !46
  %.v = select <4 x i1> %194, <4 x i32> %180, <4 x i32> %175, !dbg !47
  %195 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %196 = fcmp olt <4 x float> %195, %186, !dbg !48
  %197 = fcmp uno <4 x float> %186, zeroinitializer, !dbg !50
  %198 = or <4 x i1> %196, %197, !dbg !51
  %.v33 = select <4 x i1> %198, <4 x i32> %185, <4 x i32> %.v, !dbg !52
  %199 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !52
  %200 = fcmp olt <4 x float> %199, %191, !dbg !53
  %201 = bitcast i32 %153 to float, !dbg !55
  %202 = fcmp uno float %201, 0.000000e+00, !dbg !55
  %203 = bitcast i32 %154 to float, !dbg !55
  %204 = fcmp uno float %203, 0.000000e+00, !dbg !55
  %205 = bitcast i32 %155 to float, !dbg !55
  %206 = fcmp uno float %205, 0.000000e+00, !dbg !55
  %207 = bitcast i32 %156 to float, !dbg !55
  %208 = fcmp uno float %207, 0.000000e+00, !dbg !55
  %209 = extractelement <4 x i1> %200, i64 0, !dbg !56
  %210 = or i1 %209, %202, !dbg !56
  %211 = extractelement <4 x i1> %200, i64 1, !dbg !56
  %212 = or i1 %211, %204, !dbg !56
  %213 = extractelement <4 x i1> %200, i64 2, !dbg !56
  %214 = or i1 %213, %206, !dbg !56
  %215 = extractelement <4 x i1> %200, i64 3, !dbg !56
  %216 = or i1 %215, %208, !dbg !56
  %217 = zext <4 x i1> %192 to <4 x i8>, !dbg !57
  %218 = select <4 x i1> %196, <4 x i8> splat (i8 2), <4 x i8> %217, !dbg !58
  %219 = select <4 x i1> %200, <4 x i8> splat (i8 3), <4 x i8> %218, !dbg !59
  %220 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !28
  %221 = insertelement <4 x i32> %220, i32 %60, i64 1, !dbg !28
  %222 = insertelement <4 x i32> %221, i32 %61, i64 2, !dbg !28
  %223 = insertelement <4 x i32> %222, i32 %62, i64 3, !dbg !28
  %224 = bitcast <4 x i32> %223 to <4 x float>, !dbg !28
  %225 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !32
  %226 = insertelement <4 x i32> %225, i32 %93, i64 1, !dbg !32
  %227 = insertelement <4 x i32> %226, i32 %94, i64 2, !dbg !32
  %228 = insertelement <4 x i32> %227, i32 %95, i64 3, !dbg !32
  %229 = bitcast <4 x i32> %228 to <4 x float>, !dbg !32
  %230 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !36
  %231 = insertelement <4 x i32> %230, i32 %126, i64 1, !dbg !36
  %232 = insertelement <4 x i32> %231, i32 %127, i64 2, !dbg !36
  %233 = insertelement <4 x i32> %232, i32 %128, i64 3, !dbg !36
  %234 = bitcast <4 x i32> %233 to <4 x float>, !dbg !36
  %235 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !40
  %236 = insertelement <4 x i32> %235, i32 %159, i64 1, !dbg !40
  %237 = insertelement <4 x i32> %236, i32 %160, i64 2, !dbg !40
  %238 = insertelement <4 x i32> %237, i32 %161, i64 3, !dbg !40
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !40
  %240 = fcmp ogt <4 x float> %229, %224, !dbg !41
  %241 = fcmp uno <4 x float> %229, zeroinitializer, !dbg !45
  %242 = or <4 x i1> %240, %241, !dbg !46
  %.v34 = select <4 x i1> %242, <4 x i32> %228, <4 x i32> %223, !dbg !47
  %243 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !47
  %244 = fcmp olt <4 x float> %243, %234, !dbg !48
  %245 = fcmp uno <4 x float> %234, zeroinitializer, !dbg !50
  %246 = or <4 x i1> %244, %245, !dbg !51
  %.v35 = select <4 x i1> %246, <4 x i32> %233, <4 x i32> %.v34, !dbg !52
  %247 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !52
  %248 = fcmp olt <4 x float> %247, %239, !dbg !53
  %249 = bitcast i32 %158 to float, !dbg !55
  %250 = fcmp uno float %249, 0.000000e+00, !dbg !55
  %251 = bitcast i32 %159 to float, !dbg !55
  %252 = fcmp uno float %251, 0.000000e+00, !dbg !55
  %253 = bitcast i32 %160 to float, !dbg !55
  %254 = fcmp uno float %253, 0.000000e+00, !dbg !55
  %255 = bitcast i32 %161 to float, !dbg !55
  %256 = fcmp uno float %255, 0.000000e+00, !dbg !55
  %257 = extractelement <4 x i1> %248, i64 0, !dbg !56
  %258 = or i1 %257, %250, !dbg !56
  %259 = extractelement <4 x i1> %248, i64 1, !dbg !56
  %260 = or i1 %259, %252, !dbg !56
  %261 = extractelement <4 x i1> %248, i64 2, !dbg !56
  %262 = or i1 %261, %254, !dbg !56
  %263 = extractelement <4 x i1> %248, i64 3, !dbg !56
  %264 = or i1 %263, %256, !dbg !56
  %265 = zext <4 x i1> %240 to <4 x i8>, !dbg !57
  %266 = select <4 x i1> %244, <4 x i8> splat (i8 2), <4 x i8> %265, !dbg !58
  %267 = select <4 x i1> %248, <4 x i8> splat (i8 3), <4 x i8> %266, !dbg !59
  %268 = insertelement <4 x i32> poison, i32 %64, i64 0, !dbg !28
  %269 = insertelement <4 x i32> %268, i32 %65, i64 1, !dbg !28
  %270 = insertelement <4 x i32> %269, i32 %66, i64 2, !dbg !28
  %271 = insertelement <4 x i32> %270, i32 %67, i64 3, !dbg !28
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !28
  %273 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !32
  %274 = insertelement <4 x i32> %273, i32 %98, i64 1, !dbg !32
  %275 = insertelement <4 x i32> %274, i32 %99, i64 2, !dbg !32
  %276 = insertelement <4 x i32> %275, i32 %100, i64 3, !dbg !32
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !32
  %278 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !36
  %279 = insertelement <4 x i32> %278, i32 %131, i64 1, !dbg !36
  %280 = insertelement <4 x i32> %279, i32 %132, i64 2, !dbg !36
  %281 = insertelement <4 x i32> %280, i32 %133, i64 3, !dbg !36
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !36
  %283 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !40
  %284 = insertelement <4 x i32> %283, i32 %164, i64 1, !dbg !40
  %285 = insertelement <4 x i32> %284, i32 %165, i64 2, !dbg !40
  %286 = insertelement <4 x i32> %285, i32 %166, i64 3, !dbg !40
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !40
  %288 = fcmp ogt <4 x float> %277, %272, !dbg !41
  %289 = fcmp uno <4 x float> %277, zeroinitializer, !dbg !45
  %290 = or <4 x i1> %288, %289, !dbg !46
  %.v36 = select <4 x i1> %290, <4 x i32> %276, <4 x i32> %271, !dbg !47
  %291 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !47
  %292 = fcmp olt <4 x float> %291, %282, !dbg !48
  %293 = fcmp uno <4 x float> %282, zeroinitializer, !dbg !50
  %294 = or <4 x i1> %292, %293, !dbg !51
  %.v37 = select <4 x i1> %294, <4 x i32> %281, <4 x i32> %.v36, !dbg !52
  %295 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !52
  %296 = fcmp olt <4 x float> %295, %287, !dbg !53
  %297 = bitcast i32 %163 to float, !dbg !55
  %298 = fcmp uno float %297, 0.000000e+00, !dbg !55
  %299 = bitcast i32 %164 to float, !dbg !55
  %300 = fcmp uno float %299, 0.000000e+00, !dbg !55
  %301 = bitcast i32 %165 to float, !dbg !55
  %302 = fcmp uno float %301, 0.000000e+00, !dbg !55
  %303 = bitcast i32 %166 to float, !dbg !55
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !55
  %305 = extractelement <4 x i1> %296, i64 0, !dbg !56
  %306 = or i1 %305, %298, !dbg !56
  %307 = extractelement <4 x i1> %296, i64 1, !dbg !56
  %308 = or i1 %307, %300, !dbg !56
  %309 = extractelement <4 x i1> %296, i64 2, !dbg !56
  %310 = or i1 %309, %302, !dbg !56
  %311 = extractelement <4 x i1> %296, i64 3, !dbg !56
  %312 = or i1 %311, %304, !dbg !56
  %313 = zext <4 x i1> %288 to <4 x i8>, !dbg !57
  %314 = select <4 x i1> %292, <4 x i8> splat (i8 2), <4 x i8> %313, !dbg !58
  %315 = select <4 x i1> %296, <4 x i8> splat (i8 3), <4 x i8> %314, !dbg !59
  %316 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !28
  %317 = insertelement <4 x i32> %316, i32 %70, i64 1, !dbg !28
  %318 = insertelement <4 x i32> %317, i32 %71, i64 2, !dbg !28
  %319 = insertelement <4 x i32> %318, i32 %72, i64 3, !dbg !28
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !28
  %321 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !32
  %322 = insertelement <4 x i32> %321, i32 %103, i64 1, !dbg !32
  %323 = insertelement <4 x i32> %322, i32 %104, i64 2, !dbg !32
  %324 = insertelement <4 x i32> %323, i32 %105, i64 3, !dbg !32
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !32
  %326 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !36
  %327 = insertelement <4 x i32> %326, i32 %136, i64 1, !dbg !36
  %328 = insertelement <4 x i32> %327, i32 %137, i64 2, !dbg !36
  %329 = insertelement <4 x i32> %328, i32 %138, i64 3, !dbg !36
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !36
  %331 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !40
  %332 = insertelement <4 x i32> %331, i32 %169, i64 1, !dbg !40
  %333 = insertelement <4 x i32> %332, i32 %170, i64 2, !dbg !40
  %334 = insertelement <4 x i32> %333, i32 %171, i64 3, !dbg !40
  %335 = bitcast <4 x i32> %334 to <4 x float>, !dbg !40
  %336 = fcmp ogt <4 x float> %325, %320, !dbg !41
  %337 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !45
  %338 = or <4 x i1> %336, %337, !dbg !46
  %.v38 = select <4 x i1> %338, <4 x i32> %324, <4 x i32> %319, !dbg !47
  %339 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !47
  %340 = fcmp olt <4 x float> %339, %330, !dbg !48
  %341 = fcmp uno <4 x float> %330, zeroinitializer, !dbg !50
  %342 = or <4 x i1> %340, %341, !dbg !51
  %.v39 = select <4 x i1> %342, <4 x i32> %329, <4 x i32> %.v38, !dbg !52
  %343 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !52
  %344 = fcmp olt <4 x float> %343, %335, !dbg !53
  %345 = bitcast i32 %168 to float, !dbg !55
  %346 = fcmp uno float %345, 0.000000e+00, !dbg !55
  %347 = bitcast i32 %169 to float, !dbg !55
  %348 = fcmp uno float %347, 0.000000e+00, !dbg !55
  %349 = bitcast i32 %170 to float, !dbg !55
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !55
  %351 = bitcast i32 %171 to float, !dbg !55
  %352 = fcmp uno float %351, 0.000000e+00, !dbg !55
  %353 = extractelement <4 x i1> %344, i64 0, !dbg !56
  %354 = or i1 %353, %346, !dbg !56
  %355 = extractelement <4 x i1> %344, i64 1, !dbg !56
  %356 = or i1 %355, %348, !dbg !56
  %357 = extractelement <4 x i1> %344, i64 2, !dbg !56
  %358 = or i1 %357, %350, !dbg !56
  %359 = extractelement <4 x i1> %344, i64 3, !dbg !56
  %360 = or i1 %359, %352, !dbg !56
  %361 = zext <4 x i1> %336 to <4 x i8>, !dbg !57
  %362 = select <4 x i1> %340, <4 x i8> splat (i8 2), <4 x i8> %361, !dbg !58
  %363 = select <4 x i1> %344, <4 x i8> splat (i8 3), <4 x i8> %362, !dbg !59
  %364 = shl i32 %25, 8, !dbg !60
  %365 = shl i32 %26, 8, !dbg !60
  %366 = shl i32 %27, 8, !dbg !60
  %367 = shl i32 %28, 8, !dbg !60
  %368 = shl i32 %36, 15, !dbg !61
  %369 = add i32 %368, %.decomposed41, !dbg !62
  %370 = add i32 %369, %364, !dbg !63
  %371 = add i32 %369, %365, !dbg !63
  %372 = add i32 %369, %366, !dbg !63
  %373 = add i32 %369, %367, !dbg !63
  %374 = sext i32 %370 to i64, !dbg !64
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !64
  %376 = sext i32 %371 to i64, !dbg !64
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %376, !dbg !64
  %378 = sext i32 %372 to i64, !dbg !64
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !64
  %380 = sext i32 %373 to i64, !dbg !64
  %381 = getelementptr float, ptr addrspace(1) %1, i64 %380, !dbg !64
  %382 = shl i32 %8, 10, !dbg !65
  %383 = and i32 %382, 3072, !dbg !65
  %384 = or disjoint i32 %383, %10, !dbg !65
  %385 = and i32 %11, 1020, !dbg !65
  %386 = lshr exact i32 %383, 2, !dbg !65
  %387 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %386, !dbg !65
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %384, !dbg !65
  %389 = extractelement <4 x i32> %.v33, i64 0, !dbg !65
  %390 = select i1 %210, i32 %153, i32 %389, !dbg !66
  %391 = insertelement <1 x i32> poison, i32 %390, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %391, i1 true) #2, !dbg !65
  %392 = or disjoint i32 %384, 64, !dbg !65
  %393 = lshr i32 %392, 4, !dbg !65
  %394 = and i32 %393, 196, !dbg !65
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !65
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %392, !dbg !65
  %397 = extractelement <4 x i32> %.v33, i64 1, !dbg !65
  %398 = select i1 %212, i32 %154, i32 %397, !dbg !66
  %399 = insertelement <1 x i32> poison, i32 %398, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %399, i1 true) #2, !dbg !65
  %400 = or disjoint i32 %384, 128, !dbg !65
  %401 = lshr i32 %400, 4, !dbg !65
  %402 = and i32 %401, 200, !dbg !65
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !65
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !65
  %405 = extractelement <4 x i32> %.v33, i64 2, !dbg !65
  %406 = select i1 %214, i32 %155, i32 %405, !dbg !66
  %407 = insertelement <1 x i32> poison, i32 %406, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %407, i1 true) #2, !dbg !65
  %408 = or disjoint i32 %384, 192, !dbg !65
  %409 = lshr i32 %408, 4, !dbg !65
  %410 = and i32 %409, 204, !dbg !65
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !65
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %408, !dbg !65
  %413 = extractelement <4 x i32> %.v33, i64 3, !dbg !65
  %414 = select i1 %216, i32 %156, i32 %413, !dbg !66
  %415 = insertelement <1 x i32> poison, i32 %414, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %415, i1 true) #2, !dbg !65
  %416 = or disjoint i32 %384, 256, !dbg !65
  %417 = lshr i32 %416, 4, !dbg !65
  %418 = and i32 %417, 208, !dbg !65
  %419 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !65
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %416, !dbg !65
  %421 = extractelement <4 x i32> %.v35, i64 0, !dbg !65
  %422 = select i1 %258, i32 %158, i32 %421, !dbg !66
  %423 = insertelement <1 x i32> poison, i32 %422, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %423, i1 true) #2, !dbg !65
  %424 = or disjoint i32 %384, 320, !dbg !65
  %425 = lshr i32 %424, 4, !dbg !65
  %426 = and i32 %425, 212, !dbg !65
  %427 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !65
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %424, !dbg !65
  %429 = extractelement <4 x i32> %.v35, i64 1, !dbg !65
  %430 = select i1 %260, i32 %159, i32 %429, !dbg !66
  %431 = insertelement <1 x i32> poison, i32 %430, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %431, i1 true) #2, !dbg !65
  %432 = or disjoint i32 %384, 384, !dbg !65
  %433 = lshr i32 %432, 4, !dbg !65
  %434 = and i32 %433, 216, !dbg !65
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i32 %434, !dbg !65
  %436 = getelementptr float, ptr addrspace(3) %435, i32 %432, !dbg !65
  %437 = extractelement <4 x i32> %.v35, i64 2, !dbg !65
  %438 = select i1 %262, i32 %160, i32 %437, !dbg !66
  %439 = insertelement <1 x i32> poison, i32 %438, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %439, i1 true) #2, !dbg !65
  %440 = or disjoint i32 %384, 448, !dbg !65
  %441 = lshr i32 %440, 4, !dbg !65
  %442 = and i32 %441, 220, !dbg !65
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %442, !dbg !65
  %444 = getelementptr float, ptr addrspace(3) %443, i32 %440, !dbg !65
  %445 = extractelement <4 x i32> %.v35, i64 3, !dbg !65
  %446 = select i1 %264, i32 %161, i32 %445, !dbg !66
  %447 = insertelement <1 x i32> poison, i32 %446, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %447, i1 true) #2, !dbg !65
  %448 = or disjoint i32 %384, 512, !dbg !65
  %449 = lshr i32 %448, 4, !dbg !65
  %450 = and i32 %449, 224, !dbg !65
  %451 = getelementptr float, ptr addrspace(3) @global_smem, i32 %450, !dbg !65
  %452 = getelementptr float, ptr addrspace(3) %451, i32 %448, !dbg !65
  %453 = extractelement <4 x i32> %.v37, i64 0, !dbg !65
  %454 = select i1 %306, i32 %163, i32 %453, !dbg !66
  %455 = insertelement <1 x i32> poison, i32 %454, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %455, i1 true) #2, !dbg !65
  %456 = or disjoint i32 %384, 576, !dbg !65
  %457 = lshr i32 %456, 4, !dbg !65
  %458 = and i32 %457, 228, !dbg !65
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !65
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %456, !dbg !65
  %461 = extractelement <4 x i32> %.v37, i64 1, !dbg !65
  %462 = select i1 %308, i32 %164, i32 %461, !dbg !66
  %463 = insertelement <1 x i32> poison, i32 %462, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %463, i1 true) #2, !dbg !65
  %464 = or disjoint i32 %384, 640, !dbg !65
  %465 = lshr i32 %464, 4, !dbg !65
  %466 = and i32 %465, 232, !dbg !65
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !65
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %464, !dbg !65
  %469 = extractelement <4 x i32> %.v37, i64 2, !dbg !65
  %470 = select i1 %310, i32 %165, i32 %469, !dbg !66
  %471 = insertelement <1 x i32> poison, i32 %470, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %471, i1 true) #2, !dbg !65
  %472 = or disjoint i32 %384, 704, !dbg !65
  %473 = lshr i32 %472, 4, !dbg !65
  %474 = and i32 %473, 236, !dbg !65
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !65
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %472, !dbg !65
  %477 = extractelement <4 x i32> %.v37, i64 3, !dbg !65
  %478 = select i1 %312, i32 %166, i32 %477, !dbg !66
  %479 = insertelement <1 x i32> poison, i32 %478, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %479, i1 true) #2, !dbg !65
  %480 = or disjoint i32 %384, 768, !dbg !65
  %481 = lshr i32 %480, 4, !dbg !65
  %482 = and i32 %481, 240, !dbg !65
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !65
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %480, !dbg !65
  %485 = extractelement <4 x i32> %.v39, i64 0, !dbg !65
  %486 = select i1 %354, i32 %168, i32 %485, !dbg !66
  %487 = insertelement <1 x i32> poison, i32 %486, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %484, <1 x i32> %487, i1 true) #2, !dbg !65
  %488 = or disjoint i32 %384, 832, !dbg !65
  %489 = lshr i32 %488, 4, !dbg !65
  %490 = and i32 %489, 244, !dbg !65
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490, !dbg !65
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %488, !dbg !65
  %493 = extractelement <4 x i32> %.v39, i64 1, !dbg !65
  %494 = select i1 %356, i32 %169, i32 %493, !dbg !66
  %495 = insertelement <1 x i32> poison, i32 %494, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %495, i1 true) #2, !dbg !65
  %496 = or disjoint i32 %384, 896, !dbg !65
  %497 = lshr i32 %496, 4, !dbg !65
  %498 = and i32 %497, 248, !dbg !65
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !65
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %496, !dbg !65
  %501 = extractelement <4 x i32> %.v39, i64 2, !dbg !65
  %502 = select i1 %358, i32 %170, i32 %501, !dbg !66
  %503 = insertelement <1 x i32> poison, i32 %502, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %503, i1 true) #2, !dbg !65
  %504 = or disjoint i32 %384, 960, !dbg !65
  %505 = lshr i32 %504, 4, !dbg !65
  %506 = and i32 %505, 252, !dbg !65
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i32 %506, !dbg !65
  %508 = getelementptr float, ptr addrspace(3) %507, i32 %504, !dbg !65
  %509 = extractelement <4 x i32> %.v39, i64 3, !dbg !65
  %510 = select i1 %360, i32 %171, i32 %509, !dbg !66
  %511 = insertelement <1 x i32> poison, i32 %510, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %511, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %512 = lshr i32 %11, 4, !dbg !65
  %513 = and i32 %512, 60, !dbg !65
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !65
  %515 = getelementptr inbounds float, ptr addrspace(3) %514, i32 %385, !dbg !65
  %516 = or disjoint i32 %385, 1024, !dbg !65
  %517 = lshr i32 %516, 4, !dbg !65
  %518 = and i32 %517, 124, !dbg !65
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %518, !dbg !65
  %520 = getelementptr inbounds float, ptr addrspace(3) %519, i32 %516, !dbg !65
  %521 = load <4 x i32>, ptr addrspace(3) %520, align 16, !dbg !65
  %522 = or disjoint i32 %385, 2048, !dbg !65
  %523 = lshr i32 %522, 4, !dbg !65
  %524 = and i32 %523, 188, !dbg !65
  %525 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %524, !dbg !65
  %526 = getelementptr inbounds float, ptr addrspace(3) %525, i32 %522, !dbg !65
  %527 = load <4 x i32>, ptr addrspace(3) %526, align 16, !dbg !65
  %528 = or disjoint i32 %385, 3072, !dbg !65
  %529 = lshr i32 %528, 4, !dbg !65
  %530 = and i32 %529, 252, !dbg !65
  %531 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %530, !dbg !65
  %532 = getelementptr inbounds float, ptr addrspace(3) %531, i32 %528, !dbg !65
  %533 = load <4 x i32>, ptr addrspace(3) %532, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %515, align 16, !dbg !65
  %534 = getelementptr inbounds i8, ptr addrspace(3) %515, i32 4, !dbg !65
  %.extract18 = load i32, ptr addrspace(3) %534, align 4, !dbg !65
  %535 = getelementptr inbounds i8, ptr addrspace(3) %515, i32 8, !dbg !65
  %.extract19 = load i32, ptr addrspace(3) %535, align 8, !dbg !65
  %536 = getelementptr inbounds i8, ptr addrspace(3) %515, i32 12, !dbg !65
  %.extract20 = load i32, ptr addrspace(3) %536, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %375, i1 %30) #2, !dbg !65
  %.extract21 = extractelement <4 x i32> %521, i64 0, !dbg !65
  %.extract22 = extractelement <4 x i32> %521, i64 1, !dbg !65
  %.extract23 = extractelement <4 x i32> %521, i64 2, !dbg !65
  %.extract24 = extractelement <4 x i32> %521, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %377, i1 %31) #2, !dbg !65
  %.extract25 = extractelement <4 x i32> %527, i64 0, !dbg !65
  %.extract26 = extractelement <4 x i32> %527, i64 1, !dbg !65
  %.extract27 = extractelement <4 x i32> %527, i64 2, !dbg !65
  %.extract28 = extractelement <4 x i32> %527, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %379, i1 %32) #2, !dbg !65
  %.extract29 = extractelement <4 x i32> %533, i64 0, !dbg !65
  %.extract30 = extractelement <4 x i32> %533, i64 1, !dbg !65
  %.extract31 = extractelement <4 x i32> %533, i64 2, !dbg !65
  %.extract32 = extractelement <4 x i32> %533, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %381, i1 %33) #2, !dbg !65
  %537 = shl i32 %13, 7, !dbg !67
  %538 = add i32 %21, %537, !dbg !68
  %539 = sext i32 %538 to i64, !dbg !69
  %540 = getelementptr i8, ptr addrspace(1) %2, i64 %539, !dbg !69
  %541 = bitcast <4 x i8> %219 to i32, !dbg !70
  %542 = bitcast <4 x i8> %267 to i32, !dbg !70
  %543 = bitcast <4 x i8> %315 to i32, !dbg !70
  %544 = bitcast <4 x i8> %363 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %541, i32 %542, i32 %543, i32 %544, ptr addrspace(1) %540, i1 %29) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvafwkioxaymnejhlfejpncpy47kqzrtu664rztbzcc76ftx7sj7.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_4", linkageName: "triton_poi_fused_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 61, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 61, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!57 = !DILocation(line: 44, column: 33, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 50, column: 35, scope: !7)
!60 = !DILocation(line: 51, column: 34, scope: !7)
!61 = !DILocation(line: 51, column: 45, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 39, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 56, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 46, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
