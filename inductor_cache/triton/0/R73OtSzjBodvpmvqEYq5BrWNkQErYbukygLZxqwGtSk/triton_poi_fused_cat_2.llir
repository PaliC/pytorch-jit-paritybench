; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 127, !dbg !12
  %12 = or disjoint i32 %9, %11, !dbg !13
  %13 = icmp slt i32 %12, 256, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 16, !dbg !15
  %15 = srem i32 %14, 4, !dbg !16
  %16 = mul i32 %14, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = sdiv i32 %12, 64, !dbg !18
  %18 = icmp slt i32 %15, 1, !dbg !19
  %19 = shl nsw i32 %17, 4, !dbg !20
  %20 = add nsw i32 %19, %.decomposed, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = and i1 %13, %18, !dbg !23
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23) #1, !dbg !24
  %25 = bitcast i32 %24 to float, !dbg !24
  %26 = shl nsw i32 %17, 6, !dbg !25
  %27 = add i32 %26, %.decomposed, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %31 = bitcast i32 %30 to float, !dbg !28
  %32 = fsub float 0.000000e+00, %31, !dbg !29
  %33 = fmul float %32, 0x3FF7154760000000, !dbg !33
  %34 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %33) #1, !dbg !33
  %35 = fadd float %34, 1.000000e+00, !dbg !34
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %35) #1, !dbg !35
  %37 = fmul float %36, %25, !dbg !36
  %38 = fadd float %37, %25, !dbg !37
  %39 = icmp eq i32 %15, 1, !dbg !38
  %40 = and i1 %13, %39, !dbg !39
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %40, i32 0, i1 %40) #1, !dbg !40
  %42 = bitcast i32 %41 to float, !dbg !40
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !41
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %40, i32 0, i1 %40) #1, !dbg !42
  %45 = bitcast i32 %44 to float, !dbg !42
  %46 = fadd float %42, %45, !dbg !43
  %47 = add i32 %27, 16, !dbg !44
  %48 = sext i32 %47 to i64, !dbg !45
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !45
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %40, i32 0, i1 %40) #1, !dbg !46
  %51 = bitcast i32 %50 to float, !dbg !46
  %52 = fsub float 0.000000e+00, %51, !dbg !47
  %53 = fmul float %52, 0x3FF7154760000000, !dbg !49
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #1, !dbg !49
  %55 = fadd float %54, 1.000000e+00, !dbg !50
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %55) #1, !dbg !51
  %57 = fmul float %46, %56, !dbg !52
  %58 = fadd float %46, %57, !dbg !53
  %59 = icmp eq i32 %15, 2, !dbg !54
  %60 = and i1 %13, %59, !dbg !55
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %60, i32 0, i1 %60) #1, !dbg !56
  %62 = bitcast i32 %61 to float, !dbg !56
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %60, i32 0, i1 %60) #1, !dbg !57
  %64 = bitcast i32 %63 to float, !dbg !57
  %65 = fadd float %62, %64, !dbg !58
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !59
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %60, i32 0, i1 %60) #1, !dbg !60
  %68 = bitcast i32 %67 to float, !dbg !60
  %69 = fadd float %65, %68, !dbg !61
  %70 = add i32 %27, 32, !dbg !62
  %71 = sext i32 %70 to i64, !dbg !63
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !63
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %60, i32 0, i1 %60) #1, !dbg !64
  %74 = bitcast i32 %73 to float, !dbg !64
  %75 = fsub float 0.000000e+00, %74, !dbg !65
  %76 = fmul float %75, 0x3FF7154760000000, !dbg !67
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #1, !dbg !67
  %78 = fadd float %77, 1.000000e+00, !dbg !68
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #1, !dbg !69
  %80 = fmul float %69, %79, !dbg !70
  %81 = fadd float %69, %80, !dbg !71
  %82 = icmp sgt i32 %15, 2, !dbg !72
  %83 = and i1 %13, %82, !dbg !73
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %83, i32 0, i1 %83) #1, !dbg !74
  %85 = bitcast i32 %84 to float, !dbg !74
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %83, i32 0, i1 %83) #1, !dbg !75
  %87 = bitcast i32 %86 to float, !dbg !75
  %88 = fadd float %85, %87, !dbg !76
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %83, i32 0, i1 %83) #1, !dbg !77
  %90 = bitcast i32 %89 to float, !dbg !77
  %91 = fadd float %88, %90, !dbg !78
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !79
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %83, i32 0, i1 %83) #1, !dbg !80
  %94 = bitcast i32 %93 to float, !dbg !80
  %95 = fadd float %91, %94, !dbg !81
  %96 = add i32 %27, 48, !dbg !82
  %97 = sext i32 %96 to i64, !dbg !83
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !83
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %83, i32 0, i1 %83) #1, !dbg !84
  %100 = bitcast i32 %99 to float, !dbg !84
  %101 = fsub float 0.000000e+00, %100, !dbg !85
  %102 = fmul float %101, 0x3FF7154760000000, !dbg !87
  %103 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %102) #1, !dbg !87
  %104 = fadd float %103, 1.000000e+00, !dbg !88
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #1, !dbg !89
  %106 = fmul float %95, %105, !dbg !90
  %107 = fadd float %95, %106, !dbg !91
  %108 = select i1 %82, float %107, float 0.000000e+00, !dbg !92
  %109 = select i1 %59, float %81, float %108, !dbg !93
  %110 = select i1 %39, float %58, float %109, !dbg !93
  %111 = select i1 %18, float %38, float %110, !dbg !93
  %112 = sext i32 %12 to i64, !dbg !94
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %112, !dbg !94
  %114 = bitcast float %111 to i32, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %13) #1, !dbg !95
  ret void, !dbg !96
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c26pa7nvsqko2tddva64zfg6dpkmxomdqzrrseuumslxrd2p65xt.py", directory: "inductor_cache/26")
!4 = !{ptr @triton_poi_fused_cat_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_2", linkageName: "triton_poi_fused_cat_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 38, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 50, scope: !7)
!24 = !DILocation(line: 33, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 38, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = !DILocation(line: 35, column: 22, scope: !7)
!33 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 52, scope: !7)
!40 = !DILocation(line: 44, column: 44, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 44, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 41, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 49, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !48)
!48 = !DILocation(line: 48, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !48)
!52 = !DILocation(line: 49, column: 20, scope: !7)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 52, scope: !7)
!56 = !DILocation(line: 57, column: 44, scope: !7)
!57 = !DILocation(line: 58, column: 44, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 31, scope: !7)
!60 = !DILocation(line: 60, column: 44, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 41, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 49, scope: !7)
!65 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !66)
!66 = !DILocation(line: 63, column: 23, scope: !7)
!67 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !66)
!68 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !66)
!69 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !66)
!70 = !DILocation(line: 64, column: 20, scope: !7)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 68, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 52, scope: !7)
!74 = !DILocation(line: 71, column: 44, scope: !7)
!75 = !DILocation(line: 72, column: 44, scope: !7)
!76 = !DILocation(line: 73, column: 20, scope: !7)
!77 = !DILocation(line: 74, column: 44, scope: !7)
!78 = !DILocation(line: 75, column: 20, scope: !7)
!79 = !DILocation(line: 76, column: 31, scope: !7)
!80 = !DILocation(line: 76, column: 44, scope: !7)
!81 = !DILocation(line: 77, column: 20, scope: !7)
!82 = !DILocation(line: 78, column: 41, scope: !7)
!83 = !DILocation(line: 78, column: 31, scope: !7)
!84 = !DILocation(line: 78, column: 49, scope: !7)
!85 = !DILocation(line: 47, column: 30, scope: !30, inlinedAt: !86)
!86 = !DILocation(line: 79, column: 23, scope: !7)
!87 = !DILocation(line: 47, column: 29, scope: !30, inlinedAt: !86)
!88 = !DILocation(line: 47, column: 20, scope: !30, inlinedAt: !86)
!89 = !DILocation(line: 47, column: 16, scope: !30, inlinedAt: !86)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 20, scope: !7)
!92 = !DILocation(line: 83, column: 35, scope: !7)
!93 = !DILocation(line: 0, scope: !7)
!94 = !DILocation(line: 87, column: 25, scope: !7)
!95 = !DILocation(line: 87, column: 37, scope: !7)
!96 = !DILocation(line: 87, column: 4, scope: !7)
