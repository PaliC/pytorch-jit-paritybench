; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = and i32 %9, 32, !dbg !12
  %13 = lshr exact i32 %12, 3, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = and i32 %9, 7, !dbg !12
  %16 = or disjoint i32 %14, %8, !dbg !13
  %17 = or disjoint i32 %8, %15, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = shl i32 %9, 1, !dbg !15
  %21 = and i32 %20, 14, !dbg !15
  %22 = lshr exact i32 %12, 5, !dbg !16
  %23 = or disjoint i32 %22, 2, !dbg !16
  %24 = shl i32 %16, 4, !dbg !17
  %25 = shl i32 %17, 4, !dbg !17
  %26 = or disjoint i32 %24, %21, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #4, !dbg !20
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %32 = bitcast i32 %30 to float, !dbg !20
  %33 = bitcast i32 %31 to float, !dbg !20
  %34 = fadd float %32, %33, !dbg !21
  %35 = select i1 %18, float %34, float 0.000000e+00, !dbg !21
  %36 = bitcast float %35 to i32, !dbg !26
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 4, i32 31), !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = fadd float %35, %38, !dbg !21
  %40 = bitcast float %39 to i32, !dbg !26
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !26
  %42 = bitcast i32 %41 to float, !dbg !26
  %43 = fadd float %39, %42, !dbg !21
  %44 = bitcast float %43 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 1, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %43, %46, !dbg !21
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.600000e+01) #4, !dbg !27
  %49 = fsub float %48, %48, !dbg !28
  %50 = fmul float %49, 0.000000e+00, !dbg !29
  %51 = fadd float %48, %50, !dbg !30
  %52 = fsub float %51, %51, !dbg !31
  %53 = fmul float %52, 0.000000e+00, !dbg !32
  %54 = fadd float %51, %53, !dbg !33
  %55 = fadd float %54, %32, !dbg !34
  %56 = fadd float %54, %33, !dbg !34
  %57 = shl i32 %9, 4, !dbg !34
  %58 = and i32 %57, 112, !dbg !34
  %59 = or disjoint i32 %58, %11, !dbg !34
  %60 = or disjoint i32 %59, %13, !dbg !34
  %61 = and i32 %9, 63, !dbg !34
  %62 = lshr exact i32 %58, 1, !dbg !34
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !34
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %60, !dbg !34
  %65 = bitcast float %55 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !34
  %66 = or disjoint i32 %60, 8, !dbg !34
  %67 = lshr i32 %66, 3, !dbg !34
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !34
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !34
  %70 = bitcast float %56 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %71 = lshr i32 %61, 3, !dbg !34
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !34
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %61, !dbg !34
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !34
  %75 = or disjoint i32 %61, 64, !dbg !34
  %76 = lshr i32 %75, 3, !dbg !34
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !34
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %75, !dbg !34
  %79 = load float, ptr addrspace(3) %78, align 4, !dbg !34
  %80 = uitofp nneg i32 %22 to float, !dbg !35
  %81 = uitofp nneg i32 %23 to float, !dbg !35
  %82 = fmul float %80, 0x3FD5555560000000, !dbg !36
  %83 = fmul float %81, 0x3FD5555560000000, !dbg !36
  %84 = fcmp ogt float %82, 0.000000e+00, !dbg !37
  %85 = fcmp ogt float %83, 0.000000e+00, !dbg !37
  %86 = select i1 %84, float %82, float 0.000000e+00, !dbg !41
  %87 = select i1 %85, float %83, float 0.000000e+00, !dbg !41
  %88 = fptosi float %86 to i32, !dbg !42
  %89 = fptosi float %87 to i32, !dbg !42
  %90 = tail call i32 @llvm.smin.i32(i32 %88, i32 0), !dbg !43
  %narrow = add nsw i32 %90, 1, !dbg !43
  %91 = sext i32 %narrow to i64, !dbg !43
  %92 = tail call i32 @llvm.smin.i32(i32 %89, i32 0), !dbg !43
  %narrow2 = add nsw i32 %92, 1, !dbg !43
  %93 = sext i32 %narrow2 to i64, !dbg !43
  %94 = uitofp nneg i32 %11 to float, !dbg !45
  %95 = fmul float %94, 0x3FD5555560000000, !dbg !46
  %96 = fcmp ogt float %95, 0.000000e+00, !dbg !47
  %97 = select i1 %96, float %95, float 0.000000e+00, !dbg !49
  %98 = fptosi float %97 to i32, !dbg !50
  %99 = tail call i32 @llvm.smin.i32(i32 %98, i32 0), !dbg !51
  %narrow3 = add nsw i32 %99, 1, !dbg !51
  %100 = sext i32 %narrow3 to i64, !dbg !51
  %101 = shl nsw i64 %100, 1, !dbg !53
  %102 = shl nsw i64 %91, 3, !dbg !54
  %103 = shl nsw i64 %93, 3, !dbg !54
  %104 = sext i32 %25 to i64, !dbg !55
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !56
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %102, !dbg !56
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %104, !dbg !56
  %108 = getelementptr float, ptr addrspace(1) %105, i64 %103, !dbg !56
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %104, !dbg !56
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #4, !dbg !57
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !57
  %112 = or disjoint i64 %101, 1, !dbg !58
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !59
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %102, !dbg !59
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %104, !dbg !59
  %116 = getelementptr float, ptr addrspace(1) %113, i64 %103, !dbg !59
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %104, !dbg !59
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %19) #4, !dbg !60
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %19) #4, !dbg !60
  %120 = getelementptr i8, ptr addrspace(1) %105, i64 16, !dbg !61
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %102, !dbg !61
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %104, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %120, i64 %103, !dbg !61
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %104, !dbg !61
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %19) #4, !dbg !62
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %19) #4, !dbg !62
  %127 = getelementptr i8, ptr addrspace(1) %105, i64 20, !dbg !63
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %102, !dbg !63
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %104, !dbg !63
  %130 = getelementptr float, ptr addrspace(1) %127, i64 %103, !dbg !63
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %104, !dbg !63
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %19) #4, !dbg !64
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %19) #4, !dbg !64
  %134 = shl i32 %98, 1, !dbg !65
  %135 = sext i32 %134 to i64, !dbg !66
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !67
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %135, !dbg !67
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %104, !dbg !67
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !67
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %135, !dbg !67
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %104, !dbg !67
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %19) #4, !dbg !68
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %19) #4, !dbg !68
  %144 = or disjoint i32 %134, 1, !dbg !69
  %145 = sext i32 %144 to i64, !dbg !70
  %146 = getelementptr float, ptr addrspace(1) %136, i64 %145, !dbg !71
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %104, !dbg !71
  %148 = getelementptr float, ptr addrspace(1) %139, i64 %145, !dbg !71
  %149 = getelementptr float, ptr addrspace(1) %148, i64 %104, !dbg !71
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %19) #4, !dbg !72
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %19) #4, !dbg !72
  %152 = add i32 %134, 4, !dbg !73
  %153 = sext i32 %152 to i64, !dbg !74
  %154 = getelementptr float, ptr addrspace(1) %136, i64 %153, !dbg !75
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %104, !dbg !75
  %156 = getelementptr float, ptr addrspace(1) %139, i64 %153, !dbg !75
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %104, !dbg !75
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %19) #4, !dbg !76
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %19) #4, !dbg !76
  %160 = add i32 %134, 5, !dbg !77
  %161 = sext i32 %160 to i64, !dbg !78
  %162 = getelementptr float, ptr addrspace(1) %136, i64 %161, !dbg !79
  %163 = getelementptr float, ptr addrspace(1) %162, i64 %104, !dbg !79
  %164 = getelementptr float, ptr addrspace(1) %139, i64 %161, !dbg !79
  %165 = getelementptr float, ptr addrspace(1) %164, i64 %104, !dbg !79
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %19) #4, !dbg !80
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %19) #4, !dbg !80
  %168 = shl i32 %88, 3, !dbg !81
  %169 = shl i32 %89, 3, !dbg !81
  %170 = sext i32 %168 to i64, !dbg !82
  %171 = sext i32 %169 to i64, !dbg !82
  %172 = getelementptr float, ptr addrspace(1) %105, i64 %170, !dbg !83
  %173 = getelementptr float, ptr addrspace(1) %172, i64 %104, !dbg !83
  %174 = getelementptr float, ptr addrspace(1) %105, i64 %171, !dbg !83
  %175 = getelementptr float, ptr addrspace(1) %174, i64 %104, !dbg !83
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %19) #4, !dbg !84
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %19) #4, !dbg !84
  %178 = getelementptr float, ptr addrspace(1) %113, i64 %170, !dbg !85
  %179 = getelementptr float, ptr addrspace(1) %178, i64 %104, !dbg !85
  %180 = getelementptr float, ptr addrspace(1) %113, i64 %171, !dbg !85
  %181 = getelementptr float, ptr addrspace(1) %180, i64 %104, !dbg !85
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %19) #4, !dbg !86
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %181, i1 %19) #4, !dbg !86
  %184 = getelementptr float, ptr addrspace(1) %120, i64 %170, !dbg !87
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %104, !dbg !87
  %186 = getelementptr float, ptr addrspace(1) %120, i64 %171, !dbg !87
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %104, !dbg !87
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %19) #4, !dbg !88
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %19) #4, !dbg !88
  %190 = getelementptr float, ptr addrspace(1) %127, i64 %170, !dbg !89
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %104, !dbg !89
  %192 = getelementptr float, ptr addrspace(1) %127, i64 %171, !dbg !89
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %104, !dbg !89
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %191, i1 %19) #4, !dbg !90
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %19) #4, !dbg !90
  %196 = add i32 %25, %168, !dbg !91
  %197 = add i32 %196, %134, !dbg !92
  %198 = add i32 %25, %169, !dbg !91
  %199 = add i32 %198, %134, !dbg !92
  %200 = sext i32 %197 to i64, !dbg !93
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %200, !dbg !93
  %202 = sext i32 %199 to i64, !dbg !93
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !93
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %19) #4, !dbg !94
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %19) #4, !dbg !94
  %206 = add i32 %196, %144, !dbg !95
  %207 = add i32 %198, %144, !dbg !95
  %208 = sext i32 %206 to i64, !dbg !96
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !96
  %210 = sext i32 %207 to i64, !dbg !96
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !96
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 %19) #4, !dbg !97
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 %19) #4, !dbg !97
  %214 = add i32 %196, %152, !dbg !98
  %215 = add i32 %198, %152, !dbg !98
  %216 = sext i32 %214 to i64, !dbg !99
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !99
  %218 = sext i32 %215 to i64, !dbg !99
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !99
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %217, i1 %19) #4, !dbg !100
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 %19) #4, !dbg !100
  %222 = add i32 %196, %160, !dbg !101
  %223 = add i32 %198, %160, !dbg !101
  %224 = sext i32 %222 to i64, !dbg !102
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !102
  %226 = sext i32 %223 to i64, !dbg !102
  %227 = getelementptr float, ptr addrspace(1) %1, i64 %226, !dbg !102
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 %19) #4, !dbg !103
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 %19) #4, !dbg !103
  %230 = sitofp i32 %98 to float, !dbg !104
  %231 = fsub float %97, %230, !dbg !105
  %232 = fcmp ogt float %231, 0.000000e+00, !dbg !106
  %233 = select i1 %232, float %231, float 0.000000e+00, !dbg !108
  %234 = fcmp olt float %233, 1.000000e+00, !dbg !109
  %235 = select i1 %234, float %233, float 1.000000e+00, !dbg !111
  %236 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !57
  %237 = insertelement <2 x i32> %236, i32 %176, i64 1, !dbg !57
  %238 = bitcast <2 x i32> %237 to <2 x float>, !dbg !57
  %239 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !60
  %240 = insertelement <2 x i32> %239, i32 %182, i64 1, !dbg !60
  %241 = bitcast <2 x i32> %240 to <2 x float>, !dbg !60
  %242 = fadd <2 x float> %238, %241, !dbg !112
  %243 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !62
  %244 = insertelement <2 x i32> %243, i32 %188, i64 1, !dbg !62
  %245 = bitcast <2 x i32> %244 to <2 x float>, !dbg !62
  %246 = fadd <2 x float> %242, %245, !dbg !113
  %247 = insertelement <2 x i32> poison, i32 %132, i64 0, !dbg !64
  %248 = insertelement <2 x i32> %247, i32 %194, i64 1, !dbg !64
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !64
  %250 = fadd <2 x float> %246, %249, !dbg !114
  %251 = fmul <2 x float> %250, splat (float 2.500000e-01), !dbg !115
  %252 = insertelement <2 x i32> poison, i32 %142, i64 0, !dbg !68
  %253 = insertelement <2 x i32> %252, i32 %204, i64 1, !dbg !68
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !68
  %255 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !72
  %256 = insertelement <2 x i32> %255, i32 %212, i64 1, !dbg !72
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !72
  %258 = fadd <2 x float> %254, %257, !dbg !116
  %259 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !76
  %260 = insertelement <2 x i32> %259, i32 %220, i64 1, !dbg !76
  %261 = bitcast <2 x i32> %260 to <2 x float>, !dbg !76
  %262 = fadd <2 x float> %258, %261, !dbg !117
  %263 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !80
  %264 = insertelement <2 x i32> %263, i32 %228, i64 1, !dbg !80
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !80
  %266 = fadd <2 x float> %262, %265, !dbg !118
  %267 = fmul <2 x float> %266, splat (float 2.500000e-01), !dbg !119
  %268 = fsub <2 x float> %251, %267, !dbg !120
  %269 = insertelement <2 x float> poison, float %235, i64 0, !dbg !121
  %270 = shufflevector <2 x float> %269, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !121
  %271 = fmul <2 x float> %270, %268, !dbg !121
  %272 = fadd <2 x float> %267, %271, !dbg !122
  %273 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !57
  %274 = insertelement <2 x i32> %273, i32 %177, i64 1, !dbg !57
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !57
  %276 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !60
  %277 = insertelement <2 x i32> %276, i32 %183, i64 1, !dbg !60
  %278 = bitcast <2 x i32> %277 to <2 x float>, !dbg !60
  %279 = fadd <2 x float> %275, %278, !dbg !112
  %280 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !62
  %281 = insertelement <2 x i32> %280, i32 %189, i64 1, !dbg !62
  %282 = bitcast <2 x i32> %281 to <2 x float>, !dbg !62
  %283 = fadd <2 x float> %279, %282, !dbg !113
  %284 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !64
  %285 = insertelement <2 x i32> %284, i32 %195, i64 1, !dbg !64
  %286 = bitcast <2 x i32> %285 to <2 x float>, !dbg !64
  %287 = fadd <2 x float> %283, %286, !dbg !114
  %288 = fmul <2 x float> %287, splat (float 2.500000e-01), !dbg !115
  %289 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !68
  %290 = insertelement <2 x i32> %289, i32 %205, i64 1, !dbg !68
  %291 = bitcast <2 x i32> %290 to <2 x float>, !dbg !68
  %292 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !72
  %293 = insertelement <2 x i32> %292, i32 %213, i64 1, !dbg !72
  %294 = bitcast <2 x i32> %293 to <2 x float>, !dbg !72
  %295 = fadd <2 x float> %291, %294, !dbg !116
  %296 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !76
  %297 = insertelement <2 x i32> %296, i32 %221, i64 1, !dbg !76
  %298 = bitcast <2 x i32> %297 to <2 x float>, !dbg !76
  %299 = fadd <2 x float> %295, %298, !dbg !117
  %300 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !80
  %301 = insertelement <2 x i32> %300, i32 %229, i64 1, !dbg !80
  %302 = bitcast <2 x i32> %301 to <2 x float>, !dbg !80
  %303 = fadd <2 x float> %299, %302, !dbg !118
  %304 = fmul <2 x float> %303, splat (float 2.500000e-01), !dbg !119
  %305 = fsub <2 x float> %288, %304, !dbg !120
  %306 = fmul <2 x float> %270, %305, !dbg !121
  %307 = fadd <2 x float> %304, %306, !dbg !122
  %308 = mul i32 %17, 9, !dbg !123
  %309 = sext i32 %308 to i64, !dbg !124
  %310 = mul i32 %17, 36, !dbg !125
  %311 = sext i32 %310 to i64, !dbg !126
  %312 = insertelement <2 x float> poison, float %80, i64 0, !dbg !127
  %313 = shufflevector <2 x float> %312, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !127
  %314 = fmul <2 x float> %313, <float 0x3FE5555560000000, float 0x3FFAAAAAA0000000>, !dbg !127
  %315 = fcmp ogt <2 x float> %314, zeroinitializer, !dbg !128
  %316 = select <2 x i1> %315, <2 x float> %314, <2 x float> zeroinitializer, !dbg !130
  %317 = fptosi <2 x float> %316 to <2 x i32>, !dbg !131
  %318 = extractelement <2 x i32> %317, i64 0, !dbg !132
  %319 = tail call i32 @llvm.smin.i32(i32 %318, i32 1), !dbg !132
  %narrow5 = add nsw i32 %319, 1, !dbg !132
  %320 = sext i32 %narrow5 to i64, !dbg !132
  %321 = mul nsw i64 %320, 3, !dbg !134
  %322 = insertelement <2 x float> poison, float %94, i64 0, !dbg !135
  %323 = shufflevector <2 x float> %322, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !135
  %324 = fmul <2 x float> %323, <float 0x3FE5555560000000, float 0x3FFAAAAAA0000000>, !dbg !135
  %325 = fcmp ogt <2 x float> %324, zeroinitializer, !dbg !136
  %326 = select <2 x i1> %325, <2 x float> %324, <2 x float> zeroinitializer, !dbg !138
  %327 = fptosi <2 x float> %326 to <2 x i32>, !dbg !139
  %328 = extractelement <2 x i32> %327, i64 0, !dbg !140
  %329 = sext i32 %328 to i64, !dbg !141
  %330 = getelementptr float, ptr addrspace(1) %2, i64 %321, !dbg !142
  %331 = getelementptr float, ptr addrspace(1) %330, i64 %329, !dbg !142
  %332 = getelementptr float, ptr addrspace(1) %331, i64 %309, !dbg !142
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %19) #4, !dbg !143
  %334 = tail call i64 @llvm.smin.i64(i64 %329, i64 1), !dbg !144
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %334, !dbg !146
  %336 = getelementptr i8, ptr addrspace(1) %335, i64 4, !dbg !146
  %337 = getelementptr float, ptr addrspace(1) %336, i64 %321, !dbg !146
  %338 = getelementptr float, ptr addrspace(1) %337, i64 %309, !dbg !146
  %339 = sitofp <2 x i32> %327 to <2 x float>, !dbg !147
  %340 = fsub <2 x float> %326, %339, !dbg !148
  %341 = fcmp ogt <2 x float> %340, zeroinitializer, !dbg !149
  %342 = select <2 x i1> %341, <2 x float> %340, <2 x float> zeroinitializer, !dbg !151
  %343 = fcmp olt <2 x float> %342, splat (float 1.000000e+00), !dbg !152
  %344 = select <2 x i1> %343, <2 x float> %342, <2 x float> splat (float 1.000000e+00), !dbg !154
  %345 = mul i32 %318, 3, !dbg !155
  %346 = add i32 %308, %328, !dbg !140
  %347 = add i32 %346, %345, !dbg !156
  %348 = sext i32 %347 to i64, !dbg !157
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !157
  %350 = sext i32 %345 to i64, !dbg !158
  %351 = getelementptr float, ptr addrspace(1) %336, i64 %350, !dbg !159
  %352 = getelementptr float, ptr addrspace(1) %351, i64 %309, !dbg !159
  %353 = extractelement <2 x i32> %317, i64 1, !dbg !160
  %354 = tail call i32 @llvm.smin.i32(i32 %353, i32 4), !dbg !160
  %narrow7 = add nsw i32 %354, 1, !dbg !160
  %355 = sext i32 %narrow7 to i64, !dbg !160
  %356 = mul nsw i64 %355, 6, !dbg !162
  %357 = extractelement <2 x i32> %327, i64 1, !dbg !163
  %358 = sext i32 %357 to i64, !dbg !164
  %359 = getelementptr float, ptr addrspace(1) %3, i64 %356, !dbg !165
  %360 = getelementptr float, ptr addrspace(1) %359, i64 %358, !dbg !165
  %361 = getelementptr float, ptr addrspace(1) %360, i64 %311, !dbg !165
  %362 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !143
  %363 = tail call i64 @llvm.smin.i64(i64 %358, i64 4), !dbg !166
  %364 = getelementptr float, ptr addrspace(1) %3, i64 %363, !dbg !168
  %365 = getelementptr i8, ptr addrspace(1) %364, i64 4, !dbg !168
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %356, !dbg !168
  %367 = getelementptr float, ptr addrspace(1) %366, i64 %311, !dbg !168
  %368 = mul i32 %353, 6, !dbg !169
  %369 = add i32 %310, %357, !dbg !163
  %370 = add i32 %369, %368, !dbg !170
  %371 = sext i32 %370 to i64, !dbg !171
  %372 = getelementptr float, ptr addrspace(1) %3, i64 %371, !dbg !171
  %373 = sext i32 %368 to i64, !dbg !172
  %374 = getelementptr float, ptr addrspace(1) %365, i64 %373, !dbg !173
  %375 = getelementptr float, ptr addrspace(1) %374, i64 %311, !dbg !173
  %376 = sitofp <2 x i32> %317 to <2 x float>, !dbg !174
  %377 = fsub <2 x float> %316, %376, !dbg !175
  %378 = fcmp ogt <2 x float> %377, zeroinitializer, !dbg !176
  %379 = select <2 x i1> %378, <2 x float> %377, <2 x float> zeroinitializer, !dbg !178
  %380 = fcmp olt <2 x float> %379, splat (float 1.000000e+00), !dbg !179
  %381 = select <2 x i1> %380, <2 x float> %379, <2 x float> splat (float 1.000000e+00), !dbg !181
  %382 = insertelement <2 x float> poison, float %81, i64 0, !dbg !127
  %383 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !127
  %384 = fmul <2 x float> %383, <float 0x3FE5555560000000, float 0x3FFAAAAAA0000000>, !dbg !127
  %385 = fcmp ogt <2 x float> %384, zeroinitializer, !dbg !128
  %386 = select <2 x i1> %385, <2 x float> %384, <2 x float> zeroinitializer, !dbg !130
  %387 = fptosi <2 x float> %386 to <2 x i32>, !dbg !131
  %388 = extractelement <2 x i32> %387, i64 0, !dbg !132
  %389 = tail call i32 @llvm.smin.i32(i32 %388, i32 1), !dbg !132
  %narrow6 = add nsw i32 %389, 1, !dbg !132
  %390 = sext i32 %narrow6 to i64, !dbg !132
  %391 = mul nsw i64 %390, 3, !dbg !134
  %392 = getelementptr float, ptr addrspace(1) %2, i64 %391, !dbg !142
  %393 = mul i32 %388, 3, !dbg !155
  %394 = sext i32 %393 to i64, !dbg !158
  %395 = extractelement <2 x i32> %387, i64 1, !dbg !160
  %396 = tail call i32 @llvm.smin.i32(i32 %395, i32 4), !dbg !160
  %narrow8 = add nsw i32 %396, 1, !dbg !160
  %397 = sext i32 %narrow8 to i64, !dbg !160
  %398 = mul nsw i64 %397, 6, !dbg !162
  %399 = getelementptr float, ptr addrspace(1) %3, i64 %398, !dbg !165
  %400 = mul i32 %395, 6, !dbg !169
  %401 = sext i32 %400 to i64, !dbg !172
  %402 = sitofp <2 x i32> %387 to <2 x float>, !dbg !174
  %403 = fsub <2 x float> %386, %402, !dbg !175
  %404 = fcmp ogt <2 x float> %403, zeroinitializer, !dbg !176
  %405 = select <2 x i1> %404, <2 x float> %403, <2 x float> zeroinitializer, !dbg !178
  %406 = fcmp olt <2 x float> %405, splat (float 1.000000e+00), !dbg !179
  %407 = select <2 x i1> %406, <2 x float> %405, <2 x float> splat (float 1.000000e+00), !dbg !181
  %408 = getelementptr float, ptr addrspace(1) %392, i64 %329, !dbg !142
  %409 = getelementptr float, ptr addrspace(1) %408, i64 %309, !dbg !142
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %19) #4, !dbg !143
  %411 = getelementptr float, ptr addrspace(1) %336, i64 %391, !dbg !146
  %412 = getelementptr float, ptr addrspace(1) %411, i64 %309, !dbg !146
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %19) #4, !dbg !182
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %19) #4, !dbg !182
  %415 = add i32 %346, %393, !dbg !156
  %416 = sext i32 %415 to i64, !dbg !157
  %417 = getelementptr float, ptr addrspace(1) %2, i64 %416, !dbg !157
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 %19) #4, !dbg !183
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %417, i1 %19) #4, !dbg !183
  %420 = getelementptr float, ptr addrspace(1) %336, i64 %394, !dbg !159
  %421 = getelementptr float, ptr addrspace(1) %420, i64 %309, !dbg !159
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 %19) #4, !dbg !184
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %421, i1 %19) #4, !dbg !184
  %424 = getelementptr float, ptr addrspace(1) %399, i64 %358, !dbg !165
  %425 = getelementptr float, ptr addrspace(1) %424, i64 %311, !dbg !165
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 %19) #4, !dbg !185
  %427 = insertelement <2 x i32> %362, i32 %426, i64 1, !dbg !143
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !143
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %425, i1 %19) #4, !dbg !185
  %430 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !143
  %431 = insertelement <2 x i32> %430, i32 %429, i64 1, !dbg !143
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !143
  %433 = getelementptr float, ptr addrspace(1) %365, i64 %398, !dbg !168
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %311, !dbg !168
  %435 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %19) #4, !dbg !186
  %436 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !182
  %437 = insertelement <2 x i32> %436, i32 %435, i64 1, !dbg !182
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !182
  %439 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %434, i1 %19) #4, !dbg !186
  %440 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !182
  %441 = insertelement <2 x i32> %440, i32 %439, i64 1, !dbg !182
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !182
  %443 = fsub <2 x float> %438, %428, !dbg !187
  %444 = fsub <2 x float> %442, %432, !dbg !187
  %445 = fmul <2 x float> %344, %443, !dbg !188
  %446 = fmul <2 x float> %344, %444, !dbg !188
  %447 = fadd <2 x float> %445, %428, !dbg !189
  %448 = fadd <2 x float> %446, %432, !dbg !189
  %449 = add i32 %369, %400, !dbg !170
  %450 = sext i32 %449 to i64, !dbg !171
  %451 = getelementptr float, ptr addrspace(1) %3, i64 %450, !dbg !171
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 %19) #4, !dbg !190
  %453 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !183
  %454 = insertelement <2 x i32> %453, i32 %452, i64 1, !dbg !183
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !183
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %451, i1 %19) #4, !dbg !190
  %457 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !183
  %458 = insertelement <2 x i32> %457, i32 %456, i64 1, !dbg !183
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !183
  %460 = getelementptr float, ptr addrspace(1) %365, i64 %401, !dbg !173
  %461 = getelementptr float, ptr addrspace(1) %460, i64 %311, !dbg !173
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %19) #4, !dbg !191
  %463 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !184
  %464 = insertelement <2 x i32> %463, i32 %462, i64 1, !dbg !184
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !184
  %466 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %461, i1 %19) #4, !dbg !191
  %467 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !184
  %468 = insertelement <2 x i32> %467, i32 %466, i64 1, !dbg !184
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !184
  %470 = fsub <2 x float> %465, %455, !dbg !192
  %471 = fsub <2 x float> %469, %459, !dbg !192
  %472 = fmul <2 x float> %344, %470, !dbg !193
  %473 = fmul <2 x float> %344, %471, !dbg !193
  %474 = fadd <2 x float> %472, %455, !dbg !194
  %475 = fadd <2 x float> %473, %459, !dbg !194
  %476 = fsub <2 x float> %447, %474, !dbg !195
  %477 = fsub <2 x float> %448, %475, !dbg !195
  %478 = fmul <2 x float> %381, %476, !dbg !196
  %479 = fmul <2 x float> %407, %477, !dbg !196
  %480 = fadd <2 x float> %474, %478, !dbg !197
  %481 = fadd <2 x float> %475, %479, !dbg !197
  %482 = extractelement <2 x float> %272, i64 0, !dbg !198
  %483 = extractelement <2 x float> %272, i64 1, !dbg !199
  %484 = fsub float %482, %483, !dbg !198
  %485 = extractelement <2 x float> %307, i64 0, !dbg !198
  %486 = extractelement <2 x float> %307, i64 1, !dbg !199
  %487 = fsub float %485, %486, !dbg !198
  %488 = sitofp i32 %88 to float, !dbg !200
  %489 = sitofp i32 %89 to float, !dbg !200
  %490 = fsub float %86, %488, !dbg !201
  %491 = fsub float %87, %489, !dbg !201
  %492 = fcmp ogt float %490, 0.000000e+00, !dbg !202
  %493 = fcmp ogt float %491, 0.000000e+00, !dbg !202
  %494 = select i1 %492, float %490, float 0.000000e+00, !dbg !204
  %495 = select i1 %493, float %491, float 0.000000e+00, !dbg !204
  %496 = fcmp olt float %494, 1.000000e+00, !dbg !205
  %497 = fcmp olt float %495, 1.000000e+00, !dbg !205
  %498 = select i1 %496, float %494, float 1.000000e+00, !dbg !207
  %499 = select i1 %497, float %495, float 1.000000e+00, !dbg !207
  %500 = fmul float %498, %484, !dbg !208
  %501 = fmul float %499, %487, !dbg !208
  %502 = fadd float %483, %500, !dbg !199
  %503 = fadd float %486, %501, !dbg !199
  %504 = fadd float %74, %502, !dbg !209
  %505 = fadd float %79, %503, !dbg !209
  %506 = extractelement <2 x float> %480, i64 0, !dbg !210
  %507 = fadd float %504, %506, !dbg !210
  %508 = extractelement <2 x float> %481, i64 0, !dbg !210
  %509 = fadd float %505, %508, !dbg !210
  %510 = extractelement <2 x float> %480, i64 1, !dbg !211
  %511 = fadd float %507, %510, !dbg !211
  %512 = extractelement <2 x float> %481, i64 1, !dbg !211
  %513 = fadd float %509, %512, !dbg !211
  %514 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !212
  tail call void @llvm.nvvm.barrier0(), !dbg !213
  %515 = and i32 %20, 126, !dbg !213
  %516 = bitcast float %511 to <1 x i32>, !dbg !213
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %516, i1 true) #4, !dbg !213
  %517 = getelementptr float, ptr addrspace(3) %63, i32 %66, !dbg !213
  %518 = bitcast float %513 to <1 x i32>, !dbg !213
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %517, <1 x i32> %518, i1 true) #4, !dbg !213
  tail call void @llvm.nvvm.barrier0(), !dbg !213
  %519 = lshr i32 %20, 3, !dbg !213
  %520 = and i32 %519, 14, !dbg !213
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %520, !dbg !213
  %522 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %515, !dbg !213
  %.extract = load i32, ptr addrspace(3) %522, align 8, !dbg !213
  %523 = getelementptr inbounds i8, ptr addrspace(3) %522, i32 4, !dbg !213
  %.extract10 = load i32, ptr addrspace(3) %523, align 4, !dbg !213
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %514, i1 %18) #4, !dbg !213
  ret void, !dbg !214
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #3

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck2iwrxsxkr35k7u6k3sdvtgrwxlpoy4q6b6qemwmrciu4cfx6hf.py", directory: "inductor_cache/k2")
!4 = !{ptr @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2", linkageName: "triton_per_fused__adaptive_avg_pool2d__to_copy__unsafe_index_add_arange_clamp_mean_mul_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 38, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 18, scope: !7)
!30 = !DILocation(line: 42, column: 19, scope: !7)
!31 = !DILocation(line: 43, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 19, scope: !7)
!35 = !DILocation(line: 48, column: 21, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 51, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 52, column: 21, scope: !7)
!43 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 55, column: 42, scope: !7)
!45 = !DILocation(line: 57, column: 21, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !48)
!48 = !DILocation(line: 59, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !48)
!50 = !DILocation(line: 60, column: 21, scope: !7)
!51 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !52)
!52 = !DILocation(line: 62, column: 42, scope: !7)
!53 = !DILocation(line: 63, column: 33, scope: !7)
!54 = !DILocation(line: 63, column: 43, scope: !7)
!55 = !DILocation(line: 63, column: 51, scope: !7)
!56 = !DILocation(line: 63, column: 31, scope: !7)
!57 = !DILocation(line: 63, column: 59, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 64, column: 31, scope: !7)
!60 = !DILocation(line: 64, column: 63, scope: !7)
!61 = !DILocation(line: 66, column: 31, scope: !7)
!62 = !DILocation(line: 66, column: 63, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 63, scope: !7)
!65 = !DILocation(line: 72, column: 33, scope: !7)
!66 = !DILocation(line: 72, column: 41, scope: !7)
!67 = !DILocation(line: 72, column: 31, scope: !7)
!68 = !DILocation(line: 72, column: 59, scope: !7)
!69 = !DILocation(line: 73, column: 35, scope: !7)
!70 = !DILocation(line: 73, column: 45, scope: !7)
!71 = !DILocation(line: 73, column: 31, scope: !7)
!72 = !DILocation(line: 73, column: 63, scope: !7)
!73 = !DILocation(line: 75, column: 35, scope: !7)
!74 = !DILocation(line: 75, column: 45, scope: !7)
!75 = !DILocation(line: 75, column: 31, scope: !7)
!76 = !DILocation(line: 75, column: 63, scope: !7)
!77 = !DILocation(line: 77, column: 35, scope: !7)
!78 = !DILocation(line: 77, column: 45, scope: !7)
!79 = !DILocation(line: 77, column: 31, scope: !7)
!80 = !DILocation(line: 77, column: 63, scope: !7)
!81 = !DILocation(line: 81, column: 43, scope: !7)
!82 = !DILocation(line: 81, column: 41, scope: !7)
!83 = !DILocation(line: 81, column: 31, scope: !7)
!84 = !DILocation(line: 81, column: 59, scope: !7)
!85 = !DILocation(line: 82, column: 31, scope: !7)
!86 = !DILocation(line: 82, column: 63, scope: !7)
!87 = !DILocation(line: 84, column: 31, scope: !7)
!88 = !DILocation(line: 84, column: 63, scope: !7)
!89 = !DILocation(line: 86, column: 31, scope: !7)
!90 = !DILocation(line: 86, column: 63, scope: !7)
!91 = !DILocation(line: 89, column: 41, scope: !7)
!92 = !DILocation(line: 89, column: 51, scope: !7)
!93 = !DILocation(line: 89, column: 31, scope: !7)
!94 = !DILocation(line: 89, column: 59, scope: !7)
!95 = !DILocation(line: 90, column: 55, scope: !7)
!96 = !DILocation(line: 90, column: 31, scope: !7)
!97 = !DILocation(line: 90, column: 63, scope: !7)
!98 = !DILocation(line: 92, column: 55, scope: !7)
!99 = !DILocation(line: 92, column: 31, scope: !7)
!100 = !DILocation(line: 92, column: 63, scope: !7)
!101 = !DILocation(line: 94, column: 55, scope: !7)
!102 = !DILocation(line: 94, column: 31, scope: !7)
!103 = !DILocation(line: 94, column: 63, scope: !7)
!104 = !DILocation(line: 98, column: 21, scope: !7)
!105 = !DILocation(line: 99, column: 20, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !107)
!107 = !DILocation(line: 100, column: 42, scope: !7)
!108 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !107)
!109 = !DILocation(line: 110, column: 15, scope: !38, inlinedAt: !110)
!110 = !DILocation(line: 102, column: 42, scope: !7)
!111 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !110)
!112 = !DILocation(line: 65, column: 20, scope: !7)
!113 = !DILocation(line: 67, column: 20, scope: !7)
!114 = !DILocation(line: 69, column: 20, scope: !7)
!115 = !DILocation(line: 71, column: 20, scope: !7)
!116 = !DILocation(line: 74, column: 20, scope: !7)
!117 = !DILocation(line: 76, column: 20, scope: !7)
!118 = !DILocation(line: 78, column: 20, scope: !7)
!119 = !DILocation(line: 79, column: 20, scope: !7)
!120 = !DILocation(line: 80, column: 20, scope: !7)
!121 = !DILocation(line: 103, column: 20, scope: !7)
!122 = !DILocation(line: 104, column: 20, scope: !7)
!123 = !DILocation(line: 117, column: 51, scope: !7)
!124 = !DILocation(line: 117, column: 49, scope: !7)
!125 = !DILocation(line: 150, column: 55, scope: !7)
!126 = !DILocation(line: 150, column: 52, scope: !7)
!127 = !DILocation(line: 108, column: 20, scope: !7)
!128 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !129)
!129 = !DILocation(line: 109, column: 42, scope: !7)
!130 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !129)
!131 = !DILocation(line: 110, column: 21, scope: !7)
!132 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !133)
!133 = !DILocation(line: 113, column: 42, scope: !7)
!134 = !DILocation(line: 117, column: 41, scope: !7)
!135 = !DILocation(line: 114, column: 20, scope: !7)
!136 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !137)
!137 = !DILocation(line: 115, column: 42, scope: !7)
!138 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !137)
!139 = !DILocation(line: 116, column: 21, scope: !7)
!140 = !DILocation(line: 128, column: 39, scope: !7)
!141 = !DILocation(line: 117, column: 39, scope: !7)
!142 = !DILocation(line: 117, column: 31, scope: !7)
!143 = !DILocation(line: 117, column: 56, scope: !7)
!144 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !145)
!145 = !DILocation(line: 119, column: 42, scope: !7)
!146 = !DILocation(line: 120, column: 31, scope: !7)
!147 = !DILocation(line: 122, column: 21, scope: !7)
!148 = !DILocation(line: 123, column: 20, scope: !7)
!149 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !150)
!150 = !DILocation(line: 124, column: 42, scope: !7)
!151 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !150)
!152 = !DILocation(line: 110, column: 15, scope: !38, inlinedAt: !153)
!153 = !DILocation(line: 125, column: 42, scope: !7)
!154 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !153)
!155 = !DILocation(line: 128, column: 41, scope: !7)
!156 = !DILocation(line: 128, column: 49, scope: !7)
!157 = !DILocation(line: 128, column: 31, scope: !7)
!158 = !DILocation(line: 129, column: 39, scope: !7)
!159 = !DILocation(line: 129, column: 31, scope: !7)
!160 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !161)
!161 = !DILocation(line: 146, column: 44, scope: !7)
!162 = !DILocation(line: 150, column: 43, scope: !7)
!163 = !DILocation(line: 161, column: 41, scope: !7)
!164 = !DILocation(line: 150, column: 41, scope: !7)
!165 = !DILocation(line: 150, column: 32, scope: !7)
!166 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !167)
!167 = !DILocation(line: 152, column: 44, scope: !7)
!168 = !DILocation(line: 153, column: 32, scope: !7)
!169 = !DILocation(line: 161, column: 43, scope: !7)
!170 = !DILocation(line: 161, column: 52, scope: !7)
!171 = !DILocation(line: 161, column: 32, scope: !7)
!172 = !DILocation(line: 162, column: 41, scope: !7)
!173 = !DILocation(line: 162, column: 32, scope: !7)
!174 = !DILocation(line: 134, column: 22, scope: !7)
!175 = !DILocation(line: 135, column: 21, scope: !7)
!176 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !177)
!177 = !DILocation(line: 136, column: 44, scope: !7)
!178 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !177)
!179 = !DILocation(line: 110, column: 15, scope: !38, inlinedAt: !180)
!180 = !DILocation(line: 137, column: 44, scope: !7)
!181 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !180)
!182 = !DILocation(line: 120, column: 56, scope: !7)
!183 = !DILocation(line: 128, column: 56, scope: !7)
!184 = !DILocation(line: 129, column: 56, scope: !7)
!185 = !DILocation(line: 150, column: 60, scope: !7)
!186 = !DILocation(line: 153, column: 60, scope: !7)
!187 = !DILocation(line: 121, column: 20, scope: !7)
!188 = !DILocation(line: 126, column: 20, scope: !7)
!189 = !DILocation(line: 127, column: 20, scope: !7)
!190 = !DILocation(line: 161, column: 60, scope: !7)
!191 = !DILocation(line: 162, column: 60, scope: !7)
!192 = !DILocation(line: 130, column: 20, scope: !7)
!193 = !DILocation(line: 131, column: 20, scope: !7)
!194 = !DILocation(line: 132, column: 21, scope: !7)
!195 = !DILocation(line: 133, column: 21, scope: !7)
!196 = !DILocation(line: 138, column: 22, scope: !7)
!197 = !DILocation(line: 139, column: 22, scope: !7)
!198 = !DILocation(line: 173, column: 21, scope: !7)
!199 = !DILocation(line: 179, column: 21, scope: !7)
!200 = !DILocation(line: 174, column: 22, scope: !7)
!201 = !DILocation(line: 175, column: 21, scope: !7)
!202 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !203)
!203 = !DILocation(line: 176, column: 44, scope: !7)
!204 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !203)
!205 = !DILocation(line: 110, column: 15, scope: !38, inlinedAt: !206)
!206 = !DILocation(line: 177, column: 44, scope: !7)
!207 = !DILocation(line: 113, column: 29, scope: !38, inlinedAt: !206)
!208 = !DILocation(line: 178, column: 22, scope: !7)
!209 = !DILocation(line: 180, column: 21, scope: !7)
!210 = !DILocation(line: 181, column: 22, scope: !7)
!211 = !DILocation(line: 182, column: 22, scope: !7)
!212 = !DILocation(line: 183, column: 28, scope: !7)
!213 = !DILocation(line: 183, column: 49, scope: !7)
!214 = !DILocation(line: 183, column: 4, scope: !7)
