; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = shl i32 %9, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %8, %10, !dbg !13
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 1, !dbg !16
  %28 = or disjoint i32 %27, 1, !dbg !17
  %29 = icmp slt i32 %27, 2, !dbg !18
  %30 = icmp slt i32 %28, 2, !dbg !18
  %31 = ashr exact i32 %20, 2, !dbg !19
  %32 = srem i32 %31, 2, !dbg !20
  %33 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !19
  %34 = shufflevector <2 x i32> %33, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %35 = sdiv <2 x i32> %34, <i32 4, i32 32>, !dbg !19
  %36 = srem <2 x i32> %35, <i32 2, i32 4>, !dbg !20
  %37 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !19
  %38 = shufflevector <2 x i32> %37, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %39 = sdiv <2 x i32> %38, <i32 4, i32 32>, !dbg !19
  %40 = srem <2 x i32> %39, <i32 2, i32 4>, !dbg !20
  %41 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !19
  %42 = shufflevector <2 x i32> %41, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %43 = sdiv <2 x i32> %42, <i32 4, i32 32>, !dbg !19
  %44 = srem <2 x i32> %43, <i32 2, i32 4>, !dbg !20
  %45 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !19
  %46 = shufflevector <2 x i32> %45, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !19
  %47 = sdiv <2 x i32> %46, <i32 4, i32 32>, !dbg !19
  %48 = srem <2 x i32> %47, <i32 2, i32 4>, !dbg !20
  %49 = sdiv i32 %20, 128, !dbg !21
  %50 = sdiv i32 %20, 8, !dbg !22
  %51 = srem i32 %50, 16, !dbg !23
  %52 = shl i32 %26, 3, !dbg !24
  %53 = shl i32 %28, 2, !dbg !24
  %54 = extractelement <2 x i32> %36, i64 0, !dbg !25
  %55 = shl nsw i32 %54, 3, !dbg !25
  %56 = extractelement <2 x i32> %40, i64 0, !dbg !25
  %57 = shl nsw i32 %56, 3, !dbg !25
  %58 = extractelement <2 x i32> %44, i64 0, !dbg !25
  %59 = shl nsw i32 %58, 3, !dbg !25
  %60 = extractelement <2 x i32> %48, i64 0, !dbg !25
  %61 = shl nsw i32 %60, 3, !dbg !25
  %62 = extractelement <2 x i32> %36, i64 1, !dbg !26
  %63 = add nsw i32 %55, %62, !dbg !26
  %64 = add i32 %63, %52, !dbg !27
  %65 = add i32 %63, %53, !dbg !27
  %66 = extractelement <2 x i32> %40, i64 1, !dbg !26
  %67 = add nsw i32 %57, %66, !dbg !26
  %68 = add i32 %67, %52, !dbg !27
  %69 = add i32 %67, %53, !dbg !27
  %70 = extractelement <2 x i32> %44, i64 1, !dbg !26
  %71 = add nsw i32 %59, %70, !dbg !26
  %72 = add i32 %71, %52, !dbg !27
  %73 = add i32 %71, %53, !dbg !27
  %74 = extractelement <2 x i32> %48, i64 1, !dbg !26
  %75 = add nsw i32 %61, %74, !dbg !26
  %76 = add i32 %75, %52, !dbg !27
  %77 = add i32 %75, %53, !dbg !27
  %78 = sext i32 %64 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !28
  %80 = sext i32 %65 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !28
  %82 = sext i32 %68 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !28
  %84 = sext i32 %69 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !28
  %86 = sext i32 %72 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !28
  %88 = sext i32 %73 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !28
  %90 = sext i32 %76 to i64, !dbg !28
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !28
  %92 = sext i32 %77 to i64, !dbg !28
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !28
  %94 = and i1 %29, %21, !dbg !29
  %95 = and i1 %29, %22, !dbg !29
  %96 = and i1 %29, %23, !dbg !29
  %97 = and i1 %29, %24, !dbg !29
  %98 = and i1 %29, %25, !dbg !29
  %99 = and i1 %25, %30, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %94) #2, !dbg !30
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %94) #2, !dbg !30
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %95) #2, !dbg !30
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %95) #2, !dbg !30
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %96) #2, !dbg !30
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %96) #2, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %97) #2, !dbg !30
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %97) #2, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  %109 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !30
  %110 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 2064, !dbg !30
  %111 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %113 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !30
  %114 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 2576, !dbg !30
  %115 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !30
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !30
  %117 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !30
  %118 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 3088, !dbg !30
  %119 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !30
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !30
  %121 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !30
  %122 = getelementptr inbounds i8, ptr addrspace(3) %108, i32 3600, !dbg !30
  %123 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !30
  %125 = load float, ptr addrspace(3) %124, align 16, !dbg !30
  %126 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 4, !dbg !30
  %127 = load float, ptr addrspace(3) %126, align 4, !dbg !30
  %128 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 8, !dbg !30
  %129 = load float, ptr addrspace(3) %128, align 8, !dbg !30
  %130 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 12, !dbg !30
  %131 = load float, ptr addrspace(3) %130, align 4, !dbg !30
  %132 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 2064, !dbg !30
  %133 = load float, ptr addrspace(3) %132, align 16, !dbg !30
  %134 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 2068, !dbg !30
  %135 = load float, ptr addrspace(3) %134, align 4, !dbg !30
  %136 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 2072, !dbg !30
  %137 = load float, ptr addrspace(3) %136, align 8, !dbg !30
  %138 = getelementptr inbounds i8, ptr addrspace(3) %124, i32 2076, !dbg !30
  %139 = load float, ptr addrspace(3) %138, align 4, !dbg !30
  %140 = shl nsw i32 %51, 2, !dbg !31
  %141 = shl i32 %26, 7, !dbg !32
  %142 = shl i32 %28, 6, !dbg !32
  %143 = shl nsw i32 %32, 7, !dbg !33
  %144 = shl i32 %49, 8, !dbg !34
  %145 = add i32 %140, %144, !dbg !35
  %146 = add i32 %145, %141, !dbg !36
  %147 = add i32 %146, %143, !dbg !37
  %148 = add i32 %145, %142, !dbg !36
  %149 = add i32 %148, %143, !dbg !37
  %150 = sext i32 %147 to i64, !dbg !38
  %151 = getelementptr float, ptr addrspace(1) %1, i64 %150, !dbg !38
  %152 = sext i32 %149 to i64, !dbg !38
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !38
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 %98) #2, !dbg !39
  %155 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !39
  %156 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !39
  %157 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !39
  %158 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !39
  %159 = bitcast i32 %155 to float, !dbg !39
  %160 = bitcast i32 %156 to float, !dbg !39
  %161 = bitcast i32 %157 to float, !dbg !39
  %162 = bitcast i32 %158 to float, !dbg !39
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %153, i1 %99) #2, !dbg !39
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !39
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !39
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !39
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !39
  %168 = bitcast i32 %164 to float, !dbg !39
  %169 = bitcast i32 %165 to float, !dbg !39
  %170 = bitcast i32 %166 to float, !dbg !39
  %171 = bitcast i32 %167 to float, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !40
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !40
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !40
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !40
  %176 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !40
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !40
  %178 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !40
  %179 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !40
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %94) #2, !dbg !41
  %181 = bitcast i32 %180 to float, !dbg !41
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %94) #2, !dbg !41
  %183 = bitcast i32 %182 to float, !dbg !41
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 %95) #2, !dbg !41
  %185 = bitcast i32 %184 to float, !dbg !41
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %95) #2, !dbg !41
  %187 = bitcast i32 %186 to float, !dbg !41
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 %96) #2, !dbg !41
  %189 = bitcast i32 %188 to float, !dbg !41
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %96) #2, !dbg !41
  %191 = bitcast i32 %190 to float, !dbg !41
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %97) #2, !dbg !41
  %193 = bitcast i32 %192 to float, !dbg !41
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 %97) #2, !dbg !41
  %195 = bitcast i32 %194 to float, !dbg !41
  %196 = fmul float %125, %159, !dbg !42
  %197 = fmul float %127, %160, !dbg !42
  %198 = fmul float %129, %161, !dbg !42
  %199 = fmul float %131, %162, !dbg !42
  %200 = fmul float %133, %168, !dbg !42
  %201 = fmul float %135, %169, !dbg !42
  %202 = fmul float %137, %170, !dbg !42
  %203 = fmul float %139, %171, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %204 = shl i32 %9, 3, !dbg !42
  %205 = and i32 %204, 1016, !dbg !42
  %206 = shl i32 %9, 1, !dbg !42
  %207 = and i32 %206, 254, !dbg !42
  %208 = lshr exact i32 %205, 1, !dbg !42
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !42
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %205, !dbg !42
  %211 = bitcast float %196 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !42
  %212 = or disjoint i32 %205, 2, !dbg !42
  %213 = lshr exact i32 %212, 1, !dbg !42
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !42
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !42
  %216 = bitcast float %197 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !42
  %217 = or disjoint i32 %205, 4, !dbg !42
  %218 = lshr exact i32 %217, 1, !dbg !42
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !42
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !42
  %221 = bitcast float %198 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !42
  %222 = or disjoint i32 %205, 6, !dbg !42
  %223 = lshr exact i32 %222, 1, !dbg !42
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !42
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !42
  %226 = bitcast float %199 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !42
  %227 = or disjoint i32 %205, 1, !dbg !42
  %228 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %227, !dbg !42
  %229 = bitcast float %200 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !42
  %230 = or disjoint i32 %205, 3, !dbg !42
  %231 = lshr i32 %230, 1, !dbg !42
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !42
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !42
  %234 = bitcast float %201 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !42
  %235 = or disjoint i32 %205, 5, !dbg !42
  %236 = lshr i32 %235, 1, !dbg !42
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !42
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !42
  %239 = bitcast float %202 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !42
  %240 = or disjoint i32 %205, 7, !dbg !42
  %241 = lshr i32 %240, 1, !dbg !42
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !42
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !42
  %244 = bitcast float %203 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %245 = lshr exact i32 %207, 1, !dbg !42
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !42
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %207, !dbg !42
  %248 = load float, ptr addrspace(3) %247, align 4, !dbg !42
  %249 = or disjoint i32 %207, 1, !dbg !42
  %250 = getelementptr float, ptr addrspace(3) %246, i32 %249, !dbg !42
  %251 = load float, ptr addrspace(3) %250, align 4, !dbg !42
  %252 = or disjoint i32 %207, 256, !dbg !42
  %253 = lshr exact i32 %252, 1, !dbg !42
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !42
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !42
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !42
  %257 = or disjoint i32 %207, 257, !dbg !42
  %258 = lshr i32 %257, 1, !dbg !42
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !42
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !42
  %261 = load float, ptr addrspace(3) %260, align 4, !dbg !42
  %262 = or disjoint i32 %207, 512, !dbg !42
  %263 = lshr exact i32 %262, 1, !dbg !42
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !42
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %262, !dbg !42
  %266 = load float, ptr addrspace(3) %265, align 4, !dbg !42
  %267 = or disjoint i32 %207, 513, !dbg !42
  %268 = lshr i32 %267, 1, !dbg !42
  %269 = getelementptr float, ptr addrspace(3) @global_smem, i32 %268, !dbg !42
  %270 = getelementptr float, ptr addrspace(3) %269, i32 %267, !dbg !42
  %271 = load float, ptr addrspace(3) %270, align 4, !dbg !42
  %272 = or disjoint i32 %207, 768, !dbg !42
  %273 = lshr exact i32 %272, 1, !dbg !42
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !42
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %272, !dbg !42
  %276 = load float, ptr addrspace(3) %275, align 4, !dbg !42
  %277 = or disjoint i32 %207, 769, !dbg !42
  %278 = lshr i32 %277, 1, !dbg !42
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !42
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %277, !dbg !42
  %281 = load float, ptr addrspace(3) %280, align 4, !dbg !42
  %282 = fadd float %248, %181, !dbg !43
  %283 = fadd float %251, %183, !dbg !43
  %284 = fadd float %256, %185, !dbg !43
  %285 = fadd float %261, %187, !dbg !43
  %286 = fadd float %266, %189, !dbg !43
  %287 = fadd float %271, %191, !dbg !43
  %288 = fadd float %276, %193, !dbg !43
  %289 = fadd float %281, %195, !dbg !43
  %290 = add i32 %16, %26, !dbg !44
  %291 = shl i32 %290, 1, !dbg !44
  %292 = add i32 %17, %26, !dbg !44
  %293 = shl i32 %292, 1, !dbg !44
  %294 = add i32 %18, %26, !dbg !44
  %295 = shl i32 %294, 1, !dbg !44
  %296 = add i32 %19, %26, !dbg !44
  %297 = shl i32 %296, 1, !dbg !44
  %298 = sext i32 %291 to i64, !dbg !45
  %299 = getelementptr float, ptr addrspace(1) %3, i64 %298, !dbg !45
  %300 = sext i32 %293 to i64, !dbg !45
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %300, !dbg !45
  %302 = sext i32 %295 to i64, !dbg !45
  %303 = getelementptr float, ptr addrspace(1) %3, i64 %302, !dbg !45
  %304 = sext i32 %297 to i64, !dbg !45
  %305 = getelementptr float, ptr addrspace(1) %3, i64 %304, !dbg !45
  %306 = bitcast float %282 to i32, !dbg !46
  %307 = bitcast float %283 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %306, i32 %307, ptr addrspace(1) %299, i1 %94) #2, !dbg !46
  %308 = bitcast float %284 to i32, !dbg !46
  %309 = bitcast float %285 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %308, i32 %309, ptr addrspace(1) %301, i1 %95) #2, !dbg !46
  %310 = bitcast float %286 to i32, !dbg !46
  %311 = bitcast float %287 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %310, i32 %311, ptr addrspace(1) %303, i1 %96) #2, !dbg !46
  %312 = bitcast float %288 to i32, !dbg !46
  %313 = bitcast float %289 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %312, i32 %313, ptr addrspace(1) %305, i1 %97) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cijdg7re2quz2cpdittznwettu753tqjetzofu7evhnnhyzxkdp4.py", directory: "inductor_cache/ij")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 26, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 21, scope: !7)
!23 = !DILocation(line: 33, column: 26, scope: !7)
!24 = !DILocation(line: 35, column: 37, scope: !7)
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 57, scope: !7)
!30 = !DILocation(line: 35, column: 49, scope: !7)
!31 = !DILocation(line: 36, column: 37, scope: !7)
!32 = !DILocation(line: 36, column: 45, scope: !7)
!33 = !DILocation(line: 36, column: 54, scope: !7)
!34 = !DILocation(line: 36, column: 63, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 59, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 68, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 49, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 39, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 30, scope: !7)
!45 = !DILocation(line: 40, column: 25, scope: !7)
!46 = !DILocation(line: 40, column: 43, scope: !7)
!47 = !DILocation(line: 40, column: 4, scope: !7)
