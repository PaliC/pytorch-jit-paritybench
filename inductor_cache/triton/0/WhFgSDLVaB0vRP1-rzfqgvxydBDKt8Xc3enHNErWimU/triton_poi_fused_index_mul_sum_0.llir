; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_index_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 96, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 4, !dbg !15
  %11 = srem i32 %10, 6, !dbg !16
  %12 = mul i32 %10, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %12, !dbg !17
  %13 = sdiv i32 %8, 24, !dbg !18
  %14 = icmp slt i32 %11, 3, !dbg !19
  %15 = icmp slt i32 %11, 1, !dbg !20
  %16 = icmp slt i32 %11, 2, !dbg !21
  %17 = icmp slt i32 %11, 4, !dbg !22
  %18 = icmp slt i32 %11, 5, !dbg !23
  %19 = select i1 %18, i64 16, i64 32, !dbg !24
  %20 = select i1 %14, i64 0, i64 %19, !dbg !25
  %21 = shl nsw i32 %.decomposed, 2, !dbg !26
  %22 = sext i32 %21 to i64, !dbg !27
  %23 = shl i32 %13, 6, !dbg !28
  %24 = sext i32 %23 to i64, !dbg !29
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !30
  %26 = getelementptr float, ptr addrspace(1) %25, i64 %22, !dbg !30
  %27 = getelementptr float, ptr addrspace(1) %26, i64 %24, !dbg !30
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %9) #1, !dbg !31
  %29 = select i1 %16, i64 32, i64 48, !dbg !32
  %30 = select i1 %15, i64 16, i64 %29, !dbg !33
  %31 = select i1 %17, i64 32, i64 48, !dbg !34
  %32 = select i1 %14, i64 %30, i64 %31, !dbg !35
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !36
  %34 = getelementptr float, ptr addrspace(1) %33, i64 %22, !dbg !36
  %35 = getelementptr float, ptr addrspace(1) %34, i64 %24, !dbg !36
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %9) #1, !dbg !37
  %37 = or disjoint i32 %21, 1, !dbg !38
  %38 = sext i32 %37 to i64, !dbg !39
  %39 = getelementptr float, ptr addrspace(1) %25, i64 %38, !dbg !40
  %40 = getelementptr float, ptr addrspace(1) %39, i64 %24, !dbg !40
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %9) #1, !dbg !41
  %42 = getelementptr float, ptr addrspace(1) %33, i64 %38, !dbg !42
  %43 = getelementptr float, ptr addrspace(1) %42, i64 %24, !dbg !42
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %9) #1, !dbg !43
  %45 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !31
  %46 = insertelement <2 x i32> %45, i32 %41, i64 1, !dbg !31
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !31
  %48 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !37
  %49 = insertelement <2 x i32> %48, i32 %44, i64 1, !dbg !37
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !37
  %51 = fmul <2 x float> %47, %50, !dbg !44
  %shift = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %52 = fadd <2 x float> %51, %shift, !dbg !45
  %53 = or disjoint i32 %21, 2, !dbg !46
  %54 = sext i32 %53 to i64, !dbg !47
  %55 = getelementptr float, ptr addrspace(1) %25, i64 %54, !dbg !48
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %24, !dbg !48
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %9) #1, !dbg !49
  %58 = getelementptr float, ptr addrspace(1) %33, i64 %54, !dbg !50
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %24, !dbg !50
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %9) #1, !dbg !51
  %61 = or disjoint i32 %21, 3, !dbg !52
  %62 = sext i32 %61 to i64, !dbg !53
  %63 = getelementptr float, ptr addrspace(1) %25, i64 %62, !dbg !54
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %24, !dbg !54
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %9) #1, !dbg !55
  %66 = getelementptr float, ptr addrspace(1) %33, i64 %62, !dbg !56
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %24, !dbg !56
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %9) #1, !dbg !57
  %69 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !49
  %70 = insertelement <2 x i32> %69, i32 %65, i64 1, !dbg !49
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !49
  %72 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !51
  %73 = insertelement <2 x i32> %72, i32 %68, i64 1, !dbg !51
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !51
  %75 = fmul <2 x float> %71, %74, !dbg !58
  %76 = fadd <2 x float> %52, %75, !dbg !59
  %shift1 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %77 = fadd <2 x float> %76, %shift1, !dbg !60
  %78 = sext i32 %8 to i64, !dbg !61
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !61
  %bc = bitcast <2 x float> %77 to <2 x i32>, !dbg !62
  %80 = extractelement <2 x i32> %bc, i64 0, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %80, ptr addrspace(1) %79, i1 %9) #1, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckidppjmxj7qc3g2s2f36tumuc4uhmv2q24j6sks3ibzszirchih.py", directory: "inductor_cache/ki")
!4 = !{ptr @triton_poi_fused_index_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_index_mul_sum_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_index_mul_sum_0", linkageName: "triton_poi_fused_index_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 18, scope: !7)
!20 = !DILocation(line: 32, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 41, column: 19, scope: !7)
!24 = !DILocation(line: 43, column: 34, scope: !7)
!25 = !DILocation(line: 44, column: 33, scope: !7)
!26 = !DILocation(line: 45, column: 33, scope: !7)
!27 = !DILocation(line: 45, column: 38, scope: !7)
!28 = !DILocation(line: 45, column: 52, scope: !7)
!29 = !DILocation(line: 45, column: 49, scope: !7)
!30 = !DILocation(line: 45, column: 31, scope: !7)
!31 = !DILocation(line: 45, column: 57, scope: !7)
!32 = !DILocation(line: 46, column: 33, scope: !7)
!33 = !DILocation(line: 47, column: 33, scope: !7)
!34 = !DILocation(line: 49, column: 34, scope: !7)
!35 = !DILocation(line: 50, column: 34, scope: !7)
!36 = !DILocation(line: 51, column: 31, scope: !7)
!37 = !DILocation(line: 51, column: 57, scope: !7)
!38 = !DILocation(line: 53, column: 35, scope: !7)
!39 = !DILocation(line: 53, column: 42, scope: !7)
!40 = !DILocation(line: 53, column: 31, scope: !7)
!41 = !DILocation(line: 53, column: 61, scope: !7)
!42 = !DILocation(line: 54, column: 31, scope: !7)
!43 = !DILocation(line: 54, column: 61, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 57, column: 35, scope: !7)
!47 = !DILocation(line: 57, column: 42, scope: !7)
!48 = !DILocation(line: 57, column: 31, scope: !7)
!49 = !DILocation(line: 57, column: 61, scope: !7)
!50 = !DILocation(line: 58, column: 31, scope: !7)
!51 = !DILocation(line: 58, column: 61, scope: !7)
!52 = !DILocation(line: 61, column: 35, scope: !7)
!53 = !DILocation(line: 61, column: 42, scope: !7)
!54 = !DILocation(line: 61, column: 31, scope: !7)
!55 = !DILocation(line: 61, column: 61, scope: !7)
!56 = !DILocation(line: 62, column: 31, scope: !7)
!57 = !DILocation(line: 62, column: 61, scope: !7)
!58 = !DILocation(line: 59, column: 20, scope: !7)
!59 = !DILocation(line: 60, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 25, scope: !7)
!62 = !DILocation(line: 65, column: 37, scope: !7)
!63 = !DILocation(line: 65, column: 4, scope: !7)
