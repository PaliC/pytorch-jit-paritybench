; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = sdiv i32 %24, 4, !dbg !14
  %26 = srem i32 %25, 256, !dbg !15
  %27 = sext i32 %24 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !16
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !17
  %30 = sext i32 %26 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %38 = bitcast i32 %37 to float, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !26
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !36
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !38
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !39
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !39
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %30, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !41
  %68 = bitcast i32 %67 to float, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !41
  %70 = bitcast i32 %69 to float, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %14, i64 %30, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !43
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !43
  %74 = getelementptr float, ptr addrspace(1) %15, i64 %30, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !45
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !45
  %77 = getelementptr float, ptr addrspace(1) %16, i64 %27, !dbg !46
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !47
  %79 = fadd float %36, 0x3EE4F8B580000000, !dbg !48
  %80 = fadd float %38, 0x3EE4F8B580000000, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %81, 0, !dbg !49
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %82, 0, !dbg !49
  br i1 %.not.i, label %88, label %83, !dbg !49

83:                                               ; preds = %18
  br i1 %.not1.i, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

88:                                               ; preds = %18
  br i1 %.not1.i, label %91, label %89, !dbg !49

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !49
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %93, 0, !dbg !49
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !49
  br i1 %.not.i1, label %100, label %95, !dbg !49

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !49

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %107 = fadd float %52, 0x3EE4F8B580000000, !dbg !51
  %108 = fadd float %54, 0x3EE4F8B580000000, !dbg !51
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %109, 0, !dbg !52
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !52
  br i1 %.not.i6, label %116, label %111, !dbg !52

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !52

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !52

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !52
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i11 = icmp eq i32 %121, 0, !dbg !52
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !52
  br i1 %.not.i11, label %128, label %123, !dbg !52

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !52

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !52

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !52
  br label %__nv_sqrtf.exit15, !dbg !52

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !52
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !53
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !53
  %135 = fadd float %68, 0x3EE4F8B580000000, !dbg !54
  %136 = fadd float %70, 0x3EE4F8B580000000, !dbg !54
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i16 = icmp eq i32 %137, 0, !dbg !55
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i19 = icmp eq i32 %138, 0, !dbg !55
  br i1 %.not.i16, label %144, label %139, !dbg !55

139:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %142, label %140, !dbg !55

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !55

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

__nv_sqrtf.exit20:                                ; preds = %140, %142, %145, %147
  %.0.i18 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !55
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i21 = icmp eq i32 %149, 0, !dbg !55
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i24 = icmp eq i32 %150, 0, !dbg !55
  br i1 %.not.i21, label %156, label %151, !dbg !55

151:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %154, label %152, !dbg !55

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %136) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %136) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !55

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %136) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %136) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

__nv_sqrtf.exit25:                                ; preds = %152, %154, %157, %159
  %.0.i23 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !55
  %161 = extractvalue { i32, i32 } %62, 1, !dbg !37
  %162 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !29
  %163 = insertelement <2 x i32> %162, i32 %65, i64 1, !dbg !29
  %164 = bitcast <2 x i32> %163 to <2 x float>, !dbg !29
  %165 = extractvalue { i32, i32 } %62, 0, !dbg !37
  %166 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !29
  %167 = insertelement <2 x i32> %166, i32 %64, i64 1, !dbg !29
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !29
  %169 = extractvalue { i32, i32 } %29, 1, !dbg !17
  %170 = bitcast i32 %169 to float, !dbg !17
  %171 = bitcast i32 %33 to float, !dbg !19
  %172 = fsub float %170, %171, !dbg !56
  %173 = fmul float %172, %106, !dbg !57
  %174 = bitcast i32 %41 to float, !dbg !23
  %175 = fmul float %173, %174, !dbg !58
  %176 = bitcast i32 %44 to float, !dbg !25
  %177 = fadd float %175, %176, !dbg !59
  %178 = fadd float %177, 0.000000e+00, !dbg !60
  %179 = extractvalue { i32, i32 } %46, 1, !dbg !27
  %180 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !33
  %181 = insertelement <2 x i32> %180, i32 %73, i64 1, !dbg !33
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !33
  %183 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !35
  %184 = insertelement <2 x i32> %183, i32 %76, i64 1, !dbg !35
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !35
  %186 = extractvalue { i32, i32 } %29, 0, !dbg !17
  %187 = bitcast i32 %186 to float, !dbg !17
  %188 = bitcast i32 %32 to float, !dbg !19
  %189 = fsub float %187, %188, !dbg !56
  %190 = fmul float %189, %105, !dbg !57
  %191 = bitcast i32 %40 to float, !dbg !23
  %192 = fmul float %190, %191, !dbg !58
  %193 = bitcast i32 %43 to float, !dbg !25
  %194 = fadd float %192, %193, !dbg !59
  %195 = fadd float %194, 0.000000e+00, !dbg !60
  %196 = extractvalue { i32, i32 } %46, 0, !dbg !27
  %197 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !33
  %198 = insertelement <2 x i32> %197, i32 %72, i64 1, !dbg !33
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !33
  %200 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !35
  %201 = insertelement <2 x i32> %200, i32 %75, i64 1, !dbg !35
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !35
  %203 = extractvalue { i32, i32 } %78, 1, !dbg !47
  %204 = bitcast i32 %203 to float, !dbg !47
  %205 = extractvalue { i32, i32 } %78, 0, !dbg !47
  %206 = bitcast i32 %205 to float, !dbg !47
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !61
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !61
  %209 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !27
  %210 = insertelement <2 x i32> %209, i32 %165, i64 1, !dbg !27
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !27
  %212 = fsub <2 x float> %211, %168, !dbg !62
  %213 = insertelement <2 x float> poison, float %133, i64 0, !dbg !63
  %214 = insertelement <2 x float> %213, float %207, i64 1, !dbg !63
  %215 = fmul <2 x float> %212, %214, !dbg !63
  %216 = fmul <2 x float> %215, %199, !dbg !64
  %217 = fadd <2 x float> %216, %202, !dbg !65
  %218 = extractelement <2 x float> %217, i64 0, !dbg !66
  %219 = fadd float %195, %218, !dbg !66
  %220 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !27
  %221 = insertelement <2 x i32> %220, i32 %161, i64 1, !dbg !27
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !27
  %223 = fsub <2 x float> %222, %164, !dbg !62
  %224 = insertelement <2 x float> poison, float %134, i64 0, !dbg !63
  %225 = insertelement <2 x float> %224, float %208, i64 1, !dbg !63
  %226 = fmul <2 x float> %223, %225, !dbg !63
  %227 = fmul <2 x float> %226, %182, !dbg !64
  %228 = fadd <2 x float> %227, %185, !dbg !65
  %229 = extractelement <2 x float> %228, i64 0, !dbg !66
  %230 = fadd float %178, %229, !dbg !66
  %231 = extractelement <2 x float> %217, i64 1, !dbg !67
  %232 = fadd float %219, %231, !dbg !67
  %233 = extractelement <2 x float> %228, i64 1, !dbg !67
  %234 = fadd float %230, %233, !dbg !67
  %235 = fadd float %232, %206, !dbg !68
  %236 = fadd float %234, %204, !dbg !68
  %237 = fcmp olt float %235, 0.000000e+00, !dbg !69
  %238 = fcmp olt float %236, 0.000000e+00, !dbg !69
  %239 = select i1 %237, float 0.000000e+00, float %235, !dbg !73
  %240 = select i1 %238, float 0.000000e+00, float %236, !dbg !73
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !74
  %242 = bitcast float %239 to i32, !dbg !75
  %243 = bitcast float %240 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %242, i32 %243, ptr addrspace(1) %241, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cq3ojo5gt7qgnsgmkxw2cbhnbo5i7x3nqbkjpjpk5uxqtz5szf43.py", directory: "inductor_cache/q3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 26, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 26, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 57, column: 27, scope: !7)
!53 = !DILocation(line: 58, column: 19, scope: !7)
!54 = !DILocation(line: 65, column: 20, scope: !7)
!55 = !DILocation(line: 66, column: 27, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 50, column: 19, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 19, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 60, column: 20, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 20, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 75, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 76, column: 28, scope: !7)
!75 = !DILocation(line: 76, column: 40, scope: !7)
!76 = !DILocation(line: 76, column: 4, scope: !7)
