; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_convolution_hardtanh_mean_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 16, !dbg !14
  %17 = shl i32 %12, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = srem i32 %15, 4, !dbg !16
  %20 = shl i32 %15, 4, !dbg !17
  %21 = or disjoint i32 %20, %18, !dbg !18
  %22 = sext i32 %21 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !20
  %25 = sext i32 %19 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #5, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %16) #5, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #5, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #5, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %16) #5, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #5, !dbg !30
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #5, !dbg !30
  %42 = fadd float %35, 0x3EE4F8B580000000, !dbg !31
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i2 = icmp eq i32 %45, 0, !dbg !32
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i5 = icmp eq i32 %46, 0, !dbg !32
  br i1 %.not.i2, label %52, label %47, !dbg !32

47:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %50, label %48, !dbg !32

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #5, !dbg !32
  br label %__nv_sqrtf.exit6, !dbg !32

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #5, !dbg !32
  br label %__nv_sqrtf.exit6, !dbg !32

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %55, label %53, !dbg !32

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #5, !dbg !32
  br label %__nv_sqrtf.exit6, !dbg !32

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #5, !dbg !32
  br label %__nv_sqrtf.exit6, !dbg !32

__nv_sqrtf.exit6:                                 ; preds = %48, %50, %53, %55
  %.0.i4 = phi float [ %49, %48 ], [ %51, %50 ], [ %54, %53 ], [ %56, %55 ], !dbg !32
  %57 = extractvalue { i32, i32 } %24, 1, !dbg !20
  %58 = bitcast i32 %57 to float, !dbg !20
  %59 = bitcast i32 %28 to float, !dbg !22
  %60 = fadd float %58, %59, !dbg !33
  %61 = bitcast i32 %31 to float, !dbg !24
  %62 = fsub float %60, %61, !dbg !34
  %63 = extractvalue { i32, i32 } %24, 0, !dbg !20
  %64 = bitcast i32 %63 to float, !dbg !20
  %65 = fadd float %64, %59, !dbg !33
  %66 = fsub float %65, %61, !dbg !34
  %67 = bitcast i32 %41 to float, !dbg !30
  %68 = bitcast i32 %38 to float, !dbg !28
  %69 = and i32 %12, 7, !dbg !12
  %70 = or disjoint i32 %11, %69, !dbg !13
  %71 = icmp slt i32 %70, 16, !dbg !14
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #5, !dbg !35
  %73 = fmul float %66, %72, !dbg !36
  %74 = fmul float %62, %72, !dbg !36
  %75 = fmul float %73, %68, !dbg !37
  %76 = fmul float %74, %68, !dbg !37
  %77 = fadd float %75, %67, !dbg !38
  %78 = fadd float %76, %67, !dbg !38
  %.inv = fcmp ole float %77, 0.000000e+00, !dbg !39
  %79 = select i1 %.inv, float 0.000000e+00, float %77, !dbg !39
  %.inv1 = fcmp ole float %78, 0.000000e+00, !dbg !39
  %80 = select i1 %.inv1, float 0.000000e+00, float %78, !dbg !39
  %81 = fcmp olt float %79, 6.000000e+00, !dbg !43
  %82 = fcmp olt float %80, 6.000000e+00, !dbg !43
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !45
  %84 = fcmp uno float %80, 0.000000e+00, !dbg !45
  %85 = or i1 %81, %83, !dbg !46
  %86 = or i1 %82, %84, !dbg !46
  %87 = select i1 %85, float %79, float 6.000000e+00, !dbg !47
  %88 = select i1 %86, float %80, float 6.000000e+00, !dbg !47
  %89 = fadd float %87, %88, !dbg !48
  %90 = select i1 %16, float %89, float 0.000000e+00, !dbg !48
  %91 = bitcast float %90 to i32, !dbg !53
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !53
  %93 = bitcast i32 %92 to float, !dbg !53
  %94 = fadd float %90, %93, !dbg !48
  %95 = bitcast float %94 to i32, !dbg !53
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !53
  %97 = bitcast i32 %96 to float, !dbg !53
  %98 = fadd float %94, %97, !dbg !48
  %99 = bitcast float %98 to i32, !dbg !53
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !53
  %101 = bitcast i32 %100 to float, !dbg !53
  %102 = fadd float %98, %101, !dbg !48
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !54
  %104 = bitcast float %102 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !54
  %106 = load float, ptr addrspace(3) %105, align 4, !dbg !54
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 1.600000e+01) #5, !dbg !54
  %108 = bitcast float %65 to i32, !dbg !55
  %109 = bitcast float %60 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %109, ptr addrspace(1) %23, i1 %16) #5, !dbg !55
  %110 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !56
  %111 = bitcast float %87 to i32, !dbg !57
  %112 = bitcast float %88 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %111, i32 %112, ptr addrspace(1) %110, i1 %16) #5, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %113 = sext i32 %70 to i64, !dbg !59
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !59
  %115 = and i32 %12, 56, !dbg !60
  %116 = icmp eq i32 %115, 0, !dbg !60
  %117 = bitcast float %107 to i32, !dbg !60
  %118 = and i1 %116, %71, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %114, i1 %118) #5, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvphim2xw2ho445vdihgksg56qisdp5a4zqinjdu6i2xv76thmk6.py", directory: "inductor_cache/vp")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_convolution_hardtanh_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_convolution_hardtanh_mean_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_convolution_hardtanh_mean_3", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_convolution_hardtanh_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 19, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 110, column: 15, scope: !40, inlinedAt: !44)
!44 = !DILocation(line: 53, column: 42, scope: !7)
!45 = !DILocation(line: 112, column: 21, scope: !40, inlinedAt: !44)
!46 = !DILocation(line: 112, column: 16, scope: !40, inlinedAt: !44)
!47 = !DILocation(line: 113, column: 29, scope: !40, inlinedAt: !44)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !52)
!49 = distinct !DILexicalBlockFile(scope: !51, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!52 = !DILocation(line: 56, column: 26, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !51, inlinedAt: !52)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 47, scope: !7)
!56 = !DILocation(line: 60, column: 25, scope: !7)
!57 = !DILocation(line: 60, column: 45, scope: !7)
!58 = !DILocation(line: 61, column: 4, scope: !7)
!59 = !DILocation(line: 62, column: 28, scope: !7)
!60 = !DILocation(line: 62, column: 40, scope: !7)
!61 = !DILocation(line: 62, column: 4, scope: !7)
