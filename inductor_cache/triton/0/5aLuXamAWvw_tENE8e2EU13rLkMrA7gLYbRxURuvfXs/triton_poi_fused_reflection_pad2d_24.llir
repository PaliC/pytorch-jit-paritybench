; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_reflection_pad2d_24(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = srem i32 %10, 6, !dbg !14
  %14 = srem i32 %12, 6, !dbg !14
  %15 = sdiv i32 %9, 6, !dbg !15
  %16 = sdiv i32 %11, 6, !dbg !15
  %17 = sdiv i32 %9, 36, !dbg !16
  %18 = add nsw i32 %13, -1, !dbg !17
  %19 = add nsw i32 %14, -1, !dbg !17
  %20 = tail call i32 @llvm.abs.i32(i32 %18, i1 true), !dbg !18
  %21 = tail call i32 @llvm.abs.i32(i32 %19, i1 true), !dbg !18
  %22 = add nsw i32 %20, -3, !dbg !19
  %23 = add nsw i32 %21, -3, !dbg !19
  %24 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !20
  %25 = tail call i32 @llvm.abs.i32(i32 %23, i1 true), !dbg !20
  %26 = shl nsw i32 %17, 4, !dbg !21
  %reass.sub = or disjoint i32 %26, 15, !dbg !22
  %27 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %28 = insertelement <2 x i32> %27, i32 %15, i64 1, !dbg !14
  %29 = srem <2 x i32> %28, splat (i32 6), !dbg !14
  %30 = add nsw <2 x i32> %29, splat (i32 -1), !dbg !17
  %31 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %30, i1 true), !dbg !18
  %32 = add nsw <2 x i32> %31, splat (i32 -3), !dbg !19
  %33 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %32, i1 true), !dbg !20
  %34 = extractelement <2 x i32> %33, i64 0, !dbg !23
  %35 = sub nuw nsw i32 %reass.sub, %34, !dbg !23
  %36 = extractelement <2 x i32> %33, i64 1, !dbg !23
  %37 = mul nsw i32 %36, -4, !dbg !23
  %38 = add i32 %35, %37, !dbg !23
  %39 = sub nuw nsw i32 %reass.sub, %24, !dbg !22
  %40 = add i32 %39, %37, !dbg !23
  %41 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !14
  %42 = insertelement <2 x i32> %41, i32 %16, i64 1, !dbg !14
  %43 = srem <2 x i32> %42, splat (i32 6), !dbg !14
  %44 = add nsw <2 x i32> %43, splat (i32 -1), !dbg !17
  %45 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %44, i1 true), !dbg !18
  %46 = add nsw <2 x i32> %45, splat (i32 -3), !dbg !19
  %47 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %46, i1 true), !dbg !20
  %48 = extractelement <2 x i32> %47, i64 0, !dbg !23
  %49 = sub nuw nsw i32 %reass.sub, %48, !dbg !23
  %50 = extractelement <2 x i32> %47, i64 1, !dbg !23
  %51 = mul nsw i32 %50, -4, !dbg !23
  %52 = add i32 %49, %51, !dbg !23
  %53 = sub nuw nsw i32 %reass.sub, %25, !dbg !22
  %54 = add i32 %53, %51, !dbg !23
  %55 = sext i32 %38 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %40 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %54 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #2, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !25
  %67 = sext i32 %9 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %63, i32 %64, i32 %65, i32 %66, ptr addrspace(1) %68, i1 true) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwnfevl7glx7o4l4fa6u263y6vvu75vc6c3rme4nd23f2txmzvxs.py", directory: "inductor_cache/wn")
!4 = !{ptr @triton_poi_fused_reflection_pad2d_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_reflection_pad2d_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_reflection_pad2d_24", linkageName: "triton_poi_fused_reflection_pad2d_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 79, scope: !7)
!18 = !DILocation(line: 28, column: 72, scope: !7)
!19 = !DILocation(line: 28, column: 60, scope: !7)
!20 = !DILocation(line: 28, column: 53, scope: !7)
!21 = !DILocation(line: 28, column: 142, scope: !7)
!22 = !DILocation(line: 28, column: 88, scope: !7)
!23 = !DILocation(line: 28, column: 139, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 147, scope: !7)
!26 = !DILocation(line: 29, column: 25, scope: !7)
!27 = !DILocation(line: 29, column: 36, scope: !7)
!28 = !DILocation(line: 29, column: 4, scope: !7)
