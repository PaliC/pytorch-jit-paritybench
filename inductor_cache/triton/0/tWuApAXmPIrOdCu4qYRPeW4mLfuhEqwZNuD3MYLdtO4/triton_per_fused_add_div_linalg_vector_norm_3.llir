; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_linalg_vector_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %4 = and i32 %3, 31, !dbg !10
  %5 = lshr i32 %3, 5, !dbg !10
  %6 = shl i32 %3, 1, !dbg !10
  %7 = and i32 %6, 126, !dbg !10
  %8 = icmp samesign ult i32 %7, 100, !dbg !11
  %9 = zext nneg i32 %7 to i64, !dbg !12
  %10 = getelementptr float, ptr addrspace(1) %0, i64 %9, !dbg !12
  %11 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %10, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !13
  %12 = extractvalue { i32, i32 } %11, 0, !dbg !13
  %13 = extractvalue { i32, i32 } %11, 1, !dbg !13
  %14 = bitcast i32 %12 to float, !dbg !13
  %15 = bitcast i32 %13 to float, !dbg !13
  %16 = fmul float %14, %14, !dbg !14
  %17 = fmul float %15, %15, !dbg !14
  %18 = fadd float %16, %17, !dbg !15
  %19 = select i1 %8, float %18, float 0.000000e+00, !dbg !15
  %20 = bitcast float %19 to i32, !dbg !20
  %21 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %20, i32 16, i32 31), !dbg !20
  %22 = bitcast i32 %21 to float, !dbg !20
  %23 = fadd float %19, %22, !dbg !15
  %24 = bitcast float %23 to i32, !dbg !20
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 8, i32 31), !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = fadd float %23, %26, !dbg !15
  %28 = bitcast float %27 to i32, !dbg !20
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = fadd float %27, %30, !dbg !15
  %32 = bitcast float %31 to i32, !dbg !20
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 2, i32 31), !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = fadd float %31, %34, !dbg !15
  %36 = bitcast float %35 to i32, !dbg !20
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 1, i32 31), !dbg !20
  %38 = bitcast i32 %37 to float, !dbg !20
  %39 = fadd float %35, %38, !dbg !15
  %40 = icmp eq i32 %4, 0, !dbg !20
  %41 = and i32 %5, 1, !dbg !20
  %42 = zext nneg i32 %41 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(3) @global_smem, i64 %42, !dbg !20
  %44 = bitcast float %39 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 %40) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %45 = icmp slt i32 %3, 2, !dbg !20
  %46 = sext i32 %3 to i64, !dbg !20
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !20
  %48 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %47, i1 %45) #5, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = fadd float %49, %51, !dbg !15
  %53 = and i32 %3, 1, !dbg !20
  %54 = icmp eq i32 %53, 0, !dbg !20
  %55 = and i1 %45, %54, !dbg !20
  %56 = bitcast float %52 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %56, i1 %55) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %57 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !20
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i1 = icmp eq i32 %60, 0, !dbg !21
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !21
  br i1 %.not.i1, label %67, label %62, !dbg !21

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !21

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !21

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #5, !dbg !21
  br label %__nv_sqrtf.exit5, !dbg !21

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !21
  %72 = fadd float %.0.i3, 0x3D71979980000000, !dbg !22
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %14, float %72) #5, !dbg !23
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %72) #5, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %9, !dbg !24
  %76 = bitcast float %73 to i32, !dbg !25
  %77 = bitcast float %74 to i32, !dbg !25
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %76, i32 %77, ptr addrspace(1) %75, i1 %8) #5, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciuj67mb5fd7mxylmexaiglpuxglry7eopp7hra7atmqzyd6dh3w.py", directory: "inductor_cache/iu")
!4 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_linalg_vector_norm_3", linkageName: "triton_per_fused_add_div_linalg_vector_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 28, column: 21, scope: !7)
!12 = !DILocation(line: 30, column: 30, scope: !7)
!13 = !DILocation(line: 30, column: 35, scope: !7)
!14 = !DILocation(line: 31, column: 18, scope: !7)
!15 = !DILocation(line: 256, column: 15, scope: !16, inlinedAt: !19)
!16 = distinct !DILexicalBlockFile(scope: !18, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!19 = !DILocation(line: 34, column: 24, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !18, inlinedAt: !19)
!21 = !DILocation(line: 35, column: 26, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 25, scope: !7)
!25 = !DILocation(line: 39, column: 71, scope: !7)
!26 = !DILocation(line: 39, column: 4, scope: !7)
