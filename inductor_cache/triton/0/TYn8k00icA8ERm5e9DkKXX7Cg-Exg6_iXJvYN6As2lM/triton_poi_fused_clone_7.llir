; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = lshr i32 %11, 3, !dbg !12
  %15 = and i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = lshr i32 %11, 3, !dbg !12
  %18 = and i32 %17, 8, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %11, 128, !dbg !12
  %21 = lshr exact i32 %20, 3, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = or disjoint i32 %22, 32, !dbg !12
  %24 = or disjoint i32 %22, 64, !dbg !12
  %25 = or disjoint i32 %22, 96, !dbg !12
  %26 = shl i32 %11, 2, !dbg !12
  %27 = and i32 %26, 28, !dbg !12
  %28 = and i32 %26, 124, !dbg !12
  %29 = or disjoint i32 %10, %22, !dbg !13
  %30 = or disjoint i32 %10, %23, !dbg !13
  %31 = or disjoint i32 %10, %24, !dbg !13
  %32 = or disjoint i32 %10, %25, !dbg !13
  %33 = or disjoint i32 %10, %28, !dbg !13
  %34 = icmp slt i32 %29, 128, !dbg !14
  %35 = icmp slt i32 %30, 128, !dbg !14
  %36 = icmp slt i32 %31, 128, !dbg !14
  %37 = icmp slt i32 %32, 128, !dbg !14
  %38 = icmp slt i32 %33, 128, !dbg !14
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %40 = shl i32 %39, 5, !dbg !16
  %.lobit118 = lshr i32 %11, 5, !dbg !17
  %41 = and i32 %.lobit118, 3, !dbg !17
  %42 = lshr exact i32 %20, 5, !dbg !17
  %43 = or disjoint i32 %41, %42, !dbg !17
  %44 = or disjoint i32 %40, %27, !dbg !18
  %45 = or disjoint i32 %40, %43, !dbg !18
  %46 = or disjoint i32 %45, 8, !dbg !18
  %47 = or disjoint i32 %45, 16, !dbg !18
  %48 = or disjoint i32 %45, 24, !dbg !18
  %49 = icmp slt i32 %44, 64, !dbg !19
  %50 = icmp slt i32 %45, 64, !dbg !19
  %51 = icmp slt i32 %46, 64, !dbg !19
  %52 = icmp slt i32 %47, 64, !dbg !19
  %53 = icmp slt i32 %48, 64, !dbg !19
  %.frozen = freeze i32 %33, !dbg !20
  %54 = sdiv i32 %.frozen, 32, !dbg !20
  %55 = mul i32 %54, 32, !dbg !21
  %.decomposed = sub i32 %.frozen, %55, !dbg !21
  %56 = shl i32 %29, 6, !dbg !22
  %57 = shl i32 %30, 6, !dbg !22
  %58 = shl i32 %31, 6, !dbg !22
  %59 = shl i32 %32, 6, !dbg !22
  %60 = add i32 %44, %56, !dbg !23
  %61 = add i32 %44, %57, !dbg !23
  %62 = add i32 %44, %58, !dbg !23
  %63 = add i32 %44, %59, !dbg !23
  %64 = sext i32 %60 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = sext i32 %61 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %62 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = sext i32 %63 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = and i1 %34, %49, !dbg !25
  %73 = and i1 %35, %49, !dbg !25
  %74 = and i1 %36, %49, !dbg !25
  %75 = and i1 %37, %49, !dbg !25
  %76 = and i1 %38, %50, !dbg !25
  %77 = and i1 %51, %38, !dbg !25
  %78 = and i1 %52, %38, !dbg !25
  %79 = and i1 %53, %38, !dbg !25
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %72) #2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !26
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %73) #2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !26
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %74) #2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !26
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %75) #2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !26
  %100 = shl i32 %11, 9, !dbg !26
  %101 = and i32 %100, 3584, !dbg !26
  %102 = or disjoint i32 %13, %101, !dbg !26
  %103 = or disjoint i32 %102, %15, !dbg !26
  %104 = or disjoint i32 %103, %18, !dbg !26
  %105 = or disjoint i32 %104, %21, !dbg !26
  %106 = and i32 %26, 1020, !dbg !26
  %107 = lshr exact i32 %101, 3, !dbg !26
  %108 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %105, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !26
  %111 = or disjoint i32 %105, 128, !dbg !26
  %112 = lshr i32 %111, 5, !dbg !26
  %113 = and i32 %112, 134217724, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %111, !dbg !26
  %116 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !26
  %117 = or disjoint i32 %105, 256, !dbg !26
  %118 = lshr i32 %117, 5, !dbg !26
  %119 = and i32 %118, 134217724, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !26
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %117, !dbg !26
  %122 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !26
  %123 = or disjoint i32 %105, 384, !dbg !26
  %124 = lshr i32 %123, 5, !dbg !26
  %125 = and i32 %124, 134217724, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !26
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %123, !dbg !26
  %128 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !26
  %129 = or disjoint i32 %105, 32, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) %108, i32 %129, !dbg !26
  %131 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !26
  %132 = or disjoint i32 %105, 160, !dbg !26
  %133 = lshr i32 %132, 5, !dbg !26
  %134 = and i32 %133, 134217724, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %132, !dbg !26
  %137 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !26
  %138 = or disjoint i32 %105, 288, !dbg !26
  %139 = lshr i32 %138, 5, !dbg !26
  %140 = and i32 %139, 134217724, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !26
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !26
  %143 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !26
  %144 = or disjoint i32 %105, 416, !dbg !26
  %145 = lshr i32 %144, 5, !dbg !26
  %146 = and i32 %145, 134217724, !dbg !26
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %144, !dbg !26
  %149 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !26
  %150 = or disjoint i32 %105, 64, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %108, i32 %150, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !26
  %153 = or disjoint i32 %105, 192, !dbg !26
  %154 = lshr i32 %153, 5, !dbg !26
  %155 = and i32 %154, 134217724, !dbg !26
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !26
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %153, !dbg !26
  %158 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !26
  %159 = or disjoint i32 %105, 320, !dbg !26
  %160 = lshr i32 %159, 5, !dbg !26
  %161 = and i32 %160, 134217724, !dbg !26
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !26
  %164 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !26
  %165 = or disjoint i32 %105, 448, !dbg !26
  %166 = lshr i32 %165, 5, !dbg !26
  %167 = and i32 %166, 134217724, !dbg !26
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !26
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !26
  %170 = insertelement <1 x i32> poison, i32 %94, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !26
  %171 = or disjoint i32 %105, 96, !dbg !26
  %172 = getelementptr float, ptr addrspace(3) %108, i32 %171, !dbg !26
  %173 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !26
  %174 = or disjoint i32 %105, 224, !dbg !26
  %175 = lshr i32 %174, 5, !dbg !26
  %176 = and i32 %175, 134217724, !dbg !26
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !26
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %174, !dbg !26
  %179 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !26
  %180 = or disjoint i32 %105, 352, !dbg !26
  %181 = lshr i32 %180, 5, !dbg !26
  %182 = and i32 %181, 134217724, !dbg !26
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !26
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %180, !dbg !26
  %185 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !26
  %186 = or disjoint i32 %105, 480, !dbg !26
  %187 = lshr i32 %186, 5, !dbg !26
  %188 = and i32 %187, 134217724, !dbg !26
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !26
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %186, !dbg !26
  %191 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %192 = lshr i32 %26, 5, !dbg !26
  %193 = and i32 %192, 28, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %106, !dbg !26
  %196 = load float, ptr addrspace(3) %195, align 16, !dbg !26
  %197 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 4, !dbg !26
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !26
  %199 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 8, !dbg !26
  %200 = load float, ptr addrspace(3) %199, align 8, !dbg !26
  %201 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 12, !dbg !26
  %202 = load float, ptr addrspace(3) %201, align 4, !dbg !26
  %203 = or disjoint i32 %106, 1024, !dbg !26
  %204 = lshr i32 %203, 5, !dbg !26
  %205 = and i32 %204, 60, !dbg !26
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %203, !dbg !26
  %208 = load float, ptr addrspace(3) %207, align 16, !dbg !26
  %209 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 4, !dbg !26
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !26
  %211 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 8, !dbg !26
  %212 = load float, ptr addrspace(3) %211, align 8, !dbg !26
  %213 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 12, !dbg !26
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !26
  %215 = or disjoint i32 %106, 2048, !dbg !26
  %216 = lshr i32 %215, 5, !dbg !26
  %217 = and i32 %216, 92, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %215, !dbg !26
  %220 = load float, ptr addrspace(3) %219, align 16, !dbg !26
  %221 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 4, !dbg !26
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !26
  %223 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 8, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 8, !dbg !26
  %225 = getelementptr inbounds i8, ptr addrspace(3) %219, i32 12, !dbg !26
  %226 = load float, ptr addrspace(3) %225, align 4, !dbg !26
  %227 = or disjoint i32 %106, 3072, !dbg !26
  %228 = lshr i32 %227, 5, !dbg !26
  %229 = and i32 %228, 124, !dbg !26
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !26
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %227, !dbg !26
  %232 = load float, ptr addrspace(3) %231, align 16, !dbg !26
  %233 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 4, !dbg !26
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !26
  %235 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 8, !dbg !26
  %236 = load float, ptr addrspace(3) %235, align 8, !dbg !26
  %237 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 12, !dbg !26
  %238 = load float, ptr addrspace(3) %237, align 4, !dbg !26
  %239 = shl i32 %45, 5, !dbg !27
  %240 = shl i32 %46, 5, !dbg !27
  %241 = shl i32 %47, 5, !dbg !27
  %242 = shl i32 %48, 5, !dbg !27
  %243 = shl i32 %54, 11, !dbg !28
  %244 = add i32 %243, %.decomposed, !dbg !29
  %245 = add i32 %244, %239, !dbg !30
  %246 = add i32 %244, %240, !dbg !30
  %247 = add i32 %244, %241, !dbg !30
  %248 = add i32 %244, %242, !dbg !30
  %249 = sext i32 %245 to i64, !dbg !31
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %249, !dbg !31
  %251 = sext i32 %246 to i64, !dbg !31
  %252 = getelementptr float, ptr addrspace(1) %1, i64 %251, !dbg !31
  %253 = sext i32 %247 to i64, !dbg !31
  %254 = getelementptr float, ptr addrspace(1) %1, i64 %253, !dbg !31
  %255 = sext i32 %248 to i64, !dbg !31
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %255, !dbg !31
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %250, i1 %76) #2, !dbg !32
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !32
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !32
  %262 = bitcast i32 %258 to float, !dbg !32
  %263 = bitcast i32 %259 to float, !dbg !32
  %264 = bitcast i32 %260 to float, !dbg !32
  %265 = bitcast i32 %261 to float, !dbg !32
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %252, i1 %77) #2, !dbg !32
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !32
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !32
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !32
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !32
  %271 = bitcast i32 %267 to float, !dbg !32
  %272 = bitcast i32 %268 to float, !dbg !32
  %273 = bitcast i32 %269 to float, !dbg !32
  %274 = bitcast i32 %270 to float, !dbg !32
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %254, i1 %78) #2, !dbg !32
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !32
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !32
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !32
  %280 = bitcast i32 %276 to float, !dbg !32
  %281 = bitcast i32 %277 to float, !dbg !32
  %282 = bitcast i32 %278 to float, !dbg !32
  %283 = bitcast i32 %279 to float, !dbg !32
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %256, i1 %79) #2, !dbg !32
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !32
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !32
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !32
  %289 = bitcast i32 %285 to float, !dbg !32
  %290 = bitcast i32 %286 to float, !dbg !32
  %291 = bitcast i32 %287 to float, !dbg !32
  %292 = bitcast i32 %288 to float, !dbg !32
  %293 = sext i32 %.decomposed to i64, !dbg !33
  %294 = getelementptr float, ptr addrspace(1) %2, i64 %293, !dbg !33
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %294, i1 %38) #2, !dbg !34
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !34
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !34
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !34
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !34
  %300 = bitcast i32 %296 to float, !dbg !34
  %301 = bitcast i32 %297 to float, !dbg !34
  %302 = bitcast i32 %298 to float, !dbg !34
  %303 = bitcast i32 %299 to float, !dbg !34
  %304 = getelementptr float, ptr addrspace(1) %3, i64 %249, !dbg !35
  %305 = getelementptr float, ptr addrspace(1) %3, i64 %251, !dbg !35
  %306 = getelementptr float, ptr addrspace(1) %3, i64 %253, !dbg !35
  %307 = getelementptr float, ptr addrspace(1) %3, i64 %255, !dbg !35
  %308 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %304, i1 %76) #2, !dbg !36
  %309 = extractvalue { i32, i32, i32, i32 } %308, 0, !dbg !36
  %310 = extractvalue { i32, i32, i32, i32 } %308, 1, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %308, 2, !dbg !36
  %312 = extractvalue { i32, i32, i32, i32 } %308, 3, !dbg !36
  %313 = bitcast i32 %309 to float, !dbg !36
  %314 = bitcast i32 %310 to float, !dbg !36
  %315 = bitcast i32 %311 to float, !dbg !36
  %316 = bitcast i32 %312 to float, !dbg !36
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %305, i1 %77) #2, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !36
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !36
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !36
  %322 = bitcast i32 %318 to float, !dbg !36
  %323 = bitcast i32 %319 to float, !dbg !36
  %324 = bitcast i32 %320 to float, !dbg !36
  %325 = bitcast i32 %321 to float, !dbg !36
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %306, i1 %78) #2, !dbg !36
  %327 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !36
  %328 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !36
  %329 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !36
  %330 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !36
  %331 = bitcast i32 %327 to float, !dbg !36
  %332 = bitcast i32 %328 to float, !dbg !36
  %333 = bitcast i32 %329 to float, !dbg !36
  %334 = bitcast i32 %330 to float, !dbg !36
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %307, i1 %79) #2, !dbg !36
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !36
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !36
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !36
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !36
  %340 = bitcast i32 %336 to float, !dbg !36
  %341 = bitcast i32 %337 to float, !dbg !36
  %342 = bitcast i32 %338 to float, !dbg !36
  %343 = bitcast i32 %339 to float, !dbg !36
  %344 = getelementptr float, ptr addrspace(1) %4, i64 %293, !dbg !37
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %344, i1 %38) #2, !dbg !38
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !38
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !38
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !38
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !38
  %350 = bitcast i32 %346 to float, !dbg !38
  %351 = bitcast i32 %347 to float, !dbg !38
  %352 = bitcast i32 %348 to float, !dbg !38
  %353 = bitcast i32 %349 to float, !dbg !38
  %354 = fadd float %262, %300, !dbg !39
  %355 = fadd float %263, %301, !dbg !39
  %356 = fadd float %264, %302, !dbg !39
  %357 = fadd float %265, %303, !dbg !39
  %358 = fadd float %271, %300, !dbg !39
  %359 = fadd float %272, %301, !dbg !39
  %360 = fadd float %273, %302, !dbg !39
  %361 = fadd float %274, %303, !dbg !39
  %362 = fadd float %280, %300, !dbg !39
  %363 = fadd float %281, %301, !dbg !39
  %364 = fadd float %282, %302, !dbg !39
  %365 = fadd float %283, %303, !dbg !39
  %366 = fadd float %289, %300, !dbg !39
  %367 = fadd float %290, %301, !dbg !39
  %368 = fadd float %291, %302, !dbg !39
  %369 = fadd float %292, %303, !dbg !39
  %370 = fadd float %196, %354, !dbg !40
  %371 = fadd float %198, %355, !dbg !40
  %372 = fadd float %200, %356, !dbg !40
  %373 = fadd float %202, %357, !dbg !40
  %374 = fadd float %208, %358, !dbg !40
  %375 = fadd float %210, %359, !dbg !40
  %376 = fadd float %212, %360, !dbg !40
  %377 = fadd float %214, %361, !dbg !40
  %378 = fadd float %220, %362, !dbg !40
  %379 = fadd float %222, %363, !dbg !40
  %380 = fadd float %224, %364, !dbg !40
  %381 = fadd float %226, %365, !dbg !40
  %382 = fadd float %232, %366, !dbg !40
  %383 = fadd float %234, %367, !dbg !40
  %384 = fadd float %236, %368, !dbg !40
  %385 = fadd float %238, %369, !dbg !40
  %386 = fadd float %313, %350, !dbg !41
  %387 = fadd float %314, %351, !dbg !41
  %388 = fadd float %315, %352, !dbg !41
  %389 = fadd float %316, %353, !dbg !41
  %390 = fadd float %322, %350, !dbg !41
  %391 = fadd float %323, %351, !dbg !41
  %392 = fadd float %324, %352, !dbg !41
  %393 = fadd float %325, %353, !dbg !41
  %394 = fadd float %331, %350, !dbg !41
  %395 = fadd float %332, %351, !dbg !41
  %396 = fadd float %333, %352, !dbg !41
  %397 = fadd float %334, %353, !dbg !41
  %398 = fadd float %340, %350, !dbg !41
  %399 = fadd float %341, %351, !dbg !41
  %400 = fadd float %342, %352, !dbg !41
  %401 = fadd float %343, %353, !dbg !41
  %402 = fadd float %370, %386, !dbg !42
  %403 = fadd float %371, %387, !dbg !42
  %404 = fadd float %372, %388, !dbg !42
  %405 = fadd float %373, %389, !dbg !42
  %406 = fadd float %374, %390, !dbg !42
  %407 = fadd float %375, %391, !dbg !42
  %408 = fadd float %376, %392, !dbg !42
  %409 = fadd float %377, %393, !dbg !42
  %410 = fadd float %378, %394, !dbg !42
  %411 = fadd float %379, %395, !dbg !42
  %412 = fadd float %380, %396, !dbg !42
  %413 = fadd float %381, %397, !dbg !42
  %414 = fadd float %382, %398, !dbg !42
  %415 = fadd float %383, %399, !dbg !42
  %416 = fadd float %384, %400, !dbg !42
  %417 = fadd float %385, %401, !dbg !42
  %418 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !43
  %419 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !43
  %420 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !43
  %421 = getelementptr float, ptr addrspace(1) %5, i64 %70, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %422 = shl i32 %11, 7, !dbg !44
  %423 = and i32 %422, 3968, !dbg !44
  %424 = or disjoint i32 %41, %423, !dbg !44
  %425 = or disjoint i32 %424, %42, !dbg !44
  %426 = lshr exact i32 %423, 3, !dbg !44
  %427 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %426, !dbg !44
  %428 = getelementptr float, ptr addrspace(3) %427, i32 %425, !dbg !44
  %429 = bitcast float %402 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 true) #2, !dbg !44
  %430 = or disjoint i32 %425, 32, !dbg !44
  %431 = lshr i32 %430, 5, !dbg !44
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !44
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %430, !dbg !44
  %434 = bitcast float %403 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #2, !dbg !44
  %435 = or disjoint i32 %425, 64, !dbg !44
  %436 = lshr i32 %435, 5, !dbg !44
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %436, !dbg !44
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %435, !dbg !44
  %439 = bitcast float %404 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 true) #2, !dbg !44
  %440 = or disjoint i32 %425, 96, !dbg !44
  %441 = lshr i32 %440, 5, !dbg !44
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !44
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %440, !dbg !44
  %444 = bitcast float %405 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 true) #2, !dbg !44
  %445 = or disjoint i32 %425, 8, !dbg !44
  %446 = getelementptr float, ptr addrspace(3) %427, i32 %445, !dbg !44
  %447 = bitcast float %406 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %447, i1 true) #2, !dbg !44
  %448 = or disjoint i32 %425, 40, !dbg !44
  %449 = lshr i32 %448, 5, !dbg !44
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i32 %449, !dbg !44
  %451 = getelementptr float, ptr addrspace(3) %450, i32 %448, !dbg !44
  %452 = bitcast float %407 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %452, i1 true) #2, !dbg !44
  %453 = or disjoint i32 %425, 72, !dbg !44
  %454 = lshr i32 %453, 5, !dbg !44
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !44
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %453, !dbg !44
  %457 = bitcast float %408 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #2, !dbg !44
  %458 = or disjoint i32 %425, 104, !dbg !44
  %459 = lshr i32 %458, 5, !dbg !44
  %460 = getelementptr float, ptr addrspace(3) @global_smem, i32 %459, !dbg !44
  %461 = getelementptr float, ptr addrspace(3) %460, i32 %458, !dbg !44
  %462 = bitcast float %409 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #2, !dbg !44
  %463 = or disjoint i32 %425, 16, !dbg !44
  %464 = getelementptr float, ptr addrspace(3) %427, i32 %463, !dbg !44
  %465 = bitcast float %410 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #2, !dbg !44
  %466 = or disjoint i32 %425, 48, !dbg !44
  %467 = lshr i32 %466, 5, !dbg !44
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %467, !dbg !44
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %466, !dbg !44
  %470 = bitcast float %411 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #2, !dbg !44
  %471 = or disjoint i32 %425, 80, !dbg !44
  %472 = lshr i32 %471, 5, !dbg !44
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !44
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %471, !dbg !44
  %475 = bitcast float %412 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %475, i1 true) #2, !dbg !44
  %476 = or disjoint i32 %425, 112, !dbg !44
  %477 = lshr i32 %476, 5, !dbg !44
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !44
  %479 = getelementptr float, ptr addrspace(3) %478, i32 %476, !dbg !44
  %480 = bitcast float %413 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %480, i1 true) #2, !dbg !44
  %481 = or disjoint i32 %425, 24, !dbg !44
  %482 = getelementptr float, ptr addrspace(3) %427, i32 %481, !dbg !44
  %483 = bitcast float %414 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #2, !dbg !44
  %484 = or disjoint i32 %425, 56, !dbg !44
  %485 = lshr i32 %484, 5, !dbg !44
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !44
  %487 = getelementptr float, ptr addrspace(3) %486, i32 %484, !dbg !44
  %488 = bitcast float %415 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %487, <1 x i32> %488, i1 true) #2, !dbg !44
  %489 = or disjoint i32 %425, 88, !dbg !44
  %490 = lshr i32 %489, 5, !dbg !44
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490, !dbg !44
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %489, !dbg !44
  %493 = bitcast float %416 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %492, <1 x i32> %493, i1 true) #2, !dbg !44
  %494 = or disjoint i32 %425, 120, !dbg !44
  %495 = lshr i32 %494, 5, !dbg !44
  %496 = getelementptr float, ptr addrspace(3) @global_smem, i32 %495, !dbg !44
  %497 = getelementptr float, ptr addrspace(3) %496, i32 %494, !dbg !44
  %498 = bitcast float %417 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %498, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %499 = lshr i32 %106, 5, !dbg !44
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !44
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %106, !dbg !44
  %502 = load i32, ptr addrspace(3) %501, align 4, !dbg !44
  %503 = or disjoint i32 %106, 1, !dbg !44
  %504 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %503, !dbg !44
  %505 = load i32, ptr addrspace(3) %504, align 4, !dbg !44
  %506 = or disjoint i32 %106, 2, !dbg !44
  %507 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %506, !dbg !44
  %508 = load i32, ptr addrspace(3) %507, align 4, !dbg !44
  %509 = or disjoint i32 %106, 3, !dbg !44
  %510 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %509, !dbg !44
  %511 = load i32, ptr addrspace(3) %510, align 4, !dbg !44
  %512 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !44
  %513 = getelementptr inbounds float, ptr addrspace(3) %512, i32 %203, !dbg !44
  %514 = load i32, ptr addrspace(3) %513, align 4, !dbg !44
  %515 = or disjoint i32 %106, 1025, !dbg !44
  %516 = lshr i32 %515, 5, !dbg !44
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !44
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %515, !dbg !44
  %519 = load i32, ptr addrspace(3) %518, align 4, !dbg !44
  %520 = or disjoint i32 %106, 1026, !dbg !44
  %521 = lshr i32 %520, 5, !dbg !44
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %521, !dbg !44
  %523 = getelementptr inbounds float, ptr addrspace(3) %522, i32 %520, !dbg !44
  %524 = load i32, ptr addrspace(3) %523, align 4, !dbg !44
  %525 = or disjoint i32 %106, 1027, !dbg !44
  %526 = lshr i32 %525, 5, !dbg !44
  %527 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %526, !dbg !44
  %528 = getelementptr inbounds float, ptr addrspace(3) %527, i32 %525, !dbg !44
  %529 = load i32, ptr addrspace(3) %528, align 4, !dbg !44
  %530 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !44
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %215, !dbg !44
  %532 = load i32, ptr addrspace(3) %531, align 4, !dbg !44
  %533 = or disjoint i32 %106, 2049, !dbg !44
  %534 = lshr i32 %533, 5, !dbg !44
  %535 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %534, !dbg !44
  %536 = getelementptr inbounds float, ptr addrspace(3) %535, i32 %533, !dbg !44
  %537 = load i32, ptr addrspace(3) %536, align 4, !dbg !44
  %538 = or disjoint i32 %106, 2050, !dbg !44
  %539 = lshr i32 %538, 5, !dbg !44
  %540 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %539, !dbg !44
  %541 = getelementptr inbounds float, ptr addrspace(3) %540, i32 %538, !dbg !44
  %542 = load i32, ptr addrspace(3) %541, align 4, !dbg !44
  %543 = or disjoint i32 %106, 2051, !dbg !44
  %544 = lshr i32 %543, 5, !dbg !44
  %545 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %544, !dbg !44
  %546 = getelementptr inbounds float, ptr addrspace(3) %545, i32 %543, !dbg !44
  %547 = load i32, ptr addrspace(3) %546, align 4, !dbg !44
  %548 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !44
  %549 = getelementptr inbounds float, ptr addrspace(3) %548, i32 %227, !dbg !44
  %550 = load i32, ptr addrspace(3) %549, align 4, !dbg !44
  %551 = or disjoint i32 %106, 3073, !dbg !44
  %552 = lshr i32 %551, 5, !dbg !44
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !44
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %551, !dbg !44
  %555 = load i32, ptr addrspace(3) %554, align 4, !dbg !44
  %556 = or disjoint i32 %106, 3074, !dbg !44
  %557 = lshr i32 %556, 5, !dbg !44
  %558 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %557, !dbg !44
  %559 = getelementptr inbounds float, ptr addrspace(3) %558, i32 %556, !dbg !44
  %560 = load i32, ptr addrspace(3) %559, align 4, !dbg !44
  %561 = or disjoint i32 %106, 3075, !dbg !44
  %562 = lshr i32 %561, 5, !dbg !44
  %563 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %562, !dbg !44
  %564 = getelementptr inbounds float, ptr addrspace(3) %563, i32 %561, !dbg !44
  %565 = load i32, ptr addrspace(3) %564, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %502, i32 %505, i32 %508, i32 %511, ptr addrspace(1) %418, i1 %72) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %519, i32 %524, i32 %529, ptr addrspace(1) %419, i1 %73) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %537, i32 %542, i32 %547, ptr addrspace(1) %420, i1 %74) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %555, i32 %560, i32 %565, ptr addrspace(1) %421, i1 %75) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccd3mvbs22v22xl5ejhz3m4nyb7hbhl3ntbbllxkaxg3peysftux.py", directory: "inductor_cache/cd")
!4 = !{ptr @triton_poi_fused_clone_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_7", linkageName: "triton_poi_fused_clone_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 48, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 53, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 53, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 25, scope: !7)
!44 = !DILocation(line: 41, column: 44, scope: !7)
!45 = !DILocation(line: 41, column: 4, scope: !7)
