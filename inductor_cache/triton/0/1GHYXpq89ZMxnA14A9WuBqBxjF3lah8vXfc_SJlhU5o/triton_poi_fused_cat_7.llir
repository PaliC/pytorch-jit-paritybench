; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 2560, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %16 = sdiv i32 %.frozen, 64, !dbg !15
  %17 = srem i32 %16, 10, !dbg !16
  %18 = mul i32 %16, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %.frozen6 = freeze i32 %14, !dbg !18
  %19 = sdiv i32 %.frozen6, 640, !dbg !18
  %20 = icmp slt i32 %17, 6, !dbg !19
  %21 = mul i32 %19, 640, !dbg !20
  %srem.decomposed = sub i32 %.frozen6, %21, !dbg !20
  %22 = mul nsw i32 %19, 384, !dbg !21
  %23 = add nsw i32 %22, %srem.decomposed, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = and i1 %15, %20, !dbg !24
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #3, !dbg !25
  %28 = icmp sgt i32 %17, 5, !dbg !26
  %29 = add nsw i32 %17, -6, !dbg !27
  %30 = shl nsw i32 %29, 6, !dbg !28
  %31 = shl nsw i32 %19, 8, !dbg !29
  %32 = add nsw i32 %31, %.decomposed, !dbg !30
  %33 = add nsw i32 %32, %30, !dbg !31
  %34 = sext i32 %33 to i64, !dbg !32
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !32
  %36 = and i1 %15, %28, !dbg !33
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !34
  %38 = sext i32 %29 to i64, !dbg !35
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !35
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %36, i32 0, i1 %36) #3, !dbg !36
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !37
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 0, i1 %36) #3, !dbg !38
  %44 = bitcast i32 %43 to float, !dbg !38
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %36, i32 0, i1 %36) #3, !dbg !38
  %46 = bitcast i32 %45 to float, !dbg !38
  %47 = fadd float %44, 0x3EE4F8B580000000, !dbg !39
  %48 = fadd float %46, 0x3EE4F8B580000000, !dbg !39
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %49, 0, !dbg !40
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %50, 0, !dbg !40
  br i1 %.not.i, label %56, label %51, !dbg !40

51:                                               ; preds = %8
  br i1 %.not1.i, label %54, label %52, !dbg !40

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !40

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !40
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %61, 0, !dbg !40
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !40
  br i1 %.not.i1, label %68, label %63, !dbg !40

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !40

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !40

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !40
  %73 = extractvalue { i32, i32 } %37, 1, !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = bitcast i32 %41 to float, !dbg !36
  %76 = fsub float %74, %75, !dbg !41
  %77 = extractvalue { i32, i32 } %37, 0, !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = bitcast i32 %40 to float, !dbg !36
  %80 = fsub float %78, %79, !dbg !41
  %81 = extractvalue { i32, i32 } %27, 1, !dbg !25
  %82 = extractvalue { i32, i32 } %27, 0, !dbg !25
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %85 = fmul float %80, %83, !dbg !43
  %86 = fmul float %76, %84, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !44
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %36, i32 0, i1 %36) #3, !dbg !45
  %89 = bitcast i32 %88 to float, !dbg !45
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %36, i32 0, i1 %36) #3, !dbg !45
  %91 = bitcast i32 %90 to float, !dbg !45
  %92 = fmul float %85, %89, !dbg !46
  %93 = fmul float %86, %91, !dbg !46
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !47
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %36, i32 0, i1 %36) #3, !dbg !48
  %96 = bitcast i32 %95 to float, !dbg !48
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %36, i32 0, i1 %36) #3, !dbg !48
  %98 = bitcast i32 %97 to float, !dbg !48
  %99 = fadd float %92, %96, !dbg !49
  %100 = fadd float %93, %98, !dbg !49
  %101 = fcmp olt float %99, 0.000000e+00, !dbg !50
  %102 = fcmp olt float %100, 0.000000e+00, !dbg !50
  %103 = select i1 %101, float 0.000000e+00, float %99, !dbg !54
  %104 = select i1 %102, float 0.000000e+00, float %100, !dbg !54
  %105 = sext i32 %14 to i64, !dbg !55
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %105, !dbg !55
  %107 = bitcast float %103 to i32, !dbg !56
  %108 = select i1 %20, i32 %82, i32 %107, !dbg !57
  %109 = bitcast float %104 to i32, !dbg !56
  %110 = select i1 %20, i32 %81, i32 %109, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %110, ptr addrspace(1) %106, i1 %15) #3, !dbg !56
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crv73vxc7xn6qm5x7ddkfznxfmfntddhmavslx5fybjj23sci5sg.py", directory: "inductor_cache/rv")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 49, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 61, scope: !7)
!25 = !DILocation(line: 33, column: 54, scope: !7)
!26 = !DILocation(line: 34, column: 19, scope: !7)
!27 = !DILocation(line: 37, column: 46, scope: !7)
!28 = !DILocation(line: 37, column: 39, scope: !7)
!29 = !DILocation(line: 37, column: 56, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 52, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 68, scope: !7)
!34 = !DILocation(line: 37, column: 61, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 43, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 43, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 31, scope: !7)
!45 = !DILocation(line: 49, column: 43, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 43, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 54, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 58, column: 25, scope: !7)
!56 = !DILocation(line: 58, column: 37, scope: !7)
!57 = !DILocation(line: 57, column: 33, scope: !7)
!58 = !DILocation(line: 58, column: 4, scope: !7)
