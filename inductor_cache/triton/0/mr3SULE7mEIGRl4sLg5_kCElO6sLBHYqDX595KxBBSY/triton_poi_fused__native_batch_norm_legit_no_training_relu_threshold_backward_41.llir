; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 6, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 8, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %18 = shl i32 %17, 7, !dbg !16
  %19 = lshr i32 %12, 2, !dbg !17
  %20 = and i32 %19, 31, !dbg !17
  %21 = or disjoint i32 %20, 32, !dbg !17
  %22 = or disjoint i32 %20, 64, !dbg !17
  %23 = or disjoint i32 %20, 96, !dbg !17
  %24 = or disjoint i32 %18, %20, !dbg !18
  %25 = or disjoint i32 %18, %21, !dbg !18
  %26 = or disjoint i32 %18, %22, !dbg !18
  %27 = or disjoint i32 %18, %23, !dbg !18
  %28 = shl i32 %24, 1, !dbg !19
  %29 = shl i32 %25, 1, !dbg !19
  %30 = shl i32 %26, 1, !dbg !19
  %31 = shl i32 %27, 1, !dbg !19
  %32 = shl i32 %15, 12, !dbg !20
  %33 = add i32 %28, %32, !dbg !21
  %34 = add i32 %29, %32, !dbg !21
  %35 = add i32 %30, %32, !dbg !21
  %36 = add i32 %31, %32, !dbg !21
  %37 = sext i32 %33 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %34 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %35 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %36 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #4, !dbg !23
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %16) #4, !dbg !23
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %16) #4, !dbg !23
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #4, !dbg !23
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %1, i1 %16) #4, !dbg !24
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %2, i1 %16) #4, !dbg !25
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !25
  %53 = bitcast i32 %51 to float, !dbg !25
  %54 = bitcast i32 %52 to float, !dbg !25
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %3, i1 %16) #4, !dbg !26
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %4, i1 %16) #4, !dbg !27
  %57 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %58 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %59, 0, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %60, 0, !dbg !29
  br i1 %.not.i, label %66, label %61, !dbg !29

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !29

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !29

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !29
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i3 = icmp eq i32 %71, 0, !dbg !29
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i6 = icmp eq i32 %72, 0, !dbg !29
  br i1 %.not.i3, label %78, label %73, !dbg !29

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %76, label %74, !dbg !29

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %81, label %79, !dbg !29

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !29
  br label %__nv_sqrtf.exit7, !dbg !29

__nv_sqrtf.exit7:                                 ; preds = %74, %76, %79, %81
  %.0.i5 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !29
  %83 = extractvalue { i32, i32 } %48, 1, !dbg !23
  %84 = extractvalue { i32, i32 } %49, 1, !dbg !24
  %85 = extractvalue { i32, i32 } %48, 0, !dbg !23
  %86 = extractvalue { i32, i32 } %49, 0, !dbg !24
  %87 = extractvalue { i32, i32 } %47, 1, !dbg !23
  %88 = extractvalue { i32, i32 } %47, 0, !dbg !23
  %89 = extractvalue { i32, i32 } %46, 1, !dbg !23
  %90 = extractvalue { i32, i32 } %46, 0, !dbg !23
  %91 = extractvalue { i32, i32 } %45, 1, !dbg !23
  %92 = extractvalue { i32, i32 } %45, 0, !dbg !23
  %93 = extractvalue { i32, i32 } %56, 1, !dbg !27
  %94 = extractvalue { i32, i32 } %56, 0, !dbg !27
  %95 = extractvalue { i32, i32 } %55, 1, !dbg !26
  %96 = extractvalue { i32, i32 } %55, 0, !dbg !26
  %97 = shl i32 %12, 2, !dbg !17
  %98 = and i32 %97, 124, !dbg !17
  %99 = or disjoint i32 %18, %98, !dbg !18
  %.lobit1 = lshr i32 %12, 5, !dbg !12
  %100 = and i32 %.lobit1, 3, !dbg !12
  %101 = or disjoint i32 %100, %11, !dbg !13
  %102 = or disjoint i32 %101, 4, !dbg !13
  %103 = icmp slt i32 %102, 8, !dbg !14
  %104 = icmp slt i32 %101, 8, !dbg !14
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !30
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !30
  %107 = shl i32 %101, 12, !dbg !31
  %108 = shl i32 %102, 12, !dbg !31
  %109 = add i32 %99, %107, !dbg !32
  %110 = add i32 %99, %108, !dbg !32
  %111 = sext i32 %109 to i64, !dbg !33
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %111, !dbg !33
  %113 = sext i32 %110 to i64, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !33
  %115 = shl i32 %12, 8, !dbg !34
  %116 = and i32 %115, 768, !dbg !34
  %117 = or disjoint i32 %116, %20, !dbg !34
  %118 = and i32 %97, 508, !dbg !34
  %119 = lshr exact i32 %116, 7, !dbg !34
  %120 = add nuw nsw i32 %119, %117, !dbg !34
  %121 = zext nneg i32 %120 to i64, !dbg !34
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !34
  %123 = or disjoint i32 %117, 128, !dbg !34
  %124 = lshr i32 %123, 7, !dbg !34
  %125 = add nuw nsw i32 %124, %123, !dbg !34
  %126 = zext nneg i32 %125 to i64, !dbg !34
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !34
  %128 = or disjoint i32 %117, 32, !dbg !34
  %129 = add nuw nsw i32 %128, %119, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  %132 = or disjoint i32 %117, 160, !dbg !34
  %133 = lshr i32 %132, 7, !dbg !34
  %134 = add nuw nsw i32 %133, %132, !dbg !34
  %135 = zext nneg i32 %134 to i64, !dbg !34
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !34
  %137 = or disjoint i32 %117, 64, !dbg !34
  %138 = add nuw nsw i32 %137, %119, !dbg !34
  %139 = zext nneg i32 %138 to i64, !dbg !34
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !34
  %141 = or disjoint i32 %117, 192, !dbg !34
  %142 = lshr i32 %141, 7, !dbg !34
  %143 = add nuw nsw i32 %142, %141, !dbg !34
  %144 = zext nneg i32 %143 to i64, !dbg !34
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !34
  %146 = or disjoint i32 %117, 96, !dbg !34
  %147 = add nuw nsw i32 %146, %119, !dbg !34
  %148 = zext nneg i32 %147 to i64, !dbg !34
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %148, !dbg !34
  %150 = or disjoint i32 %117, 224, !dbg !34
  %151 = lshr i32 %150, 7, !dbg !34
  %152 = add nuw nsw i32 %151, %150, !dbg !34
  %153 = zext nneg i32 %152 to i64, !dbg !34
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !34
  %155 = lshr i32 %118, 7, !dbg !34
  %156 = or disjoint i32 %155, %118, !dbg !34
  %157 = zext nneg i32 %156 to i64, !dbg !34
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %157, !dbg !34
  %159 = or disjoint i32 %118, 1, !dbg !34
  %160 = add nuw nsw i32 %159, %155, !dbg !34
  %161 = zext nneg i32 %160 to i64, !dbg !34
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %161, !dbg !34
  %163 = or disjoint i32 %118, 2, !dbg !34
  %164 = add nuw nsw i32 %163, %155, !dbg !34
  %165 = zext nneg i32 %164 to i64, !dbg !34
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !34
  %167 = or disjoint i32 %118, 3, !dbg !34
  %168 = add nuw nsw i32 %167, %155, !dbg !34
  %169 = zext nneg i32 %168 to i64, !dbg !34
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %169, !dbg !34
  %171 = or disjoint i32 %118, 512, !dbg !34
  %172 = lshr i32 %171, 7, !dbg !34
  %173 = add nuw nsw i32 %172, %171, !dbg !34
  %174 = zext nneg i32 %173 to i64, !dbg !34
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %174, !dbg !34
  %176 = or disjoint i32 %118, 513, !dbg !34
  %177 = lshr i32 %176, 7, !dbg !34
  %178 = add nuw nsw i32 %177, %176, !dbg !34
  %179 = zext nneg i32 %178 to i64, !dbg !34
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %179, !dbg !34
  %181 = or disjoint i32 %118, 514, !dbg !34
  %182 = lshr i32 %181, 7, !dbg !34
  %183 = add nuw nsw i32 %182, %181, !dbg !34
  %184 = zext nneg i32 %183 to i64, !dbg !34
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !34
  %186 = or disjoint i32 %118, 515, !dbg !34
  %187 = lshr i32 %186, 7, !dbg !34
  %188 = add nuw nsw i32 %187, %186, !dbg !34
  %189 = zext nneg i32 %188 to i64, !dbg !34
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %189, !dbg !34
  %191 = getelementptr i1, ptr addrspace(1) %6, i64 %37, !dbg !35
  %192 = getelementptr i1, ptr addrspace(1) %6, i64 %39, !dbg !35
  %193 = getelementptr i1, ptr addrspace(1) %6, i64 %41, !dbg !35
  %194 = getelementptr i1, ptr addrspace(1) %6, i64 %43, !dbg !35
  %195 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !24
  %196 = insertelement <2 x i32> %195, i32 %84, i64 1, !dbg !24
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !24
  %198 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !23
  %199 = insertelement <2 x i32> %198, i32 %91, i64 1, !dbg !23
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !23
  %201 = fsub <2 x float> %200, %197, !dbg !36
  %202 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !27
  %203 = insertelement <2 x i32> %202, i32 %93, i64 1, !dbg !27
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !27
  %205 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !26
  %206 = insertelement <2 x i32> %205, i32 %95, i64 1, !dbg !26
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !26
  %208 = insertelement <2 x float> poison, float %105, i64 0, !dbg !37
  %209 = insertelement <2 x float> %208, float %106, i64 1, !dbg !37
  %210 = fmul <2 x float> %201, %209, !dbg !37
  %211 = fmul <2 x float> %210, %207, !dbg !38
  %212 = fadd <2 x float> %211, %204, !dbg !39
  %213 = fcmp olt <2 x float> %212, zeroinitializer, !dbg !40
  %214 = select <2 x i1> %213, <2 x float> zeroinitializer, <2 x float> %212, !dbg !44
  %215 = fcmp ole <2 x float> %214, zeroinitializer, !dbg !45
  %216 = extractelement <2 x float> %214, i64 0, !dbg !34
  %217 = bitcast float %216 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %217, i1 true) #4, !dbg !34
  %218 = extractelement <2 x float> %214, i64 1, !dbg !34
  %219 = bitcast float %218 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %219, i1 true) #4, !dbg !34
  %220 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !23
  %221 = insertelement <2 x i32> %220, i32 %89, i64 1, !dbg !23
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !23
  %223 = fsub <2 x float> %222, %197, !dbg !36
  %224 = fmul <2 x float> %223, %209, !dbg !37
  %225 = fmul <2 x float> %224, %207, !dbg !38
  %226 = fadd <2 x float> %225, %204, !dbg !39
  %227 = fcmp olt <2 x float> %226, zeroinitializer, !dbg !40
  %228 = select <2 x i1> %227, <2 x float> zeroinitializer, <2 x float> %226, !dbg !44
  %229 = fcmp ole <2 x float> %228, zeroinitializer, !dbg !45
  %230 = extractelement <2 x float> %228, i64 0, !dbg !34
  %231 = bitcast float %230 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %231, i1 true) #4, !dbg !34
  %232 = extractelement <2 x float> %228, i64 1, !dbg !34
  %233 = bitcast float %232 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %233, i1 true) #4, !dbg !34
  %234 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !23
  %235 = insertelement <2 x i32> %234, i32 %87, i64 1, !dbg !23
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !23
  %237 = fsub <2 x float> %236, %197, !dbg !36
  %238 = fmul <2 x float> %237, %209, !dbg !37
  %239 = fmul <2 x float> %238, %207, !dbg !38
  %240 = fadd <2 x float> %239, %204, !dbg !39
  %241 = fcmp olt <2 x float> %240, zeroinitializer, !dbg !40
  %242 = select <2 x i1> %241, <2 x float> zeroinitializer, <2 x float> %240, !dbg !44
  %243 = fcmp ole <2 x float> %242, zeroinitializer, !dbg !45
  %244 = extractelement <2 x float> %242, i64 0, !dbg !34
  %245 = bitcast float %244 to <1 x i32>, !dbg !34
  %246 = extractelement <2 x float> %242, i64 1, !dbg !34
  %247 = bitcast float %246 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %245, i1 true) #4, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %247, i1 true) #4, !dbg !34
  %248 = insertelement <2 x i32> poison, i32 %85, i64 0, !dbg !23
  %249 = insertelement <2 x i32> %248, i32 %83, i64 1, !dbg !23
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !23
  %251 = fsub <2 x float> %250, %197, !dbg !36
  %252 = fmul <2 x float> %251, %209, !dbg !37
  %253 = fmul <2 x float> %252, %207, !dbg !38
  %254 = fadd <2 x float> %253, %204, !dbg !39
  %255 = fcmp olt <2 x float> %254, zeroinitializer, !dbg !40
  %256 = select <2 x i1> %255, <2 x float> zeroinitializer, <2 x float> %254, !dbg !44
  %257 = fcmp ole <2 x float> %256, zeroinitializer, !dbg !45
  %258 = extractelement <2 x float> %256, i64 0, !dbg !34
  %259 = bitcast float %258 to <1 x i32>, !dbg !34
  %260 = extractelement <2 x float> %256, i64 1, !dbg !34
  %261 = bitcast float %260 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %259, i1 true) #4, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %261, i1 true) #4, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %262 = load i32, ptr addrspace(3) %158, align 4, !dbg !34
  %263 = load i32, ptr addrspace(3) %162, align 4, !dbg !34
  %264 = load i32, ptr addrspace(3) %166, align 4, !dbg !34
  %265 = load i32, ptr addrspace(3) %170, align 4, !dbg !34
  %266 = load i32, ptr addrspace(3) %175, align 4, !dbg !34
  %267 = load i32, ptr addrspace(3) %180, align 4, !dbg !34
  %268 = load i32, ptr addrspace(3) %185, align 4, !dbg !34
  %269 = load i32, ptr addrspace(3) %190, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %112, i1 %104) #4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %266, i32 %267, i32 %268, i32 %269, ptr addrspace(1) %114, i1 %103) #4, !dbg !34
  %270 = zext <2 x i1> %215 to <2 x i8>, !dbg !46
  %271 = bitcast <2 x i8> %270 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %271, ptr addrspace(1) %191, i1 %16) #4, !dbg !46
  %272 = zext <2 x i1> %229 to <2 x i8>, !dbg !46
  %273 = bitcast <2 x i8> %272 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %273, ptr addrspace(1) %192, i1 %16) #4, !dbg !46
  %274 = zext <2 x i1> %243 to <2 x i8>, !dbg !46
  %275 = bitcast <2 x i8> %274 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %275, ptr addrspace(1) %193, i1 %16) #4, !dbg !46
  %276 = zext <2 x i1> %257 to <2 x i8>, !dbg !46
  %277 = bitcast <2 x i8> %276 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %277, ptr addrspace(1) %194, i1 %16) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm2bzjaawz4kie6xaips5j6hqukrgmbf37w3n7lkja33zonu4o42.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 52, column: 35, scope: !7)
!32 = !DILocation(line: 52, column: 30, scope: !7)
!33 = !DILocation(line: 52, column: 25, scope: !7)
!34 = !DILocation(line: 52, column: 47, scope: !7)
!35 = !DILocation(line: 53, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 49, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 51, column: 21, scope: !7)
!46 = !DILocation(line: 53, column: 54, scope: !7)
!47 = !DILocation(line: 53, column: 4, scope: !7)
