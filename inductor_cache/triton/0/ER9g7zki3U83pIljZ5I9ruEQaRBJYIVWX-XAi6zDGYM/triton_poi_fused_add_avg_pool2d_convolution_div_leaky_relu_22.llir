; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 512, !dbg !14
  %14 = mul i32 %13, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = sdiv i32 %12, 512, !dbg !14
  %16 = srem i32 %13, 16, !dbg !16
  %17 = srem i32 %15, 16, !dbg !16
  %18 = sdiv i32 %11, 8192, !dbg !17
  %19 = sdiv i32 %12, 8192, !dbg !17
  %20 = shl nsw i32 %16, 10, !dbg !18
  %21 = shl nsw i32 %17, 10, !dbg !18
  %22 = shl i32 %18, 15, !dbg !19
  %23 = shl i32 %19, 15, !dbg !19
  %24 = add i32 %22, %.decomposed, !dbg !20
  %25 = add i32 %24, %20, !dbg !21
  %26 = add i32 %23, %.decomposed, !dbg !20
  %27 = add i32 %26, %21, !dbg !21
  %28 = sext i32 %25 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = add i32 %24, 512, !dbg !24
  %43 = add i32 %42, %20, !dbg !25
  %44 = add i32 %26, 512, !dbg !24
  %45 = add i32 %44, %21, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !26
  %48 = sext i32 %45 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %60 = add i32 %24, 16384, !dbg !28
  %61 = add i32 %60, %20, !dbg !29
  %62 = add i32 %26, 16384, !dbg !28
  %63 = add i32 %62, %21, !dbg !29
  %64 = sext i32 %61 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !30
  %66 = sext i32 %63 to i64, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !31
  %78 = add i32 %24, 16896, !dbg !32
  %79 = add i32 %78, %20, !dbg !33
  %80 = add i32 %26, 16896, !dbg !32
  %81 = add i32 %80, %21, !dbg !33
  %82 = sext i32 %79 to i64, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !34
  %84 = sext i32 %81 to i64, !dbg !34
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !34
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !35
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !35
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 true) #1, !dbg !35
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !35
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !35
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !35
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !35
  %96 = sext i32 %11 to i64, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !36
  %98 = sext i32 %12 to i64, !dbg !36
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !36
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #1, !dbg !37
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !37
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !37
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !37
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !37
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !37
  %110 = sext i32 %.decomposed to i64, !dbg !38
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !38
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !39
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !39
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !39
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !39
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !39
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !39
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !39
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !39
  %122 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !23
  %123 = insertelement <8 x i32> %122, i32 %40, i64 1, !dbg !23
  %124 = insertelement <8 x i32> %123, i32 %39, i64 2, !dbg !23
  %125 = insertelement <8 x i32> %124, i32 %38, i64 3, !dbg !23
  %126 = insertelement <8 x i32> %125, i32 %36, i64 4, !dbg !23
  %127 = insertelement <8 x i32> %126, i32 %35, i64 5, !dbg !23
  %128 = insertelement <8 x i32> %127, i32 %34, i64 6, !dbg !23
  %129 = insertelement <8 x i32> %128, i32 %33, i64 7, !dbg !23
  %130 = bitcast <8 x i32> %129 to <8 x float>, !dbg !23
  %131 = insertelement <8 x i32> poison, i32 %59, i64 0, !dbg !27
  %132 = insertelement <8 x i32> %131, i32 %58, i64 1, !dbg !27
  %133 = insertelement <8 x i32> %132, i32 %57, i64 2, !dbg !27
  %134 = insertelement <8 x i32> %133, i32 %56, i64 3, !dbg !27
  %135 = insertelement <8 x i32> %134, i32 %54, i64 4, !dbg !27
  %136 = insertelement <8 x i32> %135, i32 %53, i64 5, !dbg !27
  %137 = insertelement <8 x i32> %136, i32 %52, i64 6, !dbg !27
  %138 = insertelement <8 x i32> %137, i32 %51, i64 7, !dbg !27
  %139 = bitcast <8 x i32> %138 to <8 x float>, !dbg !27
  %140 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !31
  %141 = insertelement <8 x i32> %140, i32 %76, i64 1, !dbg !31
  %142 = insertelement <8 x i32> %141, i32 %75, i64 2, !dbg !31
  %143 = insertelement <8 x i32> %142, i32 %74, i64 3, !dbg !31
  %144 = insertelement <8 x i32> %143, i32 %72, i64 4, !dbg !31
  %145 = insertelement <8 x i32> %144, i32 %71, i64 5, !dbg !31
  %146 = insertelement <8 x i32> %145, i32 %70, i64 6, !dbg !31
  %147 = insertelement <8 x i32> %146, i32 %69, i64 7, !dbg !31
  %148 = bitcast <8 x i32> %147 to <8 x float>, !dbg !31
  %149 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !35
  %150 = insertelement <8 x i32> %149, i32 %94, i64 1, !dbg !35
  %151 = insertelement <8 x i32> %150, i32 %93, i64 2, !dbg !35
  %152 = insertelement <8 x i32> %151, i32 %92, i64 3, !dbg !35
  %153 = insertelement <8 x i32> %152, i32 %90, i64 4, !dbg !35
  %154 = insertelement <8 x i32> %153, i32 %89, i64 5, !dbg !35
  %155 = insertelement <8 x i32> %154, i32 %88, i64 6, !dbg !35
  %156 = insertelement <8 x i32> %155, i32 %87, i64 7, !dbg !35
  %157 = bitcast <8 x i32> %156 to <8 x float>, !dbg !35
  %158 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !37
  %159 = insertelement <8 x i32> %158, i32 %108, i64 1, !dbg !37
  %160 = insertelement <8 x i32> %159, i32 %107, i64 2, !dbg !37
  %161 = insertelement <8 x i32> %160, i32 %106, i64 3, !dbg !37
  %162 = insertelement <8 x i32> %161, i32 %104, i64 4, !dbg !37
  %163 = insertelement <8 x i32> %162, i32 %103, i64 5, !dbg !37
  %164 = insertelement <8 x i32> %163, i32 %102, i64 6, !dbg !37
  %165 = insertelement <8 x i32> %164, i32 %101, i64 7, !dbg !37
  %166 = bitcast <8 x i32> %165 to <8 x float>, !dbg !37
  %167 = insertelement <8 x i32> poison, i32 %121, i64 0, !dbg !39
  %168 = insertelement <8 x i32> %167, i32 %120, i64 1, !dbg !39
  %169 = insertelement <8 x i32> %168, i32 %119, i64 2, !dbg !39
  %170 = insertelement <8 x i32> %169, i32 %118, i64 3, !dbg !39
  %171 = insertelement <8 x i32> %170, i32 %116, i64 4, !dbg !39
  %172 = insertelement <8 x i32> %171, i32 %115, i64 5, !dbg !39
  %173 = insertelement <8 x i32> %172, i32 %114, i64 6, !dbg !39
  %174 = insertelement <8 x i32> %173, i32 %113, i64 7, !dbg !39
  %175 = bitcast <8 x i32> %174 to <8 x float>, !dbg !39
  %176 = fadd <8 x float> %130, %139, !dbg !40
  %177 = fadd <8 x float> %176, %148, !dbg !41
  %178 = fadd <8 x float> %177, %157, !dbg !42
  %179 = fmul <8 x float> %178, splat (float 2.500000e-01), !dbg !43
  %180 = fadd <8 x float> %166, %175, !dbg !44
  %181 = fadd <8 x float> %179, %180, !dbg !45
  %182 = fmul <8 x float> %181, splat (float 0x3FE6A09E60000000), !dbg !46
  %183 = fcmp ogt <8 x float> %182, zeroinitializer, !dbg !47
  %184 = extractelement <8 x float> %182, i64 7, !dbg !48
  %185 = fmul float %184, 0x3FC99999A0000000, !dbg !49
  %186 = extractelement <8 x float> %182, i64 6, !dbg !48
  %187 = fmul float %186, 0x3FC99999A0000000, !dbg !49
  %188 = extractelement <8 x float> %182, i64 5, !dbg !48
  %189 = fmul float %188, 0x3FC99999A0000000, !dbg !49
  %190 = extractelement <8 x float> %182, i64 4, !dbg !48
  %191 = fmul float %190, 0x3FC99999A0000000, !dbg !49
  %192 = extractelement <8 x float> %182, i64 3, !dbg !48
  %193 = fmul float %192, 0x3FC99999A0000000, !dbg !49
  %194 = extractelement <8 x float> %182, i64 2, !dbg !48
  %195 = fmul float %194, 0x3FC99999A0000000, !dbg !49
  %196 = extractelement <8 x float> %182, i64 1, !dbg !48
  %197 = fmul float %196, 0x3FC99999A0000000, !dbg !49
  %198 = extractelement <8 x float> %182, i64 0, !dbg !48
  %199 = fmul float %198, 0x3FC99999A0000000, !dbg !49
  %200 = extractelement <8 x i1> %183, i64 7, !dbg !50
  %201 = select i1 %200, float %184, float %185, !dbg !50
  %202 = extractelement <8 x i1> %183, i64 6, !dbg !50
  %203 = select i1 %202, float %186, float %187, !dbg !50
  %204 = extractelement <8 x i1> %183, i64 5, !dbg !50
  %205 = select i1 %204, float %188, float %189, !dbg !50
  %206 = extractelement <8 x i1> %183, i64 4, !dbg !50
  %207 = select i1 %206, float %190, float %191, !dbg !50
  %208 = extractelement <8 x i1> %183, i64 3, !dbg !50
  %209 = select i1 %208, float %192, float %193, !dbg !50
  %210 = extractelement <8 x i1> %183, i64 2, !dbg !50
  %211 = select i1 %210, float %194, float %195, !dbg !50
  %212 = extractelement <8 x i1> %183, i64 1, !dbg !50
  %213 = select i1 %212, float %196, float %197, !dbg !50
  %214 = extractelement <8 x i1> %183, i64 0, !dbg !50
  %215 = select i1 %214, float %198, float %199, !dbg !50
  %216 = bitcast float %184 to i32, !dbg !48
  %217 = bitcast float %186 to i32, !dbg !48
  %218 = bitcast float %188 to i32, !dbg !48
  %219 = bitcast float %190 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %216, i32 %217, i32 %218, i32 %219, ptr addrspace(1) %97, i1 true) #1, !dbg !48
  %220 = bitcast float %192 to i32, !dbg !48
  %221 = bitcast float %194 to i32, !dbg !48
  %222 = bitcast float %196 to i32, !dbg !48
  %223 = bitcast float %198 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %220, i32 %221, i32 %222, i32 %223, ptr addrspace(1) %99, i1 true) #1, !dbg !48
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !51
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !51
  %226 = bitcast float %201 to i32, !dbg !52
  %227 = bitcast float %203 to i32, !dbg !52
  %228 = bitcast float %205 to i32, !dbg !52
  %229 = bitcast float %207 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %227, i32 %228, i32 %229, ptr addrspace(1) %224, i1 true) #1, !dbg !52
  %230 = bitcast float %209 to i32, !dbg !52
  %231 = bitcast float %211 to i32, !dbg !52
  %232 = bitcast float %213 to i32, !dbg !52
  %233 = bitcast float %215 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %230, i32 %231, i32 %232, i32 %233, ptr addrspace(1) %225, i1 true) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmd73jwr7r2ouq2hidy7hubmf7ogbdqvh364yaie6z42pycixp5t.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22", linkageName: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 51, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 56, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 62, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 53, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 64, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 53, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 64, scope: !7)
!36 = !DILocation(line: 32, column: 34, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 19, scope: !7)
!45 = !DILocation(line: 40, column: 19, scope: !7)
!46 = !DILocation(line: 42, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 48, column: 40, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 35, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
