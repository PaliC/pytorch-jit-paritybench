; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = icmp slt i32 %16, 2912, !dbg !14
  %22 = icmp slt i32 %17, 2912, !dbg !14
  %23 = icmp slt i32 %18, 2912, !dbg !14
  %24 = icmp slt i32 %19, 2912, !dbg !14
  %25 = icmp slt i32 %20, 2912, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = or disjoint i32 %27, %15, !dbg !17
  %29 = or disjoint i32 %27, %10, !dbg !17
  %30 = or disjoint i32 %27, %11, !dbg !17
  %31 = or disjoint i32 %27, %12, !dbg !17
  %32 = or disjoint i32 %27, %13, !dbg !17
  %.frozen = freeze i32 %20, !dbg !18
  %33 = sdiv i32 %.frozen, 728, !dbg !18
  %34 = mul i32 %33, 728, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %16, 12, !dbg !20
  %36 = shl i32 %17, 12, !dbg !20
  %37 = shl i32 %18, 12, !dbg !20
  %38 = shl i32 %19, 12, !dbg !20
  %39 = add i32 %28, %35, !dbg !21
  %40 = add i32 %28, %36, !dbg !21
  %41 = add i32 %28, %37, !dbg !21
  %42 = add i32 %28, %38, !dbg !21
  %43 = sext i32 %39 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %40 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %41 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %42 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %21) #2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %23) #2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !23
  %74 = bitcast i32 %70 to float, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %24) #2, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !23
  %83 = bitcast i32 %79 to float, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = fcmp olt float %56, 0.000000e+00, !dbg !24
  %88 = fcmp olt float %57, 0.000000e+00, !dbg !24
  %89 = fcmp olt float %58, 0.000000e+00, !dbg !24
  %90 = fcmp olt float %59, 0.000000e+00, !dbg !24
  %91 = fcmp olt float %65, 0.000000e+00, !dbg !24
  %92 = fcmp olt float %66, 0.000000e+00, !dbg !24
  %93 = fcmp olt float %67, 0.000000e+00, !dbg !24
  %94 = fcmp olt float %68, 0.000000e+00, !dbg !24
  %95 = fcmp olt float %74, 0.000000e+00, !dbg !24
  %96 = fcmp olt float %75, 0.000000e+00, !dbg !24
  %97 = fcmp olt float %76, 0.000000e+00, !dbg !24
  %98 = fcmp olt float %77, 0.000000e+00, !dbg !24
  %99 = fcmp olt float %83, 0.000000e+00, !dbg !24
  %100 = fcmp olt float %84, 0.000000e+00, !dbg !24
  %101 = fcmp olt float %85, 0.000000e+00, !dbg !24
  %102 = fcmp olt float %86, 0.000000e+00, !dbg !24
  %103 = select i1 %87, float 0.000000e+00, float %56, !dbg !28
  %104 = select i1 %88, float 0.000000e+00, float %57, !dbg !28
  %105 = select i1 %89, float 0.000000e+00, float %58, !dbg !28
  %106 = select i1 %90, float 0.000000e+00, float %59, !dbg !28
  %107 = select i1 %91, float 0.000000e+00, float %65, !dbg !28
  %108 = select i1 %92, float 0.000000e+00, float %66, !dbg !28
  %109 = select i1 %93, float 0.000000e+00, float %67, !dbg !28
  %110 = select i1 %94, float 0.000000e+00, float %68, !dbg !28
  %111 = select i1 %95, float 0.000000e+00, float %74, !dbg !28
  %112 = select i1 %96, float 0.000000e+00, float %75, !dbg !28
  %113 = select i1 %97, float 0.000000e+00, float %76, !dbg !28
  %114 = select i1 %98, float 0.000000e+00, float %77, !dbg !28
  %115 = select i1 %99, float 0.000000e+00, float %83, !dbg !28
  %116 = select i1 %100, float 0.000000e+00, float %84, !dbg !28
  %117 = select i1 %101, float 0.000000e+00, float %85, !dbg !28
  %118 = select i1 %102, float 0.000000e+00, float %86, !dbg !28
  %119 = mul i32 %29, 728, !dbg !29
  %120 = mul i32 %30, 728, !dbg !29
  %121 = mul i32 %31, 728, !dbg !29
  %122 = mul i32 %32, 728, !dbg !29
  %123 = mul i32 %33, 2981888, !dbg !30
  %124 = add i32 %123, %.decomposed, !dbg !31
  %125 = add i32 %124, %119, !dbg !32
  %126 = add i32 %124, %120, !dbg !32
  %127 = add i32 %124, %121, !dbg !32
  %128 = add i32 %124, %122, !dbg !32
  %129 = sext i32 %125 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !33
  %131 = sext i32 %126 to i64, !dbg !33
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !33
  %133 = sext i32 %127 to i64, !dbg !33
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !33
  %135 = sext i32 %128 to i64, !dbg !33
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !33
  %137 = shl i32 %8, 8, !dbg !34
  %138 = and i32 %137, 3840, !dbg !34
  %139 = or disjoint i32 %138, %10, !dbg !34
  %140 = and i32 %14, 1020, !dbg !34
  %141 = lshr exact i32 %138, 2, !dbg !34
  %142 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %141, !dbg !34
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %139, !dbg !34
  %144 = bitcast float %103 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !34
  %145 = or disjoint i32 %139, 64, !dbg !34
  %146 = lshr i32 %145, 4, !dbg !34
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !34
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !34
  %149 = bitcast float %104 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !34
  %150 = or disjoint i32 %139, 128, !dbg !34
  %151 = lshr i32 %150, 4, !dbg !34
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !34
  %153 = getelementptr float, ptr addrspace(3) %152, i32 %150, !dbg !34
  %154 = bitcast float %105 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !34
  %155 = or disjoint i32 %139, 192, !dbg !34
  %156 = lshr i32 %155, 4, !dbg !34
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !34
  %158 = getelementptr float, ptr addrspace(3) %157, i32 %155, !dbg !34
  %159 = bitcast float %106 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !34
  %160 = or disjoint i32 %139, 16, !dbg !34
  %161 = getelementptr float, ptr addrspace(3) %142, i32 %160, !dbg !34
  %162 = bitcast float %107 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !34
  %163 = or disjoint i32 %139, 80, !dbg !34
  %164 = lshr i32 %163, 4, !dbg !34
  %165 = and i32 %164, 244, !dbg !34
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !34
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %163, !dbg !34
  %168 = bitcast float %108 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !34
  %169 = or disjoint i32 %139, 144, !dbg !34
  %170 = lshr i32 %169, 4, !dbg !34
  %171 = and i32 %170, 248, !dbg !34
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !34
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !34
  %174 = bitcast float %109 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !34
  %175 = or disjoint i32 %139, 208, !dbg !34
  %176 = lshr i32 %175, 4, !dbg !34
  %177 = and i32 %176, 252, !dbg !34
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !34
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %175, !dbg !34
  %180 = bitcast float %110 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !34
  %181 = or disjoint i32 %139, 32, !dbg !34
  %182 = getelementptr float, ptr addrspace(3) %142, i32 %181, !dbg !34
  %183 = bitcast float %111 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !34
  %184 = or disjoint i32 %139, 96, !dbg !34
  %185 = lshr i32 %184, 4, !dbg !34
  %186 = and i32 %185, 244, !dbg !34
  %187 = getelementptr float, ptr addrspace(3) @global_smem, i32 %186, !dbg !34
  %188 = getelementptr float, ptr addrspace(3) %187, i32 %184, !dbg !34
  %189 = bitcast float %112 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !34
  %190 = or disjoint i32 %139, 160, !dbg !34
  %191 = lshr i32 %190, 4, !dbg !34
  %192 = and i32 %191, 248, !dbg !34
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !34
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %190, !dbg !34
  %195 = bitcast float %113 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !34
  %196 = or disjoint i32 %139, 224, !dbg !34
  %197 = lshr i32 %196, 4, !dbg !34
  %198 = and i32 %197, 252, !dbg !34
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %198, !dbg !34
  %200 = getelementptr float, ptr addrspace(3) %199, i32 %196, !dbg !34
  %201 = bitcast float %114 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !34
  %202 = or disjoint i32 %139, 48, !dbg !34
  %203 = getelementptr float, ptr addrspace(3) %142, i32 %202, !dbg !34
  %204 = bitcast float %115 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !34
  %205 = or disjoint i32 %139, 112, !dbg !34
  %206 = lshr i32 %205, 4, !dbg !34
  %207 = and i32 %206, 244, !dbg !34
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !34
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !34
  %210 = bitcast float %116 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !34
  %211 = or disjoint i32 %139, 176, !dbg !34
  %212 = lshr i32 %211, 4, !dbg !34
  %213 = and i32 %212, 248, !dbg !34
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !34
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %211, !dbg !34
  %216 = bitcast float %117 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !34
  %217 = or disjoint i32 %139, 240, !dbg !34
  %218 = lshr i32 %217, 4, !dbg !34
  %219 = and i32 %218, 252, !dbg !34
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !34
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %217, !dbg !34
  %222 = bitcast float %118 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %223 = lshr i32 %14, 4, !dbg !34
  %224 = and i32 %223, 60, !dbg !34
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !34
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %140, !dbg !34
  %227 = or disjoint i32 %140, 1024, !dbg !34
  %228 = lshr i32 %227, 4, !dbg !34
  %229 = and i32 %228, 124, !dbg !34
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !34
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %227, !dbg !34
  %232 = load <4 x i32>, ptr addrspace(3) %231, align 16, !dbg !34
  %233 = or disjoint i32 %140, 2048, !dbg !34
  %234 = lshr i32 %233, 4, !dbg !34
  %235 = and i32 %234, 188, !dbg !34
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !34
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %233, !dbg !34
  %238 = load <4 x i32>, ptr addrspace(3) %237, align 16, !dbg !34
  %239 = or disjoint i32 %140, 3072, !dbg !34
  %240 = lshr i32 %239, 4, !dbg !34
  %241 = and i32 %240, 252, !dbg !34
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !34
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %239, !dbg !34
  %244 = load <4 x i32>, ptr addrspace(3) %243, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %226, align 16, !dbg !34
  %245 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 4, !dbg !34
  %.extract16 = load i32, ptr addrspace(3) %245, align 4, !dbg !34
  %246 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 8, !dbg !34
  %.extract17 = load i32, ptr addrspace(3) %246, align 8, !dbg !34
  %247 = getelementptr inbounds i8, ptr addrspace(3) %226, i32 12, !dbg !34
  %.extract18 = load i32, ptr addrspace(3) %247, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %130, i1 %25) #2, !dbg !34
  %.extract19 = extractelement <4 x i32> %232, i64 0, !dbg !34
  %.extract20 = extractelement <4 x i32> %232, i64 1, !dbg !34
  %.extract21 = extractelement <4 x i32> %232, i64 2, !dbg !34
  %.extract22 = extractelement <4 x i32> %232, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %132, i1 %25) #2, !dbg !34
  %.extract23 = extractelement <4 x i32> %238, i64 0, !dbg !34
  %.extract24 = extractelement <4 x i32> %238, i64 1, !dbg !34
  %.extract25 = extractelement <4 x i32> %238, i64 2, !dbg !34
  %.extract26 = extractelement <4 x i32> %238, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %134, i1 %25) #2, !dbg !34
  %.extract27 = extractelement <4 x i32> %244, i64 0, !dbg !34
  %.extract28 = extractelement <4 x i32> %244, i64 1, !dbg !34
  %.extract29 = extractelement <4 x i32> %244, i64 2, !dbg !34
  %.extract30 = extractelement <4 x i32> %244, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %136, i1 %25) #2, !dbg !34
  %248 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !35
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !35
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !35
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !35
  %252 = bitcast float %103 to i32, !dbg !36
  %253 = bitcast float %104 to i32, !dbg !36
  %254 = bitcast float %105 to i32, !dbg !36
  %255 = bitcast float %106 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %252, i32 %253, i32 %254, i32 %255, ptr addrspace(1) %248, i1 %21) #2, !dbg !36
  %256 = bitcast float %107 to i32, !dbg !36
  %257 = bitcast float %108 to i32, !dbg !36
  %258 = bitcast float %109 to i32, !dbg !36
  %259 = bitcast float %110 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %249, i1 %22) #2, !dbg !36
  %260 = bitcast float %111 to i32, !dbg !36
  %261 = bitcast float %112 to i32, !dbg !36
  %262 = bitcast float %113 to i32, !dbg !36
  %263 = bitcast float %114 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %250, i1 %23) #2, !dbg !36
  %264 = bitcast float %115 to i32, !dbg !36
  %265 = bitcast float %116 to i32, !dbg !36
  %266 = bitcast float %117 to i32, !dbg !36
  %267 = bitcast float %118 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %264, i32 %265, i32 %266, i32 %267, ptr addrspace(1) %251, i1 %24) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcof3gaunu5ylnxoaek7ds6miywrb2a57hmj6ec4mi2nwsfa3sm.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_0", linkageName: "triton_poi_fused_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 47, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 39, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 58, scope: !7)
!35 = !DILocation(line: 36, column: 25, scope: !7)
!36 = !DILocation(line: 36, column: 46, scope: !7)
!37 = !DILocation(line: 36, column: 4, scope: !7)
