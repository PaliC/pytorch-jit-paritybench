; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 1024, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 511, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %11 = sdiv i32 %.frozen, 256, !dbg !13
  %12 = shl i32 %11, 20, !dbg !14
  %13 = mul i32 %11, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = add i32 %12, %.decomposed
  %15 = shl nuw nsw i32 %10, 8, !dbg !16
  %16 = shl nuw nsw i32 %10, 8, !dbg !16
  %17 = or disjoint i32 %16, 131072, !dbg !16
  %18 = shl nuw nsw i32 %10, 8, !dbg !16
  %19 = or disjoint i32 %18, 262144, !dbg !16
  %20 = shl nuw nsw i32 %10, 8, !dbg !16
  %21 = or disjoint i32 %20, 393216, !dbg !16
  %22 = add i32 %14, %15, !dbg !17
  %23 = add i32 %14, %17, !dbg !17
  %24 = add i32 %14, %19, !dbg !17
  %25 = add i32 %14, %21, !dbg !17
  %26 = sext i32 %22 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = sext i32 %23 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !18
  %30 = sext i32 %24 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !18
  %32 = sext i32 %25 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = bitcast i32 %36 to float, !dbg !19
  %40 = bitcast i32 %35 to float, !dbg !19
  %41 = bitcast i32 %34 to float, !dbg !19
  %42 = select i1 %8, float %41, float 0.000000e+00, !dbg !20
  %43 = select i1 %8, float %40, float 0.000000e+00, !dbg !20
  %44 = select i1 %8, float %39, float 0.000000e+00, !dbg !20
  %45 = select i1 %8, float %38, float 0.000000e+00, !dbg !20
  %46 = shl nuw nsw i32 %10, 8, !dbg !16
  %47 = or disjoint i32 %46, 524288, !dbg !16
  %48 = shl nuw nsw i32 %10, 8, !dbg !16
  %49 = or disjoint i32 %48, 655360, !dbg !16
  %50 = shl nuw nsw i32 %10, 8, !dbg !16
  %51 = or disjoint i32 %50, 786432, !dbg !16
  %52 = shl nuw nsw i32 %10, 8, !dbg !16
  %53 = or disjoint i32 %52, 917504, !dbg !16
  %54 = add i32 %14, %47, !dbg !17
  %55 = add i32 %14, %49, !dbg !17
  %56 = add i32 %14, %51, !dbg !17
  %57 = add i32 %14, %53, !dbg !17
  %58 = sext i32 %54 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %55 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = sext i32 %56 to i64, !dbg !18
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !18
  %64 = sext i32 %57 to i64, !dbg !18
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !18
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %70 = bitcast i32 %69 to float, !dbg !19
  %71 = bitcast i32 %68 to float, !dbg !19
  %72 = bitcast i32 %67 to float, !dbg !19
  %73 = bitcast i32 %66 to float, !dbg !19
  %74 = fsub float %73, %42, !dbg !21
  %75 = fsub float %72, %43, !dbg !21
  %76 = fsub float %71, %44, !dbg !21
  %77 = fsub float %70, %45, !dbg !21
  %78 = select i1 %8, float 2.000000e+00, float 1.000000e+00, !dbg !25
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %78) #5, !dbg !26
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %78) #5, !dbg !26
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %78) #5, !dbg !26
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %78) #5, !dbg !26
  %83 = fadd float %42, %79, !dbg !27
  %84 = fsub float %73, %83, !dbg !28
  %85 = fmul float %74, %84, !dbg !29
  %86 = fadd float %85, 0.000000e+00, !dbg !30
  %87 = fadd float %43, %80, !dbg !27
  %88 = fsub float %72, %87, !dbg !28
  %89 = fmul float %75, %88, !dbg !29
  %90 = fadd float %89, 0.000000e+00, !dbg !30
  %91 = fadd float %44, %81, !dbg !27
  %92 = fsub float %71, %91, !dbg !28
  %93 = fmul float %76, %92, !dbg !29
  %94 = fadd float %93, 0.000000e+00, !dbg !30
  %95 = fadd float %45, %82, !dbg !27
  %96 = fsub float %70, %95, !dbg !28
  %97 = fmul float %77, %96, !dbg !29
  %98 = fadd float %97, 0.000000e+00, !dbg !30
  %99 = select i1 %8, float %83, float 0.000000e+00, !dbg !20
  %100 = select i1 %8, float %87, float 0.000000e+00, !dbg !20
  %101 = select i1 %8, float %91, float 0.000000e+00, !dbg !20
  %102 = select i1 %8, float %95, float 0.000000e+00, !dbg !20
  %103 = select i1 %8, float %94, float 0.000000e+00, !dbg !31
  %104 = select i1 %8, float %98, float 0.000000e+00, !dbg !31
  %105 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !25
  %106 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !25
  %107 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !25
  %108 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !25
  %109 = lshr i32 %9, 5, !dbg !12
  %110 = and i32 %9, 31, !dbg !12
  %111 = fsub float %100, %99, !dbg !32
  %112 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !35
  %113 = fcmp oeq float %112, 0.000000e+00, !dbg !36
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %112) #5, !dbg !37
  %115 = select i1 %113, float 0.000000e+00, float %114, !dbg !38
  %116 = fmul float %111, %115, !dbg !39
  %117 = fadd float %99, %116, !dbg !40
  %118 = fadd float %86, %90, !dbg !41
  %119 = select i1 %8, float %118, float 0.000000e+00, !dbg !41
  %120 = fmul float %111, %111, !dbg !42
  %121 = fmul float %120, %105, !dbg !43
  %122 = fmul float %121, %115, !dbg !44
  %123 = fadd float %119, %122, !dbg !45
  %124 = fsub float %101, %117, !dbg !32
  %125 = select i1 %8, float 6.000000e+00, float 0.000000e+00, !dbg !35
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !36
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %125) #5, !dbg !37
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !38
  %129 = fmul float %128, %124, !dbg !39
  %130 = fadd float %117, %129, !dbg !40
  %131 = fadd float %103, %123, !dbg !41
  %132 = fmul float %124, %124, !dbg !42
  %133 = fmul float %112, %132, !dbg !43
  %134 = fmul float %128, %133, !dbg !44
  %135 = fadd float %131, %134, !dbg !45
  %136 = fsub float %102, %130, !dbg !32
  %137 = select i1 %8, float 8.000000e+00, float 0.000000e+00, !dbg !35
  %138 = fcmp oeq float %137, 0.000000e+00, !dbg !36
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %137) #5, !dbg !37
  %140 = select i1 %138, float 0.000000e+00, float %139, !dbg !38
  %141 = fmul float %140, %136, !dbg !39
  %142 = fadd float %130, %141, !dbg !40
  %143 = fadd float %104, %135, !dbg !41
  %144 = fmul float %136, %136, !dbg !42
  %145 = fmul float %125, %144, !dbg !43
  %146 = fmul float %140, %145, !dbg !44
  %147 = fadd float %143, %146, !dbg !45
  %148 = bitcast float %142 to i32, !dbg !46
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 16, i32 31), !dbg !46
  %150 = bitcast i32 %149 to float, !dbg !46
  %151 = bitcast float %147 to i32, !dbg !46
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !46
  %153 = bitcast i32 %152 to float, !dbg !46
  %154 = bitcast float %137 to i32, !dbg !46
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !46
  %156 = bitcast i32 %155 to float, !dbg !46
  %157 = fsub float %150, %142, !dbg !32
  %158 = fadd float %137, %156, !dbg !35
  %159 = fcmp oeq float %158, 0.000000e+00, !dbg !36
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float %158) #5, !dbg !37
  %161 = select i1 %159, float 0.000000e+00, float %160, !dbg !38
  %162 = fmul float %161, %157, !dbg !39
  %163 = fadd float %142, %162, !dbg !40
  %164 = fadd float %147, %153, !dbg !41
  %165 = fmul float %157, %157, !dbg !42
  %166 = fmul float %137, %165, !dbg !43
  %167 = fmul float %161, %166, !dbg !44
  %168 = fadd float %164, %167, !dbg !45
  %169 = bitcast float %163 to i32, !dbg !46
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !46
  %171 = bitcast i32 %170 to float, !dbg !46
  %172 = bitcast float %168 to i32, !dbg !46
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 8, i32 31), !dbg !46
  %174 = bitcast i32 %173 to float, !dbg !46
  %175 = bitcast float %158 to i32, !dbg !46
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 8, i32 31), !dbg !46
  %177 = bitcast i32 %176 to float, !dbg !46
  %178 = fsub float %171, %163, !dbg !32
  %179 = fadd float %158, %177, !dbg !35
  %180 = fcmp oeq float %179, 0.000000e+00, !dbg !36
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %179) #5, !dbg !37
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !38
  %183 = fmul float %178, %182, !dbg !39
  %184 = fadd float %163, %183, !dbg !40
  %185 = fadd float %168, %174, !dbg !41
  %186 = fmul float %178, %178, !dbg !42
  %187 = fmul float %158, %186, !dbg !43
  %188 = fmul float %182, %187, !dbg !44
  %189 = fadd float %185, %188, !dbg !45
  %190 = bitcast float %184 to i32, !dbg !46
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 4, i32 31), !dbg !46
  %192 = bitcast i32 %191 to float, !dbg !46
  %193 = bitcast float %189 to i32, !dbg !46
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 4, i32 31), !dbg !46
  %195 = bitcast i32 %194 to float, !dbg !46
  %196 = bitcast float %179 to i32, !dbg !46
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 4, i32 31), !dbg !46
  %198 = bitcast i32 %197 to float, !dbg !46
  %199 = fsub float %192, %184, !dbg !32
  %200 = fadd float %179, %198, !dbg !35
  %201 = fcmp oeq float %200, 0.000000e+00, !dbg !36
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %200) #5, !dbg !37
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !38
  %204 = fmul float %199, %203, !dbg !39
  %205 = fadd float %184, %204, !dbg !40
  %206 = fadd float %189, %195, !dbg !41
  %207 = fmul float %199, %199, !dbg !42
  %208 = fmul float %179, %207, !dbg !43
  %209 = fmul float %203, %208, !dbg !44
  %210 = fadd float %206, %209, !dbg !45
  %211 = bitcast float %205 to i32, !dbg !46
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !46
  %213 = bitcast i32 %212 to float, !dbg !46
  %214 = bitcast float %210 to i32, !dbg !46
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 2, i32 31), !dbg !46
  %216 = bitcast i32 %215 to float, !dbg !46
  %217 = bitcast float %200 to i32, !dbg !46
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 2, i32 31), !dbg !46
  %219 = bitcast i32 %218 to float, !dbg !46
  %220 = fsub float %213, %205, !dbg !32
  %221 = fadd float %200, %219, !dbg !35
  %222 = fcmp oeq float %221, 0.000000e+00, !dbg !36
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %221) #5, !dbg !37
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !38
  %225 = fmul float %220, %224, !dbg !39
  %226 = fadd float %205, %225, !dbg !40
  %227 = fadd float %210, %216, !dbg !41
  %228 = fmul float %220, %220, !dbg !42
  %229 = fmul float %200, %228, !dbg !43
  %230 = fmul float %224, %229, !dbg !44
  %231 = fadd float %227, %230, !dbg !45
  %232 = bitcast float %226 to i32, !dbg !46
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 1, i32 31), !dbg !46
  %234 = bitcast i32 %233 to float, !dbg !46
  %235 = bitcast float %231 to i32, !dbg !46
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 1, i32 31), !dbg !46
  %237 = bitcast i32 %236 to float, !dbg !46
  %238 = bitcast float %221 to i32, !dbg !46
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 1, i32 31), !dbg !46
  %240 = bitcast i32 %239 to float, !dbg !46
  %241 = fsub float %234, %226, !dbg !32
  %242 = fadd float %221, %240, !dbg !35
  %243 = fcmp oeq float %242, 0.000000e+00, !dbg !36
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %242) #5, !dbg !37
  %245 = select i1 %243, float 0.000000e+00, float %244, !dbg !38
  %246 = fmul float %241, %245, !dbg !39
  %247 = fadd float %226, %246, !dbg !40
  %248 = fadd float %231, %237, !dbg !41
  %249 = fmul float %241, %241, !dbg !42
  %250 = fmul float %221, %249, !dbg !43
  %251 = fmul float %245, %250, !dbg !44
  %252 = fadd float %248, %251, !dbg !45
  %253 = icmp eq i32 %110, 0, !dbg !46
  %254 = and i32 %109, 15, !dbg !46
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !46
  %256 = bitcast float %247 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 %253) #5, !dbg !46
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %254, !dbg !46
  %258 = bitcast float %252 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 %253) #5, !dbg !46
  %259 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %254, !dbg !46
  %260 = bitcast float %242 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 %253) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %261 = icmp slt i32 %9, 16, !dbg !46
  %262 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !46
  %263 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %262, i1 %261) #5, !dbg !46
  %264 = bitcast i32 %263 to float, !dbg !46
  %265 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !46
  %266 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %265, i1 %261) #5, !dbg !46
  %267 = bitcast i32 %266 to float, !dbg !46
  %268 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !46
  %269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %261) #5, !dbg !46
  %270 = bitcast i32 %269 to float, !dbg !46
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 8, i32 31), !dbg !46
  %272 = bitcast i32 %271 to float, !dbg !46
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !46
  %274 = bitcast i32 %273 to float, !dbg !46
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 8, i32 31), !dbg !46
  %276 = bitcast i32 %275 to float, !dbg !46
  %277 = fsub float %272, %264, !dbg !32
  %278 = fadd float %270, %276, !dbg !35
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !36
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #5, !dbg !37
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !38
  %282 = fmul float %277, %281, !dbg !39
  %283 = fadd float %282, %264, !dbg !40
  %284 = fadd float %267, %274, !dbg !41
  %285 = fmul float %277, %277, !dbg !42
  %286 = fmul float %285, %270, !dbg !43
  %287 = fmul float %286, %281, !dbg !44
  %288 = fadd float %284, %287, !dbg !45
  %289 = bitcast float %283 to i32, !dbg !46
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !46
  %291 = bitcast i32 %290 to float, !dbg !46
  %292 = bitcast float %288 to i32, !dbg !46
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !46
  %294 = bitcast i32 %293 to float, !dbg !46
  %295 = bitcast float %278 to i32, !dbg !46
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !46
  %297 = bitcast i32 %296 to float, !dbg !46
  %298 = fsub float %291, %283, !dbg !32
  %299 = fadd float %278, %297, !dbg !35
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !36
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #5, !dbg !37
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !38
  %303 = fmul float %298, %302, !dbg !39
  %304 = fadd float %283, %303, !dbg !40
  %305 = fadd float %288, %294, !dbg !41
  %306 = fmul float %298, %298, !dbg !42
  %307 = fmul float %278, %306, !dbg !43
  %308 = fmul float %302, %307, !dbg !44
  %309 = fadd float %305, %308, !dbg !45
  %310 = bitcast float %304 to i32, !dbg !46
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !46
  %312 = bitcast i32 %311 to float, !dbg !46
  %313 = bitcast float %309 to i32, !dbg !46
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !46
  %315 = bitcast i32 %314 to float, !dbg !46
  %316 = bitcast float %299 to i32, !dbg !46
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 2, i32 31), !dbg !46
  %318 = bitcast i32 %317 to float, !dbg !46
  %319 = fsub float %312, %304, !dbg !32
  %320 = fadd float %299, %318, !dbg !35
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !36
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %320) #5, !dbg !37
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !38
  %324 = fmul float %319, %323, !dbg !39
  %325 = fadd float %304, %324, !dbg !40
  %326 = fadd float %309, %315, !dbg !41
  %327 = fmul float %319, %319, !dbg !42
  %328 = fmul float %299, %327, !dbg !43
  %329 = fmul float %323, %328, !dbg !44
  %330 = fadd float %326, %329, !dbg !45
  %331 = bitcast float %325 to i32, !dbg !46
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !46
  %333 = bitcast i32 %332 to float, !dbg !46
  %334 = bitcast float %330 to i32, !dbg !46
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !46
  %336 = bitcast i32 %335 to float, !dbg !46
  %337 = bitcast float %320 to i32, !dbg !46
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !46
  %339 = bitcast i32 %338 to float, !dbg !46
  %340 = fsub float %333, %325, !dbg !32
  %341 = fadd float %320, %339, !dbg !35
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !36
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %341) #5, !dbg !37
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !38
  %345 = fmul float %340, %344, !dbg !39
  %346 = fadd float %325, %345, !dbg !40
  %347 = fadd float %330, %336, !dbg !41
  %348 = fmul float %340, %340, !dbg !42
  %349 = fmul float %320, %348, !dbg !43
  %350 = fmul float %344, %349, !dbg !44
  %351 = fadd float %347, %350, !dbg !45
  %352 = and i32 %9, 15, !dbg !46
  %353 = icmp eq i32 %352, 0, !dbg !46
  %354 = and i1 %261, %353, !dbg !46
  %355 = bitcast float %346 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %355, i1 %354) #5, !dbg !46
  %356 = bitcast float %351 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %356, i1 %354) #5, !dbg !46
  %357 = bitcast float %341 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %357, i1 %354) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %358 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %359 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !46
  %360 = sext i32 %7 to i64, !dbg !47
  %361 = getelementptr float, ptr addrspace(1) %1, i64 %360, !dbg !47
  %362 = icmp eq i32 %10, 0, !dbg !48
  %363 = and i1 %362, %8, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %361, i1 %363) #5, !dbg !48
  %364 = getelementptr float, ptr addrspace(1) %2, i64 %360, !dbg !49
  %365 = bitcast float %359 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %364, i1 %363) #5, !dbg !50
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float 4.096000e+03) #5, !dbg !51
  %367 = fadd float %366, 0x3EE4F8B580000000, !dbg !52
  %368 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %368, 0, !dbg !53
  br i1 %.not.i, label %371, label %369, !dbg !53

369:                                              ; preds = %6
  %370 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %367), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

371:                                              ; preds = %6
  %372 = tail call float @llvm.nvvm.rsqrt.approx.f(float %367), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %369, %371
  %.0.i = phi float [ %370, %369 ], [ %372, %371 ], !dbg !53
  %373 = getelementptr float, ptr addrspace(1) %3, i64 %360, !dbg !54
  %374 = bitcast float %.0.i to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %374, ptr addrspace(1) %373, i1 %363) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clswj7dvb22vv3apsx244ntb7dviedwb3xqgzbhrqwibujwhppcz.py", directory: "inductor_cache/ls")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_5, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_5", linkageName: "triton_red_fused__native_batch_norm_legit_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 58, scope: !7)
!14 = !DILocation(line: 34, column: 52, scope: !7)
!15 = !DILocation(line: 34, column: 72, scope: !7)
!16 = !DILocation(line: 34, column: 38, scope: !7)
!17 = !DILocation(line: 34, column: 67, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 80, scope: !7)
!20 = !DILocation(line: 39, column: 60, scope: !7)
!21 = !DILocation(line: 183, column: 24, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 41, column: 64, scope: !7)
!26 = !DILocation(line: 185, column: 34, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 185, column: 26, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 186, column: 39, scope: !22, inlinedAt: !24)
!29 = !DILocation(line: 186, column: 31, scope: !22, inlinedAt: !24)
!30 = !DILocation(line: 186, column: 22, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 40, column: 56, scope: !7)
!32 = !DILocation(line: 192, column: 21, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!34 = !DILocation(line: 43, column: 41, scope: !7)
!35 = !DILocation(line: 193, column: 28, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 194, column: 39, scope: !33, inlinedAt: !34)
!37 = !DILocation(line: 194, column: 60, scope: !33, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 49, scope: !33, inlinedAt: !34)
!39 = !DILocation(line: 196, column: 25, scope: !33, inlinedAt: !34)
!40 = !DILocation(line: 196, column: 17, scope: !33, inlinedAt: !34)
!41 = !DILocation(line: 197, column: 15, scope: !33, inlinedAt: !34)
!42 = !DILocation(line: 197, column: 30, scope: !33, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 38, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 49, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 22, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !34)
!47 = !DILocation(line: 48, column: 25, scope: !7)
!48 = !DILocation(line: 48, column: 36, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 36, scope: !7)
!51 = !DILocation(line: 51, column: 18, scope: !7)
!52 = !DILocation(line: 53, column: 18, scope: !7)
!53 = !DILocation(line: 54, column: 27, scope: !7)
!54 = !DILocation(line: 55, column: 25, scope: !7)
!55 = !DILocation(line: 55, column: 36, scope: !7)
!56 = !DILocation(line: 55, column: 4, scope: !7)
