#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":37:24)
#loc23 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":40:26)
#loc26 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":43:26)
#loc40 = loc(callsite(#loc1 at #loc19))
#loc43 = loc(callsite(#loc1 at #loc23))
#loc45 = loc(callsite(#loc1 at #loc26))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mul_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg5: i32 loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c64_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x64xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst_0 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %6 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %13 = tt.load %12, %9, %cst_0 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = arith.subf %cst_0, %10 : tensor<1x64xf32, #blocked> loc(#loc35)
    %15 = math.exp %14 : tensor<1x64xf32, #blocked> loc(#loc36)
    %16 = arith.addf %15, %cst : tensor<1x64xf32, #blocked> loc(#loc37)
    %17 = arith.divf %cst, %16 : tensor<1x64xf32, #blocked> loc(#loc38)
    %18 = arith.mulf %17, %13 : tensor<1x64xf32, #blocked> loc(#loc16)
    %19 = arith.select %9, %18, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc17)
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc19)), %arg8: f32 loc(callsite(#loc1 at #loc19))):
      %38 = arith.addf %arg7, %arg8 : f32 loc(#loc46)
      tt.reduce.return %38 : f32 loc(#loc39)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc39)
    %21 = triton_gpu.convert_layout %20 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc21)
    %23 = arith.select %9, %17, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc22)
    %24 = "tt.reduce"(%23) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc23)), %arg8: f32 loc(callsite(#loc1 at #loc23))):
      %38 = arith.addf %arg7, %arg8 : f32 loc(#loc47)
      tt.reduce.return %38 : f32 loc(#loc42)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc42)
    %25 = triton_gpu.convert_layout %24 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc24)
    %26 = tt.expand_dims %25 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %27 = arith.select %9, %13, %cst_0 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc25)
    %28 = "tt.reduce"(%27) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc26)), %arg8: f32 loc(callsite(#loc1 at #loc26))):
      %38 = arith.addf %arg7, %arg8 : f32 loc(#loc48)
      tt.reduce.return %38 : f32 loc(#loc44)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %29 = triton_gpu.convert_layout %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %31 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc28)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %33 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc29)
    tt.store %32, %22, %33 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %34 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc30)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc31)
    tt.store %35, %26, %33 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc31)
    %36 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.store %37, %30, %33 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":23:28)
#loc3 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":25:21)
#loc4 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":26:34)
#loc5 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":31:38)
#loc6 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":31:35)
#loc7 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":31:30)
#loc8 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":31:43)
#loc9 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":32:30)
#loc10 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":32:43)
#loc11 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc12 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":33:22)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc16 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":34:18)
#loc17 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":36:33)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":37:27)
#loc22 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":39:34)
#loc24 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":40:29)
#loc25 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":42:35)
#loc27 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":43:29)
#loc28 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":44:25)
#loc29 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":44:36)
#loc30 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":45:25)
#loc31 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":45:37)
#loc32 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":46:25)
#loc33 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":46:37)
#loc34 = loc("inductor_cache/es/cespviast7parjylvj2mzki6tpryv3kjpdt2bowqnby65uttgexi.py":46:4)
#loc35 = loc(callsite(#loc11 at #loc12))
#loc36 = loc(callsite(#loc13 at #loc12))
#loc37 = loc(callsite(#loc14 at #loc12))
#loc38 = loc(callsite(#loc15 at #loc12))
#loc39 = loc(callsite(#loc18 at #loc19))
#loc41 = loc(callsite(#loc20 at #loc18))
#loc42 = loc(callsite(#loc18 at #loc23))
#loc44 = loc(callsite(#loc18 at #loc26))
#loc46 = loc(callsite(#loc41 at #loc19))
#loc47 = loc(callsite(#loc41 at #loc23))
#loc48 = loc(callsite(#loc41 at #loc26))
