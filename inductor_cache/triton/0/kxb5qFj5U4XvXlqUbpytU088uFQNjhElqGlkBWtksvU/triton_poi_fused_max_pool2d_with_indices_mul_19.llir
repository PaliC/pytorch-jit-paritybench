; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_mul_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %18 = sdiv i32 %.frozen, 512, !dbg !14
  %19 = mul i32 %18, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %19, !dbg !15
  %20 = srem i32 %15, 512, !dbg !15
  %21 = srem i32 %18, 16, !dbg !16
  %22 = sdiv i32 %14, 8192, !dbg !17
  %23 = srem i32 %22, 16, !dbg !18
  %24 = sdiv i32 %14, 131072, !dbg !19
  %25 = shl nsw i32 %21, 10, !dbg !20
  %26 = mul nsw i32 %23, 33792, !dbg !21
  %27 = mul i32 %24, 557568, !dbg !22
  %28 = add i32 %25, %27, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %28, %20, !dbg !24
  %32 = add i32 %31, %26, !dbg !25
  %33 = sext i32 %30 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #2, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !27
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !27
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #2, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = add i32 %28, 512, !dbg !28
  %48 = add i32 %47, %.decomposed, !dbg !29
  %49 = add i32 %48, %26, !dbg !30
  %50 = add i32 %47, %20, !dbg !29
  %51 = add i32 %50, %26, !dbg !30
  %52 = sext i32 %49 to i64, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !31
  %54 = sext i32 %51 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !31
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !32
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !32
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !32
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !32
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !32
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !32
  %66 = add i32 %28, 16896, !dbg !33
  %67 = add i32 %66, %.decomposed, !dbg !34
  %68 = add i32 %67, %26, !dbg !35
  %69 = add i32 %66, %20, !dbg !34
  %70 = add i32 %69, %26, !dbg !35
  %71 = sext i32 %68 to i64, !dbg !36
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !36
  %73 = sext i32 %70 to i64, !dbg !36
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !36
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #2, !dbg !37
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !37
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !37
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !37
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !37
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !37
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !37
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !37
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !37
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !37
  %85 = add i32 %28, 17408, !dbg !38
  %86 = add i32 %85, %.decomposed, !dbg !39
  %87 = add i32 %86, %26, !dbg !40
  %88 = add i32 %85, %20, !dbg !39
  %89 = add i32 %88, %26, !dbg !40
  %90 = sext i32 %87 to i64, !dbg !41
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !41
  %92 = sext i32 %89 to i64, !dbg !41
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !41
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !42
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !42
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !42
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !42
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !42
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 true) #2, !dbg !42
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !42
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !42
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !42
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !42
  %104 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !27
  %105 = insertelement <4 x i32> %104, i32 %39, i64 1, !dbg !27
  %106 = insertelement <4 x i32> %105, i32 %40, i64 2, !dbg !27
  %107 = insertelement <4 x i32> %106, i32 %41, i64 3, !dbg !27
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !27
  %109 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !32
  %110 = insertelement <4 x i32> %109, i32 %58, i64 1, !dbg !32
  %111 = insertelement <4 x i32> %110, i32 %59, i64 2, !dbg !32
  %112 = insertelement <4 x i32> %111, i32 %60, i64 3, !dbg !32
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !32
  %114 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !37
  %115 = insertelement <4 x i32> %114, i32 %77, i64 1, !dbg !37
  %116 = insertelement <4 x i32> %115, i32 %78, i64 2, !dbg !37
  %117 = insertelement <4 x i32> %116, i32 %79, i64 3, !dbg !37
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !37
  %119 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !42
  %120 = insertelement <4 x i32> %119, i32 %96, i64 1, !dbg !42
  %121 = insertelement <4 x i32> %120, i32 %97, i64 2, !dbg !42
  %122 = insertelement <4 x i32> %121, i32 %98, i64 3, !dbg !42
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !42
  %124 = fcmp ogt <4 x float> %113, %108, !dbg !43
  %125 = fcmp uno <4 x float> %113, zeroinitializer, !dbg !47
  %126 = or <4 x i1> %124, %125, !dbg !48
  %.v = select <4 x i1> %126, <4 x i32> %112, <4 x i32> %107, !dbg !49
  %127 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %128 = fcmp olt <4 x float> %127, %118, !dbg !50
  %129 = fcmp uno <4 x float> %118, zeroinitializer, !dbg !52
  %130 = or <4 x i1> %129, %128, !dbg !53
  %.v30 = select <4 x i1> %130, <4 x i32> %117, <4 x i32> %.v, !dbg !54
  %131 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !54
  %132 = fcmp olt <4 x float> %131, %123, !dbg !55
  %133 = bitcast i32 %95 to float, !dbg !57
  %134 = fcmp uno float %133, 0.000000e+00, !dbg !57
  %135 = bitcast i32 %96 to float, !dbg !57
  %136 = fcmp uno float %135, 0.000000e+00, !dbg !57
  %137 = bitcast i32 %97 to float, !dbg !57
  %138 = fcmp uno float %137, 0.000000e+00, !dbg !57
  %139 = bitcast i32 %98 to float, !dbg !57
  %140 = fcmp uno float %139, 0.000000e+00, !dbg !57
  %141 = extractelement <4 x i1> %132, i64 0, !dbg !58
  %142 = or i1 %134, %141, !dbg !58
  %143 = extractelement <4 x i1> %132, i64 1, !dbg !58
  %144 = or i1 %136, %143, !dbg !58
  %145 = extractelement <4 x i1> %132, i64 2, !dbg !58
  %146 = or i1 %138, %145, !dbg !58
  %147 = extractelement <4 x i1> %132, i64 3, !dbg !58
  %148 = or i1 %140, %147, !dbg !58
  %149 = extractelement <4 x float> %131, i64 0, !dbg !59
  %150 = select i1 %142, float %133, float %149, !dbg !59
  %151 = extractelement <4 x float> %131, i64 1, !dbg !59
  %152 = select i1 %144, float %135, float %151, !dbg !59
  %153 = extractelement <4 x float> %131, i64 2, !dbg !59
  %154 = select i1 %146, float %137, float %153, !dbg !59
  %155 = extractelement <4 x float> %131, i64 3, !dbg !59
  %156 = select i1 %148, float %139, float %155, !dbg !59
  %157 = zext <4 x i1> %124 to <4 x i8>, !dbg !60
  %158 = select <4 x i1> %128, <4 x i8> splat (i8 2), <4 x i8> %157, !dbg !61
  %159 = select <4 x i1> %132, <4 x i8> splat (i8 3), <4 x i8> %158, !dbg !62
  %160 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !27
  %161 = insertelement <4 x i32> %160, i32 %44, i64 1, !dbg !27
  %162 = insertelement <4 x i32> %161, i32 %45, i64 2, !dbg !27
  %163 = insertelement <4 x i32> %162, i32 %46, i64 3, !dbg !27
  %164 = bitcast <4 x i32> %163 to <4 x float>, !dbg !27
  %165 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !32
  %166 = insertelement <4 x i32> %165, i32 %63, i64 1, !dbg !32
  %167 = insertelement <4 x i32> %166, i32 %64, i64 2, !dbg !32
  %168 = insertelement <4 x i32> %167, i32 %65, i64 3, !dbg !32
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !32
  %170 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !37
  %171 = insertelement <4 x i32> %170, i32 %82, i64 1, !dbg !37
  %172 = insertelement <4 x i32> %171, i32 %83, i64 2, !dbg !37
  %173 = insertelement <4 x i32> %172, i32 %84, i64 3, !dbg !37
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !37
  %175 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !42
  %176 = insertelement <4 x i32> %175, i32 %101, i64 1, !dbg !42
  %177 = insertelement <4 x i32> %176, i32 %102, i64 2, !dbg !42
  %178 = insertelement <4 x i32> %177, i32 %103, i64 3, !dbg !42
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !42
  %180 = fcmp ogt <4 x float> %169, %164, !dbg !43
  %181 = fcmp uno <4 x float> %169, zeroinitializer, !dbg !47
  %182 = or <4 x i1> %180, %181, !dbg !48
  %.v31 = select <4 x i1> %182, <4 x i32> %168, <4 x i32> %163, !dbg !49
  %183 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !49
  %184 = fcmp olt <4 x float> %183, %174, !dbg !50
  %185 = fcmp uno <4 x float> %174, zeroinitializer, !dbg !52
  %186 = or <4 x i1> %185, %184, !dbg !53
  %.v32 = select <4 x i1> %186, <4 x i32> %173, <4 x i32> %.v31, !dbg !54
  %187 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !54
  %188 = fcmp olt <4 x float> %187, %179, !dbg !55
  %189 = bitcast i32 %100 to float, !dbg !57
  %190 = fcmp uno float %189, 0.000000e+00, !dbg !57
  %191 = bitcast i32 %101 to float, !dbg !57
  %192 = fcmp uno float %191, 0.000000e+00, !dbg !57
  %193 = bitcast i32 %102 to float, !dbg !57
  %194 = fcmp uno float %193, 0.000000e+00, !dbg !57
  %195 = bitcast i32 %103 to float, !dbg !57
  %196 = fcmp uno float %195, 0.000000e+00, !dbg !57
  %197 = extractelement <4 x i1> %188, i64 0, !dbg !58
  %198 = or i1 %190, %197, !dbg !58
  %199 = extractelement <4 x i1> %188, i64 1, !dbg !58
  %200 = or i1 %192, %199, !dbg !58
  %201 = extractelement <4 x i1> %188, i64 2, !dbg !58
  %202 = or i1 %194, %201, !dbg !58
  %203 = extractelement <4 x i1> %188, i64 3, !dbg !58
  %204 = or i1 %196, %203, !dbg !58
  %205 = extractelement <4 x float> %187, i64 0, !dbg !59
  %206 = select i1 %198, float %189, float %205, !dbg !59
  %207 = extractelement <4 x float> %187, i64 1, !dbg !59
  %208 = select i1 %200, float %191, float %207, !dbg !59
  %209 = extractelement <4 x float> %187, i64 2, !dbg !59
  %210 = select i1 %202, float %193, float %209, !dbg !59
  %211 = extractelement <4 x float> %187, i64 3, !dbg !59
  %212 = select i1 %204, float %195, float %211, !dbg !59
  %213 = zext <4 x i1> %180 to <4 x i8>, !dbg !60
  %214 = select <4 x i1> %184, <4 x i8> splat (i8 2), <4 x i8> %213, !dbg !61
  %215 = select <4 x i1> %188, <4 x i8> splat (i8 3), <4 x i8> %214, !dbg !62
  %216 = fmul float %150, 0x3F847AE140000000, !dbg !63
  %217 = fmul float %152, 0x3F847AE140000000, !dbg !63
  %218 = fmul float %154, 0x3F847AE140000000, !dbg !63
  %219 = fmul float %156, 0x3F847AE140000000, !dbg !63
  %220 = fmul float %206, 0x3F847AE140000000, !dbg !63
  %221 = fmul float %208, 0x3F847AE140000000, !dbg !63
  %222 = fmul float %210, 0x3F847AE140000000, !dbg !63
  %223 = fmul float %212, 0x3F847AE140000000, !dbg !63
  %224 = sext i32 %16 to i64, !dbg !64
  %225 = getelementptr float, ptr addrspace(1) %1, i64 %224, !dbg !64
  %226 = sext i32 %17 to i64, !dbg !64
  %227 = getelementptr float, ptr addrspace(1) %1, i64 %226, !dbg !64
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !65
  %229 = bitcast float %150 to i32, !dbg !65
  %230 = bitcast float %152 to i32, !dbg !65
  %231 = bitcast float %154 to i32, !dbg !65
  %232 = bitcast float %156 to i32, !dbg !65
  %233 = bitcast float %206 to i32, !dbg !65
  %234 = bitcast float %208 to i32, !dbg !65
  %235 = bitcast float %210 to i32, !dbg !65
  %236 = bitcast float %212 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %228, i32 %229, i32 %230, i32 %231, i32 %232, i1 true) #2, !dbg !65
  %237 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 16, !dbg !65
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %237, i32 %233, i32 %234, i32 %235, i32 %236, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !65
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !65
  %240 = load <4 x i32>, ptr addrspace(3) %239, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %238, align 16, !dbg !65
  %241 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 4, !dbg !65
  %.extract8 = load i32, ptr addrspace(3) %241, align 4, !dbg !65
  %242 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 8, !dbg !65
  %.extract9 = load i32, ptr addrspace(3) %242, align 8, !dbg !65
  %243 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 12, !dbg !65
  %.extract10 = load i32, ptr addrspace(3) %243, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %225, i1 true) #2, !dbg !65
  %.extract11 = extractelement <4 x i32> %240, i64 0, !dbg !65
  %.extract12 = extractelement <4 x i32> %240, i64 1, !dbg !65
  %.extract13 = extractelement <4 x i32> %240, i64 2, !dbg !65
  %.extract14 = extractelement <4 x i32> %240, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %227, i1 true) #2, !dbg !65
  %244 = sext i32 %14 to i64, !dbg !66
  %245 = getelementptr i8, ptr addrspace(1) %2, i64 %244, !dbg !66
  %246 = bitcast <4 x i8> %159 to i32, !dbg !67
  %247 = bitcast <4 x i8> %215 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %246, i32 %247, ptr addrspace(1) %245, i1 true) #2, !dbg !67
  %248 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !68
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %226, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %250 = bitcast float %216 to i32, !dbg !69
  %251 = bitcast float %217 to i32, !dbg !69
  %252 = bitcast float %218 to i32, !dbg !69
  %253 = bitcast float %219 to i32, !dbg !69
  %254 = bitcast float %220 to i32, !dbg !69
  %255 = bitcast float %221 to i32, !dbg !69
  %256 = bitcast float %222 to i32, !dbg !69
  %257 = bitcast float %223 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %228, i32 %250, i32 %251, i32 %252, i32 %253, i1 true) #2, !dbg !69
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %237, i32 %254, i32 %255, i32 %256, i32 %257, i1 true) #2, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %258 = load <4 x i32>, ptr addrspace(3) %239, align 16, !dbg !69
  %.extract22 = load i32, ptr addrspace(3) %238, align 16, !dbg !69
  %.extract23 = load i32, ptr addrspace(3) %241, align 4, !dbg !69
  %.extract24 = load i32, ptr addrspace(3) %242, align 8, !dbg !69
  %.extract25 = load i32, ptr addrspace(3) %243, align 4, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %248, i1 true) #2, !dbg !69
  %.extract26 = extractelement <4 x i32> %258, i64 0, !dbg !69
  %.extract27 = extractelement <4 x i32> %258, i64 1, !dbg !69
  %.extract28 = extractelement <4 x i32> %258, i64 2, !dbg !69
  %.extract29 = extractelement <4 x i32> %258, i64 3, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %249, i1 true) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp32ay6cq5fwnsrvudvvegohr5p5dnogdzv6ebhepp7vzb2ltbga.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_mul_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_mul_19", linkageName: "triton_poi_fused_max_pool2d_with_indices_mul_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 51, scope: !7)
!22 = !DILocation(line: 29, column: 63, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 29, column: 45, scope: !7)
!25 = !DILocation(line: 29, column: 56, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 68, scope: !7)
!28 = !DILocation(line: 30, column: 41, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 62, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 74, scope: !7)
!33 = !DILocation(line: 31, column: 43, scope: !7)
!34 = !DILocation(line: 31, column: 53, scope: !7)
!35 = !DILocation(line: 31, column: 64, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 76, scope: !7)
!38 = !DILocation(line: 32, column: 43, scope: !7)
!39 = !DILocation(line: 32, column: 53, scope: !7)
!40 = !DILocation(line: 32, column: 64, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 76, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 33, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 34, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 35, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!60 = !DILocation(line: 39, column: 33, scope: !7)
!61 = !DILocation(line: 42, column: 35, scope: !7)
!62 = !DILocation(line: 45, column: 35, scope: !7)
!63 = !DILocation(line: 47, column: 19, scope: !7)
!64 = !DILocation(line: 48, column: 25, scope: !7)
!65 = !DILocation(line: 48, column: 36, scope: !7)
!66 = !DILocation(line: 49, column: 25, scope: !7)
!67 = !DILocation(line: 49, column: 37, scope: !7)
!68 = !DILocation(line: 50, column: 25, scope: !7)
!69 = !DILocation(line: 50, column: 37, scope: !7)
!70 = !DILocation(line: 50, column: 4, scope: !7)
