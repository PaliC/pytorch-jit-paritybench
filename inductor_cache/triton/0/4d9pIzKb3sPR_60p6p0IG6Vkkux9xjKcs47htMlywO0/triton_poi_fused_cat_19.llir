; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = sdiv i32 %10, 256, !dbg !14
  %15 = srem i32 %14, 64, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %16 = sdiv i32 %.frozen, 16, !dbg !16
  %17 = mul i32 %16, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = srem i32 %11, 16, !dbg !17
  %19 = srem i32 %12, 16, !dbg !17
  %20 = srem i32 %13, 16, !dbg !17
  %21 = srem i32 %16, 16, !dbg !18
  %22 = sdiv i32 %10, 16384, !dbg !19
  %23 = icmp slt i32 %15, 32, !dbg !20
  %24 = shl nsw i32 %.decomposed, 5, !dbg !21
  %25 = shl nsw i32 %18, 5, !dbg !21
  %26 = shl nsw i32 %19, 5, !dbg !21
  %27 = shl nsw i32 %20, 5, !dbg !21
  %28 = mul nsw i32 %21, 544, !dbg !22
  %29 = mul nsw i32 %22, 9248, !dbg !23
  %30 = add nsw i32 %28, %29, !dbg !24
  %31 = add nsw i32 %30, %24, !dbg !25
  %32 = add nsw i32 %30, %25, !dbg !25
  %33 = add nsw i32 %30, %26, !dbg !25
  %34 = add nsw i32 %30, %27, !dbg !25
  %35 = add nsw i32 %31, %15, !dbg !26
  %36 = add nsw i32 %32, %15, !dbg !26
  %37 = add nsw i32 %33, %15, !dbg !26
  %38 = add nsw i32 %34, %15, !dbg !26
  %39 = sext i32 %35 to i64, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !27
  %41 = sext i32 %36 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %37 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = sext i32 %38 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %23, i32 0, i1 %23) #1, !dbg !28
  %54 = bitcast i32 %53 to float, !dbg !28
  %55 = add nsw i32 %30, 32, !dbg !29
  %56 = add nsw i32 %55, %24, !dbg !30
  %57 = add nsw i32 %55, %25, !dbg !30
  %58 = add nsw i32 %55, %26, !dbg !30
  %59 = add nsw i32 %55, %27, !dbg !30
  %60 = add nsw i32 %56, %15, !dbg !31
  %61 = add nsw i32 %57, %15, !dbg !31
  %62 = add nsw i32 %58, %15, !dbg !31
  %63 = add nsw i32 %59, %15, !dbg !31
  %64 = sext i32 %60 to i64, !dbg !32
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !32
  %66 = sext i32 %61 to i64, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !32
  %68 = sext i32 %62 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !32
  %70 = sext i32 %63 to i64, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %23, i32 0, i1 %23) #1, !dbg !33
  %73 = bitcast i32 %72 to float, !dbg !33
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %23, i32 0, i1 %23) #1, !dbg !33
  %75 = bitcast i32 %74 to float, !dbg !33
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %23, i32 0, i1 %23) #1, !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %23, i32 0, i1 %23) #1, !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fcmp ogt float %73, %48, !dbg !34
  %81 = fcmp ogt float %75, %50, !dbg !34
  %82 = fcmp ogt float %77, %52, !dbg !34
  %83 = fcmp ogt float %79, %54, !dbg !34
  %84 = fcmp uno float %73, 0.000000e+00, !dbg !38
  %85 = fcmp uno float %75, 0.000000e+00, !dbg !38
  %86 = fcmp uno float %77, 0.000000e+00, !dbg !38
  %87 = fcmp uno float %79, 0.000000e+00, !dbg !38
  %88 = or i1 %80, %84, !dbg !39
  %89 = or i1 %81, %85, !dbg !39
  %90 = or i1 %82, %86, !dbg !39
  %91 = or i1 %83, %87, !dbg !39
  %92 = select i1 %88, float %73, float %48, !dbg !40
  %93 = select i1 %89, float %75, float %50, !dbg !40
  %94 = select i1 %90, float %77, float %52, !dbg !40
  %95 = select i1 %91, float %79, float %54, !dbg !40
  %96 = add nsw i32 %30, 544, !dbg !41
  %97 = add nsw i32 %96, %24, !dbg !42
  %98 = add nsw i32 %96, %25, !dbg !42
  %99 = add nsw i32 %96, %26, !dbg !42
  %100 = add nsw i32 %96, %27, !dbg !42
  %101 = add nsw i32 %97, %15, !dbg !43
  %102 = add nsw i32 %98, %15, !dbg !43
  %103 = add nsw i32 %99, %15, !dbg !43
  %104 = add nsw i32 %100, %15, !dbg !43
  %105 = sext i32 %101 to i64, !dbg !44
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !44
  %107 = sext i32 %102 to i64, !dbg !44
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !44
  %109 = sext i32 %103 to i64, !dbg !44
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !44
  %111 = sext i32 %104 to i64, !dbg !44
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !44
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %23, i32 0, i1 %23) #1, !dbg !45
  %114 = bitcast i32 %113 to float, !dbg !45
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %23, i32 0, i1 %23) #1, !dbg !45
  %116 = bitcast i32 %115 to float, !dbg !45
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %23, i32 0, i1 %23) #1, !dbg !45
  %118 = bitcast i32 %117 to float, !dbg !45
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %23, i32 0, i1 %23) #1, !dbg !45
  %120 = bitcast i32 %119 to float, !dbg !45
  %121 = fcmp olt float %92, %114, !dbg !46
  %122 = fcmp olt float %93, %116, !dbg !46
  %123 = fcmp olt float %94, %118, !dbg !46
  %124 = fcmp olt float %95, %120, !dbg !46
  %125 = fcmp uno float %114, 0.000000e+00, !dbg !48
  %126 = fcmp uno float %116, 0.000000e+00, !dbg !48
  %127 = fcmp uno float %118, 0.000000e+00, !dbg !48
  %128 = fcmp uno float %120, 0.000000e+00, !dbg !48
  %129 = or i1 %121, %125, !dbg !49
  %130 = or i1 %122, %126, !dbg !49
  %131 = or i1 %123, %127, !dbg !49
  %132 = or i1 %124, %128, !dbg !49
  %133 = select i1 %129, float %114, float %92, !dbg !50
  %134 = select i1 %130, float %116, float %93, !dbg !50
  %135 = select i1 %131, float %118, float %94, !dbg !50
  %136 = select i1 %132, float %120, float %95, !dbg !50
  %137 = add nsw i32 %30, 576, !dbg !51
  %138 = add nsw i32 %137, %24, !dbg !52
  %139 = add nsw i32 %137, %25, !dbg !52
  %140 = add nsw i32 %137, %26, !dbg !52
  %141 = add nsw i32 %137, %27, !dbg !52
  %142 = add nsw i32 %138, %15, !dbg !53
  %143 = add nsw i32 %139, %15, !dbg !53
  %144 = add nsw i32 %140, %15, !dbg !53
  %145 = add nsw i32 %141, %15, !dbg !53
  %146 = sext i32 %142 to i64, !dbg !54
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !54
  %148 = sext i32 %143 to i64, !dbg !54
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !54
  %150 = sext i32 %144 to i64, !dbg !54
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !54
  %152 = sext i32 %145 to i64, !dbg !54
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !54
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %23, i32 0, i1 %23) #1, !dbg !55
  %155 = bitcast i32 %154 to float, !dbg !55
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %23, i32 0, i1 %23) #1, !dbg !55
  %157 = bitcast i32 %156 to float, !dbg !55
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %23, i32 0, i1 %23) #1, !dbg !55
  %159 = bitcast i32 %158 to float, !dbg !55
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %23, i32 0, i1 %23) #1, !dbg !55
  %161 = bitcast i32 %160 to float, !dbg !55
  %162 = fcmp olt float %133, %155, !dbg !56
  %163 = fcmp olt float %134, %157, !dbg !56
  %164 = fcmp olt float %135, %159, !dbg !56
  %165 = fcmp olt float %136, %161, !dbg !56
  %166 = fcmp uno float %155, 0.000000e+00, !dbg !58
  %167 = fcmp uno float %157, 0.000000e+00, !dbg !58
  %168 = fcmp uno float %159, 0.000000e+00, !dbg !58
  %169 = fcmp uno float %161, 0.000000e+00, !dbg !58
  %170 = or i1 %162, %166, !dbg !59
  %171 = or i1 %163, %167, !dbg !59
  %172 = or i1 %164, %168, !dbg !59
  %173 = or i1 %165, %169, !dbg !59
  %174 = select i1 %170, float %155, float %133, !dbg !60
  %175 = select i1 %171, float %157, float %134, !dbg !60
  %176 = select i1 %172, float %159, float %135, !dbg !60
  %177 = select i1 %173, float %161, float %136, !dbg !60
  %178 = icmp sgt i32 %15, 31, !dbg !61
  %179 = add nsw i32 %15, -32, !dbg !62
  %180 = add nsw i32 %31, %179, !dbg !63
  %181 = add nsw i32 %32, %179, !dbg !63
  %182 = add nsw i32 %33, %179, !dbg !63
  %183 = add nsw i32 %34, %179, !dbg !63
  %184 = sext i32 %180 to i64, !dbg !64
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !64
  %186 = sext i32 %181 to i64, !dbg !64
  %187 = getelementptr float, ptr addrspace(1) %1, i64 %186, !dbg !64
  %188 = sext i32 %182 to i64, !dbg !64
  %189 = getelementptr float, ptr addrspace(1) %1, i64 %188, !dbg !64
  %190 = sext i32 %183 to i64, !dbg !64
  %191 = getelementptr float, ptr addrspace(1) %1, i64 %190, !dbg !64
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %178, i32 0, i1 %178) #1, !dbg !65
  %193 = bitcast i32 %192 to float, !dbg !65
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %178, i32 0, i1 %178) #1, !dbg !65
  %195 = bitcast i32 %194 to float, !dbg !65
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %178, i32 0, i1 %178) #1, !dbg !65
  %197 = bitcast i32 %196 to float, !dbg !65
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %178, i32 0, i1 %178) #1, !dbg !65
  %199 = bitcast i32 %198 to float, !dbg !65
  %200 = add nsw i32 %56, %179, !dbg !66
  %201 = add nsw i32 %57, %179, !dbg !66
  %202 = add nsw i32 %58, %179, !dbg !66
  %203 = add nsw i32 %59, %179, !dbg !66
  %204 = sext i32 %200 to i64, !dbg !67
  %205 = getelementptr float, ptr addrspace(1) %1, i64 %204, !dbg !67
  %206 = sext i32 %201 to i64, !dbg !67
  %207 = getelementptr float, ptr addrspace(1) %1, i64 %206, !dbg !67
  %208 = sext i32 %202 to i64, !dbg !67
  %209 = getelementptr float, ptr addrspace(1) %1, i64 %208, !dbg !67
  %210 = sext i32 %203 to i64, !dbg !67
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %210, !dbg !67
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %178, i32 0, i1 %178) #1, !dbg !68
  %213 = bitcast i32 %212 to float, !dbg !68
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %178, i32 0, i1 %178) #1, !dbg !68
  %215 = bitcast i32 %214 to float, !dbg !68
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %178, i32 0, i1 %178) #1, !dbg !68
  %217 = bitcast i32 %216 to float, !dbg !68
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %178, i32 0, i1 %178) #1, !dbg !68
  %219 = bitcast i32 %218 to float, !dbg !68
  %220 = fcmp ogt float %213, %193, !dbg !69
  %221 = fcmp ogt float %215, %195, !dbg !69
  %222 = fcmp ogt float %217, %197, !dbg !69
  %223 = fcmp ogt float %219, %199, !dbg !69
  %224 = fcmp uno float %213, 0.000000e+00, !dbg !71
  %225 = fcmp uno float %215, 0.000000e+00, !dbg !71
  %226 = fcmp uno float %217, 0.000000e+00, !dbg !71
  %227 = fcmp uno float %219, 0.000000e+00, !dbg !71
  %228 = or i1 %220, %224, !dbg !72
  %229 = or i1 %221, %225, !dbg !72
  %230 = or i1 %222, %226, !dbg !72
  %231 = or i1 %223, %227, !dbg !72
  %232 = select i1 %228, float %213, float %193, !dbg !73
  %233 = select i1 %229, float %215, float %195, !dbg !73
  %234 = select i1 %230, float %217, float %197, !dbg !73
  %235 = select i1 %231, float %219, float %199, !dbg !73
  %236 = add nsw i32 %97, %179, !dbg !74
  %237 = add nsw i32 %98, %179, !dbg !74
  %238 = add nsw i32 %99, %179, !dbg !74
  %239 = add nsw i32 %100, %179, !dbg !74
  %240 = sext i32 %236 to i64, !dbg !75
  %241 = getelementptr float, ptr addrspace(1) %1, i64 %240, !dbg !75
  %242 = sext i32 %237 to i64, !dbg !75
  %243 = getelementptr float, ptr addrspace(1) %1, i64 %242, !dbg !75
  %244 = sext i32 %238 to i64, !dbg !75
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !75
  %246 = sext i32 %239 to i64, !dbg !75
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %246, !dbg !75
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %178, i32 0, i1 %178) #1, !dbg !76
  %249 = bitcast i32 %248 to float, !dbg !76
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %178, i32 0, i1 %178) #1, !dbg !76
  %251 = bitcast i32 %250 to float, !dbg !76
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %178, i32 0, i1 %178) #1, !dbg !76
  %253 = bitcast i32 %252 to float, !dbg !76
  %254 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %178, i32 0, i1 %178) #1, !dbg !76
  %255 = bitcast i32 %254 to float, !dbg !76
  %256 = fcmp olt float %232, %249, !dbg !77
  %257 = fcmp olt float %233, %251, !dbg !77
  %258 = fcmp olt float %234, %253, !dbg !77
  %259 = fcmp olt float %235, %255, !dbg !77
  %260 = fcmp uno float %249, 0.000000e+00, !dbg !79
  %261 = fcmp uno float %251, 0.000000e+00, !dbg !79
  %262 = fcmp uno float %253, 0.000000e+00, !dbg !79
  %263 = fcmp uno float %255, 0.000000e+00, !dbg !79
  %264 = or i1 %256, %260, !dbg !80
  %265 = or i1 %257, %261, !dbg !80
  %266 = or i1 %258, %262, !dbg !80
  %267 = or i1 %259, %263, !dbg !80
  %268 = select i1 %264, float %249, float %232, !dbg !81
  %269 = select i1 %265, float %251, float %233, !dbg !81
  %270 = select i1 %266, float %253, float %234, !dbg !81
  %271 = select i1 %267, float %255, float %235, !dbg !81
  %272 = add nsw i32 %138, %179, !dbg !82
  %273 = add nsw i32 %139, %179, !dbg !82
  %274 = add nsw i32 %140, %179, !dbg !82
  %275 = add nsw i32 %141, %179, !dbg !82
  %276 = sext i32 %272 to i64, !dbg !83
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !83
  %278 = sext i32 %273 to i64, !dbg !83
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %278, !dbg !83
  %280 = sext i32 %274 to i64, !dbg !83
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !83
  %282 = sext i32 %275 to i64, !dbg !83
  %283 = getelementptr float, ptr addrspace(1) %1, i64 %282, !dbg !83
  %284 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %178, i32 0, i1 %178) #1, !dbg !84
  %285 = bitcast i32 %284 to float, !dbg !84
  %286 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %178, i32 0, i1 %178) #1, !dbg !84
  %287 = bitcast i32 %286 to float, !dbg !84
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %178, i32 0, i1 %178) #1, !dbg !84
  %289 = bitcast i32 %288 to float, !dbg !84
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %178, i32 0, i1 %178) #1, !dbg !84
  %291 = bitcast i32 %290 to float, !dbg !84
  %292 = fcmp olt float %268, %285, !dbg !85
  %293 = fcmp olt float %269, %287, !dbg !85
  %294 = fcmp olt float %270, %289, !dbg !85
  %295 = fcmp olt float %271, %291, !dbg !85
  %296 = fcmp uno float %285, 0.000000e+00, !dbg !87
  %297 = fcmp uno float %287, 0.000000e+00, !dbg !87
  %298 = fcmp uno float %289, 0.000000e+00, !dbg !87
  %299 = fcmp uno float %291, 0.000000e+00, !dbg !87
  %300 = or i1 %292, %296, !dbg !88
  %301 = or i1 %293, %297, !dbg !88
  %302 = or i1 %294, %298, !dbg !88
  %303 = or i1 %295, %299, !dbg !88
  %304 = select i1 %300, float %285, float %268, !dbg !89
  %305 = select i1 %301, float %287, float %269, !dbg !89
  %306 = select i1 %302, float %289, float %270, !dbg !89
  %307 = select i1 %303, float %291, float %271, !dbg !89
  %308 = select i1 %23, float %174, float %304, !dbg !90
  %309 = select i1 %23, float %175, float %305, !dbg !90
  %310 = select i1 %23, float %176, float %306, !dbg !90
  %311 = select i1 %23, float %177, float %307, !dbg !90
  %312 = sext i32 %10 to i64, !dbg !91
  %313 = getelementptr float, ptr addrspace(1) %2, i64 %312, !dbg !91
  %314 = bitcast float %308 to i32, !dbg !92
  %315 = bitcast float %309 to i32, !dbg !92
  %316 = bitcast float %310 to i32, !dbg !92
  %317 = bitcast float %311 to i32, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %314, i32 %315, i32 %316, i32 %317, ptr addrspace(1) %313, i1 true) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cikuaqr545awibf242gxjzdhf3ejadkcojjdccefvzeorpj464zj.py", directory: "inductor_cache/ik")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 33, scope: !7)
!22 = !DILocation(line: 34, column: 42, scope: !7)
!23 = !DILocation(line: 34, column: 52, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 58, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 64, scope: !7)
!29 = !DILocation(line: 35, column: 43, scope: !7)
!30 = !DILocation(line: 35, column: 52, scope: !7)
!31 = !DILocation(line: 35, column: 63, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 69, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 36, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 37, column: 44, scope: !7)
!42 = !DILocation(line: 37, column: 53, scope: !7)
!43 = !DILocation(line: 37, column: 64, scope: !7)
!44 = !DILocation(line: 37, column: 30, scope: !7)
!45 = !DILocation(line: 37, column: 70, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !47)
!51 = !DILocation(line: 39, column: 45, scope: !7)
!52 = !DILocation(line: 39, column: 54, scope: !7)
!53 = !DILocation(line: 39, column: 65, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 71, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !57)
!61 = !DILocation(line: 43, column: 20, scope: !7)
!62 = !DILocation(line: 46, column: 67, scope: !7)
!63 = !DILocation(line: 46, column: 59, scope: !7)
!64 = !DILocation(line: 46, column: 31, scope: !7)
!65 = !DILocation(line: 46, column: 73, scope: !7)
!66 = !DILocation(line: 47, column: 64, scope: !7)
!67 = !DILocation(line: 47, column: 31, scope: !7)
!68 = !DILocation(line: 47, column: 78, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !70)
!70 = !DILocation(line: 48, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !70)
!74 = !DILocation(line: 49, column: 65, scope: !7)
!75 = !DILocation(line: 49, column: 31, scope: !7)
!76 = !DILocation(line: 49, column: 79, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !78)
!78 = !DILocation(line: 50, column: 42, scope: !7)
!79 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !78)
!80 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !78)
!81 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !78)
!82 = !DILocation(line: 51, column: 65, scope: !7)
!83 = !DILocation(line: 51, column: 31, scope: !7)
!84 = !DILocation(line: 51, column: 79, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !86)
!86 = !DILocation(line: 52, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !86)
!90 = !DILocation(line: 0, scope: !7)
!91 = !DILocation(line: 56, column: 25, scope: !7)
!92 = !DILocation(line: 56, column: 37, scope: !7)
!93 = !DILocation(line: 56, column: 4, scope: !7)
