; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %18 = or disjoint i32 %16, 512, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = sdiv i32 %18, 64, !dbg !14
  %21 = srem i32 %19, 64, !dbg !15
  %22 = srem i32 %20, 64, !dbg !15
  %23 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = srem i32 %17, 64, !dbg !16
  %25 = sdiv i32 %16, 4096, !dbg !17
  %26 = sdiv i32 %18, 4096, !dbg !17
  %27 = sext i32 %21 to i64, !dbg !18
  %28 = getelementptr i64, ptr addrspace(1) %1, i64 %27, !dbg !18
  %29 = sext i32 %22 to i64, !dbg !18
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !18
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !19
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !19
  %39 = sext i32 %.decomposed to i64, !dbg !20
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !20
  %41 = sext i32 %24 to i64, !dbg !20
  %42 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !20
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !21
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !21
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !21
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !21
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !21
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !21
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !21
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !21
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !21
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !21
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !21
  %55 = getelementptr i64, ptr addrspace(1) %5, i64 %39, !dbg !22
  %56 = getelementptr i64, ptr addrspace(1) %5, i64 %41, !dbg !22
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !23
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !23
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !23
  %60 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !23
  %61 = extractvalue { i64, i64 } %60, 0, !dbg !23
  %62 = extractvalue { i64, i64 } %60, 1, !dbg !23
  %63 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !23
  %64 = extractvalue { i64, i64 } %63, 0, !dbg !23
  %65 = extractvalue { i64, i64 } %63, 1, !dbg !23
  %66 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !23
  %67 = extractvalue { i64, i64 } %66, 0, !dbg !23
  %68 = extractvalue { i64, i64 } %66, 1, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !24
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !25
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #1, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !25
  %80 = getelementptr i64, ptr addrspace(1) %7, i64 %27, !dbg !26
  %81 = getelementptr i64, ptr addrspace(1) %7, i64 %29, !dbg !26
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !27
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !27
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !27
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !27
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !28
  %91 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !28
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %97 = bitcast i32 %96 to float, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !29
  %99 = bitcast i32 %98 to float, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !29
  %101 = bitcast i32 %100 to float, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !29
  %103 = bitcast i32 %102 to float, !dbg !29
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !29
  %105 = bitcast i32 %104 to float, !dbg !29
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !29
  %107 = bitcast i32 %106 to float, !dbg !29
  %108 = lshr i64 %31, 58, !dbg !30
  %109 = and i64 %108, 32, !dbg !30
  %110 = add i64 %109, %31, !dbg !30
  %111 = lshr i64 %35, 58, !dbg !30
  %112 = and i64 %111, 32, !dbg !30
  %113 = add i64 %112, %35, !dbg !30
  %114 = lshr i64 %44, 58, !dbg !31
  %115 = and i64 %114, 32, !dbg !31
  %116 = add i64 %115, %44, !dbg !31
  %117 = lshr i64 %45, 58, !dbg !31
  %118 = and i64 %117, 32, !dbg !31
  %119 = add i64 %118, %45, !dbg !31
  %120 = lshr i64 %47, 58, !dbg !31
  %121 = and i64 %120, 32, !dbg !31
  %122 = add i64 %121, %47, !dbg !31
  %123 = lshr i64 %48, 58, !dbg !31
  %124 = and i64 %123, 32, !dbg !31
  %125 = add i64 %124, %48, !dbg !31
  %126 = lshr i64 %50, 58, !dbg !31
  %127 = and i64 %126, 32, !dbg !31
  %128 = add i64 %127, %50, !dbg !31
  %129 = lshr i64 %51, 58, !dbg !31
  %130 = and i64 %129, 32, !dbg !31
  %131 = add i64 %130, %51, !dbg !31
  %132 = lshr i64 %53, 58, !dbg !31
  %133 = and i64 %132, 32, !dbg !31
  %134 = add i64 %133, %53, !dbg !31
  %135 = lshr i64 %54, 58, !dbg !31
  %136 = and i64 %135, 32, !dbg !31
  %137 = add i64 %136, %54, !dbg !31
  %138 = shl i64 %110, 5, !dbg !32
  %139 = shl i64 %113, 5, !dbg !32
  %140 = shl nsw i32 %25, 10, !dbg !33
  %141 = shl nsw i32 %26, 10, !dbg !33
  %142 = sext i32 %140 to i64, !dbg !34
  %143 = sext i32 %141 to i64, !dbg !34
  %144 = add i64 %138, %142, !dbg !35
  %145 = add i64 %144, %116, !dbg !34
  %146 = add i64 %144, %119, !dbg !34
  %147 = add i64 %144, %122, !dbg !34
  %148 = add i64 %144, %125, !dbg !34
  %149 = add i64 %139, %143, !dbg !35
  %150 = add i64 %149, %128, !dbg !34
  %151 = add i64 %149, %131, !dbg !34
  %152 = add i64 %149, %134, !dbg !34
  %153 = add i64 %149, %137, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !36
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !36
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !36
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !36
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !36
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !36
  %160 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !36
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !36
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !37
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !37
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !37
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !37
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !37
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #1, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 true) #1, !dbg !37
  %170 = getelementptr float, ptr addrspace(1) %4, i64 %145, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !38
  %172 = getelementptr float, ptr addrspace(1) %4, i64 %147, !dbg !38
  %173 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !38
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !38
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %152, !dbg !38
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !38
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !39
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !39
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 true) #1, !dbg !39
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #1, !dbg !39
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #1, !dbg !39
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #1, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #1, !dbg !39
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #1, !dbg !39
  %186 = lshr i64 %58, 58, !dbg !40
  %187 = and i64 %186, 32, !dbg !40
  %188 = add i64 %187, %58, !dbg !40
  %189 = lshr i64 %59, 58, !dbg !40
  %190 = and i64 %189, 32, !dbg !40
  %191 = add i64 %190, %59, !dbg !40
  %192 = lshr i64 %61, 58, !dbg !40
  %193 = and i64 %192, 32, !dbg !40
  %194 = add i64 %193, %61, !dbg !40
  %195 = lshr i64 %62, 58, !dbg !40
  %196 = and i64 %195, 32, !dbg !40
  %197 = add i64 %196, %62, !dbg !40
  %198 = lshr i64 %64, 58, !dbg !40
  %199 = and i64 %198, 32, !dbg !40
  %200 = add i64 %199, %64, !dbg !40
  %201 = lshr i64 %65, 58, !dbg !40
  %202 = and i64 %201, 32, !dbg !40
  %203 = add i64 %202, %65, !dbg !40
  %204 = lshr i64 %67, 58, !dbg !40
  %205 = and i64 %204, 32, !dbg !40
  %206 = add i64 %205, %67, !dbg !40
  %207 = lshr i64 %68, 58, !dbg !40
  %208 = and i64 %207, 32, !dbg !40
  %209 = add i64 %208, %68, !dbg !40
  %210 = add i64 %144, %188, !dbg !41
  %211 = add i64 %144, %191, !dbg !41
  %212 = add i64 %144, %194, !dbg !41
  %213 = add i64 %144, %197, !dbg !41
  %214 = add i64 %149, %200, !dbg !41
  %215 = add i64 %149, %203, !dbg !41
  %216 = add i64 %149, %206, !dbg !41
  %217 = add i64 %149, %209, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %3, i64 %210, !dbg !42
  %219 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !42
  %220 = getelementptr float, ptr addrspace(1) %3, i64 %212, !dbg !42
  %221 = getelementptr float, ptr addrspace(1) %3, i64 %213, !dbg !42
  %222 = getelementptr float, ptr addrspace(1) %3, i64 %214, !dbg !42
  %223 = getelementptr float, ptr addrspace(1) %3, i64 %215, !dbg !42
  %224 = getelementptr float, ptr addrspace(1) %3, i64 %216, !dbg !42
  %225 = getelementptr float, ptr addrspace(1) %3, i64 %217, !dbg !42
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !43
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %219, i1 true) #1, !dbg !43
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !43
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !43
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !43
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !43
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !43
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #1, !dbg !43
  %234 = getelementptr float, ptr addrspace(1) %4, i64 %210, !dbg !44
  %235 = getelementptr float, ptr addrspace(1) %4, i64 %211, !dbg !44
  %236 = getelementptr float, ptr addrspace(1) %4, i64 %212, !dbg !44
  %237 = getelementptr float, ptr addrspace(1) %4, i64 %213, !dbg !44
  %238 = getelementptr float, ptr addrspace(1) %4, i64 %214, !dbg !44
  %239 = getelementptr float, ptr addrspace(1) %4, i64 %215, !dbg !44
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %216, !dbg !44
  %241 = getelementptr float, ptr addrspace(1) %4, i64 %217, !dbg !44
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !45
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 true) #1, !dbg !45
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !45
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #1, !dbg !45
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !45
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 true) #1, !dbg !45
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #1, !dbg !45
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 true) #1, !dbg !45
  %250 = lshr i64 %82, 58, !dbg !46
  %251 = and i64 %250, 32, !dbg !46
  %252 = add i64 %251, %82, !dbg !46
  %253 = lshr i64 %86, 58, !dbg !46
  %254 = and i64 %253, 32, !dbg !46
  %255 = add i64 %254, %86, !dbg !46
  %256 = shl i64 %252, 5, !dbg !47
  %257 = shl i64 %255, 5, !dbg !47
  %258 = add i64 %256, %142, !dbg !48
  %259 = add i64 %258, %116, !dbg !49
  %260 = add i64 %258, %119, !dbg !49
  %261 = add i64 %258, %122, !dbg !49
  %262 = add i64 %258, %125, !dbg !49
  %263 = add i64 %257, %143, !dbg !48
  %264 = add i64 %263, %128, !dbg !49
  %265 = add i64 %263, %131, !dbg !49
  %266 = add i64 %263, %134, !dbg !49
  %267 = add i64 %263, %137, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %3, i64 %259, !dbg !50
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %260, !dbg !50
  %270 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !50
  %271 = getelementptr float, ptr addrspace(1) %3, i64 %262, !dbg !50
  %272 = getelementptr float, ptr addrspace(1) %3, i64 %264, !dbg !50
  %273 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !50
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %266, !dbg !50
  %275 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !50
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !51
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %269, i1 true) #1, !dbg !51
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %270, i1 true) #1, !dbg !51
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %271, i1 true) #1, !dbg !51
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %272, i1 true) #1, !dbg !51
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %273, i1 true) #1, !dbg !51
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %274, i1 true) #1, !dbg !51
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %275, i1 true) #1, !dbg !51
  %284 = getelementptr float, ptr addrspace(1) %4, i64 %259, !dbg !52
  %285 = getelementptr float, ptr addrspace(1) %4, i64 %260, !dbg !52
  %286 = getelementptr float, ptr addrspace(1) %4, i64 %261, !dbg !52
  %287 = getelementptr float, ptr addrspace(1) %4, i64 %262, !dbg !52
  %288 = getelementptr float, ptr addrspace(1) %4, i64 %264, !dbg !52
  %289 = getelementptr float, ptr addrspace(1) %4, i64 %265, !dbg !52
  %290 = getelementptr float, ptr addrspace(1) %4, i64 %266, !dbg !52
  %291 = getelementptr float, ptr addrspace(1) %4, i64 %267, !dbg !52
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !53
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !53
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !53
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !53
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !53
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %289, i1 true) #1, !dbg !53
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #1, !dbg !53
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %291, i1 true) #1, !dbg !53
  %300 = add i64 %258, %188, !dbg !54
  %301 = add i64 %258, %191, !dbg !54
  %302 = add i64 %258, %194, !dbg !54
  %303 = add i64 %258, %197, !dbg !54
  %304 = add i64 %263, %200, !dbg !54
  %305 = add i64 %263, %203, !dbg !54
  %306 = add i64 %263, %206, !dbg !54
  %307 = add i64 %263, %209, !dbg !54
  %308 = getelementptr float, ptr addrspace(1) %3, i64 %300, !dbg !55
  %309 = getelementptr float, ptr addrspace(1) %3, i64 %301, !dbg !55
  %310 = getelementptr float, ptr addrspace(1) %3, i64 %302, !dbg !55
  %311 = getelementptr float, ptr addrspace(1) %3, i64 %303, !dbg !55
  %312 = getelementptr float, ptr addrspace(1) %3, i64 %304, !dbg !55
  %313 = getelementptr float, ptr addrspace(1) %3, i64 %305, !dbg !55
  %314 = getelementptr float, ptr addrspace(1) %3, i64 %306, !dbg !55
  %315 = getelementptr float, ptr addrspace(1) %3, i64 %307, !dbg !55
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #1, !dbg !56
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %309, i1 true) #1, !dbg !56
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #1, !dbg !56
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 true) #1, !dbg !56
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #1, !dbg !56
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 true) #1, !dbg !56
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 true) #1, !dbg !56
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 true) #1, !dbg !56
  %324 = getelementptr float, ptr addrspace(1) %4, i64 %300, !dbg !57
  %325 = getelementptr float, ptr addrspace(1) %4, i64 %301, !dbg !57
  %326 = getelementptr float, ptr addrspace(1) %4, i64 %302, !dbg !57
  %327 = getelementptr float, ptr addrspace(1) %4, i64 %303, !dbg !57
  %328 = getelementptr float, ptr addrspace(1) %4, i64 %304, !dbg !57
  %329 = getelementptr float, ptr addrspace(1) %4, i64 %305, !dbg !57
  %330 = getelementptr float, ptr addrspace(1) %4, i64 %306, !dbg !57
  %331 = getelementptr float, ptr addrspace(1) %4, i64 %307, !dbg !57
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 true) #1, !dbg !58
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 true) #1, !dbg !58
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 true) #1, !dbg !58
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 true) #1, !dbg !58
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 true) #1, !dbg !58
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 true) #1, !dbg !58
  %338 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 true) #1, !dbg !58
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 true) #1, !dbg !58
  %340 = insertelement <2 x i32> poison, i32 %276, i64 0, !dbg !51
  %341 = insertelement <2 x i32> %340, i32 %162, i64 1, !dbg !51
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !51
  %343 = fcmp ogt <2 x float> %342, zeroinitializer, !dbg !59
  %344 = fmul <2 x float> %342, splat (float 0x3FC99999A0000000), !dbg !60
  %345 = select <2 x i1> %343, <2 x float> %342, <2 x float> %344, !dbg !61
  %346 = insertelement <2 x i32> poison, i32 %292, i64 0, !dbg !53
  %347 = insertelement <2 x i32> %346, i32 %178, i64 1, !dbg !53
  %348 = bitcast <2 x i32> %347 to <2 x float>, !dbg !53
  %349 = fadd <2 x float> %345, %348, !dbg !62
  %350 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !56
  %351 = insertelement <2 x i32> %350, i32 %226, i64 1, !dbg !56
  %352 = bitcast <2 x i32> %351 to <2 x float>, !dbg !56
  %353 = fcmp ogt <2 x float> %352, zeroinitializer, !dbg !63
  %354 = fmul <2 x float> %352, splat (float 0x3FC99999A0000000), !dbg !64
  %355 = select <2 x i1> %353, <2 x float> %352, <2 x float> %354, !dbg !65
  %356 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !58
  %357 = insertelement <2 x i32> %356, i32 %242, i64 1, !dbg !58
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !58
  %359 = fadd <2 x float> %355, %358, !dbg !66
  %360 = fsub <2 x float> %359, %349, !dbg !67
  %361 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !68
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !68
  %363 = shufflevector <2 x float> %362, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %364 = fmul <2 x float> %360, %363, !dbg !68
  %365 = fadd <2 x float> %349, %364, !dbg !69
  %366 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !51
  %367 = insertelement <2 x i32> %366, i32 %163, i64 1, !dbg !51
  %368 = bitcast <2 x i32> %367 to <2 x float>, !dbg !51
  %369 = fcmp ogt <2 x float> %368, zeroinitializer, !dbg !59
  %370 = fmul <2 x float> %368, splat (float 0x3FC99999A0000000), !dbg !60
  %371 = select <2 x i1> %369, <2 x float> %368, <2 x float> %370, !dbg !61
  %372 = insertelement <2 x i32> poison, i32 %293, i64 0, !dbg !53
  %373 = insertelement <2 x i32> %372, i32 %179, i64 1, !dbg !53
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !53
  %375 = fadd <2 x float> %371, %374, !dbg !62
  %376 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !56
  %377 = insertelement <2 x i32> %376, i32 %227, i64 1, !dbg !56
  %378 = bitcast <2 x i32> %377 to <2 x float>, !dbg !56
  %379 = fcmp ogt <2 x float> %378, zeroinitializer, !dbg !63
  %380 = fmul <2 x float> %378, splat (float 0x3FC99999A0000000), !dbg !64
  %381 = select <2 x i1> %379, <2 x float> %378, <2 x float> %380, !dbg !65
  %382 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !58
  %383 = insertelement <2 x i32> %382, i32 %243, i64 1, !dbg !58
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !58
  %385 = fadd <2 x float> %381, %384, !dbg !66
  %386 = fsub <2 x float> %385, %375, !dbg !67
  %387 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !68
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !68
  %389 = shufflevector <2 x float> %388, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %390 = fmul <2 x float> %386, %389, !dbg !68
  %391 = fadd <2 x float> %375, %390, !dbg !69
  %392 = insertelement <2 x i32> poison, i32 %278, i64 0, !dbg !51
  %393 = insertelement <2 x i32> %392, i32 %164, i64 1, !dbg !51
  %394 = bitcast <2 x i32> %393 to <2 x float>, !dbg !51
  %395 = fcmp ogt <2 x float> %394, zeroinitializer, !dbg !59
  %396 = fmul <2 x float> %394, splat (float 0x3FC99999A0000000), !dbg !60
  %397 = select <2 x i1> %395, <2 x float> %394, <2 x float> %396, !dbg !61
  %398 = insertelement <2 x i32> poison, i32 %294, i64 0, !dbg !53
  %399 = insertelement <2 x i32> %398, i32 %180, i64 1, !dbg !53
  %400 = bitcast <2 x i32> %399 to <2 x float>, !dbg !53
  %401 = fadd <2 x float> %397, %400, !dbg !62
  %402 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !56
  %403 = insertelement <2 x i32> %402, i32 %228, i64 1, !dbg !56
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !56
  %405 = fcmp ogt <2 x float> %404, zeroinitializer, !dbg !63
  %406 = fmul <2 x float> %404, splat (float 0x3FC99999A0000000), !dbg !64
  %407 = select <2 x i1> %405, <2 x float> %404, <2 x float> %406, !dbg !65
  %408 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !58
  %409 = insertelement <2 x i32> %408, i32 %244, i64 1, !dbg !58
  %410 = bitcast <2 x i32> %409 to <2 x float>, !dbg !58
  %411 = fadd <2 x float> %407, %410, !dbg !66
  %412 = fsub <2 x float> %411, %401, !dbg !67
  %413 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !68
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !68
  %415 = shufflevector <2 x float> %414, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %416 = fmul <2 x float> %412, %415, !dbg !68
  %417 = fadd <2 x float> %401, %416, !dbg !69
  %418 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !51
  %419 = insertelement <2 x i32> %418, i32 %165, i64 1, !dbg !51
  %420 = bitcast <2 x i32> %419 to <2 x float>, !dbg !51
  %421 = fcmp ogt <2 x float> %420, zeroinitializer, !dbg !59
  %422 = fmul <2 x float> %420, splat (float 0x3FC99999A0000000), !dbg !60
  %423 = select <2 x i1> %421, <2 x float> %420, <2 x float> %422, !dbg !61
  %424 = insertelement <2 x i32> poison, i32 %295, i64 0, !dbg !53
  %425 = insertelement <2 x i32> %424, i32 %181, i64 1, !dbg !53
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !53
  %427 = fadd <2 x float> %423, %426, !dbg !62
  %428 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !56
  %429 = insertelement <2 x i32> %428, i32 %229, i64 1, !dbg !56
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !56
  %431 = fcmp ogt <2 x float> %430, zeroinitializer, !dbg !63
  %432 = fmul <2 x float> %430, splat (float 0x3FC99999A0000000), !dbg !64
  %433 = select <2 x i1> %431, <2 x float> %430, <2 x float> %432, !dbg !65
  %434 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !58
  %435 = insertelement <2 x i32> %434, i32 %245, i64 1, !dbg !58
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !58
  %437 = fadd <2 x float> %433, %436, !dbg !66
  %438 = fsub <2 x float> %437, %427, !dbg !67
  %439 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !68
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !68
  %441 = shufflevector <2 x float> %440, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %442 = fmul <2 x float> %438, %441, !dbg !68
  %443 = fadd <2 x float> %427, %442, !dbg !69
  %444 = insertelement <2 x i32> poison, i32 %280, i64 0, !dbg !51
  %445 = insertelement <2 x i32> %444, i32 %166, i64 1, !dbg !51
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !51
  %447 = fcmp ogt <2 x float> %446, zeroinitializer, !dbg !59
  %448 = fmul <2 x float> %446, splat (float 0x3FC99999A0000000), !dbg !60
  %449 = select <2 x i1> %447, <2 x float> %446, <2 x float> %448, !dbg !61
  %450 = insertelement <2 x i32> poison, i32 %296, i64 0, !dbg !53
  %451 = insertelement <2 x i32> %450, i32 %182, i64 1, !dbg !53
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !53
  %453 = fadd <2 x float> %449, %452, !dbg !62
  %454 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !56
  %455 = insertelement <2 x i32> %454, i32 %230, i64 1, !dbg !56
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !56
  %457 = fcmp ogt <2 x float> %456, zeroinitializer, !dbg !63
  %458 = fmul <2 x float> %456, splat (float 0x3FC99999A0000000), !dbg !64
  %459 = select <2 x i1> %457, <2 x float> %456, <2 x float> %458, !dbg !65
  %460 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !58
  %461 = insertelement <2 x i32> %460, i32 %246, i64 1, !dbg !58
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !58
  %463 = fadd <2 x float> %459, %462, !dbg !66
  %464 = fsub <2 x float> %463, %453, !dbg !67
  %465 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !68
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !68
  %467 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %468 = fmul <2 x float> %464, %467, !dbg !68
  %469 = fadd <2 x float> %453, %468, !dbg !69
  %470 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !51
  %471 = insertelement <2 x i32> %470, i32 %167, i64 1, !dbg !51
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !51
  %473 = fcmp ogt <2 x float> %472, zeroinitializer, !dbg !59
  %474 = fmul <2 x float> %472, splat (float 0x3FC99999A0000000), !dbg !60
  %475 = select <2 x i1> %473, <2 x float> %472, <2 x float> %474, !dbg !61
  %476 = insertelement <2 x i32> poison, i32 %297, i64 0, !dbg !53
  %477 = insertelement <2 x i32> %476, i32 %183, i64 1, !dbg !53
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !53
  %479 = fadd <2 x float> %475, %478, !dbg !62
  %480 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !56
  %481 = insertelement <2 x i32> %480, i32 %231, i64 1, !dbg !56
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !56
  %483 = fcmp ogt <2 x float> %482, zeroinitializer, !dbg !63
  %484 = fmul <2 x float> %482, splat (float 0x3FC99999A0000000), !dbg !64
  %485 = select <2 x i1> %483, <2 x float> %482, <2 x float> %484, !dbg !65
  %486 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !58
  %487 = insertelement <2 x i32> %486, i32 %247, i64 1, !dbg !58
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !58
  %489 = fadd <2 x float> %485, %488, !dbg !66
  %490 = fsub <2 x float> %489, %479, !dbg !67
  %491 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !68
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !68
  %493 = shufflevector <2 x float> %492, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %494 = fmul <2 x float> %490, %493, !dbg !68
  %495 = fadd <2 x float> %479, %494, !dbg !69
  %496 = insertelement <2 x i32> poison, i32 %282, i64 0, !dbg !51
  %497 = insertelement <2 x i32> %496, i32 %168, i64 1, !dbg !51
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !51
  %499 = fcmp ogt <2 x float> %498, zeroinitializer, !dbg !59
  %500 = fmul <2 x float> %498, splat (float 0x3FC99999A0000000), !dbg !60
  %501 = select <2 x i1> %499, <2 x float> %498, <2 x float> %500, !dbg !61
  %502 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !53
  %503 = insertelement <2 x i32> %502, i32 %184, i64 1, !dbg !53
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !53
  %505 = fadd <2 x float> %501, %504, !dbg !62
  %506 = insertelement <2 x i32> poison, i32 %322, i64 0, !dbg !56
  %507 = insertelement <2 x i32> %506, i32 %232, i64 1, !dbg !56
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !56
  %509 = fcmp ogt <2 x float> %508, zeroinitializer, !dbg !63
  %510 = fmul <2 x float> %508, splat (float 0x3FC99999A0000000), !dbg !64
  %511 = select <2 x i1> %509, <2 x float> %508, <2 x float> %510, !dbg !65
  %512 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !58
  %513 = insertelement <2 x i32> %512, i32 %248, i64 1, !dbg !58
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !58
  %515 = fadd <2 x float> %511, %514, !dbg !66
  %516 = fsub <2 x float> %515, %505, !dbg !67
  %517 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !68
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !68
  %519 = shufflevector <2 x float> %518, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %520 = fmul <2 x float> %516, %519, !dbg !68
  %521 = fadd <2 x float> %505, %520, !dbg !69
  %522 = insertelement <2 x i32> poison, i32 %283, i64 0, !dbg !51
  %523 = insertelement <2 x i32> %522, i32 %169, i64 1, !dbg !51
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !51
  %525 = fcmp ogt <2 x float> %524, zeroinitializer, !dbg !59
  %526 = fmul <2 x float> %524, splat (float 0x3FC99999A0000000), !dbg !60
  %527 = select <2 x i1> %525, <2 x float> %524, <2 x float> %526, !dbg !61
  %528 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !53
  %529 = insertelement <2 x i32> %528, i32 %185, i64 1, !dbg !53
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !53
  %531 = fadd <2 x float> %527, %530, !dbg !62
  %532 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !56
  %533 = insertelement <2 x i32> %532, i32 %233, i64 1, !dbg !56
  %534 = bitcast <2 x i32> %533 to <2 x float>, !dbg !56
  %535 = fcmp ogt <2 x float> %534, zeroinitializer, !dbg !63
  %536 = fmul <2 x float> %534, splat (float 0x3FC99999A0000000), !dbg !64
  %537 = select <2 x i1> %535, <2 x float> %534, <2 x float> %536, !dbg !65
  %538 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !58
  %539 = insertelement <2 x i32> %538, i32 %249, i64 1, !dbg !58
  %540 = bitcast <2 x i32> %539 to <2 x float>, !dbg !58
  %541 = fadd <2 x float> %537, %540, !dbg !66
  %542 = fsub <2 x float> %541, %531, !dbg !67
  %543 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !68
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !68
  %545 = shufflevector <2 x float> %544, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %546 = fmul <2 x float> %542, %545, !dbg !68
  %547 = fadd <2 x float> %531, %546, !dbg !69
  %548 = extractelement <2 x float> %365, i64 0, !dbg !70
  %549 = extractelement <2 x float> %365, i64 1, !dbg !71
  %550 = fsub float %548, %549, !dbg !70
  %551 = extractelement <2 x float> %391, i64 0, !dbg !70
  %552 = extractelement <2 x float> %391, i64 1, !dbg !71
  %553 = fsub float %551, %552, !dbg !70
  %554 = extractelement <2 x float> %417, i64 0, !dbg !70
  %555 = extractelement <2 x float> %417, i64 1, !dbg !71
  %556 = fsub float %554, %555, !dbg !70
  %557 = extractelement <2 x float> %443, i64 0, !dbg !70
  %558 = extractelement <2 x float> %443, i64 1, !dbg !71
  %559 = fsub float %557, %558, !dbg !70
  %560 = extractelement <2 x float> %469, i64 0, !dbg !70
  %561 = extractelement <2 x float> %469, i64 1, !dbg !71
  %562 = fsub float %560, %561, !dbg !70
  %563 = extractelement <2 x float> %495, i64 0, !dbg !70
  %564 = extractelement <2 x float> %495, i64 1, !dbg !71
  %565 = fsub float %563, %564, !dbg !70
  %566 = extractelement <2 x float> %521, i64 0, !dbg !70
  %567 = extractelement <2 x float> %521, i64 1, !dbg !71
  %568 = fsub float %566, %567, !dbg !70
  %569 = extractelement <2 x float> %547, i64 0, !dbg !70
  %570 = extractelement <2 x float> %547, i64 1, !dbg !71
  %571 = fsub float %569, %570, !dbg !70
  %572 = fmul float %550, %93, !dbg !72
  %573 = fmul float %553, %95, !dbg !72
  %574 = fmul float %556, %97, !dbg !72
  %575 = fmul float %559, %99, !dbg !72
  %576 = fmul float %562, %101, !dbg !72
  %577 = fmul float %565, %103, !dbg !72
  %578 = fmul float %568, %105, !dbg !72
  %579 = fmul float %571, %107, !dbg !72
  %580 = fadd float %549, %572, !dbg !71
  %581 = fadd float %552, %573, !dbg !71
  %582 = fadd float %555, %574, !dbg !71
  %583 = fadd float %558, %575, !dbg !71
  %584 = fadd float %561, %576, !dbg !71
  %585 = fadd float %564, %577, !dbg !71
  %586 = fadd float %567, %578, !dbg !71
  %587 = fadd float %570, %579, !dbg !71
  %588 = sext i32 %16 to i64, !dbg !73
  %589 = getelementptr float, ptr addrspace(1) %0, i64 %588, !dbg !73
  %590 = sext i32 %18 to i64, !dbg !73
  %591 = getelementptr float, ptr addrspace(1) %0, i64 %590, !dbg !73
  %592 = bitcast float %580 to i32, !dbg !74
  %593 = bitcast float %581 to i32, !dbg !74
  %594 = bitcast float %582 to i32, !dbg !74
  %595 = bitcast float %583 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %592, i32 %593, i32 %594, i32 %595, ptr addrspace(1) %589, i1 true) #1, !dbg !74
  %596 = bitcast float %584 to i32, !dbg !74
  %597 = bitcast float %585 to i32, !dbg !74
  %598 = bitcast float %586 to i32, !dbg !74
  %599 = bitcast float %587 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %596, i32 %597, i32 %598, i32 %599, ptr addrspace(1) %591, i1 true) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c25bg2whclgizrlcsdbuckwxfxfy6pnywfo5nlvvwp3qsd6fl2ho.py", directory: "inductor_cache/25")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_35", linkageName: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sub_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 40, scope: !7)
!33 = !DILocation(line: 41, column: 52, scope: !7)
!34 = !DILocation(line: 41, column: 47, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 57, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 58, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 49, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 59, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 59, scope: !7)
!46 = !DILocation(line: 63, column: 35, scope: !7)
!47 = !DILocation(line: 64, column: 41, scope: !7)
!48 = !DILocation(line: 64, column: 38, scope: !7)
!49 = !DILocation(line: 64, column: 49, scope: !7)
!50 = !DILocation(line: 64, column: 31, scope: !7)
!51 = !DILocation(line: 64, column: 59, scope: !7)
!52 = !DILocation(line: 68, column: 31, scope: !7)
!53 = !DILocation(line: 68, column: 59, scope: !7)
!54 = !DILocation(line: 70, column: 50, scope: !7)
!55 = !DILocation(line: 70, column: 31, scope: !7)
!56 = !DILocation(line: 70, column: 60, scope: !7)
!57 = !DILocation(line: 74, column: 31, scope: !7)
!58 = !DILocation(line: 74, column: 60, scope: !7)
!59 = !DILocation(line: 65, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 35, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 20, scope: !7)
!64 = !DILocation(line: 72, column: 20, scope: !7)
!65 = !DILocation(line: 73, column: 35, scope: !7)
!66 = !DILocation(line: 75, column: 20, scope: !7)
!67 = !DILocation(line: 76, column: 20, scope: !7)
!68 = !DILocation(line: 77, column: 20, scope: !7)
!69 = !DILocation(line: 78, column: 20, scope: !7)
!70 = !DILocation(line: 79, column: 20, scope: !7)
!71 = !DILocation(line: 81, column: 20, scope: !7)
!72 = !DILocation(line: 80, column: 20, scope: !7)
!73 = !DILocation(line: 82, column: 28, scope: !7)
!74 = !DILocation(line: 82, column: 40, scope: !7)
!75 = !DILocation(line: 82, column: 4, scope: !7)
