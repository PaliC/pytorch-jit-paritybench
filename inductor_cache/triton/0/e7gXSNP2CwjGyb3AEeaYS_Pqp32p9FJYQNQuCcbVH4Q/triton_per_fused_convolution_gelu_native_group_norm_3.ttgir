#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":41:24)
#loc26 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":49:26)
#loc44 = loc(callsite(#loc1 at #loc19))
#loc47 = loc(callsite(#loc1 at #loc26))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_convolution_gelu_native_group_norm_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg5: i32 loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0), %arg6: i32 loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<2> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.707106769> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e-01> : tensor<1x8xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<8.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %3, %cst : tensor<1x8xi32, #blocked> loc(#loc5)
    %5 = arith.muli %0, %c8_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x8xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x8xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x8xi1, #blocked> loc(#loc9)
    %11 = tt.load %9, %10, %cst_0 : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = tt.addptr %12, %4 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc10)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = tt.addptr %15, %4 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc12)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc14)
    %19 = tt.addptr %18, %4 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc14)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = arith.addf %11, %14 : tensor<1x8xf32, #blocked> loc(#loc16)
    %22 = arith.select %10, %21, %cst_0 : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc17)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc19)), %arg8: f32 loc(callsite(#loc1 at #loc19))):
      %46 = arith.addf %arg7, %arg8 : f32 loc(#loc48)
      tt.reduce.return %46 : f32 loc(#loc43)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc21)
    %25 = arith.divf %24, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc22)
    %26 = tt.broadcast %25 : tensor<1x1xf32, #blocked> -> tensor<1x8xf32, #blocked> loc(#loc23)
    %27 = arith.subf %21, %26 : tensor<1x8xf32, #blocked> loc(#loc23)
    %28 = arith.mulf %27, %27 : tensor<1x8xf32, #blocked> loc(#loc24)
    %29 = arith.select %10, %28, %cst_0 : tensor<1x8xi1, #blocked>, tensor<1x8xf32, #blocked> loc(#loc25)
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc26)), %arg8: f32 loc(callsite(#loc1 at #loc26))):
      %46 = arith.addf %arg7, %arg8 : f32 loc(#loc49)
      tt.reduce.return %46 : f32 loc(#loc46)
    }) : (tensor<1x8xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc46)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %32 = arith.divf %31, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc28)
    %33 = arith.addf %32, %cst_4 : tensor<1x1xf32, #blocked> loc(#loc29)
    %34 = tt.extern_elementwise %33 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc30)
    %35 = tt.broadcast %34 : tensor<1x1xf32, #blocked> -> tensor<1x8xf32, #blocked> loc(#loc31)
    %36 = arith.mulf %27, %35 : tensor<1x8xf32, #blocked> loc(#loc31)
    %37 = arith.mulf %36, %17 : tensor<1x8xf32, #blocked> loc(#loc32)
    %38 = arith.addf %37, %20 : tensor<1x8xf32, #blocked> loc(#loc33)
    %39 = arith.mulf %38, %cst_3 : tensor<1x8xf32, #blocked> loc(#loc34)
    %40 = arith.mulf %38, %cst_2 : tensor<1x8xf32, #blocked> loc(#loc35)
    %41 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_erff"} : (tensor<1x8xf32, #blocked>) -> tensor<1x8xf32, #blocked> loc(#loc36)
    %42 = arith.addf %41, %cst_1 : tensor<1x8xf32, #blocked> loc(#loc37)
    %43 = arith.mulf %39, %42 : tensor<1x8xf32, #blocked> loc(#loc38)
    tt.store %9, %21, %10 : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc39)
    %44 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc40)
    %45 = tt.addptr %44, %7 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc40)
    tt.store %45, %43, %10 : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":23:28)
#loc3 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":25:21)
#loc4 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":26:34)
#loc5 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":31:19)
#loc6 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":32:41)
#loc7 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":32:39)
#loc8 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":32:34)
#loc9 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":32:46)
#loc10 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":33:30)
#loc11 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":33:35)
#loc12 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":34:31)
#loc13 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":34:36)
#loc14 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":35:31)
#loc15 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":35:36)
#loc16 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":36:18)
#loc17 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":40:33)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":41:27)
#loc22 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":44:19)
#loc23 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":45:19)
#loc24 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":46:20)
#loc25 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":48:35)
#loc27 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":49:29)
#loc28 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":52:20)
#loc29 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":54:20)
#loc30 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":55:28)
#loc31 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":56:20)
#loc32 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":57:20)
#loc33 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":58:20)
#loc34 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":60:20)
#loc35 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":62:20)
#loc36 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":63:26)
#loc37 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":65:20)
#loc38 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":66:20)
#loc39 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":67:46)
#loc40 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":68:28)
#loc41 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":68:47)
#loc42 = loc("inductor_cache/fm/cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py":68:4)
#loc43 = loc(callsite(#loc18 at #loc19))
#loc45 = loc(callsite(#loc20 at #loc18))
#loc46 = loc(callsite(#loc18 at #loc26))
#loc48 = loc(callsite(#loc45 at #loc19))
#loc49 = loc(callsite(#loc45 at #loc26))
