; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_gelu_native_group_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %9 = icmp slt i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = lshr i32 %11, 1, !dbg !13
  %13 = shl i32 %8, 3, !dbg !14
  %14 = or disjoint i32 %13, %11, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %9, i32 0, i1 %9) #4, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = zext nneg i32 %12 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #4, !dbg !21
  %25 = bitcast i32 %24 to float, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = fadd float %18, %22, !dbg !24
  %30 = select i1 %9, float %29, float 0.000000e+00, !dbg !25
  %31 = bitcast float %30 to i32, !dbg !26
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 4, i32 31), !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = fadd float %30, %33, !dbg !30
  %35 = bitcast float %34 to i32, !dbg !26
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 2, i32 31), !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = fadd float %34, %37, !dbg !30
  %39 = bitcast float %38 to i32, !dbg !26
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 1, i32 31), !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = fadd float %38, %41, !dbg !30
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 8.000000e+00) #4, !dbg !32
  %44 = fsub float %29, %43, !dbg !33
  %45 = fmul float %44, %44, !dbg !34
  %46 = select i1 %9, float %45, float 0.000000e+00, !dbg !35
  %47 = bitcast float %46 to i32, !dbg !36
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !36
  %49 = bitcast i32 %48 to float, !dbg !36
  %50 = fadd float %46, %49, !dbg !38
  %51 = bitcast float %50 to i32, !dbg !36
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 2, i32 31), !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = fadd float %50, %53, !dbg !38
  %55 = bitcast float %54 to i32, !dbg !36
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 1, i32 31), !dbg !36
  %57 = bitcast i32 %56 to float, !dbg !36
  %58 = fadd float %54, %57, !dbg !38
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %58, float 8.000000e+00) #4, !dbg !39
  %60 = fadd float %59, 0x3EE4F8B580000000, !dbg !40
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %61, 0, !dbg !41
  br i1 %.not.i, label %64, label %62, !dbg !41

62:                                               ; preds = %7
  %63 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

64:                                               ; preds = %7
  %65 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %62, %64
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], !dbg !41
  %66 = fmul float %44, %.0.i, !dbg !42
  %67 = fmul float %66, %25, !dbg !43
  %68 = fadd float %67, %28, !dbg !44
  %69 = fmul float %68, 0x3FE6A09E60000000, !dbg !45
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not.i1 = icmp eq i32 %70, 0, !dbg !46
  %71 = tail call float @llvm.nvvm.fabs.ftz.f(float %69) #4, !dbg !46
  %72 = tail call float @llvm.nvvm.fabs.f(float %69) #4, !dbg !46
  %.0.i2 = select i1 %.not.i1, float %72, float %71, !dbg !46
  %73 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !46
  br i1 %73, label %__nv_fabsf.exit1.i, label %75, !dbg !46

__nv_fabsf.exit1.i:                               ; preds = %__nv_rsqrtf.exit
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not1.i = icmp eq i32 %74, 0, !dbg !46
  %.01.i = select i1 %.not1.i, float %72, float %71, !dbg !46
  br label %__internal_fmad.exit.i, !dbg !46

75:                                               ; preds = %__nv_rsqrtf.exit
  %76 = fmul float %69, %69, !dbg !46
  br label %__internal_fmad.exit.i, !dbg !46

__internal_fmad.exit.i:                           ; preds = %75, %__nv_fabsf.exit1.i
  %77 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %75 ], !dbg !46
  %78 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %75 ], !dbg !46
  %79 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %75 ], !dbg !46
  %80 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %75 ], !dbg !46
  %81 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %75 ], !dbg !46
  %82 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %75 ], !dbg !46
  %83 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %75 ], !dbg !46
  %84 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %76, %75 ], !dbg !46
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not2.i = icmp eq i32 %85, 0, !dbg !46
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %83, float %84, float %82) #4, !dbg !46
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %83, float %84, float %82) #4, !dbg !46
  %.02.i = select i1 %.not2.i, float %87, float %86, !dbg !46
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not3.i = icmp eq i32 %88, 0, !dbg !46
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %84, float %81) #4, !dbg !46
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %84, float %81) #4, !dbg !46
  %.03.i = select i1 %.not3.i, float %90, float %89, !dbg !46
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not4.i = icmp eq i32 %91, 0, !dbg !46
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %84, float %80) #4, !dbg !46
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %84, float %80) #4, !dbg !46
  %.04.i = select i1 %.not4.i, float %93, float %92, !dbg !46
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not5.i = icmp eq i32 %94, 0, !dbg !46
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %84, float %79) #4, !dbg !46
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %84, float %79) #4, !dbg !46
  %.05.i = select i1 %.not5.i, float %96, float %95, !dbg !46
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not6.i = icmp eq i32 %97, 0, !dbg !46
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %84, float %78) #4, !dbg !46
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %84, float %78) #4, !dbg !46
  %.06.i = select i1 %.not6.i, float %99, float %98, !dbg !46
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not7.i = icmp eq i32 %100, 0, !dbg !46
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %84, float %77) #4, !dbg !46
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %84, float %77) #4, !dbg !46
  %.07.i = select i1 %.not7.i, float %102, float %101, !dbg !46
  %103 = fneg float %84, !dbg !46
  %104 = select i1 %73, float %103, float %69, !dbg !46
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !46
  %.not8.i = icmp eq i32 %105, 0, !dbg !46
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %104, float %104) #4, !dbg !46
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %104, float %104) #4, !dbg !46
  %.08.i = select i1 %.not8.i, float %107, float %106, !dbg !46
  br i1 %73, label %108, label %__nv_erff.exit, !dbg !46

108:                                              ; preds = %__internal_fmad.exit.i
  %109 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !46
  %110 = fsub float 1.000000e+00, %109, !dbg !46
  %111 = bitcast float %110 to i32, !dbg !46
  %112 = bitcast float %69 to i32, !dbg !46
  %113 = and i32 %112, -2147483648, !dbg !46
  %114 = or i32 %113, %111, !dbg !46
  %115 = bitcast i32 %114 to float, !dbg !46
  br label %__nv_erff.exit, !dbg !46

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %108
  %r.0.i = phi float [ %115, %108 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !46
  %116 = fmul float %68, 5.000000e-01, !dbg !47
  %117 = fadd float %r.0.i, 1.000000e+00, !dbg !48
  %118 = fmul float %116, %117, !dbg !49
  %119 = and i32 %10, 56, !dbg !50
  %120 = icmp eq i32 %119, 0, !dbg !50
  %121 = bitcast float %29 to i32, !dbg !50
  %122 = and i1 %120, %9, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %16, i1 %122) #4, !dbg !50
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !51
  %124 = bitcast float %118 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %122) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmu76gqtmtykihpngnv4dqi4ygh7h5676c662xoicq5hnzgdjzs.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_per_fused_convolution_gelu_native_group_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_gelu_native_group_norm_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_gelu_native_group_norm_3", linkageName: "triton_per_fused_convolution_gelu_native_group_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 41, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 46, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 31, scope: !7)
!21 = !DILocation(line: 34, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 33, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 41, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !37)
!37 = !DILocation(line: 49, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !37)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 54, column: 20, scope: !7)
!41 = !DILocation(line: 55, column: 28, scope: !7)
!42 = !DILocation(line: 56, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 26, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 67, column: 46, scope: !7)
!51 = !DILocation(line: 68, column: 28, scope: !7)
!52 = !DILocation(line: 68, column: 47, scope: !7)
!53 = !DILocation(line: 68, column: 4, scope: !7)
