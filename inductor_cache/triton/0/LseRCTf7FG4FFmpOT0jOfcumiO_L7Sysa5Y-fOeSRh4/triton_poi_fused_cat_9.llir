; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) nocapture readnone %9, ptr addrspace(1) nocapture readnone %10, ptr addrspace(1) %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, i32 %20) local_unnamed_addr !dbg !7 {
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %23 = shl i32 %22, 8, !dbg !11
  %24 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %25 = shl i32 %24, 1, !dbg !12
  %26 = and i32 %25, 254, !dbg !12
  %27 = or disjoint i32 %23, %26, !dbg !13
  %28 = or disjoint i32 %27, 1, !dbg !13
  %29 = icmp slt i32 %27, 1280, !dbg !14
  %30 = srem i32 %28, 20, !dbg !15
  %31 = sdiv i32 %27, 320, !dbg !16
  %32 = sdiv i32 %27, 20, !dbg !17
  %33 = sdiv i32 %27, 80, !dbg !18
  %34 = srem i32 %33, 4, !dbg !19
  %35 = srem i32 %32, 4, !dbg !20
  %36 = shl nsw i32 %30, 4, !dbg !21
  %37 = shl nsw i32 %31, 6, !dbg !22
  %38 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !23
  %39 = insertelement <2 x i32> %38, i32 %27, i64 1, !dbg !23
  %40 = srem <2 x i32> %39, <i32 16, i32 20>, !dbg !23
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !21
  %42 = icmp slt i32 %41, 4, !dbg !24
  %43 = shl nsw i32 %41, 4, !dbg !21
  %44 = insertelement <2 x i32> <i32 poison, i32 -4>, i32 %37, i64 0, !dbg !25
  %45 = add nsw <2 x i32> %44, %40, !dbg !25
  %46 = extractelement <2 x i32> %45, i64 0, !dbg !26
  %47 = add nsw i32 %46, %43, !dbg !27
  %48 = add nsw i32 %46, %36, !dbg !27
  %49 = sext i32 %47 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %48 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = and i1 %29, %42, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %53, i32 0, i1 %53) #1, !dbg !30
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53) #1, !dbg !30
  %56 = and i32 %41, -4, !dbg !31
  %57 = icmp eq i32 %56, 4, !dbg !31
  %58 = extractelement <2 x i32> %45, i64 1, !dbg !32
  %59 = shl nsw i32 %58, 4, !dbg !32
  %60 = add nsw i32 %46, %59, !dbg !33
  %61 = add nsw i32 %46, -64, !dbg !34
  %62 = add nsw i32 %61, %36, !dbg !33
  %63 = sext i32 %60 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !35
  %65 = sext i32 %62 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !35
  %67 = and i1 %29, %57, !dbg !36
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %67, i32 0, i1 %67) #1, !dbg !37
  %69 = bitcast i32 %68 to float, !dbg !37
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %67, i32 0, i1 %67) #1, !dbg !37
  %71 = bitcast i32 %70 to float, !dbg !37
  %72 = sext i32 %34 to i64, !dbg !38
  %73 = getelementptr i64, ptr addrspace(1) %2, i64 %72, !dbg !38
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %73, i1 %67, i1 %67) #1, !dbg !39
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %73, i1 %67, i1 %67) #1, !dbg !39
  %76 = lshr i64 %74, 62, !dbg !40
  %77 = and i64 %76, 2, !dbg !40
  %78 = add i64 %77, %74, !dbg !40
  %79 = sext i32 %35 to i64, !dbg !41
  %80 = getelementptr i64, ptr addrspace(1) %3, i64 %79, !dbg !41
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %67, i1 %67) #1, !dbg !42
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %80, i1 %67, i1 %67) #1, !dbg !42
  %83 = lshr i64 %81, 62, !dbg !43
  %84 = and i64 %83, 2, !dbg !43
  %85 = add i64 %84, %81, !dbg !43
  %86 = shl i64 %78, 3, !dbg !44
  %87 = shl nsw i32 %31, 4, !dbg !45
  %88 = sext i32 %87 to i64, !dbg !46
  %89 = sext i32 %58 to i64, !dbg !47
  %.idx = shl i64 %85, 4, !dbg !48
  %90 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %86, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %88, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %89, !dbg !48
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #1, !dbg !49
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !49
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !49
  %97 = bitcast i32 %95 to float, !dbg !49
  %98 = bitcast i32 %96 to float, !dbg !49
  %99 = getelementptr i64, ptr addrspace(1) %5, i64 %79, !dbg !50
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %99, i1 %67, i1 %67) #1, !dbg !51
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %99, i1 %67, i1 %67) #1, !dbg !51
  %102 = lshr i64 %100, 62, !dbg !52
  %103 = and i64 %102, 2, !dbg !52
  %104 = add i64 %103, %100, !dbg !52
  %.idx1 = shl i64 %104, 4, !dbg !53
  %105 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !53
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %86, !dbg !53
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %88, !dbg !53
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %89, !dbg !53
  %109 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %108, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #1, !dbg !54
  %110 = extractvalue { i32, i32 } %109, 0, !dbg !54
  %111 = extractvalue { i32, i32 } %109, 1, !dbg !54
  %112 = bitcast i32 %110 to float, !dbg !54
  %113 = bitcast i32 %111 to float, !dbg !54
  %114 = fsub float %112, %97, !dbg !55
  %115 = fsub float %113, %98, !dbg !55
  %116 = getelementptr float, ptr addrspace(1) %6, i64 %79, !dbg !56
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %67, i32 0, i1 %67) #1, !dbg !57
  %118 = bitcast i32 %117 to float, !dbg !57
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %67, i32 0, i1 %67) #1, !dbg !57
  %120 = bitcast i32 %119 to float, !dbg !57
  %121 = fmul float %114, %118, !dbg !58
  %122 = fmul float %115, %120, !dbg !58
  %123 = fadd float %121, %97, !dbg !59
  %124 = fadd float %122, %98, !dbg !59
  %125 = fsub float %123, %69, !dbg !60
  %126 = fsub float %124, %71, !dbg !60
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !61
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %67, i32 0, i1 %67) #1, !dbg !62
  %129 = bitcast i32 %128 to float, !dbg !62
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %67, i32 0, i1 %67) #1, !dbg !62
  %131 = bitcast i32 %130 to float, !dbg !62
  %132 = fmul float %125, %129, !dbg !63
  %133 = fmul float %126, %131, !dbg !63
  %134 = fadd float %132, %69, !dbg !64
  %135 = fadd float %133, %71, !dbg !64
  %136 = icmp eq i32 %56, 8, !dbg !65
  %137 = add nsw i32 %41, -8, !dbg !66
  %138 = shl nsw i32 %137, 4, !dbg !67
  %139 = add nsw i32 %46, %138, !dbg !68
  %140 = add nsw i32 %46, -128, !dbg !69
  %141 = add nsw i32 %140, %36, !dbg !68
  %142 = sext i32 %139 to i64, !dbg !70
  %143 = getelementptr float, ptr addrspace(1) %8, i64 %142, !dbg !70
  %144 = sext i32 %141 to i64, !dbg !70
  %145 = getelementptr float, ptr addrspace(1) %8, i64 %144, !dbg !70
  %146 = and i1 %29, %136, !dbg !71
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %146, i32 0, i1 %146) #1, !dbg !72
  %148 = bitcast i32 %147 to float, !dbg !72
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %146, i32 0, i1 %146) #1, !dbg !72
  %150 = bitcast i32 %149 to float, !dbg !72
  %151 = shl nsw i32 %31, 2, !dbg !73
  %152 = add nsw i32 %151, %137, !dbg !74
  %153 = sext i32 %152 to i64, !dbg !75
  %154 = getelementptr float, ptr addrspace(1) %11, i64 %153, !dbg !75
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %154, i1 %146, i32 0, i1 %146, i32 0, i1 %146) #1, !dbg !76
  %156 = extractvalue { i32, i32 } %155, 0, !dbg !76
  %157 = extractvalue { i32, i32 } %155, 1, !dbg !76
  %158 = bitcast i32 %156 to float, !dbg !76
  %159 = bitcast i32 %157 to float, !dbg !76
  %160 = fsub float %158, %158, !dbg !77
  %161 = fsub float %159, %159, !dbg !77
  %162 = getelementptr float, ptr addrspace(1) %13, i64 %79, !dbg !78
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %146, i32 0, i1 %146) #1, !dbg !79
  %164 = bitcast i32 %163 to float, !dbg !79
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %146, i32 0, i1 %146) #1, !dbg !79
  %166 = bitcast i32 %165 to float, !dbg !79
  %167 = fmul float %160, %164, !dbg !80
  %168 = fmul float %161, %166, !dbg !80
  %169 = fadd float %167, %158, !dbg !81
  %170 = fadd float %168, %159, !dbg !81
  %171 = fsub float %169, %148, !dbg !82
  %172 = fsub float %170, %150, !dbg !82
  %173 = getelementptr float, ptr addrspace(1) %14, i64 %72, !dbg !83
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %146, i32 0, i1 %146) #1, !dbg !84
  %175 = bitcast i32 %174 to float, !dbg !84
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %146, i32 0, i1 %146) #1, !dbg !84
  %177 = bitcast i32 %176 to float, !dbg !84
  %178 = fmul float %171, %175, !dbg !85
  %179 = fmul float %172, %177, !dbg !85
  %180 = fadd float %178, %148, !dbg !86
  %181 = fadd float %179, %150, !dbg !86
  %182 = icmp eq i32 %56, 12, !dbg !87
  %183 = add nsw i32 %41, -12, !dbg !88
  %184 = shl nsw i32 %183, 4, !dbg !89
  %185 = add nsw i32 %46, %184, !dbg !90
  %186 = add nsw i32 %46, -192, !dbg !91
  %187 = add nsw i32 %186, %36, !dbg !90
  %188 = sext i32 %185 to i64, !dbg !92
  %189 = getelementptr float, ptr addrspace(1) %15, i64 %188, !dbg !92
  %190 = sext i32 %187 to i64, !dbg !92
  %191 = getelementptr float, ptr addrspace(1) %15, i64 %190, !dbg !92
  %192 = and i1 %29, %182, !dbg !93
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %192, i32 0, i1 %192) #1, !dbg !94
  %194 = bitcast i32 %193 to float, !dbg !94
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %192, i32 0, i1 %192) #1, !dbg !94
  %196 = bitcast i32 %195 to float, !dbg !94
  %197 = add nsw i32 %151, %183, !dbg !95
  %198 = sext i32 %197 to i64, !dbg !96
  %199 = getelementptr float, ptr addrspace(1) %16, i64 %198, !dbg !96
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %199, i1 %192, i32 0, i1 %192, i32 0, i1 %192) #1, !dbg !97
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !97
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !97
  %203 = bitcast i32 %201 to float, !dbg !97
  %204 = bitcast i32 %202 to float, !dbg !97
  %205 = fsub float %203, %203, !dbg !98
  %206 = fsub float %204, %204, !dbg !98
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %192, i32 0, i1 %192) #1, !dbg !99
  %208 = bitcast i32 %207 to float, !dbg !99
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %192, i32 0, i1 %192) #1, !dbg !99
  %210 = bitcast i32 %209 to float, !dbg !99
  %211 = fmul float %205, %208, !dbg !100
  %212 = fmul float %206, %210, !dbg !100
  %213 = fadd float %211, %203, !dbg !101
  %214 = fadd float %212, %204, !dbg !101
  %215 = fsub float %213, %194, !dbg !102
  %216 = fsub float %214, %196, !dbg !102
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %192, i32 0, i1 %192) #1, !dbg !103
  %218 = bitcast i32 %217 to float, !dbg !103
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %192, i32 0, i1 %192) #1, !dbg !103
  %220 = bitcast i32 %219 to float, !dbg !103
  %221 = fmul float %215, %218, !dbg !104
  %222 = fmul float %216, %220, !dbg !104
  %223 = fadd float %221, %194, !dbg !105
  %224 = fadd float %222, %196, !dbg !105
  %225 = icmp sgt i32 %41, 15, !dbg !106
  %226 = add nsw i32 %41, -16, !dbg !107
  %227 = shl nsw i32 %226, 4, !dbg !108
  %228 = add nsw i32 %46, %227, !dbg !109
  %229 = add nsw i32 %46, -256, !dbg !26
  %230 = add nsw i32 %229, %36, !dbg !109
  %231 = sext i32 %228 to i64, !dbg !110
  %232 = getelementptr float, ptr addrspace(1) %17, i64 %231, !dbg !110
  %233 = sext i32 %230 to i64, !dbg !110
  %234 = getelementptr float, ptr addrspace(1) %17, i64 %233, !dbg !110
  %235 = and i1 %29, %225, !dbg !111
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %235, i32 0, i1 %235) #1, !dbg !112
  %237 = bitcast i32 %236 to float, !dbg !112
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %234, i1 %235, i32 0, i1 %235) #1, !dbg !112
  %239 = bitcast i32 %238 to float, !dbg !112
  %240 = add nsw i32 %151, %226, !dbg !113
  %241 = sext i32 %240 to i64, !dbg !114
  %242 = getelementptr float, ptr addrspace(1) %18, i64 %241, !dbg !114
  %243 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %242, i1 %235, i32 0, i1 %235, i32 0, i1 %235) #1, !dbg !115
  %244 = extractvalue { i32, i32 } %243, 0, !dbg !115
  %245 = extractvalue { i32, i32 } %243, 1, !dbg !115
  %246 = bitcast i32 %244 to float, !dbg !115
  %247 = bitcast i32 %245 to float, !dbg !115
  %248 = fsub float %246, %246, !dbg !116
  %249 = fsub float %247, %247, !dbg !116
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %235, i32 0, i1 %235) #1, !dbg !117
  %251 = bitcast i32 %250 to float, !dbg !117
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %162, i1 %235, i32 0, i1 %235) #1, !dbg !117
  %253 = bitcast i32 %252 to float, !dbg !117
  %254 = fmul float %248, %251, !dbg !118
  %255 = fmul float %249, %253, !dbg !118
  %256 = fadd float %254, %246, !dbg !119
  %257 = fadd float %255, %247, !dbg !119
  %258 = fsub float %256, %237, !dbg !120
  %259 = fsub float %257, %239, !dbg !120
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %235, i32 0, i1 %235) #1, !dbg !121
  %261 = bitcast i32 %260 to float, !dbg !121
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %235, i32 0, i1 %235) #1, !dbg !121
  %263 = bitcast i32 %262 to float, !dbg !121
  %264 = fmul float %258, %261, !dbg !122
  %265 = fmul float %259, %263, !dbg !122
  %266 = fadd float %264, %237, !dbg !123
  %267 = fadd float %265, %239, !dbg !123
  %268 = select i1 %225, float %266, float 0.000000e+00, !dbg !124
  %269 = select i1 %225, float %267, float 0.000000e+00, !dbg !124
  %270 = select i1 %182, float %223, float %268, !dbg !125
  %271 = select i1 %182, float %224, float %269, !dbg !125
  %272 = select i1 %136, float %180, float %270, !dbg !125
  %273 = select i1 %136, float %181, float %271, !dbg !125
  %274 = select i1 %57, float %134, float %272, !dbg !125
  %275 = select i1 %57, float %135, float %273, !dbg !125
  %276 = sext i32 %27 to i64, !dbg !126
  %277 = getelementptr float, ptr addrspace(1) %19, i64 %276, !dbg !126
  %278 = bitcast float %274 to i32, !dbg !127
  %279 = select i1 %42, i32 %54, i32 %278, !dbg !128
  %280 = bitcast float %275 to i32, !dbg !127
  %281 = select i1 %42, i32 %55, i32 %280, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %279, i32 %281, ptr addrspace(1) %277, i1 %29) #1, !dbg !127
  ret void, !dbg !129
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfefbuk4zbsj6tu4xdpar355tfbsidqilf5t2cxlyakwfx4kzcel.py", directory: "inductor_cache/fe")
!4 = !{ptr @triton_poi_fused_cat_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_9", linkageName: "triton_poi_fused_cat_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 27, scope: !7)
!20 = !DILocation(line: 28, column: 27, scope: !7)
!21 = !DILocation(line: 35, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 26, column: 27, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 127, column: 37, scope: !7)
!27 = !DILocation(line: 35, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 60, scope: !7)
!30 = !DILocation(line: 35, column: 53, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 40, scope: !7)
!33 = !DILocation(line: 40, column: 53, scope: !7)
!34 = !DILocation(line: 40, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 68, scope: !7)
!37 = !DILocation(line: 40, column: 61, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 36, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 36, scope: !7)
!43 = !DILocation(line: 49, column: 35, scope: !7)
!44 = !DILocation(line: 50, column: 43, scope: !7)
!45 = !DILocation(line: 50, column: 54, scope: !7)
!46 = !DILocation(line: 50, column: 51, scope: !7)
!47 = !DILocation(line: 50, column: 60, scope: !7)
!48 = !DILocation(line: 50, column: 31, scope: !7)
!49 = !DILocation(line: 50, column: 73, scope: !7)
!50 = !DILocation(line: 51, column: 31, scope: !7)
!51 = !DILocation(line: 51, column: 36, scope: !7)
!52 = !DILocation(line: 54, column: 35, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 73, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 31, scope: !7)
!57 = !DILocation(line: 57, column: 36, scope: !7)
!58 = !DILocation(line: 58, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 61, column: 31, scope: !7)
!62 = !DILocation(line: 61, column: 36, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 63, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 70, column: 47, scope: !7)
!67 = !DILocation(line: 70, column: 40, scope: !7)
!68 = !DILocation(line: 70, column: 53, scope: !7)
!69 = !DILocation(line: 70, column: 36, scope: !7)
!70 = !DILocation(line: 70, column: 31, scope: !7)
!71 = !DILocation(line: 70, column: 69, scope: !7)
!72 = !DILocation(line: 70, column: 61, scope: !7)
!73 = !DILocation(line: 80, column: 34, scope: !7)
!74 = !DILocation(line: 80, column: 40, scope: !7)
!75 = !DILocation(line: 80, column: 32, scope: !7)
!76 = !DILocation(line: 80, column: 53, scope: !7)
!77 = !DILocation(line: 85, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 32, scope: !7)
!79 = !DILocation(line: 86, column: 37, scope: !7)
!80 = !DILocation(line: 87, column: 20, scope: !7)
!81 = !DILocation(line: 88, column: 20, scope: !7)
!82 = !DILocation(line: 89, column: 20, scope: !7)
!83 = !DILocation(line: 90, column: 32, scope: !7)
!84 = !DILocation(line: 90, column: 37, scope: !7)
!85 = !DILocation(line: 91, column: 20, scope: !7)
!86 = !DILocation(line: 92, column: 20, scope: !7)
!87 = !DILocation(line: 98, column: 20, scope: !7)
!88 = !DILocation(line: 99, column: 49, scope: !7)
!89 = !DILocation(line: 99, column: 41, scope: !7)
!90 = !DILocation(line: 99, column: 55, scope: !7)
!91 = !DILocation(line: 99, column: 37, scope: !7)
!92 = !DILocation(line: 99, column: 32, scope: !7)
!93 = !DILocation(line: 99, column: 71, scope: !7)
!94 = !DILocation(line: 99, column: 63, scope: !7)
!95 = !DILocation(line: 109, column: 40, scope: !7)
!96 = !DILocation(line: 109, column: 32, scope: !7)
!97 = !DILocation(line: 109, column: 54, scope: !7)
!98 = !DILocation(line: 114, column: 20, scope: !7)
!99 = !DILocation(line: 115, column: 37, scope: !7)
!100 = !DILocation(line: 116, column: 20, scope: !7)
!101 = !DILocation(line: 117, column: 20, scope: !7)
!102 = !DILocation(line: 118, column: 20, scope: !7)
!103 = !DILocation(line: 119, column: 37, scope: !7)
!104 = !DILocation(line: 120, column: 20, scope: !7)
!105 = !DILocation(line: 121, column: 20, scope: !7)
!106 = !DILocation(line: 124, column: 20, scope: !7)
!107 = !DILocation(line: 127, column: 49, scope: !7)
!108 = !DILocation(line: 127, column: 41, scope: !7)
!109 = !DILocation(line: 127, column: 55, scope: !7)
!110 = !DILocation(line: 127, column: 32, scope: !7)
!111 = !DILocation(line: 127, column: 71, scope: !7)
!112 = !DILocation(line: 127, column: 63, scope: !7)
!113 = !DILocation(line: 137, column: 41, scope: !7)
!114 = !DILocation(line: 137, column: 33, scope: !7)
!115 = !DILocation(line: 137, column: 55, scope: !7)
!116 = !DILocation(line: 142, column: 22, scope: !7)
!117 = !DILocation(line: 143, column: 38, scope: !7)
!118 = !DILocation(line: 144, column: 22, scope: !7)
!119 = !DILocation(line: 145, column: 22, scope: !7)
!120 = !DILocation(line: 146, column: 22, scope: !7)
!121 = !DILocation(line: 147, column: 38, scope: !7)
!122 = !DILocation(line: 148, column: 22, scope: !7)
!123 = !DILocation(line: 149, column: 21, scope: !7)
!124 = !DILocation(line: 151, column: 37, scope: !7)
!125 = !DILocation(line: 0, scope: !7)
!126 = !DILocation(line: 156, column: 25, scope: !7)
!127 = !DILocation(line: 156, column: 38, scope: !7)
!128 = !DILocation(line: 155, column: 34, scope: !7)
!129 = !DILocation(line: 156, column: 4, scope: !7)
