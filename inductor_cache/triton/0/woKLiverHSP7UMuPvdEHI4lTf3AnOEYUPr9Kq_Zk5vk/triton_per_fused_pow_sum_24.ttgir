#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 1], order = [0, 1]}>
#loc = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":19:0)
#loc1 = loc(unknown)
#loc20 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":36:24)
#loc27 = loc(callsite(#loc1 at #loc20))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_pow_sum_24(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":19:0), %arg2: i32 loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":19:0), %arg3: i32 loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<36> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<3> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<27> : tensor<64x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<64x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %9 = arith.cmpi slt, %8, %cst_1 : tensor<1x4xi32, #blocked> loc(#loc8)
    %10 = arith.remsi %5, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc9)
    %11 = arith.divsi %5, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc10)
    %12 = arith.muli %8, %cst_3 : tensor<1x4xi32, #blocked> loc(#loc11)
    %13 = tt.broadcast %10 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc12)
    %14 = tt.broadcast %12 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc12)
    %15 = arith.addi %13, %14 : tensor<64x4xi32, #blocked> loc(#loc12)
    %16 = arith.muli %11, %cst_4 : tensor<64x1xi32, #blocked> loc(#loc13)
    %17 = tt.broadcast %16 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc14)
    %18 = arith.addi %15, %17 : tensor<64x4xi32, #blocked> loc(#loc14)
    %19 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc15)
    %20 = tt.addptr %19, %18 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc15)
    %21 = tt.broadcast %9 : tensor<1x4xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc16)
    %22 = tt.broadcast %6 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc16)
    %23 = arith.andi %21, %22 : tensor<64x4xi1, #blocked> loc(#loc16)
    %24 = tt.load %20, %23, %cst : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc17)
    %25 = arith.select %23, %24, %cst : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc18)
    %26 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc20)), %arg5: f32 loc(callsite(#loc1 at #loc20))):
      %30 = arith.addf %arg4, %arg5 : f32 loc(#loc29)
      tt.reduce.return %30 : f32 loc(#loc26)
    }) : (tensor<64x4xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc26)
    %27 = tt.expand_dims %26 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc22)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %29 = tt.addptr %28, %5 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc23)
    tt.store %29, %27, %6 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    tt.return loc(#loc25)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":23:28)
#loc3 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":23:33)
#loc4 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":24:44)
#loc5 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":24:23)
#loc6 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":25:21)
#loc7 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":26:34)
#loc8 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":28:21)
#loc9 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":30:19)
#loc10 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":31:19)
#loc11 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:37)
#loc12 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:35)
#loc13 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:45)
#loc14 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:42)
#loc15 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:30)
#loc16 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:58)
#loc17 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":33:50)
#loc18 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":35:41)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc22 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":36:27)
#loc23 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":37:25)
#loc24 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":37:36)
#loc25 = loc("inductor_cache/cr/ccrn5mjjsbzz5gsvmmu35i7swhu7edhq4fwunuwdhuzq4b3x7w7z.py":37:4)
#loc26 = loc(callsite(#loc19 at #loc20))
#loc28 = loc(callsite(#loc21 at #loc19))
#loc29 = loc(callsite(#loc28 at #loc20))
