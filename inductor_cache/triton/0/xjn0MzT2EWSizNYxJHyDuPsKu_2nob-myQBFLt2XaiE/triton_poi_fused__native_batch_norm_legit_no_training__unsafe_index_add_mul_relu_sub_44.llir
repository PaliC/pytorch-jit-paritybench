; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 4, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 14, !dbg !12
  %21 = lshr i32 %18, 3, !dbg !12
  %22 = and i32 %21, 15, !dbg !12
  %23 = or disjoint i32 %17, %20, !dbg !13
  %24 = or disjoint i32 %17, %22, !dbg !13
  %25 = icmp slt i32 %23, 16, !dbg !14
  %26 = icmp slt i32 %24, 16, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %28 = shl i32 %27, 4, !dbg !16
  %29 = or disjoint i32 %28, %20, !dbg !17
  %30 = or disjoint i32 %28, %22, !dbg !17
  %31 = icmp slt i32 %29, 16, !dbg !18
  %32 = icmp slt i32 %30, 16, !dbg !18
  %.frozen = freeze i32 %29, !dbg !19
  %33 = sdiv i32 %.frozen, 4, !dbg !19
  %34 = mul i32 %33, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %.frozen6 = freeze i32 %23, !dbg !21
  %35 = sdiv i32 %.frozen6, 4, !dbg !21
  %36 = mul i32 %35, 4, !dbg !22
  %.decomposed7 = sub i32 %.frozen6, %36, !dbg !22
  %37 = sext i32 %33 to i64, !dbg !23
  %38 = getelementptr i64, ptr addrspace(1) %1, i64 %37, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %31) #4, !dbg !24
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %31) #4, !dbg !24
  %41 = sext i32 %.decomposed to i64, !dbg !25
  %42 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !25
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 %31) #4, !dbg !26
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !26
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !26
  %46 = getelementptr i64, ptr addrspace(1) %4, i64 %41, !dbg !27
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 %31) #4, !dbg !28
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !28
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !29
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %31) #4, !dbg !30
  %52 = shl i32 %30, 2, !dbg !31
  %53 = add i32 %52, %.decomposed7, !dbg !32
  %54 = shl i32 %35, 6, !dbg !33
  %55 = add i32 %53, %54, !dbg !34
  %56 = sext i32 %55 to i64, !dbg !35
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !35
  %58 = and i1 %25, %32, !dbg !36
  %59 = and i1 %26, %31, !dbg !36
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %58) #4, !dbg !37
  %61 = sext i32 %.decomposed7 to i64, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !38
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %25) #4, !dbg !39
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %61, !dbg !40
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %25) #4, !dbg !41
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !41
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !41
  %68 = bitcast i32 %66 to float, !dbg !41
  %69 = bitcast i32 %67 to float, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %9, i64 %61, !dbg !42
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %25) #4, !dbg !43
  %72 = getelementptr float, ptr addrspace(1) %10, i64 %61, !dbg !44
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %25) #4, !dbg !45
  %74 = getelementptr i64, ptr addrspace(1) %11, i64 %37, !dbg !46
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #4, !dbg !47
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #4, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %12, i64 %37, !dbg !48
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #4, !dbg !49
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #4, !dbg !49
  %80 = lshr i64 %39, 62, !dbg !50
  %81 = and i64 %80, 2, !dbg !50
  %82 = add i64 %81, %39, !dbg !50
  %83 = lshr i64 %44, 62, !dbg !51
  %84 = and i64 %83, 2, !dbg !51
  %85 = lshr i64 %45, 62, !dbg !51
  %86 = and i64 %85, 2, !dbg !51
  %87 = shl i64 %82, 1, !dbg !52
  %88 = shl i32 %24, 2, !dbg !53
  %89 = sext i32 %88 to i64, !dbg !54
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !55
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %84, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %87, !dbg !55
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %89, !dbg !55
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !55
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %86, !dbg !55
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %87, !dbg !55
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %89, !dbg !55
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %59) #4, !dbg !56
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %59) #4, !dbg !56
  %100 = lshr i64 %48, 62, !dbg !57
  %101 = and i64 %100, 2, !dbg !57
  %102 = lshr i64 %49, 62, !dbg !57
  %103 = and i64 %102, 2, !dbg !57
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !58
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %101, !dbg !58
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %87, !dbg !58
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %89, !dbg !58
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %103, !dbg !58
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %87, !dbg !58
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %89, !dbg !58
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %59) #4, !dbg !59
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %59) #4, !dbg !59
  %114 = fadd float %68, 0x3EE4F8B580000000, !dbg !60
  %115 = fadd float %69, 0x3EE4F8B580000000, !dbg !60
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i = icmp eq i32 %116, 0, !dbg !61
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i = icmp eq i32 %117, 0, !dbg !61
  br i1 %.not.i, label %123, label %118, !dbg !61

118:                                              ; preds = %15
  br i1 %.not1.i, label %121, label %119, !dbg !61

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

123:                                              ; preds = %15
  br i1 %.not1.i, label %126, label %124, !dbg !61

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #4, !dbg !61
  br label %__nv_sqrtf.exit, !dbg !61

__nv_sqrtf.exit:                                  ; preds = %119, %121, %124, %126
  %.0.i = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !61
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !61
  %.not.i1 = icmp eq i32 %128, 0, !dbg !61
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !61
  %.not1.i4 = icmp eq i32 %129, 0, !dbg !61
  br i1 %.not.i1, label %135, label %130, !dbg !61

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !61

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !61

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !61
  br label %__nv_sqrtf.exit5, !dbg !61

__nv_sqrtf.exit5:                                 ; preds = %131, %133, %136, %138
  %.0.i3 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !61
  %140 = extractvalue { i32, i32 } %60, 1, !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = extractvalue { i32, i32 } %63, 1, !dbg !39
  %143 = bitcast i32 %142 to float, !dbg !39
  %144 = fsub float %141, %143, !dbg !62
  %145 = extractvalue { i32, i32 } %60, 0, !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = extractvalue { i32, i32 } %63, 0, !dbg !39
  %148 = bitcast i32 %147 to float, !dbg !39
  %149 = fsub float %146, %148, !dbg !62
  %150 = extractvalue { i32, i32 } %51, 1, !dbg !30
  %151 = extractvalue { i32, i32 } %51, 0, !dbg !30
  %152 = bitcast i32 %79 to float, !dbg !49
  %153 = bitcast i32 %78 to float, !dbg !49
  %154 = extractvalue { i32, i32 } %73, 1, !dbg !45
  %155 = bitcast i32 %154 to float, !dbg !45
  %156 = extractvalue { i32, i32 } %73, 0, !dbg !45
  %157 = bitcast i32 %156 to float, !dbg !45
  %158 = extractvalue { i32, i32 } %71, 1, !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = extractvalue { i32, i32 } %71, 0, !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !63
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !63
  %164 = fmul float %149, %162, !dbg !64
  %165 = fmul float %144, %163, !dbg !64
  %166 = fmul float %164, %161, !dbg !65
  %167 = fmul float %165, %159, !dbg !65
  %168 = fadd float %166, %157, !dbg !66
  %169 = fadd float %167, %155, !dbg !66
  %170 = fcmp olt float %168, 0.000000e+00, !dbg !67
  %171 = fcmp olt float %169, 0.000000e+00, !dbg !67
  %172 = select i1 %170, float 0.000000e+00, float %168, !dbg !71
  %173 = select i1 %171, float 0.000000e+00, float %169, !dbg !71
  %174 = shl i32 %18, 5, !dbg !71
  %175 = and i32 %174, 224, !dbg !71
  %176 = or disjoint i32 %175, %22, !dbg !71
  %177 = and i32 %19, 254, !dbg !71
  %178 = lshr exact i32 %175, 2, !dbg !71
  %179 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %178, !dbg !71
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %176, !dbg !71
  %181 = bitcast float %172 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #4, !dbg !71
  %182 = or disjoint i32 %176, 16, !dbg !71
  %183 = lshr i32 %182, 4, !dbg !71
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !71
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !71
  %186 = bitcast float %173 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #4, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %187 = lshr i32 %177, 4, !dbg !71
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !71
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %177, !dbg !71
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !71
  %191 = or disjoint i32 %177, 1, !dbg !71
  %192 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %191, !dbg !71
  %193 = load float, ptr addrspace(3) %192, align 4, !dbg !71
  %194 = lshr i64 %75, 62, !dbg !72
  %195 = and i64 %194, 2, !dbg !72
  %196 = add i64 %195, %75, !dbg !72
  %197 = shl i64 %196, 1, !dbg !73
  %198 = getelementptr float, ptr addrspace(1) %91, i64 %197, !dbg !74
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %89, !dbg !74
  %200 = getelementptr float, ptr addrspace(1) %95, i64 %197, !dbg !74
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %89, !dbg !74
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %59) #4, !dbg !75
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %59) #4, !dbg !75
  %204 = getelementptr float, ptr addrspace(1) %105, i64 %197, !dbg !76
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %89, !dbg !76
  %206 = getelementptr float, ptr addrspace(1) %109, i64 %197, !dbg !76
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %89, !dbg !76
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %59) #4, !dbg !77
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %59) #4, !dbg !77
  %210 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !75
  %211 = insertelement <2 x i32> %210, i32 %98, i64 1, !dbg !75
  %212 = bitcast <2 x i32> %211 to <2 x float>, !dbg !75
  %213 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !77
  %214 = insertelement <2 x i32> %213, i32 %112, i64 1, !dbg !77
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !77
  %216 = fsub <2 x float> %215, %212, !dbg !78
  %217 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !79
  %218 = bitcast <2 x i32> %217 to <2 x float>, !dbg !79
  %219 = shufflevector <2 x float> %218, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %220 = fmul <2 x float> %216, %219, !dbg !79
  %221 = fadd <2 x float> %220, %212, !dbg !80
  %222 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !75
  %223 = insertelement <2 x i32> %222, i32 %99, i64 1, !dbg !75
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !75
  %225 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !77
  %226 = insertelement <2 x i32> %225, i32 %113, i64 1, !dbg !77
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !77
  %228 = fsub <2 x float> %227, %224, !dbg !78
  %229 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !79
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !79
  %231 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !79
  %232 = fmul <2 x float> %228, %231, !dbg !79
  %233 = fadd <2 x float> %232, %224, !dbg !80
  %234 = extractelement <2 x float> %221, i64 0, !dbg !81
  %235 = extractelement <2 x float> %221, i64 1, !dbg !82
  %236 = fsub float %234, %235, !dbg !81
  %237 = extractelement <2 x float> %233, i64 0, !dbg !81
  %238 = extractelement <2 x float> %233, i64 1, !dbg !82
  %239 = fsub float %237, %238, !dbg !81
  %240 = fmul float %236, %153, !dbg !83
  %241 = fmul float %239, %152, !dbg !83
  %242 = fadd float %235, %240, !dbg !82
  %243 = fadd float %238, %241, !dbg !82
  %244 = fadd float %190, %242, !dbg !84
  %245 = fadd float %193, %243, !dbg !84
  %246 = shl i32 %24, 4, !dbg !85
  %247 = add i32 %29, %246, !dbg !86
  %248 = sext i32 %247 to i64, !dbg !87
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !87
  %250 = bitcast float %244 to i32, !dbg !88
  %251 = bitcast float %245 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %250, i32 %251, ptr addrspace(1) %249, i1 %59) #4, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py", directory: "inductor_cache/kr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 38, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 46, scope: !7)
!34 = !DILocation(line: 38, column: 43, scope: !7)
!35 = !DILocation(line: 38, column: 31, scope: !7)
!36 = !DILocation(line: 38, column: 59, scope: !7)
!37 = !DILocation(line: 38, column: 51, scope: !7)
!38 = !DILocation(line: 39, column: 31, scope: !7)
!39 = !DILocation(line: 39, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 31, scope: !7)
!41 = !DILocation(line: 40, column: 36, scope: !7)
!42 = !DILocation(line: 41, column: 31, scope: !7)
!43 = !DILocation(line: 41, column: 36, scope: !7)
!44 = !DILocation(line: 42, column: 31, scope: !7)
!45 = !DILocation(line: 42, column: 36, scope: !7)
!46 = !DILocation(line: 43, column: 32, scope: !7)
!47 = !DILocation(line: 43, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 32, scope: !7)
!49 = !DILocation(line: 44, column: 37, scope: !7)
!50 = !DILocation(line: 48, column: 32, scope: !7)
!51 = !DILocation(line: 51, column: 32, scope: !7)
!52 = !DILocation(line: 52, column: 39, scope: !7)
!53 = !DILocation(line: 52, column: 48, scope: !7)
!54 = !DILocation(line: 52, column: 46, scope: !7)
!55 = !DILocation(line: 52, column: 30, scope: !7)
!56 = !DILocation(line: 52, column: 53, scope: !7)
!57 = !DILocation(line: 55, column: 35, scope: !7)
!58 = !DILocation(line: 56, column: 31, scope: !7)
!59 = !DILocation(line: 56, column: 55, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 27, scope: !7)
!62 = !DILocation(line: 60, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 70, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 72, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 75, column: 35, scope: !7)
!73 = !DILocation(line: 76, column: 40, scope: !7)
!74 = !DILocation(line: 76, column: 31, scope: !7)
!75 = !DILocation(line: 76, column: 55, scope: !7)
!76 = !DILocation(line: 77, column: 31, scope: !7)
!77 = !DILocation(line: 77, column: 56, scope: !7)
!78 = !DILocation(line: 78, column: 20, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 80, column: 20, scope: !7)
!81 = !DILocation(line: 81, column: 20, scope: !7)
!82 = !DILocation(line: 83, column: 20, scope: !7)
!83 = !DILocation(line: 82, column: 20, scope: !7)
!84 = !DILocation(line: 84, column: 20, scope: !7)
!85 = !DILocation(line: 85, column: 36, scope: !7)
!86 = !DILocation(line: 85, column: 33, scope: !7)
!87 = !DILocation(line: 85, column: 28, scope: !7)
!88 = !DILocation(line: 85, column: 48, scope: !7)
!89 = !DILocation(line: 85, column: 4, scope: !7)
