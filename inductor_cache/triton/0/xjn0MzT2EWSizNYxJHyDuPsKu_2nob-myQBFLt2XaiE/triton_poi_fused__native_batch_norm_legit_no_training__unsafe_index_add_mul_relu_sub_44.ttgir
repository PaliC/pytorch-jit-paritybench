#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [4, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_44(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg4: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg11: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg12: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<16> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<64> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<9.99999974E-6> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<0> : tensor<16x1xi64, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<1.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<2> : tensor<16x1xi64, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<1x16xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<1x16xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<1x16xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %12 = tt.get_program_id x : i32 loc(#loc7)
    %13 = arith.muli %12, %c16_i32 : i32 loc(#loc8)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc9)
    %15 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc9)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc9)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc9)
    %18 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc10)
    %19 = tt.splat %13 : i32 -> tensor<16x1xi32, #blocked> loc(#loc10)
    %20 = arith.addi %18, %16 : tensor<16x1xi32, #blocked1> loc(#loc10)
    %21 = arith.addi %19, %17 : tensor<16x1xi32, #blocked> loc(#loc10)
    %22 = arith.cmpi slt, %20, %cst_2 : tensor<16x1xi32, #blocked1> loc(#loc11)
    %23 = arith.cmpi slt, %21, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc11)
    %24 = arith.divsi %20, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc12)
    %25 = arith.remsi %20, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc13)
    %26 = arith.remsi %8, %cst_6 : tensor<1x16xi32, #blocked> loc(#loc14)
    %27 = arith.divsi %8, %cst_6 : tensor<1x16xi32, #blocked> loc(#loc15)
    %28 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc16)
    %29 = tt.addptr %28, %24 : tensor<16x1x!tt.ptr<i64>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc16)
    %30 = tt.load %29, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc17)
    %31 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc18)
    %32 = tt.addptr %31, %25 : tensor<16x1x!tt.ptr<i64>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc18)
    %33 = tt.load %32, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc19)
    %34 = tt.splat %arg4 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc20)
    %35 = tt.addptr %34, %25 : tensor<16x1x!tt.ptr<i64>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc20)
    %36 = tt.load %35, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc21)
    %37 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %38 = tt.addptr %37, %25 : tensor<16x1x!tt.ptr<f32>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc22)
    %39 = tt.load %38, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %40 = arith.muli %21, %cst_5 : tensor<16x1xi32, #blocked> loc(#loc24)
    %41 = tt.broadcast %26 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc25)
    %42 = tt.broadcast %40 : tensor<16x1xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc25)
    %43 = arith.addi %41, %42 : tensor<16x16xi32, #blocked> loc(#loc25)
    %44 = arith.muli %27, %cst_8 : tensor<1x16xi32, #blocked> loc(#loc26)
    %45 = tt.broadcast %44 : tensor<1x16xi32, #blocked> -> tensor<16x16xi32, #blocked> loc(#loc27)
    %46 = arith.addi %43, %45 : tensor<16x16xi32, #blocked> loc(#loc27)
    %47 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc28)
    %48 = tt.addptr %47, %46 : tensor<16x16x!tt.ptr<f32>, #blocked>, tensor<16x16xi32, #blocked> loc(#loc28)
    %49 = tt.broadcast %23 : tensor<16x1xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc29)
    %50 = tt.broadcast %22 : tensor<16x1xi1, #blocked1> -> tensor<16x16xi1, #blocked1> loc(#loc29)
    %51 = tt.broadcast %10 : tensor<1x16xi1, #blocked> -> tensor<16x16xi1, #blocked> loc(#loc29)
    %52 = tt.broadcast %11 : tensor<1x16xi1, #blocked1> -> tensor<16x16xi1, #blocked1> loc(#loc29)
    %53 = arith.andi %49, %51 : tensor<16x16xi1, #blocked> loc(#loc29)
    %54 = arith.andi %50, %52 : tensor<16x16xi1, #blocked1> loc(#loc29)
    %55 = tt.load %48, %53 : tensor<16x16x!tt.ptr<f32>, #blocked> loc(#loc30)
    %56 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc31)
    %57 = tt.addptr %56, %26 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc31)
    %58 = tt.load %57, %10 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc32)
    %59 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc33)
    %60 = tt.addptr %59, %26 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc33)
    %61 = tt.load %60, %10 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc34)
    %62 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc35)
    %63 = tt.addptr %62, %26 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc35)
    %64 = tt.load %63, %10 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc36)
    %65 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc37)
    %66 = tt.addptr %65, %26 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc37)
    %67 = tt.load %66, %10 evictionPolicy = evict_last : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc38)
    %68 = tt.splat %arg11 : !tt.ptr<i64> -> tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc39)
    %69 = tt.addptr %68, %24 : tensor<16x1x!tt.ptr<i64>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc39)
    %70 = tt.load %69, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<i64>, #blocked1> loc(#loc40)
    %71 = tt.splat %arg12 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %72 = tt.addptr %71, %24 : tensor<16x1x!tt.ptr<f32>, #blocked1>, tensor<16x1xi32, #blocked1> loc(#loc41)
    %73 = tt.load %72, %22 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    %74 = arith.addi %30, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc43)
    %75 = arith.cmpi slt, %30, %cst_10 : tensor<16x1xi64, #blocked1> loc(#loc44)
    %76 = arith.select %75, %74, %30 : tensor<16x1xi1, #blocked1>, tensor<16x1xi64, #blocked1> loc(#loc45)
    %77 = arith.addi %33, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc46)
    %78 = arith.cmpi slt, %33, %cst_10 : tensor<16x1xi64, #blocked1> loc(#loc47)
    %79 = arith.select %78, %77, %33 : tensor<16x1xi1, #blocked1>, tensor<16x1xi64, #blocked1> loc(#loc48)
    %80 = arith.muli %76, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc49)
    %81 = arith.addi %79, %80 : tensor<16x1xi64, #blocked1> loc(#loc50)
    %82 = tt.broadcast %81 : tensor<16x1xi64, #blocked1> -> tensor<16x16xi64, #blocked1> loc(#loc50)
    %83 = arith.muli %9, %cst_7 : tensor<1x16xi32, #blocked1> loc(#loc51)
    %84 = arith.extsi %83 : tensor<1x16xi32, #blocked1> to tensor<1x16xi64, #blocked1> loc(#loc52)
    %85 = tt.broadcast %84 : tensor<1x16xi64, #blocked1> -> tensor<16x16xi64, #blocked1> loc(#loc52)
    %86 = arith.addi %82, %85 : tensor<16x16xi64, #blocked1> loc(#loc52)
    %87 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc53)
    %88 = tt.addptr %87, %86 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi64, #blocked1> loc(#loc53)
    %89 = tt.load %88, %54 evictionPolicy = evict_last : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc54)
    %90 = arith.addi %36, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc55)
    %91 = arith.cmpi slt, %36, %cst_10 : tensor<16x1xi64, #blocked1> loc(#loc56)
    %92 = arith.select %91, %90, %36 : tensor<16x1xi1, #blocked1>, tensor<16x1xi64, #blocked1> loc(#loc57)
    %93 = arith.addi %92, %80 : tensor<16x1xi64, #blocked1> loc(#loc58)
    %94 = tt.broadcast %93 : tensor<16x1xi64, #blocked1> -> tensor<16x16xi64, #blocked1> loc(#loc58)
    %95 = arith.addi %94, %85 : tensor<16x16xi64, #blocked1> loc(#loc59)
    %96 = tt.addptr %87, %95 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi64, #blocked1> loc(#loc60)
    %97 = tt.load %96, %54 evictionPolicy = evict_last : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc61)
    %98 = arith.subf %97, %89 : tensor<16x16xf32, #blocked1> loc(#loc62)
    %99 = tt.broadcast %39 : tensor<16x1xf32, #blocked1> -> tensor<16x16xf32, #blocked1> loc(#loc63)
    %100 = arith.mulf %98, %99 : tensor<16x16xf32, #blocked1> loc(#loc63)
    %101 = arith.addf %89, %100 : tensor<16x16xf32, #blocked1> loc(#loc64)
    %102 = tt.broadcast %58 : tensor<1x16xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc65)
    %103 = arith.subf %55, %102 : tensor<16x16xf32, #blocked> loc(#loc65)
    %104 = arith.addf %61, %cst_9 : tensor<1x16xf32, #blocked> loc(#loc66)
    %105 = tt.extern_elementwise %104 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x16xf32, #blocked>) -> tensor<1x16xf32, #blocked> loc(#loc67)
    %106 = arith.divf %cst_11, %105 : tensor<1x16xf32, #blocked> loc(#loc68)
    %107 = tt.broadcast %106 : tensor<1x16xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc69)
    %108 = arith.mulf %103, %107 : tensor<16x16xf32, #blocked> loc(#loc69)
    %109 = tt.broadcast %64 : tensor<1x16xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc70)
    %110 = arith.mulf %108, %109 : tensor<16x16xf32, #blocked> loc(#loc70)
    %111 = tt.broadcast %67 : tensor<1x16xf32, #blocked> -> tensor<16x16xf32, #blocked> loc(#loc71)
    %112 = arith.addf %110, %111 : tensor<16x16xf32, #blocked> loc(#loc71)
    %113 = arith.cmpf ogt, %cst, %112 : tensor<16x16xf32, #blocked> loc(#loc99)
    %114 = arith.select %113, %cst, %112 : tensor<16x16xi1, #blocked>, tensor<16x16xf32, #blocked> loc(#loc100)
    %115 = triton_gpu.convert_layout %114 : tensor<16x16xf32, #blocked> -> tensor<16x16xf32, #blocked1> loc(#loc100)
    %116 = arith.addi %70, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc75)
    %117 = arith.cmpi slt, %70, %cst_10 : tensor<16x1xi64, #blocked1> loc(#loc76)
    %118 = arith.select %117, %116, %70 : tensor<16x1xi1, #blocked1>, tensor<16x1xi64, #blocked1> loc(#loc77)
    %119 = arith.muli %118, %cst_12 : tensor<16x1xi64, #blocked1> loc(#loc78)
    %120 = arith.addi %79, %119 : tensor<16x1xi64, #blocked1> loc(#loc79)
    %121 = tt.broadcast %120 : tensor<16x1xi64, #blocked1> -> tensor<16x16xi64, #blocked1> loc(#loc79)
    %122 = arith.addi %121, %85 : tensor<16x16xi64, #blocked1> loc(#loc80)
    %123 = tt.addptr %87, %122 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi64, #blocked1> loc(#loc81)
    %124 = tt.load %123, %54 evictionPolicy = evict_last : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc82)
    %125 = arith.addi %92, %119 : tensor<16x1xi64, #blocked1> loc(#loc83)
    %126 = tt.broadcast %125 : tensor<16x1xi64, #blocked1> -> tensor<16x16xi64, #blocked1> loc(#loc83)
    %127 = arith.addi %126, %85 : tensor<16x16xi64, #blocked1> loc(#loc84)
    %128 = tt.addptr %87, %127 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi64, #blocked1> loc(#loc85)
    %129 = tt.load %128, %54 evictionPolicy = evict_last : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc86)
    %130 = arith.subf %129, %124 : tensor<16x16xf32, #blocked1> loc(#loc87)
    %131 = arith.mulf %130, %99 : tensor<16x16xf32, #blocked1> loc(#loc88)
    %132 = arith.addf %124, %131 : tensor<16x16xf32, #blocked1> loc(#loc89)
    %133 = arith.subf %132, %101 : tensor<16x16xf32, #blocked1> loc(#loc90)
    %134 = tt.broadcast %73 : tensor<16x1xf32, #blocked1> -> tensor<16x16xf32, #blocked1> loc(#loc91)
    %135 = arith.mulf %133, %134 : tensor<16x16xf32, #blocked1> loc(#loc91)
    %136 = arith.addf %101, %135 : tensor<16x16xf32, #blocked1> loc(#loc92)
    %137 = arith.addf %115, %136 : tensor<16x16xf32, #blocked1> loc(#loc93)
    %138 = arith.muli %9, %cst_1 : tensor<1x16xi32, #blocked1> loc(#loc94)
    %139 = tt.broadcast %20 : tensor<16x1xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc95)
    %140 = tt.broadcast %138 : tensor<1x16xi32, #blocked1> -> tensor<16x16xi32, #blocked1> loc(#loc95)
    %141 = arith.addi %139, %140 : tensor<16x16xi32, #blocked1> loc(#loc95)
    %142 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc96)
    %143 = tt.addptr %142, %141 : tensor<16x16x!tt.ptr<f32>, #blocked1>, tensor<16x16xi32, #blocked1> loc(#loc96)
    tt.store %143, %137, %54 : tensor<16x16x!tt.ptr<f32>, #blocked1> loc(#loc97)
    tt.return loc(#loc98)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":22:28)
#loc3 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":22:33)
#loc4 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":23:44)
#loc5 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":23:23)
#loc6 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":24:21)
#loc7 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":25:28)
#loc8 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":25:33)
#loc9 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":26:44)
#loc10 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":26:23)
#loc11 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":27:21)
#loc12 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":28:19)
#loc13 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":29:19)
#loc14 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":32:19)
#loc15 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":33:19)
#loc16 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":34:30)
#loc17 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":34:35)
#loc18 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":35:30)
#loc19 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":35:35)
#loc20 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":36:31)
#loc21 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":36:36)
#loc22 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":37:31)
#loc23 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":37:36)
#loc24 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:38)
#loc25 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:36)
#loc26 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:46)
#loc27 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:43)
#loc28 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:31)
#loc29 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:59)
#loc30 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":38:51)
#loc31 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":39:31)
#loc32 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":39:36)
#loc33 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":40:31)
#loc34 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":40:36)
#loc35 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":41:31)
#loc36 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":41:36)
#loc37 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":42:31)
#loc38 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":42:36)
#loc39 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":43:32)
#loc40 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":43:37)
#loc41 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":44:32)
#loc42 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":44:37)
#loc43 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":46:18)
#loc44 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":47:18)
#loc45 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":48:32)
#loc46 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":49:18)
#loc47 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":50:18)
#loc48 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":51:32)
#loc49 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:39)
#loc50 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:37)
#loc51 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:48)
#loc52 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:46)
#loc53 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:30)
#loc54 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":52:53)
#loc55 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":53:20)
#loc56 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":54:20)
#loc57 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":55:35)
#loc58 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":56:39)
#loc59 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":56:48)
#loc60 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":56:31)
#loc61 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":56:55)
#loc62 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":57:20)
#loc63 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":58:20)
#loc64 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":59:19)
#loc65 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":60:20)
#loc66 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":62:20)
#loc67 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":63:27)
#loc68 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":65:20)
#loc69 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":68:20)
#loc70 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":69:20)
#loc71 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":70:20)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc73 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":72:42)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc75 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":73:20)
#loc76 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":74:20)
#loc77 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":75:35)
#loc78 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":76:40)
#loc79 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":76:38)
#loc80 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":76:48)
#loc81 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":76:31)
#loc82 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":76:55)
#loc83 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":77:39)
#loc84 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":77:49)
#loc85 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":77:31)
#loc86 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":77:56)
#loc87 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":78:20)
#loc88 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":79:20)
#loc89 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":80:20)
#loc90 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":81:20)
#loc91 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":82:20)
#loc92 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":83:20)
#loc93 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":84:20)
#loc94 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":85:36)
#loc95 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":85:33)
#loc96 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":85:28)
#loc97 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":85:48)
#loc98 = loc("inductor_cache/kr/ckrelcujrt46hmmuitw5a5537pqwvf5scy33zy62ux73pjmgpy5w.py":85:4)
#loc99 = loc(callsite(#loc72 at #loc73))
#loc100 = loc(callsite(#loc74 at #loc73))
