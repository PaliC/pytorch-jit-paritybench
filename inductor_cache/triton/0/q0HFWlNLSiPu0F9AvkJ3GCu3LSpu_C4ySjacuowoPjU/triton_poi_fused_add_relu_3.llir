; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %21 = shl i32 %20, 10, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = shl i32 %22, 2, !dbg !12
  %24 = and i32 %23, 508, !dbg !12
  %25 = or disjoint i32 %21, %24, !dbg !13
  %26 = or disjoint i32 %25, 512, !dbg !13
  %27 = sext i32 %25 to i64, !dbg !14
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !14
  %29 = sext i32 %26 to i64, !dbg !14
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !14
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !15
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !15
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !15
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !15
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !15
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !15
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !16
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !17
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !17
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !17
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !17
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !17
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !18
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !20
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !21
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !21
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !21
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !21
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !21
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !21
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !21
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !22
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !23
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !23
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !23
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !23
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !23
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !24
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #1, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !25
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !25
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !25
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !27
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !27
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !27
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !27
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !27
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !28
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !29
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !29
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !29
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !29
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !29
  %125 = insertelement <8 x i32> poison, i32 %124, i64 0, !dbg !29
  %126 = insertelement <8 x i32> %125, i32 %123, i64 1, !dbg !29
  %127 = insertelement <8 x i32> %126, i32 %122, i64 2, !dbg !29
  %128 = insertelement <8 x i32> %127, i32 %121, i64 3, !dbg !29
  %129 = insertelement <8 x i32> %128, i32 %119, i64 4, !dbg !29
  %130 = insertelement <8 x i32> %129, i32 %118, i64 5, !dbg !29
  %131 = insertelement <8 x i32> %130, i32 %117, i64 6, !dbg !29
  %132 = insertelement <8 x i32> %131, i32 %116, i64 7, !dbg !29
  %133 = bitcast <8 x i32> %132 to <8 x float>, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !30
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !31
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !31
  %146 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %9, i64 %29, !dbg !32
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !33
  %150 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !33
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !33
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !33
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !33
  %158 = getelementptr float, ptr addrspace(1) %10, i64 %27, !dbg !34
  %159 = getelementptr float, ptr addrspace(1) %10, i64 %29, !dbg !34
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !35
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !35
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !35
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !35
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !35
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !35
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !35
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !35
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !35
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !35
  %170 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %11, i64 %29, !dbg !36
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 true) #1, !dbg !37
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !37
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !37
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !37
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !37
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 true) #1, !dbg !37
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !37
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !37
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !37
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !37
  %182 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !38
  %183 = getelementptr float, ptr addrspace(1) %12, i64 %29, !dbg !38
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %182, i1 true) #1, !dbg !39
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !39
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !39
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !39
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !39
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 true) #1, !dbg !39
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !39
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !39
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !39
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !39
  %194 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !40
  %195 = getelementptr float, ptr addrspace(1) %13, i64 %29, !dbg !40
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %194, i1 true) #1, !dbg !41
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !41
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !41
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !41
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !41
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 true) #1, !dbg !41
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !41
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !41
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !41
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !41
  %206 = getelementptr float, ptr addrspace(1) %14, i64 %27, !dbg !42
  %207 = getelementptr float, ptr addrspace(1) %14, i64 %29, !dbg !42
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !43
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 true) #1, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !43
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !43
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !43
  %218 = getelementptr float, ptr addrspace(1) %15, i64 %27, !dbg !44
  %219 = getelementptr float, ptr addrspace(1) %15, i64 %29, !dbg !44
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 true) #1, !dbg !45
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !45
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !45
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !45
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !45
  %225 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 true) #1, !dbg !45
  %226 = extractvalue { i32, i32, i32, i32 } %225, 0, !dbg !45
  %227 = extractvalue { i32, i32, i32, i32 } %225, 1, !dbg !45
  %228 = extractvalue { i32, i32, i32, i32 } %225, 2, !dbg !45
  %229 = extractvalue { i32, i32, i32, i32 } %225, 3, !dbg !45
  %230 = getelementptr float, ptr addrspace(1) %16, i64 %27, !dbg !46
  %231 = getelementptr float, ptr addrspace(1) %16, i64 %29, !dbg !46
  %232 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !47
  %233 = extractvalue { i32, i32, i32, i32 } %232, 0, !dbg !47
  %234 = extractvalue { i32, i32, i32, i32 } %232, 1, !dbg !47
  %235 = extractvalue { i32, i32, i32, i32 } %232, 2, !dbg !47
  %236 = extractvalue { i32, i32, i32, i32 } %232, 3, !dbg !47
  %237 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %231, i1 true) #1, !dbg !47
  %238 = extractvalue { i32, i32, i32, i32 } %237, 0, !dbg !47
  %239 = extractvalue { i32, i32, i32, i32 } %237, 1, !dbg !47
  %240 = extractvalue { i32, i32, i32, i32 } %237, 2, !dbg !47
  %241 = extractvalue { i32, i32, i32, i32 } %237, 3, !dbg !47
  %242 = getelementptr float, ptr addrspace(1) %17, i64 %27, !dbg !48
  %243 = getelementptr float, ptr addrspace(1) %17, i64 %29, !dbg !48
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !49
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !49
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !49
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !49
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !49
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 true) #1, !dbg !49
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !49
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !49
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !49
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !49
  %254 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !15
  %255 = insertelement <8 x i32> %254, i32 %39, i64 1, !dbg !15
  %256 = insertelement <8 x i32> %255, i32 %38, i64 2, !dbg !15
  %257 = insertelement <8 x i32> %256, i32 %37, i64 3, !dbg !15
  %258 = insertelement <8 x i32> %257, i32 %35, i64 4, !dbg !15
  %259 = insertelement <8 x i32> %258, i32 %34, i64 5, !dbg !15
  %260 = insertelement <8 x i32> %259, i32 %33, i64 6, !dbg !15
  %261 = insertelement <8 x i32> %260, i32 %32, i64 7, !dbg !15
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !15
  %263 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !17
  %264 = insertelement <8 x i32> %263, i32 %51, i64 1, !dbg !17
  %265 = insertelement <8 x i32> %264, i32 %50, i64 2, !dbg !17
  %266 = insertelement <8 x i32> %265, i32 %49, i64 3, !dbg !17
  %267 = insertelement <8 x i32> %266, i32 %47, i64 4, !dbg !17
  %268 = insertelement <8 x i32> %267, i32 %46, i64 5, !dbg !17
  %269 = insertelement <8 x i32> %268, i32 %45, i64 6, !dbg !17
  %270 = insertelement <8 x i32> %269, i32 %44, i64 7, !dbg !17
  %271 = bitcast <8 x i32> %270 to <8 x float>, !dbg !17
  %272 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !19
  %273 = insertelement <8 x i32> %272, i32 %63, i64 1, !dbg !19
  %274 = insertelement <8 x i32> %273, i32 %62, i64 2, !dbg !19
  %275 = insertelement <8 x i32> %274, i32 %61, i64 3, !dbg !19
  %276 = insertelement <8 x i32> %275, i32 %59, i64 4, !dbg !19
  %277 = insertelement <8 x i32> %276, i32 %58, i64 5, !dbg !19
  %278 = insertelement <8 x i32> %277, i32 %57, i64 6, !dbg !19
  %279 = insertelement <8 x i32> %278, i32 %56, i64 7, !dbg !19
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !19
  %281 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !21
  %282 = insertelement <8 x i32> %281, i32 %75, i64 1, !dbg !21
  %283 = insertelement <8 x i32> %282, i32 %74, i64 2, !dbg !21
  %284 = insertelement <8 x i32> %283, i32 %73, i64 3, !dbg !21
  %285 = insertelement <8 x i32> %284, i32 %71, i64 4, !dbg !21
  %286 = insertelement <8 x i32> %285, i32 %70, i64 5, !dbg !21
  %287 = insertelement <8 x i32> %286, i32 %69, i64 6, !dbg !21
  %288 = insertelement <8 x i32> %287, i32 %68, i64 7, !dbg !21
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !21
  %290 = insertelement <8 x i32> poison, i32 %88, i64 0, !dbg !23
  %291 = insertelement <8 x i32> %290, i32 %87, i64 1, !dbg !23
  %292 = insertelement <8 x i32> %291, i32 %86, i64 2, !dbg !23
  %293 = insertelement <8 x i32> %292, i32 %85, i64 3, !dbg !23
  %294 = insertelement <8 x i32> %293, i32 %83, i64 4, !dbg !23
  %295 = insertelement <8 x i32> %294, i32 %82, i64 5, !dbg !23
  %296 = insertelement <8 x i32> %295, i32 %81, i64 6, !dbg !23
  %297 = insertelement <8 x i32> %296, i32 %80, i64 7, !dbg !23
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !23
  %299 = insertelement <8 x i32> poison, i32 %100, i64 0, !dbg !25
  %300 = insertelement <8 x i32> %299, i32 %99, i64 1, !dbg !25
  %301 = insertelement <8 x i32> %300, i32 %98, i64 2, !dbg !25
  %302 = insertelement <8 x i32> %301, i32 %97, i64 3, !dbg !25
  %303 = insertelement <8 x i32> %302, i32 %95, i64 4, !dbg !25
  %304 = insertelement <8 x i32> %303, i32 %94, i64 5, !dbg !25
  %305 = insertelement <8 x i32> %304, i32 %93, i64 6, !dbg !25
  %306 = insertelement <8 x i32> %305, i32 %92, i64 7, !dbg !25
  %307 = bitcast <8 x i32> %306 to <8 x float>, !dbg !25
  %308 = insertelement <8 x i32> poison, i32 %112, i64 0, !dbg !27
  %309 = insertelement <8 x i32> %308, i32 %111, i64 1, !dbg !27
  %310 = insertelement <8 x i32> %309, i32 %110, i64 2, !dbg !27
  %311 = insertelement <8 x i32> %310, i32 %109, i64 3, !dbg !27
  %312 = insertelement <8 x i32> %311, i32 %107, i64 4, !dbg !27
  %313 = insertelement <8 x i32> %312, i32 %106, i64 5, !dbg !27
  %314 = insertelement <8 x i32> %313, i32 %105, i64 6, !dbg !27
  %315 = insertelement <8 x i32> %314, i32 %104, i64 7, !dbg !27
  %316 = bitcast <8 x i32> %315 to <8 x float>, !dbg !27
  %317 = fadd <8 x float> %262, %271, !dbg !50
  %318 = fadd <8 x float> %317, %280, !dbg !51
  %319 = fadd <8 x float> %318, %289, !dbg !52
  %320 = fadd <8 x float> %319, %298, !dbg !53
  %321 = fadd <8 x float> %320, %307, !dbg !54
  %322 = fadd <8 x float> %321, %316, !dbg !55
  %323 = insertelement <8 x i32> poison, i32 %145, i64 0, !dbg !31
  %324 = insertelement <8 x i32> %323, i32 %144, i64 1, !dbg !31
  %325 = insertelement <8 x i32> %324, i32 %143, i64 2, !dbg !31
  %326 = insertelement <8 x i32> %325, i32 %142, i64 3, !dbg !31
  %327 = insertelement <8 x i32> %326, i32 %140, i64 4, !dbg !31
  %328 = insertelement <8 x i32> %327, i32 %139, i64 5, !dbg !31
  %329 = insertelement <8 x i32> %328, i32 %138, i64 6, !dbg !31
  %330 = insertelement <8 x i32> %329, i32 %137, i64 7, !dbg !31
  %331 = bitcast <8 x i32> %330 to <8 x float>, !dbg !31
  %332 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !33
  %333 = insertelement <8 x i32> %332, i32 %156, i64 1, !dbg !33
  %334 = insertelement <8 x i32> %333, i32 %155, i64 2, !dbg !33
  %335 = insertelement <8 x i32> %334, i32 %154, i64 3, !dbg !33
  %336 = insertelement <8 x i32> %335, i32 %152, i64 4, !dbg !33
  %337 = insertelement <8 x i32> %336, i32 %151, i64 5, !dbg !33
  %338 = insertelement <8 x i32> %337, i32 %150, i64 6, !dbg !33
  %339 = insertelement <8 x i32> %338, i32 %149, i64 7, !dbg !33
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !33
  %341 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !35
  %342 = insertelement <8 x i32> %341, i32 %168, i64 1, !dbg !35
  %343 = insertelement <8 x i32> %342, i32 %167, i64 2, !dbg !35
  %344 = insertelement <8 x i32> %343, i32 %166, i64 3, !dbg !35
  %345 = insertelement <8 x i32> %344, i32 %164, i64 4, !dbg !35
  %346 = insertelement <8 x i32> %345, i32 %163, i64 5, !dbg !35
  %347 = insertelement <8 x i32> %346, i32 %162, i64 6, !dbg !35
  %348 = insertelement <8 x i32> %347, i32 %161, i64 7, !dbg !35
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !35
  %350 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !37
  %351 = insertelement <8 x i32> %350, i32 %180, i64 1, !dbg !37
  %352 = insertelement <8 x i32> %351, i32 %179, i64 2, !dbg !37
  %353 = insertelement <8 x i32> %352, i32 %178, i64 3, !dbg !37
  %354 = insertelement <8 x i32> %353, i32 %176, i64 4, !dbg !37
  %355 = insertelement <8 x i32> %354, i32 %175, i64 5, !dbg !37
  %356 = insertelement <8 x i32> %355, i32 %174, i64 6, !dbg !37
  %357 = insertelement <8 x i32> %356, i32 %173, i64 7, !dbg !37
  %358 = bitcast <8 x i32> %357 to <8 x float>, !dbg !37
  %359 = insertelement <8 x i32> poison, i32 %193, i64 0, !dbg !39
  %360 = insertelement <8 x i32> %359, i32 %192, i64 1, !dbg !39
  %361 = insertelement <8 x i32> %360, i32 %191, i64 2, !dbg !39
  %362 = insertelement <8 x i32> %361, i32 %190, i64 3, !dbg !39
  %363 = insertelement <8 x i32> %362, i32 %188, i64 4, !dbg !39
  %364 = insertelement <8 x i32> %363, i32 %187, i64 5, !dbg !39
  %365 = insertelement <8 x i32> %364, i32 %186, i64 6, !dbg !39
  %366 = insertelement <8 x i32> %365, i32 %185, i64 7, !dbg !39
  %367 = bitcast <8 x i32> %366 to <8 x float>, !dbg !39
  %368 = insertelement <8 x i32> poison, i32 %205, i64 0, !dbg !41
  %369 = insertelement <8 x i32> %368, i32 %204, i64 1, !dbg !41
  %370 = insertelement <8 x i32> %369, i32 %203, i64 2, !dbg !41
  %371 = insertelement <8 x i32> %370, i32 %202, i64 3, !dbg !41
  %372 = insertelement <8 x i32> %371, i32 %200, i64 4, !dbg !41
  %373 = insertelement <8 x i32> %372, i32 %199, i64 5, !dbg !41
  %374 = insertelement <8 x i32> %373, i32 %198, i64 6, !dbg !41
  %375 = insertelement <8 x i32> %374, i32 %197, i64 7, !dbg !41
  %376 = bitcast <8 x i32> %375 to <8 x float>, !dbg !41
  %377 = insertelement <8 x i32> poison, i32 %217, i64 0, !dbg !43
  %378 = insertelement <8 x i32> %377, i32 %216, i64 1, !dbg !43
  %379 = insertelement <8 x i32> %378, i32 %215, i64 2, !dbg !43
  %380 = insertelement <8 x i32> %379, i32 %214, i64 3, !dbg !43
  %381 = insertelement <8 x i32> %380, i32 %212, i64 4, !dbg !43
  %382 = insertelement <8 x i32> %381, i32 %211, i64 5, !dbg !43
  %383 = insertelement <8 x i32> %382, i32 %210, i64 6, !dbg !43
  %384 = insertelement <8 x i32> %383, i32 %209, i64 7, !dbg !43
  %385 = bitcast <8 x i32> %384 to <8 x float>, !dbg !43
  %386 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !45
  %387 = insertelement <8 x i32> %386, i32 %228, i64 1, !dbg !45
  %388 = insertelement <8 x i32> %387, i32 %227, i64 2, !dbg !45
  %389 = insertelement <8 x i32> %388, i32 %226, i64 3, !dbg !45
  %390 = insertelement <8 x i32> %389, i32 %224, i64 4, !dbg !45
  %391 = insertelement <8 x i32> %390, i32 %223, i64 5, !dbg !45
  %392 = insertelement <8 x i32> %391, i32 %222, i64 6, !dbg !45
  %393 = insertelement <8 x i32> %392, i32 %221, i64 7, !dbg !45
  %394 = bitcast <8 x i32> %393 to <8 x float>, !dbg !45
  %395 = insertelement <8 x i32> poison, i32 %241, i64 0, !dbg !47
  %396 = insertelement <8 x i32> %395, i32 %240, i64 1, !dbg !47
  %397 = insertelement <8 x i32> %396, i32 %239, i64 2, !dbg !47
  %398 = insertelement <8 x i32> %397, i32 %238, i64 3, !dbg !47
  %399 = insertelement <8 x i32> %398, i32 %236, i64 4, !dbg !47
  %400 = insertelement <8 x i32> %399, i32 %235, i64 5, !dbg !47
  %401 = insertelement <8 x i32> %400, i32 %234, i64 6, !dbg !47
  %402 = insertelement <8 x i32> %401, i32 %233, i64 7, !dbg !47
  %403 = bitcast <8 x i32> %402 to <8 x float>, !dbg !47
  %404 = insertelement <8 x i32> poison, i32 %253, i64 0, !dbg !49
  %405 = insertelement <8 x i32> %404, i32 %252, i64 1, !dbg !49
  %406 = insertelement <8 x i32> %405, i32 %251, i64 2, !dbg !49
  %407 = insertelement <8 x i32> %406, i32 %250, i64 3, !dbg !49
  %408 = insertelement <8 x i32> %407, i32 %248, i64 4, !dbg !49
  %409 = insertelement <8 x i32> %408, i32 %247, i64 5, !dbg !49
  %410 = insertelement <8 x i32> %409, i32 %246, i64 6, !dbg !49
  %411 = insertelement <8 x i32> %410, i32 %245, i64 7, !dbg !49
  %412 = bitcast <8 x i32> %411 to <8 x float>, !dbg !49
  %413 = fadd <8 x float> %322, %133, !dbg !56
  %414 = fadd <8 x float> %413, %331, !dbg !57
  %415 = fadd <8 x float> %414, %340, !dbg !58
  %416 = fadd <8 x float> %415, %349, !dbg !59
  %417 = fadd <8 x float> %416, %358, !dbg !60
  %418 = fadd <8 x float> %417, %367, !dbg !61
  %419 = fadd <8 x float> %418, %376, !dbg !62
  %420 = fadd <8 x float> %419, %385, !dbg !63
  %421 = fadd <8 x float> %420, %394, !dbg !64
  %422 = fadd <8 x float> %421, %403, !dbg !65
  %423 = fadd <8 x float> %422, %412, !dbg !66
  %424 = fcmp olt <8 x float> %423, zeroinitializer, !dbg !67
  %425 = extractelement <8 x i1> %424, i64 7, !dbg !71
  %426 = extractelement <8 x i1> %424, i64 6, !dbg !71
  %427 = extractelement <8 x i1> %424, i64 5, !dbg !71
  %428 = extractelement <8 x i1> %424, i64 4, !dbg !71
  %429 = extractelement <8 x i1> %424, i64 3, !dbg !71
  %430 = extractelement <8 x i1> %424, i64 2, !dbg !71
  %431 = extractelement <8 x i1> %424, i64 1, !dbg !71
  %432 = extractelement <8 x i1> %424, i64 0, !dbg !71
  %bc = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %433 = extractelement <8 x i32> %bc, i64 7, !dbg !72
  %434 = select i1 %425, i32 0, i32 %433, !dbg !71
  %bc1 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %435 = extractelement <8 x i32> %bc1, i64 6, !dbg !72
  %436 = select i1 %426, i32 0, i32 %435, !dbg !71
  %bc2 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %437 = extractelement <8 x i32> %bc2, i64 5, !dbg !72
  %438 = select i1 %427, i32 0, i32 %437, !dbg !71
  %bc3 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %439 = extractelement <8 x i32> %bc3, i64 4, !dbg !72
  %440 = select i1 %428, i32 0, i32 %439, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %434, i32 %436, i32 %438, i32 %440, ptr addrspace(1) %41, i1 true) #1, !dbg !72
  %bc4 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %441 = extractelement <8 x i32> %bc4, i64 3, !dbg !72
  %442 = select i1 %429, i32 0, i32 %441, !dbg !71
  %bc5 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %443 = extractelement <8 x i32> %bc5, i64 2, !dbg !72
  %444 = select i1 %430, i32 0, i32 %443, !dbg !71
  %bc6 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %445 = extractelement <8 x i32> %bc6, i64 1, !dbg !72
  %446 = select i1 %431, i32 0, i32 %445, !dbg !71
  %bc7 = bitcast <8 x float> %423 to <8 x i32>, !dbg !72
  %447 = extractelement <8 x i32> %bc7, i64 0, !dbg !72
  %448 = select i1 %432, i32 0, i32 %447, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %444, i32 %446, i32 %448, ptr addrspace(1) %42, i1 true) #1, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu5ircb6ayensnljaf5jfrcah4ydlth5ia5hq6htsux5gflj55yf.py", directory: "inductor_cache/u5")
!4 = !{ptr @triton_poi_fused_add_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_relu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_relu_3", linkageName: "triton_poi_fused_add_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 30, scope: !7)
!15 = !DILocation(line: 25, column: 35, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 42, column: 32, scope: !7)
!49 = !DILocation(line: 42, column: 37, scope: !7)
!50 = !DILocation(line: 43, column: 18, scope: !7)
!51 = !DILocation(line: 44, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 18, scope: !7)
!53 = !DILocation(line: 46, column: 18, scope: !7)
!54 = !DILocation(line: 47, column: 19, scope: !7)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 50, column: 20, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 53, column: 20, scope: !7)
!61 = !DILocation(line: 54, column: 20, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 20, scope: !7)
!64 = !DILocation(line: 57, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 61, column: 42, scope: !7)
!71 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 62, column: 40, scope: !7)
!73 = !DILocation(line: 62, column: 4, scope: !7)
