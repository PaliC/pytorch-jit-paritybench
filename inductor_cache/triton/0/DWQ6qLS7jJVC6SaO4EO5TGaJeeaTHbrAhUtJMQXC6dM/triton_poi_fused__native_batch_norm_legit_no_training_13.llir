; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 6, !dbg !15
  %22 = or disjoint i32 %21, %15, !dbg !16
  %23 = or disjoint i32 %21, %16, !dbg !16
  %24 = or disjoint i32 %21, %17, !dbg !16
  %25 = or disjoint i32 %21, %18, !dbg !16
  %26 = icmp slt i32 %22, 36, !dbg !17
  %27 = icmp slt i32 %23, 36, !dbg !17
  %28 = icmp slt i32 %24, 36, !dbg !17
  %29 = icmp slt i32 %25, 36, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %30 = sdiv i32 %.frozen, 256, !dbg !18
  %31 = mul i32 %30, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %32 = shl i32 %22, 8, !dbg !20
  %33 = shl i32 %23, 8, !dbg !20
  %34 = shl i32 %24, 8, !dbg !20
  %35 = shl i32 %25, 8, !dbg !20
  %36 = mul i32 %30, 9216, !dbg !21
  %37 = add i32 %36, %.decomposed, !dbg !22
  %38 = add i32 %37, %32, !dbg !23
  %39 = add i32 %37, %33, !dbg !23
  %40 = add i32 %37, %34, !dbg !23
  %41 = add i32 %37, %35, !dbg !23
  %42 = sext i32 %38 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %40 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %41 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %26) #4, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %27) #4, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %28) #4, !dbg !25
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %29) #4, !dbg !25
  %54 = sext i32 %.decomposed to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #4, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = bitcast i32 %60 to float, !dbg !29
  %65 = bitcast i32 %61 to float, !dbg !29
  %66 = bitcast i32 %62 to float, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !30
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #4, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !33
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !34
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !34
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %75, 0, !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %76, 0, !dbg !35
  br i1 %.not.i, label %82, label %77, !dbg !35

77:                                               ; preds = %8
  br i1 %.not1.i, label %80, label %78, !dbg !35

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

82:                                               ; preds = %8
  br i1 %.not1.i, label %85, label %83, !dbg !35

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !35
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %87, 0, !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %88, 0, !dbg !35
  br i1 %.not.i1, label %94, label %89, !dbg !35

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %92, label %90, !dbg !35

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !35

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %90, %92, %95, %97
  %.0.i3 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !35
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %99, 0, !dbg !35
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !35
  br i1 %.not.i6, label %106, label %101, !dbg !35

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !35

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !35

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !35
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %111, 0, !dbg !35
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %112, 0, !dbg !35
  br i1 %.not.i11, label %118, label %113, !dbg !35

113:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %116, label %114, !dbg !35

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !35

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %114, %116, %119, %121
  %.0.i13 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !35
  %123 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = fsub float %124, %126, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %129 = bitcast i32 %128 to float, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = fsub float %129, %131, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %134 = bitcast i32 %133 to float, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fsub float %134, %136, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fsub float %139, %141, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %144 = bitcast i32 %143 to float, !dbg !25
  %145 = fsub float %144, %126, !dbg !36
  %146 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %147 = bitcast i32 %146 to float, !dbg !25
  %148 = fsub float %147, %131, !dbg !36
  %149 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %150 = bitcast i32 %149 to float, !dbg !25
  %151 = fsub float %150, %136, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %153 = bitcast i32 %152 to float, !dbg !25
  %154 = fsub float %153, %141, !dbg !36
  %155 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %156 = bitcast i32 %155 to float, !dbg !25
  %157 = fsub float %156, %126, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %159 = bitcast i32 %158 to float, !dbg !25
  %160 = fsub float %159, %131, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %162 = bitcast i32 %161 to float, !dbg !25
  %163 = fsub float %162, %136, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %165 = bitcast i32 %164 to float, !dbg !25
  %166 = fsub float %165, %141, !dbg !36
  %167 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %168 = bitcast i32 %167 to float, !dbg !25
  %169 = fsub float %168, %126, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %171 = bitcast i32 %170 to float, !dbg !25
  %172 = fsub float %171, %131, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %174 = bitcast i32 %173 to float, !dbg !25
  %175 = fsub float %174, %136, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %177 = bitcast i32 %176 to float, !dbg !25
  %178 = fsub float %177, %141, !dbg !36
  %179 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !33
  %180 = bitcast i32 %179 to float, !dbg !33
  %181 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !33
  %182 = bitcast i32 %181 to float, !dbg !33
  %183 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !33
  %184 = bitcast i32 %183 to float, !dbg !33
  %185 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !33
  %186 = bitcast i32 %185 to float, !dbg !33
  %187 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !31
  %188 = bitcast i32 %187 to float, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !31
  %192 = bitcast i32 %191 to float, !dbg !31
  %193 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !31
  %194 = bitcast i32 %193 to float, !dbg !31
  %195 = or disjoint i32 %21, %13, !dbg !16
  %196 = icmp slt i32 %195, 36, !dbg !17
  %197 = or disjoint i32 %10, %18, !dbg !13
  %198 = or disjoint i32 %10, %17, !dbg !13
  %199 = or disjoint i32 %10, %16, !dbg !13
  %200 = or disjoint i32 %10, %15, !dbg !13
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !37
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !37
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !37
  %205 = fmul float %178, %201, !dbg !38
  %206 = fmul float %175, %202, !dbg !38
  %207 = fmul float %172, %203, !dbg !38
  %208 = fmul float %169, %204, !dbg !38
  %209 = fmul float %166, %201, !dbg !38
  %210 = fmul float %163, %202, !dbg !38
  %211 = fmul float %160, %203, !dbg !38
  %212 = fmul float %157, %204, !dbg !38
  %213 = fmul float %154, %201, !dbg !38
  %214 = fmul float %151, %202, !dbg !38
  %215 = fmul float %148, %203, !dbg !38
  %216 = fmul float %145, %204, !dbg !38
  %217 = fmul float %142, %201, !dbg !38
  %218 = fmul float %137, %202, !dbg !38
  %219 = fmul float %132, %203, !dbg !38
  %220 = fmul float %127, %204, !dbg !38
  %221 = fmul float %205, %194, !dbg !39
  %222 = fmul float %206, %192, !dbg !39
  %223 = fmul float %207, %190, !dbg !39
  %224 = fmul float %208, %188, !dbg !39
  %225 = fmul float %209, %194, !dbg !39
  %226 = fmul float %210, %192, !dbg !39
  %227 = fmul float %211, %190, !dbg !39
  %228 = fmul float %212, %188, !dbg !39
  %229 = fmul float %213, %194, !dbg !39
  %230 = fmul float %214, %192, !dbg !39
  %231 = fmul float %215, %190, !dbg !39
  %232 = fmul float %216, %188, !dbg !39
  %233 = fmul float %217, %194, !dbg !39
  %234 = fmul float %218, %192, !dbg !39
  %235 = fmul float %219, %190, !dbg !39
  %236 = fmul float %220, %188, !dbg !39
  %237 = fadd float %221, %186, !dbg !40
  %238 = fadd float %222, %184, !dbg !40
  %239 = fadd float %223, %182, !dbg !40
  %240 = fadd float %224, %180, !dbg !40
  %241 = fadd float %225, %186, !dbg !40
  %242 = fadd float %226, %184, !dbg !40
  %243 = fadd float %227, %182, !dbg !40
  %244 = fadd float %228, %180, !dbg !40
  %245 = fadd float %229, %186, !dbg !40
  %246 = fadd float %230, %184, !dbg !40
  %247 = fadd float %231, %182, !dbg !40
  %248 = fadd float %232, %180, !dbg !40
  %249 = fadd float %233, %186, !dbg !40
  %250 = fadd float %234, %184, !dbg !40
  %251 = fadd float %235, %182, !dbg !40
  %252 = fadd float %236, %180, !dbg !40
  %253 = mul i32 %200, 36, !dbg !41
  %254 = mul i32 %199, 36, !dbg !41
  %255 = mul i32 %198, 36, !dbg !41
  %256 = mul i32 %197, 36, !dbg !41
  %257 = add i32 %195, %253, !dbg !42
  %258 = add i32 %195, %254, !dbg !42
  %259 = add i32 %195, %255, !dbg !42
  %260 = add i32 %195, %256, !dbg !42
  %261 = sext i32 %257 to i64, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %261, !dbg !43
  %263 = sext i32 %258 to i64, !dbg !43
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %263, !dbg !43
  %265 = sext i32 %259 to i64, !dbg !43
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %265, !dbg !43
  %267 = sext i32 %260 to i64, !dbg !43
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !43
  %269 = shl i32 %11, 8, !dbg !44
  %270 = and i32 %269, 3840, !dbg !44
  %271 = or disjoint i32 %270, %15, !dbg !44
  %272 = and i32 %12, 1020, !dbg !44
  %273 = lshr exact i32 %270, 4, !dbg !44
  %274 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %273, !dbg !44
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %271, !dbg !44
  %276 = bitcast float %237 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !44
  %277 = or disjoint i32 %271, 64, !dbg !44
  %278 = lshr i32 %277, 6, !dbg !44
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !44
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %277, !dbg !44
  %281 = bitcast float %238 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !44
  %282 = or disjoint i32 %271, 128, !dbg !44
  %283 = lshr i32 %282, 6, !dbg !44
  %284 = getelementptr float, ptr addrspace(3) @global_smem, i32 %283, !dbg !44
  %285 = getelementptr float, ptr addrspace(3) %284, i32 %282, !dbg !44
  %286 = bitcast float %239 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %285, <1 x i32> %286, i1 true) #4, !dbg !44
  %287 = or disjoint i32 %271, 192, !dbg !44
  %288 = lshr i32 %287, 6, !dbg !44
  %289 = getelementptr float, ptr addrspace(3) @global_smem, i32 %288, !dbg !44
  %290 = getelementptr float, ptr addrspace(3) %289, i32 %287, !dbg !44
  %291 = bitcast float %240 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #4, !dbg !44
  %292 = or disjoint i32 %271, 16, !dbg !44
  %293 = getelementptr float, ptr addrspace(3) %274, i32 %292, !dbg !44
  %294 = bitcast float %241 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !44
  %295 = or disjoint i32 %271, 80, !dbg !44
  %296 = lshr i32 %295, 6, !dbg !44
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !44
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %295, !dbg !44
  %299 = bitcast float %242 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !44
  %300 = or disjoint i32 %271, 144, !dbg !44
  %301 = lshr i32 %300, 6, !dbg !44
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !44
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !44
  %304 = bitcast float %243 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !44
  %305 = or disjoint i32 %271, 208, !dbg !44
  %306 = lshr i32 %305, 6, !dbg !44
  %307 = getelementptr float, ptr addrspace(3) @global_smem, i32 %306, !dbg !44
  %308 = getelementptr float, ptr addrspace(3) %307, i32 %305, !dbg !44
  %309 = bitcast float %244 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #4, !dbg !44
  %310 = or disjoint i32 %271, 32, !dbg !44
  %311 = getelementptr float, ptr addrspace(3) %274, i32 %310, !dbg !44
  %312 = bitcast float %245 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !44
  %313 = or disjoint i32 %271, 96, !dbg !44
  %314 = lshr i32 %313, 6, !dbg !44
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !44
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %313, !dbg !44
  %317 = bitcast float %246 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !44
  %318 = or disjoint i32 %271, 160, !dbg !44
  %319 = lshr i32 %318, 6, !dbg !44
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !44
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !44
  %322 = bitcast float %247 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !44
  %323 = or disjoint i32 %271, 224, !dbg !44
  %324 = lshr i32 %323, 6, !dbg !44
  %325 = getelementptr float, ptr addrspace(3) @global_smem, i32 %324, !dbg !44
  %326 = getelementptr float, ptr addrspace(3) %325, i32 %323, !dbg !44
  %327 = bitcast float %248 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !44
  %328 = or disjoint i32 %271, 48, !dbg !44
  %329 = getelementptr float, ptr addrspace(3) %274, i32 %328, !dbg !44
  %330 = bitcast float %249 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !44
  %331 = or disjoint i32 %271, 112, !dbg !44
  %332 = lshr i32 %331, 6, !dbg !44
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !44
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !44
  %335 = bitcast float %250 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !44
  %336 = or disjoint i32 %271, 176, !dbg !44
  %337 = lshr i32 %336, 6, !dbg !44
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !44
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !44
  %340 = bitcast float %251 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !44
  %341 = or disjoint i32 %271, 240, !dbg !44
  %342 = lshr i32 %341, 6, !dbg !44
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !44
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !44
  %345 = bitcast float %252 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %346 = lshr i32 %272, 6, !dbg !44
  %347 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %346, !dbg !44
  %348 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %272, !dbg !44
  %349 = load i32, ptr addrspace(3) %348, align 4, !dbg !44
  %350 = or disjoint i32 %272, 1, !dbg !44
  %351 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %350, !dbg !44
  %352 = load i32, ptr addrspace(3) %351, align 4, !dbg !44
  %353 = or disjoint i32 %272, 2, !dbg !44
  %354 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %353, !dbg !44
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !44
  %356 = or disjoint i32 %272, 3, !dbg !44
  %357 = getelementptr inbounds float, ptr addrspace(3) %347, i32 %356, !dbg !44
  %358 = load i32, ptr addrspace(3) %357, align 4, !dbg !44
  %359 = or disjoint i32 %272, 1024, !dbg !44
  %360 = lshr i32 %359, 6, !dbg !44
  %361 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %360, !dbg !44
  %362 = getelementptr inbounds float, ptr addrspace(3) %361, i32 %359, !dbg !44
  %363 = load i32, ptr addrspace(3) %362, align 4, !dbg !44
  %364 = or disjoint i32 %272, 1025, !dbg !44
  %365 = lshr i32 %364, 6, !dbg !44
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %365, !dbg !44
  %367 = getelementptr inbounds float, ptr addrspace(3) %366, i32 %364, !dbg !44
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !44
  %369 = or disjoint i32 %272, 1026, !dbg !44
  %370 = lshr i32 %369, 6, !dbg !44
  %371 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %370, !dbg !44
  %372 = getelementptr inbounds float, ptr addrspace(3) %371, i32 %369, !dbg !44
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !44
  %374 = or disjoint i32 %272, 1027, !dbg !44
  %375 = lshr i32 %374, 6, !dbg !44
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %375, !dbg !44
  %377 = getelementptr inbounds float, ptr addrspace(3) %376, i32 %374, !dbg !44
  %378 = load i32, ptr addrspace(3) %377, align 4, !dbg !44
  %379 = or disjoint i32 %272, 2048, !dbg !44
  %380 = lshr i32 %379, 6, !dbg !44
  %381 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %380, !dbg !44
  %382 = getelementptr inbounds float, ptr addrspace(3) %381, i32 %379, !dbg !44
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !44
  %384 = or disjoint i32 %272, 2049, !dbg !44
  %385 = lshr i32 %384, 6, !dbg !44
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %385, !dbg !44
  %387 = getelementptr inbounds float, ptr addrspace(3) %386, i32 %384, !dbg !44
  %388 = load i32, ptr addrspace(3) %387, align 4, !dbg !44
  %389 = or disjoint i32 %272, 2050, !dbg !44
  %390 = lshr i32 %389, 6, !dbg !44
  %391 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %390, !dbg !44
  %392 = getelementptr inbounds float, ptr addrspace(3) %391, i32 %389, !dbg !44
  %393 = load i32, ptr addrspace(3) %392, align 4, !dbg !44
  %394 = or disjoint i32 %272, 2051, !dbg !44
  %395 = lshr i32 %394, 6, !dbg !44
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %395, !dbg !44
  %397 = getelementptr inbounds float, ptr addrspace(3) %396, i32 %394, !dbg !44
  %398 = load i32, ptr addrspace(3) %397, align 4, !dbg !44
  %399 = or disjoint i32 %272, 3072, !dbg !44
  %400 = lshr i32 %399, 6, !dbg !44
  %401 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %400, !dbg !44
  %402 = getelementptr inbounds float, ptr addrspace(3) %401, i32 %399, !dbg !44
  %403 = load i32, ptr addrspace(3) %402, align 4, !dbg !44
  %404 = or disjoint i32 %272, 3073, !dbg !44
  %405 = lshr i32 %404, 6, !dbg !44
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %405, !dbg !44
  %407 = getelementptr inbounds float, ptr addrspace(3) %406, i32 %404, !dbg !44
  %408 = load i32, ptr addrspace(3) %407, align 4, !dbg !44
  %409 = or disjoint i32 %272, 3074, !dbg !44
  %410 = lshr i32 %409, 6, !dbg !44
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !44
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %409, !dbg !44
  %413 = load i32, ptr addrspace(3) %412, align 4, !dbg !44
  %414 = or disjoint i32 %272, 3075, !dbg !44
  %415 = lshr i32 %414, 6, !dbg !44
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !44
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %414, !dbg !44
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %349, i32 %352, i32 %355, i32 %358, ptr addrspace(1) %262, i1 %196) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %363, i32 %368, i32 %373, i32 %378, ptr addrspace(1) %264, i1 %196) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %383, i32 %388, i32 %393, i32 %398, ptr addrspace(1) %266, i1 %196) #4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %403, i32 %408, i32 %413, i32 %418, ptr addrspace(1) %268, i1 %196) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cudctemwvjjsxdcrryzsv6lpashxebnoeh6swwegpy6nwluainlp.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 33, scope: !7)
!42 = !DILocation(line: 48, column: 30, scope: !7)
!43 = !DILocation(line: 48, column: 25, scope: !7)
!44 = !DILocation(line: 48, column: 45, scope: !7)
!45 = !DILocation(line: 48, column: 4, scope: !7)
