; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 24, !dbg !14
  %13 = srem i32 %11, 24, !dbg !14
  %14 = sext i32 %10 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = sext i32 %11 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %28 = sext i32 %12 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !17
  %30 = sext i32 %13 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !19
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !20
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !20
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !20
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !20
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !20
  %54 = insertelement <8 x i32> poison, i32 %27, i64 0, !dbg !16
  %55 = insertelement <8 x i32> %54, i32 %26, i64 1, !dbg !16
  %56 = insertelement <8 x i32> %55, i32 %25, i64 2, !dbg !16
  %57 = insertelement <8 x i32> %56, i32 %24, i64 3, !dbg !16
  %58 = insertelement <8 x i32> %57, i32 %22, i64 4, !dbg !16
  %59 = insertelement <8 x i32> %58, i32 %21, i64 5, !dbg !16
  %60 = insertelement <8 x i32> %59, i32 %20, i64 6, !dbg !16
  %61 = insertelement <8 x i32> %60, i32 %19, i64 7, !dbg !16
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !16
  %63 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !18
  %64 = insertelement <8 x i32> %63, i32 %40, i64 1, !dbg !18
  %65 = insertelement <8 x i32> %64, i32 %39, i64 2, !dbg !18
  %66 = insertelement <8 x i32> %65, i32 %38, i64 3, !dbg !18
  %67 = insertelement <8 x i32> %66, i32 %36, i64 4, !dbg !18
  %68 = insertelement <8 x i32> %67, i32 %35, i64 5, !dbg !18
  %69 = insertelement <8 x i32> %68, i32 %34, i64 6, !dbg !18
  %70 = insertelement <8 x i32> %69, i32 %33, i64 7, !dbg !18
  %71 = bitcast <8 x i32> %70 to <8 x float>, !dbg !18
  %72 = insertelement <8 x i32> poison, i32 %53, i64 0, !dbg !20
  %73 = insertelement <8 x i32> %72, i32 %52, i64 1, !dbg !20
  %74 = insertelement <8 x i32> %73, i32 %51, i64 2, !dbg !20
  %75 = insertelement <8 x i32> %74, i32 %50, i64 3, !dbg !20
  %76 = insertelement <8 x i32> %75, i32 %48, i64 4, !dbg !20
  %77 = insertelement <8 x i32> %76, i32 %47, i64 5, !dbg !20
  %78 = insertelement <8 x i32> %77, i32 %46, i64 6, !dbg !20
  %79 = insertelement <8 x i32> %78, i32 %45, i64 7, !dbg !20
  %80 = bitcast <8 x i32> %79 to <8 x float>, !dbg !20
  %81 = fadd <8 x float> %62, %71, !dbg !21
  %82 = fadd <8 x float> %81, %80, !dbg !22
  %83 = fcmp olt <8 x float> %82, zeroinitializer, !dbg !23
  %84 = extractelement <8 x i1> %83, i64 7, !dbg !27
  %85 = extractelement <8 x i1> %83, i64 6, !dbg !27
  %86 = extractelement <8 x i1> %83, i64 5, !dbg !27
  %87 = extractelement <8 x i1> %83, i64 4, !dbg !27
  %88 = extractelement <8 x i1> %83, i64 3, !dbg !27
  %89 = extractelement <8 x i1> %83, i64 2, !dbg !27
  %90 = extractelement <8 x i1> %83, i64 1, !dbg !27
  %91 = extractelement <8 x i1> %83, i64 0, !dbg !27
  %bc = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %92 = extractelement <8 x i32> %bc, i64 7, !dbg !28
  %93 = select i1 %84, i32 0, i32 %92, !dbg !27
  %bc1 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %94 = extractelement <8 x i32> %bc1, i64 6, !dbg !28
  %95 = select i1 %85, i32 0, i32 %94, !dbg !27
  %bc2 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %96 = extractelement <8 x i32> %bc2, i64 5, !dbg !28
  %97 = select i1 %86, i32 0, i32 %96, !dbg !27
  %bc3 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %98 = extractelement <8 x i32> %bc3, i64 4, !dbg !28
  %99 = select i1 %87, i32 0, i32 %98, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %93, i32 %95, i32 %97, i32 %99, ptr addrspace(1) %15, i1 true) #1, !dbg !28
  %bc4 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %100 = extractelement <8 x i32> %bc4, i64 3, !dbg !28
  %101 = select i1 %88, i32 0, i32 %100, !dbg !27
  %bc5 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %102 = extractelement <8 x i32> %bc5, i64 2, !dbg !28
  %103 = select i1 %89, i32 0, i32 %102, !dbg !27
  %bc6 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %104 = extractelement <8 x i32> %bc6, i64 1, !dbg !28
  %105 = select i1 %90, i32 0, i32 %104, !dbg !27
  %bc7 = bitcast <8 x float> %82 to <8 x i32>, !dbg !28
  %106 = extractelement <8 x i32> %bc7, i64 0, !dbg !28
  %107 = select i1 %91, i32 0, i32 %106, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %103, i32 %105, i32 %107, ptr addrspace(1) %17, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5agpmeo64542dkq56xfaxtbsv7y6cnqacw3yu4go67rwquzubg2.py", directory: "inductor_cache/5a")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_4", linkageName: "triton_poi_fused_add_convolution_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 32, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 4, scope: !7)
