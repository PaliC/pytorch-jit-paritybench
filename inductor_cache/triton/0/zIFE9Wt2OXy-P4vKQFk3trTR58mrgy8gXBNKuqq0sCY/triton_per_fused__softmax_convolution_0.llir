; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_convolution_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %9 = icmp slt i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %8, 4, !dbg !13
  %13 = or disjoint i32 %12, %11, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9) #2, !dbg !16
  %17 = bitcast i32 %16 to float, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %9, i32 0, i1 %9) #2, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = fadd float %17, %21, !dbg !18
  %23 = fadd float %19, %21, !dbg !18
  %24 = select i1 %9, float %22, float 0xFFF0000000000000, !dbg !19
  %25 = select i1 %9, float %23, float 0xFFF0000000000000, !dbg !19
  %26 = bitcast float %24 to i32, !dbg !20
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 8, i32 31), !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = fcmp ogt float %24, %28, !dbg !24
  %30 = fcmp uno float %24, 0.000000e+00, !dbg !26
  %31 = or i1 %29, %30, !dbg !27
  %32 = select i1 %31, float %24, float %28, !dbg !28
  %33 = bitcast float %32 to i32, !dbg !20
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 4, i32 31), !dbg !20
  %35 = bitcast i32 %34 to float, !dbg !20
  %36 = fcmp ogt float %32, %35, !dbg !24
  %37 = fcmp uno float %32, 0.000000e+00, !dbg !26
  %38 = or i1 %36, %37, !dbg !27
  %39 = select i1 %38, float %32, float %35, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !20
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 2, i32 31), !dbg !20
  %42 = bitcast i32 %41 to float, !dbg !20
  %43 = fcmp ogt float %39, %42, !dbg !24
  %44 = fcmp uno float %39, 0.000000e+00, !dbg !26
  %45 = or i1 %43, %44, !dbg !27
  %46 = select i1 %45, float %39, float %42, !dbg !28
  %47 = bitcast float %46 to i32, !dbg !20
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 1, i32 31), !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = fcmp ogt float %46, %49, !dbg !24
  %51 = fcmp uno float %46, 0.000000e+00, !dbg !26
  %52 = or i1 %50, %51, !dbg !27
  %53 = select i1 %52, float %46, float %49, !dbg !28
  %54 = bitcast float %25 to i32, !dbg !20
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 8, i32 31), !dbg !20
  %56 = bitcast i32 %55 to float, !dbg !20
  %57 = fcmp ogt float %25, %56, !dbg !24
  %58 = fcmp uno float %25, 0.000000e+00, !dbg !26
  %59 = or i1 %58, %57, !dbg !27
  %60 = select i1 %59, float %25, float %56, !dbg !28
  %61 = bitcast float %60 to i32, !dbg !20
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !20
  %63 = bitcast i32 %62 to float, !dbg !20
  %64 = fcmp ogt float %60, %63, !dbg !24
  %65 = fcmp uno float %60, 0.000000e+00, !dbg !26
  %66 = or i1 %64, %65, !dbg !27
  %67 = select i1 %66, float %60, float %63, !dbg !28
  %68 = bitcast float %67 to i32, !dbg !20
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !20
  %70 = bitcast i32 %69 to float, !dbg !20
  %71 = fcmp ogt float %67, %70, !dbg !24
  %72 = fcmp uno float %67, 0.000000e+00, !dbg !26
  %73 = or i1 %71, %72, !dbg !27
  %74 = select i1 %73, float %67, float %70, !dbg !28
  %75 = bitcast float %74 to i32, !dbg !20
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !20
  %77 = bitcast i32 %76 to float, !dbg !20
  %78 = fcmp ogt float %74, %77, !dbg !24
  %79 = fcmp uno float %74, 0.000000e+00, !dbg !26
  %80 = or i1 %78, %79, !dbg !27
  %81 = select i1 %80, float %74, float %77, !dbg !28
  %82 = fsub float %22, %53, !dbg !29
  %83 = fsub float %23, %81, !dbg !29
  %84 = fmul float %82, 0x3FF7154760000000, !dbg !30
  %85 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %84) #2, !dbg !30
  %86 = fmul float %83, 0x3FF7154760000000, !dbg !30
  %87 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %86) #2, !dbg !30
  %88 = select i1 %9, float %85, float 0.000000e+00, !dbg !31
  %89 = select i1 %9, float %87, float 0.000000e+00, !dbg !31
  %90 = bitcast float %88 to i32, !dbg !32
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %88, %92, !dbg !36
  %94 = bitcast float %93 to i32, !dbg !32
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = fadd float %93, %96, !dbg !36
  %98 = bitcast float %97 to i32, !dbg !32
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = fadd float %97, %100, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = fadd float %101, %104, !dbg !36
  %106 = bitcast float %89 to i32, !dbg !32
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = fadd float %89, %108, !dbg !36
  %110 = bitcast float %109 to i32, !dbg !32
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = fadd float %109, %112, !dbg !36
  %114 = bitcast float %113 to i32, !dbg !32
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fadd float %113, %116, !dbg !36
  %118 = bitcast float %117 to i32, !dbg !32
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = fadd float %117, %120, !dbg !36
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %105) #2, !dbg !38
  %123 = and i32 %10, 48, !dbg !39
  %124 = icmp eq i32 %123, 0, !dbg !39
  %125 = bitcast float %22 to i32, !dbg !39
  %126 = and i1 %124, %9, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %15, i1 %126) #2, !dbg !39
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %14, !dbg !40
  %128 = bitcast float %122 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 %126) #2, !dbg !41
  %129 = sext i32 %8 to i64, !dbg !42
  %130 = getelementptr float, ptr addrspace(1) %2, i64 %129, !dbg !42
  %urem = and i32 %10, 63, !dbg !43
  %131 = icmp eq i32 %urem, 0, !dbg !43
  %132 = bitcast float %81 to i32, !dbg !43
  %133 = and i1 %131, %9, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %130, i1 %133) #2, !dbg !43
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !44
  %135 = bitcast float %121 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %134, i1 %133) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py", directory: "inductor_cache/sp")
!4 = !{ptr @triton_per_fused__softmax_convolution_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_convolution_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_convolution_0", linkageName: "triton_per_fused__softmax_convolution_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 42, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 47, scope: !7)
!17 = !DILocation(line: 32, column: 19, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 36, column: 33, scope: !7)
!20 = !DILocation(line: 131, column: 29, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 37, column: 37, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !23)
!27 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !23)
!28 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !23)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 23, scope: !7)
!31 = !DILocation(line: 41, column: 35, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 42, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 47, scope: !7)
!40 = !DILocation(line: 45, column: 25, scope: !7)
!41 = !DILocation(line: 45, column: 45, scope: !7)
!42 = !DILocation(line: 46, column: 25, scope: !7)
!43 = !DILocation(line: 46, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 25, scope: !7)
!45 = !DILocation(line: 47, column: 37, scope: !7)
!46 = !DILocation(line: 47, column: 4, scope: !7)
