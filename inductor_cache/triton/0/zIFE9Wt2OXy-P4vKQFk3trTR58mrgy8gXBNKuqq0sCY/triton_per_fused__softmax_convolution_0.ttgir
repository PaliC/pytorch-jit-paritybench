#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0)
#loc1 = loc(unknown)
#loc15 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":37:37)
#loc25 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":42:26)
#loc38 = loc(callsite(#loc1 at #loc15))
#loc44 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_convolution_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg5: i32 loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0xFF800000> : tensor<1x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0xFF800000> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %7 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %8 = tt.splat %6 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %9 = arith.addi %4, %7 : tensor<1x16xi32, #blocked> loc(#loc6)
    %10 = arith.addi %5, %8 : tensor<1x16xi32, #blocked1> loc(#loc6)
    %11 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %13 = tt.addptr %11, %9 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = tt.addptr %12, %10 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc7)
    %15 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %16 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc8)
    %17 = tt.load %13, %15, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %18 = tt.load %14, %16, %cst_2 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %19 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc9)
    %20 = tt.load %19 : !tt.ptr<f32> loc(#loc10)
    %21 = tt.splat %20 : f32 -> tensor<1x16xf32, #blocked> loc(#loc11)
    %22 = tt.splat %20 : f32 -> tensor<1x16xf32, #blocked1> loc(#loc11)
    %23 = arith.addf %17, %21 : tensor<1x16xf32, #blocked> loc(#loc12)
    %24 = arith.addf %18, %22 : tensor<1x16xf32, #blocked1> loc(#loc12)
    %25 = arith.select %15, %23, %cst_0 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc13)
    %26 = arith.select %16, %24, %cst_1 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc13)
    %27 = "tt.reduce"(%25) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc15)), %arg8: f32 loc(callsite(#loc1 at #loc15))):
      %52 = arith.cmpf ogt, %arg7, %arg8 : f32 loc(#loc46)
      %53 = arith.cmpf une, %arg7, %arg7 : f32 loc(#loc47)
      %54 = arith.ori %52, %53 : i1 loc(#loc48)
      %55 = arith.select %54, %arg7, %arg8 : f32 loc(#loc49)
      tt.reduce.return %55 : f32 loc(#loc37)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc37)
    %28 = "tt.reduce"(%26) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc15)), %arg8: f32 loc(callsite(#loc1 at #loc15))):
      %52 = arith.cmpf ogt, %arg7, %arg8 : f32 loc(#loc46)
      %53 = arith.cmpf une, %arg7, %arg7 : f32 loc(#loc47)
      %54 = arith.ori %52, %53 : i1 loc(#loc48)
      %55 = arith.select %54, %arg7, %arg8 : f32 loc(#loc49)
      tt.reduce.return %55 : f32 loc(#loc37)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc37)
    %29 = tt.expand_dims %27 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc20)
    %30 = tt.expand_dims %28 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc20)
    %31 = tt.broadcast %29 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc21)
    %32 = tt.broadcast %30 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc21)
    %33 = arith.subf %23, %31 : tensor<1x16xf32, #blocked> loc(#loc21)
    %34 = arith.subf %24, %32 : tensor<1x16xf32, #blocked1> loc(#loc21)
    %35 = math.exp %33 : tensor<1x16xf32, #blocked> loc(#loc22)
    %36 = math.exp %34 : tensor<1x16xf32, #blocked1> loc(#loc22)
    %37 = arith.select %15, %35, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc23)
    %38 = arith.select %16, %36, %cst_2 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc23)
    %39 = "tt.reduce"(%37) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc25)), %arg8: f32 loc(callsite(#loc1 at #loc25))):
      %52 = arith.addf %arg7, %arg8 : f32 loc(#loc50)
      tt.reduce.return %52 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc43)
    %40 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc25)), %arg8: f32 loc(callsite(#loc1 at #loc25))):
      %52 = arith.addf %arg7, %arg8 : f32 loc(#loc50)
      tt.reduce.return %52 : f32 loc(#loc43)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc43)
    %41 = tt.expand_dims %39 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %42 = tt.expand_dims %40 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %43 = tt.broadcast %41 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc28)
    %44 = arith.divf %35, %43 : tensor<1x16xf32, #blocked> loc(#loc28)
    tt.store %13, %23, %15 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc29)
    %45 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc30)
    %46 = tt.addptr %45, %9 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc30)
    tt.store %46, %44, %15 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc31)
    %47 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %49 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc33)
    tt.store %48, %30, %49 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %50 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %51 = tt.splat %50 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %51, %42, %49 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.return loc(#loc36)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":23:28)
#loc3 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":25:21)
#loc4 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":26:34)
#loc5 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":31:42)
#loc6 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":31:39)
#loc7 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":31:34)
#loc8 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":31:47)
#loc9 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":32:30)
#loc10 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":32:19)
#loc11 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":33:33)
#loc12 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":34:18)
#loc13 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":36:33)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc20 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":37:40)
#loc21 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":38:18)
#loc22 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":39:23)
#loc23 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":41:35)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":42:29)
#loc28 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":43:19)
#loc29 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":44:47)
#loc30 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":45:25)
#loc31 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":45:45)
#loc32 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":46:25)
#loc33 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":46:36)
#loc34 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":47:25)
#loc35 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":47:37)
#loc36 = loc("inductor_cache/sp/cspicucxxhjltz7uk4d6dutnhoai7ft5uplgc5jcb5wsfbf476ok.py":47:4)
#loc37 = loc(callsite(#loc14 at #loc15))
#loc39 = loc(callsite(#loc16 at #loc14))
#loc40 = loc(callsite(#loc17 at #loc14))
#loc41 = loc(callsite(#loc18 at #loc14))
#loc42 = loc(callsite(#loc19 at #loc14))
#loc43 = loc(callsite(#loc24 at #loc25))
#loc45 = loc(callsite(#loc26 at #loc24))
#loc46 = loc(callsite(#loc39 at #loc15))
#loc47 = loc(callsite(#loc40 at #loc15))
#loc48 = loc(callsite(#loc41 at #loc15))
#loc49 = loc(callsite(#loc42 at #loc15))
#loc50 = loc(callsite(#loc45 at #loc25))
