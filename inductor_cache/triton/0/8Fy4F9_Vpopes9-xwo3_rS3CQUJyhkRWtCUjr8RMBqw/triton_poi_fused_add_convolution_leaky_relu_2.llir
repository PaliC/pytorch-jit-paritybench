; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_leaky_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %15 = srem i32 %13, 32, !dbg !15
  %16 = srem i32 %14, 32, !dbg !15
  %17 = sext i32 %11 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %12 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %31 = sext i32 %15 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = sext i32 %16 to i64, !dbg !18
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !21
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %50 = bitcast i32 %46 to float, !dbg !21
  %51 = bitcast i32 %47 to float, !dbg !21
  %52 = bitcast i32 %48 to float, !dbg !21
  %53 = bitcast i32 %49 to float, !dbg !21
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !21
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !21
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !21
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = bitcast i32 %56 to float, !dbg !21
  %61 = bitcast i32 %57 to float, !dbg !21
  %62 = bitcast i32 %58 to float, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !23
  %66 = bitcast i32 %65 to float, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !23
  %68 = bitcast i32 %67 to float, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !23
  %70 = bitcast i32 %69 to float, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !23
  %74 = bitcast i32 %73 to float, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !23
  %78 = bitcast i32 %77 to float, !dbg !23
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !23
  %80 = bitcast i32 %79 to float, !dbg !23
  %81 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !17
  %82 = insertelement <8 x i32> %81, i32 %29, i64 1, !dbg !17
  %83 = insertelement <8 x i32> %82, i32 %28, i64 2, !dbg !17
  %84 = insertelement <8 x i32> %83, i32 %27, i64 3, !dbg !17
  %85 = insertelement <8 x i32> %84, i32 %25, i64 4, !dbg !17
  %86 = insertelement <8 x i32> %85, i32 %24, i64 5, !dbg !17
  %87 = insertelement <8 x i32> %86, i32 %23, i64 6, !dbg !17
  %88 = insertelement <8 x i32> %87, i32 %22, i64 7, !dbg !17
  %89 = bitcast <8 x i32> %88 to <8 x float>, !dbg !17
  %90 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !19
  %91 = insertelement <8 x i32> %90, i32 %41, i64 1, !dbg !19
  %92 = insertelement <8 x i32> %91, i32 %40, i64 2, !dbg !19
  %93 = insertelement <8 x i32> %92, i32 %39, i64 3, !dbg !19
  %94 = insertelement <8 x i32> %93, i32 %38, i64 4, !dbg !19
  %95 = insertelement <8 x i32> %94, i32 %37, i64 5, !dbg !19
  %96 = insertelement <8 x i32> %95, i32 %36, i64 6, !dbg !19
  %97 = insertelement <8 x i32> %96, i32 %35, i64 7, !dbg !19
  %98 = bitcast <8 x i32> %97 to <8 x float>, !dbg !19
  %99 = fadd <8 x float> %89, %98, !dbg !24
  %100 = fcmp ogt <8 x float> %99, zeroinitializer, !dbg !25
  %101 = extractelement <8 x float> %99, i64 7, !dbg !26
  %102 = fmul float %101, 0x3F847AE140000000, !dbg !27
  %103 = extractelement <8 x float> %99, i64 6, !dbg !26
  %104 = fmul float %103, 0x3F847AE140000000, !dbg !27
  %105 = extractelement <8 x float> %99, i64 5, !dbg !26
  %106 = fmul float %105, 0x3F847AE140000000, !dbg !27
  %107 = extractelement <8 x float> %99, i64 4, !dbg !26
  %108 = fmul float %107, 0x3F847AE140000000, !dbg !27
  %109 = extractelement <8 x float> %99, i64 3, !dbg !26
  %110 = fmul float %109, 0x3F847AE140000000, !dbg !27
  %111 = extractelement <8 x float> %99, i64 2, !dbg !26
  %112 = fmul float %111, 0x3F847AE140000000, !dbg !27
  %113 = extractelement <8 x float> %99, i64 1, !dbg !26
  %114 = fmul float %113, 0x3F847AE140000000, !dbg !27
  %115 = extractelement <8 x float> %99, i64 0, !dbg !26
  %116 = fmul float %115, 0x3F847AE140000000, !dbg !27
  %117 = extractelement <8 x i1> %100, i64 7, !dbg !26
  %118 = select i1 %117, float %101, float %102, !dbg !26
  %119 = extractelement <8 x i1> %100, i64 6, !dbg !26
  %120 = select i1 %119, float %103, float %104, !dbg !26
  %121 = extractelement <8 x i1> %100, i64 5, !dbg !26
  %122 = select i1 %121, float %105, float %106, !dbg !26
  %123 = extractelement <8 x i1> %100, i64 4, !dbg !26
  %124 = select i1 %123, float %107, float %108, !dbg !26
  %125 = extractelement <8 x i1> %100, i64 3, !dbg !26
  %126 = select i1 %125, float %109, float %110, !dbg !26
  %127 = extractelement <8 x i1> %100, i64 2, !dbg !26
  %128 = select i1 %127, float %111, float %112, !dbg !26
  %129 = extractelement <8 x i1> %100, i64 1, !dbg !26
  %130 = select i1 %129, float %113, float %114, !dbg !26
  %131 = extractelement <8 x i1> %100, i64 0, !dbg !26
  %132 = select i1 %131, float %115, float %116, !dbg !26
  %133 = fadd float %50, %66, !dbg !28
  %134 = fadd float %51, %68, !dbg !28
  %135 = fadd float %52, %70, !dbg !28
  %136 = fadd float %53, %72, !dbg !28
  %137 = fadd float %59, %74, !dbg !28
  %138 = fadd float %60, %76, !dbg !28
  %139 = fadd float %61, %78, !dbg !28
  %140 = fadd float %62, %80, !dbg !28
  %141 = fadd float %118, %133, !dbg !29
  %142 = fadd float %120, %134, !dbg !29
  %143 = fadd float %122, %135, !dbg !29
  %144 = fadd float %124, %136, !dbg !29
  %145 = fadd float %126, %137, !dbg !29
  %146 = fadd float %128, %138, !dbg !29
  %147 = fadd float %130, %139, !dbg !29
  %148 = fadd float %132, %140, !dbg !29
  %149 = bitcast float %141 to i32, !dbg !30
  %150 = bitcast float %142 to i32, !dbg !30
  %151 = bitcast float %143 to i32, !dbg !30
  %152 = bitcast float %144 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %149, i32 %150, i32 %151, i32 %152, ptr addrspace(1) %18, i1 true) #1, !dbg !30
  %153 = bitcast float %145 to i32, !dbg !30
  %154 = bitcast float %146 to i32, !dbg !30
  %155 = bitcast float %147 to i32, !dbg !30
  %156 = bitcast float %148 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %20, i1 true) #1, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfn52a3w7orkitimj6xxc3upyhrf4gel2mh76s4sael4ipzlk6q.py", directory: "inductor_cache/yf")
!4 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_leaky_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_leaky_relu_2", linkageName: "triton_poi_fused_add_convolution_leaky_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 32, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 19, scope: !7)
!29 = !DILocation(line: 37, column: 19, scope: !7)
!30 = !DILocation(line: 38, column: 40, scope: !7)
!31 = !DILocation(line: 38, column: 4, scope: !7)
