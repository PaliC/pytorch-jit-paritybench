#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":38:24)
#loc37 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_mul_sigmoid_29(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<8x16xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<3840> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3840> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<960> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<960> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<15360> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1.600000e+01> : tensor<8x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_1 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_2 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_3 : tensor<8x1xi32, #blocked> loc(#loc9)
    %16 = arith.muli %13, %cst_4 : tensor<1x16xi32, #blocked> loc(#loc10)
    %17 = tt.broadcast %14 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc11)
    %18 = tt.broadcast %16 : tensor<1x16xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc11)
    %19 = arith.addi %17, %18 : tensor<8x16xi32, #blocked> loc(#loc11)
    %20 = arith.muli %15, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc12)
    %21 = tt.broadcast %20 : tensor<8x1xi32, #blocked> -> tensor<8x16xi32, #blocked> loc(#loc13)
    %22 = arith.addi %19, %21 : tensor<8x16xi32, #blocked> loc(#loc13)
    %23 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc14)
    %24 = tt.addptr %23, %22 : tensor<8x16x!tt.ptr<f32>, #blocked>, tensor<8x16xi32, #blocked> loc(#loc14)
    %25 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x16xi1, #blocked> loc(#loc15)
    %26 = tt.load %24, %25, %cst : tensor<8x16x!tt.ptr<f32>, #blocked> loc(#loc15)
    %27 = arith.subf %cst, %26 : tensor<8x16xf32, #blocked> loc(#loc32)
    %28 = math.exp %27 : tensor<8x16xf32, #blocked> loc(#loc33)
    %29 = arith.addf %28, %cst_0 : tensor<8x16xf32, #blocked> loc(#loc34)
    %30 = arith.divf %cst_0, %29 : tensor<8x16xf32, #blocked> loc(#loc35)
    %31 = arith.mulf %26, %30 : tensor<8x16xf32, #blocked> loc(#loc21)
    %32 = arith.select %25, %31, %cst : tensor<8x16xi1, #blocked>, tensor<8x16xf32, #blocked> loc(#loc22)
    %33 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc24)), %arg5: f32 loc(callsite(#loc1 at #loc24))):
      %39 = arith.addf %arg4, %arg5 : f32 loc(#loc39)
      tt.reduce.return %39 : f32 loc(#loc36)
    }) : (tensor<8x16xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc36)
    %34 = triton_gpu.convert_layout %33 {fastmath = #arith.fastmath<none>} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc26)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xf32, #blocked1> loc(#loc27)
    %36 = arith.divf %35, %cst_6 : tensor<8x1xf32, #blocked1> loc(#loc26)
    gpu.barrier loc(#loc28)
    %37 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %38 = tt.addptr %37, %9 : tensor<8x1x!tt.ptr<f32>, #blocked1>, tensor<8x1xi32, #blocked1> loc(#loc29)
    tt.store %38, %36, %11 : tensor<8x1x!tt.ptr<f32>, #blocked1> loc(#loc30)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":23:28)
#loc3 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":23:33)
#loc4 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":24:44)
#loc5 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":24:23)
#loc6 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":25:21)
#loc7 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":26:34)
#loc8 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":30:19)
#loc9 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":31:19)
#loc10 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:39)
#loc11 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:35)
#loc12 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:50)
#loc13 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:44)
#loc14 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:30)
#loc15 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":33:55)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:30)
#loc17 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":34:22)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:29)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:20)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":47:16)
#loc21 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":35:18)
#loc22 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":37:33)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":40:18)
#loc27 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":38:27)
#loc28 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":41:4)
#loc29 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":42:28)
#loc30 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":42:39)
#loc31 = loc("inductor_cache/7n/c7ncxer3cnr67x5oilvaoidrjqxtyd2rl7a5v2dz6kxjmqqkw4b6.py":42:4)
#loc32 = loc(callsite(#loc16 at #loc17))
#loc33 = loc(callsite(#loc18 at #loc17))
#loc34 = loc(callsite(#loc19 at #loc17))
#loc35 = loc(callsite(#loc20 at #loc17))
#loc36 = loc(callsite(#loc23 at #loc24))
#loc38 = loc(callsite(#loc25 at #loc23))
#loc39 = loc(callsite(#loc38 at #loc24))
