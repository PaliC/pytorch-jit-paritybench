; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) nocapture readnone %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) nocapture readnone %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = icmp slt i32 %22, 1024, !dbg !14
  %24 = srem i32 %22, 256, !dbg !15
  %25 = sext i32 %22 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !16
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %23) #1, !dbg !17
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !17
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !17
  %30 = bitcast i32 %28 to float, !dbg !17
  %31 = bitcast i32 %29 to float, !dbg !17
  %32 = sext i32 %24 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !18
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %23) #1, !dbg !19
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !19
  %37 = bitcast i32 %35 to float, !dbg !19
  %38 = bitcast i32 %36 to float, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #1, !dbg !20
  %40 = bitcast i32 %39 to float, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #1, !dbg !21
  %42 = bitcast i32 %41 to float, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !22
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %23) #1, !dbg !23
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !23
  %47 = bitcast i32 %45 to float, !dbg !23
  %48 = bitcast i32 %46 to float, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !24
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %23) #1, !dbg !25
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !25
  %53 = bitcast i32 %51 to float, !dbg !25
  %54 = bitcast i32 %52 to float, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !26
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 %23) #1, !dbg !27
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !27
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !27
  %59 = bitcast i32 %57 to float, !dbg !27
  %60 = bitcast i32 %58 to float, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !28
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %23) #1, !dbg !29
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !29
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !29
  %65 = bitcast i32 %63 to float, !dbg !29
  %66 = bitcast i32 %64 to float, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !30
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %23) #1, !dbg !31
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !31
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !31
  %71 = bitcast i32 %69 to float, !dbg !31
  %72 = bitcast i32 %70 to float, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %13, i64 %32, !dbg !32
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %23) #1, !dbg !33
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !33
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !33
  %77 = bitcast i32 %75 to float, !dbg !33
  %78 = bitcast i32 %76 to float, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !34
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %79, i1 %23) #1, !dbg !35
  %81 = extractvalue { i32, i32 } %80, 0, !dbg !35
  %82 = extractvalue { i32, i32 } %80, 1, !dbg !35
  %83 = bitcast i32 %81 to float, !dbg !35
  %84 = bitcast i32 %82 to float, !dbg !35
  %85 = getelementptr float, ptr addrspace(1) %14, i64 %32, !dbg !36
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %23) #1, !dbg !37
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !37
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !37
  %89 = bitcast i32 %87 to float, !dbg !37
  %90 = bitcast i32 %88 to float, !dbg !37
  %91 = fadd float %30, %37, !dbg !38
  %92 = fadd float %31, %38, !dbg !38
  %93 = fsub float %91, %91, !dbg !39
  %94 = fsub float %92, %92, !dbg !39
  %95 = fmul float %93, %40, !dbg !40
  %96 = fmul float %94, %40, !dbg !40
  %97 = fadd float %91, %95, !dbg !41
  %98 = fadd float %92, %96, !dbg !41
  %99 = fsub float %97, %97, !dbg !42
  %100 = fsub float %98, %98, !dbg !42
  %101 = fmul float %99, %42, !dbg !43
  %102 = fmul float %100, %42, !dbg !43
  %103 = fadd float %97, %101, !dbg !44
  %104 = fadd float %98, %102, !dbg !44
  %105 = fadd float %47, %53, !dbg !45
  %106 = fadd float %48, %54, !dbg !45
  %107 = fadd float %105, %103, !dbg !46
  %108 = fadd float %106, %104, !dbg !46
  %109 = fsub float %107, %107, !dbg !47
  %110 = fsub float %108, %108, !dbg !47
  %111 = fmul float %109, %40, !dbg !48
  %112 = fmul float %110, %40, !dbg !48
  %113 = fadd float %107, %111, !dbg !49
  %114 = fadd float %108, %112, !dbg !49
  %115 = fsub float %113, %113, !dbg !50
  %116 = fsub float %114, %114, !dbg !50
  %117 = fmul float %115, %42, !dbg !51
  %118 = fmul float %116, %42, !dbg !51
  %119 = fadd float %113, %117, !dbg !52
  %120 = fadd float %114, %118, !dbg !52
  %121 = fadd float %59, %65, !dbg !53
  %122 = fadd float %60, %66, !dbg !53
  %123 = fadd float %121, %119, !dbg !54
  %124 = fadd float %122, %120, !dbg !54
  %125 = fsub float %123, %123, !dbg !55
  %126 = fsub float %124, %124, !dbg !55
  %127 = fmul float %125, %40, !dbg !56
  %128 = fmul float %126, %40, !dbg !56
  %129 = fadd float %123, %127, !dbg !57
  %130 = fadd float %124, %128, !dbg !57
  %131 = fsub float %129, %129, !dbg !58
  %132 = fsub float %130, %130, !dbg !58
  %133 = fmul float %131, %42, !dbg !59
  %134 = fmul float %132, %42, !dbg !59
  %135 = fadd float %129, %133, !dbg !60
  %136 = fadd float %130, %134, !dbg !60
  %137 = fadd float %71, %77, !dbg !61
  %138 = fadd float %72, %78, !dbg !61
  %139 = fadd float %137, %135, !dbg !62
  %140 = fadd float %138, %136, !dbg !62
  %141 = fsub float %139, %139, !dbg !63
  %142 = fsub float %140, %140, !dbg !63
  %143 = fmul float %141, %40, !dbg !64
  %144 = fmul float %142, %40, !dbg !64
  %145 = fadd float %139, %143, !dbg !65
  %146 = fadd float %140, %144, !dbg !65
  %147 = fsub float %145, %145, !dbg !66
  %148 = fsub float %146, %146, !dbg !66
  %149 = fmul float %147, %42, !dbg !67
  %150 = fmul float %148, %42, !dbg !67
  %151 = fadd float %145, %149, !dbg !68
  %152 = fadd float %146, %150, !dbg !68
  %153 = fadd float %83, %89, !dbg !69
  %154 = fadd float %84, %90, !dbg !69
  %155 = fadd float %153, %151, !dbg !70
  %156 = fadd float %154, %152, !dbg !70
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !71
  %158 = bitcast float %107 to i32, !dbg !72
  %159 = bitcast float %108 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 %23) #1, !dbg !72
  %160 = bitcast float %123 to i32, !dbg !73
  %161 = bitcast float %124 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %55, i1 %23) #1, !dbg !73
  %162 = bitcast float %139 to i32, !dbg !74
  %163 = bitcast float %140 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %162, i32 %163, ptr addrspace(1) %67, i1 %23) #1, !dbg !74
  %164 = bitcast float %155 to i32, !dbg !75
  %165 = bitcast float %156 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %79, i1 %23) #1, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmk7bqaqoiiszqn6rqwu42wmtbt53ehn4jvimbiey4lfcqzl3mfl.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_21", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 28, column: 30, scope: !7)
!17 = !DILocation(line: 28, column: 35, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 20, scope: !7)
!21 = !DILocation(line: 34, column: 20, scope: !7)
!22 = !DILocation(line: 36, column: 31, scope: !7)
!23 = !DILocation(line: 36, column: 36, scope: !7)
!24 = !DILocation(line: 37, column: 31, scope: !7)
!25 = !DILocation(line: 37, column: 36, scope: !7)
!26 = !DILocation(line: 38, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 40, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 35, scope: !7)
!31 = !DILocation(line: 40, column: 40, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 36, scope: !7)
!34 = !DILocation(line: 42, column: 35, scope: !7)
!35 = !DILocation(line: 42, column: 40, scope: !7)
!36 = !DILocation(line: 43, column: 32, scope: !7)
!37 = !DILocation(line: 43, column: 37, scope: !7)
!38 = !DILocation(line: 48, column: 18, scope: !7)
!39 = !DILocation(line: 52, column: 19, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 19, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 20, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 20, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 68, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 70, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 20, scope: !7)
!59 = !DILocation(line: 72, column: 20, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 74, column: 20, scope: !7)
!62 = !DILocation(line: 75, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 20, scope: !7)
!64 = !DILocation(line: 77, column: 20, scope: !7)
!65 = !DILocation(line: 78, column: 20, scope: !7)
!66 = !DILocation(line: 79, column: 20, scope: !7)
!67 = !DILocation(line: 80, column: 20, scope: !7)
!68 = !DILocation(line: 81, column: 20, scope: !7)
!69 = !DILocation(line: 82, column: 20, scope: !7)
!70 = !DILocation(line: 83, column: 20, scope: !7)
!71 = !DILocation(line: 84, column: 28, scope: !7)
!72 = !DILocation(line: 84, column: 40, scope: !7)
!73 = !DILocation(line: 85, column: 40, scope: !7)
!74 = !DILocation(line: 86, column: 40, scope: !7)
!75 = !DILocation(line: 87, column: 40, scope: !7)
!76 = !DILocation(line: 87, column: 4, scope: !7)
