; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 128, !dbg !11
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %12 = shl i32 %11, 8, !dbg !13
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %14 = shl i32 %13, 1, !dbg !14
  %15 = and i32 %14, 254, !dbg !14
  %16 = or disjoint i32 %15, 1, !dbg !14
  %17 = or disjoint i32 %12, %15, !dbg !15
  %18 = or disjoint i32 %12, %16, !dbg !15
  %19 = icmp slt i32 %17, 256, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %20 = sdiv i32 %.frozen, 32, !dbg !17
  %21 = mul i32 %20, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %22 = shl i32 %17, 5, !dbg !19
  %23 = shl i32 %18, 5, !dbg !19
  %24 = shl i32 %20, 13, !dbg !20
  %25 = add i32 %24, %.decomposed, !dbg !21
  %26 = add i32 %25, %22, !dbg !22
  %27 = add i32 %25, %23, !dbg !22
  %28 = sext i32 %26 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = sext i32 %27 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = and i1 %10, %19, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %32) #4, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %32) #4, !dbg !25
  %35 = sext i32 %.decomposed to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #4, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #4, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %10) #4, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %10) #4, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %10) #4, !dbg !31
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %10) #4, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #4, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #4, !dbg !33
  %49 = fadd float %42, 0x3EE4F8B580000000, !dbg !34
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %52, 0, !dbg !35
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !35
  br i1 %.not.i1, label %59, label %54, !dbg !35

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !35

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !35

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !35
  %64 = bitcast i32 %34 to float, !dbg !25
  %65 = bitcast i32 %38 to float, !dbg !27
  %66 = fsub float %64, %65, !dbg !36
  %67 = bitcast i32 %33 to float, !dbg !25
  %68 = fsub float %67, %65, !dbg !36
  %69 = bitcast i32 %48 to float, !dbg !33
  %70 = bitcast i32 %45 to float, !dbg !31
  %71 = and i32 %13, 127, !dbg !14
  %72 = or disjoint i32 %71, 128, !dbg !14
  %73 = or disjoint i32 %12, %72, !dbg !15
  %74 = icmp slt i32 %73, 256, !dbg !16
  %75 = and i1 %10, %74, !dbg !24
  %76 = or disjoint i32 %12, %71, !dbg !15
  %77 = icmp slt i32 %76, 256, !dbg !16
  %78 = and i1 %10, %77, !dbg !24
  %79 = shl i32 %73, 5, !dbg !19
  %80 = add i32 %25, %79, !dbg !22
  %81 = shl i32 %76, 5, !dbg !19
  %82 = add i32 %25, %81, !dbg !22
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !37
  %84 = fmul float %68, %83, !dbg !38
  %85 = fmul float %66, %83, !dbg !38
  %86 = fmul float %84, %70, !dbg !39
  %87 = fmul float %85, %70, !dbg !39
  %88 = fadd float %86, %69, !dbg !40
  %89 = fadd float %87, %69, !dbg !40
  %90 = fcmp olt float %88, 0.000000e+00, !dbg !41
  %91 = fcmp olt float %89, 0.000000e+00, !dbg !41
  %92 = select i1 %90, float 0.000000e+00, float %88, !dbg !45
  %93 = select i1 %91, float 0.000000e+00, float %89, !dbg !45
  %94 = shl i32 %9, 8, !dbg !46
  %95 = add i32 %17, %94, !dbg !47
  %96 = sext i32 %95 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !48
  %98 = bitcast float %92 to i32, !dbg !49
  %99 = bitcast float %93 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %97, i1 %32) #4, !dbg !49
  %100 = sext i32 %82 to i64, !dbg !50
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !50
  %102 = sext i32 %80 to i64, !dbg !50
  %103 = getelementptr float, ptr addrspace(1) %6, i64 %102, !dbg !50
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !51
  %105 = bitcast float %92 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #4, !dbg !51
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !51
  %107 = bitcast float %93 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !51
  %109 = load i32, ptr addrspace(3) %108, align 4, !dbg !51
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !51
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %101, i1 %78) #4, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %111, ptr addrspace(1) %103, i1 %75) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crz5iqcytsaetffnnuajrettrt3fm6jdvqeh6jotzdlttohjdpjg.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 61, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 34, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 46, scope: !7)
!50 = !DILocation(line: 51, column: 25, scope: !7)
!51 = !DILocation(line: 51, column: 55, scope: !7)
!52 = !DILocation(line: 51, column: 4, scope: !7)
