; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_add_embedding_mean_pow_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 255, !dbg !12
  %9 = lshr i32 %8, 2, !dbg !13
  %10 = zext nneg i32 %8 to i64, !dbg !14
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !14
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %11, i1 true, i32 0, i1 true) #4, !dbg !15
  %13 = zext nneg i32 %9 to i64, !dbg !16
  %14 = getelementptr i64, ptr addrspace(1) %2, i64 %13, !dbg !16
  %15 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %14, i1 true, i1 true) #4, !dbg !17
  %16 = lshr i64 %15, 61, !dbg !18
  %17 = and i64 %16, 4, !dbg !18
  %18 = add i64 %17, %15, !dbg !18
  %19 = icmp ugt i64 %18, 3, !dbg !19
  br i1 %19, label %20, label %21, !dbg !20

20:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !20
  unreachable, !dbg !20

21:                                               ; preds = %6
  %22 = bitcast i32 %12 to float, !dbg !15
  %23 = lshr i32 %7, 5, !dbg !12
  %24 = and i32 %7, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %25 = shl i32 %7, 2, !dbg !21
  %26 = and i32 %25, 12, !dbg !21
  %27 = zext nneg i32 %26 to i64, !dbg !22
  %28 = or disjoint i64 %18, %27, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true) #4, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = fsub float %31, %22, !dbg !25
  %33 = fadd float %32, %22, !dbg !26
  %34 = fmul float %32, %32, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %10, !dbg !28
  %36 = bitcast float %33 to i32, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %36, ptr addrspace(1) %35, i1 true) #4, !dbg !29
  %37 = bitcast float %34 to i32, !dbg !30
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !30
  %39 = bitcast i32 %38 to float, !dbg !30
  %40 = fadd float %34, %39, !dbg !34
  %41 = bitcast float %40 to i32, !dbg !30
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = fadd float %40, %43, !dbg !34
  %45 = bitcast float %44 to i32, !dbg !30
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fadd float %44, %47, !dbg !34
  %49 = bitcast float %48 to i32, !dbg !30
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = fadd float %48, %51, !dbg !34
  %53 = bitcast float %52 to i32, !dbg !30
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !30
  %55 = bitcast i32 %54 to float, !dbg !30
  %56 = fadd float %52, %55, !dbg !34
  %57 = icmp eq i32 %24, 0, !dbg !30
  %58 = and i32 %23, 7, !dbg !30
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !30
  %60 = bitcast float %56 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %57) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %61 = icmp slt i32 %7, 8, !dbg !30
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !30
  %63 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %62, i1 %61) #4, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !30
  %66 = bitcast i32 %65 to float, !dbg !30
  %67 = fadd float %64, %66, !dbg !34
  %68 = bitcast float %67 to i32, !dbg !30
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !30
  %70 = bitcast i32 %69 to float, !dbg !30
  %71 = fadd float %67, %70, !dbg !34
  %72 = bitcast float %71 to i32, !dbg !30
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !30
  %74 = bitcast i32 %73 to float, !dbg !30
  %75 = fadd float %71, %74, !dbg !34
  %76 = and i32 %7, 7, !dbg !30
  %77 = icmp eq i32 %76, 0, !dbg !30
  %78 = and i1 %61, %77, !dbg !30
  %79 = bitcast float %75 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %79, i1 %78) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %80 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 2.560000e+02) #4, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %82 = icmp eq i32 %8, 0, !dbg !38
  %83 = bitcast float %81 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %0, i1 %82) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_pow_sub_3", linkageName: "triton_red_fused_add_embedding_mean_pow_sub_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 31, column: 23, scope: !11)
!14 = !DILocation(line: 33, column: 34, scope: !11)
!15 = !DILocation(line: 33, column: 39, scope: !11)
!16 = !DILocation(line: 34, column: 34, scope: !11)
!17 = !DILocation(line: 34, column: 39, scope: !11)
!18 = !DILocation(line: 38, column: 36, scope: !11)
!19 = !DILocation(line: 39, column: 41, scope: !11)
!20 = !DILocation(line: 39, column: 64, scope: !11)
!21 = !DILocation(line: 40, column: 43, scope: !11)
!22 = !DILocation(line: 40, column: 41, scope: !11)
!23 = !DILocation(line: 40, column: 34, scope: !11)
!24 = !DILocation(line: 40, column: 48, scope: !11)
!25 = !DILocation(line: 41, column: 22, scope: !11)
!26 = !DILocation(line: 42, column: 22, scope: !11)
!27 = !DILocation(line: 43, column: 23, scope: !11)
!28 = !DILocation(line: 47, column: 29, scope: !11)
!29 = !DILocation(line: 47, column: 75, scope: !11)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !11, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 48, column: 27, scope: !11)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 50, column: 20, scope: !11)
!37 = !DILocation(line: 51, column: 4, scope: !11)
!38 = !DILocation(line: 52, column: 71, scope: !11)
!39 = !DILocation(line: 52, column: 4, scope: !11)
