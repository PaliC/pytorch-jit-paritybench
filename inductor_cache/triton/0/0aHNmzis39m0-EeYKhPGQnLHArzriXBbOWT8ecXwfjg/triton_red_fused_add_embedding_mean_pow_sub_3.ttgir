#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 8], order = [1, 0]}>
#loc = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:27)
#loc40 = loc(callsite(#loc1 at #loc31))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_embedding_mean_pow_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.560000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x256xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x256xi64, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<true> : tensor<1x256xi1, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<1x256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc2)
    %4 = arith.cmpi slt, %2, %cst_6 : tensor<1x256xi32, #blocked> loc(#loc3)
    %5 = arith.cmpi slt, %3, %cst_3 : tensor<1x256xi32, #blocked1> loc(#loc3)
    %6 = arith.divsi %2, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc4)
    %7 = arith.remsi %2, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc5)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %9 = tt.addptr %8, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc6)
    %10 = tt.load %9, %5, %cst_4 evictionPolicy = evict_first : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = triton_gpu.convert_layout %10 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x256xf32, #blocked1> -> tensor<1x256xf32, #blocked> loc(#loc7)
    %12 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc8)
    %13 = tt.addptr %12, %6 : tensor<1x256x!tt.ptr<i64>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc8)
    %14 = tt.load %13, %4, %cst_1 evictionPolicy = evict_last : tensor<1x256x!tt.ptr<i64>, #blocked> loc(#loc9)
    %15 = arith.addi %14, %cst_2 : tensor<1x256xi64, #blocked> loc(#loc10)
    %16 = arith.cmpi slt, %14, %cst_1 : tensor<1x256xi64, #blocked> loc(#loc11)
    %17 = arith.select %16, %15, %14 : tensor<1x256xi1, #blocked>, tensor<1x256xi64, #blocked> loc(#loc12)
    %18 = arith.cmpi sge, %17, %cst_1 : tensor<1x256xi64, #blocked> loc(#loc13)
    %19 = arith.cmpi slt, %17, %cst_2 : tensor<1x256xi64, #blocked> loc(#loc14)
    %20 = arith.andi %18, %19 : tensor<1x256xi1, #blocked> loc(#loc15)
    %21 = arith.xori %4, %cst_5 : tensor<1x256xi1, #blocked> loc(#loc16)
    %22 = arith.ori %20, %21 : tensor<1x256xi1, #blocked> loc(#loc17)
    tt.assert %22, "index out of bounds: 0 <= tmp5 < 4" : tensor<1x256xi1, #blocked> loc(#loc18)
    %23 = arith.muli %7, %cst_7 : tensor<1x256xi32, #blocked> loc(#loc19)
    %24 = arith.extsi %23 : tensor<1x256xi32, #blocked> to tensor<1x256xi64, #blocked> loc(#loc20)
    %25 = arith.addi %17, %24 : tensor<1x256xi64, #blocked> loc(#loc20)
    %26 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc21)
    %27 = tt.addptr %26, %25 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi64, #blocked> loc(#loc21)
    %28 = tt.load %27, %4, %cst evictionPolicy = evict_last : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc22)
    %29 = arith.subf %28, %11 : tensor<1x256xf32, #blocked> loc(#loc23)
    %30 = arith.addf %11, %29 : tensor<1x256xf32, #blocked> loc(#loc24)
    %31 = arith.mulf %29, %29 : tensor<1x256xf32, #blocked> loc(#loc25)
    %32 = arith.addf %31, %cst : tensor<1x256xf32, #blocked> loc(#loc26)
    %33 = arith.select %4, %32, %cst : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc27)
    %34 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %35 = tt.addptr %34, %3 : tensor<1x256x!tt.ptr<f32>, #blocked1>, tensor<1x256xi32, #blocked1> loc(#loc28)
    %36 = triton_gpu.convert_layout %30 : tensor<1x256xf32, #blocked> -> tensor<1x256xf32, #blocked1> loc(#loc29)
    tt.store %35, %36, %5 : tensor<1x256x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %37 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc31)), %arg7: f32 loc(callsite(#loc1 at #loc31))):
      %42 = arith.addf %arg6, %arg7 : f32 loc(#loc42)
      tt.reduce.return %42 : f32 loc(#loc39)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc39)
    %38 = tt.expand_dims %37 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc33)
    %39 = arith.divf %38, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc34)
    gpu.barrier loc(#loc35)
    %40 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc36)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.store %41, %39 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc37)
    tt.return loc(#loc38)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":25:33)
#loc3 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":29:25)
#loc4 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":31:23)
#loc5 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":32:23)
#loc6 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:34)
#loc7 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:39)
#loc8 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:34)
#loc9 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:39)
#loc10 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":36:22)
#loc11 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":37:22)
#loc12 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":38:36)
#loc13 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:32)
#loc14 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:48)
#loc15 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:41)
#loc16 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:56)
#loc17 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:54)
#loc18 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:64)
#loc19 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:43)
#loc20 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:41)
#loc21 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:34)
#loc22 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:48)
#loc23 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":41:22)
#loc24 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":42:22)
#loc25 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":43:23)
#loc26 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":45:25)
#loc27 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":46:40)
#loc28 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:29)
#loc29 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:75)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:30)
#loc34 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":50:20)
#loc35 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":51:4)
#loc36 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:28)
#loc37 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:71)
#loc38 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:4)
#loc39 = loc(callsite(#loc30 at #loc31))
#loc41 = loc(callsite(#loc32 at #loc30))
#loc42 = loc(callsite(#loc41 at #loc31))
