; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_gelu_native_layer_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 3, !dbg !12
  %16 = and i32 %12, 7, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %23 = lshr i32 %12, 3, !dbg !17
  %24 = and i32 %23, 3, !dbg !17
  %25 = or disjoint i32 %22, %15, !dbg !18
  %26 = or disjoint i32 %22, %24, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %18, !dbg !20
  %29 = sdiv i32 %.frozen, 4, !dbg !20
  %30 = mul i32 %29, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = shl i32 %26, 2, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = shl i32 %29, 4, !dbg !24
  %34 = add i32 %32, %33, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = and i1 %19, %27, !dbg !27
  %38 = and i1 %20, %28, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = sext i32 %18 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !29
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %20) #4, !dbg !30
  %44 = bitcast i32 %43 to float, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %20) #4, !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = sext i32 %26 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %28) #4, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %28) #4, !dbg !36
  %54 = bitcast i32 %53 to float, !dbg !36
  %55 = shl i32 %17, 2, !dbg !37
  %56 = add i32 %25, %55, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !40
  %60 = bitcast i32 %59 to float, !dbg !40
  %61 = fsub float %40, %44, !dbg !41
  %62 = fmul float %61, %47, !dbg !42
  %63 = fmul float %62, %51, !dbg !43
  %64 = fadd float %63, %54, !dbg !44
  %65 = shl i32 %12, 2, !dbg !44
  %66 = and i32 %65, 28, !dbg !44
  %67 = or disjoint i32 %66, %24, !dbg !44
  %68 = and i32 %12, 31, !dbg !44
  %69 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %66, !dbg !44
  %70 = getelementptr inbounds float, ptr addrspace(3) %69, i32 %67, !dbg !44
  %71 = bitcast float %64 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %72 = lshr i32 %68, 2, !dbg !44
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !44
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %68, !dbg !44
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !44
  %76 = fadd float %75, %60, !dbg !45
  %77 = fmul float %76, 0x3FE6A09E60000000, !dbg !46
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i = icmp eq i32 %78, 0, !dbg !47
  %79 = tail call float @llvm.nvvm.fabs.ftz.f(float %77) #4, !dbg !47
  %80 = tail call float @llvm.nvvm.fabs.f(float %77) #4, !dbg !47
  %.0.i = select i1 %.not.i, float %80, float %79, !dbg !47
  %81 = fcmp oge float %.0.i, 0x3FF00C1FC0000000, !dbg !47
  br i1 %81, label %__nv_fabsf.exit1.i, label %83, !dbg !47

__nv_fabsf.exit1.i:                               ; preds = %9
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not1.i = icmp eq i32 %82, 0, !dbg !47
  %.01.i = select i1 %.not1.i, float %80, float %79, !dbg !47
  br label %__internal_fmad.exit.i, !dbg !47

83:                                               ; preds = %9
  %84 = fmul float %77, %77, !dbg !47
  br label %__internal_fmad.exit.i, !dbg !47

__internal_fmad.exit.i:                           ; preds = %83, %__nv_fabsf.exit1.i
  %85 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %83 ], !dbg !47
  %86 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %83 ], !dbg !47
  %87 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %83 ], !dbg !47
  %88 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %83 ], !dbg !47
  %89 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %83 ], !dbg !47
  %90 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %83 ], !dbg !47
  %91 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %83 ], !dbg !47
  %92 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %84, %83 ], !dbg !47
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not2.i = icmp eq i32 %93, 0, !dbg !47
  %94 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %91, float %92, float %90) #4, !dbg !47
  %95 = tail call float @llvm.nvvm.fma.rn.f(float %91, float %92, float %90) #4, !dbg !47
  %.02.i = select i1 %.not2.i, float %95, float %94, !dbg !47
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not3.i = icmp eq i32 %96, 0, !dbg !47
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %92, float %89) #4, !dbg !47
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %92, float %89) #4, !dbg !47
  %.03.i = select i1 %.not3.i, float %98, float %97, !dbg !47
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not4.i = icmp eq i32 %99, 0, !dbg !47
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %92, float %88) #4, !dbg !47
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %92, float %88) #4, !dbg !47
  %.04.i = select i1 %.not4.i, float %101, float %100, !dbg !47
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not5.i = icmp eq i32 %102, 0, !dbg !47
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %92, float %87) #4, !dbg !47
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %92, float %87) #4, !dbg !47
  %.05.i = select i1 %.not5.i, float %104, float %103, !dbg !47
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not6.i = icmp eq i32 %105, 0, !dbg !47
  %106 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %92, float %86) #4, !dbg !47
  %107 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %92, float %86) #4, !dbg !47
  %.06.i = select i1 %.not6.i, float %107, float %106, !dbg !47
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not7.i = icmp eq i32 %108, 0, !dbg !47
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %92, float %85) #4, !dbg !47
  %110 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %92, float %85) #4, !dbg !47
  %.07.i = select i1 %.not7.i, float %110, float %109, !dbg !47
  %111 = fneg float %92, !dbg !47
  %112 = select i1 %81, float %111, float %77, !dbg !47
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not8.i = icmp eq i32 %113, 0, !dbg !47
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %112, float %112) #4, !dbg !47
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %112, float %112) #4, !dbg !47
  %.08.i = select i1 %.not8.i, float %115, float %114, !dbg !47
  br i1 %81, label %116, label %__nv_erff.exit, !dbg !47

116:                                              ; preds = %__internal_fmad.exit.i
  %117 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !47
  %118 = fsub float 1.000000e+00, %117, !dbg !47
  %119 = bitcast float %118 to i32, !dbg !47
  %120 = bitcast float %77 to i32, !dbg !47
  %121 = and i32 %120, -2147483648, !dbg !47
  %122 = or i32 %121, %119, !dbg !47
  %123 = bitcast i32 %122 to float, !dbg !47
  br label %__nv_erff.exit, !dbg !47

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %116
  %r.0.i = phi float [ %123, %116 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !47
  %124 = fmul float %76, 5.000000e-01, !dbg !48
  %125 = fadd float %r.0.i, 1.000000e+00, !dbg !49
  %126 = fmul float %124, %125, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !52
  %128 = bitcast float %126 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 %37) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciqschlcitvrehskjmyaweulskkehovvyy7mqerc65znaqpoogfa.py", directory: "inductor_cache/iq")
!4 = !{ptr @triton_poi_fused_add_gelu_native_layer_norm_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_gelu_native_layer_norm_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_gelu_native_layer_norm_5", linkageName: "triton_poi_fused_add_gelu_native_layer_norm_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 35, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 42, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 26, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 4, scope: !7)
!52 = !DILocation(line: 52, column: 28, scope: !7)
!53 = !DILocation(line: 52, column: 47, scope: !7)
!54 = !DILocation(line: 52, column: 4, scope: !7)
