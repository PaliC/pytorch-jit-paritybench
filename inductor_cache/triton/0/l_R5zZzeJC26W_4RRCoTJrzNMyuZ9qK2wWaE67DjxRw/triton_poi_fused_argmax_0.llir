; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_argmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = mul i32 %11, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = shl i32 %11, 6, !dbg !17
  %14 = add i32 %13, %.decomposed, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %10) #1, !dbg !20
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !20
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !20
  %20 = bitcast i32 %18 to float, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = add i32 %14, 16, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %10) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = add i32 %14, 32, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %10) #1, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = bitcast i32 %34 to float, !dbg !26
  %37 = bitcast i32 %35 to float, !dbg !26
  %38 = add i32 %14, 48, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %10) #1, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = bitcast i32 %42 to float, !dbg !29
  %45 = bitcast i32 %43 to float, !dbg !29
  %46 = fcmp ogt float %20, %28, !dbg !30
  %47 = fcmp ogt float %21, %29, !dbg !30
  %48 = fcmp oeq float %20, %28, !dbg !31
  %49 = fcmp oeq float %21, %29, !dbg !31
  %50 = fcmp uno float %20, 0.000000e+00, !dbg !32
  %51 = fcmp uno float %21, 0.000000e+00, !dbg !32
  %52 = fcmp uno float %28, 0.000000e+00, !dbg !33
  %53 = fcmp uno float %29, 0.000000e+00, !dbg !33
  %54 = xor i1 %52, true, !dbg !34
  %55 = and i1 %50, %54, !dbg !34
  %56 = xor i1 %53, true, !dbg !34
  %57 = and i1 %51, %56, !dbg !34
  %58 = or i1 %46, %55, !dbg !35
  %59 = or i1 %47, %57, !dbg !35
  %60 = and i1 %50, %52, !dbg !36
  %61 = and i1 %51, %53, !dbg !36
  %62 = or i1 %48, %60, !dbg !37
  %63 = or i1 %49, %61, !dbg !37
  %64 = or i1 %58, %62, !dbg !38
  %65 = or i1 %59, %63, !dbg !38
  %66 = select i1 %64, float %20, float %28, !dbg !39
  %67 = select i1 %65, float %21, float %29, !dbg !39
  %not. = xor i1 %64, true, !dbg !40
  %68 = zext i1 %not. to i64, !dbg !40
  %not.1 = xor i1 %65, true, !dbg !40
  %69 = zext i1 %not.1 to i64, !dbg !40
  %70 = fcmp ogt float %66, %36, !dbg !41
  %71 = fcmp ogt float %67, %37, !dbg !41
  %72 = fcmp oeq float %66, %36, !dbg !42
  %73 = fcmp oeq float %67, %37, !dbg !42
  %74 = fcmp uno float %66, 0.000000e+00, !dbg !43
  %75 = fcmp uno float %67, 0.000000e+00, !dbg !43
  %76 = fcmp uno float %36, 0.000000e+00, !dbg !44
  %77 = fcmp uno float %37, 0.000000e+00, !dbg !44
  %78 = xor i1 %76, true, !dbg !45
  %79 = and i1 %74, %78, !dbg !45
  %80 = xor i1 %77, true, !dbg !45
  %81 = and i1 %75, %80, !dbg !45
  %82 = or i1 %70, %79, !dbg !46
  %83 = or i1 %71, %81, !dbg !46
  %84 = and i1 %76, %74, !dbg !47
  %85 = and i1 %77, %75, !dbg !47
  %86 = or i1 %72, %84, !dbg !48
  %87 = or i1 %73, %85, !dbg !48
  %88 = or i1 %82, %86, !dbg !49
  %89 = or i1 %83, %87, !dbg !49
  %90 = select i1 %88, float %66, float %36, !dbg !50
  %91 = select i1 %89, float %67, float %37, !dbg !50
  %92 = select i1 %88, i64 %68, i64 2, !dbg !51
  %93 = select i1 %89, i64 %69, i64 2, !dbg !51
  %94 = fcmp ogt float %90, %44, !dbg !52
  %95 = fcmp ogt float %91, %45, !dbg !52
  %96 = fcmp oeq float %90, %44, !dbg !53
  %97 = fcmp oeq float %91, %45, !dbg !53
  %98 = fcmp uno float %90, 0.000000e+00, !dbg !54
  %99 = fcmp uno float %91, 0.000000e+00, !dbg !54
  %100 = fcmp uno float %44, 0.000000e+00, !dbg !55
  %101 = fcmp uno float %45, 0.000000e+00, !dbg !55
  %102 = xor i1 %100, true, !dbg !56
  %103 = and i1 %98, %102, !dbg !56
  %104 = xor i1 %101, true, !dbg !56
  %105 = and i1 %99, %104, !dbg !56
  %106 = or i1 %94, %103, !dbg !57
  %107 = or i1 %95, %105, !dbg !57
  %108 = and i1 %100, %98, !dbg !58
  %109 = and i1 %101, %99, !dbg !58
  %110 = or i1 %96, %108, !dbg !59
  %111 = or i1 %97, %109, !dbg !59
  %112 = or i1 %106, %110, !dbg !60
  %113 = or i1 %107, %111, !dbg !60
  %114 = select i1 %112, i64 %92, i64 3, !dbg !61
  %115 = select i1 %113, i64 %93, i64 3, !dbg !61
  %116 = sext i32 %9 to i64, !dbg !62
  %117 = getelementptr i64, ptr addrspace(1) %1, i64 %116, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %114, i64 %115, ptr addrspace(1) %117, i1 %10) #1, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7osxn5i7b5bugs7w3exgejjhpgcrcqfpsf5prlmgml3niqz7lka.py", directory: "inductor_cache/7o")
!4 = !{ptr @triton_poi_fused_argmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_argmax_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_argmax_0", linkageName: "triton_poi_fused_argmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 48, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 49, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 19, scope: !7)
!32 = !DILocation(line: 33, column: 19, scope: !7)
!33 = !DILocation(line: 34, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 34, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 21, scope: !7)
!43 = !DILocation(line: 48, column: 21, scope: !7)
!44 = !DILocation(line: 49, column: 21, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 35, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 21, scope: !7)
!54 = !DILocation(line: 62, column: 21, scope: !7)
!55 = !DILocation(line: 63, column: 21, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 71, column: 20, scope: !7)
!61 = !DILocation(line: 73, column: 35, scope: !7)
!62 = !DILocation(line: 74, column: 25, scope: !7)
!63 = !DILocation(line: 74, column: 37, scope: !7)
!64 = !DILocation(line: 74, column: 4, scope: !7)
