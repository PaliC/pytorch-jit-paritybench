; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 8, !dbg !14
  %20 = mul i32 %19, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %18, 8, !dbg !15
  %22 = sdiv i32 %17, 64, !dbg !16
  %23 = srem i32 %22, 256, !dbg !17
  %24 = shl nsw i32 %.decomposed, 1, !dbg !18
  %25 = shl nsw i32 %21, 1, !dbg !18
  %26 = shl i32 %19, 5, !dbg !19
  %27 = add i32 %24, %26, !dbg !20
  %28 = add i32 %26, %25, !dbg !20
  %29 = sext i32 %27 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !21
  %31 = sext i32 %28 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %35 = or disjoint i32 %27, 1, !dbg !23
  %36 = or disjoint i32 %28, 1, !dbg !23
  %37 = sext i32 %35 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !24
  %39 = sext i32 %36 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !25
  %43 = add i32 %27, 16, !dbg !26
  %44 = add i32 %28, 16, !dbg !26
  %45 = sext i32 %43 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = sext i32 %44 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !28
  %51 = add i32 %27, 17, !dbg !29
  %52 = add i32 %28, 17, !dbg !29
  %53 = sext i32 %51 to i64, !dbg !30
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !30
  %55 = sext i32 %52 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !31
  %59 = sext i32 %17 to i64, !dbg !32
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !32
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !33
  %62 = sext i32 %23 to i64, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !34
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !35
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !39
  %71 = bitcast i32 %70 to float, !dbg !39
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !39
  %73 = bitcast i32 %72 to float, !dbg !39
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !40
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !41
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !41
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %62, !dbg !42
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !43
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !43
  %80 = fadd float %71, 0x3EE4F8B580000000, !dbg !44
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !44
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %82, 0, !dbg !45
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %83, 0, !dbg !45
  br i1 %.not.i, label %89, label %84, !dbg !45

84:                                               ; preds = %11
  br i1 %.not1.i, label %87, label %85, !dbg !45

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

89:                                               ; preds = %11
  br i1 %.not1.i, label %92, label %90, !dbg !45

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !45
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i1 = icmp eq i32 %94, 0, !dbg !45
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i4 = icmp eq i32 %95, 0, !dbg !45
  br i1 %.not.i1, label %101, label %96, !dbg !45

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !45

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !45

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !45
  br label %__nv_sqrtf.exit5, !dbg !45

__nv_sqrtf.exit5:                                 ; preds = %97, %99, %102, %104
  %.0.i3 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !45
  %106 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !25
  %107 = insertelement <2 x i32> %106, i32 %42, i64 1, !dbg !25
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !25
  %109 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !22
  %110 = insertelement <2 x i32> %109, i32 %34, i64 1, !dbg !22
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !22
  %112 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !28
  %113 = insertelement <2 x i32> %112, i32 %50, i64 1, !dbg !28
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !28
  %115 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !31
  %116 = insertelement <2 x i32> %115, i32 %58, i64 1, !dbg !31
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !31
  %118 = bitcast i32 %58 to float, !dbg !46
  %119 = fcmp uno float %118, 0.000000e+00, !dbg !46
  %120 = extractvalue { i32, i32 } %61, 1, !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = bitcast i32 %65 to float, !dbg !35
  %123 = fadd float %121, %122, !dbg !50
  %124 = bitcast i32 %68 to float, !dbg !37
  %125 = bitcast i32 %57 to float, !dbg !46
  %126 = fcmp uno float %125, 0.000000e+00, !dbg !46
  %127 = extractvalue { i32, i32 } %61, 0, !dbg !33
  %128 = bitcast i32 %127 to float, !dbg !33
  %129 = bitcast i32 %64 to float, !dbg !35
  %130 = fadd float %128, %129, !dbg !50
  %131 = bitcast i32 %67 to float, !dbg !37
  %132 = fcmp ogt <2 x float> %108, %111, !dbg !51
  %133 = fcmp uno <2 x float> %108, zeroinitializer, !dbg !52
  %134 = or <2 x i1> %132, %133, !dbg !54
  %.v = select <2 x i1> %134, <2 x i32> %107, <2 x i32> %110, !dbg !55
  %135 = bitcast <2 x i32> %.v to <2 x float>, !dbg !55
  %136 = fcmp olt <2 x float> %135, %114, !dbg !56
  %137 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !57
  %138 = or <2 x i1> %137, %136, !dbg !59
  %.v6 = select <2 x i1> %138, <2 x i32> %113, <2 x i32> %.v, !dbg !60
  %139 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !60
  %140 = fcmp olt <2 x float> %139, %117, !dbg !61
  %141 = extractelement <2 x i1> %140, i64 1, !dbg !62
  %142 = or i1 %119, %141, !dbg !62
  %143 = extractelement <2 x float> %139, i64 1, !dbg !63
  %144 = select i1 %142, float %118, float %143, !dbg !63
  %145 = fadd float %123, %144, !dbg !64
  %146 = fsub float %145, %124, !dbg !65
  %147 = extractelement <2 x i1> %140, i64 0, !dbg !62
  %148 = or i1 %126, %147, !dbg !62
  %149 = extractelement <2 x float> %139, i64 0, !dbg !63
  %150 = select i1 %148, float %125, float %149, !dbg !63
  %151 = fadd float %130, %150, !dbg !64
  %152 = fsub float %151, %131, !dbg !65
  %153 = zext <2 x i1> %132 to <2 x i8>, !dbg !66
  %154 = select <2 x i1> %136, <2 x i8> splat (i8 2), <2 x i8> %153, !dbg !67
  %155 = select <2 x i1> %140, <2 x i8> splat (i8 3), <2 x i8> %154, !dbg !68
  %156 = bitcast i32 %79 to float, !dbg !43
  %157 = bitcast i32 %78 to float, !dbg !43
  %158 = bitcast i32 %76 to float, !dbg !41
  %159 = bitcast i32 %75 to float, !dbg !41
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !69
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !69
  %162 = fmul float %152, %160, !dbg !70
  %163 = fmul float %146, %161, !dbg !70
  %164 = fmul float %162, %159, !dbg !71
  %165 = fmul float %163, %158, !dbg !71
  %166 = fadd float %164, %157, !dbg !72
  %167 = fadd float %165, %156, !dbg !72
  %168 = fcmp olt float %166, 0.000000e+00, !dbg !73
  %169 = fcmp olt float %167, 0.000000e+00, !dbg !73
  %170 = select i1 %168, float 0.000000e+00, float %166, !dbg !75
  %171 = select i1 %169, float 0.000000e+00, float %167, !dbg !75
  %172 = getelementptr i8, ptr addrspace(1) %7, i64 %59, !dbg !76
  %173 = bitcast <2 x i8> %155 to i16, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %173, ptr addrspace(1) %172, i1 true) #3, !dbg !77
  %174 = getelementptr float, ptr addrspace(1) %8, i64 %59, !dbg !78
  %175 = bitcast float %170 to i32, !dbg !79
  %176 = bitcast float %171 to i32, !dbg !79
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %176, ptr addrspace(1) %174, i1 true) #3, !dbg !79
  %177 = getelementptr float, ptr addrspace(1) %9, i64 %59, !dbg !80
  %178 = bitcast float %152 to i32, !dbg !81
  %179 = bitcast float %146 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 true) #3, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cym4oa2dshr6wafeguuf3htyw55eiwjzgptgwckbecf2fz34cvsr.py", directory: "inductor_cache/ym")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_max_pool2d_with_indices_native_batch_norm_backward_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 45, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 42, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 50, scope: !7)
!29 = !DILocation(line: 31, column: 43, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 51, scope: !7)
!32 = !DILocation(line: 32, column: 35, scope: !7)
!33 = !DILocation(line: 32, column: 40, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 36, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 36, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 27, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 50, column: 42, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 38, column: 18, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !53)
!53 = !DILocation(line: 42, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !53)
!56 = !DILocation(line: 43, column: 18, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !47, inlinedAt: !58)
!58 = !DILocation(line: 46, column: 41, scope: !7)
!59 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !58)
!60 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !58)
!61 = !DILocation(line: 47, column: 20, scope: !7)
!62 = !DILocation(line: 120, column: 16, scope: !47, inlinedAt: !49)
!63 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!64 = !DILocation(line: 52, column: 20, scope: !7)
!65 = !DILocation(line: 53, column: 20, scope: !7)
!66 = !DILocation(line: 41, column: 32, scope: !7)
!67 = !DILocation(line: 45, column: 33, scope: !7)
!68 = !DILocation(line: 49, column: 35, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 61, column: 20, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 63, column: 20, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !74)
!74 = !DILocation(line: 65, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !74)
!76 = !DILocation(line: 66, column: 25, scope: !7)
!77 = !DILocation(line: 66, column: 37, scope: !7)
!78 = !DILocation(line: 67, column: 25, scope: !7)
!79 = !DILocation(line: 67, column: 37, scope: !7)
!80 = !DILocation(line: 68, column: 25, scope: !7)
!81 = !DILocation(line: 68, column: 37, scope: !7)
!82 = !DILocation(line: 68, column: 4, scope: !7)
