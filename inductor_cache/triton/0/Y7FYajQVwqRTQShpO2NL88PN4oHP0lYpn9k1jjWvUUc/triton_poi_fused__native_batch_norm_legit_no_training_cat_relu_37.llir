; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 10, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %23 = srem i32 %21, 1024, !dbg !14
  %24 = srem i32 %22, 1024, !dbg !14
  %.frozen = freeze i32 %21, !dbg !15
  %25 = sdiv i32 %.frozen, 196608, !dbg !15
  %.frozen99 = freeze i32 %22, !dbg !15
  %26 = sdiv i32 %.frozen99, 196608, !dbg !15
  %27 = mul i32 %25, 196608, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %27, !dbg !16
  %28 = mul i32 %26, 196608, !dbg !16
  %srem1.decomposed = sub i32 %.frozen99, %28, !dbg !16
  %29 = mul nsw i32 %25, 110592, !dbg !17
  %30 = mul nsw i32 %26, 110592, !dbg !17
  %31 = add nsw i32 %29, %srem.decomposed, !dbg !18
  %32 = add nsw i32 %30, %srem1.decomposed, !dbg !18
  %33 = sext i32 %31 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = sext i32 %32 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !19
  %37 = mul nsw i32 %25, 12288, !dbg !20
  %38 = mul nsw i32 %26, 12288, !dbg !20
  %39 = add nsw i32 %37, %23, !dbg !21
  %40 = add nsw i32 %39, -110592, !dbg !22
  %41 = add nsw i32 %38, %24, !dbg !21
  %42 = add nsw i32 %41, -110592, !dbg !22
  %43 = add nsw i32 %39, -122880, !dbg !23
  %44 = add nsw i32 %41, -122880, !dbg !23
  %45 = add nsw i32 %39, -135168, !dbg !24
  %46 = add nsw i32 %41, -135168, !dbg !24
  %47 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !25
  %48 = insertelement <2 x i32> %47, i32 %21, i64 1, !dbg !25
  %49 = sdiv <2 x i32> %48, splat (i32 1024), !dbg !25
  %50 = srem <2 x i32> %49, splat (i32 192), !dbg !26
  %51 = extractelement <2 x i32> %50, i64 1, !dbg !27
  %52 = sext i32 %51 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !28
  %54 = extractelement <2 x i32> %50, i64 0, !dbg !27
  %55 = sext i32 %54 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %9, i64 %55, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %68 = bitcast i32 %67 to float, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %70 = bitcast i32 %69 to float, !dbg !31
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !31
  %76 = bitcast i32 %75 to float, !dbg !31
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !31
  %78 = bitcast i32 %77 to float, !dbg !31
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !31
  %82 = bitcast i32 %81 to float, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %10, i64 %52, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %10, i64 %55, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %52, !dbg !34
  %94 = getelementptr float, ptr addrspace(1) %11, i64 %55, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !35
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !35
  %103 = icmp slt <2 x i32> %50, splat (i32 108), !dbg !36
  %104 = extractelement <2 x i1> %103, i64 1, !dbg !37
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !37
  %106 = extractelement <2 x i1> %103, i64 0, !dbg !37
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !37
  %108 = add nsw <2 x i32> %50, splat (i32 -108), !dbg !38
  %109 = icmp ult <2 x i32> %108, splat (i32 12), !dbg !38
  %110 = shl nsw i32 %51, 10, !dbg !21
  %111 = shl nsw i32 %54, 10, !dbg !21
  %112 = add nsw i32 %40, %110, !dbg !39
  %113 = add nsw i32 %42, %111, !dbg !39
  %114 = sext i32 %112 to i64, !dbg !40
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !40
  %116 = sext i32 %113 to i64, !dbg !40
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !40
  %118 = extractelement <2 x i1> %109, i64 1, !dbg !41
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #3, !dbg !41
  %120 = extractelement <2 x i1> %109, i64 0, !dbg !41
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #3, !dbg !41
  %122 = add nsw <2 x i32> %50, splat (i32 -120), !dbg !42
  %123 = icmp ult <2 x i32> %122, splat (i32 12), !dbg !42
  %124 = add nsw i32 %43, %110, !dbg !43
  %125 = add nsw i32 %44, %111, !dbg !43
  %126 = sext i32 %124 to i64, !dbg !44
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !44
  %128 = sext i32 %125 to i64, !dbg !44
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !44
  %130 = extractelement <2 x i1> %123, i64 1, !dbg !45
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !45
  %132 = extractelement <2 x i1> %123, i64 0, !dbg !45
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !45
  %134 = add nsw <2 x i32> %50, splat (i32 -132), !dbg !46
  %135 = icmp ult <2 x i32> %134, splat (i32 12), !dbg !46
  %136 = add nsw i32 %45, %110, !dbg !47
  %137 = add nsw i32 %46, %111, !dbg !47
  %138 = sext i32 %136 to i64, !dbg !48
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %138, !dbg !48
  %140 = sext i32 %137 to i64, !dbg !48
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %140, !dbg !48
  %142 = extractelement <2 x i1> %135, i64 1, !dbg !49
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142, i32 0, i1 %142) #3, !dbg !49
  %144 = extractelement <2 x i1> %135, i64 0, !dbg !49
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %141, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144, i32 0, i1 %144) #3, !dbg !49
  %146 = add nsw <2 x i32> %50, splat (i32 -144), !dbg !50
  %147 = icmp ult <2 x i32> %146, splat (i32 12), !dbg !50
  %148 = add nsw i32 %39, -147456, !dbg !51
  %149 = add nsw i32 %148, %110, !dbg !52
  %150 = add nsw i32 %41, -147456, !dbg !51
  %151 = add nsw i32 %150, %111, !dbg !52
  %152 = sext i32 %149 to i64, !dbg !53
  %153 = getelementptr float, ptr addrspace(1) %4, i64 %152, !dbg !53
  %154 = sext i32 %151 to i64, !dbg !53
  %155 = getelementptr float, ptr addrspace(1) %4, i64 %154, !dbg !53
  %156 = extractelement <2 x i1> %147, i64 1, !dbg !54
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %153, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156, i32 0, i1 %156) #3, !dbg !54
  %158 = extractelement <2 x i1> %147, i64 0, !dbg !54
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #3, !dbg !54
  %160 = add nsw i32 %51, -156, !dbg !55
  %161 = icmp ult i32 %160, 12, !dbg !55
  %162 = add nsw i32 %54, -156, !dbg !55
  %163 = icmp ult i32 %162, 12, !dbg !55
  %164 = add nsw i32 %39, -159744, !dbg !56
  %165 = add nsw i32 %164, %110, !dbg !57
  %166 = add nsw i32 %41, -159744, !dbg !56
  %167 = add nsw i32 %166, %111, !dbg !57
  %168 = sext i32 %165 to i64, !dbg !58
  %169 = getelementptr float, ptr addrspace(1) %5, i64 %168, !dbg !58
  %170 = sext i32 %167 to i64, !dbg !58
  %171 = getelementptr float, ptr addrspace(1) %5, i64 %170, !dbg !58
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %169, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #3, !dbg !59
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %171, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163, i32 0, i1 %163) #3, !dbg !59
  %174 = add nsw <2 x i32> %50, splat (i32 -168), !dbg !60
  %175 = icmp ult <2 x i32> %174, splat (i32 12), !dbg !60
  %176 = add nsw i32 %39, -172032, !dbg !61
  %177 = add nsw i32 %176, %110, !dbg !62
  %178 = add nsw i32 %41, -172032, !dbg !61
  %179 = add nsw i32 %178, %111, !dbg !62
  %180 = sext i32 %177 to i64, !dbg !63
  %181 = getelementptr float, ptr addrspace(1) %6, i64 %180, !dbg !63
  %182 = sext i32 %179 to i64, !dbg !63
  %183 = getelementptr float, ptr addrspace(1) %6, i64 %182, !dbg !63
  %184 = extractelement <2 x i1> %175, i64 1, !dbg !64
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #3, !dbg !64
  %186 = extractelement <2 x i1> %175, i64 0, !dbg !64
  %187 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %183, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186, i32 0, i1 %186) #3, !dbg !64
  %188 = icmp sgt i32 %51, 179, !dbg !27
  %189 = icmp sgt i32 %54, 179, !dbg !27
  %190 = add nsw i32 %39, -184320, !dbg !65
  %191 = add nsw i32 %190, %110, !dbg !66
  %192 = add nsw i32 %41, -184320, !dbg !65
  %193 = add nsw i32 %192, %111, !dbg !66
  %194 = sext i32 %191 to i64, !dbg !67
  %195 = getelementptr float, ptr addrspace(1) %7, i64 %194, !dbg !67
  %196 = sext i32 %193 to i64, !dbg !67
  %197 = getelementptr float, ptr addrspace(1) %7, i64 %196, !dbg !67
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %188, i32 0, i1 %188, i32 0, i1 %188, i32 0, i1 %188, i32 0, i1 %188) #3, !dbg !68
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %189, i32 0, i1 %189, i32 0, i1 %189, i32 0, i1 %189, i32 0, i1 %189) #3, !dbg !68
  %200 = fadd float %68, 0x3EE4F8B580000000, !dbg !69
  %201 = fadd float %70, 0x3EE4F8B580000000, !dbg !69
  %202 = fadd float %72, 0x3EE4F8B580000000, !dbg !69
  %203 = fadd float %74, 0x3EE4F8B580000000, !dbg !69
  %204 = fadd float %76, 0x3EE4F8B580000000, !dbg !69
  %205 = fadd float %78, 0x3EE4F8B580000000, !dbg !69
  %206 = fadd float %80, 0x3EE4F8B580000000, !dbg !69
  %207 = fadd float %82, 0x3EE4F8B580000000, !dbg !69
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i = icmp eq i32 %208, 0, !dbg !70
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i = icmp eq i32 %209, 0, !dbg !70
  br i1 %.not.i, label %215, label %210, !dbg !70

210:                                              ; preds = %15
  br i1 %.not1.i, label %213, label %211, !dbg !70

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

215:                                              ; preds = %15
  br i1 %.not1.i, label %218, label %216, !dbg !70

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %200) #3, !dbg !70
  br label %__nv_sqrtf.exit, !dbg !70

__nv_sqrtf.exit:                                  ; preds = %211, %213, %216, %218
  %.0.i = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !70
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i57 = icmp eq i32 %220, 0, !dbg !70
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i60 = icmp eq i32 %221, 0, !dbg !70
  br i1 %.not.i57, label %227, label %222, !dbg !70

222:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %225, label %223, !dbg !70

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

227:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %230, label %228, !dbg !70

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %201) #3, !dbg !70
  br label %__nv_sqrtf.exit61, !dbg !70

__nv_sqrtf.exit61:                                ; preds = %223, %225, %228, %230
  %.0.i59 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !70
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i62 = icmp eq i32 %232, 0, !dbg !70
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i65 = icmp eq i32 %233, 0, !dbg !70
  br i1 %.not.i62, label %239, label %234, !dbg !70

234:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %237, label %235, !dbg !70

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %202) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %202) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

239:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %242, label %240, !dbg !70

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %202) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %202) #3, !dbg !70
  br label %__nv_sqrtf.exit66, !dbg !70

__nv_sqrtf.exit66:                                ; preds = %235, %237, %240, %242
  %.0.i64 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !70
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i67 = icmp eq i32 %244, 0, !dbg !70
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i70 = icmp eq i32 %245, 0, !dbg !70
  br i1 %.not.i67, label %251, label %246, !dbg !70

246:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %249, label %247, !dbg !70

247:                                              ; preds = %246
  %248 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

249:                                              ; preds = %246
  %250 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

251:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %254, label %252, !dbg !70

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !70
  br label %__nv_sqrtf.exit71, !dbg !70

__nv_sqrtf.exit71:                                ; preds = %247, %249, %252, %254
  %.0.i69 = phi float [ %248, %247 ], [ %250, %249 ], [ %253, %252 ], [ %255, %254 ], !dbg !70
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i72 = icmp eq i32 %256, 0, !dbg !70
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i75 = icmp eq i32 %257, 0, !dbg !70
  br i1 %.not.i72, label %263, label %258, !dbg !70

258:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %261, label %259, !dbg !70

259:                                              ; preds = %258
  %260 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

261:                                              ; preds = %258
  %262 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

263:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %266, label %264, !dbg !70

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !70
  br label %__nv_sqrtf.exit76, !dbg !70

__nv_sqrtf.exit76:                                ; preds = %259, %261, %264, %266
  %.0.i74 = phi float [ %260, %259 ], [ %262, %261 ], [ %265, %264 ], [ %267, %266 ], !dbg !70
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i77 = icmp eq i32 %268, 0, !dbg !70
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i80 = icmp eq i32 %269, 0, !dbg !70
  br i1 %.not.i77, label %275, label %270, !dbg !70

270:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %273, label %271, !dbg !70

271:                                              ; preds = %270
  %272 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

273:                                              ; preds = %270
  %274 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

275:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %278, label %276, !dbg !70

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !70
  br label %__nv_sqrtf.exit81, !dbg !70

__nv_sqrtf.exit81:                                ; preds = %271, %273, %276, %278
  %.0.i79 = phi float [ %272, %271 ], [ %274, %273 ], [ %277, %276 ], [ %279, %278 ], !dbg !70
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i82 = icmp eq i32 %280, 0, !dbg !70
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i85 = icmp eq i32 %281, 0, !dbg !70
  br i1 %.not.i82, label %287, label %282, !dbg !70

282:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %285, label %283, !dbg !70

283:                                              ; preds = %282
  %284 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

285:                                              ; preds = %282
  %286 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

287:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %290, label %288, !dbg !70

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !70
  br label %__nv_sqrtf.exit86, !dbg !70

__nv_sqrtf.exit86:                                ; preds = %283, %285, %288, %290
  %.0.i84 = phi float [ %284, %283 ], [ %286, %285 ], [ %289, %288 ], [ %291, %290 ], !dbg !70
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i87 = icmp eq i32 %292, 0, !dbg !70
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i90 = icmp eq i32 %293, 0, !dbg !70
  br i1 %.not.i87, label %299, label %294, !dbg !70

294:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %297, label %295, !dbg !70

295:                                              ; preds = %294
  %296 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

297:                                              ; preds = %294
  %298 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

299:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %302, label %300, !dbg !70

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #3, !dbg !70
  br label %__nv_sqrtf.exit91, !dbg !70

__nv_sqrtf.exit91:                                ; preds = %295, %297, %300, %302
  %.0.i89 = phi float [ %296, %295 ], [ %298, %297 ], [ %301, %300 ], [ %303, %302 ], !dbg !70
  %304 = shufflevector <2 x i1> %175, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !60
  %305 = shufflevector <2 x i1> %147, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !50
  %306 = shufflevector <2 x i1> %135, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !46
  %307 = shufflevector <2 x i1> %123, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %308 = shufflevector <2 x i1> %109, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %309 = shufflevector <2 x i1> %103, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %310 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !37
  %311 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !41
  %312 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !45
  %313 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !49
  %314 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !54
  %315 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !59
  %316 = extractvalue { i32, i32, i32, i32 } %187, 3, !dbg !64
  %317 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !68
  %318 = insertelement <8 x i32> poison, i32 %64, i64 0, !dbg !29
  %319 = insertelement <8 x i32> %318, i32 %63, i64 1, !dbg !29
  %320 = insertelement <8 x i32> %319, i32 %62, i64 2, !dbg !29
  %321 = insertelement <8 x i32> %320, i32 %61, i64 3, !dbg !29
  %322 = insertelement <8 x i32> %321, i32 %60, i64 4, !dbg !29
  %323 = insertelement <8 x i32> %322, i32 %59, i64 5, !dbg !29
  %324 = insertelement <8 x i32> %323, i32 %58, i64 6, !dbg !29
  %325 = insertelement <8 x i32> %324, i32 %57, i64 7, !dbg !29
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !29
  %327 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !37
  %328 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !41
  %329 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !45
  %330 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !49
  %331 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !54
  %332 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !59
  %333 = extractvalue { i32, i32, i32, i32 } %187, 2, !dbg !64
  %334 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !68
  %335 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !37
  %336 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !41
  %337 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !45
  %338 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !49
  %339 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !54
  %340 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !59
  %341 = extractvalue { i32, i32, i32, i32 } %187, 1, !dbg !64
  %342 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !68
  %343 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !37
  %344 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !41
  %345 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !45
  %346 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !49
  %347 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !54
  %348 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !59
  %349 = extractvalue { i32, i32, i32, i32 } %187, 0, !dbg !64
  %350 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !68
  %351 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !37
  %352 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !41
  %353 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !45
  %354 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !49
  %355 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !54
  %356 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !59
  %357 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !64
  %358 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !68
  %359 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !37
  %360 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !41
  %361 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !45
  %362 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !49
  %363 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !54
  %364 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !59
  %365 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !64
  %366 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !68
  %367 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !37
  %368 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !41
  %369 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !45
  %370 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !49
  %371 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !59
  %373 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !64
  %374 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !68
  %375 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !37
  %376 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !41
  %377 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !45
  %378 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !49
  %379 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !54
  %380 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !59
  %381 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !64
  %382 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !68
  %383 = insertelement <8 x i32> poison, i32 %316, i64 0, !dbg !71
  %384 = insertelement <8 x i32> %383, i32 %333, i64 1, !dbg !71
  %385 = insertelement <8 x i32> %384, i32 %341, i64 2, !dbg !71
  %386 = insertelement <8 x i32> %385, i32 %349, i64 3, !dbg !71
  %387 = insertelement <8 x i32> %386, i32 %357, i64 4, !dbg !71
  %388 = insertelement <8 x i32> %387, i32 %365, i64 5, !dbg !71
  %389 = insertelement <8 x i32> %388, i32 %373, i64 6, !dbg !71
  %390 = insertelement <8 x i32> %389, i32 %381, i64 7, !dbg !71
  %391 = insertelement <8 x i32> poison, i32 %317, i64 0, !dbg !71
  %392 = insertelement <8 x i32> %391, i32 %334, i64 1, !dbg !71
  %393 = insertelement <8 x i32> %392, i32 %342, i64 2, !dbg !71
  %394 = insertelement <8 x i32> %393, i32 %350, i64 3, !dbg !71
  %395 = insertelement <8 x i32> %394, i32 %358, i64 4, !dbg !71
  %396 = insertelement <8 x i32> %395, i32 %366, i64 5, !dbg !71
  %397 = insertelement <8 x i32> %396, i32 %374, i64 6, !dbg !71
  %398 = insertelement <8 x i32> %397, i32 %382, i64 7, !dbg !71
  %399 = select <8 x i1> %304, <8 x i32> %390, <8 x i32> %398, !dbg !71
  %400 = insertelement <8 x i32> poison, i32 %102, i64 0, !dbg !35
  %401 = insertelement <8 x i32> %400, i32 %101, i64 1, !dbg !35
  %402 = insertelement <8 x i32> %401, i32 %100, i64 2, !dbg !35
  %403 = insertelement <8 x i32> %402, i32 %99, i64 3, !dbg !35
  %404 = insertelement <8 x i32> %403, i32 %98, i64 4, !dbg !35
  %405 = insertelement <8 x i32> %404, i32 %97, i64 5, !dbg !35
  %406 = insertelement <8 x i32> %405, i32 %96, i64 6, !dbg !35
  %407 = insertelement <8 x i32> %406, i32 %95, i64 7, !dbg !35
  %408 = bitcast <8 x i32> %407 to <8 x float>, !dbg !35
  %409 = insertelement <8 x i32> poison, i32 %92, i64 0, !dbg !33
  %410 = insertelement <8 x i32> %409, i32 %91, i64 1, !dbg !33
  %411 = insertelement <8 x i32> %410, i32 %90, i64 2, !dbg !33
  %412 = insertelement <8 x i32> %411, i32 %89, i64 3, !dbg !33
  %413 = insertelement <8 x i32> %412, i32 %88, i64 4, !dbg !33
  %414 = insertelement <8 x i32> %413, i32 %87, i64 5, !dbg !33
  %415 = insertelement <8 x i32> %414, i32 %86, i64 6, !dbg !33
  %416 = insertelement <8 x i32> %415, i32 %85, i64 7, !dbg !33
  %417 = bitcast <8 x i32> %416 to <8 x float>, !dbg !33
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !72
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i59) #3, !dbg !72
  %420 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i64) #3, !dbg !72
  %421 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i69) #3, !dbg !72
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i74) #3, !dbg !72
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i79) #3, !dbg !72
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i84) #3, !dbg !72
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i89) #3, !dbg !72
  %426 = insertelement <8 x i1> poison, i1 %163, i64 0, !dbg !73
  %427 = insertelement <8 x i1> %426, i1 %161, i64 1, !dbg !73
  %428 = shufflevector <8 x i1> %427, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !73
  %429 = insertelement <8 x i32> poison, i32 %315, i64 0, !dbg !73
  %430 = insertelement <8 x i32> %429, i32 %332, i64 1, !dbg !73
  %431 = insertelement <8 x i32> %430, i32 %340, i64 2, !dbg !73
  %432 = insertelement <8 x i32> %431, i32 %348, i64 3, !dbg !73
  %433 = insertelement <8 x i32> %432, i32 %356, i64 4, !dbg !73
  %434 = insertelement <8 x i32> %433, i32 %364, i64 5, !dbg !73
  %435 = insertelement <8 x i32> %434, i32 %372, i64 6, !dbg !73
  %436 = insertelement <8 x i32> %435, i32 %380, i64 7, !dbg !73
  %437 = select <8 x i1> %428, <8 x i32> %436, <8 x i32> %399, !dbg !73
  %438 = insertelement <8 x i32> poison, i32 %314, i64 0, !dbg !74
  %439 = insertelement <8 x i32> %438, i32 %331, i64 1, !dbg !74
  %440 = insertelement <8 x i32> %439, i32 %339, i64 2, !dbg !74
  %441 = insertelement <8 x i32> %440, i32 %347, i64 3, !dbg !74
  %442 = insertelement <8 x i32> %441, i32 %355, i64 4, !dbg !74
  %443 = insertelement <8 x i32> %442, i32 %363, i64 5, !dbg !74
  %444 = insertelement <8 x i32> %443, i32 %371, i64 6, !dbg !74
  %445 = insertelement <8 x i32> %444, i32 %379, i64 7, !dbg !74
  %446 = select <8 x i1> %305, <8 x i32> %445, <8 x i32> %437, !dbg !74
  %447 = insertelement <8 x i32> poison, i32 %313, i64 0, !dbg !75
  %448 = insertelement <8 x i32> %447, i32 %330, i64 1, !dbg !75
  %449 = insertelement <8 x i32> %448, i32 %338, i64 2, !dbg !75
  %450 = insertelement <8 x i32> %449, i32 %346, i64 3, !dbg !75
  %451 = insertelement <8 x i32> %450, i32 %354, i64 4, !dbg !75
  %452 = insertelement <8 x i32> %451, i32 %362, i64 5, !dbg !75
  %453 = insertelement <8 x i32> %452, i32 %370, i64 6, !dbg !75
  %454 = insertelement <8 x i32> %453, i32 %378, i64 7, !dbg !75
  %455 = select <8 x i1> %306, <8 x i32> %454, <8 x i32> %446, !dbg !75
  %456 = insertelement <8 x i32> poison, i32 %312, i64 0, !dbg !76
  %457 = insertelement <8 x i32> %456, i32 %329, i64 1, !dbg !76
  %458 = insertelement <8 x i32> %457, i32 %337, i64 2, !dbg !76
  %459 = insertelement <8 x i32> %458, i32 %345, i64 3, !dbg !76
  %460 = insertelement <8 x i32> %459, i32 %353, i64 4, !dbg !76
  %461 = insertelement <8 x i32> %460, i32 %361, i64 5, !dbg !76
  %462 = insertelement <8 x i32> %461, i32 %369, i64 6, !dbg !76
  %463 = insertelement <8 x i32> %462, i32 %377, i64 7, !dbg !76
  %464 = select <8 x i1> %307, <8 x i32> %463, <8 x i32> %455, !dbg !76
  %465 = insertelement <8 x i32> poison, i32 %311, i64 0, !dbg !77
  %466 = insertelement <8 x i32> %465, i32 %328, i64 1, !dbg !77
  %467 = insertelement <8 x i32> %466, i32 %336, i64 2, !dbg !77
  %468 = insertelement <8 x i32> %467, i32 %344, i64 3, !dbg !77
  %469 = insertelement <8 x i32> %468, i32 %352, i64 4, !dbg !77
  %470 = insertelement <8 x i32> %469, i32 %360, i64 5, !dbg !77
  %471 = insertelement <8 x i32> %470, i32 %368, i64 6, !dbg !77
  %472 = insertelement <8 x i32> %471, i32 %376, i64 7, !dbg !77
  %473 = select <8 x i1> %308, <8 x i32> %472, <8 x i32> %464, !dbg !77
  %474 = insertelement <8 x i32> poison, i32 %310, i64 0, !dbg !78
  %475 = insertelement <8 x i32> %474, i32 %327, i64 1, !dbg !78
  %476 = insertelement <8 x i32> %475, i32 %335, i64 2, !dbg !78
  %477 = insertelement <8 x i32> %476, i32 %343, i64 3, !dbg !78
  %478 = insertelement <8 x i32> %477, i32 %351, i64 4, !dbg !78
  %479 = insertelement <8 x i32> %478, i32 %359, i64 5, !dbg !78
  %480 = insertelement <8 x i32> %479, i32 %367, i64 6, !dbg !78
  %481 = insertelement <8 x i32> %480, i32 %375, i64 7, !dbg !78
  %482 = select <8 x i1> %309, <8 x i32> %481, <8 x i32> %473, !dbg !78
  %483 = bitcast <8 x i32> %482 to <8 x float>, !dbg !78
  %484 = fsub <8 x float> %483, %326, !dbg !79
  %485 = insertelement <8 x float> poison, float %425, i64 0, !dbg !80
  %486 = insertelement <8 x float> %485, float %424, i64 1, !dbg !80
  %487 = insertelement <8 x float> %486, float %423, i64 2, !dbg !80
  %488 = insertelement <8 x float> %487, float %422, i64 3, !dbg !80
  %489 = insertelement <8 x float> %488, float %421, i64 4, !dbg !80
  %490 = insertelement <8 x float> %489, float %420, i64 5, !dbg !80
  %491 = insertelement <8 x float> %490, float %419, i64 6, !dbg !80
  %492 = insertelement <8 x float> %491, float %418, i64 7, !dbg !80
  %493 = fmul <8 x float> %484, %492, !dbg !80
  %494 = fmul <8 x float> %493, %417, !dbg !81
  %495 = fadd <8 x float> %494, %408, !dbg !82
  %496 = fcmp olt <8 x float> %495, zeroinitializer, !dbg !83
  %497 = extractelement <8 x i1> %496, i64 7, !dbg !87
  %498 = extractelement <8 x i1> %496, i64 6, !dbg !87
  %499 = extractelement <8 x i1> %496, i64 5, !dbg !87
  %500 = extractelement <8 x i1> %496, i64 4, !dbg !87
  %501 = extractelement <8 x i1> %496, i64 3, !dbg !87
  %502 = extractelement <8 x i1> %496, i64 2, !dbg !87
  %503 = extractelement <8 x i1> %496, i64 1, !dbg !87
  %504 = extractelement <8 x i1> %496, i64 0, !dbg !87
  %505 = sext i32 %21 to i64, !dbg !88
  %506 = getelementptr float, ptr addrspace(1) %12, i64 %505, !dbg !88
  %507 = sext i32 %22 to i64, !dbg !88
  %508 = getelementptr float, ptr addrspace(1) %12, i64 %507, !dbg !88
  %509 = extractelement <8 x i32> %482, i64 4, !dbg !89
  %510 = extractelement <8 x i32> %482, i64 5, !dbg !89
  %511 = extractelement <8 x i32> %482, i64 6, !dbg !89
  %512 = extractelement <8 x i32> %482, i64 7, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %512, i32 %511, i32 %510, i32 %509, ptr addrspace(1) %506, i1 true) #3, !dbg !89
  %513 = extractelement <8 x i32> %482, i64 0, !dbg !89
  %514 = extractelement <8 x i32> %482, i64 1, !dbg !89
  %515 = extractelement <8 x i32> %482, i64 2, !dbg !89
  %516 = extractelement <8 x i32> %482, i64 3, !dbg !89
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %516, i32 %515, i32 %514, i32 %513, ptr addrspace(1) %508, i1 true) #3, !dbg !89
  %517 = getelementptr float, ptr addrspace(1) %13, i64 %505, !dbg !90
  %518 = getelementptr float, ptr addrspace(1) %13, i64 %507, !dbg !90
  %bc = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %519 = extractelement <8 x i32> %bc, i64 7, !dbg !91
  %520 = select i1 %497, i32 0, i32 %519, !dbg !87
  %bc92 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %521 = extractelement <8 x i32> %bc92, i64 6, !dbg !91
  %522 = select i1 %498, i32 0, i32 %521, !dbg !87
  %bc93 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %523 = extractelement <8 x i32> %bc93, i64 5, !dbg !91
  %524 = select i1 %499, i32 0, i32 %523, !dbg !87
  %bc94 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %525 = extractelement <8 x i32> %bc94, i64 4, !dbg !91
  %526 = select i1 %500, i32 0, i32 %525, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %520, i32 %522, i32 %524, i32 %526, ptr addrspace(1) %517, i1 true) #3, !dbg !91
  %bc95 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %527 = extractelement <8 x i32> %bc95, i64 3, !dbg !91
  %528 = select i1 %501, i32 0, i32 %527, !dbg !87
  %bc96 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %529 = extractelement <8 x i32> %bc96, i64 2, !dbg !91
  %530 = select i1 %502, i32 0, i32 %529, !dbg !87
  %bc97 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %531 = extractelement <8 x i32> %bc97, i64 1, !dbg !91
  %532 = select i1 %503, i32 0, i32 %531, !dbg !87
  %bc98 = bitcast <8 x float> %495 to <8 x i32>, !dbg !91
  %533 = extractelement <8 x i32> %bc98, i64 0, !dbg !91
  %534 = select i1 %504, i32 0, i32 %533, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %528, i32 %530, i32 %532, i32 %534, ptr addrspace(1) %518, i1 true) #3, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpvn7voi4wiz364ojmdolumhqawjz4li242pyocduf3ty5ccltyo.py", directory: "inductor_cache/pv")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 54, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 63, scope: !7)
!21 = !DILocation(line: 42, column: 42, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 29, scope: !7)
!27 = !DILocation(line: 68, column: 20, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 32, scope: !7)
!33 = !DILocation(line: 30, column: 37, scope: !7)
!34 = !DILocation(line: 31, column: 32, scope: !7)
!35 = !DILocation(line: 31, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 59, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 57, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 68, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 47, column: 31, scope: !7)
!45 = !DILocation(line: 47, column: 68, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 57, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 68, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 57, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 68, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 36, scope: !7)
!57 = !DILocation(line: 62, column: 57, scope: !7)
!58 = !DILocation(line: 62, column: 31, scope: !7)
!59 = !DILocation(line: 62, column: 68, scope: !7)
!60 = !DILocation(line: 66, column: 20, scope: !7)
!61 = !DILocation(line: 67, column: 36, scope: !7)
!62 = !DILocation(line: 67, column: 57, scope: !7)
!63 = !DILocation(line: 67, column: 31, scope: !7)
!64 = !DILocation(line: 67, column: 68, scope: !7)
!65 = !DILocation(line: 71, column: 36, scope: !7)
!66 = !DILocation(line: 71, column: 57, scope: !7)
!67 = !DILocation(line: 71, column: 31, scope: !7)
!68 = !DILocation(line: 71, column: 68, scope: !7)
!69 = !DILocation(line: 81, column: 20, scope: !7)
!70 = !DILocation(line: 82, column: 27, scope: !7)
!71 = !DILocation(line: 72, column: 35, scope: !7)
!72 = !DILocation(line: 84, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 35, scope: !7)
!74 = !DILocation(line: 74, column: 35, scope: !7)
!75 = !DILocation(line: 75, column: 35, scope: !7)
!76 = !DILocation(line: 76, column: 35, scope: !7)
!77 = !DILocation(line: 77, column: 34, scope: !7)
!78 = !DILocation(line: 78, column: 33, scope: !7)
!79 = !DILocation(line: 79, column: 20, scope: !7)
!80 = !DILocation(line: 87, column: 20, scope: !7)
!81 = !DILocation(line: 88, column: 20, scope: !7)
!82 = !DILocation(line: 89, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !84, inlinedAt: !86)
!84 = distinct !DILexicalBlockFile(scope: !7, file: !85, discriminator: 0)
!85 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!86 = !DILocation(line: 91, column: 42, scope: !7)
!87 = !DILocation(line: 121, column: 29, scope: !84, inlinedAt: !86)
!88 = !DILocation(line: 92, column: 25, scope: !7)
!89 = !DILocation(line: 92, column: 37, scope: !7)
!90 = !DILocation(line: 93, column: 25, scope: !7)
!91 = !DILocation(line: 93, column: 37, scope: !7)
!92 = !DILocation(line: 93, column: 4, scope: !7)
