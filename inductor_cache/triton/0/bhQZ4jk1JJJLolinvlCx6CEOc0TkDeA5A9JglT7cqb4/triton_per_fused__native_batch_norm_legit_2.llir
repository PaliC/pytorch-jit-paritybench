; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 124, !dbg !12
  %12 = lshr i32 %9, 5, !dbg !12
  %13 = and i32 %9, 127, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = icmp slt i32 %14, 1024, !dbg !14
  %16 = shl i32 %12, 8, !dbg !15
  %17 = and i32 %16, 1792, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %18 = sdiv i32 %.frozen, 256, !dbg !16
  %19 = shl i32 %18, 12, !dbg !17
  %20 = or disjoint i32 %19, %17, !dbg !18
  %21 = mul i32 %18, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = add i32 %20, %.decomposed, !dbg !20
  %23 = add nsw i32 %.decomposed, 2048, !dbg !18
  %24 = add i32 %23, %20, !dbg !20
  %25 = sext i32 %22 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !22
  %34 = bitcast i32 %30 to float, !dbg !22
  %35 = bitcast i32 %31 to float, !dbg !22
  %36 = bitcast i32 %32 to float, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #5, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = fadd float %34, %43, !dbg !23
  %48 = fadd float %35, %44, !dbg !23
  %49 = fadd float %36, %45, !dbg !23
  %50 = fadd float %37, %46, !dbg !23
  %51 = and i32 %12, 7, !dbg !28
  %52 = shl nuw nsw i32 %11, 3, !dbg !28
  %53 = or disjoint i32 %52, %51, !dbg !28
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !28
  %55 = bitcast float %47 to i32, !dbg !28
  %56 = select i1 %15, i32 %55, i32 0, !dbg !23
  %57 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %57, i1 true) #5, !dbg !28
  %58 = or disjoint i32 %52, 8, !dbg !28
  %59 = or disjoint i32 %58, %51, !dbg !28
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !28
  %61 = bitcast float %48 to i32, !dbg !28
  %62 = select i1 %15, i32 %61, i32 0, !dbg !23
  %63 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %63, i1 true) #5, !dbg !28
  %64 = or disjoint i32 %52, 16, !dbg !28
  %65 = or disjoint i32 %64, %51, !dbg !28
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !28
  %67 = bitcast float %49 to i32, !dbg !28
  %68 = select i1 %15, i32 %67, i32 0, !dbg !23
  %69 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %69, i1 true) #5, !dbg !28
  %70 = or disjoint i32 %52, 24, !dbg !28
  %71 = or disjoint i32 %70, %51, !dbg !28
  %72 = getelementptr float, ptr addrspace(3) @global_smem, i32 %71, !dbg !28
  %73 = bitcast float %50 to i32, !dbg !28
  %74 = select i1 %15, i32 %73, i32 0, !dbg !23
  %75 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %75, i1 true) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %76 = icmp slt i32 %9, 1024, !dbg !28
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #5, !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = fadd float %79, %81, !dbg !23
  %83 = bitcast float %82 to i32, !dbg !28
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = fadd float %82, %85, !dbg !23
  %87 = bitcast float %86 to i32, !dbg !28
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !28
  %89 = bitcast i32 %88 to float, !dbg !28
  %90 = fadd float %86, %89, !dbg !23
  %91 = and i32 %9, 7, !dbg !28
  %92 = icmp eq i32 %91, 0, !dbg !28
  %93 = and i1 %76, %92, !dbg !28
  %94 = bitcast float %90 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %94, i1 %93) #5, !dbg !28
  %95 = getelementptr i8, ptr addrspace(3) %77, i32 1024, !dbg !28
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %76) #5, !dbg !28
  %97 = bitcast i32 %96 to float, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fadd float %97, %99, !dbg !23
  %101 = bitcast float %100 to i32, !dbg !28
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !28
  %103 = bitcast i32 %102 to float, !dbg !28
  %104 = fadd float %100, %103, !dbg !23
  %105 = bitcast float %104 to i32, !dbg !28
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = fadd float %104, %107, !dbg !23
  %109 = bitcast float %108 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %109, i1 %93) #5, !dbg !28
  %110 = getelementptr i8, ptr addrspace(3) %77, i32 2048, !dbg !28
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %76) #5, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fadd float %112, %114, !dbg !23
  %116 = bitcast float %115 to i32, !dbg !28
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = fadd float %115, %118, !dbg !23
  %120 = bitcast float %119 to i32, !dbg !28
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fadd float %119, %122, !dbg !23
  %124 = bitcast float %123 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %124, i1 %93) #5, !dbg !28
  %125 = getelementptr i8, ptr addrspace(3) %77, i32 3072, !dbg !28
  %126 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %76) #5, !dbg !28
  %127 = bitcast i32 %126 to float, !dbg !28
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !28
  %129 = bitcast i32 %128 to float, !dbg !28
  %130 = fadd float %127, %129, !dbg !23
  %131 = bitcast float %130 to i32, !dbg !28
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fadd float %130, %133, !dbg !23
  %135 = bitcast float %134 to i32, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %134, %137, !dbg !23
  %139 = bitcast float %138 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %139, i1 %93) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !28
  %141 = load float, ptr addrspace(3) %140, align 16, !dbg !28
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !28
  %143 = load float, ptr addrspace(3) %142, align 16, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !28
  %145 = load float, ptr addrspace(3) %144, align 16, !dbg !28
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !28
  %147 = load float, ptr addrspace(3) %146, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %149 = bitcast float %141 to i32, !dbg !29
  %150 = bitcast float %143 to i32, !dbg !29
  %151 = bitcast float %145 to i32, !dbg !29
  %152 = bitcast float %147 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %149, i32 %150, i32 %151, i32 %152, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %154 = load float, ptr addrspace(3) %153, align 4, !dbg !29
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 1.600000e+01) #5, !dbg !29
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 1.600000e+01) #5, !dbg !29
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 1.600000e+01) #5, !dbg !29
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 1.600000e+01) #5, !dbg !29
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 1.600000e+01) #5, !dbg !29
  %160 = fsub float %34, %156, !dbg !30
  %161 = fsub float %35, %157, !dbg !30
  %162 = fsub float %36, %158, !dbg !30
  %163 = fsub float %37, %159, !dbg !30
  %164 = fsub float %43, %156, !dbg !30
  %165 = fsub float %44, %157, !dbg !30
  %166 = fsub float %45, %158, !dbg !30
  %167 = fsub float %46, %159, !dbg !30
  %168 = fmul float %160, %160, !dbg !31
  %169 = fmul float %161, %161, !dbg !31
  %170 = fmul float %162, %162, !dbg !31
  %171 = fmul float %163, %163, !dbg !31
  %172 = fmul float %164, %164, !dbg !31
  %173 = fmul float %165, %165, !dbg !31
  %174 = fmul float %166, %166, !dbg !31
  %175 = fmul float %167, %167, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %176 = fadd float %168, %172, !dbg !34
  %177 = fadd float %169, %173, !dbg !34
  %178 = fadd float %170, %174, !dbg !34
  %179 = fadd float %171, %175, !dbg !34
  %180 = bitcast float %176 to i32, !dbg !32
  %181 = select i1 %15, i32 %180, i32 0, !dbg !34
  %182 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %182, i1 true) #5, !dbg !32
  %183 = bitcast float %177 to i32, !dbg !32
  %184 = select i1 %15, i32 %183, i32 0, !dbg !34
  %185 = insertelement <1 x i32> poison, i32 %184, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %185, i1 true) #5, !dbg !32
  %186 = bitcast float %178 to i32, !dbg !32
  %187 = select i1 %15, i32 %186, i32 0, !dbg !34
  %188 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %188, i1 true) #5, !dbg !32
  %189 = bitcast float %179 to i32, !dbg !32
  %190 = select i1 %15, i32 %189, i32 0, !dbg !34
  %191 = insertelement <1 x i32> poison, i32 %190, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %191, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %192 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #5, !dbg !32
  %193 = bitcast i32 %192 to float, !dbg !32
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !32
  %195 = bitcast i32 %194 to float, !dbg !32
  %196 = fadd float %193, %195, !dbg !34
  %197 = bitcast float %196 to i32, !dbg !32
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !32
  %199 = bitcast i32 %198 to float, !dbg !32
  %200 = fadd float %196, %199, !dbg !34
  %201 = bitcast float %200 to i32, !dbg !32
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !32
  %203 = bitcast i32 %202 to float, !dbg !32
  %204 = fadd float %200, %203, !dbg !34
  %205 = bitcast float %204 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %205, i1 %93) #5, !dbg !32
  %206 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %95, i1 %76) #5, !dbg !32
  %207 = bitcast i32 %206 to float, !dbg !32
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !32
  %209 = bitcast i32 %208 to float, !dbg !32
  %210 = fadd float %207, %209, !dbg !34
  %211 = bitcast float %210 to i32, !dbg !32
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !32
  %213 = bitcast i32 %212 to float, !dbg !32
  %214 = fadd float %210, %213, !dbg !34
  %215 = bitcast float %214 to i32, !dbg !32
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = fadd float %214, %217, !dbg !34
  %219 = bitcast float %218 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %219, i1 %93) #5, !dbg !32
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %76) #5, !dbg !32
  %221 = bitcast i32 %220 to float, !dbg !32
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 4, i32 31), !dbg !32
  %223 = bitcast i32 %222 to float, !dbg !32
  %224 = fadd float %221, %223, !dbg !34
  %225 = bitcast float %224 to i32, !dbg !32
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !32
  %227 = bitcast i32 %226 to float, !dbg !32
  %228 = fadd float %224, %227, !dbg !34
  %229 = bitcast float %228 to i32, !dbg !32
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 1, i32 31), !dbg !32
  %231 = bitcast i32 %230 to float, !dbg !32
  %232 = fadd float %228, %231, !dbg !34
  %233 = bitcast float %232 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %233, i1 %93) #5, !dbg !32
  %234 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %125, i1 %76) #5, !dbg !32
  %235 = bitcast i32 %234 to float, !dbg !32
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !32
  %237 = bitcast i32 %236 to float, !dbg !32
  %238 = fadd float %235, %237, !dbg !34
  %239 = bitcast float %238 to i32, !dbg !32
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !32
  %241 = bitcast i32 %240 to float, !dbg !32
  %242 = fadd float %238, %241, !dbg !34
  %243 = bitcast float %242 to i32, !dbg !32
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !32
  %245 = bitcast i32 %244 to float, !dbg !32
  %246 = fadd float %242, %245, !dbg !34
  %247 = bitcast float %246 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %247, i1 %93) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %248 = load i32, ptr addrspace(3) %140, align 16, !dbg !32
  %249 = load i32, ptr addrspace(3) %142, align 16, !dbg !32
  %250 = load i32, ptr addrspace(3) %144, align 16, !dbg !32
  %251 = load i32, ptr addrspace(3) %146, align 16, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %248, i32 %249, i32 %250, i32 %251, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %252 = load float, ptr addrspace(3) %153, align 4, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %248, i32 %249, i32 %250, i32 %251, i1 true) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %253 = load i32, ptr addrspace(3) %153, align 4, !dbg !36
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 1.600000e+01) #5, !dbg !37
  %255 = fadd float %254, 0x3EE4F8B580000000, !dbg !38
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %256, 0, !dbg !35
  br i1 %.not.i, label %259, label %257, !dbg !35

257:                                              ; preds = %6
  %258 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %255), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

259:                                              ; preds = %6
  %260 = tail call float @llvm.nvvm.rsqrt.approx.f(float %255), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %257, %259
  %.0.i = phi float [ %258, %257 ], [ %260, %259 ], !dbg !35
  %261 = or disjoint i32 %8, %13, !dbg !13
  %262 = icmp slt i32 %261, 1024, !dbg !14
  %263 = sext i32 %261 to i64, !dbg !39
  %264 = getelementptr float, ptr addrspace(1) %3, i64 %263, !dbg !39
  %265 = and i32 %9, 128, !dbg !40
  %266 = icmp eq i32 %265, 0, !dbg !40
  %267 = bitcast float %.0.i to i32, !dbg !40
  %268 = and i1 %266, %262, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %264, i1 %268) #5, !dbg !40
  %269 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !41
  %270 = bitcast float %155 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %269, i1 %268) #5, !dbg !42
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %253, ptr addrspace(1) %271, i1 %268) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cffxxk2od4sxw3rlbuq25tzacurt6kuuv5t4mj7sgcmiwmxm4y6s.py", directory: "inductor_cache/ff")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_2", linkageName: "triton_per_fused__native_batch_norm_legit_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 51, scope: !7)
!17 = !DILocation(line: 31, column: 45, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 65, scope: !7)
!20 = !DILocation(line: 31, column: 60, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 73, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 19, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !7)
!36 = !DILocation(line: 44, column: 29, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 25, scope: !7)
!40 = !DILocation(line: 50, column: 37, scope: !7)
!41 = !DILocation(line: 51, column: 25, scope: !7)
!42 = !DILocation(line: 51, column: 37, scope: !7)
!43 = !DILocation(line: 52, column: 25, scope: !7)
!44 = !DILocation(line: 52, column: 37, scope: !7)
!45 = !DILocation(line: 52, column: 4, scope: !7)
