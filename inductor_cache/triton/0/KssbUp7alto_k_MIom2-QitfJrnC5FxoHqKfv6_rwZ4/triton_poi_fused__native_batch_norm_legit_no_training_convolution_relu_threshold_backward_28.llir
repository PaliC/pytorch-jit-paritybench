; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_threshold_backward_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = sdiv i32 %15, 64, !dbg !14
  %18 = srem i32 %17, 512, !dbg !15
  %19 = sext i32 %15 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = sext i32 %16 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #4, !dbg !17
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !17
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %46 = bitcast i32 %45 to float, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %50 = bitcast i32 %49 to float, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %54 = bitcast i32 %53 to float, !dbg !23
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %58 = bitcast i32 %57 to float, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #4, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #4, !dbg !27
  %79 = fadd float %46, 0x3EE4F8B580000000, !dbg !28
  %80 = fadd float %48, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %50, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %52, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %54, 0x3EE4F8B580000000, !dbg !28
  %84 = fadd float %56, 0x3EE4F8B580000000, !dbg !28
  %85 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %86 = fadd float %60, 0x3EE4F8B580000000, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %87, 0, !dbg !29
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %88, 0, !dbg !29
  br i1 %.not.i, label %94, label %89, !dbg !29

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !29

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

94:                                               ; preds = %9
  br i1 %.not1.i, label %97, label %95, !dbg !29

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i30 = icmp eq i32 %99, 0, !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i33 = icmp eq i32 %100, 0, !dbg !29
  br i1 %.not.i30, label %106, label %101, !dbg !29

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %104, label %102, !dbg !29

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i33, label %109, label %107, !dbg !29

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit34, !dbg !29

__nv_sqrtf.exit34:                                ; preds = %102, %104, %107, %109
  %.0.i32 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i35 = icmp eq i32 %111, 0, !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i38 = icmp eq i32 %112, 0, !dbg !29
  br i1 %.not.i35, label %118, label %113, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

118:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %121, label %119, !dbg !29

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !29
  br label %__nv_sqrtf.exit39, !dbg !29

__nv_sqrtf.exit39:                                ; preds = %114, %116, %119, %121
  %.0.i37 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !29
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i40 = icmp eq i32 %123, 0, !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i43 = icmp eq i32 %124, 0, !dbg !29
  br i1 %.not.i40, label %130, label %125, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

130:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %133, label %131, !dbg !29

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !29
  br label %__nv_sqrtf.exit44, !dbg !29

__nv_sqrtf.exit44:                                ; preds = %126, %128, %131, %133
  %.0.i42 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !29
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i45 = icmp eq i32 %135, 0, !dbg !29
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i48 = icmp eq i32 %136, 0, !dbg !29
  br i1 %.not.i45, label %142, label %137, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

142:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %145, label %143, !dbg !29

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !29
  br label %__nv_sqrtf.exit49, !dbg !29

__nv_sqrtf.exit49:                                ; preds = %138, %140, %143, %145
  %.0.i47 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !29
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i50 = icmp eq i32 %147, 0, !dbg !29
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i53 = icmp eq i32 %148, 0, !dbg !29
  br i1 %.not.i50, label %154, label %149, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !29
  br label %__nv_sqrtf.exit54, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !29
  br label %__nv_sqrtf.exit54, !dbg !29

154:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %157, label %155, !dbg !29

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !29
  br label %__nv_sqrtf.exit54, !dbg !29

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !29
  br label %__nv_sqrtf.exit54, !dbg !29

__nv_sqrtf.exit54:                                ; preds = %150, %152, %155, %157
  %.0.i52 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i55 = icmp eq i32 %159, 0, !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i58 = icmp eq i32 %160, 0, !dbg !29
  br i1 %.not.i55, label %166, label %161, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !29
  br label %__nv_sqrtf.exit59, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !29
  br label %__nv_sqrtf.exit59, !dbg !29

166:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %169, label %167, !dbg !29

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !29
  br label %__nv_sqrtf.exit59, !dbg !29

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !29
  br label %__nv_sqrtf.exit59, !dbg !29

__nv_sqrtf.exit59:                                ; preds = %162, %164, %167, %169
  %.0.i57 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !29
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i60 = icmp eq i32 %171, 0, !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i63 = icmp eq i32 %172, 0, !dbg !29
  br i1 %.not.i60, label %178, label %173, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !29
  br label %__nv_sqrtf.exit64, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !29
  br label %__nv_sqrtf.exit64, !dbg !29

178:                                              ; preds = %__nv_sqrtf.exit59
  br i1 %.not1.i63, label %181, label %179, !dbg !29

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !29
  br label %__nv_sqrtf.exit64, !dbg !29

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !29
  br label %__nv_sqrtf.exit64, !dbg !29

__nv_sqrtf.exit64:                                ; preds = %174, %176, %179, %181
  %.0.i62 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !29
  %183 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %184 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !19
  %185 = insertelement <4 x i32> %184, i32 %32, i64 1, !dbg !19
  %186 = insertelement <4 x i32> %185, i32 %33, i64 2, !dbg !19
  %187 = insertelement <4 x i32> %186, i32 %34, i64 3, !dbg !19
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !19
  %189 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !21
  %190 = insertelement <4 x i32> %189, i32 %41, i64 1, !dbg !21
  %191 = insertelement <4 x i32> %190, i32 %42, i64 2, !dbg !21
  %192 = insertelement <4 x i32> %191, i32 %43, i64 3, !dbg !21
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !21
  %194 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %195 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %196 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %197 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %198 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !19
  %199 = insertelement <4 x i32> %198, i32 %28, i64 1, !dbg !19
  %200 = insertelement <4 x i32> %199, i32 %29, i64 2, !dbg !19
  %201 = insertelement <4 x i32> %200, i32 %30, i64 3, !dbg !19
  %202 = bitcast <4 x i32> %201 to <4 x float>, !dbg !19
  %203 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !21
  %204 = insertelement <4 x i32> %203, i32 %37, i64 1, !dbg !21
  %205 = insertelement <4 x i32> %204, i32 %38, i64 2, !dbg !21
  %206 = insertelement <4 x i32> %205, i32 %39, i64 3, !dbg !21
  %207 = bitcast <4 x i32> %206 to <4 x float>, !dbg !21
  %208 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %209 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %210 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %211 = insertelement <4 x i32> poison, i32 %75, i64 0, !dbg !27
  %212 = insertelement <4 x i32> %211, i32 %76, i64 1, !dbg !27
  %213 = insertelement <4 x i32> %212, i32 %77, i64 2, !dbg !27
  %214 = insertelement <4 x i32> %213, i32 %78, i64 3, !dbg !27
  %215 = bitcast <4 x i32> %214 to <4 x float>, !dbg !27
  %216 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !27
  %217 = insertelement <4 x i32> %216, i32 %72, i64 1, !dbg !27
  %218 = insertelement <4 x i32> %217, i32 %73, i64 2, !dbg !27
  %219 = insertelement <4 x i32> %218, i32 %74, i64 3, !dbg !27
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !27
  %221 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !25
  %222 = insertelement <4 x i32> %221, i32 %67, i64 1, !dbg !25
  %223 = insertelement <4 x i32> %222, i32 %68, i64 2, !dbg !25
  %224 = insertelement <4 x i32> %223, i32 %69, i64 3, !dbg !25
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !25
  %226 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !25
  %227 = insertelement <4 x i32> %226, i32 %63, i64 1, !dbg !25
  %228 = insertelement <4 x i32> %227, i32 %64, i64 2, !dbg !25
  %229 = insertelement <4 x i32> %228, i32 %65, i64 3, !dbg !25
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !25
  %231 = shl i32 %12, 2, !dbg !12
  %232 = and i32 %231, 508, !dbg !12
  %233 = or disjoint i32 %232, 512, !dbg !12
  %234 = or disjoint i32 %11, %233, !dbg !13
  %235 = sext i32 %234 to i64, !dbg !16
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !16
  %237 = or disjoint i32 %11, %232, !dbg !13
  %238 = sext i32 %237 to i64, !dbg !16
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !16
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !30
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !30
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !30
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !30
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #4, !dbg !30
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #4, !dbg !30
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #4, !dbg !30
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i62) #4, !dbg !30
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %249 = getelementptr inbounds i8, ptr addrspace(3) %248, i32 16, !dbg !31
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !31
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !31
  %252 = getelementptr inbounds i8, ptr addrspace(3) %250, i32 4, !dbg !31
  %253 = getelementptr inbounds i8, ptr addrspace(3) %250, i32 8, !dbg !31
  %254 = getelementptr inbounds i8, ptr addrspace(3) %250, i32 12, !dbg !31
  %255 = getelementptr float, ptr addrspace(1) %6, i64 %238, !dbg !32
  %256 = getelementptr float, ptr addrspace(1) %6, i64 %235, !dbg !32
  %257 = getelementptr i1, ptr addrspace(1) %7, i64 %19, !dbg !33
  %258 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !17
  %259 = insertelement <4 x i32> %258, i32 %209, i64 1, !dbg !17
  %260 = insertelement <4 x i32> %259, i32 %208, i64 2, !dbg !17
  %261 = insertelement <4 x i32> %260, i32 %197, i64 3, !dbg !17
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !17
  %263 = fadd <4 x float> %262, %202, !dbg !34
  %264 = fsub <4 x float> %263, %207, !dbg !35
  %265 = insertelement <4 x float> poison, float %240, i64 0, !dbg !36
  %266 = insertelement <4 x float> %265, float %241, i64 1, !dbg !36
  %267 = insertelement <4 x float> %266, float %242, i64 2, !dbg !36
  %268 = insertelement <4 x float> %267, float %243, i64 3, !dbg !36
  %269 = fmul <4 x float> %264, %268, !dbg !36
  %270 = fmul <4 x float> %269, %230, !dbg !37
  %271 = fadd <4 x float> %270, %220, !dbg !38
  %272 = fcmp olt <4 x float> %271, zeroinitializer, !dbg !39
  %273 = select <4 x i1> %272, <4 x float> zeroinitializer, <4 x float> %271, !dbg !43
  %274 = fcmp ole <4 x float> %273, zeroinitializer, !dbg !44
  %bc = bitcast <4 x float> %263 to <4 x i32>, !dbg !31
  %275 = extractelement <4 x i32> %bc, i64 0, !dbg !31
  %bc65 = bitcast <4 x float> %263 to <4 x i32>, !dbg !31
  %276 = extractelement <4 x i32> %bc65, i64 1, !dbg !31
  %bc66 = bitcast <4 x float> %263 to <4 x i32>, !dbg !31
  %277 = extractelement <4 x i32> %bc66, i64 2, !dbg !31
  %bc67 = bitcast <4 x float> %263 to <4 x i32>, !dbg !31
  %278 = extractelement <4 x i32> %bc67, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %248, i32 %275, i32 %276, i32 %277, i32 %278, i1 true) #4, !dbg !31
  %bc68 = bitcast <4 x float> %273 to <4 x i32>, !dbg !45
  %279 = extractelement <4 x i32> %bc68, i64 0, !dbg !45
  %bc69 = bitcast <4 x float> %273 to <4 x i32>, !dbg !45
  %280 = extractelement <4 x i32> %bc69, i64 1, !dbg !45
  %bc70 = bitcast <4 x float> %273 to <4 x i32>, !dbg !45
  %281 = extractelement <4 x i32> %bc70, i64 2, !dbg !45
  %bc71 = bitcast <4 x float> %273 to <4 x i32>, !dbg !45
  %282 = extractelement <4 x i32> %bc71, i64 3, !dbg !45
  %283 = insertelement <4 x i32> poison, i32 %196, i64 0, !dbg !17
  %284 = insertelement <4 x i32> %283, i32 %195, i64 1, !dbg !17
  %285 = insertelement <4 x i32> %284, i32 %194, i64 2, !dbg !17
  %286 = insertelement <4 x i32> %285, i32 %183, i64 3, !dbg !17
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !17
  %288 = fadd <4 x float> %287, %188, !dbg !34
  %289 = fsub <4 x float> %288, %193, !dbg !35
  %290 = insertelement <4 x float> poison, float %244, i64 0, !dbg !36
  %291 = insertelement <4 x float> %290, float %245, i64 1, !dbg !36
  %292 = insertelement <4 x float> %291, float %246, i64 2, !dbg !36
  %293 = insertelement <4 x float> %292, float %247, i64 3, !dbg !36
  %294 = fmul <4 x float> %289, %293, !dbg !36
  %295 = fmul <4 x float> %294, %225, !dbg !37
  %296 = fadd <4 x float> %295, %215, !dbg !38
  %297 = fcmp olt <4 x float> %296, zeroinitializer, !dbg !39
  %298 = select <4 x i1> %297, <4 x float> zeroinitializer, <4 x float> %296, !dbg !43
  %299 = fcmp ole <4 x float> %298, zeroinitializer, !dbg !44
  %bc72 = bitcast <4 x float> %288 to <4 x i32>, !dbg !31
  %300 = extractelement <4 x i32> %bc72, i64 0, !dbg !31
  %bc73 = bitcast <4 x float> %288 to <4 x i32>, !dbg !31
  %301 = extractelement <4 x i32> %bc73, i64 1, !dbg !31
  %bc74 = bitcast <4 x float> %288 to <4 x i32>, !dbg !31
  %302 = extractelement <4 x i32> %bc74, i64 2, !dbg !31
  %bc75 = bitcast <4 x float> %288 to <4 x i32>, !dbg !31
  %303 = extractelement <4 x i32> %bc75, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %249, i32 %300, i32 %301, i32 %302, i32 %303, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %304 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %250, align 16, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %252, align 4, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %253, align 8, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %254, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %239, i1 true) #4, !dbg !31
  %.extract11 = extractelement <4 x i32> %304, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %304, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %304, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %304, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %236, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %bc76 = bitcast <4 x float> %298 to <4 x i32>, !dbg !45
  %305 = extractelement <4 x i32> %bc76, i64 0, !dbg !45
  %bc77 = bitcast <4 x float> %298 to <4 x i32>, !dbg !45
  %306 = extractelement <4 x i32> %bc77, i64 1, !dbg !45
  %bc78 = bitcast <4 x float> %298 to <4 x i32>, !dbg !45
  %307 = extractelement <4 x i32> %bc78, i64 2, !dbg !45
  %bc79 = bitcast <4 x float> %298 to <4 x i32>, !dbg !45
  %308 = extractelement <4 x i32> %bc79, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %248, i32 %279, i32 %280, i32 %281, i32 %282, i1 true) #4, !dbg !45
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %249, i32 %305, i32 %306, i32 %307, i32 %308, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %309 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !45
  %.extract22 = load i32, ptr addrspace(3) %250, align 16, !dbg !45
  %.extract23 = load i32, ptr addrspace(3) %252, align 4, !dbg !45
  %.extract24 = load i32, ptr addrspace(3) %253, align 8, !dbg !45
  %.extract25 = load i32, ptr addrspace(3) %254, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %255, i1 true) #4, !dbg !45
  %.extract26 = extractelement <4 x i32> %309, i64 0, !dbg !45
  %.extract27 = extractelement <4 x i32> %309, i64 1, !dbg !45
  %.extract28 = extractelement <4 x i32> %309, i64 2, !dbg !45
  %.extract29 = extractelement <4 x i32> %309, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %256, i1 true) #4, !dbg !45
  %310 = zext <4 x i1> %274 to <4 x i8>, !dbg !46
  %311 = bitcast <4 x i8> %310 to i32, !dbg !46
  %312 = zext <4 x i1> %299 to <4 x i8>, !dbg !46
  %313 = bitcast <4 x i8> %312 to i32, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %311, i32 %313, ptr addrspace(1) %257, i1 true) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cybz5z4k5hwmj465bf3m5562jlj6vcw76sfanie2we6m47ds5cqi.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_threshold_backward_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_threshold_backward_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_threshold_backward_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_threshold_backward_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 48, column: 39, scope: !7)
!32 = !DILocation(line: 49, column: 25, scope: !7)
!33 = !DILocation(line: 50, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 19, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 45, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 21, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 50, column: 37, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
