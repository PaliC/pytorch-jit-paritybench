#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)
#loc1 = loc(unknown)
#loc34 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:27)
#loc43 = loc(callsite(#loc1 at #loc34))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_embedding_mean_pow_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.560000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x64xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<true> : tensor<1x64xi1, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc2)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %5 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc4)
    %6 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc5)
    %7 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %8 = scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg7 = %cst) -> (tensor<1x64xf32, #blocked>)  : i32 {
      %14 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked> loc(#loc8)
      %15 = tt.splat %arg6 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc8)
      %16 = arith.addi %14, %2 : tensor<1x64xi32, #blocked> loc(#loc8)
      %17 = arith.addi %15, %3 : tensor<1x64xi32, #blocked1> loc(#loc8)
      %18 = arith.cmpi slt, %16, %cst_6 : tensor<1x64xi32, #blocked> loc(#loc9)
      %19 = arith.cmpi slt, %17, %cst_3 : tensor<1x64xi32, #blocked1> loc(#loc9)
      %20 = arith.divsi %16, %cst_7 : tensor<1x64xi32, #blocked> loc(#loc10)
      %21 = arith.remsi %16, %cst_7 : tensor<1x64xi32, #blocked> loc(#loc11)
      %22 = tt.addptr %4, %17 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc3)
      %23 = tt.load %22, %19, %cst_4 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc12)
      %24 = triton_gpu.convert_layout %23 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 2 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 1, 1>} : tensor<1x64xf32, #blocked1> -> tensor<1x64xf32, #blocked> loc(#loc12)
      %25 = tt.addptr %5, %20 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc4)
      %26 = tt.load %25, %18, %cst_1 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc13)
      %27 = arith.addi %26, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc14)
      %28 = arith.cmpi slt, %26, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc15)
      %29 = arith.select %28, %27, %26 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc16)
      %30 = arith.cmpi sge, %29, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc17)
      %31 = arith.cmpi slt, %29, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc18)
      %32 = arith.andi %30, %31 : tensor<1x64xi1, #blocked> loc(#loc19)
      %33 = arith.xori %18, %cst_5 : tensor<1x64xi1, #blocked> loc(#loc20)
      %34 = arith.ori %32, %33 : tensor<1x64xi1, #blocked> loc(#loc21)
      tt.assert %34, "index out of bounds: 0 <= tmp5 < 4" : tensor<1x64xi1, #blocked> loc(#loc22)
      %35 = arith.muli %21, %cst_7 : tensor<1x64xi32, #blocked> loc(#loc23)
      %36 = arith.extsi %35 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc24)
      %37 = arith.addi %29, %36 : tensor<1x64xi64, #blocked> loc(#loc24)
      %38 = tt.addptr %6, %37 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi64, #blocked> loc(#loc5)
      %39 = tt.load %38, %18, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc25)
      %40 = arith.subf %39, %24 : tensor<1x64xf32, #blocked> loc(#loc26)
      %41 = arith.addf %24, %40 : tensor<1x64xf32, #blocked> loc(#loc27)
      %42 = arith.mulf %40, %40 : tensor<1x64xf32, #blocked> loc(#loc28)
      %43 = arith.addf %arg7, %42 : tensor<1x64xf32, #blocked> loc(#loc29)
      %44 = arith.select %18, %43, %arg7 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc30)
      %45 = tt.addptr %7, %17 : tensor<1x64x!tt.ptr<f32>, #blocked1>, tensor<1x64xi32, #blocked1> loc(#loc6)
      %46 = triton_gpu.convert_layout %41 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc31)
      tt.store %45, %46, %19 : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc31)
      scf.yield %44 : tensor<1x64xf32, #blocked> loc(#loc32)
    } loc(#loc7)
    %9 = "tt.reduce"(%8) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc34)), %arg7: f32 loc(callsite(#loc1 at #loc34))):
      %14 = arith.addf %arg6, %arg7 : f32 loc(#loc45)
      tt.reduce.return %14 : f32 loc(#loc42)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc42)
    %10 = tt.expand_dims %9 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc36)
    %11 = arith.divf %10, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc37)
    gpu.barrier loc(#loc38)
    %12 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc39)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc40)
    tt.store %13, %11 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":25:33)
#loc3 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:34)
#loc4 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:34)
#loc5 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:34)
#loc6 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:29)
#loc7 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":27:36)
#loc8 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":28:27)
#loc9 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":29:25)
#loc10 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":31:23)
#loc11 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":32:23)
#loc12 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:39)
#loc13 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:39)
#loc14 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":36:22)
#loc15 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":37:22)
#loc16 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":38:36)
#loc17 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:32)
#loc18 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:48)
#loc19 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:41)
#loc20 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:56)
#loc21 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:54)
#loc22 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:64)
#loc23 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:43)
#loc24 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:41)
#loc25 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:48)
#loc26 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":41:22)
#loc27 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":42:22)
#loc28 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":43:23)
#loc29 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":45:25)
#loc30 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":46:40)
#loc31 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:75)
#loc32 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:8)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc36 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:30)
#loc37 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":50:20)
#loc38 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":51:4)
#loc39 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:28)
#loc40 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:71)
#loc41 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:4)
#loc42 = loc(callsite(#loc33 at #loc34))
#loc44 = loc(callsite(#loc35 at #loc33))
#loc45 = loc(callsite(#loc44 at #loc34))
