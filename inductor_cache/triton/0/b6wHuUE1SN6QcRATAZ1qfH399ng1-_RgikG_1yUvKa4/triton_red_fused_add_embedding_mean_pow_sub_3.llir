; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp5 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused_add_embedding_mean_pow_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 63, !dbg !12
  %9 = shl i32 %7, 2
  %10 = and i32 %9, 12
  %11 = zext nneg i32 %10 to i64
  %12 = zext nneg i32 %8 to i64, !dbg !13
  %13 = lshr i64 %12, 2, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true) #4, !dbg !16
  %16 = getelementptr i64, ptr addrspace(1) %2, i64 %13, !dbg !17
  %17 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %16, i1 true, i1 true) #4, !dbg !18
  %18 = lshr i64 %17, 61, !dbg !19
  %19 = and i64 %18, 4, !dbg !19
  %20 = add i64 %19, %17, !dbg !19
  %21 = icmp ugt i64 %20, 3, !dbg !20
  br i1 %21, label %22, label %23, !dbg !21

22:                                               ; preds = %63, %43, %23, %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !21
  unreachable, !dbg !21

23:                                               ; preds = %6
  %24 = bitcast i32 %15 to float, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %25 = or disjoint i64 %20, %11, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 true, i32 0, i1 true) #4, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = fsub float %28, %24, !dbg !25
  %30 = fadd float %29, %24, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %12, !dbg !27
  %32 = bitcast float %30 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %32, ptr addrspace(1) %31, i1 true) #4, !dbg !28
  %33 = or disjoint i64 %12, 64, !dbg !29
  %34 = lshr i64 %33, 2, !dbg !14
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !15
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true) #4, !dbg !16
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %34, !dbg !17
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %37, i1 true, i1 true) #4, !dbg !18
  %39 = lshr i64 %38, 61, !dbg !19
  %40 = and i64 %39, 4, !dbg !19
  %41 = add i64 %40, %38, !dbg !19
  %42 = icmp ugt i64 %41, 3, !dbg !20
  br i1 %42, label %22, label %43, !dbg !21

43:                                               ; preds = %23
  %44 = bitcast i32 %36 to float, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %45 = or disjoint i64 %41, %11, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 true, i32 0, i1 true) #4, !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = fsub float %48, %44, !dbg !25
  %50 = fadd float %49, %44, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !27
  %52 = bitcast float %50 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %52, ptr addrspace(1) %51, i1 true) #4, !dbg !28
  %53 = or disjoint i64 %12, 128, !dbg !29
  %54 = lshr i64 %53, 2, !dbg !14
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !15
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 true, i32 0, i1 true) #4, !dbg !16
  %57 = getelementptr i64, ptr addrspace(1) %2, i64 %54, !dbg !17
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %57, i1 true, i1 true) #4, !dbg !18
  %59 = lshr i64 %58, 61, !dbg !19
  %60 = and i64 %59, 4, !dbg !19
  %61 = add i64 %60, %58, !dbg !19
  %62 = icmp ugt i64 %61, 3, !dbg !20
  br i1 %62, label %22, label %63, !dbg !21

63:                                               ; preds = %43
  %64 = bitcast i32 %56 to float, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %65 = or disjoint i64 %61, %11, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 true, i32 0, i1 true) #4, !dbg !24
  %68 = bitcast i32 %67 to float, !dbg !24
  %69 = fsub float %68, %64, !dbg !25
  %70 = fadd float %69, %64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !27
  %72 = bitcast float %70 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %71, i1 true) #4, !dbg !28
  %73 = or disjoint i64 %12, 192, !dbg !29
  %74 = lshr i64 %73, 2, !dbg !14
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !15
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 true, i32 0, i1 true) #4, !dbg !16
  %77 = getelementptr i64, ptr addrspace(1) %2, i64 %74, !dbg !17
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %77, i1 true, i1 true) #4, !dbg !18
  %79 = lshr i64 %78, 61, !dbg !19
  %80 = and i64 %79, 4, !dbg !19
  %81 = add i64 %80, %78, !dbg !19
  %82 = icmp ugt i64 %81, 3, !dbg !20
  br i1 %82, label %22, label %83, !dbg !21

83:                                               ; preds = %63
  %84 = fmul float %29, %29, !dbg !30
  %85 = fmul float %49, %49, !dbg !30
  %86 = fadd float %84, %85, !dbg !31
  %87 = fmul float %69, %69, !dbg !30
  %88 = fadd float %86, %87, !dbg !31
  %89 = bitcast i32 %76 to float, !dbg !16
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %90 = or disjoint i64 %81, %11, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !23
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 true, i32 0, i1 true) #4, !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = fsub float %93, %89, !dbg !25
  %95 = fadd float %94, %89, !dbg !26
  %96 = fmul float %94, %94, !dbg !30
  %97 = fadd float %88, %96, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !27
  %99 = bitcast float %95 to i32, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %98, i1 true) #4, !dbg !28
  %100 = lshr i32 %7, 5, !dbg !12
  %101 = and i32 %7, 31, !dbg !12
  %102 = bitcast float %97 to i32, !dbg !32
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = fadd float %97, %104, !dbg !36
  %106 = bitcast float %105 to i32, !dbg !32
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = fadd float %105, %108, !dbg !36
  %110 = bitcast float %109 to i32, !dbg !32
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = fadd float %109, %112, !dbg !36
  %114 = bitcast float %113 to i32, !dbg !32
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = fadd float %113, %116, !dbg !36
  %118 = bitcast float %117 to i32, !dbg !32
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = fadd float %117, %120, !dbg !36
  %122 = icmp eq i32 %101, 0, !dbg !32
  %123 = and i32 %100, 1, !dbg !32
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !32
  %125 = bitcast float %121 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %122) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %126 = icmp slt i32 %7, 2, !dbg !32
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !32
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #4, !dbg !32
  %129 = bitcast i32 %128 to float, !dbg !32
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !32
  %131 = bitcast i32 %130 to float, !dbg !32
  %132 = fadd float %129, %131, !dbg !36
  %133 = and i32 %7, 1, !dbg !32
  %134 = icmp eq i32 %133, 0, !dbg !32
  %135 = and i1 %126, %134, !dbg !32
  %136 = bitcast float %132 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %136, i1 %135) #4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %137 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 2.560000e+02) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %139 = icmp eq i32 %8, 0, !dbg !40
  %140 = bitcast float %138 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %0, i1 %139) #4, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py", directory: "inductor_cache/yn")
!4 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_embedding_mean_pow_sub_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused_add_embedding_mean_pow_sub_3", linkageName: "triton_red_fused_add_embedding_mean_pow_sub_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 27, column: 36, scope: !11)
!14 = !DILocation(line: 31, column: 23, scope: !11)
!15 = !DILocation(line: 33, column: 34, scope: !11)
!16 = !DILocation(line: 33, column: 39, scope: !11)
!17 = !DILocation(line: 34, column: 34, scope: !11)
!18 = !DILocation(line: 34, column: 39, scope: !11)
!19 = !DILocation(line: 38, column: 36, scope: !11)
!20 = !DILocation(line: 39, column: 41, scope: !11)
!21 = !DILocation(line: 39, column: 64, scope: !11)
!22 = !DILocation(line: 40, column: 41, scope: !11)
!23 = !DILocation(line: 40, column: 34, scope: !11)
!24 = !DILocation(line: 40, column: 48, scope: !11)
!25 = !DILocation(line: 41, column: 22, scope: !11)
!26 = !DILocation(line: 42, column: 22, scope: !11)
!27 = !DILocation(line: 47, column: 29, scope: !11)
!28 = !DILocation(line: 47, column: 75, scope: !11)
!29 = !DILocation(line: 28, column: 27, scope: !11)
!30 = !DILocation(line: 43, column: 23, scope: !11)
!31 = !DILocation(line: 45, column: 25, scope: !11)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !11, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 48, column: 27, scope: !11)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 50, column: 20, scope: !11)
!39 = !DILocation(line: 51, column: 4, scope: !11)
!40 = !DILocation(line: 52, column: 71, scope: !11)
!41 = !DILocation(line: 52, column: 4, scope: !11)
