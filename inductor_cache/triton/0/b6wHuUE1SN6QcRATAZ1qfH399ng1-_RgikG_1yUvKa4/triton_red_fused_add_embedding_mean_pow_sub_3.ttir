#loc = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)
#loc1 = loc(unknown)
#loc35 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:27)
#loc44 = loc(callsite(#loc1 at #loc35))
module {
  tt.func public @triton_red_fused_add_embedding_mean_pow_sub_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x64xi64> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<2.560000e+02> : tensor<1x1xf32> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<1x64xi32> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_5 = arith.constant dense<true> : tensor<1x64xi1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc4)
    %3 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>> loc(#loc5)
    %4 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc6)
    %5 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc7)
    %6 = scf.for %arg6 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg7 = %cst_4) -> (tensor<1x64xf32>)  : i32 {
      %12 = tt.splat %arg6 : i32 -> tensor<1x64xi32> loc(#loc9)
      %13 = arith.addi %12, %1 : tensor<1x64xi32> loc(#loc9)
      %14 = arith.cmpi slt, %13, %cst_3 : tensor<1x64xi32> loc(#loc10)
      %15 = arith.divsi %13, %cst_2 : tensor<1x64xi32> loc(#loc11)
      %16 = arith.remsi %13, %cst_2 : tensor<1x64xi32> loc(#loc12)
      %17 = tt.addptr %2, %13 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc4)
      %18 = tt.load %17, %14, %cst_4 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>> loc(#loc13)
      %19 = tt.addptr %3, %15 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi32> loc(#loc5)
      %20 = tt.load %19, %14, %cst_0 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>> loc(#loc14)
      %21 = arith.addi %20, %cst : tensor<1x64xi64> loc(#loc15)
      %22 = arith.cmpi slt, %20, %cst_0 : tensor<1x64xi64> loc(#loc16)
      %23 = arith.select %22, %21, %20 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc17)
      %24 = arith.cmpi sge, %23, %cst_0 : tensor<1x64xi64> loc(#loc18)
      %25 = arith.cmpi slt, %23, %cst : tensor<1x64xi64> loc(#loc19)
      %26 = arith.andi %24, %25 : tensor<1x64xi1> loc(#loc20)
      %27 = arith.xori %14, %cst_5 : tensor<1x64xi1> loc(#loc21)
      %28 = arith.ori %26, %27 : tensor<1x64xi1> loc(#loc22)
      tt.assert %28, "index out of bounds: 0 <= tmp5 < 4" : tensor<1x64xi1> loc(#loc23)
      %29 = arith.muli %16, %cst_2 : tensor<1x64xi32> loc(#loc24)
      %30 = arith.extsi %29 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc25)
      %31 = arith.addi %23, %30 : tensor<1x64xi64> loc(#loc25)
      %32 = tt.addptr %4, %31 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc6)
      %33 = tt.load %32, %14, %cst_4 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc26)
      %34 = arith.subf %33, %18 : tensor<1x64xf32> loc(#loc27)
      %35 = arith.addf %18, %34 : tensor<1x64xf32> loc(#loc28)
      %36 = arith.mulf %34, %34 : tensor<1x64xf32> loc(#loc29)
      %37 = arith.addf %arg7, %36 : tensor<1x64xf32> loc(#loc30)
      %38 = arith.select %14, %37, %arg7 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc31)
      %39 = tt.addptr %5, %13 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc7)
      tt.store %39, %35, %14 : tensor<1x64x!tt.ptr<f32>> loc(#loc32)
      scf.yield %38 : tensor<1x64xf32> loc(#loc33)
    } loc(#loc8)
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc35)), %arg7: f32 loc(callsite(#loc1 at #loc35))):
      %12 = arith.addf %arg6, %arg7 : f32 loc(#loc46)
      tt.reduce.return %12 : f32 loc(#loc43)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc43)
    %8 = tt.expand_dims %7 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc37)
    %9 = arith.divf %8, %cst_1 : tensor<1x1xf32> loc(#loc38)
    gpu.barrier loc(#loc39)
    %10 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc40)
    %11 = tt.splat %10 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc40)
    tt.store %11, %9 : tensor<1x1x!tt.ptr<f32>> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":25:25)
#loc3 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":25:33)
#loc4 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:34)
#loc5 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:34)
#loc6 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:34)
#loc7 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:29)
#loc8 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":27:36)
#loc9 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":28:27)
#loc10 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":29:25)
#loc11 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":31:23)
#loc12 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":32:23)
#loc13 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":33:39)
#loc14 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":34:39)
#loc15 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":36:22)
#loc16 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":37:22)
#loc17 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":38:36)
#loc18 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:32)
#loc19 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:48)
#loc20 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:41)
#loc21 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:56)
#loc22 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:54)
#loc23 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":39:64)
#loc24 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:43)
#loc25 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:41)
#loc26 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":40:48)
#loc27 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":41:22)
#loc28 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":42:22)
#loc29 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":43:23)
#loc30 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":45:25)
#loc31 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":46:40)
#loc32 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:75)
#loc33 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":47:8)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc37 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":48:30)
#loc38 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":50:20)
#loc39 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":51:4)
#loc40 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:28)
#loc41 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:71)
#loc42 = loc("inductor_cache/yn/cyns7jigxa6pguszge7lxyu3lfxthamzbmpiasuzlokerwgr5zyb.py":52:4)
#loc43 = loc(callsite(#loc34 at #loc35))
#loc45 = loc(callsite(#loc36 at #loc34))
#loc46 = loc(callsite(#loc45 at #loc35))
