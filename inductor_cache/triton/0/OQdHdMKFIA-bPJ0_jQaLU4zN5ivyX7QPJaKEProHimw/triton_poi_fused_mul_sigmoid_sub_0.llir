; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sigmoid_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = srem i32 %15, 4, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %16) #1, !dbg !17
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !17
  %23 = bitcast i32 %21 to float, !dbg !17
  %24 = bitcast i32 %22 to float, !dbg !17
  %25 = sext i32 %17 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %16) #1, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #1, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %36 = bitcast i32 %34 to float, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #1, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #1, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %48 = bitcast i32 %46 to float, !dbg !25
  %49 = bitcast i32 %47 to float, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %16) #1, !dbg !27
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %54 = bitcast i32 %52 to float, !dbg !27
  %55 = bitcast i32 %53 to float, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !28
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %56, i1 %16) #1, !dbg !29
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !29
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !29
  %60 = bitcast i32 %58 to float, !dbg !29
  %61 = bitcast i32 %59 to float, !dbg !29
  %62 = fadd float %23, %30, !dbg !30
  %63 = fadd float %24, %31, !dbg !30
  %64 = fsub float 0.000000e+00, %62, !dbg !31
  %65 = fsub float 0.000000e+00, %63, !dbg !31
  %66 = fmul float %64, 0x3FF7154760000000, !dbg !35
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #1, !dbg !35
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !35
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !35
  %70 = fadd float %67, 1.000000e+00, !dbg !36
  %71 = fadd float %69, 1.000000e+00, !dbg !36
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #1, !dbg !37
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #1, !dbg !37
  %74 = fadd float %36, %42, !dbg !38
  %75 = fadd float %37, %43, !dbg !38
  %76 = fsub float 0.000000e+00, %74, !dbg !39
  %77 = fsub float 0.000000e+00, %75, !dbg !39
  %78 = fmul float %76, 0x3FF7154760000000, !dbg !41
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #1, !dbg !41
  %80 = fmul float %77, 0x3FF7154760000000, !dbg !41
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #1, !dbg !41
  %82 = fadd float %79, 1.000000e+00, !dbg !42
  %83 = fadd float %81, 1.000000e+00, !dbg !42
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !43
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !43
  %86 = fadd float %48, %54, !dbg !44
  %87 = fadd float %49, %55, !dbg !44
  %88 = fsub float 0.000000e+00, %86, !dbg !45
  %89 = fsub float 0.000000e+00, %87, !dbg !45
  %90 = fmul float %88, 0x3FF7154760000000, !dbg !47
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !47
  %92 = fmul float %89, 0x3FF7154760000000, !dbg !47
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #1, !dbg !47
  %94 = fadd float %91, 1.000000e+00, !dbg !48
  %95 = fadd float %93, 1.000000e+00, !dbg !48
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %94) #1, !dbg !49
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %95) #1, !dbg !49
  %98 = fsub float %72, %84, !dbg !50
  %99 = fsub float %73, %85, !dbg !50
  %100 = fmul float %98, %96, !dbg !51
  %101 = fmul float %99, %97, !dbg !51
  %102 = fmul float %100, %60, !dbg !52
  %103 = fmul float %101, %61, !dbg !52
  %104 = bitcast float %72 to i32, !dbg !53
  %105 = bitcast float %73 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %19, i1 %16) #1, !dbg !53
  %106 = bitcast float %84 to i32, !dbg !54
  %107 = bitcast float %85 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %32, i1 %16) #1, !dbg !54
  %108 = bitcast float %96 to i32, !dbg !55
  %109 = bitcast float %97 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %108, i32 %109, ptr addrspace(1) %44, i1 %16) #1, !dbg !55
  %110 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !56
  %111 = bitcast float %102 to i32, !dbg !57
  %112 = bitcast float %103 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %111, i32 %112, ptr addrspace(1) %110, i1 %16) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxsineycs7rbpmkzfmpqz63zhme7vpuiimhoj4jedc73h7mfjwui.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_poi_fused_mul_sigmoid_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sigmoid_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sigmoid_sub_0", linkageName: "triton_poi_fused_mul_sigmoid_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 34, scope: !7)
!25 = !DILocation(line: 30, column: 39, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 34, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !40)
!40 = !DILocation(line: 36, column: 22, scope: !7)
!41 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !40)
!42 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !40)
!43 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !40)
!44 = !DILocation(line: 37, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !46)
!46 = !DILocation(line: 38, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !46)
!50 = !DILocation(line: 39, column: 19, scope: !7)
!51 = !DILocation(line: 40, column: 20, scope: !7)
!52 = !DILocation(line: 41, column: 20, scope: !7)
!53 = !DILocation(line: 42, column: 39, scope: !7)
!54 = !DILocation(line: 43, column: 39, scope: !7)
!55 = !DILocation(line: 44, column: 40, scope: !7)
!56 = !DILocation(line: 45, column: 25, scope: !7)
!57 = !DILocation(line: 45, column: 37, scope: !7)
!58 = !DILocation(line: 45, column: 4, scope: !7)
