; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = lshr i32 %14, 4, !dbg !12
  %18 = and i32 %17, 15, !dbg !12
  %19 = or disjoint i32 %18, 16, !dbg !12
  %20 = or disjoint i32 %18, 32, !dbg !12
  %21 = or disjoint i32 %18, 48, !dbg !12
  %22 = or disjoint i32 %18, 64, !dbg !12
  %23 = or disjoint i32 %18, 80, !dbg !12
  %24 = or disjoint i32 %18, 96, !dbg !12
  %25 = or disjoint i32 %18, 112, !dbg !12
  %26 = or disjoint i32 %18, 128, !dbg !12
  %27 = or disjoint i32 %18, 144, !dbg !12
  %28 = or disjoint i32 %18, 160, !dbg !12
  %29 = or disjoint i32 %18, 176, !dbg !12
  %30 = or disjoint i32 %18, 192, !dbg !12
  %31 = or disjoint i32 %18, 208, !dbg !12
  %32 = or disjoint i32 %18, 224, !dbg !12
  %33 = or disjoint i32 %18, 240, !dbg !12
  %34 = and i32 %14, 15, !dbg !12
  %35 = and i32 %14, 255, !dbg !12
  %36 = or disjoint i32 %13, %16, !dbg !13
  %37 = or disjoint i32 %13, %18, !dbg !13
  %38 = or disjoint i32 %13, %19, !dbg !13
  %39 = or disjoint i32 %13, %20, !dbg !13
  %40 = or disjoint i32 %13, %21, !dbg !13
  %41 = or disjoint i32 %13, %22, !dbg !13
  %42 = or disjoint i32 %13, %23, !dbg !13
  %43 = or disjoint i32 %13, %24, !dbg !13
  %44 = or disjoint i32 %13, %25, !dbg !13
  %45 = or disjoint i32 %13, %26, !dbg !13
  %46 = or disjoint i32 %13, %27, !dbg !13
  %47 = or disjoint i32 %13, %28, !dbg !13
  %48 = or disjoint i32 %13, %29, !dbg !13
  %49 = or disjoint i32 %13, %30, !dbg !13
  %50 = or disjoint i32 %13, %31, !dbg !13
  %51 = or disjoint i32 %13, %32, !dbg !13
  %52 = or disjoint i32 %13, %33, !dbg !13
  %53 = or disjoint i32 %13, %35, !dbg !13
  %54 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %55 = shl i32 %54, 4, !dbg !15
  %56 = lshr i32 %14, 6, !dbg !16
  %.lobit2 = and i32 %56, 1, !dbg !16
  %57 = lshr i32 %14, 6, !dbg !16
  %58 = and i32 %57, 2, !dbg !16
  %59 = or disjoint i32 %.lobit2, %58, !dbg !16
  %60 = or disjoint i32 %55, %34, !dbg !17
  %61 = or disjoint i32 %55, %59, !dbg !17
  %62 = or disjoint i32 %61, 4, !dbg !17
  %63 = or disjoint i32 %61, 8, !dbg !17
  %64 = or disjoint i32 %61, 12, !dbg !17
  %65 = icmp slt i32 %60, 16, !dbg !18
  %66 = icmp slt i32 %61, 16, !dbg !18
  %67 = icmp slt i32 %62, 16, !dbg !18
  %68 = icmp slt i32 %63, 16, !dbg !18
  %69 = icmp slt i32 %64, 16, !dbg !18
  %.frozen = freeze i32 %60, !dbg !19
  %70 = sdiv i32 %.frozen, 4, !dbg !19
  %71 = mul i32 %70, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %71, !dbg !20
  %.frozen50 = freeze i32 %36, !dbg !21
  %72 = sdiv i32 %.frozen50, 256, !dbg !21
  %73 = mul i32 %72, 256, !dbg !22
  %.decomposed51 = sub i32 %.frozen50, %73, !dbg !22
  %74 = srem i32 %53, 256, !dbg !22
  %75 = sext i32 %70 to i64, !dbg !23
  %76 = getelementptr i64, ptr addrspace(1) %1, i64 %75, !dbg !23
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 %65) #2, !dbg !24
  %78 = sext i32 %.decomposed to i64, !dbg !25
  %79 = getelementptr i64, ptr addrspace(1) %2, i64 %78, !dbg !25
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %79, i1 %65) #2, !dbg !26
  %81 = getelementptr i64, ptr addrspace(1) %4, i64 %78, !dbg !27
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %81, i1 %65) #2, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %78, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %65) #2, !dbg !30
  %85 = getelementptr i64, ptr addrspace(1) %6, i64 %75, !dbg !31
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %85, i1 %65) #2, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %75, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %65) #2, !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = shl i32 %61, 8, !dbg !35
  %91 = shl i32 %62, 8, !dbg !35
  %92 = shl i32 %63, 8, !dbg !35
  %93 = shl i32 %64, 8, !dbg !35
  %94 = shl i32 %72, 12, !dbg !36
  %95 = add i32 %94, %.decomposed51, !dbg !37
  %96 = add i32 %95, %90, !dbg !38
  %97 = add i32 %95, %91, !dbg !38
  %98 = add i32 %95, %92, !dbg !38
  %99 = add i32 %95, %93, !dbg !38
  %100 = sext i32 %96 to i64, !dbg !39
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !39
  %102 = sext i32 %97 to i64, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !39
  %104 = sext i32 %98 to i64, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !39
  %106 = sext i32 %99 to i64, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !39
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %66) #2, !dbg !40
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !40
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !40
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !40
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !40
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %67) #2, !dbg !40
  %114 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !40
  %115 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !40
  %116 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !40
  %117 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !40
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %68) #2, !dbg !40
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !40
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !40
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !40
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !40
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %69) #2, !dbg !40
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !40
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !40
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !40
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !40
  %128 = shl i32 %14, 6, !dbg !40
  %129 = and i32 %128, 4032, !dbg !40
  %130 = or disjoint i32 %59, %129, !dbg !40
  %131 = lshr exact i32 %129, 2, !dbg !40
  %132 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %131, !dbg !40
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %130, !dbg !40
  %134 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !40
  %135 = or disjoint i32 %130, 16, !dbg !40
  %136 = lshr i32 %135, 4, !dbg !40
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %136, !dbg !40
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %135, !dbg !40
  %139 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !40
  %140 = or disjoint i32 %130, 32, !dbg !40
  %141 = lshr i32 %140, 4, !dbg !40
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !40
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %140, !dbg !40
  %144 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !40
  %145 = or disjoint i32 %130, 48, !dbg !40
  %146 = lshr i32 %145, 4, !dbg !40
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !40
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %145, !dbg !40
  %149 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !40
  %150 = or disjoint i32 %130, 4, !dbg !40
  %151 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %150, !dbg !40
  %152 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !40
  %153 = or disjoint i32 %130, 20, !dbg !40
  %154 = lshr i32 %153, 4, !dbg !40
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !40
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !40
  %157 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !40
  %158 = or disjoint i32 %130, 36, !dbg !40
  %159 = lshr i32 %158, 4, !dbg !40
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !40
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !40
  %162 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !40
  %163 = or disjoint i32 %130, 52, !dbg !40
  %164 = lshr i32 %163, 4, !dbg !40
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !40
  %166 = getelementptr inbounds float, ptr addrspace(3) %165, i32 %163, !dbg !40
  %167 = insertelement <1 x i32> poison, i32 %117, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !40
  %168 = or disjoint i32 %130, 8, !dbg !40
  %169 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %168, !dbg !40
  %170 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !40
  %171 = or disjoint i32 %130, 24, !dbg !40
  %172 = lshr i32 %171, 4, !dbg !40
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %172, !dbg !40
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %171, !dbg !40
  %175 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !40
  %176 = or disjoint i32 %130, 40, !dbg !40
  %177 = lshr i32 %176, 4, !dbg !40
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !40
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !40
  %180 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !40
  %181 = or disjoint i32 %130, 56, !dbg !40
  %182 = lshr i32 %181, 4, !dbg !40
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !40
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %181, !dbg !40
  %185 = insertelement <1 x i32> poison, i32 %122, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !40
  %186 = or disjoint i32 %130, 12, !dbg !40
  %187 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %186, !dbg !40
  %188 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !40
  %189 = or disjoint i32 %130, 28, !dbg !40
  %190 = lshr i32 %189, 4, !dbg !40
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !40
  %192 = getelementptr inbounds float, ptr addrspace(3) %191, i32 %189, !dbg !40
  %193 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !40
  %194 = or disjoint i32 %130, 44, !dbg !40
  %195 = lshr i32 %194, 4, !dbg !40
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %195, !dbg !40
  %197 = getelementptr inbounds float, ptr addrspace(3) %196, i32 %194, !dbg !40
  %198 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !40
  %199 = or disjoint i32 %130, 60, !dbg !40
  %200 = lshr i32 %199, 4, !dbg !40
  %201 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %200, !dbg !40
  %202 = getelementptr inbounds float, ptr addrspace(3) %201, i32 %199, !dbg !40
  %203 = insertelement <1 x i32> poison, i32 %127, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %204 = lshr i32 %35, 4, !dbg !40
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %204, !dbg !40
  %206 = getelementptr inbounds float, ptr addrspace(3) %205, i32 %35, !dbg !40
  %207 = load float, ptr addrspace(3) %206, align 4, !dbg !40
  %208 = or disjoint i32 %35, 256, !dbg !40
  %209 = lshr i32 %208, 4, !dbg !40
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !40
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !40
  %212 = load float, ptr addrspace(3) %211, align 4, !dbg !40
  %213 = or disjoint i32 %35, 512, !dbg !40
  %214 = lshr i32 %213, 4, !dbg !40
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %214, !dbg !40
  %216 = getelementptr inbounds float, ptr addrspace(3) %215, i32 %213, !dbg !40
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !40
  %218 = or disjoint i32 %35, 768, !dbg !40
  %219 = lshr i32 %218, 4, !dbg !40
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %219, !dbg !40
  %221 = getelementptr inbounds float, ptr addrspace(3) %220, i32 %218, !dbg !40
  %222 = load float, ptr addrspace(3) %221, align 4, !dbg !40
  %223 = or disjoint i32 %35, 1024, !dbg !40
  %224 = lshr i32 %223, 4, !dbg !40
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !40
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %223, !dbg !40
  %227 = load float, ptr addrspace(3) %226, align 4, !dbg !40
  %228 = or disjoint i32 %35, 1280, !dbg !40
  %229 = lshr i32 %228, 4, !dbg !40
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !40
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228, !dbg !40
  %232 = load float, ptr addrspace(3) %231, align 4, !dbg !40
  %233 = or disjoint i32 %35, 1536, !dbg !40
  %234 = lshr i32 %233, 4, !dbg !40
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !40
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !40
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !40
  %238 = or disjoint i32 %35, 1792, !dbg !40
  %239 = lshr i32 %238, 4, !dbg !40
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !40
  %241 = getelementptr inbounds float, ptr addrspace(3) %240, i32 %238, !dbg !40
  %242 = load float, ptr addrspace(3) %241, align 4, !dbg !40
  %243 = or disjoint i32 %35, 2048, !dbg !40
  %244 = lshr i32 %243, 4, !dbg !40
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !40
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %243, !dbg !40
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !40
  %248 = or disjoint i32 %35, 2304, !dbg !40
  %249 = lshr i32 %248, 4, !dbg !40
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !40
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !40
  %252 = load float, ptr addrspace(3) %251, align 4, !dbg !40
  %253 = or disjoint i32 %35, 2560, !dbg !40
  %254 = lshr i32 %253, 4, !dbg !40
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !40
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !40
  %257 = load float, ptr addrspace(3) %256, align 4, !dbg !40
  %258 = or disjoint i32 %35, 2816, !dbg !40
  %259 = lshr i32 %258, 4, !dbg !40
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !40
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !40
  %262 = load float, ptr addrspace(3) %261, align 4, !dbg !40
  %263 = or disjoint i32 %35, 3072, !dbg !40
  %264 = lshr i32 %263, 4, !dbg !40
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !40
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !40
  %267 = load float, ptr addrspace(3) %266, align 4, !dbg !40
  %268 = or disjoint i32 %35, 3328, !dbg !40
  %269 = lshr i32 %268, 4, !dbg !40
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !40
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !40
  %272 = load float, ptr addrspace(3) %271, align 4, !dbg !40
  %273 = or disjoint i32 %35, 3584, !dbg !40
  %274 = lshr i32 %273, 4, !dbg !40
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !40
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !40
  %277 = load float, ptr addrspace(3) %276, align 4, !dbg !40
  %278 = or disjoint i32 %35, 3840, !dbg !40
  %279 = lshr i32 %278, 4, !dbg !40
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !40
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %278, !dbg !40
  %282 = load float, ptr addrspace(3) %281, align 4, !dbg !40
  %283 = sext i32 %74 to i64, !dbg !41
  %284 = getelementptr float, ptr addrspace(1) %8, i64 %283, !dbg !41
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #2, !dbg !42
  %286 = lshr i64 %77, 62, !dbg !43
  %287 = and i64 %286, 2, !dbg !43
  %288 = add i64 %287, %77, !dbg !43
  %289 = lshr i64 %80, 62, !dbg !44
  %290 = and i64 %289, 2, !dbg !44
  %291 = shl i64 %288, 1, !dbg !45
  %292 = shl i32 %37, 2, !dbg !46
  %293 = shl i32 %38, 2, !dbg !46
  %294 = shl i32 %39, 2, !dbg !46
  %295 = shl i32 %40, 2, !dbg !46
  %296 = shl i32 %41, 2, !dbg !46
  %297 = shl i32 %42, 2, !dbg !46
  %298 = shl i32 %43, 2, !dbg !46
  %299 = shl i32 %44, 2, !dbg !46
  %300 = shl i32 %45, 2, !dbg !46
  %301 = shl i32 %46, 2, !dbg !46
  %302 = shl i32 %47, 2, !dbg !46
  %303 = shl i32 %48, 2, !dbg !46
  %304 = shl i32 %49, 2, !dbg !46
  %305 = shl i32 %50, 2, !dbg !46
  %306 = shl i32 %51, 2, !dbg !46
  %307 = shl i32 %52, 2, !dbg !46
  %308 = sext i32 %292 to i64, !dbg !47
  %309 = sext i32 %293 to i64, !dbg !47
  %310 = sext i32 %294 to i64, !dbg !47
  %311 = sext i32 %295 to i64, !dbg !47
  %312 = sext i32 %296 to i64, !dbg !47
  %313 = sext i32 %297 to i64, !dbg !47
  %314 = sext i32 %298 to i64, !dbg !47
  %315 = sext i32 %299 to i64, !dbg !47
  %316 = sext i32 %300 to i64, !dbg !47
  %317 = sext i32 %301 to i64, !dbg !47
  %318 = sext i32 %302 to i64, !dbg !47
  %319 = sext i32 %303 to i64, !dbg !47
  %320 = sext i32 %304 to i64, !dbg !47
  %321 = sext i32 %305 to i64, !dbg !47
  %322 = sext i32 %306 to i64, !dbg !47
  %323 = sext i32 %307 to i64, !dbg !47
  %324 = getelementptr float, ptr addrspace(1) %3, i64 %290, !dbg !48
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %80, !dbg !48
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %291, !dbg !48
  %327 = getelementptr float, ptr addrspace(1) %326, i64 %308, !dbg !48
  %328 = getelementptr float, ptr addrspace(1) %326, i64 %309, !dbg !48
  %329 = getelementptr float, ptr addrspace(1) %326, i64 %310, !dbg !48
  %330 = getelementptr float, ptr addrspace(1) %326, i64 %311, !dbg !48
  %331 = getelementptr float, ptr addrspace(1) %326, i64 %312, !dbg !48
  %332 = getelementptr float, ptr addrspace(1) %326, i64 %313, !dbg !48
  %333 = getelementptr float, ptr addrspace(1) %326, i64 %314, !dbg !48
  %334 = getelementptr float, ptr addrspace(1) %326, i64 %315, !dbg !48
  %335 = getelementptr float, ptr addrspace(1) %326, i64 %316, !dbg !48
  %336 = getelementptr float, ptr addrspace(1) %326, i64 %317, !dbg !48
  %337 = getelementptr float, ptr addrspace(1) %326, i64 %318, !dbg !48
  %338 = getelementptr float, ptr addrspace(1) %326, i64 %319, !dbg !48
  %339 = getelementptr float, ptr addrspace(1) %326, i64 %320, !dbg !48
  %340 = getelementptr float, ptr addrspace(1) %326, i64 %321, !dbg !48
  %341 = getelementptr float, ptr addrspace(1) %326, i64 %322, !dbg !48
  %342 = getelementptr float, ptr addrspace(1) %326, i64 %323, !dbg !48
  %343 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %65) #2, !dbg !49
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 %65) #2, !dbg !49
  %345 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %65) #2, !dbg !49
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %330, i1 %65) #2, !dbg !49
  %347 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %65) #2, !dbg !49
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %332, i1 %65) #2, !dbg !49
  %349 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %65) #2, !dbg !49
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %334, i1 %65) #2, !dbg !49
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %65) #2, !dbg !49
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %336, i1 %65) #2, !dbg !49
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %65) #2, !dbg !49
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %338, i1 %65) #2, !dbg !49
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %65) #2, !dbg !49
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %340, i1 %65) #2, !dbg !49
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %65) #2, !dbg !49
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %342, i1 %65) #2, !dbg !49
  %359 = lshr i64 %82, 62, !dbg !50
  %360 = and i64 %359, 2, !dbg !50
  %361 = getelementptr float, ptr addrspace(1) %3, i64 %360, !dbg !51
  %362 = getelementptr float, ptr addrspace(1) %361, i64 %82, !dbg !51
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %291, !dbg !51
  %364 = getelementptr float, ptr addrspace(1) %363, i64 %308, !dbg !51
  %365 = getelementptr float, ptr addrspace(1) %363, i64 %309, !dbg !51
  %366 = getelementptr float, ptr addrspace(1) %363, i64 %310, !dbg !51
  %367 = getelementptr float, ptr addrspace(1) %363, i64 %311, !dbg !51
  %368 = getelementptr float, ptr addrspace(1) %363, i64 %312, !dbg !51
  %369 = getelementptr float, ptr addrspace(1) %363, i64 %313, !dbg !51
  %370 = getelementptr float, ptr addrspace(1) %363, i64 %314, !dbg !51
  %371 = getelementptr float, ptr addrspace(1) %363, i64 %315, !dbg !51
  %372 = getelementptr float, ptr addrspace(1) %363, i64 %316, !dbg !51
  %373 = getelementptr float, ptr addrspace(1) %363, i64 %317, !dbg !51
  %374 = getelementptr float, ptr addrspace(1) %363, i64 %318, !dbg !51
  %375 = getelementptr float, ptr addrspace(1) %363, i64 %319, !dbg !51
  %376 = getelementptr float, ptr addrspace(1) %363, i64 %320, !dbg !51
  %377 = getelementptr float, ptr addrspace(1) %363, i64 %321, !dbg !51
  %378 = getelementptr float, ptr addrspace(1) %363, i64 %322, !dbg !51
  %379 = getelementptr float, ptr addrspace(1) %363, i64 %323, !dbg !51
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 %65) #2, !dbg !52
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 %65) #2, !dbg !52
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 %65) #2, !dbg !52
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 %65) #2, !dbg !52
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 %65) #2, !dbg !52
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %369, i1 %65) #2, !dbg !52
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %370, i1 %65) #2, !dbg !52
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %371, i1 %65) #2, !dbg !52
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %372, i1 %65) #2, !dbg !52
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %373, i1 %65) #2, !dbg !52
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %374, i1 %65) #2, !dbg !52
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %375, i1 %65) #2, !dbg !52
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %376, i1 %65) #2, !dbg !52
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %377, i1 %65) #2, !dbg !52
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %378, i1 %65) #2, !dbg !52
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %379, i1 %65) #2, !dbg !52
  %396 = lshr i64 %86, 62, !dbg !53
  %397 = and i64 %396, 2, !dbg !53
  %398 = add i64 %397, %86, !dbg !53
  %399 = shl i64 %398, 1, !dbg !54
  %400 = getelementptr float, ptr addrspace(1) %325, i64 %399, !dbg !55
  %401 = getelementptr float, ptr addrspace(1) %400, i64 %308, !dbg !55
  %402 = getelementptr float, ptr addrspace(1) %400, i64 %309, !dbg !55
  %403 = getelementptr float, ptr addrspace(1) %400, i64 %310, !dbg !55
  %404 = getelementptr float, ptr addrspace(1) %400, i64 %311, !dbg !55
  %405 = getelementptr float, ptr addrspace(1) %400, i64 %312, !dbg !55
  %406 = getelementptr float, ptr addrspace(1) %400, i64 %313, !dbg !55
  %407 = getelementptr float, ptr addrspace(1) %400, i64 %314, !dbg !55
  %408 = getelementptr float, ptr addrspace(1) %400, i64 %315, !dbg !55
  %409 = getelementptr float, ptr addrspace(1) %400, i64 %316, !dbg !55
  %410 = getelementptr float, ptr addrspace(1) %400, i64 %317, !dbg !55
  %411 = getelementptr float, ptr addrspace(1) %400, i64 %318, !dbg !55
  %412 = getelementptr float, ptr addrspace(1) %400, i64 %319, !dbg !55
  %413 = getelementptr float, ptr addrspace(1) %400, i64 %320, !dbg !55
  %414 = getelementptr float, ptr addrspace(1) %400, i64 %321, !dbg !55
  %415 = getelementptr float, ptr addrspace(1) %400, i64 %322, !dbg !55
  %416 = getelementptr float, ptr addrspace(1) %400, i64 %323, !dbg !55
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 %65) #2, !dbg !56
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %402, i1 %65) #2, !dbg !56
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 %65) #2, !dbg !56
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %404, i1 %65) #2, !dbg !56
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 %65) #2, !dbg !56
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %406, i1 %65) #2, !dbg !56
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 %65) #2, !dbg !56
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 %65) #2, !dbg !56
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 %65) #2, !dbg !56
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %410, i1 %65) #2, !dbg !56
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 %65) #2, !dbg !56
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %412, i1 %65) #2, !dbg !56
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 %65) #2, !dbg !56
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %414, i1 %65) #2, !dbg !56
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %415, i1 %65) #2, !dbg !56
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %416, i1 %65) #2, !dbg !56
  %433 = getelementptr float, ptr addrspace(1) %362, i64 %399, !dbg !57
  %434 = getelementptr float, ptr addrspace(1) %433, i64 %308, !dbg !57
  %435 = getelementptr float, ptr addrspace(1) %433, i64 %309, !dbg !57
  %436 = getelementptr float, ptr addrspace(1) %433, i64 %310, !dbg !57
  %437 = getelementptr float, ptr addrspace(1) %433, i64 %311, !dbg !57
  %438 = getelementptr float, ptr addrspace(1) %433, i64 %312, !dbg !57
  %439 = getelementptr float, ptr addrspace(1) %433, i64 %313, !dbg !57
  %440 = getelementptr float, ptr addrspace(1) %433, i64 %314, !dbg !57
  %441 = getelementptr float, ptr addrspace(1) %433, i64 %315, !dbg !57
  %442 = getelementptr float, ptr addrspace(1) %433, i64 %316, !dbg !57
  %443 = getelementptr float, ptr addrspace(1) %433, i64 %317, !dbg !57
  %444 = getelementptr float, ptr addrspace(1) %433, i64 %318, !dbg !57
  %445 = getelementptr float, ptr addrspace(1) %433, i64 %319, !dbg !57
  %446 = getelementptr float, ptr addrspace(1) %433, i64 %320, !dbg !57
  %447 = getelementptr float, ptr addrspace(1) %433, i64 %321, !dbg !57
  %448 = getelementptr float, ptr addrspace(1) %433, i64 %322, !dbg !57
  %449 = getelementptr float, ptr addrspace(1) %433, i64 %323, !dbg !57
  %450 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %434, i1 %65) #2, !dbg !58
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %435, i1 %65) #2, !dbg !58
  %452 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %436, i1 %65) #2, !dbg !58
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %437, i1 %65) #2, !dbg !58
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %438, i1 %65) #2, !dbg !58
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %439, i1 %65) #2, !dbg !58
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %440, i1 %65) #2, !dbg !58
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %441, i1 %65) #2, !dbg !58
  %458 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %442, i1 %65) #2, !dbg !58
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %443, i1 %65) #2, !dbg !58
  %460 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %444, i1 %65) #2, !dbg !58
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %445, i1 %65) #2, !dbg !58
  %462 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %446, i1 %65) #2, !dbg !58
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %447, i1 %65) #2, !dbg !58
  %464 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %448, i1 %65) #2, !dbg !58
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %449, i1 %65) #2, !dbg !58
  %466 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !56
  %467 = insertelement <2 x i32> %466, i32 %343, i64 1, !dbg !56
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !56
  %469 = insertelement <2 x i32> poison, i32 %450, i64 0, !dbg !58
  %470 = insertelement <2 x i32> %469, i32 %380, i64 1, !dbg !58
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !58
  %472 = fsub <2 x float> %471, %468, !dbg !59
  %473 = insertelement <2 x i32> poison, i32 %84, i64 0, !dbg !60
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !60
  %475 = shufflevector <2 x float> %474, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !60
  %476 = fmul <2 x float> %472, %475, !dbg !60
  %477 = fadd <2 x float> %476, %468, !dbg !61
  %478 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !56
  %479 = insertelement <2 x i32> %478, i32 %344, i64 1, !dbg !56
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !56
  %481 = insertelement <2 x i32> poison, i32 %451, i64 0, !dbg !58
  %482 = insertelement <2 x i32> %481, i32 %381, i64 1, !dbg !58
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !58
  %484 = fsub <2 x float> %483, %480, !dbg !59
  %485 = fmul <2 x float> %484, %475, !dbg !60
  %486 = fadd <2 x float> %485, %480, !dbg !61
  %487 = insertelement <2 x i32> poison, i32 %419, i64 0, !dbg !56
  %488 = insertelement <2 x i32> %487, i32 %345, i64 1, !dbg !56
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !56
  %490 = insertelement <2 x i32> poison, i32 %452, i64 0, !dbg !58
  %491 = insertelement <2 x i32> %490, i32 %382, i64 1, !dbg !58
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !58
  %493 = fsub <2 x float> %492, %489, !dbg !59
  %494 = fmul <2 x float> %493, %475, !dbg !60
  %495 = fadd <2 x float> %494, %489, !dbg !61
  %496 = insertelement <2 x i32> poison, i32 %420, i64 0, !dbg !56
  %497 = insertelement <2 x i32> %496, i32 %346, i64 1, !dbg !56
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !56
  %499 = insertelement <2 x i32> poison, i32 %453, i64 0, !dbg !58
  %500 = insertelement <2 x i32> %499, i32 %383, i64 1, !dbg !58
  %501 = bitcast <2 x i32> %500 to <2 x float>, !dbg !58
  %502 = fsub <2 x float> %501, %498, !dbg !59
  %503 = fmul <2 x float> %502, %475, !dbg !60
  %504 = fadd <2 x float> %503, %498, !dbg !61
  %505 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !56
  %506 = insertelement <2 x i32> %505, i32 %347, i64 1, !dbg !56
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !56
  %508 = insertelement <2 x i32> poison, i32 %454, i64 0, !dbg !58
  %509 = insertelement <2 x i32> %508, i32 %384, i64 1, !dbg !58
  %510 = bitcast <2 x i32> %509 to <2 x float>, !dbg !58
  %511 = fsub <2 x float> %510, %507, !dbg !59
  %512 = fmul <2 x float> %511, %475, !dbg !60
  %513 = fadd <2 x float> %512, %507, !dbg !61
  %514 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !56
  %515 = insertelement <2 x i32> %514, i32 %348, i64 1, !dbg !56
  %516 = bitcast <2 x i32> %515 to <2 x float>, !dbg !56
  %517 = insertelement <2 x i32> poison, i32 %455, i64 0, !dbg !58
  %518 = insertelement <2 x i32> %517, i32 %385, i64 1, !dbg !58
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !58
  %520 = fsub <2 x float> %519, %516, !dbg !59
  %521 = fmul <2 x float> %520, %475, !dbg !60
  %522 = fadd <2 x float> %521, %516, !dbg !61
  %523 = insertelement <2 x i32> poison, i32 %423, i64 0, !dbg !56
  %524 = insertelement <2 x i32> %523, i32 %349, i64 1, !dbg !56
  %525 = bitcast <2 x i32> %524 to <2 x float>, !dbg !56
  %526 = insertelement <2 x i32> poison, i32 %456, i64 0, !dbg !58
  %527 = insertelement <2 x i32> %526, i32 %386, i64 1, !dbg !58
  %528 = bitcast <2 x i32> %527 to <2 x float>, !dbg !58
  %529 = fsub <2 x float> %528, %525, !dbg !59
  %530 = fmul <2 x float> %529, %475, !dbg !60
  %531 = fadd <2 x float> %530, %525, !dbg !61
  %532 = insertelement <2 x i32> poison, i32 %424, i64 0, !dbg !56
  %533 = insertelement <2 x i32> %532, i32 %350, i64 1, !dbg !56
  %534 = bitcast <2 x i32> %533 to <2 x float>, !dbg !56
  %535 = insertelement <2 x i32> poison, i32 %457, i64 0, !dbg !58
  %536 = insertelement <2 x i32> %535, i32 %387, i64 1, !dbg !58
  %537 = bitcast <2 x i32> %536 to <2 x float>, !dbg !58
  %538 = fsub <2 x float> %537, %534, !dbg !59
  %539 = fmul <2 x float> %538, %475, !dbg !60
  %540 = fadd <2 x float> %539, %534, !dbg !61
  %541 = insertelement <2 x i32> poison, i32 %425, i64 0, !dbg !56
  %542 = insertelement <2 x i32> %541, i32 %351, i64 1, !dbg !56
  %543 = bitcast <2 x i32> %542 to <2 x float>, !dbg !56
  %544 = insertelement <2 x i32> poison, i32 %458, i64 0, !dbg !58
  %545 = insertelement <2 x i32> %544, i32 %388, i64 1, !dbg !58
  %546 = bitcast <2 x i32> %545 to <2 x float>, !dbg !58
  %547 = fsub <2 x float> %546, %543, !dbg !59
  %548 = fmul <2 x float> %547, %475, !dbg !60
  %549 = fadd <2 x float> %548, %543, !dbg !61
  %550 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !56
  %551 = insertelement <2 x i32> %550, i32 %352, i64 1, !dbg !56
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !56
  %553 = insertelement <2 x i32> poison, i32 %459, i64 0, !dbg !58
  %554 = insertelement <2 x i32> %553, i32 %389, i64 1, !dbg !58
  %555 = bitcast <2 x i32> %554 to <2 x float>, !dbg !58
  %556 = fsub <2 x float> %555, %552, !dbg !59
  %557 = fmul <2 x float> %556, %475, !dbg !60
  %558 = fadd <2 x float> %557, %552, !dbg !61
  %559 = insertelement <2 x i32> poison, i32 %427, i64 0, !dbg !56
  %560 = insertelement <2 x i32> %559, i32 %353, i64 1, !dbg !56
  %561 = bitcast <2 x i32> %560 to <2 x float>, !dbg !56
  %562 = insertelement <2 x i32> poison, i32 %460, i64 0, !dbg !58
  %563 = insertelement <2 x i32> %562, i32 %390, i64 1, !dbg !58
  %564 = bitcast <2 x i32> %563 to <2 x float>, !dbg !58
  %565 = fsub <2 x float> %564, %561, !dbg !59
  %566 = fmul <2 x float> %565, %475, !dbg !60
  %567 = fadd <2 x float> %566, %561, !dbg !61
  %568 = insertelement <2 x i32> poison, i32 %428, i64 0, !dbg !56
  %569 = insertelement <2 x i32> %568, i32 %354, i64 1, !dbg !56
  %570 = bitcast <2 x i32> %569 to <2 x float>, !dbg !56
  %571 = insertelement <2 x i32> poison, i32 %461, i64 0, !dbg !58
  %572 = insertelement <2 x i32> %571, i32 %391, i64 1, !dbg !58
  %573 = bitcast <2 x i32> %572 to <2 x float>, !dbg !58
  %574 = fsub <2 x float> %573, %570, !dbg !59
  %575 = fmul <2 x float> %574, %475, !dbg !60
  %576 = fadd <2 x float> %575, %570, !dbg !61
  %577 = insertelement <2 x i32> poison, i32 %429, i64 0, !dbg !56
  %578 = insertelement <2 x i32> %577, i32 %355, i64 1, !dbg !56
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !56
  %580 = insertelement <2 x i32> poison, i32 %462, i64 0, !dbg !58
  %581 = insertelement <2 x i32> %580, i32 %392, i64 1, !dbg !58
  %582 = bitcast <2 x i32> %581 to <2 x float>, !dbg !58
  %583 = fsub <2 x float> %582, %579, !dbg !59
  %584 = fmul <2 x float> %583, %475, !dbg !60
  %585 = fadd <2 x float> %584, %579, !dbg !61
  %586 = insertelement <2 x i32> poison, i32 %430, i64 0, !dbg !56
  %587 = insertelement <2 x i32> %586, i32 %356, i64 1, !dbg !56
  %588 = bitcast <2 x i32> %587 to <2 x float>, !dbg !56
  %589 = insertelement <2 x i32> poison, i32 %463, i64 0, !dbg !58
  %590 = insertelement <2 x i32> %589, i32 %393, i64 1, !dbg !58
  %591 = bitcast <2 x i32> %590 to <2 x float>, !dbg !58
  %592 = fsub <2 x float> %591, %588, !dbg !59
  %593 = fmul <2 x float> %592, %475, !dbg !60
  %594 = fadd <2 x float> %593, %588, !dbg !61
  %595 = insertelement <2 x i32> poison, i32 %431, i64 0, !dbg !56
  %596 = insertelement <2 x i32> %595, i32 %357, i64 1, !dbg !56
  %597 = bitcast <2 x i32> %596 to <2 x float>, !dbg !56
  %598 = insertelement <2 x i32> poison, i32 %464, i64 0, !dbg !58
  %599 = insertelement <2 x i32> %598, i32 %394, i64 1, !dbg !58
  %600 = bitcast <2 x i32> %599 to <2 x float>, !dbg !58
  %601 = fsub <2 x float> %600, %597, !dbg !59
  %602 = fmul <2 x float> %601, %475, !dbg !60
  %603 = fadd <2 x float> %602, %597, !dbg !61
  %604 = insertelement <2 x i32> poison, i32 %432, i64 0, !dbg !56
  %605 = insertelement <2 x i32> %604, i32 %358, i64 1, !dbg !56
  %606 = bitcast <2 x i32> %605 to <2 x float>, !dbg !56
  %607 = insertelement <2 x i32> poison, i32 %465, i64 0, !dbg !58
  %608 = insertelement <2 x i32> %607, i32 %395, i64 1, !dbg !58
  %609 = bitcast <2 x i32> %608 to <2 x float>, !dbg !58
  %610 = fsub <2 x float> %609, %606, !dbg !59
  %611 = fmul <2 x float> %610, %475, !dbg !60
  %612 = fadd <2 x float> %611, %606, !dbg !61
  %613 = extractelement <2 x float> %477, i64 0, !dbg !62
  %614 = extractelement <2 x float> %477, i64 1, !dbg !63
  %615 = fsub float %613, %614, !dbg !62
  %616 = extractelement <2 x float> %486, i64 0, !dbg !62
  %617 = extractelement <2 x float> %486, i64 1, !dbg !63
  %618 = fsub float %616, %617, !dbg !62
  %619 = extractelement <2 x float> %495, i64 0, !dbg !62
  %620 = extractelement <2 x float> %495, i64 1, !dbg !63
  %621 = fsub float %619, %620, !dbg !62
  %622 = extractelement <2 x float> %504, i64 0, !dbg !62
  %623 = extractelement <2 x float> %504, i64 1, !dbg !63
  %624 = fsub float %622, %623, !dbg !62
  %625 = extractelement <2 x float> %513, i64 0, !dbg !62
  %626 = extractelement <2 x float> %513, i64 1, !dbg !63
  %627 = fsub float %625, %626, !dbg !62
  %628 = extractelement <2 x float> %522, i64 0, !dbg !62
  %629 = extractelement <2 x float> %522, i64 1, !dbg !63
  %630 = fsub float %628, %629, !dbg !62
  %631 = extractelement <2 x float> %531, i64 0, !dbg !62
  %632 = extractelement <2 x float> %531, i64 1, !dbg !63
  %633 = fsub float %631, %632, !dbg !62
  %634 = extractelement <2 x float> %540, i64 0, !dbg !62
  %635 = extractelement <2 x float> %540, i64 1, !dbg !63
  %636 = fsub float %634, %635, !dbg !62
  %637 = extractelement <2 x float> %549, i64 0, !dbg !62
  %638 = extractelement <2 x float> %549, i64 1, !dbg !63
  %639 = fsub float %637, %638, !dbg !62
  %640 = extractelement <2 x float> %558, i64 0, !dbg !62
  %641 = extractelement <2 x float> %558, i64 1, !dbg !63
  %642 = fsub float %640, %641, !dbg !62
  %643 = extractelement <2 x float> %567, i64 0, !dbg !62
  %644 = extractelement <2 x float> %567, i64 1, !dbg !63
  %645 = fsub float %643, %644, !dbg !62
  %646 = extractelement <2 x float> %576, i64 0, !dbg !62
  %647 = extractelement <2 x float> %576, i64 1, !dbg !63
  %648 = fsub float %646, %647, !dbg !62
  %649 = extractelement <2 x float> %585, i64 0, !dbg !62
  %650 = extractelement <2 x float> %585, i64 1, !dbg !63
  %651 = fsub float %649, %650, !dbg !62
  %652 = extractelement <2 x float> %594, i64 0, !dbg !62
  %653 = extractelement <2 x float> %594, i64 1, !dbg !63
  %654 = fsub float %652, %653, !dbg !62
  %655 = extractelement <2 x float> %603, i64 0, !dbg !62
  %656 = extractelement <2 x float> %603, i64 1, !dbg !63
  %657 = fsub float %655, %656, !dbg !62
  %658 = extractelement <2 x float> %612, i64 0, !dbg !62
  %659 = extractelement <2 x float> %612, i64 1, !dbg !63
  %660 = fsub float %658, %659, !dbg !62
  %661 = fmul float %615, %89, !dbg !64
  %662 = fmul float %618, %89, !dbg !64
  %663 = fmul float %621, %89, !dbg !64
  %664 = fmul float %624, %89, !dbg !64
  %665 = fmul float %627, %89, !dbg !64
  %666 = fmul float %630, %89, !dbg !64
  %667 = fmul float %633, %89, !dbg !64
  %668 = fmul float %636, %89, !dbg !64
  %669 = fmul float %639, %89, !dbg !64
  %670 = fmul float %642, %89, !dbg !64
  %671 = fmul float %645, %89, !dbg !64
  %672 = fmul float %648, %89, !dbg !64
  %673 = fmul float %651, %89, !dbg !64
  %674 = fmul float %654, %89, !dbg !64
  %675 = fmul float %657, %89, !dbg !64
  %676 = fmul float %660, %89, !dbg !64
  %677 = fadd float %614, %661, !dbg !63
  %678 = fadd float %617, %662, !dbg !63
  %679 = fadd float %620, %663, !dbg !63
  %680 = fadd float %623, %664, !dbg !63
  %681 = fadd float %626, %665, !dbg !63
  %682 = fadd float %629, %666, !dbg !63
  %683 = fadd float %632, %667, !dbg !63
  %684 = fadd float %635, %668, !dbg !63
  %685 = fadd float %638, %669, !dbg !63
  %686 = fadd float %641, %670, !dbg !63
  %687 = fadd float %644, %671, !dbg !63
  %688 = fadd float %647, %672, !dbg !63
  %689 = fadd float %650, %673, !dbg !63
  %690 = fadd float %653, %674, !dbg !63
  %691 = fadd float %656, %675, !dbg !63
  %692 = fadd float %659, %676, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.idx = shl nuw nsw i32 %35, 3, !dbg !65
  %693 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !65
  %694 = insertelement <1 x i32> poison, i32 %285, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %693, <1 x i32> %694, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %.idx4 = shl nuw nsw i32 %18, 3, !dbg !65
  %695 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !65
  %696 = load float, ptr addrspace(3) %695, align 8, !dbg !65
  %.idx5 = shl nuw nsw i32 %19, 3, !dbg !65
  %697 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !65
  %698 = load float, ptr addrspace(3) %697, align 8, !dbg !65
  %.idx6 = shl nuw nsw i32 %20, 3, !dbg !65
  %699 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !65
  %700 = load float, ptr addrspace(3) %699, align 8, !dbg !65
  %.idx7 = shl nuw nsw i32 %21, 3, !dbg !65
  %701 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !65
  %702 = load float, ptr addrspace(3) %701, align 8, !dbg !65
  %.idx8 = shl nuw nsw i32 %22, 3, !dbg !65
  %703 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !65
  %704 = load float, ptr addrspace(3) %703, align 8, !dbg !65
  %.idx9 = shl nuw nsw i32 %23, 3, !dbg !65
  %705 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !65
  %706 = load float, ptr addrspace(3) %705, align 8, !dbg !65
  %.idx10 = shl nuw nsw i32 %24, 3, !dbg !65
  %707 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !65
  %708 = load float, ptr addrspace(3) %707, align 8, !dbg !65
  %.idx11 = shl nuw nsw i32 %25, 3, !dbg !65
  %709 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !65
  %710 = load float, ptr addrspace(3) %709, align 8, !dbg !65
  %.idx12 = shl nuw nsw i32 %26, 3, !dbg !65
  %711 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !65
  %712 = load float, ptr addrspace(3) %711, align 8, !dbg !65
  %.idx13 = shl nuw nsw i32 %27, 3, !dbg !65
  %713 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !65
  %714 = load float, ptr addrspace(3) %713, align 8, !dbg !65
  %.idx14 = shl nuw nsw i32 %28, 3, !dbg !65
  %715 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !65
  %716 = load float, ptr addrspace(3) %715, align 8, !dbg !65
  %.idx15 = shl nuw nsw i32 %29, 3, !dbg !65
  %717 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !65
  %718 = load float, ptr addrspace(3) %717, align 8, !dbg !65
  %.idx16 = shl nuw nsw i32 %30, 3, !dbg !65
  %719 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !65
  %720 = load float, ptr addrspace(3) %719, align 8, !dbg !65
  %.idx17 = shl nuw nsw i32 %31, 3, !dbg !65
  %721 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !65
  %722 = load float, ptr addrspace(3) %721, align 8, !dbg !65
  %.idx18 = shl nuw nsw i32 %32, 3, !dbg !65
  %723 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !65
  %724 = load float, ptr addrspace(3) %723, align 8, !dbg !65
  %.idx19 = shl nuw nsw i32 %33, 3, !dbg !65
  %725 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx19, !dbg !65
  %726 = load float, ptr addrspace(3) %725, align 8, !dbg !65
  %727 = fadd float %207, %696, !dbg !65
  %728 = fadd float %212, %698, !dbg !65
  %729 = fadd float %217, %700, !dbg !65
  %730 = fadd float %222, %702, !dbg !65
  %731 = fadd float %227, %704, !dbg !65
  %732 = fadd float %232, %706, !dbg !65
  %733 = fadd float %237, %708, !dbg !65
  %734 = fadd float %242, %710, !dbg !65
  %735 = fadd float %247, %712, !dbg !65
  %736 = fadd float %252, %714, !dbg !65
  %737 = fadd float %257, %716, !dbg !65
  %738 = fadd float %262, %718, !dbg !65
  %739 = fadd float %267, %720, !dbg !65
  %740 = fadd float %272, %722, !dbg !65
  %741 = fadd float %277, %724, !dbg !65
  %742 = fadd float %282, %726, !dbg !65
  %743 = fadd float %677, %727, !dbg !66
  %744 = fadd float %678, %728, !dbg !66
  %745 = fadd float %679, %729, !dbg !66
  %746 = fadd float %680, %730, !dbg !66
  %747 = fadd float %681, %731, !dbg !66
  %748 = fadd float %682, %732, !dbg !66
  %749 = fadd float %683, %733, !dbg !66
  %750 = fadd float %684, %734, !dbg !66
  %751 = fadd float %685, %735, !dbg !66
  %752 = fadd float %686, %736, !dbg !66
  %753 = fadd float %687, %737, !dbg !66
  %754 = fadd float %688, %738, !dbg !66
  %755 = fadd float %689, %739, !dbg !66
  %756 = fadd float %690, %740, !dbg !66
  %757 = fadd float %691, %741, !dbg !66
  %758 = fadd float %692, %742, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %759 = shl i32 %14, 8, !dbg !68
  %760 = and i32 %759, 3840, !dbg !68
  %761 = or disjoint i32 %18, %760, !dbg !68
  %762 = and i32 %15, 1020, !dbg !68
  %763 = lshr exact i32 %760, 4, !dbg !68
  %764 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %763, !dbg !68
  %765 = getelementptr float, ptr addrspace(3) %764, i32 %761, !dbg !68
  %766 = bitcast float %743 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %765, <1 x i32> %766, i1 true) #2, !dbg !68
  %767 = or disjoint i32 %761, 16, !dbg !68
  %768 = getelementptr float, ptr addrspace(3) %764, i32 %767, !dbg !68
  %769 = bitcast float %744 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %768, <1 x i32> %769, i1 true) #2, !dbg !68
  %770 = or disjoint i32 %761, 32, !dbg !68
  %771 = getelementptr float, ptr addrspace(3) %764, i32 %770, !dbg !68
  %772 = bitcast float %745 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %771, <1 x i32> %772, i1 true) #2, !dbg !68
  %773 = or disjoint i32 %761, 48, !dbg !68
  %774 = getelementptr float, ptr addrspace(3) %764, i32 %773, !dbg !68
  %775 = bitcast float %746 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %774, <1 x i32> %775, i1 true) #2, !dbg !68
  %776 = or disjoint i32 %761, 64, !dbg !68
  %777 = getelementptr float, ptr addrspace(3) %764, i32 %776, !dbg !68
  %778 = bitcast float %747 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %777, <1 x i32> %778, i1 true) #2, !dbg !68
  %779 = or disjoint i32 %761, 80, !dbg !68
  %780 = getelementptr float, ptr addrspace(3) %764, i32 %779, !dbg !68
  %781 = bitcast float %748 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %780, <1 x i32> %781, i1 true) #2, !dbg !68
  %782 = or disjoint i32 %761, 96, !dbg !68
  %783 = getelementptr float, ptr addrspace(3) %764, i32 %782, !dbg !68
  %784 = bitcast float %749 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %783, <1 x i32> %784, i1 true) #2, !dbg !68
  %785 = or disjoint i32 %761, 112, !dbg !68
  %786 = getelementptr float, ptr addrspace(3) %764, i32 %785, !dbg !68
  %787 = bitcast float %750 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %786, <1 x i32> %787, i1 true) #2, !dbg !68
  %788 = or disjoint i32 %761, 128, !dbg !68
  %789 = getelementptr float, ptr addrspace(3) %764, i32 %788, !dbg !68
  %790 = bitcast float %751 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %789, <1 x i32> %790, i1 true) #2, !dbg !68
  %791 = or disjoint i32 %761, 144, !dbg !68
  %792 = getelementptr float, ptr addrspace(3) %764, i32 %791, !dbg !68
  %793 = bitcast float %752 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %792, <1 x i32> %793, i1 true) #2, !dbg !68
  %794 = or disjoint i32 %761, 160, !dbg !68
  %795 = getelementptr float, ptr addrspace(3) %764, i32 %794, !dbg !68
  %796 = bitcast float %753 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %795, <1 x i32> %796, i1 true) #2, !dbg !68
  %797 = or disjoint i32 %761, 176, !dbg !68
  %798 = getelementptr float, ptr addrspace(3) %764, i32 %797, !dbg !68
  %799 = bitcast float %754 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %798, <1 x i32> %799, i1 true) #2, !dbg !68
  %800 = or disjoint i32 %761, 192, !dbg !68
  %801 = getelementptr float, ptr addrspace(3) %764, i32 %800, !dbg !68
  %802 = bitcast float %755 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %801, <1 x i32> %802, i1 true) #2, !dbg !68
  %803 = or disjoint i32 %761, 208, !dbg !68
  %804 = getelementptr float, ptr addrspace(3) %764, i32 %803, !dbg !68
  %805 = bitcast float %756 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %804, <1 x i32> %805, i1 true) #2, !dbg !68
  %806 = or disjoint i32 %761, 224, !dbg !68
  %807 = getelementptr float, ptr addrspace(3) %764, i32 %806, !dbg !68
  %808 = bitcast float %757 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %807, <1 x i32> %808, i1 true) #2, !dbg !68
  %809 = or disjoint i32 %761, 240, !dbg !68
  %810 = getelementptr float, ptr addrspace(3) %764, i32 %809, !dbg !68
  %811 = bitcast float %758 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %810, <1 x i32> %811, i1 true) #2, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %812 = lshr i32 %15, 6, !dbg !68
  %813 = and i32 %812, 12, !dbg !68
  %814 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %813, !dbg !68
  %815 = getelementptr inbounds float, ptr addrspace(3) %814, i32 %762, !dbg !68
  %816 = or disjoint i32 %762, 1024, !dbg !68
  %817 = lshr i32 %816, 6, !dbg !68
  %818 = and i32 %817, 28, !dbg !68
  %819 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %818, !dbg !68
  %820 = getelementptr inbounds float, ptr addrspace(3) %819, i32 %816, !dbg !68
  %821 = load <4 x i32>, ptr addrspace(3) %820, align 16, !dbg !68
  %822 = or disjoint i32 %762, 2048, !dbg !68
  %823 = lshr i32 %822, 6, !dbg !68
  %824 = and i32 %823, 44, !dbg !68
  %825 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %824, !dbg !68
  %826 = getelementptr inbounds float, ptr addrspace(3) %825, i32 %822, !dbg !68
  %827 = load <4 x i32>, ptr addrspace(3) %826, align 16, !dbg !68
  %828 = or disjoint i32 %762, 3072, !dbg !68
  %829 = lshr i32 %828, 6, !dbg !68
  %830 = and i32 %829, 60, !dbg !68
  %831 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %830, !dbg !68
  %832 = getelementptr inbounds float, ptr addrspace(3) %831, i32 %828, !dbg !68
  %833 = load <4 x i32>, ptr addrspace(3) %832, align 16, !dbg !68
  %.extract = load i32, ptr addrspace(3) %815, align 16, !dbg !68
  %834 = getelementptr inbounds i8, ptr addrspace(3) %815, i32 4, !dbg !68
  %.extract35 = load i32, ptr addrspace(3) %834, align 4, !dbg !68
  %835 = getelementptr inbounds i8, ptr addrspace(3) %815, i32 8, !dbg !68
  %.extract36 = load i32, ptr addrspace(3) %835, align 8, !dbg !68
  %836 = getelementptr inbounds i8, ptr addrspace(3) %815, i32 12, !dbg !68
  %.extract37 = load i32, ptr addrspace(3) %836, align 4, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract35, i32 %.extract36, i32 %.extract37, ptr addrspace(1) %101, i1 %66) #2, !dbg !68
  %.extract38 = extractelement <4 x i32> %821, i64 0, !dbg !68
  %.extract39 = extractelement <4 x i32> %821, i64 1, !dbg !68
  %.extract40 = extractelement <4 x i32> %821, i64 2, !dbg !68
  %.extract41 = extractelement <4 x i32> %821, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract38, i32 %.extract39, i32 %.extract40, i32 %.extract41, ptr addrspace(1) %103, i1 %67) #2, !dbg !68
  %.extract42 = extractelement <4 x i32> %827, i64 0, !dbg !68
  %.extract43 = extractelement <4 x i32> %827, i64 1, !dbg !68
  %.extract44 = extractelement <4 x i32> %827, i64 2, !dbg !68
  %.extract45 = extractelement <4 x i32> %827, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract42, i32 %.extract43, i32 %.extract44, i32 %.extract45, ptr addrspace(1) %105, i1 %68) #2, !dbg !68
  %.extract46 = extractelement <4 x i32> %833, i64 0, !dbg !68
  %.extract47 = extractelement <4 x i32> %833, i64 1, !dbg !68
  %.extract48 = extractelement <4 x i32> %833, i64 2, !dbg !68
  %.extract49 = extractelement <4 x i32> %833, i64 3, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract46, i32 %.extract47, i32 %.extract48, i32 %.extract49, ptr addrspace(1) %107, i1 %69) #2, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccfsithsieiev2a7hhnvkmsl2enqrx7zxzanpkavyiw3obs4atrw.py", directory: "inductor_cache/cf")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_24, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 54, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 59, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 48, scope: !7)
!47 = !DILocation(line: 49, column: 46, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 53, scope: !7)
!50 = !DILocation(line: 52, column: 35, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 55, scope: !7)
!53 = !DILocation(line: 59, column: 35, scope: !7)
!54 = !DILocation(line: 60, column: 40, scope: !7)
!55 = !DILocation(line: 60, column: 31, scope: !7)
!56 = !DILocation(line: 60, column: 55, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 56, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 20, scope: !7)
!64 = !DILocation(line: 66, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 4, scope: !7)
!68 = !DILocation(line: 71, column: 59, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
