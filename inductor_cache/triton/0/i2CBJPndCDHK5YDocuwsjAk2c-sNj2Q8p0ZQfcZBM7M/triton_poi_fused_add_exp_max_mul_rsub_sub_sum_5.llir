; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 16, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 4, !dbg !15
  %14 = mul i32 %13, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = shl nsw i32 %13, 2, !dbg !17
  %16 = sext i32 %15 to i64, !dbg !18
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %12) #2, !dbg !19
  %19 = sext i32 %.decomposed to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %12) #2, !dbg !21
  %22 = or disjoint i32 %15, 1, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #2, !dbg !24
  %26 = getelementptr i8, ptr addrspace(1) %20, i64 16, !dbg !25
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %12) #2, !dbg !26
  %28 = or disjoint i32 %15, 2, !dbg !27
  %29 = sext i32 %28 to i64, !dbg !28
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !28
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #2, !dbg !29
  %32 = bitcast i32 %31 to float, !dbg !29
  %33 = add nsw i32 %.decomposed, 8, !dbg !30
  %34 = zext nneg i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !31
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %12) #2, !dbg !32
  %37 = bitcast i32 %36 to float, !dbg !32
  %38 = or disjoint i32 %15, 3, !dbg !33
  %39 = sext i32 %38 to i64, !dbg !34
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !34
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #2, !dbg !35
  %42 = bitcast i32 %41 to float, !dbg !35
  %43 = getelementptr i8, ptr addrspace(1) %20, i64 48, !dbg !36
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %12) #2, !dbg !37
  %45 = bitcast i32 %44 to float, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !38
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %12) #2, !dbg !39
  %48 = shl i32 %13, 4, !dbg !40
  %49 = add nuw i32 %33, %48, !dbg !41
  %50 = sext i32 %49 to i64, !dbg !42
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !42
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %12) #2, !dbg !43
  %53 = sext i32 %11 to i64, !dbg !44
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !44
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %12) #2, !dbg !45
  %56 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !19
  %57 = insertelement <2 x i32> %56, i32 %25, i64 1, !dbg !19
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !19
  %59 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %60 = insertelement <2 x i32> %59, i32 %27, i64 1, !dbg !21
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !21
  %62 = fadd <2 x float> %58, %61, !dbg !46
  %63 = extractelement <2 x float> %62, i64 0, !dbg !47
  %64 = extractelement <2 x float> %62, i64 1, !dbg !48
  %65 = fcmp ogt float %63, %64, !dbg !49
  %66 = fcmp uno float %63, 0.000000e+00, !dbg !53
  %67 = or i1 %66, %65, !dbg !54
  %68 = select i1 %67, float %63, float %64, !dbg !55
  %69 = fadd float %32, %37, !dbg !56
  %70 = fcmp ogt float %68, %69, !dbg !57
  %71 = fcmp uno float %68, 0.000000e+00, !dbg !59
  %72 = or i1 %70, %71, !dbg !60
  %73 = select i1 %72, float %68, float %69, !dbg !61
  %74 = fadd float %42, %45, !dbg !62
  %75 = fcmp ogt float %73, %74, !dbg !63
  %76 = fcmp uno float %73, 0.000000e+00, !dbg !65
  %77 = or i1 %75, %76, !dbg !66
  %78 = select i1 %77, float %73, float %74, !dbg !67
  %79 = fsub float %63, %78, !dbg !47
  %80 = fmul float %79, 0x3FF7154760000000, !dbg !68
  %81 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %80) #2, !dbg !68
  %82 = fsub float %64, %78, !dbg !48
  %83 = fmul float %82, 0x3FF7154760000000, !dbg !69
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #2, !dbg !69
  %85 = fadd float %81, %84, !dbg !70
  %86 = fsub float %69, %78, !dbg !71
  %87 = fmul float %86, 0x3FF7154760000000, !dbg !72
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #2, !dbg !72
  %89 = fadd float %85, %88, !dbg !73
  %90 = fsub float %74, %78, !dbg !74
  %91 = fmul float %90, 0x3FF7154760000000, !dbg !75
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #2, !dbg !75
  %93 = fadd float %89, %92, !dbg !76
  %94 = fcmp olt float %93, 0x3810000000000000, !dbg !77
  %95 = fmul float %93, 0x4160000000000000, !dbg !77
  %.02.i = select i1 %94, float %95, float %93, !dbg !77
  %i.i.0.i = select i1 %94, float -2.300000e+01, float 0.000000e+00, !dbg !77
  %96 = bitcast float %.02.i to i32, !dbg !77
  %97 = add i32 %96, -1059760811, !dbg !77
  %98 = and i32 %97, -8388608, !dbg !77
  %99 = sub i32 %96, %98, !dbg !77
  %100 = bitcast i32 %99 to float, !dbg !77
  %101 = sitofp i32 %98 to float, !dbg !77
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not.i = icmp eq i32 %102, 0, !dbg !77
  %103 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %101, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !77
  %104 = tail call float @llvm.nvvm.fma.rn.f(float %101, float 0x3E80000000000000, float %i.i.0.i) #2, !dbg !77
  %.08.i = select i1 %.not.i, float %104, float %103, !dbg !77
  %105 = fadd float %100, -1.000000e+00, !dbg !77
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not1.i = icmp eq i32 %106, 0, !dbg !77
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %105, float 0x3FC2073EC0000000) #2, !dbg !77
  %108 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %105, float 0x3FC2073EC0000000) #2, !dbg !77
  %.010.i = select i1 %.not1.i, float %108, float %107, !dbg !77
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not2.i = icmp eq i32 %109, 0, !dbg !77
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %105, float 0xBFBF19B980000000) #2, !dbg !77
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %105, float 0xBFBF19B980000000) #2, !dbg !77
  %.011.i = select i1 %.not2.i, float %111, float %110, !dbg !77
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not3.i = icmp eq i32 %112, 0, !dbg !77
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %105, float 0x3FC1E52AA0000000) #2, !dbg !77
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %105, float 0x3FC1E52AA0000000) #2, !dbg !77
  %.012.i = select i1 %.not3.i, float %114, float %113, !dbg !77
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not4.i = icmp eq i32 %115, 0, !dbg !77
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %105, float 0xBFC55B1720000000) #2, !dbg !77
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %105, float 0xBFC55B1720000000) #2, !dbg !77
  %.09.i = select i1 %.not4.i, float %117, float %116, !dbg !77
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not5.i = icmp eq i32 %118, 0, !dbg !77
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %105, float 0x3FC99DA160000000) #2, !dbg !77
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %105, float 0x3FC99DA160000000) #2, !dbg !77
  %.05.i = select i1 %.not5.i, float %120, float %119, !dbg !77
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not6.i = icmp eq i32 %121, 0, !dbg !77
  %122 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %105, float 0xBFCFFFE440000000) #2, !dbg !77
  %123 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %105, float 0xBFCFFFE440000000) #2, !dbg !77
  %.01.i = select i1 %.not6.i, float %123, float %122, !dbg !77
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not7.i = icmp eq i32 %124, 0, !dbg !77
  %125 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %105, float 0x3FD5554F00000000) #2, !dbg !77
  %126 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %105, float 0x3FD5554F00000000) #2, !dbg !77
  %.0.i = select i1 %.not7.i, float %126, float %125, !dbg !77
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not8.i = icmp eq i32 %127, 0, !dbg !77
  %128 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %105, float -5.000000e-01) #2, !dbg !77
  %129 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %105, float -5.000000e-01) #2, !dbg !77
  %.07.i = select i1 %.not8.i, float %129, float %128, !dbg !77
  %130 = fmul float %105, %.07.i, !dbg !77
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not9.i = icmp eq i32 %131, 0, !dbg !77
  %132 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %130, float %105, float %105) #2, !dbg !77
  %133 = tail call float @llvm.nvvm.fma.rn.f(float %130, float %105, float %105) #2, !dbg !77
  %.06.i = select i1 %.not9.i, float %133, float %132, !dbg !77
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not10.i = icmp eq i32 %134, 0, !dbg !77
  %135 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !77
  %136 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #2, !dbg !77
  %.04.i = select i1 %.not10.i, float %136, float %135, !dbg !77
  %137 = icmp ugt i32 %96, 2139095039, !dbg !77
  br i1 %137, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !77

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !77
  %.not11.i = icmp eq i32 %138, 0, !dbg !77
  %139 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !77
  %140 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #2, !dbg !77
  %.03.i = select i1 %.not11.i, float %140, float %139, !dbg !77
  br label %__nv_logf.exit, !dbg !77

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %6 ], !dbg !77
  %141 = bitcast i32 %55 to float, !dbg !45
  %142 = bitcast i32 %52 to float, !dbg !43
  %143 = bitcast i32 %47 to float, !dbg !39
  %144 = and i32 %9, 16, !dbg !12
  %145 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !77
  %r.i.1.i = select i1 %145, float 0xFFF0000000000000, float %r.i.0.i, !dbg !77
  %146 = fadd float %78, %r.i.1.i, !dbg !78
  %147 = fmul float %143, %142, !dbg !79
  %148 = fadd float %147, %146, !dbg !80
  %149 = fmul float %148, %143, !dbg !81
  %150 = fsub float 1.000000e+00, %143, !dbg !82
  %151 = fmul float %150, %141, !dbg !83
  %152 = fadd float %151, %149, !dbg !84
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !85
  %154 = icmp eq i32 %144, 0, !dbg !86
  %155 = bitcast float %152 to i32, !dbg !86
  %156 = and i1 %154, %12, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %153, i1 %156) #2, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3xjajwo6ty5rmos2yqmfharaypog7lxdwl7jbdqraww533ksrpx.py", directory: "inductor_cache/3x")
!4 = !{ptr @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_exp_max_mul_rsub_sub_sum_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_exp_max_mul_rsub_sub_sum_5", linkageName: "triton_poi_fused_add_exp_max_mul_rsub_sub_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 32, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 34, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 39, scope: !7)
!27 = !DILocation(line: 31, column: 34, scope: !7)
!28 = !DILocation(line: 31, column: 30, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 32, column: 34, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 39, scope: !7)
!33 = !DILocation(line: 33, column: 35, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 42, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 41, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 42, scope: !7)
!40 = !DILocation(line: 36, column: 43, scope: !7)
!41 = !DILocation(line: 36, column: 40, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 48, scope: !7)
!44 = !DILocation(line: 37, column: 31, scope: !7)
!45 = !DILocation(line: 37, column: 36, scope: !7)
!46 = !DILocation(line: 38, column: 18, scope: !7)
!47 = !DILocation(line: 45, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 40, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !58)
!58 = !DILocation(line: 42, column: 41, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !58)
!62 = !DILocation(line: 43, column: 20, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !64)
!64 = !DILocation(line: 44, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !64)
!68 = !DILocation(line: 46, column: 24, scope: !7)
!69 = !DILocation(line: 48, column: 24, scope: !7)
!70 = !DILocation(line: 49, column: 20, scope: !7)
!71 = !DILocation(line: 50, column: 19, scope: !7)
!72 = !DILocation(line: 51, column: 24, scope: !7)
!73 = !DILocation(line: 52, column: 20, scope: !7)
!74 = !DILocation(line: 53, column: 20, scope: !7)
!75 = !DILocation(line: 54, column: 24, scope: !7)
!76 = !DILocation(line: 55, column: 20, scope: !7)
!77 = !DILocation(line: 56, column: 24, scope: !7)
!78 = !DILocation(line: 57, column: 20, scope: !7)
!79 = !DILocation(line: 58, column: 20, scope: !7)
!80 = !DILocation(line: 59, column: 20, scope: !7)
!81 = !DILocation(line: 60, column: 20, scope: !7)
!82 = !DILocation(line: 62, column: 20, scope: !7)
!83 = !DILocation(line: 63, column: 20, scope: !7)
!84 = !DILocation(line: 64, column: 20, scope: !7)
!85 = !DILocation(line: 65, column: 28, scope: !7)
!86 = !DILocation(line: 65, column: 40, scope: !7)
!87 = !DILocation(line: 65, column: 4, scope: !7)
