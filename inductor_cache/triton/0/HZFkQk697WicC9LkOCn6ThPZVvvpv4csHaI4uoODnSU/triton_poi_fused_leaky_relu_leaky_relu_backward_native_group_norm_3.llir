; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 256, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = sdiv i32 %14, 1024, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %33 = bitcast i32 %32 to float, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %35 = bitcast i32 %34 to float, !dbg !22
  %36 = sext i32 %16 to i64, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float 1.024000e+03) #3, !dbg !27
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float 1.024000e+03) #3, !dbg !27
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float 1.024000e+03) #3, !dbg !27
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %35, float 1.024000e+03) #3, !dbg !27
  %51 = fadd float %47, 0x3EE4F8B580000000, !dbg !28
  %52 = fadd float %48, 0x3EE4F8B580000000, !dbg !28
  %53 = fadd float %49, 0x3EE4F8B580000000, !dbg !28
  %54 = fadd float %50, 0x3EE4F8B580000000, !dbg !28
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %55, 0, !dbg !29
  br i1 %.not.i, label %58, label %56, !dbg !29

56:                                               ; preds = %8
  %57 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %51), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

58:                                               ; preds = %8
  %59 = tail call float @llvm.nvvm.rsqrt.approx.f(float %51), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %56, %58
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %60, 0, !dbg !29
  br i1 %.not.i1, label %63, label %61, !dbg !29

61:                                               ; preds = %__nv_rsqrtf.exit
  %62 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %52), !dbg !29
  br label %__nv_rsqrtf.exit3, !dbg !29

63:                                               ; preds = %__nv_rsqrtf.exit
  %64 = tail call float @llvm.nvvm.rsqrt.approx.f(float %52), !dbg !29
  br label %__nv_rsqrtf.exit3, !dbg !29

__nv_rsqrtf.exit3:                                ; preds = %61, %63
  %.0.i2 = phi float [ %62, %61 ], [ %64, %63 ], !dbg !29
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i4 = icmp eq i32 %65, 0, !dbg !29
  br i1 %.not.i4, label %68, label %66, !dbg !29

66:                                               ; preds = %__nv_rsqrtf.exit3
  %67 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %53), !dbg !29
  br label %__nv_rsqrtf.exit6, !dbg !29

68:                                               ; preds = %__nv_rsqrtf.exit3
  %69 = tail call float @llvm.nvvm.rsqrt.approx.f(float %53), !dbg !29
  br label %__nv_rsqrtf.exit6, !dbg !29

__nv_rsqrtf.exit6:                                ; preds = %66, %68
  %.0.i5 = phi float [ %67, %66 ], [ %69, %68 ], !dbg !29
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i7 = icmp eq i32 %70, 0, !dbg !29
  br i1 %.not.i7, label %73, label %71, !dbg !29

71:                                               ; preds = %__nv_rsqrtf.exit6
  %72 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %54), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

73:                                               ; preds = %__nv_rsqrtf.exit6
  %74 = tail call float @llvm.nvvm.rsqrt.approx.f(float %54), !dbg !29
  br label %__nv_rsqrtf.exit9, !dbg !29

__nv_rsqrtf.exit9:                                ; preds = %71, %73
  %.0.i8 = phi float [ %72, %71 ], [ %74, %73 ], !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !17
  %76 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !20
  %77 = insertelement <4 x i32> %76, i32 %24, i64 1, !dbg !20
  %78 = insertelement <4 x i32> %77, i32 %25, i64 2, !dbg !20
  %79 = insertelement <4 x i32> %78, i32 %26, i64 3, !dbg !20
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !20
  %81 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !17
  %82 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !17
  %83 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !17
  %84 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !26
  %85 = insertelement <4 x i32> %84, i32 %44, i64 1, !dbg !26
  %86 = insertelement <4 x i32> %85, i32 %45, i64 2, !dbg !26
  %87 = insertelement <4 x i32> %86, i32 %46, i64 3, !dbg !26
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !26
  %89 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !24
  %90 = insertelement <4 x i32> %89, i32 %39, i64 1, !dbg !24
  %91 = insertelement <4 x i32> %90, i32 %40, i64 2, !dbg !24
  %92 = insertelement <4 x i32> %91, i32 %41, i64 3, !dbg !24
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !30
  %95 = getelementptr i1, ptr addrspace(1) %6, i64 %17, !dbg !31
  %96 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !17
  %97 = insertelement <4 x i32> %96, i32 %82, i64 1, !dbg !17
  %98 = insertelement <4 x i32> %97, i32 %81, i64 2, !dbg !17
  %99 = insertelement <4 x i32> %98, i32 %75, i64 3, !dbg !17
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !17
  %101 = fsub <4 x float> %100, %80, !dbg !32
  %102 = insertelement <4 x float> poison, float %.0.i, i64 0, !dbg !33
  %103 = insertelement <4 x float> %102, float %.0.i2, i64 1, !dbg !33
  %104 = insertelement <4 x float> %103, float %.0.i5, i64 2, !dbg !33
  %105 = insertelement <4 x float> %104, float %.0.i8, i64 3, !dbg !33
  %106 = fmul <4 x float> %101, %105, !dbg !33
  %107 = fmul <4 x float> %106, %93, !dbg !34
  %108 = fadd <4 x float> %107, %88, !dbg !35
  %109 = fcmp ogt <4 x float> %108, zeroinitializer, !dbg !36
  %110 = fmul <4 x float> %108, splat (float 0x3FC99999A0000000), !dbg !37
  %111 = select <4 x i1> %109, <4 x float> %108, <4 x float> %110, !dbg !38
  %112 = fcmp ogt <4 x float> %111, zeroinitializer, !dbg !39
  %bc = bitcast <4 x float> %111 to <4 x i32>, !dbg !40
  %113 = extractelement <4 x i32> %bc, i64 0, !dbg !40
  %bc10 = bitcast <4 x float> %111 to <4 x i32>, !dbg !40
  %114 = extractelement <4 x i32> %bc10, i64 1, !dbg !40
  %bc11 = bitcast <4 x float> %111 to <4 x i32>, !dbg !40
  %115 = extractelement <4 x i32> %bc11, i64 2, !dbg !40
  %bc12 = bitcast <4 x float> %111 to <4 x i32>, !dbg !40
  %116 = extractelement <4 x i32> %bc12, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %113, i32 %114, i32 %115, i32 %116, ptr addrspace(1) %94, i1 true) #3, !dbg !40
  %117 = zext <4 x i1> %112 to <4 x i8>, !dbg !41
  %118 = bitcast <4 x i8> %117 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %95, i1 true) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cizpv5sk2dzofzxf4we7sw6ghbicszektccmlauludapenqsqn3i.py", directory: "inductor_cache/iz")
!4 = !{ptr @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3", linkageName: "triton_poi_fused_leaky_relu_leaky_relu_backward_native_group_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 36, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 40, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 40, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 27, scope: !7)
!30 = !DILocation(line: 47, column: 28, scope: !7)
!31 = !DILocation(line: 48, column: 25, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 35, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 40, scope: !7)
!41 = !DILocation(line: 48, column: 37, scope: !7)
!42 = !DILocation(line: 48, column: 4, scope: !7)
