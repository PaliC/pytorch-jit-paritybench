; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 112, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 31, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %17, 4, !dbg !13
  %19 = or disjoint i32 %17, 8, !dbg !13
  %20 = or disjoint i32 %17, 12, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 5, !dbg !15
  %23 = or disjoint i32 %22, %16, !dbg !16
  %24 = icmp slt i32 %23, 32, !dbg !17
  %.frozen = freeze i32 %17, !dbg !18
  %25 = sdiv i32 %.frozen, 512, !dbg !18
  %26 = mul i32 %25, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = srem i32 %18, 512, !dbg !19
  %28 = srem i32 %19, 512, !dbg !19
  %29 = srem i32 %20, 512, !dbg !19
  %30 = shl i32 %23, 9, !dbg !20
  %31 = shl i32 %25, 14, !dbg !21
  %32 = add i32 %31, %30, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %32, %27, !dbg !23
  %35 = add i32 %32, %28, !dbg !23
  %36 = add i32 %32, %29, !dbg !23
  %37 = sext i32 %33 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %34 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %35 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %36 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %24) #4, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %24) #4, !dbg !25
  %49 = sext i32 %.decomposed to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %51 = sext i32 %27 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %53 = sext i32 %28 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %55 = sext i32 %29 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !27
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #4, !dbg !27
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !28
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !29
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !29
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !29
  %70 = bitcast i32 %66 to float, !dbg !29
  %71 = bitcast i32 %67 to float, !dbg !29
  %72 = bitcast i32 %68 to float, !dbg !29
  %73 = bitcast i32 %69 to float, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #4, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !29
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !29
  %79 = bitcast i32 %75 to float, !dbg !29
  %80 = bitcast i32 %76 to float, !dbg !29
  %81 = bitcast i32 %77 to float, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !29
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = bitcast i32 %87 to float, !dbg !29
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !29
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = bitcast i32 %95 to float, !dbg !29
  %100 = bitcast i32 %96 to float, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !30
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #4, !dbg !31
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !31
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 true) #4, !dbg !31
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !32
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #4, !dbg !33
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #4, !dbg !33
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #4, !dbg !33
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #4, !dbg !33
  %117 = fadd float %70, 0x3EE4F8B580000000, !dbg !34
  %118 = fadd float %71, 0x3EE4F8B580000000, !dbg !34
  %119 = fadd float %72, 0x3EE4F8B580000000, !dbg !34
  %120 = fadd float %73, 0x3EE4F8B580000000, !dbg !34
  %121 = fadd float %79, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %80, 0x3EE4F8B580000000, !dbg !34
  %123 = fadd float %81, 0x3EE4F8B580000000, !dbg !34
  %124 = fadd float %82, 0x3EE4F8B580000000, !dbg !34
  %125 = fadd float %88, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %89, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %90, 0x3EE4F8B580000000, !dbg !34
  %128 = fadd float %91, 0x3EE4F8B580000000, !dbg !34
  %129 = fadd float %97, 0x3EE4F8B580000000, !dbg !34
  %130 = fadd float %98, 0x3EE4F8B580000000, !dbg !34
  %131 = fadd float %99, 0x3EE4F8B580000000, !dbg !34
  %132 = fadd float %100, 0x3EE4F8B580000000, !dbg !34
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %133, 0, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i, label %140, label %135, !dbg !35

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

140:                                              ; preds = %9
  br i1 %.not1.i, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %136, %138, %141, %143
  %.0.i = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i1 = icmp eq i32 %145, 0, !dbg !35
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i4 = icmp eq i32 %146, 0, !dbg !35
  br i1 %.not.i1, label %152, label %147, !dbg !35

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !35

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

152:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %155, label %153, !dbg !35

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %148, %150, %153, %155
  %.0.i3 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i6 = icmp eq i32 %157, 0, !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i9 = icmp eq i32 %158, 0, !dbg !35
  br i1 %.not.i6, label %164, label %159, !dbg !35

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !35

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

164:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %160, %162, %165, %167
  %.0.i8 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !35
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i11 = icmp eq i32 %169, 0, !dbg !35
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i14 = icmp eq i32 %170, 0, !dbg !35
  br i1 %.not.i11, label %176, label %171, !dbg !35

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !35

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

176:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %179, label %177, !dbg !35

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %172, %174, %177, %179
  %.0.i13 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !35
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i16 = icmp eq i32 %181, 0, !dbg !35
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i19 = icmp eq i32 %182, 0, !dbg !35
  br i1 %.not.i16, label %188, label %183, !dbg !35

183:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %186, label %184, !dbg !35

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

188:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %191, label %189, !dbg !35

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %184, %186, %189, %191
  %.0.i18 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !35
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i21 = icmp eq i32 %193, 0, !dbg !35
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i24 = icmp eq i32 %194, 0, !dbg !35
  br i1 %.not.i21, label %200, label %195, !dbg !35

195:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %198, label %196, !dbg !35

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

200:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %203, label %201, !dbg !35

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %196, %198, %201, %203
  %.0.i23 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !35
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i26 = icmp eq i32 %205, 0, !dbg !35
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i29 = icmp eq i32 %206, 0, !dbg !35
  br i1 %.not.i26, label %212, label %207, !dbg !35

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !35

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

212:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %215, label %213, !dbg !35

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %208, %210, %213, %215
  %.0.i28 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !35
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i31 = icmp eq i32 %217, 0, !dbg !35
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i34 = icmp eq i32 %218, 0, !dbg !35
  br i1 %.not.i31, label %224, label %219, !dbg !35

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !35

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

224:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %227, label %225, !dbg !35

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %220, %222, %225, %227
  %.0.i33 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !35
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i36 = icmp eq i32 %229, 0, !dbg !35
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i39 = icmp eq i32 %230, 0, !dbg !35
  br i1 %.not.i36, label %236, label %231, !dbg !35

231:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %234, label %232, !dbg !35

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

236:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %239, label %237, !dbg !35

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

__nv_sqrtf.exit40:                                ; preds = %232, %234, %237, %239
  %.0.i38 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !35
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i41 = icmp eq i32 %241, 0, !dbg !35
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i44 = icmp eq i32 %242, 0, !dbg !35
  br i1 %.not.i41, label %248, label %243, !dbg !35

243:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %246, label %244, !dbg !35

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

248:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %251, label %249, !dbg !35

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

__nv_sqrtf.exit45:                                ; preds = %244, %246, %249, %251
  %.0.i43 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !35
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i46 = icmp eq i32 %253, 0, !dbg !35
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i49 = icmp eq i32 %254, 0, !dbg !35
  br i1 %.not.i46, label %260, label %255, !dbg !35

255:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %258, label %256, !dbg !35

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

260:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %263, label %261, !dbg !35

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit50, !dbg !35

__nv_sqrtf.exit50:                                ; preds = %256, %258, %261, %263
  %.0.i48 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !35
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i51 = icmp eq i32 %265, 0, !dbg !35
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i54 = icmp eq i32 %266, 0, !dbg !35
  br i1 %.not.i51, label %272, label %267, !dbg !35

267:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %270, label %268, !dbg !35

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

272:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %275, label %273, !dbg !35

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !35
  br label %__nv_sqrtf.exit55, !dbg !35

__nv_sqrtf.exit55:                                ; preds = %268, %270, %273, %275
  %.0.i53 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !35
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i56 = icmp eq i32 %277, 0, !dbg !35
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i59 = icmp eq i32 %278, 0, !dbg !35
  br i1 %.not.i56, label %284, label %279, !dbg !35

279:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %282, label %280, !dbg !35

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

284:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %287, label %285, !dbg !35

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #4, !dbg !35
  br label %__nv_sqrtf.exit60, !dbg !35

__nv_sqrtf.exit60:                                ; preds = %280, %282, %285, %287
  %.0.i58 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !35
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i61 = icmp eq i32 %289, 0, !dbg !35
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i64 = icmp eq i32 %290, 0, !dbg !35
  br i1 %.not.i61, label %296, label %291, !dbg !35

291:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %294, label %292, !dbg !35

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

296:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %299, label %297, !dbg !35

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #4, !dbg !35
  br label %__nv_sqrtf.exit65, !dbg !35

__nv_sqrtf.exit65:                                ; preds = %292, %294, %297, %299
  %.0.i63 = phi float [ %293, %292 ], [ %295, %294 ], [ %298, %297 ], [ %300, %299 ], !dbg !35
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i66 = icmp eq i32 %301, 0, !dbg !35
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i69 = icmp eq i32 %302, 0, !dbg !35
  br i1 %.not.i66, label %308, label %303, !dbg !35

303:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %306, label %304, !dbg !35

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

308:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %311, label %309, !dbg !35

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !35
  br label %__nv_sqrtf.exit70, !dbg !35

__nv_sqrtf.exit70:                                ; preds = %304, %306, %309, %311
  %.0.i68 = phi float [ %305, %304 ], [ %307, %306 ], [ %310, %309 ], [ %312, %311 ], !dbg !35
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i71 = icmp eq i32 %313, 0, !dbg !35
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i74 = icmp eq i32 %314, 0, !dbg !35
  br i1 %.not.i71, label %320, label %315, !dbg !35

315:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %318, label %316, !dbg !35

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

320:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %323, label %321, !dbg !35

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !35
  br label %__nv_sqrtf.exit75, !dbg !35

__nv_sqrtf.exit75:                                ; preds = %316, %318, %321, %323
  %.0.i73 = phi float [ %317, %316 ], [ %319, %318 ], [ %322, %321 ], [ %324, %323 ], !dbg !35
  %325 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !25
  %326 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %327 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !25
  %328 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %329 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !25
  %330 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %331 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !25
  %332 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %333 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %334 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !27
  %335 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %336 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !27
  %337 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %338 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !27
  %339 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %340 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !27
  %341 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %342 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !27
  %343 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %344 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !27
  %345 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %346 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !27
  %347 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %348 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !27
  %349 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %350 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %351 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %352 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %353 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %354 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %355 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %356 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %357 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !33
  %359 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !33
  %360 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !33
  %361 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !33
  %363 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !33
  %365 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !33
  %367 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !33
  %368 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !33
  %369 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !33
  %370 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !33
  %371 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !33
  %372 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !33
  %373 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !31
  %374 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !31
  %375 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !31
  %376 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !31
  %378 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !31
  %380 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !31
  %381 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !31
  %382 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !31
  %383 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !31
  %384 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !31
  %385 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !31
  %386 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !31
  %387 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !31
  %388 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !31
  %389 = shl i32 %12, 2, !dbg !36
  %390 = and i32 %389, 28, !dbg !36
  %391 = or disjoint i32 %22, %390, !dbg !16
  %392 = icmp slt i32 %391, 32, !dbg !17
  %393 = or disjoint i32 %16, 96, !dbg !12
  %394 = or disjoint i32 %11, %393, !dbg !13
  %395 = or disjoint i32 %16, 64, !dbg !12
  %396 = or disjoint i32 %11, %395, !dbg !13
  %397 = or disjoint i32 %16, 32, !dbg !12
  %398 = or disjoint i32 %11, %397, !dbg !13
  %399 = or disjoint i32 %11, %16, !dbg !13
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !37
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !37
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !37
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #4, !dbg !37
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #4, !dbg !37
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #4, !dbg !37
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !37
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !37
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !37
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #4, !dbg !37
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #4, !dbg !37
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #4, !dbg !37
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #4, !dbg !37
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #4, !dbg !37
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #4, !dbg !37
  %416 = shl i32 %399, 5, !dbg !38
  %417 = shl i32 %398, 5, !dbg !38
  %418 = shl i32 %396, 5, !dbg !38
  %419 = shl i32 %394, 5, !dbg !38
  %420 = add i32 %391, %416, !dbg !39
  %421 = add i32 %391, %417, !dbg !39
  %422 = add i32 %391, %418, !dbg !39
  %423 = add i32 %391, %419, !dbg !39
  %424 = sext i32 %420 to i64, !dbg !40
  %425 = getelementptr float, ptr addrspace(1) %5, i64 %424, !dbg !40
  %426 = sext i32 %421 to i64, !dbg !40
  %427 = getelementptr float, ptr addrspace(1) %5, i64 %426, !dbg !40
  %428 = sext i32 %422 to i64, !dbg !40
  %429 = getelementptr float, ptr addrspace(1) %5, i64 %428, !dbg !40
  %430 = sext i32 %423 to i64, !dbg !40
  %431 = getelementptr float, ptr addrspace(1) %5, i64 %430, !dbg !40
  %432 = shl i32 %12, 9, !dbg !41
  %433 = and i32 %432, 3584, !dbg !41
  %434 = or disjoint i32 %433, %16, !dbg !41
  %435 = and i32 %389, 1020, !dbg !41
  %436 = lshr exact i32 %433, 3, !dbg !41
  %437 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %436, !dbg !41
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %434, !dbg !41
  %439 = or disjoint i32 %434, 32, !dbg !41
  %440 = lshr i32 %439, 5, !dbg !41
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !41
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %439, !dbg !41
  %443 = or disjoint i32 %434, 64, !dbg !41
  %444 = lshr i32 %443, 5, !dbg !41
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !41
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %443, !dbg !41
  %447 = or disjoint i32 %434, 96, !dbg !41
  %448 = lshr i32 %447, 5, !dbg !41
  %449 = getelementptr float, ptr addrspace(3) @global_smem, i32 %448, !dbg !41
  %450 = getelementptr float, ptr addrspace(3) %449, i32 %447, !dbg !41
  %451 = or disjoint i32 %434, 128, !dbg !41
  %452 = lshr i32 %451, 5, !dbg !41
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !41
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %451, !dbg !41
  %455 = or disjoint i32 %434, 160, !dbg !41
  %456 = lshr i32 %455, 5, !dbg !41
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !41
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %455, !dbg !41
  %459 = or disjoint i32 %434, 192, !dbg !41
  %460 = lshr i32 %459, 5, !dbg !41
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !41
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %459, !dbg !41
  %463 = or disjoint i32 %434, 224, !dbg !41
  %464 = lshr i32 %463, 5, !dbg !41
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !41
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %463, !dbg !41
  %467 = or disjoint i32 %434, 256, !dbg !41
  %468 = lshr i32 %467, 5, !dbg !41
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !41
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %467, !dbg !41
  %471 = or disjoint i32 %434, 288, !dbg !41
  %472 = lshr i32 %471, 5, !dbg !41
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !41
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %471, !dbg !41
  %475 = or disjoint i32 %434, 320, !dbg !41
  %476 = lshr i32 %475, 5, !dbg !41
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !41
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !41
  %479 = or disjoint i32 %434, 352, !dbg !41
  %480 = lshr i32 %479, 5, !dbg !41
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !41
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !41
  %483 = or disjoint i32 %434, 384, !dbg !41
  %484 = lshr i32 %483, 5, !dbg !41
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !41
  %486 = getelementptr float, ptr addrspace(3) %485, i32 %483, !dbg !41
  %487 = or disjoint i32 %434, 416, !dbg !41
  %488 = lshr i32 %487, 5, !dbg !41
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !41
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %487, !dbg !41
  %491 = or disjoint i32 %434, 448, !dbg !41
  %492 = lshr i32 %491, 5, !dbg !41
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %492, !dbg !41
  %494 = getelementptr float, ptr addrspace(3) %493, i32 %491, !dbg !41
  %495 = or disjoint i32 %434, 480, !dbg !41
  %496 = lshr i32 %495, 5, !dbg !41
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !41
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %495, !dbg !41
  %499 = lshr i32 %435, 5, !dbg !41
  %500 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %499, !dbg !41
  %501 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %435, !dbg !41
  %502 = or disjoint i32 %435, 1, !dbg !41
  %503 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %502, !dbg !41
  %504 = or disjoint i32 %435, 2, !dbg !41
  %505 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %504, !dbg !41
  %506 = or disjoint i32 %435, 3, !dbg !41
  %507 = getelementptr inbounds float, ptr addrspace(3) %500, i32 %506, !dbg !41
  %508 = or disjoint i32 %435, 1024, !dbg !41
  %509 = lshr i32 %508, 5, !dbg !41
  %510 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %509, !dbg !41
  %511 = getelementptr inbounds float, ptr addrspace(3) %510, i32 %508, !dbg !41
  %512 = or disjoint i32 %435, 1025, !dbg !41
  %513 = lshr i32 %512, 5, !dbg !41
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !41
  %515 = getelementptr inbounds float, ptr addrspace(3) %514, i32 %512, !dbg !41
  %516 = or disjoint i32 %435, 1026, !dbg !41
  %517 = lshr i32 %516, 5, !dbg !41
  %518 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %517, !dbg !41
  %519 = getelementptr inbounds float, ptr addrspace(3) %518, i32 %516, !dbg !41
  %520 = or disjoint i32 %435, 1027, !dbg !41
  %521 = lshr i32 %520, 5, !dbg !41
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %521, !dbg !41
  %523 = getelementptr inbounds float, ptr addrspace(3) %522, i32 %520, !dbg !41
  %524 = or disjoint i32 %435, 2048, !dbg !41
  %525 = lshr i32 %524, 5, !dbg !41
  %526 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %525, !dbg !41
  %527 = getelementptr inbounds float, ptr addrspace(3) %526, i32 %524, !dbg !41
  %528 = or disjoint i32 %435, 2049, !dbg !41
  %529 = lshr i32 %528, 5, !dbg !41
  %530 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %529, !dbg !41
  %531 = getelementptr inbounds float, ptr addrspace(3) %530, i32 %528, !dbg !41
  %532 = or disjoint i32 %435, 2050, !dbg !41
  %533 = lshr i32 %532, 5, !dbg !41
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %533, !dbg !41
  %535 = getelementptr inbounds float, ptr addrspace(3) %534, i32 %532, !dbg !41
  %536 = or disjoint i32 %435, 2051, !dbg !41
  %537 = lshr i32 %536, 5, !dbg !41
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !41
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %536, !dbg !41
  %540 = or disjoint i32 %435, 3072, !dbg !41
  %541 = lshr i32 %540, 5, !dbg !41
  %542 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %541, !dbg !41
  %543 = getelementptr inbounds float, ptr addrspace(3) %542, i32 %540, !dbg !41
  %544 = or disjoint i32 %435, 3073, !dbg !41
  %545 = lshr i32 %544, 5, !dbg !41
  %546 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %545, !dbg !41
  %547 = getelementptr inbounds float, ptr addrspace(3) %546, i32 %544, !dbg !41
  %548 = or disjoint i32 %435, 3074, !dbg !41
  %549 = lshr i32 %548, 5, !dbg !41
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %549, !dbg !41
  %551 = getelementptr inbounds float, ptr addrspace(3) %550, i32 %548, !dbg !41
  %552 = or disjoint i32 %435, 3075, !dbg !41
  %553 = lshr i32 %552, 5, !dbg !41
  %554 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %553, !dbg !41
  %555 = getelementptr inbounds float, ptr addrspace(3) %554, i32 %552, !dbg !41
  %556 = getelementptr i1, ptr addrspace(1) %6, i64 %37, !dbg !42
  %557 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !25
  %558 = insertelement <4 x i32> %557, i32 %353, i64 1, !dbg !25
  %559 = insertelement <4 x i32> %558, i32 %351, i64 2, !dbg !25
  %560 = insertelement <4 x i32> %559, i32 %349, i64 3, !dbg !25
  %561 = bitcast <4 x i32> %560 to <4 x float>, !dbg !25
  %562 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !27
  %563 = insertelement <4 x i32> %562, i32 %354, i64 1, !dbg !27
  %564 = insertelement <4 x i32> %563, i32 %352, i64 2, !dbg !27
  %565 = insertelement <4 x i32> %564, i32 %350, i64 3, !dbg !27
  %566 = bitcast <4 x i32> %565 to <4 x float>, !dbg !27
  %567 = fsub <4 x float> %561, %566, !dbg !43
  %568 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !33
  %569 = insertelement <4 x i32> %568, i32 %371, i64 1, !dbg !33
  %570 = insertelement <4 x i32> %569, i32 %370, i64 2, !dbg !33
  %571 = insertelement <4 x i32> %570, i32 %369, i64 3, !dbg !33
  %572 = bitcast <4 x i32> %571 to <4 x float>, !dbg !33
  %573 = insertelement <4 x i32> poison, i32 %388, i64 0, !dbg !31
  %574 = insertelement <4 x i32> %573, i32 %387, i64 1, !dbg !31
  %575 = insertelement <4 x i32> %574, i32 %386, i64 2, !dbg !31
  %576 = insertelement <4 x i32> %575, i32 %385, i64 3, !dbg !31
  %577 = bitcast <4 x i32> %576 to <4 x float>, !dbg !31
  %578 = insertelement <4 x float> poison, float %400, i64 0, !dbg !44
  %579 = insertelement <4 x float> %578, float %401, i64 1, !dbg !44
  %580 = insertelement <4 x float> %579, float %402, i64 2, !dbg !44
  %581 = insertelement <4 x float> %580, float %403, i64 3, !dbg !44
  %582 = fmul <4 x float> %567, %581, !dbg !44
  %583 = fmul <4 x float> %582, %577, !dbg !45
  %584 = fadd <4 x float> %583, %572, !dbg !46
  %585 = fcmp olt <4 x float> %584, zeroinitializer, !dbg !47
  %586 = select <4 x i1> %585, <4 x float> zeroinitializer, <4 x float> %584, !dbg !51
  %587 = fcmp ole <4 x float> %586, zeroinitializer, !dbg !52
  %588 = extractelement <4 x float> %586, i64 0, !dbg !41
  %589 = bitcast float %588 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %589, i1 true) #4, !dbg !41
  %590 = extractelement <4 x float> %586, i64 1, !dbg !41
  %591 = bitcast float %590 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %591, i1 true) #4, !dbg !41
  %592 = extractelement <4 x float> %586, i64 2, !dbg !41
  %593 = bitcast float %592 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %593, i1 true) #4, !dbg !41
  %594 = extractelement <4 x float> %586, i64 3, !dbg !41
  %595 = bitcast float %594 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %595, i1 true) #4, !dbg !41
  %596 = insertelement <4 x i32> poison, i32 %347, i64 0, !dbg !25
  %597 = insertelement <4 x i32> %596, i32 %345, i64 1, !dbg !25
  %598 = insertelement <4 x i32> %597, i32 %343, i64 2, !dbg !25
  %599 = insertelement <4 x i32> %598, i32 %341, i64 3, !dbg !25
  %600 = bitcast <4 x i32> %599 to <4 x float>, !dbg !25
  %601 = insertelement <4 x i32> poison, i32 %348, i64 0, !dbg !27
  %602 = insertelement <4 x i32> %601, i32 %346, i64 1, !dbg !27
  %603 = insertelement <4 x i32> %602, i32 %344, i64 2, !dbg !27
  %604 = insertelement <4 x i32> %603, i32 %342, i64 3, !dbg !27
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !27
  %606 = fsub <4 x float> %600, %605, !dbg !43
  %607 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !33
  %608 = insertelement <4 x i32> %607, i32 %367, i64 1, !dbg !33
  %609 = insertelement <4 x i32> %608, i32 %366, i64 2, !dbg !33
  %610 = insertelement <4 x i32> %609, i32 %365, i64 3, !dbg !33
  %611 = bitcast <4 x i32> %610 to <4 x float>, !dbg !33
  %612 = insertelement <4 x i32> poison, i32 %384, i64 0, !dbg !31
  %613 = insertelement <4 x i32> %612, i32 %383, i64 1, !dbg !31
  %614 = insertelement <4 x i32> %613, i32 %382, i64 2, !dbg !31
  %615 = insertelement <4 x i32> %614, i32 %381, i64 3, !dbg !31
  %616 = bitcast <4 x i32> %615 to <4 x float>, !dbg !31
  %617 = insertelement <4 x float> poison, float %404, i64 0, !dbg !44
  %618 = insertelement <4 x float> %617, float %405, i64 1, !dbg !44
  %619 = insertelement <4 x float> %618, float %406, i64 2, !dbg !44
  %620 = insertelement <4 x float> %619, float %407, i64 3, !dbg !44
  %621 = fmul <4 x float> %606, %620, !dbg !44
  %622 = fmul <4 x float> %621, %616, !dbg !45
  %623 = fadd <4 x float> %622, %611, !dbg !46
  %624 = fcmp olt <4 x float> %623, zeroinitializer, !dbg !47
  %625 = select <4 x i1> %624, <4 x float> zeroinitializer, <4 x float> %623, !dbg !51
  %626 = fcmp ole <4 x float> %625, zeroinitializer, !dbg !52
  %627 = extractelement <4 x float> %625, i64 0, !dbg !41
  %628 = bitcast float %627 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %628, i1 true) #4, !dbg !41
  %629 = extractelement <4 x float> %625, i64 1, !dbg !41
  %630 = bitcast float %629 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %630, i1 true) #4, !dbg !41
  %631 = extractelement <4 x float> %625, i64 2, !dbg !41
  %632 = bitcast float %631 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %632, i1 true) #4, !dbg !41
  %633 = extractelement <4 x float> %625, i64 3, !dbg !41
  %634 = bitcast float %633 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %634, i1 true) #4, !dbg !41
  %635 = insertelement <4 x i32> poison, i32 %339, i64 0, !dbg !25
  %636 = insertelement <4 x i32> %635, i32 %337, i64 1, !dbg !25
  %637 = insertelement <4 x i32> %636, i32 %335, i64 2, !dbg !25
  %638 = insertelement <4 x i32> %637, i32 %333, i64 3, !dbg !25
  %639 = bitcast <4 x i32> %638 to <4 x float>, !dbg !25
  %640 = insertelement <4 x i32> poison, i32 %340, i64 0, !dbg !27
  %641 = insertelement <4 x i32> %640, i32 %338, i64 1, !dbg !27
  %642 = insertelement <4 x i32> %641, i32 %336, i64 2, !dbg !27
  %643 = insertelement <4 x i32> %642, i32 %334, i64 3, !dbg !27
  %644 = bitcast <4 x i32> %643 to <4 x float>, !dbg !27
  %645 = fsub <4 x float> %639, %644, !dbg !43
  %646 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !33
  %647 = insertelement <4 x i32> %646, i32 %363, i64 1, !dbg !33
  %648 = insertelement <4 x i32> %647, i32 %362, i64 2, !dbg !33
  %649 = insertelement <4 x i32> %648, i32 %361, i64 3, !dbg !33
  %650 = bitcast <4 x i32> %649 to <4 x float>, !dbg !33
  %651 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !31
  %652 = insertelement <4 x i32> %651, i32 %379, i64 1, !dbg !31
  %653 = insertelement <4 x i32> %652, i32 %378, i64 2, !dbg !31
  %654 = insertelement <4 x i32> %653, i32 %377, i64 3, !dbg !31
  %655 = bitcast <4 x i32> %654 to <4 x float>, !dbg !31
  %656 = insertelement <4 x float> poison, float %408, i64 0, !dbg !44
  %657 = insertelement <4 x float> %656, float %409, i64 1, !dbg !44
  %658 = insertelement <4 x float> %657, float %410, i64 2, !dbg !44
  %659 = insertelement <4 x float> %658, float %411, i64 3, !dbg !44
  %660 = fmul <4 x float> %645, %659, !dbg !44
  %661 = fmul <4 x float> %660, %655, !dbg !45
  %662 = fadd <4 x float> %661, %650, !dbg !46
  %663 = fcmp olt <4 x float> %662, zeroinitializer, !dbg !47
  %664 = select <4 x i1> %663, <4 x float> zeroinitializer, <4 x float> %662, !dbg !51
  %665 = fcmp ole <4 x float> %664, zeroinitializer, !dbg !52
  %666 = extractelement <4 x float> %664, i64 0, !dbg !41
  %667 = bitcast float %666 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %667, i1 true) #4, !dbg !41
  %668 = extractelement <4 x float> %664, i64 1, !dbg !41
  %669 = bitcast float %668 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %669, i1 true) #4, !dbg !41
  %670 = extractelement <4 x float> %664, i64 2, !dbg !41
  %671 = bitcast float %670 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %671, i1 true) #4, !dbg !41
  %672 = extractelement <4 x float> %664, i64 3, !dbg !41
  %673 = bitcast float %672 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %673, i1 true) #4, !dbg !41
  %674 = insertelement <4 x i32> poison, i32 %331, i64 0, !dbg !25
  %675 = insertelement <4 x i32> %674, i32 %329, i64 1, !dbg !25
  %676 = insertelement <4 x i32> %675, i32 %327, i64 2, !dbg !25
  %677 = insertelement <4 x i32> %676, i32 %325, i64 3, !dbg !25
  %678 = bitcast <4 x i32> %677 to <4 x float>, !dbg !25
  %679 = insertelement <4 x i32> poison, i32 %332, i64 0, !dbg !27
  %680 = insertelement <4 x i32> %679, i32 %330, i64 1, !dbg !27
  %681 = insertelement <4 x i32> %680, i32 %328, i64 2, !dbg !27
  %682 = insertelement <4 x i32> %681, i32 %326, i64 3, !dbg !27
  %683 = bitcast <4 x i32> %682 to <4 x float>, !dbg !27
  %684 = fsub <4 x float> %678, %683, !dbg !43
  %685 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !33
  %686 = insertelement <4 x i32> %685, i32 %359, i64 1, !dbg !33
  %687 = insertelement <4 x i32> %686, i32 %358, i64 2, !dbg !33
  %688 = insertelement <4 x i32> %687, i32 %357, i64 3, !dbg !33
  %689 = bitcast <4 x i32> %688 to <4 x float>, !dbg !33
  %690 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !31
  %691 = insertelement <4 x i32> %690, i32 %375, i64 1, !dbg !31
  %692 = insertelement <4 x i32> %691, i32 %374, i64 2, !dbg !31
  %693 = insertelement <4 x i32> %692, i32 %373, i64 3, !dbg !31
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !31
  %695 = insertelement <4 x float> poison, float %412, i64 0, !dbg !44
  %696 = insertelement <4 x float> %695, float %413, i64 1, !dbg !44
  %697 = insertelement <4 x float> %696, float %414, i64 2, !dbg !44
  %698 = insertelement <4 x float> %697, float %415, i64 3, !dbg !44
  %699 = fmul <4 x float> %684, %698, !dbg !44
  %700 = fmul <4 x float> %699, %694, !dbg !45
  %701 = fadd <4 x float> %700, %689, !dbg !46
  %702 = fcmp olt <4 x float> %701, zeroinitializer, !dbg !47
  %703 = select <4 x i1> %702, <4 x float> zeroinitializer, <4 x float> %701, !dbg !51
  %704 = fcmp ole <4 x float> %703, zeroinitializer, !dbg !52
  %705 = extractelement <4 x float> %703, i64 0, !dbg !41
  %706 = bitcast float %705 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %706, i1 true) #4, !dbg !41
  %707 = extractelement <4 x float> %703, i64 1, !dbg !41
  %708 = bitcast float %707 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %708, i1 true) #4, !dbg !41
  %709 = extractelement <4 x float> %703, i64 2, !dbg !41
  %710 = bitcast float %709 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %710, i1 true) #4, !dbg !41
  %711 = extractelement <4 x float> %703, i64 3, !dbg !41
  %712 = bitcast float %711 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %712, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %713 = load i32, ptr addrspace(3) %501, align 4, !dbg !41
  %714 = load i32, ptr addrspace(3) %503, align 4, !dbg !41
  %715 = load i32, ptr addrspace(3) %505, align 4, !dbg !41
  %716 = load i32, ptr addrspace(3) %507, align 4, !dbg !41
  %717 = load i32, ptr addrspace(3) %511, align 4, !dbg !41
  %718 = load i32, ptr addrspace(3) %515, align 4, !dbg !41
  %719 = load i32, ptr addrspace(3) %519, align 4, !dbg !41
  %720 = load i32, ptr addrspace(3) %523, align 4, !dbg !41
  %721 = load i32, ptr addrspace(3) %527, align 4, !dbg !41
  %722 = load i32, ptr addrspace(3) %531, align 4, !dbg !41
  %723 = load i32, ptr addrspace(3) %535, align 4, !dbg !41
  %724 = load i32, ptr addrspace(3) %539, align 4, !dbg !41
  %725 = load i32, ptr addrspace(3) %543, align 4, !dbg !41
  %726 = load i32, ptr addrspace(3) %547, align 4, !dbg !41
  %727 = load i32, ptr addrspace(3) %551, align 4, !dbg !41
  %728 = load i32, ptr addrspace(3) %555, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %713, i32 %714, i32 %715, i32 %716, ptr addrspace(1) %425, i1 %392) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %717, i32 %718, i32 %719, i32 %720, ptr addrspace(1) %427, i1 %392) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %721, i32 %722, i32 %723, i32 %724, ptr addrspace(1) %429, i1 %392) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %725, i32 %726, i32 %727, i32 %728, ptr addrspace(1) %431, i1 %392) #4, !dbg !41
  %729 = zext <4 x i1> %587 to <4 x i8>, !dbg !53
  %730 = bitcast <4 x i8> %729 to i32, !dbg !53
  %731 = zext <4 x i1> %626 to <4 x i8>, !dbg !53
  %732 = bitcast <4 x i8> %731 to i32, !dbg !53
  %733 = zext <4 x i1> %665 to <4 x i8>, !dbg !53
  %734 = bitcast <4 x i8> %733 to i32, !dbg !53
  %735 = zext <4 x i1> %704 to <4 x i8>, !dbg !53
  %736 = bitcast <4 x i8> %735 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %730, i32 %732, i32 %734, i32 %736, ptr addrspace(1) %556, i1 %24) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cufujjxrbpnmdonxyikuonyixtkapicuqgm6ymufpneajk3ahccc.py", directory: "inductor_cache/uf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 50, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 55, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 33, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
