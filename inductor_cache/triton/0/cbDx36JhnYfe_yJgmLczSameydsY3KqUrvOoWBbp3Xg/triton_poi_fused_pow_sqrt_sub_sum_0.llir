; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pow_sqrt_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %12, 6, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #3, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = bitcast i32 %20 to float, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %11) #3, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = add i32 %15, 16, !dbg !23
  %30 = sext i32 %29 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %11) #3, !dbg !25
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !25
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !25
  %35 = bitcast i32 %33 to float, !dbg !25
  %36 = bitcast i32 %34 to float, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !26
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %11) #3, !dbg !27
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !27
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !27
  %41 = bitcast i32 %39 to float, !dbg !27
  %42 = bitcast i32 %40 to float, !dbg !27
  %43 = add i32 %15, 32, !dbg !28
  %44 = sext i32 %43 to i64, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %11) #3, !dbg !30
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %49 = bitcast i32 %47 to float, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %11) #3, !dbg !32
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %55 = bitcast i32 %53 to float, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !32
  %57 = add i32 %15, 48, !dbg !33
  %58 = sext i32 %57 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !34
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %11) #3, !dbg !35
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !35
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !35
  %63 = bitcast i32 %61 to float, !dbg !35
  %64 = bitcast i32 %62 to float, !dbg !35
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !36
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %11) #3, !dbg !37
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !37
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !37
  %69 = bitcast i32 %67 to float, !dbg !37
  %70 = bitcast i32 %68 to float, !dbg !37
  %71 = fsub float %21, %27, !dbg !38
  %72 = fsub float %22, %28, !dbg !38
  %73 = fmul float %71, %71, !dbg !39
  %74 = fmul float %72, %72, !dbg !39
  %75 = fsub float %35, %41, !dbg !40
  %76 = fsub float %36, %42, !dbg !40
  %77 = fmul float %75, %75, !dbg !41
  %78 = fmul float %76, %76, !dbg !41
  %79 = fadd float %73, %77, !dbg !42
  %80 = fadd float %74, %78, !dbg !42
  %81 = fsub float %49, %55, !dbg !43
  %82 = fsub float %50, %56, !dbg !43
  %83 = fmul float %81, %81, !dbg !44
  %84 = fmul float %82, %82, !dbg !44
  %85 = fadd float %79, %83, !dbg !45
  %86 = fadd float %80, %84, !dbg !45
  %87 = fsub float %63, %69, !dbg !46
  %88 = fsub float %64, %70, !dbg !46
  %89 = fmul float %87, %87, !dbg !47
  %90 = fmul float %88, %88, !dbg !47
  %91 = fadd float %85, %89, !dbg !48
  %92 = fadd float %86, %90, !dbg !48
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %93, 0, !dbg !49
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %94, 0, !dbg !49
  br i1 %.not.i, label %100, label %95, !dbg !49

95:                                               ; preds = %4
  br i1 %.not1.i, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

100:                                              ; preds = %4
  br i1 %.not1.i, label %103, label %101, !dbg !49

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %105, 0, !dbg !49
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %106, 0, !dbg !49
  br i1 %.not.i1, label %112, label %107, !dbg !49

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !49

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !49

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %108, %110, %113, %115
  %.0.i3 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !49
  %117 = sext i32 %10 to i64, !dbg !50
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !50
  %119 = bitcast float %.0.i to i32, !dbg !51
  %120 = bitcast float %.0.i3 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %119, i32 %120, ptr addrspace(1) %118, i1 %11) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6pjnzvaqzlnz6mp6i2uhw3wcuu4qfupbvyskduz4ibayrtr2c6b.py", directory: "inductor_cache/6p")
!4 = !{ptr @triton_poi_fused_pow_sqrt_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pow_sqrt_sub_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pow_sqrt_sub_sum_0", linkageName: "triton_poi_fused_pow_sqrt_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 48, scope: !7)
!28 = !DILocation(line: 31, column: 40, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 48, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 49, scope: !7)
!33 = !DILocation(line: 33, column: 41, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 49, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 36, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 19, scope: !7)
!44 = !DILocation(line: 41, column: 20, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 46, column: 27, scope: !7)
!50 = !DILocation(line: 47, column: 25, scope: !7)
!51 = !DILocation(line: 47, column: 37, scope: !7)
!52 = !DILocation(line: 47, column: 4, scope: !7)
