; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_sigmoid_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = lshr i32 %7, 4, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %10 = shl i32 %7, 2, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %6, i64 1, !dbg !14
  %13 = shl <2 x i32> %12, <i32 6, i32 4>, !dbg !14
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %15 = insertelement <2 x i32> %14, i32 %8, i64 1, !dbg !13
  %16 = and <2 x i32> %15, <i32 60, i32 7>, !dbg !13
  %17 = or disjoint <2 x i32> %13, %16, !dbg !15
  %18 = extractelement <2 x i32> %17, i64 1, !dbg !16
  %19 = or disjoint i32 %18, 8, !dbg !16
  %20 = icmp slt i32 %18, 12, !dbg !17
  %21 = icmp slt i32 %19, 12, !dbg !17
  %22 = extractelement <2 x i32> %17, i64 0, !dbg !18
  %23 = icmp slt i32 %22, 1936, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %24 = sdiv i32 %.frozen, 3, !dbg !19
  %25 = mul i32 %24, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %.frozen1 = freeze i32 %19, !dbg !19
  %26 = sdiv i32 %.frozen1, 3, !dbg !19
  %27 = mul i32 %26, 3, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %27, !dbg !20
  %28 = mul i32 %22, 3, !dbg !21
  %29 = or disjoint i32 %28, 3, !dbg !21
  %30 = add i32 %28, 6, !dbg !21
  %31 = add i32 %28, 9, !dbg !21
  %32 = mul i32 %24, 5808, !dbg !22
  %33 = mul i32 %26, 5808, !dbg !22
  %34 = add i32 %32, %.decomposed, !dbg !23
  %35 = add i32 %34, %28, !dbg !24
  %36 = add i32 %34, %29, !dbg !24
  %37 = add i32 %34, %30, !dbg !24
  %38 = add i32 %34, %31, !dbg !24
  %39 = add i32 %33, %.decomposed2, !dbg !23
  %40 = add i32 %39, %28, !dbg !24
  %41 = add i32 %39, %29, !dbg !24
  %42 = add i32 %39, %30, !dbg !24
  %43 = add i32 %39, %31, !dbg !24
  %44 = sext i32 %35 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %36 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %37 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = sext i32 %38 to i64, !dbg !25
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !25
  %52 = sext i32 %40 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = sext i32 %41 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = sext i32 %42 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %43 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = and i1 %20, %23, !dbg !26
  %61 = and i1 %21, %23, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %60) #1, !dbg !27
  %63 = bitcast i32 %62 to float, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %60) #1, !dbg !27
  %65 = bitcast i32 %64 to float, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %60) #1, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %60) #1, !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %61) #1, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %61) #1, !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %61) #1, !dbg !27
  %75 = bitcast i32 %74 to float, !dbg !27
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %61) #1, !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = sext i32 %.decomposed to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %.decomposed2 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %20) #1, !dbg !29
  %86 = bitcast i32 %85 to float, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %21) #1, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = fadd float %63, %86, !dbg !30
  %93 = fadd float %65, %86, !dbg !30
  %94 = fadd float %67, %86, !dbg !30
  %95 = fadd float %69, %86, !dbg !30
  %96 = fadd float %71, %91, !dbg !30
  %97 = fadd float %73, %91, !dbg !30
  %98 = fadd float %75, %91, !dbg !30
  %99 = fadd float %77, %91, !dbg !30
  %100 = fsub float 0.000000e+00, %92, !dbg !31
  %101 = fsub float 0.000000e+00, %93, !dbg !31
  %102 = fsub float 0.000000e+00, %94, !dbg !31
  %103 = fsub float 0.000000e+00, %95, !dbg !31
  %104 = fsub float 0.000000e+00, %96, !dbg !31
  %105 = fsub float 0.000000e+00, %97, !dbg !31
  %106 = fsub float 0.000000e+00, %98, !dbg !31
  %107 = fsub float 0.000000e+00, %99, !dbg !31
  %108 = fmul float %100, 0x3FF7154760000000, !dbg !35
  %109 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %108) #1, !dbg !35
  %110 = fmul float %101, 0x3FF7154760000000, !dbg !35
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #1, !dbg !35
  %112 = fmul float %102, 0x3FF7154760000000, !dbg !35
  %113 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %112) #1, !dbg !35
  %114 = fmul float %103, 0x3FF7154760000000, !dbg !35
  %115 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %114) #1, !dbg !35
  %116 = fmul float %104, 0x3FF7154760000000, !dbg !35
  %117 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %116) #1, !dbg !35
  %118 = fmul float %105, 0x3FF7154760000000, !dbg !35
  %119 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %118) #1, !dbg !35
  %120 = fmul float %106, 0x3FF7154760000000, !dbg !35
  %121 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %120) #1, !dbg !35
  %122 = fmul float %107, 0x3FF7154760000000, !dbg !35
  %123 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %122) #1, !dbg !35
  %124 = fadd float %109, 1.000000e+00, !dbg !36
  %125 = fadd float %111, 1.000000e+00, !dbg !36
  %126 = fadd float %113, 1.000000e+00, !dbg !36
  %127 = fadd float %115, 1.000000e+00, !dbg !36
  %128 = fadd float %117, 1.000000e+00, !dbg !36
  %129 = fadd float %119, 1.000000e+00, !dbg !36
  %130 = fadd float %121, 1.000000e+00, !dbg !36
  %131 = fadd float %123, 1.000000e+00, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %124) #1, !dbg !37
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %125) #1, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %126) #1, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %127) #1, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %128) #1, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %129) #1, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %130) #1, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %131) #1, !dbg !37
  %140 = mul i32 %18, 1936, !dbg !38
  %141 = mul i32 %19, 1936, !dbg !38
  %142 = add i32 %22, %140, !dbg !39
  %143 = add i32 %22, %141, !dbg !39
  %144 = sext i32 %142 to i64, !dbg !40
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !40
  %146 = sext i32 %143 to i64, !dbg !40
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !40
  %148 = bitcast float %132 to i32, !dbg !41
  %149 = bitcast float %133 to i32, !dbg !41
  %150 = bitcast float %134 to i32, !dbg !41
  %151 = bitcast float %135 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %148, i32 %149, i32 %150, i32 %151, ptr addrspace(1) %145, i1 %60) #1, !dbg !41
  %152 = bitcast float %136 to i32, !dbg !41
  %153 = bitcast float %137 to i32, !dbg !41
  %154 = bitcast float %138 to i32, !dbg !41
  %155 = bitcast float %139 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %147, i1 %61) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqywmhpbsyuedylhl7z3hjwk3endsrijdp4nncechatflocndor6.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_poi_fused_convolution_sigmoid_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_sigmoid_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_sigmoid_11", linkageName: "triton_poi_fused_convolution_sigmoid_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 42, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 60, scope: !7)
!27 = !DILocation(line: 32, column: 52, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 47, column: 30, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 35, column: 22, scope: !7)
!35 = !DILocation(line: 47, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 47, column: 20, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 47, column: 16, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 36, column: 35, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 25, scope: !7)
!41 = !DILocation(line: 36, column: 46, scope: !7)
!42 = !DILocation(line: 36, column: 4, scope: !7)
