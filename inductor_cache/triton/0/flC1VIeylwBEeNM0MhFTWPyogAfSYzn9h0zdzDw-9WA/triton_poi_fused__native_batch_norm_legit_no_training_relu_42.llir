; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_42(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 1280, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = lshr i32 %11, 2, !dbg !17
  %19 = and i32 %18, 31, !dbg !17
  %20 = or disjoint i32 %17, %19, !dbg !18
  %21 = or disjoint i32 %20, 32, !dbg !18
  %22 = icmp slt i32 %20, 64, !dbg !19
  %23 = icmp slt i32 %21, 64, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 320, !dbg !20
  %25 = mul i32 %24, 320, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = mul i32 %20, 320, !dbg !22
  %27 = mul i32 %21, 320, !dbg !22
  %28 = mul i32 %24, 20480, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %29, %26, !dbg !25
  %31 = add i32 %29, %27, !dbg !25
  %32 = sext i32 %30 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = sext i32 %31 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = and i1 %15, %22, !dbg !27
  %37 = and i1 %23, %15, !dbg !27
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #4, !dbg !28
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #4, !dbg !28
  %40 = sext i32 %.decomposed to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %15) #4, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !31
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %15) #4, !dbg !32
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !32
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !32
  %49 = bitcast i32 %45 to float, !dbg !32
  %50 = bitcast i32 %46 to float, !dbg !32
  %51 = bitcast i32 %47 to float, !dbg !32
  %52 = bitcast i32 %48 to float, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %15) #4, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !35
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %15) #4, !dbg !36
  %57 = fadd float %49, 0x3F50624DE0000000, !dbg !37
  %58 = fadd float %50, 0x3F50624DE0000000, !dbg !37
  %59 = fadd float %51, 0x3F50624DE0000000, !dbg !37
  %60 = fadd float %52, 0x3F50624DE0000000, !dbg !37
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %61, 0, !dbg !38
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %62, 0, !dbg !38
  br i1 %.not.i, label %68, label %63, !dbg !38

63:                                               ; preds = %8
  br i1 %.not1.i, label %66, label %64, !dbg !38

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !38

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !38
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i3 = icmp eq i32 %73, 0, !dbg !38
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i6 = icmp eq i32 %74, 0, !dbg !38
  br i1 %.not.i3, label %80, label %75, !dbg !38

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %78, label %76, !dbg !38

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %83, label %81, !dbg !38

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !38
  br label %__nv_sqrtf.exit7, !dbg !38

__nv_sqrtf.exit7:                                 ; preds = %76, %78, %81, %83
  %.0.i5 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i8 = icmp eq i32 %85, 0, !dbg !38
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i11 = icmp eq i32 %86, 0, !dbg !38
  br i1 %.not.i8, label %92, label %87, !dbg !38

87:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %90, label %88, !dbg !38

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

92:                                               ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !38
  br label %__nv_sqrtf.exit12, !dbg !38

__nv_sqrtf.exit12:                                ; preds = %88, %90, %93, %95
  %.0.i10 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !38
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i13 = icmp eq i32 %97, 0, !dbg !38
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i16 = icmp eq i32 %98, 0, !dbg !38
  br i1 %.not.i13, label %104, label %99, !dbg !38

99:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %102, label %100, !dbg !38

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !38
  br label %__nv_sqrtf.exit17, !dbg !38

__nv_sqrtf.exit17:                                ; preds = %100, %102, %105, %107
  %.0.i15 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !38
  %109 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %114 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %118 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %129 = and i32 %12, 60, !dbg !17
  %130 = or disjoint i32 %17, %129, !dbg !18
  %131 = icmp slt i32 %130, 64, !dbg !19
  %132 = lshr i32 %11, 4, !dbg !12
  %133 = and i32 %132, 7, !dbg !12
  %134 = or disjoint i32 %133, %10, !dbg !13
  %135 = or disjoint i32 %134, 8, !dbg !13
  %136 = icmp slt i32 %135, 1280, !dbg !14
  %137 = and i1 %136, %131, !dbg !27
  %138 = icmp slt i32 %134, 1280, !dbg !14
  %139 = and i1 %138, %131, !dbg !27
  %.frozen18 = freeze i32 %135, !dbg !20
  %140 = sdiv i32 %.frozen18, 320, !dbg !20
  %.frozen20 = freeze i32 %134, !dbg !20
  %141 = sdiv i32 %.frozen20, 320, !dbg !20
  %142 = mul i32 %140, 320, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %142, !dbg !21
  %143 = mul i32 %141, 320, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %143, !dbg !21
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !39
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !39
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !39
  %148 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !30
  %149 = insertelement <4 x i32> %148, i32 %112, i64 1, !dbg !30
  %150 = insertelement <4 x i32> %149, i32 %114, i64 2, !dbg !30
  %151 = insertelement <4 x i32> %150, i32 %116, i64 3, !dbg !30
  %152 = bitcast <4 x i32> %151 to <4 x float>, !dbg !30
  %153 = shufflevector <4 x float> %152, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %154 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !28
  %155 = insertelement <8 x i32> %154, i32 %111, i64 1, !dbg !28
  %156 = insertelement <8 x i32> %155, i32 %113, i64 2, !dbg !28
  %157 = insertelement <8 x i32> %156, i32 %115, i64 3, !dbg !28
  %158 = insertelement <8 x i32> %157, i32 %117, i64 4, !dbg !28
  %159 = insertelement <8 x i32> %158, i32 %118, i64 5, !dbg !28
  %160 = insertelement <8 x i32> %159, i32 %119, i64 6, !dbg !28
  %161 = insertelement <8 x i32> %160, i32 %120, i64 7, !dbg !28
  %162 = bitcast <8 x i32> %161 to <8 x float>, !dbg !28
  %163 = fsub <8 x float> %162, %153, !dbg !40
  %164 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !36
  %165 = insertelement <4 x i32> %164, i32 %122, i64 1, !dbg !36
  %166 = insertelement <4 x i32> %165, i32 %123, i64 2, !dbg !36
  %167 = insertelement <4 x i32> %166, i32 %124, i64 3, !dbg !36
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !36
  %169 = shufflevector <4 x float> %168, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %170 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !34
  %171 = insertelement <4 x i32> %170, i32 %126, i64 1, !dbg !34
  %172 = insertelement <4 x i32> %171, i32 %127, i64 2, !dbg !34
  %173 = insertelement <4 x i32> %172, i32 %128, i64 3, !dbg !34
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !34
  %175 = shufflevector <4 x float> %174, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %176 = insertelement <8 x float> poison, float %147, i64 0, !dbg !41
  %177 = insertelement <8 x float> %176, float %146, i64 1, !dbg !41
  %178 = insertelement <8 x float> %177, float %145, i64 2, !dbg !41
  %179 = insertelement <8 x float> %178, float %144, i64 3, !dbg !41
  %180 = shufflevector <8 x float> %179, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %181 = fmul <8 x float> %163, %180, !dbg !41
  %182 = fmul <8 x float> %181, %175, !dbg !42
  %183 = fadd <8 x float> %182, %169, !dbg !43
  %184 = fcmp olt <8 x float> %183, zeroinitializer, !dbg !44
  %185 = extractelement <8 x i1> %184, i64 7, !dbg !48
  %186 = extractelement <8 x float> %183, i64 7, !dbg !48
  %187 = select i1 %185, float 0.000000e+00, float %186, !dbg !48
  %188 = extractelement <8 x i1> %184, i64 6, !dbg !48
  %189 = extractelement <8 x float> %183, i64 6, !dbg !48
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !48
  %191 = extractelement <8 x i1> %184, i64 5, !dbg !48
  %192 = extractelement <8 x float> %183, i64 5, !dbg !48
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !48
  %194 = extractelement <8 x i1> %184, i64 4, !dbg !48
  %195 = extractelement <8 x float> %183, i64 4, !dbg !48
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !48
  %197 = extractelement <8 x i1> %184, i64 3, !dbg !48
  %198 = extractelement <8 x float> %183, i64 3, !dbg !48
  %199 = select i1 %197, float 0.000000e+00, float %198, !dbg !48
  %200 = extractelement <8 x i1> %184, i64 2, !dbg !48
  %201 = extractelement <8 x float> %183, i64 2, !dbg !48
  %202 = select i1 %200, float 0.000000e+00, float %201, !dbg !48
  %203 = extractelement <8 x i1> %184, i64 1, !dbg !48
  %204 = extractelement <8 x float> %183, i64 1, !dbg !48
  %205 = select i1 %203, float 0.000000e+00, float %204, !dbg !48
  %206 = extractelement <8 x i1> %184, i64 0, !dbg !48
  %207 = extractelement <8 x float> %183, i64 0, !dbg !48
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !48
  %209 = shl nsw i32 %.decomposed21, 6, !dbg !49
  %210 = shl nsw i32 %.decomposed19, 6, !dbg !49
  %211 = add i32 %209, %130, !dbg !50
  %212 = add i32 %210, %130, !dbg !50
  %213 = mul i32 %141, 81920, !dbg !51
  %214 = mul i32 %140, 81920, !dbg !51
  %215 = add i32 %211, %213, !dbg !52
  %216 = add i32 %212, %214, !dbg !52
  %217 = sext i32 %215 to i64, !dbg !53
  %218 = getelementptr float, ptr addrspace(1) %5, i64 %217, !dbg !53
  %219 = sext i32 %216 to i64, !dbg !53
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !53
  %221 = shl i32 %11, 8, !dbg !54
  %222 = and i32 %221, 768, !dbg !54
  %223 = or disjoint i32 %222, %19, !dbg !54
  %224 = and i32 %12, 508, !dbg !54
  %225 = lshr exact i32 %222, 4, !dbg !54
  %226 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !54
  %227 = getelementptr float, ptr addrspace(3) %226, i32 %223, !dbg !54
  %228 = bitcast float %187 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !54
  %229 = or disjoint i32 %223, 64, !dbg !54
  %230 = lshr i32 %229, 6, !dbg !54
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !54
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %229, !dbg !54
  %233 = bitcast float %190 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !54
  %234 = or disjoint i32 %223, 128, !dbg !54
  %235 = lshr i32 %234, 6, !dbg !54
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !54
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %234, !dbg !54
  %238 = bitcast float %193 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !54
  %239 = or disjoint i32 %223, 192, !dbg !54
  %240 = lshr i32 %239, 6, !dbg !54
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !54
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %239, !dbg !54
  %243 = bitcast float %196 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !54
  %244 = or disjoint i32 %223, 32, !dbg !54
  %245 = getelementptr float, ptr addrspace(3) %226, i32 %244, !dbg !54
  %246 = bitcast float %199 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !54
  %247 = or disjoint i32 %223, 96, !dbg !54
  %248 = lshr i32 %247, 6, !dbg !54
  %249 = getelementptr float, ptr addrspace(3) @global_smem, i32 %248, !dbg !54
  %250 = getelementptr float, ptr addrspace(3) %249, i32 %247, !dbg !54
  %251 = bitcast float %202 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !54
  %252 = or disjoint i32 %223, 160, !dbg !54
  %253 = lshr i32 %252, 6, !dbg !54
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !54
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !54
  %256 = bitcast float %205 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !54
  %257 = or disjoint i32 %223, 224, !dbg !54
  %258 = lshr i32 %257, 6, !dbg !54
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !54
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !54
  %261 = bitcast float %208 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %262 = lshr i32 %224, 6, !dbg !54
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !54
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %224, !dbg !54
  %265 = load i32, ptr addrspace(3) %264, align 4, !dbg !54
  %266 = or disjoint i32 %224, 1, !dbg !54
  %267 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %266, !dbg !54
  %268 = load i32, ptr addrspace(3) %267, align 4, !dbg !54
  %269 = or disjoint i32 %224, 2, !dbg !54
  %270 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %269, !dbg !54
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !54
  %272 = or disjoint i32 %224, 3, !dbg !54
  %273 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %272, !dbg !54
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !54
  %275 = or disjoint i32 %224, 512, !dbg !54
  %276 = lshr i32 %275, 6, !dbg !54
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !54
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !54
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !54
  %280 = or disjoint i32 %224, 513, !dbg !54
  %281 = lshr i32 %280, 6, !dbg !54
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !54
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !54
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !54
  %285 = or disjoint i32 %224, 514, !dbg !54
  %286 = lshr i32 %285, 6, !dbg !54
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !54
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !54
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !54
  %290 = or disjoint i32 %224, 515, !dbg !54
  %291 = lshr i32 %290, 6, !dbg !54
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !54
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !54
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %268, i32 %271, i32 %274, ptr addrspace(1) %218, i1 %139) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %284, i32 %289, i32 %294, ptr addrspace(1) %220, i1 %137) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cufr6rtpilxyphvmr3pfckzyucatz7ddm5njoviukorwqusl6gnk.py", directory: "inductor_cache/uf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_42, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_42, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_42", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_42", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 50, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 63, scope: !7)
!28 = !DILocation(line: 31, column: 55, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 26, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 48, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 49, column: 33, scope: !7)
!50 = !DILocation(line: 49, column: 30, scope: !7)
!51 = !DILocation(line: 49, column: 44, scope: !7)
!52 = !DILocation(line: 49, column: 38, scope: !7)
!53 = !DILocation(line: 49, column: 25, scope: !7)
!54 = !DILocation(line: 49, column: 56, scope: !7)
!55 = !DILocation(line: 49, column: 4, scope: !7)
