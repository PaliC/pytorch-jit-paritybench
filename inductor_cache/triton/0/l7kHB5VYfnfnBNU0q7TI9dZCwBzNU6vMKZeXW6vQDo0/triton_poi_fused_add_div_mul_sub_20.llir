; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 7, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = and i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 768, !dbg !14
  %19 = icmp slt i32 %17, 768, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = and i32 %14, 60, !dbg !17
  %23 = lshr i32 %11, 1, !dbg !17
  %24 = and i32 %23, 63, !dbg !17
  %25 = or disjoint i32 %21, %22, !dbg !18
  %26 = or disjoint i32 %21, %24, !dbg !18
  %27 = icmp slt i32 %25, 64, !dbg !19
  %28 = icmp slt i32 %26, 64, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %29 = sdiv i32 %.frozen, 192, !dbg !20
  %30 = mul i32 %29, 192, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen10 = freeze i32 %17, !dbg !20
  %31 = sdiv i32 %.frozen10, 192, !dbg !20
  %32 = mul i32 %31, 192, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %32, !dbg !21
  %33 = sext i32 %.decomposed to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %18) #2, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = shl i32 %16, 6, !dbg !24
  %41 = add i32 %25, %40, !dbg !25
  %42 = sext i32 %41 to i64, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = and i1 %18, %27, !dbg !27
  %45 = and i1 %19, %28, !dbg !27
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %44) #2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = bitcast i32 %50 to float, !dbg !28
  %55 = shl nsw i32 %29, 6, !dbg !29
  %56 = add i32 %55, %25, !dbg !30
  %57 = sext i32 %56 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !31
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %44) #2, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !32
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = bitcast i32 %63 to float, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %44) #2, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !34
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !34
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !34
  %74 = bitcast i32 %70 to float, !dbg !34
  %75 = bitcast i32 %71 to float, !dbg !34
  %76 = bitcast i32 %72 to float, !dbg !34
  %77 = bitcast i32 %73 to float, !dbg !34
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %18) #2, !dbg !36
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %18) #2, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %18) #2, !dbg !36
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %18) #2, !dbg !36
  %83 = bitcast i32 %82 to float, !dbg !36
  %84 = fsub float %51, %64, !dbg !37
  %85 = fsub float %52, %65, !dbg !37
  %86 = fsub float %53, %66, !dbg !37
  %87 = fsub float %54, %67, !dbg !37
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %74) #2, !dbg !38
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %75) #2, !dbg !38
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %76) #2, !dbg !38
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %77) #2, !dbg !38
  %92 = fmul float %88, %39, !dbg !39
  %93 = fmul float %89, %39, !dbg !39
  %94 = fmul float %90, %39, !dbg !39
  %95 = fmul float %91, %39, !dbg !39
  %96 = fadd float %92, %83, !dbg !40
  %97 = fadd float %93, %83, !dbg !40
  %98 = fadd float %94, %83, !dbg !40
  %99 = fadd float %95, %83, !dbg !40
  %100 = mul i32 %26, 192, !dbg !41
  %101 = add i32 %100, %.decomposed11, !dbg !42
  %102 = mul i32 %31, 12288, !dbg !43
  %103 = add i32 %101, %102, !dbg !44
  %104 = sext i32 %103 to i64, !dbg !45
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %104, !dbg !45
  %106 = shl i32 %11, 5, !dbg !46
  %107 = and i32 %106, 480, !dbg !46
  %108 = or disjoint i32 %107, %13, !dbg !46
  %109 = and i32 %14, 508, !dbg !46
  %110 = lshr exact i32 %107, 1, !dbg !46
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !46
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %108, !dbg !46
  %113 = bitcast float %96 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !46
  %114 = or disjoint i32 %108, 8, !dbg !46
  %115 = lshr i32 %114, 1, !dbg !46
  %116 = and i32 %115, 244, !dbg !46
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !46
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %114, !dbg !46
  %119 = bitcast float %97 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !46
  %120 = or disjoint i32 %108, 16, !dbg !46
  %121 = lshr i32 %120, 1, !dbg !46
  %122 = and i32 %121, 248, !dbg !46
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !46
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %120, !dbg !46
  %125 = bitcast float %98 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !46
  %126 = or disjoint i32 %108, 24, !dbg !46
  %127 = lshr i32 %126, 1, !dbg !46
  %128 = and i32 %127, 252, !dbg !46
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !46
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %126, !dbg !46
  %131 = bitcast float %99 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %132 = lshr exact i32 %14, 1, !dbg !46
  %133 = and i32 %132, 252, !dbg !46
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !46
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %109, !dbg !46
  %.extract = load i32, ptr addrspace(3) %135, align 16, !dbg !46
  %136 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 4, !dbg !46
  %.extract7 = load i32, ptr addrspace(3) %136, align 4, !dbg !46
  %137 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 8, !dbg !46
  %.extract8 = load i32, ptr addrspace(3) %137, align 8, !dbg !46
  %138 = getelementptr inbounds i8, ptr addrspace(3) %135, i32 12, !dbg !46
  %.extract9 = load i32, ptr addrspace(3) %138, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %105, i1 %45) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czljpydhichoxdexmxala4vbl7kni7botlf6dwbzhy44njbbgmma.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_20", linkageName: "triton_poi_fused_add_div_mul_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 51, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 34, scope: !7)
!42 = !DILocation(line: 41, column: 30, scope: !7)
!43 = !DILocation(line: 41, column: 45, scope: !7)
!44 = !DILocation(line: 41, column: 39, scope: !7)
!45 = !DILocation(line: 41, column: 25, scope: !7)
!46 = !DILocation(line: 41, column: 56, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
