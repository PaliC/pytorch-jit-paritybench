; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_55(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = or disjoint i32 %10, 256, !dbg !13
  %12 = or disjoint i32 %10, 512, !dbg !13
  %13 = or disjoint i32 %10, 768, !dbg !13
  %14 = icmp slt i32 %10, 1020, !dbg !14
  %15 = icmp slt i32 %11, 1020, !dbg !14
  %16 = icmp slt i32 %12, 1020, !dbg !14
  %17 = icmp slt i32 %13, 1020, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = icmp slt i32 %19, 4, !dbg !17
  %.frozen = freeze i32 %10, !dbg !18
  %21 = sdiv i32 %.frozen, 255, !dbg !18
  %22 = mul i32 %21, 255, !dbg !19
  %.decomposed = sub i32 %.frozen, %22, !dbg !19
  %.frozen1 = freeze i32 %11, !dbg !18
  %23 = sdiv i32 %.frozen1, 255, !dbg !18
  %24 = mul i32 %23, 255, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %24, !dbg !19
  %.frozen3 = freeze i32 %12, !dbg !18
  %25 = sdiv i32 %.frozen3, 255, !dbg !18
  %26 = mul i32 %25, 255, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %26, !dbg !19
  %.frozen5 = freeze i32 %13, !dbg !18
  %27 = sdiv i32 %.frozen5, 255, !dbg !18
  %28 = mul i32 %27, 255, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %28, !dbg !19
  %29 = mul i32 %18, 1020, !dbg !20
  %30 = add i32 %29, 255, !dbg !20
  %31 = add i32 %29, 510, !dbg !20
  %32 = add i32 %29, 765, !dbg !20
  %33 = mul i32 %21, 1020, !dbg !21
  %34 = mul i32 %23, 1020, !dbg !21
  %35 = mul i32 %25, 1020, !dbg !21
  %36 = mul i32 %27, 1020, !dbg !21
  %37 = add i32 %33, %.decomposed, !dbg !22
  %38 = add i32 %37, %29, !dbg !23
  %39 = add i32 %37, %30, !dbg !23
  %40 = add i32 %37, %31, !dbg !23
  %41 = add i32 %37, %32, !dbg !23
  %42 = add i32 %34, %.decomposed2, !dbg !22
  %43 = add i32 %42, %29, !dbg !23
  %44 = add i32 %42, %30, !dbg !23
  %45 = add i32 %42, %31, !dbg !23
  %46 = add i32 %42, %32, !dbg !23
  %47 = add i32 %35, %.decomposed4, !dbg !22
  %48 = add i32 %47, %29, !dbg !23
  %49 = add i32 %47, %30, !dbg !23
  %50 = add i32 %47, %31, !dbg !23
  %51 = add i32 %47, %32, !dbg !23
  %52 = add i32 %36, %.decomposed6, !dbg !22
  %53 = add i32 %52, %29, !dbg !23
  %54 = add i32 %52, %30, !dbg !23
  %55 = add i32 %52, %31, !dbg !23
  %56 = add i32 %52, %32, !dbg !23
  %57 = sext i32 %38 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %39 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %40 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %41 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %43 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %44 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %45 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = sext i32 %46 to i64, !dbg !24
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !24
  %73 = sext i32 %48 to i64, !dbg !24
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !24
  %75 = sext i32 %49 to i64, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !24
  %77 = sext i32 %50 to i64, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !24
  %79 = sext i32 %51 to i64, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !24
  %81 = sext i32 %53 to i64, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !24
  %83 = sext i32 %54 to i64, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !24
  %85 = sext i32 %55 to i64, !dbg !24
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !24
  %87 = sext i32 %56 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !24
  %89 = and i1 %20, %14, !dbg !25
  %90 = and i1 %15, %20, !dbg !25
  %91 = and i1 %16, %20, !dbg !25
  %92 = and i1 %17, %20, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %89) #1, !dbg !26
  %94 = bitcast i32 %93 to float, !dbg !26
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %89) #1, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %89) #1, !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %89) #1, !dbg !26
  %100 = bitcast i32 %99 to float, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %90) #1, !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %90) #1, !dbg !26
  %104 = bitcast i32 %103 to float, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %90) #1, !dbg !26
  %106 = bitcast i32 %105 to float, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %90) #1, !dbg !26
  %108 = bitcast i32 %107 to float, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %91) #1, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %91) #1, !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %91) #1, !dbg !26
  %114 = bitcast i32 %113 to float, !dbg !26
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %91) #1, !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %92) #1, !dbg !26
  %118 = bitcast i32 %117 to float, !dbg !26
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %92) #1, !dbg !26
  %120 = bitcast i32 %119 to float, !dbg !26
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %92) #1, !dbg !26
  %122 = bitcast i32 %121 to float, !dbg !26
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %92) #1, !dbg !26
  %124 = bitcast i32 %123 to float, !dbg !26
  %125 = sext i32 %.decomposed to i64, !dbg !27
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !27
  %127 = sext i32 %.decomposed2 to i64, !dbg !27
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !27
  %129 = sext i32 %.decomposed4 to i64, !dbg !27
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !27
  %131 = sext i32 %.decomposed6 to i64, !dbg !27
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %14) #1, !dbg !28
  %134 = bitcast i32 %133 to float, !dbg !28
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %15) #1, !dbg !28
  %136 = bitcast i32 %135 to float, !dbg !28
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %16) #1, !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %17) #1, !dbg !28
  %140 = bitcast i32 %139 to float, !dbg !28
  %141 = fadd float %94, %134, !dbg !29
  %142 = fadd float %96, %134, !dbg !29
  %143 = fadd float %98, %134, !dbg !29
  %144 = fadd float %100, %134, !dbg !29
  %145 = fadd float %102, %136, !dbg !29
  %146 = fadd float %104, %136, !dbg !29
  %147 = fadd float %106, %136, !dbg !29
  %148 = fadd float %108, %136, !dbg !29
  %149 = fadd float %110, %138, !dbg !29
  %150 = fadd float %112, %138, !dbg !29
  %151 = fadd float %114, %138, !dbg !29
  %152 = fadd float %116, %138, !dbg !29
  %153 = fadd float %118, %140, !dbg !29
  %154 = fadd float %120, %140, !dbg !29
  %155 = fadd float %122, %140, !dbg !29
  %156 = fadd float %124, %140, !dbg !29
  %157 = add i32 %10, %18, !dbg !30
  %158 = shl i32 %157, 2, !dbg !30
  %159 = add i32 %18, %11, !dbg !30
  %160 = shl i32 %159, 2, !dbg !30
  %161 = add i32 %18, %12, !dbg !30
  %162 = shl i32 %161, 2, !dbg !30
  %163 = add i32 %18, %13, !dbg !30
  %164 = shl i32 %163, 2, !dbg !30
  %165 = sext i32 %158 to i64, !dbg !31
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !31
  %167 = sext i32 %160 to i64, !dbg !31
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !31
  %169 = sext i32 %162 to i64, !dbg !31
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !31
  %171 = sext i32 %164 to i64, !dbg !31
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !31
  %173 = bitcast float %141 to i32, !dbg !32
  %174 = bitcast float %142 to i32, !dbg !32
  %175 = bitcast float %143 to i32, !dbg !32
  %176 = bitcast float %144 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %173, i32 %174, i32 %175, i32 %176, ptr addrspace(1) %166, i1 %89) #1, !dbg !32
  %177 = bitcast float %145 to i32, !dbg !32
  %178 = bitcast float %146 to i32, !dbg !32
  %179 = bitcast float %147 to i32, !dbg !32
  %180 = bitcast float %148 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %177, i32 %178, i32 %179, i32 %180, ptr addrspace(1) %168, i1 %90) #1, !dbg !32
  %181 = bitcast float %149 to i32, !dbg !32
  %182 = bitcast float %150 to i32, !dbg !32
  %183 = bitcast float %151 to i32, !dbg !32
  %184 = bitcast float %152 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %181, i32 %182, i32 %183, i32 %184, ptr addrspace(1) %170, i1 %91) #1, !dbg !32
  %185 = bitcast float %153 to i32, !dbg !32
  %186 = bitcast float %154 to i32, !dbg !32
  %187 = bitcast float %155 to i32, !dbg !32
  %188 = bitcast float %156 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %185, i32 %186, i32 %187, i32 %188, ptr addrspace(1) %172, i1 %92) #1, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czv2qzurjhgq2hpag7sbb7ffhkpsrgbljbkhjuj3qlnzbgfpkdk6.py", directory: "inductor_cache/zv")
!4 = !{ptr @triton_poi_fused_convolution_55, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_55, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_55", linkageName: "triton_poi_fused_convolution_55", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 62, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
