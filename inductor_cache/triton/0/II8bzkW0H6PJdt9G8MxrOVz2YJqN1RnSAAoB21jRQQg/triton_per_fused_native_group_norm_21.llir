; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 5, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %11, 16, !dbg !12
  %14 = or disjoint i32 %11, 24, !dbg !12
  %15 = and i32 %9, 31, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %16, 128, !dbg !14
  %21 = icmp slt i32 %17, 128, !dbg !14
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = shl i32 %9, 2, !dbg !15
  %25 = and i32 %24, 124, !dbg !15
  %26 = shl i32 %16, 7, !dbg !16
  %27 = shl i32 %17, 7, !dbg !16
  %28 = shl i32 %18, 7, !dbg !16
  %29 = shl i32 %19, 7, !dbg !16
  %30 = or disjoint i32 %26, %25, !dbg !17
  %31 = or disjoint i32 %27, %25, !dbg !17
  %32 = or disjoint i32 %28, %25, !dbg !17
  %33 = or disjoint i32 %29, %25, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %47 = bitcast i32 %43 to float, !dbg !19
  %48 = bitcast i32 %44 to float, !dbg !19
  %49 = bitcast i32 %45 to float, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !19
  %56 = bitcast i32 %52 to float, !dbg !19
  %57 = bitcast i32 %53 to float, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %65 = bitcast i32 %61 to float, !dbg !19
  %66 = bitcast i32 %62 to float, !dbg !19
  %67 = bitcast i32 %63 to float, !dbg !19
  %68 = bitcast i32 %64 to float, !dbg !19
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !19
  %74 = bitcast i32 %70 to float, !dbg !19
  %75 = bitcast i32 %71 to float, !dbg !19
  %76 = bitcast i32 %72 to float, !dbg !19
  %77 = bitcast i32 %73 to float, !dbg !19
  %78 = fadd float %47, %48, !dbg !20
  %79 = fadd float %78, %49, !dbg !20
  %80 = fadd float %79, %50, !dbg !20
  %81 = select i1 %20, float %80, float 0.000000e+00, !dbg !20
  %82 = fadd float %56, %57, !dbg !20
  %83 = fadd float %82, %58, !dbg !20
  %84 = fadd float %83, %59, !dbg !20
  %85 = select i1 %21, float %84, float 0.000000e+00, !dbg !20
  %86 = fadd float %65, %66, !dbg !20
  %87 = fadd float %86, %67, !dbg !20
  %88 = fadd float %87, %68, !dbg !20
  %89 = select i1 %22, float %88, float 0.000000e+00, !dbg !20
  %90 = fadd float %74, %75, !dbg !20
  %91 = fadd float %90, %76, !dbg !20
  %92 = fadd float %91, %77, !dbg !20
  %93 = select i1 %23, float %92, float 0.000000e+00, !dbg !20
  %94 = bitcast float %81 to i32, !dbg !25
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = fadd float %81, %96, !dbg !20
  %98 = bitcast float %97 to i32, !dbg !25
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = fadd float %97, %100, !dbg !20
  %102 = bitcast float %101 to i32, !dbg !25
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = fadd float %101, %104, !dbg !20
  %106 = bitcast float %105 to i32, !dbg !25
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fadd float %105, %108, !dbg !20
  %110 = bitcast float %109 to i32, !dbg !25
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = fadd float %109, %112, !dbg !20
  %114 = bitcast float %85 to i32, !dbg !25
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = fadd float %85, %116, !dbg !20
  %118 = bitcast float %117 to i32, !dbg !25
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = fadd float %117, %120, !dbg !20
  %122 = bitcast float %121 to i32, !dbg !25
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = fadd float %121, %124, !dbg !20
  %126 = bitcast float %125 to i32, !dbg !25
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fadd float %125, %128, !dbg !20
  %130 = bitcast float %129 to i32, !dbg !25
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fadd float %129, %132, !dbg !20
  %134 = bitcast float %89 to i32, !dbg !25
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = fadd float %89, %136, !dbg !20
  %138 = bitcast float %137 to i32, !dbg !25
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 8, i32 31), !dbg !25
  %140 = bitcast i32 %139 to float, !dbg !25
  %141 = fadd float %137, %140, !dbg !20
  %142 = bitcast float %141 to i32, !dbg !25
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !25
  %144 = bitcast i32 %143 to float, !dbg !25
  %145 = fadd float %141, %144, !dbg !20
  %146 = bitcast float %145 to i32, !dbg !25
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !25
  %148 = bitcast i32 %147 to float, !dbg !25
  %149 = fadd float %145, %148, !dbg !20
  %150 = bitcast float %149 to i32, !dbg !25
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 1, i32 31), !dbg !25
  %152 = bitcast i32 %151 to float, !dbg !25
  %153 = fadd float %149, %152, !dbg !20
  %154 = bitcast float %93 to i32, !dbg !25
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 16, i32 31), !dbg !25
  %156 = bitcast i32 %155 to float, !dbg !25
  %157 = fadd float %93, %156, !dbg !20
  %158 = bitcast float %157 to i32, !dbg !25
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !25
  %160 = bitcast i32 %159 to float, !dbg !25
  %161 = fadd float %157, %160, !dbg !20
  %162 = bitcast float %161 to i32, !dbg !25
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !25
  %164 = bitcast i32 %163 to float, !dbg !25
  %165 = fadd float %161, %164, !dbg !20
  %166 = bitcast float %165 to i32, !dbg !25
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !25
  %168 = bitcast i32 %167 to float, !dbg !25
  %169 = fadd float %165, %168, !dbg !20
  %170 = bitcast float %169 to i32, !dbg !25
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !25
  %172 = bitcast i32 %171 to float, !dbg !25
  %173 = fadd float %169, %172, !dbg !20
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %175 = bitcast float %113 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #5, !dbg !26
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %177 = bitcast float %133 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #5, !dbg !26
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %179 = bitcast float %153 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #5, !dbg !26
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %181 = bitcast float %173 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !26
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float 1.280000e+02) #5, !dbg !26
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 1.280000e+02) #5, !dbg !26
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 1.280000e+02) #5, !dbg !26
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 1.280000e+02) #5, !dbg !26
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 1.280000e+02) #5, !dbg !26
  %189 = fsub float %47, %185, !dbg !27
  %190 = fsub float %48, %185, !dbg !27
  %191 = fsub float %49, %185, !dbg !27
  %192 = fsub float %50, %185, !dbg !27
  %193 = fsub float %56, %186, !dbg !27
  %194 = fsub float %57, %186, !dbg !27
  %195 = fsub float %58, %186, !dbg !27
  %196 = fsub float %59, %186, !dbg !27
  %197 = fsub float %65, %187, !dbg !27
  %198 = fsub float %66, %187, !dbg !27
  %199 = fsub float %67, %187, !dbg !27
  %200 = fsub float %68, %187, !dbg !27
  %201 = fsub float %74, %188, !dbg !27
  %202 = fsub float %75, %188, !dbg !27
  %203 = fsub float %76, %188, !dbg !27
  %204 = fsub float %77, %188, !dbg !27
  %205 = fmul float %189, %189, !dbg !28
  %206 = fmul float %190, %190, !dbg !28
  %207 = fmul float %191, %191, !dbg !28
  %208 = fmul float %192, %192, !dbg !28
  %209 = fmul float %193, %193, !dbg !28
  %210 = fmul float %194, %194, !dbg !28
  %211 = fmul float %195, %195, !dbg !28
  %212 = fmul float %196, %196, !dbg !28
  %213 = fmul float %197, %197, !dbg !28
  %214 = fmul float %198, %198, !dbg !28
  %215 = fmul float %199, %199, !dbg !28
  %216 = fmul float %200, %200, !dbg !28
  %217 = fmul float %201, %201, !dbg !28
  %218 = fmul float %202, %202, !dbg !28
  %219 = fmul float %203, %203, !dbg !28
  %220 = fmul float %204, %204, !dbg !28
  %221 = fadd float %205, %206, !dbg !29
  %222 = fadd float %207, %221, !dbg !29
  %223 = fadd float %208, %222, !dbg !29
  %224 = select i1 %20, float %223, float 0.000000e+00, !dbg !29
  %225 = fadd float %209, %210, !dbg !29
  %226 = fadd float %211, %225, !dbg !29
  %227 = fadd float %212, %226, !dbg !29
  %228 = select i1 %21, float %227, float 0.000000e+00, !dbg !29
  %229 = fadd float %213, %214, !dbg !29
  %230 = fadd float %215, %229, !dbg !29
  %231 = fadd float %216, %230, !dbg !29
  %232 = select i1 %22, float %231, float 0.000000e+00, !dbg !29
  %233 = fadd float %217, %218, !dbg !29
  %234 = fadd float %219, %233, !dbg !29
  %235 = fadd float %220, %234, !dbg !29
  %236 = select i1 %23, float %235, float 0.000000e+00, !dbg !29
  %237 = bitcast float %224 to i32, !dbg !31
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 16, i32 31), !dbg !31
  %239 = bitcast i32 %238 to float, !dbg !31
  %240 = fadd float %224, %239, !dbg !29
  %241 = bitcast float %240 to i32, !dbg !31
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !31
  %243 = bitcast i32 %242 to float, !dbg !31
  %244 = fadd float %240, %243, !dbg !29
  %245 = bitcast float %244 to i32, !dbg !31
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !31
  %247 = bitcast i32 %246 to float, !dbg !31
  %248 = fadd float %244, %247, !dbg !29
  %249 = bitcast float %248 to i32, !dbg !31
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !31
  %251 = bitcast i32 %250 to float, !dbg !31
  %252 = fadd float %248, %251, !dbg !29
  %253 = bitcast float %252 to i32, !dbg !31
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !31
  %255 = bitcast i32 %254 to float, !dbg !31
  %256 = fadd float %252, %255, !dbg !29
  %257 = bitcast float %228 to i32, !dbg !31
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 16, i32 31), !dbg !31
  %259 = bitcast i32 %258 to float, !dbg !31
  %260 = fadd float %228, %259, !dbg !29
  %261 = bitcast float %260 to i32, !dbg !31
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !31
  %263 = bitcast i32 %262 to float, !dbg !31
  %264 = fadd float %260, %263, !dbg !29
  %265 = bitcast float %264 to i32, !dbg !31
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !31
  %267 = bitcast i32 %266 to float, !dbg !31
  %268 = fadd float %264, %267, !dbg !29
  %269 = bitcast float %268 to i32, !dbg !31
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 2, i32 31), !dbg !31
  %271 = bitcast i32 %270 to float, !dbg !31
  %272 = fadd float %268, %271, !dbg !29
  %273 = bitcast float %272 to i32, !dbg !31
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 1, i32 31), !dbg !31
  %275 = bitcast i32 %274 to float, !dbg !31
  %276 = fadd float %272, %275, !dbg !29
  %277 = bitcast float %232 to i32, !dbg !31
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 16, i32 31), !dbg !31
  %279 = bitcast i32 %278 to float, !dbg !31
  %280 = fadd float %232, %279, !dbg !29
  %281 = bitcast float %280 to i32, !dbg !31
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 8, i32 31), !dbg !31
  %283 = bitcast i32 %282 to float, !dbg !31
  %284 = fadd float %280, %283, !dbg !29
  %285 = bitcast float %284 to i32, !dbg !31
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !31
  %287 = bitcast i32 %286 to float, !dbg !31
  %288 = fadd float %284, %287, !dbg !29
  %289 = bitcast float %288 to i32, !dbg !31
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 2, i32 31), !dbg !31
  %291 = bitcast i32 %290 to float, !dbg !31
  %292 = fadd float %288, %291, !dbg !29
  %293 = bitcast float %292 to i32, !dbg !31
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 1, i32 31), !dbg !31
  %295 = bitcast i32 %294 to float, !dbg !31
  %296 = fadd float %292, %295, !dbg !29
  %297 = bitcast float %236 to i32, !dbg !31
  %298 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %297, i32 16, i32 31), !dbg !31
  %299 = bitcast i32 %298 to float, !dbg !31
  %300 = fadd float %236, %299, !dbg !29
  %301 = bitcast float %300 to i32, !dbg !31
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 8, i32 31), !dbg !31
  %303 = bitcast i32 %302 to float, !dbg !31
  %304 = fadd float %300, %303, !dbg !29
  %305 = bitcast float %304 to i32, !dbg !31
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 4, i32 31), !dbg !31
  %307 = bitcast i32 %306 to float, !dbg !31
  %308 = fadd float %304, %307, !dbg !29
  %309 = bitcast float %308 to i32, !dbg !31
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !31
  %311 = bitcast i32 %310 to float, !dbg !31
  %312 = fadd float %308, %311, !dbg !29
  %313 = bitcast float %312 to i32, !dbg !31
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !31
  %315 = bitcast i32 %314 to float, !dbg !31
  %316 = fadd float %312, %315, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %317 = bitcast float %256 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %317, i1 true) #5, !dbg !32
  %318 = bitcast float %276 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %318, i1 true) #5, !dbg !32
  %319 = bitcast float %296 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %319, i1 true) #5, !dbg !32
  %320 = bitcast float %316 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %320, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %321 = load float, ptr addrspace(3) %182, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %317, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %318, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %319, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %320, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %322 = load i32, ptr addrspace(3) %182, align 4, !dbg !33
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %321, float 1.280000e+02) #5, !dbg !34
  %324 = fadd float %323, 0x3EE4F8B580000000, !dbg !35
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %325, 0, !dbg !32
  br i1 %.not.i, label %328, label %326, !dbg !32

326:                                              ; preds = %6
  %327 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %324), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

328:                                              ; preds = %6
  %329 = tail call float @llvm.nvvm.rsqrt.approx.f(float %324), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %326, %328
  %.0.i = phi float [ %327, %326 ], [ %329, %328 ], !dbg !32
  %330 = or disjoint i32 %8, %15, !dbg !13
  %331 = icmp slt i32 %330, 128, !dbg !14
  %332 = sext i32 %330 to i64, !dbg !36
  %333 = getelementptr float, ptr addrspace(1) %3, i64 %332, !dbg !36
  %334 = and i32 %9, 224, !dbg !37
  %335 = icmp eq i32 %334, 0, !dbg !37
  %336 = bitcast float %.0.i to i32, !dbg !37
  %337 = and i1 %335, %331, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %336, ptr addrspace(1) %333, i1 %337) #5, !dbg !37
  %338 = getelementptr float, ptr addrspace(1) %1, i64 %332, !dbg !38
  %339 = bitcast float %184 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %339, ptr addrspace(1) %338, i1 %337) #5, !dbg !39
  %340 = getelementptr float, ptr addrspace(1) %2, i64 %332, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %322, ptr addrspace(1) %340, i1 %337) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuvzyfr2qrymhrmvet5wjktj7vhg5hvhyx5at5qgjgpvhi5nlryi.py", directory: "inductor_cache/uv")
!4 = !{ptr @triton_per_fused_native_group_norm_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_21", linkageName: "triton_per_fused_native_group_norm_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 44, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 44, column: 29, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 25, scope: !7)
!37 = !DILocation(line: 50, column: 37, scope: !7)
!38 = !DILocation(line: 51, column: 25, scope: !7)
!39 = !DILocation(line: 51, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 52, column: 4, scope: !7)
