; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_20(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 6, !dbg !14
  %12 = srem i32 %10, 6, !dbg !15
  %13 = add nsw i32 %12, -1, !dbg !16
  %14 = icmp sgt i32 %12, 0, !dbg !17
  %15 = add i32 %9, -7, !dbg !18
  %16 = add i32 %9, -6, !dbg !18
  %17 = sext i32 %15 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = sext i32 %16 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = add nsw i32 %12, 1, !dbg !20
  %22 = icmp ult i32 %21, 6, !dbg !20
  %23 = add i32 %9, -5, !dbg !21
  %24 = add i32 %9, -4, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %30 = insertelement <2 x i32> %29, i32 %11, i64 1, !dbg !15
  %31 = srem <2 x i32> %30, splat (i32 6), !dbg !15
  %32 = extractelement <2 x i32> %31, i64 1, !dbg !23
  %33 = add nsw i32 %32, -1, !dbg !24
  %34 = icmp sgt i32 %32, 0, !dbg !25
  %35 = extractelement <2 x i32> %31, i64 0, !dbg !20
  %36 = add nsw i32 %35, -1, !dbg !16
  %37 = icmp sgt <2 x i32> %31, <i32 0, i32 -1>, !dbg !17
  %38 = extractelement <2 x i1> %37, i64 0, !dbg !26
  %39 = and i1 %38, %34, !dbg !26
  %40 = and i1 %14, %34, !dbg !26
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %39, i32 0, i1 %39) #1, !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %40, i32 0, i1 %40) #1, !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = icmp sgt i32 %35, -1, !dbg !28
  %46 = and i1 %45, %34, !dbg !29
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #1, !dbg !30
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !30
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !30
  %50 = bitcast i32 %48 to float, !dbg !30
  %51 = bitcast i32 %49 to float, !dbg !30
  %52 = fadd float %42, %50, !dbg !31
  %53 = fadd float %44, %51, !dbg !31
  %54 = icmp ult i32 %35, 6, !dbg !20
  %55 = and i1 %54, %34, !dbg !32
  %56 = and i1 %22, %34, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %55, i32 0, i1 %55) #1, !dbg !33
  %58 = bitcast i32 %57 to float, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %56, i32 0, i1 %56) #1, !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = fadd float %52, %58, !dbg !34
  %62 = fadd float %53, %60, !dbg !34
  %63 = extractelement <2 x i1> %37, i64 1, !dbg !35
  %64 = and i1 %38, %63, !dbg !35
  %65 = and i1 %14, %63, !dbg !35
  %66 = add i32 %9, -1, !dbg !36
  %67 = sext i32 %66 to i64, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !37
  %69 = sext i32 %10 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !37
  %71 = getelementptr i8, ptr addrspace(1) %70, i64 -4, !dbg !37
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 0, i1 %64) #1, !dbg !38
  %73 = bitcast i32 %72 to float, !dbg !38
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %65, i32 0, i1 %65) #1, !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = fadd float %61, %73, !dbg !39
  %77 = fadd float %62, %75, !dbg !39
  %78 = or i32 %32, %35, !dbg !40
  %79 = icmp sgt i32 %78, -1, !dbg !40
  %80 = sext i32 %9 to i64, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !41
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !42
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !42
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !42
  %85 = bitcast i32 %83 to float, !dbg !42
  %86 = bitcast i32 %84 to float, !dbg !42
  %87 = fadd float %76, %85, !dbg !43
  %88 = fadd float %77, %86, !dbg !43
  %89 = and i1 %54, %63, !dbg !44
  %90 = and i1 %22, %63, !dbg !44
  %91 = add i32 %9, 2, !dbg !45
  %92 = sext i32 %91 to i64, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !46
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %89, i32 0, i1 %89) #1, !dbg !47
  %95 = bitcast i32 %94 to float, !dbg !47
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %90, i32 0, i1 %90) #1, !dbg !47
  %97 = bitcast i32 %96 to float, !dbg !47
  %98 = fadd float %87, %95, !dbg !48
  %99 = fadd float %88, %97, !dbg !48
  %100 = add nsw i32 %32, 1, !dbg !49
  %101 = icmp ult i32 %100, 6, !dbg !49
  %102 = and i1 %38, %101, !dbg !50
  %103 = and i1 %14, %101, !dbg !50
  %104 = add i32 %9, 5, !dbg !51
  %105 = add i32 %9, 6, !dbg !51
  %106 = sext i32 %104 to i64, !dbg !52
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !52
  %108 = sext i32 %105 to i64, !dbg !52
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !52
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %102, i32 0, i1 %102) #1, !dbg !53
  %111 = bitcast i32 %110 to float, !dbg !53
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %103, i32 0, i1 %103) #1, !dbg !53
  %113 = bitcast i32 %112 to float, !dbg !53
  %114 = fadd float %98, %111, !dbg !54
  %115 = fadd float %99, %113, !dbg !54
  %116 = and i1 %45, %101, !dbg !55
  %117 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %109, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #1, !dbg !56
  %118 = extractvalue { i32, i32 } %117, 0, !dbg !56
  %119 = extractvalue { i32, i32 } %117, 1, !dbg !56
  %120 = bitcast i32 %118 to float, !dbg !56
  %121 = bitcast i32 %119 to float, !dbg !56
  %122 = fadd float %114, %120, !dbg !57
  %123 = fadd float %115, %121, !dbg !57
  %124 = and i1 %54, %101, !dbg !58
  %125 = and i1 %22, %101, !dbg !58
  %126 = add i32 %9, 7, !dbg !59
  %127 = add i32 %9, 8, !dbg !59
  %128 = sext i32 %126 to i64, !dbg !60
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !60
  %130 = sext i32 %127 to i64, !dbg !60
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !60
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %124, i32 0, i1 %124) #1, !dbg !61
  %133 = bitcast i32 %132 to float, !dbg !61
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %125, i32 0, i1 %125) #1, !dbg !61
  %135 = bitcast i32 %134 to float, !dbg !61
  %136 = fadd float %122, %133, !dbg !62
  %137 = fadd float %123, %135, !dbg !62
  %138 = icmp sgt i32 %35, 1, !dbg !63
  %139 = icmp sgt i32 %12, 1, !dbg !63
  %140 = select i1 %138, i32 %36, i32 0, !dbg !64
  %141 = select i1 %139, i32 %13, i32 0, !dbg !64
  %142 = icmp sgt i32 %32, 1, !dbg !65
  %143 = select i1 %142, i32 %33, i32 0, !dbg !66
  %144 = add nsw i32 %35, 2, !dbg !67
  %145 = add nsw i32 %12, 2, !dbg !67
  %146 = icmp sgt i32 %35, 3, !dbg !68
  %147 = select i1 %146, i32 6, i32 0, !dbg !69
  %148 = icmp slt i32 %35, 4, !dbg !70
  %149 = select i1 %148, i32 %144, i32 0, !dbg !71
  %150 = select i1 %148, i32 %145, i32 0, !dbg !71
  %151 = add nsw i32 %147, %149, !dbg !72
  %152 = add nsw i32 %147, %150, !dbg !72
  %153 = add nsw i32 %32, 2, !dbg !73
  %154 = icmp sgt i32 %32, 3, !dbg !74
  %155 = select i1 %154, i32 6, i32 0, !dbg !75
  %156 = icmp slt i32 %32, 4, !dbg !23
  %157 = select i1 %156, i32 %153, i32 0, !dbg !76
  %158 = add nsw i32 %155, %157, !dbg !77
  %reass.add = sub nsw i32 %158, %143
  %reass.mul = mul nsw i32 %reass.add, %151
  %reass.add4 = sub nsw i32 %143, %158
  %reass.mul5 = mul nsw i32 %reass.add4, %140
  %159 = add nsw i32 %reass.mul5, %reass.mul, !dbg !78
  %reass.mul3 = mul nsw i32 %reass.add, %152
  %reass.mul7 = mul nsw i32 %reass.add4, %141
  %160 = add nsw i32 %reass.mul7, %reass.mul3, !dbg !78
  %161 = sitofp i32 %159 to float, !dbg !79
  %162 = sitofp i32 %160 to float, !dbg !79
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %161) #1, !dbg !79
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %162) #1, !dbg !79
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !80
  %166 = bitcast float %163 to i32, !dbg !81
  %167 = bitcast float %164 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %167, ptr addrspace(1) %165, i1 true) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kog3gu4ssrz2uimt7qyjpvta67aiu4ddnnd6h7wypw6sdilpf4.py", directory: "inductor_cache/3k")
!4 = !{ptr @triton_poi_fused_avg_pool2d_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_20", linkageName: "triton_poi_fused_avg_pool2d_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 18, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 38, scope: !7)
!19 = !DILocation(line: 38, column: 31, scope: !7)
!20 = !DILocation(line: 49, column: 20, scope: !7)
!21 = !DILocation(line: 51, column: 38, scope: !7)
!22 = !DILocation(line: 51, column: 31, scope: !7)
!23 = !DILocation(line: 79, column: 251, scope: !7)
!24 = !DILocation(line: 27, column: 18, scope: !7)
!25 = !DILocation(line: 29, column: 19, scope: !7)
!26 = !DILocation(line: 37, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 43, scope: !7)
!28 = !DILocation(line: 40, column: 21, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 43, scope: !7)
!31 = !DILocation(line: 45, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 19, scope: !7)
!33 = !DILocation(line: 51, column: 43, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 57, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 38, scope: !7)
!37 = !DILocation(line: 58, column: 31, scope: !7)
!38 = !DILocation(line: 58, column: 43, scope: !7)
!39 = !DILocation(line: 59, column: 20, scope: !7)
!40 = !DILocation(line: 60, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 31, scope: !7)
!42 = !DILocation(line: 61, column: 36, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 35, scope: !7)
!46 = !DILocation(line: 64, column: 31, scope: !7)
!47 = !DILocation(line: 64, column: 40, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 35, scope: !7)
!52 = !DILocation(line: 71, column: 31, scope: !7)
!53 = !DILocation(line: 71, column: 40, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 73, column: 20, scope: !7)
!56 = !DILocation(line: 74, column: 40, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 35, scope: !7)
!60 = !DILocation(line: 77, column: 31, scope: !7)
!61 = !DILocation(line: 77, column: 40, scope: !7)
!62 = !DILocation(line: 78, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 72, scope: !7)
!64 = !DILocation(line: 79, column: 57, scope: !7)
!65 = !DILocation(line: 79, column: 137, scope: !7)
!66 = !DILocation(line: 79, column: 122, scope: !7)
!67 = !DILocation(line: 79, column: 164, scope: !7)
!68 = !DILocation(line: 79, column: 160, scope: !7)
!69 = !DILocation(line: 79, column: 152, scope: !7)
!70 = !DILocation(line: 79, column: 195, scope: !7)
!71 = !DILocation(line: 79, column: 183, scope: !7)
!72 = !DILocation(line: 79, column: 171, scope: !7)
!73 = !DILocation(line: 79, column: 220, scope: !7)
!74 = !DILocation(line: 79, column: 216, scope: !7)
!75 = !DILocation(line: 79, column: 208, scope: !7)
!76 = !DILocation(line: 79, column: 239, scope: !7)
!77 = !DILocation(line: 79, column: 227, scope: !7)
!78 = !DILocation(line: 79, column: 389, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 81, column: 25, scope: !7)
!81 = !DILocation(line: 81, column: 37, scope: !7)
!82 = !DILocation(line: 81, column: 4, scope: !7)
