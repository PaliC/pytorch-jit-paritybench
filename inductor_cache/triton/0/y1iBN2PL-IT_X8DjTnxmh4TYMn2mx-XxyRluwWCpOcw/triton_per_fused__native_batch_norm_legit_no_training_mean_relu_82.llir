; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_82(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %10 = shl i32 %9, 2, !dbg !11
  %11 = and i32 %10, 252, !dbg !11
  %12 = srem i32 %8, 342, !dbg !12
  %13 = shl i32 %8, 8, !dbg !13
  %14 = or disjoint i32 %13, %11, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #5, !dbg !16
  %18 = sext i32 %12 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #5, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #5, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !24
  %40 = fadd float %29, 0x3EE4F8B580000000, !dbg !25
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i11 = icmp eq i32 %47, 0, !dbg !26
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i14 = icmp eq i32 %48, 0, !dbg !26
  br i1 %.not.i11, label %54, label %49, !dbg !26

49:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %52, label %50, !dbg !26

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %57, label %55, !dbg !26

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #5, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %50, %52, %55, %57
  %.0.i13 = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %60 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %61 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %62 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %63 = lshr i32 %9, 5, !dbg !11
  %64 = and i32 %9, 31, !dbg !11
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !27
  %66 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !16
  %67 = insertelement <4 x i32> %66, i32 %60, i64 1, !dbg !16
  %68 = insertelement <4 x i32> %67, i32 %61, i64 2, !dbg !16
  %69 = insertelement <4 x i32> %68, i32 %62, i64 3, !dbg !16
  %70 = bitcast <4 x i32> %69 to <4 x float>, !dbg !16
  %71 = insertelement <4 x i32> poison, i32 %23, i64 0, !dbg !28
  %72 = bitcast <4 x i32> %71 to <4 x float>, !dbg !28
  %73 = shufflevector <4 x float> %72, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !28
  %74 = fsub <4 x float> %70, %73, !dbg !28
  %75 = insertelement <4 x float> poison, float %65, i64 0, !dbg !29
  %76 = shufflevector <4 x float> %75, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !29
  %77 = fmul <4 x float> %74, %76, !dbg !29
  %78 = insertelement <4 x i32> poison, i32 %34, i64 0, !dbg !30
  %79 = bitcast <4 x i32> %78 to <4 x float>, !dbg !30
  %80 = shufflevector <4 x float> %79, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !30
  %81 = fmul <4 x float> %77, %80, !dbg !30
  %82 = insertelement <4 x i32> poison, i32 %39, i64 0, !dbg !31
  %83 = bitcast <4 x i32> %82 to <4 x float>, !dbg !31
  %84 = shufflevector <4 x float> %83, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !31
  %85 = fadd <4 x float> %81, %84, !dbg !31
  %86 = fcmp olt <4 x float> %85, zeroinitializer, !dbg !32
  %87 = extractelement <4 x i1> %86, i64 3, !dbg !36
  %88 = extractelement <4 x float> %85, i64 3, !dbg !36
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !36
  %90 = extractelement <4 x i1> %86, i64 2, !dbg !36
  %91 = extractelement <4 x float> %85, i64 2, !dbg !36
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !36
  %93 = extractelement <4 x i1> %86, i64 1, !dbg !36
  %94 = extractelement <4 x float> %85, i64 1, !dbg !36
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !36
  %96 = extractelement <4 x i1> %86, i64 0, !dbg !36
  %97 = extractelement <4 x float> %85, i64 0, !dbg !36
  %98 = select i1 %96, float 0.000000e+00, float %97, !dbg !36
  %99 = fadd float %89, %92, !dbg !37
  %100 = fadd float %95, %99, !dbg !37
  %101 = fadd float %98, %100, !dbg !37
  %102 = bitcast float %101 to i32, !dbg !42
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 16, i32 31), !dbg !42
  %104 = bitcast i32 %103 to float, !dbg !42
  %105 = fadd float %101, %104, !dbg !37
  %106 = bitcast float %105 to i32, !dbg !42
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !42
  %108 = bitcast i32 %107 to float, !dbg !42
  %109 = fadd float %105, %108, !dbg !37
  %110 = bitcast float %109 to i32, !dbg !42
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !42
  %112 = bitcast i32 %111 to float, !dbg !42
  %113 = fadd float %109, %112, !dbg !37
  %114 = bitcast float %113 to i32, !dbg !42
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !42
  %116 = bitcast i32 %115 to float, !dbg !42
  %117 = fadd float %113, %116, !dbg !37
  %118 = bitcast float %117 to i32, !dbg !42
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !42
  %120 = bitcast i32 %119 to float, !dbg !42
  %121 = fadd float %117, %120, !dbg !37
  %122 = icmp eq i32 %64, 0, !dbg !42
  %123 = and i32 %63, 1, !dbg !42
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !42
  %125 = bitcast float %121 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 %122) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %126 = icmp slt i32 %9, 2, !dbg !42
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !42
  %128 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %127, i1 %126) #5, !dbg !42
  %129 = bitcast i32 %128 to float, !dbg !42
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 1, i32 31), !dbg !42
  %131 = bitcast i32 %130 to float, !dbg !42
  %132 = fadd float %129, %131, !dbg !37
  %133 = and i32 %9, 1, !dbg !42
  %134 = icmp eq i32 %133, 0, !dbg !42
  %135 = and i1 %126, %134, !dbg !42
  %136 = bitcast float %132 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %136, i1 %135) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %137 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %138 = fadd float %137, 0.000000e+00, !dbg !43
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.560000e+02) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %140 = sext i32 %8 to i64, !dbg !47
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !47
  %urem = and i32 %9, 63, !dbg !48
  %142 = icmp eq i32 %urem, 0, !dbg !48
  %143 = bitcast float %139 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %141, i1 %142) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3qeivk6e36s6hhz27clslrk4kjrvb2zsxj3iec7ny5hmmouwosk.py", directory: "inductor_cache/3q")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_82, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_mean_relu_82, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_82", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_mean_relu_82", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 39, scope: !7)
!14 = !DILocation(line: 33, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 44, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 40, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 26, scope: !7)
!27 = !DILocation(line: 43, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 46, column: 19, scope: !7)
!30 = !DILocation(line: 47, column: 20, scope: !7)
!31 = !DILocation(line: 48, column: 20, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 50, column: 42, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 256, column: 15, scope: !38, inlinedAt: !41)
!38 = distinct !DILexicalBlockFile(scope: !40, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!41 = !DILocation(line: 52, column: 59, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !33, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 45, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 4, scope: !7)
!47 = !DILocation(line: 56, column: 28, scope: !7)
!48 = !DILocation(line: 56, column: 40, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
