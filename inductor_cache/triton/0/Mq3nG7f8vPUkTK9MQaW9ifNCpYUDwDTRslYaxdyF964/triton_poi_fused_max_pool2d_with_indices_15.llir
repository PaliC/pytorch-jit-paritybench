; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 8192, !dbg !14
  %18 = mul i32 %17, 8192, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 8192, !dbg !15
  %20 = shl i32 %17, 14, !dbg !16
  %21 = add i32 %20, %.decomposed, !dbg !17
  %22 = add i32 %20, %19, !dbg !17
  %23 = sext i32 %21 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = sext i32 %22 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #2, !dbg !19
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !19
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !19
  %37 = or disjoint i32 %20, 8192, !dbg !20
  %38 = add nsw i32 %37, %.decomposed, !dbg !21
  %39 = add nsw i32 %37, %19, !dbg !21
  %40 = sext i32 %38 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %39 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !19
  %55 = insertelement <4 x i32> %54, i32 %29, i64 1, !dbg !19
  %56 = insertelement <4 x i32> %55, i32 %30, i64 2, !dbg !19
  %57 = insertelement <4 x i32> %56, i32 %31, i64 3, !dbg !19
  %58 = bitcast <4 x i32> %57 to <4 x float>, !dbg !19
  %59 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !23
  %60 = insertelement <4 x i32> %59, i32 %46, i64 1, !dbg !23
  %61 = insertelement <4 x i32> %60, i32 %47, i64 2, !dbg !23
  %62 = insertelement <4 x i32> %61, i32 %48, i64 3, !dbg !23
  %63 = bitcast <4 x i32> %62 to <4 x float>, !dbg !23
  %64 = fcmp ogt <4 x float> %63, %58, !dbg !24
  %65 = extractelement <4 x i1> %64, i64 0, !dbg !28
  %66 = extractelement <4 x i1> %64, i64 1, !dbg !28
  %67 = extractelement <4 x i1> %64, i64 2, !dbg !28
  %68 = extractelement <4 x i1> %64, i64 3, !dbg !28
  %69 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !19
  %70 = insertelement <4 x i32> %69, i32 %34, i64 1, !dbg !19
  %71 = insertelement <4 x i32> %70, i32 %35, i64 2, !dbg !19
  %72 = insertelement <4 x i32> %71, i32 %36, i64 3, !dbg !19
  %73 = bitcast <4 x i32> %72 to <4 x float>, !dbg !19
  %74 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !23
  %75 = insertelement <4 x i32> %74, i32 %51, i64 1, !dbg !23
  %76 = insertelement <4 x i32> %75, i32 %52, i64 2, !dbg !23
  %77 = insertelement <4 x i32> %76, i32 %53, i64 3, !dbg !23
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !23
  %79 = fcmp ogt <4 x float> %78, %73, !dbg !24
  %80 = shufflevector <4 x float> %78, <4 x float> %63, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !29
  %81 = fcmp uno <8 x float> %80, zeroinitializer, !dbg !29
  %82 = extractelement <8 x i1> %81, i64 7, !dbg !28
  %83 = or i1 %65, %82, !dbg !28
  %84 = extractelement <8 x i1> %81, i64 6, !dbg !28
  %85 = or i1 %66, %84, !dbg !28
  %86 = extractelement <8 x i1> %81, i64 5, !dbg !28
  %87 = or i1 %67, %86, !dbg !28
  %88 = extractelement <8 x i1> %81, i64 4, !dbg !28
  %89 = or i1 %68, %88, !dbg !28
  %90 = extractelement <4 x i1> %79, i64 0, !dbg !28
  %91 = extractelement <8 x i1> %81, i64 3, !dbg !28
  %92 = or i1 %90, %91, !dbg !28
  %93 = extractelement <4 x i1> %79, i64 1, !dbg !28
  %94 = extractelement <8 x i1> %81, i64 2, !dbg !28
  %95 = or i1 %93, %94, !dbg !28
  %96 = extractelement <4 x i1> %79, i64 2, !dbg !28
  %97 = extractelement <8 x i1> %81, i64 1, !dbg !28
  %98 = or i1 %96, %97, !dbg !28
  %99 = extractelement <4 x i1> %79, i64 3, !dbg !28
  %100 = extractelement <8 x i1> %81, i64 0, !dbg !28
  %101 = or i1 %99, %100, !dbg !28
  %102 = sext i32 %15 to i64, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !30
  %104 = sext i32 %16 to i64, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !30
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !31
  %107 = select i1 %83, i32 %45, i32 %28, !dbg !32
  %108 = select i1 %85, i32 %46, i32 %29, !dbg !32
  %109 = select i1 %87, i32 %47, i32 %30, !dbg !32
  %110 = select i1 %89, i32 %48, i32 %31, !dbg !32
  %111 = select i1 %92, i32 %50, i32 %33, !dbg !32
  %112 = select i1 %95, i32 %51, i32 %34, !dbg !32
  %113 = select i1 %98, i32 %52, i32 %35, !dbg !32
  %114 = select i1 %101, i32 %53, i32 %36, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %106, i32 %107, i32 %108, i32 %109, i32 %110, i1 true) #2, !dbg !31
  %115 = getelementptr inbounds i8, ptr addrspace(3) %106, i32 16, !dbg !31
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %115, i32 %111, i32 %112, i32 %113, i32 %114, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %118 = load <4 x i32>, ptr addrspace(3) %117, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %116, align 16, !dbg !31
  %119 = getelementptr inbounds i8, ptr addrspace(3) %116, i32 4, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %119, align 4, !dbg !31
  %120 = getelementptr inbounds i8, ptr addrspace(3) %116, i32 8, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %120, align 8, !dbg !31
  %121 = getelementptr inbounds i8, ptr addrspace(3) %116, i32 12, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %121, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %103, i1 true) #2, !dbg !31
  %.extract11 = extractelement <4 x i32> %118, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %118, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %118, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %118, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %105, i1 true) #2, !dbg !31
  %122 = sext i32 %13 to i64, !dbg !33
  %123 = getelementptr i8, ptr addrspace(1) %2, i64 %122, !dbg !33
  %124 = zext <4 x i1> %64 to <4 x i8>, !dbg !34
  %125 = bitcast <4 x i8> %124 to i32, !dbg !34
  %126 = zext <4 x i1> %79 to <4 x i8>, !dbg !34
  %127 = bitcast <4 x i8> %126 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %125, i32 %127, ptr addrspace(1) %123, i1 true) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c76ex2bmvebdno2pcvkzmcv5v6pd5xcw2amnpfxaz6cjpargo7zb.py", directory: "inductor_cache/76")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 41, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 46, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 42, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 53, scope: !7)
!24 = !DILocation(line: 118, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 29, column: 40, scope: !7)
!28 = !DILocation(line: 120, column: 16, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 120, column: 21, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 34, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
