; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 128, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %8, 63, !dbg !12
  %.frozen = freeze i32 %6, !dbg !13
  %12 = sdiv i32 %.frozen, 64, !dbg !13
  %13 = mul i32 %12, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %13, !dbg !14
  %14 = shl nsw i32 %.decomposed, 3, !dbg !15
  %15 = shl i32 %8, 9, !dbg !16
  %16 = and i32 %15, 7680, !dbg !16
  %17 = add nsw i32 %14, %16, !dbg !17
  %18 = shl i32 %12, 13, !dbg !18
  %19 = add i32 %17, %18, !dbg !19
  %20 = lshr i32 %11, 4, !dbg !20
  %21 = or disjoint i32 %20, 4, !dbg !20
  %22 = or disjoint i32 %19, %20, !dbg !21
  %23 = or disjoint i32 %19, %21, !dbg !21
  %24 = sext i32 %22 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = sext i32 %23 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %7, i32 0, i1 %7) #3, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %7, i32 0, i1 %7) #3, !dbg !23
  %30 = or disjoint i32 %14, %20, !dbg !24
  %31 = or disjoint i32 %14, %21, !dbg !24
  %32 = sext i32 %30 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %7, i32 0, i1 %7) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %7, i32 0, i1 %7) #3, !dbg !26
  %38 = add nsw i32 %17, 16384, !dbg !27
  %39 = add i32 %38, %18, !dbg !28
  %40 = or disjoint i32 %39, %20, !dbg !29
  %41 = or disjoint i32 %39, %21, !dbg !29
  %42 = sext i32 %40 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = sext i32 %41 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %7, i32 0, i1 %7) #3, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %7, i32 0, i1 %7) #3, !dbg !31
  %48 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %49 = insertelement <2 x i32> %48, i32 %29, i64 1, !dbg !23
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !23
  %51 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !26
  %52 = insertelement <2 x i32> %51, i32 %37, i64 1, !dbg !26
  %53 = bitcast <2 x i32> %52 to <2 x float>, !dbg !26
  %54 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !31
  %55 = insertelement <2 x i32> %54, i32 %47, i64 1, !dbg !31
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !31
  %57 = fadd <2 x float> %50, %53, !dbg !32
  %58 = fadd <2 x float> %53, %56, !dbg !33
  %59 = fsub <2 x float> %57, %58, !dbg !34
  %60 = fmul <2 x float> %59, %59, !dbg !35
  %shift = shufflevector <2 x float> %60, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !36
  %61 = fadd <2 x float> %60, %shift, !dbg !36
  %62 = extractelement <2 x float> %61, i64 0, !dbg !36
  %63 = select i1 %7, float %62, float 0.000000e+00, !dbg !36
  %64 = bitcast float %63 to i32, !dbg !41
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 16, i32 31), !dbg !41
  %66 = bitcast i32 %65 to float, !dbg !41
  %67 = fadd float %63, %66, !dbg !36
  %68 = bitcast float %67 to i32, !dbg !41
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 8, i32 31), !dbg !41
  %70 = bitcast i32 %69 to float, !dbg !41
  %71 = fadd float %67, %70, !dbg !36
  %72 = bitcast float %71 to i32, !dbg !41
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 4, i32 31), !dbg !41
  %74 = bitcast i32 %73 to float, !dbg !41
  %75 = fadd float %71, %74, !dbg !36
  %76 = bitcast float %75 to i32, !dbg !41
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !41
  %78 = bitcast i32 %77 to float, !dbg !41
  %79 = fadd float %75, %78, !dbg !36
  %80 = bitcast float %79 to i32, !dbg !41
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !41
  %82 = bitcast i32 %81 to float, !dbg !41
  %83 = fadd float %79, %82, !dbg !36
  %84 = icmp eq i32 %9, 0, !dbg !41
  %85 = and i32 %10, 1, !dbg !41
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !41
  %87 = bitcast float %83 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %84) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %88 = icmp slt i32 %8, 2, !dbg !41
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !41
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %88) #3, !dbg !41
  %91 = bitcast i32 %90 to float, !dbg !41
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !41
  %93 = bitcast i32 %92 to float, !dbg !41
  %94 = fadd float %91, %93, !dbg !36
  %95 = and i32 %8, 1, !dbg !41
  %96 = icmp eq i32 %95, 0, !dbg !41
  %97 = and i1 %88, %96, !dbg !41
  %98 = bitcast float %94 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %98, i1 %97) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %99 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %100 = sext i32 %6 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !42
  %102 = icmp eq i32 %11, 0, !dbg !43
  %103 = and i1 %102, %7, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %101, i1 %103) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccogwlezhowuk6po6yzfpiritqemz3x5h7wa55psroiavpydgt7e.py", directory: "inductor_cache/co")
!4 = !{ptr @triton_per_fused_mean_pow_sub_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_29, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_29", linkageName: "triton_per_fused_mean_pow_sub_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 32, scope: !7)
!16 = !DILocation(line: 33, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 37, scope: !7)
!18 = !DILocation(line: 33, column: 60, scope: !7)
!19 = !DILocation(line: 33, column: 55, scope: !7)
!20 = !DILocation(line: 33, column: 103, scope: !7)
!21 = !DILocation(line: 33, column: 97, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 109, scope: !7)
!24 = !DILocation(line: 34, column: 38, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 50, scope: !7)
!27 = !DILocation(line: 35, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 63, scope: !7)
!29 = !DILocation(line: 35, column: 105, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 117, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 43, column: 37, scope: !7)
!44 = !DILocation(line: 43, column: 4, scope: !7)
