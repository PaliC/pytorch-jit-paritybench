; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_native_group_norm_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 2044, !dbg !12
  %14 = shl i32 %7, 11, !dbg !13
  %15 = or disjoint i32 %14, %13, !dbg !14
  %16 = sext i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !15
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = select i1 %8, float %23, float 0.000000e+00, !dbg !17
  %28 = select i1 %8, float %24, float 0.000000e+00, !dbg !17
  %29 = select i1 %8, float %25, float 0.000000e+00, !dbg !17
  %30 = select i1 %8, float %26, float 0.000000e+00, !dbg !17
  %31 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !18
  %32 = fsub float %28, %27, !dbg !19
  %33 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !24
  %34 = fcmp oeq float %33, 0.000000e+00, !dbg !25
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %33) #5, !dbg !26
  %36 = select i1 %34, float 0.000000e+00, float %35, !dbg !27
  %37 = fmul float %36, %32, !dbg !28
  %38 = fadd float %27, %37, !dbg !29
  %39 = fmul float %32, %32, !dbg !30
  %40 = fmul float %31, %39, !dbg !31
  %41 = fmul float %36, %40, !dbg !32
  %42 = fadd float %41, 0.000000e+00, !dbg !33
  %43 = fsub float %29, %38, !dbg !19
  %44 = select i1 %8, float 3.000000e+00, float 0.000000e+00, !dbg !24
  %45 = fcmp oeq float %44, 0.000000e+00, !dbg !25
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %44) #5, !dbg !26
  %47 = select i1 %45, float 0.000000e+00, float %46, !dbg !27
  %48 = fmul float %47, %43, !dbg !28
  %49 = fadd float %38, %48, !dbg !29
  %50 = fmul float %43, %43, !dbg !30
  %51 = fmul float %33, %50, !dbg !31
  %52 = fmul float %47, %51, !dbg !32
  %53 = fadd float %42, %52, !dbg !33
  %54 = fsub float %30, %49, !dbg !19
  %55 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !24
  %56 = fcmp oeq float %55, 0.000000e+00, !dbg !25
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %55) #5, !dbg !26
  %58 = select i1 %56, float 0.000000e+00, float %57, !dbg !27
  %59 = fmul float %58, %54, !dbg !28
  %60 = fadd float %49, %59, !dbg !29
  %61 = fmul float %54, %54, !dbg !30
  %62 = fmul float %44, %61, !dbg !31
  %63 = fmul float %58, %62, !dbg !32
  %64 = fadd float %53, %63, !dbg !33
  %65 = bitcast float %60 to i32, !dbg !34
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !34
  %67 = bitcast i32 %66 to float, !dbg !34
  %68 = bitcast float %64 to i32, !dbg !34
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = bitcast float %55 to i32, !dbg !34
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = fsub float %67, %60, !dbg !19
  %75 = fadd float %55, %73, !dbg !24
  %76 = fcmp oeq float %75, 0.000000e+00, !dbg !25
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float %75) #5, !dbg !26
  %78 = select i1 %76, float 0.000000e+00, float %77, !dbg !27
  %79 = fmul float %78, %74, !dbg !28
  %80 = fadd float %60, %79, !dbg !29
  %81 = fadd float %64, %70, !dbg !35
  %82 = fmul float %74, %74, !dbg !30
  %83 = fmul float %55, %82, !dbg !31
  %84 = fmul float %78, %83, !dbg !32
  %85 = fadd float %81, %84, !dbg !33
  %86 = bitcast float %80 to i32, !dbg !34
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !34
  %88 = bitcast i32 %87 to float, !dbg !34
  %89 = bitcast float %85 to i32, !dbg !34
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !34
  %91 = bitcast i32 %90 to float, !dbg !34
  %92 = bitcast float %75 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fsub float %88, %80, !dbg !19
  %96 = fadd float %75, %94, !dbg !24
  %97 = fcmp oeq float %96, 0.000000e+00, !dbg !25
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %96) #5, !dbg !26
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !27
  %100 = fmul float %99, %95, !dbg !28
  %101 = fadd float %80, %100, !dbg !29
  %102 = fadd float %85, %91, !dbg !35
  %103 = fmul float %95, %95, !dbg !30
  %104 = fmul float %75, %103, !dbg !31
  %105 = fmul float %99, %104, !dbg !32
  %106 = fadd float %102, %105, !dbg !33
  %107 = bitcast float %101 to i32, !dbg !34
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !34
  %109 = bitcast i32 %108 to float, !dbg !34
  %110 = bitcast float %106 to i32, !dbg !34
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !34
  %112 = bitcast i32 %111 to float, !dbg !34
  %113 = bitcast float %96 to i32, !dbg !34
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !34
  %115 = bitcast i32 %114 to float, !dbg !34
  %116 = fsub float %109, %101, !dbg !19
  %117 = fadd float %96, %115, !dbg !24
  %118 = fcmp oeq float %117, 0.000000e+00, !dbg !25
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float %117) #5, !dbg !26
  %120 = select i1 %118, float 0.000000e+00, float %119, !dbg !27
  %121 = fmul float %120, %116, !dbg !28
  %122 = fadd float %101, %121, !dbg !29
  %123 = fadd float %106, %112, !dbg !35
  %124 = fmul float %116, %116, !dbg !30
  %125 = fmul float %96, %124, !dbg !31
  %126 = fmul float %120, %125, !dbg !32
  %127 = fadd float %123, %126, !dbg !33
  %128 = bitcast float %122 to i32, !dbg !34
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !34
  %130 = bitcast i32 %129 to float, !dbg !34
  %131 = bitcast float %127 to i32, !dbg !34
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = bitcast float %117 to i32, !dbg !34
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !34
  %136 = bitcast i32 %135 to float, !dbg !34
  %137 = fsub float %130, %122, !dbg !19
  %138 = fadd float %117, %136, !dbg !24
  %139 = fcmp oeq float %138, 0.000000e+00, !dbg !25
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %138) #5, !dbg !26
  %141 = select i1 %139, float 0.000000e+00, float %140, !dbg !27
  %142 = fmul float %137, %141, !dbg !28
  %143 = fadd float %122, %142, !dbg !29
  %144 = fadd float %127, %133, !dbg !35
  %145 = fmul float %137, %137, !dbg !30
  %146 = fmul float %117, %145, !dbg !31
  %147 = fmul float %141, %146, !dbg !32
  %148 = fadd float %144, %147, !dbg !33
  %149 = bitcast float %143 to i32, !dbg !34
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !34
  %151 = bitcast i32 %150 to float, !dbg !34
  %152 = bitcast float %148 to i32, !dbg !34
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = bitcast float %138 to i32, !dbg !34
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !34
  %157 = bitcast i32 %156 to float, !dbg !34
  %158 = fsub float %151, %143, !dbg !19
  %159 = fadd float %138, %157, !dbg !24
  %160 = fcmp oeq float %159, 0.000000e+00, !dbg !25
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %157, float %159) #5, !dbg !26
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !27
  %163 = fmul float %158, %162, !dbg !28
  %164 = fadd float %143, %163, !dbg !29
  %165 = fadd float %148, %154, !dbg !35
  %166 = fmul float %158, %158, !dbg !30
  %167 = fmul float %138, %166, !dbg !31
  %168 = fmul float %162, %167, !dbg !32
  %169 = fadd float %165, %168, !dbg !33
  %170 = icmp eq i32 %10, 0, !dbg !34
  %171 = and i32 %11, 15, !dbg !34
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !34
  %173 = bitcast float %164 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 %170) #5, !dbg !34
  %174 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %171, !dbg !34
  %175 = bitcast float %169 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 %170) #5, !dbg !34
  %176 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %171, !dbg !34
  %177 = bitcast float %159 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 %170) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %178 = icmp slt i32 %9, 16, !dbg !34
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !34
  %180 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %179, i1 %178) #5, !dbg !34
  %181 = bitcast i32 %180 to float, !dbg !34
  %182 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %9, !dbg !34
  %183 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %182, i1 %178) #5, !dbg !34
  %184 = bitcast i32 %183 to float, !dbg !34
  %185 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %9, !dbg !34
  %186 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %185, i1 %178) #5, !dbg !34
  %187 = bitcast i32 %186 to float, !dbg !34
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 8, i32 31), !dbg !34
  %189 = bitcast i32 %188 to float, !dbg !34
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !34
  %191 = bitcast i32 %190 to float, !dbg !34
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 8, i32 31), !dbg !34
  %193 = bitcast i32 %192 to float, !dbg !34
  %194 = fsub float %189, %181, !dbg !19
  %195 = fadd float %187, %193, !dbg !24
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !25
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %195) #5, !dbg !26
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !27
  %199 = fmul float %194, %198, !dbg !28
  %200 = fadd float %199, %181, !dbg !29
  %201 = fadd float %184, %191, !dbg !35
  %202 = fmul float %194, %194, !dbg !30
  %203 = fmul float %202, %187, !dbg !31
  %204 = fmul float %203, %198, !dbg !32
  %205 = fadd float %201, %204, !dbg !33
  %206 = bitcast float %200 to i32, !dbg !34
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 4, i32 31), !dbg !34
  %208 = bitcast i32 %207 to float, !dbg !34
  %209 = bitcast float %205 to i32, !dbg !34
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 4, i32 31), !dbg !34
  %211 = bitcast i32 %210 to float, !dbg !34
  %212 = bitcast float %195 to i32, !dbg !34
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !34
  %214 = bitcast i32 %213 to float, !dbg !34
  %215 = fsub float %208, %200, !dbg !19
  %216 = fadd float %195, %214, !dbg !24
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !25
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %216) #5, !dbg !26
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !27
  %220 = fmul float %215, %219, !dbg !28
  %221 = fadd float %200, %220, !dbg !29
  %222 = fadd float %205, %211, !dbg !35
  %223 = fmul float %215, %215, !dbg !30
  %224 = fmul float %195, %223, !dbg !31
  %225 = fmul float %219, %224, !dbg !32
  %226 = fadd float %222, %225, !dbg !33
  %227 = bitcast float %221 to i32, !dbg !34
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !34
  %229 = bitcast i32 %228 to float, !dbg !34
  %230 = bitcast float %226 to i32, !dbg !34
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 2, i32 31), !dbg !34
  %232 = bitcast i32 %231 to float, !dbg !34
  %233 = bitcast float %216 to i32, !dbg !34
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !34
  %235 = bitcast i32 %234 to float, !dbg !34
  %236 = fsub float %229, %221, !dbg !19
  %237 = fadd float %216, %235, !dbg !24
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !25
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #5, !dbg !26
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !27
  %241 = fmul float %236, %240, !dbg !28
  %242 = fadd float %221, %241, !dbg !29
  %243 = fadd float %226, %232, !dbg !35
  %244 = fmul float %236, %236, !dbg !30
  %245 = fmul float %216, %244, !dbg !31
  %246 = fmul float %240, %245, !dbg !32
  %247 = fadd float %243, %246, !dbg !33
  %248 = bitcast float %242 to i32, !dbg !34
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 1, i32 31), !dbg !34
  %250 = bitcast i32 %249 to float, !dbg !34
  %251 = bitcast float %247 to i32, !dbg !34
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 1, i32 31), !dbg !34
  %253 = bitcast i32 %252 to float, !dbg !34
  %254 = bitcast float %237 to i32, !dbg !34
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 1, i32 31), !dbg !34
  %256 = bitcast i32 %255 to float, !dbg !34
  %257 = fsub float %250, %242, !dbg !19
  %258 = fadd float %237, %256, !dbg !24
  %259 = fcmp oeq float %258, 0.000000e+00, !dbg !25
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %256, float %258) #5, !dbg !26
  %261 = select i1 %259, float 0.000000e+00, float %260, !dbg !27
  %262 = fmul float %257, %261, !dbg !28
  %263 = fadd float %242, %262, !dbg !29
  %264 = fadd float %247, %253, !dbg !35
  %265 = fmul float %257, %257, !dbg !30
  %266 = fmul float %237, %265, !dbg !31
  %267 = fmul float %261, %266, !dbg !32
  %268 = fadd float %264, %267, !dbg !33
  %269 = and i32 %9, 15, !dbg !34
  %270 = icmp eq i32 %269, 0, !dbg !34
  %271 = and i1 %178, %270, !dbg !34
  %272 = bitcast float %263 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %272, i1 %271) #5, !dbg !34
  %273 = bitcast float %268 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %273, i1 %271) #5, !dbg !34
  %274 = bitcast float %258 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %274, i1 %271) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %275 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %276 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !34
  %277 = sext i32 %7 to i64, !dbg !36
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !36
  %urem = and i32 %9, 511, !dbg !37
  %279 = icmp eq i32 %urem, 0, !dbg !37
  %280 = and i1 %279, %8, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %278, i1 %280) #5, !dbg !37
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !38
  %282 = bitcast float %276 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %281, i1 %280) #5, !dbg !39
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float 2.048000e+03) #5, !dbg !40
  %284 = fadd float %283, 0x3EE4F8B580000000, !dbg !41
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i = icmp eq i32 %285, 0, !dbg !42
  br i1 %.not.i, label %288, label %286, !dbg !42

286:                                              ; preds = %6
  %287 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %284), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

288:                                              ; preds = %6
  %289 = tail call float @llvm.nvvm.rsqrt.approx.f(float %284), !dbg !42
  br label %__nv_rsqrtf.exit, !dbg !42

__nv_rsqrtf.exit:                                 ; preds = %286, %288
  %.0.i = phi float [ %287, %286 ], [ %289, %288 ], !dbg !42
  %290 = getelementptr float, ptr addrspace(1) %3, i64 %277, !dbg !43
  %291 = bitcast float %.0.i to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %290, i1 %280) #5, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cutj3rxinh7q7egfza3s2fr3yscirldvck7nsejd6yzkctloumtr.py", directory: "inductor_cache/ut")
!4 = !{ptr @triton_red_fused_native_group_norm_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_native_group_norm_3, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_native_group_norm_3", linkageName: "triton_red_fused_native_group_norm_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 34, column: 39, scope: !7)
!15 = !DILocation(line: 34, column: 34, scope: !7)
!16 = !DILocation(line: 34, column: 49, scope: !7)
!17 = !DILocation(line: 39, column: 60, scope: !7)
!18 = !DILocation(line: 41, column: 64, scope: !7)
!19 = !DILocation(line: 192, column: 21, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 43, column: 41, scope: !7)
!24 = !DILocation(line: 193, column: 28, scope: !20, inlinedAt: !23)
!25 = !DILocation(line: 194, column: 39, scope: !20, inlinedAt: !23)
!26 = !DILocation(line: 194, column: 60, scope: !20, inlinedAt: !23)
!27 = !DILocation(line: 194, column: 49, scope: !20, inlinedAt: !23)
!28 = !DILocation(line: 196, column: 25, scope: !20, inlinedAt: !23)
!29 = !DILocation(line: 196, column: 17, scope: !20, inlinedAt: !23)
!30 = !DILocation(line: 197, column: 30, scope: !20, inlinedAt: !23)
!31 = !DILocation(line: 197, column: 38, scope: !20, inlinedAt: !23)
!32 = !DILocation(line: 197, column: 49, scope: !20, inlinedAt: !23)
!33 = !DILocation(line: 197, column: 22, scope: !20, inlinedAt: !23)
!34 = !DILocation(line: 204, column: 46, scope: !22, inlinedAt: !23)
!35 = !DILocation(line: 197, column: 15, scope: !20, inlinedAt: !23)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 48, column: 36, scope: !7)
!38 = !DILocation(line: 49, column: 25, scope: !7)
!39 = !DILocation(line: 49, column: 36, scope: !7)
!40 = !DILocation(line: 51, column: 18, scope: !7)
!41 = !DILocation(line: 53, column: 18, scope: !7)
!42 = !DILocation(line: 54, column: 27, scope: !7)
!43 = !DILocation(line: 55, column: 25, scope: !7)
!44 = !DILocation(line: 55, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 4, scope: !7)
