; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 256, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 16, !dbg !15
  %16 = srem i32 %15, 4, !dbg !16
  %17 = mul i32 %15, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %17, !dbg !17
  %.frozen1 = freeze i32 %13, !dbg !18
  %18 = sdiv i32 %.frozen1, 64, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = sext i32 %13 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %14) #1, !dbg !21
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !21
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !21
  %26 = bitcast i32 %24 to float, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = icmp slt i32 %16, 2, !dbg !22
  %29 = mul i32 %18, 64, !dbg !23
  %srem.decomposed = sub i32 %.frozen1, %29, !dbg !23
  %30 = shl nsw i32 %18, 5, !dbg !24
  %31 = add nsw i32 %30, %srem.decomposed, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = and i1 %14, %28, !dbg !27
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #1, !dbg !28
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !28
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !28
  %38 = bitcast i32 %36 to float, !dbg !28
  %39 = bitcast i32 %37 to float, !dbg !28
  %40 = icmp eq i32 %16, 2, !dbg !29
  %41 = shl nsw i32 %18, 4, !dbg !30
  %42 = add nsw i32 %41, %.decomposed, !dbg !31
  %43 = sext i32 %42 to i64, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !32
  %45 = and i1 %14, %40, !dbg !33
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !34
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !34
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !34
  %49 = bitcast i32 %47 to float, !dbg !34
  %50 = bitcast i32 %48 to float, !dbg !34
  %51 = icmp sgt i32 %16, 2, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !36
  %53 = and i1 %14, %51, !dbg !37
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !38
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !38
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !38
  %57 = bitcast i32 %55 to float, !dbg !38
  %58 = bitcast i32 %56 to float, !dbg !38
  %59 = fadd float %20, %57, !dbg !39
  %60 = fadd float %20, %58, !dbg !39
  %61 = select i1 %51, float %59, float 0.000000e+00, !dbg !40
  %62 = select i1 %51, float %60, float 0.000000e+00, !dbg !40
  %63 = select i1 %40, float %49, float %61, !dbg !41
  %64 = select i1 %40, float %50, float %62, !dbg !41
  %65 = select i1 %28, float %38, float %63, !dbg !42
  %66 = select i1 %28, float %39, float %64, !dbg !42
  %67 = fadd float %65, %26, !dbg !43
  %68 = fadd float %66, %27, !dbg !43
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !44
  %70 = bitcast float %67 to i32, !dbg !45
  %71 = bitcast float %68 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %71, ptr addrspace(1) %69, i1 %14) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgikfljcdf53456emik6mkdj2i3vcdz5if27xlenfez7fbn44uvf.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_add_cat_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_3", linkageName: "triton_poi_fused_add_cat_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 20, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 36, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 48, scope: !7)
!25 = !DILocation(line: 36, column: 45, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 60, scope: !7)
!28 = !DILocation(line: 36, column: 53, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 39, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 51, scope: !7)
!34 = !DILocation(line: 41, column: 44, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 52, scope: !7)
!38 = !DILocation(line: 45, column: 44, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 35, scope: !7)
!41 = !DILocation(line: 49, column: 34, scope: !7)
!42 = !DILocation(line: 50, column: 33, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 25, scope: !7)
!45 = !DILocation(line: 52, column: 37, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
