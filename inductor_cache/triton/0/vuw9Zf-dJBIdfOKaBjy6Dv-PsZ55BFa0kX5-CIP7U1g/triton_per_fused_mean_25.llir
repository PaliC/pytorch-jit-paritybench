; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_25(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen, 1024, !dbg !14
  %15 = mul i32 %14, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %.frozen1 = freeze i32 %13, !dbg !14
  %16 = sdiv i32 %.frozen1, 1024, !dbg !14
  %17 = mul i32 %16, 1024, !dbg !15
  %.decomposed2 = sub i32 %.frozen1, %17, !dbg !15
  %18 = shl i32 %10, 10, !dbg !16
  %19 = and i32 %18, 7168, !dbg !16
  %20 = shl i32 %14, 14, !dbg !17
  %21 = add i32 %20, %.decomposed, !dbg !18
  %22 = add i32 %21, %19, !dbg !19
  %23 = add i32 %21, 8192, !dbg !18
  %24 = add nuw i32 %23, %19, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !20
  %27 = sext i32 %24 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = bitcast i32 %33 to float, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = fadd float %34, %43, !dbg !22
  %48 = fadd float %35, %44, !dbg !22
  %49 = fadd float %36, %45, !dbg !22
  %50 = fadd float %37, %46, !dbg !22
  %51 = and i32 %10, 7, !dbg !27
  %52 = shl nuw nsw i32 %9, 3, !dbg !27
  %53 = or disjoint i32 %52, %51, !dbg !27
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !27
  %55 = bitcast float %47 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #3, !dbg !27
  %56 = or disjoint i32 %52, 8, !dbg !27
  %57 = or disjoint i32 %56, %51, !dbg !27
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !27
  %59 = bitcast float %48 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #3, !dbg !27
  %60 = or disjoint i32 %52, 16, !dbg !27
  %61 = or disjoint i32 %60, %51, !dbg !27
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !27
  %63 = bitcast float %49 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #3, !dbg !27
  %64 = or disjoint i32 %52, 24, !dbg !27
  %65 = or disjoint i32 %64, %51, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !27
  %67 = bitcast float %50 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %68 = icmp slt i32 %7, 1024, !dbg !27
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %70 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %69, i1 %68) #3, !dbg !27
  %71 = bitcast i32 %70 to float, !dbg !27
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !27
  %73 = bitcast i32 %72 to float, !dbg !27
  %74 = fadd float %71, %73, !dbg !22
  %75 = bitcast float %74 to i32, !dbg !27
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !27
  %77 = bitcast i32 %76 to float, !dbg !27
  %78 = fadd float %74, %77, !dbg !22
  %79 = bitcast float %78 to i32, !dbg !27
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = fadd float %78, %81, !dbg !22
  %83 = and i32 %7, 7, !dbg !27
  %84 = icmp eq i32 %83, 0, !dbg !27
  %85 = and i1 %68, %84, !dbg !27
  %86 = bitcast float %82 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %86, i1 %85) #3, !dbg !27
  %87 = getelementptr i8, ptr addrspace(3) %69, i32 1024, !dbg !27
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %68) #3, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %89, %91, !dbg !22
  %93 = bitcast float %92 to i32, !dbg !27
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 2, i32 31), !dbg !27
  %95 = bitcast i32 %94 to float, !dbg !27
  %96 = fadd float %92, %95, !dbg !22
  %97 = bitcast float %96 to i32, !dbg !27
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !27
  %99 = bitcast i32 %98 to float, !dbg !27
  %100 = fadd float %96, %99, !dbg !22
  %101 = bitcast float %100 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %101, i1 %85) #3, !dbg !27
  %102 = getelementptr i8, ptr addrspace(3) %69, i32 2048, !dbg !27
  %103 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %102, i1 %68) #3, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 4, i32 31), !dbg !27
  %106 = bitcast i32 %105 to float, !dbg !27
  %107 = fadd float %104, %106, !dbg !22
  %108 = bitcast float %107 to i32, !dbg !27
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !27
  %110 = bitcast i32 %109 to float, !dbg !27
  %111 = fadd float %107, %110, !dbg !22
  %112 = bitcast float %111 to i32, !dbg !27
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !27
  %114 = bitcast i32 %113 to float, !dbg !27
  %115 = fadd float %111, %114, !dbg !22
  %116 = bitcast float %115 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %116, i1 %85) #3, !dbg !27
  %117 = getelementptr i8, ptr addrspace(3) %69, i32 3072, !dbg !27
  %118 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %117, i1 %68) #3, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = fadd float %119, %121, !dbg !22
  %123 = bitcast float %122 to i32, !dbg !27
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = fadd float %122, %125, !dbg !22
  %127 = bitcast float %126 to i32, !dbg !27
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = fadd float %126, %129, !dbg !22
  %131 = bitcast float %130 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %131, i1 %85) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !27
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !27
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !27
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !27
  %137 = load i32, ptr addrspace(3) %136, align 16, !dbg !27
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !27
  %139 = load i32, ptr addrspace(3) %138, align 16, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %140, i32 %133, i32 %135, i32 %137, i32 %139, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %142 = load float, ptr addrspace(3) %141, align 4, !dbg !28
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 1.600000e+01) #3, !dbg !28
  %144 = mul i32 %16, 3072, !dbg !29
  %145 = add i32 %144, %.decomposed2, !dbg !30
  %146 = sext i32 %145 to i64, !dbg !31
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !31
  %148 = and i32 %7, 128, !dbg !32
  %149 = icmp eq i32 %148, 0, !dbg !32
  %150 = bitcast float %143 to i32, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %150, ptr addrspace(1) %147, i1 %149) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cukvssn4yeacim3vovvzarfu7doegcjo6v5t2kstkvqt7oisypzd.py", directory: "inductor_cache/uk")
!4 = !{ptr @triton_per_fused_mean_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_25, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_25", linkageName: "triton_per_fused_mean_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 40, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 56, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 35, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 38, column: 46, scope: !7)
!33 = !DILocation(line: 38, column: 4, scope: !7)
