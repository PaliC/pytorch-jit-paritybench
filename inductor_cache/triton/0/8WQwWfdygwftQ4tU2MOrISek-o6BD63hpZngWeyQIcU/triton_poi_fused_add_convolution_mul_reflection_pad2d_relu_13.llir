; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_mul_reflection_pad2d_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %12, 2, !dbg !13
  %15 = or disjoint i32 %12, 3, !dbg !13
  %16 = or disjoint i32 %12, 512, !dbg !13
  %17 = or disjoint i32 %12, 513, !dbg !13
  %18 = or disjoint i32 %12, 514, !dbg !13
  %19 = or disjoint i32 %12, 515, !dbg !13
  %20 = icmp slt i32 %12, 82944, !dbg !14
  %21 = icmp slt i32 %16, 82944, !dbg !14
  %22 = sdiv i32 %12, 324, !dbg !15
  %23 = sdiv i32 %16, 324, !dbg !15
  %24 = srem i32 %13, 18, !dbg !16
  %25 = srem i32 %15, 18, !dbg !16
  %26 = srem i32 %17, 18, !dbg !16
  %27 = srem i32 %19, 18, !dbg !16
  %28 = sdiv i32 %12, 18, !dbg !17
  %29 = sdiv i32 %14, 18, !dbg !17
  %30 = sdiv i32 %16, 18, !dbg !17
  %31 = sdiv i32 %18, 18, !dbg !17
  %32 = srem i32 %22, 64, !dbg !18
  %33 = srem i32 %23, 64, !dbg !18
  %34 = sext i32 %22 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = sext i32 %23 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !20
  %39 = bitcast i32 %38 to float, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !20
  %41 = bitcast i32 %40 to float, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !20
  %43 = bitcast i32 %42 to float, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %20) #2, !dbg !20
  %45 = bitcast i32 %44 to float, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %21) #2, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %21) #2, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %21) #2, !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %21) #2, !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = add nsw i32 %24, -1, !dbg !21
  %55 = add nsw i32 %25, -1, !dbg !21
  %56 = add nsw i32 %26, -1, !dbg !21
  %57 = add nsw i32 %27, -1, !dbg !21
  %58 = tail call i32 @llvm.abs.i32(i32 %54, i1 true), !dbg !22
  %59 = tail call i32 @llvm.abs.i32(i32 %55, i1 true), !dbg !22
  %60 = tail call i32 @llvm.abs.i32(i32 %56, i1 true), !dbg !22
  %61 = tail call i32 @llvm.abs.i32(i32 %57, i1 true), !dbg !22
  %62 = add nsw i32 %58, -15, !dbg !23
  %63 = add nsw i32 %59, -15, !dbg !23
  %64 = add nsw i32 %60, -15, !dbg !23
  %65 = add nsw i32 %61, -15, !dbg !23
  %66 = tail call i32 @llvm.abs.i32(i32 %62, i1 true), !dbg !24
  %67 = tail call i32 @llvm.abs.i32(i32 %63, i1 true), !dbg !24
  %68 = tail call i32 @llvm.abs.i32(i32 %64, i1 true), !dbg !24
  %69 = tail call i32 @llvm.abs.i32(i32 %65, i1 true), !dbg !24
  %70 = shl nsw i32 %22, 8, !dbg !25
  %71 = shl nsw i32 %23, 8, !dbg !25
  %reass.sub = or disjoint i32 %70, 255, !dbg !26
  %72 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !16
  %73 = insertelement <2 x i32> %72, i32 %28, i64 1, !dbg !16
  %74 = srem <2 x i32> %73, splat (i32 18), !dbg !16
  %75 = add nsw <2 x i32> %74, splat (i32 -1), !dbg !21
  %76 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %75, i1 true), !dbg !22
  %77 = add nsw <2 x i32> %76, splat (i32 -15), !dbg !23
  %78 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %77, i1 true), !dbg !24
  %79 = extractelement <2 x i32> %78, i64 0, !dbg !27
  %80 = sub nuw i32 %reass.sub, %79, !dbg !27
  %81 = extractelement <2 x i32> %78, i64 1, !dbg !27
  %82 = mul nsw i32 %81, -16, !dbg !27
  %83 = add i32 %80, %82, !dbg !27
  %84 = sub nuw i32 %reass.sub, %66, !dbg !26
  %85 = add i32 %84, %82, !dbg !27
  %86 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !16
  %87 = insertelement <2 x i32> %86, i32 %29, i64 1, !dbg !16
  %88 = srem <2 x i32> %87, splat (i32 18), !dbg !16
  %89 = add nsw <2 x i32> %88, splat (i32 -1), !dbg !21
  %90 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %89, i1 true), !dbg !22
  %91 = add nsw <2 x i32> %90, splat (i32 -15), !dbg !23
  %92 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %91, i1 true), !dbg !24
  %93 = extractelement <2 x i32> %92, i64 0, !dbg !27
  %94 = sub nuw i32 %reass.sub, %93, !dbg !27
  %95 = extractelement <2 x i32> %92, i64 1, !dbg !27
  %96 = mul nsw i32 %95, -16, !dbg !27
  %97 = add i32 %94, %96, !dbg !27
  %98 = sub nuw i32 %reass.sub, %67, !dbg !26
  %99 = add i32 %98, %96, !dbg !27
  %reass.sub4 = or disjoint i32 %71, 255, !dbg !26
  %100 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %101 = insertelement <2 x i32> %100, i32 %30, i64 1, !dbg !16
  %102 = srem <2 x i32> %101, splat (i32 18), !dbg !16
  %103 = add nsw <2 x i32> %102, splat (i32 -1), !dbg !21
  %104 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %103, i1 true), !dbg !22
  %105 = add nsw <2 x i32> %104, splat (i32 -15), !dbg !23
  %106 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %105, i1 true), !dbg !24
  %107 = extractelement <2 x i32> %106, i64 0, !dbg !27
  %108 = sub nuw i32 %reass.sub4, %107, !dbg !27
  %109 = extractelement <2 x i32> %106, i64 1, !dbg !27
  %110 = mul nsw i32 %109, -16, !dbg !27
  %111 = add i32 %108, %110, !dbg !27
  %112 = sub nuw i32 %reass.sub4, %68, !dbg !26
  %113 = add i32 %112, %110, !dbg !27
  %114 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %115 = insertelement <2 x i32> %114, i32 %31, i64 1, !dbg !16
  %116 = srem <2 x i32> %115, splat (i32 18), !dbg !16
  %117 = add nsw <2 x i32> %116, splat (i32 -1), !dbg !21
  %118 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %117, i1 true), !dbg !22
  %119 = add nsw <2 x i32> %118, splat (i32 -15), !dbg !23
  %120 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %119, i1 true), !dbg !24
  %121 = extractelement <2 x i32> %120, i64 0, !dbg !27
  %122 = sub nuw i32 %reass.sub4, %121, !dbg !27
  %123 = extractelement <2 x i32> %120, i64 1, !dbg !27
  %124 = mul nsw i32 %123, -16, !dbg !27
  %125 = add i32 %122, %124, !dbg !27
  %126 = sub nuw i32 %reass.sub4, %69, !dbg !26
  %127 = add i32 %126, %124, !dbg !27
  %128 = sext i32 %83 to i64, !dbg !28
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !28
  %130 = sext i32 %85 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !28
  %132 = sext i32 %97 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = sext i32 %99 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !28
  %136 = sext i32 %111 to i64, !dbg !28
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !28
  %138 = sext i32 %113 to i64, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !28
  %140 = sext i32 %125 to i64, !dbg !28
  %141 = getelementptr float, ptr addrspace(1) %1, i64 %140, !dbg !28
  %142 = sext i32 %127 to i64, !dbg !28
  %143 = getelementptr float, ptr addrspace(1) %1, i64 %142, !dbg !28
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !29
  %145 = bitcast i32 %144 to float, !dbg !29
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %20) #2, !dbg !29
  %147 = bitcast i32 %146 to float, !dbg !29
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %20) #2, !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %20) #2, !dbg !29
  %151 = bitcast i32 %150 to float, !dbg !29
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %21) #2, !dbg !29
  %153 = bitcast i32 %152 to float, !dbg !29
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %21) #2, !dbg !29
  %155 = bitcast i32 %154 to float, !dbg !29
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %21) #2, !dbg !29
  %157 = bitcast i32 %156 to float, !dbg !29
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %21) #2, !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !30
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !30
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !30
  %164 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !30
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !30
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !30
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !30
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %20) #2, !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %20) #2, !dbg !31
  %171 = bitcast i32 %170 to float, !dbg !31
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %20) #2, !dbg !31
  %173 = bitcast i32 %172 to float, !dbg !31
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %20) #2, !dbg !31
  %175 = bitcast i32 %174 to float, !dbg !31
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %21) #2, !dbg !31
  %177 = bitcast i32 %176 to float, !dbg !31
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %21) #2, !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %21) #2, !dbg !31
  %181 = bitcast i32 %180 to float, !dbg !31
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #2, !dbg !31
  %183 = bitcast i32 %182 to float, !dbg !31
  %184 = sext i32 %32 to i64, !dbg !32
  %185 = getelementptr float, ptr addrspace(1) %3, i64 %184, !dbg !32
  %186 = sext i32 %33 to i64, !dbg !32
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %186, !dbg !32
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %20) #2, !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %20) #2, !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %20) #2, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %185, i1 %20) #2, !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !33
  %197 = bitcast i32 %196 to float, !dbg !33
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !33
  %199 = bitcast i32 %198 to float, !dbg !33
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !33
  %201 = bitcast i32 %200 to float, !dbg !33
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %187, i1 %21) #2, !dbg !33
  %203 = bitcast i32 %202 to float, !dbg !33
  %204 = fcmp olt float %39, 0.000000e+00, !dbg !34
  %205 = fcmp olt float %41, 0.000000e+00, !dbg !34
  %206 = fcmp olt float %43, 0.000000e+00, !dbg !34
  %207 = fcmp olt float %45, 0.000000e+00, !dbg !34
  %208 = fcmp olt float %47, 0.000000e+00, !dbg !34
  %209 = fcmp olt float %49, 0.000000e+00, !dbg !34
  %210 = fcmp olt float %51, 0.000000e+00, !dbg !34
  %211 = fcmp olt float %53, 0.000000e+00, !dbg !34
  %212 = select i1 %204, float 0.000000e+00, float %39, !dbg !38
  %213 = select i1 %205, float 0.000000e+00, float %41, !dbg !38
  %214 = select i1 %206, float 0.000000e+00, float %43, !dbg !38
  %215 = select i1 %207, float 0.000000e+00, float %45, !dbg !38
  %216 = select i1 %208, float 0.000000e+00, float %47, !dbg !38
  %217 = select i1 %209, float 0.000000e+00, float %49, !dbg !38
  %218 = select i1 %210, float 0.000000e+00, float %51, !dbg !38
  %219 = select i1 %211, float 0.000000e+00, float %53, !dbg !38
  %220 = fmul float %212, %145, !dbg !39
  %221 = fmul float %213, %147, !dbg !39
  %222 = fmul float %214, %149, !dbg !39
  %223 = fmul float %215, %151, !dbg !39
  %224 = fmul float %216, %153, !dbg !39
  %225 = fmul float %217, %155, !dbg !39
  %226 = fmul float %218, %157, !dbg !39
  %227 = fmul float %219, %159, !dbg !39
  %228 = fadd float %169, %189, !dbg !40
  %229 = fadd float %171, %191, !dbg !40
  %230 = fadd float %173, %193, !dbg !40
  %231 = fadd float %175, %195, !dbg !40
  %232 = fadd float %177, %197, !dbg !40
  %233 = fadd float %179, %199, !dbg !40
  %234 = fadd float %181, %201, !dbg !40
  %235 = fadd float %183, %203, !dbg !40
  %236 = fadd float %220, %228, !dbg !41
  %237 = fadd float %221, %229, !dbg !41
  %238 = fadd float %222, %230, !dbg !41
  %239 = fadd float %223, %231, !dbg !41
  %240 = fadd float %224, %232, !dbg !41
  %241 = fadd float %225, %233, !dbg !41
  %242 = fadd float %226, %234, !dbg !41
  %243 = fadd float %227, %235, !dbg !41
  %244 = sext i32 %12 to i64, !dbg !42
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %244, !dbg !42
  %246 = sext i32 %16 to i64, !dbg !42
  %247 = getelementptr float, ptr addrspace(1) %4, i64 %246, !dbg !42
  %248 = bitcast float %236 to i32, !dbg !43
  %249 = bitcast float %237 to i32, !dbg !43
  %250 = bitcast float %238 to i32, !dbg !43
  %251 = bitcast float %239 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %245, i1 %20) #2, !dbg !43
  %252 = bitcast float %240 to i32, !dbg !43
  %253 = bitcast float %241 to i32, !dbg !43
  %254 = bitcast float %242 to i32, !dbg !43
  %255 = bitcast float %243 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %252, i32 %253, i32 %254, i32 %255, ptr addrspace(1) %247, i1 %21) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceml2raisvpi2koaj4yswwwzx5jbigyx4r5qqkxqtqtielo62bie.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_reflection_pad2d_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_reflection_pad2d_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_reflection_pad2d_relu_13", linkageName: "triton_poi_fused_add_convolution_mul_reflection_pad2d_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 81, scope: !7)
!22 = !DILocation(line: 30, column: 74, scope: !7)
!23 = !DILocation(line: 30, column: 62, scope: !7)
!24 = !DILocation(line: 30, column: 54, scope: !7)
!25 = !DILocation(line: 30, column: 147, scope: !7)
!26 = !DILocation(line: 30, column: 90, scope: !7)
!27 = !DILocation(line: 30, column: 143, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 152, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 152, scope: !7)
!32 = !DILocation(line: 32, column: 30, scope: !7)
!33 = !DILocation(line: 32, column: 35, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 34, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 35, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 37, column: 18, scope: !7)
!42 = !DILocation(line: 38, column: 25, scope: !7)
!43 = !DILocation(line: 38, column: 36, scope: !7)
!44 = !DILocation(line: 38, column: 4, scope: !7)
