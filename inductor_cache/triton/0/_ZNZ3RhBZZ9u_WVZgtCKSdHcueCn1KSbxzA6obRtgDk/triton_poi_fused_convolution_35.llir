; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %11, 8, !dbg !12
  %14 = or disjoint i32 %11, 12, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 8, !dbg !15
  %22 = lshr i32 %8, 2, !dbg !16
  %23 = and i32 %22, 63, !dbg !16
  %24 = and i32 %9, 252, !dbg !16
  %25 = or disjoint i32 %21, %23, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = or disjoint i32 %25, 128, !dbg !17
  %28 = or disjoint i32 %25, 192, !dbg !17
  %29 = or disjoint i32 %21, %24, !dbg !17
  %30 = icmp slt i32 %25, 256, !dbg !18
  %31 = icmp slt i32 %26, 256, !dbg !18
  %32 = icmp slt i32 %27, 256, !dbg !18
  %33 = icmp slt i32 %28, 256, !dbg !18
  %34 = icmp slt i32 %29, 256, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %35 = sdiv i32 %.frozen, 256, !dbg !19
  %36 = mul i32 %35, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = shl i32 %25, 8, !dbg !21
  %38 = shl i32 %26, 8, !dbg !21
  %39 = shl i32 %27, 8, !dbg !21
  %40 = shl i32 %28, 8, !dbg !21
  %41 = shl i32 %35, 16, !dbg !22
  %42 = add i32 %41, %.decomposed, !dbg !23
  %43 = add i32 %42, %37, !dbg !24
  %44 = add i32 %42, %38, !dbg !24
  %45 = add i32 %42, %39, !dbg !24
  %46 = add i32 %42, %40, !dbg !24
  %47 = sext i32 %43 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %44 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %45 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %32) #2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !26
  %78 = bitcast i32 %74 to float, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %33) #2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = sext i32 %.decomposed to i64, !dbg !27
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !28
  %98 = bitcast i32 %94 to float, !dbg !28
  %99 = bitcast i32 %95 to float, !dbg !28
  %100 = bitcast i32 %96 to float, !dbg !28
  %101 = bitcast i32 %97 to float, !dbg !28
  %102 = fadd float %60, %98, !dbg !29
  %103 = fadd float %61, %99, !dbg !29
  %104 = fadd float %62, %100, !dbg !29
  %105 = fadd float %63, %101, !dbg !29
  %106 = fadd float %69, %98, !dbg !29
  %107 = fadd float %70, %99, !dbg !29
  %108 = fadd float %71, %100, !dbg !29
  %109 = fadd float %72, %101, !dbg !29
  %110 = fadd float %78, %98, !dbg !29
  %111 = fadd float %79, %99, !dbg !29
  %112 = fadd float %80, %100, !dbg !29
  %113 = fadd float %81, %101, !dbg !29
  %114 = fadd float %87, %98, !dbg !29
  %115 = fadd float %88, %99, !dbg !29
  %116 = fadd float %89, %100, !dbg !29
  %117 = fadd float %90, %101, !dbg !29
  %118 = shl i32 %16, 8, !dbg !30
  %119 = shl i32 %17, 8, !dbg !30
  %120 = shl i32 %18, 8, !dbg !30
  %121 = shl i32 %19, 8, !dbg !30
  %122 = add i32 %29, %118, !dbg !31
  %123 = add i32 %29, %119, !dbg !31
  %124 = add i32 %29, %120, !dbg !31
  %125 = add i32 %29, %121, !dbg !31
  %126 = sext i32 %122 to i64, !dbg !32
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !32
  %128 = sext i32 %123 to i64, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !32
  %130 = sext i32 %124 to i64, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !32
  %132 = sext i32 %125 to i64, !dbg !32
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !32
  %134 = shl i32 %8, 10, !dbg !33
  %135 = and i32 %134, 3072, !dbg !33
  %136 = or disjoint i32 %135, %23, !dbg !33
  %137 = and i32 %9, 1020, !dbg !33
  %138 = lshr exact i32 %135, 6, !dbg !33
  %139 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %138, !dbg !33
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %136, !dbg !33
  %141 = bitcast float %102 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !33
  %142 = or disjoint i32 %136, 256, !dbg !33
  %143 = lshr i32 %142, 8, !dbg !33
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !33
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !33
  %146 = bitcast float %103 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !33
  %147 = or disjoint i32 %136, 512, !dbg !33
  %148 = lshr i32 %147, 8, !dbg !33
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !33
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !33
  %151 = bitcast float %104 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !33
  %152 = or disjoint i32 %136, 768, !dbg !33
  %153 = lshr i32 %152, 8, !dbg !33
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !33
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !33
  %156 = bitcast float %105 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !33
  %157 = or disjoint i32 %136, 64, !dbg !33
  %158 = getelementptr float, ptr addrspace(3) %139, i32 %157, !dbg !33
  %159 = bitcast float %106 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %159, i1 true) #2, !dbg !33
  %160 = or disjoint i32 %136, 320, !dbg !33
  %161 = lshr i32 %160, 8, !dbg !33
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !33
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %160, !dbg !33
  %164 = bitcast float %107 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !33
  %165 = or disjoint i32 %136, 576, !dbg !33
  %166 = lshr i32 %165, 8, !dbg !33
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !33
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !33
  %169 = bitcast float %108 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !33
  %170 = or disjoint i32 %136, 832, !dbg !33
  %171 = lshr i32 %170, 8, !dbg !33
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !33
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !33
  %174 = bitcast float %109 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !33
  %175 = or disjoint i32 %136, 128, !dbg !33
  %176 = getelementptr float, ptr addrspace(3) %139, i32 %175, !dbg !33
  %177 = bitcast float %110 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #2, !dbg !33
  %178 = or disjoint i32 %136, 384, !dbg !33
  %179 = lshr i32 %178, 8, !dbg !33
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !33
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !33
  %182 = bitcast float %111 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !33
  %183 = or disjoint i32 %136, 640, !dbg !33
  %184 = lshr i32 %183, 8, !dbg !33
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !33
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !33
  %187 = bitcast float %112 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !33
  %188 = or disjoint i32 %136, 896, !dbg !33
  %189 = lshr i32 %188, 8, !dbg !33
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !33
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %188, !dbg !33
  %192 = bitcast float %113 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !33
  %193 = or disjoint i32 %136, 192, !dbg !33
  %194 = getelementptr float, ptr addrspace(3) %139, i32 %193, !dbg !33
  %195 = bitcast float %114 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !33
  %196 = or disjoint i32 %136, 448, !dbg !33
  %197 = lshr i32 %196, 8, !dbg !33
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !33
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %196, !dbg !33
  %200 = bitcast float %115 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !33
  %201 = or disjoint i32 %136, 704, !dbg !33
  %202 = lshr i32 %201, 8, !dbg !33
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !33
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %201, !dbg !33
  %205 = bitcast float %116 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !33
  %206 = or disjoint i32 %136, 960, !dbg !33
  %207 = lshr i32 %206, 8, !dbg !33
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !33
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !33
  %210 = bitcast float %117 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %211 = lshr i32 %137, 8, !dbg !33
  %212 = or disjoint i32 %211, %137, !dbg !33
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !33
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !33
  %215 = or disjoint i32 %137, 1, !dbg !33
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !33
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %215, !dbg !33
  %218 = load i32, ptr addrspace(3) %217, align 4, !dbg !33
  %219 = or disjoint i32 %137, 2, !dbg !33
  %220 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %219, !dbg !33
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !33
  %222 = or disjoint i32 %137, 3, !dbg !33
  %223 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %222, !dbg !33
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !33
  %225 = or disjoint i32 %137, 1024, !dbg !33
  %226 = lshr i32 %225, 8, !dbg !33
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !33
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !33
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !33
  %230 = or disjoint i32 %137, 1025, !dbg !33
  %231 = lshr i32 %230, 8, !dbg !33
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !33
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !33
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !33
  %235 = or disjoint i32 %137, 1026, !dbg !33
  %236 = lshr i32 %235, 8, !dbg !33
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !33
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !33
  %239 = load i32, ptr addrspace(3) %238, align 4, !dbg !33
  %240 = or disjoint i32 %137, 1027, !dbg !33
  %241 = lshr i32 %240, 8, !dbg !33
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !33
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !33
  %244 = load i32, ptr addrspace(3) %243, align 4, !dbg !33
  %245 = or disjoint i32 %137, 2048, !dbg !33
  %246 = lshr i32 %245, 8, !dbg !33
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !33
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !33
  %249 = load i32, ptr addrspace(3) %248, align 4, !dbg !33
  %250 = or disjoint i32 %137, 2049, !dbg !33
  %251 = lshr i32 %250, 8, !dbg !33
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !33
  %253 = getelementptr inbounds float, ptr addrspace(3) %252, i32 %250, !dbg !33
  %254 = load i32, ptr addrspace(3) %253, align 4, !dbg !33
  %255 = or disjoint i32 %137, 2050, !dbg !33
  %256 = lshr i32 %255, 8, !dbg !33
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %256, !dbg !33
  %258 = getelementptr inbounds float, ptr addrspace(3) %257, i32 %255, !dbg !33
  %259 = load i32, ptr addrspace(3) %258, align 4, !dbg !33
  %260 = or disjoint i32 %137, 2051, !dbg !33
  %261 = lshr i32 %260, 8, !dbg !33
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !33
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !33
  %264 = load i32, ptr addrspace(3) %263, align 4, !dbg !33
  %265 = or disjoint i32 %137, 3072, !dbg !33
  %266 = lshr i32 %265, 8, !dbg !33
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !33
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !33
  %269 = load i32, ptr addrspace(3) %268, align 4, !dbg !33
  %270 = or disjoint i32 %137, 3073, !dbg !33
  %271 = lshr i32 %270, 8, !dbg !33
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !33
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !33
  %274 = load i32, ptr addrspace(3) %273, align 4, !dbg !33
  %275 = or disjoint i32 %137, 3074, !dbg !33
  %276 = lshr i32 %275, 8, !dbg !33
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !33
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !33
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !33
  %280 = or disjoint i32 %137, 3075, !dbg !33
  %281 = lshr i32 %280, 8, !dbg !33
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !33
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !33
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %218, i32 %221, i32 %224, ptr addrspace(1) %127, i1 %34) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %229, i32 %234, i32 %239, i32 %244, ptr addrspace(1) %129, i1 %34) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %249, i32 %254, i32 %259, i32 %264, ptr addrspace(1) %131, i1 %34) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %274, i32 %279, i32 %284, ptr addrspace(1) %133, i1 %34) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccqmr6lfplpaw7v6g5twhc5kzzhg4yqt4cwvofu6qdg5v7afttr.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused_convolution_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_35, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_35", linkageName: "triton_poi_fused_convolution_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
