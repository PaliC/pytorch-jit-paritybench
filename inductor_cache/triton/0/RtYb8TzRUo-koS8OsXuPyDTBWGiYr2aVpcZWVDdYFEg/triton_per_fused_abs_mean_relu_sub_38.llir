; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %8, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %11, !dbg !16
  %14 = sdiv i32 %.frozen, 64, !dbg !16
  %15 = mul i32 %14, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %15, !dbg !17
  %16 = shl nsw i32 %.decomposed, 3, !dbg !18
  %17 = shl i32 %8, 6, !dbg !19
  %18 = and i32 %17, 7680, !dbg !19
  %19 = add nsw i32 %16, %18, !dbg !20
  %20 = shl i32 %14, 13, !dbg !21
  %21 = add i32 %19, %20, !dbg !22
  %22 = lshr i32 %8, 7, !dbg !23
  %23 = and i32 %22, 1, !dbg !23
  %24 = or disjoint i32 %21, %23, !dbg !24
  %25 = or disjoint i32 %24, 2, !dbg !24
  %26 = or disjoint i32 %24, 4, !dbg !24
  %27 = or disjoint i32 %24, 6, !dbg !24
  %28 = sext i32 %24 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = sext i32 %25 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = sext i32 %26 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = sext i32 %27 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %12, i32 0, i1 %12) #4, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %12, i32 0, i1 %12) #4, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %12, i32 0, i1 %12) #4, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %12, i32 0, i1 %12) #4, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %12, i32 0, i1 %12) #4, !dbg !28
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %12, i32 0, i1 %12) #4, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %12, i32 0, i1 %12) #4, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %12, i32 0, i1 %12) #4, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fcmp olt float %39, 0.000000e+00, !dbg !29
  %53 = fcmp olt float %41, 0.000000e+00, !dbg !29
  %54 = select i1 %52, float 0.000000e+00, float %39, !dbg !33
  %55 = select i1 %53, float 0.000000e+00, float %41, !dbg !33
  %56 = fcmp olt float %49, 0.000000e+00, !dbg !34
  %57 = fcmp olt float %51, 0.000000e+00, !dbg !34
  %58 = select i1 %56, float 0.000000e+00, float %49, !dbg !36
  %59 = select i1 %57, float 0.000000e+00, float %51, !dbg !36
  %60 = fsub float %54, %58, !dbg !37
  %61 = fsub float %55, %59, !dbg !37
  %62 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !26
  %63 = insertelement <2 x i32> %62, i32 %37, i64 1, !dbg !26
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !26
  %65 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !28
  %66 = insertelement <2 x i32> %65, i32 %47, i64 1, !dbg !28
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !28
  %68 = fcmp olt <2 x float> %64, zeroinitializer, !dbg !29
  %69 = select <2 x i1> %68, <2 x float> zeroinitializer, <2 x float> %64, !dbg !33
  %70 = fcmp olt <2 x float> %67, zeroinitializer, !dbg !34
  %71 = select <2 x i1> %70, <2 x float> zeroinitializer, <2 x float> %67, !dbg !36
  %72 = fsub <2 x float> %69, %71, !dbg !37
  %73 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %72), !dbg !38
  %74 = tail call float @llvm.fabs.f32(float %60), !dbg !38
  %75 = tail call float @llvm.fabs.f32(float %61), !dbg !38
  %shift = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %76 = fadd <2 x float> %73, %shift, !dbg !39
  %77 = extractelement <2 x float> %76, i64 0, !dbg !39
  %78 = fadd float %77, %74, !dbg !39
  %79 = fadd float %78, %75, !dbg !39
  %80 = select i1 %12, float %79, float 0.000000e+00, !dbg !39
  %81 = bitcast float %80 to i32, !dbg !44
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 16, i32 31), !dbg !44
  %83 = bitcast i32 %82 to float, !dbg !44
  %84 = fadd float %80, %83, !dbg !39
  %85 = bitcast float %84 to i32, !dbg !44
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 8, i32 31), !dbg !44
  %87 = bitcast i32 %86 to float, !dbg !44
  %88 = fadd float %84, %87, !dbg !39
  %89 = lshr i32 %9, 3, !dbg !44
  %90 = icmp samesign ult i32 %9, 8, !dbg !44
  %91 = and i32 %13, 7, !dbg !44
  %92 = shl nuw nsw i32 %10, 3, !dbg !44
  %93 = or disjoint i32 %92, %91, !dbg !44
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !44
  %95 = bitcast float %88 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %90) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %96 = icmp slt i32 %8, 64, !dbg !44
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !44
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %96) #4, !dbg !44
  %99 = bitcast i32 %98 to float, !dbg !44
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 4, i32 31), !dbg !44
  %101 = bitcast i32 %100 to float, !dbg !44
  %102 = fadd float %99, %101, !dbg !39
  %103 = bitcast float %102 to i32, !dbg !44
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 2, i32 31), !dbg !44
  %105 = bitcast i32 %104 to float, !dbg !44
  %106 = fadd float %102, %105, !dbg !39
  %107 = bitcast float %106 to i32, !dbg !44
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !44
  %109 = bitcast i32 %108 to float, !dbg !44
  %110 = fadd float %106, %109, !dbg !39
  %111 = icmp eq i32 %10, 0, !dbg !44
  %112 = and i1 %96, %111, !dbg !44
  %113 = bitcast float %110 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %113, i1 %112) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !44
  %115 = load i32, ptr addrspace(3) %114, align 16, !dbg !44
  %116 = sext i32 %11 to i64, !dbg !45
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !45
  %118 = shl nuw nsw i32 %91, 2, !dbg !46
  %119 = or disjoint i32 %118, %89, !dbg !46
  %120 = icmp eq i32 %119, 0, !dbg !46
  %121 = and i1 %120, %12, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %117, i1 %121) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7xpujlycdzvp65rbz364nnthbdsivfwrzey7e5662czey4e47x7.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_relu_sub_38", linkageName: "triton_per_fused_abs_mean_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 37, scope: !7)
!21 = !DILocation(line: 33, column: 60, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 103, scope: !7)
!24 = !DILocation(line: 33, column: 97, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 109, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 109, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 36, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !35)
!35 = !DILocation(line: 37, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !35)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 23, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
