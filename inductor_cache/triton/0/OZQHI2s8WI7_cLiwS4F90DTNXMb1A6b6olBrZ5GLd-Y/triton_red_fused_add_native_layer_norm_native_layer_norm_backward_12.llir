; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #6, !dbg !10
  %14 = shl i32 %13, 2, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 5, !dbg !12
  %17 = and i32 %16, 3, !dbg !12
  %18 = and i32 %15, 31, !dbg !12
  %19 = and i32 %15, 3, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = or disjoint i32 %14, 1, !dbg !13
  %22 = or disjoint i32 %14, 2, !dbg !13
  %23 = or disjoint i32 %14, 3, !dbg !13
  %24 = icmp slt i32 %14, 1024, !dbg !14
  %25 = icmp slt i32 %20, 1024, !dbg !14
  %26 = icmp slt i32 %21, 1024, !dbg !14
  %27 = icmp slt i32 %22, 1024, !dbg !14
  %28 = icmp slt i32 %23, 1024, !dbg !14
  %29 = and i32 %15, 127, !dbg !15
  %30 = shl i32 %15, 2, !dbg !15
  %31 = and i32 %30, 124, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %32 = sdiv i32 %.frozen, 256, !dbg !16
  %33 = sdiv i32 %20, 256, !dbg !16
  %34 = mul i32 %32, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %.frozen34 = freeze i32 %20, !dbg !18
  %35 = sdiv i32 %.frozen34, 16, !dbg !18
  %36 = mul i32 %35, 16, !dbg !19
  %.decomposed35 = sub i32 %.frozen34, %36, !dbg !19
  %37 = srem i32 %35, 16, !dbg !20
  %38 = icmp samesign ult i32 %29, 96, !dbg !21
  %39 = icmp samesign ult i32 %31, 96, !dbg !21
  %40 = shl nuw nsw i32 %29, 8, !dbg !22
  %41 = add nsw i32 %.decomposed, %40, !dbg !23
  %42 = mul i32 %32, 24576, !dbg !24
  %43 = mul i32 %33, 24576, !dbg !24
  %44 = add i32 %41, %42, !dbg !25
  %45 = sext i32 %44 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %47 = and i1 %38, %24, !dbg !27
  %48 = and i1 %39, %25, !dbg !27
  %49 = and i1 %38, %26, !dbg !27
  %50 = and i1 %38, %27, !dbg !27
  %51 = and i1 %38, %28, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #6, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = bitcast i32 %53 to float, !dbg !28
  %58 = bitcast i32 %54 to float, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = mul i32 %20, 96, !dbg !29
  %62 = add i32 %61, %31, !dbg !30
  %63 = sext i32 %62 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #6, !dbg !32
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !32
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !32
  %70 = and i32 %30, 508, !dbg !32
  %71 = lshr i32 %30, 5, !dbg !32
  %72 = and i32 %71, 12, !dbg !32
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !32
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %70, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %29, !dbg !32
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !32
  %77 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 528, !dbg !32
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !32
  %79 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1056, !dbg !32
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !32
  %81 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1584, !dbg !32
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !32
  %83 = zext nneg i32 %29 to i64, !dbg !33
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %38, i32 0, i1 %38) #6, !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %.lhs.trunc = trunc nsw i32 %.decomposed35 to i8, !dbg !35
  %87 = sdiv i8 %.lhs.trunc, 8, !dbg !36
  %88 = mul i8 %87, 8, !dbg !35
  %.decomposed36 = sub i8 %.lhs.trunc, %88, !dbg !35
  %.lhs.trunc28 = trunc nsw i32 %37 to i8, !dbg !37
  %89 = sdiv i8 %.lhs.trunc28, 8, !dbg !38
  %90 = mul i8 %89, 8, !dbg !37
  %.decomposed37 = sub i8 %.lhs.trunc28, %90, !dbg !37
  %91 = insertelement <4 x i8> poison, i8 %.decomposed36, i64 0, !dbg !35
  %92 = insertelement <4 x i8> %91, i8 %87, i64 1, !dbg !35
  %93 = insertelement <4 x i8> %92, i8 %.decomposed37, i64 2, !dbg !35
  %94 = insertelement <4 x i8> %93, i8 %89, i64 3, !dbg !35
  %95 = sext <4 x i8> %94 to <4 x i32>, !dbg !35
  %96 = mul nsw <4 x i32> %95, <i32 96, i32 6144, i32 768, i32 12288>, !dbg !39
  %97 = or disjoint i32 %43, %31, !dbg !40
  %98 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %96), !dbg !41
  %op.rdx = add i32 %98, %97, !dbg !42
  %99 = sext i32 %op.rdx to i64, !dbg !43
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !43
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #6, !dbg !44
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !44
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !44
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !44
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %102, i32 %103, i32 %104, i32 %105, i1 true) #6, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %106 = load float, ptr addrspace(3) %75, align 4, !dbg !44
  %107 = load float, ptr addrspace(3) %77, align 4, !dbg !44
  %108 = load float, ptr addrspace(3) %79, align 4, !dbg !44
  %109 = load float, ptr addrspace(3) %81, align 4, !dbg !44
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !45
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %38, i32 0, i1 %38) #6, !dbg !46
  %112 = bitcast i32 %111 to float, !dbg !46
  %113 = fadd float %76, %86, !dbg !47
  %114 = fadd float %78, %86, !dbg !47
  %115 = fadd float %80, %86, !dbg !47
  %116 = fadd float %82, %86, !dbg !47
  %117 = fadd float %113, %57, !dbg !48
  %118 = fadd float %114, %58, !dbg !48
  %119 = fadd float %115, %59, !dbg !48
  %120 = fadd float %116, %60, !dbg !48
  %121 = fadd float %106, %112, !dbg !49
  %122 = fadd float %107, %112, !dbg !49
  %123 = fadd float %108, %112, !dbg !49
  %124 = fadd float %109, %112, !dbg !49
  %125 = fadd float %117, %121, !dbg !50
  %126 = fadd float %118, %122, !dbg !50
  %127 = fadd float %119, %123, !dbg !50
  %128 = fadd float %120, %124, !dbg !50
  %129 = select i1 %47, float %125, float 0.000000e+00, !dbg !51
  %130 = select i1 %49, float %126, float 0.000000e+00, !dbg !51
  %131 = select i1 %50, float %127, float 0.000000e+00, !dbg !51
  %132 = select i1 %51, float %128, float 0.000000e+00, !dbg !51
  %133 = select i1 %47, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %134 = select i1 %49, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %135 = select i1 %50, float 1.000000e+00, float 0.000000e+00, !dbg !52
  %136 = select i1 %51, float 1.000000e+00, float 0.000000e+00, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %137 = bitcast float %125 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %137, i1 true) #6, !dbg !53
  %138 = bitcast float %126 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %138, i1 true) #6, !dbg !53
  %139 = bitcast float %127 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %139, i1 true) #6, !dbg !53
  %140 = bitcast float %128 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %140, i1 true) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.extract = load i32, ptr addrspace(3) %74, align 16, !dbg !53
  %141 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 4, !dbg !53
  %.extract6 = load i32, ptr addrspace(3) %141, align 4, !dbg !53
  %142 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 8, !dbg !53
  %.extract7 = load i32, ptr addrspace(3) %142, align 8, !dbg !53
  %143 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 12, !dbg !53
  %.extract8 = load i32, ptr addrspace(3) %143, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %64, i1 %48) #6, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %144 = bitcast float %129 to i32, !dbg !54
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !54
  %146 = bitcast i32 %145 to float, !dbg !54
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !54
  %148 = bitcast i32 %147 to float, !dbg !54
  %149 = bitcast float %133 to i32, !dbg !54
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !54
  %151 = bitcast i32 %150 to float, !dbg !54
  %152 = fsub float %146, %129, !dbg !58
  %153 = fadd float %133, %151, !dbg !60
  %154 = fcmp oeq float %153, 0.000000e+00, !dbg !61
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float %153) #6, !dbg !62
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !63
  %157 = fmul float %152, %156, !dbg !64
  %158 = fadd float %129, %157, !dbg !65
  %159 = fadd float %148, 0.000000e+00, !dbg !66
  %160 = fmul float %152, %152, !dbg !67
  %161 = fmul float %133, %160, !dbg !68
  %162 = fmul float %161, %156, !dbg !69
  %163 = fadd float %159, %162, !dbg !70
  %164 = bitcast float %158 to i32, !dbg !54
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !54
  %166 = bitcast i32 %165 to float, !dbg !54
  %167 = bitcast float %163 to i32, !dbg !54
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !54
  %169 = bitcast i32 %168 to float, !dbg !54
  %170 = bitcast float %153 to i32, !dbg !54
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 8, i32 31), !dbg !54
  %172 = bitcast i32 %171 to float, !dbg !54
  %173 = fsub float %166, %158, !dbg !58
  %174 = fadd float %153, %172, !dbg !60
  %175 = fcmp oeq float %174, 0.000000e+00, !dbg !61
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %174) #6, !dbg !62
  %177 = select i1 %175, float 0.000000e+00, float %176, !dbg !63
  %178 = fmul float %173, %177, !dbg !64
  %179 = fadd float %158, %178, !dbg !65
  %180 = fadd float %163, %169, !dbg !66
  %181 = fmul float %173, %173, !dbg !67
  %182 = fmul float %153, %181, !dbg !68
  %183 = fmul float %177, %182, !dbg !69
  %184 = fadd float %180, %183, !dbg !70
  %185 = bitcast float %179 to i32, !dbg !54
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !54
  %187 = bitcast i32 %186 to float, !dbg !54
  %188 = bitcast float %184 to i32, !dbg !54
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 4, i32 31), !dbg !54
  %190 = bitcast i32 %189 to float, !dbg !54
  %191 = bitcast float %174 to i32, !dbg !54
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 4, i32 31), !dbg !54
  %193 = bitcast i32 %192 to float, !dbg !54
  %194 = fsub float %187, %179, !dbg !58
  %195 = fadd float %174, %193, !dbg !60
  %196 = fcmp oeq float %195, 0.000000e+00, !dbg !61
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %195) #6, !dbg !62
  %198 = select i1 %196, float 0.000000e+00, float %197, !dbg !63
  %199 = fmul float %194, %198, !dbg !64
  %200 = fadd float %179, %199, !dbg !65
  %201 = fadd float %184, %190, !dbg !66
  %202 = fmul float %194, %194, !dbg !67
  %203 = fmul float %174, %202, !dbg !68
  %204 = fmul float %198, %203, !dbg !69
  %205 = fadd float %201, %204, !dbg !70
  %206 = bitcast float %200 to i32, !dbg !54
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !54
  %208 = bitcast i32 %207 to float, !dbg !54
  %209 = bitcast float %205 to i32, !dbg !54
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !54
  %211 = bitcast i32 %210 to float, !dbg !54
  %212 = bitcast float %195 to i32, !dbg !54
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !54
  %214 = bitcast i32 %213 to float, !dbg !54
  %215 = fsub float %208, %200, !dbg !58
  %216 = fadd float %195, %214, !dbg !60
  %217 = fcmp oeq float %216, 0.000000e+00, !dbg !61
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %216) #6, !dbg !62
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !63
  %220 = fmul float %215, %219, !dbg !64
  %221 = fadd float %200, %220, !dbg !65
  %222 = fadd float %205, %211, !dbg !66
  %223 = fmul float %215, %215, !dbg !67
  %224 = fmul float %195, %223, !dbg !68
  %225 = fmul float %219, %224, !dbg !69
  %226 = fadd float %222, %225, !dbg !70
  %227 = bitcast float %221 to i32, !dbg !54
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !54
  %229 = bitcast i32 %228 to float, !dbg !54
  %230 = bitcast float %226 to i32, !dbg !54
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !54
  %232 = bitcast i32 %231 to float, !dbg !54
  %233 = bitcast float %216 to i32, !dbg !54
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !54
  %235 = bitcast i32 %234 to float, !dbg !54
  %236 = fsub float %229, %221, !dbg !58
  %237 = fadd float %216, %235, !dbg !60
  %238 = fcmp oeq float %237, 0.000000e+00, !dbg !61
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float %237) #6, !dbg !62
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !63
  %241 = fmul float %236, %240, !dbg !64
  %242 = fadd float %221, %241, !dbg !65
  %243 = fadd float %226, %232, !dbg !66
  %244 = fmul float %236, %236, !dbg !67
  %245 = fmul float %216, %244, !dbg !68
  %246 = fmul float %240, %245, !dbg !69
  %247 = fadd float %243, %246, !dbg !70
  %248 = bitcast float %130 to i32, !dbg !54
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 16, i32 31), !dbg !54
  %250 = bitcast i32 %249 to float, !dbg !54
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !54
  %252 = bitcast i32 %251 to float, !dbg !54
  %253 = bitcast float %134 to i32, !dbg !54
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 16, i32 31), !dbg !54
  %255 = bitcast i32 %254 to float, !dbg !54
  %256 = fsub float %250, %130, !dbg !58
  %257 = fadd float %134, %255, !dbg !60
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !61
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #6, !dbg !62
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !63
  %261 = fmul float %256, %260, !dbg !64
  %262 = fadd float %130, %261, !dbg !65
  %263 = fadd float %252, 0.000000e+00, !dbg !66
  %264 = fmul float %256, %256, !dbg !67
  %265 = fmul float %134, %264, !dbg !68
  %266 = fmul float %265, %260, !dbg !69
  %267 = fadd float %263, %266, !dbg !70
  %268 = bitcast float %262 to i32, !dbg !54
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 8, i32 31), !dbg !54
  %270 = bitcast i32 %269 to float, !dbg !54
  %271 = bitcast float %267 to i32, !dbg !54
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !54
  %273 = bitcast i32 %272 to float, !dbg !54
  %274 = bitcast float %257 to i32, !dbg !54
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 8, i32 31), !dbg !54
  %276 = bitcast i32 %275 to float, !dbg !54
  %277 = fsub float %270, %262, !dbg !58
  %278 = fadd float %257, %276, !dbg !60
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !61
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #6, !dbg !62
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !63
  %282 = fmul float %277, %281, !dbg !64
  %283 = fadd float %262, %282, !dbg !65
  %284 = fadd float %267, %273, !dbg !66
  %285 = fmul float %277, %277, !dbg !67
  %286 = fmul float %257, %285, !dbg !68
  %287 = fmul float %281, %286, !dbg !69
  %288 = fadd float %284, %287, !dbg !70
  %289 = bitcast float %283 to i32, !dbg !54
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 4, i32 31), !dbg !54
  %291 = bitcast i32 %290 to float, !dbg !54
  %292 = bitcast float %288 to i32, !dbg !54
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 4, i32 31), !dbg !54
  %294 = bitcast i32 %293 to float, !dbg !54
  %295 = bitcast float %278 to i32, !dbg !54
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 4, i32 31), !dbg !54
  %297 = bitcast i32 %296 to float, !dbg !54
  %298 = fsub float %291, %283, !dbg !58
  %299 = fadd float %278, %297, !dbg !60
  %300 = fcmp oeq float %299, 0.000000e+00, !dbg !61
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %297, float %299) #6, !dbg !62
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !63
  %303 = fmul float %298, %302, !dbg !64
  %304 = fadd float %283, %303, !dbg !65
  %305 = fadd float %288, %294, !dbg !66
  %306 = fmul float %298, %298, !dbg !67
  %307 = fmul float %278, %306, !dbg !68
  %308 = fmul float %302, %307, !dbg !69
  %309 = fadd float %305, %308, !dbg !70
  %310 = bitcast float %304 to i32, !dbg !54
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !54
  %312 = bitcast i32 %311 to float, !dbg !54
  %313 = bitcast float %309 to i32, !dbg !54
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 2, i32 31), !dbg !54
  %315 = bitcast i32 %314 to float, !dbg !54
  %316 = bitcast float %299 to i32, !dbg !54
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 2, i32 31), !dbg !54
  %318 = bitcast i32 %317 to float, !dbg !54
  %319 = fsub float %312, %304, !dbg !58
  %320 = fadd float %299, %318, !dbg !60
  %321 = fcmp oeq float %320, 0.000000e+00, !dbg !61
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %318, float %320) #6, !dbg !62
  %323 = select i1 %321, float 0.000000e+00, float %322, !dbg !63
  %324 = fmul float %319, %323, !dbg !64
  %325 = fadd float %304, %324, !dbg !65
  %326 = fadd float %309, %315, !dbg !66
  %327 = fmul float %319, %319, !dbg !67
  %328 = fmul float %299, %327, !dbg !68
  %329 = fmul float %323, %328, !dbg !69
  %330 = fadd float %326, %329, !dbg !70
  %331 = bitcast float %325 to i32, !dbg !54
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 1, i32 31), !dbg !54
  %333 = bitcast i32 %332 to float, !dbg !54
  %334 = bitcast float %330 to i32, !dbg !54
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 1, i32 31), !dbg !54
  %336 = bitcast i32 %335 to float, !dbg !54
  %337 = bitcast float %320 to i32, !dbg !54
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %337, i32 1, i32 31), !dbg !54
  %339 = bitcast i32 %338 to float, !dbg !54
  %340 = fsub float %333, %325, !dbg !58
  %341 = fadd float %320, %339, !dbg !60
  %342 = fcmp oeq float %341, 0.000000e+00, !dbg !61
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %339, float %341) #6, !dbg !62
  %344 = select i1 %342, float 0.000000e+00, float %343, !dbg !63
  %345 = fmul float %340, %344, !dbg !64
  %346 = fadd float %325, %345, !dbg !65
  %347 = fadd float %330, %336, !dbg !66
  %348 = fmul float %340, %340, !dbg !67
  %349 = fmul float %320, %348, !dbg !68
  %350 = fmul float %344, %349, !dbg !69
  %351 = fadd float %347, %350, !dbg !70
  %352 = bitcast float %131 to i32, !dbg !54
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 16, i32 31), !dbg !54
  %354 = bitcast i32 %353 to float, !dbg !54
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !54
  %356 = bitcast i32 %355 to float, !dbg !54
  %357 = bitcast float %135 to i32, !dbg !54
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %357, i32 16, i32 31), !dbg !54
  %359 = bitcast i32 %358 to float, !dbg !54
  %360 = fsub float %354, %131, !dbg !58
  %361 = fadd float %135, %359, !dbg !60
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !61
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #6, !dbg !62
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !63
  %365 = fmul float %360, %364, !dbg !64
  %366 = fadd float %131, %365, !dbg !65
  %367 = fadd float %356, 0.000000e+00, !dbg !66
  %368 = fmul float %360, %360, !dbg !67
  %369 = fmul float %135, %368, !dbg !68
  %370 = fmul float %369, %364, !dbg !69
  %371 = fadd float %367, %370, !dbg !70
  %372 = bitcast float %366 to i32, !dbg !54
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 8, i32 31), !dbg !54
  %374 = bitcast i32 %373 to float, !dbg !54
  %375 = bitcast float %371 to i32, !dbg !54
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 8, i32 31), !dbg !54
  %377 = bitcast i32 %376 to float, !dbg !54
  %378 = bitcast float %361 to i32, !dbg !54
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 8, i32 31), !dbg !54
  %380 = bitcast i32 %379 to float, !dbg !54
  %381 = fsub float %374, %366, !dbg !58
  %382 = fadd float %361, %380, !dbg !60
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !61
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %382) #6, !dbg !62
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !63
  %386 = fmul float %381, %385, !dbg !64
  %387 = fadd float %366, %386, !dbg !65
  %388 = fadd float %371, %377, !dbg !66
  %389 = fmul float %381, %381, !dbg !67
  %390 = fmul float %361, %389, !dbg !68
  %391 = fmul float %385, %390, !dbg !69
  %392 = fadd float %388, %391, !dbg !70
  %393 = bitcast float %387 to i32, !dbg !54
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 4, i32 31), !dbg !54
  %395 = bitcast i32 %394 to float, !dbg !54
  %396 = bitcast float %392 to i32, !dbg !54
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 4, i32 31), !dbg !54
  %398 = bitcast i32 %397 to float, !dbg !54
  %399 = bitcast float %382 to i32, !dbg !54
  %400 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %399, i32 4, i32 31), !dbg !54
  %401 = bitcast i32 %400 to float, !dbg !54
  %402 = fsub float %395, %387, !dbg !58
  %403 = fadd float %382, %401, !dbg !60
  %404 = fcmp oeq float %403, 0.000000e+00, !dbg !61
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float %403) #6, !dbg !62
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !63
  %407 = fmul float %402, %406, !dbg !64
  %408 = fadd float %387, %407, !dbg !65
  %409 = fadd float %392, %398, !dbg !66
  %410 = fmul float %402, %402, !dbg !67
  %411 = fmul float %382, %410, !dbg !68
  %412 = fmul float %406, %411, !dbg !69
  %413 = fadd float %409, %412, !dbg !70
  %414 = bitcast float %408 to i32, !dbg !54
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 2, i32 31), !dbg !54
  %416 = bitcast i32 %415 to float, !dbg !54
  %417 = bitcast float %413 to i32, !dbg !54
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 2, i32 31), !dbg !54
  %419 = bitcast i32 %418 to float, !dbg !54
  %420 = bitcast float %403 to i32, !dbg !54
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !54
  %422 = bitcast i32 %421 to float, !dbg !54
  %423 = fsub float %416, %408, !dbg !58
  %424 = fadd float %403, %422, !dbg !60
  %425 = fcmp oeq float %424, 0.000000e+00, !dbg !61
  %426 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %422, float %424) #6, !dbg !62
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !63
  %428 = fmul float %423, %427, !dbg !64
  %429 = fadd float %408, %428, !dbg !65
  %430 = fadd float %413, %419, !dbg !66
  %431 = fmul float %423, %423, !dbg !67
  %432 = fmul float %403, %431, !dbg !68
  %433 = fmul float %427, %432, !dbg !69
  %434 = fadd float %430, %433, !dbg !70
  %435 = bitcast float %429 to i32, !dbg !54
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 1, i32 31), !dbg !54
  %437 = bitcast i32 %436 to float, !dbg !54
  %438 = bitcast float %434 to i32, !dbg !54
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 1, i32 31), !dbg !54
  %440 = bitcast i32 %439 to float, !dbg !54
  %441 = bitcast float %424 to i32, !dbg !54
  %442 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %441, i32 1, i32 31), !dbg !54
  %443 = bitcast i32 %442 to float, !dbg !54
  %444 = fsub float %437, %429, !dbg !58
  %445 = fadd float %424, %443, !dbg !60
  %446 = fcmp oeq float %445, 0.000000e+00, !dbg !61
  %447 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %443, float %445) #6, !dbg !62
  %448 = select i1 %446, float 0.000000e+00, float %447, !dbg !63
  %449 = fmul float %444, %448, !dbg !64
  %450 = fadd float %429, %449, !dbg !65
  %451 = fadd float %434, %440, !dbg !66
  %452 = fmul float %444, %444, !dbg !67
  %453 = fmul float %424, %452, !dbg !68
  %454 = fmul float %448, %453, !dbg !69
  %455 = fadd float %451, %454, !dbg !70
  %456 = bitcast float %132 to i32, !dbg !54
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 16, i32 31), !dbg !54
  %458 = bitcast i32 %457 to float, !dbg !54
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 0, i32 16, i32 31), !dbg !54
  %460 = bitcast i32 %459 to float, !dbg !54
  %461 = bitcast float %136 to i32, !dbg !54
  %462 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 16, i32 31), !dbg !54
  %463 = bitcast i32 %462 to float, !dbg !54
  %464 = fsub float %458, %132, !dbg !58
  %465 = fadd float %136, %463, !dbg !60
  %466 = fcmp oeq float %465, 0.000000e+00, !dbg !61
  %467 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %463, float %465) #6, !dbg !62
  %468 = select i1 %466, float 0.000000e+00, float %467, !dbg !63
  %469 = fmul float %464, %468, !dbg !64
  %470 = fadd float %132, %469, !dbg !65
  %471 = fadd float %460, 0.000000e+00, !dbg !66
  %472 = fmul float %464, %464, !dbg !67
  %473 = fmul float %136, %472, !dbg !68
  %474 = fmul float %473, %468, !dbg !69
  %475 = fadd float %471, %474, !dbg !70
  %476 = bitcast float %470 to i32, !dbg !54
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 8, i32 31), !dbg !54
  %478 = bitcast i32 %477 to float, !dbg !54
  %479 = bitcast float %475 to i32, !dbg !54
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 8, i32 31), !dbg !54
  %481 = bitcast i32 %480 to float, !dbg !54
  %482 = bitcast float %465 to i32, !dbg !54
  %483 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %482, i32 8, i32 31), !dbg !54
  %484 = bitcast i32 %483 to float, !dbg !54
  %485 = fsub float %478, %470, !dbg !58
  %486 = fadd float %465, %484, !dbg !60
  %487 = fcmp oeq float %486, 0.000000e+00, !dbg !61
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %484, float %486) #6, !dbg !62
  %489 = select i1 %487, float 0.000000e+00, float %488, !dbg !63
  %490 = fmul float %485, %489, !dbg !64
  %491 = fadd float %470, %490, !dbg !65
  %492 = fadd float %475, %481, !dbg !66
  %493 = fmul float %485, %485, !dbg !67
  %494 = fmul float %465, %493, !dbg !68
  %495 = fmul float %489, %494, !dbg !69
  %496 = fadd float %492, %495, !dbg !70
  %497 = bitcast float %491 to i32, !dbg !54
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 4, i32 31), !dbg !54
  %499 = bitcast i32 %498 to float, !dbg !54
  %500 = bitcast float %496 to i32, !dbg !54
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 4, i32 31), !dbg !54
  %502 = bitcast i32 %501 to float, !dbg !54
  %503 = bitcast float %486 to i32, !dbg !54
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %503, i32 4, i32 31), !dbg !54
  %505 = bitcast i32 %504 to float, !dbg !54
  %506 = fsub float %499, %491, !dbg !58
  %507 = fadd float %486, %505, !dbg !60
  %508 = fcmp oeq float %507, 0.000000e+00, !dbg !61
  %509 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %507) #6, !dbg !62
  %510 = select i1 %508, float 0.000000e+00, float %509, !dbg !63
  %511 = fmul float %506, %510, !dbg !64
  %512 = fadd float %491, %511, !dbg !65
  %513 = fadd float %496, %502, !dbg !66
  %514 = fmul float %506, %506, !dbg !67
  %515 = fmul float %486, %514, !dbg !68
  %516 = fmul float %510, %515, !dbg !69
  %517 = fadd float %513, %516, !dbg !70
  %518 = bitcast float %512 to i32, !dbg !54
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 2, i32 31), !dbg !54
  %520 = bitcast i32 %519 to float, !dbg !54
  %521 = bitcast float %517 to i32, !dbg !54
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 2, i32 31), !dbg !54
  %523 = bitcast i32 %522 to float, !dbg !54
  %524 = bitcast float %507 to i32, !dbg !54
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 2, i32 31), !dbg !54
  %526 = bitcast i32 %525 to float, !dbg !54
  %527 = fsub float %520, %512, !dbg !58
  %528 = fadd float %507, %526, !dbg !60
  %529 = fcmp oeq float %528, 0.000000e+00, !dbg !61
  %530 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %528) #6, !dbg !62
  %531 = select i1 %529, float 0.000000e+00, float %530, !dbg !63
  %532 = fmul float %527, %531, !dbg !64
  %533 = fadd float %512, %532, !dbg !65
  %534 = fadd float %517, %523, !dbg !66
  %535 = fmul float %527, %527, !dbg !67
  %536 = fmul float %507, %535, !dbg !68
  %537 = fmul float %531, %536, !dbg !69
  %538 = fadd float %534, %537, !dbg !70
  %539 = bitcast float %533 to i32, !dbg !54
  %540 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %539, i32 1, i32 31), !dbg !54
  %541 = bitcast i32 %540 to float, !dbg !54
  %542 = bitcast float %538 to i32, !dbg !54
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 1, i32 31), !dbg !54
  %544 = bitcast i32 %543 to float, !dbg !54
  %545 = bitcast float %528 to i32, !dbg !54
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 1, i32 31), !dbg !54
  %547 = bitcast i32 %546 to float, !dbg !54
  %548 = fsub float %541, %533, !dbg !58
  %549 = fadd float %528, %547, !dbg !60
  %550 = fcmp oeq float %549, 0.000000e+00, !dbg !61
  %551 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %547, float %549) #6, !dbg !62
  %552 = select i1 %550, float 0.000000e+00, float %551, !dbg !63
  %553 = fmul float %548, %552, !dbg !64
  %554 = fadd float %533, %553, !dbg !65
  %555 = fadd float %538, %544, !dbg !66
  %556 = fmul float %548, %548, !dbg !67
  %557 = fmul float %528, %556, !dbg !68
  %558 = fmul float %552, %557, !dbg !69
  %559 = fadd float %555, %558, !dbg !70
  %560 = icmp eq i32 %18, 0, !dbg !54
  %561 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !54
  %562 = bitcast float %242 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %562, i1 %560) #6, !dbg !54
  %563 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %17, !dbg !54
  %564 = bitcast float %247 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %563, <1 x i32> %564, i1 %560) #6, !dbg !54
  %565 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %17, !dbg !54
  %566 = bitcast float %237 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %565, <1 x i32> %566, i1 %560) #6, !dbg !54
  %567 = or disjoint i32 %17, 4, !dbg !54
  %568 = getelementptr float, ptr addrspace(3) @global_smem, i32 %567, !dbg !54
  %569 = bitcast float %346 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %569, i1 %560) #6, !dbg !54
  %570 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %567, !dbg !54
  %571 = bitcast float %351 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %570, <1 x i32> %571, i1 %560) #6, !dbg !54
  %572 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %567, !dbg !54
  %573 = bitcast float %341 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %573, i1 %560) #6, !dbg !54
  %574 = or disjoint i32 %17, 8, !dbg !54
  %575 = getelementptr float, ptr addrspace(3) @global_smem, i32 %574, !dbg !54
  %576 = bitcast float %450 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %575, <1 x i32> %576, i1 %560) #6, !dbg !54
  %577 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %574, !dbg !54
  %578 = bitcast float %455 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %577, <1 x i32> %578, i1 %560) #6, !dbg !54
  %579 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %574, !dbg !54
  %580 = bitcast float %445 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %579, <1 x i32> %580, i1 %560) #6, !dbg !54
  %581 = or disjoint i32 %17, 12, !dbg !54
  %582 = getelementptr float, ptr addrspace(3) @global_smem, i32 %581, !dbg !54
  %583 = bitcast float %554 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %583, i1 %560) #6, !dbg !54
  %584 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %581, !dbg !54
  %585 = bitcast float %559 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %584, <1 x i32> %585, i1 %560) #6, !dbg !54
  %586 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %581, !dbg !54
  %587 = bitcast float %549 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %587, i1 %560) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %588 = icmp slt i32 %15, 16, !dbg !54
  %589 = getelementptr float, ptr addrspace(3) @global_smem, i32 %15, !dbg !54
  %590 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %589, i1 %588) #6, !dbg !54
  %591 = bitcast i32 %590 to float, !dbg !54
  %592 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %15, !dbg !54
  %593 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %592, i1 %588) #6, !dbg !54
  %594 = bitcast i32 %593 to float, !dbg !54
  %595 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %15, !dbg !54
  %596 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %595, i1 %588) #6, !dbg !54
  %597 = bitcast i32 %596 to float, !dbg !54
  %598 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %590, i32 2, i32 31), !dbg !54
  %599 = bitcast i32 %598 to float, !dbg !54
  %600 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %593, i32 2, i32 31), !dbg !54
  %601 = bitcast i32 %600 to float, !dbg !54
  %602 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %596, i32 2, i32 31), !dbg !54
  %603 = bitcast i32 %602 to float, !dbg !54
  %604 = fsub float %599, %591, !dbg !58
  %605 = fadd float %597, %603, !dbg !60
  %606 = fcmp oeq float %605, 0.000000e+00, !dbg !61
  %607 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %603, float %605) #6, !dbg !62
  %608 = select i1 %606, float 0.000000e+00, float %607, !dbg !63
  %609 = fmul float %604, %608, !dbg !64
  %610 = fadd float %609, %591, !dbg !65
  %611 = fadd float %594, %601, !dbg !66
  %612 = fmul float %604, %604, !dbg !67
  %613 = fmul float %612, %597, !dbg !68
  %614 = fmul float %613, %608, !dbg !69
  %615 = fadd float %611, %614, !dbg !70
  %616 = bitcast float %610 to i32, !dbg !54
  %617 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %616, i32 1, i32 31), !dbg !54
  %618 = bitcast i32 %617 to float, !dbg !54
  %619 = bitcast float %615 to i32, !dbg !54
  %620 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %619, i32 1, i32 31), !dbg !54
  %621 = bitcast i32 %620 to float, !dbg !54
  %622 = bitcast float %605 to i32, !dbg !54
  %623 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %622, i32 1, i32 31), !dbg !54
  %624 = bitcast i32 %623 to float, !dbg !54
  %625 = fsub float %618, %610, !dbg !58
  %626 = fadd float %605, %624, !dbg !60
  %627 = fcmp oeq float %626, 0.000000e+00, !dbg !61
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %624, float %626) #6, !dbg !62
  %629 = select i1 %627, float 0.000000e+00, float %628, !dbg !63
  %630 = fmul float %625, %629, !dbg !64
  %631 = fadd float %610, %630, !dbg !65
  %632 = fadd float %615, %621, !dbg !66
  %633 = fmul float %625, %625, !dbg !67
  %634 = fmul float %605, %633, !dbg !68
  %635 = fmul float %629, %634, !dbg !69
  %636 = fadd float %632, %635, !dbg !70
  %637 = icmp eq i32 %19, 0, !dbg !54
  %638 = and i1 %588, %637, !dbg !54
  %639 = bitcast float %631 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %589, <1 x i32> %639, i1 %638) #6, !dbg !54
  %640 = bitcast float %636 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %640, i1 %638) #6, !dbg !54
  %641 = bitcast float %626 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %595, <1 x i32> %641, i1 %638) #6, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %642 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %643 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !54
  %644 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !54
  %645 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !54
  %646 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !54
  %647 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 80), align 16, !dbg !54
  %648 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 96), align 16, !dbg !54
  %649 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 112), align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %650 = bitcast float %646 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %650, i1 true) #6, !dbg !71
  %651 = bitcast float %647 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %651, i1 true) #6, !dbg !71
  %652 = bitcast float %648 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %652, i1 true) #6, !dbg !71
  %653 = bitcast float %649 to <1 x i32>, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 12), <1 x i32> %653, i1 true) #6, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %654 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !71
  %655 = load float, ptr addrspace(3) %654, align 4, !dbg !71
  %656 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #6, !dbg !72
  %657 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !73
  %658 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %657, i1 %38, i32 0, i1 %38) #6, !dbg !74
  %659 = getelementptr float, ptr addrspace(1) %6, i64 %83, !dbg !75
  %660 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %659, i1 %38, i32 0, i1 %38) #6, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %661 = insertelement <1 x i32> poison, i32 %642, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %661, i1 true) #6, !dbg !77
  %662 = insertelement <1 x i32> poison, i32 %643, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %662, i1 true) #6, !dbg !77
  %663 = insertelement <1 x i32> poison, i32 %644, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %663, i1 true) #6, !dbg !77
  %664 = insertelement <1 x i32> poison, i32 %645, i64 0, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %664, i1 true) #6, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %.idx = shl nuw nsw i32 %17, 3, !dbg !77
  %665 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !77
  %666 = load float, ptr addrspace(3) %665, align 8, !dbg !77
  %667 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %655, float 9.600000e+01) #6, !dbg !78
  %668 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %646, float 9.600000e+01) #6, !dbg !78
  %669 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %647, float 9.600000e+01) #6, !dbg !78
  %670 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %648, float 9.600000e+01) #6, !dbg !78
  %671 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %649, float 9.600000e+01) #6, !dbg !78
  %672 = fadd float %667, 0x3EB0C6F7A0000000, !dbg !79
  %673 = fadd float %668, 0x3EB0C6F7A0000000, !dbg !79
  %674 = fadd float %669, 0x3EB0C6F7A0000000, !dbg !79
  %675 = fadd float %670, 0x3EB0C6F7A0000000, !dbg !79
  %676 = fadd float %671, 0x3EB0C6F7A0000000, !dbg !79
  %677 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i = icmp eq i32 %677, 0, !dbg !80
  br i1 %.not.i, label %680, label %678, !dbg !80

678:                                              ; preds = %12
  %679 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %672), !dbg !80
  br label %__nv_rsqrtf.exit, !dbg !80

680:                                              ; preds = %12
  %681 = tail call float @llvm.nvvm.rsqrt.approx.f(float %672), !dbg !80
  br label %__nv_rsqrtf.exit, !dbg !80

__nv_rsqrtf.exit:                                 ; preds = %678, %680
  %.0.i = phi float [ %679, %678 ], [ %681, %680 ], !dbg !80
  %682 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i16 = icmp eq i32 %682, 0, !dbg !80
  br i1 %.not.i16, label %685, label %683, !dbg !80

683:                                              ; preds = %__nv_rsqrtf.exit
  %684 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %673), !dbg !80
  br label %__nv_rsqrtf.exit18, !dbg !80

685:                                              ; preds = %__nv_rsqrtf.exit
  %686 = tail call float @llvm.nvvm.rsqrt.approx.f(float %673), !dbg !80
  br label %__nv_rsqrtf.exit18, !dbg !80

__nv_rsqrtf.exit18:                               ; preds = %683, %685
  %.0.i17 = phi float [ %684, %683 ], [ %686, %685 ], !dbg !80
  %687 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i19 = icmp eq i32 %687, 0, !dbg !80
  br i1 %.not.i19, label %690, label %688, !dbg !80

688:                                              ; preds = %__nv_rsqrtf.exit18
  %689 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %674), !dbg !80
  br label %__nv_rsqrtf.exit21, !dbg !80

690:                                              ; preds = %__nv_rsqrtf.exit18
  %691 = tail call float @llvm.nvvm.rsqrt.approx.f(float %674), !dbg !80
  br label %__nv_rsqrtf.exit21, !dbg !80

__nv_rsqrtf.exit21:                               ; preds = %688, %690
  %.0.i20 = phi float [ %689, %688 ], [ %691, %690 ], !dbg !80
  %692 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i22 = icmp eq i32 %692, 0, !dbg !80
  br i1 %.not.i22, label %695, label %693, !dbg !80

693:                                              ; preds = %__nv_rsqrtf.exit21
  %694 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %675), !dbg !80
  br label %__nv_rsqrtf.exit24, !dbg !80

695:                                              ; preds = %__nv_rsqrtf.exit21
  %696 = tail call float @llvm.nvvm.rsqrt.approx.f(float %675), !dbg !80
  br label %__nv_rsqrtf.exit24, !dbg !80

__nv_rsqrtf.exit24:                               ; preds = %693, %695
  %.0.i23 = phi float [ %694, %693 ], [ %696, %695 ], !dbg !80
  %697 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #6, !dbg !80
  %.not.i25 = icmp eq i32 %697, 0, !dbg !80
  br i1 %.not.i25, label %700, label %698, !dbg !80

698:                                              ; preds = %__nv_rsqrtf.exit24
  %699 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %676), !dbg !80
  br label %__nv_rsqrtf.exit27, !dbg !80

700:                                              ; preds = %__nv_rsqrtf.exit24
  %701 = tail call float @llvm.nvvm.rsqrt.approx.f(float %676), !dbg !80
  br label %__nv_rsqrtf.exit27, !dbg !80

__nv_rsqrtf.exit27:                               ; preds = %698, %700
  %.0.i26 = phi float [ %699, %698 ], [ %701, %700 ], !dbg !80
  %702 = extractvalue { i32, i32, i32, i32 } %656, 3, !dbg !72
  %703 = bitcast i32 %702 to float, !dbg !72
  %704 = fsub float %703, %666, !dbg !77
  %705 = extractvalue { i32, i32, i32, i32 } %656, 2, !dbg !72
  %706 = bitcast i32 %705 to float, !dbg !72
  %707 = fsub float %706, %666, !dbg !77
  %708 = extractvalue { i32, i32, i32, i32 } %656, 1, !dbg !72
  %709 = bitcast i32 %708 to float, !dbg !72
  %710 = fsub float %709, %666, !dbg !77
  %711 = extractvalue { i32, i32, i32, i32 } %656, 0, !dbg !72
  %712 = bitcast i32 %711 to float, !dbg !72
  %713 = fsub float %712, %666, !dbg !77
  %714 = bitcast i32 %660 to float, !dbg !76
  %715 = bitcast i32 %658 to float, !dbg !74
  %716 = or disjoint i32 %14, %19, !dbg !13
  %717 = icmp slt i32 %716, 1024, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %718 = bitcast float %.0.i17 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %718, i1 true) #6, !dbg !81
  %719 = bitcast float %.0.i20 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %719, i1 true) #6, !dbg !81
  %720 = bitcast float %.0.i23 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 16), <1 x i32> %720, i1 true) #6, !dbg !81
  %721 = bitcast float %.0.i26 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 24), <1 x i32> %721, i1 true) #6, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %722 = load float, ptr addrspace(3) %665, align 8, !dbg !81
  %723 = fmul float %713, %722, !dbg !81
  %724 = fmul float %710, %722, !dbg !81
  %725 = fmul float %707, %722, !dbg !81
  %726 = fmul float %704, %722, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %727 = bitcast float %723 to i32, !dbg !81
  %728 = bitcast float %724 to i32, !dbg !81
  %729 = bitcast float %725 to i32, !dbg !81
  %730 = bitcast float %726 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %727, i32 %728, i32 %729, i32 %730, i1 true) #6, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %731 = load float, ptr addrspace(3) %75, align 4, !dbg !81
  %732 = load float, ptr addrspace(3) %77, align 4, !dbg !81
  %733 = load float, ptr addrspace(3) %79, align 4, !dbg !81
  %734 = load float, ptr addrspace(3) %81, align 4, !dbg !81
  %735 = fmul float %731, %715, !dbg !82
  %736 = fmul float %732, %715, !dbg !82
  %737 = fmul float %733, %715, !dbg !82
  %738 = fmul float %734, %715, !dbg !82
  %739 = fadd float %735, %714, !dbg !83
  %740 = fadd float %736, %714, !dbg !83
  %741 = fadd float %737, %714, !dbg !83
  %742 = fadd float %738, %714, !dbg !83
  %743 = getelementptr float, ptr addrspace(1) %7, i64 %63, !dbg !84
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %727, i32 %728, i32 %729, i32 %730, ptr addrspace(1) %743, i1 %48) #6, !dbg !85
  %744 = getelementptr float, ptr addrspace(1) %8, i64 %63, !dbg !86
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %745 = bitcast float %739 to <1 x i32>, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %745, i1 true) #6, !dbg !87
  %746 = bitcast float %740 to <1 x i32>, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %746, i1 true) #6, !dbg !87
  %747 = bitcast float %741 to <1 x i32>, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %747, i1 true) #6, !dbg !87
  %748 = bitcast float %742 to <1 x i32>, !dbg !87
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %748, i1 true) #6, !dbg !87
  tail call void @llvm.nvvm.barrier0(), !dbg !87
  %.extract12 = load i32, ptr addrspace(3) %74, align 16, !dbg !87
  %.extract13 = load i32, ptr addrspace(3) %141, align 4, !dbg !87
  %.extract14 = load i32, ptr addrspace(3) %142, align 8, !dbg !87
  %.extract15 = load i32, ptr addrspace(3) %143, align 4, !dbg !87
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %744, i1 %48) #6, !dbg !87
  %749 = fmul float %.0.i, 0x3F85555560000000, !dbg !71
  %750 = sext i32 %716 to i64, !dbg !88
  %751 = getelementptr float, ptr addrspace(1) %9, i64 %750, !dbg !88
  %752 = lshr i32 %18, 2, !dbg !89
  %753 = or disjoint i32 %.idx, %752, !dbg !89
  %754 = icmp eq i32 %753, 0, !dbg !89
  %755 = bitcast float %749 to i32, !dbg !89
  %756 = and i1 %754, %717, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %755, ptr addrspace(1) %751, i1 %756) #6, !dbg !89
  ret void, !dbg !90
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #5

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py", directory: "inductor_cache/jx")
!4 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", linkageName: "triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 27, scope: !7)
!21 = !DILocation(line: 36, column: 25, scope: !7)
!22 = !DILocation(line: 38, column: 43, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 38, column: 54, scope: !7)
!25 = !DILocation(line: 38, column: 48, scope: !7)
!26 = !DILocation(line: 38, column: 34, scope: !7)
!27 = !DILocation(line: 38, column: 67, scope: !7)
!28 = !DILocation(line: 38, column: 59, scope: !7)
!29 = !DILocation(line: 39, column: 46, scope: !7)
!30 = !DILocation(line: 39, column: 43, scope: !7)
!31 = !DILocation(line: 39, column: 38, scope: !7)
!32 = !DILocation(line: 39, column: 51, scope: !7)
!33 = !DILocation(line: 40, column: 34, scope: !7)
!34 = !DILocation(line: 40, column: 39, scope: !7)
!35 = !DILocation(line: 41, column: 49, scope: !7)
!36 = !DILocation(line: 41, column: 84, scope: !7)
!37 = !DILocation(line: 41, column: 66, scope: !7)
!38 = !DILocation(line: 41, column: 102, scope: !7)
!39 = !DILocation(line: 41, column: 44, scope: !7)
!40 = !DILocation(line: 41, column: 39, scope: !7)
!41 = !DILocation(line: 41, column: 107, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 34, scope: !7)
!44 = !DILocation(line: 41, column: 118, scope: !7)
!45 = !DILocation(line: 42, column: 34, scope: !7)
!46 = !DILocation(line: 42, column: 39, scope: !7)
!47 = !DILocation(line: 43, column: 22, scope: !7)
!48 = !DILocation(line: 44, column: 22, scope: !7)
!49 = !DILocation(line: 45, column: 22, scope: !7)
!50 = !DILocation(line: 46, column: 22, scope: !7)
!51 = !DILocation(line: 51, column: 62, scope: !7)
!52 = !DILocation(line: 53, column: 66, scope: !7)
!53 = !DILocation(line: 54, column: 51, scope: !7)
!54 = !DILocation(line: 204, column: 46, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 56, column: 44, scope: !7)
!58 = !DILocation(line: 192, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !55, file: !56, discriminator: 0)
!60 = !DILocation(line: 193, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 194, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 194, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 196, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 196, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 197, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 85, column: 20, scope: !7)
!72 = !DILocation(line: 65, column: 52, scope: !7)
!73 = !DILocation(line: 66, column: 35, scope: !7)
!74 = !DILocation(line: 66, column: 40, scope: !7)
!75 = !DILocation(line: 67, column: 35, scope: !7)
!76 = !DILocation(line: 67, column: 40, scope: !7)
!77 = !DILocation(line: 68, column: 24, scope: !7)
!78 = !DILocation(line: 70, column: 24, scope: !7)
!79 = !DILocation(line: 72, column: 24, scope: !7)
!80 = !DILocation(line: 73, column: 32, scope: !7)
!81 = !DILocation(line: 74, column: 24, scope: !7)
!82 = !DILocation(line: 75, column: 24, scope: !7)
!83 = !DILocation(line: 76, column: 24, scope: !7)
!84 = !DILocation(line: 77, column: 29, scope: !7)
!85 = !DILocation(line: 77, column: 49, scope: !7)
!86 = !DILocation(line: 78, column: 29, scope: !7)
!87 = !DILocation(line: 78, column: 49, scope: !7)
!88 = !DILocation(line: 86, column: 25, scope: !7)
!89 = !DILocation(line: 86, column: 37, scope: !7)
!90 = !DILocation(line: 86, column: 4, scope: !7)
