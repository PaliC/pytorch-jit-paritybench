#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0)
#loc1 = loc(unknown)
#loc52 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":56:44)
#loc88 = loc(callsite(#loc1 at #loc52))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_add_native_layer_norm_native_layer_norm_backward_12(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<9.600000e+01> : tensor<4x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<12288> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<6144> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<768> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_3 = arith.constant dense<8> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<96> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<24576> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<24576> : tensor<4x1xi32, #blocked2> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1x128xi32, #blocked2> loc(#loc1)
    %cst_8 = arith.constant dense<96> : tensor<1x128xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<96> : tensor<1x128xi32, #blocked2> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<256> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<4x1xi32, #blocked2> loc(#loc1)
    %cst_13 = arith.constant dense<1024> : tensor<4x1xi32, #blocked3> loc(#loc1)
    %cst_14 = arith.constant dense<1024> : tensor<4x1xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<1024> : tensor<4x1xi32, #blocked1> loc(#loc1)
    %cst_16 = arith.constant dense<1024> : tensor<4x1xi32, #blocked2> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %cst_17 = arith.constant dense<0.000000e+00> : tensor<4x128xf32, #blocked2> loc(#loc1)
    %cst_18 = arith.constant dense<0.000000e+00> : tensor<4x128xf32, #blocked1> loc(#loc1)
    %cst_19 = arith.constant dense<96> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_20 = arith.constant dense<0.000000e+00> : tensor<4x128xf32, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_22 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_23 = arith.constant dense<1.000000e+00> : tensor<4x128xf32, #blocked> loc(#loc1)
    %cst_24 = arith.constant dense<9.99999997E-7> : tensor<4x1xf32, #blocked> loc(#loc1)
    %cst_25 = arith.constant dense<9.99999997E-7> : tensor<4x1xf32, #blocked3> loc(#loc1)
    %cst_26 = arith.constant dense<9.600000e+01> : tensor<4x1xf32, #blocked3> loc(#loc1)
    %cst_27 = arith.constant dense<0.010416667> : tensor<4x1xf32, #blocked3> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c4_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %3 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %5 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc4)
    %6 = tt.expand_dims %2 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<4x1xi32, #blocked2> loc(#loc4)
    %7 = tt.expand_dims %3 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<4x1xi32, #blocked1> loc(#loc4)
    %8 = tt.expand_dims %4 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xi32, #blocked> loc(#loc4)
    %9 = tt.expand_dims %5 {axis = 1 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<4x1xi32, #blocked3> loc(#loc4)
    %10 = tt.splat %1 : i32 -> tensor<4x1xi32, #blocked2> loc(#loc5)
    %11 = tt.splat %1 : i32 -> tensor<4x1xi32, #blocked1> loc(#loc5)
    %12 = tt.splat %1 : i32 -> tensor<4x1xi32, #blocked> loc(#loc5)
    %13 = tt.splat %1 : i32 -> tensor<4x1xi32, #blocked3> loc(#loc5)
    %14 = arith.addi %10, %6 : tensor<4x1xi32, #blocked2> loc(#loc5)
    %15 = arith.addi %11, %7 : tensor<4x1xi32, #blocked1> loc(#loc5)
    %16 = arith.addi %12, %8 : tensor<4x1xi32, #blocked> loc(#loc5)
    %17 = arith.addi %13, %9 : tensor<4x1xi32, #blocked3> loc(#loc5)
    %18 = arith.cmpi slt, %14, %cst_16 : tensor<4x1xi32, #blocked2> loc(#loc6)
    %19 = arith.cmpi slt, %15, %cst_15 : tensor<4x1xi32, #blocked1> loc(#loc6)
    %20 = arith.cmpi slt, %16, %cst_14 : tensor<4x1xi32, #blocked> loc(#loc6)
    %21 = arith.cmpi slt, %17, %cst_13 : tensor<4x1xi32, #blocked3> loc(#loc6)
    %22 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc7)
    %23 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %24 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %25 = tt.expand_dims %22 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x128xi32, #blocked2> loc(#loc7)
    %26 = tt.expand_dims %23 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi32, #blocked1> loc(#loc7)
    %27 = tt.expand_dims %24 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc7)
    %28 = arith.divsi %14, %cst_12 : tensor<4x1xi32, #blocked2> loc(#loc8)
    %29 = arith.divsi %15, %cst_11 : tensor<4x1xi32, #blocked1> loc(#loc8)
    %30 = arith.remsi %14, %cst_12 : tensor<4x1xi32, #blocked2> loc(#loc9)
    %31 = arith.remsi %15, %cst_10 : tensor<4x1xi32, #blocked1> loc(#loc10)
    %32 = arith.divsi %15, %cst_10 : tensor<4x1xi32, #blocked1> loc(#loc11)
    %33 = arith.remsi %32, %cst_10 : tensor<4x1xi32, #blocked1> loc(#loc12)
    %34 = arith.cmpi slt, %25, %cst_9 : tensor<1x128xi32, #blocked2> loc(#loc13)
    %35 = arith.cmpi slt, %26, %cst_8 : tensor<1x128xi32, #blocked1> loc(#loc13)
    %36 = arith.cmpi slt, %27, %cst_19 : tensor<1x128xi32, #blocked> loc(#loc13)
    %37 = arith.muli %25, %cst_7 : tensor<1x128xi32, #blocked2> loc(#loc14)
    %38 = tt.broadcast %30 : tensor<4x1xi32, #blocked2> -> tensor<4x128xi32, #blocked2> loc(#loc15)
    %39 = tt.broadcast %37 : tensor<1x128xi32, #blocked2> -> tensor<4x128xi32, #blocked2> loc(#loc15)
    %40 = arith.addi %38, %39 : tensor<4x128xi32, #blocked2> loc(#loc15)
    %41 = arith.muli %28, %cst_6 : tensor<4x1xi32, #blocked2> loc(#loc16)
    %42 = arith.muli %29, %cst_5 : tensor<4x1xi32, #blocked1> loc(#loc16)
    %43 = tt.broadcast %41 : tensor<4x1xi32, #blocked2> -> tensor<4x128xi32, #blocked2> loc(#loc17)
    %44 = tt.broadcast %42 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc17)
    %45 = arith.addi %40, %43 : tensor<4x128xi32, #blocked2> loc(#loc17)
    %46 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<4x128x!tt.ptr<f32>, #blocked2> loc(#loc18)
    %47 = tt.addptr %46, %45 : tensor<4x128x!tt.ptr<f32>, #blocked2>, tensor<4x128xi32, #blocked2> loc(#loc18)
    %48 = tt.broadcast %34 : tensor<1x128xi1, #blocked2> -> tensor<4x128xi1, #blocked2> loc(#loc19)
    %49 = tt.broadcast %35 : tensor<1x128xi1, #blocked1> -> tensor<4x128xi1, #blocked1> loc(#loc19)
    %50 = tt.broadcast %36 : tensor<1x128xi1, #blocked> -> tensor<4x128xi1, #blocked> loc(#loc19)
    %51 = tt.broadcast %18 : tensor<4x1xi1, #blocked2> -> tensor<4x128xi1, #blocked2> loc(#loc19)
    %52 = tt.broadcast %19 : tensor<4x1xi1, #blocked1> -> tensor<4x128xi1, #blocked1> loc(#loc19)
    %53 = tt.broadcast %20 : tensor<4x1xi1, #blocked> -> tensor<4x128xi1, #blocked> loc(#loc19)
    %54 = arith.andi %48, %51 : tensor<4x128xi1, #blocked2> loc(#loc19)
    %55 = arith.andi %49, %52 : tensor<4x128xi1, #blocked1> loc(#loc19)
    %56 = arith.andi %50, %53 : tensor<4x128xi1, #blocked> loc(#loc19)
    %57 = tt.load %47, %54, %cst_17 evictionPolicy = evict_first : tensor<4x128x!tt.ptr<f32>, #blocked2> loc(#loc20)
    %58 = triton_gpu.convert_layout %57 : tensor<4x128xf32, #blocked2> -> tensor<4x128xf32, #blocked> loc(#loc20)
    %59 = arith.muli %15, %cst_4 : tensor<4x1xi32, #blocked1> loc(#loc21)
    %60 = tt.broadcast %26 : tensor<1x128xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc22)
    %61 = tt.broadcast %59 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc22)
    %62 = arith.addi %60, %61 : tensor<4x128xi32, #blocked1> loc(#loc22)
    %63 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %64 = tt.addptr %63, %62 : tensor<4x128x!tt.ptr<f32>, #blocked1>, tensor<4x128xi32, #blocked1> loc(#loc23)
    %65 = tt.load %64, %55, %cst_18 evictionPolicy = evict_first : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %66 = triton_gpu.convert_layout %65 : tensor<4x128xf32, #blocked1> -> tensor<4x128xf32, #blocked> loc(#loc24)
    %67 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %68 = tt.addptr %67, %27 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc25)
    %69 = tt.load %68, %36, %cst_21 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc26)
    %70 = arith.remsi %31, %cst_3 : tensor<4x1xi32, #blocked1> loc(#loc27)
    %71 = arith.muli %70, %cst_4 : tensor<4x1xi32, #blocked1> loc(#loc28)
    %72 = tt.broadcast %71 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc29)
    %73 = arith.addi %60, %72 : tensor<4x128xi32, #blocked1> loc(#loc29)
    %74 = arith.remsi %33, %cst_3 : tensor<4x1xi32, #blocked1> loc(#loc30)
    %75 = arith.muli %74, %cst_2 : tensor<4x1xi32, #blocked1> loc(#loc31)
    %76 = tt.broadcast %75 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc32)
    %77 = arith.addi %73, %76 : tensor<4x128xi32, #blocked1> loc(#loc32)
    %78 = arith.divsi %31, %cst_3 : tensor<4x1xi32, #blocked1> loc(#loc33)
    %79 = arith.muli %78, %cst_1 : tensor<4x1xi32, #blocked1> loc(#loc34)
    %80 = tt.broadcast %79 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc35)
    %81 = arith.addi %77, %80 : tensor<4x128xi32, #blocked1> loc(#loc35)
    %82 = arith.divsi %33, %cst_3 : tensor<4x1xi32, #blocked1> loc(#loc36)
    %83 = arith.muli %82, %cst_0 : tensor<4x1xi32, #blocked1> loc(#loc37)
    %84 = tt.broadcast %83 : tensor<4x1xi32, #blocked1> -> tensor<4x128xi32, #blocked1> loc(#loc38)
    %85 = arith.addi %81, %84 : tensor<4x128xi32, #blocked1> loc(#loc38)
    %86 = arith.addi %85, %44 : tensor<4x128xi32, #blocked1> loc(#loc39)
    %87 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc40)
    %88 = tt.addptr %87, %86 : tensor<4x128x!tt.ptr<f32>, #blocked1>, tensor<4x128xi32, #blocked1> loc(#loc40)
    %89 = tt.load %88, %55, %cst_18 evictionPolicy = evict_first : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc41)
    %90 = triton_gpu.convert_layout %89 : tensor<4x128xf32, #blocked1> -> tensor<4x128xf32, #blocked> loc(#loc41)
    %91 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc42)
    %92 = tt.addptr %91, %27 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc42)
    %93 = tt.load %92, %36, %cst_21 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc43)
    %94 = tt.broadcast %69 : tensor<1x128xf32, #blocked> -> tensor<4x128xf32, #blocked> loc(#loc44)
    %95 = arith.addf %66, %94 : tensor<4x128xf32, #blocked> loc(#loc44)
    %96 = arith.addf %58, %95 : tensor<4x128xf32, #blocked> loc(#loc45)
    %97 = tt.broadcast %93 : tensor<1x128xf32, #blocked> -> tensor<4x128xf32, #blocked> loc(#loc46)
    %98 = arith.addf %90, %97 : tensor<4x128xf32, #blocked> loc(#loc46)
    %99 = arith.addf %96, %98 : tensor<4x128xf32, #blocked> loc(#loc47)
    %100 = arith.select %56, %99, %cst_20 : tensor<4x128xi1, #blocked>, tensor<4x128xf32, #blocked> loc(#loc48)
    %101 = arith.select %56, %cst_23, %cst_20 : tensor<4x128xi1, #blocked>, tensor<4x128xf32, #blocked> loc(#loc49)
    %102 = triton_gpu.convert_layout %99 : tensor<4x128xf32, #blocked> -> tensor<4x128xf32, #blocked1> loc(#loc50)
    tt.store %64, %102, %55 : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc50)
    %103:3 = "tt.reduce"(%100, %cst_20, %101) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc52)), %arg13: f32 loc(callsite(#loc1 at #loc52)), %arg14: f32 loc(callsite(#loc1 at #loc52)), %arg15: f32 loc(callsite(#loc1 at #loc52)), %arg16: f32 loc(callsite(#loc1 at #loc52)), %arg17: f32 loc(callsite(#loc1 at #loc52))):
      %140 = arith.subf %arg15, %arg12 : f32 loc(#loc101)
      %141 = arith.addf %arg14, %arg17 : f32 loc(#loc102)
      %142 = arith.cmpf oeq, %141, %cst_22 : f32 loc(#loc103)
      %143 = arith.divf %arg17, %141 : f32 loc(#loc104)
      %144 = arith.select %142, %cst_22, %143 : f32 loc(#loc105)
      %145 = arith.mulf %140, %144 : f32 loc(#loc106)
      %146 = arith.addf %arg12, %145 : f32 loc(#loc107)
      %147 = arith.addf %arg13, %arg16 : f32 loc(#loc108)
      %148 = arith.mulf %140, %140 : f32 loc(#loc109)
      %149 = arith.mulf %148, %arg14 : f32 loc(#loc110)
      %150 = arith.mulf %149, %144 : f32 loc(#loc111)
      %151 = arith.addf %147, %150 : f32 loc(#loc112)
      tt.reduce.return %146, %151, %141 : f32, f32, f32 loc(#loc87)
    }) : (tensor<4x128xf32, #blocked>, tensor<4x128xf32, #blocked>, tensor<4x128xf32, #blocked>) -> (tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc87)
    %104 = tt.expand_dims %103#0 {axis = 1 : i32} : tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xf32, #blocked> loc(#loc65)
    %105 = triton_gpu.convert_layout %103#1 {fastmath = #arith.fastmath<none>} : tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> loc(#loc66)
    %106 = tt.expand_dims %105 {axis = 1 : i32} : tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked3}>> -> tensor<4x1xf32, #blocked3> loc(#loc67)
    %107 = tt.expand_dims %103#1 {axis = 1 : i32} : tensor<4xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<4x1xf32, #blocked> loc(#loc67)
    %108 = tt.load %64, %55, %cst_18 evictionPolicy = evict_first : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc68)
    %109 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc69)
    %110 = tt.addptr %109, %27 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc69)
    %111 = tt.load %110, %36, %cst_21 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc70)
    %112 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc71)
    %113 = tt.addptr %112, %27 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc71)
    %114 = tt.load %113, %36, %cst_21 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc72)
    %115 = triton_gpu.convert_layout %104 : tensor<4x1xf32, #blocked> -> tensor<4x1xf32, #blocked1> loc(#loc73)
    %116 = tt.broadcast %115 : tensor<4x1xf32, #blocked1> -> tensor<4x128xf32, #blocked1> loc(#loc73)
    %117 = arith.subf %108, %116 : tensor<4x128xf32, #blocked1> loc(#loc73)
    %118 = arith.divf %106, %cst_26 : tensor<4x1xf32, #blocked3> loc(#loc74)
    %119 = arith.divf %107, %cst : tensor<4x1xf32, #blocked> loc(#loc74)
    %120 = arith.addf %118, %cst_25 : tensor<4x1xf32, #blocked3> loc(#loc75)
    %121 = arith.addf %119, %cst_24 : tensor<4x1xf32, #blocked> loc(#loc75)
    %122 = tt.extern_elementwise %120 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<4x1xf32, #blocked3>) -> tensor<4x1xf32, #blocked3> loc(#loc76)
    %123 = tt.extern_elementwise %121 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<4x1xf32, #blocked>) -> tensor<4x1xf32, #blocked> loc(#loc76)
    %124 = triton_gpu.convert_layout %123 : tensor<4x1xf32, #blocked> -> tensor<4x1xf32, #blocked1> loc(#loc77)
    %125 = tt.broadcast %124 : tensor<4x1xf32, #blocked1> -> tensor<4x128xf32, #blocked1> loc(#loc77)
    %126 = arith.mulf %117, %125 : tensor<4x128xf32, #blocked1> loc(#loc77)
    %127 = triton_gpu.convert_layout %126 {fastmath = #arith.fastmath<none>} : tensor<4x128xf32, #blocked1> -> tensor<4x128xf32, #blocked> loc(#loc77)
    %128 = tt.broadcast %111 : tensor<1x128xf32, #blocked> -> tensor<4x128xf32, #blocked> loc(#loc78)
    %129 = arith.mulf %127, %128 : tensor<4x128xf32, #blocked> loc(#loc78)
    %130 = tt.broadcast %114 : tensor<1x128xf32, #blocked> -> tensor<4x128xf32, #blocked> loc(#loc79)
    %131 = arith.addf %129, %130 : tensor<4x128xf32, #blocked> loc(#loc79)
    %132 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc80)
    %133 = tt.addptr %132, %62 : tensor<4x128x!tt.ptr<f32>, #blocked1>, tensor<4x128xi32, #blocked1> loc(#loc80)
    tt.store %133, %126, %55 : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc81)
    %134 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc82)
    %135 = tt.addptr %134, %62 : tensor<4x128x!tt.ptr<f32>, #blocked1>, tensor<4x128xi32, #blocked1> loc(#loc82)
    %136 = triton_gpu.convert_layout %131 : tensor<4x128xf32, #blocked> -> tensor<4x128xf32, #blocked1> loc(#loc83)
    tt.store %135, %136, %55 : tensor<4x128x!tt.ptr<f32>, #blocked1> loc(#loc83)
    %137 = arith.mulf %122, %cst_27 : tensor<4x1xf32, #blocked3> loc(#loc66)
    %138 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<4x1x!tt.ptr<f32>, #blocked3> loc(#loc84)
    %139 = tt.addptr %138, %17 : tensor<4x1x!tt.ptr<f32>, #blocked3>, tensor<4x1xi32, #blocked3> loc(#loc84)
    tt.store %139, %137, %21 : tensor<4x1x!tt.ptr<f32>, #blocked3> loc(#loc85)
    tt.return loc(#loc86)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":22:28)
#loc3 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":22:33)
#loc4 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":23:44)
#loc5 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":23:23)
#loc6 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":24:21)
#loc7 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":25:33)
#loc8 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":26:19)
#loc9 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":27:19)
#loc10 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":29:19)
#loc11 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":30:21)
#loc12 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":30:27)
#loc13 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":36:25)
#loc14 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:43)
#loc15 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:39)
#loc16 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:54)
#loc17 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:48)
#loc18 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:34)
#loc19 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:67)
#loc20 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":38:59)
#loc21 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:46)
#loc22 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:43)
#loc23 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:38)
#loc24 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":39:51)
#loc25 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":40:34)
#loc26 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":40:39)
#loc27 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:49)
#loc28 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:44)
#loc29 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:39)
#loc30 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:66)
#loc31 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:61)
#loc32 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:55)
#loc33 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:84)
#loc34 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:78)
#loc35 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:72)
#loc36 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:102)
#loc37 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:96)
#loc38 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:89)
#loc39 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:107)
#loc40 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:34)
#loc41 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":41:118)
#loc42 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":42:34)
#loc43 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":42:39)
#loc44 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":43:22)
#loc45 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":44:22)
#loc46 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":45:22)
#loc47 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":46:22)
#loc48 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":51:62)
#loc49 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":53:66)
#loc50 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":54:51)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc65 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":58:22)
#loc66 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":85:20)
#loc67 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":59:22)
#loc68 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":65:52)
#loc69 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":66:35)
#loc70 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":66:40)
#loc71 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":67:35)
#loc72 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":67:40)
#loc73 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":68:24)
#loc74 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":70:24)
#loc75 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":72:24)
#loc76 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":73:32)
#loc77 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":74:24)
#loc78 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":75:24)
#loc79 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":76:24)
#loc80 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":77:29)
#loc81 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":77:49)
#loc82 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":78:29)
#loc83 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":78:49)
#loc84 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:25)
#loc85 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:37)
#loc86 = loc("inductor_cache/jx/cjxwqvqcclhynjvdhdgoqxxosqxlt6fzk3ya3wfw4czbetpzmvol.py":86:4)
#loc87 = loc(callsite(#loc51 at #loc52))
#loc89 = loc(callsite(#loc53 at #loc51))
#loc90 = loc(callsite(#loc54 at #loc51))
#loc91 = loc(callsite(#loc55 at #loc51))
#loc92 = loc(callsite(#loc56 at #loc51))
#loc93 = loc(callsite(#loc57 at #loc51))
#loc94 = loc(callsite(#loc58 at #loc51))
#loc95 = loc(callsite(#loc59 at #loc51))
#loc96 = loc(callsite(#loc60 at #loc51))
#loc97 = loc(callsite(#loc61 at #loc51))
#loc98 = loc(callsite(#loc62 at #loc51))
#loc99 = loc(callsite(#loc63 at #loc51))
#loc100 = loc(callsite(#loc64 at #loc51))
#loc101 = loc(callsite(#loc89 at #loc52))
#loc102 = loc(callsite(#loc90 at #loc52))
#loc103 = loc(callsite(#loc91 at #loc52))
#loc104 = loc(callsite(#loc92 at #loc52))
#loc105 = loc(callsite(#loc93 at #loc52))
#loc106 = loc(callsite(#loc94 at #loc52))
#loc107 = loc(callsite(#loc95 at #loc52))
#loc108 = loc(callsite(#loc96 at #loc52))
#loc109 = loc(callsite(#loc97 at #loc52))
#loc110 = loc(callsite(#loc98 at #loc52))
#loc111 = loc(callsite(#loc99 at #loc52))
#loc112 = loc(callsite(#loc100 at #loc52))
