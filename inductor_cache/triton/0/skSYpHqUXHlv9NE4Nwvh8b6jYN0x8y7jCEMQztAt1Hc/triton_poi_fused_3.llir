; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 8, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = and i32 %11, 127, !dbg !16
  %13 = or disjoint i32 %12, 128, !dbg !16
  %14 = shl i32 %11, 2, !dbg !16
  %15 = and i32 %14, 252, !dbg !16
  %16 = or disjoint i32 %10, %12, !dbg !17
  %17 = or disjoint i32 %10, %13, !dbg !17
  %18 = or disjoint i32 %10, %15, !dbg !17
  %19 = icmp slt i32 %16, 73728, !dbg !18
  %20 = icmp slt i32 %17, 73728, !dbg !18
  %21 = icmp slt i32 %18, 73728, !dbg !18
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %23 = shl i32 %22, 2, !dbg !20
  %24 = lshr i32 %11, 6, !dbg !21
  %.lobit = and i32 %24, 1, !dbg !21
  %25 = or disjoint i32 %23, %.lobit, !dbg !22
  %26 = or disjoint i32 %25, 2, !dbg !22
  %27 = icmp slt i32 %23, 4, !dbg !23
  %28 = icmp slt i32 %25, 4, !dbg !23
  %29 = icmp slt i32 %26, 4, !dbg !23
  %.frozen = freeze i32 %18, !dbg !24
  %30 = sdiv i32 %.frozen, 192, !dbg !24
  %31 = mul i32 %30, 192, !dbg !25
  %.decomposed = sub i32 %.frozen, %31, !dbg !25
  %32 = add i32 %16, %22, !dbg !26
  %33 = shl i32 %32, 2, !dbg !26
  %34 = add i32 %17, %22, !dbg !26
  %35 = shl i32 %34, 2, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !27
  %38 = sext i32 %35 to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !27
  %40 = and i1 %27, %19, !dbg !28
  %41 = and i1 %27, %20, !dbg !28
  %42 = and i1 %28, %21, !dbg !28
  %43 = and i1 %29, %21, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %40) #2, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %41) #2, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %54 = mul i32 %25, 192, !dbg !30
  %55 = mul i32 %26, 192, !dbg !30
  %56 = mul i32 %30, 768, !dbg !31
  %57 = add i32 %56, %.decomposed, !dbg !32
  %58 = add i32 %57, %54, !dbg !33
  %59 = add i32 %57, %55, !dbg !33
  %60 = sext i32 %58 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = sext i32 %59 to i64, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !34
  %64 = and i32 %14, 508, !dbg !35
  %65 = zext nneg i32 %12 to i64, !dbg !35
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !35
  %67 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !35
  %68 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 1040, !dbg !35
  %69 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !35
  %70 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 2080, !dbg !35
  %71 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !35
  %72 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 3120, !dbg !35
  %73 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !35
  %74 = zext nneg i32 %13 to i64, !dbg !35
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !35
  %76 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !35
  %77 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 1552, !dbg !35
  %78 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !35
  %79 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 2592, !dbg !35
  %80 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !35
  %81 = getelementptr inbounds i8, ptr addrspace(3) %66, i64 3632, !dbg !35
  %82 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %83 = lshr i32 %14, 6, !dbg !35
  %84 = and i32 %83, 4, !dbg !35
  %85 = add nuw nsw i32 %84, %64, !dbg !35
  %86 = zext nneg i32 %85 to i64, !dbg !35
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %86, !dbg !35
  %88 = or disjoint i32 %64, 512, !dbg !35
  %89 = lshr i32 %88, 6, !dbg !35
  %90 = and i32 %89, 12, !dbg !35
  %91 = add nuw nsw i32 %90, %88, !dbg !35
  %92 = zext nneg i32 %91 to i64, !dbg !35
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %92, !dbg !35
  %94 = load <4 x i32>, ptr addrspace(3) %93, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %87, align 16, !dbg !35
  %95 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 4, !dbg !35
  %.extract8 = load i32, ptr addrspace(3) %95, align 4, !dbg !35
  %96 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 8, !dbg !35
  %.extract9 = load i32, ptr addrspace(3) %96, align 8, !dbg !35
  %97 = getelementptr inbounds i8, ptr addrspace(3) %87, i64 12, !dbg !35
  %.extract10 = load i32, ptr addrspace(3) %97, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %61, i1 %42) #2, !dbg !35
  %.extract11 = extractelement <4 x i32> %94, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %94, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %94, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %94, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %63, i1 %43) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdx6onlficn6ytxdx6h6kzts2q7bopsc2ahhnl2j2pqws72avo2q.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_poi_fused_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_3", linkageName: "triton_poi_fused_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 32, column: 42, scope: !7)
!30 = !DILocation(line: 33, column: 34, scope: !7)
!31 = !DILocation(line: 33, column: 43, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 39, scope: !7)
!34 = !DILocation(line: 33, column: 25, scope: !7)
!35 = !DILocation(line: 33, column: 54, scope: !7)
!36 = !DILocation(line: 33, column: 4, scope: !7)
