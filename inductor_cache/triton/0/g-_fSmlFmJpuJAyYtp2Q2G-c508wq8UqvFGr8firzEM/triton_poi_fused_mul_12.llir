; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 1, !dbg !13
  %13 = or disjoint i32 %7, 2, !dbg !13
  %14 = or disjoint i32 %7, 3, !dbg !13
  %15 = or disjoint i32 %7, 4, !dbg !13
  %16 = or disjoint i32 %7, 5, !dbg !13
  %17 = or disjoint i32 %7, 6, !dbg !13
  %18 = or disjoint i32 %7, 7, !dbg !13
  %19 = or disjoint i32 %7, 8, !dbg !13
  %20 = or disjoint i32 %7, 9, !dbg !13
  %21 = or disjoint i32 %7, 10, !dbg !13
  %22 = or disjoint i32 %7, 11, !dbg !13
  %23 = or disjoint i32 %7, 12, !dbg !13
  %24 = or disjoint i32 %7, 13, !dbg !13
  %25 = or disjoint i32 %7, 14, !dbg !13
  %26 = or disjoint i32 %7, 15, !dbg !13
  %27 = icmp slt i32 %11, 16, !dbg !14
  %28 = icmp slt i32 %7, 16, !dbg !14
  %29 = icmp slt i32 %12, 16, !dbg !14
  %30 = icmp slt i32 %13, 16, !dbg !14
  %31 = icmp slt i32 %14, 16, !dbg !14
  %32 = icmp slt i32 %15, 16, !dbg !14
  %33 = icmp slt i32 %16, 16, !dbg !14
  %34 = icmp slt i32 %17, 16, !dbg !14
  %35 = icmp slt i32 %18, 16, !dbg !14
  %36 = icmp slt i32 %19, 16, !dbg !14
  %37 = icmp slt i32 %20, 16, !dbg !14
  %38 = icmp slt i32 %21, 16, !dbg !14
  %39 = icmp slt i32 %22, 16, !dbg !14
  %40 = icmp slt i32 %23, 16, !dbg !14
  %41 = icmp slt i32 %24, 16, !dbg !14
  %42 = icmp slt i32 %25, 16, !dbg !14
  %43 = icmp slt i32 %26, 16, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = lshr i32 %8, 2, !dbg !17
  %47 = and i32 %46, 63, !dbg !17
  %48 = and i32 %8, 255, !dbg !17
  %49 = or disjoint i32 %45, %47, !dbg !18
  %50 = or disjoint i32 %49, 64, !dbg !18
  %51 = or disjoint i32 %49, 128, !dbg !18
  %52 = or disjoint i32 %49, 192, !dbg !18
  %53 = or disjoint i32 %45, %48, !dbg !18
  %54 = icmp slt i32 %49, 257, !dbg !19
  %55 = icmp slt i32 %50, 257, !dbg !19
  %56 = icmp slt i32 %51, 257, !dbg !19
  %57 = icmp slt i32 %52, 257, !dbg !19
  %58 = icmp slt i32 %53, 257, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %59 = sdiv i32 %.frozen, 4, !dbg !20
  %60 = mul i32 %59, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %60, !dbg !21
  %.frozen2 = freeze i32 %13, !dbg !20
  %61 = sdiv i32 %.frozen2, 4, !dbg !20
  %62 = mul i32 %61, 4, !dbg !21
  %.decomposed3 = sub i32 %.frozen2, %62, !dbg !21
  %.frozen4 = freeze i32 %14, !dbg !20
  %63 = sdiv i32 %.frozen4, 4, !dbg !20
  %64 = mul i32 %63, 4, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %64, !dbg !21
  %.frozen6 = freeze i32 %16, !dbg !20
  %65 = sdiv i32 %.frozen6, 4, !dbg !20
  %66 = mul i32 %65, 4, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %66, !dbg !21
  %.frozen8 = freeze i32 %17, !dbg !20
  %67 = sdiv i32 %.frozen8, 4, !dbg !20
  %68 = mul i32 %67, 4, !dbg !21
  %.decomposed9 = sub i32 %.frozen8, %68, !dbg !21
  %.frozen10 = freeze i32 %18, !dbg !20
  %69 = sdiv i32 %.frozen10, 4, !dbg !20
  %70 = mul i32 %69, 4, !dbg !21
  %.decomposed11 = sub i32 %.frozen10, %70, !dbg !21
  %.frozen12 = freeze i32 %20, !dbg !20
  %71 = sdiv i32 %.frozen12, 4, !dbg !20
  %72 = mul i32 %71, 4, !dbg !21
  %.decomposed13 = sub i32 %.frozen12, %72, !dbg !21
  %.frozen14 = freeze i32 %21, !dbg !20
  %73 = sdiv i32 %.frozen14, 4, !dbg !20
  %74 = mul i32 %73, 4, !dbg !21
  %.decomposed15 = sub i32 %.frozen14, %74, !dbg !21
  %.frozen16 = freeze i32 %22, !dbg !20
  %75 = sdiv i32 %.frozen16, 4, !dbg !20
  %76 = mul i32 %75, 4, !dbg !21
  %.decomposed17 = sub i32 %.frozen16, %76, !dbg !21
  %.frozen18 = freeze i32 %24, !dbg !20
  %77 = sdiv i32 %.frozen18, 4, !dbg !20
  %78 = mul i32 %77, 4, !dbg !21
  %.decomposed19 = sub i32 %.frozen18, %78, !dbg !21
  %.frozen20 = freeze i32 %25, !dbg !20
  %79 = sdiv i32 %.frozen20, 4, !dbg !20
  %80 = mul i32 %79, 4, !dbg !21
  %.decomposed21 = sub i32 %.frozen20, %80, !dbg !21
  %.frozen22 = freeze i32 %26, !dbg !20
  %81 = sdiv i32 %.frozen22, 4, !dbg !20
  %82 = mul i32 %81, 4, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %82, !dbg !21
  %83 = ashr exact i32 %11, 2, !dbg !20
  %84 = ashr exact i32 %7, 2, !dbg !20
  %85 = ashr exact i32 %15, 2, !dbg !20
  %86 = ashr exact i32 %19, 2, !dbg !20
  %87 = ashr exact i32 %23, 2, !dbg !20
  %88 = mul i32 %83, 12, !dbg !22
  %89 = add i32 %88, 4, !dbg !23
  %90 = mul i32 %49, 48, !dbg !24
  %91 = mul i32 %50, 48, !dbg !24
  %92 = mul i32 %51, 48, !dbg !24
  %93 = mul i32 %52, 48, !dbg !24
  %94 = add i32 %89, %90, !dbg !25
  %95 = add i32 %89, %91, !dbg !25
  %96 = add i32 %89, %92, !dbg !25
  %97 = add i32 %89, %93, !dbg !25
  %98 = sext i32 %94 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !26
  %100 = sext i32 %95 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !26
  %102 = sext i32 %96 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !26
  %104 = sext i32 %97 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !26
  %106 = and i1 %27, %54, !dbg !27
  %107 = and i1 %55, %27, !dbg !27
  %108 = and i1 %56, %27, !dbg !27
  %109 = and i1 %57, %27, !dbg !27
  %110 = and i1 %28, %58, !dbg !27
  %111 = and i1 %29, %58, !dbg !27
  %112 = and i1 %30, %58, !dbg !27
  %113 = and i1 %31, %58, !dbg !27
  %114 = and i1 %32, %58, !dbg !27
  %115 = and i1 %33, %58, !dbg !27
  %116 = and i1 %34, %58, !dbg !27
  %117 = and i1 %35, %58, !dbg !27
  %118 = and i1 %36, %58, !dbg !27
  %119 = and i1 %37, %58, !dbg !27
  %120 = and i1 %38, %58, !dbg !27
  %121 = and i1 %39, %58, !dbg !27
  %122 = and i1 %40, %58, !dbg !27
  %123 = and i1 %41, %58, !dbg !27
  %124 = and i1 %42, %58, !dbg !27
  %125 = and i1 %43, %58, !dbg !27
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 %106) #2, !dbg !28
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !28
  %131 = bitcast i32 %127 to float, !dbg !28
  %132 = bitcast i32 %128 to float, !dbg !28
  %133 = bitcast i32 %129 to float, !dbg !28
  %134 = bitcast i32 %130 to float, !dbg !28
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 %107) #2, !dbg !28
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !28
  %140 = bitcast i32 %136 to float, !dbg !28
  %141 = bitcast i32 %137 to float, !dbg !28
  %142 = bitcast i32 %138 to float, !dbg !28
  %143 = bitcast i32 %139 to float, !dbg !28
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %108) #2, !dbg !28
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !28
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !28
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !28
  %149 = bitcast i32 %145 to float, !dbg !28
  %150 = bitcast i32 %146 to float, !dbg !28
  %151 = bitcast i32 %147 to float, !dbg !28
  %152 = bitcast i32 %148 to float, !dbg !28
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %109) #2, !dbg !28
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !28
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !28
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !28
  %158 = bitcast i32 %154 to float, !dbg !28
  %159 = bitcast i32 %155 to float, !dbg !28
  %160 = bitcast i32 %156 to float, !dbg !28
  %161 = bitcast i32 %157 to float, !dbg !28
  %162 = getelementptr i8, ptr addrspace(1) %1, i64 16, !dbg !29
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %27) #2, !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !30
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !30
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !30
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !30
  %168 = bitcast i32 %164 to float, !dbg !30
  %169 = bitcast i32 %165 to float, !dbg !30
  %170 = bitcast i32 %166 to float, !dbg !30
  %171 = bitcast i32 %167 to float, !dbg !30
  %172 = fadd float %131, %168, !dbg !31
  %173 = fadd float %132, %169, !dbg !31
  %174 = fadd float %133, %170, !dbg !31
  %175 = fadd float %134, %171, !dbg !31
  %176 = fadd float %140, %168, !dbg !31
  %177 = fadd float %141, %169, !dbg !31
  %178 = fadd float %142, %170, !dbg !31
  %179 = fadd float %143, %171, !dbg !31
  %180 = fadd float %149, %168, !dbg !31
  %181 = fadd float %150, %169, !dbg !31
  %182 = fadd float %151, %170, !dbg !31
  %183 = fadd float %152, %171, !dbg !31
  %184 = fadd float %158, %168, !dbg !31
  %185 = fadd float %159, %169, !dbg !31
  %186 = fadd float %160, %170, !dbg !31
  %187 = fadd float %161, %171, !dbg !31
  %188 = mul nsw i32 %.decomposed, 257, !dbg !32
  %189 = mul nsw i32 %.decomposed3, 257, !dbg !32
  %190 = mul nsw i32 %.decomposed5, 257, !dbg !32
  %191 = mul nsw i32 %.decomposed7, 257, !dbg !32
  %192 = mul nsw i32 %.decomposed9, 257, !dbg !32
  %193 = mul nsw i32 %.decomposed11, 257, !dbg !32
  %194 = mul nsw i32 %.decomposed13, 257, !dbg !32
  %195 = mul nsw i32 %.decomposed15, 257, !dbg !32
  %196 = mul nsw i32 %.decomposed17, 257, !dbg !32
  %197 = mul nsw i32 %.decomposed19, 257, !dbg !32
  %198 = mul nsw i32 %.decomposed21, 257, !dbg !32
  %199 = mul nsw i32 %.decomposed23, 257, !dbg !32
  %200 = add i32 %188, %53, !dbg !33
  %201 = add i32 %189, %53, !dbg !33
  %202 = add i32 %190, %53, !dbg !33
  %203 = add i32 %191, %53, !dbg !33
  %204 = add i32 %192, %53, !dbg !33
  %205 = add i32 %193, %53, !dbg !33
  %206 = add i32 %194, %53, !dbg !33
  %207 = add i32 %195, %53, !dbg !33
  %208 = add i32 %196, %53, !dbg !33
  %209 = add i32 %197, %53, !dbg !33
  %210 = add i32 %198, %53, !dbg !33
  %211 = add i32 %199, %53, !dbg !33
  %212 = mul i32 %84, 1056, !dbg !34
  %213 = mul i32 %59, 1056, !dbg !34
  %214 = mul i32 %61, 1056, !dbg !34
  %215 = mul i32 %63, 1056, !dbg !34
  %216 = mul i32 %85, 1056, !dbg !34
  %217 = mul i32 %65, 1056, !dbg !34
  %218 = mul i32 %67, 1056, !dbg !34
  %219 = mul i32 %69, 1056, !dbg !34
  %220 = mul i32 %86, 1056, !dbg !34
  %221 = mul i32 %71, 1056, !dbg !34
  %222 = mul i32 %73, 1056, !dbg !34
  %223 = mul i32 %75, 1056, !dbg !34
  %224 = mul i32 %87, 1056, !dbg !34
  %225 = mul i32 %77, 1056, !dbg !34
  %226 = mul i32 %79, 1056, !dbg !34
  %227 = mul i32 %81, 1056, !dbg !34
  %228 = add i32 %53, %212, !dbg !35
  %229 = add i32 %200, %213, !dbg !35
  %230 = add i32 %201, %214, !dbg !35
  %231 = add i32 %202, %215, !dbg !35
  %232 = add i32 %216, %53, !dbg !35
  %233 = add i32 %203, %217, !dbg !35
  %234 = add i32 %204, %218, !dbg !35
  %235 = add i32 %205, %219, !dbg !35
  %236 = add i32 %220, %53, !dbg !35
  %237 = add i32 %206, %221, !dbg !35
  %238 = add i32 %207, %222, !dbg !35
  %239 = add i32 %208, %223, !dbg !35
  %240 = add i32 %224, %53, !dbg !35
  %241 = add i32 %209, %225, !dbg !35
  %242 = add i32 %210, %226, !dbg !35
  %243 = add i32 %211, %227, !dbg !35
  %244 = sext i32 %228 to i64, !dbg !36
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %244, !dbg !36
  %246 = sext i32 %229 to i64, !dbg !36
  %247 = getelementptr float, ptr addrspace(1) %2, i64 %246, !dbg !36
  %248 = sext i32 %230 to i64, !dbg !36
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %248, !dbg !36
  %250 = sext i32 %231 to i64, !dbg !36
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %250, !dbg !36
  %252 = sext i32 %232 to i64, !dbg !36
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %252, !dbg !36
  %254 = sext i32 %233 to i64, !dbg !36
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %254, !dbg !36
  %256 = sext i32 %234 to i64, !dbg !36
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %256, !dbg !36
  %258 = sext i32 %235 to i64, !dbg !36
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !36
  %260 = sext i32 %236 to i64, !dbg !36
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %260, !dbg !36
  %262 = sext i32 %237 to i64, !dbg !36
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !36
  %264 = sext i32 %238 to i64, !dbg !36
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !36
  %266 = sext i32 %239 to i64, !dbg !36
  %267 = getelementptr float, ptr addrspace(1) %2, i64 %266, !dbg !36
  %268 = sext i32 %240 to i64, !dbg !36
  %269 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !36
  %270 = sext i32 %241 to i64, !dbg !36
  %271 = getelementptr float, ptr addrspace(1) %2, i64 %270, !dbg !36
  %272 = sext i32 %242 to i64, !dbg !36
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %272, !dbg !36
  %274 = sext i32 %243 to i64, !dbg !36
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %274, !dbg !36
  %276 = shl i32 %8, 10, !dbg !37
  %277 = and i32 %276, 3072, !dbg !37
  %278 = or disjoint i32 %277, %47, !dbg !37
  %279 = lshr exact i32 %277, 6, !dbg !37
  %280 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %279, !dbg !37
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !37
  %282 = bitcast float %172 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !37
  %283 = or disjoint i32 %278, 256, !dbg !37
  %284 = lshr i32 %283, 8, !dbg !37
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !37
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %283, !dbg !37
  %287 = bitcast float %173 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !37
  %288 = or disjoint i32 %278, 512, !dbg !37
  %289 = lshr i32 %288, 8, !dbg !37
  %290 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !37
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !37
  %292 = bitcast float %174 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !37
  %293 = or disjoint i32 %278, 768, !dbg !37
  %294 = lshr i32 %293, 8, !dbg !37
  %295 = getelementptr float, ptr addrspace(3) @global_smem, i32 %294, !dbg !37
  %296 = getelementptr float, ptr addrspace(3) %295, i32 %293, !dbg !37
  %297 = bitcast float %175 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !37
  %298 = or disjoint i32 %278, 64, !dbg !37
  %299 = getelementptr float, ptr addrspace(3) %280, i32 %298, !dbg !37
  %300 = bitcast float %176 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !37
  %301 = or disjoint i32 %278, 320, !dbg !37
  %302 = lshr i32 %301, 8, !dbg !37
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !37
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %301, !dbg !37
  %305 = bitcast float %177 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !37
  %306 = or disjoint i32 %278, 576, !dbg !37
  %307 = lshr i32 %306, 8, !dbg !37
  %308 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !37
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !37
  %310 = bitcast float %178 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !37
  %311 = or disjoint i32 %278, 832, !dbg !37
  %312 = lshr i32 %311, 8, !dbg !37
  %313 = getelementptr float, ptr addrspace(3) @global_smem, i32 %312, !dbg !37
  %314 = getelementptr float, ptr addrspace(3) %313, i32 %311, !dbg !37
  %315 = bitcast float %179 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #2, !dbg !37
  %316 = or disjoint i32 %278, 128, !dbg !37
  %317 = getelementptr float, ptr addrspace(3) %280, i32 %316, !dbg !37
  %318 = bitcast float %180 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !37
  %319 = or disjoint i32 %278, 384, !dbg !37
  %320 = lshr i32 %319, 8, !dbg !37
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !37
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !37
  %323 = bitcast float %181 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !37
  %324 = or disjoint i32 %278, 640, !dbg !37
  %325 = lshr i32 %324, 8, !dbg !37
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !37
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !37
  %328 = bitcast float %182 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !37
  %329 = or disjoint i32 %278, 896, !dbg !37
  %330 = lshr i32 %329, 8, !dbg !37
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !37
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !37
  %333 = bitcast float %183 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !37
  %334 = or disjoint i32 %278, 192, !dbg !37
  %335 = getelementptr float, ptr addrspace(3) %280, i32 %334, !dbg !37
  %336 = bitcast float %184 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #2, !dbg !37
  %337 = or disjoint i32 %278, 448, !dbg !37
  %338 = lshr i32 %337, 8, !dbg !37
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !37
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %337, !dbg !37
  %341 = bitcast float %185 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !37
  %342 = or disjoint i32 %278, 704, !dbg !37
  %343 = lshr i32 %342, 8, !dbg !37
  %344 = getelementptr float, ptr addrspace(3) @global_smem, i32 %343, !dbg !37
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %342, !dbg !37
  %346 = bitcast float %186 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #2, !dbg !37
  %347 = or disjoint i32 %278, 960, !dbg !37
  %348 = lshr i32 %347, 8, !dbg !37
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !37
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !37
  %351 = bitcast float %187 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !37
  %353 = load i32, ptr addrspace(3) %352, align 4, !dbg !37
  %354 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 1028, !dbg !37
  %355 = load i32, ptr addrspace(3) %354, align 4, !dbg !37
  %356 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 2056, !dbg !37
  %357 = load i32, ptr addrspace(3) %356, align 4, !dbg !37
  %358 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 3084, !dbg !37
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !37
  %360 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 4112, !dbg !37
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !37
  %362 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 5140, !dbg !37
  %363 = load i32, ptr addrspace(3) %362, align 4, !dbg !37
  %364 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 6168, !dbg !37
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !37
  %366 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 7196, !dbg !37
  %367 = load i32, ptr addrspace(3) %366, align 4, !dbg !37
  %368 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 8224, !dbg !37
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !37
  %370 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 9252, !dbg !37
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !37
  %372 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 10280, !dbg !37
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !37
  %374 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 11308, !dbg !37
  %375 = load i32, ptr addrspace(3) %374, align 4, !dbg !37
  %376 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 12336, !dbg !37
  %377 = load i32, ptr addrspace(3) %376, align 4, !dbg !37
  %378 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 13364, !dbg !37
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !37
  %380 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 14392, !dbg !37
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !37
  %382 = getelementptr inbounds i8, ptr addrspace(3) %352, i32 15420, !dbg !37
  %383 = load i32, ptr addrspace(3) %382, align 4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %245, i1 %110) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %247, i1 %111) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %249, i1 %112) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %251, i1 %113) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %253, i1 %114) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %255, i1 %115) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %257, i1 %116) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %259, i1 %117) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %261, i1 %118) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %371, ptr addrspace(1) %263, i1 %119) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %373, ptr addrspace(1) %265, i1 %120) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %375, ptr addrspace(1) %267, i1 %121) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %377, ptr addrspace(1) %269, i1 %122) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %379, ptr addrspace(1) %271, i1 %123) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %381, ptr addrspace(1) %273, i1 %124) #2, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %383, ptr addrspace(1) %275, i1 %125) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr22jw22akjfsmqvogtoc5wt65cfngnqf4xdtd3tyrnkwk4jm2mb.py", directory: "inductor_cache/r2")
!4 = !{ptr @triton_poi_fused_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_12", linkageName: "triton_poi_fused_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 42, scope: !7)
!23 = !DILocation(line: 31, column: 39, scope: !7)
!24 = !DILocation(line: 31, column: 50, scope: !7)
!25 = !DILocation(line: 31, column: 47, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 63, scope: !7)
!28 = !DILocation(line: 31, column: 55, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 39, scope: !7)
!31 = !DILocation(line: 33, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 34, scope: !7)
!33 = !DILocation(line: 36, column: 30, scope: !7)
!34 = !DILocation(line: 36, column: 44, scope: !7)
!35 = !DILocation(line: 36, column: 39, scope: !7)
!36 = !DILocation(line: 36, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 55, scope: !7)
!38 = !DILocation(line: 36, column: 4, scope: !7)
