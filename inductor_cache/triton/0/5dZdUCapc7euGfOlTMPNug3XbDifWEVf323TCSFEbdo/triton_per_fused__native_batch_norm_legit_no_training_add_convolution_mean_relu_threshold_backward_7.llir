; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 2, !dbg !11
  %14 = and i32 %13, 252, !dbg !11
  %15 = srem i32 %11, 64, !dbg !12
  %16 = shl i32 %11, 8, !dbg !13
  %17 = or disjoint i32 %16, %14, !dbg !14
  %18 = sext i32 %17 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !16
  %21 = sext i32 %15 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !22
  %37 = bitcast i32 %36 to float, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #5, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !28
  %50 = fadd float %37, 0x3EE4F8B580000000, !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i11 = icmp eq i32 %57, 0, !dbg !30
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !30
  %.not1.i14 = icmp eq i32 %58, 0, !dbg !30
  br i1 %.not.i11, label %64, label %59, !dbg !30

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %62, label %60, !dbg !30

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %67, label %65, !dbg !30

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %60, %62, %65, %67
  %.0.i13 = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !16
  %70 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !16
  %71 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !16
  %72 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !16
  %73 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !28
  %77 = lshr i32 %12, 5, !dbg !11
  %78 = and i32 %12, 31, !dbg !11
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !31
  %80 = icmp eq i32 %78, 0, !dbg !32
  %81 = and i32 %77, 1, !dbg !32
  %82 = zext nneg i32 %81 to i64, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i64 %82, !dbg !32
  %84 = icmp slt i32 %12, 2, !dbg !32
  %85 = sext i32 %12 to i64, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %85, !dbg !32
  %87 = and i32 %12, 1, !dbg !32
  %88 = icmp eq i32 %87, 0, !dbg !32
  %89 = and i1 %84, %88, !dbg !32
  %90 = getelementptr i1, ptr addrspace(1) %8, i64 %18, !dbg !36
  %91 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !16
  %92 = insertelement <4 x i32> %91, i32 %71, i64 1, !dbg !16
  %93 = insertelement <4 x i32> %92, i32 %70, i64 2, !dbg !16
  %94 = insertelement <4 x i32> %93, i32 %69, i64 3, !dbg !16
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !16
  %96 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !37
  %97 = bitcast <4 x i32> %96 to <4 x float>, !dbg !37
  %98 = shufflevector <4 x float> %97, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !37
  %99 = fadd <4 x float> %98, %95, !dbg !37
  %100 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !38
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !38
  %102 = shufflevector <4 x float> %101, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !38
  %103 = fsub <4 x float> %99, %102, !dbg !38
  %104 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !28
  %105 = insertelement <4 x i32> %104, i32 %75, i64 1, !dbg !28
  %106 = insertelement <4 x i32> %105, i32 %74, i64 2, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %73, i64 3, !dbg !28
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !28
  %109 = insertelement <4 x float> poison, float %79, i64 0, !dbg !39
  %110 = shufflevector <4 x float> %109, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !39
  %111 = fmul <4 x float> %103, %110, !dbg !39
  %112 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !40
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !40
  %114 = shufflevector <4 x float> %113, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !40
  %115 = fmul <4 x float> %111, %114, !dbg !40
  %116 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !41
  %117 = bitcast <4 x i32> %116 to <4 x float>, !dbg !41
  %118 = shufflevector <4 x float> %117, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %119 = fadd <4 x float> %115, %118, !dbg !41
  %120 = fadd <4 x float> %119, %108, !dbg !42
  %121 = fcmp olt <4 x float> %120, zeroinitializer, !dbg !43
  %122 = select <4 x i1> %121, <4 x float> zeroinitializer, <4 x float> %120, !dbg !47
  %123 = fcmp ole <4 x float> %122, zeroinitializer, !dbg !48
  %shift = shufflevector <4 x float> %122, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !49
  %124 = fadd <4 x float> %122, %shift, !dbg !49
  %shift16 = shufflevector <4 x float> %122, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !49
  %125 = fadd <4 x float> %shift16, %124, !dbg !49
  %shift17 = shufflevector <4 x float> %122, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !49
  %126 = fadd <4 x float> %shift17, %125, !dbg !49
  %127 = extractelement <4 x float> %126, i64 0, !dbg !49
  %128 = bitcast float %127 to i32, !dbg !32
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 16, i32 31), !dbg !32
  %130 = bitcast i32 %129 to float, !dbg !32
  %131 = fadd float %127, %130, !dbg !49
  %132 = bitcast float %131 to i32, !dbg !32
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 8, i32 31), !dbg !32
  %134 = bitcast i32 %133 to float, !dbg !32
  %135 = fadd float %131, %134, !dbg !49
  %136 = bitcast float %135 to i32, !dbg !32
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = fadd float %135, %138, !dbg !49
  %140 = bitcast float %139 to i32, !dbg !32
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 2, i32 31), !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = fadd float %139, %142, !dbg !49
  %144 = bitcast float %143 to i32, !dbg !32
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = fadd float %143, %146, !dbg !49
  %148 = bitcast float %147 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %148, i1 %80) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %149 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %84) #5, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 1, i32 31), !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = fadd float %150, %152, !dbg !49
  %154 = bitcast float %153 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %154, i1 %89) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %155 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %156 = fadd float %155, 0.000000e+00, !dbg !51
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %156, float 2.560000e+02) #5, !dbg !53
  %bc = bitcast <4 x float> %99 to <4 x i32>, !dbg !54
  %158 = extractelement <4 x i32> %bc, i64 0, !dbg !54
  %bc18 = bitcast <4 x float> %99 to <4 x i32>, !dbg !54
  %159 = extractelement <4 x i32> %bc18, i64 1, !dbg !54
  %bc19 = bitcast <4 x float> %99 to <4 x i32>, !dbg !54
  %160 = extractelement <4 x i32> %bc19, i64 2, !dbg !54
  %bc20 = bitcast <4 x float> %99 to <4 x i32>, !dbg !54
  %161 = extractelement <4 x i32> %bc20, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %158, i32 %159, i32 %160, i32 %161, ptr addrspace(1) %19, i1 true) #5, !dbg !54
  %162 = zext <4 x i1> %123 to <4 x i8>, !dbg !55
  %163 = bitcast <4 x i8> %162 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %163, ptr addrspace(1) %90, i1 true) #5, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %164 = sext i32 %11 to i64, !dbg !57
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !57
  %urem = and i32 %12, 63, !dbg !58
  %166 = icmp eq i32 %urem, 0, !dbg !58
  %167 = bitcast float %157 to i32, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %167, ptr addrspace(1) %165, i1 %166) #5, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdg46vnuarylry366loccbgayclpi2lfmcoosyuwwudtg4r5ehov.py", directory: "inductor_cache/dg")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_threshold_backward_7, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_threshold_backward_7", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 30, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 39, column: 31, scope: !7)
!28 = !DILocation(line: 39, column: 45, scope: !7)
!29 = !DILocation(line: 43, column: 18, scope: !7)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 46, column: 19, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 58, column: 59, scope: !7)
!36 = !DILocation(line: 62, column: 25, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 54, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 56, column: 21, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !50, inlinedAt: !35)
!50 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!51 = !DILocation(line: 73, column: 15, scope: !44, inlinedAt: !52)
!52 = !DILocation(line: 58, column: 45, scope: !7)
!53 = !DILocation(line: 60, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 48, scope: !7)
!55 = !DILocation(line: 62, column: 46, scope: !7)
!56 = !DILocation(line: 63, column: 4, scope: !7)
!57 = !DILocation(line: 64, column: 28, scope: !7)
!58 = !DILocation(line: 64, column: 40, scope: !7)
!59 = !DILocation(line: 64, column: 4, scope: !7)
