; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = or disjoint i32 %7, 1, !dbg !12
  %9 = or disjoint i32 %7, 2, !dbg !12
  %10 = or disjoint i32 %7, 3, !dbg !12
  %11 = icmp slt i32 %7, 512, !dbg !13
  %12 = icmp slt i32 %8, 512, !dbg !13
  %13 = icmp slt i32 %9, 512, !dbg !13
  %14 = icmp slt i32 %10, 512, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !14
  %16 = shl i32 %15, 8, !dbg !15
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %18 = and i32 %17, 127, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 128, !dbg !17
  %21 = icmp slt i32 %19, 256, !dbg !18
  %22 = icmp slt i32 %20, 256, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %23 = sdiv i32 %.frozen, 16, !dbg !19
  %24 = mul i32 %23, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = sdiv i32 %20, 16, !dbg !19
  %.frozen4 = freeze i32 %7, !dbg !21
  %26 = sdiv i32 %.frozen4, 128, !dbg !21
  %27 = mul i32 %26, 128, !dbg !22
  %.decomposed5 = sub i32 %.frozen4, %27, !dbg !22
  %28 = shl nsw i32 %.decomposed, 1, !dbg !23
  %29 = shl i32 %23, 6, !dbg !24
  %30 = shl i32 %25, 6, !dbg !24
  %31 = add i32 %28, %29, !dbg !25
  %32 = add i32 %28, %30, !dbg !25
  %33 = shl i32 %6, 12, !dbg !26
  %34 = shl i32 %8, 10, !dbg !26
  %35 = shl i32 %9, 10, !dbg !26
  %36 = shl i32 %10, 10, !dbg !26
  %37 = add i32 %31, %33, !dbg !27
  %38 = add i32 %33, %32, !dbg !27
  %39 = add i32 %31, %34, !dbg !27
  %40 = add i32 %34, %32, !dbg !27
  %41 = add i32 %31, %35, !dbg !27
  %42 = add i32 %35, %32, !dbg !27
  %43 = add i32 %31, %36, !dbg !27
  %44 = add i32 %36, %32, !dbg !27
  %45 = sext i32 %37 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !28
  %47 = sext i32 %38 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %39 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %40 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %41 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %42 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = sext i32 %43 to i64, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !28
  %59 = sext i32 %44 to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !28
  %61 = and i1 %11, %21, !dbg !29
  %62 = and i1 %22, %11, !dbg !29
  %63 = and i1 %12, %21, !dbg !29
  %64 = and i1 %22, %12, !dbg !29
  %65 = and i1 %13, %21, !dbg !29
  %66 = and i1 %22, %13, !dbg !29
  %67 = and i1 %14, %21, !dbg !29
  %68 = and i1 %22, %14, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %61) #1, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %62) #1, !dbg !30
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %63) #1, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %64) #1, !dbg !30
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %65) #1, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %66) #1, !dbg !30
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %67) #1, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %68) #1, !dbg !30
  %77 = or disjoint i32 %28, 1, !dbg !31
  %78 = add i32 %77, %29, !dbg !32
  %79 = add i32 %77, %30, !dbg !32
  %80 = add i32 %78, %33, !dbg !33
  %81 = add i32 %33, %79, !dbg !33
  %82 = add i32 %78, %34, !dbg !33
  %83 = add i32 %34, %79, !dbg !33
  %84 = add i32 %78, %35, !dbg !33
  %85 = add i32 %35, %79, !dbg !33
  %86 = add i32 %78, %36, !dbg !33
  %87 = add i32 %36, %79, !dbg !33
  %88 = sext i32 %80 to i64, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !34
  %90 = sext i32 %81 to i64, !dbg !34
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !34
  %92 = sext i32 %82 to i64, !dbg !34
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !34
  %94 = sext i32 %83 to i64, !dbg !34
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !34
  %96 = sext i32 %84 to i64, !dbg !34
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !34
  %98 = sext i32 %85 to i64, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !34
  %100 = sext i32 %86 to i64, !dbg !34
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !34
  %102 = sext i32 %87 to i64, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %61) #1, !dbg !35
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %62) #1, !dbg !35
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %63) #1, !dbg !35
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %64) #1, !dbg !35
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %65) #1, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %66) #1, !dbg !35
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %67) #1, !dbg !35
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %68) #1, !dbg !35
  %112 = add i32 %31, 32, !dbg !36
  %113 = add i32 %32, 32, !dbg !36
  %114 = add i32 %112, %33, !dbg !37
  %115 = add i32 %33, %113, !dbg !37
  %116 = add i32 %112, %34, !dbg !37
  %117 = add i32 %34, %113, !dbg !37
  %118 = add i32 %112, %35, !dbg !37
  %119 = add i32 %35, %113, !dbg !37
  %120 = add i32 %112, %36, !dbg !37
  %121 = add i32 %36, %113, !dbg !37
  %122 = sext i32 %114 to i64, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !38
  %124 = sext i32 %115 to i64, !dbg !38
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !38
  %126 = sext i32 %116 to i64, !dbg !38
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !38
  %128 = sext i32 %117 to i64, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !38
  %130 = sext i32 %118 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %0, i64 %130, !dbg !38
  %132 = sext i32 %119 to i64, !dbg !38
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !38
  %134 = sext i32 %120 to i64, !dbg !38
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !38
  %136 = sext i32 %121 to i64, !dbg !38
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !38
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %61) #1, !dbg !39
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 %62) #1, !dbg !39
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %63) #1, !dbg !39
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %64) #1, !dbg !39
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %65) #1, !dbg !39
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %66) #1, !dbg !39
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %67) #1, !dbg !39
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %68) #1, !dbg !39
  %146 = add i32 %31, 33, !dbg !40
  %147 = add i32 %32, 33, !dbg !40
  %148 = add i32 %146, %33, !dbg !41
  %149 = add i32 %33, %147, !dbg !41
  %150 = add i32 %146, %34, !dbg !41
  %151 = add i32 %34, %147, !dbg !41
  %152 = add i32 %146, %35, !dbg !41
  %153 = add i32 %35, %147, !dbg !41
  %154 = add i32 %146, %36, !dbg !41
  %155 = add i32 %36, %147, !dbg !41
  %156 = sext i32 %148 to i64, !dbg !42
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !42
  %158 = sext i32 %149 to i64, !dbg !42
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !42
  %160 = sext i32 %150 to i64, !dbg !42
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !42
  %162 = sext i32 %151 to i64, !dbg !42
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !42
  %164 = sext i32 %152 to i64, !dbg !42
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !42
  %166 = sext i32 %153 to i64, !dbg !42
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !42
  %168 = sext i32 %154 to i64, !dbg !42
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !42
  %170 = sext i32 %155 to i64, !dbg !42
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !42
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %61) #1, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %62) #1, !dbg !43
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %63) #1, !dbg !43
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %64) #1, !dbg !43
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %65) #1, !dbg !43
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %66) #1, !dbg !43
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %67) #1, !dbg !43
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %68) #1, !dbg !43
  %180 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !30
  %181 = insertelement <4 x i32> %180, i32 %71, i64 1, !dbg !30
  %182 = insertelement <4 x i32> %181, i32 %73, i64 2, !dbg !30
  %183 = insertelement <4 x i32> %182, i32 %75, i64 3, !dbg !30
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !30
  %185 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !35
  %186 = insertelement <4 x i32> %185, i32 %106, i64 1, !dbg !35
  %187 = insertelement <4 x i32> %186, i32 %108, i64 2, !dbg !35
  %188 = insertelement <4 x i32> %187, i32 %110, i64 3, !dbg !35
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !35
  %190 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !39
  %191 = insertelement <4 x i32> %190, i32 %140, i64 1, !dbg !39
  %192 = insertelement <4 x i32> %191, i32 %142, i64 2, !dbg !39
  %193 = insertelement <4 x i32> %192, i32 %144, i64 3, !dbg !39
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !39
  %195 = insertelement <4 x i32> poison, i32 %172, i64 0, !dbg !43
  %196 = insertelement <4 x i32> %195, i32 %174, i64 1, !dbg !43
  %197 = insertelement <4 x i32> %196, i32 %176, i64 2, !dbg !43
  %198 = insertelement <4 x i32> %197, i32 %178, i64 3, !dbg !43
  %199 = bitcast <4 x i32> %198 to <4 x float>, !dbg !43
  %200 = fcmp ogt <4 x float> %189, %184, !dbg !44
  %201 = fcmp uno <4 x float> %189, zeroinitializer, !dbg !48
  %202 = or <4 x i1> %200, %201, !dbg !49
  %.v = select <4 x i1> %202, <4 x i32> %188, <4 x i32> %183, !dbg !50
  %203 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %204 = fcmp olt <4 x float> %203, %194, !dbg !51
  %205 = fcmp uno <4 x float> %194, zeroinitializer, !dbg !53
  %206 = or <4 x i1> %204, %205, !dbg !54
  %.v1 = select <4 x i1> %206, <4 x i32> %193, <4 x i32> %.v, !dbg !55
  %207 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !55
  %208 = fcmp olt <4 x float> %207, %199, !dbg !56
  %209 = extractelement <4 x i1> %208, i64 0, !dbg !58
  %210 = extractelement <4 x i1> %208, i64 1, !dbg !58
  %211 = extractelement <4 x i1> %208, i64 2, !dbg !58
  %212 = extractelement <4 x i1> %208, i64 3, !dbg !58
  %213 = zext <4 x i1> %200 to <4 x i8>, !dbg !59
  %214 = select <4 x i1> %204, <4 x i8> splat (i8 2), <4 x i8> %213, !dbg !60
  %215 = select <4 x i1> %208, <4 x i8> splat (i8 3), <4 x i8> %214, !dbg !61
  %216 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !30
  %217 = insertelement <4 x i32> %216, i32 %72, i64 1, !dbg !30
  %218 = insertelement <4 x i32> %217, i32 %74, i64 2, !dbg !30
  %219 = insertelement <4 x i32> %218, i32 %76, i64 3, !dbg !30
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !30
  %221 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !35
  %222 = insertelement <4 x i32> %221, i32 %107, i64 1, !dbg !35
  %223 = insertelement <4 x i32> %222, i32 %109, i64 2, !dbg !35
  %224 = insertelement <4 x i32> %223, i32 %111, i64 3, !dbg !35
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !35
  %226 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !39
  %227 = insertelement <4 x i32> %226, i32 %141, i64 1, !dbg !39
  %228 = insertelement <4 x i32> %227, i32 %143, i64 2, !dbg !39
  %229 = insertelement <4 x i32> %228, i32 %145, i64 3, !dbg !39
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !39
  %231 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !43
  %232 = insertelement <4 x i32> %231, i32 %175, i64 1, !dbg !43
  %233 = insertelement <4 x i32> %232, i32 %177, i64 2, !dbg !43
  %234 = insertelement <4 x i32> %233, i32 %179, i64 3, !dbg !43
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !43
  %236 = fcmp ogt <4 x float> %225, %220, !dbg !44
  %237 = fcmp uno <4 x float> %225, zeroinitializer, !dbg !48
  %238 = or <4 x i1> %236, %237, !dbg !49
  %.v2 = select <4 x i1> %238, <4 x i32> %224, <4 x i32> %219, !dbg !50
  %239 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !50
  %240 = fcmp olt <4 x float> %239, %230, !dbg !51
  %241 = fcmp uno <4 x float> %230, zeroinitializer, !dbg !53
  %242 = or <4 x i1> %240, %241, !dbg !54
  %.v3 = select <4 x i1> %242, <4 x i32> %229, <4 x i32> %.v2, !dbg !55
  %243 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !55
  %244 = fcmp olt <4 x float> %243, %235, !dbg !56
  %245 = shufflevector <4 x float> %235, <4 x float> %199, <8 x i32> <i32 3, i32 7, i32 2, i32 6, i32 1, i32 5, i32 0, i32 4>, !dbg !62
  %246 = fcmp uno <8 x float> %245, zeroinitializer, !dbg !62
  %247 = extractelement <8 x i1> %246, i64 7, !dbg !58
  %248 = or i1 %209, %247, !dbg !58
  %249 = extractelement <8 x i1> %246, i64 5, !dbg !58
  %250 = or i1 %210, %249, !dbg !58
  %251 = extractelement <8 x i1> %246, i64 3, !dbg !58
  %252 = or i1 %211, %251, !dbg !58
  %253 = extractelement <8 x i1> %246, i64 1, !dbg !58
  %254 = or i1 %212, %253, !dbg !58
  %255 = extractelement <4 x i1> %244, i64 0, !dbg !58
  %256 = extractelement <8 x i1> %246, i64 6, !dbg !58
  %257 = or i1 %255, %256, !dbg !58
  %258 = extractelement <4 x i1> %244, i64 1, !dbg !58
  %259 = extractelement <8 x i1> %246, i64 4, !dbg !58
  %260 = or i1 %258, %259, !dbg !58
  %261 = extractelement <4 x i1> %244, i64 2, !dbg !58
  %262 = extractelement <8 x i1> %246, i64 2, !dbg !58
  %263 = or i1 %261, %262, !dbg !58
  %264 = extractelement <4 x i1> %244, i64 3, !dbg !58
  %265 = extractelement <8 x i1> %246, i64 0, !dbg !58
  %266 = or i1 %264, %265, !dbg !58
  %267 = zext <4 x i1> %236 to <4 x i8>, !dbg !59
  %268 = select <4 x i1> %240, <4 x i8> splat (i8 2), <4 x i8> %267, !dbg !60
  %269 = select <4 x i1> %244, <4 x i8> splat (i8 3), <4 x i8> %268, !dbg !61
  %270 = shl i32 %19, 7, !dbg !63
  %271 = shl i32 %20, 7, !dbg !63
  %272 = shl i32 %26, 15, !dbg !64
  %273 = add i32 %272, %.decomposed5, !dbg !65
  %274 = add i32 %273, %270, !dbg !66
  %275 = add i32 %273, %271, !dbg !66
  %276 = sext i32 %274 to i64, !dbg !67
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !67
  %278 = sext i32 %275 to i64, !dbg !67
  %279 = getelementptr float, ptr addrspace(1) %1, i64 %278, !dbg !67
  %280 = extractelement <4 x i32> %.v1, i64 0, !dbg !68
  %281 = select i1 %248, i32 %172, i32 %280, !dbg !69
  %282 = extractelement <4 x i32> %.v1, i64 1, !dbg !68
  %283 = select i1 %250, i32 %174, i32 %282, !dbg !69
  %284 = extractelement <4 x i32> %.v1, i64 2, !dbg !68
  %285 = select i1 %252, i32 %176, i32 %284, !dbg !69
  %286 = extractelement <4 x i32> %.v1, i64 3, !dbg !68
  %287 = select i1 %254, i32 %178, i32 %286, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %283, i32 %285, i32 %287, ptr addrspace(1) %277, i1 %61) #1, !dbg !68
  %288 = extractelement <4 x i32> %.v3, i64 0, !dbg !68
  %289 = select i1 %257, i32 %173, i32 %288, !dbg !69
  %290 = extractelement <4 x i32> %.v3, i64 1, !dbg !68
  %291 = select i1 %260, i32 %175, i32 %290, !dbg !69
  %292 = extractelement <4 x i32> %.v3, i64 2, !dbg !68
  %293 = select i1 %263, i32 %177, i32 %292, !dbg !69
  %294 = extractelement <4 x i32> %.v3, i64 3, !dbg !68
  %295 = select i1 %266, i32 %179, i32 %294, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %291, i32 %293, i32 %295, ptr addrspace(1) %279, i1 %62) #1, !dbg !68
  %296 = getelementptr i8, ptr addrspace(1) %2, i64 %276, !dbg !70
  %297 = getelementptr i8, ptr addrspace(1) %2, i64 %278, !dbg !70
  %298 = bitcast <4 x i8> %215 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %298, ptr addrspace(1) %296, i1 %61) #1, !dbg !71
  %299 = bitcast <4 x i8> %269 to i32, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %299, ptr addrspace(1) %297, i1 %62) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4j46qe2mjjf4s6lcndeli3q7asmojvutpw6sx2e7hb2vdwdb3e7.py", directory: "inductor_cache/4j")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_16", linkageName: "triton_poi_fused_max_pool2d_with_indices_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 23, scope: !7)
!13 = !DILocation(line: 24, column: 21, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 32, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 34, column: 50, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 63, scope: !7)
!30 = !DILocation(line: 34, column: 55, scope: !7)
!31 = !DILocation(line: 35, column: 34, scope: !7)
!32 = !DILocation(line: 35, column: 41, scope: !7)
!33 = !DILocation(line: 35, column: 49, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 59, scope: !7)
!36 = !DILocation(line: 36, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 36, column: 30, scope: !7)
!39 = !DILocation(line: 36, column: 60, scope: !7)
!40 = !DILocation(line: 37, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 50, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 60, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!63 = !DILocation(line: 51, column: 34, scope: !7)
!64 = !DILocation(line: 51, column: 45, scope: !7)
!65 = !DILocation(line: 51, column: 30, scope: !7)
!66 = !DILocation(line: 51, column: 39, scope: !7)
!67 = !DILocation(line: 51, column: 25, scope: !7)
!68 = !DILocation(line: 51, column: 56, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 57, scope: !7)
!72 = !DILocation(line: 52, column: 4, scope: !7)
