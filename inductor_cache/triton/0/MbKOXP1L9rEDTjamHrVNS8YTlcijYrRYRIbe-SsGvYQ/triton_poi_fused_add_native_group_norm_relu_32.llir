; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %14 = and i32 %13, 3, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = icmp slt i32 %16, 64, !dbg !14
  %21 = icmp slt i32 %17, 64, !dbg !14
  %22 = icmp slt i32 %18, 64, !dbg !14
  %23 = icmp slt i32 %19, 64, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 8, !dbg !16
  %26 = and i32 %15, 252, !dbg !17
  %27 = and i32 %12, 255, !dbg !17
  %28 = or disjoint i32 %25, %26, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = icmp slt i32 %28, 1024, !dbg !19
  %31 = icmp slt i32 %29, 1024, !dbg !19
  %32 = sdiv i32 %16, 16, !dbg !20
  %33 = sdiv i32 %17, 16, !dbg !20
  %34 = sdiv i32 %18, 16, !dbg !20
  %35 = sdiv i32 %19, 16, !dbg !20
  %36 = shl i32 %16, 10, !dbg !21
  %37 = shl i32 %17, 10, !dbg !21
  %38 = shl i32 %18, 10, !dbg !21
  %39 = shl i32 %19, 10, !dbg !21
  %40 = add i32 %28, %36, !dbg !22
  %41 = add i32 %28, %37, !dbg !22
  %42 = add i32 %28, %38, !dbg !22
  %43 = add i32 %28, %39, !dbg !22
  %44 = sext i32 %40 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %41 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %42 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %43 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = and i1 %20, %30, !dbg !24
  %53 = and i1 %21, %30, !dbg !24
  %54 = and i1 %22, %30, !dbg !24
  %55 = and i1 %23, %30, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %52) #4, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %53) #4, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %54) #4, !dbg !25
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %55) #4, !dbg !25
  %60 = shl i32 %32, 5, !dbg !26
  %61 = shl i32 %33, 5, !dbg !26
  %62 = shl i32 %34, 5, !dbg !26
  %63 = shl i32 %35, 5, !dbg !26
  %64 = sdiv i32 %28, 32, !dbg !27
  %65 = add i32 %60, %64, !dbg !28
  %66 = add i32 %64, %61, !dbg !28
  %67 = add i32 %64, %62, !dbg !28
  %68 = add i32 %64, %63, !dbg !28
  %69 = sext i32 %65 to i64, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !29
  %71 = sext i32 %66 to i64, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !29
  %73 = sext i32 %67 to i64, !dbg !29
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !29
  %75 = sext i32 %68 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %52) #4, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %52) #4, !dbg !30
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %52) #4, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %52) #4, !dbg !30
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %53) #4, !dbg !30
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %53) #4, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %53) #4, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %53) #4, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %54) #4, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %54) #4, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %54) #4, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %54) #4, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %55) #4, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %55) #4, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %55) #4, !dbg !30
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %55) #4, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !31
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !31
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %52) #4, !dbg !32
  %98 = bitcast i32 %97 to float, !dbg !32
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %52) #4, !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %52) #4, !dbg !32
  %102 = bitcast i32 %101 to float, !dbg !32
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %52) #4, !dbg !32
  %104 = bitcast i32 %103 to float, !dbg !32
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %53) #4, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %53) #4, !dbg !32
  %108 = bitcast i32 %107 to float, !dbg !32
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %53) #4, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %53) #4, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %54) #4, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %54) #4, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %54) #4, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %54) #4, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %55) #4, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %55) #4, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %55) #4, !dbg !32
  %126 = bitcast i32 %125 to float, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %55) #4, !dbg !32
  %128 = bitcast i32 %127 to float, !dbg !32
  %129 = sext i32 %29 to i64, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %3, i64 %129, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %31) #4, !dbg !34
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !35
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %31) #4, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !37
  %136 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !37
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 %52) #4, !dbg !38
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %135, i1 %53) #4, !dbg !38
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %136, i1 %54) #4, !dbg !38
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %137, i1 %55) #4, !dbg !38
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 5.120000e+02) #4, !dbg !39
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 5.120000e+02) #4, !dbg !39
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 5.120000e+02) #4, !dbg !39
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 5.120000e+02) #4, !dbg !39
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float 5.120000e+02) #4, !dbg !39
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 5.120000e+02) #4, !dbg !39
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float 5.120000e+02) #4, !dbg !39
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 5.120000e+02) #4, !dbg !39
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 5.120000e+02) #4, !dbg !39
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float 5.120000e+02) #4, !dbg !39
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 5.120000e+02) #4, !dbg !39
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 5.120000e+02) #4, !dbg !39
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 5.120000e+02) #4, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 5.120000e+02) #4, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float 5.120000e+02) #4, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float 5.120000e+02) #4, !dbg !39
  %158 = fadd float %142, 0x3EE4F8B580000000, !dbg !40
  %159 = fadd float %143, 0x3EE4F8B580000000, !dbg !40
  %160 = fadd float %144, 0x3EE4F8B580000000, !dbg !40
  %161 = fadd float %145, 0x3EE4F8B580000000, !dbg !40
  %162 = fadd float %146, 0x3EE4F8B580000000, !dbg !40
  %163 = fadd float %147, 0x3EE4F8B580000000, !dbg !40
  %164 = fadd float %148, 0x3EE4F8B580000000, !dbg !40
  %165 = fadd float %149, 0x3EE4F8B580000000, !dbg !40
  %166 = fadd float %150, 0x3EE4F8B580000000, !dbg !40
  %167 = fadd float %151, 0x3EE4F8B580000000, !dbg !40
  %168 = fadd float %152, 0x3EE4F8B580000000, !dbg !40
  %169 = fadd float %153, 0x3EE4F8B580000000, !dbg !40
  %170 = fadd float %154, 0x3EE4F8B580000000, !dbg !40
  %171 = fadd float %155, 0x3EE4F8B580000000, !dbg !40
  %172 = fadd float %156, 0x3EE4F8B580000000, !dbg !40
  %173 = fadd float %157, 0x3EE4F8B580000000, !dbg !40
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %174, 0, !dbg !41
  br i1 %.not.i, label %177, label %175, !dbg !41

175:                                              ; preds = %9
  %176 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %158), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

177:                                              ; preds = %9
  %178 = tail call float @llvm.nvvm.rsqrt.approx.f(float %158), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %175, %177
  %.0.i = phi float [ %176, %175 ], [ %178, %177 ], !dbg !41
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i35 = icmp eq i32 %179, 0, !dbg !41
  br i1 %.not.i35, label %182, label %180, !dbg !41

180:                                              ; preds = %__nv_rsqrtf.exit
  %181 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !41
  br label %__nv_rsqrtf.exit37, !dbg !41

182:                                              ; preds = %__nv_rsqrtf.exit
  %183 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !41
  br label %__nv_rsqrtf.exit37, !dbg !41

__nv_rsqrtf.exit37:                               ; preds = %180, %182
  %.0.i36 = phi float [ %181, %180 ], [ %183, %182 ], !dbg !41
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i38 = icmp eq i32 %184, 0, !dbg !41
  br i1 %.not.i38, label %187, label %185, !dbg !41

185:                                              ; preds = %__nv_rsqrtf.exit37
  %186 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %160), !dbg !41
  br label %__nv_rsqrtf.exit40, !dbg !41

187:                                              ; preds = %__nv_rsqrtf.exit37
  %188 = tail call float @llvm.nvvm.rsqrt.approx.f(float %160), !dbg !41
  br label %__nv_rsqrtf.exit40, !dbg !41

__nv_rsqrtf.exit40:                               ; preds = %185, %187
  %.0.i39 = phi float [ %186, %185 ], [ %188, %187 ], !dbg !41
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i41 = icmp eq i32 %189, 0, !dbg !41
  br i1 %.not.i41, label %192, label %190, !dbg !41

190:                                              ; preds = %__nv_rsqrtf.exit40
  %191 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %161), !dbg !41
  br label %__nv_rsqrtf.exit43, !dbg !41

192:                                              ; preds = %__nv_rsqrtf.exit40
  %193 = tail call float @llvm.nvvm.rsqrt.approx.f(float %161), !dbg !41
  br label %__nv_rsqrtf.exit43, !dbg !41

__nv_rsqrtf.exit43:                               ; preds = %190, %192
  %.0.i42 = phi float [ %191, %190 ], [ %193, %192 ], !dbg !41
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i44 = icmp eq i32 %194, 0, !dbg !41
  br i1 %.not.i44, label %197, label %195, !dbg !41

195:                                              ; preds = %__nv_rsqrtf.exit43
  %196 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !41
  br label %__nv_rsqrtf.exit46, !dbg !41

197:                                              ; preds = %__nv_rsqrtf.exit43
  %198 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !41
  br label %__nv_rsqrtf.exit46, !dbg !41

__nv_rsqrtf.exit46:                               ; preds = %195, %197
  %.0.i45 = phi float [ %196, %195 ], [ %198, %197 ], !dbg !41
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i47 = icmp eq i32 %199, 0, !dbg !41
  br i1 %.not.i47, label %202, label %200, !dbg !41

200:                                              ; preds = %__nv_rsqrtf.exit46
  %201 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !41
  br label %__nv_rsqrtf.exit49, !dbg !41

202:                                              ; preds = %__nv_rsqrtf.exit46
  %203 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !41
  br label %__nv_rsqrtf.exit49, !dbg !41

__nv_rsqrtf.exit49:                               ; preds = %200, %202
  %.0.i48 = phi float [ %201, %200 ], [ %203, %202 ], !dbg !41
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i50 = icmp eq i32 %204, 0, !dbg !41
  br i1 %.not.i50, label %207, label %205, !dbg !41

205:                                              ; preds = %__nv_rsqrtf.exit49
  %206 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit52, !dbg !41

207:                                              ; preds = %__nv_rsqrtf.exit49
  %208 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit52, !dbg !41

__nv_rsqrtf.exit52:                               ; preds = %205, %207
  %.0.i51 = phi float [ %206, %205 ], [ %208, %207 ], !dbg !41
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i53 = icmp eq i32 %209, 0, !dbg !41
  br i1 %.not.i53, label %212, label %210, !dbg !41

210:                                              ; preds = %__nv_rsqrtf.exit52
  %211 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit55, !dbg !41

212:                                              ; preds = %__nv_rsqrtf.exit52
  %213 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit55, !dbg !41

__nv_rsqrtf.exit55:                               ; preds = %210, %212
  %.0.i54 = phi float [ %211, %210 ], [ %213, %212 ], !dbg !41
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i56 = icmp eq i32 %214, 0, !dbg !41
  br i1 %.not.i56, label %217, label %215, !dbg !41

215:                                              ; preds = %__nv_rsqrtf.exit55
  %216 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit58, !dbg !41

217:                                              ; preds = %__nv_rsqrtf.exit55
  %218 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit58, !dbg !41

__nv_rsqrtf.exit58:                               ; preds = %215, %217
  %.0.i57 = phi float [ %216, %215 ], [ %218, %217 ], !dbg !41
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i59 = icmp eq i32 %219, 0, !dbg !41
  br i1 %.not.i59, label %222, label %220, !dbg !41

220:                                              ; preds = %__nv_rsqrtf.exit58
  %221 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit61, !dbg !41

222:                                              ; preds = %__nv_rsqrtf.exit58
  %223 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit61, !dbg !41

__nv_rsqrtf.exit61:                               ; preds = %220, %222
  %.0.i60 = phi float [ %221, %220 ], [ %223, %222 ], !dbg !41
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i62 = icmp eq i32 %224, 0, !dbg !41
  br i1 %.not.i62, label %227, label %225, !dbg !41

225:                                              ; preds = %__nv_rsqrtf.exit61
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit64, !dbg !41

227:                                              ; preds = %__nv_rsqrtf.exit61
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit64, !dbg !41

__nv_rsqrtf.exit64:                               ; preds = %225, %227
  %.0.i63 = phi float [ %226, %225 ], [ %228, %227 ], !dbg !41
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i65 = icmp eq i32 %229, 0, !dbg !41
  br i1 %.not.i65, label %232, label %230, !dbg !41

230:                                              ; preds = %__nv_rsqrtf.exit64
  %231 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit67, !dbg !41

232:                                              ; preds = %__nv_rsqrtf.exit64
  %233 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit67, !dbg !41

__nv_rsqrtf.exit67:                               ; preds = %230, %232
  %.0.i66 = phi float [ %231, %230 ], [ %233, %232 ], !dbg !41
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i68 = icmp eq i32 %234, 0, !dbg !41
  br i1 %.not.i68, label %237, label %235, !dbg !41

235:                                              ; preds = %__nv_rsqrtf.exit67
  %236 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %170), !dbg !41
  br label %__nv_rsqrtf.exit70, !dbg !41

237:                                              ; preds = %__nv_rsqrtf.exit67
  %238 = tail call float @llvm.nvvm.rsqrt.approx.f(float %170), !dbg !41
  br label %__nv_rsqrtf.exit70, !dbg !41

__nv_rsqrtf.exit70:                               ; preds = %235, %237
  %.0.i69 = phi float [ %236, %235 ], [ %238, %237 ], !dbg !41
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i71 = icmp eq i32 %239, 0, !dbg !41
  br i1 %.not.i71, label %242, label %240, !dbg !41

240:                                              ; preds = %__nv_rsqrtf.exit70
  %241 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %171), !dbg !41
  br label %__nv_rsqrtf.exit73, !dbg !41

242:                                              ; preds = %__nv_rsqrtf.exit70
  %243 = tail call float @llvm.nvvm.rsqrt.approx.f(float %171), !dbg !41
  br label %__nv_rsqrtf.exit73, !dbg !41

__nv_rsqrtf.exit73:                               ; preds = %240, %242
  %.0.i72 = phi float [ %241, %240 ], [ %243, %242 ], !dbg !41
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i74 = icmp eq i32 %244, 0, !dbg !41
  br i1 %.not.i74, label %247, label %245, !dbg !41

245:                                              ; preds = %__nv_rsqrtf.exit73
  %246 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %172), !dbg !41
  br label %__nv_rsqrtf.exit76, !dbg !41

247:                                              ; preds = %__nv_rsqrtf.exit73
  %248 = tail call float @llvm.nvvm.rsqrt.approx.f(float %172), !dbg !41
  br label %__nv_rsqrtf.exit76, !dbg !41

__nv_rsqrtf.exit76:                               ; preds = %245, %247
  %.0.i75 = phi float [ %246, %245 ], [ %248, %247 ], !dbg !41
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i77 = icmp eq i32 %249, 0, !dbg !41
  br i1 %.not.i77, label %252, label %250, !dbg !41

250:                                              ; preds = %__nv_rsqrtf.exit76
  %251 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %173), !dbg !41
  br label %__nv_rsqrtf.exit79, !dbg !41

252:                                              ; preds = %__nv_rsqrtf.exit76
  %253 = tail call float @llvm.nvvm.rsqrt.approx.f(float %173), !dbg !41
  br label %__nv_rsqrtf.exit79, !dbg !41

__nv_rsqrtf.exit79:                               ; preds = %250, %252
  %.0.i78 = phi float [ %251, %250 ], [ %253, %252 ], !dbg !41
  %254 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %255 = bitcast i32 %254 to float, !dbg !25
  %256 = bitcast i32 %92 to float, !dbg !30
  %257 = fsub float %255, %256, !dbg !42
  %258 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %259 = bitcast i32 %258 to float, !dbg !25
  %260 = bitcast i32 %91 to float, !dbg !30
  %261 = fsub float %259, %260, !dbg !42
  %262 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %263 = bitcast i32 %262 to float, !dbg !25
  %264 = bitcast i32 %90 to float, !dbg !30
  %265 = fsub float %263, %264, !dbg !42
  %266 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %267 = bitcast i32 %266 to float, !dbg !25
  %268 = bitcast i32 %89 to float, !dbg !30
  %269 = fsub float %267, %268, !dbg !42
  %270 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %271 = bitcast i32 %270 to float, !dbg !25
  %272 = bitcast i32 %88 to float, !dbg !30
  %273 = fsub float %271, %272, !dbg !42
  %274 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %275 = bitcast i32 %274 to float, !dbg !25
  %276 = bitcast i32 %87 to float, !dbg !30
  %277 = fsub float %275, %276, !dbg !42
  %278 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %279 = bitcast i32 %278 to float, !dbg !25
  %280 = bitcast i32 %86 to float, !dbg !30
  %281 = fsub float %279, %280, !dbg !42
  %282 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %283 = bitcast i32 %282 to float, !dbg !25
  %284 = bitcast i32 %85 to float, !dbg !30
  %285 = fsub float %283, %284, !dbg !42
  %286 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %287 = bitcast i32 %286 to float, !dbg !25
  %288 = bitcast i32 %84 to float, !dbg !30
  %289 = fsub float %287, %288, !dbg !42
  %290 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %291 = bitcast i32 %290 to float, !dbg !25
  %292 = bitcast i32 %83 to float, !dbg !30
  %293 = fsub float %291, %292, !dbg !42
  %294 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %295 = bitcast i32 %294 to float, !dbg !25
  %296 = bitcast i32 %82 to float, !dbg !30
  %297 = fsub float %295, %296, !dbg !42
  %298 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %299 = bitcast i32 %298 to float, !dbg !25
  %300 = bitcast i32 %81 to float, !dbg !30
  %301 = fsub float %299, %300, !dbg !42
  %302 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %303 = bitcast i32 %302 to float, !dbg !25
  %304 = bitcast i32 %80 to float, !dbg !30
  %305 = fsub float %303, %304, !dbg !42
  %306 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %307 = bitcast i32 %306 to float, !dbg !25
  %308 = bitcast i32 %79 to float, !dbg !30
  %309 = fsub float %307, %308, !dbg !42
  %310 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %311 = bitcast i32 %310 to float, !dbg !25
  %312 = bitcast i32 %78 to float, !dbg !30
  %313 = fsub float %311, %312, !dbg !42
  %314 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %315 = bitcast i32 %314 to float, !dbg !25
  %316 = bitcast i32 %77 to float, !dbg !30
  %317 = fsub float %315, %316, !dbg !42
  %318 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !38
  %319 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !38
  %320 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !38
  %321 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !38
  %322 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !38
  %323 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !38
  %324 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !38
  %325 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !38
  %326 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !38
  %327 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !38
  %328 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !38
  %329 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !38
  %330 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !38
  %331 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !38
  %332 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !38
  %333 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !38
  %334 = bitcast i32 %133 to float, !dbg !36
  %335 = bitcast i32 %131 to float, !dbg !34
  %336 = lshr i32 %12, 2, !dbg !17
  %337 = and i32 %336, 63, !dbg !17
  %338 = or disjoint i32 %337, %25, !dbg !18
  %339 = or disjoint i32 %338, 192, !dbg !18
  %340 = icmp slt i32 %339, 1024, !dbg !19
  %341 = and i32 %15, 12, !dbg !12
  %342 = or disjoint i32 %11, %341, !dbg !13
  %343 = icmp slt i32 %342, 64, !dbg !14
  %344 = and i1 %343, %340, !dbg !24
  %345 = or disjoint i32 %338, 128, !dbg !18
  %346 = icmp slt i32 %345, 1024, !dbg !19
  %347 = and i1 %343, %346, !dbg !24
  %348 = or disjoint i32 %338, 64, !dbg !18
  %349 = icmp slt i32 %348, 1024, !dbg !19
  %350 = and i1 %343, %349, !dbg !24
  %351 = icmp slt i32 %338, 1024, !dbg !19
  %352 = and i1 %343, %351, !dbg !24
  %.frozen = freeze i32 %342, !dbg !20
  %353 = sdiv i32 %.frozen, 16, !dbg !20
  %354 = mul i32 %353, 16, !dbg !43
  %.decomposed = sub i32 %.frozen, %354, !dbg !43
  %355 = fmul float %317, %.0.i, !dbg !44
  %356 = fmul float %313, %.0.i36, !dbg !44
  %357 = fmul float %309, %.0.i39, !dbg !44
  %358 = fmul float %305, %.0.i42, !dbg !44
  %359 = fmul float %301, %.0.i45, !dbg !44
  %360 = fmul float %297, %.0.i48, !dbg !44
  %361 = fmul float %293, %.0.i51, !dbg !44
  %362 = fmul float %289, %.0.i54, !dbg !44
  %363 = fmul float %285, %.0.i57, !dbg !44
  %364 = fmul float %281, %.0.i60, !dbg !44
  %365 = fmul float %277, %.0.i63, !dbg !44
  %366 = fmul float %273, %.0.i66, !dbg !44
  %367 = fmul float %269, %.0.i69, !dbg !44
  %368 = fmul float %265, %.0.i72, !dbg !44
  %369 = fmul float %261, %.0.i75, !dbg !44
  %370 = fmul float %257, %.0.i78, !dbg !44
  %371 = and i32 %15, 1020, !dbg !44
  %372 = lshr i32 %371, 8, !dbg !44
  %373 = or disjoint i32 %372, %371, !dbg !44
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !44
  %375 = bitcast float %355 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #4, !dbg !44
  %376 = or disjoint i32 %371, 1, !dbg !44
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %372, !dbg !44
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %376, !dbg !44
  %379 = bitcast float %356 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !44
  %380 = or disjoint i32 %371, 2, !dbg !44
  %381 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %380, !dbg !44
  %382 = bitcast float %357 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !44
  %383 = or disjoint i32 %371, 3, !dbg !44
  %384 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %383, !dbg !44
  %385 = bitcast float %358 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !44
  %387 = load float, ptr addrspace(3) %386, align 4, !dbg !44
  %388 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 1028, !dbg !44
  %389 = load float, ptr addrspace(3) %388, align 4, !dbg !44
  %390 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 2056, !dbg !44
  %391 = load float, ptr addrspace(3) %390, align 4, !dbg !44
  %392 = getelementptr inbounds i8, ptr addrspace(3) %386, i32 3084, !dbg !44
  %393 = load float, ptr addrspace(3) %392, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %394 = bitcast float %359 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %394, i1 true) #4, !dbg !44
  %395 = bitcast float %360 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %395, i1 true) #4, !dbg !44
  %396 = bitcast float %361 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %396, i1 true) #4, !dbg !44
  %397 = bitcast float %362 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %397, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %398 = load float, ptr addrspace(3) %386, align 4, !dbg !44
  %399 = load float, ptr addrspace(3) %388, align 4, !dbg !44
  %400 = load float, ptr addrspace(3) %390, align 4, !dbg !44
  %401 = load float, ptr addrspace(3) %392, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %402 = bitcast float %363 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %402, i1 true) #4, !dbg !44
  %403 = bitcast float %364 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %403, i1 true) #4, !dbg !44
  %404 = bitcast float %365 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %404, i1 true) #4, !dbg !44
  %405 = bitcast float %366 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %405, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %406 = load float, ptr addrspace(3) %386, align 4, !dbg !44
  %407 = load float, ptr addrspace(3) %388, align 4, !dbg !44
  %408 = load float, ptr addrspace(3) %390, align 4, !dbg !44
  %409 = load float, ptr addrspace(3) %392, align 4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %410 = bitcast float %367 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %410, i1 true) #4, !dbg !44
  %411 = bitcast float %368 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %411, i1 true) #4, !dbg !44
  %412 = bitcast float %369 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %412, i1 true) #4, !dbg !44
  %413 = bitcast float %370 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %413, i1 true) #4, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %414 = load float, ptr addrspace(3) %386, align 4, !dbg !44
  %415 = load float, ptr addrspace(3) %388, align 4, !dbg !44
  %416 = load float, ptr addrspace(3) %390, align 4, !dbg !44
  %417 = load float, ptr addrspace(3) %392, align 4, !dbg !44
  %418 = fmul float %387, %335, !dbg !45
  %419 = fmul float %389, %335, !dbg !45
  %420 = fmul float %391, %335, !dbg !45
  %421 = fmul float %393, %335, !dbg !45
  %422 = fmul float %398, %335, !dbg !45
  %423 = fmul float %399, %335, !dbg !45
  %424 = fmul float %400, %335, !dbg !45
  %425 = fmul float %401, %335, !dbg !45
  %426 = fmul float %406, %335, !dbg !45
  %427 = fmul float %407, %335, !dbg !45
  %428 = fmul float %408, %335, !dbg !45
  %429 = fmul float %409, %335, !dbg !45
  %430 = fmul float %414, %335, !dbg !45
  %431 = fmul float %415, %335, !dbg !45
  %432 = fmul float %416, %335, !dbg !45
  %433 = fmul float %417, %335, !dbg !45
  %434 = fadd float %418, %334, !dbg !46
  %435 = fadd float %419, %334, !dbg !46
  %436 = fadd float %420, %334, !dbg !46
  %437 = fadd float %421, %334, !dbg !46
  %438 = fadd float %422, %334, !dbg !46
  %439 = fadd float %423, %334, !dbg !46
  %440 = fadd float %424, %334, !dbg !46
  %441 = fadd float %425, %334, !dbg !46
  %442 = fadd float %426, %334, !dbg !46
  %443 = fadd float %427, %334, !dbg !46
  %444 = fadd float %428, %334, !dbg !46
  %445 = fadd float %429, %334, !dbg !46
  %446 = fadd float %430, %334, !dbg !46
  %447 = fadd float %431, %334, !dbg !46
  %448 = fadd float %432, %334, !dbg !46
  %449 = fadd float %433, %334, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %450 = bitcast float %434 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %450, i1 true) #4, !dbg !46
  %451 = bitcast float %435 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %451, i1 true) #4, !dbg !46
  %452 = bitcast float %436 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %452, i1 true) #4, !dbg !46
  %453 = bitcast float %437 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %453, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %454 = bitcast float %438 to <1 x i32>, !dbg !46
  %455 = bitcast float %439 to <1 x i32>, !dbg !46
  %456 = bitcast float %440 to <1 x i32>, !dbg !46
  %457 = bitcast float %441 to <1 x i32>, !dbg !46
  %458 = bitcast float %442 to <1 x i32>, !dbg !46
  %459 = bitcast float %443 to <1 x i32>, !dbg !46
  %460 = bitcast float %444 to <1 x i32>, !dbg !46
  %461 = bitcast float %445 to <1 x i32>, !dbg !46
  %462 = bitcast float %446 to <1 x i32>, !dbg !46
  %463 = bitcast float %447 to <1 x i32>, !dbg !46
  %464 = bitcast float %448 to <1 x i32>, !dbg !46
  %465 = bitcast float %449 to <1 x i32>, !dbg !46
  %466 = insertelement <16 x i32> poison, i32 %318, i64 0, !dbg !38
  %467 = insertelement <16 x i32> %466, i32 %319, i64 1, !dbg !38
  %468 = insertelement <16 x i32> %467, i32 %320, i64 2, !dbg !38
  %469 = insertelement <16 x i32> %468, i32 %321, i64 3, !dbg !38
  %470 = insertelement <16 x i32> %469, i32 %322, i64 4, !dbg !38
  %471 = insertelement <16 x i32> %470, i32 %323, i64 5, !dbg !38
  %472 = insertelement <16 x i32> %471, i32 %324, i64 6, !dbg !38
  %473 = insertelement <16 x i32> %472, i32 %325, i64 7, !dbg !38
  %474 = insertelement <16 x i32> %473, i32 %326, i64 8, !dbg !38
  %475 = insertelement <16 x i32> %474, i32 %327, i64 9, !dbg !38
  %476 = insertelement <16 x i32> %475, i32 %328, i64 10, !dbg !38
  %477 = insertelement <16 x i32> %476, i32 %329, i64 11, !dbg !38
  %478 = insertelement <16 x i32> %477, i32 %330, i64 12, !dbg !38
  %479 = insertelement <16 x i32> %478, i32 %331, i64 13, !dbg !38
  %480 = insertelement <16 x i32> %479, i32 %332, i64 14, !dbg !38
  %481 = insertelement <16 x i32> %480, i32 %333, i64 15, !dbg !38
  %482 = bitcast <16 x i32> %481 to <16 x float>, !dbg !38
  %483 = load <4 x float>, ptr addrspace(3) %374, align 4, !dbg !46
  %484 = shufflevector <4 x float> %483, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %454, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %455, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %456, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %457, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %485 = load <4 x float>, ptr addrspace(3) %374, align 4, !dbg !46
  %486 = shufflevector <4 x float> %485, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %458, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %459, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %460, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %461, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %487 = load <4 x float>, ptr addrspace(3) %374, align 4, !dbg !46
  %488 = shufflevector <4 x float> %487, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %462, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %463, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %464, i1 true) #4, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %465, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %489 = load <4 x float>, ptr addrspace(3) %374, align 4, !dbg !46
  %490 = shufflevector <4 x float> %489, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !46
  %491 = shufflevector <4 x float> %490, <4 x float> %488, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %492 = shufflevector <4 x float> %486, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %493 = shufflevector <16 x float> %491, <16 x float> %492, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %494 = shufflevector <4 x float> %484, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %495 = shufflevector <16 x float> %493, <16 x float> %494, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !47
  %496 = fadd <16 x float> %495, %482, !dbg !47
  %497 = fcmp olt <16 x float> %496, zeroinitializer, !dbg !48
  %498 = extractelement <16 x i1> %497, i64 15, !dbg !52
  %499 = extractelement <16 x float> %496, i64 15, !dbg !52
  %500 = select i1 %498, float 0.000000e+00, float %499, !dbg !52
  %501 = extractelement <16 x i1> %497, i64 14, !dbg !52
  %502 = extractelement <16 x float> %496, i64 14, !dbg !52
  %503 = select i1 %501, float 0.000000e+00, float %502, !dbg !52
  %504 = extractelement <16 x i1> %497, i64 13, !dbg !52
  %505 = extractelement <16 x float> %496, i64 13, !dbg !52
  %506 = select i1 %504, float 0.000000e+00, float %505, !dbg !52
  %507 = extractelement <16 x i1> %497, i64 12, !dbg !52
  %508 = extractelement <16 x float> %496, i64 12, !dbg !52
  %509 = select i1 %507, float 0.000000e+00, float %508, !dbg !52
  %510 = extractelement <16 x i1> %497, i64 11, !dbg !52
  %511 = extractelement <16 x float> %496, i64 11, !dbg !52
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !52
  %513 = extractelement <16 x i1> %497, i64 10, !dbg !52
  %514 = extractelement <16 x float> %496, i64 10, !dbg !52
  %515 = select i1 %513, float 0.000000e+00, float %514, !dbg !52
  %516 = extractelement <16 x i1> %497, i64 9, !dbg !52
  %517 = extractelement <16 x float> %496, i64 9, !dbg !52
  %518 = select i1 %516, float 0.000000e+00, float %517, !dbg !52
  %519 = extractelement <16 x i1> %497, i64 8, !dbg !52
  %520 = extractelement <16 x float> %496, i64 8, !dbg !52
  %521 = select i1 %519, float 0.000000e+00, float %520, !dbg !52
  %522 = extractelement <16 x i1> %497, i64 7, !dbg !52
  %523 = extractelement <16 x float> %496, i64 7, !dbg !52
  %524 = select i1 %522, float 0.000000e+00, float %523, !dbg !52
  %525 = extractelement <16 x i1> %497, i64 6, !dbg !52
  %526 = extractelement <16 x float> %496, i64 6, !dbg !52
  %527 = select i1 %525, float 0.000000e+00, float %526, !dbg !52
  %528 = extractelement <16 x i1> %497, i64 5, !dbg !52
  %529 = extractelement <16 x float> %496, i64 5, !dbg !52
  %530 = select i1 %528, float 0.000000e+00, float %529, !dbg !52
  %531 = extractelement <16 x i1> %497, i64 4, !dbg !52
  %532 = extractelement <16 x float> %496, i64 4, !dbg !52
  %533 = select i1 %531, float 0.000000e+00, float %532, !dbg !52
  %534 = extractelement <16 x i1> %497, i64 3, !dbg !52
  %535 = extractelement <16 x float> %496, i64 3, !dbg !52
  %536 = select i1 %534, float 0.000000e+00, float %535, !dbg !52
  %537 = extractelement <16 x i1> %497, i64 2, !dbg !52
  %538 = extractelement <16 x float> %496, i64 2, !dbg !52
  %539 = select i1 %537, float 0.000000e+00, float %538, !dbg !52
  %540 = extractelement <16 x i1> %497, i64 1, !dbg !52
  %541 = extractelement <16 x float> %496, i64 1, !dbg !52
  %542 = select i1 %540, float 0.000000e+00, float %541, !dbg !52
  %543 = extractelement <16 x i1> %497, i64 0, !dbg !52
  %544 = extractelement <16 x float> %496, i64 0, !dbg !52
  %545 = select i1 %543, float 0.000000e+00, float %544, !dbg !52
  %546 = shl i32 %338, 4, !dbg !53
  %547 = shl i32 %348, 4, !dbg !53
  %548 = shl i32 %345, 4, !dbg !53
  %549 = shl i32 %339, 4, !dbg !53
  %550 = shl i32 %353, 14, !dbg !54
  %551 = add i32 %550, %.decomposed, !dbg !55
  %552 = add i32 %551, %546, !dbg !56
  %553 = add i32 %551, %547, !dbg !56
  %554 = add i32 %551, %548, !dbg !56
  %555 = add i32 %551, %549, !dbg !56
  %556 = sext i32 %552 to i64, !dbg !57
  %557 = getelementptr float, ptr addrspace(1) %6, i64 %556, !dbg !57
  %558 = sext i32 %553 to i64, !dbg !57
  %559 = getelementptr float, ptr addrspace(1) %6, i64 %558, !dbg !57
  %560 = sext i32 %554 to i64, !dbg !57
  %561 = getelementptr float, ptr addrspace(1) %6, i64 %560, !dbg !57
  %562 = sext i32 %555 to i64, !dbg !57
  %563 = getelementptr float, ptr addrspace(1) %6, i64 %562, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %564 = shl i32 %12, 6, !dbg !58
  %565 = and i32 %564, 4032, !dbg !58
  %566 = or disjoint i32 %565, %14, !dbg !58
  %567 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %565, !dbg !58
  %568 = getelementptr float, ptr addrspace(3) %567, i32 %566, !dbg !58
  %569 = bitcast float %500 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %569, i1 true) #4, !dbg !58
  %570 = or disjoint i32 %566, 16, !dbg !58
  %571 = lshr i32 %570, 2, !dbg !58
  %572 = getelementptr float, ptr addrspace(3) @global_smem, i32 %571, !dbg !58
  %573 = getelementptr float, ptr addrspace(3) %572, i32 %570, !dbg !58
  %574 = bitcast float %503 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %573, <1 x i32> %574, i1 true) #4, !dbg !58
  %575 = or disjoint i32 %566, 32, !dbg !58
  %576 = lshr i32 %575, 2, !dbg !58
  %577 = getelementptr float, ptr addrspace(3) @global_smem, i32 %576, !dbg !58
  %578 = getelementptr float, ptr addrspace(3) %577, i32 %575, !dbg !58
  %579 = bitcast float %506 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %578, <1 x i32> %579, i1 true) #4, !dbg !58
  %580 = or disjoint i32 %566, 48, !dbg !58
  %581 = lshr i32 %580, 2, !dbg !58
  %582 = getelementptr float, ptr addrspace(3) @global_smem, i32 %581, !dbg !58
  %583 = getelementptr float, ptr addrspace(3) %582, i32 %580, !dbg !58
  %584 = bitcast float %509 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %583, <1 x i32> %584, i1 true) #4, !dbg !58
  %585 = or disjoint i32 %566, 4, !dbg !58
  %586 = getelementptr float, ptr addrspace(3) %567, i32 %585, !dbg !58
  %587 = bitcast float %512 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %587, i1 true) #4, !dbg !58
  %588 = or disjoint i32 %566, 20, !dbg !58
  %589 = lshr i32 %588, 2, !dbg !58
  %590 = and i32 %589, 1012, !dbg !58
  %591 = getelementptr float, ptr addrspace(3) @global_smem, i32 %590, !dbg !58
  %592 = getelementptr float, ptr addrspace(3) %591, i32 %588, !dbg !58
  %593 = bitcast float %515 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %592, <1 x i32> %593, i1 true) #4, !dbg !58
  %594 = or disjoint i32 %566, 36, !dbg !58
  %595 = lshr i32 %594, 2, !dbg !58
  %596 = and i32 %595, 1016, !dbg !58
  %597 = getelementptr float, ptr addrspace(3) @global_smem, i32 %596, !dbg !58
  %598 = getelementptr float, ptr addrspace(3) %597, i32 %594, !dbg !58
  %599 = bitcast float %518 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %598, <1 x i32> %599, i1 true) #4, !dbg !58
  %600 = or disjoint i32 %566, 52, !dbg !58
  %601 = lshr i32 %600, 2, !dbg !58
  %602 = and i32 %601, 1020, !dbg !58
  %603 = getelementptr float, ptr addrspace(3) @global_smem, i32 %602, !dbg !58
  %604 = getelementptr float, ptr addrspace(3) %603, i32 %600, !dbg !58
  %605 = bitcast float %521 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %604, <1 x i32> %605, i1 true) #4, !dbg !58
  %606 = or disjoint i32 %566, 8, !dbg !58
  %607 = getelementptr float, ptr addrspace(3) %567, i32 %606, !dbg !58
  %608 = bitcast float %524 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %608, i1 true) #4, !dbg !58
  %609 = or disjoint i32 %566, 24, !dbg !58
  %610 = lshr i32 %609, 2, !dbg !58
  %611 = and i32 %610, 1012, !dbg !58
  %612 = getelementptr float, ptr addrspace(3) @global_smem, i32 %611, !dbg !58
  %613 = getelementptr float, ptr addrspace(3) %612, i32 %609, !dbg !58
  %614 = bitcast float %527 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %613, <1 x i32> %614, i1 true) #4, !dbg !58
  %615 = or disjoint i32 %566, 40, !dbg !58
  %616 = lshr i32 %615, 2, !dbg !58
  %617 = and i32 %616, 1016, !dbg !58
  %618 = getelementptr float, ptr addrspace(3) @global_smem, i32 %617, !dbg !58
  %619 = getelementptr float, ptr addrspace(3) %618, i32 %615, !dbg !58
  %620 = bitcast float %530 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %619, <1 x i32> %620, i1 true) #4, !dbg !58
  %621 = or disjoint i32 %566, 56, !dbg !58
  %622 = lshr i32 %621, 2, !dbg !58
  %623 = and i32 %622, 1020, !dbg !58
  %624 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !58
  %625 = getelementptr float, ptr addrspace(3) %624, i32 %621, !dbg !58
  %626 = bitcast float %533 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %626, i1 true) #4, !dbg !58
  %627 = or disjoint i32 %566, 12, !dbg !58
  %628 = getelementptr float, ptr addrspace(3) %567, i32 %627, !dbg !58
  %629 = bitcast float %536 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %628, <1 x i32> %629, i1 true) #4, !dbg !58
  %630 = or disjoint i32 %566, 28, !dbg !58
  %631 = lshr i32 %630, 2, !dbg !58
  %632 = and i32 %631, 1012, !dbg !58
  %633 = getelementptr float, ptr addrspace(3) @global_smem, i32 %632, !dbg !58
  %634 = getelementptr float, ptr addrspace(3) %633, i32 %630, !dbg !58
  %635 = bitcast float %539 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %634, <1 x i32> %635, i1 true) #4, !dbg !58
  %636 = or disjoint i32 %566, 44, !dbg !58
  %637 = lshr i32 %636, 2, !dbg !58
  %638 = and i32 %637, 1016, !dbg !58
  %639 = getelementptr float, ptr addrspace(3) @global_smem, i32 %638, !dbg !58
  %640 = getelementptr float, ptr addrspace(3) %639, i32 %636, !dbg !58
  %641 = bitcast float %542 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %640, <1 x i32> %641, i1 true) #4, !dbg !58
  %642 = or disjoint i32 %566, 60, !dbg !58
  %643 = lshr i32 %642, 2, !dbg !58
  %644 = and i32 %643, 1020, !dbg !58
  %645 = getelementptr float, ptr addrspace(3) @global_smem, i32 %644, !dbg !58
  %646 = getelementptr float, ptr addrspace(3) %645, i32 %642, !dbg !58
  %647 = bitcast float %545 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %646, <1 x i32> %647, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %648 = and i32 %12, 252, !dbg !58
  %649 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %648, !dbg !58
  %650 = getelementptr inbounds float, ptr addrspace(3) %649, i32 %371, !dbg !58
  %651 = or disjoint i32 %371, 1024, !dbg !58
  %652 = lshr exact i32 %651, 2, !dbg !58
  %653 = and i32 %652, 508, !dbg !58
  %654 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %653, !dbg !58
  %655 = getelementptr inbounds float, ptr addrspace(3) %654, i32 %651, !dbg !58
  %656 = load <4 x i32>, ptr addrspace(3) %655, align 16, !dbg !58
  %657 = or disjoint i32 %371, 2048, !dbg !58
  %658 = lshr exact i32 %657, 2, !dbg !58
  %659 = and i32 %658, 764, !dbg !58
  %660 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %659, !dbg !58
  %661 = getelementptr inbounds float, ptr addrspace(3) %660, i32 %657, !dbg !58
  %662 = load <4 x i32>, ptr addrspace(3) %661, align 16, !dbg !58
  %663 = or disjoint i32 %371, 3072, !dbg !58
  %664 = lshr exact i32 %663, 2, !dbg !58
  %665 = and i32 %664, 1020, !dbg !58
  %666 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %665, !dbg !58
  %667 = getelementptr inbounds float, ptr addrspace(3) %666, i32 %663, !dbg !58
  %668 = load <4 x i32>, ptr addrspace(3) %667, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %650, align 16, !dbg !58
  %669 = getelementptr inbounds i8, ptr addrspace(3) %650, i32 4, !dbg !58
  %.extract20 = load i32, ptr addrspace(3) %669, align 4, !dbg !58
  %670 = getelementptr inbounds i8, ptr addrspace(3) %650, i32 8, !dbg !58
  %.extract21 = load i32, ptr addrspace(3) %670, align 8, !dbg !58
  %671 = getelementptr inbounds i8, ptr addrspace(3) %650, i32 12, !dbg !58
  %.extract22 = load i32, ptr addrspace(3) %671, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %557, i1 %352) #4, !dbg !58
  %.extract23 = extractelement <4 x i32> %656, i64 0, !dbg !58
  %.extract24 = extractelement <4 x i32> %656, i64 1, !dbg !58
  %.extract25 = extractelement <4 x i32> %656, i64 2, !dbg !58
  %.extract26 = extractelement <4 x i32> %656, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %559, i1 %350) #4, !dbg !58
  %.extract27 = extractelement <4 x i32> %662, i64 0, !dbg !58
  %.extract28 = extractelement <4 x i32> %662, i64 1, !dbg !58
  %.extract29 = extractelement <4 x i32> %662, i64 2, !dbg !58
  %.extract30 = extractelement <4 x i32> %662, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %561, i1 %347) #4, !dbg !58
  %.extract31 = extractelement <4 x i32> %668, i64 0, !dbg !58
  %.extract32 = extractelement <4 x i32> %668, i64 1, !dbg !58
  %.extract33 = extractelement <4 x i32> %668, i64 2, !dbg !58
  %.extract34 = extractelement <4 x i32> %668, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %563, i1 %344) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx25tstxlj2znuw4byygoolyvmx6ozrajckclupupgaej7pyhj4q.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_32", linkageName: "triton_poi_fused_add_native_group_norm_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 53, scope: !7)
!25 = !DILocation(line: 32, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 45, scope: !7)
!28 = !DILocation(line: 33, column: 39, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 51, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 43, column: 27, scope: !7)
!42 = !DILocation(line: 38, column: 18, scope: !7)
!43 = !DILocation(line: 31, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 33, scope: !7)
!54 = !DILocation(line: 50, column: 44, scope: !7)
!55 = !DILocation(line: 50, column: 30, scope: !7)
!56 = !DILocation(line: 50, column: 38, scope: !7)
!57 = !DILocation(line: 50, column: 25, scope: !7)
!58 = !DILocation(line: 50, column: 56, scope: !7)
!59 = !DILocation(line: 50, column: 4, scope: !7)
