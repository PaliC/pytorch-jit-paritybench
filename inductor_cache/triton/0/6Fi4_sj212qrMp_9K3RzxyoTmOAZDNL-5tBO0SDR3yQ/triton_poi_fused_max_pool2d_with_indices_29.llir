; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_29(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 3, !dbg !12
  %8 = and i32 %7, 1016, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 4, !dbg !13
  %14 = or disjoint i32 %9, 5, !dbg !13
  %15 = or disjoint i32 %9, 6, !dbg !13
  %16 = or disjoint i32 %9, 7, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %17 = sdiv i32 %.frozen, 32, !dbg !14
  %18 = mul i32 %17, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %10, 32, !dbg !15
  %20 = srem i32 %11, 32, !dbg !15
  %21 = srem i32 %12, 32, !dbg !15
  %22 = srem i32 %13, 32, !dbg !15
  %23 = srem i32 %14, 32, !dbg !15
  %24 = srem i32 %15, 32, !dbg !15
  %25 = srem i32 %16, 32, !dbg !15
  %26 = shl nsw i32 %.decomposed, 1, !dbg !16
  %27 = shl nsw i32 %19, 1, !dbg !16
  %28 = shl nsw i32 %20, 1, !dbg !16
  %29 = shl nsw i32 %21, 1, !dbg !16
  %30 = shl nsw i32 %22, 1, !dbg !16
  %31 = shl nsw i32 %23, 1, !dbg !16
  %32 = shl nsw i32 %24, 1, !dbg !16
  %33 = shl nsw i32 %25, 1, !dbg !16
  %34 = shl i32 %17, 7, !dbg !17
  %35 = add i32 %26, %34, !dbg !18
  %36 = add i32 %34, %27, !dbg !18
  %37 = add i32 %34, %28, !dbg !18
  %38 = add i32 %34, %29, !dbg !18
  %39 = add i32 %34, %30, !dbg !18
  %40 = add i32 %34, %31, !dbg !18
  %41 = add i32 %34, %32, !dbg !18
  %42 = add i32 %34, %33, !dbg !18
  %43 = sext i32 %35 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = sext i32 %36 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = sext i32 %37 to i64, !dbg !19
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !19
  %49 = sext i32 %38 to i64, !dbg !19
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !19
  %51 = sext i32 %39 to i64, !dbg !19
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !19
  %53 = sext i32 %40 to i64, !dbg !19
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !19
  %55 = sext i32 %41 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !19
  %57 = sext i32 %42 to i64, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !19
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !20
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !20
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !20
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !20
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !20
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !20
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !20
  %67 = or disjoint i32 %35, 1, !dbg !21
  %68 = or disjoint i32 %36, 1, !dbg !21
  %69 = or disjoint i32 %37, 1, !dbg !21
  %70 = or disjoint i32 %38, 1, !dbg !21
  %71 = or disjoint i32 %39, 1, !dbg !21
  %72 = or disjoint i32 %40, 1, !dbg !21
  %73 = or disjoint i32 %41, 1, !dbg !21
  %74 = or disjoint i32 %42, 1, !dbg !21
  %75 = sext i32 %67 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = sext i32 %68 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !22
  %79 = sext i32 %69 to i64, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !22
  %81 = sext i32 %70 to i64, !dbg !22
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !22
  %83 = sext i32 %71 to i64, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !22
  %85 = sext i32 %72 to i64, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !22
  %87 = sext i32 %73 to i64, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !22
  %89 = sext i32 %74 to i64, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !23
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !23
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !23
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #1, !dbg !23
  %99 = or disjoint i32 %34, 64, !dbg !24
  %100 = add i32 %99, %26, !dbg !25
  %101 = add i32 %99, %27, !dbg !25
  %102 = add i32 %99, %28, !dbg !25
  %103 = add i32 %99, %29, !dbg !25
  %104 = add i32 %99, %30, !dbg !25
  %105 = add i32 %99, %31, !dbg !25
  %106 = add i32 %99, %32, !dbg !25
  %107 = add i32 %99, %33, !dbg !25
  %108 = sext i32 %100 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !26
  %110 = sext i32 %101 to i64, !dbg !26
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !26
  %112 = sext i32 %102 to i64, !dbg !26
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !26
  %114 = sext i32 %103 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %116 = sext i32 %104 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %105 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = sext i32 %106 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !26
  %122 = sext i32 %107 to i64, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !26
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !27
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !27
  %132 = or disjoint i32 %34, 65, !dbg !28
  %133 = add i32 %132, %26, !dbg !29
  %134 = add i32 %132, %27, !dbg !29
  %135 = add i32 %132, %28, !dbg !29
  %136 = add i32 %132, %29, !dbg !29
  %137 = add i32 %132, %30, !dbg !29
  %138 = add i32 %132, %31, !dbg !29
  %139 = add i32 %132, %32, !dbg !29
  %140 = add i32 %132, %33, !dbg !29
  %141 = sext i32 %133 to i64, !dbg !30
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !30
  %143 = sext i32 %134 to i64, !dbg !30
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !30
  %145 = sext i32 %135 to i64, !dbg !30
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !30
  %147 = sext i32 %136 to i64, !dbg !30
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !30
  %149 = sext i32 %137 to i64, !dbg !30
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !30
  %151 = sext i32 %138 to i64, !dbg !30
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !30
  %153 = sext i32 %139 to i64, !dbg !30
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !30
  %155 = sext i32 %140 to i64, !dbg !30
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #1, !dbg !31
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !31
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !31
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !31
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !31
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !31
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !31
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !31
  %165 = insertelement <4 x i32> poison, i32 %59, i64 0, !dbg !20
  %166 = insertelement <4 x i32> %165, i32 %60, i64 1, !dbg !20
  %167 = insertelement <4 x i32> %166, i32 %61, i64 2, !dbg !20
  %168 = insertelement <4 x i32> %167, i32 %62, i64 3, !dbg !20
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !20
  %170 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !23
  %171 = insertelement <4 x i32> %170, i32 %92, i64 1, !dbg !23
  %172 = insertelement <4 x i32> %171, i32 %93, i64 2, !dbg !23
  %173 = insertelement <4 x i32> %172, i32 %94, i64 3, !dbg !23
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !23
  %175 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !27
  %176 = insertelement <4 x i32> %175, i32 %125, i64 1, !dbg !27
  %177 = insertelement <4 x i32> %176, i32 %126, i64 2, !dbg !27
  %178 = insertelement <4 x i32> %177, i32 %127, i64 3, !dbg !27
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !27
  %180 = insertelement <4 x i32> poison, i32 %157, i64 0, !dbg !31
  %181 = insertelement <4 x i32> %180, i32 %158, i64 1, !dbg !31
  %182 = insertelement <4 x i32> %181, i32 %159, i64 2, !dbg !31
  %183 = insertelement <4 x i32> %182, i32 %160, i64 3, !dbg !31
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !31
  %185 = fcmp ogt <4 x float> %174, %169, !dbg !32
  %186 = zext <4 x i1> %185 to <4 x i8>, !dbg !33
  %187 = fcmp uno <4 x float> %174, zeroinitializer, !dbg !34
  %188 = or <4 x i1> %185, %187, !dbg !38
  %.v = select <4 x i1> %188, <4 x i32> %173, <4 x i32> %168, !dbg !39
  %189 = bitcast <4 x i32> %.v to <4 x float>, !dbg !39
  %190 = fcmp olt <4 x float> %189, %179, !dbg !40
  %191 = select <4 x i1> %190, <4 x i8> splat (i8 2), <4 x i8> %186, !dbg !41
  %192 = fcmp uno <4 x float> %179, zeroinitializer, !dbg !42
  %193 = or <4 x i1> %190, %192, !dbg !44
  %.v1 = select <4 x i1> %193, <4 x i32> %178, <4 x i32> %.v, !dbg !45
  %194 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !45
  %195 = fcmp olt <4 x float> %194, %184, !dbg !46
  %196 = select <4 x i1> %195, <4 x i8> splat (i8 3), <4 x i8> %191, !dbg !47
  %197 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !20
  %198 = insertelement <4 x i32> %197, i32 %64, i64 1, !dbg !20
  %199 = insertelement <4 x i32> %198, i32 %65, i64 2, !dbg !20
  %200 = insertelement <4 x i32> %199, i32 %66, i64 3, !dbg !20
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !20
  %202 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !23
  %203 = insertelement <4 x i32> %202, i32 %96, i64 1, !dbg !23
  %204 = insertelement <4 x i32> %203, i32 %97, i64 2, !dbg !23
  %205 = insertelement <4 x i32> %204, i32 %98, i64 3, !dbg !23
  %206 = bitcast <4 x i32> %205 to <4 x float>, !dbg !23
  %207 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !27
  %208 = insertelement <4 x i32> %207, i32 %129, i64 1, !dbg !27
  %209 = insertelement <4 x i32> %208, i32 %130, i64 2, !dbg !27
  %210 = insertelement <4 x i32> %209, i32 %131, i64 3, !dbg !27
  %211 = bitcast <4 x i32> %210 to <4 x float>, !dbg !27
  %212 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !31
  %213 = insertelement <4 x i32> %212, i32 %162, i64 1, !dbg !31
  %214 = insertelement <4 x i32> %213, i32 %163, i64 2, !dbg !31
  %215 = insertelement <4 x i32> %214, i32 %164, i64 3, !dbg !31
  %216 = bitcast <4 x i32> %215 to <4 x float>, !dbg !31
  %217 = fcmp ogt <4 x float> %206, %201, !dbg !32
  %218 = zext <4 x i1> %217 to <4 x i8>, !dbg !33
  %219 = fcmp uno <4 x float> %206, zeroinitializer, !dbg !34
  %220 = or <4 x i1> %217, %219, !dbg !38
  %.v2 = select <4 x i1> %220, <4 x i32> %205, <4 x i32> %200, !dbg !39
  %221 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !39
  %222 = fcmp olt <4 x float> %221, %211, !dbg !40
  %223 = select <4 x i1> %222, <4 x i8> splat (i8 2), <4 x i8> %218, !dbg !41
  %224 = fcmp uno <4 x float> %211, zeroinitializer, !dbg !42
  %225 = or <4 x i1> %222, %224, !dbg !44
  %.v3 = select <4 x i1> %225, <4 x i32> %210, <4 x i32> %.v2, !dbg !45
  %226 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !45
  %227 = fcmp olt <4 x float> %226, %216, !dbg !46
  %228 = select <4 x i1> %227, <4 x i8> splat (i8 3), <4 x i8> %223, !dbg !47
  %229 = sext i32 %9 to i64, !dbg !48
  %230 = getelementptr i8, ptr addrspace(1) %1, i64 %229, !dbg !48
  %231 = bitcast <4 x i8> %196 to i32, !dbg !49
  %232 = bitcast <4 x i8> %228 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %231, i32 %232, ptr addrspace(1) %230, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coy6ohdrkabvoplzhzkwweufw7w4w4qvts4e3z5v2uxp2wx4e4gh.py", directory: "inductor_cache/oy")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_29", linkageName: "triton_poi_fused_max_pool2d_with_indices_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 32, scope: !7)
!17 = !DILocation(line: 27, column: 41, scope: !7)
!18 = !DILocation(line: 27, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 46, scope: !7)
!21 = !DILocation(line: 28, column: 41, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 50, scope: !7)
!24 = !DILocation(line: 29, column: 35, scope: !7)
!25 = !DILocation(line: 29, column: 42, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 51, scope: !7)
!28 = !DILocation(line: 30, column: 36, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 31, scope: !7)
!31 = !DILocation(line: 30, column: 52, scope: !7)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 32, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 35, column: 40, scope: !7)
!38 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 33, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !43)
!43 = !DILocation(line: 39, column: 41, scope: !7)
!44 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !43)
!45 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !43)
!46 = !DILocation(line: 40, column: 20, scope: !7)
!47 = !DILocation(line: 42, column: 35, scope: !7)
!48 = !DILocation(line: 44, column: 25, scope: !7)
!49 = !DILocation(line: 44, column: 37, scope: !7)
!50 = !DILocation(line: 44, column: 4, scope: !7)
