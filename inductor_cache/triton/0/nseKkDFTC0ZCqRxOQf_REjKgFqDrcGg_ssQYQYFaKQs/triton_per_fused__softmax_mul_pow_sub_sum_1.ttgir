#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0)
#loc1 = loc(unknown)
#loc54 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":59:39)
#loc64 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":64:26)
#loc77 = loc(callsite(#loc1 at #loc54))
#loc83 = loc(callsite(#loc1 at #loc64))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__softmax_mul_pow_sub_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<1x32xi32, #blocked> loc(#loc1)
    %c48_i32 = arith.constant 48 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x32xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0xFF800000> : tensor<1x32xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<3> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<2> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<1> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<4> : tensor<1x32xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x32xi32, #blocked1> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc4)
    %6 = arith.remsi %0, %c16_i32 : i32 loc(#loc5)
    %7 = arith.divsi %0, %c16_i32 : i32 loc(#loc6)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc7)
    %10 = tt.addptr %8, %4 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc7)
    %11 = tt.addptr %9, %5 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc7)
    %12 = tt.load %10 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %13 = tt.load %11 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc8)
    %14 = arith.muli %7, %c64_i32 : i32 loc(#loc9)
    %15 = arith.addi %6, %14 : i32 loc(#loc10)
    %16 = tt.addptr %arg1, %15 : !tt.ptr<f32>, i32 loc(#loc11)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %18 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc12)
    %20 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc12)
    %21 = tt.load %17, %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %22 = tt.load %18, %20 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = arith.muli %4, %cst_8 : tensor<1x32xi32, #blocked1> loc(#loc13)
    %24 = arith.muli %5, %cst : tensor<1x32xi32, #blocked> loc(#loc13)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc14)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc14)
    %27 = tt.addptr %25, %23 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc14)
    %28 = tt.addptr %26, %24 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc14)
    %29 = tt.load %27 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %30 = tt.load %28 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc15)
    %31 = arith.addi %6, %c16_i32 : i32 loc(#loc16)
    %32 = arith.addi %31, %14 : i32 loc(#loc17)
    %33 = tt.addptr %arg1, %32 : !tt.ptr<f32>, i32 loc(#loc18)
    %34 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %35 = tt.splat %33 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %36 = tt.load %34, %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %37 = tt.load %35, %20 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %38 = arith.addi %23, %cst_7 : tensor<1x32xi32, #blocked1> loc(#loc20)
    %39 = arith.addi %24, %cst_0 : tensor<1x32xi32, #blocked> loc(#loc20)
    %40 = tt.addptr %25, %38 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc21)
    %41 = tt.addptr %26, %39 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc21)
    %42 = tt.load %40 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc22)
    %43 = tt.load %41 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc22)
    %44 = arith.addi %6, %c32_i32 : i32 loc(#loc23)
    %45 = arith.addi %44, %14 : i32 loc(#loc24)
    %46 = tt.addptr %arg1, %45 : !tt.ptr<f32>, i32 loc(#loc25)
    %47 = tt.splat %46 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %48 = tt.splat %46 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %49 = tt.load %47, %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    %50 = tt.load %48, %20 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %51 = arith.addi %23, %cst_6 : tensor<1x32xi32, #blocked1> loc(#loc27)
    %52 = arith.addi %24, %cst_1 : tensor<1x32xi32, #blocked> loc(#loc27)
    %53 = tt.addptr %25, %51 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc28)
    %54 = tt.addptr %26, %52 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc28)
    %55 = tt.load %53 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc29)
    %56 = tt.load %54 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc29)
    %57 = arith.addi %6, %c48_i32 : i32 loc(#loc30)
    %58 = arith.addi %57, %14 : i32 loc(#loc31)
    %59 = tt.addptr %arg1, %58 : !tt.ptr<f32>, i32 loc(#loc32)
    %60 = tt.splat %59 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %61 = tt.splat %59 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %62 = tt.load %60, %19 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc33)
    %63 = tt.load %61, %20 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc33)
    %64 = arith.addi %23, %cst_5 : tensor<1x32xi32, #blocked1> loc(#loc34)
    %65 = arith.addi %24, %cst_2 : tensor<1x32xi32, #blocked> loc(#loc34)
    %66 = tt.addptr %25, %64 : tensor<1x32x!tt.ptr<f32>, #blocked1>, tensor<1x32xi32, #blocked1> loc(#loc35)
    %67 = tt.addptr %26, %65 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc35)
    %68 = tt.load %66 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %69 = tt.load %67 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc36)
    %70 = tt.broadcast %21 : tensor<1x1xf32, #blocked1> -> tensor<1x32xf32, #blocked1> loc(#loc37)
    %71 = tt.broadcast %22 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc37)
    %72 = arith.subf %70, %29 : tensor<1x32xf32, #blocked1> loc(#loc37)
    %73 = arith.subf %71, %30 : tensor<1x32xf32, #blocked> loc(#loc37)
    %74 = arith.mulf %12, %72 : tensor<1x32xf32, #blocked1> loc(#loc38)
    %75 = arith.mulf %13, %73 : tensor<1x32xf32, #blocked> loc(#loc38)
    %76 = arith.mulf %74, %74 : tensor<1x32xf32, #blocked1> loc(#loc39)
    %77 = arith.mulf %75, %75 : tensor<1x32xf32, #blocked> loc(#loc39)
    %78 = tt.broadcast %36 : tensor<1x1xf32, #blocked1> -> tensor<1x32xf32, #blocked1> loc(#loc40)
    %79 = tt.broadcast %37 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc40)
    %80 = arith.subf %78, %42 : tensor<1x32xf32, #blocked1> loc(#loc40)
    %81 = arith.subf %79, %43 : tensor<1x32xf32, #blocked> loc(#loc40)
    %82 = arith.mulf %12, %80 : tensor<1x32xf32, #blocked1> loc(#loc41)
    %83 = arith.mulf %13, %81 : tensor<1x32xf32, #blocked> loc(#loc41)
    %84 = arith.mulf %82, %82 : tensor<1x32xf32, #blocked1> loc(#loc42)
    %85 = arith.mulf %83, %83 : tensor<1x32xf32, #blocked> loc(#loc42)
    %86 = arith.addf %76, %84 : tensor<1x32xf32, #blocked1> loc(#loc43)
    %87 = arith.addf %77, %85 : tensor<1x32xf32, #blocked> loc(#loc43)
    %88 = tt.broadcast %49 : tensor<1x1xf32, #blocked1> -> tensor<1x32xf32, #blocked1> loc(#loc44)
    %89 = tt.broadcast %50 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc44)
    %90 = arith.subf %88, %55 : tensor<1x32xf32, #blocked1> loc(#loc44)
    %91 = arith.subf %89, %56 : tensor<1x32xf32, #blocked> loc(#loc44)
    %92 = arith.mulf %12, %90 : tensor<1x32xf32, #blocked1> loc(#loc45)
    %93 = arith.mulf %13, %91 : tensor<1x32xf32, #blocked> loc(#loc45)
    %94 = arith.mulf %92, %92 : tensor<1x32xf32, #blocked1> loc(#loc46)
    %95 = arith.mulf %93, %93 : tensor<1x32xf32, #blocked> loc(#loc46)
    %96 = arith.addf %86, %94 : tensor<1x32xf32, #blocked1> loc(#loc47)
    %97 = arith.addf %87, %95 : tensor<1x32xf32, #blocked> loc(#loc47)
    %98 = tt.broadcast %62 : tensor<1x1xf32, #blocked1> -> tensor<1x32xf32, #blocked1> loc(#loc48)
    %99 = tt.broadcast %63 : tensor<1x1xf32, #blocked> -> tensor<1x32xf32, #blocked> loc(#loc48)
    %100 = arith.subf %98, %68 : tensor<1x32xf32, #blocked1> loc(#loc48)
    %101 = arith.subf %99, %69 : tensor<1x32xf32, #blocked> loc(#loc48)
    %102 = arith.mulf %12, %100 : tensor<1x32xf32, #blocked1> loc(#loc49)
    %103 = arith.mulf %13, %101 : tensor<1x32xf32, #blocked> loc(#loc49)
    %104 = arith.mulf %102, %102 : tensor<1x32xf32, #blocked1> loc(#loc50)
    %105 = arith.mulf %103, %103 : tensor<1x32xf32, #blocked> loc(#loc50)
    %106 = arith.addf %96, %104 : tensor<1x32xf32, #blocked1> loc(#loc51)
    %107 = arith.addf %97, %105 : tensor<1x32xf32, #blocked> loc(#loc51)
    %108 = tt.splat %1 : i1 -> tensor<1x32xi1, #blocked1> loc(#loc52)
    %109 = tt.splat %1 : i1 -> tensor<1x32xi1, #blocked> loc(#loc52)
    %110 = arith.select %108, %106, %cst_4 : tensor<1x32xi1, #blocked1>, tensor<1x32xf32, #blocked1> loc(#loc52)
    %111 = "tt.reduce"(%110) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc54)), %arg9: f32 loc(callsite(#loc1 at #loc54))):
      %128 = arith.cmpf ogt, %arg8, %arg9 : f32 loc(#loc85)
      %129 = arith.cmpf une, %arg8, %arg8 : f32 loc(#loc86)
      %130 = arith.ori %128, %129 : i1 loc(#loc87)
      %131 = arith.select %130, %arg8, %arg9 : f32 loc(#loc88)
      tt.reduce.return %131 : f32 loc(#loc76)
    }) : (tensor<1x32xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc76)
    %112 = tt.expand_dims %111 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc59)
    %113 = tt.broadcast %112 : tensor<1x1xf32, #blocked1> -> tensor<1x32xf32, #blocked1> loc(#loc60)
    %114 = arith.subf %106, %113 : tensor<1x32xf32, #blocked1> loc(#loc60)
    %115 = math.exp %114 : tensor<1x32xf32, #blocked1> loc(#loc61)
    %116 = arith.select %108, %115, %cst_3 : tensor<1x32xi1, #blocked1>, tensor<1x32xf32, #blocked1> loc(#loc62)
    %117 = "tt.reduce"(%116) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc64)), %arg9: f32 loc(callsite(#loc1 at #loc64))):
      %128 = arith.addf %arg8, %arg9 : f32 loc(#loc89)
      tt.reduce.return %128 : f32 loc(#loc82)
    }) : (tensor<1x32xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc82)
    %118 = tt.expand_dims %117 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc66)
    %119 = arith.muli %0, %c32_i32 : i32 loc(#loc67)
    %120 = tt.splat %119 : i32 -> tensor<1x32xi32, #blocked> loc(#loc68)
    %121 = arith.addi %5, %120 : tensor<1x32xi32, #blocked> loc(#loc68)
    %122 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc69)
    %123 = tt.addptr %122, %121 : tensor<1x32x!tt.ptr<f32>, #blocked>, tensor<1x32xi32, #blocked> loc(#loc69)
    tt.store %123, %107, %109 : tensor<1x32x!tt.ptr<f32>, #blocked> loc(#loc70)
    %124 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc71)
    %125 = tt.splat %124 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc72)
    tt.store %125, %112, %19 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc72)
    %126 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc73)
    %127 = tt.splat %126 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc74)
    tt.store %127, %118, %19 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc74)
    tt.return loc(#loc75)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":23:28)
#loc3 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":25:21)
#loc4 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":26:34)
#loc5 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":30:19)
#loc6 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":31:19)
#loc7 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":33:30)
#loc8 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":33:35)
#loc9 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:38)
#loc10 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:35)
#loc11 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:30)
#loc12 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":34:43)
#loc13 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:32)
#loc14 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:30)
#loc15 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":35:37)
#loc16 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:35)
#loc17 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:40)
#loc18 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:30)
#loc19 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":36:48)
#loc20 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:34)
#loc21 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:30)
#loc22 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":37:41)
#loc23 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:36)
#loc24 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:41)
#loc25 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:31)
#loc26 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":38:49)
#loc27 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:35)
#loc28 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:31)
#loc29 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":39:42)
#loc30 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:36)
#loc31 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:41)
#loc32 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:31)
#loc33 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":40:49)
#loc34 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:35)
#loc35 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:31)
#loc36 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":41:42)
#loc37 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":42:18)
#loc38 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":43:18)
#loc39 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":44:18)
#loc40 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":45:18)
#loc41 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":46:18)
#loc42 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":47:19)
#loc43 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":48:19)
#loc44 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":49:20)
#loc45 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":50:19)
#loc46 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":51:20)
#loc47 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":52:20)
#loc48 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":53:20)
#loc49 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":54:19)
#loc50 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":55:20)
#loc51 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":56:20)
#loc52 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":58:35)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc59 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":59:42)
#loc60 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":60:20)
#loc61 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":61:24)
#loc62 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":63:35)
#loc63 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc66 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":64:29)
#loc67 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:33)
#loc68 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:30)
#loc69 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:25)
#loc70 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":65:45)
#loc71 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":66:25)
#loc72 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":66:37)
#loc73 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:25)
#loc74 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:37)
#loc75 = loc("inductor_cache/x6/cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py":67:4)
#loc76 = loc(callsite(#loc53 at #loc54))
#loc78 = loc(callsite(#loc55 at #loc53))
#loc79 = loc(callsite(#loc56 at #loc53))
#loc80 = loc(callsite(#loc57 at #loc53))
#loc81 = loc(callsite(#loc58 at #loc53))
#loc82 = loc(callsite(#loc63 at #loc64))
#loc84 = loc(callsite(#loc65 at #loc63))
#loc85 = loc(callsite(#loc78 at #loc54))
#loc86 = loc(callsite(#loc79 at #loc54))
#loc87 = loc(callsite(#loc80 at #loc54))
#loc88 = loc(callsite(#loc81 at #loc54))
#loc89 = loc(callsite(#loc84 at #loc64))
