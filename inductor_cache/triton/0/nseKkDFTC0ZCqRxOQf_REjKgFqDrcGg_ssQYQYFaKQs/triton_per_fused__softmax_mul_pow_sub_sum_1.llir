; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_mul_pow_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %10 = icmp slt i32 %9, 64, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %13 = sdiv i32 %.frozen, 16, !dbg !13
  %14 = mul i32 %13, 16, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = zext nneg i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #2, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #2, !dbg !16
  %19 = shl i32 %13, 6, !dbg !17
  %20 = add i32 %19, %.decomposed, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %10) #2, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %10) #2, !dbg !20
  %25 = shl nuw nsw i32 %12, 2, !dbg !21
  %26 = zext nneg i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !23
  %30 = add i32 %20, 16, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %10) #2, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %10) #2, !dbg !26
  %35 = or disjoint i32 %25, 1, !dbg !27
  %36 = zext nneg i32 %35 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !29
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !29
  %40 = add i32 %20, 32, !dbg !30
  %41 = sext i32 %40 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %10) #2, !dbg !32
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %10) #2, !dbg !32
  %45 = or disjoint i32 %25, 2, !dbg !33
  %46 = zext nneg i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !35
  %50 = add i32 %20, 48, !dbg !36
  %51 = sext i32 %50 to i64, !dbg !37
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !37
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %10) #2, !dbg !38
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %10) #2, !dbg !38
  %55 = or disjoint i32 %25, 3, !dbg !39
  %56 = zext nneg i32 %55 to i64, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !40
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !41
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !41
  %60 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !20
  %61 = insertelement <2 x i32> %60, i32 %33, i64 1, !dbg !20
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !20
  %63 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !23
  %64 = insertelement <2 x i32> %63, i32 %38, i64 1, !dbg !23
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !23
  %66 = fsub <2 x float> %62, %65, !dbg !42
  %67 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !43
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !43
  %69 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %70 = fmul <2 x float> %66, %69, !dbg !43
  %71 = fmul <2 x float> %70, %70, !dbg !44
  %72 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !20
  %73 = insertelement <2 x i32> %72, i32 %34, i64 1, !dbg !20
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !20
  %75 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !23
  %76 = insertelement <2 x i32> %75, i32 %39, i64 1, !dbg !23
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !23
  %78 = fsub <2 x float> %74, %77, !dbg !42
  %79 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !43
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !43
  %81 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !43
  %82 = fmul <2 x float> %78, %81, !dbg !43
  %83 = fmul <2 x float> %82, %82, !dbg !44
  %shift = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %84 = fadd <2 x float> %71, %shift, !dbg !45
  %shift1 = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !45
  %85 = fadd <2 x float> %83, %shift1, !dbg !45
  %86 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !32
  %87 = insertelement <2 x i32> %86, i32 %53, i64 1, !dbg !32
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !32
  %89 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !35
  %90 = insertelement <2 x i32> %89, i32 %58, i64 1, !dbg !35
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !35
  %92 = fsub <2 x float> %88, %91, !dbg !46
  %93 = fmul <2 x float> %92, %69, !dbg !47
  %94 = fmul <2 x float> %93, %93, !dbg !48
  %95 = fadd <2 x float> %84, %94, !dbg !49
  %96 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !32
  %97 = insertelement <2 x i32> %96, i32 %54, i64 1, !dbg !32
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !32
  %99 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !35
  %100 = insertelement <2 x i32> %99, i32 %59, i64 1, !dbg !35
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !35
  %102 = fsub <2 x float> %98, %101, !dbg !46
  %103 = fmul <2 x float> %102, %81, !dbg !47
  %104 = fmul <2 x float> %103, %103, !dbg !48
  %105 = fadd <2 x float> %85, %104, !dbg !49
  %shift2 = shufflevector <2 x float> %94, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %106 = fadd <2 x float> %95, %shift2, !dbg !50
  %107 = extractelement <2 x float> %106, i64 0, !dbg !50
  %shift3 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !50
  %108 = fadd <2 x float> %105, %shift3, !dbg !50
  %109 = select i1 %10, float %107, float 0xFFF0000000000000, !dbg !51
  %110 = bitcast float %109 to i32, !dbg !52
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !52
  %112 = bitcast i32 %111 to float, !dbg !52
  %113 = fcmp ogt float %109, %112, !dbg !56
  %114 = fcmp uno float %109, 0.000000e+00, !dbg !58
  %115 = or i1 %113, %114, !dbg !59
  %116 = select i1 %115, float %109, float %112, !dbg !60
  %117 = bitcast float %116 to i32, !dbg !52
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !52
  %119 = bitcast i32 %118 to float, !dbg !52
  %120 = fcmp ogt float %116, %119, !dbg !56
  %121 = fcmp uno float %116, 0.000000e+00, !dbg !58
  %122 = or i1 %120, %121, !dbg !59
  %123 = select i1 %122, float %116, float %119, !dbg !60
  %124 = bitcast float %123 to i32, !dbg !52
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !52
  %126 = bitcast i32 %125 to float, !dbg !52
  %127 = fcmp ogt float %123, %126, !dbg !56
  %128 = fcmp uno float %123, 0.000000e+00, !dbg !58
  %129 = or i1 %127, %128, !dbg !59
  %130 = select i1 %129, float %123, float %126, !dbg !60
  %131 = bitcast float %130 to i32, !dbg !52
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !52
  %133 = bitcast i32 %132 to float, !dbg !52
  %134 = fcmp ogt float %130, %133, !dbg !56
  %135 = fcmp uno float %130, 0.000000e+00, !dbg !58
  %136 = or i1 %134, %135, !dbg !59
  %137 = select i1 %136, float %130, float %133, !dbg !60
  %138 = bitcast float %137 to i32, !dbg !52
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !52
  %140 = bitcast i32 %139 to float, !dbg !52
  %141 = fcmp ogt float %137, %140, !dbg !56
  %142 = fcmp uno float %137, 0.000000e+00, !dbg !58
  %143 = or i1 %141, %142, !dbg !59
  %144 = select i1 %143, float %137, float %140, !dbg !60
  %145 = fsub float %107, %144, !dbg !61
  %146 = fmul float %145, 0x3FF7154760000000, !dbg !62
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #2, !dbg !62
  %148 = select i1 %10, float %147, float 0.000000e+00, !dbg !63
  %149 = bitcast float %148 to i32, !dbg !64
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 16, i32 31), !dbg !64
  %151 = bitcast i32 %150 to float, !dbg !64
  %152 = fadd float %148, %151, !dbg !68
  %153 = bitcast float %152 to i32, !dbg !64
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 8, i32 31), !dbg !64
  %155 = bitcast i32 %154 to float, !dbg !64
  %156 = fadd float %152, %155, !dbg !68
  %157 = bitcast float %156 to i32, !dbg !64
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 4, i32 31), !dbg !64
  %159 = bitcast i32 %158 to float, !dbg !64
  %160 = fadd float %156, %159, !dbg !68
  %161 = bitcast float %160 to i32, !dbg !64
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 2, i32 31), !dbg !64
  %163 = bitcast i32 %162 to float, !dbg !64
  %164 = fadd float %160, %163, !dbg !68
  %165 = bitcast float %164 to i32, !dbg !64
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 1, i32 31), !dbg !64
  %167 = bitcast i32 %166 to float, !dbg !64
  %168 = fadd float %164, %167, !dbg !68
  %169 = shl i32 %9, 5, !dbg !70
  %170 = or disjoint i32 %169, %12, !dbg !71
  %171 = sext i32 %170 to i64, !dbg !72
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %171, !dbg !72
  %173 = and i32 %11, 32, !dbg !73
  %174 = icmp eq i32 %173, 0, !dbg !73
  %bc = bitcast <2 x float> %108 to <2 x i32>, !dbg !73
  %175 = extractelement <2 x i32> %bc, i64 0, !dbg !73
  %176 = and i1 %174, %10, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %175, ptr addrspace(1) %172, i1 %176) #2, !dbg !73
  %177 = sext i32 %9 to i64, !dbg !74
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %177, !dbg !74
  %urem = and i32 %11, 63, !dbg !75
  %179 = icmp eq i32 %urem, 0, !dbg !75
  %180 = bitcast float %144 to i32, !dbg !75
  %181 = and i1 %179, %10, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %178, i1 %181) #2, !dbg !75
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !76
  %183 = bitcast float %168 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %182, i1 %181) #2, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx6gtck5e6uith5muxcddw65o3ty4zqm6q5rz7pv7thaowhkrwrk.py", directory: "inductor_cache/x6")
!4 = !{ptr @triton_per_fused__softmax_mul_pow_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_mul_pow_sub_sum_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_mul_pow_sub_sum_1", linkageName: "triton_per_fused__softmax_mul_pow_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 34, column: 38, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 43, scope: !7)
!21 = !DILocation(line: 35, column: 32, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 37, scope: !7)
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 48, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 41, scope: !7)
!30 = !DILocation(line: 38, column: 41, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 49, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 42, scope: !7)
!36 = !DILocation(line: 40, column: 41, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 41, column: 35, scope: !7)
!40 = !DILocation(line: 41, column: 31, scope: !7)
!41 = !DILocation(line: 41, column: 42, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 48, column: 19, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 50, column: 19, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 35, scope: !7)
!52 = !DILocation(line: 131, column: 29, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 59, column: 39, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !55)
!57 = distinct !DILexicalBlockFile(scope: !53, file: !54, discriminator: 0)
!58 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !55)
!59 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !55)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !55)
!61 = !DILocation(line: 60, column: 20, scope: !7)
!62 = !DILocation(line: 61, column: 24, scope: !7)
!63 = !DILocation(line: 63, column: 35, scope: !7)
!64 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!67 = !DILocation(line: 64, column: 26, scope: !7)
!68 = !DILocation(line: 256, column: 15, scope: !69, inlinedAt: !67)
!69 = distinct !DILexicalBlockFile(scope: !65, file: !66, discriminator: 0)
!70 = !DILocation(line: 65, column: 33, scope: !7)
!71 = !DILocation(line: 65, column: 30, scope: !7)
!72 = !DILocation(line: 65, column: 25, scope: !7)
!73 = !DILocation(line: 65, column: 45, scope: !7)
!74 = !DILocation(line: 66, column: 25, scope: !7)
!75 = !DILocation(line: 66, column: 37, scope: !7)
!76 = !DILocation(line: 67, column: 25, scope: !7)
!77 = !DILocation(line: 67, column: 37, scope: !7)
!78 = !DILocation(line: 67, column: 4, scope: !7)
