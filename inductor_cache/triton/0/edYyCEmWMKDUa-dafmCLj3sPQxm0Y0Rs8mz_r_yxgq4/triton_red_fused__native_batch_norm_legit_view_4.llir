; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_view_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
.peel.next:
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 3, !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 12, !dbg !14
  %11 = shl i32 %6, 2, !dbg !15
  %12 = and i32 %11, 28, !dbg !15
  %13 = lshr i32 %6, 4, !dbg !15
  %14 = and i32 %13, 7, !dbg !15
  %15 = shl i32 %9, 12, !dbg !16
  %16 = or disjoint i32 %15, %12
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %20 = select i1 %10, float 1.000000e+00, float 0.000000e+00, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %25 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !18
  %26 = insertelement <4 x i32> %25, i32 %22, i64 1, !dbg !18
  %27 = insertelement <4 x i32> %26, i32 %23, i64 2, !dbg !18
  %28 = insertelement <4 x i32> %27, i32 %24, i64 3, !dbg !18
  %29 = bitcast <4 x i32> %28 to <4 x float>, !dbg !18
  %30 = insertelement <4 x i1> poison, i1 %10, i64 0, !dbg !20
  %31 = shufflevector <4 x i1> %30, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  %32 = select <4 x i1> %31, <4 x float> %29, <4 x float> zeroinitializer, !dbg !20
  br label %33, !dbg !21

33:                                               ; preds = %.peel.next, %33
  %.pn63 = phi float [ %20, %.peel.next ], [ %73, %33 ]
  %.pn61 = phi float [ %20, %.peel.next ], [ %74, %33 ]
  %.pn59 = phi float [ %20, %.peel.next ], [ %75, %33 ]
  %.pn57 = phi float [ %20, %.peel.next ], [ %76, %33 ]
  %34 = phi i32 [ 32, %.peel.next ], [ %77, %33 ]
  %35 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %72, %33 ]
  %36 = phi <4 x float> [ %32, %.peel.next ], [ %71, %33 ]
  %37 = or i32 %16, %34, !dbg !22
  %38 = sext i32 %37 to i64, !dbg !17
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !17
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !18
  %42 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !18
  %43 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !18
  %44 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !18
  %45 = fadd float %.pn63, 1.000000e+00, !dbg !23
  %46 = fadd float %.pn61, 1.000000e+00, !dbg !23
  %47 = fadd float %.pn59, 1.000000e+00, !dbg !23
  %48 = fadd float %.pn57, 1.000000e+00, !dbg !23
  %49 = insertelement <4 x i32> poison, i32 %44, i64 0, !dbg !18
  %50 = insertelement <4 x i32> %49, i32 %43, i64 1, !dbg !18
  %51 = insertelement <4 x i32> %50, i32 %42, i64 2, !dbg !18
  %52 = insertelement <4 x i32> %51, i32 %41, i64 3, !dbg !18
  %53 = bitcast <4 x i32> %52 to <4 x float>, !dbg !18
  %54 = fsub <4 x float> %53, %36, !dbg !27
  %55 = extractelement <4 x float> %54, i64 0, !dbg !28
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %45) #5, !dbg !28
  %57 = extractelement <4 x float> %54, i64 1, !dbg !28
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %46) #5, !dbg !28
  %59 = extractelement <4 x float> %54, i64 2, !dbg !28
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float %47) #5, !dbg !28
  %61 = extractelement <4 x float> %54, i64 3, !dbg !28
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %48) #5, !dbg !28
  %63 = insertelement <4 x float> poison, float %56, i64 0, !dbg !29
  %64 = insertelement <4 x float> %63, float %58, i64 1, !dbg !29
  %65 = insertelement <4 x float> %64, float %60, i64 2, !dbg !29
  %66 = insertelement <4 x float> %65, float %62, i64 3, !dbg !29
  %67 = fadd <4 x float> %36, %66, !dbg !29
  %68 = fsub <4 x float> %53, %67, !dbg !30
  %69 = fmul <4 x float> %54, %68, !dbg !31
  %70 = fadd <4 x float> %35, %69, !dbg !32
  %71 = select <4 x i1> %31, <4 x float> %67, <4 x float> %36, !dbg !20
  %72 = select <4 x i1> %31, <4 x float> %70, <4 x float> %35, !dbg !33
  %73 = select i1 %10, float %45, float %.pn63, !dbg !19
  %74 = select i1 %10, float %46, float %.pn61, !dbg !19
  %75 = select i1 %10, float %47, float %.pn59, !dbg !19
  %76 = select i1 %10, float %48, float %.pn57, !dbg !19
  %77 = add nuw nsw i32 %34, 32, !dbg !21
  %78 = icmp samesign ult i32 %34, 4064, !dbg !21
  br i1 %78, label %33, label %__nv_rsqrtf.exit, !dbg !21, !llvm.loop !34

__nv_rsqrtf.exit:                                 ; preds = %33
  %79 = and i32 %6, 15, !dbg !12
  %80 = or disjoint i32 %5, %79, !dbg !13
  %81 = icmp slt i32 %80, 12, !dbg !14
  %82 = extractelement <4 x float> %71, i64 0, !dbg !36
  %83 = extractelement <4 x float> %71, i64 1, !dbg !36
  %84 = fsub float %83, %82, !dbg !36
  %85 = fadd float %73, %74, !dbg !39
  %86 = fcmp oeq float %85, 0.000000e+00, !dbg !40
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %85) #5, !dbg !41
  %88 = select i1 %86, float 0.000000e+00, float %87, !dbg !42
  %89 = fmul float %84, %88, !dbg !43
  %90 = fadd float %82, %89, !dbg !44
  %shift = shufflevector <4 x float> %72, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !45
  %91 = fadd <4 x float> %72, %shift, !dbg !45
  %92 = extractelement <4 x float> %91, i64 0, !dbg !45
  %93 = fmul float %84, %84, !dbg !46
  %94 = fmul float %93, %73, !dbg !47
  %95 = fmul float %94, %88, !dbg !48
  %96 = fadd float %92, %95, !dbg !49
  %97 = extractelement <4 x float> %71, i64 2, !dbg !36
  %98 = fsub float %97, %90, !dbg !36
  %99 = fadd float %75, %85, !dbg !39
  %100 = fcmp oeq float %99, 0.000000e+00, !dbg !40
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %99) #5, !dbg !41
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !42
  %103 = fmul float %102, %98, !dbg !43
  %104 = fadd float %90, %103, !dbg !44
  %105 = extractelement <4 x float> %72, i64 2, !dbg !45
  %106 = fadd float %105, %96, !dbg !45
  %107 = fmul float %98, %98, !dbg !46
  %108 = fmul float %85, %107, !dbg !47
  %109 = fmul float %102, %108, !dbg !48
  %110 = fadd float %106, %109, !dbg !49
  %111 = extractelement <4 x float> %71, i64 3, !dbg !36
  %112 = fsub float %111, %104, !dbg !36
  %113 = fadd float %76, %99, !dbg !39
  %114 = fcmp oeq float %113, 0.000000e+00, !dbg !40
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %113) #5, !dbg !41
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !42
  %117 = fmul float %116, %112, !dbg !43
  %118 = fadd float %104, %117, !dbg !44
  %119 = extractelement <4 x float> %72, i64 3, !dbg !45
  %120 = fadd float %119, %110, !dbg !45
  %121 = fmul float %112, %112, !dbg !46
  %122 = fmul float %99, %121, !dbg !47
  %123 = fmul float %116, %122, !dbg !48
  %124 = fadd float %120, %123, !dbg !49
  %125 = bitcast float %118 to i32, !dbg !50
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !50
  %127 = bitcast i32 %126 to float, !dbg !50
  %128 = bitcast float %124 to i32, !dbg !50
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !50
  %130 = bitcast i32 %129 to float, !dbg !50
  %131 = bitcast float %113 to i32, !dbg !50
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !50
  %133 = bitcast i32 %132 to float, !dbg !50
  %134 = fsub float %127, %118, !dbg !36
  %135 = fadd float %113, %133, !dbg !39
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !40
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %135) #5, !dbg !41
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !42
  %139 = fmul float %138, %134, !dbg !43
  %140 = fadd float %118, %139, !dbg !44
  %141 = fadd float %124, %130, !dbg !45
  %142 = fmul float %134, %134, !dbg !46
  %143 = fmul float %113, %142, !dbg !47
  %144 = fmul float %138, %143, !dbg !48
  %145 = fadd float %141, %144, !dbg !49
  %146 = bitcast float %140 to i32, !dbg !50
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 2, i32 31), !dbg !50
  %148 = bitcast i32 %147 to float, !dbg !50
  %149 = bitcast float %145 to i32, !dbg !50
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 2, i32 31), !dbg !50
  %151 = bitcast i32 %150 to float, !dbg !50
  %152 = bitcast float %135 to i32, !dbg !50
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !50
  %154 = bitcast i32 %153 to float, !dbg !50
  %155 = fsub float %148, %140, !dbg !36
  %156 = fadd float %135, %154, !dbg !39
  %157 = fcmp oeq float %156, 0.000000e+00, !dbg !40
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %156) #5, !dbg !41
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !42
  %160 = fmul float %155, %159, !dbg !43
  %161 = fadd float %140, %160, !dbg !44
  %162 = fadd float %145, %151, !dbg !45
  %163 = fmul float %155, %155, !dbg !46
  %164 = fmul float %135, %163, !dbg !47
  %165 = fmul float %159, %164, !dbg !48
  %166 = fadd float %162, %165, !dbg !49
  %167 = bitcast float %161 to i32, !dbg !50
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !50
  %169 = bitcast i32 %168 to float, !dbg !50
  %170 = bitcast float %166 to i32, !dbg !50
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !50
  %172 = bitcast i32 %171 to float, !dbg !50
  %173 = bitcast float %156 to i32, !dbg !50
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 1, i32 31), !dbg !50
  %175 = bitcast i32 %174 to float, !dbg !50
  %176 = fsub float %169, %161, !dbg !36
  %177 = fadd float %156, %175, !dbg !39
  %178 = fcmp oeq float %177, 0.000000e+00, !dbg !40
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %177) #5, !dbg !41
  %180 = select i1 %178, float 0.000000e+00, float %179, !dbg !42
  %181 = fmul float %176, %180, !dbg !43
  %182 = fadd float %161, %181, !dbg !44
  %183 = fadd float %166, %172, !dbg !45
  %184 = fmul float %176, %176, !dbg !46
  %185 = fmul float %156, %184, !dbg !47
  %186 = fmul float %180, %185, !dbg !48
  %187 = fadd float %183, %186, !dbg !49
  %.frozen = freeze i32 %80, !dbg !51
  %188 = sdiv i32 %.frozen, 3, !dbg !51
  %189 = mul i32 %188, 3, !dbg !52
  %.decomposed = sub i32 %.frozen, %189, !dbg !52
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float 4.096000e+03) #5, !dbg !53
  %191 = fadd float %190, 0.000000e+00, !dbg !54
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !55
  %.not.i18 = icmp eq i32 %195, 0, !dbg !55
  br i1 %.not.i18, label %198, label %196, !dbg !55

196:                                              ; preds = %__nv_rsqrtf.exit
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %191), !dbg !55
  br label %__nv_rsqrtf.exit20, !dbg !55

198:                                              ; preds = %__nv_rsqrtf.exit
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %191), !dbg !55
  br label %__nv_rsqrtf.exit20, !dbg !55

__nv_rsqrtf.exit20:                               ; preds = %196, %198
  %.0.i19 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !55
  %200 = mul i32 %188, 12288, !dbg !56
  %201 = add i32 %200, %.decomposed
  %202 = shl i32 %6, 6
  %203 = and i32 %202, 448
  %204 = or disjoint i32 %203, %8
  %205 = and i32 %6, 127
  %206 = lshr exact i32 %203, 2
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %206
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204
  %209 = or disjoint i32 %204, 16
  %210 = lshr i32 %209, 4
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %209
  %213 = or disjoint i32 %204, 32
  %214 = lshr i32 %213, 4
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213
  %217 = or disjoint i32 %204, 48
  %218 = lshr i32 %217, 4
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217
  %221 = lshr i32 %205, 4
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %205
  %224 = or disjoint i32 %205, 128
  %225 = lshr i32 %224, 4
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %224
  %228 = or disjoint i32 %205, 256
  %229 = lshr i32 %228, 4
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %228
  %232 = or disjoint i32 %205, 384
  %233 = lshr i32 %232, 4
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232
  %invariant.op = add i32 %201, 24, !dbg !57
  %invariant.op83 = add i32 %201, 48, !dbg !57
  %invariant.op85 = add i32 %201, 72, !dbg !57
  br label %236, !dbg !57

236:                                              ; preds = %__nv_rsqrtf.exit20, %236
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit20 ], [ %indvars.iv.next, %236 ]
  %237 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !58
  %238 = or i32 %16, %237, !dbg !58
  %239 = sext i32 %238 to i64, !dbg !59
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !59
  %241 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !60
  %242 = extractvalue { i32, i32, i32, i32 } %241, 0, !dbg !60
  %243 = extractvalue { i32, i32, i32, i32 } %241, 1, !dbg !60
  %244 = extractvalue { i32, i32, i32, i32 } %241, 2, !dbg !60
  %245 = extractvalue { i32, i32, i32, i32 } %241, 3, !dbg !60
  %246 = bitcast i32 %242 to float, !dbg !60
  %247 = bitcast i32 %243 to float, !dbg !60
  %248 = bitcast i32 %244 to float, !dbg !60
  %249 = bitcast i32 %245 to float, !dbg !60
  %250 = fsub float %246, %182, !dbg !61
  %251 = fsub float %247, %182, !dbg !61
  %252 = fsub float %248, %182, !dbg !61
  %253 = fsub float %249, %182, !dbg !61
  %254 = fmul float %.0.i19, %250, !dbg !62
  %255 = fmul float %.0.i19, %251, !dbg !62
  %256 = fmul float %.0.i19, %252, !dbg !62
  %257 = fmul float %.0.i19, %253, !dbg !62
  %258 = trunc i64 %indvars.iv to i32, !dbg !63
  %259 = or disjoint i32 %14, %258, !dbg !63
  %260 = mul i32 %259, 3, !dbg !63
  %261 = add i32 %201, %260, !dbg !63
  %262 = trunc i64 %indvars.iv to i32, !dbg !63
  %263 = or disjoint i32 %14, %262, !dbg !63
  %264 = mul i32 %263, 3, !dbg !63
  %.reass = add i32 %264, %invariant.op
  %265 = trunc i64 %indvars.iv to i32, !dbg !63
  %266 = or disjoint i32 %14, %265, !dbg !63
  %267 = mul i32 %266, 3, !dbg !63
  %.reass84 = add i32 %267, %invariant.op83
  %268 = trunc i64 %indvars.iv to i32, !dbg !63
  %269 = or disjoint i32 %14, %268, !dbg !63
  %270 = mul i32 %269, 3, !dbg !63
  %.reass86 = add i32 %270, %invariant.op85
  %271 = sext i32 %261 to i64, !dbg !64
  %272 = getelementptr float, ptr addrspace(1) %1, i64 %271, !dbg !64
  %273 = sext i32 %.reass to i64, !dbg !64
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %273, !dbg !64
  %275 = sext i32 %.reass84 to i64, !dbg !64
  %276 = getelementptr float, ptr addrspace(1) %1, i64 %275, !dbg !64
  %277 = sext i32 %.reass86 to i64, !dbg !64
  %278 = getelementptr float, ptr addrspace(1) %1, i64 %277, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %279 = bitcast float %254 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %279, i1 true) #5, !dbg !65
  %280 = bitcast float %255 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %280, i1 true) #5, !dbg !65
  %281 = bitcast float %256 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %281, i1 true) #5, !dbg !65
  %282 = bitcast float %257 to <1 x i32>, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %282, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %283 = load i32, ptr addrspace(3) %223, align 4, !dbg !65
  %284 = load i32, ptr addrspace(3) %227, align 4, !dbg !65
  %285 = load i32, ptr addrspace(3) %231, align 4, !dbg !65
  %286 = load i32, ptr addrspace(3) %235, align 4, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %283, ptr addrspace(1) %272, i1 %81) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %284, ptr addrspace(1) %274, i1 %81) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %285, ptr addrspace(1) %276, i1 %81) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %278, i1 %81) #5, !dbg !65
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 32, !dbg !57
  %287 = icmp samesign ult i64 %indvars.iv, 4064, !dbg !57
  br i1 %287, label %236, label %288, !dbg !57

288:                                              ; preds = %236
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_view_4", linkageName: "triton_red_fused__native_batch_norm_legit_view_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 34, column: 44, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 49, scope: !7)
!19 = !DILocation(line: 41, column: 64, scope: !7)
!20 = !DILocation(line: 39, column: 60, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 34, column: 39, scope: !7)
!23 = !DILocation(line: 184, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 37, column: 51, scope: !7)
!27 = !DILocation(line: 183, column: 24, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 185, column: 34, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 185, column: 26, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 186, column: 39, scope: !24, inlinedAt: !26)
!31 = !DILocation(line: 186, column: 31, scope: !24, inlinedAt: !26)
!32 = !DILocation(line: 186, column: 22, scope: !24, inlinedAt: !26)
!33 = !DILocation(line: 40, column: 56, scope: !7)
!34 = distinct !{!34, !35}
!35 = !{!"llvm.loop.peeled.count", i32 1}
!36 = !DILocation(line: 192, column: 21, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!38 = !DILocation(line: 43, column: 41, scope: !7)
!39 = !DILocation(line: 193, column: 28, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 194, column: 39, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 194, column: 60, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 194, column: 49, scope: !37, inlinedAt: !38)
!43 = !DILocation(line: 196, column: 25, scope: !37, inlinedAt: !38)
!44 = !DILocation(line: 196, column: 17, scope: !37, inlinedAt: !38)
!45 = !DILocation(line: 197, column: 15, scope: !37, inlinedAt: !38)
!46 = !DILocation(line: 197, column: 30, scope: !37, inlinedAt: !38)
!47 = !DILocation(line: 197, column: 38, scope: !37, inlinedAt: !38)
!48 = !DILocation(line: 197, column: 49, scope: !37, inlinedAt: !38)
!49 = !DILocation(line: 197, column: 22, scope: !37, inlinedAt: !38)
!50 = !DILocation(line: 204, column: 46, scope: !24, inlinedAt: !38)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 48, column: 19, scope: !7)
!53 = !DILocation(line: 57, column: 22, scope: !7)
!54 = !DILocation(line: 59, column: 23, scope: !7)
!55 = !DILocation(line: 60, column: 32, scope: !7)
!56 = !DILocation(line: 62, column: 47, scope: !7)
!57 = !DILocation(line: 50, column: 36, scope: !7)
!58 = !DILocation(line: 54, column: 39, scope: !7)
!59 = !DILocation(line: 54, column: 34, scope: !7)
!60 = !DILocation(line: 54, column: 49, scope: !7)
!61 = !DILocation(line: 55, column: 22, scope: !7)
!62 = !DILocation(line: 61, column: 23, scope: !7)
!63 = !DILocation(line: 62, column: 41, scope: !7)
!64 = !DILocation(line: 62, column: 29, scope: !7)
!65 = !DILocation(line: 62, column: 59, scope: !7)
!66 = !DILocation(line: 50, column: 4, scope: !7)
