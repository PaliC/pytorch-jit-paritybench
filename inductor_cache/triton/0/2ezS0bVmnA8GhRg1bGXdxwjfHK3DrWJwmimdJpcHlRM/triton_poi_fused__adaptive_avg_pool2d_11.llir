; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__adaptive_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = and i32 %7, 15, !dbg !16
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = or disjoint i32 %17, %9, !dbg !17
  %21 = or disjoint i32 %17, %10, !dbg !17
  %22 = icmp slt i32 %19, 9, !dbg !18
  %23 = icmp slt i32 %20, 9, !dbg !18
  %24 = icmp slt i32 %21, 9, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %25 = sdiv i32 %.frozen, 3, !dbg !19
  %26 = mul i32 %25, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %.frozen16 = freeze i32 %15, !dbg !21
  %27 = sdiv i32 %.frozen16, 2048, !dbg !21
  %28 = mul i32 %27, 2048, !dbg !22
  %.decomposed17 = sub i32 %.frozen16, %28, !dbg !22
  %29 = shl i32 %25, 2, !dbg !23
  %30 = sdiv i32 %29, 3, !dbg !24
  %.tr = trunc nsw i32 %.decomposed to i8, !dbg !25
  %.lhs.trunc = shl nsw i8 %.tr, 2, !dbg !25
  %31 = sdiv i8 %.lhs.trunc, 3, !dbg !25
  %.sext = sext i8 %31 to i32, !dbg !25
  %32 = shl i32 %30, 2, !dbg !26
  %33 = shl i32 %13, 4, !dbg !27
  %34 = shl i32 %14, 4, !dbg !27
  %35 = or disjoint i32 %33, 256, !dbg !27
  %36 = or disjoint i32 %33, 384, !dbg !27
  %37 = or disjoint i32 %33, 512, !dbg !27
  %38 = or disjoint i32 %33, 640, !dbg !27
  %39 = or disjoint i32 %33, 768, !dbg !27
  %40 = or disjoint i32 %33, 896, !dbg !27
  %41 = add i32 %32, %.sext, !dbg !28
  %42 = add i32 %41, %33, !dbg !29
  %43 = add i32 %41, %34, !dbg !29
  %44 = add i32 %41, %35, !dbg !29
  %45 = add i32 %41, %36, !dbg !29
  %46 = add i32 %41, %37, !dbg !29
  %47 = add i32 %41, %38, !dbg !29
  %48 = add i32 %41, %39, !dbg !29
  %49 = add i32 %41, %40, !dbg !29
  %50 = sext i32 %42 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = sext i32 %43 to i64, !dbg !30
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !30
  %54 = sext i32 %44 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !30
  %56 = sext i32 %45 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !30
  %58 = sext i32 %46 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !30
  %60 = sext i32 %47 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !30
  %62 = sext i32 %48 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !30
  %64 = sext i32 %49 to i64, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %22, i32 0, i1 %22) #2, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = or disjoint i32 %32, 1, !dbg !32
  %83 = add i32 %82, %.sext, !dbg !33
  %84 = add i32 %83, %33, !dbg !34
  %85 = add i32 %83, %34, !dbg !34
  %86 = add i32 %83, %35, !dbg !34
  %87 = add i32 %83, %36, !dbg !34
  %88 = add i32 %83, %37, !dbg !34
  %89 = add i32 %83, %38, !dbg !34
  %90 = add i32 %83, %39, !dbg !34
  %91 = add i32 %83, %40, !dbg !34
  %92 = sext i32 %84 to i64, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !35
  %94 = sext i32 %85 to i64, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !35
  %96 = sext i32 %86 to i64, !dbg !35
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !35
  %98 = sext i32 %87 to i64, !dbg !35
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !35
  %100 = sext i32 %88 to i64, !dbg !35
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !35
  %102 = sext i32 %89 to i64, !dbg !35
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !35
  %104 = sext i32 %90 to i64, !dbg !35
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !35
  %106 = sext i32 %91 to i64, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !35
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %109 = bitcast i32 %108 to float, !dbg !36
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %111 = bitcast i32 %110 to float, !dbg !36
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %113 = bitcast i32 %112 to float, !dbg !36
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %115 = bitcast i32 %114 to float, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %117 = bitcast i32 %116 to float, !dbg !36
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %119 = bitcast i32 %118 to float, !dbg !36
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %22, i32 0, i1 %22) #2, !dbg !36
  %123 = bitcast i32 %122 to float, !dbg !36
  %124 = fadd float %67, %109, !dbg !37
  %125 = fadd float %69, %111, !dbg !37
  %126 = fadd float %71, %113, !dbg !37
  %127 = fadd float %73, %115, !dbg !37
  %128 = fadd float %75, %117, !dbg !37
  %129 = fadd float %77, %119, !dbg !37
  %130 = fadd float %79, %121, !dbg !37
  %131 = fadd float %81, %123, !dbg !37
  %132 = add i32 %32, 4, !dbg !38
  %133 = add i32 %132, %.sext, !dbg !39
  %134 = add i32 %133, %33, !dbg !40
  %135 = add i32 %133, %34, !dbg !40
  %136 = add i32 %133, %35, !dbg !40
  %137 = add i32 %133, %36, !dbg !40
  %138 = add i32 %133, %37, !dbg !40
  %139 = add i32 %133, %38, !dbg !40
  %140 = add i32 %133, %39, !dbg !40
  %141 = add i32 %133, %40, !dbg !40
  %142 = sext i32 %134 to i64, !dbg !41
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !41
  %144 = sext i32 %135 to i64, !dbg !41
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !41
  %146 = sext i32 %136 to i64, !dbg !41
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !41
  %148 = sext i32 %137 to i64, !dbg !41
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !41
  %150 = sext i32 %138 to i64, !dbg !41
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !41
  %152 = sext i32 %139 to i64, !dbg !41
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !41
  %154 = sext i32 %140 to i64, !dbg !41
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !41
  %156 = sext i32 %141 to i64, !dbg !41
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !41
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %159 = bitcast i32 %158 to float, !dbg !42
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %161 = bitcast i32 %160 to float, !dbg !42
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %163 = bitcast i32 %162 to float, !dbg !42
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %165 = bitcast i32 %164 to float, !dbg !42
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %167 = bitcast i32 %166 to float, !dbg !42
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %169 = bitcast i32 %168 to float, !dbg !42
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %171 = bitcast i32 %170 to float, !dbg !42
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %22, i32 0, i1 %22) #2, !dbg !42
  %173 = bitcast i32 %172 to float, !dbg !42
  %174 = fadd float %124, %159, !dbg !43
  %175 = fadd float %125, %161, !dbg !43
  %176 = fadd float %126, %163, !dbg !43
  %177 = fadd float %127, %165, !dbg !43
  %178 = fadd float %128, %167, !dbg !43
  %179 = fadd float %129, %169, !dbg !43
  %180 = fadd float %130, %171, !dbg !43
  %181 = fadd float %131, %173, !dbg !43
  %182 = add i32 %32, 5, !dbg !44
  %183 = add i32 %182, %.sext, !dbg !45
  %184 = add i32 %183, %33, !dbg !46
  %185 = add i32 %183, %34, !dbg !46
  %186 = add i32 %183, %35, !dbg !46
  %187 = add i32 %183, %36, !dbg !46
  %188 = add i32 %183, %37, !dbg !46
  %189 = add i32 %183, %38, !dbg !46
  %190 = add i32 %183, %39, !dbg !46
  %191 = add i32 %183, %40, !dbg !46
  %192 = sext i32 %184 to i64, !dbg !47
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !47
  %194 = sext i32 %185 to i64, !dbg !47
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !47
  %196 = sext i32 %186 to i64, !dbg !47
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !47
  %198 = sext i32 %187 to i64, !dbg !47
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !47
  %200 = sext i32 %188 to i64, !dbg !47
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !47
  %202 = sext i32 %189 to i64, !dbg !47
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !47
  %204 = sext i32 %190 to i64, !dbg !47
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !47
  %206 = sext i32 %191 to i64, !dbg !47
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !47
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %209 = bitcast i32 %208 to float, !dbg !48
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %211 = bitcast i32 %210 to float, !dbg !48
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %213 = bitcast i32 %212 to float, !dbg !48
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %215 = bitcast i32 %214 to float, !dbg !48
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %217 = bitcast i32 %216 to float, !dbg !48
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %219 = bitcast i32 %218 to float, !dbg !48
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %221 = bitcast i32 %220 to float, !dbg !48
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %22, i32 0, i1 %22) #2, !dbg !48
  %223 = bitcast i32 %222 to float, !dbg !48
  %224 = fadd float %174, %209, !dbg !49
  %225 = fadd float %175, %211, !dbg !49
  %226 = fadd float %176, %213, !dbg !49
  %227 = fadd float %177, %215, !dbg !49
  %228 = fadd float %178, %217, !dbg !49
  %229 = fadd float %179, %219, !dbg !49
  %230 = fadd float %180, %221, !dbg !49
  %231 = fadd float %181, %223, !dbg !49
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 4.000000e+00) #2, !dbg !50
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float 4.000000e+00) #2, !dbg !50
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 4.000000e+00) #2, !dbg !50
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float 4.000000e+00) #2, !dbg !50
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %228, float 4.000000e+00) #2, !dbg !50
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 4.000000e+00) #2, !dbg !50
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float 4.000000e+00) #2, !dbg !50
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float 4.000000e+00) #2, !dbg !50
  %240 = shl i32 %20, 11, !dbg !51
  %241 = shl i32 %21, 11, !dbg !51
  %242 = mul i32 %27, 18432, !dbg !52
  %243 = add i32 %242, %.decomposed17, !dbg !53
  %244 = add i32 %243, %240, !dbg !54
  %245 = add i32 %243, %241, !dbg !54
  %246 = sext i32 %244 to i64, !dbg !55
  %247 = getelementptr float, ptr addrspace(1) %1, i64 %246, !dbg !55
  %248 = sext i32 %245 to i64, !dbg !55
  %249 = getelementptr float, ptr addrspace(1) %1, i64 %248, !dbg !55
  %250 = shl i32 %7, 6, !dbg !56
  %251 = and i32 %250, 960, !dbg !56
  %252 = or disjoint i32 %251, %9, !dbg !56
  %253 = and i32 %11, 508, !dbg !56
  %254 = lshr exact i32 %251, 2, !dbg !56
  %255 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %254, !dbg !56
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %252, !dbg !56
  %257 = bitcast float %232 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !56
  %258 = or disjoint i32 %252, 8, !dbg !56
  %259 = getelementptr float, ptr addrspace(3) %255, i32 %258, !dbg !56
  %260 = bitcast float %233 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !56
  %261 = or disjoint i32 %252, 16, !dbg !56
  %262 = getelementptr float, ptr addrspace(3) %255, i32 %261, !dbg !56
  %263 = bitcast float %234 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !56
  %264 = or disjoint i32 %252, 24, !dbg !56
  %265 = getelementptr float, ptr addrspace(3) %255, i32 %264, !dbg !56
  %266 = bitcast float %235 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !56
  %267 = or disjoint i32 %252, 32, !dbg !56
  %268 = getelementptr float, ptr addrspace(3) %255, i32 %267, !dbg !56
  %269 = bitcast float %236 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !56
  %270 = or disjoint i32 %252, 40, !dbg !56
  %271 = getelementptr float, ptr addrspace(3) %255, i32 %270, !dbg !56
  %272 = bitcast float %237 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #2, !dbg !56
  %273 = or disjoint i32 %252, 48, !dbg !56
  %274 = getelementptr float, ptr addrspace(3) %255, i32 %273, !dbg !56
  %275 = bitcast float %238 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !56
  %276 = or disjoint i32 %252, 56, !dbg !56
  %277 = getelementptr float, ptr addrspace(3) %255, i32 %276, !dbg !56
  %278 = bitcast float %239 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %279 = lshr i32 %11, 4, !dbg !56
  %280 = and i32 %279, 28, !dbg !56
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !56
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %253, !dbg !56
  %283 = or disjoint i32 %253, 512, !dbg !56
  %284 = lshr i32 %283, 4, !dbg !56
  %285 = and i32 %284, 60, !dbg !56
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !56
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %283, !dbg !56
  %288 = load <4 x i32>, ptr addrspace(3) %287, align 16, !dbg !56
  %.extract = load i32, ptr addrspace(3) %282, align 16, !dbg !56
  %289 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 4, !dbg !56
  %.extract9 = load i32, ptr addrspace(3) %289, align 4, !dbg !56
  %290 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 8, !dbg !56
  %.extract10 = load i32, ptr addrspace(3) %290, align 8, !dbg !56
  %291 = getelementptr inbounds i8, ptr addrspace(3) %282, i32 12, !dbg !56
  %.extract11 = load i32, ptr addrspace(3) %291, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %247, i1 %23) #2, !dbg !56
  %.extract12 = extractelement <4 x i32> %288, i64 0, !dbg !56
  %.extract13 = extractelement <4 x i32> %288, i64 1, !dbg !56
  %.extract14 = extractelement <4 x i32> %288, i64 2, !dbg !56
  %.extract15 = extractelement <4 x i32> %288, i64 3, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %249, i1 %24) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cteblnfnqyvj73u5c246ddo736kzdj4c3tmi2plokaeodrouqmh5.py", directory: "inductor_cache/te")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_11", linkageName: "triton_poi_fused__adaptive_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 14, scope: !7)
!24 = !DILocation(line: 34, column: 21, scope: !7)
!25 = !DILocation(line: 37, column: 21, scope: !7)
!26 = !DILocation(line: 41, column: 33, scope: !7)
!27 = !DILocation(line: 41, column: 51, scope: !7)
!28 = !DILocation(line: 41, column: 48, scope: !7)
!29 = !DILocation(line: 41, column: 57, scope: !7)
!30 = !DILocation(line: 41, column: 30, scope: !7)
!31 = !DILocation(line: 41, column: 72, scope: !7)
!32 = !DILocation(line: 45, column: 35, scope: !7)
!33 = !DILocation(line: 45, column: 53, scope: !7)
!34 = !DILocation(line: 45, column: 62, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 77, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 35, scope: !7)
!39 = !DILocation(line: 50, column: 53, scope: !7)
!40 = !DILocation(line: 50, column: 62, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 77, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 53, scope: !7)
!46 = !DILocation(line: 53, column: 62, scope: !7)
!47 = !DILocation(line: 53, column: 31, scope: !7)
!48 = !DILocation(line: 53, column: 77, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 20, scope: !7)
!51 = !DILocation(line: 71, column: 35, scope: !7)
!52 = !DILocation(line: 71, column: 46, scope: !7)
!53 = !DILocation(line: 71, column: 30, scope: !7)
!54 = !DILocation(line: 71, column: 40, scope: !7)
!55 = !DILocation(line: 71, column: 25, scope: !7)
!56 = !DILocation(line: 71, column: 58, scope: !7)
!57 = !DILocation(line: 71, column: 4, scope: !7)
