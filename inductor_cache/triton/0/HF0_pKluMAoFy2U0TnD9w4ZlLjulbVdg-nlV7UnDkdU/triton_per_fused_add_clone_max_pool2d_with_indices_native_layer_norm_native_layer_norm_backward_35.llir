; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_clone_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = and i32 %14, 31, !dbg !11
  %16 = lshr i32 %14, 5, !dbg !11
  %17 = shl i32 %14, 2, !dbg !11
  %18 = and i32 %17, 1020, !dbg !11
  %19 = icmp samesign ult i32 %18, 768, !dbg !12
  %.frozen = freeze i32 %13, !dbg !13
  %20 = sdiv i32 %.frozen, 2, !dbg !13
  %21 = mul i32 %20, 2, !dbg !14
  %.decomposed = sub i32 %.frozen, %21, !dbg !14
  %22 = srem i32 %20, 2, !dbg !15
  %23 = sdiv i32 %13, 4, !dbg !16
  %24 = mul nsw i32 %.decomposed, 1536, !dbg !17
  %25 = mul i32 %20, 6144, !dbg !18
  %26 = add i32 %25, %24, !dbg !19
  %27 = add i32 %26, %18, !dbg !20
  %28 = sext i32 %27 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !22
  %35 = add i32 %26, 768, !dbg !23
  %36 = add i32 %35, %18, !dbg !24
  %37 = sext i32 %36 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %44 = add i32 %26, 3072, !dbg !27
  %45 = add i32 %44, %18, !dbg !28
  %46 = sext i32 %45 to i64, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !29
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !30
  %53 = add i32 %26, 3840, !dbg !31
  %54 = add i32 %53, %18, !dbg !32
  %55 = sext i32 %54 to i64, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !33
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !34
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %62 = mul nsw i32 %.decomposed, 768, !dbg !35
  %63 = add nsw i32 %62, %18, !dbg !36
  %64 = mul nsw i32 %22, 5376, !dbg !37
  %65 = mul i32 %23, 37632, !dbg !38
  %66 = add i32 %63, %65, !dbg !39
  %67 = add i32 %66, %64, !dbg !40
  %68 = sext i32 %67 to i64, !dbg !41
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !41
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !42
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !42
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !42
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !42
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !42
  %75 = zext nneg i32 %18 to i64, !dbg !43
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %75, !dbg !43
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !44
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !44
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !44
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !44
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !44
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !45
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !46
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !47
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !48
  %86 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !22
  %87 = insertelement <4 x i32> %86, i32 %32, i64 1, !dbg !22
  %88 = insertelement <4 x i32> %87, i32 %33, i64 2, !dbg !22
  %89 = insertelement <4 x i32> %88, i32 %34, i64 3, !dbg !22
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !22
  %91 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !26
  %92 = insertelement <4 x i32> %91, i32 %41, i64 1, !dbg !26
  %93 = insertelement <4 x i32> %92, i32 %42, i64 2, !dbg !26
  %94 = insertelement <4 x i32> %93, i32 %43, i64 3, !dbg !26
  %95 = bitcast <4 x i32> %94 to <4 x float>, !dbg !26
  %96 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !30
  %97 = insertelement <4 x i32> %96, i32 %50, i64 1, !dbg !30
  %98 = insertelement <4 x i32> %97, i32 %51, i64 2, !dbg !30
  %99 = insertelement <4 x i32> %98, i32 %52, i64 3, !dbg !30
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !30
  %101 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !34
  %102 = insertelement <4 x i32> %101, i32 %59, i64 1, !dbg !34
  %103 = insertelement <4 x i32> %102, i32 %60, i64 2, !dbg !34
  %104 = insertelement <4 x i32> %103, i32 %61, i64 3, !dbg !34
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !34
  %106 = fcmp ogt <4 x float> %95, %90, !dbg !49
  %107 = fcmp uno <4 x float> %95, zeroinitializer, !dbg !50
  %108 = or <4 x i1> %106, %107, !dbg !54
  %.v = select <4 x i1> %108, <4 x i32> %94, <4 x i32> %89, !dbg !55
  %109 = bitcast <4 x i32> %.v to <4 x float>, !dbg !55
  %110 = fcmp olt <4 x float> %109, %100, !dbg !56
  %111 = fcmp uno <4 x float> %100, zeroinitializer, !dbg !57
  %112 = or <4 x i1> %111, %110, !dbg !59
  %.v1 = select <4 x i1> %112, <4 x i32> %99, <4 x i32> %.v, !dbg !60
  %113 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !60
  %114 = fcmp olt <4 x float> %113, %105, !dbg !61
  %115 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !42
  %116 = insertelement <2 x i32> %115, i32 %72, i64 1, !dbg !42
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !42
  %118 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !44
  %119 = insertelement <2 x i32> %118, i32 %79, i64 1, !dbg !44
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !44
  %121 = shufflevector <4 x float> %105, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !62
  %122 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !62
  %123 = shufflevector <4 x i1> %114, <4 x i1> poison, <2 x i32> <i32 0, i32 1>, !dbg !64
  %124 = or <2 x i1> %122, %123, !dbg !64
  %125 = shufflevector <4 x float> %113, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !65
  %126 = select <2 x i1> %124, <2 x float> %121, <2 x float> %125, !dbg !65
  %127 = fadd <2 x float> %117, %120, !dbg !66
  %128 = fadd <2 x float> %127, %126, !dbg !67
  %129 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !42
  %130 = insertelement <2 x i32> %129, i32 %74, i64 1, !dbg !42
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !42
  %132 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !44
  %133 = insertelement <2 x i32> %132, i32 %81, i64 1, !dbg !44
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !44
  %135 = shufflevector <4 x float> %105, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !62
  %136 = fcmp uno <2 x float> %135, zeroinitializer, !dbg !62
  %137 = shufflevector <4 x i1> %114, <4 x i1> poison, <2 x i32> <i32 2, i32 3>, !dbg !64
  %138 = or <2 x i1> %136, %137, !dbg !64
  %139 = shufflevector <4 x float> %113, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !65
  %140 = select <2 x i1> %138, <2 x float> %135, <2 x float> %139, !dbg !65
  %141 = fadd <2 x float> %131, %134, !dbg !66
  %142 = fadd <2 x float> %141, %140, !dbg !67
  %143 = extractelement <2 x float> %128, i64 0, !dbg !68
  %144 = extractelement <2 x float> %128, i64 1, !dbg !68
  %145 = fadd float %143, %144, !dbg !68
  %146 = extractelement <2 x float> %142, i64 0, !dbg !68
  %147 = fadd float %146, %145, !dbg !68
  %148 = extractelement <2 x float> %142, i64 1, !dbg !68
  %149 = fadd float %148, %147, !dbg !68
  %150 = select i1 %19, float %149, float 0.000000e+00, !dbg !68
  %151 = bitcast float %150 to i32, !dbg !73
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 16, i32 31), !dbg !73
  %153 = bitcast i32 %152 to float, !dbg !73
  %154 = fadd float %150, %153, !dbg !68
  %155 = bitcast float %154 to i32, !dbg !73
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !73
  %157 = bitcast i32 %156 to float, !dbg !73
  %158 = fadd float %154, %157, !dbg !68
  %159 = bitcast float %158 to i32, !dbg !73
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 4, i32 31), !dbg !73
  %161 = bitcast i32 %160 to float, !dbg !73
  %162 = fadd float %158, %161, !dbg !68
  %163 = bitcast float %162 to i32, !dbg !73
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !73
  %165 = bitcast i32 %164 to float, !dbg !73
  %166 = fadd float %162, %165, !dbg !68
  %167 = bitcast float %166 to i32, !dbg !73
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 1, i32 31), !dbg !73
  %169 = bitcast i32 %168 to float, !dbg !73
  %170 = fadd float %166, %169, !dbg !68
  %171 = icmp eq i32 %15, 0, !dbg !73
  %172 = and i32 %16, 7, !dbg !73
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !73
  %174 = bitcast float %170 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 %171) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %175 = icmp slt i32 %14, 8, !dbg !73
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !73
  %177 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %176, i1 %175) #5, !dbg !73
  %178 = bitcast i32 %177 to float, !dbg !73
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 4, i32 31), !dbg !73
  %180 = bitcast i32 %179 to float, !dbg !73
  %181 = fadd float %178, %180, !dbg !68
  %182 = bitcast float %181 to i32, !dbg !73
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !73
  %184 = bitcast i32 %183 to float, !dbg !73
  %185 = fadd float %181, %184, !dbg !68
  %186 = bitcast float %185 to i32, !dbg !73
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !73
  %188 = bitcast i32 %187 to float, !dbg !73
  %189 = fadd float %185, %188, !dbg !68
  %190 = and i32 %14, 7, !dbg !73
  %191 = icmp eq i32 %190, 0, !dbg !73
  %192 = and i1 %175, %191, !dbg !73
  %193 = bitcast float %189 to <1 x i32>, !dbg !73
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %193, i1 %192) #5, !dbg !73
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %194 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !73
  %195 = fadd float %194, 0.000000e+00, !dbg !74
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float 7.680000e+02) #5, !dbg !76
  %197 = fsub float %143, %196, !dbg !77
  %198 = fsub float %144, %196, !dbg !77
  %199 = fsub float %146, %196, !dbg !77
  %200 = fsub float %148, %196, !dbg !77
  %201 = fmul float %197, %197, !dbg !78
  %202 = fmul float %198, %198, !dbg !78
  %203 = fmul float %199, %199, !dbg !78
  %204 = fmul float %200, %200, !dbg !78
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %205 = fadd float %201, %202, !dbg !81
  %206 = fadd float %203, %205, !dbg !81
  %207 = fadd float %204, %206, !dbg !81
  %208 = select i1 %19, float %207, float 0.000000e+00, !dbg !81
  %209 = bitcast float %208 to i32, !dbg !79
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 16, i32 31), !dbg !79
  %211 = bitcast i32 %210 to float, !dbg !79
  %212 = fadd float %208, %211, !dbg !81
  %213 = bitcast float %212 to i32, !dbg !79
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 8, i32 31), !dbg !79
  %215 = bitcast i32 %214 to float, !dbg !79
  %216 = fadd float %212, %215, !dbg !81
  %217 = bitcast float %216 to i32, !dbg !79
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !79
  %219 = bitcast i32 %218 to float, !dbg !79
  %220 = fadd float %216, %219, !dbg !81
  %221 = bitcast float %220 to i32, !dbg !79
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !79
  %223 = bitcast i32 %222 to float, !dbg !79
  %224 = fadd float %220, %223, !dbg !81
  %225 = bitcast float %224 to i32, !dbg !79
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !79
  %227 = bitcast i32 %226 to float, !dbg !79
  %228 = fadd float %224, %227, !dbg !81
  %229 = bitcast float %228 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %229, i1 %171) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %230 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %176, i1 %175) #5, !dbg !79
  %231 = bitcast i32 %230 to float, !dbg !79
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 4, i32 31), !dbg !79
  %233 = bitcast i32 %232 to float, !dbg !79
  %234 = fadd float %231, %233, !dbg !81
  %235 = bitcast float %234 to i32, !dbg !79
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !79
  %237 = bitcast i32 %236 to float, !dbg !79
  %238 = fadd float %234, %237, !dbg !81
  %239 = bitcast float %238 to i32, !dbg !79
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !79
  %241 = bitcast i32 %240 to float, !dbg !79
  %242 = fadd float %238, %241, !dbg !81
  %243 = bitcast float %242 to <1 x i32>, !dbg !79
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %243, i1 %192) #5, !dbg !79
  tail call void @llvm.nvvm.barrier0(), !dbg !79
  %244 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !79
  %245 = fadd float %244, 0.000000e+00, !dbg !82
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float 7.680000e+02) #5, !dbg !84
  %247 = fadd float %246, 0x3EB0C6F7A0000000, !dbg !85
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !86
  %.not.i = icmp eq i32 %248, 0, !dbg !86
  br i1 %.not.i, label %251, label %249, !dbg !86

249:                                              ; preds = %12
  %250 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %247), !dbg !86
  br label %__nv_rsqrtf.exit, !dbg !86

251:                                              ; preds = %12
  %252 = tail call float @llvm.nvvm.rsqrt.approx.f(float %247), !dbg !86
  br label %__nv_rsqrtf.exit, !dbg !86

__nv_rsqrtf.exit:                                 ; preds = %249, %251
  %.0.i = phi float [ %250, %249 ], [ %252, %251 ], !dbg !86
  %253 = zext <4 x i1> %106 to <4 x i8>, !dbg !87
  %254 = select <4 x i1> %110, <4 x i8> splat (i8 2), <4 x i8> %253, !dbg !88
  %255 = select <4 x i1> %114, <4 x i8> splat (i8 3), <4 x i8> %254, !dbg !89
  %256 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !48
  %257 = bitcast i32 %256 to float, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !48
  %259 = bitcast i32 %258 to float, !dbg !48
  %260 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !48
  %261 = bitcast i32 %260 to float, !dbg !48
  %262 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !48
  %263 = bitcast i32 %262 to float, !dbg !48
  %264 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !46
  %265 = bitcast i32 %264 to float, !dbg !46
  %266 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !46
  %267 = bitcast i32 %266 to float, !dbg !46
  %268 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !46
  %269 = bitcast i32 %268 to float, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !46
  %271 = bitcast i32 %270 to float, !dbg !46
  %272 = fmul float %197, %.0.i, !dbg !90
  %273 = fmul float %198, %.0.i, !dbg !90
  %274 = fmul float %199, %.0.i, !dbg !90
  %275 = fmul float %200, %.0.i, !dbg !90
  %276 = fmul float %272, %271, !dbg !91
  %277 = fmul float %273, %269, !dbg !91
  %278 = fmul float %274, %267, !dbg !91
  %279 = fmul float %275, %265, !dbg !91
  %280 = fadd float %276, %263, !dbg !92
  %281 = fadd float %277, %261, !dbg !92
  %282 = fadd float %278, %259, !dbg !92
  %283 = fadd float %279, %257, !dbg !92
  %284 = fmul float %.0.i, 0x3F55555560000000, !dbg !93
  %285 = mul i32 %13, 768, !dbg !94
  %286 = add i32 %285, %18, !dbg !95
  %287 = sext i32 %286 to i64, !dbg !96
  %288 = getelementptr i8, ptr addrspace(1) %5, i64 %287, !dbg !96
  %289 = bitcast <4 x i8> %255 to i32, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %288, i1 %19) #5, !dbg !97
  %290 = getelementptr float, ptr addrspace(1) %6, i64 %287, !dbg !98
  %291 = bitcast float %143 to i32, !dbg !99
  %292 = bitcast float %144 to i32, !dbg !99
  %293 = bitcast float %146 to i32, !dbg !99
  %294 = bitcast float %148 to i32, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %291, i32 %292, i32 %293, i32 %294, ptr addrspace(1) %290, i1 %19) #5, !dbg !99
  %295 = getelementptr float, ptr addrspace(1) %7, i64 %287, !dbg !100
  %296 = bitcast float %272 to i32, !dbg !101
  %297 = bitcast float %273 to i32, !dbg !101
  %298 = bitcast float %274 to i32, !dbg !101
  %299 = bitcast float %275 to i32, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %295, i1 %19) #5, !dbg !101
  %300 = getelementptr float, ptr addrspace(1) %8, i64 %287, !dbg !102
  %301 = bitcast float %280 to i32, !dbg !103
  %302 = bitcast float %281 to i32, !dbg !103
  %303 = bitcast float %282 to i32, !dbg !103
  %304 = bitcast float %283 to i32, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %300, i1 %19) #5, !dbg !103
  %305 = sext i32 %13 to i64, !dbg !104
  %306 = getelementptr float, ptr addrspace(1) %9, i64 %305, !dbg !104
  %urem = and i32 %14, 255, !dbg !105
  %307 = icmp eq i32 %urem, 0, !dbg !105
  %308 = bitcast float %284 to i32, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %308, ptr addrspace(1) %306, i1 %307) #5, !dbg !105
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5xfxiov4wdkwahtwbci67lyyjkaumfjwl2zmzx27ulu7usqb7f2.py", directory: "inductor_cache/5x")
!4 = !{ptr @triton_per_fused_add_clone_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_35, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clone_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_35, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clone_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_35", linkageName: "triton_per_fused_add_clone_max_pool2d_with_indices_native_layer_norm_native_layer_norm_backward_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 26, scope: !7)
!16 = !DILocation(line: 35, column: 19, scope: !7)
!17 = !DILocation(line: 36, column: 40, scope: !7)
!18 = !DILocation(line: 36, column: 50, scope: !7)
!19 = !DILocation(line: 36, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 45, scope: !7)
!21 = !DILocation(line: 36, column: 30, scope: !7)
!22 = !DILocation(line: 36, column: 55, scope: !7)
!23 = !DILocation(line: 37, column: 41, scope: !7)
!24 = !DILocation(line: 37, column: 51, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 61, scope: !7)
!27 = !DILocation(line: 38, column: 42, scope: !7)
!28 = !DILocation(line: 38, column: 52, scope: !7)
!29 = !DILocation(line: 38, column: 30, scope: !7)
!30 = !DILocation(line: 38, column: 62, scope: !7)
!31 = !DILocation(line: 39, column: 43, scope: !7)
!32 = !DILocation(line: 39, column: 53, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 63, scope: !7)
!35 = !DILocation(line: 40, column: 40, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 50, scope: !7)
!38 = !DILocation(line: 40, column: 61, scope: !7)
!39 = !DILocation(line: 40, column: 45, scope: !7)
!40 = !DILocation(line: 40, column: 55, scope: !7)
!41 = !DILocation(line: 40, column: 31, scope: !7)
!42 = !DILocation(line: 40, column: 66, scope: !7)
!43 = !DILocation(line: 41, column: 31, scope: !7)
!44 = !DILocation(line: 41, column: 36, scope: !7)
!45 = !DILocation(line: 42, column: 31, scope: !7)
!46 = !DILocation(line: 42, column: 36, scope: !7)
!47 = !DILocation(line: 43, column: 31, scope: !7)
!48 = !DILocation(line: 43, column: 36, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 48, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!56 = !DILocation(line: 49, column: 18, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !58)
!58 = !DILocation(line: 52, column: 41, scope: !7)
!59 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !58)
!60 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !58)
!61 = !DILocation(line: 53, column: 20, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !51, inlinedAt: !63)
!63 = !DILocation(line: 56, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 16, scope: !51, inlinedAt: !63)
!65 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !63)
!66 = !DILocation(line: 57, column: 20, scope: !7)
!67 = !DILocation(line: 58, column: 20, scope: !7)
!68 = !DILocation(line: 256, column: 15, scope: !69, inlinedAt: !72)
!69 = distinct !DILexicalBlockFile(scope: !71, file: !70, discriminator: 0)
!70 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!71 = distinct !DILexicalBlockFile(scope: !7, file: !70, discriminator: 0)
!72 = !DILocation(line: 63, column: 59, scope: !7)
!73 = !DILocation(line: 267, column: 36, scope: !71, inlinedAt: !72)
!74 = !DILocation(line: 73, column: 15, scope: !51, inlinedAt: !75)
!75 = !DILocation(line: 63, column: 45, scope: !7)
!76 = !DILocation(line: 66, column: 20, scope: !7)
!77 = !DILocation(line: 67, column: 20, scope: !7)
!78 = !DILocation(line: 68, column: 20, scope: !7)
!79 = !DILocation(line: 267, column: 36, scope: !71, inlinedAt: !80)
!80 = !DILocation(line: 71, column: 59, scope: !7)
!81 = !DILocation(line: 256, column: 15, scope: !69, inlinedAt: !80)
!82 = !DILocation(line: 73, column: 15, scope: !51, inlinedAt: !83)
!83 = !DILocation(line: 71, column: 45, scope: !7)
!84 = !DILocation(line: 74, column: 20, scope: !7)
!85 = !DILocation(line: 76, column: 20, scope: !7)
!86 = !DILocation(line: 77, column: 28, scope: !7)
!87 = !DILocation(line: 47, column: 32, scope: !7)
!88 = !DILocation(line: 51, column: 33, scope: !7)
!89 = !DILocation(line: 55, column: 35, scope: !7)
!90 = !DILocation(line: 78, column: 20, scope: !7)
!91 = !DILocation(line: 79, column: 20, scope: !7)
!92 = !DILocation(line: 80, column: 20, scope: !7)
!93 = !DILocation(line: 82, column: 20, scope: !7)
!94 = !DILocation(line: 83, column: 34, scope: !7)
!95 = !DILocation(line: 83, column: 30, scope: !7)
!96 = !DILocation(line: 83, column: 25, scope: !7)
!97 = !DILocation(line: 83, column: 46, scope: !7)
!98 = !DILocation(line: 84, column: 25, scope: !7)
!99 = !DILocation(line: 84, column: 46, scope: !7)
!100 = !DILocation(line: 85, column: 25, scope: !7)
!101 = !DILocation(line: 85, column: 46, scope: !7)
!102 = !DILocation(line: 86, column: 25, scope: !7)
!103 = !DILocation(line: 86, column: 46, scope: !7)
!104 = !DILocation(line: 87, column: 25, scope: !7)
!105 = !DILocation(line: 87, column: 37, scope: !7)
!106 = !DILocation(line: 87, column: 4, scope: !7)
