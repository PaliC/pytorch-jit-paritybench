; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_div_max_mul_pow_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = shl i32 %8, 2, !dbg !10
  %12 = and i32 %11, 252, !dbg !10
  %13 = zext nneg i32 %12 to i64, !dbg !11
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !11
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !12
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !12
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !12
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = bitcast i32 %17 to float, !dbg !12
  %22 = bitcast i32 %18 to float, !dbg !12
  %23 = bitcast i32 %19 to float, !dbg !12
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !13
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !14
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !14
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !14
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = bitcast i32 %27 to float, !dbg !14
  %32 = bitcast i32 %28 to float, !dbg !14
  %33 = bitcast i32 %29 to float, !dbg !14
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !15
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !16
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !16
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !16
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !16
  %40 = bitcast i32 %36 to float, !dbg !16
  %41 = bitcast i32 %37 to float, !dbg !16
  %42 = bitcast i32 %38 to float, !dbg !16
  %43 = bitcast i32 %39 to float, !dbg !16
  %44 = fsub float 1.000000e+00, %20, !dbg !17
  %45 = fsub float 1.000000e+00, %21, !dbg !17
  %46 = fsub float 1.000000e+00, %22, !dbg !17
  %47 = fsub float 1.000000e+00, %23, !dbg !17
  %48 = fmul float %44, %30, !dbg !18
  %49 = fmul float %45, %31, !dbg !18
  %50 = fmul float %46, %32, !dbg !18
  %51 = fmul float %47, %33, !dbg !18
  %52 = tail call float @llvm.fabs.f32(float %48), !dbg !19
  %53 = tail call float @llvm.fabs.f32(float %49), !dbg !19
  %54 = tail call float @llvm.fabs.f32(float %50), !dbg !19
  %55 = tail call float @llvm.fabs.f32(float %51), !dbg !19
  %56 = fcmp ogt float %52, %53, !dbg !20
  %57 = fcmp uno float %48, 0.000000e+00, !dbg !25
  %58 = or i1 %57, %56, !dbg !26
  %59 = select i1 %58, float %52, float %53, !dbg !27
  %60 = fcmp ogt float %59, %54, !dbg !20
  %61 = fcmp uno float %59, 0.000000e+00, !dbg !25
  %62 = or i1 %60, %61, !dbg !26
  %63 = select i1 %62, float %59, float %54, !dbg !27
  %64 = fcmp ogt float %63, %55, !dbg !20
  %65 = fcmp uno float %63, 0.000000e+00, !dbg !25
  %66 = or i1 %64, %65, !dbg !26
  %67 = select i1 %66, float %63, float %55, !dbg !27
  %68 = bitcast float %67 to i32, !dbg !28
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 16, i32 31), !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = fcmp ogt float %67, %70, !dbg !20
  %72 = fcmp uno float %67, 0.000000e+00, !dbg !25
  %73 = or i1 %71, %72, !dbg !26
  %74 = select i1 %73, float %67, float %70, !dbg !27
  %75 = bitcast float %74 to i32, !dbg !28
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = fcmp ogt float %74, %77, !dbg !20
  %79 = fcmp uno float %74, 0.000000e+00, !dbg !25
  %80 = or i1 %78, %79, !dbg !26
  %81 = select i1 %80, float %74, float %77, !dbg !27
  %82 = bitcast float %81 to i32, !dbg !28
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 4, i32 31), !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fcmp ogt float %81, %84, !dbg !20
  %86 = fcmp uno float %81, 0.000000e+00, !dbg !25
  %87 = or i1 %85, %86, !dbg !26
  %88 = select i1 %87, float %81, float %84, !dbg !27
  %89 = bitcast float %88 to i32, !dbg !28
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = fcmp ogt float %88, %91, !dbg !20
  %93 = fcmp uno float %88, 0.000000e+00, !dbg !25
  %94 = or i1 %92, %93, !dbg !26
  %95 = select i1 %94, float %88, float %91, !dbg !27
  %96 = bitcast float %95 to i32, !dbg !28
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = fcmp ogt float %95, %98, !dbg !20
  %100 = fcmp uno float %95, 0.000000e+00, !dbg !25
  %101 = or i1 %99, %100, !dbg !26
  %102 = icmp eq i32 %9, 0, !dbg !28
  %103 = and i32 %10, 1, !dbg !28
  %104 = zext nneg i32 %103 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !28
  %106 = select i1 %101, i32 %96, i32 %97, !dbg !27
  %107 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %107, i1 %102) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %108 = icmp slt i32 %8, 2, !dbg !28
  %109 = sext i32 %8 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i64 %109, !dbg !28
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = fcmp ogt float %112, %114, !dbg !20
  %116 = fcmp uno float %112, 0.000000e+00, !dbg !25
  %117 = or i1 %116, %115, !dbg !26
  %118 = and i32 %8, 1, !dbg !28
  %119 = icmp eq i32 %118, 0, !dbg !28
  %120 = and i1 %108, %119, !dbg !28
  %121 = select i1 %117, i32 %111, i32 %113, !dbg !27
  %122 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %122, i1 %120) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %123 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %124 = fadd float %123, 0.000000e+00, !dbg !29
  %125 = fmul float %48, %48, !dbg !31
  %126 = fmul float %49, %49, !dbg !31
  %127 = fmul float %50, %50, !dbg !31
  %128 = fmul float %51, %51, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %129 = fadd float %125, %126, !dbg !36
  %130 = fadd float %127, %129, !dbg !36
  %131 = fadd float %128, %130, !dbg !36
  %132 = bitcast float %131 to i32, !dbg !32
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 16, i32 31), !dbg !32
  %134 = bitcast i32 %133 to float, !dbg !32
  %135 = fadd float %131, %134, !dbg !36
  %136 = bitcast float %135 to i32, !dbg !32
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !32
  %138 = bitcast i32 %137 to float, !dbg !32
  %139 = fadd float %135, %138, !dbg !36
  %140 = bitcast float %139 to i32, !dbg !32
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 4, i32 31), !dbg !32
  %142 = bitcast i32 %141 to float, !dbg !32
  %143 = fadd float %139, %142, !dbg !36
  %144 = bitcast float %143 to i32, !dbg !32
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = fadd float %143, %146, !dbg !36
  %148 = bitcast float %147 to i32, !dbg !32
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = fadd float %147, %150, !dbg !36
  %152 = bitcast float %151 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %152, i1 %102) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %153 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 1, i32 31), !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = fadd float %154, %156, !dbg !36
  %158 = bitcast float %157 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %158, i1 %120) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %159 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %160 = fadd float %159, 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %161 = fadd float %30, %31, !dbg !42
  %162 = fadd float %161, %32, !dbg !42
  %163 = fadd float %162, %33, !dbg !42
  %164 = bitcast float %163 to i32, !dbg !40
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 16, i32 31), !dbg !40
  %166 = bitcast i32 %165 to float, !dbg !40
  %167 = fadd float %163, %166, !dbg !42
  %168 = bitcast float %167 to i32, !dbg !40
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !40
  %170 = bitcast i32 %169 to float, !dbg !40
  %171 = fadd float %167, %170, !dbg !42
  %172 = bitcast float %171 to i32, !dbg !40
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %172, i32 4, i32 31), !dbg !40
  %174 = bitcast i32 %173 to float, !dbg !40
  %175 = fadd float %171, %174, !dbg !42
  %176 = bitcast float %175 to i32, !dbg !40
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 2, i32 31), !dbg !40
  %178 = bitcast i32 %177 to float, !dbg !40
  %179 = fadd float %175, %178, !dbg !42
  %180 = bitcast float %179 to i32, !dbg !40
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 1, i32 31), !dbg !40
  %182 = bitcast i32 %181 to float, !dbg !40
  %183 = fadd float %179, %182, !dbg !42
  %184 = bitcast float %183 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %184, i1 %102) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %185 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 1, i32 31), !dbg !40
  %188 = bitcast i32 %187 to float, !dbg !40
  %189 = fadd float %186, %188, !dbg !42
  %190 = bitcast float %189 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %190, i1 %120) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %191 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %192 = fadd float %191, 0.000000e+00, !dbg !43
  %193 = fmul float %20, %40, !dbg !45
  %194 = fmul float %21, %41, !dbg !45
  %195 = fmul float %22, %42, !dbg !45
  %196 = fmul float %23, %43, !dbg !45
  %197 = fmul float %193, %193, !dbg !46
  %198 = fmul float %194, %194, !dbg !46
  %199 = fmul float %195, %195, !dbg !46
  %200 = fmul float %196, %196, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %201 = fadd float %197, %198, !dbg !49
  %202 = fadd float %199, %201, !dbg !49
  %203 = fadd float %200, %202, !dbg !49
  %204 = bitcast float %203 to i32, !dbg !47
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !47
  %206 = bitcast i32 %205 to float, !dbg !47
  %207 = fadd float %203, %206, !dbg !49
  %208 = bitcast float %207 to i32, !dbg !47
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !47
  %210 = bitcast i32 %209 to float, !dbg !47
  %211 = fadd float %207, %210, !dbg !49
  %212 = bitcast float %211 to i32, !dbg !47
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !47
  %214 = bitcast i32 %213 to float, !dbg !47
  %215 = fadd float %211, %214, !dbg !49
  %216 = bitcast float %215 to i32, !dbg !47
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !47
  %218 = bitcast i32 %217 to float, !dbg !47
  %219 = fadd float %215, %218, !dbg !49
  %220 = bitcast float %219 to i32, !dbg !47
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !47
  %222 = bitcast i32 %221 to float, !dbg !47
  %223 = fadd float %219, %222, !dbg !49
  %224 = bitcast float %223 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %224, i1 %102) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %225 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !47
  %226 = bitcast i32 %225 to float, !dbg !47
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !47
  %228 = bitcast i32 %227 to float, !dbg !47
  %229 = fadd float %226, %228, !dbg !49
  %230 = bitcast float %229 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %230, i1 %120) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %231 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !47
  %232 = fadd float %231, 0.000000e+00, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %233 = fadd float %40, %41, !dbg !54
  %234 = fadd float %233, %42, !dbg !54
  %235 = fadd float %234, %43, !dbg !54
  %236 = bitcast float %235 to i32, !dbg !52
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 16, i32 31), !dbg !52
  %238 = bitcast i32 %237 to float, !dbg !52
  %239 = fadd float %235, %238, !dbg !54
  %240 = bitcast float %239 to i32, !dbg !52
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 8, i32 31), !dbg !52
  %242 = bitcast i32 %241 to float, !dbg !52
  %243 = fadd float %239, %242, !dbg !54
  %244 = bitcast float %243 to i32, !dbg !52
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 4, i32 31), !dbg !52
  %246 = bitcast i32 %245 to float, !dbg !52
  %247 = fadd float %243, %246, !dbg !54
  %248 = bitcast float %247 to i32, !dbg !52
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 2, i32 31), !dbg !52
  %250 = bitcast i32 %249 to float, !dbg !52
  %251 = fadd float %247, %250, !dbg !54
  %252 = bitcast float %251 to i32, !dbg !52
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 1, i32 31), !dbg !52
  %254 = bitcast i32 %253 to float, !dbg !52
  %255 = fadd float %251, %254, !dbg !54
  %256 = bitcast float %255 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %256, i1 %102) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %257 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %108) #3, !dbg !52
  %258 = bitcast i32 %257 to float, !dbg !52
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !52
  %260 = bitcast i32 %259 to float, !dbg !52
  %261 = fadd float %258, %260, !dbg !54
  %262 = bitcast float %261 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %262, i1 %120) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %263 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %264 = fadd float %263, 0.000000e+00, !dbg !55
  %265 = fadd float %192, 0x3EE4F8B580000000, !dbg !57
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %265) #3, !dbg !58
  %267 = fadd float %264, 0x3EE4F8B580000000, !dbg !59
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %267) #3, !dbg !60
  %269 = fadd float %266, %268, !dbg !61
  %270 = getelementptr float, ptr addrspace(1) %5, i64 %13, !dbg !62
  %271 = bitcast float %193 to i32, !dbg !63
  %272 = bitcast float %194 to i32, !dbg !63
  %273 = bitcast float %195 to i32, !dbg !63
  %274 = bitcast float %196 to i32, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %271, i32 %272, i32 %273, i32 %274, ptr addrspace(1) %270, i1 true) #3, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %urem = and i32 %8, 63, !dbg !65
  %275 = icmp eq i32 %urem, 0, !dbg !65
  %276 = bitcast float %269 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %0, i1 %275) #3, !dbg !65
  %277 = bitcast float %124 to i32, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %277, ptr addrspace(1) %4, i1 %275) #3, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdrzkxsocyqv6lqd535w53t2bxqof3tcg7e772l3apbg3mgeytdk.py", directory: "inductor_cache/dr")
!4 = !{ptr @triton_per_fused_abs_add_div_max_mul_pow_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_max_mul_pow_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_max_mul_pow_rsub_sum_0", linkageName: "triton_per_fused_abs_add_div_max_mul_pow_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 31, scope: !7)
!16 = !DILocation(line: 33, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 18, scope: !7)
!18 = !DILocation(line: 36, column: 18, scope: !7)
!19 = !DILocation(line: 37, column: 23, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 39, column: 70, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !21, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !21, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !24)
!28 = !DILocation(line: 131, column: 29, scope: !23, inlinedAt: !24)
!29 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 42, column: 59, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !39)
!39 = !DILocation(line: 42, column: 45, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 59, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !41)
!43 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !44)
!44 = !DILocation(line: 44, column: 45, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !48)
!48 = !DILocation(line: 48, column: 59, scope: !7)
!49 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !48)
!50 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !51)
!51 = !DILocation(line: 48, column: 45, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !53)
!53 = !DILocation(line: 50, column: 59, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !53)
!55 = !DILocation(line: 73, column: 15, scope: !23, inlinedAt: !56)
!56 = !DILocation(line: 50, column: 45, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 53, column: 20, scope: !7)
!59 = !DILocation(line: 54, column: 20, scope: !7)
!60 = !DILocation(line: 55, column: 20, scope: !7)
!61 = !DILocation(line: 56, column: 20, scope: !7)
!62 = !DILocation(line: 57, column: 25, scope: !7)
!63 = !DILocation(line: 57, column: 64, scope: !7)
!64 = !DILocation(line: 58, column: 4, scope: !7)
!65 = !DILocation(line: 59, column: 63, scope: !7)
!66 = !DILocation(line: 60, column: 59, scope: !7)
!67 = !DILocation(line: 60, column: 4, scope: !7)
