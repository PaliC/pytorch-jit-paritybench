; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_45(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = add i32 %9, -2880, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = add i32 %9, -2304, !dbg !16
  %14 = sext i32 %13 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = add i32 %9, -1728, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = add i32 %9, -576, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = sext i32 %9 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = add i32 %9, 576, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = add i32 %9, 1728, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = add i32 %9, 2304, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = add i32 %9, 2880, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %37 = shufflevector <2 x i32> %36, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %38 = sdiv <2 x i32> %37, <i32 576, i32 2304>, !dbg !31
  %39 = srem <2 x i32> %38, splat (i32 4), !dbg !32
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !33
  %41 = icmp sgt i32 %40, 0, !dbg !34
  %42 = extractelement <2 x i32> %39, i64 0, !dbg !33
  %43 = icmp sgt i32 %42, 0, !dbg !35
  %44 = and i1 %41, %43, !dbg !36
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %12, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !37
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !37
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !37
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !37
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !37
  %50 = bitcast i32 %46 to float, !dbg !37
  %51 = bitcast i32 %47 to float, !dbg !37
  %52 = bitcast i32 %48 to float, !dbg !37
  %53 = bitcast i32 %49 to float, !dbg !37
  %54 = icmp sgt i32 %42, -1, !dbg !38
  %55 = and i1 %41, %54, !dbg !39
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #1, !dbg !40
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !40
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !40
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !40
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !40
  %61 = bitcast i32 %57 to float, !dbg !40
  %62 = bitcast i32 %58 to float, !dbg !40
  %63 = bitcast i32 %59 to float, !dbg !40
  %64 = bitcast i32 %60 to float, !dbg !40
  %65 = fadd float %50, %61, !dbg !41
  %66 = fadd float %51, %62, !dbg !41
  %67 = fadd float %52, %63, !dbg !41
  %68 = fadd float %53, %64, !dbg !41
  %69 = add nsw i32 %42, 1, !dbg !42
  %70 = icmp ult i32 %69, 4, !dbg !42
  %71 = and i1 %41, %70, !dbg !43
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %18, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !44
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !44
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !44
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !44
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !44
  %77 = bitcast i32 %73 to float, !dbg !44
  %78 = bitcast i32 %74 to float, !dbg !44
  %79 = bitcast i32 %75 to float, !dbg !44
  %80 = bitcast i32 %76 to float, !dbg !44
  %81 = fadd float %65, %77, !dbg !45
  %82 = fadd float %66, %78, !dbg !45
  %83 = fadd float %67, %79, !dbg !45
  %84 = fadd float %68, %80, !dbg !45
  %85 = icmp sgt i32 %40, -1, !dbg !46
  %86 = and i1 %85, %43, !dbg !47
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !48
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !48
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !48
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !48
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !48
  %92 = bitcast i32 %88 to float, !dbg !48
  %93 = bitcast i32 %89 to float, !dbg !48
  %94 = bitcast i32 %90 to float, !dbg !48
  %95 = bitcast i32 %91 to float, !dbg !48
  %96 = fadd float %81, %92, !dbg !49
  %97 = fadd float %82, %93, !dbg !49
  %98 = fadd float %83, %94, !dbg !49
  %99 = fadd float %84, %95, !dbg !49
  %100 = or i32 %40, %42, !dbg !50
  %101 = icmp sgt i32 %100, -1, !dbg !50
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #1, !dbg !51
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !51
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !51
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !51
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !51
  %107 = bitcast i32 %103 to float, !dbg !51
  %108 = bitcast i32 %104 to float, !dbg !51
  %109 = bitcast i32 %105 to float, !dbg !51
  %110 = bitcast i32 %106 to float, !dbg !51
  %111 = fadd float %96, %107, !dbg !52
  %112 = fadd float %97, %108, !dbg !52
  %113 = fadd float %98, %109, !dbg !52
  %114 = fadd float %99, %110, !dbg !52
  %115 = and i1 %85, %70, !dbg !53
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !54
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !54
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !54
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !54
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !54
  %121 = bitcast i32 %117 to float, !dbg !54
  %122 = bitcast i32 %118 to float, !dbg !54
  %123 = bitcast i32 %119 to float, !dbg !54
  %124 = bitcast i32 %120 to float, !dbg !54
  %125 = fadd float %111, %121, !dbg !55
  %126 = fadd float %112, %122, !dbg !55
  %127 = fadd float %113, %123, !dbg !55
  %128 = fadd float %114, %124, !dbg !55
  %129 = add nsw i32 %40, 1, !dbg !56
  %130 = icmp ult i32 %129, 4, !dbg !56
  %131 = and i1 %43, %130, !dbg !57
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !58
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !58
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !58
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !58
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !58
  %137 = bitcast i32 %133 to float, !dbg !58
  %138 = bitcast i32 %134 to float, !dbg !58
  %139 = bitcast i32 %135 to float, !dbg !58
  %140 = bitcast i32 %136 to float, !dbg !58
  %141 = fadd float %125, %137, !dbg !59
  %142 = fadd float %126, %138, !dbg !59
  %143 = fadd float %127, %139, !dbg !59
  %144 = fadd float %128, %140, !dbg !59
  %145 = and i1 %54, %130, !dbg !60
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145) #1, !dbg !61
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !61
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !61
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !61
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !61
  %151 = bitcast i32 %147 to float, !dbg !61
  %152 = bitcast i32 %148 to float, !dbg !61
  %153 = bitcast i32 %149 to float, !dbg !61
  %154 = bitcast i32 %150 to float, !dbg !61
  %155 = fadd float %141, %151, !dbg !62
  %156 = fadd float %142, %152, !dbg !62
  %157 = fadd float %143, %153, !dbg !62
  %158 = fadd float %144, %154, !dbg !62
  %159 = or i32 %129, %69, !dbg !63
  %160 = icmp ult i32 %159, 4, !dbg !63
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #1, !dbg !64
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !64
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !64
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !64
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !64
  %166 = bitcast i32 %162 to float, !dbg !64
  %167 = bitcast i32 %163 to float, !dbg !64
  %168 = bitcast i32 %164 to float, !dbg !64
  %169 = bitcast i32 %165 to float, !dbg !64
  %170 = fadd float %155, %166, !dbg !65
  %171 = fadd float %156, %167, !dbg !65
  %172 = fadd float %157, %168, !dbg !65
  %173 = fadd float %158, %169, !dbg !65
  %174 = mul nsw i32 %42, %40, !dbg !66
  %175 = add nsw <2 x i32> %39, splat (i32 2), !dbg !67
  %176 = icmp sgt <2 x i32> %39, splat (i32 2), !dbg !68
  %177 = select <2 x i1> %176, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !69
  %178 = icmp slt <2 x i32> %39, splat (i32 3), !dbg !70
  %179 = select <2 x i1> %178, <2 x i32> %175, <2 x i32> zeroinitializer, !dbg !71
  %180 = add nsw <2 x i32> %177, %179, !dbg !72
  %181 = extractelement <2 x i32> %180, i64 0, !dbg !73
  %182 = extractelement <2 x i32> %180, i64 1, !dbg !74
  %183 = mul nsw i32 %181, %182, !dbg !75
  %184 = shufflevector <2 x i32> %39, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !74
  %185 = mul nsw <2 x i32> %180, %184, !dbg !74
  %shift = shufflevector <2 x i32> %185, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %186 = add nsw <2 x i32> %shift, %185
  %reass.add = extractelement <2 x i32> %186, i64 0
  %187 = add nsw i32 %40, %42, !dbg !33
  %reass.sub6 = sub nsw i32 %174, %187, !dbg !33
  %188 = add nsw i32 %reass.sub6, 1, !dbg !33
  %189 = add nsw i32 %188, %181, !dbg !73
  %190 = add nsw i32 %189, %182, !dbg !74
  %191 = add nsw i32 %190, %183, !dbg !76
  %192 = sub nsw i32 %191, %reass.add, !dbg !77
  %193 = sitofp i32 %192 to float, !dbg !78
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %193) #1, !dbg !78
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %193) #1, !dbg !78
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %193) #1, !dbg !78
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %193) #1, !dbg !78
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !79
  %199 = bitcast float %194 to i32, !dbg !80
  %200 = bitcast float %195 to i32, !dbg !80
  %201 = bitcast float %196 to i32, !dbg !80
  %202 = bitcast float %197 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %199, i32 %200, i32 %201, i32 %202, ptr addrspace(1) %198, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfntu6cndde4ushbqyrlqtkha7zezbdqw7r7nf3xbr65udxbe3i5.py", directory: "inductor_cache/fn")
!4 = !{ptr @triton_poi_fused_avg_pool2d_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_45, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_45", linkageName: "triton_poi_fused_avg_pool2d_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 40, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 37, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 38, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 38, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 38, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 24, column: 21, scope: !7)
!32 = !DILocation(line: 24, column: 29, scope: !7)
!33 = !DILocation(line: 79, column: 40, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 21, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 46, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 51, column: 46, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 21, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 45, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 36, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 42, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 20, scope: !7)
!57 = !DILocation(line: 70, column: 20, scope: !7)
!58 = !DILocation(line: 71, column: 43, scope: !7)
!59 = !DILocation(line: 72, column: 20, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 74, column: 43, scope: !7)
!62 = !DILocation(line: 75, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 20, scope: !7)
!64 = !DILocation(line: 77, column: 43, scope: !7)
!65 = !DILocation(line: 78, column: 20, scope: !7)
!66 = !DILocation(line: 79, column: 43, scope: !7)
!67 = !DILocation(line: 79, column: 124, scope: !7)
!68 = !DILocation(line: 79, column: 120, scope: !7)
!69 = !DILocation(line: 79, column: 112, scope: !7)
!70 = !DILocation(line: 79, column: 155, scope: !7)
!71 = !DILocation(line: 79, column: 143, scope: !7)
!72 = !DILocation(line: 79, column: 131, scope: !7)
!73 = !DILocation(line: 79, column: 48, scope: !7)
!74 = !DILocation(line: 79, column: 231, scope: !7)
!75 = !DILocation(line: 79, column: 105, scope: !7)
!76 = !DILocation(line: 79, column: 299, scope: !7)
!77 = !DILocation(line: 79, column: 357, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 25, scope: !7)
!80 = !DILocation(line: 81, column: 37, scope: !7)
!81 = !DILocation(line: 81, column: 4, scope: !7)
