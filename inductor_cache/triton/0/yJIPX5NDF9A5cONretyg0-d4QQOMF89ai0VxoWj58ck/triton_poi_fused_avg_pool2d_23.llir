; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_23(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 512, !dbg !14
  %11 = shl i32 %9, 4, !dbg !15
  %12 = or disjoint i32 %11, 16, !dbg !15
  %13 = sext i32 %11 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = sext i32 %12 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %10) #1, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %10) #1, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = or disjoint i32 %11, 1, !dbg !18
  %22 = or disjoint i32 %11, 17, !dbg !18
  %23 = sext i32 %21 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !19
  %25 = sext i32 %22 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %10) #1, !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #1, !dbg !20
  %30 = bitcast i32 %29 to float, !dbg !20
  %31 = or disjoint i32 %11, 2, !dbg !21
  %32 = or disjoint i32 %11, 18, !dbg !21
  %33 = sext i32 %31 to i64, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = sext i32 %32 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #1, !dbg !23
  %38 = bitcast i32 %37 to float, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %10) #1, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = or disjoint i32 %11, 3, !dbg !24
  %42 = or disjoint i32 %11, 19, !dbg !24
  %43 = sext i32 %41 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %42 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %10) #1, !dbg !26
  %48 = bitcast i32 %47 to float, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %10) #1, !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = or disjoint i32 %11, 4, !dbg !27
  %52 = or disjoint i32 %11, 20, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %10) #1, !dbg !29
  %58 = bitcast i32 %57 to float, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %10) #1, !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = or disjoint i32 %11, 5, !dbg !30
  %62 = or disjoint i32 %11, 21, !dbg !30
  %63 = sext i32 %61 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !31
  %65 = sext i32 %62 to i64, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %10) #1, !dbg !32
  %68 = bitcast i32 %67 to float, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %10) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = or disjoint i32 %11, 6, !dbg !33
  %72 = or disjoint i32 %11, 22, !dbg !33
  %73 = sext i32 %71 to i64, !dbg !34
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !34
  %75 = sext i32 %72 to i64, !dbg !34
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !34
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %10) #1, !dbg !35
  %78 = bitcast i32 %77 to float, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %10) #1, !dbg !35
  %80 = bitcast i32 %79 to float, !dbg !35
  %81 = or disjoint i32 %11, 7, !dbg !36
  %82 = or disjoint i32 %11, 23, !dbg !36
  %83 = sext i32 %81 to i64, !dbg !37
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !37
  %85 = sext i32 %82 to i64, !dbg !37
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !37
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %10) #1, !dbg !38
  %88 = bitcast i32 %87 to float, !dbg !38
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %10) #1, !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = or disjoint i32 %11, 8, !dbg !39
  %92 = or disjoint i32 %11, 24, !dbg !39
  %93 = sext i32 %91 to i64, !dbg !40
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !40
  %95 = sext i32 %92 to i64, !dbg !40
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !40
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %10) #1, !dbg !41
  %98 = bitcast i32 %97 to float, !dbg !41
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %10) #1, !dbg !41
  %100 = bitcast i32 %99 to float, !dbg !41
  %101 = or disjoint i32 %11, 9, !dbg !42
  %102 = or disjoint i32 %11, 25, !dbg !42
  %103 = sext i32 %101 to i64, !dbg !43
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !43
  %105 = sext i32 %102 to i64, !dbg !43
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !43
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %10) #1, !dbg !44
  %108 = bitcast i32 %107 to float, !dbg !44
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %10) #1, !dbg !44
  %110 = bitcast i32 %109 to float, !dbg !44
  %111 = or disjoint i32 %11, 10, !dbg !45
  %112 = or disjoint i32 %11, 26, !dbg !45
  %113 = sext i32 %111 to i64, !dbg !46
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !46
  %115 = sext i32 %112 to i64, !dbg !46
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !46
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %10) #1, !dbg !47
  %118 = bitcast i32 %117 to float, !dbg !47
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %10) #1, !dbg !47
  %120 = bitcast i32 %119 to float, !dbg !47
  %121 = or disjoint i32 %11, 11, !dbg !48
  %122 = or disjoint i32 %11, 27, !dbg !48
  %123 = sext i32 %121 to i64, !dbg !49
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !49
  %125 = sext i32 %122 to i64, !dbg !49
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !49
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %10) #1, !dbg !50
  %128 = bitcast i32 %127 to float, !dbg !50
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %10) #1, !dbg !50
  %130 = bitcast i32 %129 to float, !dbg !50
  %131 = or disjoint i32 %11, 12, !dbg !51
  %132 = or disjoint i32 %11, 28, !dbg !51
  %133 = sext i32 %131 to i64, !dbg !52
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !52
  %135 = sext i32 %132 to i64, !dbg !52
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !52
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %10) #1, !dbg !53
  %138 = bitcast i32 %137 to float, !dbg !53
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %10) #1, !dbg !53
  %140 = bitcast i32 %139 to float, !dbg !53
  %141 = or disjoint i32 %11, 13, !dbg !54
  %142 = or disjoint i32 %11, 29, !dbg !54
  %143 = sext i32 %141 to i64, !dbg !55
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !55
  %145 = sext i32 %142 to i64, !dbg !55
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !55
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %10) #1, !dbg !56
  %148 = bitcast i32 %147 to float, !dbg !56
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %10) #1, !dbg !56
  %150 = bitcast i32 %149 to float, !dbg !56
  %151 = or disjoint i32 %11, 14, !dbg !57
  %152 = or disjoint i32 %11, 30, !dbg !57
  %153 = sext i32 %151 to i64, !dbg !58
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !58
  %155 = sext i32 %152 to i64, !dbg !58
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !58
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %10) #1, !dbg !59
  %158 = bitcast i32 %157 to float, !dbg !59
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %10) #1, !dbg !59
  %160 = bitcast i32 %159 to float, !dbg !59
  %161 = or disjoint i32 %11, 15, !dbg !60
  %162 = or disjoint i32 %11, 31, !dbg !60
  %163 = sext i32 %161 to i64, !dbg !61
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !61
  %165 = sext i32 %162 to i64, !dbg !61
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !61
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %10) #1, !dbg !62
  %168 = bitcast i32 %167 to float, !dbg !62
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 %10) #1, !dbg !62
  %170 = bitcast i32 %169 to float, !dbg !62
  %171 = fadd float %18, %28, !dbg !63
  %172 = fadd float %20, %30, !dbg !63
  %173 = fadd float %171, %38, !dbg !64
  %174 = fadd float %172, %40, !dbg !64
  %175 = fadd float %173, %48, !dbg !65
  %176 = fadd float %174, %50, !dbg !65
  %177 = fadd float %175, %58, !dbg !66
  %178 = fadd float %176, %60, !dbg !66
  %179 = fadd float %177, %68, !dbg !67
  %180 = fadd float %178, %70, !dbg !67
  %181 = fadd float %179, %78, !dbg !68
  %182 = fadd float %180, %80, !dbg !68
  %183 = fadd float %181, %88, !dbg !69
  %184 = fadd float %182, %90, !dbg !69
  %185 = fadd float %183, %98, !dbg !70
  %186 = fadd float %184, %100, !dbg !70
  %187 = fadd float %185, %108, !dbg !71
  %188 = fadd float %186, %110, !dbg !71
  %189 = fadd float %187, %118, !dbg !72
  %190 = fadd float %188, %120, !dbg !72
  %191 = fadd float %189, %128, !dbg !73
  %192 = fadd float %190, %130, !dbg !73
  %193 = fadd float %191, %138, !dbg !74
  %194 = fadd float %192, %140, !dbg !74
  %195 = fadd float %193, %148, !dbg !75
  %196 = fadd float %194, %150, !dbg !75
  %197 = fadd float %195, %158, !dbg !76
  %198 = fadd float %196, %160, !dbg !76
  %199 = fadd float %197, %168, !dbg !77
  %200 = fadd float %198, %170, !dbg !77
  %201 = fmul float %199, 6.250000e-02, !dbg !78
  %202 = fmul float %200, 6.250000e-02, !dbg !78
  %203 = sext i32 %9 to i64, !dbg !79
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !79
  %205 = bitcast float %201 to i32, !dbg !80
  %206 = bitcast float %202 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %205, i32 %206, ptr addrspace(1) %204, i1 %10) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cso7la5tsyjoyxiry6o3utgww2fzddhrhils3ay2bvdhyma6jwl5.py", directory: "inductor_cache/so")
!4 = !{ptr @triton_poi_fused_avg_pool2d_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_23", linkageName: "triton_poi_fused_avg_pool2d_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 42, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 42, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 42, scope: !7)
!27 = !DILocation(line: 29, column: 34, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 42, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 35, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 43, scope: !7)
!36 = !DILocation(line: 32, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 43, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 31, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 35, column: 36, scope: !7)
!46 = !DILocation(line: 35, column: 31, scope: !7)
!47 = !DILocation(line: 35, column: 44, scope: !7)
!48 = !DILocation(line: 36, column: 36, scope: !7)
!49 = !DILocation(line: 36, column: 31, scope: !7)
!50 = !DILocation(line: 36, column: 44, scope: !7)
!51 = !DILocation(line: 37, column: 36, scope: !7)
!52 = !DILocation(line: 37, column: 31, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 38, column: 36, scope: !7)
!55 = !DILocation(line: 38, column: 31, scope: !7)
!56 = !DILocation(line: 38, column: 44, scope: !7)
!57 = !DILocation(line: 39, column: 36, scope: !7)
!58 = !DILocation(line: 39, column: 31, scope: !7)
!59 = !DILocation(line: 39, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 36, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 44, scope: !7)
!63 = !DILocation(line: 41, column: 18, scope: !7)
!64 = !DILocation(line: 42, column: 18, scope: !7)
!65 = !DILocation(line: 43, column: 18, scope: !7)
!66 = !DILocation(line: 44, column: 18, scope: !7)
!67 = !DILocation(line: 45, column: 19, scope: !7)
!68 = !DILocation(line: 46, column: 20, scope: !7)
!69 = !DILocation(line: 47, column: 20, scope: !7)
!70 = !DILocation(line: 48, column: 20, scope: !7)
!71 = !DILocation(line: 49, column: 20, scope: !7)
!72 = !DILocation(line: 50, column: 20, scope: !7)
!73 = !DILocation(line: 51, column: 20, scope: !7)
!74 = !DILocation(line: 52, column: 20, scope: !7)
!75 = !DILocation(line: 53, column: 20, scope: !7)
!76 = !DILocation(line: 54, column: 20, scope: !7)
!77 = !DILocation(line: 55, column: 20, scope: !7)
!78 = !DILocation(line: 57, column: 20, scope: !7)
!79 = !DILocation(line: 58, column: 25, scope: !7)
!80 = !DILocation(line: 58, column: 37, scope: !7)
!81 = !DILocation(line: 58, column: 4, scope: !7)
