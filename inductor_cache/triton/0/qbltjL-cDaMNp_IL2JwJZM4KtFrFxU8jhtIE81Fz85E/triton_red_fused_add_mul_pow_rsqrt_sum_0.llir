; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_mul_pow_rsqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = shl i32 %.fr, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 1, !dbg !12
  %11 = and i32 %9, 63, !dbg !12
  %12 = lshr i32 %9, 1, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = and i32 %9, 64, !dbg !12
  %15 = lshr exact i32 %14, 1, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %16, %8, !dbg !13
  %19 = icmp slt i32 %17, 384, !dbg !14
  %20 = icmp slt i32 %18, 384, !dbg !14
  %.lobit3 = lshr exact i32 %14, 6, !dbg !15
  %21 = or disjoint i32 %.lobit3, 2, !dbg !15
  %22 = or disjoint i32 %.lobit3, 4, !dbg !15
  %23 = or disjoint i32 %.lobit3, 6, !dbg !15
  %24 = shl nuw nsw i32 %10, 2, !dbg !15
  %25 = srem i32 %18, 96, !dbg !16
  %26 = mul nsw i32 %25, 864, !dbg !17
  %27 = srem i32 %17, 96, !dbg !18
  %28 = sub nsw i32 %17, %27, !dbg !18
  %29 = or disjoint i32 %26, %24
  %30 = shl nuw nsw i32 %10, 8
  %.reass17 = or disjoint i32 %30, %13
  %31 = or disjoint i32 %.reass17, %15
  %32 = and i32 %9, 127
  %.idx12 = shl nuw nsw i32 %10, 4
  %33 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx12
  %34 = getelementptr float, ptr addrspace(3) %33, i32 %31
  %35 = or disjoint i32 %31, 64
  %36 = lshr i32 %35, 6
  %37 = getelementptr float, ptr addrspace(3) @global_smem, i32 %36
  %38 = getelementptr float, ptr addrspace(3) %37, i32 %35
  %39 = or disjoint i32 %31, 128
  %40 = lshr i32 %39, 6
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i32 %40
  %42 = getelementptr float, ptr addrspace(3) %41, i32 %39
  %43 = or disjoint i32 %31, 192
  %44 = lshr i32 %43, 6
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i32 %44
  %46 = getelementptr float, ptr addrspace(3) %45, i32 %43
  %47 = lshr i32 %32, 6
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %47
  %49 = getelementptr inbounds float, ptr addrspace(3) %48, i32 %32
  %50 = or disjoint i32 %32, 128
  %51 = lshr i32 %50, 6
  %52 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %51
  %53 = getelementptr inbounds float, ptr addrspace(3) %52, i32 %50
  %54 = or disjoint i32 %32, 256
  %55 = lshr i32 %54, 6
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %55
  %57 = getelementptr inbounds float, ptr addrspace(3) %56, i32 %54
  %58 = or disjoint i32 %32, 384
  %59 = lshr i32 %58, 6
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %58
  %62 = sext i32 %29 to i64, !dbg !19
  %invariant.gep = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !19
  %63 = insertelement <4 x i1> poison, i1 %19, i64 0, !dbg !20
  %64 = shufflevector <4 x i1> %63, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !20
  br label %65, !dbg !19

65:                                               ; preds = %6, %65
  %indvars.iv = phi i64 [ 0, %6 ], [ %indvars.iv.next, %65 ]
  %66 = phi <4 x float> [ zeroinitializer, %6 ], [ %121, %65 ]
  %67 = trunc i64 %indvars.iv to i32, !dbg !21
  %68 = or disjoint i32 %.lobit3, %67, !dbg !21
  %69 = udiv i32 %68, 9, !dbg !21
  %70 = trunc i64 %indvars.iv to i32, !dbg !21
  %71 = or disjoint i32 %21, %70, !dbg !21
  %72 = udiv i32 %71, 9, !dbg !21
  %73 = trunc i64 %indvars.iv to i32, !dbg !21
  %74 = or disjoint i32 %22, %73, !dbg !21
  %75 = udiv i32 %74, 9, !dbg !21
  %76 = trunc i64 %indvars.iv to i32, !dbg !21
  %77 = or disjoint i32 %23, %76, !dbg !21
  %78 = udiv i32 %77, 9, !dbg !21
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !22
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %84 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %84, i1 true) #5, !dbg !23
  %85 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %85, i1 true) #5, !dbg !23
  %86 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %86, i1 true) #5, !dbg !23
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %87, i1 true) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %88 = load float, ptr addrspace(3) %49, align 4, !dbg !23
  %89 = load float, ptr addrspace(3) %53, align 4, !dbg !23
  %90 = load float, ptr addrspace(3) %57, align 4, !dbg !23
  %91 = load float, ptr addrspace(3) %61, align 4, !dbg !23
  %92 = add i32 %69, %28, !dbg !24
  %93 = add i32 %72, %28, !dbg !24
  %94 = add i32 %75, %28, !dbg !24
  %95 = add i32 %78, %28, !dbg !24
  %96 = sext i32 %92 to i64, !dbg !25
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !25
  %98 = sext i32 %93 to i64, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !25
  %100 = sext i32 %94 to i64, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !25
  %102 = sext i32 %95 to i64, !dbg !25
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !25
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %108 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !26
  %109 = insertelement <4 x i32> %108, i32 %105, i64 1, !dbg !26
  %110 = insertelement <4 x i32> %109, i32 %106, i64 2, !dbg !26
  %111 = insertelement <4 x i32> %110, i32 %107, i64 3, !dbg !26
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !26
  %113 = fadd <4 x float> %112, splat (float 1.000000e+00), !dbg !27
  %114 = insertelement <4 x float> poison, float %88, i64 0, !dbg !28
  %115 = insertelement <4 x float> %114, float %89, i64 1, !dbg !28
  %116 = insertelement <4 x float> %115, float %90, i64 2, !dbg !28
  %117 = insertelement <4 x float> %116, float %91, i64 3, !dbg !28
  %118 = fmul <4 x float> %117, %113, !dbg !28
  %119 = fmul <4 x float> %118, %118, !dbg !29
  %120 = fadd <4 x float> %66, %119, !dbg !30
  %121 = select <4 x i1> %64, <4 x float> %120, <4 x float> %66, !dbg !20
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !19
  %122 = icmp samesign ult i64 %indvars.iv, 856, !dbg !19
  br i1 %122, label %65, label %123, !dbg !19

123:                                              ; preds = %65
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %shift = shufflevector <4 x float> %121, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !35
  %124 = fadd <4 x float> %121, %shift, !dbg !35
  %shift37 = shufflevector <4 x float> %121, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !35
  %125 = fadd <4 x float> %shift37, %124, !dbg !35
  %shift38 = shufflevector <4 x float> %121, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !35
  %126 = fadd <4 x float> %shift38, %125, !dbg !35
  %127 = extractelement <4 x float> %126, i64 0, !dbg !35
  %128 = lshr i32 %9, 6, !dbg !31
  %129 = and i32 %128, 1, !dbg !31
  %130 = shl nuw nsw i32 %11, 1, !dbg !31
  %131 = or disjoint i32 %130, %129, !dbg !31
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !31
  %133 = bitcast float %127 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %134 = icmp slt i32 %9, 128, !dbg !31
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !31
  %136 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #5, !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 1, i32 31), !dbg !31
  %139 = bitcast i32 %138 to float, !dbg !31
  %140 = fadd float %137, %139, !dbg !35
  %141 = icmp eq i32 %10, 0, !dbg !31
  %142 = and i1 %134, %141, !dbg !31
  %143 = bitcast float %140 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %143, i1 %142) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !31
  %145 = load float, ptr addrspace(3) %144, align 8, !dbg !31
  %146 = fadd float %145, 0x3E45798EE0000000, !dbg !37
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !38
  %.not.i = icmp eq i32 %147, 0, !dbg !38
  br i1 %.not.i, label %150, label %148, !dbg !38

148:                                              ; preds = %123
  %149 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %146), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

150:                                              ; preds = %123
  %151 = tail call float @llvm.nvvm.rsqrt.approx.f(float %146), !dbg !38
  br label %__nv_rsqrtf.exit, !dbg !38

__nv_rsqrtf.exit:                                 ; preds = %148, %150
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %152 = sext i32 %17 to i64, !dbg !40
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !40
  %154 = icmp eq i32 %129, 0, !dbg !41
  %155 = bitcast float %.0.i to i32, !dbg !41
  %156 = and i1 %154, %19, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %153, i1 %156) #5, !dbg !41
  %157 = mul i32 %18, 864, !dbg !42
  %158 = shl i32 %9, 3
  %159 = and i32 %158, 504
  %160 = or disjoint i32 %159, %.lobit3
  %161 = shl i32 %9, 2
  %162 = and i32 %161, 508
  %163 = lshr exact i32 %159, 1
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %160
  %166 = or disjoint i32 %160, 2
  %167 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %166
  %168 = or disjoint i32 %160, 4
  %169 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %168
  %170 = or disjoint i32 %160, 6
  %171 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %170
  %172 = lshr exact i32 %161, 1
  %173 = and i32 %172, 252
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %162
  %176 = zext nneg i32 %24 to i64, !dbg !43
  %177 = sext i32 %26 to i64, !dbg !43
  %invariant.gep32 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !43
  %178 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 4
  %179 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 8
  %180 = getelementptr inbounds i8, ptr addrspace(3) %175, i32 12
  br label %181, !dbg !43

181:                                              ; preds = %__nv_rsqrtf.exit, %181
  %indvars.iv27 = phi i64 [ 0, %__nv_rsqrtf.exit ], [ %indvars.iv.next28, %181 ]
  %182 = or disjoint i64 %indvars.iv27, %176, !dbg !44
  %183 = trunc i64 %indvars.iv27 to i32, !dbg !45
  %184 = or disjoint i32 %.lobit3, %183, !dbg !45
  %185 = udiv i32 %184, 9, !dbg !45
  %186 = trunc i64 %indvars.iv27 to i32, !dbg !45
  %187 = or disjoint i32 %21, %186, !dbg !45
  %188 = udiv i32 %187, 9, !dbg !45
  %189 = trunc i64 %indvars.iv27 to i32, !dbg !45
  %190 = or disjoint i32 %22, %189, !dbg !45
  %191 = udiv i32 %190, 9, !dbg !45
  %192 = trunc i64 %indvars.iv27 to i32, !dbg !45
  %193 = or disjoint i32 %23, %192, !dbg !45
  %194 = udiv i32 %193, 9, !dbg !45
  %gep33 = getelementptr float, ptr addrspace(1) %invariant.gep32, i64 %182, !dbg !46
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep33, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !47
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !47
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !47
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !47
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %200 = insertelement <1 x i32> poison, i32 %196, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %200, i1 true) #5, !dbg !47
  %201 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %38, <1 x i32> %201, i1 true) #5, !dbg !47
  %202 = insertelement <1 x i32> poison, i32 %198, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %202, i1 true) #5, !dbg !47
  %203 = insertelement <1 x i32> poison, i32 %199, i64 0, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %203, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %204 = load float, ptr addrspace(3) %49, align 4, !dbg !47
  %205 = load float, ptr addrspace(3) %53, align 4, !dbg !47
  %206 = load float, ptr addrspace(3) %57, align 4, !dbg !47
  %207 = load float, ptr addrspace(3) %61, align 4, !dbg !47
  %208 = add i32 %185, %28, !dbg !48
  %209 = add i32 %188, %28, !dbg !48
  %210 = add i32 %191, %28, !dbg !48
  %211 = add i32 %194, %28, !dbg !48
  %212 = sext i32 %208 to i64, !dbg !49
  %213 = getelementptr float, ptr addrspace(1) %2, i64 %212, !dbg !49
  %214 = sext i32 %209 to i64, !dbg !49
  %215 = getelementptr float, ptr addrspace(1) %2, i64 %214, !dbg !49
  %216 = sext i32 %210 to i64, !dbg !49
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !49
  %218 = sext i32 %211 to i64, !dbg !49
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !49
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %213, i1 %19, i32 0, i1 %19) #5, !dbg !50
  %221 = bitcast i32 %220 to float, !dbg !50
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %215, i1 %19, i32 0, i1 %19) #5, !dbg !50
  %223 = bitcast i32 %222 to float, !dbg !50
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %217, i1 %19, i32 0, i1 %19) #5, !dbg !50
  %225 = bitcast i32 %224 to float, !dbg !50
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %19, i32 0, i1 %19) #5, !dbg !50
  %227 = bitcast i32 %226 to float, !dbg !50
  %228 = fadd float %221, 1.000000e+00, !dbg !51
  %229 = fadd float %223, 1.000000e+00, !dbg !51
  %230 = fadd float %225, 1.000000e+00, !dbg !51
  %231 = fadd float %227, 1.000000e+00, !dbg !51
  %232 = fmul float %204, %228, !dbg !52
  %233 = fmul float %205, %229, !dbg !52
  %234 = fmul float %206, %230, !dbg !52
  %235 = fmul float %207, %231, !dbg !52
  %236 = fmul float %.0.i, %232, !dbg !53
  %237 = fmul float %.0.i, %233, !dbg !53
  %238 = fmul float %.0.i, %234, !dbg !53
  %239 = fmul float %.0.i, %235, !dbg !53
  %240 = trunc nuw nsw i64 %182 to i32, !dbg !54
  %241 = add i32 %157, %240, !dbg !54
  %242 = sext i32 %241 to i64, !dbg !55
  %243 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %244 = bitcast float %236 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %244, i1 true) #5, !dbg !56
  %245 = bitcast float %237 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %245, i1 true) #5, !dbg !56
  %246 = bitcast float %238 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %246, i1 true) #5, !dbg !56
  %247 = bitcast float %239 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %247, i1 true) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %.extract = load i32, ptr addrspace(3) %175, align 16, !dbg !56
  %.extract9 = load i32, ptr addrspace(3) %178, align 4, !dbg !56
  %.extract10 = load i32, ptr addrspace(3) %179, align 8, !dbg !56
  %.extract11 = load i32, ptr addrspace(3) %180, align 4, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %243, i1 %20) #5, !dbg !56
  %indvars.iv.next28 = add nuw nsw i64 %indvars.iv27, 8, !dbg !43
  %248 = icmp samesign ult i64 %indvars.iv27, 856, !dbg !43
  br i1 %248, label %181, label %249, !dbg !43

249:                                              ; preds = %181
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chky3kvupnutlibt3fn5qkuriskz35kgbiukcfkzdwg5n7zjqvf4.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_pow_rsqrt_sum_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_pow_rsqrt_sum_0", linkageName: "triton_red_fused_add_mul_pow_rsqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 35, column: 43, scope: !7)
!18 = !DILocation(line: 36, column: 42, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 43, column: 46, scope: !7)
!21 = !DILocation(line: 34, column: 23, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 48, scope: !7)
!24 = !DILocation(line: 36, column: 39, scope: !7)
!25 = !DILocation(line: 36, column: 34, scope: !7)
!26 = !DILocation(line: 36, column: 47, scope: !7)
!27 = !DILocation(line: 38, column: 22, scope: !7)
!28 = !DILocation(line: 39, column: 22, scope: !7)
!29 = !DILocation(line: 40, column: 22, scope: !7)
!30 = !DILocation(line: 42, column: 23, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 44, column: 25, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 28, scope: !7)
!39 = !DILocation(line: 48, column: 4, scope: !7)
!40 = !DILocation(line: 49, column: 28, scope: !7)
!41 = !DILocation(line: 49, column: 40, scope: !7)
!42 = !DILocation(line: 61, column: 38, scope: !7)
!43 = !DILocation(line: 50, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 27, scope: !7)
!45 = !DILocation(line: 54, column: 23, scope: !7)
!46 = !DILocation(line: 55, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 49, scope: !7)
!48 = !DILocation(line: 56, column: 40, scope: !7)
!49 = !DILocation(line: 56, column: 35, scope: !7)
!50 = !DILocation(line: 56, column: 48, scope: !7)
!51 = !DILocation(line: 58, column: 24, scope: !7)
!52 = !DILocation(line: 59, column: 24, scope: !7)
!53 = !DILocation(line: 60, column: 24, scope: !7)
!54 = !DILocation(line: 61, column: 34, scope: !7)
!55 = !DILocation(line: 61, column: 29, scope: !7)
!56 = !DILocation(line: 61, column: 50, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
