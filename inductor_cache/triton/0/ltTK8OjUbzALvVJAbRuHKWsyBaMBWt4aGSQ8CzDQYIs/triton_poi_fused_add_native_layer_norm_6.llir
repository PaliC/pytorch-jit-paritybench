; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %14, 32, !dbg !12
  %17 = or disjoint i32 %14, 48, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %17, !dbg !13
  %24 = icmp slt i32 %20, 384, !dbg !14
  %25 = icmp slt i32 %21, 384, !dbg !14
  %26 = icmp slt i32 %22, 384, !dbg !14
  %27 = icmp slt i32 %23, 384, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %29 = shl i32 %28, 6, !dbg !16
  %30 = or disjoint i32 %29, %19, !dbg !17
  %31 = or disjoint i32 %30, 1, !dbg !17
  %32 = or disjoint i32 %30, 2, !dbg !17
  %33 = or disjoint i32 %30, 3, !dbg !17
  %34 = icmp slt i32 %30, 256, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %35 = sdiv i32 %.frozen, 96, !dbg !19
  %36 = mul i32 %35, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen82 = freeze i32 %21, !dbg !19
  %37 = sdiv i32 %.frozen82, 96, !dbg !19
  %38 = mul i32 %37, 96, !dbg !20
  %.decomposed83 = sub i32 %.frozen82, %38, !dbg !20
  %.frozen84 = freeze i32 %22, !dbg !19
  %39 = sdiv i32 %.frozen84, 96, !dbg !19
  %40 = mul i32 %39, 96, !dbg !20
  %.decomposed85 = sub i32 %.frozen84, %40, !dbg !20
  %.frozen86 = freeze i32 %23, !dbg !19
  %41 = sdiv i32 %.frozen86, 96, !dbg !19
  %42 = mul i32 %41, 96, !dbg !20
  %.decomposed87 = sub i32 %.frozen86, %42, !dbg !20
  %.frozen88 = freeze i32 %30, !dbg !21
  %43 = sdiv i32 %.frozen88, 16, !dbg !21
  %44 = mul i32 %43, 16, !dbg !22
  %.decomposed89 = sub i32 %.frozen88, %44, !dbg !22
  %45 = srem i32 %31, 16, !dbg !22
  %46 = srem i32 %32, 16, !dbg !22
  %47 = srem i32 %33, 16, !dbg !22
  %48 = shl i32 %20, 8, !dbg !23
  %49 = shl i32 %21, 8, !dbg !23
  %50 = shl i32 %22, 8, !dbg !23
  %51 = shl i32 %23, 8, !dbg !23
  %52 = add i32 %30, %48, !dbg !24
  %53 = add i32 %30, %49, !dbg !24
  %54 = add i32 %30, %50, !dbg !24
  %55 = add i32 %30, %51, !dbg !24
  %56 = sext i32 %52 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %53 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %54 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = and i1 %24, %34, !dbg !26
  %65 = and i1 %25, %34, !dbg !26
  %66 = and i1 %26, %34, !dbg !26
  %67 = and i1 %27, %34, !dbg !26
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %64) #4, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %65) #4, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %66) #4, !dbg !27
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %67) #4, !dbg !27
  %72 = sext i32 %.decomposed to i64, !dbg !28
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !28
  %74 = sext i32 %.decomposed83 to i64, !dbg !28
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !28
  %76 = sext i32 %.decomposed85 to i64, !dbg !28
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !28
  %78 = sext i32 %.decomposed87 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #4, !dbg !29
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #4, !dbg !29
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #4, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %24) #4, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #4, !dbg !29
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #4, !dbg !29
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #4, !dbg !29
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %25) #4, !dbg !29
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #4, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #4, !dbg !29
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #4, !dbg !29
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %26) #4, !dbg !29
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #4, !dbg !29
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #4, !dbg !29
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #4, !dbg !29
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #4, !dbg !29
  %96 = shl nsw i32 %.decomposed, 8, !dbg !30
  %97 = shl nsw i32 %.decomposed83, 8, !dbg !30
  %98 = shl nsw i32 %.decomposed85, 8, !dbg !30
  %99 = shl nsw i32 %.decomposed87, 8, !dbg !30
  %100 = add i32 %96, %30, !dbg !31
  %101 = add i32 %97, %30, !dbg !31
  %102 = add i32 %98, %30, !dbg !31
  %103 = add i32 %99, %30, !dbg !31
  %104 = sext i32 %100 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !32
  %106 = sext i32 %101 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !32
  %108 = sext i32 %102 to i64, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !32
  %110 = sext i32 %103 to i64, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !32
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %64) #4, !dbg !33
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %65) #4, !dbg !33
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %66) #4, !dbg !33
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %67) #4, !dbg !33
  %116 = srem i32 %43, 8, !dbg !34
  %117 = shl nsw i32 %116, 3, !dbg !35
  %118 = shl nsw i32 %.decomposed, 6, !dbg !36
  %119 = shl nsw i32 %.decomposed83, 6, !dbg !36
  %120 = shl nsw i32 %.decomposed85, 6, !dbg !36
  %121 = shl nsw i32 %.decomposed87, 6, !dbg !36
  %122 = add nsw i32 %117, %118, !dbg !37
  %123 = add nsw i32 %117, %119, !dbg !37
  %124 = add nsw i32 %117, %120, !dbg !37
  %125 = add nsw i32 %117, %121, !dbg !37
  %.lhs.trunc = trunc nsw i32 %.decomposed89 to i8, !dbg !38
  %126 = srem i8 %.lhs.trunc, 8, !dbg !38
  %.sext = sext i8 %126 to i32, !dbg !38
  %.lhs.trunc76 = trunc nsw i32 %45 to i8, !dbg !38
  %127 = srem i8 %.lhs.trunc76, 8, !dbg !38
  %.sext77 = sext i8 %127 to i32, !dbg !38
  %.lhs.trunc78 = trunc nsw i32 %46 to i8, !dbg !38
  %128 = srem i8 %.lhs.trunc78, 8, !dbg !38
  %.sext79 = sext i8 %128 to i32, !dbg !38
  %.lhs.trunc80 = trunc nsw i32 %47 to i8, !dbg !38
  %129 = srem i8 %.lhs.trunc80, 8, !dbg !38
  %.sext81 = sext i8 %129 to i32, !dbg !38
  %130 = add nsw i32 %122, %.sext, !dbg !39
  %131 = add nsw i32 %122, %.sext77, !dbg !39
  %132 = add nsw i32 %122, %.sext79, !dbg !39
  %133 = add nsw i32 %122, %.sext81, !dbg !39
  %134 = add nsw i32 %123, %.sext, !dbg !39
  %135 = add nsw i32 %123, %.sext77, !dbg !39
  %136 = add nsw i32 %123, %.sext79, !dbg !39
  %137 = add nsw i32 %123, %.sext81, !dbg !39
  %138 = add nsw i32 %124, %.sext, !dbg !39
  %139 = add nsw i32 %124, %.sext77, !dbg !39
  %140 = add nsw i32 %124, %.sext79, !dbg !39
  %141 = add nsw i32 %124, %.sext81, !dbg !39
  %142 = add nsw i32 %125, %.sext, !dbg !39
  %143 = add nsw i32 %125, %.sext77, !dbg !39
  %144 = add nsw i32 %125, %.sext79, !dbg !39
  %145 = add nsw i32 %125, %.sext81, !dbg !39
  %146 = sext i32 %130 to i64, !dbg !40
  %147 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !40
  %148 = sext i32 %131 to i64, !dbg !40
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !40
  %150 = sext i32 %132 to i64, !dbg !40
  %151 = getelementptr float, ptr addrspace(1) %3, i64 %150, !dbg !40
  %152 = sext i32 %133 to i64, !dbg !40
  %153 = getelementptr float, ptr addrspace(1) %3, i64 %152, !dbg !40
  %154 = sext i32 %134 to i64, !dbg !40
  %155 = getelementptr float, ptr addrspace(1) %3, i64 %154, !dbg !40
  %156 = sext i32 %135 to i64, !dbg !40
  %157 = getelementptr float, ptr addrspace(1) %3, i64 %156, !dbg !40
  %158 = sext i32 %136 to i64, !dbg !40
  %159 = getelementptr float, ptr addrspace(1) %3, i64 %158, !dbg !40
  %160 = sext i32 %137 to i64, !dbg !40
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %160, !dbg !40
  %162 = sext i32 %138 to i64, !dbg !40
  %163 = getelementptr float, ptr addrspace(1) %3, i64 %162, !dbg !40
  %164 = sext i32 %139 to i64, !dbg !40
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %164, !dbg !40
  %166 = sext i32 %140 to i64, !dbg !40
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %166, !dbg !40
  %168 = sext i32 %141 to i64, !dbg !40
  %169 = getelementptr float, ptr addrspace(1) %3, i64 %168, !dbg !40
  %170 = sext i32 %142 to i64, !dbg !40
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !40
  %172 = sext i32 %143 to i64, !dbg !40
  %173 = getelementptr float, ptr addrspace(1) %3, i64 %172, !dbg !40
  %174 = sext i32 %144 to i64, !dbg !40
  %175 = getelementptr float, ptr addrspace(1) %3, i64 %174, !dbg !40
  %176 = sext i32 %145 to i64, !dbg !40
  %177 = getelementptr float, ptr addrspace(1) %3, i64 %176, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %64) #4, !dbg !41
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %64) #4, !dbg !41
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %64) #4, !dbg !41
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %64) #4, !dbg !41
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %65) #4, !dbg !41
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %65) #4, !dbg !41
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %65) #4, !dbg !41
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %65) #4, !dbg !41
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %66) #4, !dbg !41
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %66) #4, !dbg !41
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %66) #4, !dbg !41
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %66) #4, !dbg !41
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %67) #4, !dbg !41
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 %67) #4, !dbg !41
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %67) #4, !dbg !41
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %67) #4, !dbg !41
  %194 = shl i32 %35, 8, !dbg !42
  %195 = shl i32 %37, 8, !dbg !42
  %196 = shl i32 %39, 8, !dbg !42
  %197 = shl i32 %41, 8, !dbg !42
  %198 = add i32 %194, %30, !dbg !43
  %199 = add i32 %195, %30, !dbg !43
  %200 = add i32 %196, %30, !dbg !43
  %201 = add i32 %197, %30, !dbg !43
  %202 = sext i32 %198 to i64, !dbg !44
  %203 = getelementptr float, ptr addrspace(1) %4, i64 %202, !dbg !44
  %204 = sext i32 %199 to i64, !dbg !44
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %204, !dbg !44
  %206 = sext i32 %200 to i64, !dbg !44
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %206, !dbg !44
  %208 = sext i32 %201 to i64, !dbg !44
  %209 = getelementptr float, ptr addrspace(1) %4, i64 %208, !dbg !44
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %203, i1 %64) #4, !dbg !45
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %205, i1 %65) #4, !dbg !45
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %207, i1 %66) #4, !dbg !45
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %209, i1 %67) #4, !dbg !45
  %214 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !46
  %215 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !46
  %216 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !46
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !46
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %214, i1 %64) #4, !dbg !47
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !47
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !47
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !47
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !47
  %223 = bitcast i32 %219 to float, !dbg !47
  %224 = bitcast i32 %220 to float, !dbg !47
  %225 = bitcast i32 %221 to float, !dbg !47
  %226 = bitcast i32 %222 to float, !dbg !47
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %215, i1 %65) #4, !dbg !47
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !47
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !47
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !47
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !47
  %232 = bitcast i32 %228 to float, !dbg !47
  %233 = bitcast i32 %229 to float, !dbg !47
  %234 = bitcast i32 %230 to float, !dbg !47
  %235 = bitcast i32 %231 to float, !dbg !47
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %66) #4, !dbg !47
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !47
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !47
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !47
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !47
  %241 = bitcast i32 %237 to float, !dbg !47
  %242 = bitcast i32 %238 to float, !dbg !47
  %243 = bitcast i32 %239 to float, !dbg !47
  %244 = bitcast i32 %240 to float, !dbg !47
  %245 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %67) #4, !dbg !47
  %246 = extractvalue { i32, i32, i32, i32 } %245, 0, !dbg !47
  %247 = extractvalue { i32, i32, i32, i32 } %245, 1, !dbg !47
  %248 = extractvalue { i32, i32, i32, i32 } %245, 2, !dbg !47
  %249 = extractvalue { i32, i32, i32, i32 } %245, 3, !dbg !47
  %250 = bitcast i32 %246 to float, !dbg !47
  %251 = bitcast i32 %247 to float, !dbg !47
  %252 = bitcast i32 %248 to float, !dbg !47
  %253 = bitcast i32 %249 to float, !dbg !47
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 9.600000e+01) #4, !dbg !48
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float 9.600000e+01) #4, !dbg !48
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float 9.600000e+01) #4, !dbg !48
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float 9.600000e+01) #4, !dbg !48
  %258 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float 9.600000e+01) #4, !dbg !48
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float 9.600000e+01) #4, !dbg !48
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float 9.600000e+01) #4, !dbg !48
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %235, float 9.600000e+01) #4, !dbg !48
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float 9.600000e+01) #4, !dbg !48
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float 9.600000e+01) #4, !dbg !48
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 9.600000e+01) #4, !dbg !48
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float 9.600000e+01) #4, !dbg !48
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %250, float 9.600000e+01) #4, !dbg !48
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %251, float 9.600000e+01) #4, !dbg !48
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float 9.600000e+01) #4, !dbg !48
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float 9.600000e+01) #4, !dbg !48
  %270 = fadd float %254, 0x3EB0C6F7A0000000, !dbg !49
  %271 = fadd float %255, 0x3EB0C6F7A0000000, !dbg !49
  %272 = fadd float %256, 0x3EB0C6F7A0000000, !dbg !49
  %273 = fadd float %257, 0x3EB0C6F7A0000000, !dbg !49
  %274 = fadd float %258, 0x3EB0C6F7A0000000, !dbg !49
  %275 = fadd float %259, 0x3EB0C6F7A0000000, !dbg !49
  %276 = fadd float %260, 0x3EB0C6F7A0000000, !dbg !49
  %277 = fadd float %261, 0x3EB0C6F7A0000000, !dbg !49
  %278 = fadd float %262, 0x3EB0C6F7A0000000, !dbg !49
  %279 = fadd float %263, 0x3EB0C6F7A0000000, !dbg !49
  %280 = fadd float %264, 0x3EB0C6F7A0000000, !dbg !49
  %281 = fadd float %265, 0x3EB0C6F7A0000000, !dbg !49
  %282 = fadd float %266, 0x3EB0C6F7A0000000, !dbg !49
  %283 = fadd float %267, 0x3EB0C6F7A0000000, !dbg !49
  %284 = fadd float %268, 0x3EB0C6F7A0000000, !dbg !49
  %285 = fadd float %269, 0x3EB0C6F7A0000000, !dbg !49
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %286, 0, !dbg !50
  br i1 %.not.i, label %289, label %287, !dbg !50

287:                                              ; preds = %9
  %288 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %270), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

289:                                              ; preds = %9
  %290 = tail call float @llvm.nvvm.rsqrt.approx.f(float %270), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %287, %289
  %.0.i = phi float [ %288, %287 ], [ %290, %289 ], !dbg !50
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i31 = icmp eq i32 %291, 0, !dbg !50
  br i1 %.not.i31, label %294, label %292, !dbg !50

292:                                              ; preds = %__nv_rsqrtf.exit
  %293 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %271), !dbg !50
  br label %__nv_rsqrtf.exit33, !dbg !50

294:                                              ; preds = %__nv_rsqrtf.exit
  %295 = tail call float @llvm.nvvm.rsqrt.approx.f(float %271), !dbg !50
  br label %__nv_rsqrtf.exit33, !dbg !50

__nv_rsqrtf.exit33:                               ; preds = %292, %294
  %.0.i32 = phi float [ %293, %292 ], [ %295, %294 ], !dbg !50
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i34 = icmp eq i32 %296, 0, !dbg !50
  br i1 %.not.i34, label %299, label %297, !dbg !50

297:                                              ; preds = %__nv_rsqrtf.exit33
  %298 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %272), !dbg !50
  br label %__nv_rsqrtf.exit36, !dbg !50

299:                                              ; preds = %__nv_rsqrtf.exit33
  %300 = tail call float @llvm.nvvm.rsqrt.approx.f(float %272), !dbg !50
  br label %__nv_rsqrtf.exit36, !dbg !50

__nv_rsqrtf.exit36:                               ; preds = %297, %299
  %.0.i35 = phi float [ %298, %297 ], [ %300, %299 ], !dbg !50
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i37 = icmp eq i32 %301, 0, !dbg !50
  br i1 %.not.i37, label %304, label %302, !dbg !50

302:                                              ; preds = %__nv_rsqrtf.exit36
  %303 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %273), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

304:                                              ; preds = %__nv_rsqrtf.exit36
  %305 = tail call float @llvm.nvvm.rsqrt.approx.f(float %273), !dbg !50
  br label %__nv_rsqrtf.exit39, !dbg !50

__nv_rsqrtf.exit39:                               ; preds = %302, %304
  %.0.i38 = phi float [ %303, %302 ], [ %305, %304 ], !dbg !50
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i40 = icmp eq i32 %306, 0, !dbg !50
  br i1 %.not.i40, label %309, label %307, !dbg !50

307:                                              ; preds = %__nv_rsqrtf.exit39
  %308 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %274), !dbg !50
  br label %__nv_rsqrtf.exit42, !dbg !50

309:                                              ; preds = %__nv_rsqrtf.exit39
  %310 = tail call float @llvm.nvvm.rsqrt.approx.f(float %274), !dbg !50
  br label %__nv_rsqrtf.exit42, !dbg !50

__nv_rsqrtf.exit42:                               ; preds = %307, %309
  %.0.i41 = phi float [ %308, %307 ], [ %310, %309 ], !dbg !50
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i43 = icmp eq i32 %311, 0, !dbg !50
  br i1 %.not.i43, label %314, label %312, !dbg !50

312:                                              ; preds = %__nv_rsqrtf.exit42
  %313 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %275), !dbg !50
  br label %__nv_rsqrtf.exit45, !dbg !50

314:                                              ; preds = %__nv_rsqrtf.exit42
  %315 = tail call float @llvm.nvvm.rsqrt.approx.f(float %275), !dbg !50
  br label %__nv_rsqrtf.exit45, !dbg !50

__nv_rsqrtf.exit45:                               ; preds = %312, %314
  %.0.i44 = phi float [ %313, %312 ], [ %315, %314 ], !dbg !50
  %316 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i46 = icmp eq i32 %316, 0, !dbg !50
  br i1 %.not.i46, label %319, label %317, !dbg !50

317:                                              ; preds = %__nv_rsqrtf.exit45
  %318 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %276), !dbg !50
  br label %__nv_rsqrtf.exit48, !dbg !50

319:                                              ; preds = %__nv_rsqrtf.exit45
  %320 = tail call float @llvm.nvvm.rsqrt.approx.f(float %276), !dbg !50
  br label %__nv_rsqrtf.exit48, !dbg !50

__nv_rsqrtf.exit48:                               ; preds = %317, %319
  %.0.i47 = phi float [ %318, %317 ], [ %320, %319 ], !dbg !50
  %321 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i49 = icmp eq i32 %321, 0, !dbg !50
  br i1 %.not.i49, label %324, label %322, !dbg !50

322:                                              ; preds = %__nv_rsqrtf.exit48
  %323 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %277), !dbg !50
  br label %__nv_rsqrtf.exit51, !dbg !50

324:                                              ; preds = %__nv_rsqrtf.exit48
  %325 = tail call float @llvm.nvvm.rsqrt.approx.f(float %277), !dbg !50
  br label %__nv_rsqrtf.exit51, !dbg !50

__nv_rsqrtf.exit51:                               ; preds = %322, %324
  %.0.i50 = phi float [ %323, %322 ], [ %325, %324 ], !dbg !50
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i52 = icmp eq i32 %326, 0, !dbg !50
  br i1 %.not.i52, label %329, label %327, !dbg !50

327:                                              ; preds = %__nv_rsqrtf.exit51
  %328 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %278), !dbg !50
  br label %__nv_rsqrtf.exit54, !dbg !50

329:                                              ; preds = %__nv_rsqrtf.exit51
  %330 = tail call float @llvm.nvvm.rsqrt.approx.f(float %278), !dbg !50
  br label %__nv_rsqrtf.exit54, !dbg !50

__nv_rsqrtf.exit54:                               ; preds = %327, %329
  %.0.i53 = phi float [ %328, %327 ], [ %330, %329 ], !dbg !50
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i55 = icmp eq i32 %331, 0, !dbg !50
  br i1 %.not.i55, label %334, label %332, !dbg !50

332:                                              ; preds = %__nv_rsqrtf.exit54
  %333 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %279), !dbg !50
  br label %__nv_rsqrtf.exit57, !dbg !50

334:                                              ; preds = %__nv_rsqrtf.exit54
  %335 = tail call float @llvm.nvvm.rsqrt.approx.f(float %279), !dbg !50
  br label %__nv_rsqrtf.exit57, !dbg !50

__nv_rsqrtf.exit57:                               ; preds = %332, %334
  %.0.i56 = phi float [ %333, %332 ], [ %335, %334 ], !dbg !50
  %336 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i58 = icmp eq i32 %336, 0, !dbg !50
  br i1 %.not.i58, label %339, label %337, !dbg !50

337:                                              ; preds = %__nv_rsqrtf.exit57
  %338 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %280), !dbg !50
  br label %__nv_rsqrtf.exit60, !dbg !50

339:                                              ; preds = %__nv_rsqrtf.exit57
  %340 = tail call float @llvm.nvvm.rsqrt.approx.f(float %280), !dbg !50
  br label %__nv_rsqrtf.exit60, !dbg !50

__nv_rsqrtf.exit60:                               ; preds = %337, %339
  %.0.i59 = phi float [ %338, %337 ], [ %340, %339 ], !dbg !50
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i61 = icmp eq i32 %341, 0, !dbg !50
  br i1 %.not.i61, label %344, label %342, !dbg !50

342:                                              ; preds = %__nv_rsqrtf.exit60
  %343 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %281), !dbg !50
  br label %__nv_rsqrtf.exit63, !dbg !50

344:                                              ; preds = %__nv_rsqrtf.exit60
  %345 = tail call float @llvm.nvvm.rsqrt.approx.f(float %281), !dbg !50
  br label %__nv_rsqrtf.exit63, !dbg !50

__nv_rsqrtf.exit63:                               ; preds = %342, %344
  %.0.i62 = phi float [ %343, %342 ], [ %345, %344 ], !dbg !50
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i64 = icmp eq i32 %346, 0, !dbg !50
  br i1 %.not.i64, label %349, label %347, !dbg !50

347:                                              ; preds = %__nv_rsqrtf.exit63
  %348 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %282), !dbg !50
  br label %__nv_rsqrtf.exit66, !dbg !50

349:                                              ; preds = %__nv_rsqrtf.exit63
  %350 = tail call float @llvm.nvvm.rsqrt.approx.f(float %282), !dbg !50
  br label %__nv_rsqrtf.exit66, !dbg !50

__nv_rsqrtf.exit66:                               ; preds = %347, %349
  %.0.i65 = phi float [ %348, %347 ], [ %350, %349 ], !dbg !50
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i67 = icmp eq i32 %351, 0, !dbg !50
  br i1 %.not.i67, label %354, label %352, !dbg !50

352:                                              ; preds = %__nv_rsqrtf.exit66
  %353 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %283), !dbg !50
  br label %__nv_rsqrtf.exit69, !dbg !50

354:                                              ; preds = %__nv_rsqrtf.exit66
  %355 = tail call float @llvm.nvvm.rsqrt.approx.f(float %283), !dbg !50
  br label %__nv_rsqrtf.exit69, !dbg !50

__nv_rsqrtf.exit69:                               ; preds = %352, %354
  %.0.i68 = phi float [ %353, %352 ], [ %355, %354 ], !dbg !50
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i70 = icmp eq i32 %356, 0, !dbg !50
  br i1 %.not.i70, label %359, label %357, !dbg !50

357:                                              ; preds = %__nv_rsqrtf.exit69
  %358 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %284), !dbg !50
  br label %__nv_rsqrtf.exit72, !dbg !50

359:                                              ; preds = %__nv_rsqrtf.exit69
  %360 = tail call float @llvm.nvvm.rsqrt.approx.f(float %284), !dbg !50
  br label %__nv_rsqrtf.exit72, !dbg !50

__nv_rsqrtf.exit72:                               ; preds = %357, %359
  %.0.i71 = phi float [ %358, %357 ], [ %360, %359 ], !dbg !50
  %361 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i73 = icmp eq i32 %361, 0, !dbg !50
  br i1 %.not.i73, label %364, label %362, !dbg !50

362:                                              ; preds = %__nv_rsqrtf.exit72
  %363 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %285), !dbg !50
  br label %__nv_rsqrtf.exit75, !dbg !50

364:                                              ; preds = %__nv_rsqrtf.exit72
  %365 = tail call float @llvm.nvvm.rsqrt.approx.f(float %285), !dbg !50
  br label %__nv_rsqrtf.exit75, !dbg !50

__nv_rsqrtf.exit75:                               ; preds = %362, %364
  %.0.i74 = phi float [ %363, %362 ], [ %365, %364 ], !dbg !50
  %366 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !27
  %367 = bitcast i32 %366 to float, !dbg !27
  %368 = bitcast i32 %95 to float, !dbg !29
  %369 = fadd float %367, %368, !dbg !51
  %370 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !33
  %371 = bitcast i32 %370 to float, !dbg !33
  %372 = bitcast i32 %193 to float, !dbg !41
  %373 = fadd float %371, %372, !dbg !52
  %374 = fadd float %369, %373, !dbg !53
  %375 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !45
  %376 = bitcast i32 %375 to float, !dbg !45
  %377 = fsub float %374, %376, !dbg !54
  %378 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !27
  %379 = bitcast i32 %378 to float, !dbg !27
  %380 = fadd float %379, %368, !dbg !51
  %381 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !33
  %382 = bitcast i32 %381 to float, !dbg !33
  %383 = bitcast i32 %192 to float, !dbg !41
  %384 = fadd float %382, %383, !dbg !52
  %385 = fadd float %380, %384, !dbg !53
  %386 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !45
  %387 = bitcast i32 %386 to float, !dbg !45
  %388 = fsub float %385, %387, !dbg !54
  %389 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !27
  %390 = bitcast i32 %389 to float, !dbg !27
  %391 = fadd float %390, %368, !dbg !51
  %392 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !33
  %393 = bitcast i32 %392 to float, !dbg !33
  %394 = bitcast i32 %191 to float, !dbg !41
  %395 = fadd float %393, %394, !dbg !52
  %396 = fadd float %391, %395, !dbg !53
  %397 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !45
  %398 = bitcast i32 %397 to float, !dbg !45
  %399 = fsub float %396, %398, !dbg !54
  %400 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !27
  %401 = bitcast i32 %400 to float, !dbg !27
  %402 = fadd float %401, %368, !dbg !51
  %403 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !33
  %404 = bitcast i32 %403 to float, !dbg !33
  %405 = bitcast i32 %190 to float, !dbg !41
  %406 = fadd float %404, %405, !dbg !52
  %407 = fadd float %402, %406, !dbg !53
  %408 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !45
  %409 = bitcast i32 %408 to float, !dbg !45
  %410 = fsub float %407, %409, !dbg !54
  %411 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !27
  %412 = bitcast i32 %411 to float, !dbg !27
  %413 = bitcast i32 %91 to float, !dbg !29
  %414 = fadd float %412, %413, !dbg !51
  %415 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !33
  %416 = bitcast i32 %415 to float, !dbg !33
  %417 = bitcast i32 %189 to float, !dbg !41
  %418 = fadd float %416, %417, !dbg !52
  %419 = fadd float %414, %418, !dbg !53
  %420 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !45
  %421 = bitcast i32 %420 to float, !dbg !45
  %422 = fsub float %419, %421, !dbg !54
  %423 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !27
  %424 = bitcast i32 %423 to float, !dbg !27
  %425 = fadd float %424, %413, !dbg !51
  %426 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !33
  %427 = bitcast i32 %426 to float, !dbg !33
  %428 = bitcast i32 %188 to float, !dbg !41
  %429 = fadd float %427, %428, !dbg !52
  %430 = fadd float %425, %429, !dbg !53
  %431 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !45
  %432 = bitcast i32 %431 to float, !dbg !45
  %433 = fsub float %430, %432, !dbg !54
  %434 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !27
  %435 = bitcast i32 %434 to float, !dbg !27
  %436 = fadd float %435, %413, !dbg !51
  %437 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !33
  %438 = bitcast i32 %437 to float, !dbg !33
  %439 = bitcast i32 %187 to float, !dbg !41
  %440 = fadd float %438, %439, !dbg !52
  %441 = fadd float %436, %440, !dbg !53
  %442 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !45
  %443 = bitcast i32 %442 to float, !dbg !45
  %444 = fsub float %441, %443, !dbg !54
  %445 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !27
  %446 = bitcast i32 %445 to float, !dbg !27
  %447 = fadd float %446, %413, !dbg !51
  %448 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !33
  %449 = bitcast i32 %448 to float, !dbg !33
  %450 = bitcast i32 %186 to float, !dbg !41
  %451 = fadd float %449, %450, !dbg !52
  %452 = fadd float %447, %451, !dbg !53
  %453 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !45
  %454 = bitcast i32 %453 to float, !dbg !45
  %455 = fsub float %452, %454, !dbg !54
  %456 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !27
  %457 = bitcast i32 %456 to float, !dbg !27
  %458 = bitcast i32 %87 to float, !dbg !29
  %459 = fadd float %457, %458, !dbg !51
  %460 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !33
  %461 = bitcast i32 %460 to float, !dbg !33
  %462 = bitcast i32 %185 to float, !dbg !41
  %463 = fadd float %461, %462, !dbg !52
  %464 = fadd float %459, %463, !dbg !53
  %465 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !45
  %466 = bitcast i32 %465 to float, !dbg !45
  %467 = fsub float %464, %466, !dbg !54
  %468 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !27
  %469 = bitcast i32 %468 to float, !dbg !27
  %470 = fadd float %469, %458, !dbg !51
  %471 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !33
  %472 = bitcast i32 %471 to float, !dbg !33
  %473 = bitcast i32 %184 to float, !dbg !41
  %474 = fadd float %472, %473, !dbg !52
  %475 = fadd float %470, %474, !dbg !53
  %476 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !45
  %477 = bitcast i32 %476 to float, !dbg !45
  %478 = fsub float %475, %477, !dbg !54
  %479 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !27
  %480 = bitcast i32 %479 to float, !dbg !27
  %481 = fadd float %480, %458, !dbg !51
  %482 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !33
  %483 = bitcast i32 %482 to float, !dbg !33
  %484 = bitcast i32 %183 to float, !dbg !41
  %485 = fadd float %483, %484, !dbg !52
  %486 = fadd float %481, %485, !dbg !53
  %487 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !45
  %488 = bitcast i32 %487 to float, !dbg !45
  %489 = fsub float %486, %488, !dbg !54
  %490 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !27
  %491 = bitcast i32 %490 to float, !dbg !27
  %492 = fadd float %491, %458, !dbg !51
  %493 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !33
  %494 = bitcast i32 %493 to float, !dbg !33
  %495 = bitcast i32 %182 to float, !dbg !41
  %496 = fadd float %494, %495, !dbg !52
  %497 = fadd float %492, %496, !dbg !53
  %498 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !45
  %499 = bitcast i32 %498 to float, !dbg !45
  %500 = fsub float %497, %499, !dbg !54
  %501 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !27
  %502 = bitcast i32 %501 to float, !dbg !27
  %503 = bitcast i32 %83 to float, !dbg !29
  %504 = fadd float %502, %503, !dbg !51
  %505 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !33
  %506 = bitcast i32 %505 to float, !dbg !33
  %507 = bitcast i32 %181 to float, !dbg !41
  %508 = fadd float %506, %507, !dbg !52
  %509 = fadd float %504, %508, !dbg !53
  %510 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !45
  %511 = bitcast i32 %510 to float, !dbg !45
  %512 = fsub float %509, %511, !dbg !54
  %513 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !27
  %514 = bitcast i32 %513 to float, !dbg !27
  %515 = fadd float %514, %503, !dbg !51
  %516 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !33
  %517 = bitcast i32 %516 to float, !dbg !33
  %518 = bitcast i32 %180 to float, !dbg !41
  %519 = fadd float %517, %518, !dbg !52
  %520 = fadd float %515, %519, !dbg !53
  %521 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !45
  %522 = bitcast i32 %521 to float, !dbg !45
  %523 = fsub float %520, %522, !dbg !54
  %524 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !27
  %525 = bitcast i32 %524 to float, !dbg !27
  %526 = fadd float %525, %503, !dbg !51
  %527 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !33
  %528 = bitcast i32 %527 to float, !dbg !33
  %529 = bitcast i32 %179 to float, !dbg !41
  %530 = fadd float %528, %529, !dbg !52
  %531 = fadd float %526, %530, !dbg !53
  %532 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !45
  %533 = bitcast i32 %532 to float, !dbg !45
  %534 = fsub float %531, %533, !dbg !54
  %535 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !27
  %536 = bitcast i32 %535 to float, !dbg !27
  %537 = fadd float %536, %503, !dbg !51
  %538 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !33
  %539 = bitcast i32 %538 to float, !dbg !33
  %540 = bitcast i32 %178 to float, !dbg !41
  %541 = fadd float %539, %540, !dbg !52
  %542 = fadd float %537, %541, !dbg !53
  %543 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !45
  %544 = bitcast i32 %543 to float, !dbg !45
  %545 = fsub float %542, %544, !dbg !54
  %546 = or disjoint i32 %29, %17, !dbg !17
  %547 = icmp slt i32 %546, 256, !dbg !18
  %548 = or disjoint i32 %11, %19, !dbg !13
  %549 = icmp slt i32 %548, 384, !dbg !14
  %550 = and i1 %549, %547, !dbg !26
  %551 = or disjoint i32 %29, %16, !dbg !17
  %552 = icmp slt i32 %551, 256, !dbg !18
  %553 = and i1 %549, %552, !dbg !26
  %554 = or disjoint i32 %29, %15, !dbg !17
  %555 = icmp slt i32 %554, 256, !dbg !18
  %556 = and i1 %549, %555, !dbg !26
  %557 = or disjoint i32 %29, %14, !dbg !17
  %558 = icmp slt i32 %557, 256, !dbg !18
  %559 = and i1 %549, %558, !dbg !26
  %.frozen90 = freeze i32 %548, !dbg !19
  %560 = sdiv i32 %.frozen90, 96, !dbg !19
  %561 = mul i32 %560, 96, !dbg !20
  %.decomposed91 = sub i32 %.frozen90, %561, !dbg !20
  %562 = fmul float %545, %.0.i, !dbg !55
  %563 = fmul float %534, %.0.i32, !dbg !55
  %564 = fmul float %523, %.0.i35, !dbg !55
  %565 = fmul float %512, %.0.i38, !dbg !55
  %566 = fmul float %500, %.0.i41, !dbg !55
  %567 = fmul float %489, %.0.i44, !dbg !55
  %568 = fmul float %478, %.0.i47, !dbg !55
  %569 = fmul float %467, %.0.i50, !dbg !55
  %570 = fmul float %455, %.0.i53, !dbg !55
  %571 = fmul float %444, %.0.i56, !dbg !55
  %572 = fmul float %433, %.0.i59, !dbg !55
  %573 = fmul float %422, %.0.i62, !dbg !55
  %574 = fmul float %410, %.0.i65, !dbg !55
  %575 = fmul float %399, %.0.i68, !dbg !55
  %576 = fmul float %388, %.0.i71, !dbg !55
  %577 = fmul float %377, %.0.i74, !dbg !55
  %578 = mul i32 %557, 96, !dbg !56
  %579 = mul i32 %554, 96, !dbg !56
  %580 = mul i32 %551, 96, !dbg !56
  %581 = mul i32 %546, 96, !dbg !56
  %582 = mul i32 %560, 24576, !dbg !57
  %583 = add i32 %582, %.decomposed91, !dbg !58
  %584 = add i32 %583, %578, !dbg !59
  %585 = add i32 %583, %579, !dbg !59
  %586 = add i32 %583, %580, !dbg !59
  %587 = add i32 %583, %581, !dbg !59
  %588 = sext i32 %584 to i64, !dbg !60
  %589 = getelementptr float, ptr addrspace(1) %6, i64 %588, !dbg !60
  %590 = sext i32 %585 to i64, !dbg !60
  %591 = getelementptr float, ptr addrspace(1) %6, i64 %590, !dbg !60
  %592 = sext i32 %586 to i64, !dbg !60
  %593 = getelementptr float, ptr addrspace(1) %6, i64 %592, !dbg !60
  %594 = sext i32 %587 to i64, !dbg !60
  %595 = getelementptr float, ptr addrspace(1) %6, i64 %594, !dbg !60
  %596 = shl i32 %12, 8, !dbg !61
  %597 = and i32 %596, 3840, !dbg !61
  %598 = or disjoint i32 %597, %14, !dbg !61
  %599 = and i32 %18, 1020, !dbg !61
  %600 = lshr exact i32 %597, 2, !dbg !61
  %601 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %600, !dbg !61
  %602 = getelementptr float, ptr addrspace(3) %601, i32 %598, !dbg !61
  %603 = bitcast float %562 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %602, <1 x i32> %603, i1 true) #4, !dbg !61
  %604 = or disjoint i32 %598, 64, !dbg !61
  %605 = lshr i32 %604, 4, !dbg !61
  %606 = getelementptr float, ptr addrspace(3) @global_smem, i32 %605, !dbg !61
  %607 = getelementptr float, ptr addrspace(3) %606, i32 %604, !dbg !61
  %608 = bitcast float %563 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %607, <1 x i32> %608, i1 true) #4, !dbg !61
  %609 = or disjoint i32 %598, 128, !dbg !61
  %610 = lshr i32 %609, 4, !dbg !61
  %611 = getelementptr float, ptr addrspace(3) @global_smem, i32 %610, !dbg !61
  %612 = getelementptr float, ptr addrspace(3) %611, i32 %609, !dbg !61
  %613 = bitcast float %564 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %613, i1 true) #4, !dbg !61
  %614 = or disjoint i32 %598, 192, !dbg !61
  %615 = lshr i32 %614, 4, !dbg !61
  %616 = getelementptr float, ptr addrspace(3) @global_smem, i32 %615, !dbg !61
  %617 = getelementptr float, ptr addrspace(3) %616, i32 %614, !dbg !61
  %618 = bitcast float %565 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %618, i1 true) #4, !dbg !61
  %619 = or disjoint i32 %598, 16, !dbg !61
  %620 = getelementptr float, ptr addrspace(3) %601, i32 %619, !dbg !61
  %621 = bitcast float %566 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %620, <1 x i32> %621, i1 true) #4, !dbg !61
  %622 = or disjoint i32 %598, 80, !dbg !61
  %623 = lshr i32 %622, 4, !dbg !61
  %624 = and i32 %623, 244, !dbg !61
  %625 = getelementptr float, ptr addrspace(3) @global_smem, i32 %624, !dbg !61
  %626 = getelementptr float, ptr addrspace(3) %625, i32 %622, !dbg !61
  %627 = bitcast float %567 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %626, <1 x i32> %627, i1 true) #4, !dbg !61
  %628 = or disjoint i32 %598, 144, !dbg !61
  %629 = lshr i32 %628, 4, !dbg !61
  %630 = and i32 %629, 248, !dbg !61
  %631 = getelementptr float, ptr addrspace(3) @global_smem, i32 %630, !dbg !61
  %632 = getelementptr float, ptr addrspace(3) %631, i32 %628, !dbg !61
  %633 = bitcast float %568 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %632, <1 x i32> %633, i1 true) #4, !dbg !61
  %634 = or disjoint i32 %598, 208, !dbg !61
  %635 = lshr i32 %634, 4, !dbg !61
  %636 = and i32 %635, 252, !dbg !61
  %637 = getelementptr float, ptr addrspace(3) @global_smem, i32 %636, !dbg !61
  %638 = getelementptr float, ptr addrspace(3) %637, i32 %634, !dbg !61
  %639 = bitcast float %569 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %639, i1 true) #4, !dbg !61
  %640 = or disjoint i32 %598, 32, !dbg !61
  %641 = getelementptr float, ptr addrspace(3) %601, i32 %640, !dbg !61
  %642 = bitcast float %570 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %641, <1 x i32> %642, i1 true) #4, !dbg !61
  %643 = or disjoint i32 %598, 96, !dbg !61
  %644 = lshr i32 %643, 4, !dbg !61
  %645 = and i32 %644, 244, !dbg !61
  %646 = getelementptr float, ptr addrspace(3) @global_smem, i32 %645, !dbg !61
  %647 = getelementptr float, ptr addrspace(3) %646, i32 %643, !dbg !61
  %648 = bitcast float %571 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %647, <1 x i32> %648, i1 true) #4, !dbg !61
  %649 = or disjoint i32 %598, 160, !dbg !61
  %650 = lshr i32 %649, 4, !dbg !61
  %651 = and i32 %650, 248, !dbg !61
  %652 = getelementptr float, ptr addrspace(3) @global_smem, i32 %651, !dbg !61
  %653 = getelementptr float, ptr addrspace(3) %652, i32 %649, !dbg !61
  %654 = bitcast float %572 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %653, <1 x i32> %654, i1 true) #4, !dbg !61
  %655 = or disjoint i32 %598, 224, !dbg !61
  %656 = lshr i32 %655, 4, !dbg !61
  %657 = and i32 %656, 252, !dbg !61
  %658 = getelementptr float, ptr addrspace(3) @global_smem, i32 %657, !dbg !61
  %659 = getelementptr float, ptr addrspace(3) %658, i32 %655, !dbg !61
  %660 = bitcast float %573 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #4, !dbg !61
  %661 = or disjoint i32 %598, 48, !dbg !61
  %662 = getelementptr float, ptr addrspace(3) %601, i32 %661, !dbg !61
  %663 = bitcast float %574 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %662, <1 x i32> %663, i1 true) #4, !dbg !61
  %664 = or disjoint i32 %598, 112, !dbg !61
  %665 = lshr i32 %664, 4, !dbg !61
  %666 = and i32 %665, 244, !dbg !61
  %667 = getelementptr float, ptr addrspace(3) @global_smem, i32 %666, !dbg !61
  %668 = getelementptr float, ptr addrspace(3) %667, i32 %664, !dbg !61
  %669 = bitcast float %575 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %668, <1 x i32> %669, i1 true) #4, !dbg !61
  %670 = or disjoint i32 %598, 176, !dbg !61
  %671 = lshr i32 %670, 4, !dbg !61
  %672 = and i32 %671, 248, !dbg !61
  %673 = getelementptr float, ptr addrspace(3) @global_smem, i32 %672, !dbg !61
  %674 = getelementptr float, ptr addrspace(3) %673, i32 %670, !dbg !61
  %675 = bitcast float %576 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %674, <1 x i32> %675, i1 true) #4, !dbg !61
  %676 = or disjoint i32 %598, 240, !dbg !61
  %677 = lshr i32 %676, 4, !dbg !61
  %678 = and i32 %677, 252, !dbg !61
  %679 = getelementptr float, ptr addrspace(3) @global_smem, i32 %678, !dbg !61
  %680 = getelementptr float, ptr addrspace(3) %679, i32 %676, !dbg !61
  %681 = bitcast float %577 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %681, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %682 = lshr i32 %18, 4, !dbg !61
  %683 = and i32 %682, 60, !dbg !61
  %684 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %683, !dbg !61
  %685 = getelementptr inbounds float, ptr addrspace(3) %684, i32 %599, !dbg !61
  %686 = or disjoint i32 %599, 1024, !dbg !61
  %687 = lshr i32 %686, 4, !dbg !61
  %688 = and i32 %687, 124, !dbg !61
  %689 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %688, !dbg !61
  %690 = getelementptr inbounds float, ptr addrspace(3) %689, i32 %686, !dbg !61
  %691 = load <4 x i32>, ptr addrspace(3) %690, align 16, !dbg !61
  %692 = or disjoint i32 %599, 2048, !dbg !61
  %693 = lshr i32 %692, 4, !dbg !61
  %694 = and i32 %693, 188, !dbg !61
  %695 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %694, !dbg !61
  %696 = getelementptr inbounds float, ptr addrspace(3) %695, i32 %692, !dbg !61
  %697 = load <4 x i32>, ptr addrspace(3) %696, align 16, !dbg !61
  %698 = or disjoint i32 %599, 3072, !dbg !61
  %699 = lshr i32 %698, 4, !dbg !61
  %700 = and i32 %699, 252, !dbg !61
  %701 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %700, !dbg !61
  %702 = getelementptr inbounds float, ptr addrspace(3) %701, i32 %698, !dbg !61
  %703 = load <4 x i32>, ptr addrspace(3) %702, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %685, align 16, !dbg !61
  %704 = getelementptr inbounds i8, ptr addrspace(3) %685, i32 4, !dbg !61
  %.extract16 = load i32, ptr addrspace(3) %704, align 4, !dbg !61
  %705 = getelementptr inbounds i8, ptr addrspace(3) %685, i32 8, !dbg !61
  %.extract17 = load i32, ptr addrspace(3) %705, align 8, !dbg !61
  %706 = getelementptr inbounds i8, ptr addrspace(3) %685, i32 12, !dbg !61
  %.extract18 = load i32, ptr addrspace(3) %706, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %589, i1 %559) #4, !dbg !61
  %.extract19 = extractelement <4 x i32> %691, i64 0, !dbg !61
  %.extract20 = extractelement <4 x i32> %691, i64 1, !dbg !61
  %.extract21 = extractelement <4 x i32> %691, i64 2, !dbg !61
  %.extract22 = extractelement <4 x i32> %691, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %591, i1 %556) #4, !dbg !61
  %.extract23 = extractelement <4 x i32> %697, i64 0, !dbg !61
  %.extract24 = extractelement <4 x i32> %697, i64 1, !dbg !61
  %.extract25 = extractelement <4 x i32> %697, i64 2, !dbg !61
  %.extract26 = extractelement <4 x i32> %697, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %593, i1 %553) #4, !dbg !61
  %.extract27 = extractelement <4 x i32> %703, i64 0, !dbg !61
  %.extract28 = extractelement <4 x i32> %703, i64 1, !dbg !61
  %.extract29 = extractelement <4 x i32> %703, i64 2, !dbg !61
  %.extract30 = extractelement <4 x i32> %703, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %595, i1 %550) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 52, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 60, scope: !7)
!39 = !DILocation(line: 37, column: 55, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 66, scope: !7)
!42 = !DILocation(line: 38, column: 39, scope: !7)
!43 = !DILocation(line: 38, column: 35, scope: !7)
!44 = !DILocation(line: 38, column: 30, scope: !7)
!45 = !DILocation(line: 38, column: 44, scope: !7)
!46 = !DILocation(line: 39, column: 30, scope: !7)
!47 = !DILocation(line: 39, column: 44, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 28, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 49, column: 19, scope: !7)
!56 = !DILocation(line: 50, column: 33, scope: !7)
!57 = !DILocation(line: 50, column: 44, scope: !7)
!58 = !DILocation(line: 50, column: 30, scope: !7)
!59 = !DILocation(line: 50, column: 38, scope: !7)
!60 = !DILocation(line: 50, column: 25, scope: !7)
!61 = !DILocation(line: 50, column: 56, scope: !7)
!62 = !DILocation(line: 50, column: 4, scope: !7)
