; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 224, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen30 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen30, 14336, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !25
  %47 = icmp slt i32 %19, 128, !dbg !26
  %48 = mul i32 %21, 14336, !dbg !27
  %srem.decomposed = sub i32 %.frozen30, %48, !dbg !27
  %49 = shl nsw i32 %21, 13, !dbg !28
  %50 = add nsw i32 %49, %srem.decomposed, !dbg !29
  %51 = sext i32 %50 to i64, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !30
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !31
  %54 = and i32 %19, -32, !dbg !32
  %55 = icmp eq i32 %54, 128, !dbg !32
  %56 = shl nsw i32 %19, 6, !dbg !33
  %57 = shl nsw i32 %21, 11, !dbg !34
  %58 = add nsw i32 %57, %.decomposed, !dbg !33
  %59 = add nsw i32 %58, -8192, !dbg !35
  %60 = add nsw i32 %59, %56, !dbg !36
  %61 = sext i32 %60 to i64, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !37
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %64 = icmp eq i32 %54, 160, !dbg !39
  %65 = add nsw i32 %58, -10240, !dbg !40
  %66 = add nsw i32 %65, %56, !dbg !41
  %67 = sext i32 %66 to i64, !dbg !42
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !42
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #3, !dbg !43
  %70 = icmp sgt i32 %19, 191, !dbg !44
  %71 = add nsw i32 %58, -12288, !dbg !45
  %72 = add nsw i32 %71, %56, !dbg !46
  %73 = sext i32 %72 to i64, !dbg !47
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !47
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %74, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !48
  %76 = fadd float %30, 0x3EE4F8B580000000, !dbg !49
  %77 = fadd float %32, 0x3EE4F8B580000000, !dbg !49
  %78 = fadd float %34, 0x3EE4F8B580000000, !dbg !49
  %79 = fadd float %36, 0x3EE4F8B580000000, !dbg !49
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i = icmp eq i32 %80, 0, !dbg !50
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i = icmp eq i32 %81, 0, !dbg !50
  br i1 %.not.i, label %87, label %82, !dbg !50

82:                                               ; preds = %11
  br i1 %.not1.i, label %85, label %83, !dbg !50

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

87:                                               ; preds = %11
  br i1 %.not1.i, label %90, label %88, !dbg !50

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit, !dbg !50

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !50
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i12 = icmp eq i32 %92, 0, !dbg !50
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i15 = icmp eq i32 %93, 0, !dbg !50
  br i1 %.not.i12, label %99, label %94, !dbg !50

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %97, label %95, !dbg !50

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %102, label %100, !dbg !50

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !50
  br label %__nv_sqrtf.exit16, !dbg !50

__nv_sqrtf.exit16:                                ; preds = %95, %97, %100, %102
  %.0.i14 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !50
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i17 = icmp eq i32 %104, 0, !dbg !50
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i20 = icmp eq i32 %105, 0, !dbg !50
  br i1 %.not.i17, label %111, label %106, !dbg !50

106:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %109, label %107, !dbg !50

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !50
  br label %__nv_sqrtf.exit21, !dbg !50

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !50
  br label %__nv_sqrtf.exit21, !dbg !50

111:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %114, label %112, !dbg !50

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !50
  br label %__nv_sqrtf.exit21, !dbg !50

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !50
  br label %__nv_sqrtf.exit21, !dbg !50

__nv_sqrtf.exit21:                                ; preds = %107, %109, %112, %114
  %.0.i19 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !50
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i22 = icmp eq i32 %116, 0, !dbg !50
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i25 = icmp eq i32 %117, 0, !dbg !50
  br i1 %.not.i22, label %123, label %118, !dbg !50

118:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %121, label %119, !dbg !50

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !50
  br label %__nv_sqrtf.exit26, !dbg !50

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !50
  br label %__nv_sqrtf.exit26, !dbg !50

123:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %126, label %124, !dbg !50

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !50
  br label %__nv_sqrtf.exit26, !dbg !50

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !50
  br label %__nv_sqrtf.exit26, !dbg !50

__nv_sqrtf.exit26:                                ; preds = %119, %121, %124, %126
  %.0.i24 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !50
  %128 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !43
  %131 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !48
  %132 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !19
  %133 = insertelement <4 x i32> %132, i32 %26, i64 1, !dbg !19
  %134 = insertelement <4 x i32> %133, i32 %25, i64 2, !dbg !19
  %135 = insertelement <4 x i32> %134, i32 %24, i64 3, !dbg !19
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !19
  %137 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !43
  %140 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !48
  %141 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !31
  %142 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !43
  %144 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !48
  %145 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !38
  %147 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !48
  %149 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !25
  %150 = insertelement <4 x i32> %149, i32 %45, i64 1, !dbg !25
  %151 = insertelement <4 x i32> %150, i32 %44, i64 2, !dbg !25
  %152 = insertelement <4 x i32> %151, i32 %43, i64 3, !dbg !25
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !25
  %154 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !23
  %155 = insertelement <4 x i32> %154, i32 %40, i64 1, !dbg !23
  %156 = insertelement <4 x i32> %155, i32 %39, i64 2, !dbg !23
  %157 = insertelement <4 x i32> %156, i32 %38, i64 3, !dbg !23
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !23
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !51
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !51
  %162 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !51
  %163 = insertelement <4 x i1> poison, i1 %64, i64 0, !dbg !52
  %164 = shufflevector <4 x i1> %163, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !52
  %165 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !52
  %166 = insertelement <4 x i32> %165, i32 %139, i64 1, !dbg !52
  %167 = insertelement <4 x i32> %166, i32 %143, i64 2, !dbg !52
  %168 = insertelement <4 x i32> %167, i32 %147, i64 3, !dbg !52
  %169 = insertelement <4 x i32> poison, i32 %131, i64 0, !dbg !52
  %170 = insertelement <4 x i32> %169, i32 %140, i64 1, !dbg !52
  %171 = insertelement <4 x i32> %170, i32 %144, i64 2, !dbg !52
  %172 = insertelement <4 x i32> %171, i32 %148, i64 3, !dbg !52
  %173 = select <4 x i1> %164, <4 x i32> %168, <4 x i32> %172, !dbg !52
  %174 = insertelement <4 x i1> poison, i1 %55, i64 0, !dbg !53
  %175 = shufflevector <4 x i1> %174, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !53
  %176 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !53
  %177 = insertelement <4 x i32> %176, i32 %138, i64 1, !dbg !53
  %178 = insertelement <4 x i32> %177, i32 %142, i64 2, !dbg !53
  %179 = insertelement <4 x i32> %178, i32 %146, i64 3, !dbg !53
  %180 = select <4 x i1> %175, <4 x i32> %179, <4 x i32> %173, !dbg !53
  %181 = insertelement <4 x i1> poison, i1 %47, i64 0, !dbg !54
  %182 = shufflevector <4 x i1> %181, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !54
  %183 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !54
  %184 = insertelement <4 x i32> %183, i32 %137, i64 1, !dbg !54
  %185 = insertelement <4 x i32> %184, i32 %141, i64 2, !dbg !54
  %186 = insertelement <4 x i32> %185, i32 %145, i64 3, !dbg !54
  %187 = select <4 x i1> %182, <4 x i32> %186, <4 x i32> %180, !dbg !54
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !54
  %189 = fsub <4 x float> %188, %136, !dbg !55
  %190 = insertelement <4 x float> poison, float %162, i64 0, !dbg !56
  %191 = insertelement <4 x float> %190, float %161, i64 1, !dbg !56
  %192 = insertelement <4 x float> %191, float %160, i64 2, !dbg !56
  %193 = insertelement <4 x float> %192, float %159, i64 3, !dbg !56
  %194 = fmul <4 x float> %189, %193, !dbg !56
  %195 = fmul <4 x float> %194, %158, !dbg !57
  %196 = fadd <4 x float> %195, %153, !dbg !58
  %197 = fcmp olt <4 x float> %196, zeroinitializer, !dbg !59
  %198 = extractelement <4 x i1> %197, i64 3, !dbg !63
  %199 = extractelement <4 x i1> %197, i64 2, !dbg !63
  %200 = extractelement <4 x i1> %197, i64 1, !dbg !63
  %201 = extractelement <4 x i1> %197, i64 0, !dbg !63
  %202 = sext i32 %17 to i64, !dbg !64
  %203 = getelementptr float, ptr addrspace(1) %8, i64 %202, !dbg !64
  %204 = extractelement <4 x i32> %187, i64 0, !dbg !65
  %205 = extractelement <4 x i32> %187, i64 1, !dbg !65
  %206 = extractelement <4 x i32> %187, i64 2, !dbg !65
  %207 = extractelement <4 x i32> %187, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %207, i32 %206, i32 %205, i32 %204, ptr addrspace(1) %203, i1 true) #3, !dbg !65
  %208 = getelementptr float, ptr addrspace(1) %9, i64 %202, !dbg !66
  %bc = bitcast <4 x float> %196 to <4 x i32>, !dbg !67
  %209 = extractelement <4 x i32> %bc, i64 3, !dbg !67
  %210 = select i1 %198, i32 0, i32 %209, !dbg !63
  %bc27 = bitcast <4 x float> %196 to <4 x i32>, !dbg !67
  %211 = extractelement <4 x i32> %bc27, i64 2, !dbg !67
  %212 = select i1 %199, i32 0, i32 %211, !dbg !63
  %bc28 = bitcast <4 x float> %196 to <4 x i32>, !dbg !67
  %213 = extractelement <4 x i32> %bc28, i64 1, !dbg !67
  %214 = select i1 %200, i32 0, i32 %213, !dbg !63
  %bc29 = bitcast <4 x float> %196 to <4 x i32>, !dbg !67
  %215 = extractelement <4 x i32> %bc29, i64 0, !dbg !67
  %216 = select i1 %201, i32 0, i32 %215, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %212, i32 %214, i32 %216, ptr addrspace(1) %208, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqooj6ejb5hcc3ng2z5phq3uey37puh5n7jxxibq46m5t7rhgseo.py", directory: "inductor_cache/qo")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 50, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 60, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 55, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 65, scope: !7)
!44 = !DILocation(line: 48, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 36, scope: !7)
!46 = !DILocation(line: 51, column: 55, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 65, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 27, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 35, scope: !7)
!53 = !DILocation(line: 53, column: 34, scope: !7)
!54 = !DILocation(line: 54, column: 33, scope: !7)
!55 = !DILocation(line: 55, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 67, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 69, column: 4, scope: !7)
