; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = and i32 %14, 255, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = lshr i32 %14, 6, !dbg !16
  %23 = and i32 %22, 3, !dbg !16
  %24 = or disjoint i32 %21, %23, !dbg !17
  %25 = or disjoint i32 %24, 4, !dbg !17
  %26 = or disjoint i32 %24, 8, !dbg !17
  %27 = or disjoint i32 %24, 12, !dbg !17
  %28 = icmp slt i32 %24, 256, !dbg !18
  %29 = icmp slt i32 %25, 256, !dbg !18
  %30 = icmp slt i32 %26, 256, !dbg !18
  %31 = icmp slt i32 %27, 256, !dbg !18
  %.frozen = freeze i32 %24, !dbg !19
  %32 = sdiv i32 %.frozen, 16, !dbg !19
  %.frozen11 = freeze i32 %25, !dbg !19
  %33 = sdiv i32 %.frozen11, 16, !dbg !19
  %.frozen13 = freeze i32 %26, !dbg !19
  %34 = sdiv i32 %.frozen13, 16, !dbg !19
  %.frozen15 = freeze i32 %27, !dbg !19
  %35 = sdiv i32 %.frozen15, 16, !dbg !19
  %36 = mul i32 %32, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = mul i32 %33, 16, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %37, !dbg !20
  %38 = mul i32 %34, 16, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %38, !dbg !20
  %39 = mul i32 %35, 16, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %39, !dbg !20
  %.frozen17 = freeze i32 %18, !dbg !21
  %40 = sdiv i32 %.frozen17, 256, !dbg !21
  %41 = mul i32 %40, 256, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %41, !dbg !22
  %42 = srem i32 %19, 256, !dbg !22
  %43 = sext i32 %32 to i64, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = sext i32 %33 to i64, !dbg !23
  %46 = getelementptr i64, ptr addrspace(1) %1, i64 %45, !dbg !23
  %47 = sext i32 %34 to i64, !dbg !23
  %48 = getelementptr i64, ptr addrspace(1) %1, i64 %47, !dbg !23
  %49 = sext i32 %35 to i64, !dbg !23
  %50 = getelementptr i64, ptr addrspace(1) %1, i64 %49, !dbg !23
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %29) #2, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %29) #2, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %29) #2, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %29) #2, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %48, i1 %30) #2, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !24
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !24
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !24
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %50, i1 %31) #2, !dbg !24
  %67 = sext i32 %.decomposed to i64, !dbg !25
  %68 = getelementptr i64, ptr addrspace(1) %2, i64 %67, !dbg !25
  %69 = sext i32 %.decomposed12 to i64, !dbg !25
  %70 = getelementptr i64, ptr addrspace(1) %2, i64 %69, !dbg !25
  %71 = sext i32 %.decomposed14 to i64, !dbg !25
  %72 = getelementptr i64, ptr addrspace(1) %2, i64 %71, !dbg !25
  %73 = sext i32 %.decomposed16 to i64, !dbg !25
  %74 = getelementptr i64, ptr addrspace(1) %2, i64 %73, !dbg !25
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %28) #2, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %28) #2, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %28) #2, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %68, i1 %28) #2, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #2, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #2, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #2, !dbg !26
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %70, i1 %29) #2, !dbg !26
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !26
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !26
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !26
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !26
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #2, !dbg !26
  %88 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #2, !dbg !26
  %89 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #2, !dbg !26
  %90 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %74, i1 %31) #2, !dbg !26
  %91 = getelementptr i64, ptr addrspace(1) %4, i64 %67, !dbg !27
  %92 = getelementptr i64, ptr addrspace(1) %4, i64 %69, !dbg !27
  %93 = getelementptr i64, ptr addrspace(1) %4, i64 %71, !dbg !27
  %94 = getelementptr i64, ptr addrspace(1) %4, i64 %73, !dbg !27
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %28) #2, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %28) #2, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %28) #2, !dbg !28
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %91, i1 %28) #2, !dbg !28
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !28
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !28
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !28
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %92, i1 %29) #2, !dbg !28
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %30) #2, !dbg !28
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %30) #2, !dbg !28
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %30) #2, !dbg !28
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %93, i1 %30) #2, !dbg !28
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %31) #2, !dbg !28
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %31) #2, !dbg !28
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %31) #2, !dbg !28
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %94, i1 %31) #2, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !29
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !29
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !29
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %28) #2, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %28) #2, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %28) #2, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %28) #2, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %29) #2, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %29) #2, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %29) #2, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %29) #2, !dbg !30
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %30) #2, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %30) #2, !dbg !30
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %30) #2, !dbg !30
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %30) #2, !dbg !30
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %31) #2, !dbg !30
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %31) #2, !dbg !30
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %31) #2, !dbg !30
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %31) #2, !dbg !30
  %131 = getelementptr i64, ptr addrspace(1) %6, i64 %43, !dbg !31
  %132 = getelementptr i64, ptr addrspace(1) %6, i64 %45, !dbg !31
  %133 = getelementptr i64, ptr addrspace(1) %6, i64 %47, !dbg !31
  %134 = getelementptr i64, ptr addrspace(1) %6, i64 %49, !dbg !31
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %28) #2, !dbg !32
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %28) #2, !dbg !32
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %28) #2, !dbg !32
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %131, i1 %28) #2, !dbg !32
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %29) #2, !dbg !32
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %29) #2, !dbg !32
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %29) #2, !dbg !32
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %132, i1 %29) #2, !dbg !32
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %30) #2, !dbg !32
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %30) #2, !dbg !32
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %30) #2, !dbg !32
  %146 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %133, i1 %30) #2, !dbg !32
  %147 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %31) #2, !dbg !32
  %148 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %31) #2, !dbg !32
  %149 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %31) #2, !dbg !32
  %150 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %134, i1 %31) #2, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !33
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !33
  %153 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !33
  %154 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !33
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %28) #2, !dbg !34
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %28) #2, !dbg !34
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %28) #2, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %28) #2, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %29) #2, !dbg !34
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %29) #2, !dbg !34
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %29) #2, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %29) #2, !dbg !34
  %164 = bitcast i32 %163 to float, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %30) #2, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %30) #2, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %30) #2, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %30) #2, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %31) #2, !dbg !34
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %31) #2, !dbg !34
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %31) #2, !dbg !34
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %31) #2, !dbg !34
  %174 = bitcast i32 %173 to float, !dbg !34
  %175 = shl i32 %24, 8, !dbg !35
  %176 = shl i32 %25, 8, !dbg !35
  %177 = shl i32 %26, 8, !dbg !35
  %178 = shl i32 %27, 8, !dbg !35
  %179 = shl i32 %40, 16, !dbg !36
  %180 = add i32 %179, %.decomposed18, !dbg !37
  %181 = add i32 %180, %175, !dbg !38
  %182 = add i32 %180, %176, !dbg !38
  %183 = add i32 %180, %177, !dbg !38
  %184 = add i32 %180, %178, !dbg !38
  %185 = sext i32 %181 to i64, !dbg !39
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !39
  %187 = sext i32 %182 to i64, !dbg !39
  %188 = getelementptr float, ptr addrspace(1) %0, i64 %187, !dbg !39
  %189 = sext i32 %183 to i64, !dbg !39
  %190 = getelementptr float, ptr addrspace(1) %0, i64 %189, !dbg !39
  %191 = sext i32 %184 to i64, !dbg !39
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !39
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %28) #2, !dbg !40
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !40
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !40
  %198 = bitcast i32 %194 to float, !dbg !40
  %199 = bitcast i32 %195 to float, !dbg !40
  %200 = bitcast i32 %196 to float, !dbg !40
  %201 = bitcast i32 %197 to float, !dbg !40
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %29) #2, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !40
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !40
  %207 = bitcast i32 %203 to float, !dbg !40
  %208 = bitcast i32 %204 to float, !dbg !40
  %209 = bitcast i32 %205 to float, !dbg !40
  %210 = bitcast i32 %206 to float, !dbg !40
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %190, i1 %30) #2, !dbg !40
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !40
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !40
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !40
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !40
  %216 = bitcast i32 %212 to float, !dbg !40
  %217 = bitcast i32 %213 to float, !dbg !40
  %218 = bitcast i32 %214 to float, !dbg !40
  %219 = bitcast i32 %215 to float, !dbg !40
  %220 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %192, i1 %31) #2, !dbg !40
  %221 = extractvalue { i32, i32, i32, i32 } %220, 0, !dbg !40
  %222 = extractvalue { i32, i32, i32, i32 } %220, 1, !dbg !40
  %223 = extractvalue { i32, i32, i32, i32 } %220, 2, !dbg !40
  %224 = extractvalue { i32, i32, i32, i32 } %220, 3, !dbg !40
  %225 = bitcast i32 %221 to float, !dbg !40
  %226 = bitcast i32 %222 to float, !dbg !40
  %227 = bitcast i32 %223 to float, !dbg !40
  %228 = bitcast i32 %224 to float, !dbg !40
  %229 = sext i32 %42 to i64, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %8, i64 %229, !dbg !41
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #2, !dbg !42
  %232 = lshr i64 %54, 60, !dbg !43
  %233 = and i64 %232, 8, !dbg !43
  %234 = add i64 %233, %54, !dbg !43
  %235 = lshr i64 %58, 60, !dbg !43
  %236 = and i64 %235, 8, !dbg !43
  %237 = add i64 %236, %58, !dbg !43
  %238 = lshr i64 %62, 60, !dbg !43
  %239 = and i64 %238, 8, !dbg !43
  %240 = add i64 %239, %62, !dbg !43
  %241 = lshr i64 %66, 60, !dbg !43
  %242 = and i64 %241, 8, !dbg !43
  %243 = add i64 %242, %66, !dbg !43
  %244 = lshr i64 %78, 60, !dbg !44
  %245 = and i64 %244, 8, !dbg !44
  %246 = add i64 %245, %78, !dbg !44
  %247 = lshr i64 %82, 60, !dbg !44
  %248 = and i64 %247, 8, !dbg !44
  %249 = add i64 %248, %82, !dbg !44
  %250 = lshr i64 %86, 60, !dbg !44
  %251 = and i64 %250, 8, !dbg !44
  %252 = add i64 %251, %86, !dbg !44
  %253 = lshr i64 %90, 60, !dbg !44
  %254 = and i64 %253, 8, !dbg !44
  %255 = add i64 %254, %90, !dbg !44
  %256 = sext i32 %.decomposed18 to i64, !dbg !45
  %257 = shl i64 %234, 11, !dbg !46
  %258 = shl i64 %237, 11, !dbg !46
  %259 = shl i64 %240, 11, !dbg !46
  %260 = shl i64 %243, 11, !dbg !46
  %261 = shl i32 %40, 14, !dbg !47
  %262 = sext i32 %261 to i64, !dbg !48
  %.idx = shl i64 %246, 10, !dbg !49
  %263 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !49
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %256, !dbg !49
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %257, !dbg !49
  %266 = getelementptr float, ptr addrspace(1) %265, i64 %262, !dbg !49
  %.idx4 = shl i64 %249, 10, !dbg !49
  %267 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %256, !dbg !49
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %258, !dbg !49
  %270 = getelementptr float, ptr addrspace(1) %269, i64 %262, !dbg !49
  %.idx5 = shl i64 %252, 10, !dbg !49
  %271 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !49
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %256, !dbg !49
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %259, !dbg !49
  %274 = getelementptr float, ptr addrspace(1) %273, i64 %262, !dbg !49
  %.idx6 = shl i64 %255, 10, !dbg !49
  %275 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !49
  %276 = getelementptr float, ptr addrspace(1) %275, i64 %256, !dbg !49
  %277 = getelementptr float, ptr addrspace(1) %276, i64 %260, !dbg !49
  %278 = getelementptr float, ptr addrspace(1) %277, i64 %262, !dbg !49
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 %28) #2, !dbg !50
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !50
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !50
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !50
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !50
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %29) #2, !dbg !50
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !50
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !50
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !50
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !50
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %30) #2, !dbg !50
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !50
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !50
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !50
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !50
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %278, i1 %31) #2, !dbg !50
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !50
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !50
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !50
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !50
  %299 = lshr i64 %98, 60, !dbg !51
  %300 = and i64 %299, 8, !dbg !51
  %301 = add i64 %300, %98, !dbg !51
  %302 = lshr i64 %102, 60, !dbg !51
  %303 = and i64 %302, 8, !dbg !51
  %304 = add i64 %303, %102, !dbg !51
  %305 = lshr i64 %106, 60, !dbg !51
  %306 = and i64 %305, 8, !dbg !51
  %307 = add i64 %306, %106, !dbg !51
  %308 = lshr i64 %110, 60, !dbg !51
  %309 = and i64 %308, 8, !dbg !51
  %310 = add i64 %309, %110, !dbg !51
  %.idx7 = shl i64 %301, 10, !dbg !52
  %311 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %256, !dbg !52
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %257, !dbg !52
  %314 = getelementptr float, ptr addrspace(1) %313, i64 %262, !dbg !52
  %.idx8 = shl i64 %304, 10, !dbg !52
  %315 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !52
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %256, !dbg !52
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %258, !dbg !52
  %318 = getelementptr float, ptr addrspace(1) %317, i64 %262, !dbg !52
  %.idx9 = shl i64 %307, 10, !dbg !52
  %319 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !52
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %256, !dbg !52
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %259, !dbg !52
  %322 = getelementptr float, ptr addrspace(1) %321, i64 %262, !dbg !52
  %.idx10 = shl i64 %310, 10, !dbg !52
  %323 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !52
  %324 = getelementptr float, ptr addrspace(1) %323, i64 %256, !dbg !52
  %325 = getelementptr float, ptr addrspace(1) %324, i64 %260, !dbg !52
  %326 = getelementptr float, ptr addrspace(1) %325, i64 %262, !dbg !52
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %314, i1 %28) #2, !dbg !53
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !53
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !53
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !53
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %318, i1 %29) #2, !dbg !53
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !53
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !53
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !53
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !53
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %322, i1 %30) #2, !dbg !53
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !53
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !53
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !53
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !53
  %342 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %326, i1 %31) #2, !dbg !53
  %343 = extractvalue { i32, i32, i32, i32 } %342, 0, !dbg !53
  %344 = extractvalue { i32, i32, i32, i32 } %342, 1, !dbg !53
  %345 = extractvalue { i32, i32, i32, i32 } %342, 2, !dbg !53
  %346 = extractvalue { i32, i32, i32, i32 } %342, 3, !dbg !53
  %347 = lshr i64 %138, 60, !dbg !54
  %348 = and i64 %347, 8, !dbg !54
  %349 = add i64 %348, %138, !dbg !54
  %350 = lshr i64 %142, 60, !dbg !54
  %351 = and i64 %350, 8, !dbg !54
  %352 = add i64 %351, %142, !dbg !54
  %353 = lshr i64 %146, 60, !dbg !54
  %354 = and i64 %353, 8, !dbg !54
  %355 = add i64 %354, %146, !dbg !54
  %356 = lshr i64 %150, 60, !dbg !54
  %357 = and i64 %356, 8, !dbg !54
  %358 = add i64 %357, %150, !dbg !54
  %359 = shl i64 %349, 11, !dbg !55
  %360 = shl i64 %352, 11, !dbg !55
  %361 = shl i64 %355, 11, !dbg !55
  %362 = shl i64 %358, 11, !dbg !55
  %363 = getelementptr float, ptr addrspace(1) %264, i64 %359, !dbg !56
  %364 = getelementptr float, ptr addrspace(1) %363, i64 %262, !dbg !56
  %365 = getelementptr float, ptr addrspace(1) %268, i64 %360, !dbg !56
  %366 = getelementptr float, ptr addrspace(1) %365, i64 %262, !dbg !56
  %367 = getelementptr float, ptr addrspace(1) %272, i64 %361, !dbg !56
  %368 = getelementptr float, ptr addrspace(1) %367, i64 %262, !dbg !56
  %369 = getelementptr float, ptr addrspace(1) %276, i64 %362, !dbg !56
  %370 = getelementptr float, ptr addrspace(1) %369, i64 %262, !dbg !56
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %364, i1 %28) #2, !dbg !57
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !57
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !57
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !57
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !57
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %366, i1 %29) #2, !dbg !57
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !57
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !57
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !57
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !57
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %368, i1 %30) #2, !dbg !57
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !57
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !57
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !57
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !57
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %370, i1 %31) #2, !dbg !57
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !57
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !57
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !57
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !57
  %391 = getelementptr float, ptr addrspace(1) %312, i64 %359, !dbg !58
  %392 = getelementptr float, ptr addrspace(1) %391, i64 %262, !dbg !58
  %393 = getelementptr float, ptr addrspace(1) %316, i64 %360, !dbg !58
  %394 = getelementptr float, ptr addrspace(1) %393, i64 %262, !dbg !58
  %395 = getelementptr float, ptr addrspace(1) %320, i64 %361, !dbg !58
  %396 = getelementptr float, ptr addrspace(1) %395, i64 %262, !dbg !58
  %397 = getelementptr float, ptr addrspace(1) %324, i64 %362, !dbg !58
  %398 = getelementptr float, ptr addrspace(1) %397, i64 %262, !dbg !58
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %392, i1 %28) #2, !dbg !59
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !59
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !59
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !59
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !59
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %394, i1 %29) #2, !dbg !59
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !59
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !59
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !59
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !59
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %396, i1 %30) #2, !dbg !59
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !59
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !59
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !59
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !59
  %414 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %398, i1 %31) #2, !dbg !59
  %415 = extractvalue { i32, i32, i32, i32 } %414, 0, !dbg !59
  %416 = extractvalue { i32, i32, i32, i32 } %414, 1, !dbg !59
  %417 = extractvalue { i32, i32, i32, i32 } %414, 2, !dbg !59
  %418 = extractvalue { i32, i32, i32, i32 } %414, 3, !dbg !59
  %419 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !57
  %420 = insertelement <2 x i32> %419, i32 %280, i64 1, !dbg !57
  %421 = bitcast <2 x i32> %420 to <2 x float>, !dbg !57
  %422 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !59
  %423 = insertelement <2 x i32> %422, i32 %328, i64 1, !dbg !59
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !59
  %425 = fsub <2 x float> %424, %421, !dbg !60
  %426 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !61
  %427 = bitcast <2 x i32> %426 to <2 x float>, !dbg !61
  %428 = shufflevector <2 x float> %427, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %429 = fmul <2 x float> %425, %428, !dbg !61
  %430 = fadd <2 x float> %429, %421, !dbg !62
  %431 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !57
  %432 = insertelement <2 x i32> %431, i32 %281, i64 1, !dbg !57
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !57
  %434 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !59
  %435 = insertelement <2 x i32> %434, i32 %329, i64 1, !dbg !59
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !59
  %437 = fsub <2 x float> %436, %433, !dbg !60
  %438 = fmul <2 x float> %437, %428, !dbg !61
  %439 = fadd <2 x float> %438, %433, !dbg !62
  %440 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !57
  %441 = insertelement <2 x i32> %440, i32 %282, i64 1, !dbg !57
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !57
  %443 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !59
  %444 = insertelement <2 x i32> %443, i32 %330, i64 1, !dbg !59
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !59
  %446 = fsub <2 x float> %445, %442, !dbg !60
  %447 = fmul <2 x float> %446, %428, !dbg !61
  %448 = fadd <2 x float> %447, %442, !dbg !62
  %449 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !57
  %450 = insertelement <2 x i32> %449, i32 %283, i64 1, !dbg !57
  %451 = bitcast <2 x i32> %450 to <2 x float>, !dbg !57
  %452 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !59
  %453 = insertelement <2 x i32> %452, i32 %331, i64 1, !dbg !59
  %454 = bitcast <2 x i32> %453 to <2 x float>, !dbg !59
  %455 = fsub <2 x float> %454, %451, !dbg !60
  %456 = fmul <2 x float> %455, %428, !dbg !61
  %457 = fadd <2 x float> %456, %451, !dbg !62
  %458 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !57
  %459 = insertelement <2 x i32> %458, i32 %285, i64 1, !dbg !57
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !57
  %461 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !59
  %462 = insertelement <2 x i32> %461, i32 %333, i64 1, !dbg !59
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !59
  %464 = fsub <2 x float> %463, %460, !dbg !60
  %465 = insertelement <2 x i32> poison, i32 %122, i64 0, !dbg !61
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !61
  %467 = shufflevector <2 x float> %466, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %468 = fmul <2 x float> %464, %467, !dbg !61
  %469 = fadd <2 x float> %468, %460, !dbg !62
  %470 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !57
  %471 = insertelement <2 x i32> %470, i32 %286, i64 1, !dbg !57
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !57
  %473 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !59
  %474 = insertelement <2 x i32> %473, i32 %334, i64 1, !dbg !59
  %475 = bitcast <2 x i32> %474 to <2 x float>, !dbg !59
  %476 = fsub <2 x float> %475, %472, !dbg !60
  %477 = fmul <2 x float> %476, %467, !dbg !61
  %478 = fadd <2 x float> %477, %472, !dbg !62
  %479 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !57
  %480 = insertelement <2 x i32> %479, i32 %287, i64 1, !dbg !57
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !57
  %482 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !59
  %483 = insertelement <2 x i32> %482, i32 %335, i64 1, !dbg !59
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !59
  %485 = fsub <2 x float> %484, %481, !dbg !60
  %486 = fmul <2 x float> %485, %467, !dbg !61
  %487 = fadd <2 x float> %486, %481, !dbg !62
  %488 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !57
  %489 = insertelement <2 x i32> %488, i32 %288, i64 1, !dbg !57
  %490 = bitcast <2 x i32> %489 to <2 x float>, !dbg !57
  %491 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !59
  %492 = insertelement <2 x i32> %491, i32 %336, i64 1, !dbg !59
  %493 = bitcast <2 x i32> %492 to <2 x float>, !dbg !59
  %494 = fsub <2 x float> %493, %490, !dbg !60
  %495 = fmul <2 x float> %494, %467, !dbg !61
  %496 = fadd <2 x float> %495, %490, !dbg !62
  %497 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !57
  %498 = insertelement <2 x i32> %497, i32 %290, i64 1, !dbg !57
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !57
  %500 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !59
  %501 = insertelement <2 x i32> %500, i32 %338, i64 1, !dbg !59
  %502 = bitcast <2 x i32> %501 to <2 x float>, !dbg !59
  %503 = fsub <2 x float> %502, %499, !dbg !60
  %504 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !61
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !61
  %506 = shufflevector <2 x float> %505, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %507 = fmul <2 x float> %503, %506, !dbg !61
  %508 = fadd <2 x float> %507, %499, !dbg !62
  %509 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !57
  %510 = insertelement <2 x i32> %509, i32 %291, i64 1, !dbg !57
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !57
  %512 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !59
  %513 = insertelement <2 x i32> %512, i32 %339, i64 1, !dbg !59
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !59
  %515 = fsub <2 x float> %514, %511, !dbg !60
  %516 = fmul <2 x float> %515, %506, !dbg !61
  %517 = fadd <2 x float> %516, %511, !dbg !62
  %518 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !57
  %519 = insertelement <2 x i32> %518, i32 %292, i64 1, !dbg !57
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !57
  %521 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !59
  %522 = insertelement <2 x i32> %521, i32 %340, i64 1, !dbg !59
  %523 = bitcast <2 x i32> %522 to <2 x float>, !dbg !59
  %524 = fsub <2 x float> %523, %520, !dbg !60
  %525 = fmul <2 x float> %524, %506, !dbg !61
  %526 = fadd <2 x float> %525, %520, !dbg !62
  %527 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !57
  %528 = insertelement <2 x i32> %527, i32 %293, i64 1, !dbg !57
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !57
  %530 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !59
  %531 = insertelement <2 x i32> %530, i32 %341, i64 1, !dbg !59
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !59
  %533 = fsub <2 x float> %532, %529, !dbg !60
  %534 = fmul <2 x float> %533, %506, !dbg !61
  %535 = fadd <2 x float> %534, %529, !dbg !62
  %536 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !57
  %537 = insertelement <2 x i32> %536, i32 %295, i64 1, !dbg !57
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !57
  %539 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !59
  %540 = insertelement <2 x i32> %539, i32 %343, i64 1, !dbg !59
  %541 = bitcast <2 x i32> %540 to <2 x float>, !dbg !59
  %542 = fsub <2 x float> %541, %538, !dbg !60
  %543 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !61
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !61
  %545 = shufflevector <2 x float> %544, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %546 = fmul <2 x float> %542, %545, !dbg !61
  %547 = fadd <2 x float> %546, %538, !dbg !62
  %548 = insertelement <2 x i32> poison, i32 %388, i64 0, !dbg !57
  %549 = insertelement <2 x i32> %548, i32 %296, i64 1, !dbg !57
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !57
  %551 = insertelement <2 x i32> poison, i32 %416, i64 0, !dbg !59
  %552 = insertelement <2 x i32> %551, i32 %344, i64 1, !dbg !59
  %553 = bitcast <2 x i32> %552 to <2 x float>, !dbg !59
  %554 = fsub <2 x float> %553, %550, !dbg !60
  %555 = fmul <2 x float> %554, %545, !dbg !61
  %556 = fadd <2 x float> %555, %550, !dbg !62
  %557 = insertelement <2 x i32> poison, i32 %389, i64 0, !dbg !57
  %558 = insertelement <2 x i32> %557, i32 %297, i64 1, !dbg !57
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !57
  %560 = insertelement <2 x i32> poison, i32 %417, i64 0, !dbg !59
  %561 = insertelement <2 x i32> %560, i32 %345, i64 1, !dbg !59
  %562 = bitcast <2 x i32> %561 to <2 x float>, !dbg !59
  %563 = fsub <2 x float> %562, %559, !dbg !60
  %564 = fmul <2 x float> %563, %545, !dbg !61
  %565 = fadd <2 x float> %564, %559, !dbg !62
  %566 = insertelement <2 x i32> poison, i32 %390, i64 0, !dbg !57
  %567 = insertelement <2 x i32> %566, i32 %298, i64 1, !dbg !57
  %568 = bitcast <2 x i32> %567 to <2 x float>, !dbg !57
  %569 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !59
  %570 = insertelement <2 x i32> %569, i32 %346, i64 1, !dbg !59
  %571 = bitcast <2 x i32> %570 to <2 x float>, !dbg !59
  %572 = fsub <2 x float> %571, %568, !dbg !60
  %573 = fmul <2 x float> %572, %545, !dbg !61
  %574 = fadd <2 x float> %573, %568, !dbg !62
  %575 = extractelement <2 x float> %430, i64 0, !dbg !63
  %576 = extractelement <2 x float> %430, i64 1, !dbg !64
  %577 = fsub float %575, %576, !dbg !63
  %578 = extractelement <2 x float> %439, i64 0, !dbg !63
  %579 = extractelement <2 x float> %439, i64 1, !dbg !64
  %580 = fsub float %578, %579, !dbg !63
  %581 = extractelement <2 x float> %448, i64 0, !dbg !63
  %582 = extractelement <2 x float> %448, i64 1, !dbg !64
  %583 = fsub float %581, %582, !dbg !63
  %584 = extractelement <2 x float> %457, i64 0, !dbg !63
  %585 = extractelement <2 x float> %457, i64 1, !dbg !64
  %586 = fsub float %584, %585, !dbg !63
  %587 = extractelement <2 x float> %469, i64 0, !dbg !63
  %588 = extractelement <2 x float> %469, i64 1, !dbg !64
  %589 = fsub float %587, %588, !dbg !63
  %590 = extractelement <2 x float> %478, i64 0, !dbg !63
  %591 = extractelement <2 x float> %478, i64 1, !dbg !64
  %592 = fsub float %590, %591, !dbg !63
  %593 = extractelement <2 x float> %487, i64 0, !dbg !63
  %594 = extractelement <2 x float> %487, i64 1, !dbg !64
  %595 = fsub float %593, %594, !dbg !63
  %596 = extractelement <2 x float> %496, i64 0, !dbg !63
  %597 = extractelement <2 x float> %496, i64 1, !dbg !64
  %598 = fsub float %596, %597, !dbg !63
  %599 = extractelement <2 x float> %508, i64 0, !dbg !63
  %600 = extractelement <2 x float> %508, i64 1, !dbg !64
  %601 = fsub float %599, %600, !dbg !63
  %602 = extractelement <2 x float> %517, i64 0, !dbg !63
  %603 = extractelement <2 x float> %517, i64 1, !dbg !64
  %604 = fsub float %602, %603, !dbg !63
  %605 = extractelement <2 x float> %526, i64 0, !dbg !63
  %606 = extractelement <2 x float> %526, i64 1, !dbg !64
  %607 = fsub float %605, %606, !dbg !63
  %608 = extractelement <2 x float> %535, i64 0, !dbg !63
  %609 = extractelement <2 x float> %535, i64 1, !dbg !64
  %610 = fsub float %608, %609, !dbg !63
  %611 = extractelement <2 x float> %547, i64 0, !dbg !63
  %612 = extractelement <2 x float> %547, i64 1, !dbg !64
  %613 = fsub float %611, %612, !dbg !63
  %614 = extractelement <2 x float> %556, i64 0, !dbg !63
  %615 = extractelement <2 x float> %556, i64 1, !dbg !64
  %616 = fsub float %614, %615, !dbg !63
  %617 = extractelement <2 x float> %565, i64 0, !dbg !63
  %618 = extractelement <2 x float> %565, i64 1, !dbg !64
  %619 = fsub float %617, %618, !dbg !63
  %620 = extractelement <2 x float> %574, i64 0, !dbg !63
  %621 = extractelement <2 x float> %574, i64 1, !dbg !64
  %622 = fsub float %620, %621, !dbg !63
  %623 = fmul float %577, %159, !dbg !65
  %624 = fmul float %580, %159, !dbg !65
  %625 = fmul float %583, %159, !dbg !65
  %626 = fmul float %586, %159, !dbg !65
  %627 = fmul float %589, %164, !dbg !65
  %628 = fmul float %592, %164, !dbg !65
  %629 = fmul float %595, %164, !dbg !65
  %630 = fmul float %598, %164, !dbg !65
  %631 = fmul float %601, %169, !dbg !65
  %632 = fmul float %604, %169, !dbg !65
  %633 = fmul float %607, %169, !dbg !65
  %634 = fmul float %610, %169, !dbg !65
  %635 = fmul float %613, %174, !dbg !65
  %636 = fmul float %616, %174, !dbg !65
  %637 = fmul float %619, %174, !dbg !65
  %638 = fmul float %622, %174, !dbg !65
  %639 = fadd float %576, %623, !dbg !64
  %640 = fadd float %579, %624, !dbg !64
  %641 = fadd float %582, %625, !dbg !64
  %642 = fadd float %585, %626, !dbg !64
  %643 = fadd float %588, %627, !dbg !64
  %644 = fadd float %591, %628, !dbg !64
  %645 = fadd float %594, %629, !dbg !64
  %646 = fadd float %597, %630, !dbg !64
  %647 = fadd float %600, %631, !dbg !64
  %648 = fadd float %603, %632, !dbg !64
  %649 = fadd float %606, %633, !dbg !64
  %650 = fadd float %609, %634, !dbg !64
  %651 = fadd float %612, %635, !dbg !64
  %652 = fadd float %615, %636, !dbg !64
  %653 = fadd float %618, %637, !dbg !64
  %654 = fadd float %621, %638, !dbg !64
  %655 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !66
  %656 = insertelement <1 x i32> poison, i32 %231, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %655, <1 x i32> %656, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %657 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !66
  %658 = load float, ptr addrspace(3) %657, align 16, !dbg !66
  %659 = getelementptr inbounds i8, ptr addrspace(3) %657, i32 4, !dbg !66
  %660 = load float, ptr addrspace(3) %659, align 4, !dbg !66
  %661 = getelementptr inbounds i8, ptr addrspace(3) %657, i32 8, !dbg !66
  %662 = load float, ptr addrspace(3) %661, align 8, !dbg !66
  %663 = getelementptr inbounds i8, ptr addrspace(3) %657, i32 12, !dbg !66
  %664 = load float, ptr addrspace(3) %663, align 4, !dbg !66
  %665 = fadd float %658, %198, !dbg !66
  %666 = fadd float %660, %199, !dbg !66
  %667 = fadd float %662, %200, !dbg !66
  %668 = fadd float %664, %201, !dbg !66
  %669 = fadd float %658, %207, !dbg !66
  %670 = fadd float %660, %208, !dbg !66
  %671 = fadd float %662, %209, !dbg !66
  %672 = fadd float %664, %210, !dbg !66
  %673 = fadd float %658, %216, !dbg !66
  %674 = fadd float %660, %217, !dbg !66
  %675 = fadd float %662, %218, !dbg !66
  %676 = fadd float %664, %219, !dbg !66
  %677 = fadd float %658, %225, !dbg !66
  %678 = fadd float %660, %226, !dbg !66
  %679 = fadd float %662, %227, !dbg !66
  %680 = fadd float %664, %228, !dbg !66
  %681 = fadd float %639, %665, !dbg !67
  %682 = fadd float %640, %666, !dbg !67
  %683 = fadd float %641, %667, !dbg !67
  %684 = fadd float %642, %668, !dbg !67
  %685 = fadd float %669, %643, !dbg !67
  %686 = fadd float %670, %644, !dbg !67
  %687 = fadd float %671, %645, !dbg !67
  %688 = fadd float %672, %646, !dbg !67
  %689 = fadd float %673, %647, !dbg !67
  %690 = fadd float %674, %648, !dbg !67
  %691 = fadd float %675, %649, !dbg !67
  %692 = fadd float %676, %650, !dbg !67
  %693 = fadd float %677, %651, !dbg !67
  %694 = fadd float %678, %652, !dbg !67
  %695 = fadd float %679, %653, !dbg !67
  %696 = fadd float %680, %654, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %697 = bitcast float %681 to i32, !dbg !69
  %698 = bitcast float %682 to i32, !dbg !69
  %699 = bitcast float %683 to i32, !dbg !69
  %700 = bitcast float %684 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %697, i32 %698, i32 %699, i32 %700, ptr addrspace(1) %186, i1 %28) #2, !dbg !69
  %701 = bitcast float %685 to i32, !dbg !69
  %702 = bitcast float %686 to i32, !dbg !69
  %703 = bitcast float %687 to i32, !dbg !69
  %704 = bitcast float %688 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %701, i32 %702, i32 %703, i32 %704, ptr addrspace(1) %188, i1 %29) #2, !dbg !69
  %705 = bitcast float %689 to i32, !dbg !69
  %706 = bitcast float %690 to i32, !dbg !69
  %707 = bitcast float %691 to i32, !dbg !69
  %708 = bitcast float %692 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %705, i32 %706, i32 %707, i32 %708, ptr addrspace(1) %190, i1 %30) #2, !dbg !69
  %709 = bitcast float %693 to i32, !dbg !69
  %710 = bitcast float %694 to i32, !dbg !69
  %711 = bitcast float %695 to i32, !dbg !69
  %712 = bitcast float %696 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %709, i32 %710, i32 %711, i32 %712, ptr addrspace(1) %192, i1 %31) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckq3mudpgtz3thfmgij6dydou2gqzsipmtaudy7526kmqzavnaas.py", directory: "inductor_cache/kq")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_32", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 55, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 51, scope: !7)
!47 = !DILocation(line: 49, column: 64, scope: !7)
!48 = !DILocation(line: 49, column: 58, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 69, scope: !7)
!51 = !DILocation(line: 52, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 71, scope: !7)
!54 = !DILocation(line: 59, column: 35, scope: !7)
!55 = !DILocation(line: 60, column: 52, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 71, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 72, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 4, scope: !7)
!69 = !DILocation(line: 71, column: 60, scope: !7)
!70 = !DILocation(line: 71, column: 4, scope: !7)
