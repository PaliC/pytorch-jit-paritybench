; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 32, !dbg !14
  %19 = srem i32 %18, 32, !dbg !15
  %20 = mul i32 %18, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 1024, !dbg !17
  %22 = srem i32 %21, 256, !dbg !18
  %23 = sext i32 %19 to i64, !dbg !19
  %24 = getelementptr i64, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !21
  %29 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %30 = extractvalue { i64, i64 } %29, 0, !dbg !22
  %31 = extractvalue { i64, i64 } %29, 1, !dbg !22
  %32 = sext i32 %22 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !24
  %36 = getelementptr i64, ptr addrspace(1) %6, i64 %23, !dbg !25
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !26
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !26
  %39 = getelementptr i64, ptr addrspace(1) %7, i64 %27, !dbg !27
  %40 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !28
  %41 = extractvalue { i64, i64 } %40, 0, !dbg !28
  %42 = extractvalue { i64, i64 } %40, 1, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !30
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %9, i64 %23, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !32
  %49 = bitcast i32 %48 to float, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = lshr i64 %25, 59, !dbg !33
  %53 = and i64 %52, 16, !dbg !33
  %54 = add i64 %53, %25, !dbg !33
  %55 = lshr i64 %30, 59, !dbg !34
  %56 = and i64 %55, 16, !dbg !34
  %57 = add i64 %56, %30, !dbg !34
  %58 = lshr i64 %31, 59, !dbg !34
  %59 = and i64 %58, 16, !dbg !34
  %60 = add i64 %59, %31, !dbg !34
  %61 = shl i64 %54, 4, !dbg !35
  %62 = shl nsw i32 %21, 8, !dbg !36
  %63 = sext i32 %62 to i64, !dbg !37
  %64 = add i64 %61, %63, !dbg !38
  %65 = add i64 %64, %57, !dbg !37
  %66 = add i64 %64, %60, !dbg !37
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !40
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !41
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !42
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !42
  %75 = lshr i64 %37, 59, !dbg !43
  %76 = and i64 %75, 16, !dbg !43
  %77 = add i64 %76, %37, !dbg !43
  %78 = shl i64 %77, 4, !dbg !44
  %79 = add i64 %78, %63, !dbg !45
  %80 = add i64 %79, %57, !dbg !46
  %81 = add i64 %79, %60, !dbg !46
  %82 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !47
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !48
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %5, i64 %80, !dbg !49
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !49
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !50
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !50
  %90 = lshr i64 %41, 59, !dbg !51
  %91 = and i64 %90, 16, !dbg !51
  %92 = add i64 %91, %41, !dbg !51
  %93 = lshr i64 %42, 59, !dbg !51
  %94 = and i64 %93, 16, !dbg !51
  %95 = add i64 %94, %42, !dbg !51
  %96 = add i64 %79, %92, !dbg !52
  %97 = add i64 %79, %95, !dbg !52
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !53
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !53
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !54
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !54
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !55
  %103 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !55
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !56
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !56
  %106 = add i64 %64, %92, !dbg !57
  %107 = add i64 %64, %95, !dbg !57
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !58
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !58
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !59
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !59
  %112 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !60
  %113 = getelementptr float, ptr addrspace(1) %5, i64 %107, !dbg !60
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !61
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #1, !dbg !61
  %116 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !40
  %117 = insertelement <2 x i32> %116, i32 %84, i64 1, !dbg !40
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !40
  %119 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !62
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !62
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %122 = fadd <2 x float> %121, %118, !dbg !62
  %123 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !42
  %124 = insertelement <2 x i32> %123, i32 %88, i64 1, !dbg !42
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !42
  %126 = fadd <2 x float> %122, %125, !dbg !63
  %127 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !59
  %128 = insertelement <2 x i32> %127, i32 %100, i64 1, !dbg !59
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !59
  %130 = fadd <2 x float> %121, %129, !dbg !64
  %131 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !61
  %132 = insertelement <2 x i32> %131, i32 %104, i64 1, !dbg !61
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !61
  %134 = fadd <2 x float> %130, %133, !dbg !65
  %135 = fsub <2 x float> %134, %126, !dbg !66
  %136 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !67
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !67
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %139 = fmul <2 x float> %135, %138, !dbg !67
  %140 = fadd <2 x float> %126, %139, !dbg !68
  %141 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !40
  %142 = insertelement <2 x i32> %141, i32 %85, i64 1, !dbg !40
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !40
  %144 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !62
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !62
  %146 = shufflevector <2 x float> %145, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !62
  %147 = fadd <2 x float> %146, %143, !dbg !62
  %148 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %149 = insertelement <2 x i32> %148, i32 %89, i64 1, !dbg !42
  %150 = bitcast <2 x i32> %149 to <2 x float>, !dbg !42
  %151 = fadd <2 x float> %147, %150, !dbg !63
  %152 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !59
  %153 = insertelement <2 x i32> %152, i32 %101, i64 1, !dbg !59
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !59
  %155 = fadd <2 x float> %146, %154, !dbg !64
  %156 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !61
  %157 = insertelement <2 x i32> %156, i32 %105, i64 1, !dbg !61
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !61
  %159 = fadd <2 x float> %155, %158, !dbg !65
  %160 = fsub <2 x float> %159, %151, !dbg !66
  %161 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !67
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !67
  %163 = shufflevector <2 x float> %162, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %164 = fmul <2 x float> %160, %163, !dbg !67
  %165 = fadd <2 x float> %151, %164, !dbg !68
  %166 = extractelement <2 x float> %140, i64 0, !dbg !69
  %167 = extractelement <2 x float> %140, i64 1, !dbg !70
  %168 = fsub float %166, %167, !dbg !69
  %169 = extractelement <2 x float> %165, i64 0, !dbg !69
  %170 = extractelement <2 x float> %165, i64 1, !dbg !70
  %171 = fsub float %169, %170, !dbg !69
  %172 = fmul float %168, %49, !dbg !71
  %173 = fmul float %171, %51, !dbg !71
  %174 = fadd float %167, %172, !dbg !70
  %175 = fadd float %170, %173, !dbg !70
  %176 = sext i32 %17 to i64, !dbg !72
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !72
  %178 = bitcast float %174 to i32, !dbg !73
  %179 = bitcast float %175 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %179, ptr addrspace(1) %177, i1 true) #1, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccy3c7dromkcmkhpzy53oywitlwilcjowu7ypx7bf4hcdnl65bts.py", directory: "inductor_cache/cy")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_40, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_40", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 40, scope: !7)
!36 = !DILocation(line: 43, column: 51, scope: !7)
!37 = !DILocation(line: 43, column: 47, scope: !7)
!38 = !DILocation(line: 43, column: 37, scope: !7)
!39 = !DILocation(line: 43, column: 30, scope: !7)
!40 = !DILocation(line: 43, column: 56, scope: !7)
!41 = !DILocation(line: 45, column: 31, scope: !7)
!42 = !DILocation(line: 45, column: 57, scope: !7)
!43 = !DILocation(line: 49, column: 35, scope: !7)
!44 = !DILocation(line: 50, column: 41, scope: !7)
!45 = !DILocation(line: 50, column: 38, scope: !7)
!46 = !DILocation(line: 50, column: 49, scope: !7)
!47 = !DILocation(line: 50, column: 31, scope: !7)
!48 = !DILocation(line: 50, column: 58, scope: !7)
!49 = !DILocation(line: 52, column: 31, scope: !7)
!50 = !DILocation(line: 52, column: 58, scope: !7)
!51 = !DILocation(line: 56, column: 35, scope: !7)
!52 = !DILocation(line: 57, column: 50, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 59, scope: !7)
!55 = !DILocation(line: 59, column: 31, scope: !7)
!56 = !DILocation(line: 59, column: 59, scope: !7)
!57 = !DILocation(line: 64, column: 49, scope: !7)
!58 = !DILocation(line: 64, column: 31, scope: !7)
!59 = !DILocation(line: 64, column: 58, scope: !7)
!60 = !DILocation(line: 66, column: 31, scope: !7)
!61 = !DILocation(line: 66, column: 58, scope: !7)
!62 = !DILocation(line: 44, column: 19, scope: !7)
!63 = !DILocation(line: 46, column: 20, scope: !7)
!64 = !DILocation(line: 65, column: 20, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 20, scope: !7)
!70 = !DILocation(line: 73, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 28, scope: !7)
!73 = !DILocation(line: 74, column: 40, scope: !7)
!74 = !DILocation(line: 74, column: 4, scope: !7)
