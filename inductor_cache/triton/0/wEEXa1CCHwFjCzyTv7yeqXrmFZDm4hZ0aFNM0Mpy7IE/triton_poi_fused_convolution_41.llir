; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %.lobit1 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = icmp slt i32 %12, 8, !dbg !14
  %16 = icmp slt i32 %13, 8, !dbg !14
  %17 = icmp slt i32 %14, 8, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 7, !dbg !16
  %20 = lshr i32 %8, 2, !dbg !17
  %21 = and i32 %20, 31, !dbg !17
  %22 = or disjoint i32 %21, 32, !dbg !17
  %23 = or disjoint i32 %21, 64, !dbg !17
  %24 = or disjoint i32 %21, 96, !dbg !17
  %25 = shl i32 %8, 2, !dbg !17
  %26 = and i32 %25, 124, !dbg !17
  %27 = or disjoint i32 %19, %21, !dbg !18
  %28 = or disjoint i32 %19, %22, !dbg !18
  %29 = or disjoint i32 %19, %23, !dbg !18
  %30 = or disjoint i32 %19, %24, !dbg !18
  %31 = or disjoint i32 %19, %26, !dbg !18
  %32 = shl i32 %27, 1, !dbg !19
  %33 = shl i32 %28, 1, !dbg !19
  %34 = shl i32 %29, 1, !dbg !19
  %35 = shl i32 %30, 1, !dbg !19
  %36 = shl i32 %12, 12, !dbg !20
  %37 = add i32 %32, %36, !dbg !21
  %38 = add i32 %33, %36, !dbg !21
  %39 = add i32 %34, %36, !dbg !21
  %40 = add i32 %35, %36, !dbg !21
  %41 = sext i32 %37 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %38 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %39 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %40 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %15) #2, !dbg !23
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !23
  %52 = bitcast i32 %50 to float, !dbg !23
  %53 = bitcast i32 %51 to float, !dbg !23
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %15) #2, !dbg !23
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !23
  %57 = bitcast i32 %55 to float, !dbg !23
  %58 = bitcast i32 %56 to float, !dbg !23
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %15) #2, !dbg !23
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !23
  %62 = bitcast i32 %60 to float, !dbg !23
  %63 = bitcast i32 %61 to float, !dbg !23
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %15) #2, !dbg !23
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !23
  %67 = bitcast i32 %65 to float, !dbg !23
  %68 = bitcast i32 %66 to float, !dbg !23
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %1, i1 %15) #2, !dbg !24
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !24
  %72 = bitcast i32 %70 to float, !dbg !24
  %73 = bitcast i32 %71 to float, !dbg !24
  %74 = fadd float %52, %72, !dbg !25
  %75 = fadd float %53, %73, !dbg !25
  %76 = fadd float %57, %72, !dbg !25
  %77 = fadd float %58, %73, !dbg !25
  %78 = fadd float %62, %72, !dbg !25
  %79 = fadd float %63, %73, !dbg !25
  %80 = fadd float %67, %72, !dbg !25
  %81 = fadd float %68, %73, !dbg !25
  %82 = shl i32 %13, 12, !dbg !26
  %83 = shl i32 %14, 12, !dbg !26
  %84 = add i32 %31, %82, !dbg !27
  %85 = add i32 %31, %83, !dbg !27
  %86 = sext i32 %84 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !28
  %88 = sext i32 %85 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !28
  %90 = shl i32 %8, 8, !dbg !29
  %91 = and i32 %90, 768, !dbg !29
  %92 = or disjoint i32 %91, %21, !dbg !29
  %93 = and i32 %25, 508, !dbg !29
  %94 = lshr exact i32 %91, 5, !dbg !29
  %95 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %94, !dbg !29
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !29
  %97 = bitcast float %74 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !29
  %98 = or disjoint i32 %92, 128, !dbg !29
  %99 = lshr i32 %98, 7, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !29
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %98, !dbg !29
  %102 = bitcast float %75 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !29
  %103 = or disjoint i32 %92, 32, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) %95, i32 %103, !dbg !29
  %105 = bitcast float %76 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !29
  %106 = or disjoint i32 %92, 160, !dbg !29
  %107 = lshr i32 %106, 7, !dbg !29
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !29
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !29
  %110 = bitcast float %77 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !29
  %111 = or disjoint i32 %92, 64, !dbg !29
  %112 = getelementptr float, ptr addrspace(3) %95, i32 %111, !dbg !29
  %113 = bitcast float %78 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !29
  %114 = or disjoint i32 %92, 192, !dbg !29
  %115 = lshr i32 %114, 7, !dbg !29
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !29
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !29
  %118 = bitcast float %79 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #2, !dbg !29
  %119 = or disjoint i32 %92, 96, !dbg !29
  %120 = getelementptr float, ptr addrspace(3) %95, i32 %119, !dbg !29
  %121 = bitcast float %80 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !29
  %122 = or disjoint i32 %92, 224, !dbg !29
  %123 = lshr i32 %122, 7, !dbg !29
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !29
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !29
  %126 = bitcast float %81 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %127 = lshr i32 %93, 7, !dbg !29
  %128 = or disjoint i32 %127, %93, !dbg !29
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !29
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !29
  %131 = or disjoint i32 %93, 1, !dbg !29
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !29
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %131, !dbg !29
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !29
  %135 = or disjoint i32 %93, 2, !dbg !29
  %136 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %135, !dbg !29
  %137 = load i32, ptr addrspace(3) %136, align 4, !dbg !29
  %138 = or disjoint i32 %93, 3, !dbg !29
  %139 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %138, !dbg !29
  %140 = load i32, ptr addrspace(3) %139, align 4, !dbg !29
  %141 = or disjoint i32 %93, 512, !dbg !29
  %142 = lshr i32 %141, 7, !dbg !29
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !29
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %141, !dbg !29
  %145 = load i32, ptr addrspace(3) %144, align 4, !dbg !29
  %146 = or disjoint i32 %93, 513, !dbg !29
  %147 = lshr i32 %146, 7, !dbg !29
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %147, !dbg !29
  %149 = getelementptr inbounds float, ptr addrspace(3) %148, i32 %146, !dbg !29
  %150 = load i32, ptr addrspace(3) %149, align 4, !dbg !29
  %151 = or disjoint i32 %93, 514, !dbg !29
  %152 = lshr i32 %151, 7, !dbg !29
  %153 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %152, !dbg !29
  %154 = getelementptr inbounds float, ptr addrspace(3) %153, i32 %151, !dbg !29
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !29
  %156 = or disjoint i32 %93, 515, !dbg !29
  %157 = lshr i32 %156, 7, !dbg !29
  %158 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %157, !dbg !29
  %159 = getelementptr inbounds float, ptr addrspace(3) %158, i32 %156, !dbg !29
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %134, i32 %137, i32 %140, ptr addrspace(1) %87, i1 %16) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %145, i32 %150, i32 %155, i32 %160, ptr addrspace(1) %89, i1 %17) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbdaapx5o3arptlvnk46rvjgcf6yrpzxsvtaztdbczzxydav3yxt.py", directory: "inductor_cache/bd")
!4 = !{ptr @triton_poi_fused_convolution_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_41", linkageName: "triton_poi_fused_convolution_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
