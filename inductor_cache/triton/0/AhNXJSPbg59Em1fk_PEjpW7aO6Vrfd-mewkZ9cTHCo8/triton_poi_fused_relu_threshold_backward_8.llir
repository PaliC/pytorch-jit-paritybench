; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = icmp slt i32 %13, 4608, !dbg !14
  %18 = icmp slt i32 %15, 4608, !dbg !14
  %19 = icmp slt i32 %16, 4608, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = lshr i32 %8, 2, !dbg !17
  %23 = and i32 %22, 31, !dbg !17
  %24 = shl i32 %8, 2, !dbg !17
  %25 = and i32 %24, 28, !dbg !17
  %26 = or disjoint i32 %21, %23, !dbg !18
  %27 = or disjoint i32 %21, %25, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %28 = sdiv i32 %.frozen, 1152, !dbg !19
  %29 = mul i32 %28, 1152, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %14, 1152, !dbg !20
  %31 = mul i32 %26, 1152, !dbg !21
  %32 = mul i32 %28, 4718592, !dbg !22
  %33 = add i32 %32, %31, !dbg !23
  %34 = add i32 %33, %.decomposed, !dbg !24
  %35 = add i32 %33, %30, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %17) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %17) #2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %50 = shl i32 %15, 12, !dbg !27
  %51 = shl i32 %16, 12, !dbg !27
  %52 = add i32 %27, %50, !dbg !28
  %53 = add i32 %27, %51, !dbg !28
  %54 = sext i32 %52 to i64, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !29
  %56 = sext i32 %53 to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !29
  %58 = shl i32 %8, 8, !dbg !30
  %59 = and i32 %58, 768, !dbg !30
  %60 = or disjoint i32 %59, %23, !dbg !30
  %61 = and i32 %24, 508, !dbg !30
  %62 = lshr exact i32 %59, 3, !dbg !30
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !30
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %60, !dbg !30
  %65 = or disjoint i32 %60, 32, !dbg !30
  %66 = lshr i32 %65, 5, !dbg !30
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !30
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !30
  %69 = or disjoint i32 %60, 64, !dbg !30
  %70 = lshr i32 %69, 5, !dbg !30
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !30
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !30
  %73 = or disjoint i32 %60, 96, !dbg !30
  %74 = lshr i32 %73, 5, !dbg !30
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !30
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !30
  %77 = or disjoint i32 %60, 128, !dbg !30
  %78 = lshr i32 %77, 5, !dbg !30
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !30
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !30
  %81 = or disjoint i32 %60, 160, !dbg !30
  %82 = lshr i32 %81, 5, !dbg !30
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !30
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !30
  %85 = or disjoint i32 %60, 192, !dbg !30
  %86 = lshr i32 %85, 5, !dbg !30
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !30
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !30
  %89 = or disjoint i32 %60, 224, !dbg !30
  %90 = lshr i32 %89, 5, !dbg !30
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !30
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !30
  %93 = lshr i32 %61, 5, !dbg !30
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93, !dbg !30
  %95 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %61, !dbg !30
  %96 = or disjoint i32 %61, 1, !dbg !30
  %97 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %96, !dbg !30
  %98 = or disjoint i32 %61, 2, !dbg !30
  %99 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %98, !dbg !30
  %100 = or disjoint i32 %61, 3, !dbg !30
  %101 = getelementptr inbounds float, ptr addrspace(3) %94, i32 %100, !dbg !30
  %102 = or disjoint i32 %61, 512, !dbg !30
  %103 = lshr i32 %102, 5, !dbg !30
  %104 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !30
  %105 = getelementptr inbounds float, ptr addrspace(3) %104, i32 %102, !dbg !30
  %106 = or disjoint i32 %61, 513, !dbg !30
  %107 = lshr i32 %106, 5, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !30
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %106, !dbg !30
  %110 = or disjoint i32 %61, 514, !dbg !30
  %111 = lshr i32 %110, 5, !dbg !30
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !30
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !30
  %114 = or disjoint i32 %61, 515, !dbg !30
  %115 = lshr i32 %114, 5, !dbg !30
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !30
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114, !dbg !30
  %118 = getelementptr i1, ptr addrspace(1) %2, i64 %36, !dbg !31
  %119 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !26
  %120 = insertelement <4 x i32> %119, i32 %42, i64 1, !dbg !26
  %121 = insertelement <4 x i32> %120, i32 %43, i64 2, !dbg !26
  %122 = insertelement <4 x i32> %121, i32 %44, i64 3, !dbg !26
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !26
  %124 = fcmp olt <4 x float> %123, zeroinitializer, !dbg !32
  %125 = select <4 x i1> %124, <4 x float> zeroinitializer, <4 x float> %123, !dbg !36
  %126 = fcmp ole <4 x float> %125, zeroinitializer, !dbg !37
  %127 = extractelement <4 x float> %125, i64 0, !dbg !30
  %128 = bitcast float %127 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %128, i1 true) #2, !dbg !30
  %129 = extractelement <4 x float> %125, i64 1, !dbg !30
  %130 = bitcast float %129 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %130, i1 true) #2, !dbg !30
  %131 = extractelement <4 x float> %125, i64 2, !dbg !30
  %132 = bitcast float %131 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %132, i1 true) #2, !dbg !30
  %133 = extractelement <4 x float> %125, i64 3, !dbg !30
  %134 = bitcast float %133 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %134, i1 true) #2, !dbg !30
  %135 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !26
  %136 = insertelement <4 x i32> %135, i32 %47, i64 1, !dbg !26
  %137 = insertelement <4 x i32> %136, i32 %48, i64 2, !dbg !26
  %138 = insertelement <4 x i32> %137, i32 %49, i64 3, !dbg !26
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !26
  %140 = fcmp olt <4 x float> %139, zeroinitializer, !dbg !32
  %141 = select <4 x i1> %140, <4 x float> zeroinitializer, <4 x float> %139, !dbg !36
  %142 = fcmp ole <4 x float> %141, zeroinitializer, !dbg !37
  %143 = extractelement <4 x float> %141, i64 0, !dbg !30
  %144 = bitcast float %143 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %144, i1 true) #2, !dbg !30
  %145 = extractelement <4 x float> %141, i64 1, !dbg !30
  %146 = bitcast float %145 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %146, i1 true) #2, !dbg !30
  %147 = extractelement <4 x float> %141, i64 2, !dbg !30
  %148 = bitcast float %147 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %148, i1 true) #2, !dbg !30
  %149 = extractelement <4 x float> %141, i64 3, !dbg !30
  %150 = bitcast float %149 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %150, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %151 = load i32, ptr addrspace(3) %95, align 4, !dbg !30
  %152 = load i32, ptr addrspace(3) %97, align 4, !dbg !30
  %153 = load i32, ptr addrspace(3) %99, align 4, !dbg !30
  %154 = load i32, ptr addrspace(3) %101, align 4, !dbg !30
  %155 = load i32, ptr addrspace(3) %105, align 4, !dbg !30
  %156 = load i32, ptr addrspace(3) %109, align 4, !dbg !30
  %157 = load i32, ptr addrspace(3) %113, align 4, !dbg !30
  %158 = load i32, ptr addrspace(3) %117, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %151, i32 %152, i32 %153, i32 %154, ptr addrspace(1) %55, i1 %18) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %155, i32 %156, i32 %157, i32 %158, ptr addrspace(1) %57, i1 %19) #2, !dbg !30
  %159 = zext <4 x i1> %126 to <4 x i8>, !dbg !38
  %160 = bitcast <4 x i8> %159 to i32, !dbg !38
  %161 = zext <4 x i1> %142 to <4 x i8>, !dbg !38
  %162 = bitcast <4 x i8> %161 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %162, ptr addrspace(1) %118, i1 %17) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czsrrj4dhgnvuxkl5yhruanhjtsapg42cuwujuyimaj5lvwmxsoy.py", directory: "inductor_cache/zs")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_8", linkageName: "triton_poi_fused_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 58, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 59, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
