; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 6, !dbg !15
  %18 = lshr i32 %8, 2, !dbg !16
  %19 = and i32 %18, 31, !dbg !16
  %20 = and i32 %9, 60, !dbg !16
  %21 = or disjoint i32 %17, %19, !dbg !17
  %22 = or disjoint i32 %21, 32, !dbg !17
  %23 = or disjoint i32 %17, %20, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !18
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 512, !dbg !19
  %28 = mul i32 %27, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = sdiv i32 %14, 512, !dbg !19
  %30 = sdiv i32 %15, 512, !dbg !19
  %31 = shl i32 %21, 9, !dbg !21
  %32 = shl i32 %22, 9, !dbg !21
  %33 = shl i32 %27, 15, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %25) #4, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = shl i32 %8, 8, !dbg !26
  %52 = and i32 %51, 768, !dbg !26
  %53 = or disjoint i32 %52, %19, !dbg !26
  %54 = and i32 %9, 508, !dbg !26
  %55 = lshr exact i32 %52, 4, !dbg !26
  %56 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %53, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !26
  %59 = or disjoint i32 %53, 64, !dbg !26
  %60 = lshr i32 %59, 6, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #4, !dbg !26
  %64 = or disjoint i32 %53, 128, !dbg !26
  %65 = lshr i32 %64, 6, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !26
  %69 = or disjoint i32 %53, 192, !dbg !26
  %70 = lshr i32 %69, 6, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !26
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !26
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #4, !dbg !26
  %74 = or disjoint i32 %53, 32, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) %56, i32 %74, !dbg !26
  %76 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !26
  %77 = or disjoint i32 %53, 96, !dbg !26
  %78 = lshr i32 %77, 6, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !26
  %82 = or disjoint i32 %53, 160, !dbg !26
  %83 = lshr i32 %82, 6, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !26
  %86 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !26
  %87 = or disjoint i32 %53, 224, !dbg !26
  %88 = lshr i32 %87, 6, !dbg !26
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %92 = lshr i32 %54, 6, !dbg !26
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %54, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = or disjoint i32 %54, 1, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %96, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = or disjoint i32 %54, 2, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %99, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = or disjoint i32 %54, 3, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %102, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = or disjoint i32 %54, 512, !dbg !26
  %106 = lshr i32 %105, 6, !dbg !26
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %106, !dbg !26
  %108 = getelementptr inbounds float, ptr addrspace(3) %107, i32 %105, !dbg !26
  %109 = load float, ptr addrspace(3) %108, align 4, !dbg !26
  %110 = or disjoint i32 %54, 513, !dbg !26
  %111 = lshr i32 %110, 6, !dbg !26
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %110, !dbg !26
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !26
  %115 = or disjoint i32 %54, 514, !dbg !26
  %116 = lshr i32 %115, 6, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = or disjoint i32 %54, 515, !dbg !26
  %121 = lshr i32 %120, 6, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !26
  %125 = shl nsw i32 %29, 6, !dbg !27
  %126 = shl nsw i32 %30, 6, !dbg !27
  %127 = add i32 %125, %23, !dbg !28
  %128 = add i32 %23, %126, !dbg !28
  %129 = sext i32 %127 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !29
  %131 = sext i32 %128 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !29
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %130, i1 %26) #4, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !30
  %138 = bitcast i32 %134 to float, !dbg !30
  %139 = bitcast i32 %135 to float, !dbg !30
  %140 = bitcast i32 %136 to float, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 %26) #4, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !30
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = bitcast i32 %144 to float, !dbg !30
  %149 = bitcast i32 %145 to float, !dbg !30
  %150 = bitcast i32 %146 to float, !dbg !30
  %151 = fadd float %138, 0x3E112E0BE0000000, !dbg !31
  %152 = fadd float %139, 0x3E112E0BE0000000, !dbg !31
  %153 = fadd float %140, 0x3E112E0BE0000000, !dbg !31
  %154 = fadd float %141, 0x3E112E0BE0000000, !dbg !31
  %155 = fadd float %147, 0x3E112E0BE0000000, !dbg !31
  %156 = fadd float %148, 0x3E112E0BE0000000, !dbg !31
  %157 = fadd float %149, 0x3E112E0BE0000000, !dbg !31
  %158 = fadd float %150, 0x3E112E0BE0000000, !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %159, 0, !dbg !32
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %160, 0, !dbg !32
  br i1 %.not.i, label %166, label %161, !dbg !32

161:                                              ; preds = %5
  br i1 %.not1.i, label %164, label %162, !dbg !32

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

166:                                              ; preds = %5
  br i1 %.not1.i, label %169, label %167, !dbg !32

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %162, %164, %167, %169
  %.0.i = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !32
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i3 = icmp eq i32 %171, 0, !dbg !32
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i6 = icmp eq i32 %172, 0, !dbg !32
  br i1 %.not.i3, label %178, label %173, !dbg !32

173:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %176, label %174, !dbg !32

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

178:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %181, label %179, !dbg !32

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #4, !dbg !32
  br label %__nv_sqrtf.exit7, !dbg !32

__nv_sqrtf.exit7:                                 ; preds = %174, %176, %179, %181
  %.0.i5 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !32
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i8 = icmp eq i32 %183, 0, !dbg !32
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i11 = icmp eq i32 %184, 0, !dbg !32
  br i1 %.not.i8, label %190, label %185, !dbg !32

185:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %188, label %186, !dbg !32

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

190:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %193, label %191, !dbg !32

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #4, !dbg !32
  br label %__nv_sqrtf.exit12, !dbg !32

__nv_sqrtf.exit12:                                ; preds = %186, %188, %191, %193
  %.0.i10 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !32
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i13 = icmp eq i32 %195, 0, !dbg !32
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i16 = icmp eq i32 %196, 0, !dbg !32
  br i1 %.not.i13, label %202, label %197, !dbg !32

197:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %200, label %198, !dbg !32

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

202:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %205, label %203, !dbg !32

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #4, !dbg !32
  br label %__nv_sqrtf.exit17, !dbg !32

__nv_sqrtf.exit17:                                ; preds = %198, %200, %203, %205
  %.0.i15 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !32
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i18 = icmp eq i32 %207, 0, !dbg !32
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i21 = icmp eq i32 %208, 0, !dbg !32
  br i1 %.not.i18, label %214, label %209, !dbg !32

209:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %212, label %210, !dbg !32

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

214:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %217, label %215, !dbg !32

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #4, !dbg !32
  br label %__nv_sqrtf.exit22, !dbg !32

__nv_sqrtf.exit22:                                ; preds = %210, %212, %215, %217
  %.0.i20 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !32
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i23 = icmp eq i32 %219, 0, !dbg !32
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i26 = icmp eq i32 %220, 0, !dbg !32
  br i1 %.not.i23, label %226, label %221, !dbg !32

221:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %224, label %222, !dbg !32

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

226:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %229, label %227, !dbg !32

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #4, !dbg !32
  br label %__nv_sqrtf.exit27, !dbg !32

__nv_sqrtf.exit27:                                ; preds = %222, %224, %227, %229
  %.0.i25 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !32
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i28 = icmp eq i32 %231, 0, !dbg !32
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i31 = icmp eq i32 %232, 0, !dbg !32
  br i1 %.not.i28, label %238, label %233, !dbg !32

233:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %236, label %234, !dbg !32

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

238:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %241, label %239, !dbg !32

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #4, !dbg !32
  br label %__nv_sqrtf.exit32, !dbg !32

__nv_sqrtf.exit32:                                ; preds = %234, %236, %239, %241
  %.0.i30 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !32
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i33 = icmp eq i32 %243, 0, !dbg !32
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i36 = icmp eq i32 %244, 0, !dbg !32
  br i1 %.not.i33, label %250, label %245, !dbg !32

245:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %248, label %246, !dbg !32

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

250:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %253, label %251, !dbg !32

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #4, !dbg !32
  br label %__nv_sqrtf.exit37, !dbg !32

__nv_sqrtf.exit37:                                ; preds = %246, %248, %251, %253
  %.0.i35 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !32
  %255 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !33
  %256 = fadd float %.0.i5, 0x3DDB7CDFE0000000, !dbg !33
  %257 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !33
  %258 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !33
  %259 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !33
  %260 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !33
  %261 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !33
  %262 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !33
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %255) #4, !dbg !34
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %256) #4, !dbg !34
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %257) #4, !dbg !34
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %258) #4, !dbg !34
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %259) #4, !dbg !34
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %260) #4, !dbg !34
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %261) #4, !dbg !34
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %262) #4, !dbg !34
  %271 = shl i32 %14, 6, !dbg !35
  %272 = shl i32 %15, 6, !dbg !35
  %273 = add i32 %23, %271, !dbg !36
  %274 = add i32 %23, %272, !dbg !36
  %275 = sext i32 %273 to i64, !dbg !37
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %275, !dbg !37
  %277 = sext i32 %274 to i64, !dbg !37
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %277, !dbg !37
  %279 = bitcast float %263 to i32, !dbg !38
  %280 = bitcast float %264 to i32, !dbg !38
  %281 = bitcast float %265 to i32, !dbg !38
  %282 = bitcast float %266 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %276, i1 %26) #4, !dbg !38
  %283 = bitcast float %267 to i32, !dbg !38
  %284 = bitcast float %268 to i32, !dbg !38
  %285 = bitcast float %269 to i32, !dbg !38
  %286 = bitcast float %270 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %284, i32 %285, i32 %286, ptr addrspace(1) %278, i1 %26) #4, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ci5tacv3jwschojcuc4eggm2blc2gy73ypauyavlex5qthk6tvyk.py", directory: "inductor_cache/i5")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_24", linkageName: "triton_poi_fused_add_div_sqrt_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 33, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 44, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
