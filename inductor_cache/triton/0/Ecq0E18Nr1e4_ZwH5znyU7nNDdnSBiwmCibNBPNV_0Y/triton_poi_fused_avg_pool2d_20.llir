; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_20(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 768, !dbg !14
  %11 = mul i32 %10, 768, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = srem i32 %10, 2, !dbg !16
  %13 = sdiv i32 %9, 1536, !dbg !17
  %14 = mul nsw i32 %12, 3072, !dbg !18
  %15 = mul i32 %13, 24576, !dbg !19
  %16 = add i32 %15, %.decomposed, !dbg !20
  %17 = add i32 %16, %14, !dbg !21
  %18 = sext i32 %17 to i64, !dbg !22
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !22
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !23
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !23
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !23
  %23 = bitcast i32 %21 to float, !dbg !23
  %24 = bitcast i32 %22 to float, !dbg !23
  %25 = add i32 %16, 768, !dbg !24
  %26 = add i32 %25, %14, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !27
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !27
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !27
  %32 = bitcast i32 %30 to float, !dbg !27
  %33 = bitcast i32 %31 to float, !dbg !27
  %34 = add i32 %16, 1536, !dbg !28
  %35 = add i32 %34, %14, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !31
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %41 = bitcast i32 %39 to float, !dbg !31
  %42 = bitcast i32 %40 to float, !dbg !31
  %43 = add i32 %16, 2304, !dbg !32
  %44 = add i32 %43, %14, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !34
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !35
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !35
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !35
  %50 = bitcast i32 %48 to float, !dbg !35
  %51 = bitcast i32 %49 to float, !dbg !35
  %52 = add i32 %16, 6144, !dbg !36
  %53 = add i32 %52, %14, !dbg !37
  %54 = sext i32 %53 to i64, !dbg !38
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !38
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !39
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !39
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !39
  %59 = bitcast i32 %57 to float, !dbg !39
  %60 = bitcast i32 %58 to float, !dbg !39
  %61 = add i32 %16, 6912, !dbg !40
  %62 = add i32 %61, %14, !dbg !41
  %63 = sext i32 %62 to i64, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !42
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !43
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !43
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !43
  %68 = bitcast i32 %66 to float, !dbg !43
  %69 = bitcast i32 %67 to float, !dbg !43
  %70 = add i32 %16, 7680, !dbg !44
  %71 = add i32 %70, %14, !dbg !45
  %72 = sext i32 %71 to i64, !dbg !46
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !46
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !47
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !47
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !47
  %77 = bitcast i32 %75 to float, !dbg !47
  %78 = bitcast i32 %76 to float, !dbg !47
  %79 = add i32 %16, 8448, !dbg !48
  %80 = add i32 %79, %14, !dbg !49
  %81 = sext i32 %80 to i64, !dbg !50
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !50
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !51
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !51
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !51
  %86 = bitcast i32 %84 to float, !dbg !51
  %87 = bitcast i32 %85 to float, !dbg !51
  %88 = add i32 %16, 12288, !dbg !52
  %89 = add i32 %88, %14, !dbg !53
  %90 = sext i32 %89 to i64, !dbg !54
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !54
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !55
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !55
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !55
  %95 = bitcast i32 %93 to float, !dbg !55
  %96 = bitcast i32 %94 to float, !dbg !55
  %97 = add i32 %16, 13056, !dbg !56
  %98 = add i32 %97, %14, !dbg !57
  %99 = sext i32 %98 to i64, !dbg !58
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !58
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !59
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !59
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !59
  %104 = bitcast i32 %102 to float, !dbg !59
  %105 = bitcast i32 %103 to float, !dbg !59
  %106 = add i32 %16, 13824, !dbg !60
  %107 = add i32 %106, %14, !dbg !61
  %108 = sext i32 %107 to i64, !dbg !62
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !62
  %110 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #1, !dbg !63
  %111 = extractvalue { i32, i32 } %110, 0, !dbg !63
  %112 = extractvalue { i32, i32 } %110, 1, !dbg !63
  %113 = bitcast i32 %111 to float, !dbg !63
  %114 = bitcast i32 %112 to float, !dbg !63
  %115 = add i32 %16, 14592, !dbg !64
  %116 = add i32 %115, %14, !dbg !65
  %117 = sext i32 %116 to i64, !dbg !66
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !66
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !67
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !67
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !67
  %122 = bitcast i32 %120 to float, !dbg !67
  %123 = bitcast i32 %121 to float, !dbg !67
  %124 = add i32 %16, 18432, !dbg !68
  %125 = add i32 %124, %14, !dbg !69
  %126 = sext i32 %125 to i64, !dbg !70
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !70
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !71
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !71
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !71
  %131 = bitcast i32 %129 to float, !dbg !71
  %132 = bitcast i32 %130 to float, !dbg !71
  %133 = add i32 %16, 19200, !dbg !72
  %134 = add i32 %133, %14, !dbg !73
  %135 = sext i32 %134 to i64, !dbg !74
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !74
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !75
  %138 = extractvalue { i32, i32 } %137, 0, !dbg !75
  %139 = extractvalue { i32, i32 } %137, 1, !dbg !75
  %140 = bitcast i32 %138 to float, !dbg !75
  %141 = bitcast i32 %139 to float, !dbg !75
  %142 = add i32 %16, 19968, !dbg !76
  %143 = add i32 %142, %14, !dbg !77
  %144 = sext i32 %143 to i64, !dbg !78
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !78
  %146 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !79
  %147 = extractvalue { i32, i32 } %146, 0, !dbg !79
  %148 = extractvalue { i32, i32 } %146, 1, !dbg !79
  %149 = bitcast i32 %147 to float, !dbg !79
  %150 = bitcast i32 %148 to float, !dbg !79
  %151 = add i32 %16, 20736, !dbg !80
  %152 = add i32 %151, %14, !dbg !81
  %153 = sext i32 %152 to i64, !dbg !82
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !82
  %155 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !83
  %156 = extractvalue { i32, i32 } %155, 0, !dbg !83
  %157 = extractvalue { i32, i32 } %155, 1, !dbg !83
  %158 = bitcast i32 %156 to float, !dbg !83
  %159 = bitcast i32 %157 to float, !dbg !83
  %160 = fadd float %23, %32, !dbg !84
  %161 = fadd float %24, %33, !dbg !84
  %162 = fadd float %160, %41, !dbg !85
  %163 = fadd float %161, %42, !dbg !85
  %164 = fadd float %162, %50, !dbg !86
  %165 = fadd float %163, %51, !dbg !86
  %166 = fadd float %164, %59, !dbg !87
  %167 = fadd float %165, %60, !dbg !87
  %168 = fadd float %166, %68, !dbg !88
  %169 = fadd float %167, %69, !dbg !88
  %170 = fadd float %168, %77, !dbg !89
  %171 = fadd float %169, %78, !dbg !89
  %172 = fadd float %170, %86, !dbg !90
  %173 = fadd float %171, %87, !dbg !90
  %174 = fadd float %172, %95, !dbg !91
  %175 = fadd float %173, %96, !dbg !91
  %176 = fadd float %174, %104, !dbg !92
  %177 = fadd float %175, %105, !dbg !92
  %178 = fadd float %176, %113, !dbg !93
  %179 = fadd float %177, %114, !dbg !93
  %180 = fadd float %178, %122, !dbg !94
  %181 = fadd float %179, %123, !dbg !94
  %182 = fadd float %180, %131, !dbg !95
  %183 = fadd float %181, %132, !dbg !95
  %184 = fadd float %182, %140, !dbg !96
  %185 = fadd float %183, %141, !dbg !96
  %186 = fadd float %184, %149, !dbg !97
  %187 = fadd float %185, %150, !dbg !97
  %188 = fadd float %186, %158, !dbg !98
  %189 = fadd float %187, %159, !dbg !98
  %190 = fmul float %188, 6.250000e-02, !dbg !99
  %191 = fmul float %189, 6.250000e-02, !dbg !99
  %192 = sext i32 %9 to i64, !dbg !100
  %193 = getelementptr float, ptr addrspace(1) %1, i64 %192, !dbg !100
  %194 = bitcast float %190 to i32, !dbg !101
  %195 = bitcast float %191 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %193, i1 true) #1, !dbg !101
  ret void, !dbg !102
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuv72jvqnb3sc7zbrcadganmi46u6rb6yktomwh6uquq6wazl6km.py", directory: "inductor_cache/uv")
!4 = !{ptr @triton_poi_fused_avg_pool2d_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_20", linkageName: "triton_poi_fused_avg_pool2d_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 51, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 56, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 62, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 63, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 63, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 32, column: 52, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 63, scope: !7)
!40 = !DILocation(line: 33, column: 42, scope: !7)
!41 = !DILocation(line: 33, column: 52, scope: !7)
!42 = !DILocation(line: 33, column: 30, scope: !7)
!43 = !DILocation(line: 33, column: 63, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 34, column: 53, scope: !7)
!46 = !DILocation(line: 34, column: 31, scope: !7)
!47 = !DILocation(line: 34, column: 64, scope: !7)
!48 = !DILocation(line: 35, column: 43, scope: !7)
!49 = !DILocation(line: 35, column: 53, scope: !7)
!50 = !DILocation(line: 35, column: 31, scope: !7)
!51 = !DILocation(line: 35, column: 64, scope: !7)
!52 = !DILocation(line: 36, column: 44, scope: !7)
!53 = !DILocation(line: 36, column: 54, scope: !7)
!54 = !DILocation(line: 36, column: 31, scope: !7)
!55 = !DILocation(line: 36, column: 65, scope: !7)
!56 = !DILocation(line: 37, column: 44, scope: !7)
!57 = !DILocation(line: 37, column: 54, scope: !7)
!58 = !DILocation(line: 37, column: 31, scope: !7)
!59 = !DILocation(line: 37, column: 65, scope: !7)
!60 = !DILocation(line: 38, column: 44, scope: !7)
!61 = !DILocation(line: 38, column: 54, scope: !7)
!62 = !DILocation(line: 38, column: 31, scope: !7)
!63 = !DILocation(line: 38, column: 65, scope: !7)
!64 = !DILocation(line: 39, column: 44, scope: !7)
!65 = !DILocation(line: 39, column: 54, scope: !7)
!66 = !DILocation(line: 39, column: 31, scope: !7)
!67 = !DILocation(line: 39, column: 65, scope: !7)
!68 = !DILocation(line: 40, column: 44, scope: !7)
!69 = !DILocation(line: 40, column: 54, scope: !7)
!70 = !DILocation(line: 40, column: 31, scope: !7)
!71 = !DILocation(line: 40, column: 65, scope: !7)
!72 = !DILocation(line: 41, column: 44, scope: !7)
!73 = !DILocation(line: 41, column: 54, scope: !7)
!74 = !DILocation(line: 41, column: 31, scope: !7)
!75 = !DILocation(line: 41, column: 65, scope: !7)
!76 = !DILocation(line: 42, column: 44, scope: !7)
!77 = !DILocation(line: 42, column: 54, scope: !7)
!78 = !DILocation(line: 42, column: 31, scope: !7)
!79 = !DILocation(line: 42, column: 65, scope: !7)
!80 = !DILocation(line: 43, column: 44, scope: !7)
!81 = !DILocation(line: 43, column: 54, scope: !7)
!82 = !DILocation(line: 43, column: 31, scope: !7)
!83 = !DILocation(line: 43, column: 65, scope: !7)
!84 = !DILocation(line: 44, column: 18, scope: !7)
!85 = !DILocation(line: 45, column: 18, scope: !7)
!86 = !DILocation(line: 46, column: 18, scope: !7)
!87 = !DILocation(line: 47, column: 18, scope: !7)
!88 = !DILocation(line: 48, column: 19, scope: !7)
!89 = !DILocation(line: 49, column: 20, scope: !7)
!90 = !DILocation(line: 50, column: 20, scope: !7)
!91 = !DILocation(line: 51, column: 20, scope: !7)
!92 = !DILocation(line: 52, column: 20, scope: !7)
!93 = !DILocation(line: 53, column: 20, scope: !7)
!94 = !DILocation(line: 54, column: 20, scope: !7)
!95 = !DILocation(line: 55, column: 20, scope: !7)
!96 = !DILocation(line: 56, column: 20, scope: !7)
!97 = !DILocation(line: 57, column: 20, scope: !7)
!98 = !DILocation(line: 58, column: 20, scope: !7)
!99 = !DILocation(line: 60, column: 20, scope: !7)
!100 = !DILocation(line: 61, column: 25, scope: !7)
!101 = !DILocation(line: 61, column: 37, scope: !7)
!102 = !DILocation(line: 61, column: 4, scope: !7)
