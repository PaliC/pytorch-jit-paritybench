; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 6, !dbg !16
  %21 = lshr i32 %8, 2, !dbg !17
  %22 = and i32 %21, 31, !dbg !17
  %23 = and i32 %9, 60, !dbg !17
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 32, !dbg !18
  %26 = or disjoint i32 %20, %23, !dbg !18
  %27 = icmp slt i32 %24, 256, !dbg !19
  %28 = icmp slt i32 %25, 256, !dbg !19
  %29 = icmp slt i32 %26, 256, !dbg !19
  %30 = shl i32 %24, 2, !dbg !20
  %31 = shl i32 %25, 2, !dbg !20
  %32 = shl i32 %13, 8, !dbg !21
  %33 = add i32 %30, %32, !dbg !22
  %34 = add i32 %32, %31, !dbg !22
  %35 = sext i32 %33 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = and i1 %16, %27, !dbg !24
  %40 = and i1 %28, %16, !dbg !24
  %41 = and i1 %17, %29, !dbg !24
  %42 = and i1 %18, %29, !dbg !24
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = bitcast i32 %46 to float, !dbg !25
  %51 = bitcast i32 %47 to float, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = bitcast i32 %53 to float, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 %16) #2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = bitcast i32 %64 to float, !dbg !26
  %69 = bitcast i32 %65 to float, !dbg !26
  %70 = fadd float %48, %66, !dbg !27
  %71 = fadd float %49, %67, !dbg !27
  %72 = fadd float %50, %68, !dbg !27
  %73 = fadd float %51, %69, !dbg !27
  %74 = fadd float %57, %66, !dbg !27
  %75 = fadd float %58, %67, !dbg !27
  %76 = fadd float %59, %68, !dbg !27
  %77 = fadd float %60, %69, !dbg !27
  %78 = shl i32 %14, 8, !dbg !28
  %79 = shl i32 %15, 8, !dbg !28
  %80 = add i32 %26, %78, !dbg !29
  %81 = add i32 %26, %79, !dbg !29
  %82 = sext i32 %80 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !30
  %84 = sext i32 %81 to i64, !dbg !30
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !30
  %86 = shl i32 %8, 8, !dbg !31
  %87 = and i32 %86, 768, !dbg !31
  %88 = or disjoint i32 %87, %22, !dbg !31
  %89 = and i32 %9, 508, !dbg !31
  %90 = lshr exact i32 %87, 4, !dbg !31
  %91 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %90, !dbg !31
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %88, !dbg !31
  %93 = bitcast float %70 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !31
  %94 = or disjoint i32 %88, 64, !dbg !31
  %95 = lshr i32 %94, 6, !dbg !31
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !31
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !31
  %98 = bitcast float %71 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !31
  %99 = or disjoint i32 %88, 128, !dbg !31
  %100 = lshr i32 %99, 6, !dbg !31
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !31
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !31
  %103 = bitcast float %72 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !31
  %104 = or disjoint i32 %88, 192, !dbg !31
  %105 = lshr i32 %104, 6, !dbg !31
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !31
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !31
  %108 = bitcast float %73 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !31
  %109 = or disjoint i32 %88, 32, !dbg !31
  %110 = getelementptr float, ptr addrspace(3) %91, i32 %109, !dbg !31
  %111 = bitcast float %74 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !31
  %112 = or disjoint i32 %88, 96, !dbg !31
  %113 = lshr i32 %112, 6, !dbg !31
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !31
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !31
  %116 = bitcast float %75 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !31
  %117 = or disjoint i32 %88, 160, !dbg !31
  %118 = lshr i32 %117, 6, !dbg !31
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !31
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !31
  %121 = bitcast float %76 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !31
  %122 = or disjoint i32 %88, 224, !dbg !31
  %123 = lshr i32 %122, 6, !dbg !31
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !31
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !31
  %126 = bitcast float %77 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %127 = lshr i32 %89, 6, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !31
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %89, !dbg !31
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !31
  %131 = or disjoint i32 %89, 1, !dbg !31
  %132 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %131, !dbg !31
  %133 = load i32, ptr addrspace(3) %132, align 4, !dbg !31
  %134 = or disjoint i32 %89, 2, !dbg !31
  %135 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %134, !dbg !31
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !31
  %137 = or disjoint i32 %89, 3, !dbg !31
  %138 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %137, !dbg !31
  %139 = load i32, ptr addrspace(3) %138, align 4, !dbg !31
  %140 = or disjoint i32 %89, 512, !dbg !31
  %141 = lshr i32 %140, 6, !dbg !31
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %141, !dbg !31
  %143 = getelementptr inbounds float, ptr addrspace(3) %142, i32 %140, !dbg !31
  %144 = load i32, ptr addrspace(3) %143, align 4, !dbg !31
  %145 = or disjoint i32 %89, 513, !dbg !31
  %146 = lshr i32 %145, 6, !dbg !31
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !31
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %145, !dbg !31
  %149 = load i32, ptr addrspace(3) %148, align 4, !dbg !31
  %150 = or disjoint i32 %89, 514, !dbg !31
  %151 = lshr i32 %150, 6, !dbg !31
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !31
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %150, !dbg !31
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !31
  %155 = or disjoint i32 %89, 515, !dbg !31
  %156 = lshr i32 %155, 6, !dbg !31
  %157 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %156, !dbg !31
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %155, !dbg !31
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %130, i32 %133, i32 %136, i32 %139, ptr addrspace(1) %83, i1 %41) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %144, i32 %149, i32 %154, i32 %159, ptr addrspace(1) %85, i1 %42) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crestrhg7b5umv67kggcv76fsbhfplx73iyqwlgr2kir4pkwih27.py", directory: "inductor_cache/re")
!4 = !{ptr @triton_poi_fused_convolution_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_26", linkageName: "triton_poi_fused_convolution_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 42, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 60, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 34, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 25, scope: !7)
!31 = !DILocation(line: 35, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 4, scope: !7)
