; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %17 = shl i32 %16, 2, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit19 = lshr i32 %18, 5, !dbg !12
  %19 = and i32 %.lobit19, 3, !dbg !12
  %20 = and i32 %18, 1, !dbg !12
  %21 = shl nuw nsw i32 %20, 1, !dbg !12
  %22 = or disjoint i32 %19, %17, !dbg !13
  %23 = or disjoint i32 %17, %21, !dbg !13
  %24 = icmp slt i32 %22, 512, !dbg !14
  %25 = icmp slt i32 %23, 512, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %27 = shl i32 %26, 6, !dbg !16
  %28 = shl i32 %18, 1, !dbg !17
  %29 = and i32 %28, 62, !dbg !17
  %30 = lshr i32 %18, 1, !dbg !17
  %31 = and i32 %30, 15, !dbg !17
  %32 = lshr i32 %18, 1, !dbg !17
  %33 = and i32 %32, 16, !dbg !17
  %34 = lshr i32 %18, 1, !dbg !17
  %35 = and i32 %34, 32, !dbg !17
  %36 = or disjoint i32 %27, %29, !dbg !18
  %37 = or disjoint i32 %33, %31, !dbg !17
  %38 = or disjoint i32 %37, %35, !dbg !17
  %39 = or disjoint i32 %38, %27, !dbg !18
  %40 = icmp slt i32 %36, 64, !dbg !19
  %41 = icmp slt i32 %39, 64, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %42 = sdiv i32 %.frozen, 128, !dbg !20
  %43 = mul i32 %42, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %43, !dbg !21
  %44 = shl i32 %22, 6, !dbg !22
  %45 = add i32 %36, %44, !dbg !23
  %46 = sext i32 %45 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %10, i64 %46, !dbg !24
  %48 = and i1 %24, %40, !dbg !25
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %48) #4, !dbg !26
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %52 = shl i32 %18, 3, !dbg !26
  %53 = and i32 %52, 248, !dbg !26
  %54 = or disjoint i32 %19, %53, !dbg !26
  %55 = and i32 %28, 254, !dbg !26
  %56 = lshr exact i32 %53, 1, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %56, !dbg !26
  %58 = getelementptr inbounds float, ptr addrspace(3) %57, i32 %54, !dbg !26
  %59 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !26
  %60 = or disjoint i32 %54, 4, !dbg !26
  %61 = lshr i32 %60, 1, !dbg !26
  %62 = and i32 %61, 126, !dbg !26
  %63 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %62, !dbg !26
  %64 = getelementptr inbounds float, ptr addrspace(3) %63, i32 %60, !dbg !26
  %65 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %66 = and i32 %18, 126, !dbg !26
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !26
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %55, !dbg !26
  %69 = load <2 x float>, ptr addrspace(3) %68, align 8, !dbg !26
  %70 = icmp slt i32 %.decomposed, 64, !dbg !27
  %71 = shl i32 %39, 6, !dbg !28
  %72 = shl i32 %42, 12, !dbg !29
  %73 = add i32 %71, %72, !dbg !30
  %74 = add i32 %73, %.decomposed, !dbg !31
  %75 = sext i32 %74 to i64, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !32
  %77 = and i1 %70, %41, !dbg !33
  %78 = and i1 %25, %77, !dbg !34
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %76, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !35
  %80 = sext i32 %.decomposed to i64, !dbg !36
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !36
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !37
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !38
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !39
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !39
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !39
  %87 = bitcast i32 %85 to float, !dbg !39
  %88 = bitcast i32 %86 to float, !dbg !39
  %89 = fadd float %87, 0x3EE4F8B580000000, !dbg !40
  %90 = fadd float %88, 0x3EE4F8B580000000, !dbg !40
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i = icmp eq i32 %91, 0, !dbg !41
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i = icmp eq i32 %92, 0, !dbg !41
  br i1 %.not.i, label %98, label %93, !dbg !41

93:                                               ; preds = %15
  br i1 %.not1.i, label %96, label %94, !dbg !41

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

98:                                               ; preds = %15
  br i1 %.not1.i, label %101, label %99, !dbg !41

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #4, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %94, %96, %99, %101
  %.0.i = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !41
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !41
  %.not.i4 = icmp eq i32 %103, 0, !dbg !41
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !41
  %.not1.i7 = icmp eq i32 %104, 0, !dbg !41
  br i1 %.not.i4, label %110, label %105, !dbg !41

105:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %108, label %106, !dbg !41

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %113, label %111, !dbg !41

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #4, !dbg !41
  br label %__nv_sqrtf.exit8, !dbg !41

__nv_sqrtf.exit8:                                 ; preds = %106, %108, %111, %113
  %.0.i6 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !41
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !42
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %80, !dbg !43
  %118 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %117, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !44
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !45
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #4, !dbg !46
  %121 = icmp sgt i32 %.decomposed, 63, !dbg !47
  %122 = add nsw i32 %.decomposed, -64, !dbg !48
  %123 = add i32 %73, %122, !dbg !49
  %124 = sext i32 %123 to i64, !dbg !50
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !50
  %126 = and i1 %121, %41, !dbg !51
  %127 = and i1 %25, %126, !dbg !52
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %125, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #4, !dbg !53
  %129 = sext i32 %122 to i64, !dbg !54
  %130 = getelementptr float, ptr addrspace(1) %6, i64 %129, !dbg !54
  %131 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %130, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #4, !dbg !55
  %132 = getelementptr float, ptr addrspace(1) %7, i64 %129, !dbg !56
  %133 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %132, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #4, !dbg !57
  %134 = extractvalue { i32, i32 } %133, 0, !dbg !57
  %135 = extractvalue { i32, i32 } %133, 1, !dbg !57
  %136 = bitcast i32 %134 to float, !dbg !57
  %137 = bitcast i32 %135 to float, !dbg !57
  %138 = fadd float %136, 0x3EE4F8B580000000, !dbg !58
  %139 = fadd float %137, 0x3EE4F8B580000000, !dbg !58
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i9 = icmp eq i32 %140, 0, !dbg !59
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i12 = icmp eq i32 %141, 0, !dbg !59
  br i1 %.not.i9, label %147, label %142, !dbg !59

142:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %145, label %143, !dbg !59

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !59
  br label %__nv_sqrtf.exit13, !dbg !59

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !59
  br label %__nv_sqrtf.exit13, !dbg !59

147:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %150, label %148, !dbg !59

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !59
  br label %__nv_sqrtf.exit13, !dbg !59

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !59
  br label %__nv_sqrtf.exit13, !dbg !59

__nv_sqrtf.exit13:                                ; preds = %143, %145, %148, %150
  %.0.i11 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !59
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !59
  %.not.i14 = icmp eq i32 %152, 0, !dbg !59
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !59
  %.not1.i17 = icmp eq i32 %153, 0, !dbg !59
  br i1 %.not.i14, label %159, label %154, !dbg !59

154:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %157, label %155, !dbg !59

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit18, !dbg !59

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit18, !dbg !59

159:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %162, label %160, !dbg !59

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit18, !dbg !59

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !59
  br label %__nv_sqrtf.exit18, !dbg !59

__nv_sqrtf.exit18:                                ; preds = %155, %157, %160, %162
  %.0.i16 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !59
  %164 = extractvalue { i32, i32 } %128, 1, !dbg !53
  %165 = extractvalue { i32, i32 } %131, 1, !dbg !55
  %166 = extractvalue { i32, i32 } %128, 0, !dbg !53
  %167 = extractvalue { i32, i32 } %131, 0, !dbg !55
  %168 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !53
  %169 = insertelement <2 x i32> %168, i32 %164, i64 1, !dbg !53
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !53
  %171 = insertelement <2 x i32> poison, i32 %167, i64 0, !dbg !55
  %172 = insertelement <2 x i32> %171, i32 %165, i64 1, !dbg !55
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !55
  %174 = fsub <2 x float> %170, %173, !dbg !60
  %175 = extractvalue { i32, i32 } %79, 1, !dbg !35
  %176 = extractvalue { i32, i32 } %82, 1, !dbg !37
  %177 = extractvalue { i32, i32 } %118, 1, !dbg !44
  %178 = extractvalue { i32, i32 } %120, 1, !dbg !46
  %179 = extractvalue { i32, i32 } %79, 0, !dbg !35
  %180 = extractvalue { i32, i32 } %82, 0, !dbg !37
  %181 = insertelement <2 x i32> poison, i32 %179, i64 0, !dbg !35
  %182 = insertelement <2 x i32> %181, i32 %175, i64 1, !dbg !35
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !35
  %184 = insertelement <2 x i32> poison, i32 %180, i64 0, !dbg !37
  %185 = insertelement <2 x i32> %184, i32 %176, i64 1, !dbg !37
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !37
  %187 = fsub <2 x float> %183, %186, !dbg !61
  %188 = extractvalue { i32, i32 } %118, 0, !dbg !44
  %189 = extractvalue { i32, i32 } %120, 0, !dbg !46
  %190 = and i1 %25, %41, !dbg !25
  %.frozen20 = freeze i32 %22, !dbg !62
  %191 = sdiv i32 %.frozen20, 64, !dbg !62
  %192 = srem i32 %191, 2, !dbg !63
  %193 = mul i32 %191, 64, !dbg !64
  %.decomposed21 = sub i32 %.frozen20, %193, !dbg !64
  %194 = sdiv i32 %22, 128, !dbg !20
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !65
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !65
  %197 = getelementptr float, ptr addrspace(1) %8, i64 %129, !dbg !66
  %198 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %197, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #4, !dbg !67
  %199 = extractvalue { i32, i32 } %198, 0, !dbg !67
  %200 = extractvalue { i32, i32 } %198, 1, !dbg !67
  %201 = getelementptr float, ptr addrspace(1) %9, i64 %129, !dbg !68
  %202 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %201, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #4, !dbg !69
  %203 = extractvalue { i32, i32 } %202, 0, !dbg !69
  %204 = extractvalue { i32, i32 } %202, 1, !dbg !69
  %205 = shl nsw i32 %192, 6, !dbg !70
  %206 = shl nsw i32 %.decomposed21, 7, !dbg !71
  %207 = shl i32 %194, 13, !dbg !72
  %208 = shl i32 %42, 13, !dbg !72
  %209 = add i32 %206, %36, !dbg !73
  %210 = add i32 %209, %207, !dbg !74
  %211 = add i32 %210, %205, !dbg !75
  %212 = sext i32 %211 to i64, !dbg !76
  %213 = getelementptr float, ptr addrspace(1) %11, i64 %212, !dbg !76
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %214 = shl nuw nsw i32 %20, 7, !dbg !77
  %215 = or disjoint i32 %214, %31, !dbg !77
  %216 = or disjoint i32 %215, %33, !dbg !77
  %217 = or disjoint i32 %216, %35, !dbg !77
  %.idx = shl nuw nsw i32 %20, 3, !dbg !77
  %218 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !77
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %217, !dbg !77
  %220 = or disjoint i32 %217, 64, !dbg !77
  %221 = lshr i32 %220, 6, !dbg !77
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !77
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !77
  %224 = lshr i32 %55, 6, !dbg !77
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %224, !dbg !77
  %226 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %55, !dbg !77
  %227 = or disjoint i32 %55, 1, !dbg !77
  %228 = getelementptr inbounds float, ptr addrspace(3) %225, i32 %227, !dbg !77
  %229 = shl i32 %39, 7, !dbg !78
  %230 = add i32 %229, %.decomposed, !dbg !79
  %231 = add i32 %230, %208, !dbg !80
  %232 = sext i32 %231 to i64, !dbg !81
  %233 = getelementptr i1, ptr addrspace(1) %12, i64 %232, !dbg !81
  %234 = insertelement <2 x float> poison, float %115, i64 0, !dbg !82
  %235 = insertelement <2 x float> %234, float %116, i64 1, !dbg !82
  %236 = fmul <2 x float> %187, %235, !dbg !82
  %237 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !44
  %238 = insertelement <2 x i32> %237, i32 %177, i64 1, !dbg !44
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !44
  %240 = fmul <2 x float> %236, %239, !dbg !83
  %241 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !46
  %242 = insertelement <2 x i32> %241, i32 %178, i64 1, !dbg !46
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !46
  %244 = fadd <2 x float> %240, %243, !dbg !84
  %245 = fcmp olt <2 x float> %244, zeroinitializer, !dbg !85
  %246 = select <2 x i1> %245, <2 x float> zeroinitializer, <2 x float> %244, !dbg !89
  %247 = insertelement <2 x float> poison, float %195, i64 0, !dbg !90
  %248 = insertelement <2 x float> %247, float %196, i64 1, !dbg !90
  %249 = fmul <2 x float> %174, %248, !dbg !90
  %250 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !67
  %251 = insertelement <2 x i32> %250, i32 %200, i64 1, !dbg !67
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !67
  %253 = fmul <2 x float> %249, %252, !dbg !91
  %254 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !69
  %255 = insertelement <2 x i32> %254, i32 %204, i64 1, !dbg !69
  %256 = bitcast <2 x i32> %255 to <2 x float>, !dbg !69
  %257 = fadd <2 x float> %253, %256, !dbg !92
  %258 = fcmp olt <2 x float> %257, zeroinitializer, !dbg !93
  %259 = select <2 x i1> %258, <2 x float> zeroinitializer, <2 x float> %257, !dbg !95
  %260 = insertelement <2 x i1> poison, i1 %70, i64 0, !dbg !96
  %261 = shufflevector <2 x i1> %260, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !96
  %262 = select <2 x i1> %261, <2 x float> %246, <2 x float> %259, !dbg !96
  %263 = fadd <2 x float> %69, %262, !dbg !97
  %264 = fcmp olt <2 x float> %263, zeroinitializer, !dbg !98
  %265 = select <2 x i1> %264, <2 x float> zeroinitializer, <2 x float> %263, !dbg !100
  %266 = fcmp ole <2 x float> %265, zeroinitializer, !dbg !101
  %267 = extractelement <2 x float> %265, i64 0, !dbg !77
  %268 = bitcast float %267 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %268, i1 true) #4, !dbg !77
  %269 = extractelement <2 x float> %265, i64 1, !dbg !77
  %270 = bitcast float %269 to <1 x i32>, !dbg !77
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %270, i1 true) #4, !dbg !77
  tail call void @llvm.nvvm.barrier0(), !dbg !77
  %271 = load i32, ptr addrspace(3) %226, align 4, !dbg !77
  %272 = load i32, ptr addrspace(3) %228, align 4, !dbg !77
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %272, ptr addrspace(1) %213, i1 %48) #4, !dbg !77
  %273 = zext <2 x i1> %266 to <2 x i8>, !dbg !102
  %274 = bitcast <2 x i8> %273 to i16, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %274, ptr addrspace(1) %233, i1 %190) #4, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cclf6fdsfcrwu3ednodpbznmvyyu6wqyv2prfe7bbqfdrpfnb64y.py", directory: "inductor_cache/cl")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 37, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 38, scope: !7)
!31 = !DILocation(line: 40, column: 49, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 62, scope: !7)
!34 = !DILocation(line: 40, column: 70, scope: !7)
!35 = !DILocation(line: 40, column: 55, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 70, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 70, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 27, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 31, scope: !7)
!44 = !DILocation(line: 52, column: 71, scope: !7)
!45 = !DILocation(line: 54, column: 31, scope: !7)
!46 = !DILocation(line: 54, column: 71, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 58, scope: !7)
!49 = !DILocation(line: 63, column: 50, scope: !7)
!50 = !DILocation(line: 63, column: 31, scope: !7)
!51 = !DILocation(line: 63, column: 72, scope: !7)
!52 = !DILocation(line: 63, column: 80, scope: !7)
!53 = !DILocation(line: 63, column: 64, scope: !7)
!54 = !DILocation(line: 64, column: 31, scope: !7)
!55 = !DILocation(line: 64, column: 79, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 79, scope: !7)
!58 = !DILocation(line: 68, column: 20, scope: !7)
!59 = !DILocation(line: 69, column: 27, scope: !7)
!60 = !DILocation(line: 65, column: 20, scope: !7)
!61 = !DILocation(line: 42, column: 18, scope: !7)
!62 = !DILocation(line: 33, column: 21, scope: !7)
!63 = !DILocation(line: 33, column: 27, scope: !7)
!64 = !DILocation(line: 32, column: 19, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 75, column: 31, scope: !7)
!67 = !DILocation(line: 75, column: 79, scope: !7)
!68 = !DILocation(line: 77, column: 31, scope: !7)
!69 = !DILocation(line: 77, column: 79, scope: !7)
!70 = !DILocation(line: 89, column: 33, scope: !7)
!71 = !DILocation(line: 89, column: 42, scope: !7)
!72 = !DILocation(line: 89, column: 52, scope: !7)
!73 = !DILocation(line: 89, column: 30, scope: !7)
!74 = !DILocation(line: 89, column: 38, scope: !7)
!75 = !DILocation(line: 89, column: 47, scope: !7)
!76 = !DILocation(line: 89, column: 25, scope: !7)
!77 = !DILocation(line: 89, column: 64, scope: !7)
!78 = !DILocation(line: 90, column: 34, scope: !7)
!79 = !DILocation(line: 90, column: 30, scope: !7)
!80 = !DILocation(line: 90, column: 39, scope: !7)
!81 = !DILocation(line: 90, column: 25, scope: !7)
!82 = !DILocation(line: 51, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 55, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 57, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 74, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 78, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !94)
!94 = !DILocation(line: 80, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !94)
!96 = !DILocation(line: 0, scope: !7)
!97 = !DILocation(line: 84, column: 20, scope: !7)
!98 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !99)
!99 = !DILocation(line: 86, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !99)
!101 = !DILocation(line: 88, column: 21, scope: !7)
!102 = !DILocation(line: 90, column: 56, scope: !7)
!103 = !DILocation(line: 90, column: 4, scope: !7)
