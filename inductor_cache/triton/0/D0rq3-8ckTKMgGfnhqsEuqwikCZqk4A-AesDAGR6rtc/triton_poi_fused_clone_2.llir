; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 252, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %12, 128, !dbg !13
  %14 = icmp slt i32 %11, 1536, !dbg !14
  %15 = icmp slt i32 %12, 1536, !dbg !14
  %16 = icmp slt i32 %13, 1536, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 2, !dbg !16
  %19 = lshr i32 %7, 6, !dbg !17
  %.lobit = and i32 %19, 1, !dbg !17
  %20 = or disjoint i32 %18, %.lobit, !dbg !18
  %21 = or disjoint i32 %20, 2, !dbg !18
  %22 = icmp slt i32 %20, 4, !dbg !19
  %23 = icmp slt i32 %21, 4, !dbg !19
  %24 = icmp slt i32 %18, 4, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %25 = sdiv i32 %.frozen, 384, !dbg !20
  %26 = mul i32 %25, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = add nsw i32 %.decomposed, 384, !dbg !22
  %28 = mul i32 %20, 1152, !dbg !23
  %29 = mul i32 %21, 1152, !dbg !23
  %30 = mul i32 %25, 4608, !dbg !24
  %31 = add i32 %30, %27, !dbg !25
  %32 = add i32 %31, %28, !dbg !26
  %33 = add i32 %31, %29, !dbg !26
  %34 = sext i32 %32 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = sext i32 %33 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !27
  %38 = and i1 %14, %22, !dbg !28
  %39 = and i1 %23, %14, !dbg !28
  %40 = and i1 %24, %15, !dbg !28
  %41 = and i1 %16, %24, !dbg !28
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !29
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !29
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !29
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !29
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !29
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !29
  %52 = add i32 %12, %17, !dbg !30
  %53 = shl i32 %52, 2, !dbg !30
  %54 = add i32 %17, %13, !dbg !30
  %55 = shl i32 %54, 2, !dbg !30
  %56 = sext i32 %53 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !31
  %58 = sext i32 %55 to i64, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !31
  %60 = shl i32 %7, 4, !dbg !32
  %61 = and i32 %60, 1008, !dbg !32
  %62 = or disjoint i32 %61, %.lobit, !dbg !32
  %63 = and i32 %8, 508, !dbg !32
  %64 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %61, !dbg !32
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !32
  %66 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !32
  %67 = or disjoint i32 %62, 4, !dbg !32
  %68 = lshr i32 %67, 2, !dbg !32
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !32
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !32
  %71 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !32
  %72 = or disjoint i32 %62, 8, !dbg !32
  %73 = lshr i32 %72, 2, !dbg !32
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !32
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %72, !dbg !32
  %76 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !32
  %77 = or disjoint i32 %62, 12, !dbg !32
  %78 = lshr i32 %77, 2, !dbg !32
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !32
  %81 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !32
  %82 = or disjoint i32 %62, 2, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) %64, i32 %82, !dbg !32
  %84 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !32
  %85 = or disjoint i32 %62, 6, !dbg !32
  %86 = lshr i32 %85, 2, !dbg !32
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !32
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !32
  %89 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !32
  %90 = or disjoint i32 %62, 10, !dbg !32
  %91 = lshr i32 %90, 2, !dbg !32
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !32
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %90, !dbg !32
  %94 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !32
  %95 = or disjoint i32 %62, 14, !dbg !32
  %96 = lshr i32 %95, 2, !dbg !32
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !32
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !32
  %99 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %100 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %63, !dbg !32
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %63, !dbg !32
  %102 = load i32, ptr addrspace(3) %101, align 4, !dbg !32
  %103 = or disjoint i32 %63, 1, !dbg !32
  %104 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %103, !dbg !32
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !32
  %106 = or disjoint i32 %63, 2, !dbg !32
  %107 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %106, !dbg !32
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !32
  %109 = or disjoint i32 %63, 3, !dbg !32
  %110 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %109, !dbg !32
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !32
  %112 = or disjoint i32 %63, 512, !dbg !32
  %113 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !32
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %112, !dbg !32
  %115 = load i32, ptr addrspace(3) %114, align 4, !dbg !32
  %116 = or disjoint i32 %63, 513, !dbg !32
  %117 = lshr i32 %116, 2, !dbg !32
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !32
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !32
  %121 = or disjoint i32 %63, 514, !dbg !32
  %122 = lshr i32 %121, 2, !dbg !32
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %121, !dbg !32
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !32
  %126 = or disjoint i32 %63, 515, !dbg !32
  %127 = lshr i32 %126, 2, !dbg !32
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %127, !dbg !32
  %129 = getelementptr inbounds float, ptr addrspace(3) %128, i32 %126, !dbg !32
  %130 = load i32, ptr addrspace(3) %129, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %105, i32 %108, i32 %111, ptr addrspace(1) %57, i1 %40) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %115, i32 %120, i32 %125, i32 %130, ptr addrspace(1) %59, i1 %41) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl4ddfepell3qtrx2skbeekv7ncxtqbhjxc7ukkj2ibm5popso4i.py", directory: "inductor_cache/l4")
!4 = !{ptr @triton_poi_fused_clone_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_2", linkageName: "triton_poi_fused_clone_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 46, scope: !7)
!24 = !DILocation(line: 32, column: 56, scope: !7)
!25 = !DILocation(line: 32, column: 41, scope: !7)
!26 = !DILocation(line: 32, column: 51, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 69, scope: !7)
!29 = !DILocation(line: 32, column: 61, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)
