; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 50176, !dbg !14
  %12 = srem i32 %10, 256, !dbg !15
  %13 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !16
  %14 = shufflevector <2 x i32> %13, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !16
  %15 = sdiv <2 x i32> %14, <i32 1792, i32 256>, !dbg !16
  %16 = srem <2 x i32> %15, splat (i32 7), !dbg !17
  %17 = extractelement <2 x i32> %16, i64 0, !dbg !18
  %18 = icmp sgt i32 %17, -1, !dbg !19
  %19 = extractelement <2 x i32> %16, i64 1, !dbg !20
  %20 = icmp sgt i32 %19, -1, !dbg !21
  %21 = or i32 %17, %19, !dbg !18
  %22 = icmp sgt i32 %21, -1, !dbg !18
  %23 = shl nsw i32 %19, 9, !dbg !20
  %24 = extractelement <2 x i32> %15, i64 0, !dbg !22
  %25 = mul i32 %24, 7168, !dbg !22
  %26 = add i32 %25, %12, !dbg !23
  %27 = add i32 %26, %23, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = and i1 %11, %22, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !27
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %34 = add i32 %26, 256, !dbg !28
  %35 = add i32 %34, %23, !dbg !29
  %36 = sext i32 %35 to i64, !dbg !30
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !30
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !31
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !31
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !31
  %41 = add nsw <2 x i32> %16, splat (i32 1), !dbg !32
  %42 = icmp ult <2 x i32> %41, splat (i32 7), !dbg !32
  %43 = extractelement <2 x i1> %42, i64 1, !dbg !33
  %44 = and i1 %18, %43, !dbg !33
  %45 = add i32 %26, 512, !dbg !34
  %46 = add i32 %45, %23, !dbg !35
  %47 = sext i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !36
  %49 = and i1 %11, %44, !dbg !37
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #1, !dbg !38
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !38
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !38
  %53 = add i32 %26, 3584, !dbg !39
  %54 = add i32 %53, %23, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !41
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %56, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !42
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !42
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !42
  %60 = add i32 %26, 3840, !dbg !43
  %61 = add i32 %60, %23, !dbg !44
  %62 = sext i32 %61 to i64, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !45
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %30, i32 -8388608, i1 %30, i32 -8388608, i1 %30) #1, !dbg !46
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !46
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !46
  %67 = add i32 %26, 4096, !dbg !47
  %68 = add i32 %67, %23, !dbg !48
  %69 = sext i32 %68 to i64, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !49
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %49, i32 -8388608, i1 %49, i32 -8388608, i1 %49) #1, !dbg !50
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !50
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !50
  %74 = extractelement <2 x i1> %42, i64 0, !dbg !51
  %75 = and i1 %20, %74, !dbg !51
  %76 = add i32 %26, 7168, !dbg !52
  %77 = add i32 %76, %23, !dbg !53
  %78 = sext i32 %77 to i64, !dbg !54
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !54
  %80 = and i1 %11, %75, !dbg !55
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #1, !dbg !56
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !56
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !56
  %84 = add i32 %26, 7424, !dbg !57
  %85 = add i32 %84, %23, !dbg !58
  %86 = sext i32 %85 to i64, !dbg !59
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !59
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #1, !dbg !60
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !60
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !60
  %91 = and i1 %74, %43, !dbg !61
  %92 = add i32 %26, 7680, !dbg !62
  %93 = add i32 %92, %23, !dbg !63
  %94 = sext i32 %93 to i64, !dbg !64
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !64
  %96 = and i1 %11, %91, !dbg !65
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 -8388608, i1 %96, i32 -8388608, i1 %96) #1, !dbg !66
  %98 = extractvalue { i32, i32 } %97, 0, !dbg !66
  %99 = extractvalue { i32, i32 } %97, 1, !dbg !66
  %100 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !27
  %101 = insertelement <2 x i32> %100, i32 %33, i64 1, !dbg !27
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !27
  %103 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !31
  %104 = insertelement <2 x i32> %103, i32 %40, i64 1, !dbg !31
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !31
  %106 = fcmp ogt <2 x float> %105, %102, !dbg !67
  %107 = fcmp uno <2 x float> %105, zeroinitializer, !dbg !71
  %108 = or <2 x i1> %106, %107, !dbg !72
  %.v = select <2 x i1> %108, <2 x i32> %104, <2 x i32> %101, !dbg !73
  %109 = bitcast <2 x i32> %.v to <2 x float>, !dbg !73
  %110 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !38
  %111 = insertelement <2 x i32> %110, i32 %52, i64 1, !dbg !38
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !38
  %113 = fcmp olt <2 x float> %109, %112, !dbg !74
  %114 = fcmp uno <2 x float> %112, zeroinitializer, !dbg !76
  %115 = or <2 x i1> %114, %113, !dbg !77
  %.v1 = select <2 x i1> %115, <2 x i32> %111, <2 x i32> %.v, !dbg !78
  %116 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !78
  %117 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !42
  %118 = insertelement <2 x i32> %117, i32 %59, i64 1, !dbg !42
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !42
  %120 = fcmp olt <2 x float> %116, %119, !dbg !79
  %121 = fcmp uno <2 x float> %119, zeroinitializer, !dbg !81
  %122 = or <2 x i1> %121, %120, !dbg !82
  %.v2 = select <2 x i1> %122, <2 x i32> %118, <2 x i32> %.v1, !dbg !83
  %123 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !83
  %124 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !46
  %125 = insertelement <2 x i32> %124, i32 %66, i64 1, !dbg !46
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !46
  %127 = fcmp olt <2 x float> %123, %126, !dbg !84
  %128 = fcmp uno <2 x float> %126, zeroinitializer, !dbg !86
  %129 = or <2 x i1> %128, %127, !dbg !87
  %.v3 = select <2 x i1> %129, <2 x i32> %125, <2 x i32> %.v2, !dbg !88
  %130 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !88
  %131 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !50
  %132 = insertelement <2 x i32> %131, i32 %73, i64 1, !dbg !50
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !50
  %134 = fcmp olt <2 x float> %130, %133, !dbg !89
  %135 = fcmp uno <2 x float> %133, zeroinitializer, !dbg !91
  %136 = or <2 x i1> %135, %134, !dbg !92
  %.v4 = select <2 x i1> %136, <2 x i32> %132, <2 x i32> %.v3, !dbg !93
  %137 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !93
  %138 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !56
  %139 = insertelement <2 x i32> %138, i32 %83, i64 1, !dbg !56
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !56
  %141 = fcmp olt <2 x float> %137, %140, !dbg !94
  %142 = fcmp uno <2 x float> %140, zeroinitializer, !dbg !96
  %143 = or <2 x i1> %142, %141, !dbg !97
  %.v5 = select <2 x i1> %143, <2 x i32> %139, <2 x i32> %.v4, !dbg !98
  %144 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !98
  %145 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !60
  %146 = insertelement <2 x i32> %145, i32 %90, i64 1, !dbg !60
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !60
  %148 = fcmp olt <2 x float> %144, %147, !dbg !99
  %149 = fcmp uno <2 x float> %147, zeroinitializer, !dbg !101
  %150 = or <2 x i1> %149, %148, !dbg !102
  %.v6 = select <2 x i1> %150, <2 x i32> %146, <2 x i32> %.v5, !dbg !103
  %151 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !103
  %152 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !66
  %153 = insertelement <2 x i32> %152, i32 %99, i64 1, !dbg !66
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !66
  %155 = fcmp olt <2 x float> %151, %154, !dbg !104
  %156 = bitcast i32 %98 to float, !dbg !106
  %157 = fcmp uno float %156, 0.000000e+00, !dbg !106
  %158 = bitcast i32 %99 to float, !dbg !106
  %159 = fcmp uno float %158, 0.000000e+00, !dbg !106
  %160 = extractelement <2 x i1> %155, i64 0, !dbg !107
  %161 = or i1 %157, %160, !dbg !107
  %162 = extractelement <2 x i1> %155, i64 1, !dbg !107
  %163 = or i1 %159, %162, !dbg !107
  %164 = zext <2 x i1> %106 to <2 x i8>, !dbg !108
  %165 = select <2 x i1> %113, <2 x i8> splat (i8 2), <2 x i8> %164, !dbg !109
  %166 = select <2 x i1> %120, <2 x i8> splat (i8 3), <2 x i8> %165, !dbg !110
  %167 = select <2 x i1> %127, <2 x i8> splat (i8 4), <2 x i8> %166, !dbg !111
  %168 = select <2 x i1> %134, <2 x i8> splat (i8 5), <2 x i8> %167, !dbg !112
  %169 = select <2 x i1> %141, <2 x i8> splat (i8 6), <2 x i8> %168, !dbg !113
  %170 = select <2 x i1> %148, <2 x i8> splat (i8 7), <2 x i8> %169, !dbg !114
  %171 = select <2 x i1> %155, <2 x i8> splat (i8 8), <2 x i8> %170, !dbg !115
  %172 = sext i32 %10 to i64, !dbg !116
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !116
  %174 = extractelement <2 x i32> %.v6, i64 0, !dbg !117
  %175 = select i1 %161, i32 %98, i32 %174, !dbg !118
  %176 = extractelement <2 x i32> %.v6, i64 1, !dbg !117
  %177 = select i1 %163, i32 %99, i32 %176, !dbg !118
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %175, i32 %177, ptr addrspace(1) %173, i1 %11) #1, !dbg !117
  %178 = getelementptr i8, ptr addrspace(1) %2, i64 %172, !dbg !119
  %179 = bitcast <2 x i8> %171 to i16, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %179, ptr addrspace(1) %178, i1 %11) #1, !dbg !120
  ret void, !dbg !121
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3kez5c46na5py2epnepvnyfjt273xhywslewss3px4k3el4pru.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 21, scope: !7)
!17 = !DILocation(line: 24, column: 29, scope: !7)
!18 = !DILocation(line: 39, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 40, column: 40, scope: !7)
!21 = !DILocation(line: 36, column: 19, scope: !7)
!22 = !DILocation(line: 40, column: 50, scope: !7)
!23 = !DILocation(line: 40, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 45, scope: !7)
!25 = !DILocation(line: 40, column: 31, scope: !7)
!26 = !DILocation(line: 40, column: 63, scope: !7)
!27 = !DILocation(line: 40, column: 55, scope: !7)
!28 = !DILocation(line: 46, column: 42, scope: !7)
!29 = !DILocation(line: 46, column: 51, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 71, column: 20, scope: !7)
!33 = !DILocation(line: 52, column: 19, scope: !7)
!34 = !DILocation(line: 53, column: 42, scope: !7)
!35 = !DILocation(line: 53, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 69, scope: !7)
!38 = !DILocation(line: 53, column: 61, scope: !7)
!39 = !DILocation(line: 60, column: 43, scope: !7)
!40 = !DILocation(line: 60, column: 52, scope: !7)
!41 = !DILocation(line: 60, column: 31, scope: !7)
!42 = !DILocation(line: 60, column: 62, scope: !7)
!43 = !DILocation(line: 63, column: 43, scope: !7)
!44 = !DILocation(line: 63, column: 52, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 63, column: 62, scope: !7)
!47 = !DILocation(line: 66, column: 43, scope: !7)
!48 = !DILocation(line: 66, column: 52, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 62, scope: !7)
!51 = !DILocation(line: 72, column: 20, scope: !7)
!52 = !DILocation(line: 73, column: 43, scope: !7)
!53 = !DILocation(line: 73, column: 52, scope: !7)
!54 = !DILocation(line: 73, column: 31, scope: !7)
!55 = !DILocation(line: 73, column: 70, scope: !7)
!56 = !DILocation(line: 73, column: 62, scope: !7)
!57 = !DILocation(line: 76, column: 43, scope: !7)
!58 = !DILocation(line: 76, column: 52, scope: !7)
!59 = !DILocation(line: 76, column: 31, scope: !7)
!60 = !DILocation(line: 76, column: 62, scope: !7)
!61 = !DILocation(line: 78, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 43, scope: !7)
!63 = !DILocation(line: 79, column: 52, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 70, scope: !7)
!66 = !DILocation(line: 79, column: 62, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !70)
!68 = distinct !DILexicalBlockFile(scope: !7, file: !69, discriminator: 0)
!69 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!70 = !DILocation(line: 47, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !75)
!75 = !DILocation(line: 54, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !80)
!80 = !DILocation(line: 61, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !85)
!85 = !DILocation(line: 64, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !95)
!95 = !DILocation(line: 74, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !100)
!100 = !DILocation(line: 77, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !68, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !68, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !68, inlinedAt: !105)
!108 = !DILocation(line: 84, column: 35, scope: !7)
!109 = !DILocation(line: 87, column: 35, scope: !7)
!110 = !DILocation(line: 90, column: 35, scope: !7)
!111 = !DILocation(line: 93, column: 35, scope: !7)
!112 = !DILocation(line: 96, column: 35, scope: !7)
!113 = !DILocation(line: 99, column: 35, scope: !7)
!114 = !DILocation(line: 102, column: 35, scope: !7)
!115 = !DILocation(line: 105, column: 35, scope: !7)
!116 = !DILocation(line: 106, column: 25, scope: !7)
!117 = !DILocation(line: 106, column: 37, scope: !7)
!118 = !DILocation(line: 121, column: 29, scope: !68, inlinedAt: !105)
!119 = !DILocation(line: 107, column: 25, scope: !7)
!120 = !DILocation(line: 107, column: 37, scope: !7)
!121 = !DILocation(line: 107, column: 4, scope: !7)
