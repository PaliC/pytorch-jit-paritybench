; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_convolution_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %12 = srem i32 %10, 128, !dbg !14
  %13 = sext i32 %10 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !15
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = bitcast i32 %28 to float, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !18
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !18
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !18
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !18
  %42 = bitcast i32 %38 to float, !dbg !18
  %43 = bitcast i32 %39 to float, !dbg !18
  %44 = bitcast i32 %40 to float, !dbg !18
  %45 = bitcast i32 %41 to float, !dbg !18
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !18
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !18
  %51 = bitcast i32 %47 to float, !dbg !18
  %52 = bitcast i32 %48 to float, !dbg !18
  %53 = bitcast i32 %49 to float, !dbg !18
  %54 = bitcast i32 %50 to float, !dbg !18
  %55 = sext i32 %12 to i64, !dbg !19
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !19
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !20
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !20
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !20
  %62 = bitcast i32 %58 to float, !dbg !20
  %63 = bitcast i32 %59 to float, !dbg !20
  %64 = bitcast i32 %60 to float, !dbg !20
  %65 = bitcast i32 %61 to float, !dbg !20
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !20
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !20
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !20
  %71 = bitcast i32 %67 to float, !dbg !20
  %72 = bitcast i32 %68 to float, !dbg !20
  %73 = bitcast i32 %69 to float, !dbg !20
  %74 = bitcast i32 %70 to float, !dbg !20
  %75 = fadd float %42, %62, !dbg !21
  %76 = fadd float %43, %63, !dbg !21
  %77 = fadd float %44, %64, !dbg !21
  %78 = fadd float %45, %65, !dbg !21
  %79 = fadd float %51, %71, !dbg !21
  %80 = fadd float %52, %72, !dbg !21
  %81 = fadd float %53, %73, !dbg !21
  %82 = fadd float %54, %74, !dbg !21
  %83 = fadd float %75, %22, !dbg !22
  %84 = fadd float %76, %23, !dbg !22
  %85 = fadd float %77, %24, !dbg !22
  %86 = fadd float %78, %25, !dbg !22
  %87 = fadd float %79, %31, !dbg !22
  %88 = fadd float %80, %32, !dbg !22
  %89 = fadd float %81, %33, !dbg !22
  %90 = fadd float %82, %34, !dbg !22
  %91 = bitcast float %83 to i32, !dbg !23
  %92 = bitcast float %84 to i32, !dbg !23
  %93 = bitcast float %85 to i32, !dbg !23
  %94 = bitcast float %86 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %91, i32 %92, i32 %93, i32 %94, ptr addrspace(1) %35, i1 true) #1, !dbg !23
  %95 = bitcast float %87 to i32, !dbg !23
  %96 = bitcast float %88 to i32, !dbg !23
  %97 = bitcast float %89 to i32, !dbg !23
  %98 = bitcast float %90 to i32, !dbg !23
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %36, i1 true) #1, !dbg !23
  ret void, !dbg !24
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn3yvp2ilcazlvxwa74miyqsunribak4eouqf532vbngkat3422x.py", directory: "inductor_cache/n3")
!4 = !{ptr @triton_poi_fused_add_convolution_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_22", linkageName: "triton_poi_fused_add_convolution_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 18, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 31, column: 39, scope: !7)
!24 = !DILocation(line: 31, column: 4, scope: !7)
