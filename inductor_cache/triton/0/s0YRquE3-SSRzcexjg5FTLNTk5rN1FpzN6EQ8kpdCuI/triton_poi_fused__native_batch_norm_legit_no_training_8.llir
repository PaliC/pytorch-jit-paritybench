; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 60, !dbg !12
  %14 = lshr i32 %11, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = icmp slt i32 %19, 512, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 6, !dbg !16
  %23 = or disjoint i32 %22, %15, !dbg !17
  %24 = or disjoint i32 %22, %16, !dbg !17
  %25 = or disjoint i32 %22, %17, !dbg !17
  %26 = or disjoint i32 %22, %18, !dbg !17
  %27 = icmp slt i32 %23, 64, !dbg !18
  %28 = icmp slt i32 %24, 64, !dbg !18
  %29 = icmp slt i32 %25, 64, !dbg !18
  %30 = icmp slt i32 %26, 64, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %31 = sdiv i32 %.frozen, 128, !dbg !19
  %32 = mul i32 %31, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %32, !dbg !20
  %33 = shl i32 %23, 7, !dbg !21
  %34 = shl i32 %24, 7, !dbg !21
  %35 = shl i32 %25, 7, !dbg !21
  %36 = shl i32 %26, 7, !dbg !21
  %37 = shl i32 %31, 13, !dbg !22
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = add i32 %38, %33, !dbg !24
  %40 = add i32 %38, %34, !dbg !24
  %41 = add i32 %38, %35, !dbg !24
  %42 = add i32 %38, %36, !dbg !24
  %43 = sext i32 %39 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %40 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %41 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %42 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = and i1 %20, %27, !dbg !26
  %52 = and i1 %20, %28, !dbg !26
  %53 = and i1 %20, %29, !dbg !26
  %54 = and i1 %20, %30, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !27
  %59 = sext i32 %.decomposed to i64, !dbg !28
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %20) #4, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !30
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %20) #4, !dbg !31
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !31
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !31
  %68 = bitcast i32 %64 to float, !dbg !31
  %69 = bitcast i32 %65 to float, !dbg !31
  %70 = bitcast i32 %66 to float, !dbg !31
  %71 = bitcast i32 %67 to float, !dbg !31
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !32
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %20) #4, !dbg !33
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !34
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %20) #4, !dbg !35
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !36
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !36
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !36
  %79 = fadd float %71, 0x3EE4F8B580000000, !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %80, 0, !dbg !37
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %81, 0, !dbg !37
  br i1 %.not.i, label %87, label %82, !dbg !37

82:                                               ; preds = %8
  br i1 %.not1.i, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

87:                                               ; preds = %8
  br i1 %.not1.i, label %90, label %88, !dbg !37

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %83, %85, %88, %90
  %.0.i = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !37
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %92, 0, !dbg !37
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %93, 0, !dbg !37
  br i1 %.not.i1, label %99, label %94, !dbg !37

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %97, label %95, !dbg !37

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !37

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %95, %97, %100, %102
  %.0.i3 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !37
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %104, 0, !dbg !37
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %105, 0, !dbg !37
  br i1 %.not.i6, label %111, label %106, !dbg !37

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !37

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !37

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %107, %109, %112, %114
  %.0.i8 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !37
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %116, 0, !dbg !37
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %117, 0, !dbg !37
  br i1 %.not.i11, label %123, label %118, !dbg !37

118:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %121, label %119, !dbg !37

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !37

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %119, %121, %124, %126
  %.0.i13 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !37
  %128 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = fsub float %129, %131, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fsub float %134, %136, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !27
  %139 = bitcast i32 %138 to float, !dbg !27
  %140 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !29
  %141 = bitcast i32 %140 to float, !dbg !29
  %142 = fsub float %139, %141, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !29
  %146 = bitcast i32 %145 to float, !dbg !29
  %147 = fsub float %144, %146, !dbg !38
  %148 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %149 = bitcast i32 %148 to float, !dbg !27
  %150 = fsub float %149, %131, !dbg !38
  %151 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = fsub float %152, %136, !dbg !38
  %154 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %155 = bitcast i32 %154 to float, !dbg !27
  %156 = fsub float %155, %141, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = fsub float %158, %146, !dbg !38
  %160 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !27
  %161 = bitcast i32 %160 to float, !dbg !27
  %162 = fsub float %161, %131, !dbg !38
  %163 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !27
  %164 = bitcast i32 %163 to float, !dbg !27
  %165 = fsub float %164, %136, !dbg !38
  %166 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !27
  %167 = bitcast i32 %166 to float, !dbg !27
  %168 = fsub float %167, %141, !dbg !38
  %169 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = fsub float %170, %146, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %173 = bitcast i32 %172 to float, !dbg !27
  %174 = fsub float %173, %131, !dbg !38
  %175 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %176 = bitcast i32 %175 to float, !dbg !27
  %177 = fsub float %176, %136, !dbg !38
  %178 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %179 = bitcast i32 %178 to float, !dbg !27
  %180 = fsub float %179, %141, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %182 = bitcast i32 %181 to float, !dbg !27
  %183 = fsub float %182, %146, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !35
  %185 = bitcast i32 %184 to float, !dbg !35
  %186 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !35
  %187 = bitcast i32 %186 to float, !dbg !35
  %188 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !35
  %189 = bitcast i32 %188 to float, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !35
  %191 = bitcast i32 %190 to float, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !33
  %197 = bitcast i32 %196 to float, !dbg !33
  %198 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !33
  %199 = bitcast i32 %198 to float, !dbg !33
  %200 = or disjoint i32 %22, %13, !dbg !17
  %201 = icmp slt i32 %200, 64, !dbg !18
  %202 = or disjoint i32 %10, %18, !dbg !13
  %203 = icmp slt i32 %202, 512, !dbg !14
  %204 = and i1 %203, %201, !dbg !26
  %205 = or disjoint i32 %10, %17, !dbg !13
  %206 = icmp slt i32 %205, 512, !dbg !14
  %207 = and i1 %206, %201, !dbg !26
  %208 = or disjoint i32 %10, %16, !dbg !13
  %209 = icmp slt i32 %208, 512, !dbg !14
  %210 = and i1 %209, %201, !dbg !26
  %211 = or disjoint i32 %10, %15, !dbg !13
  %212 = icmp slt i32 %211, 512, !dbg !14
  %213 = and i1 %212, %201, !dbg !26
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %218 = fmul float %183, %214, !dbg !40
  %219 = fmul float %180, %215, !dbg !40
  %220 = fmul float %177, %216, !dbg !40
  %221 = fmul float %174, %217, !dbg !40
  %222 = fmul float %171, %214, !dbg !40
  %223 = fmul float %168, %215, !dbg !40
  %224 = fmul float %165, %216, !dbg !40
  %225 = fmul float %162, %217, !dbg !40
  %226 = fmul float %159, %214, !dbg !40
  %227 = fmul float %156, %215, !dbg !40
  %228 = fmul float %153, %216, !dbg !40
  %229 = fmul float %150, %217, !dbg !40
  %230 = fmul float %147, %214, !dbg !40
  %231 = fmul float %142, %215, !dbg !40
  %232 = fmul float %137, %216, !dbg !40
  %233 = fmul float %132, %217, !dbg !40
  %234 = fmul float %218, %199, !dbg !41
  %235 = fmul float %219, %197, !dbg !41
  %236 = fmul float %220, %195, !dbg !41
  %237 = fmul float %221, %193, !dbg !41
  %238 = fmul float %222, %199, !dbg !41
  %239 = fmul float %223, %197, !dbg !41
  %240 = fmul float %224, %195, !dbg !41
  %241 = fmul float %225, %193, !dbg !41
  %242 = fmul float %226, %199, !dbg !41
  %243 = fmul float %227, %197, !dbg !41
  %244 = fmul float %228, %195, !dbg !41
  %245 = fmul float %229, %193, !dbg !41
  %246 = fmul float %230, %199, !dbg !41
  %247 = fmul float %231, %197, !dbg !41
  %248 = fmul float %232, %195, !dbg !41
  %249 = fmul float %233, %193, !dbg !41
  %250 = fadd float %234, %191, !dbg !42
  %251 = fadd float %235, %189, !dbg !42
  %252 = fadd float %236, %187, !dbg !42
  %253 = fadd float %237, %185, !dbg !42
  %254 = fadd float %238, %191, !dbg !42
  %255 = fadd float %239, %189, !dbg !42
  %256 = fadd float %240, %187, !dbg !42
  %257 = fadd float %241, %185, !dbg !42
  %258 = fadd float %242, %191, !dbg !42
  %259 = fadd float %243, %189, !dbg !42
  %260 = fadd float %244, %187, !dbg !42
  %261 = fadd float %245, %185, !dbg !42
  %262 = fadd float %246, %191, !dbg !42
  %263 = fadd float %247, %189, !dbg !42
  %264 = fadd float %248, %187, !dbg !42
  %265 = fadd float %249, %185, !dbg !42
  %266 = shl i32 %211, 6, !dbg !43
  %267 = shl i32 %208, 6, !dbg !43
  %268 = shl i32 %205, 6, !dbg !43
  %269 = shl i32 %202, 6, !dbg !43
  %270 = add i32 %200, %266, !dbg !44
  %271 = add i32 %200, %267, !dbg !44
  %272 = add i32 %200, %268, !dbg !44
  %273 = add i32 %200, %269, !dbg !44
  %274 = sext i32 %270 to i64, !dbg !45
  %275 = getelementptr float, ptr addrspace(1) %5, i64 %274, !dbg !45
  %276 = sext i32 %271 to i64, !dbg !45
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !45
  %278 = sext i32 %272 to i64, !dbg !45
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !45
  %280 = sext i32 %273 to i64, !dbg !45
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !45
  %282 = shl i32 %11, 8, !dbg !46
  %283 = and i32 %282, 3840, !dbg !46
  %284 = or disjoint i32 %283, %15, !dbg !46
  %285 = and i32 %12, 1020, !dbg !46
  %286 = lshr exact i32 %283, 4, !dbg !46
  %287 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %286, !dbg !46
  %288 = getelementptr float, ptr addrspace(3) %287, i32 %284, !dbg !46
  %289 = bitcast float %250 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %288, <1 x i32> %289, i1 true) #4, !dbg !46
  %290 = or disjoint i32 %284, 64, !dbg !46
  %291 = lshr i32 %290, 6, !dbg !46
  %292 = getelementptr float, ptr addrspace(3) @global_smem, i32 %291, !dbg !46
  %293 = getelementptr float, ptr addrspace(3) %292, i32 %290, !dbg !46
  %294 = bitcast float %251 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !46
  %295 = or disjoint i32 %284, 128, !dbg !46
  %296 = lshr i32 %295, 6, !dbg !46
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !46
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %295, !dbg !46
  %299 = bitcast float %252 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #4, !dbg !46
  %300 = or disjoint i32 %284, 192, !dbg !46
  %301 = lshr i32 %300, 6, !dbg !46
  %302 = getelementptr float, ptr addrspace(3) @global_smem, i32 %301, !dbg !46
  %303 = getelementptr float, ptr addrspace(3) %302, i32 %300, !dbg !46
  %304 = bitcast float %253 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %303, <1 x i32> %304, i1 true) #4, !dbg !46
  %305 = or disjoint i32 %284, 16, !dbg !46
  %306 = getelementptr float, ptr addrspace(3) %287, i32 %305, !dbg !46
  %307 = bitcast float %254 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %306, <1 x i32> %307, i1 true) #4, !dbg !46
  %308 = or disjoint i32 %284, 80, !dbg !46
  %309 = lshr i32 %308, 6, !dbg !46
  %310 = getelementptr float, ptr addrspace(3) @global_smem, i32 %309, !dbg !46
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %308, !dbg !46
  %312 = bitcast float %255 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !46
  %313 = or disjoint i32 %284, 144, !dbg !46
  %314 = lshr i32 %313, 6, !dbg !46
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !46
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %313, !dbg !46
  %317 = bitcast float %256 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !46
  %318 = or disjoint i32 %284, 208, !dbg !46
  %319 = lshr i32 %318, 6, !dbg !46
  %320 = getelementptr float, ptr addrspace(3) @global_smem, i32 %319, !dbg !46
  %321 = getelementptr float, ptr addrspace(3) %320, i32 %318, !dbg !46
  %322 = bitcast float %257 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !46
  %323 = or disjoint i32 %284, 32, !dbg !46
  %324 = getelementptr float, ptr addrspace(3) %287, i32 %323, !dbg !46
  %325 = bitcast float %258 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !46
  %326 = or disjoint i32 %284, 96, !dbg !46
  %327 = lshr i32 %326, 6, !dbg !46
  %328 = getelementptr float, ptr addrspace(3) @global_smem, i32 %327, !dbg !46
  %329 = getelementptr float, ptr addrspace(3) %328, i32 %326, !dbg !46
  %330 = bitcast float %259 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !46
  %331 = or disjoint i32 %284, 160, !dbg !46
  %332 = lshr i32 %331, 6, !dbg !46
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !46
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %331, !dbg !46
  %335 = bitcast float %260 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !46
  %336 = or disjoint i32 %284, 224, !dbg !46
  %337 = lshr i32 %336, 6, !dbg !46
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !46
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !46
  %340 = bitcast float %261 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !46
  %341 = or disjoint i32 %284, 48, !dbg !46
  %342 = getelementptr float, ptr addrspace(3) %287, i32 %341, !dbg !46
  %343 = bitcast float %262 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !46
  %344 = or disjoint i32 %284, 112, !dbg !46
  %345 = lshr i32 %344, 6, !dbg !46
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !46
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %344, !dbg !46
  %348 = bitcast float %263 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !46
  %349 = or disjoint i32 %284, 176, !dbg !46
  %350 = lshr i32 %349, 6, !dbg !46
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %350, !dbg !46
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %349, !dbg !46
  %353 = bitcast float %264 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !46
  %354 = or disjoint i32 %284, 240, !dbg !46
  %355 = lshr i32 %354, 6, !dbg !46
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !46
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %354, !dbg !46
  %358 = bitcast float %265 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %359 = lshr i32 %285, 6, !dbg !46
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %359, !dbg !46
  %361 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %285, !dbg !46
  %362 = load i32, ptr addrspace(3) %361, align 4, !dbg !46
  %363 = or disjoint i32 %285, 1, !dbg !46
  %364 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %363, !dbg !46
  %365 = load i32, ptr addrspace(3) %364, align 4, !dbg !46
  %366 = or disjoint i32 %285, 2, !dbg !46
  %367 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %366, !dbg !46
  %368 = load i32, ptr addrspace(3) %367, align 4, !dbg !46
  %369 = or disjoint i32 %285, 3, !dbg !46
  %370 = getelementptr inbounds float, ptr addrspace(3) %360, i32 %369, !dbg !46
  %371 = load i32, ptr addrspace(3) %370, align 4, !dbg !46
  %372 = or disjoint i32 %285, 1024, !dbg !46
  %373 = lshr i32 %372, 6, !dbg !46
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !46
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %372, !dbg !46
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !46
  %377 = or disjoint i32 %285, 1025, !dbg !46
  %378 = lshr i32 %377, 6, !dbg !46
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %378, !dbg !46
  %380 = getelementptr inbounds float, ptr addrspace(3) %379, i32 %377, !dbg !46
  %381 = load i32, ptr addrspace(3) %380, align 4, !dbg !46
  %382 = or disjoint i32 %285, 1026, !dbg !46
  %383 = lshr i32 %382, 6, !dbg !46
  %384 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %383, !dbg !46
  %385 = getelementptr inbounds float, ptr addrspace(3) %384, i32 %382, !dbg !46
  %386 = load i32, ptr addrspace(3) %385, align 4, !dbg !46
  %387 = or disjoint i32 %285, 1027, !dbg !46
  %388 = lshr i32 %387, 6, !dbg !46
  %389 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %388, !dbg !46
  %390 = getelementptr inbounds float, ptr addrspace(3) %389, i32 %387, !dbg !46
  %391 = load i32, ptr addrspace(3) %390, align 4, !dbg !46
  %392 = or disjoint i32 %285, 2048, !dbg !46
  %393 = lshr i32 %392, 6, !dbg !46
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !46
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %392, !dbg !46
  %396 = load i32, ptr addrspace(3) %395, align 4, !dbg !46
  %397 = or disjoint i32 %285, 2049, !dbg !46
  %398 = lshr i32 %397, 6, !dbg !46
  %399 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %398, !dbg !46
  %400 = getelementptr inbounds float, ptr addrspace(3) %399, i32 %397, !dbg !46
  %401 = load i32, ptr addrspace(3) %400, align 4, !dbg !46
  %402 = or disjoint i32 %285, 2050, !dbg !46
  %403 = lshr i32 %402, 6, !dbg !46
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %403, !dbg !46
  %405 = getelementptr inbounds float, ptr addrspace(3) %404, i32 %402, !dbg !46
  %406 = load i32, ptr addrspace(3) %405, align 4, !dbg !46
  %407 = or disjoint i32 %285, 2051, !dbg !46
  %408 = lshr i32 %407, 6, !dbg !46
  %409 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %408, !dbg !46
  %410 = getelementptr inbounds float, ptr addrspace(3) %409, i32 %407, !dbg !46
  %411 = load i32, ptr addrspace(3) %410, align 4, !dbg !46
  %412 = or disjoint i32 %285, 3072, !dbg !46
  %413 = lshr i32 %412, 6, !dbg !46
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !46
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %412, !dbg !46
  %416 = load i32, ptr addrspace(3) %415, align 4, !dbg !46
  %417 = or disjoint i32 %285, 3073, !dbg !46
  %418 = lshr i32 %417, 6, !dbg !46
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !46
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %417, !dbg !46
  %421 = load i32, ptr addrspace(3) %420, align 4, !dbg !46
  %422 = or disjoint i32 %285, 3074, !dbg !46
  %423 = lshr i32 %422, 6, !dbg !46
  %424 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %423, !dbg !46
  %425 = getelementptr inbounds float, ptr addrspace(3) %424, i32 %422, !dbg !46
  %426 = load i32, ptr addrspace(3) %425, align 4, !dbg !46
  %427 = or disjoint i32 %285, 3075, !dbg !46
  %428 = lshr i32 %427, 6, !dbg !46
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !46
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %427, !dbg !46
  %431 = load i32, ptr addrspace(3) %430, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %362, i32 %365, i32 %368, i32 %371, ptr addrspace(1) %275, i1 %213) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %376, i32 %381, i32 %386, i32 %391, ptr addrspace(1) %277, i1 %210) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %396, i32 %401, i32 %406, i32 %411, ptr addrspace(1) %279, i1 %207) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %416, i32 %421, i32 %426, i32 %431, ptr addrspace(1) %281, i1 %204) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmfaxtezspp4a7fawqeixh3df2rab6b3pl4rttntx2kvryd5tmk6.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 33, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 45, scope: !7)
!47 = !DILocation(line: 48, column: 4, scope: !7)
