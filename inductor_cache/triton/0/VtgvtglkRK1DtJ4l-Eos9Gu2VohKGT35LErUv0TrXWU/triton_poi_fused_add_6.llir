; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = icmp slt i32 %18, 64, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 4, !dbg !16
  %23 = or disjoint i32 %22, %16, !dbg !17
  %24 = or disjoint i32 %22, %14, !dbg !17
  %25 = icmp slt i32 %23, 16, !dbg !18
  %26 = icmp slt i32 %24, 16, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %27 = sdiv i32 %.frozen, 16, !dbg !19
  %28 = mul i32 %27, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %17, 4, !dbg !21
  %30 = add i32 %23, %29, !dbg !22
  %31 = sext i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = and i1 %19, %25, !dbg !24
  %34 = and i1 %20, %26, !dbg !24
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %33) #4, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #4, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #4, !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #4, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #4, !dbg !29
  %41 = shl i32 %24, 4, !dbg !30
  %42 = add i32 %41, %.decomposed, !dbg !31
  %43 = shl i32 %27, 8, !dbg !32
  %44 = add i32 %42, %43, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !34
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %34) #4, !dbg !35
  %48 = fadd float %38, 0x3EE4F8B580000000, !dbg !36
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %49, 0, !dbg !37
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %50, 0, !dbg !37
  br i1 %.not.i, label %56, label %51, !dbg !37

51:                                               ; preds = %9
  br i1 %.not1.i, label %54, label %52, !dbg !37

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

56:                                               ; preds = %9
  br i1 %.not1.i, label %59, label %57, !dbg !37

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !37
  %61 = extractvalue { i32, i32 } %35, 1, !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = bitcast i32 %36 to float, !dbg !26
  %64 = fsub float %62, %63, !dbg !38
  %65 = extractvalue { i32, i32 } %35, 0, !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = fsub float %66, %63, !dbg !38
  %68 = extractvalue { i32, i32 } %47, 1, !dbg !35
  %69 = bitcast i32 %68 to float, !dbg !35
  %70 = extractvalue { i32, i32 } %47, 0, !dbg !35
  %71 = bitcast i32 %70 to float, !dbg !35
  %72 = bitcast i32 %40 to float, !dbg !29
  %73 = bitcast i32 %39 to float, !dbg !28
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %75 = fmul float %67, %74, !dbg !40
  %76 = fmul float %64, %74, !dbg !40
  %77 = fmul float %75, %73, !dbg !41
  %78 = fmul float %76, %73, !dbg !41
  %79 = fadd float %77, %72, !dbg !42
  %80 = fadd float %78, %72, !dbg !42
  %81 = shl i32 %12, 5, !dbg !42
  %82 = and i32 %81, 224, !dbg !42
  %83 = or disjoint i32 %82, %14, !dbg !42
  %84 = and i32 %15, 254, !dbg !42
  %85 = lshr exact i32 %82, 1, !dbg !42
  %86 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %85, !dbg !42
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !42
  %88 = bitcast float %79 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #4, !dbg !42
  %89 = or disjoint i32 %83, 16, !dbg !42
  %90 = lshr i32 %89, 4, !dbg !42
  %.idx = shl nuw nsw i32 %90, 3, !dbg !42
  %91 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !42
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !42
  %93 = bitcast float %80 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %94 = lshr i32 %84, 4, !dbg !42
  %95 = and i32 %12, 127, !dbg !42
  %96 = add nuw nsw i32 %94, %95, !dbg !42
  %.idx1 = shl nuw nsw i32 %96, 3, !dbg !42
  %97 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !42
  %98 = load float, ptr addrspace(3) %97, align 8, !dbg !42
  %99 = getelementptr inbounds i8, ptr addrspace(3) %97, i32 4, !dbg !42
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !42
  %101 = fsub float %71, %63, !dbg !43
  %102 = fsub float %69, %63, !dbg !43
  %103 = fmul float %101, %74, !dbg !44
  %104 = fmul float %102, %74, !dbg !44
  %105 = fmul float %103, %73, !dbg !45
  %106 = fmul float %104, %73, !dbg !45
  %107 = fadd float %105, %72, !dbg !46
  %108 = fadd float %106, %72, !dbg !46
  %109 = fadd float %107, %98, !dbg !47
  %110 = fadd float %108, %100, !dbg !47
  %111 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %112 = lshr exact i32 %82, 2, !dbg !49
  %113 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %112, !dbg !49
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %83, !dbg !49
  %115 = bitcast float %109 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #4, !dbg !49
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !49
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %89, !dbg !49
  %118 = bitcast float %110 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %94, !dbg !49
  %120 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %84, !dbg !49
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !49
  %122 = or disjoint i32 %84, 1, !dbg !49
  %123 = getelementptr inbounds float, ptr addrspace(3) %119, i32 %122, !dbg !49
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %124, ptr addrspace(1) %111, i1 %33) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdtli7kggothntk2ytjn77zsyeyfz2rwbazvudzvsofqezaum7et.py", directory: "inductor_cache/dt")
!4 = !{ptr @triton_poi_fused_add_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_6", linkageName: "triton_poi_fused_add_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 51, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 33, column: 19, scope: !7)
!27 = !DILocation(line: 35, column: 19, scope: !7)
!28 = !DILocation(line: 37, column: 20, scope: !7)
!29 = !DILocation(line: 39, column: 20, scope: !7)
!30 = !DILocation(line: 41, column: 39, scope: !7)
!31 = !DILocation(line: 41, column: 36, scope: !7)
!32 = !DILocation(line: 41, column: 48, scope: !7)
!33 = !DILocation(line: 41, column: 44, scope: !7)
!34 = !DILocation(line: 41, column: 31, scope: !7)
!35 = !DILocation(line: 41, column: 53, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 26, scope: !7)
!38 = !DILocation(line: 42, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 25, scope: !7)
!49 = !DILocation(line: 58, column: 45, scope: !7)
!50 = !DILocation(line: 58, column: 4, scope: !7)
