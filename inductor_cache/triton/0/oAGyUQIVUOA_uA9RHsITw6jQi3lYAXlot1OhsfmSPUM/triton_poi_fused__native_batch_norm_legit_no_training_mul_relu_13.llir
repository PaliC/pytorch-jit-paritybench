; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 64, !dbg !14
  %16 = srem i32 %15, 256, !dbg !15
  %17 = sdiv i32 %14, 16384, !dbg !16
  %.lhs.trunc = trunc nsw i32 %16 to i16, !dbg !17
  %.lhs.trunc.frozen = freeze i16 %.lhs.trunc, !dbg !18
  %18 = sdiv i16 %.lhs.trunc.frozen, 8, !dbg !18
  %19 = mul i16 %18, 8, !dbg !17
  %.decomposed = sub i16 %.lhs.trunc.frozen, %19, !dbg !17
  %.sext = sext i16 %.decomposed to i32, !dbg !17
  %20 = shl nsw i32 %.sext, 5, !dbg !19
  %21 = shl nsw i32 %17, 8, !dbg !20
  %.sext17 = sext i16 %18 to i32, !dbg !18
  %22 = add nsw i32 %21, %.sext17, !dbg !21
  %23 = add nsw i32 %22, %20, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !24
  %30 = sext i32 %14 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !25
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !26
  %33 = sext i32 %16 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !28
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %41 = bitcast i32 %40 to float, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %58 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %45, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %8
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %8
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i1, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %77, %79, %82, %84
  %.0.i3 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i6 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i6, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !36
  br label %__nv_sqrtf.exit10, !dbg !36

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i11 = icmp eq i32 %98, 0, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !36
  br i1 %.not.i11, label %105, label %100, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit15, !dbg !36

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !26
  %111 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !28
  %112 = insertelement <4 x i32> %111, i32 %37, i64 1, !dbg !28
  %113 = insertelement <4 x i32> %112, i32 %36, i64 2, !dbg !28
  %114 = insertelement <4 x i32> %113, i32 %35, i64 3, !dbg !28
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !28
  %116 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !26
  %119 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !34
  %120 = insertelement <4 x i32> %119, i32 %56, i64 1, !dbg !34
  %121 = insertelement <4 x i32> %120, i32 %55, i64 2, !dbg !34
  %122 = insertelement <4 x i32> %121, i32 %54, i64 3, !dbg !34
  %123 = bitcast <4 x i32> %122 to <4 x float>, !dbg !34
  %124 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !32
  %125 = insertelement <4 x i32> %124, i32 %51, i64 1, !dbg !32
  %126 = insertelement <4 x i32> %125, i32 %50, i64 2, !dbg !32
  %127 = insertelement <4 x i32> %126, i32 %49, i64 3, !dbg !32
  %128 = bitcast <4 x i32> %127 to <4 x float>, !dbg !32
  %129 = bitcast i32 %29 to float, !dbg !24
  %130 = bitcast i32 %28 to float, !dbg !24
  %131 = bitcast i32 %27 to float, !dbg !24
  %132 = bitcast i32 %26 to float, !dbg !24
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %137 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !26
  %138 = insertelement <4 x i32> %137, i32 %116, i64 1, !dbg !26
  %139 = insertelement <4 x i32> %138, i32 %117, i64 2, !dbg !26
  %140 = insertelement <4 x i32> %139, i32 %118, i64 3, !dbg !26
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !26
  %142 = fsub <4 x float> %141, %115, !dbg !38
  %143 = insertelement <4 x float> poison, float %136, i64 0, !dbg !39
  %144 = insertelement <4 x float> %143, float %135, i64 1, !dbg !39
  %145 = insertelement <4 x float> %144, float %134, i64 2, !dbg !39
  %146 = insertelement <4 x float> %145, float %133, i64 3, !dbg !39
  %147 = fmul <4 x float> %142, %146, !dbg !39
  %148 = fmul <4 x float> %147, %128, !dbg !40
  %149 = fadd <4 x float> %148, %123, !dbg !41
  %150 = fcmp olt <4 x float> %149, zeroinitializer, !dbg !42
  %151 = extractelement <4 x i1> %150, i64 3, !dbg !46
  %152 = extractelement <4 x float> %149, i64 3, !dbg !46
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !46
  %154 = extractelement <4 x i1> %150, i64 2, !dbg !46
  %155 = extractelement <4 x float> %149, i64 2, !dbg !46
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !46
  %157 = extractelement <4 x i1> %150, i64 1, !dbg !46
  %158 = extractelement <4 x float> %149, i64 1, !dbg !46
  %159 = select i1 %157, float 0.000000e+00, float %158, !dbg !46
  %160 = extractelement <4 x i1> %150, i64 0, !dbg !46
  %161 = extractelement <4 x float> %149, i64 0, !dbg !46
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !46
  %163 = fmul float %153, %132, !dbg !47
  %164 = fmul float %156, %131, !dbg !47
  %165 = fmul float %159, %130, !dbg !47
  %166 = fmul float %162, %129, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !48
  %168 = bitcast float %163 to i32, !dbg !49
  %169 = bitcast float %164 to i32, !dbg !49
  %170 = bitcast float %165 to i32, !dbg !49
  %171 = bitcast float %166 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %168, i32 %169, i32 %170, i32 %171, ptr addrspace(1) %167, i1 true) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3tb5jvvdq6aealit5k3k4gvgf3a6lkbclcvmkjojeyhacpzked.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_mul_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 62, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 50, scope: !7)
!21 = !DILocation(line: 27, column: 46, scope: !7)
!22 = !DILocation(line: 27, column: 56, scope: !7)
!23 = !DILocation(line: 27, column: 30, scope: !7)
!24 = !DILocation(line: 27, column: 67, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 35, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 35, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 36, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 26, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 19, scope: !7)
!40 = !DILocation(line: 42, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 45, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 46, column: 19, scope: !7)
!48 = !DILocation(line: 47, column: 25, scope: !7)
!49 = !DILocation(line: 47, column: 37, scope: !7)
!50 = !DILocation(line: 47, column: 4, scope: !7)
