; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_rsub_sigmoid_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16, i32 %17) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %19 = icmp slt i32 %18, 256, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = srem i32 %18, 64, !dbg !13
  %22 = sext i32 %18 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !14
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #5, !dbg !15
  %25 = bitcast i32 %24 to float, !dbg !15
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #5, !dbg !15
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #5, !dbg !15
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #5, !dbg !15
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %19) #5, !dbg !15
  %30 = sext i32 %21 to i64, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !16
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #5, !dbg !17
  %33 = bitcast i32 %32 to float, !dbg !17
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #5, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #5, !dbg !17
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #5, !dbg !17
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %19) #5, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #5, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #5, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #5, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %19) #5, !dbg !19
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !20
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %19) #5, !dbg !21
  %48 = bitcast i32 %47 to float, !dbg !21
  %49 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #5, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #5, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #5, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %19) #5, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %19) #5, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %19) #5, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %19) #5, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %19) #5, !dbg !25
  %59 = fadd float %25, %33, !dbg !26
  %60 = fadd float %48, 0x3EE4F8B580000000, !dbg !27
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !28
  %.not.i11 = icmp eq i32 %67, 0, !dbg !28
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !28
  %.not1.i14 = icmp eq i32 %68, 0, !dbg !28
  br i1 %.not.i11, label %74, label %69, !dbg !28

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %72, label %70, !dbg !28

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %77, label %75, !dbg !28

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #5, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %70, %72, %75, %77
  %.0.i13 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !28
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %20, 511, !dbg !31
  %80 = icmp eq i32 %urem, 0, !dbg !31
  %81 = bitcast float %59 to i32, !dbg !31
  %82 = and i1 %80, %19, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %23, i1 %82) #5, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #5, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #5, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #5, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %19) #5, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %19) #5, !dbg !35
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %19) #5, !dbg !35
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %19) #5, !dbg !35
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %19) #5, !dbg !35
  %93 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !36
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %19) #5, !dbg !37
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %19) #5, !dbg !37
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %19) #5, !dbg !37
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %19) #5, !dbg !37
  %98 = bitcast i32 %97 to float, !dbg !37
  %99 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !38
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %19) #5, !dbg !39
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %19) #5, !dbg !39
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %19) #5, !dbg !39
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %19) #5, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %13, i64 %30, !dbg !40
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #5, !dbg !41
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #5, !dbg !41
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #5, !dbg !41
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #5, !dbg !41
  %109 = fadd float %98, 0x3EE4F8B580000000, !dbg !42
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i31 = icmp eq i32 %116, 0, !dbg !43
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i34 = icmp eq i32 %117, 0, !dbg !43
  br i1 %.not.i31, label %123, label %118, !dbg !43

118:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %121, label %119, !dbg !43

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

123:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %126, label %124, !dbg !43

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #5, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

__nv_sqrtf.exit35:                                ; preds = %119, %121, %124, %126
  %.0.i33 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !43
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #5, !dbg !44
  %129 = insertelement <4 x i1> poison, i1 %19, i64 0, !dbg !45
  %130 = shufflevector <4 x i1> %129, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !45
  %131 = shl i32 %18, 12, !dbg !46
  %132 = shl i32 %20, 2, !dbg !12
  %133 = and i32 %132, 2044, !dbg !12
  %134 = or disjoint i32 %131, %133
  %135 = sext i32 %134 to i64, !dbg !47
  %136 = bitcast i32 %108 to float, !dbg !41
  %137 = bitcast i32 %103 to float, !dbg !39
  %138 = bitcast i32 %92 to float, !dbg !35
  %139 = bitcast i32 %87 to float, !dbg !33
  %140 = bitcast i32 %29 to float, !dbg !15
  %141 = bitcast i32 %37 to float, !dbg !17
  %142 = fadd float %140, %141, !dbg !26
  %143 = bitcast i32 %42 to float, !dbg !19
  %144 = fsub float %142, %143, !dbg !48
  %145 = fmul float %144, %79, !dbg !49
  %146 = bitcast i32 %53 to float, !dbg !23
  %147 = fmul float %145, %146, !dbg !50
  %148 = bitcast i32 %58 to float, !dbg !25
  %149 = fadd float %147, %148, !dbg !51
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !52
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !53
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !53
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !53
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !53
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !53
  %156 = bitcast i32 %152 to float, !dbg !53
  %157 = bitcast i32 %153 to float, !dbg !53
  %158 = bitcast i32 %154 to float, !dbg !53
  %159 = bitcast i32 %155 to float, !dbg !53
  %160 = getelementptr float, ptr addrspace(1) %14, i64 %135, !dbg !54
  %161 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !55
  %162 = extractvalue { i32, i32, i32, i32 } %161, 0, !dbg !55
  %163 = extractvalue { i32, i32, i32, i32 } %161, 1, !dbg !55
  %164 = extractvalue { i32, i32, i32, i32 } %161, 2, !dbg !55
  %165 = extractvalue { i32, i32, i32, i32 } %161, 3, !dbg !55
  %166 = getelementptr float, ptr addrspace(1) %15, i64 %135, !dbg !56
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !57
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !57
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !57
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !57
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !57
  %172 = fadd float %139, %156, !dbg !58
  %173 = fadd float %139, %157, !dbg !58
  %174 = fadd float %139, %158, !dbg !58
  %175 = fadd float %139, %159, !dbg !58
  %176 = fsub float %172, %138, !dbg !59
  %177 = fsub float %173, %138, !dbg !59
  %178 = fsub float %174, %138, !dbg !59
  %179 = fsub float %175, %138, !dbg !59
  %180 = fmul float %128, %176, !dbg !60
  %181 = fmul float %128, %177, !dbg !60
  %182 = fmul float %128, %178, !dbg !60
  %183 = fmul float %128, %179, !dbg !60
  %184 = fmul float %180, %137, !dbg !61
  %185 = fmul float %181, %137, !dbg !61
  %186 = fmul float %182, %137, !dbg !61
  %187 = fmul float %183, %137, !dbg !61
  %188 = fadd float %184, %136, !dbg !62
  %189 = fadd float %185, %136, !dbg !62
  %190 = fadd float %186, %136, !dbg !62
  %191 = fadd float %187, %136, !dbg !62
  %192 = fadd float %149, %188, !dbg !63
  %193 = fadd float %149, %189, !dbg !63
  %194 = fadd float %149, %190, !dbg !63
  %195 = fadd float %149, %191, !dbg !63
  %196 = fsub float 0.000000e+00, %192, !dbg !64
  %197 = fsub float 0.000000e+00, %193, !dbg !64
  %198 = fsub float 0.000000e+00, %194, !dbg !64
  %199 = fsub float 0.000000e+00, %195, !dbg !64
  %200 = fmul float %196, 0x3FF7154760000000, !dbg !68
  %201 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %200) #5, !dbg !68
  %202 = fmul float %197, 0x3FF7154760000000, !dbg !68
  %203 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %202) #5, !dbg !68
  %204 = fmul float %198, 0x3FF7154760000000, !dbg !68
  %205 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %204) #5, !dbg !68
  %206 = fmul float %199, 0x3FF7154760000000, !dbg !68
  %207 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %206) #5, !dbg !68
  %208 = fadd float %201, 1.000000e+00, !dbg !69
  %209 = fadd float %203, 1.000000e+00, !dbg !69
  %210 = fadd float %205, 1.000000e+00, !dbg !69
  %211 = fadd float %207, 1.000000e+00, !dbg !69
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %208) #5, !dbg !70
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %209) #5, !dbg !70
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %210) #5, !dbg !70
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %211) #5, !dbg !70
  %216 = insertelement <4 x i32> poison, i32 %162, i64 0, !dbg !55
  %217 = insertelement <4 x i32> %216, i32 %163, i64 1, !dbg !55
  %218 = insertelement <4 x i32> %217, i32 %164, i64 2, !dbg !55
  %219 = insertelement <4 x i32> %218, i32 %165, i64 3, !dbg !55
  %220 = bitcast <4 x i32> %219 to <4 x float>, !dbg !55
  %221 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !57
  %222 = insertelement <4 x i32> %221, i32 %169, i64 1, !dbg !57
  %223 = insertelement <4 x i32> %222, i32 %170, i64 2, !dbg !57
  %224 = insertelement <4 x i32> %223, i32 %171, i64 3, !dbg !57
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !57
  %226 = insertelement <4 x float> poison, float %212, i64 0, !dbg !71
  %227 = insertelement <4 x float> %226, float %213, i64 1, !dbg !71
  %228 = insertelement <4 x float> %227, float %214, i64 2, !dbg !71
  %229 = insertelement <4 x float> %228, float %215, i64 3, !dbg !71
  %230 = fmul <4 x float> %229, %220, !dbg !71
  %231 = fsub <4 x float> splat (float 1.000000e+00), %229, !dbg !72
  %232 = fmul <4 x float> %231, %225, !dbg !73
  %233 = fadd <4 x float> %230, %232, !dbg !74
  %234 = fadd <4 x float> %233, zeroinitializer, !dbg !75
  %235 = bitcast float %172 to i32, !dbg !76
  %236 = bitcast float %173 to i32, !dbg !76
  %237 = bitcast float %174 to i32, !dbg !76
  %238 = bitcast float %175 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %235, i32 %236, i32 %237, i32 %238, ptr addrspace(1) %150, i1 %19) #5, !dbg !76
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %135, !dbg !77
  %bc = bitcast <4 x float> %233 to <4 x i32>, !dbg !78
  %240 = extractelement <4 x i32> %bc, i64 0, !dbg !78
  %bc47 = bitcast <4 x float> %233 to <4 x i32>, !dbg !78
  %241 = extractelement <4 x i32> %bc47, i64 1, !dbg !78
  %bc48 = bitcast <4 x float> %233 to <4 x i32>, !dbg !78
  %242 = extractelement <4 x i32> %bc48, i64 2, !dbg !78
  %bc49 = bitcast <4 x float> %233 to <4 x i32>, !dbg !78
  %243 = extractelement <4 x i32> %bc49, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %240, i32 %241, i32 %242, i32 %243, ptr addrspace(1) %239, i1 %19) #5, !dbg !78
  %244 = or disjoint i64 %135, 2048, !dbg !79
  %245 = getelementptr float, ptr addrspace(1) %1, i64 %244, !dbg !52
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !53
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !53
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !53
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !53
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !53
  %251 = bitcast i32 %247 to float, !dbg !53
  %252 = bitcast i32 %248 to float, !dbg !53
  %253 = bitcast i32 %249 to float, !dbg !53
  %254 = bitcast i32 %250 to float, !dbg !53
  %255 = getelementptr float, ptr addrspace(1) %14, i64 %244, !dbg !54
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !55
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !55
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !55
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !55
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !55
  %261 = getelementptr float, ptr addrspace(1) %15, i64 %244, !dbg !56
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !57
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !57
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !57
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !57
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !57
  %267 = fadd float %139, %251, !dbg !58
  %268 = fadd float %139, %252, !dbg !58
  %269 = fadd float %139, %253, !dbg !58
  %270 = fadd float %139, %254, !dbg !58
  %271 = fsub float %267, %138, !dbg !59
  %272 = fsub float %268, %138, !dbg !59
  %273 = fsub float %269, %138, !dbg !59
  %274 = fsub float %270, %138, !dbg !59
  %275 = fmul float %128, %271, !dbg !60
  %276 = fmul float %128, %272, !dbg !60
  %277 = fmul float %128, %273, !dbg !60
  %278 = fmul float %128, %274, !dbg !60
  %279 = fmul float %275, %137, !dbg !61
  %280 = fmul float %276, %137, !dbg !61
  %281 = fmul float %277, %137, !dbg !61
  %282 = fmul float %278, %137, !dbg !61
  %283 = fadd float %279, %136, !dbg !62
  %284 = fadd float %280, %136, !dbg !62
  %285 = fadd float %281, %136, !dbg !62
  %286 = fadd float %282, %136, !dbg !62
  %287 = fadd float %149, %283, !dbg !63
  %288 = fadd float %149, %284, !dbg !63
  %289 = fadd float %149, %285, !dbg !63
  %290 = fadd float %149, %286, !dbg !63
  %291 = fsub float 0.000000e+00, %287, !dbg !64
  %292 = fsub float 0.000000e+00, %288, !dbg !64
  %293 = fsub float 0.000000e+00, %289, !dbg !64
  %294 = fsub float 0.000000e+00, %290, !dbg !64
  %295 = fmul float %291, 0x3FF7154760000000, !dbg !68
  %296 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %295) #5, !dbg !68
  %297 = fmul float %292, 0x3FF7154760000000, !dbg !68
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %297) #5, !dbg !68
  %299 = fmul float %293, 0x3FF7154760000000, !dbg !68
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %299) #5, !dbg !68
  %301 = fmul float %294, 0x3FF7154760000000, !dbg !68
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %301) #5, !dbg !68
  %303 = fadd float %296, 1.000000e+00, !dbg !69
  %304 = fadd float %298, 1.000000e+00, !dbg !69
  %305 = fadd float %300, 1.000000e+00, !dbg !69
  %306 = fadd float %302, 1.000000e+00, !dbg !69
  %307 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %303) #5, !dbg !70
  %308 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #5, !dbg !70
  %309 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #5, !dbg !70
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #5, !dbg !70
  %311 = insertelement <4 x i32> poison, i32 %257, i64 0, !dbg !55
  %312 = insertelement <4 x i32> %311, i32 %258, i64 1, !dbg !55
  %313 = insertelement <4 x i32> %312, i32 %259, i64 2, !dbg !55
  %314 = insertelement <4 x i32> %313, i32 %260, i64 3, !dbg !55
  %315 = bitcast <4 x i32> %314 to <4 x float>, !dbg !55
  %316 = insertelement <4 x i32> poison, i32 %263, i64 0, !dbg !57
  %317 = insertelement <4 x i32> %316, i32 %264, i64 1, !dbg !57
  %318 = insertelement <4 x i32> %317, i32 %265, i64 2, !dbg !57
  %319 = insertelement <4 x i32> %318, i32 %266, i64 3, !dbg !57
  %320 = bitcast <4 x i32> %319 to <4 x float>, !dbg !57
  %321 = insertelement <4 x float> poison, float %307, i64 0, !dbg !71
  %322 = insertelement <4 x float> %321, float %308, i64 1, !dbg !71
  %323 = insertelement <4 x float> %322, float %309, i64 2, !dbg !71
  %324 = insertelement <4 x float> %323, float %310, i64 3, !dbg !71
  %325 = fmul <4 x float> %324, %315, !dbg !71
  %326 = fsub <4 x float> splat (float 1.000000e+00), %324, !dbg !72
  %327 = fmul <4 x float> %326, %320, !dbg !73
  %328 = fadd <4 x float> %325, %327, !dbg !74
  %329 = fadd <4 x float> %234, %328, !dbg !75
  %330 = select <4 x i1> %130, <4 x float> %329, <4 x float> zeroinitializer, !dbg !45
  %331 = bitcast float %267 to i32, !dbg !76
  %332 = bitcast float %268 to i32, !dbg !76
  %333 = bitcast float %269 to i32, !dbg !76
  %334 = bitcast float %270 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %331, i32 %332, i32 %333, i32 %334, ptr addrspace(1) %245, i1 %19) #5, !dbg !76
  %335 = getelementptr float, ptr addrspace(1) %2, i64 %244, !dbg !77
  %bc.1 = bitcast <4 x float> %328 to <4 x i32>, !dbg !78
  %336 = extractelement <4 x i32> %bc.1, i64 0, !dbg !78
  %bc47.1 = bitcast <4 x float> %328 to <4 x i32>, !dbg !78
  %337 = extractelement <4 x i32> %bc47.1, i64 1, !dbg !78
  %bc48.1 = bitcast <4 x float> %328 to <4 x i32>, !dbg !78
  %338 = extractelement <4 x i32> %bc48.1, i64 2, !dbg !78
  %bc49.1 = bitcast <4 x float> %328 to <4 x i32>, !dbg !78
  %339 = extractelement <4 x i32> %bc49.1, i64 3, !dbg !78
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %336, i32 %337, i32 %338, i32 %339, ptr addrspace(1) %335, i1 %19) #5, !dbg !78
  %340 = and i32 %20, 31, !dbg !12
  %341 = lshr i32 %20, 5, !dbg !12
  %342 = and i32 %341, 15, !dbg !31
  %shift = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !80
  %343 = fadd <4 x float> %330, %shift, !dbg !80
  %shift45 = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !80
  %344 = fadd <4 x float> %shift45, %343, !dbg !80
  %shift46 = shufflevector <4 x float> %330, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !80
  %345 = fadd <4 x float> %shift46, %344, !dbg !80
  %346 = extractelement <4 x float> %345, i64 0, !dbg !80
  %347 = bitcast float %346 to i32, !dbg !83
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 16, i32 31), !dbg !83
  %349 = bitcast i32 %348 to float, !dbg !83
  %350 = fadd float %346, %349, !dbg !80
  %351 = bitcast float %350 to i32, !dbg !83
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 8, i32 31), !dbg !83
  %353 = bitcast i32 %352 to float, !dbg !83
  %354 = fadd float %350, %353, !dbg !80
  %355 = bitcast float %354 to i32, !dbg !83
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 4, i32 31), !dbg !83
  %357 = bitcast i32 %356 to float, !dbg !83
  %358 = fadd float %354, %357, !dbg !80
  %359 = bitcast float %358 to i32, !dbg !83
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 2, i32 31), !dbg !83
  %361 = bitcast i32 %360 to float, !dbg !83
  %362 = fadd float %358, %361, !dbg !80
  %363 = bitcast float %362 to i32, !dbg !83
  %364 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %363, i32 1, i32 31), !dbg !83
  %365 = bitcast i32 %364 to float, !dbg !83
  %366 = fadd float %362, %365, !dbg !80
  %367 = icmp eq i32 %340, 0, !dbg !83
  %368 = zext nneg i32 %342 to i64, !dbg !83
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i64 %368, !dbg !83
  %370 = bitcast float %366 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 %367) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %371 = icmp slt i32 %20, 16, !dbg !83
  %372 = sext i32 %20 to i64, !dbg !83
  %373 = getelementptr float, ptr addrspace(3) @global_smem, i64 %372, !dbg !83
  %374 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %373, i1 %371) #5, !dbg !83
  %375 = bitcast i32 %374 to float, !dbg !83
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 8, i32 31), !dbg !83
  %377 = bitcast i32 %376 to float, !dbg !83
  %378 = fadd float %375, %377, !dbg !80
  %379 = bitcast float %378 to i32, !dbg !83
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 4, i32 31), !dbg !83
  %381 = bitcast i32 %380 to float, !dbg !83
  %382 = fadd float %378, %381, !dbg !80
  %383 = bitcast float %382 to i32, !dbg !83
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 2, i32 31), !dbg !83
  %385 = bitcast i32 %384 to float, !dbg !83
  %386 = fadd float %382, %385, !dbg !80
  %387 = bitcast float %386 to i32, !dbg !83
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 1, i32 31), !dbg !83
  %389 = bitcast i32 %388 to float, !dbg !83
  %390 = fadd float %386, %389, !dbg !80
  %391 = and i32 %20, 15, !dbg !83
  %392 = icmp eq i32 %391, 0, !dbg !83
  %393 = and i1 %371, %392, !dbg !83
  %394 = bitcast float %390 to <1 x i32>, !dbg !83
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %394, i1 %393) #5, !dbg !83
  tail call void @llvm.nvvm.barrier0(), !dbg !83
  %395 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !83
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float 4.096000e+03) #5, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !85
  %397 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !86
  %398 = bitcast float %396 to i32, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %398, ptr addrspace(1) %397, i1 %82) #5, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctyzoedebtzha5dntjtsbzowqg3j7oqt3q5zw7bfqfvspvdzzx6o.py", directory: "inductor_cache/ty")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_rsub_sigmoid_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_rsub_sigmoid_3, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_rsub_sigmoid_3", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_mul_rsub_sigmoid_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 28, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 39, scope: !7)
!16 = !DILocation(line: 29, column: 30, scope: !7)
!17 = !DILocation(line: 29, column: 35, scope: !7)
!18 = !DILocation(line: 30, column: 30, scope: !7)
!19 = !DILocation(line: 30, column: 35, scope: !7)
!20 = !DILocation(line: 31, column: 30, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 31, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 26, scope: !7)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 4, scope: !7)
!31 = !DILocation(line: 47, column: 39, scope: !7)
!32 = !DILocation(line: 48, column: 31, scope: !7)
!33 = !DILocation(line: 48, column: 36, scope: !7)
!34 = !DILocation(line: 49, column: 31, scope: !7)
!35 = !DILocation(line: 49, column: 36, scope: !7)
!36 = !DILocation(line: 50, column: 31, scope: !7)
!37 = !DILocation(line: 50, column: 36, scope: !7)
!38 = !DILocation(line: 51, column: 31, scope: !7)
!39 = !DILocation(line: 51, column: 36, scope: !7)
!40 = !DILocation(line: 52, column: 31, scope: !7)
!41 = !DILocation(line: 52, column: 36, scope: !7)
!42 = !DILocation(line: 63, column: 24, scope: !7)
!43 = !DILocation(line: 64, column: 31, scope: !7)
!44 = !DILocation(line: 65, column: 23, scope: !7)
!45 = !DILocation(line: 78, column: 48, scope: !7)
!46 = !DILocation(line: 58, column: 49, scope: !7)
!47 = !DILocation(line: 54, column: 36, scope: !7)
!48 = !DILocation(line: 35, column: 18, scope: !7)
!49 = !DILocation(line: 43, column: 19, scope: !7)
!50 = !DILocation(line: 44, column: 20, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 58, column: 39, scope: !7)
!53 = !DILocation(line: 58, column: 54, scope: !7)
!54 = !DILocation(line: 59, column: 36, scope: !7)
!55 = !DILocation(line: 59, column: 51, scope: !7)
!56 = !DILocation(line: 60, column: 36, scope: !7)
!57 = !DILocation(line: 60, column: 51, scope: !7)
!58 = !DILocation(line: 61, column: 24, scope: !7)
!59 = !DILocation(line: 62, column: 24, scope: !7)
!60 = !DILocation(line: 67, column: 24, scope: !7)
!61 = !DILocation(line: 68, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 47, column: 30, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!67 = !DILocation(line: 71, column: 27, scope: !7)
!68 = !DILocation(line: 47, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 47, column: 20, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 47, column: 16, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 72, column: 24, scope: !7)
!72 = !DILocation(line: 73, column: 24, scope: !7)
!73 = !DILocation(line: 74, column: 24, scope: !7)
!74 = !DILocation(line: 75, column: 24, scope: !7)
!75 = !DILocation(line: 77, column: 25, scope: !7)
!76 = !DILocation(line: 79, column: 54, scope: !7)
!77 = !DILocation(line: 80, column: 32, scope: !7)
!78 = !DILocation(line: 80, column: 54, scope: !7)
!79 = !DILocation(line: 58, column: 44, scope: !7)
!80 = !DILocation(line: 256, column: 15, scope: !81, inlinedAt: !82)
!81 = distinct !DILexicalBlockFile(scope: !65, file: !66, discriminator: 0)
!82 = !DILocation(line: 81, column: 27, scope: !7)
!83 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !82)
!84 = !DILocation(line: 83, column: 20, scope: !7)
!85 = !DILocation(line: 84, column: 4, scope: !7)
!86 = !DILocation(line: 85, column: 28, scope: !7)
!87 = !DILocation(line: 85, column: 40, scope: !7)
!88 = !DILocation(line: 85, column: 4, scope: !7)
