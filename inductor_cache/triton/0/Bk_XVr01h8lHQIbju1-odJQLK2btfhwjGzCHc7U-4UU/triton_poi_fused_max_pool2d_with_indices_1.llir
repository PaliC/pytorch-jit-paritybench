; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = sdiv i32 %10, 128, !dbg !14
  %13 = srem i32 %11, 128, !dbg !15
  %14 = shl nsw i32 %13, 1, !dbg !16
  %15 = icmp sgt i32 %13, 0, !dbg !17
  %16 = shl i32 %12, 9, !dbg !18
  %17 = add i32 %16, %14, !dbg !19
  %18 = add i32 %17, -257, !dbg !20
  %19 = sext i32 %18 to i64, !dbg !21
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !21
  %21 = icmp sgt i32 %13, -1, !dbg !22
  %22 = add i32 %17, -256, !dbg !23
  %23 = sext i32 %22 to i64, !dbg !24
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !24
  %25 = add i32 %17, -255, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %29 = insertelement <2 x i32> %28, i32 %12, i64 1, !dbg !15
  %30 = srem <2 x i32> %29, splat (i32 128), !dbg !15
  %31 = extractelement <2 x i32> %30, i64 1, !dbg !27
  %32 = icmp sgt i32 %31, 0, !dbg !28
  %33 = extractelement <2 x i32> %30, i64 0, !dbg !27
  %34 = shl nsw i32 %33, 1, !dbg !16
  %35 = icmp sgt <2 x i32> %30, <i32 0, i32 -1>, !dbg !17
  %36 = extractelement <2 x i1> %35, i64 0, !dbg !29
  %37 = and i1 %36, %32, !dbg !29
  %38 = and i1 %15, %32, !dbg !29
  %39 = add i32 %16, %34, !dbg !19
  %40 = add i32 %39, -257, !dbg !20
  %41 = sext i32 %40 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %37, i32 -8388608, i1 %37) #1, !dbg !30
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %38, i32 -8388608, i1 %38) #1, !dbg !30
  %45 = icmp sgt i32 %33, -1, !dbg !22
  %46 = and i1 %45, %32, !dbg !31
  %47 = and i1 %21, %32, !dbg !31
  %48 = add i32 %39, -256, !dbg !23
  %49 = sext i32 %48 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %46, i32 -8388608, i1 %46) #1, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %47, i32 -8388608, i1 %47) #1, !dbg !32
  %53 = add i32 %39, -255, !dbg !25
  %54 = sext i32 %53 to i64, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !26
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %46, i32 -8388608, i1 %46) #1, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %47, i32 -8388608, i1 %47) #1, !dbg !33
  %58 = extractelement <2 x i1> %35, i64 1, !dbg !34
  %59 = and i1 %36, %58, !dbg !34
  %60 = and i1 %15, %58, !dbg !34
  %61 = add i32 %39, -1, !dbg !35
  %62 = sext i32 %61 to i64, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !36
  %64 = sext i32 %17 to i64, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !36
  %66 = getelementptr i8, ptr addrspace(1) %65, i64 -4, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %59, i32 -8388608, i1 %59) #1, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %60, i32 -8388608, i1 %60) #1, !dbg !37
  %69 = or i32 %31, %33, !dbg !27
  %70 = icmp sgt i32 %69, -1, !dbg !27
  %71 = or i32 %31, %13, !dbg !27
  %72 = icmp sgt i32 %71, -1, !dbg !27
  %73 = sext i32 %39 to i64, !dbg !38
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %70, i32 -8388608, i1 %70) #1, !dbg !39
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %72, i32 -8388608, i1 %72) #1, !dbg !39
  %77 = or disjoint i32 %39, 1, !dbg !40
  %78 = or disjoint i32 %17, 1, !dbg !40
  %79 = sext i32 %77 to i64, !dbg !41
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !41
  %81 = sext i32 %78 to i64, !dbg !41
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !41
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %70, i32 -8388608, i1 %70) #1, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %82, i1 %72, i32 -8388608, i1 %72) #1, !dbg !42
  %85 = add i32 %39, 255, !dbg !43
  %86 = add i32 %17, 255, !dbg !43
  %87 = sext i32 %85 to i64, !dbg !44
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !44
  %89 = sext i32 %86 to i64, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !44
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %59, i32 -8388608, i1 %59) #1, !dbg !45
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %60, i32 -8388608, i1 %60) #1, !dbg !45
  %93 = add i32 %39, 256, !dbg !46
  %94 = add i32 %17, 256, !dbg !46
  %95 = sext i32 %93 to i64, !dbg !47
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !47
  %97 = sext i32 %94 to i64, !dbg !47
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !47
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %70, i32 -8388608, i1 %70) #1, !dbg !48
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %72, i32 -8388608, i1 %72) #1, !dbg !48
  %101 = add i32 %39, 257, !dbg !49
  %102 = add i32 %17, 257, !dbg !49
  %103 = sext i32 %101 to i64, !dbg !50
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !50
  %105 = sext i32 %102 to i64, !dbg !50
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !50
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %70, i32 -8388608, i1 %70) #1, !dbg !51
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %72, i32 -8388608, i1 %72) #1, !dbg !51
  %109 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !30
  %110 = insertelement <2 x i32> %109, i32 %44, i64 1, !dbg !30
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !30
  %112 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !32
  %113 = insertelement <2 x i32> %112, i32 %52, i64 1, !dbg !32
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !32
  %115 = fcmp ogt <2 x float> %114, %111, !dbg !52
  %116 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !56
  %117 = or <2 x i1> %115, %116, !dbg !57
  %.v = select <2 x i1> %117, <2 x i32> %113, <2 x i32> %110, !dbg !58
  %118 = bitcast <2 x i32> %.v to <2 x float>, !dbg !58
  %119 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !33
  %120 = insertelement <2 x i32> %119, i32 %57, i64 1, !dbg !33
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !33
  %122 = fcmp olt <2 x float> %118, %121, !dbg !59
  %123 = fcmp uno <2 x float> %121, zeroinitializer, !dbg !61
  %124 = or <2 x i1> %123, %122, !dbg !62
  %.v1 = select <2 x i1> %124, <2 x i32> %120, <2 x i32> %.v, !dbg !63
  %125 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !63
  %126 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !37
  %127 = insertelement <2 x i32> %126, i32 %68, i64 1, !dbg !37
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !37
  %129 = fcmp olt <2 x float> %125, %128, !dbg !64
  %130 = fcmp uno <2 x float> %128, zeroinitializer, !dbg !66
  %131 = or <2 x i1> %130, %129, !dbg !67
  %.v2 = select <2 x i1> %131, <2 x i32> %127, <2 x i32> %.v1, !dbg !68
  %132 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !68
  %133 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !39
  %134 = insertelement <2 x i32> %133, i32 %76, i64 1, !dbg !39
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !39
  %136 = fcmp olt <2 x float> %132, %135, !dbg !69
  %137 = fcmp uno <2 x float> %135, zeroinitializer, !dbg !71
  %138 = or <2 x i1> %137, %136, !dbg !72
  %.v3 = select <2 x i1> %138, <2 x i32> %134, <2 x i32> %.v2, !dbg !73
  %139 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !73
  %140 = insertelement <2 x i32> poison, i32 %83, i64 0, !dbg !42
  %141 = insertelement <2 x i32> %140, i32 %84, i64 1, !dbg !42
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !42
  %143 = fcmp olt <2 x float> %139, %142, !dbg !74
  %144 = fcmp uno <2 x float> %142, zeroinitializer, !dbg !76
  %145 = or <2 x i1> %144, %143, !dbg !77
  %.v4 = select <2 x i1> %145, <2 x i32> %141, <2 x i32> %.v3, !dbg !78
  %146 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !78
  %147 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !45
  %148 = insertelement <2 x i32> %147, i32 %92, i64 1, !dbg !45
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !45
  %150 = fcmp olt <2 x float> %146, %149, !dbg !79
  %151 = fcmp uno <2 x float> %149, zeroinitializer, !dbg !81
  %152 = or <2 x i1> %151, %150, !dbg !82
  %.v5 = select <2 x i1> %152, <2 x i32> %148, <2 x i32> %.v4, !dbg !83
  %153 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !83
  %154 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !48
  %155 = insertelement <2 x i32> %154, i32 %100, i64 1, !dbg !48
  %156 = bitcast <2 x i32> %155 to <2 x float>, !dbg !48
  %157 = fcmp olt <2 x float> %153, %156, !dbg !84
  %158 = fcmp uno <2 x float> %156, zeroinitializer, !dbg !86
  %159 = or <2 x i1> %158, %157, !dbg !87
  %.v6 = select <2 x i1> %159, <2 x i32> %155, <2 x i32> %.v5, !dbg !88
  %160 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !88
  %161 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !51
  %162 = insertelement <2 x i32> %161, i32 %108, i64 1, !dbg !51
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !51
  %164 = fcmp olt <2 x float> %160, %163, !dbg !89
  %165 = bitcast i32 %107 to float, !dbg !91
  %166 = fcmp uno float %165, 0.000000e+00, !dbg !91
  %167 = bitcast i32 %108 to float, !dbg !91
  %168 = fcmp uno float %167, 0.000000e+00, !dbg !91
  %169 = extractelement <2 x i1> %164, i64 0, !dbg !92
  %170 = or i1 %166, %169, !dbg !92
  %171 = extractelement <2 x i1> %164, i64 1, !dbg !92
  %172 = or i1 %168, %171, !dbg !92
  %173 = zext <2 x i1> %115 to <2 x i8>, !dbg !93
  %174 = select <2 x i1> %122, <2 x i8> splat (i8 2), <2 x i8> %173, !dbg !94
  %175 = select <2 x i1> %129, <2 x i8> splat (i8 3), <2 x i8> %174, !dbg !95
  %176 = select <2 x i1> %136, <2 x i8> splat (i8 4), <2 x i8> %175, !dbg !96
  %177 = select <2 x i1> %143, <2 x i8> splat (i8 5), <2 x i8> %176, !dbg !97
  %178 = select <2 x i1> %150, <2 x i8> splat (i8 6), <2 x i8> %177, !dbg !98
  %179 = select <2 x i1> %157, <2 x i8> splat (i8 7), <2 x i8> %178, !dbg !99
  %180 = select <2 x i1> %164, <2 x i8> splat (i8 8), <2 x i8> %179, !dbg !100
  %181 = sext i32 %10 to i64, !dbg !101
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !101
  %183 = extractelement <2 x i32> %.v6, i64 0, !dbg !102
  %184 = select i1 %170, i32 %107, i32 %183, !dbg !103
  %185 = extractelement <2 x i32> %.v6, i64 1, !dbg !102
  %186 = select i1 %172, i32 %108, i32 %185, !dbg !103
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %186, ptr addrspace(1) %182, i1 true) #1, !dbg !102
  %187 = getelementptr i8, ptr addrspace(1) %2, i64 %181, !dbg !104
  %188 = bitcast <2 x i8> %180 to i16, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %188, ptr addrspace(1) %187, i1 true) #1, !dbg !105
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cojz2lzdr752shii3jnv4i3dhdm4ni4ksgqdwy4ou5p6vc7vepo4.py", directory: "inductor_cache/oj")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 20, scope: !7)
!17 = !DILocation(line: 35, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 51, scope: !7)
!19 = !DILocation(line: 39, column: 40, scope: !7)
!20 = !DILocation(line: 39, column: 47, scope: !7)
!21 = !DILocation(line: 39, column: 31, scope: !7)
!22 = !DILocation(line: 41, column: 21, scope: !7)
!23 = !DILocation(line: 45, column: 47, scope: !7)
!24 = !DILocation(line: 45, column: 31, scope: !7)
!25 = !DILocation(line: 52, column: 47, scope: !7)
!26 = !DILocation(line: 52, column: 31, scope: !7)
!27 = !DILocation(line: 61, column: 20, scope: !7)
!28 = !DILocation(line: 30, column: 19, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 56, scope: !7)
!31 = !DILocation(line: 44, column: 19, scope: !7)
!32 = !DILocation(line: 45, column: 56, scope: !7)
!33 = !DILocation(line: 52, column: 56, scope: !7)
!34 = !DILocation(line: 58, column: 20, scope: !7)
!35 = !DILocation(line: 59, column: 45, scope: !7)
!36 = !DILocation(line: 59, column: 31, scope: !7)
!37 = !DILocation(line: 59, column: 54, scope: !7)
!38 = !DILocation(line: 62, column: 31, scope: !7)
!39 = !DILocation(line: 62, column: 47, scope: !7)
!40 = !DILocation(line: 65, column: 42, scope: !7)
!41 = !DILocation(line: 65, column: 31, scope: !7)
!42 = !DILocation(line: 65, column: 51, scope: !7)
!43 = !DILocation(line: 72, column: 44, scope: !7)
!44 = !DILocation(line: 72, column: 31, scope: !7)
!45 = !DILocation(line: 72, column: 53, scope: !7)
!46 = !DILocation(line: 75, column: 44, scope: !7)
!47 = !DILocation(line: 75, column: 31, scope: !7)
!48 = !DILocation(line: 75, column: 53, scope: !7)
!49 = !DILocation(line: 78, column: 44, scope: !7)
!50 = !DILocation(line: 78, column: 31, scope: !7)
!51 = !DILocation(line: 78, column: 53, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 46, column: 42, scope: !7)
!56 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !60)
!60 = !DILocation(line: 53, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !60)
!62 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !60)
!63 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !60)
!64 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !65)
!65 = !DILocation(line: 60, column: 42, scope: !7)
!66 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !65)
!67 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !65)
!68 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !65)
!69 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !70)
!70 = !DILocation(line: 63, column: 42, scope: !7)
!71 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !70)
!72 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !70)
!73 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !70)
!74 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !75)
!75 = !DILocation(line: 66, column: 42, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !80)
!80 = !DILocation(line: 73, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !85)
!85 = !DILocation(line: 76, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !90)
!90 = !DILocation(line: 79, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !53, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !53, inlinedAt: !90)
!93 = !DILocation(line: 83, column: 35, scope: !7)
!94 = !DILocation(line: 86, column: 35, scope: !7)
!95 = !DILocation(line: 89, column: 35, scope: !7)
!96 = !DILocation(line: 92, column: 35, scope: !7)
!97 = !DILocation(line: 95, column: 35, scope: !7)
!98 = !DILocation(line: 98, column: 35, scope: !7)
!99 = !DILocation(line: 101, column: 35, scope: !7)
!100 = !DILocation(line: 104, column: 35, scope: !7)
!101 = !DILocation(line: 105, column: 25, scope: !7)
!102 = !DILocation(line: 105, column: 37, scope: !7)
!103 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !90)
!104 = !DILocation(line: 106, column: 25, scope: !7)
!105 = !DILocation(line: 106, column: 37, scope: !7)
!106 = !DILocation(line: 106, column: 4, scope: !7)
