; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %14, 128, !dbg !12
  %17 = or disjoint i32 %14, 192, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 12, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %17, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %25 = shl i32 %24, 4, !dbg !15
  %26 = or disjoint i32 %25, %19, !dbg !16
  %27 = icmp slt i32 %26, 256, !dbg !17
  %28 = shl i32 %20, 8, !dbg !18
  %29 = shl i32 %21, 8, !dbg !18
  %30 = shl i32 %22, 8, !dbg !18
  %31 = shl i32 %23, 8, !dbg !18
  %32 = add i32 %26, %28, !dbg !19
  %33 = add i32 %26, %29, !dbg !19
  %34 = add i32 %26, %30, !dbg !19
  %35 = add i32 %26, %31, !dbg !19
  %36 = sext i32 %32 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = sext i32 %33 to i64, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !20
  %40 = sext i32 %34 to i64, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !20
  %42 = sext i32 %35 to i64, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !20
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %27) #4, !dbg !21
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %27) #4, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %27) #4, !dbg !21
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #4, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #4, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %27) #4, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %27) #4, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %27) #4, !dbg !23
  %56 = sext i32 %26 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %27) #4, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %27) #4, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %27) #4, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %27) #4, !dbg !31
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !32
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !32
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !32
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !32
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %77, 0, !dbg !33
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %78, 0, !dbg !33
  br i1 %.not.i, label %84, label %79, !dbg !33

79:                                               ; preds = %9
  br i1 %.not1.i, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

84:                                               ; preds = %9
  br i1 %.not1.i, label %87, label %85, !dbg !33

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !33
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i33 = icmp eq i32 %89, 0, !dbg !33
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i36 = icmp eq i32 %90, 0, !dbg !33
  br i1 %.not.i33, label %96, label %91, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %99, label %97, !dbg !33

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !33
  br label %__nv_sqrtf.exit37, !dbg !33

__nv_sqrtf.exit37:                                ; preds = %92, %94, %97, %99
  %.0.i35 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !33
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i38 = icmp eq i32 %101, 0, !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i41 = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i38, label %108, label %103, !dbg !33

103:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %106, label %104, !dbg !33

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

108:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %111, label %109, !dbg !33

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #4, !dbg !33
  br label %__nv_sqrtf.exit42, !dbg !33

__nv_sqrtf.exit42:                                ; preds = %104, %106, %109, %111
  %.0.i40 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !33
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i43 = icmp eq i32 %113, 0, !dbg !33
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i46 = icmp eq i32 %114, 0, !dbg !33
  br i1 %.not.i43, label %120, label %115, !dbg !33

115:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %118, label %116, !dbg !33

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

120:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %123, label %121, !dbg !33

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #4, !dbg !33
  br label %__nv_sqrtf.exit47, !dbg !33

__nv_sqrtf.exit47:                                ; preds = %116, %118, %121, %123
  %.0.i45 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %126 = bitcast i32 %125 to float, !dbg !23
  %127 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fsub float %126, %128, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %131 = bitcast i32 %130 to float, !dbg !23
  %132 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %133 = bitcast i32 %132 to float, !dbg !25
  %134 = fsub float %131, %133, !dbg !34
  %135 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %136 = bitcast i32 %135 to float, !dbg !23
  %137 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %138 = bitcast i32 %137 to float, !dbg !25
  %139 = fsub float %136, %138, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %141 = bitcast i32 %140 to float, !dbg !23
  %142 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %143 = bitcast i32 %142 to float, !dbg !25
  %144 = fsub float %141, %143, !dbg !34
  %145 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %146 = bitcast i32 %145 to float, !dbg !23
  %147 = fsub float %146, %128, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %149 = bitcast i32 %148 to float, !dbg !23
  %150 = fsub float %149, %133, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %152 = bitcast i32 %151 to float, !dbg !23
  %153 = fsub float %152, %138, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %155 = bitcast i32 %154 to float, !dbg !23
  %156 = fsub float %155, %143, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %158 = bitcast i32 %157 to float, !dbg !23
  %159 = fsub float %158, %128, !dbg !34
  %160 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %161 = bitcast i32 %160 to float, !dbg !23
  %162 = fsub float %161, %133, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %164 = bitcast i32 %163 to float, !dbg !23
  %165 = fsub float %164, %138, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %167 = bitcast i32 %166 to float, !dbg !23
  %168 = fsub float %167, %143, !dbg !34
  %169 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %170 = bitcast i32 %169 to float, !dbg !23
  %171 = fsub float %170, %128, !dbg !34
  %172 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %173 = bitcast i32 %172 to float, !dbg !23
  %174 = fsub float %173, %133, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %176 = bitcast i32 %175 to float, !dbg !23
  %177 = fsub float %176, %138, !dbg !34
  %178 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %179 = bitcast i32 %178 to float, !dbg !23
  %180 = fsub float %179, %143, !dbg !34
  %181 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %188 = bitcast i32 %187 to float, !dbg !31
  %189 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !29
  %190 = bitcast i32 %189 to float, !dbg !29
  %191 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !29
  %192 = bitcast i32 %191 to float, !dbg !29
  %193 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !29
  %194 = bitcast i32 %193 to float, !dbg !29
  %195 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !29
  %196 = bitcast i32 %195 to float, !dbg !29
  %197 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !21
  %198 = bitcast i32 %197 to float, !dbg !21
  %199 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !21
  %200 = bitcast i32 %199 to float, !dbg !21
  %201 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !21
  %202 = bitcast i32 %201 to float, !dbg !21
  %203 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !21
  %204 = bitcast i32 %203 to float, !dbg !21
  %205 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !21
  %206 = bitcast i32 %205 to float, !dbg !21
  %207 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !21
  %208 = bitcast i32 %207 to float, !dbg !21
  %209 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !21
  %210 = bitcast i32 %209 to float, !dbg !21
  %211 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !21
  %212 = bitcast i32 %211 to float, !dbg !21
  %213 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !21
  %214 = bitcast i32 %213 to float, !dbg !21
  %215 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !21
  %216 = bitcast i32 %215 to float, !dbg !21
  %217 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !21
  %218 = bitcast i32 %217 to float, !dbg !21
  %219 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !21
  %220 = bitcast i32 %219 to float, !dbg !21
  %221 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !21
  %222 = bitcast i32 %221 to float, !dbg !21
  %223 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !21
  %224 = bitcast i32 %223 to float, !dbg !21
  %225 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !21
  %226 = bitcast i32 %225 to float, !dbg !21
  %227 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !21
  %228 = bitcast i32 %227 to float, !dbg !21
  %229 = and i32 %18, 252, !dbg !12
  %230 = or disjoint i32 %11, %229, !dbg !13
  %.frozen = freeze i32 %230, !dbg !35
  %231 = sdiv i32 %.frozen, 256, !dbg !35
  %232 = mul i32 %231, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %232, !dbg !36
  %.lobit12 = lshr i32 %12, 6, !dbg !37
  %233 = and i32 %.lobit12, 3, !dbg !37
  %234 = or disjoint i32 %233, %25, !dbg !16
  %235 = or disjoint i32 %234, 12, !dbg !16
  %236 = icmp slt i32 %235, 256, !dbg !17
  %237 = or disjoint i32 %234, 8, !dbg !16
  %238 = icmp slt i32 %237, 256, !dbg !17
  %239 = or disjoint i32 %234, 4, !dbg !16
  %240 = icmp slt i32 %239, 256, !dbg !17
  %241 = icmp slt i32 %234, 256, !dbg !17
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !38
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !38
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !38
  %246 = fmul float %180, %242, !dbg !39
  %247 = fmul float %177, %243, !dbg !39
  %248 = fmul float %174, %244, !dbg !39
  %249 = fmul float %171, %245, !dbg !39
  %250 = fmul float %168, %242, !dbg !39
  %251 = fmul float %165, %243, !dbg !39
  %252 = fmul float %162, %244, !dbg !39
  %253 = fmul float %159, %245, !dbg !39
  %254 = fmul float %156, %242, !dbg !39
  %255 = fmul float %153, %243, !dbg !39
  %256 = fmul float %150, %244, !dbg !39
  %257 = fmul float %147, %245, !dbg !39
  %258 = fmul float %144, %242, !dbg !39
  %259 = fmul float %139, %243, !dbg !39
  %260 = fmul float %134, %244, !dbg !39
  %261 = fmul float %129, %245, !dbg !39
  %262 = fmul float %246, %196, !dbg !40
  %263 = fmul float %247, %194, !dbg !40
  %264 = fmul float %248, %192, !dbg !40
  %265 = fmul float %249, %190, !dbg !40
  %266 = fmul float %250, %196, !dbg !40
  %267 = fmul float %251, %194, !dbg !40
  %268 = fmul float %252, %192, !dbg !40
  %269 = fmul float %253, %190, !dbg !40
  %270 = fmul float %254, %196, !dbg !40
  %271 = fmul float %255, %194, !dbg !40
  %272 = fmul float %256, %192, !dbg !40
  %273 = fmul float %257, %190, !dbg !40
  %274 = fmul float %258, %196, !dbg !40
  %275 = fmul float %259, %194, !dbg !40
  %276 = fmul float %260, %192, !dbg !40
  %277 = fmul float %261, %190, !dbg !40
  %278 = fadd float %262, %188, !dbg !41
  %279 = fadd float %263, %186, !dbg !41
  %280 = fadd float %264, %184, !dbg !41
  %281 = fadd float %265, %182, !dbg !41
  %282 = fadd float %266, %188, !dbg !41
  %283 = fadd float %267, %186, !dbg !41
  %284 = fadd float %268, %184, !dbg !41
  %285 = fadd float %269, %182, !dbg !41
  %286 = fadd float %270, %188, !dbg !41
  %287 = fadd float %271, %186, !dbg !41
  %288 = fadd float %272, %184, !dbg !41
  %289 = fadd float %273, %182, !dbg !41
  %290 = fadd float %274, %188, !dbg !41
  %291 = fadd float %275, %186, !dbg !41
  %292 = fadd float %276, %184, !dbg !41
  %293 = fadd float %277, %182, !dbg !41
  %294 = fadd float %278, %228, !dbg !42
  %295 = fadd float %279, %226, !dbg !42
  %296 = fadd float %280, %224, !dbg !42
  %297 = fadd float %281, %222, !dbg !42
  %298 = fadd float %282, %220, !dbg !42
  %299 = fadd float %283, %218, !dbg !42
  %300 = fadd float %284, %216, !dbg !42
  %301 = fadd float %285, %214, !dbg !42
  %302 = fadd float %286, %212, !dbg !42
  %303 = fadd float %287, %210, !dbg !42
  %304 = fadd float %288, %208, !dbg !42
  %305 = fadd float %289, %206, !dbg !42
  %306 = fadd float %290, %204, !dbg !42
  %307 = fadd float %291, %202, !dbg !42
  %308 = fadd float %292, %200, !dbg !42
  %309 = fadd float %293, %198, !dbg !42
  %310 = shl i32 %234, 8, !dbg !43
  %311 = shl i32 %239, 8, !dbg !43
  %312 = shl i32 %237, 8, !dbg !43
  %313 = shl i32 %235, 8, !dbg !43
  %314 = shl i32 %231, 16, !dbg !44
  %315 = add i32 %314, %.decomposed, !dbg !45
  %316 = add i32 %315, %310, !dbg !46
  %317 = add i32 %315, %311, !dbg !46
  %318 = add i32 %315, %312, !dbg !46
  %319 = add i32 %315, %313, !dbg !46
  %320 = sext i32 %316 to i64, !dbg !47
  %321 = getelementptr float, ptr addrspace(1) %6, i64 %320, !dbg !47
  %322 = sext i32 %317 to i64, !dbg !47
  %323 = getelementptr float, ptr addrspace(1) %6, i64 %322, !dbg !47
  %324 = sext i32 %318 to i64, !dbg !47
  %325 = getelementptr float, ptr addrspace(1) %6, i64 %324, !dbg !47
  %326 = sext i32 %319 to i64, !dbg !47
  %327 = getelementptr float, ptr addrspace(1) %6, i64 %326, !dbg !47
  %328 = shl i32 %12, 10, !dbg !48
  %329 = and i32 %328, 3072, !dbg !48
  %330 = or disjoint i32 %329, %14, !dbg !48
  %331 = and i32 %18, 1020, !dbg !48
  %332 = lshr exact i32 %329, 4, !dbg !48
  %333 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %332, !dbg !48
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %330, !dbg !48
  %335 = bitcast float %294 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !48
  %336 = or disjoint i32 %330, 256, !dbg !48
  %337 = lshr i32 %336, 6, !dbg !48
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !48
  %339 = getelementptr float, ptr addrspace(3) %338, i32 %336, !dbg !48
  %340 = bitcast float %295 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %339, <1 x i32> %340, i1 true) #4, !dbg !48
  %341 = or disjoint i32 %330, 512, !dbg !48
  %342 = lshr i32 %341, 6, !dbg !48
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %342, !dbg !48
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !48
  %345 = bitcast float %296 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !48
  %346 = or disjoint i32 %330, 768, !dbg !48
  %347 = lshr i32 %346, 6, !dbg !48
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !48
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %346, !dbg !48
  %350 = bitcast float %297 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #4, !dbg !48
  %351 = or disjoint i32 %330, 64, !dbg !48
  %352 = getelementptr float, ptr addrspace(3) %333, i32 %351, !dbg !48
  %353 = bitcast float %298 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !48
  %354 = or disjoint i32 %330, 320, !dbg !48
  %355 = lshr i32 %354, 6, !dbg !48
  %356 = and i32 %355, 52, !dbg !48
  %357 = getelementptr float, ptr addrspace(3) @global_smem, i32 %356, !dbg !48
  %358 = getelementptr float, ptr addrspace(3) %357, i32 %354, !dbg !48
  %359 = bitcast float %299 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !48
  %360 = or disjoint i32 %330, 576, !dbg !48
  %361 = lshr i32 %360, 6, !dbg !48
  %362 = and i32 %361, 56, !dbg !48
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %362, !dbg !48
  %364 = getelementptr float, ptr addrspace(3) %363, i32 %360, !dbg !48
  %365 = bitcast float %300 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #4, !dbg !48
  %366 = or disjoint i32 %330, 832, !dbg !48
  %367 = lshr i32 %366, 6, !dbg !48
  %368 = and i32 %367, 60, !dbg !48
  %369 = getelementptr float, ptr addrspace(3) @global_smem, i32 %368, !dbg !48
  %370 = getelementptr float, ptr addrspace(3) %369, i32 %366, !dbg !48
  %371 = bitcast float %301 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %370, <1 x i32> %371, i1 true) #4, !dbg !48
  %372 = or disjoint i32 %330, 128, !dbg !48
  %373 = getelementptr float, ptr addrspace(3) %333, i32 %372, !dbg !48
  %374 = bitcast float %302 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #4, !dbg !48
  %375 = or disjoint i32 %330, 384, !dbg !48
  %376 = lshr i32 %375, 6, !dbg !48
  %377 = and i32 %376, 52, !dbg !48
  %378 = getelementptr float, ptr addrspace(3) @global_smem, i32 %377, !dbg !48
  %379 = getelementptr float, ptr addrspace(3) %378, i32 %375, !dbg !48
  %380 = bitcast float %303 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #4, !dbg !48
  %381 = or disjoint i32 %330, 640, !dbg !48
  %382 = lshr i32 %381, 6, !dbg !48
  %383 = and i32 %382, 56, !dbg !48
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !48
  %385 = getelementptr float, ptr addrspace(3) %384, i32 %381, !dbg !48
  %386 = bitcast float %304 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #4, !dbg !48
  %387 = or disjoint i32 %330, 896, !dbg !48
  %388 = lshr i32 %387, 6, !dbg !48
  %389 = and i32 %388, 60, !dbg !48
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i32 %389, !dbg !48
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %387, !dbg !48
  %392 = bitcast float %305 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %392, i1 true) #4, !dbg !48
  %393 = or disjoint i32 %330, 192, !dbg !48
  %394 = getelementptr float, ptr addrspace(3) %333, i32 %393, !dbg !48
  %395 = bitcast float %306 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %395, i1 true) #4, !dbg !48
  %396 = or disjoint i32 %330, 448, !dbg !48
  %397 = lshr i32 %396, 6, !dbg !48
  %398 = and i32 %397, 52, !dbg !48
  %399 = getelementptr float, ptr addrspace(3) @global_smem, i32 %398, !dbg !48
  %400 = getelementptr float, ptr addrspace(3) %399, i32 %396, !dbg !48
  %401 = bitcast float %307 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #4, !dbg !48
  %402 = or disjoint i32 %330, 704, !dbg !48
  %403 = lshr i32 %402, 6, !dbg !48
  %404 = and i32 %403, 56, !dbg !48
  %405 = getelementptr float, ptr addrspace(3) @global_smem, i32 %404, !dbg !48
  %406 = getelementptr float, ptr addrspace(3) %405, i32 %402, !dbg !48
  %407 = bitcast float %308 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !48
  %408 = or disjoint i32 %330, 960, !dbg !48
  %409 = lshr i32 %408, 6, !dbg !48
  %410 = and i32 %409, 60, !dbg !48
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !48
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %408, !dbg !48
  %413 = bitcast float %309 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %414 = lshr i32 %18, 6, !dbg !48
  %415 = and i32 %414, 12, !dbg !48
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !48
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %331, !dbg !48
  %418 = or disjoint i32 %331, 1024, !dbg !48
  %419 = lshr i32 %418, 6, !dbg !48
  %420 = and i32 %419, 28, !dbg !48
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !48
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %418, !dbg !48
  %423 = load <4 x i32>, ptr addrspace(3) %422, align 16, !dbg !48
  %424 = or disjoint i32 %331, 2048, !dbg !48
  %425 = lshr i32 %424, 6, !dbg !48
  %426 = and i32 %425, 44, !dbg !48
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !48
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %424, !dbg !48
  %429 = load <4 x i32>, ptr addrspace(3) %428, align 16, !dbg !48
  %430 = or disjoint i32 %331, 3072, !dbg !48
  %431 = lshr i32 %430, 6, !dbg !48
  %432 = and i32 %431, 60, !dbg !48
  %433 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %432, !dbg !48
  %434 = getelementptr inbounds float, ptr addrspace(3) %433, i32 %430, !dbg !48
  %435 = load <4 x i32>, ptr addrspace(3) %434, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %417, align 16, !dbg !48
  %436 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 4, !dbg !48
  %.extract18 = load i32, ptr addrspace(3) %436, align 4, !dbg !48
  %437 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 8, !dbg !48
  %.extract19 = load i32, ptr addrspace(3) %437, align 8, !dbg !48
  %438 = getelementptr inbounds i8, ptr addrspace(3) %417, i32 12, !dbg !48
  %.extract20 = load i32, ptr addrspace(3) %438, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %321, i1 %241) #4, !dbg !48
  %.extract21 = extractelement <4 x i32> %423, i64 0, !dbg !48
  %.extract22 = extractelement <4 x i32> %423, i64 1, !dbg !48
  %.extract23 = extractelement <4 x i32> %423, i64 2, !dbg !48
  %.extract24 = extractelement <4 x i32> %423, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %323, i1 %240) #4, !dbg !48
  %.extract25 = extractelement <4 x i32> %429, i64 0, !dbg !48
  %.extract26 = extractelement <4 x i32> %429, i64 1, !dbg !48
  %.extract27 = extractelement <4 x i32> %429, i64 2, !dbg !48
  %.extract28 = extractelement <4 x i32> %429, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %325, i1 %238) #4, !dbg !48
  %.extract29 = extractelement <4 x i32> %435, i64 0, !dbg !48
  %.extract30 = extractelement <4 x i32> %435, i64 1, !dbg !48
  %.extract31 = extractelement <4 x i32> %435, i64 2, !dbg !48
  %.extract32 = extractelement <4 x i32> %435, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %327, i1 %236) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4frxsey4iwjr5trqs6hk72r677jec4bfclxen7aaofznvaj5xvl.py", directory: "inductor_cache/4f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 26, column: 44, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 34, scope: !7)
!44 = !DILocation(line: 50, column: 45, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 39, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 57, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
