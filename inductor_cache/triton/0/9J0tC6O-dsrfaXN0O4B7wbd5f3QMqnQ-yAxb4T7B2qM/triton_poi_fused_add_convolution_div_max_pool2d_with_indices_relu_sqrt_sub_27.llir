; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 252, !dbg !12
  %13 = lshr i32 %9, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %14, 128, !dbg !12
  %17 = or disjoint i32 %14, 192, !dbg !12
  %18 = and i32 %9, 255, !dbg !12
  %19 = or disjoint i32 %8, %12, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %15, !dbg !13
  %22 = or disjoint i32 %8, %16, !dbg !13
  %23 = or disjoint i32 %8, %17, !dbg !13
  %24 = or disjoint i32 %8, %18, !dbg !13
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %26 = shl i32 %25, 4, !dbg !15
  %27 = lshr i32 %9, 6, !dbg !16
  %28 = and i32 %27, 3, !dbg !16
  %29 = or disjoint i32 %26, %28, !dbg !17
  %30 = or disjoint i32 %29, 4, !dbg !17
  %31 = or disjoint i32 %29, 8, !dbg !17
  %32 = or disjoint i32 %29, 12, !dbg !17
  %33 = or disjoint i32 %26, %11, !dbg !17
  %34 = icmp slt i32 %29, 16, !dbg !18
  %35 = icmp slt i32 %30, 16, !dbg !18
  %36 = icmp slt i32 %31, 16, !dbg !18
  %37 = icmp slt i32 %32, 16, !dbg !18
  %38 = icmp slt i32 %33, 16, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %39 = sdiv i32 %.frozen, 512, !dbg !19
  %40 = mul i32 %39, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = srem i32 %24, 512, !dbg !20
  %42 = sdiv i32 %20, 512, !dbg !19
  %43 = sdiv i32 %21, 512, !dbg !19
  %44 = sdiv i32 %22, 512, !dbg !19
  %45 = sdiv i32 %23, 512, !dbg !19
  %46 = shl i32 %29, 9, !dbg !21
  %47 = shl i32 %30, 9, !dbg !21
  %48 = shl i32 %31, 9, !dbg !21
  %49 = shl i32 %32, 9, !dbg !21
  %50 = shl i32 %39, 13, !dbg !22
  %51 = add i32 %50, %.decomposed, !dbg !23
  %52 = add i32 %51, %46, !dbg !24
  %53 = add i32 %51, %47, !dbg !24
  %54 = add i32 %51, %48, !dbg !24
  %55 = add i32 %51, %49, !dbg !24
  %56 = sext i32 %52 to i64, !dbg !25
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !25
  %58 = sext i32 %53 to i64, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !25
  %60 = sext i32 %54 to i64, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !25
  %62 = sext i32 %55 to i64, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !25
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %34) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %35) #4, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %36) #4, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %37) #4, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = shl i32 %9, 6, !dbg !26
  %85 = and i32 %84, 4032, !dbg !26
  %86 = or disjoint i32 %85, %28, !dbg !26
  %87 = and i32 %10, 1020, !dbg !26
  %88 = lshr exact i32 %85, 2, !dbg !26
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %88, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %86, !dbg !26
  %91 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !26
  %92 = or disjoint i32 %86, 16, !dbg !26
  %93 = lshr i32 %92, 4, !dbg !26
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !26
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !26
  %96 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #4, !dbg !26
  %97 = or disjoint i32 %86, 32, !dbg !26
  %98 = lshr i32 %97, 4, !dbg !26
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !26
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !26
  %101 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #4, !dbg !26
  %102 = or disjoint i32 %86, 48, !dbg !26
  %103 = lshr i32 %102, 4, !dbg !26
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !26
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !26
  %106 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #4, !dbg !26
  %107 = or disjoint i32 %86, 4, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) %89, i32 %107, !dbg !26
  %109 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #4, !dbg !26
  %110 = or disjoint i32 %86, 20, !dbg !26
  %111 = lshr i32 %110, 4, !dbg !26
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !26
  %114 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #4, !dbg !26
  %115 = or disjoint i32 %86, 36, !dbg !26
  %116 = lshr i32 %115, 4, !dbg !26
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !26
  %119 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #4, !dbg !26
  %120 = or disjoint i32 %86, 52, !dbg !26
  %121 = lshr i32 %120, 4, !dbg !26
  %122 = getelementptr float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %124, i1 true) #4, !dbg !26
  %125 = or disjoint i32 %86, 8, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) %89, i32 %125, !dbg !26
  %127 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #4, !dbg !26
  %128 = or disjoint i32 %86, 24, !dbg !26
  %129 = lshr i32 %128, 4, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !26
  %132 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #4, !dbg !26
  %133 = or disjoint i32 %86, 40, !dbg !26
  %134 = lshr i32 %133, 4, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !26
  %137 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #4, !dbg !26
  %138 = or disjoint i32 %86, 56, !dbg !26
  %139 = lshr i32 %138, 4, !dbg !26
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #4, !dbg !26
  %143 = or disjoint i32 %86, 12, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) %89, i32 %143, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #4, !dbg !26
  %146 = or disjoint i32 %86, 28, !dbg !26
  %147 = lshr i32 %146, 4, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !26
  %150 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #4, !dbg !26
  %151 = or disjoint i32 %86, 44, !dbg !26
  %152 = lshr i32 %151, 4, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !26
  %155 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #4, !dbg !26
  %156 = or disjoint i32 %86, 60, !dbg !26
  %157 = lshr i32 %156, 4, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %161 = lshr i32 %87, 4, !dbg !26
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %87, !dbg !26
  %164 = load <4 x float>, ptr addrspace(3) %163, align 4, !dbg !26
  %165 = or disjoint i32 %87, 1024, !dbg !26
  %166 = lshr i32 %165, 4, !dbg !26
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !26
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %165, !dbg !26
  %169 = load float, ptr addrspace(3) %168, align 4, !dbg !26
  %170 = or disjoint i32 %87, 1025, !dbg !26
  %171 = lshr i32 %170, 4, !dbg !26
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %171, !dbg !26
  %173 = getelementptr inbounds float, ptr addrspace(3) %172, i32 %170, !dbg !26
  %174 = load float, ptr addrspace(3) %173, align 4, !dbg !26
  %175 = or disjoint i32 %87, 1026, !dbg !26
  %176 = lshr i32 %175, 4, !dbg !26
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !26
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %175, !dbg !26
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !26
  %180 = or disjoint i32 %87, 1027, !dbg !26
  %181 = lshr i32 %180, 4, !dbg !26
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !26
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !26
  %184 = load float, ptr addrspace(3) %183, align 4, !dbg !26
  %185 = or disjoint i32 %87, 2048, !dbg !26
  %186 = lshr i32 %185, 4, !dbg !26
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !26
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !26
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !26
  %190 = or disjoint i32 %87, 2049, !dbg !26
  %191 = lshr i32 %190, 4, !dbg !26
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !26
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !26
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !26
  %195 = or disjoint i32 %87, 2050, !dbg !26
  %196 = lshr i32 %195, 4, !dbg !26
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !26
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !26
  %200 = or disjoint i32 %87, 2051, !dbg !26
  %201 = lshr i32 %200, 4, !dbg !26
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !26
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !26
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !26
  %205 = or disjoint i32 %87, 3072, !dbg !26
  %206 = lshr i32 %205, 4, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !26
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !26
  %210 = or disjoint i32 %87, 3073, !dbg !26
  %211 = lshr i32 %210, 4, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !26
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !26
  %215 = or disjoint i32 %87, 3074, !dbg !26
  %216 = lshr i32 %215, 4, !dbg !26
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !26
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !26
  %220 = or disjoint i32 %87, 3075, !dbg !26
  %221 = lshr i32 %220, 4, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !26
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !26
  %225 = sext i32 %41 to i64, !dbg !27
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !27
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #4, !dbg !28
  %228 = shl nsw i32 %42, 4, !dbg !29
  %229 = shl nsw i32 %43, 4, !dbg !29
  %230 = shl nsw i32 %44, 4, !dbg !29
  %231 = shl nsw i32 %45, 4, !dbg !29
  %232 = add i32 %228, %33, !dbg !30
  %233 = add i32 %229, %33, !dbg !30
  %234 = add i32 %230, %33, !dbg !30
  %235 = add i32 %231, %33, !dbg !30
  %236 = sext i32 %232 to i64, !dbg !31
  %237 = getelementptr float, ptr addrspace(1) %2, i64 %236, !dbg !31
  %238 = sext i32 %233 to i64, !dbg !31
  %239 = getelementptr float, ptr addrspace(1) %2, i64 %238, !dbg !31
  %240 = sext i32 %234 to i64, !dbg !31
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !31
  %242 = sext i32 %235 to i64, !dbg !31
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %242, !dbg !31
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %237, i1 %38) #4, !dbg !32
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !32
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !32
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !32
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !32
  %249 = bitcast i32 %245 to float, !dbg !32
  %250 = bitcast i32 %246 to float, !dbg !32
  %251 = bitcast i32 %247 to float, !dbg !32
  %252 = bitcast i32 %248 to float, !dbg !32
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %239, i1 %38) #4, !dbg !32
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !32
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !32
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !32
  %258 = bitcast i32 %254 to float, !dbg !32
  %259 = bitcast i32 %255 to float, !dbg !32
  %260 = bitcast i32 %256 to float, !dbg !32
  %261 = bitcast i32 %257 to float, !dbg !32
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %241, i1 %38) #4, !dbg !32
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !32
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !32
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !32
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !32
  %267 = bitcast i32 %263 to float, !dbg !32
  %268 = bitcast i32 %264 to float, !dbg !32
  %269 = bitcast i32 %265 to float, !dbg !32
  %270 = bitcast i32 %266 to float, !dbg !32
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %243, i1 %38) #4, !dbg !32
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !32
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !32
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !32
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !32
  %276 = bitcast i32 %272 to float, !dbg !32
  %277 = bitcast i32 %273 to float, !dbg !32
  %278 = bitcast i32 %274 to float, !dbg !32
  %279 = bitcast i32 %275 to float, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx = shl nuw nsw i32 %18, 3, !dbg !33
  %280 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !33
  %281 = insertelement <1 x i32> poison, i32 %227, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %.idx4 = shl nuw nsw i32 %14, 3, !dbg !33
  %282 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !33
  %283 = load float, ptr addrspace(3) %282, align 8, !dbg !33
  %.idx5 = shl nuw nsw i32 %15, 3, !dbg !33
  %284 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !33
  %285 = load float, ptr addrspace(3) %284, align 8, !dbg !33
  %.idx6 = shl nuw nsw i32 %16, 3, !dbg !33
  %286 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !33
  %287 = load float, ptr addrspace(3) %286, align 8, !dbg !33
  %.idx7 = shl nuw nsw i32 %17, 3, !dbg !33
  %288 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !33
  %289 = load float, ptr addrspace(3) %288, align 8, !dbg !33
  %290 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %290, 0, !dbg !37
  %291 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %291, 0, !dbg !37
  br i1 %.not.i, label %297, label %292, !dbg !37

292:                                              ; preds = %6
  br i1 %.not1.i, label %295, label %293, !dbg !37

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %249) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %249) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

297:                                              ; preds = %6
  br i1 %.not1.i, label %300, label %298, !dbg !37

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.f(float %249) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.f(float %249) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %293, %295, %298, %300
  %.0.i = phi float [ %294, %293 ], [ %296, %295 ], [ %299, %298 ], [ %301, %300 ], !dbg !37
  %302 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i8 = icmp eq i32 %302, 0, !dbg !37
  %303 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i11 = icmp eq i32 %303, 0, !dbg !37
  br i1 %.not.i8, label %309, label %304, !dbg !37

304:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %307, label %305, !dbg !37

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %250) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %250) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

309:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %312, label %310, !dbg !37

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.f(float %250) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.f(float %250) #4, !dbg !37
  br label %__nv_sqrtf.exit12, !dbg !37

__nv_sqrtf.exit12:                                ; preds = %305, %307, %310, %312
  %.0.i10 = phi float [ %306, %305 ], [ %308, %307 ], [ %311, %310 ], [ %313, %312 ], !dbg !37
  %314 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i13 = icmp eq i32 %314, 0, !dbg !37
  %315 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i16 = icmp eq i32 %315, 0, !dbg !37
  br i1 %.not.i13, label %321, label %316, !dbg !37

316:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %319, label %317, !dbg !37

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %251) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %251) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

321:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %324, label %322, !dbg !37

322:                                              ; preds = %321
  %323 = tail call float @llvm.nvvm.sqrt.rn.f(float %251) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

324:                                              ; preds = %321
  %325 = tail call float @llvm.nvvm.sqrt.approx.f(float %251) #4, !dbg !37
  br label %__nv_sqrtf.exit17, !dbg !37

__nv_sqrtf.exit17:                                ; preds = %317, %319, %322, %324
  %.0.i15 = phi float [ %318, %317 ], [ %320, %319 ], [ %323, %322 ], [ %325, %324 ], !dbg !37
  %326 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i18 = icmp eq i32 %326, 0, !dbg !37
  %327 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i21 = icmp eq i32 %327, 0, !dbg !37
  br i1 %.not.i18, label %333, label %328, !dbg !37

328:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %331, label %329, !dbg !37

329:                                              ; preds = %328
  %330 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %252) #4, !dbg !37
  br label %__nv_sqrtf.exit22, !dbg !37

331:                                              ; preds = %328
  %332 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %252) #4, !dbg !37
  br label %__nv_sqrtf.exit22, !dbg !37

333:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %336, label %334, !dbg !37

334:                                              ; preds = %333
  %335 = tail call float @llvm.nvvm.sqrt.rn.f(float %252) #4, !dbg !37
  br label %__nv_sqrtf.exit22, !dbg !37

336:                                              ; preds = %333
  %337 = tail call float @llvm.nvvm.sqrt.approx.f(float %252) #4, !dbg !37
  br label %__nv_sqrtf.exit22, !dbg !37

__nv_sqrtf.exit22:                                ; preds = %329, %331, %334, %336
  %.0.i20 = phi float [ %330, %329 ], [ %332, %331 ], [ %335, %334 ], [ %337, %336 ], !dbg !37
  %338 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i23 = icmp eq i32 %338, 0, !dbg !37
  %339 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i26 = icmp eq i32 %339, 0, !dbg !37
  br i1 %.not.i23, label %345, label %340, !dbg !37

340:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %343, label %341, !dbg !37

341:                                              ; preds = %340
  %342 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %258) #4, !dbg !37
  br label %__nv_sqrtf.exit27, !dbg !37

343:                                              ; preds = %340
  %344 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %258) #4, !dbg !37
  br label %__nv_sqrtf.exit27, !dbg !37

345:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %348, label %346, !dbg !37

346:                                              ; preds = %345
  %347 = tail call float @llvm.nvvm.sqrt.rn.f(float %258) #4, !dbg !37
  br label %__nv_sqrtf.exit27, !dbg !37

348:                                              ; preds = %345
  %349 = tail call float @llvm.nvvm.sqrt.approx.f(float %258) #4, !dbg !37
  br label %__nv_sqrtf.exit27, !dbg !37

__nv_sqrtf.exit27:                                ; preds = %341, %343, %346, %348
  %.0.i25 = phi float [ %342, %341 ], [ %344, %343 ], [ %347, %346 ], [ %349, %348 ], !dbg !37
  %350 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i28 = icmp eq i32 %350, 0, !dbg !37
  %351 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i31 = icmp eq i32 %351, 0, !dbg !37
  br i1 %.not.i28, label %357, label %352, !dbg !37

352:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %355, label %353, !dbg !37

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %259) #4, !dbg !37
  br label %__nv_sqrtf.exit32, !dbg !37

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %259) #4, !dbg !37
  br label %__nv_sqrtf.exit32, !dbg !37

357:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %360, label %358, !dbg !37

358:                                              ; preds = %357
  %359 = tail call float @llvm.nvvm.sqrt.rn.f(float %259) #4, !dbg !37
  br label %__nv_sqrtf.exit32, !dbg !37

360:                                              ; preds = %357
  %361 = tail call float @llvm.nvvm.sqrt.approx.f(float %259) #4, !dbg !37
  br label %__nv_sqrtf.exit32, !dbg !37

__nv_sqrtf.exit32:                                ; preds = %353, %355, %358, %360
  %.0.i30 = phi float [ %354, %353 ], [ %356, %355 ], [ %359, %358 ], [ %361, %360 ], !dbg !37
  %362 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i33 = icmp eq i32 %362, 0, !dbg !37
  %363 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i36 = icmp eq i32 %363, 0, !dbg !37
  br i1 %.not.i33, label %369, label %364, !dbg !37

364:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %367, label %365, !dbg !37

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %260) #4, !dbg !37
  br label %__nv_sqrtf.exit37, !dbg !37

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %260) #4, !dbg !37
  br label %__nv_sqrtf.exit37, !dbg !37

369:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %372, label %370, !dbg !37

370:                                              ; preds = %369
  %371 = tail call float @llvm.nvvm.sqrt.rn.f(float %260) #4, !dbg !37
  br label %__nv_sqrtf.exit37, !dbg !37

372:                                              ; preds = %369
  %373 = tail call float @llvm.nvvm.sqrt.approx.f(float %260) #4, !dbg !37
  br label %__nv_sqrtf.exit37, !dbg !37

__nv_sqrtf.exit37:                                ; preds = %365, %367, %370, %372
  %.0.i35 = phi float [ %366, %365 ], [ %368, %367 ], [ %371, %370 ], [ %373, %372 ], !dbg !37
  %374 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i38 = icmp eq i32 %374, 0, !dbg !37
  %375 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i41 = icmp eq i32 %375, 0, !dbg !37
  br i1 %.not.i38, label %381, label %376, !dbg !37

376:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %379, label %377, !dbg !37

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %261) #4, !dbg !37
  br label %__nv_sqrtf.exit42, !dbg !37

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %261) #4, !dbg !37
  br label %__nv_sqrtf.exit42, !dbg !37

381:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %384, label %382, !dbg !37

382:                                              ; preds = %381
  %383 = tail call float @llvm.nvvm.sqrt.rn.f(float %261) #4, !dbg !37
  br label %__nv_sqrtf.exit42, !dbg !37

384:                                              ; preds = %381
  %385 = tail call float @llvm.nvvm.sqrt.approx.f(float %261) #4, !dbg !37
  br label %__nv_sqrtf.exit42, !dbg !37

__nv_sqrtf.exit42:                                ; preds = %377, %379, %382, %384
  %.0.i40 = phi float [ %378, %377 ], [ %380, %379 ], [ %383, %382 ], [ %385, %384 ], !dbg !37
  %386 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i43 = icmp eq i32 %386, 0, !dbg !37
  %387 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i46 = icmp eq i32 %387, 0, !dbg !37
  br i1 %.not.i43, label %393, label %388, !dbg !37

388:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %391, label %389, !dbg !37

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %267) #4, !dbg !37
  br label %__nv_sqrtf.exit47, !dbg !37

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %267) #4, !dbg !37
  br label %__nv_sqrtf.exit47, !dbg !37

393:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %396, label %394, !dbg !37

394:                                              ; preds = %393
  %395 = tail call float @llvm.nvvm.sqrt.rn.f(float %267) #4, !dbg !37
  br label %__nv_sqrtf.exit47, !dbg !37

396:                                              ; preds = %393
  %397 = tail call float @llvm.nvvm.sqrt.approx.f(float %267) #4, !dbg !37
  br label %__nv_sqrtf.exit47, !dbg !37

__nv_sqrtf.exit47:                                ; preds = %389, %391, %394, %396
  %.0.i45 = phi float [ %390, %389 ], [ %392, %391 ], [ %395, %394 ], [ %397, %396 ], !dbg !37
  %398 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i48 = icmp eq i32 %398, 0, !dbg !37
  %399 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i51 = icmp eq i32 %399, 0, !dbg !37
  br i1 %.not.i48, label %405, label %400, !dbg !37

400:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %403, label %401, !dbg !37

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %268) #4, !dbg !37
  br label %__nv_sqrtf.exit52, !dbg !37

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %268) #4, !dbg !37
  br label %__nv_sqrtf.exit52, !dbg !37

405:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %408, label %406, !dbg !37

406:                                              ; preds = %405
  %407 = tail call float @llvm.nvvm.sqrt.rn.f(float %268) #4, !dbg !37
  br label %__nv_sqrtf.exit52, !dbg !37

408:                                              ; preds = %405
  %409 = tail call float @llvm.nvvm.sqrt.approx.f(float %268) #4, !dbg !37
  br label %__nv_sqrtf.exit52, !dbg !37

__nv_sqrtf.exit52:                                ; preds = %401, %403, %406, %408
  %.0.i50 = phi float [ %402, %401 ], [ %404, %403 ], [ %407, %406 ], [ %409, %408 ], !dbg !37
  %410 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i53 = icmp eq i32 %410, 0, !dbg !37
  %411 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i56 = icmp eq i32 %411, 0, !dbg !37
  br i1 %.not.i53, label %417, label %412, !dbg !37

412:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %415, label %413, !dbg !37

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %269) #4, !dbg !37
  br label %__nv_sqrtf.exit57, !dbg !37

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %269) #4, !dbg !37
  br label %__nv_sqrtf.exit57, !dbg !37

417:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %420, label %418, !dbg !37

418:                                              ; preds = %417
  %419 = tail call float @llvm.nvvm.sqrt.rn.f(float %269) #4, !dbg !37
  br label %__nv_sqrtf.exit57, !dbg !37

420:                                              ; preds = %417
  %421 = tail call float @llvm.nvvm.sqrt.approx.f(float %269) #4, !dbg !37
  br label %__nv_sqrtf.exit57, !dbg !37

__nv_sqrtf.exit57:                                ; preds = %413, %415, %418, %420
  %.0.i55 = phi float [ %414, %413 ], [ %416, %415 ], [ %419, %418 ], [ %421, %420 ], !dbg !37
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i58 = icmp eq i32 %422, 0, !dbg !37
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i61 = icmp eq i32 %423, 0, !dbg !37
  br i1 %.not.i58, label %429, label %424, !dbg !37

424:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %427, label %425, !dbg !37

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %270) #4, !dbg !37
  br label %__nv_sqrtf.exit62, !dbg !37

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %270) #4, !dbg !37
  br label %__nv_sqrtf.exit62, !dbg !37

429:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %432, label %430, !dbg !37

430:                                              ; preds = %429
  %431 = tail call float @llvm.nvvm.sqrt.rn.f(float %270) #4, !dbg !37
  br label %__nv_sqrtf.exit62, !dbg !37

432:                                              ; preds = %429
  %433 = tail call float @llvm.nvvm.sqrt.approx.f(float %270) #4, !dbg !37
  br label %__nv_sqrtf.exit62, !dbg !37

__nv_sqrtf.exit62:                                ; preds = %425, %427, %430, %432
  %.0.i60 = phi float [ %426, %425 ], [ %428, %427 ], [ %431, %430 ], [ %433, %432 ], !dbg !37
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i63 = icmp eq i32 %434, 0, !dbg !37
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i66 = icmp eq i32 %435, 0, !dbg !37
  br i1 %.not.i63, label %441, label %436, !dbg !37

436:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %439, label %437, !dbg !37

437:                                              ; preds = %436
  %438 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %276) #4, !dbg !37
  br label %__nv_sqrtf.exit67, !dbg !37

439:                                              ; preds = %436
  %440 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %276) #4, !dbg !37
  br label %__nv_sqrtf.exit67, !dbg !37

441:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %444, label %442, !dbg !37

442:                                              ; preds = %441
  %443 = tail call float @llvm.nvvm.sqrt.rn.f(float %276) #4, !dbg !37
  br label %__nv_sqrtf.exit67, !dbg !37

444:                                              ; preds = %441
  %445 = tail call float @llvm.nvvm.sqrt.approx.f(float %276) #4, !dbg !37
  br label %__nv_sqrtf.exit67, !dbg !37

__nv_sqrtf.exit67:                                ; preds = %437, %439, %442, %444
  %.0.i65 = phi float [ %438, %437 ], [ %440, %439 ], [ %443, %442 ], [ %445, %444 ], !dbg !37
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i68 = icmp eq i32 %446, 0, !dbg !37
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i71 = icmp eq i32 %447, 0, !dbg !37
  br i1 %.not.i68, label %453, label %448, !dbg !37

448:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %451, label %449, !dbg !37

449:                                              ; preds = %448
  %450 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %277) #4, !dbg !37
  br label %__nv_sqrtf.exit72, !dbg !37

451:                                              ; preds = %448
  %452 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %277) #4, !dbg !37
  br label %__nv_sqrtf.exit72, !dbg !37

453:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %456, label %454, !dbg !37

454:                                              ; preds = %453
  %455 = tail call float @llvm.nvvm.sqrt.rn.f(float %277) #4, !dbg !37
  br label %__nv_sqrtf.exit72, !dbg !37

456:                                              ; preds = %453
  %457 = tail call float @llvm.nvvm.sqrt.approx.f(float %277) #4, !dbg !37
  br label %__nv_sqrtf.exit72, !dbg !37

__nv_sqrtf.exit72:                                ; preds = %449, %451, %454, %456
  %.0.i70 = phi float [ %450, %449 ], [ %452, %451 ], [ %455, %454 ], [ %457, %456 ], !dbg !37
  %458 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i73 = icmp eq i32 %458, 0, !dbg !37
  %459 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i76 = icmp eq i32 %459, 0, !dbg !37
  br i1 %.not.i73, label %465, label %460, !dbg !37

460:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %463, label %461, !dbg !37

461:                                              ; preds = %460
  %462 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %278) #4, !dbg !37
  br label %__nv_sqrtf.exit77, !dbg !37

463:                                              ; preds = %460
  %464 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %278) #4, !dbg !37
  br label %__nv_sqrtf.exit77, !dbg !37

465:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %468, label %466, !dbg !37

466:                                              ; preds = %465
  %467 = tail call float @llvm.nvvm.sqrt.rn.f(float %278) #4, !dbg !37
  br label %__nv_sqrtf.exit77, !dbg !37

468:                                              ; preds = %465
  %469 = tail call float @llvm.nvvm.sqrt.approx.f(float %278) #4, !dbg !37
  br label %__nv_sqrtf.exit77, !dbg !37

__nv_sqrtf.exit77:                                ; preds = %461, %463, %466, %468
  %.0.i75 = phi float [ %462, %461 ], [ %464, %463 ], [ %467, %466 ], [ %469, %468 ], !dbg !37
  %470 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i78 = icmp eq i32 %470, 0, !dbg !37
  %471 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i81 = icmp eq i32 %471, 0, !dbg !37
  br i1 %.not.i78, label %477, label %472, !dbg !37

472:                                              ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %475, label %473, !dbg !37

473:                                              ; preds = %472
  %474 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %279) #4, !dbg !37
  br label %__nv_sqrtf.exit82, !dbg !37

475:                                              ; preds = %472
  %476 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %279) #4, !dbg !37
  br label %__nv_sqrtf.exit82, !dbg !37

477:                                              ; preds = %__nv_sqrtf.exit77
  br i1 %.not1.i81, label %480, label %478, !dbg !37

478:                                              ; preds = %477
  %479 = tail call float @llvm.nvvm.sqrt.rn.f(float %279) #4, !dbg !37
  br label %__nv_sqrtf.exit82, !dbg !37

480:                                              ; preds = %477
  %481 = tail call float @llvm.nvvm.sqrt.approx.f(float %279) #4, !dbg !37
  br label %__nv_sqrtf.exit82, !dbg !37

__nv_sqrtf.exit82:                                ; preds = %473, %475, %478, %480
  %.0.i80 = phi float [ %474, %473 ], [ %476, %475 ], [ %479, %478 ], [ %481, %480 ], !dbg !37
  %482 = insertelement <16 x float> poison, float %169, i64 4, !dbg !38
  %483 = insertelement <16 x float> %482, float %189, i64 5, !dbg !38
  %484 = insertelement <16 x float> %483, float %209, i64 6, !dbg !38
  %485 = insertelement <16 x float> %484, float %174, i64 7, !dbg !38
  %486 = insertelement <16 x float> %485, float %194, i64 8, !dbg !38
  %487 = insertelement <16 x float> %486, float %214, i64 9, !dbg !38
  %488 = insertelement <16 x float> %487, float %179, i64 10, !dbg !38
  %489 = insertelement <16 x float> %488, float %199, i64 11, !dbg !38
  %490 = insertelement <16 x float> %489, float %219, i64 12, !dbg !38
  %491 = insertelement <16 x float> %490, float %184, i64 13, !dbg !38
  %492 = insertelement <16 x float> %491, float %204, i64 14, !dbg !38
  %493 = insertelement <16 x float> %492, float %224, i64 15, !dbg !38
  %494 = shufflevector <4 x float> %164, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !38
  %495 = shufflevector <16 x float> %494, <16 x float> %493, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>, !dbg !38
  %496 = insertelement <16 x float> poison, float %283, i64 0, !dbg !38
  %497 = insertelement <16 x float> %496, float %285, i64 1, !dbg !38
  %498 = insertelement <16 x float> %497, float %287, i64 2, !dbg !38
  %499 = insertelement <16 x float> %498, float %289, i64 3, !dbg !38
  %500 = shufflevector <16 x float> %499, <16 x float> poison, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3>, !dbg !38
  %501 = fadd <16 x float> %495, %500, !dbg !38
  %502 = fcmp olt <16 x float> %501, zeroinitializer, !dbg !39
  %503 = extractelement <16 x i1> %502, i64 15, !dbg !33
  %504 = extractelement <16 x float> %501, i64 15, !dbg !33
  %505 = select i1 %503, float 0.000000e+00, float %504, !dbg !33
  %506 = extractelement <16 x i1> %502, i64 12, !dbg !33
  %507 = extractelement <16 x float> %501, i64 12, !dbg !33
  %508 = select i1 %506, float 0.000000e+00, float %507, !dbg !33
  %509 = extractelement <16 x i1> %502, i64 9, !dbg !33
  %510 = extractelement <16 x float> %501, i64 9, !dbg !33
  %511 = select i1 %509, float 0.000000e+00, float %510, !dbg !33
  %512 = extractelement <16 x i1> %502, i64 6, !dbg !33
  %513 = extractelement <16 x float> %501, i64 6, !dbg !33
  %514 = select i1 %512, float 0.000000e+00, float %513, !dbg !33
  %515 = extractelement <16 x i1> %502, i64 14, !dbg !33
  %516 = extractelement <16 x float> %501, i64 14, !dbg !33
  %517 = select i1 %515, float 0.000000e+00, float %516, !dbg !33
  %518 = extractelement <16 x i1> %502, i64 11, !dbg !33
  %519 = extractelement <16 x float> %501, i64 11, !dbg !33
  %520 = select i1 %518, float 0.000000e+00, float %519, !dbg !33
  %521 = extractelement <16 x i1> %502, i64 8, !dbg !33
  %522 = extractelement <16 x float> %501, i64 8, !dbg !33
  %523 = select i1 %521, float 0.000000e+00, float %522, !dbg !33
  %524 = extractelement <16 x i1> %502, i64 5, !dbg !33
  %525 = extractelement <16 x float> %501, i64 5, !dbg !33
  %526 = select i1 %524, float 0.000000e+00, float %525, !dbg !33
  %527 = extractelement <16 x i1> %502, i64 13, !dbg !33
  %528 = extractelement <16 x float> %501, i64 13, !dbg !33
  %529 = select i1 %527, float 0.000000e+00, float %528, !dbg !33
  %530 = extractelement <16 x i1> %502, i64 10, !dbg !33
  %531 = extractelement <16 x float> %501, i64 10, !dbg !33
  %532 = select i1 %530, float 0.000000e+00, float %531, !dbg !33
  %533 = extractelement <16 x i1> %502, i64 7, !dbg !33
  %534 = extractelement <16 x float> %501, i64 7, !dbg !33
  %535 = select i1 %533, float 0.000000e+00, float %534, !dbg !33
  %536 = extractelement <16 x i1> %502, i64 4, !dbg !33
  %537 = extractelement <16 x float> %501, i64 4, !dbg !33
  %538 = select i1 %536, float 0.000000e+00, float %537, !dbg !33
  %539 = extractelement <16 x i1> %502, i64 3, !dbg !33
  %540 = extractelement <16 x float> %501, i64 3, !dbg !33
  %541 = select i1 %539, float 0.000000e+00, float %540, !dbg !33
  %542 = extractelement <16 x i1> %502, i64 2, !dbg !33
  %543 = extractelement <16 x float> %501, i64 2, !dbg !33
  %544 = select i1 %542, float 0.000000e+00, float %543, !dbg !33
  %545 = extractelement <16 x i1> %502, i64 1, !dbg !33
  %546 = extractelement <16 x float> %501, i64 1, !dbg !33
  %547 = select i1 %545, float 0.000000e+00, float %546, !dbg !33
  %548 = extractelement <16 x i1> %502, i64 0, !dbg !33
  %549 = extractelement <16 x float> %501, i64 0, !dbg !33
  %550 = select i1 %548, float 0.000000e+00, float %549, !dbg !33
  %551 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !40
  %552 = fadd float %.0.i10, 0x3DDB7CDFE0000000, !dbg !40
  %553 = fadd float %.0.i15, 0x3DDB7CDFE0000000, !dbg !40
  %554 = fadd float %.0.i20, 0x3DDB7CDFE0000000, !dbg !40
  %555 = fadd float %.0.i25, 0x3DDB7CDFE0000000, !dbg !40
  %556 = fadd float %.0.i30, 0x3DDB7CDFE0000000, !dbg !40
  %557 = fadd float %.0.i35, 0x3DDB7CDFE0000000, !dbg !40
  %558 = fadd float %.0.i40, 0x3DDB7CDFE0000000, !dbg !40
  %559 = fadd float %.0.i45, 0x3DDB7CDFE0000000, !dbg !40
  %560 = fadd float %.0.i50, 0x3DDB7CDFE0000000, !dbg !40
  %561 = fadd float %.0.i55, 0x3DDB7CDFE0000000, !dbg !40
  %562 = fadd float %.0.i60, 0x3DDB7CDFE0000000, !dbg !40
  %563 = fadd float %.0.i65, 0x3DDB7CDFE0000000, !dbg !40
  %564 = fadd float %.0.i70, 0x3DDB7CDFE0000000, !dbg !40
  %565 = fadd float %.0.i75, 0x3DDB7CDFE0000000, !dbg !40
  %566 = fadd float %.0.i80, 0x3DDB7CDFE0000000, !dbg !40
  %567 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %550, float %551) #4, !dbg !41
  %568 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %547, float %552) #4, !dbg !41
  %569 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %544, float %553) #4, !dbg !41
  %570 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %541, float %554) #4, !dbg !41
  %571 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %538, float %555) #4, !dbg !41
  %572 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %535, float %556) #4, !dbg !41
  %573 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %532, float %557) #4, !dbg !41
  %574 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %529, float %558) #4, !dbg !41
  %575 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %526, float %559) #4, !dbg !41
  %576 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %523, float %560) #4, !dbg !41
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %520, float %561) #4, !dbg !41
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %517, float %562) #4, !dbg !41
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %514, float %563) #4, !dbg !41
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %511, float %564) #4, !dbg !41
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %508, float %565) #4, !dbg !41
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %505, float %566) #4, !dbg !41
  %583 = shl i32 %20, 4, !dbg !42
  %584 = shl i32 %21, 4, !dbg !42
  %585 = shl i32 %22, 4, !dbg !42
  %586 = shl i32 %23, 4, !dbg !42
  %587 = add i32 %33, %583, !dbg !43
  %588 = add i32 %33, %584, !dbg !43
  %589 = add i32 %33, %585, !dbg !43
  %590 = add i32 %33, %586, !dbg !43
  %591 = sext i32 %587 to i64, !dbg !44
  %592 = getelementptr float, ptr addrspace(1) %3, i64 %591, !dbg !44
  %593 = sext i32 %588 to i64, !dbg !44
  %594 = getelementptr float, ptr addrspace(1) %3, i64 %593, !dbg !44
  %595 = sext i32 %589 to i64, !dbg !44
  %596 = getelementptr float, ptr addrspace(1) %3, i64 %595, !dbg !44
  %597 = sext i32 %590 to i64, !dbg !44
  %598 = getelementptr float, ptr addrspace(1) %3, i64 %597, !dbg !44
  %599 = bitcast float %567 to i32, !dbg !45
  %600 = bitcast float %568 to i32, !dbg !45
  %601 = bitcast float %569 to i32, !dbg !45
  %602 = bitcast float %570 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %599, i32 %600, i32 %601, i32 %602, ptr addrspace(1) %592, i1 %38) #4, !dbg !45
  %603 = bitcast float %571 to i32, !dbg !45
  %604 = bitcast float %572 to i32, !dbg !45
  %605 = bitcast float %573 to i32, !dbg !45
  %606 = bitcast float %574 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %603, i32 %604, i32 %605, i32 %606, ptr addrspace(1) %594, i1 %38) #4, !dbg !45
  %607 = bitcast float %575 to i32, !dbg !45
  %608 = bitcast float %576 to i32, !dbg !45
  %609 = bitcast float %577 to i32, !dbg !45
  %610 = bitcast float %578 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %607, i32 %608, i32 %609, i32 %610, ptr addrspace(1) %596, i1 %38) #4, !dbg !45
  %611 = bitcast float %579 to i32, !dbg !45
  %612 = bitcast float %580 to i32, !dbg !45
  %613 = bitcast float %581 to i32, !dbg !45
  %614 = bitcast float %582 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %611, i32 %612, i32 %613, i32 %614, ptr addrspace(1) %598, i1 %38) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5mifbgakz566ok727nnv5bs5mtq7t4wjqyjnrjvbuexlm72gafo.py", directory: "inductor_cache/5m")
!4 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", linkageName: "triton_poi_fused_add_convolution_div_max_pool2d_with_indices_relu_sqrt_sub_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 37, column: 40, scope: !7)
!37 = !DILocation(line: 38, column: 26, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 33, scope: !7)
!43 = !DILocation(line: 42, column: 30, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 44, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
