#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_add_avg_pool3d_constant_pad_nd_div_mul_pow_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<2.000000e-01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-5> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<7.500000e-01> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<-2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<0> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<4> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<-32> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<-1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<-16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<1> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<2> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<32> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_5 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_6 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %10 = tt.load %9, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = arith.addi %7, %cst_7 : tensor<256xi32, #blocked> loc(#loc11)
    %12 = arith.extsi %11 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc12)
    %13 = arith.cmpi sge, %12, %cst_8 : tensor<256xi64, #blocked> loc(#loc12)
    %14 = arith.cmpi slt, %12, %cst_9 : tensor<256xi64, #blocked> loc(#loc13)
    %15 = arith.andi %13, %14 : tensor<256xi1, #blocked> loc(#loc14)
    %16 = arith.addi %4, %cst_10 : tensor<256xi32, #blocked> loc(#loc15)
    %17 = tt.addptr %8, %16 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %18 = arith.andi %15, %5 : tensor<256xi1, #blocked> loc(#loc17)
    %19 = tt.load %17, %18, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %20 = arith.mulf %19, %19 : tensor<256xf32, #blocked> loc(#loc19)
    %21 = arith.select %15, %20, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc20)
    %22 = arith.addi %7, %cst_11 : tensor<256xi32, #blocked> loc(#loc21)
    %23 = arith.extsi %22 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc22)
    %24 = arith.cmpi sge, %23, %cst_8 : tensor<256xi64, #blocked> loc(#loc22)
    %25 = arith.cmpi slt, %23, %cst_9 : tensor<256xi64, #blocked> loc(#loc23)
    %26 = arith.andi %24, %25 : tensor<256xi1, #blocked> loc(#loc24)
    %27 = arith.addi %4, %cst_12 : tensor<256xi32, #blocked> loc(#loc25)
    %28 = tt.addptr %8, %27 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc26)
    %29 = arith.andi %26, %5 : tensor<256xi1, #blocked> loc(#loc27)
    %30 = tt.load %28, %29, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc28)
    %31 = arith.mulf %30, %30 : tensor<256xf32, #blocked> loc(#loc29)
    %32 = arith.select %26, %31, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc30)
    %33 = arith.addf %32, %21 : tensor<256xf32, #blocked> loc(#loc31)
    %34 = arith.extsi %7 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc32)
    %35 = arith.cmpi sge, %34, %cst_8 : tensor<256xi64, #blocked> loc(#loc32)
    %36 = arith.cmpi slt, %34, %cst_9 : tensor<256xi64, #blocked> loc(#loc33)
    %37 = arith.andi %35, %36 : tensor<256xi1, #blocked> loc(#loc34)
    %38 = arith.andi %37, %5 : tensor<256xi1, #blocked> loc(#loc35)
    %39 = tt.load %9, %38, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc36)
    %40 = arith.mulf %39, %39 : tensor<256xf32, #blocked> loc(#loc37)
    %41 = arith.select %37, %40, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc38)
    %42 = arith.addf %41, %33 : tensor<256xf32, #blocked> loc(#loc39)
    %43 = arith.addi %7, %cst_13 : tensor<256xi32, #blocked> loc(#loc40)
    %44 = arith.extsi %43 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc41)
    %45 = arith.cmpi sge, %44, %cst_8 : tensor<256xi64, #blocked> loc(#loc41)
    %46 = arith.cmpi slt, %44, %cst_9 : tensor<256xi64, #blocked> loc(#loc42)
    %47 = arith.andi %45, %46 : tensor<256xi1, #blocked> loc(#loc43)
    %48 = arith.addi %4, %cst_5 : tensor<256xi32, #blocked> loc(#loc44)
    %49 = tt.addptr %8, %48 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc45)
    %50 = arith.andi %47, %5 : tensor<256xi1, #blocked> loc(#loc46)
    %51 = tt.load %49, %50, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc47)
    %52 = arith.mulf %51, %51 : tensor<256xf32, #blocked> loc(#loc48)
    %53 = arith.select %47, %52, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc49)
    %54 = arith.addf %53, %42 : tensor<256xf32, #blocked> loc(#loc50)
    %55 = arith.addi %7, %cst_14 : tensor<256xi32, #blocked> loc(#loc51)
    %56 = arith.extsi %55 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc52)
    %57 = arith.cmpi sge, %56, %cst_8 : tensor<256xi64, #blocked> loc(#loc52)
    %58 = arith.cmpi slt, %56, %cst_9 : tensor<256xi64, #blocked> loc(#loc53)
    %59 = arith.andi %57, %58 : tensor<256xi1, #blocked> loc(#loc54)
    %60 = arith.addi %4, %cst_15 : tensor<256xi32, #blocked> loc(#loc55)
    %61 = tt.addptr %8, %60 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc56)
    %62 = arith.andi %59, %5 : tensor<256xi1, #blocked> loc(#loc57)
    %63 = tt.load %61, %62, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc58)
    %64 = arith.mulf %63, %63 : tensor<256xf32, #blocked> loc(#loc59)
    %65 = arith.select %59, %64, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc60)
    %66 = arith.addf %65, %54 : tensor<256xf32, #blocked> loc(#loc61)
    %67 = arith.mulf %66, %cst_0 : tensor<256xf32, #blocked> loc(#loc62)
    %68 = arith.mulf %67, %cst_1 : tensor<256xf32, #blocked> loc(#loc63)
    %69 = arith.addf %68, %cst_2 : tensor<256xf32, #blocked> loc(#loc64)
    %70 = tt.extern_elementwise %69, %cst_3 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<256xf32, #blocked>, tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc65)
    %71 = arith.divf %10, %70 : tensor<256xf32, #blocked> loc(#loc66)
    %72 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc67)
    %73 = tt.addptr %72, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc67)
    tt.store %73, %71, %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc68)
    tt.return loc(#loc69)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":21:28)
#loc3 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":21:33)
#loc4 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":22:36)
#loc5 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":22:23)
#loc6 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":23:21)
#loc7 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":24:21)
#loc8 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":24:27)
#loc9 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":26:31)
#loc10 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":26:36)
#loc11 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":27:18)
#loc12 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":29:19)
#loc13 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":31:18)
#loc14 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":32:18)
#loc15 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":33:38)
#loc16 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":33:30)
#loc17 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":33:50)
#loc18 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":33:43)
#loc19 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":34:18)
#loc20 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":36:32)
#loc21 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":37:19)
#loc22 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":38:21)
#loc23 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":39:20)
#loc24 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":40:20)
#loc25 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":41:39)
#loc26 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":41:31)
#loc27 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":41:52)
#loc28 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":41:44)
#loc29 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":42:20)
#loc30 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":44:35)
#loc31 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":45:20)
#loc32 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":47:21)
#loc33 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":48:20)
#loc34 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":49:20)
#loc35 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":50:44)
#loc36 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":50:36)
#loc37 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":51:20)
#loc38 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":53:35)
#loc39 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":54:20)
#loc40 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":55:16)
#loc41 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":56:21)
#loc42 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":57:20)
#loc43 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":58:20)
#loc44 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":59:36)
#loc45 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":59:31)
#loc46 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":59:49)
#loc47 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":59:41)
#loc48 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":60:20)
#loc49 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":62:35)
#loc50 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":63:20)
#loc51 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":64:16)
#loc52 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":65:21)
#loc53 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":66:20)
#loc54 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":67:20)
#loc55 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":68:36)
#loc56 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":68:31)
#loc57 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":68:49)
#loc58 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":68:41)
#loc59 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":69:20)
#loc60 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":71:35)
#loc61 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":72:20)
#loc62 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":74:20)
#loc63 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":76:20)
#loc64 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":78:20)
#loc65 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":80:33)
#loc66 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":81:20)
#loc67 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":82:28)
#loc68 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":82:40)
#loc69 = loc("inductor_cache/pr/cprw3ml4gowizdlbc56eplbqzw3zqjgye7mlolsbxgn6abjmmfrp.py":82:4)
