; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 6, !dbg !16
  %19 = shl i32 %8, 4, !dbg !17
  %20 = and i32 %19, 48, !dbg !17
  %21 = lshr i32 %8, 4, !dbg !17
  %22 = and i32 %21, 15, !dbg !17
  %23 = or disjoint i32 %18, %20, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = or disjoint i32 %18, %22, !dbg !18
  %28 = or disjoint i32 %27, 16, !dbg !18
  %29 = or disjoint i32 %27, 32, !dbg !18
  %30 = or disjoint i32 %27, 48, !dbg !18
  %31 = icmp slt i32 %23, 512, !dbg !19
  %32 = icmp slt i32 %27, 512, !dbg !19
  %33 = icmp slt i32 %28, 512, !dbg !19
  %34 = icmp slt i32 %29, 512, !dbg !19
  %35 = icmp slt i32 %30, 512, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %36 = sdiv i32 %.frozen, 4, !dbg !20
  %37 = mul i32 %36, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %37, !dbg !21
  %.frozen40 = freeze i32 %14, !dbg !22
  %38 = sdiv i32 %.frozen40, 16, !dbg !22
  %39 = mul i32 %38, 16, !dbg !23
  %.decomposed41 = sub i32 %.frozen40, %39, !dbg !23
  %40 = shl nsw i32 %.decomposed, 10, !dbg !24
  %41 = shl i32 %36, 13, !dbg !25
  %42 = add i32 %41, %40, !dbg !26
  %43 = add i32 %42, %23, !dbg !27
  %44 = add i32 %42, %24, !dbg !27
  %45 = add i32 %42, %25, !dbg !27
  %46 = add i32 %42, %26, !dbg !27
  %47 = sext i32 %43 to i64, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !28
  %49 = sext i32 %44 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %45 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = sext i32 %46 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = and i1 %15, %31, !dbg !29
  %56 = and i1 %16, %32, !dbg !29
  %57 = and i1 %33, %16, !dbg !29
  %58 = and i1 %34, %16, !dbg !29
  %59 = and i1 %35, %16, !dbg !29
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %55) #2, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %55) #2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %55) #2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %55) #2, !dbg !30
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %80 = or disjoint i32 %42, 512, !dbg !31
  %81 = add i32 %80, %23, !dbg !32
  %82 = add i32 %80, %24, !dbg !32
  %83 = add i32 %80, %25, !dbg !32
  %84 = add i32 %80, %26, !dbg !32
  %85 = sext i32 %81 to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !33
  %87 = sext i32 %82 to i64, !dbg !33
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !33
  %89 = sext i32 %83 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !33
  %91 = sext i32 %84 to i64, !dbg !33
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %55) #2, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %55) #2, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %55) #2, !dbg !34
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !34
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !34
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !34
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %55) #2, !dbg !34
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !34
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !34
  %113 = add i32 %42, 4096, !dbg !35
  %114 = add i32 %113, %23, !dbg !36
  %115 = add i32 %113, %24, !dbg !36
  %116 = add i32 %113, %25, !dbg !36
  %117 = add i32 %113, %26, !dbg !36
  %118 = sext i32 %114 to i64, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !37
  %120 = sext i32 %115 to i64, !dbg !37
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !37
  %122 = sext i32 %116 to i64, !dbg !37
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !37
  %124 = sext i32 %117 to i64, !dbg !37
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !37
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %55) #2, !dbg !38
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !38
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %55) #2, !dbg !38
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !38
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !38
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !38
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %55) #2, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !38
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !38
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !38
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %55) #2, !dbg !38
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !38
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !38
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !38
  %146 = add i32 %42, 4608, !dbg !39
  %147 = add i32 %146, %23, !dbg !40
  %148 = add i32 %146, %24, !dbg !40
  %149 = add i32 %146, %25, !dbg !40
  %150 = add i32 %146, %26, !dbg !40
  %151 = sext i32 %147 to i64, !dbg !41
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !41
  %153 = sext i32 %148 to i64, !dbg !41
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !41
  %155 = sext i32 %149 to i64, !dbg !41
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !41
  %157 = sext i32 %150 to i64, !dbg !41
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !41
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %55) #2, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !42
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !42
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !42
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %55) #2, !dbg !42
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !42
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !42
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !42
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !42
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %55) #2, !dbg !42
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !42
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !42
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !42
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !42
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %55) #2, !dbg !42
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !42
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !42
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !42
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !42
  %179 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !30
  %180 = insertelement <4 x i32> %179, i32 %62, i64 1, !dbg !30
  %181 = insertelement <4 x i32> %180, i32 %63, i64 2, !dbg !30
  %182 = insertelement <4 x i32> %181, i32 %64, i64 3, !dbg !30
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !30
  %184 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !34
  %185 = insertelement <4 x i32> %184, i32 %95, i64 1, !dbg !34
  %186 = insertelement <4 x i32> %185, i32 %96, i64 2, !dbg !34
  %187 = insertelement <4 x i32> %186, i32 %97, i64 3, !dbg !34
  %188 = bitcast <4 x i32> %187 to <4 x float>, !dbg !34
  %189 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !38
  %190 = insertelement <4 x i32> %189, i32 %128, i64 1, !dbg !38
  %191 = insertelement <4 x i32> %190, i32 %129, i64 2, !dbg !38
  %192 = insertelement <4 x i32> %191, i32 %130, i64 3, !dbg !38
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !38
  %194 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !42
  %195 = insertelement <4 x i32> %194, i32 %161, i64 1, !dbg !42
  %196 = insertelement <4 x i32> %195, i32 %162, i64 2, !dbg !42
  %197 = insertelement <4 x i32> %196, i32 %163, i64 3, !dbg !42
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !42
  %199 = fcmp ogt <4 x float> %188, %183, !dbg !43
  %200 = fcmp uno <4 x float> %188, zeroinitializer, !dbg !47
  %201 = or <4 x i1> %199, %200, !dbg !48
  %.v = select <4 x i1> %201, <4 x i32> %187, <4 x i32> %182, !dbg !49
  %202 = bitcast <4 x i32> %.v to <4 x float>, !dbg !49
  %203 = fcmp olt <4 x float> %202, %193, !dbg !50
  %204 = fcmp uno <4 x float> %193, zeroinitializer, !dbg !52
  %205 = or <4 x i1> %203, %204, !dbg !53
  %.v33 = select <4 x i1> %205, <4 x i32> %192, <4 x i32> %.v, !dbg !54
  %206 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !54
  %207 = fcmp olt <4 x float> %206, %198, !dbg !55
  %208 = bitcast i32 %160 to float, !dbg !57
  %209 = fcmp uno float %208, 0.000000e+00, !dbg !57
  %210 = bitcast i32 %161 to float, !dbg !57
  %211 = fcmp uno float %210, 0.000000e+00, !dbg !57
  %212 = bitcast i32 %162 to float, !dbg !57
  %213 = fcmp uno float %212, 0.000000e+00, !dbg !57
  %214 = bitcast i32 %163 to float, !dbg !57
  %215 = fcmp uno float %214, 0.000000e+00, !dbg !57
  %216 = extractelement <4 x i1> %207, i64 0, !dbg !58
  %217 = or i1 %216, %209, !dbg !58
  %218 = extractelement <4 x i1> %207, i64 1, !dbg !58
  %219 = or i1 %218, %211, !dbg !58
  %220 = extractelement <4 x i1> %207, i64 2, !dbg !58
  %221 = or i1 %220, %213, !dbg !58
  %222 = extractelement <4 x i1> %207, i64 3, !dbg !58
  %223 = or i1 %222, %215, !dbg !58
  %224 = zext <4 x i1> %199 to <4 x i8>, !dbg !59
  %225 = select <4 x i1> %203, <4 x i8> splat (i8 2), <4 x i8> %224, !dbg !60
  %226 = select <4 x i1> %207, <4 x i8> splat (i8 3), <4 x i8> %225, !dbg !61
  %227 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !30
  %228 = insertelement <4 x i32> %227, i32 %67, i64 1, !dbg !30
  %229 = insertelement <4 x i32> %228, i32 %68, i64 2, !dbg !30
  %230 = insertelement <4 x i32> %229, i32 %69, i64 3, !dbg !30
  %231 = bitcast <4 x i32> %230 to <4 x float>, !dbg !30
  %232 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !34
  %233 = insertelement <4 x i32> %232, i32 %100, i64 1, !dbg !34
  %234 = insertelement <4 x i32> %233, i32 %101, i64 2, !dbg !34
  %235 = insertelement <4 x i32> %234, i32 %102, i64 3, !dbg !34
  %236 = bitcast <4 x i32> %235 to <4 x float>, !dbg !34
  %237 = insertelement <4 x i32> poison, i32 %132, i64 0, !dbg !38
  %238 = insertelement <4 x i32> %237, i32 %133, i64 1, !dbg !38
  %239 = insertelement <4 x i32> %238, i32 %134, i64 2, !dbg !38
  %240 = insertelement <4 x i32> %239, i32 %135, i64 3, !dbg !38
  %241 = bitcast <4 x i32> %240 to <4 x float>, !dbg !38
  %242 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !42
  %243 = insertelement <4 x i32> %242, i32 %166, i64 1, !dbg !42
  %244 = insertelement <4 x i32> %243, i32 %167, i64 2, !dbg !42
  %245 = insertelement <4 x i32> %244, i32 %168, i64 3, !dbg !42
  %246 = bitcast <4 x i32> %245 to <4 x float>, !dbg !42
  %247 = fcmp ogt <4 x float> %236, %231, !dbg !43
  %248 = fcmp uno <4 x float> %236, zeroinitializer, !dbg !47
  %249 = or <4 x i1> %247, %248, !dbg !48
  %.v34 = select <4 x i1> %249, <4 x i32> %235, <4 x i32> %230, !dbg !49
  %250 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !49
  %251 = fcmp olt <4 x float> %250, %241, !dbg !50
  %252 = fcmp uno <4 x float> %241, zeroinitializer, !dbg !52
  %253 = or <4 x i1> %251, %252, !dbg !53
  %.v35 = select <4 x i1> %253, <4 x i32> %240, <4 x i32> %.v34, !dbg !54
  %254 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !54
  %255 = fcmp olt <4 x float> %254, %246, !dbg !55
  %256 = bitcast i32 %165 to float, !dbg !57
  %257 = fcmp uno float %256, 0.000000e+00, !dbg !57
  %258 = bitcast i32 %166 to float, !dbg !57
  %259 = fcmp uno float %258, 0.000000e+00, !dbg !57
  %260 = bitcast i32 %167 to float, !dbg !57
  %261 = fcmp uno float %260, 0.000000e+00, !dbg !57
  %262 = bitcast i32 %168 to float, !dbg !57
  %263 = fcmp uno float %262, 0.000000e+00, !dbg !57
  %264 = extractelement <4 x i1> %255, i64 0, !dbg !58
  %265 = or i1 %264, %257, !dbg !58
  %266 = extractelement <4 x i1> %255, i64 1, !dbg !58
  %267 = or i1 %266, %259, !dbg !58
  %268 = extractelement <4 x i1> %255, i64 2, !dbg !58
  %269 = or i1 %268, %261, !dbg !58
  %270 = extractelement <4 x i1> %255, i64 3, !dbg !58
  %271 = or i1 %270, %263, !dbg !58
  %272 = zext <4 x i1> %247 to <4 x i8>, !dbg !59
  %273 = select <4 x i1> %251, <4 x i8> splat (i8 2), <4 x i8> %272, !dbg !60
  %274 = select <4 x i1> %255, <4 x i8> splat (i8 3), <4 x i8> %273, !dbg !61
  %275 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !30
  %276 = insertelement <4 x i32> %275, i32 %72, i64 1, !dbg !30
  %277 = insertelement <4 x i32> %276, i32 %73, i64 2, !dbg !30
  %278 = insertelement <4 x i32> %277, i32 %74, i64 3, !dbg !30
  %279 = bitcast <4 x i32> %278 to <4 x float>, !dbg !30
  %280 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !34
  %281 = insertelement <4 x i32> %280, i32 %105, i64 1, !dbg !34
  %282 = insertelement <4 x i32> %281, i32 %106, i64 2, !dbg !34
  %283 = insertelement <4 x i32> %282, i32 %107, i64 3, !dbg !34
  %284 = bitcast <4 x i32> %283 to <4 x float>, !dbg !34
  %285 = insertelement <4 x i32> poison, i32 %137, i64 0, !dbg !38
  %286 = insertelement <4 x i32> %285, i32 %138, i64 1, !dbg !38
  %287 = insertelement <4 x i32> %286, i32 %139, i64 2, !dbg !38
  %288 = insertelement <4 x i32> %287, i32 %140, i64 3, !dbg !38
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !38
  %290 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !42
  %291 = insertelement <4 x i32> %290, i32 %171, i64 1, !dbg !42
  %292 = insertelement <4 x i32> %291, i32 %172, i64 2, !dbg !42
  %293 = insertelement <4 x i32> %292, i32 %173, i64 3, !dbg !42
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !42
  %295 = fcmp ogt <4 x float> %284, %279, !dbg !43
  %296 = fcmp uno <4 x float> %284, zeroinitializer, !dbg !47
  %297 = or <4 x i1> %295, %296, !dbg !48
  %.v36 = select <4 x i1> %297, <4 x i32> %283, <4 x i32> %278, !dbg !49
  %298 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !49
  %299 = fcmp olt <4 x float> %298, %289, !dbg !50
  %300 = fcmp uno <4 x float> %289, zeroinitializer, !dbg !52
  %301 = or <4 x i1> %299, %300, !dbg !53
  %.v37 = select <4 x i1> %301, <4 x i32> %288, <4 x i32> %.v36, !dbg !54
  %302 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !54
  %303 = fcmp olt <4 x float> %302, %294, !dbg !55
  %304 = bitcast i32 %170 to float, !dbg !57
  %305 = fcmp uno float %304, 0.000000e+00, !dbg !57
  %306 = bitcast i32 %171 to float, !dbg !57
  %307 = fcmp uno float %306, 0.000000e+00, !dbg !57
  %308 = bitcast i32 %172 to float, !dbg !57
  %309 = fcmp uno float %308, 0.000000e+00, !dbg !57
  %310 = bitcast i32 %173 to float, !dbg !57
  %311 = fcmp uno float %310, 0.000000e+00, !dbg !57
  %312 = extractelement <4 x i1> %303, i64 0, !dbg !58
  %313 = or i1 %312, %305, !dbg !58
  %314 = extractelement <4 x i1> %303, i64 1, !dbg !58
  %315 = or i1 %314, %307, !dbg !58
  %316 = extractelement <4 x i1> %303, i64 2, !dbg !58
  %317 = or i1 %316, %309, !dbg !58
  %318 = extractelement <4 x i1> %303, i64 3, !dbg !58
  %319 = or i1 %318, %311, !dbg !58
  %320 = zext <4 x i1> %295 to <4 x i8>, !dbg !59
  %321 = select <4 x i1> %299, <4 x i8> splat (i8 2), <4 x i8> %320, !dbg !60
  %322 = select <4 x i1> %303, <4 x i8> splat (i8 3), <4 x i8> %321, !dbg !61
  %323 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !30
  %324 = insertelement <4 x i32> %323, i32 %77, i64 1, !dbg !30
  %325 = insertelement <4 x i32> %324, i32 %78, i64 2, !dbg !30
  %326 = insertelement <4 x i32> %325, i32 %79, i64 3, !dbg !30
  %327 = bitcast <4 x i32> %326 to <4 x float>, !dbg !30
  %328 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !34
  %329 = insertelement <4 x i32> %328, i32 %110, i64 1, !dbg !34
  %330 = insertelement <4 x i32> %329, i32 %111, i64 2, !dbg !34
  %331 = insertelement <4 x i32> %330, i32 %112, i64 3, !dbg !34
  %332 = bitcast <4 x i32> %331 to <4 x float>, !dbg !34
  %333 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !38
  %334 = insertelement <4 x i32> %333, i32 %143, i64 1, !dbg !38
  %335 = insertelement <4 x i32> %334, i32 %144, i64 2, !dbg !38
  %336 = insertelement <4 x i32> %335, i32 %145, i64 3, !dbg !38
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !38
  %338 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !42
  %339 = insertelement <4 x i32> %338, i32 %176, i64 1, !dbg !42
  %340 = insertelement <4 x i32> %339, i32 %177, i64 2, !dbg !42
  %341 = insertelement <4 x i32> %340, i32 %178, i64 3, !dbg !42
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !42
  %343 = fcmp ogt <4 x float> %332, %327, !dbg !43
  %344 = fcmp uno <4 x float> %332, zeroinitializer, !dbg !47
  %345 = or <4 x i1> %343, %344, !dbg !48
  %.v38 = select <4 x i1> %345, <4 x i32> %331, <4 x i32> %326, !dbg !49
  %346 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !49
  %347 = fcmp olt <4 x float> %346, %337, !dbg !50
  %348 = fcmp uno <4 x float> %337, zeroinitializer, !dbg !52
  %349 = or <4 x i1> %347, %348, !dbg !53
  %.v39 = select <4 x i1> %349, <4 x i32> %336, <4 x i32> %.v38, !dbg !54
  %350 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !54
  %351 = fcmp olt <4 x float> %350, %342, !dbg !55
  %352 = bitcast i32 %175 to float, !dbg !57
  %353 = fcmp uno float %352, 0.000000e+00, !dbg !57
  %354 = bitcast i32 %176 to float, !dbg !57
  %355 = fcmp uno float %354, 0.000000e+00, !dbg !57
  %356 = bitcast i32 %177 to float, !dbg !57
  %357 = fcmp uno float %356, 0.000000e+00, !dbg !57
  %358 = bitcast i32 %178 to float, !dbg !57
  %359 = fcmp uno float %358, 0.000000e+00, !dbg !57
  %360 = extractelement <4 x i1> %351, i64 0, !dbg !58
  %361 = or i1 %360, %353, !dbg !58
  %362 = extractelement <4 x i1> %351, i64 1, !dbg !58
  %363 = or i1 %362, %355, !dbg !58
  %364 = extractelement <4 x i1> %351, i64 2, !dbg !58
  %365 = or i1 %364, %357, !dbg !58
  %366 = extractelement <4 x i1> %351, i64 3, !dbg !58
  %367 = or i1 %366, %359, !dbg !58
  %368 = zext <4 x i1> %343 to <4 x i8>, !dbg !59
  %369 = select <4 x i1> %347, <4 x i8> splat (i8 2), <4 x i8> %368, !dbg !60
  %370 = select <4 x i1> %351, <4 x i8> splat (i8 3), <4 x i8> %369, !dbg !61
  %371 = shl i32 %27, 4, !dbg !62
  %372 = shl i32 %28, 4, !dbg !62
  %373 = shl i32 %29, 4, !dbg !62
  %374 = shl i32 %30, 4, !dbg !62
  %375 = shl i32 %38, 13, !dbg !63
  %376 = add i32 %375, %.decomposed41, !dbg !64
  %377 = add i32 %376, %371, !dbg !65
  %378 = add i32 %376, %372, !dbg !65
  %379 = add i32 %376, %373, !dbg !65
  %380 = add i32 %376, %374, !dbg !65
  %381 = sext i32 %377 to i64, !dbg !66
  %382 = getelementptr float, ptr addrspace(1) %1, i64 %381, !dbg !66
  %383 = sext i32 %378 to i64, !dbg !66
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %383, !dbg !66
  %385 = sext i32 %379 to i64, !dbg !66
  %386 = getelementptr float, ptr addrspace(1) %1, i64 %385, !dbg !66
  %387 = sext i32 %380 to i64, !dbg !66
  %388 = getelementptr float, ptr addrspace(1) %1, i64 %387, !dbg !66
  %389 = shl i32 %8, 10, !dbg !67
  %390 = and i32 %389, 3072, !dbg !67
  %391 = or disjoint i32 %390, %10, !dbg !67
  %392 = and i32 %11, 1020, !dbg !67
  %393 = lshr exact i32 %390, 2, !dbg !67
  %394 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %393, !dbg !67
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %391, !dbg !67
  %396 = extractelement <4 x i32> %.v33, i64 0, !dbg !67
  %397 = select i1 %217, i32 %160, i32 %396, !dbg !68
  %398 = insertelement <1 x i32> poison, i32 %397, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %398, i1 true) #2, !dbg !67
  %399 = or disjoint i32 %391, 64, !dbg !67
  %400 = lshr i32 %399, 4, !dbg !67
  %401 = and i32 %400, 196, !dbg !67
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401, !dbg !67
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %399, !dbg !67
  %404 = extractelement <4 x i32> %.v33, i64 1, !dbg !67
  %405 = select i1 %219, i32 %161, i32 %404, !dbg !68
  %406 = insertelement <1 x i32> poison, i32 %405, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %406, i1 true) #2, !dbg !67
  %407 = or disjoint i32 %391, 128, !dbg !67
  %408 = lshr i32 %407, 4, !dbg !67
  %409 = and i32 %408, 200, !dbg !67
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !67
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %407, !dbg !67
  %412 = extractelement <4 x i32> %.v33, i64 2, !dbg !67
  %413 = select i1 %221, i32 %162, i32 %412, !dbg !68
  %414 = insertelement <1 x i32> poison, i32 %413, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %414, i1 true) #2, !dbg !67
  %415 = or disjoint i32 %391, 192, !dbg !67
  %416 = lshr i32 %415, 4, !dbg !67
  %417 = and i32 %416, 204, !dbg !67
  %418 = getelementptr float, ptr addrspace(3) @global_smem, i32 %417, !dbg !67
  %419 = getelementptr float, ptr addrspace(3) %418, i32 %415, !dbg !67
  %420 = extractelement <4 x i32> %.v33, i64 3, !dbg !67
  %421 = select i1 %223, i32 %163, i32 %420, !dbg !68
  %422 = insertelement <1 x i32> poison, i32 %421, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %419, <1 x i32> %422, i1 true) #2, !dbg !67
  %423 = or disjoint i32 %391, 256, !dbg !67
  %424 = lshr i32 %423, 4, !dbg !67
  %425 = and i32 %424, 208, !dbg !67
  %426 = getelementptr float, ptr addrspace(3) @global_smem, i32 %425, !dbg !67
  %427 = getelementptr float, ptr addrspace(3) %426, i32 %423, !dbg !67
  %428 = extractelement <4 x i32> %.v35, i64 0, !dbg !67
  %429 = select i1 %265, i32 %165, i32 %428, !dbg !68
  %430 = insertelement <1 x i32> poison, i32 %429, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %430, i1 true) #2, !dbg !67
  %431 = or disjoint i32 %391, 320, !dbg !67
  %432 = lshr i32 %431, 4, !dbg !67
  %433 = and i32 %432, 212, !dbg !67
  %434 = getelementptr float, ptr addrspace(3) @global_smem, i32 %433, !dbg !67
  %435 = getelementptr float, ptr addrspace(3) %434, i32 %431, !dbg !67
  %436 = extractelement <4 x i32> %.v35, i64 1, !dbg !67
  %437 = select i1 %267, i32 %166, i32 %436, !dbg !68
  %438 = insertelement <1 x i32> poison, i32 %437, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %438, i1 true) #2, !dbg !67
  %439 = or disjoint i32 %391, 384, !dbg !67
  %440 = lshr i32 %439, 4, !dbg !67
  %441 = and i32 %440, 216, !dbg !67
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %441, !dbg !67
  %443 = getelementptr float, ptr addrspace(3) %442, i32 %439, !dbg !67
  %444 = extractelement <4 x i32> %.v35, i64 2, !dbg !67
  %445 = select i1 %269, i32 %167, i32 %444, !dbg !68
  %446 = insertelement <1 x i32> poison, i32 %445, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %446, i1 true) #2, !dbg !67
  %447 = or disjoint i32 %391, 448, !dbg !67
  %448 = lshr i32 %447, 4, !dbg !67
  %449 = and i32 %448, 220, !dbg !67
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i32 %449, !dbg !67
  %451 = getelementptr float, ptr addrspace(3) %450, i32 %447, !dbg !67
  %452 = extractelement <4 x i32> %.v35, i64 3, !dbg !67
  %453 = select i1 %271, i32 %168, i32 %452, !dbg !68
  %454 = insertelement <1 x i32> poison, i32 %453, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %454, i1 true) #2, !dbg !67
  %455 = or disjoint i32 %391, 512, !dbg !67
  %456 = lshr i32 %455, 4, !dbg !67
  %457 = and i32 %456, 224, !dbg !67
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !67
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %455, !dbg !67
  %460 = extractelement <4 x i32> %.v37, i64 0, !dbg !67
  %461 = select i1 %313, i32 %170, i32 %460, !dbg !68
  %462 = insertelement <1 x i32> poison, i32 %461, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %462, i1 true) #2, !dbg !67
  %463 = or disjoint i32 %391, 576, !dbg !67
  %464 = lshr i32 %463, 4, !dbg !67
  %465 = and i32 %464, 228, !dbg !67
  %466 = getelementptr float, ptr addrspace(3) @global_smem, i32 %465, !dbg !67
  %467 = getelementptr float, ptr addrspace(3) %466, i32 %463, !dbg !67
  %468 = extractelement <4 x i32> %.v37, i64 1, !dbg !67
  %469 = select i1 %315, i32 %171, i32 %468, !dbg !68
  %470 = insertelement <1 x i32> poison, i32 %469, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %470, i1 true) #2, !dbg !67
  %471 = or disjoint i32 %391, 640, !dbg !67
  %472 = lshr i32 %471, 4, !dbg !67
  %473 = and i32 %472, 232, !dbg !67
  %474 = getelementptr float, ptr addrspace(3) @global_smem, i32 %473, !dbg !67
  %475 = getelementptr float, ptr addrspace(3) %474, i32 %471, !dbg !67
  %476 = extractelement <4 x i32> %.v37, i64 2, !dbg !67
  %477 = select i1 %317, i32 %172, i32 %476, !dbg !68
  %478 = insertelement <1 x i32> poison, i32 %477, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %478, i1 true) #2, !dbg !67
  %479 = or disjoint i32 %391, 704, !dbg !67
  %480 = lshr i32 %479, 4, !dbg !67
  %481 = and i32 %480, 236, !dbg !67
  %482 = getelementptr float, ptr addrspace(3) @global_smem, i32 %481, !dbg !67
  %483 = getelementptr float, ptr addrspace(3) %482, i32 %479, !dbg !67
  %484 = extractelement <4 x i32> %.v37, i64 3, !dbg !67
  %485 = select i1 %319, i32 %173, i32 %484, !dbg !68
  %486 = insertelement <1 x i32> poison, i32 %485, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %483, <1 x i32> %486, i1 true) #2, !dbg !67
  %487 = or disjoint i32 %391, 768, !dbg !67
  %488 = lshr i32 %487, 4, !dbg !67
  %489 = and i32 %488, 240, !dbg !67
  %490 = getelementptr float, ptr addrspace(3) @global_smem, i32 %489, !dbg !67
  %491 = getelementptr float, ptr addrspace(3) %490, i32 %487, !dbg !67
  %492 = extractelement <4 x i32> %.v39, i64 0, !dbg !67
  %493 = select i1 %361, i32 %175, i32 %492, !dbg !68
  %494 = insertelement <1 x i32> poison, i32 %493, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %494, i1 true) #2, !dbg !67
  %495 = or disjoint i32 %391, 832, !dbg !67
  %496 = lshr i32 %495, 4, !dbg !67
  %497 = and i32 %496, 244, !dbg !67
  %498 = getelementptr float, ptr addrspace(3) @global_smem, i32 %497, !dbg !67
  %499 = getelementptr float, ptr addrspace(3) %498, i32 %495, !dbg !67
  %500 = extractelement <4 x i32> %.v39, i64 1, !dbg !67
  %501 = select i1 %363, i32 %176, i32 %500, !dbg !68
  %502 = insertelement <1 x i32> poison, i32 %501, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %502, i1 true) #2, !dbg !67
  %503 = or disjoint i32 %391, 896, !dbg !67
  %504 = lshr i32 %503, 4, !dbg !67
  %505 = and i32 %504, 248, !dbg !67
  %506 = getelementptr float, ptr addrspace(3) @global_smem, i32 %505, !dbg !67
  %507 = getelementptr float, ptr addrspace(3) %506, i32 %503, !dbg !67
  %508 = extractelement <4 x i32> %.v39, i64 2, !dbg !67
  %509 = select i1 %365, i32 %177, i32 %508, !dbg !68
  %510 = insertelement <1 x i32> poison, i32 %509, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %507, <1 x i32> %510, i1 true) #2, !dbg !67
  %511 = or disjoint i32 %391, 960, !dbg !67
  %512 = lshr i32 %511, 4, !dbg !67
  %513 = and i32 %512, 252, !dbg !67
  %514 = getelementptr float, ptr addrspace(3) @global_smem, i32 %513, !dbg !67
  %515 = getelementptr float, ptr addrspace(3) %514, i32 %511, !dbg !67
  %516 = extractelement <4 x i32> %.v39, i64 3, !dbg !67
  %517 = select i1 %367, i32 %178, i32 %516, !dbg !68
  %518 = insertelement <1 x i32> poison, i32 %517, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, <1 x i32> %518, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %519 = lshr i32 %11, 4, !dbg !67
  %520 = and i32 %519, 60, !dbg !67
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %520, !dbg !67
  %522 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %392, !dbg !67
  %523 = or disjoint i32 %392, 1024, !dbg !67
  %524 = lshr i32 %523, 4, !dbg !67
  %525 = and i32 %524, 124, !dbg !67
  %526 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %525, !dbg !67
  %527 = getelementptr inbounds float, ptr addrspace(3) %526, i32 %523, !dbg !67
  %528 = load <4 x i32>, ptr addrspace(3) %527, align 16, !dbg !67
  %529 = or disjoint i32 %392, 2048, !dbg !67
  %530 = lshr i32 %529, 4, !dbg !67
  %531 = and i32 %530, 188, !dbg !67
  %532 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %531, !dbg !67
  %533 = getelementptr inbounds float, ptr addrspace(3) %532, i32 %529, !dbg !67
  %534 = load <4 x i32>, ptr addrspace(3) %533, align 16, !dbg !67
  %535 = or disjoint i32 %392, 3072, !dbg !67
  %536 = lshr i32 %535, 4, !dbg !67
  %537 = and i32 %536, 252, !dbg !67
  %538 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %537, !dbg !67
  %539 = getelementptr inbounds float, ptr addrspace(3) %538, i32 %535, !dbg !67
  %540 = load <4 x i32>, ptr addrspace(3) %539, align 16, !dbg !67
  %.extract = load i32, ptr addrspace(3) %522, align 16, !dbg !67
  %541 = getelementptr inbounds i8, ptr addrspace(3) %522, i32 4, !dbg !67
  %.extract18 = load i32, ptr addrspace(3) %541, align 4, !dbg !67
  %542 = getelementptr inbounds i8, ptr addrspace(3) %522, i32 8, !dbg !67
  %.extract19 = load i32, ptr addrspace(3) %542, align 8, !dbg !67
  %543 = getelementptr inbounds i8, ptr addrspace(3) %522, i32 12, !dbg !67
  %.extract20 = load i32, ptr addrspace(3) %543, align 4, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %382, i1 %56) #2, !dbg !67
  %.extract21 = extractelement <4 x i32> %528, i64 0, !dbg !67
  %.extract22 = extractelement <4 x i32> %528, i64 1, !dbg !67
  %.extract23 = extractelement <4 x i32> %528, i64 2, !dbg !67
  %.extract24 = extractelement <4 x i32> %528, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %384, i1 %57) #2, !dbg !67
  %.extract25 = extractelement <4 x i32> %534, i64 0, !dbg !67
  %.extract26 = extractelement <4 x i32> %534, i64 1, !dbg !67
  %.extract27 = extractelement <4 x i32> %534, i64 2, !dbg !67
  %.extract28 = extractelement <4 x i32> %534, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %386, i1 %58) #2, !dbg !67
  %.extract29 = extractelement <4 x i32> %540, i64 0, !dbg !67
  %.extract30 = extractelement <4 x i32> %540, i64 1, !dbg !67
  %.extract31 = extractelement <4 x i32> %540, i64 2, !dbg !67
  %.extract32 = extractelement <4 x i32> %540, i64 3, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %388, i1 %59) #2, !dbg !67
  %544 = shl i32 %13, 9, !dbg !69
  %545 = add i32 %23, %544, !dbg !70
  %546 = sext i32 %545 to i64, !dbg !71
  %547 = getelementptr i8, ptr addrspace(1) %2, i64 %546, !dbg !71
  %548 = bitcast <4 x i8> %226 to i32, !dbg !72
  %549 = bitcast <4 x i8> %274 to i32, !dbg !72
  %550 = bitcast <4 x i8> %322 to i32, !dbg !72
  %551 = bitcast <4 x i8> %370 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %548, i32 %549, i32 %550, i32 %551, ptr addrspace(1) %547, i1 %55) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py", directory: "inductor_cache/ag")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 50, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 63, scope: !7)
!30 = !DILocation(line: 34, column: 55, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 61, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 52, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 62, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 52, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 62, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 38, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !51)
!51 = !DILocation(line: 39, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !56)
!56 = !DILocation(line: 40, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !56)
!59 = !DILocation(line: 44, column: 33, scope: !7)
!60 = !DILocation(line: 47, column: 35, scope: !7)
!61 = !DILocation(line: 50, column: 35, scope: !7)
!62 = !DILocation(line: 51, column: 33, scope: !7)
!63 = !DILocation(line: 51, column: 43, scope: !7)
!64 = !DILocation(line: 51, column: 30, scope: !7)
!65 = !DILocation(line: 51, column: 38, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 54, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !56)
!69 = !DILocation(line: 52, column: 34, scope: !7)
!70 = !DILocation(line: 52, column: 30, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 46, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
