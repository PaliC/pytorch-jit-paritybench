#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0)
#loc1 = loc(unknown)
#loc33 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":47:41)
#loc66 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_convolution_native_group_norm_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c65536_i32 = arith.constant 65536 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = arith.remsi %4, %c32_i32 : i32 loc(#loc6)
    %6 = tt.addptr %arg1, %5 : !tt.ptr<f32>, i32 loc(#loc7)
    %7 = tt.splat %6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %8 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc8)
    %9 = tt.load %7, %8 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = arith.muli %0, %c65536_i32 : i32 loc(#loc9)
    %11 = tt.splat %10 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc10)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc11)
    %13 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc12)
    %14 = tt.broadcast %9 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc13)
    %15:3 = scf.for %arg7 = %c0_i32 to %c65536_i32 step %c2048_i32 iter_args(%arg8 = %cst, %arg9 = %cst, %arg10 = %cst) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %30 = tt.splat %arg7 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc15)
      %31 = arith.addi %30, %3 : tensor<1x2048xi32, #blocked> loc(#loc15)
      %32 = arith.addi %31, %11 : tensor<1x2048xi32, #blocked> loc(#loc10)
      %33 = tt.addptr %12, %32 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc11)
      %34 = tt.load %33, %13, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
      %35 = arith.addf %34, %14 : tensor<1x2048xf32, #blocked> loc(#loc13)
      %36 = arith.cmpi eq, %arg7, %c0_i32 : i32 loc(#loc16)
      %37:3 = scf.if %36 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst, %35, %cst_1 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc57)
      } else {
        %41 = arith.subf %35, %arg8 : tensor<1x2048xf32, #blocked> loc(#loc58)
        %42 = arith.addf %arg10, %cst_1 : tensor<1x2048xf32, #blocked> loc(#loc59)
        %43 = arith.divf %41, %42 : tensor<1x2048xf32, #blocked> loc(#loc60)
        %44 = arith.addf %arg8, %43 : tensor<1x2048xf32, #blocked> loc(#loc61)
        %45 = arith.subf %35, %44 : tensor<1x2048xf32, #blocked> loc(#loc62)
        %46 = arith.mulf %41, %45 : tensor<1x2048xf32, #blocked> loc(#loc63)
        %47 = arith.addf %arg9, %46 : tensor<1x2048xf32, #blocked> loc(#loc64)
        scf.yield %47, %44, %42 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc64)
      } loc(#loc56)
      %38 = arith.select %13, %37#1, %arg8 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc27)
      %39 = arith.select %13, %37#0, %arg9 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc28)
      %40 = arith.select %13, %37#2, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc29)
      tt.store %33, %35, %13 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc30)
      scf.yield %38, %39, %40 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc31)
    } loc(#loc14)
    %16:3 = "tt.reduce"(%15#0, %15#1, %15#2) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc33)), %arg8: f32 loc(callsite(#loc1 at #loc33)), %arg9: f32 loc(callsite(#loc1 at #loc33)), %arg10: f32 loc(callsite(#loc1 at #loc33)), %arg11: f32 loc(callsite(#loc1 at #loc33)), %arg12: f32 loc(callsite(#loc1 at #loc33))):
      %30 = arith.subf %arg10, %arg7 : f32 loc(#loc79)
      %31 = arith.addf %arg9, %arg12 : f32 loc(#loc80)
      %32 = arith.cmpf oeq, %31, %cst_0 : f32 loc(#loc81)
      %33 = arith.divf %arg12, %31 : f32 loc(#loc82)
      %34 = arith.select %32, %cst_0, %33 : f32 loc(#loc83)
      %35 = arith.mulf %30, %34 : f32 loc(#loc84)
      %36 = arith.addf %arg7, %35 : f32 loc(#loc85)
      %37 = arith.addf %arg8, %arg11 : f32 loc(#loc86)
      %38 = arith.mulf %30, %30 : f32 loc(#loc87)
      %39 = arith.mulf %38, %arg9 : f32 loc(#loc88)
      %40 = arith.mulf %39, %34 : f32 loc(#loc89)
      %41 = arith.addf %37, %40 : f32 loc(#loc90)
      tt.reduce.return %36, %41, %31 : f32, f32, f32 loc(#loc65)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc65)
    %17 = triton_gpu.convert_layout %16#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc46)
    %18 = tt.expand_dims %17 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc46)
    %19 = triton_gpu.convert_layout %16#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc47)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc47)
    %21 = triton_gpu.convert_layout %16#2 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc48)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc48)
    %23 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc49)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc50)
    %25 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc50)
    tt.store %24, %18, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc50)
    %26 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc51)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc52)
    tt.store %27, %20, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc52)
    %28 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc53)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.store %29, %22, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":22:28)
#loc3 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":24:21)
#loc4 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":25:33)
#loc5 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":27:21)
#loc6 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":27:26)
#loc7 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":28:30)
#loc8 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":28:35)
#loc9 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":36:49)
#loc10 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":36:43)
#loc11 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":36:38)
#loc12 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":36:54)
#loc13 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":37:22)
#loc14 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":32:36)
#loc15 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":33:27)
#loc16 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":40:62)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc18 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":40:51)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc27 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":42:52)
#loc28 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":43:48)
#loc29 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":44:56)
#loc30 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":45:54)
#loc31 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":45:8)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc46 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":49:20)
#loc47 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":50:20)
#loc48 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":51:20)
#loc49 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":52:25)
#loc50 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":52:36)
#loc51 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":53:25)
#loc52 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":53:36)
#loc53 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":54:25)
#loc54 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":54:36)
#loc55 = loc("inductor_cache/p6/cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py":54:4)
#loc56 = loc(callsite(#loc17 at #loc18))
#loc57 = loc(callsite(#loc19 at #loc18))
#loc58 = loc(callsite(#loc20 at #loc18))
#loc59 = loc(callsite(#loc21 at #loc18))
#loc60 = loc(callsite(#loc22 at #loc18))
#loc61 = loc(callsite(#loc23 at #loc18))
#loc62 = loc(callsite(#loc24 at #loc18))
#loc63 = loc(callsite(#loc25 at #loc18))
#loc64 = loc(callsite(#loc26 at #loc18))
#loc65 = loc(callsite(#loc32 at #loc33))
#loc67 = loc(callsite(#loc34 at #loc32))
#loc68 = loc(callsite(#loc35 at #loc32))
#loc69 = loc(callsite(#loc36 at #loc32))
#loc70 = loc(callsite(#loc37 at #loc32))
#loc71 = loc(callsite(#loc38 at #loc32))
#loc72 = loc(callsite(#loc39 at #loc32))
#loc73 = loc(callsite(#loc40 at #loc32))
#loc74 = loc(callsite(#loc41 at #loc32))
#loc75 = loc(callsite(#loc42 at #loc32))
#loc76 = loc(callsite(#loc43 at #loc32))
#loc77 = loc(callsite(#loc44 at #loc32))
#loc78 = loc(callsite(#loc45 at #loc32))
#loc79 = loc(callsite(#loc67 at #loc33))
#loc80 = loc(callsite(#loc68 at #loc33))
#loc81 = loc(callsite(#loc69 at #loc33))
#loc82 = loc(callsite(#loc70 at #loc33))
#loc83 = loc(callsite(#loc71 at #loc33))
#loc84 = loc(callsite(#loc72 at #loc33))
#loc85 = loc(callsite(#loc73 at #loc33))
#loc86 = loc(callsite(#loc74 at #loc33))
#loc87 = loc(callsite(#loc75 at #loc33))
#loc88 = loc(callsite(#loc76 at #loc33))
#loc89 = loc(callsite(#loc77 at #loc33))
#loc90 = loc(callsite(#loc78 at #loc33))
