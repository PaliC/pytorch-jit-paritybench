; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
.peel.next:
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 512, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = sdiv i32 %7, 4, !dbg !13
  %13 = srem i32 %12, 32, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %8) #3, !dbg !16
  %20 = shl i32 %7, 16, !dbg !17
  %21 = or disjoint i32 %20, %11
  %22 = sext i32 %21 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %29 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !20
  %30 = insertelement <4 x i32> %29, i32 %27, i64 1, !dbg !20
  %31 = insertelement <4 x i32> %30, i32 %26, i64 2, !dbg !20
  %32 = insertelement <4 x i32> %31, i32 %25, i64 3, !dbg !20
  %33 = bitcast <4 x i32> %32 to <4 x float>, !dbg !20
  %34 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !21
  %35 = bitcast <4 x i32> %34 to <4 x float>, !dbg !21
  %36 = shufflevector <4 x float> %35, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !21
  %37 = fadd <4 x float> %36, %33, !dbg !21
  %bc = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %38 = extractelement <4 x i32> %bc, i64 0, !dbg !22
  %bc82 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %39 = extractelement <4 x i32> %bc82, i64 1, !dbg !22
  %bc83 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %40 = extractelement <4 x i32> %bc83, i64 2, !dbg !22
  %bc84 = bitcast <4 x float> %37 to <4 x i32>, !dbg !22
  %41 = extractelement <4 x i32> %bc84, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %38, i32 %39, i32 %40, i32 %41, ptr addrspace(1) %23, i1 %8) #3, !dbg !22
  %42 = select i1 %8, float 1.000000e+00, float 0.000000e+00, !dbg !23
  %43 = insertelement <4 x i1> poison, i1 %8, i64 0, !dbg !24
  %44 = shufflevector <4 x i1> %43, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !24
  %45 = select <4 x i1> %44, <4 x float> %37, <4 x float> zeroinitializer, !dbg !24
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !18
  br label %46, !dbg !18

46:                                               ; preds = %.peel.next, %46
  %indvars.iv = phi i64 [ 2048, %.peel.next ], [ %indvars.iv.next, %46 ]
  %.pn51 = phi float [ %42, %.peel.next ], [ %83, %46 ]
  %.pn49 = phi float [ %42, %.peel.next ], [ %84, %46 ]
  %.pn47 = phi float [ %42, %.peel.next ], [ %85, %46 ]
  %.pn45 = phi float [ %42, %.peel.next ], [ %86, %46 ]
  %47 = phi <4 x float> [ zeroinitializer, %.peel.next ], [ %82, %46 ]
  %48 = phi <4 x float> [ %45, %.peel.next ], [ %81, %46 ]
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !19
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !20
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !20
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !20
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !20
  %54 = fadd float %.pn51, 1.000000e+00, !dbg !25
  %55 = fadd float %.pn49, 1.000000e+00, !dbg !25
  %56 = fadd float %.pn47, 1.000000e+00, !dbg !25
  %57 = fadd float %.pn45, 1.000000e+00, !dbg !25
  %58 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !20
  %59 = insertelement <4 x i32> %58, i32 %51, i64 1, !dbg !20
  %60 = insertelement <4 x i32> %59, i32 %52, i64 2, !dbg !20
  %61 = insertelement <4 x i32> %60, i32 %53, i64 3, !dbg !20
  %62 = bitcast <4 x i32> %61 to <4 x float>, !dbg !20
  %63 = fadd <4 x float> %36, %62, !dbg !21
  %64 = fsub <4 x float> %63, %48, !dbg !29
  %65 = extractelement <4 x float> %64, i64 0, !dbg !30
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float %54) #3, !dbg !30
  %67 = extractelement <4 x float> %64, i64 1, !dbg !30
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %55) #3, !dbg !30
  %69 = extractelement <4 x float> %64, i64 2, !dbg !30
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %56) #3, !dbg !30
  %71 = extractelement <4 x float> %64, i64 3, !dbg !30
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %57) #3, !dbg !30
  %73 = insertelement <4 x float> poison, float %66, i64 0, !dbg !31
  %74 = insertelement <4 x float> %73, float %68, i64 1, !dbg !31
  %75 = insertelement <4 x float> %74, float %70, i64 2, !dbg !31
  %76 = insertelement <4 x float> %75, float %72, i64 3, !dbg !31
  %77 = fadd <4 x float> %48, %76, !dbg !31
  %78 = fsub <4 x float> %63, %77, !dbg !32
  %79 = fmul <4 x float> %64, %78, !dbg !33
  %80 = fadd <4 x float> %47, %79, !dbg !34
  %81 = select <4 x i1> %44, <4 x float> %77, <4 x float> %48, !dbg !24
  %82 = select <4 x i1> %44, <4 x float> %80, <4 x float> %47, !dbg !35
  %83 = select i1 %8, float %54, float %.pn51, !dbg !23
  %84 = select i1 %8, float %55, float %.pn49, !dbg !23
  %85 = select i1 %8, float %56, float %.pn47, !dbg !23
  %86 = select i1 %8, float %57, float %.pn45, !dbg !23
  %bc85 = bitcast <4 x float> %63 to <4 x i32>, !dbg !22
  %87 = extractelement <4 x i32> %bc85, i64 0, !dbg !22
  %bc86 = bitcast <4 x float> %63 to <4 x i32>, !dbg !22
  %88 = extractelement <4 x i32> %bc86, i64 1, !dbg !22
  %bc87 = bitcast <4 x float> %63 to <4 x i32>, !dbg !22
  %89 = extractelement <4 x i32> %bc87, i64 2, !dbg !22
  %bc88 = bitcast <4 x float> %63 to <4 x i32>, !dbg !22
  %90 = extractelement <4 x i32> %bc88, i64 3, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %87, i32 %88, i32 %89, i32 %90, ptr addrspace(1) %gep, i1 %8) #3, !dbg !22
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !18
  %91 = icmp samesign ult i64 %indvars.iv, 63488, !dbg !18
  br i1 %91, label %46, label %.loopexit, !dbg !18, !llvm.loop !36

.loopexit:                                        ; preds = %46
  %92 = lshr i32 %9, 5, !dbg !12
  %93 = and i32 %9, 31, !dbg !12
  %94 = extractelement <4 x float> %81, i64 0, !dbg !38
  %95 = extractelement <4 x float> %81, i64 1, !dbg !38
  %96 = fsub float %95, %94, !dbg !38
  %97 = fadd float %83, %84, !dbg !41
  %98 = fcmp oeq float %97, 0.000000e+00, !dbg !42
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %97) #3, !dbg !43
  %100 = select i1 %98, float 0.000000e+00, float %99, !dbg !44
  %101 = fmul float %96, %100, !dbg !45
  %102 = fadd float %94, %101, !dbg !46
  %shift = shufflevector <4 x float> %82, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !47
  %103 = fadd <4 x float> %82, %shift, !dbg !47
  %104 = extractelement <4 x float> %103, i64 0, !dbg !47
  %105 = fmul float %96, %96, !dbg !48
  %106 = fmul float %105, %83, !dbg !49
  %107 = fmul float %106, %100, !dbg !50
  %108 = fadd float %104, %107, !dbg !51
  %109 = extractelement <4 x float> %81, i64 2, !dbg !38
  %110 = fsub float %109, %102, !dbg !38
  %111 = fadd float %85, %97, !dbg !41
  %112 = fcmp oeq float %111, 0.000000e+00, !dbg !42
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float %111) #3, !dbg !43
  %114 = select i1 %112, float 0.000000e+00, float %113, !dbg !44
  %115 = fmul float %114, %110, !dbg !45
  %116 = fadd float %102, %115, !dbg !46
  %117 = extractelement <4 x float> %82, i64 2, !dbg !47
  %118 = fadd float %117, %108, !dbg !47
  %119 = fmul float %110, %110, !dbg !48
  %120 = fmul float %97, %119, !dbg !49
  %121 = fmul float %114, %120, !dbg !50
  %122 = fadd float %118, %121, !dbg !51
  %123 = extractelement <4 x float> %81, i64 3, !dbg !38
  %124 = fsub float %123, %116, !dbg !38
  %125 = fadd float %86, %111, !dbg !41
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !42
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %125) #3, !dbg !43
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !44
  %129 = fmul float %128, %124, !dbg !45
  %130 = fadd float %116, %129, !dbg !46
  %131 = extractelement <4 x float> %82, i64 3, !dbg !47
  %132 = fadd float %131, %122, !dbg !47
  %133 = fmul float %124, %124, !dbg !48
  %134 = fmul float %111, %133, !dbg !49
  %135 = fmul float %128, %134, !dbg !50
  %136 = fadd float %132, %135, !dbg !51
  %137 = bitcast float %130 to i32, !dbg !52
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !52
  %139 = bitcast i32 %138 to float, !dbg !52
  %140 = bitcast float %136 to i32, !dbg !52
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !52
  %142 = bitcast i32 %141 to float, !dbg !52
  %143 = bitcast float %125 to i32, !dbg !52
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 16, i32 31), !dbg !52
  %145 = bitcast i32 %144 to float, !dbg !52
  %146 = fsub float %139, %130, !dbg !38
  %147 = fadd float %125, %145, !dbg !41
  %148 = fcmp oeq float %147, 0.000000e+00, !dbg !42
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %147) #3, !dbg !43
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !44
  %151 = fmul float %150, %146, !dbg !45
  %152 = fadd float %130, %151, !dbg !46
  %153 = fadd float %136, %142, !dbg !47
  %154 = fmul float %146, %146, !dbg !48
  %155 = fmul float %125, %154, !dbg !49
  %156 = fmul float %150, %155, !dbg !50
  %157 = fadd float %153, %156, !dbg !51
  %158 = bitcast float %152 to i32, !dbg !52
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !52
  %160 = bitcast i32 %159 to float, !dbg !52
  %161 = bitcast float %157 to i32, !dbg !52
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !52
  %163 = bitcast i32 %162 to float, !dbg !52
  %164 = bitcast float %147 to i32, !dbg !52
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 8, i32 31), !dbg !52
  %166 = bitcast i32 %165 to float, !dbg !52
  %167 = fsub float %160, %152, !dbg !38
  %168 = fadd float %147, %166, !dbg !41
  %169 = fcmp oeq float %168, 0.000000e+00, !dbg !42
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %168) #3, !dbg !43
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !44
  %172 = fmul float %167, %171, !dbg !45
  %173 = fadd float %152, %172, !dbg !46
  %174 = fadd float %157, %163, !dbg !47
  %175 = fmul float %167, %167, !dbg !48
  %176 = fmul float %147, %175, !dbg !49
  %177 = fmul float %171, %176, !dbg !50
  %178 = fadd float %174, %177, !dbg !51
  %179 = bitcast float %173 to i32, !dbg !52
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 4, i32 31), !dbg !52
  %181 = bitcast i32 %180 to float, !dbg !52
  %182 = bitcast float %178 to i32, !dbg !52
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 4, i32 31), !dbg !52
  %184 = bitcast i32 %183 to float, !dbg !52
  %185 = bitcast float %168 to i32, !dbg !52
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 4, i32 31), !dbg !52
  %187 = bitcast i32 %186 to float, !dbg !52
  %188 = fsub float %181, %173, !dbg !38
  %189 = fadd float %168, %187, !dbg !41
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !42
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %187, float %189) #3, !dbg !43
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !44
  %193 = fmul float %188, %192, !dbg !45
  %194 = fadd float %173, %193, !dbg !46
  %195 = fadd float %178, %184, !dbg !47
  %196 = fmul float %188, %188, !dbg !48
  %197 = fmul float %168, %196, !dbg !49
  %198 = fmul float %192, %197, !dbg !50
  %199 = fadd float %195, %198, !dbg !51
  %200 = bitcast float %194 to i32, !dbg !52
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !52
  %202 = bitcast i32 %201 to float, !dbg !52
  %203 = bitcast float %199 to i32, !dbg !52
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !52
  %205 = bitcast i32 %204 to float, !dbg !52
  %206 = bitcast float %189 to i32, !dbg !52
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 2, i32 31), !dbg !52
  %208 = bitcast i32 %207 to float, !dbg !52
  %209 = fsub float %202, %194, !dbg !38
  %210 = fadd float %189, %208, !dbg !41
  %211 = fcmp oeq float %210, 0.000000e+00, !dbg !42
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %210) #3, !dbg !43
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !44
  %214 = fmul float %209, %213, !dbg !45
  %215 = fadd float %194, %214, !dbg !46
  %216 = fadd float %199, %205, !dbg !47
  %217 = fmul float %209, %209, !dbg !48
  %218 = fmul float %189, %217, !dbg !49
  %219 = fmul float %213, %218, !dbg !50
  %220 = fadd float %216, %219, !dbg !51
  %221 = bitcast float %215 to i32, !dbg !52
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !52
  %223 = bitcast i32 %222 to float, !dbg !52
  %224 = bitcast float %220 to i32, !dbg !52
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !52
  %226 = bitcast i32 %225 to float, !dbg !52
  %227 = bitcast float %210 to i32, !dbg !52
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !52
  %229 = bitcast i32 %228 to float, !dbg !52
  %230 = fsub float %223, %215, !dbg !38
  %231 = fadd float %210, %229, !dbg !41
  %232 = fcmp oeq float %231, 0.000000e+00, !dbg !42
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float %231) #3, !dbg !43
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !44
  %235 = fmul float %230, %234, !dbg !45
  %236 = fadd float %215, %235, !dbg !46
  %237 = fadd float %220, %226, !dbg !47
  %238 = fmul float %230, %230, !dbg !48
  %239 = fmul float %210, %238, !dbg !49
  %240 = fmul float %234, %239, !dbg !50
  %241 = fadd float %237, %240, !dbg !51
  %242 = icmp eq i32 %93, 0, !dbg !52
  %243 = and i32 %92, 15, !dbg !52
  %244 = zext nneg i32 %243 to i64, !dbg !52
  %245 = getelementptr float, ptr addrspace(3) @global_smem, i64 %244, !dbg !52
  %246 = bitcast float %236 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 %242) #3, !dbg !52
  %247 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %244, !dbg !52
  %248 = bitcast float %241 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 %242) #3, !dbg !52
  %249 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %244, !dbg !52
  %250 = bitcast float %231 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 %242) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %251 = icmp slt i32 %9, 16, !dbg !52
  %252 = sext i32 %9 to i64, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i64 %252, !dbg !52
  %254 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %251) #3, !dbg !52
  %255 = bitcast i32 %254 to float, !dbg !52
  %256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %252, !dbg !52
  %257 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %256, i1 %251) #3, !dbg !52
  %258 = bitcast i32 %257 to float, !dbg !52
  %259 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %252, !dbg !52
  %260 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %259, i1 %251) #3, !dbg !52
  %261 = bitcast i32 %260 to float, !dbg !52
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !52
  %263 = bitcast i32 %262 to float, !dbg !52
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !52
  %265 = bitcast i32 %264 to float, !dbg !52
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 8, i32 31), !dbg !52
  %267 = bitcast i32 %266 to float, !dbg !52
  %268 = fsub float %263, %255, !dbg !38
  %269 = fadd float %261, %267, !dbg !41
  %270 = fcmp oeq float %269, 0.000000e+00, !dbg !42
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %267, float %269) #3, !dbg !43
  %272 = select i1 %270, float 0.000000e+00, float %271, !dbg !44
  %273 = fmul float %268, %272, !dbg !45
  %274 = fadd float %273, %255, !dbg !46
  %275 = fadd float %258, %265, !dbg !47
  %276 = fmul float %268, %268, !dbg !48
  %277 = fmul float %276, %261, !dbg !49
  %278 = fmul float %277, %272, !dbg !50
  %279 = fadd float %275, %278, !dbg !51
  %280 = bitcast float %274 to i32, !dbg !52
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !52
  %282 = bitcast i32 %281 to float, !dbg !52
  %283 = bitcast float %279 to i32, !dbg !52
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !52
  %285 = bitcast i32 %284 to float, !dbg !52
  %286 = bitcast float %269 to i32, !dbg !52
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !52
  %288 = bitcast i32 %287 to float, !dbg !52
  %289 = fsub float %282, %274, !dbg !38
  %290 = fadd float %269, %288, !dbg !41
  %291 = fcmp oeq float %290, 0.000000e+00, !dbg !42
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %288, float %290) #3, !dbg !43
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !44
  %294 = fmul float %289, %293, !dbg !45
  %295 = fadd float %274, %294, !dbg !46
  %296 = fadd float %279, %285, !dbg !47
  %297 = fmul float %289, %289, !dbg !48
  %298 = fmul float %269, %297, !dbg !49
  %299 = fmul float %293, %298, !dbg !50
  %300 = fadd float %296, %299, !dbg !51
  %301 = bitcast float %295 to i32, !dbg !52
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !52
  %303 = bitcast i32 %302 to float, !dbg !52
  %304 = bitcast float %300 to i32, !dbg !52
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !52
  %306 = bitcast i32 %305 to float, !dbg !52
  %307 = bitcast float %290 to i32, !dbg !52
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 2, i32 31), !dbg !52
  %309 = bitcast i32 %308 to float, !dbg !52
  %310 = fsub float %303, %295, !dbg !38
  %311 = fadd float %290, %309, !dbg !41
  %312 = fcmp oeq float %311, 0.000000e+00, !dbg !42
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %309, float %311) #3, !dbg !43
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !44
  %315 = fmul float %310, %314, !dbg !45
  %316 = fadd float %295, %315, !dbg !46
  %317 = fadd float %300, %306, !dbg !47
  %318 = fmul float %310, %310, !dbg !48
  %319 = fmul float %290, %318, !dbg !49
  %320 = fmul float %314, %319, !dbg !50
  %321 = fadd float %317, %320, !dbg !51
  %322 = bitcast float %316 to i32, !dbg !52
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !52
  %324 = bitcast i32 %323 to float, !dbg !52
  %325 = bitcast float %321 to i32, !dbg !52
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !52
  %327 = bitcast i32 %326 to float, !dbg !52
  %328 = bitcast float %311 to i32, !dbg !52
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 1, i32 31), !dbg !52
  %330 = bitcast i32 %329 to float, !dbg !52
  %331 = fsub float %324, %316, !dbg !38
  %332 = fadd float %311, %330, !dbg !41
  %333 = fcmp oeq float %332, 0.000000e+00, !dbg !42
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #3, !dbg !43
  %335 = select i1 %333, float 0.000000e+00, float %334, !dbg !44
  %336 = fmul float %331, %335, !dbg !45
  %337 = fadd float %316, %336, !dbg !46
  %338 = fadd float %321, %327, !dbg !47
  %339 = fmul float %331, %331, !dbg !48
  %340 = fmul float %311, %339, !dbg !49
  %341 = fmul float %335, %340, !dbg !50
  %342 = fadd float %338, %341, !dbg !51
  %343 = and i32 %9, 15, !dbg !52
  %344 = icmp eq i32 %343, 0, !dbg !52
  %345 = and i1 %251, %344, !dbg !52
  %346 = bitcast float %337 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %346, i1 %345) #3, !dbg !52
  %347 = bitcast float %342 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %347, i1 %345) #3, !dbg !52
  %348 = bitcast float %332 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %348, i1 %345) #3, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %349 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !52
  %350 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !52
  %351 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !52
  %352 = sext i32 %7 to i64, !dbg !53
  %353 = getelementptr float, ptr addrspace(1) %2, i64 %352, !dbg !53
  %urem = and i32 %9, 511, !dbg !54
  %354 = icmp eq i32 %urem, 0, !dbg !54
  %355 = and i1 %354, %8, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %349, ptr addrspace(1) %353, i1 %355) #3, !dbg !54
  %356 = getelementptr float, ptr addrspace(1) %3, i64 %352, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %356, i1 %355) #3, !dbg !56
  %357 = getelementptr float, ptr addrspace(1) %4, i64 %352, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %351, ptr addrspace(1) %357, i1 %355) #3, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp62fa47se5lxpcdkq6nl6ygukvrkjmjytktnrjgl4plgctz42ri.py", directory: "inductor_cache/p6")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_4", linkageName: "triton_red_fused_convolution_native_group_norm_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 21, scope: !7)
!14 = !DILocation(line: 27, column: 26, scope: !7)
!15 = !DILocation(line: 28, column: 30, scope: !7)
!16 = !DILocation(line: 28, column: 35, scope: !7)
!17 = !DILocation(line: 36, column: 49, scope: !7)
!18 = !DILocation(line: 32, column: 36, scope: !7)
!19 = !DILocation(line: 36, column: 38, scope: !7)
!20 = !DILocation(line: 36, column: 54, scope: !7)
!21 = !DILocation(line: 37, column: 22, scope: !7)
!22 = !DILocation(line: 45, column: 54, scope: !7)
!23 = !DILocation(line: 44, column: 56, scope: !7)
!24 = !DILocation(line: 42, column: 52, scope: !7)
!25 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 40, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 43, column: 48, scope: !7)
!36 = distinct !{!36, !37}
!37 = !{!"llvm.loop.peeled.count", i32 1}
!38 = !DILocation(line: 192, column: 21, scope: !39, inlinedAt: !40)
!39 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!40 = !DILocation(line: 47, column: 41, scope: !7)
!41 = !DILocation(line: 193, column: 28, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 194, column: 39, scope: !39, inlinedAt: !40)
!43 = !DILocation(line: 194, column: 60, scope: !39, inlinedAt: !40)
!44 = !DILocation(line: 194, column: 49, scope: !39, inlinedAt: !40)
!45 = !DILocation(line: 196, column: 25, scope: !39, inlinedAt: !40)
!46 = !DILocation(line: 196, column: 17, scope: !39, inlinedAt: !40)
!47 = !DILocation(line: 197, column: 15, scope: !39, inlinedAt: !40)
!48 = !DILocation(line: 197, column: 30, scope: !39, inlinedAt: !40)
!49 = !DILocation(line: 197, column: 38, scope: !39, inlinedAt: !40)
!50 = !DILocation(line: 197, column: 49, scope: !39, inlinedAt: !40)
!51 = !DILocation(line: 197, column: 22, scope: !39, inlinedAt: !40)
!52 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !40)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 36, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 36, scope: !7)
!59 = !DILocation(line: 54, column: 4, scope: !7)
