; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 192, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 4, !dbg !15
  %11 = srem i32 %10, 12, !dbg !16
  %12 = mul i32 %10, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %12, !dbg !17
  %.frozen5 = freeze i32 %8, !dbg !18
  %13 = sdiv i32 %.frozen5, 48, !dbg !18
  %14 = icmp slt i32 %11, 4, !dbg !19
  %15 = add nsw i32 %.decomposed, 16, !dbg !20
  %16 = shl nsw i32 %11, 2, !dbg !21
  %17 = shl i32 %13, 6, !dbg !22
  %18 = add nuw i32 %17, %15, !dbg !23
  %19 = add i32 %18, %16, !dbg !24
  %20 = sext i32 %19 to i64, !dbg !25
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !25
  %22 = and i1 %9, %14, !dbg !26
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %22, i32 0, i1 %22) #3, !dbg !27
  %24 = bitcast i32 %23 to float, !dbg !27
  %25 = add nsw i32 %.decomposed, 32, !dbg !28
  %26 = add nuw i32 %17, %25, !dbg !29
  %27 = add i32 %26, %16, !dbg !30
  %28 = sext i32 %27 to i64, !dbg !31
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !31
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22) #3, !dbg !32
  %31 = bitcast i32 %30 to float, !dbg !32
  %32 = fsub float %24, %31, !dbg !33
  %33 = fmul float %32, 0x3FFBB67AE0000000, !dbg !34
  %34 = mul i32 %13, 48, !dbg !35
  %srem.decomposed = sub i32 %.frozen5, %34, !dbg !35
  %35 = add i32 %17, %srem.decomposed, !dbg !36
  %36 = sext i32 %35 to i64, !dbg !37
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !37
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %22, i32 0, i1 %22) #3, !dbg !38
  %39 = bitcast i32 %38 to float, !dbg !38
  %40 = fmul float %39, 2.000000e+00, !dbg !39
  %41 = fsub float %40, %24, !dbg !40
  %42 = fsub float %41, %31, !dbg !41
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i3 = icmp eq i32 %43, 0, !dbg !42
  %44 = tail call float @llvm.nvvm.fabs.ftz.f(float %42) #3, !dbg !42
  %45 = tail call float @llvm.nvvm.fabs.f(float %42) #3, !dbg !42
  %.02.i = select i1 %.not.i3, float %45, float %44, !dbg !42
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not3.i = icmp eq i32 %46, 0, !dbg !42
  %47 = tail call float @llvm.nvvm.fabs.ftz.f(float %33) #3, !dbg !42
  %48 = tail call float @llvm.nvvm.fabs.f(float %33) #3, !dbg !42
  %.03.i = select i1 %.not3.i, float %48, float %47, !dbg !42
  %49 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !42
  %50 = fcmp oeq float %.03.i, 0.000000e+00, !dbg !42
  %or.cond.i = select i1 %49, i1 %50, i1 false, !dbg !42
  br i1 %or.cond.i, label %51, label %57, !dbg !42

51:                                               ; preds = %3
  %52 = bitcast float %42 to i32, !dbg !42
  %53 = icmp slt i32 %52, 0, !dbg !42
  %54 = select i1 %53, i32 1078530011, i32 0, !dbg !42
  %55 = bitcast i32 %54 to float, !dbg !42
  %56 = tail call float @llvm.copysign.f32(float %55, float %33), !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

57:                                               ; preds = %3
  %58 = fcmp oeq float %.02.i, 0x7FF0000000000000, !dbg !42
  %59 = fcmp oeq float %.03.i, 0x7FF0000000000000, !dbg !42
  %or.cond2.i = select i1 %58, i1 %59, i1 false, !dbg !42
  br i1 %or.cond2.i, label %60, label %__nv_fmaxf.exit.i, !dbg !42

60:                                               ; preds = %57
  %61 = bitcast float %42 to i32, !dbg !42
  %62 = icmp slt i32 %61, 0, !dbg !42
  %63 = select i1 %62, i32 1075235812, i32 1061752795, !dbg !42
  %64 = bitcast i32 %63 to float, !dbg !42
  %65 = tail call float @llvm.copysign.f32(float %64, float %33), !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

__nv_fmaxf.exit.i:                                ; preds = %57
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not4.i = icmp eq i32 %66, 0, !dbg !42
  %67 = tail call float @llvm.nvvm.fmax.ftz.f(float %.03.i, float %.02.i) #3, !dbg !42
  %68 = tail call float @llvm.nvvm.fmax.f(float %.03.i, float %.02.i) #3, !dbg !42
  %.01.i = select i1 %.not4.i, float %68, float %67, !dbg !42
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not5.i = icmp eq i32 %69, 0, !dbg !42
  %70 = tail call float @llvm.nvvm.fmin.ftz.f(float %.03.i, float %.02.i) #3, !dbg !42
  %71 = tail call float @llvm.nvvm.fmin.f(float %.03.i, float %.02.i) #3, !dbg !42
  %.0.i4 = select i1 %.not5.i, float %71, float %70, !dbg !42
  %72 = fdiv float %.0.i4, %.01.i, !dbg !42
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not6.i = icmp eq i32 %73, 0, !dbg !42
  %74 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %72, float %72) #3, !dbg !42
  %75 = tail call float @llvm.nvvm.mul.rn.f(float %72, float %72) #3, !dbg !42
  %.04.i = select i1 %.not6.i, float %75, float %74, !dbg !42
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not7.i = icmp eq i32 %76, 0, !dbg !42
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float 0xBFEA58FD40000000, float 0xC016B31060000000) #3, !dbg !42
  %.05.i = select i1 %.not7.i, float %78, float %77, !dbg !42
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not8.i = icmp eq i32 %79, 0, !dbg !42
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %.04.i, float 0xC01A4320E0000000) #3, !dbg !42
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %.04.i, float 0xC01A4320E0000000) #3, !dbg !42
  %.06.i = select i1 %.not8.i, float %81, float %80, !dbg !42
  %82 = fmul float %.04.i, %.06.i, !dbg !42
  %83 = fmul float %72, %82, !dbg !42
  %84 = fadd float %.04.i, 0x4026ABB800000000, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not9.i = icmp eq i32 %85, 0, !dbg !42
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %84, float %.04.i, float 0x403CD7AC00000000) #3, !dbg !42
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %84, float %.04.i, float 0x403CD7AC00000000) #3, !dbg !42
  %.07.i = select i1 %.not9.i, float %87, float %86, !dbg !42
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not10.i = icmp eq i32 %88, 0, !dbg !42
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %.04.i, float 0x4033B25900000000) #3, !dbg !42
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %.04.i, float 0x4033B25900000000) #3, !dbg !42
  %.08.i = select i1 %.not10.i, float %90, float %89, !dbg !42
  %91 = fdiv float 1.000000e+00, %.08.i, !dbg !42
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not11.i = icmp eq i32 %92, 0, !dbg !42
  %93 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %83, float %91, float %72) #3, !dbg !42
  %94 = tail call float @llvm.nvvm.fma.rn.f(float %83, float %91, float %72) #3, !dbg !42
  %.09.i = select i1 %.not11.i, float %94, float %93, !dbg !42
  %95 = fcmp ogt float %.03.i, %.02.i, !dbg !42
  %96 = fsub float 0x3FF921FB60000000, %.09.i, !dbg !42
  %t0.0.i = select i1 %95, float %96, float %.09.i, !dbg !42
  %97 = bitcast float %42 to i32, !dbg !42
  %98 = icmp slt i32 %97, 0, !dbg !42
  %99 = fsub float 0x400921FB60000000, %t0.0.i, !dbg !42
  %t0.1.i = select i1 %98, float %99, float %t0.0.i, !dbg !42
  %100 = bitcast float %t0.1.i to i32, !dbg !42
  %101 = bitcast float %33 to i32, !dbg !42
  %102 = and i32 %101, -2147483648, !dbg !42
  %103 = or i32 %102, %100, !dbg !42
  %104 = bitcast i32 %103 to float, !dbg !42
  %105 = fadd float %.03.i, %.02.i, !dbg !42
  %106 = fcmp ord float %105, 0.000000e+00, !dbg !42
  %t0.2.i = select i1 %106, float %104, float %105, !dbg !42
  br label %__nv_atan2f.exit, !dbg !42

__nv_atan2f.exit:                                 ; preds = %51, %60, %__nv_fmaxf.exit.i
  %t0.4.i = phi float [ %56, %51 ], [ %65, %60 ], [ %t0.2.i, %__nv_fmaxf.exit.i ], !dbg !42
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %t0.4.i, float 0x401921FB60000000) #3, !dbg !43
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %108, 0, !dbg !43
  %109 = tail call float @llvm.nvvm.floor.ftz.f(float %107), !dbg !43
  %110 = tail call float @llvm.nvvm.floor.f(float %107), !dbg !43
  %.0.i = select i1 %.not.i, float %110, float %109, !dbg !43
  %111 = fmul float %.0.i, 0x401921FB60000000, !dbg !43
  %112 = fsub float %t0.4.i, %111, !dbg !43
  %113 = fcmp olt float %112, 0.000000e+00, !dbg !44
  %114 = fadd float %112, 0x401921FB60000000, !dbg !45
  %115 = select i1 %113, float %114, float %112, !dbg !46
  %116 = fmul float %115, 0x3FC45F3060000000, !dbg !47
  %117 = and i32 %11, -4, !dbg !48
  %118 = icmp eq i32 %117, 4, !dbg !48
  %119 = add nsw i32 %16, -16, !dbg !49
  %120 = add i32 %17, %.decomposed, !dbg !50
  %121 = add i32 %120, %119, !dbg !51
  %122 = sext i32 %121 to i64, !dbg !52
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !52
  %124 = and i1 %9, %118, !dbg !53
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %124, i32 0, i1 %124) #3, !dbg !54
  %126 = bitcast i32 %125 to float, !dbg !54
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %124, i32 0, i1 %124) #3, !dbg !55
  %128 = bitcast i32 %127 to float, !dbg !55
  %129 = fcmp olt float %126, %128, !dbg !56
  %130 = fcmp uno float %126, 0.000000e+00, !dbg !60
  %131 = or i1 %130, %129, !dbg !61
  %132 = select i1 %131, float %126, float %128, !dbg !62
  %133 = add i32 %26, %119, !dbg !63
  %134 = sext i32 %133 to i64, !dbg !64
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !64
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %124, i32 0, i1 %124) #3, !dbg !65
  %137 = bitcast i32 %136 to float, !dbg !65
  %138 = fcmp olt float %132, %137, !dbg !66
  %139 = fcmp uno float %132, 0.000000e+00, !dbg !68
  %140 = or i1 %138, %139, !dbg !69
  %141 = select i1 %140, float %132, float %137, !dbg !70
  %142 = add nsw i32 %.decomposed, 48, !dbg !71
  %143 = add nuw i32 %17, %142, !dbg !72
  %144 = add i32 %143, %119, !dbg !73
  %145 = sext i32 %144 to i64, !dbg !74
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !74
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %124, i32 0, i1 %124) #3, !dbg !75
  %148 = bitcast i32 %147 to float, !dbg !75
  %149 = fcmp olt float %141, %148, !dbg !76
  %150 = fcmp uno float %141, 0.000000e+00, !dbg !78
  %151 = or i1 %149, %150, !dbg !79
  %152 = select i1 %151, float %141, float %148, !dbg !80
  %153 = fcmp ogt float %126, %128, !dbg !81
  %154 = or i1 %130, %153, !dbg !83
  %155 = select i1 %154, float %126, float %128, !dbg !84
  %156 = fcmp ogt float %155, %137, !dbg !85
  %157 = fcmp uno float %155, 0.000000e+00, !dbg !87
  %158 = or i1 %156, %157, !dbg !88
  %159 = select i1 %158, float %155, float %137, !dbg !89
  %160 = fcmp ogt float %159, %148, !dbg !90
  %161 = fcmp uno float %159, 0.000000e+00, !dbg !92
  %162 = or i1 %160, %161, !dbg !93
  %163 = select i1 %162, float %159, float %148, !dbg !94
  %164 = fadd float %163, 0x3E45798EE0000000, !dbg !95
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %164) #3, !dbg !96
  %166 = fsub float 1.000000e+00, %165, !dbg !97
  %167 = icmp sgt i32 %11, 7, !dbg !98
  %168 = add nsw i32 %16, -32, !dbg !99
  %169 = add i32 %120, %168, !dbg !100
  %170 = sext i32 %169 to i64, !dbg !101
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !101
  %172 = and i1 %9, %167, !dbg !102
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %172, i32 0, i1 %172) #3, !dbg !103
  %174 = bitcast i32 %173 to float, !dbg !103
  %175 = add i32 %18, %168, !dbg !104
  %176 = sext i32 %175 to i64, !dbg !105
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !105
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %172, i32 0, i1 %172) #3, !dbg !106
  %179 = bitcast i32 %178 to float, !dbg !106
  %180 = fcmp ogt float %174, %179, !dbg !107
  %181 = fcmp uno float %174, 0.000000e+00, !dbg !109
  %182 = or i1 %181, %180, !dbg !110
  %183 = select i1 %182, float %174, float %179, !dbg !111
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %172, i32 0, i1 %172) #3, !dbg !112
  %185 = bitcast i32 %184 to float, !dbg !112
  %186 = fcmp ogt float %183, %185, !dbg !113
  %187 = fcmp uno float %183, 0.000000e+00, !dbg !115
  %188 = or i1 %186, %187, !dbg !116
  %189 = select i1 %188, float %183, float %185, !dbg !117
  %190 = add i32 %143, %168, !dbg !118
  %191 = sext i32 %190 to i64, !dbg !119
  %192 = getelementptr float, ptr addrspace(1) %0, i64 %191, !dbg !119
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %172, i32 0, i1 %172) #3, !dbg !120
  %194 = bitcast i32 %193 to float, !dbg !120
  %195 = fcmp ogt float %189, %194, !dbg !121
  %196 = fcmp uno float %189, 0.000000e+00, !dbg !123
  %197 = or i1 %195, %196, !dbg !124
  %198 = select i1 %197, float %189, float %194, !dbg !125
  %199 = select i1 %167, float %198, float 0.000000e+00, !dbg !126
  %200 = select i1 %118, float %166, float %199, !dbg !127
  %201 = select i1 %14, float %116, float %200, !dbg !127
  %202 = sext i32 %8 to i64, !dbg !128
  %203 = getelementptr float, ptr addrspace(1) %1, i64 %202, !dbg !128
  %204 = bitcast float %201 to i32, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %203, i1 %9) #3, !dbg !129
  ret void, !dbg !130
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmax.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmax.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmin.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fmin.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpy3dtspa76vnxf7yr2srtqup3sgm6ki7rxft3ta6itk34x3l5rq.py", directory: "inductor_cache/py")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 52, scope: !7)
!23 = !DILocation(line: 33, column: 40, scope: !7)
!24 = !DILocation(line: 33, column: 49, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 64, scope: !7)
!27 = !DILocation(line: 33, column: 57, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 40, scope: !7)
!30 = !DILocation(line: 34, column: 49, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 57, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 40, column: 20, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 20, scope: !7)
!42 = !DILocation(line: 43, column: 34, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 35, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 39, scope: !7)
!50 = !DILocation(line: 62, column: 36, scope: !7)
!51 = !DILocation(line: 62, column: 52, scope: !7)
!52 = !DILocation(line: 62, column: 31, scope: !7)
!53 = !DILocation(line: 62, column: 68, scope: !7)
!54 = !DILocation(line: 62, column: 60, scope: !7)
!55 = !DILocation(line: 63, column: 65, scope: !7)
!56 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 64, column: 42, scope: !7)
!60 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 65, column: 57, scope: !7)
!64 = !DILocation(line: 65, column: 31, scope: !7)
!65 = !DILocation(line: 65, column: 65, scope: !7)
!66 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !67)
!67 = !DILocation(line: 66, column: 42, scope: !7)
!68 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !67)
!69 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !67)
!70 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !67)
!71 = !DILocation(line: 67, column: 36, scope: !7)
!72 = !DILocation(line: 67, column: 41, scope: !7)
!73 = !DILocation(line: 67, column: 57, scope: !7)
!74 = !DILocation(line: 67, column: 31, scope: !7)
!75 = !DILocation(line: 67, column: 65, scope: !7)
!76 = !DILocation(line: 110, column: 15, scope: !57, inlinedAt: !77)
!77 = !DILocation(line: 68, column: 42, scope: !7)
!78 = !DILocation(line: 112, column: 21, scope: !57, inlinedAt: !77)
!79 = !DILocation(line: 112, column: 16, scope: !57, inlinedAt: !77)
!80 = !DILocation(line: 113, column: 29, scope: !57, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !82)
!82 = !DILocation(line: 69, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !82)
!84 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !82)
!85 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !86)
!86 = !DILocation(line: 70, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !91)
!91 = !DILocation(line: 71, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !91)
!95 = !DILocation(line: 73, column: 20, scope: !7)
!96 = !DILocation(line: 74, column: 20, scope: !7)
!97 = !DILocation(line: 76, column: 20, scope: !7)
!98 = !DILocation(line: 79, column: 20, scope: !7)
!99 = !DILocation(line: 82, column: 39, scope: !7)
!100 = !DILocation(line: 82, column: 52, scope: !7)
!101 = !DILocation(line: 82, column: 31, scope: !7)
!102 = !DILocation(line: 82, column: 68, scope: !7)
!103 = !DILocation(line: 82, column: 60, scope: !7)
!104 = !DILocation(line: 83, column: 57, scope: !7)
!105 = !DILocation(line: 83, column: 31, scope: !7)
!106 = !DILocation(line: 83, column: 65, scope: !7)
!107 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !108)
!108 = !DILocation(line: 84, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !108)
!112 = !DILocation(line: 85, column: 65, scope: !7)
!113 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !114)
!114 = !DILocation(line: 86, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !114)
!118 = !DILocation(line: 87, column: 57, scope: !7)
!119 = !DILocation(line: 87, column: 31, scope: !7)
!120 = !DILocation(line: 87, column: 65, scope: !7)
!121 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !122)
!122 = !DILocation(line: 88, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !122)
!126 = !DILocation(line: 90, column: 35, scope: !7)
!127 = !DILocation(line: 0, scope: !7)
!128 = !DILocation(line: 93, column: 25, scope: !7)
!129 = !DILocation(line: 93, column: 37, scope: !7)
!130 = !DILocation(line: 93, column: 4, scope: !7)
