#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":41:24)
#loc29 = loc(callsite(#loc1 at #loc19))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_fill_log_neg_sum_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.750000119> : tensor<1x256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<7.500000e-01> : tensor<1x256xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<192> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<48> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<16> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc2)
    %2 = arith.cmpi slt, %1, %cst_2 : tensor<1x256xi32, #blocked> loc(#loc3)
    %3 = arith.remsi %1, %cst_3 : tensor<1x256xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %1, %cst_3 : tensor<1x256xi32, #blocked> loc(#loc5)
    %5 = arith.addi %3, %cst_4 : tensor<1x256xi32, #blocked> loc(#loc6)
    %6 = arith.muli %4, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc7)
    %7 = arith.addi %5, %6 : tensor<1x256xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %7 : tensor<1x256x!tt.ptr<f32>, #blocked>, tensor<1x256xi32, #blocked> loc(#loc9)
    %10 = tt.load %9, %2, %cst : tensor<1x256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %11 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc11)
    %12 = tt.load %11 : !tt.ptr<f32> loc(#loc12)
    %13 = tt.splat %12 : f32 -> tensor<1x1xf32, #blocked1> loc(#loc13)
    %14 = arith.addf %10, %cst_0 : tensor<1x256xf32, #blocked> loc(#loc14)
    %15 = arith.divf %cst_1, %14 : tensor<1x256xf32, #blocked> loc(#loc15)
    %16 = math.log %15 : tensor<1x256xf32, #blocked> loc(#loc16)
    %17 = arith.select %2, %16, %cst : tensor<1x256xi1, #blocked>, tensor<1x256xf32, #blocked> loc(#loc17)
    %18 = "tt.reduce"(%17) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc19)), %arg4: f32 loc(callsite(#loc1 at #loc19))):
      %25 = arith.addf %arg3, %arg4 : f32 loc(#loc31)
      tt.reduce.return %25 : f32 loc(#loc28)
    }) : (tensor<1x256xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc28)
    %19 = triton_gpu.convert_layout %18 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc22)
    %21 = arith.addf %13, %20 : tensor<1x1xf32, #blocked1> loc(#loc23)
    %22 = arith.subf %cst_7, %21 : tensor<1x1xf32, #blocked1> loc(#loc24)
    %23 = arith.mulf %22, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc21)
    gpu.barrier loc(#loc25)
    %24 = tt.splat %11 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    tt.store %24, %23 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":26:34)
#loc3 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":28:21)
#loc4 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":29:19)
#loc5 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":30:19)
#loc6 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":31:35)
#loc7 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":31:43)
#loc8 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":31:40)
#loc9 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":31:30)
#loc10 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":31:48)
#loc11 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":32:35)
#loc12 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":32:20)
#loc13 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":33:35)
#loc14 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":35:18)
#loc15 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":37:18)
#loc16 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":38:23)
#loc17 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":40:33)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":45:20)
#loc22 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":41:27)
#loc23 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":42:20)
#loc24 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":43:13)
#loc25 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":46:4)
#loc26 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":47:71)
#loc27 = loc("inductor_cache/uz/cuzee45aaokq3zc5zimqv5du7mcojn2ee7jhvsgnwb2ov235k2d2.py":47:4)
#loc28 = loc(callsite(#loc18 at #loc19))
#loc30 = loc(callsite(#loc20 at #loc18))
#loc31 = loc(callsite(#loc30 at #loc19))
