; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 7, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = and i32 %20, 127, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !13
  %23 = icmp slt i32 %22, 768, !dbg !14
  %.frozen = freeze i32 %22, !dbg !15
  %24 = sdiv i32 %.frozen, 16, !dbg !15
  %25 = srem i32 %24, 12, !dbg !16
  %26 = mul i32 %24, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %.frozen11 = freeze i32 %22, !dbg !18
  %27 = sdiv i32 %.frozen11, 192, !dbg !18
  %28 = icmp slt i32 %25, 4, !dbg !19
  %29 = mul i32 %27, 192, !dbg !20
  %srem.decomposed = sub i32 %.frozen11, %29, !dbg !20
  %30 = shl nsw i32 %27, 6, !dbg !21
  %31 = add nsw i32 %30, %srem.decomposed, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = and i1 %23, %28, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #3, !dbg !25
  %36 = sext i32 %25 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %34, i32 0, i1 %34) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fadd float %41, 0x3EE4F8B580000000, !dbg !30
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %43, 0, !dbg !31
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %44, 0, !dbg !31
  br i1 %.not.i, label %50, label %45, !dbg !31

45:                                               ; preds = %17
  br i1 %.not1.i, label %48, label %46, !dbg !31

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

50:                                               ; preds = %17
  br i1 %.not1.i, label %53, label %51, !dbg !31

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !31
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #3, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %34, i32 0, i1 %34) #3, !dbg !36
  %60 = and i32 %25, -4, !dbg !37
  %61 = icmp eq i32 %60, 4, !dbg !37
  %62 = add nsw i32 %25, -4, !dbg !38
  %63 = shl nsw i32 %62, 4, !dbg !39
  %64 = add nsw i32 %30, %.decomposed, !dbg !40
  %65 = add nsw i32 %64, %63, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !42
  %68 = and i1 %23, %61, !dbg !43
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %68, i32 0, i1 %68) #3, !dbg !44
  %70 = sext i32 %62 to i64, !dbg !45
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %70, !dbg !45
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %68, i32 0, i1 %68) #3, !dbg !46
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !47
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %68, i32 0, i1 %68) #3, !dbg !48
  %75 = bitcast i32 %74 to float, !dbg !48
  %76 = fadd float %75, 0x3EE4F8B580000000, !dbg !49
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !50
  %.not.i1 = icmp eq i32 %77, 0, !dbg !50
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !50
  %.not1.i4 = icmp eq i32 %78, 0, !dbg !50
  br i1 %.not.i1, label %84, label %79, !dbg !50

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %82, label %80, !dbg !50

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %87, label %85, !dbg !50

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !50
  br label %__nv_sqrtf.exit5, !dbg !50

__nv_sqrtf.exit5:                                 ; preds = %80, %82, %85, %87
  %.0.i3 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !50
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %90 = getelementptr float, ptr addrspace(1) %8, i64 %70, !dbg !52
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %68, i32 0, i1 %68) #3, !dbg !53
  %92 = getelementptr float, ptr addrspace(1) %9, i64 %70, !dbg !54
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %68, i32 0, i1 %68) #3, !dbg !55
  %94 = icmp sgt i32 %25, 7, !dbg !56
  %95 = add nsw i32 %25, -8, !dbg !57
  %96 = shl nsw i32 %95, 4, !dbg !58
  %97 = add nsw i32 %64, %96, !dbg !59
  %98 = sext i32 %97 to i64, !dbg !60
  %99 = getelementptr float, ptr addrspace(1) %10, i64 %98, !dbg !60
  %100 = and i1 %23, %94, !dbg !61
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 0, i1 %100) #3, !dbg !62
  %102 = sext i32 %95 to i64, !dbg !63
  %103 = getelementptr float, ptr addrspace(1) %11, i64 %102, !dbg !63
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %100, i32 0, i1 %100) #3, !dbg !64
  %105 = getelementptr float, ptr addrspace(1) %12, i64 %102, !dbg !65
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %100, i32 0, i1 %100) #3, !dbg !66
  %107 = bitcast i32 %106 to float, !dbg !66
  %108 = fadd float %107, 0x3EE4F8B580000000, !dbg !67
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i6 = icmp eq i32 %109, 0, !dbg !68
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !68
  br i1 %.not.i6, label %116, label %111, !dbg !68

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !68

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !68

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit10, !dbg !68

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !68
  %121 = bitcast i32 %101 to float, !dbg !62
  %122 = bitcast i32 %104 to float, !dbg !64
  %123 = fsub float %121, %122, !dbg !69
  %124 = bitcast i32 %69 to float, !dbg !44
  %125 = bitcast i32 %72 to float, !dbg !46
  %126 = fsub float %124, %125, !dbg !70
  %127 = fmul float %126, %89, !dbg !71
  %128 = bitcast i32 %91 to float, !dbg !53
  %129 = fmul float %127, %128, !dbg !72
  %130 = bitcast i32 %93 to float, !dbg !55
  %131 = fadd float %129, %130, !dbg !73
  %132 = fcmp olt float %131, 0.000000e+00, !dbg !74
  %133 = select i1 %132, float 0.000000e+00, float %131, !dbg !78
  %134 = bitcast i32 %35 to float, !dbg !25
  %135 = bitcast i32 %38 to float, !dbg !27
  %136 = fsub float %134, %135, !dbg !79
  %137 = fmul float %136, %55, !dbg !80
  %138 = bitcast i32 %57 to float, !dbg !34
  %139 = fmul float %137, %138, !dbg !81
  %140 = bitcast i32 %59 to float, !dbg !36
  %141 = fadd float %139, %140, !dbg !82
  %142 = fcmp olt float %141, 0.000000e+00, !dbg !83
  %143 = select i1 %142, float 0.000000e+00, float %141, !dbg !85
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !86
  %145 = fmul float %123, %144, !dbg !87
  %146 = getelementptr float, ptr addrspace(1) %13, i64 %102, !dbg !88
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %100, i32 0, i1 %100) #3, !dbg !89
  %148 = bitcast i32 %147 to float, !dbg !89
  %149 = fmul float %145, %148, !dbg !90
  %150 = getelementptr float, ptr addrspace(1) %14, i64 %102, !dbg !91
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %100, i32 0, i1 %100) #3, !dbg !92
  %152 = bitcast i32 %151 to float, !dbg !92
  %153 = fadd float %149, %152, !dbg !93
  %154 = fcmp olt float %153, 0.000000e+00, !dbg !94
  %155 = select i1 %154, float 0.000000e+00, float %153, !dbg !96
  %156 = select i1 %94, float %155, float 0.000000e+00, !dbg !97
  %157 = select i1 %61, float %133, float %156, !dbg !98
  %158 = select i1 %28, float %143, float %157, !dbg !98
  %159 = sext i32 %22 to i64, !dbg !99
  %160 = getelementptr float, ptr addrspace(1) %15, i64 %159, !dbg !99
  %161 = bitcast float %158 to i32, !dbg !100
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %160, i1 %23) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "co6s2hhmt56zyi6py6mq4cwgl2c4lde57yn34vkvoavxlpzr23ao.py", directory: "inductor_cache/o6")
!4 = !{ptr @triton_poi_fused_cat_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_1", linkageName: "triton_poi_fused_cat_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 60, scope: !7)
!25 = !DILocation(line: 33, column: 53, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 27, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 47, column: 31, scope: !7)
!36 = !DILocation(line: 47, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 47, scope: !7)
!39 = !DILocation(line: 57, column: 40, scope: !7)
!40 = !DILocation(line: 57, column: 36, scope: !7)
!41 = !DILocation(line: 57, column: 53, scope: !7)
!42 = !DILocation(line: 57, column: 31, scope: !7)
!43 = !DILocation(line: 57, column: 69, scope: !7)
!44 = !DILocation(line: 57, column: 61, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 43, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 43, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 27, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 31, scope: !7)
!53 = !DILocation(line: 69, column: 43, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 43, scope: !7)
!56 = !DILocation(line: 77, column: 20, scope: !7)
!57 = !DILocation(line: 80, column: 48, scope: !7)
!58 = !DILocation(line: 80, column: 41, scope: !7)
!59 = !DILocation(line: 80, column: 54, scope: !7)
!60 = !DILocation(line: 80, column: 32, scope: !7)
!61 = !DILocation(line: 80, column: 70, scope: !7)
!62 = !DILocation(line: 80, column: 62, scope: !7)
!63 = !DILocation(line: 81, column: 32, scope: !7)
!64 = !DILocation(line: 81, column: 44, scope: !7)
!65 = !DILocation(line: 83, column: 32, scope: !7)
!66 = !DILocation(line: 83, column: 44, scope: !7)
!67 = !DILocation(line: 85, column: 20, scope: !7)
!68 = !DILocation(line: 86, column: 27, scope: !7)
!69 = !DILocation(line: 82, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 68, column: 20, scope: !7)
!72 = !DILocation(line: 70, column: 20, scope: !7)
!73 = !DILocation(line: 72, column: 20, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 74, column: 42, scope: !7)
!78 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 35, column: 18, scope: !7)
!80 = !DILocation(line: 44, column: 19, scope: !7)
!81 = !DILocation(line: 46, column: 20, scope: !7)
!82 = !DILocation(line: 48, column: 20, scope: !7)
!83 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !84)
!84 = !DILocation(line: 50, column: 42, scope: !7)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !84)
!86 = !DILocation(line: 88, column: 20, scope: !7)
!87 = !DILocation(line: 91, column: 20, scope: !7)
!88 = !DILocation(line: 92, column: 32, scope: !7)
!89 = !DILocation(line: 92, column: 44, scope: !7)
!90 = !DILocation(line: 93, column: 20, scope: !7)
!91 = !DILocation(line: 94, column: 32, scope: !7)
!92 = !DILocation(line: 94, column: 44, scope: !7)
!93 = !DILocation(line: 95, column: 20, scope: !7)
!94 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !95)
!95 = !DILocation(line: 97, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !95)
!97 = !DILocation(line: 99, column: 35, scope: !7)
!98 = !DILocation(line: 0, scope: !7)
!99 = !DILocation(line: 102, column: 25, scope: !7)
!100 = !DILocation(line: 102, column: 37, scope: !7)
!101 = !DILocation(line: 102, column: 4, scope: !7)
