; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_native_group_norm_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 64, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 511, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %11, 1024, !dbg !12
  %14 = or disjoint i32 %11, 1536, !dbg !12
  %15 = shl i32 %10, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = srem i32 %8, 16, !dbg !13
  %18 = shl i32 %8, 13, !dbg !14
  %19 = shl nsw i32 %17, 4, !dbg !15
  %20 = or disjoint i32 %18, %16
  %.idx = shl nuw nsw i32 %16, 3
  %21 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %22 = shl nuw nsw i32 %16, 1
  %23 = or disjoint i32 %22, 2
  %24 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23
  %25 = or disjoint i32 %22, 4
  %26 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25
  %27 = or disjoint i32 %22, 6
  %28 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27
  %.idx1 = shl nuw nsw i32 %11, 3
  %29 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %12, 3
  %30 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %33 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %38 = sext i32 %20 to i64, !dbg !16
  %39 = sext i32 %19 to i64, !dbg !16
  %invariant.gep = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !16
  %40 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 4
  %41 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 8
  %42 = getelementptr inbounds i8, ptr addrspace(3) %37, i32 12
  br label %43, !dbg !16

43:                                               ; preds = %7, %._crit_edge
  %indvars.iv = phi i64 [ 0, %7 ], [ %indvars.iv.next, %._crit_edge ]
  %44 = phi float [ 0.000000e+00, %7 ], [ %136, %._crit_edge ]
  %45 = phi float [ 0.000000e+00, %7 ], [ %137, %._crit_edge ]
  %46 = phi float [ 0.000000e+00, %7 ], [ %138, %._crit_edge ]
  %47 = phi float [ 0.000000e+00, %7 ], [ %139, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %7 ], [ %132, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %7 ], [ %133, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %7 ], [ %134, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %7 ], [ %135, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %7 ], [ %128, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %7 ], [ %129, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %7 ], [ %130, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %7 ], [ %131, %._crit_edge ]
  %56 = lshr exact i64 %indvars.iv, 9, !dbg !17
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !18
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %gep, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #3, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !19
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !19
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %62 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %21, <1 x i32> %62, i1 true) #3, !dbg !19
  %63 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %24, <1 x i32> %63, i1 true) #3, !dbg !19
  %64 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %26, <1 x i32> %64, i1 true) #3, !dbg !19
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !19
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %28, <1 x i32> %65, i1 true) #3, !dbg !19
  tail call void @llvm.nvvm.barrier0(), !dbg !19
  %66 = load float, ptr addrspace(3) %29, align 8, !dbg !19
  %67 = load float, ptr addrspace(3) %30, align 8, !dbg !19
  %68 = load float, ptr addrspace(3) %31, align 8, !dbg !19
  %69 = load float, ptr addrspace(3) %32, align 8, !dbg !19
  %70 = add nuw nsw i64 %56, %39, !dbg !20
  %71 = or disjoint i64 %70, 1, !dbg !20
  %72 = or disjoint i64 %70, 2, !dbg !20
  %73 = or disjoint i64 %70, 3, !dbg !20
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !21
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !21
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !21
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %79 = bitcast i32 %78 to float, !dbg !22
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %81 = bitcast i32 %80 to float, !dbg !22
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %83 = bitcast i32 %82 to float, !dbg !22
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %9, i32 0, i1 %9) #3, !dbg !22
  %85 = bitcast i32 %84 to float, !dbg !22
  %86 = fadd float %66, %79, !dbg !23
  %87 = fadd float %67, %81, !dbg !23
  %88 = fadd float %68, %83, !dbg !23
  %89 = fadd float %69, %85, !dbg !23
  %90 = icmp eq i64 %indvars.iv, 0, !dbg !24
  br i1 %90, label %._crit_edge, label %91, !dbg !25

91:                                               ; preds = %43
  %92 = fsub float %86, %52, !dbg !29
  %93 = fsub float %87, %53, !dbg !29
  %94 = fsub float %88, %54, !dbg !29
  %95 = fsub float %89, %55, !dbg !29
  %96 = fadd float %44, 1.000000e+00, !dbg !30
  %97 = fadd float %45, 1.000000e+00, !dbg !30
  %98 = fadd float %46, 1.000000e+00, !dbg !30
  %99 = fadd float %47, 1.000000e+00, !dbg !30
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %96) #3, !dbg !31
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %97) #3, !dbg !31
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %98) #3, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %99) #3, !dbg !31
  %104 = fadd float %52, %100, !dbg !32
  %105 = fadd float %53, %101, !dbg !32
  %106 = fadd float %54, %102, !dbg !32
  %107 = fadd float %55, %103, !dbg !32
  %108 = fsub float %86, %104, !dbg !33
  %109 = fsub float %87, %105, !dbg !33
  %110 = fsub float %88, %106, !dbg !33
  %111 = fsub float %89, %107, !dbg !33
  %112 = fmul float %92, %108, !dbg !34
  %113 = fmul float %93, %109, !dbg !34
  %114 = fmul float %94, %110, !dbg !34
  %115 = fmul float %95, %111, !dbg !34
  %116 = fadd float %48, %112, !dbg !35
  %117 = fadd float %49, %113, !dbg !35
  %118 = fadd float %50, %114, !dbg !35
  %119 = fadd float %51, %115, !dbg !35
  br label %._crit_edge, !dbg !25

._crit_edge:                                      ; preds = %43, %91
  %120 = phi float [ %116, %91 ], [ 0.000000e+00, %43 ], !dbg !28
  %121 = phi float [ %117, %91 ], [ 0.000000e+00, %43 ], !dbg !28
  %122 = phi float [ %118, %91 ], [ 0.000000e+00, %43 ], !dbg !28
  %123 = phi float [ %119, %91 ], [ 0.000000e+00, %43 ], !dbg !28
  %.pn11 = phi float [ %104, %91 ], [ %86, %43 ]
  %.pn9 = phi float [ %105, %91 ], [ %87, %43 ]
  %.pn7 = phi float [ %106, %91 ], [ %88, %43 ]
  %.pn5 = phi float [ %107, %91 ], [ %89, %43 ]
  %124 = phi float [ %96, %91 ], [ 1.000000e+00, %43 ], !dbg !28
  %125 = phi float [ %97, %91 ], [ 1.000000e+00, %43 ], !dbg !28
  %126 = phi float [ %98, %91 ], [ 1.000000e+00, %43 ], !dbg !28
  %127 = phi float [ %99, %91 ], [ 1.000000e+00, %43 ], !dbg !28
  %128 = select i1 %9, float %.pn11, float %52, !dbg !36
  %129 = select i1 %9, float %.pn9, float %53, !dbg !36
  %130 = select i1 %9, float %.pn7, float %54, !dbg !36
  %131 = select i1 %9, float %.pn5, float %55, !dbg !36
  %132 = select i1 %9, float %120, float %48, !dbg !37
  %133 = select i1 %9, float %121, float %49, !dbg !37
  %134 = select i1 %9, float %122, float %50, !dbg !37
  %135 = select i1 %9, float %123, float %51, !dbg !37
  %136 = select i1 %9, float %124, float %44, !dbg !38
  %137 = select i1 %9, float %125, float %45, !dbg !38
  %138 = select i1 %9, float %126, float %46, !dbg !38
  %139 = select i1 %9, float %127, float %47, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %140 = bitcast float %86 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %33, <1 x i32> %140, i1 true) #3, !dbg !39
  %141 = bitcast float %87 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %141, i1 true) #3, !dbg !39
  %142 = bitcast float %88 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %142, i1 true) #3, !dbg !39
  %143 = bitcast float %89 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %143, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %.extract = load i32, ptr addrspace(3) %37, align 16, !dbg !39
  %.extract15 = load i32, ptr addrspace(3) %40, align 4, !dbg !39
  %.extract16 = load i32, ptr addrspace(3) %41, align 8, !dbg !39
  %.extract17 = load i32, ptr addrspace(3) %42, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %gep, i1 %9) #3, !dbg !39
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !16
  %144 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !16
  br i1 %144, label %43, label %145, !dbg !16

145:                                              ; preds = %._crit_edge
  %146 = lshr i32 %10, 5, !dbg !12
  %147 = and i32 %10, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %148 = fsub float %129, %128, !dbg !42
  %149 = fadd float %136, %137, !dbg !44
  %150 = fcmp oeq float %149, 0.000000e+00, !dbg !45
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %149) #3, !dbg !46
  %152 = select i1 %150, float 0.000000e+00, float %151, !dbg !47
  %153 = fmul float %148, %152, !dbg !48
  %154 = fadd float %128, %153, !dbg !49
  %155 = fadd float %132, %133, !dbg !50
  %156 = fmul float %148, %148, !dbg !51
  %157 = fmul float %156, %136, !dbg !52
  %158 = fmul float %157, %152, !dbg !53
  %159 = fadd float %155, %158, !dbg !54
  %160 = fsub float %130, %154, !dbg !42
  %161 = fadd float %138, %149, !dbg !44
  %162 = fcmp oeq float %161, 0.000000e+00, !dbg !45
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %161) #3, !dbg !46
  %164 = select i1 %162, float 0.000000e+00, float %163, !dbg !47
  %165 = fmul float %164, %160, !dbg !48
  %166 = fadd float %154, %165, !dbg !49
  %167 = fadd float %134, %159, !dbg !50
  %168 = fmul float %160, %160, !dbg !51
  %169 = fmul float %149, %168, !dbg !52
  %170 = fmul float %164, %169, !dbg !53
  %171 = fadd float %167, %170, !dbg !54
  %172 = fsub float %131, %166, !dbg !42
  %173 = fadd float %139, %161, !dbg !44
  %174 = fcmp oeq float %173, 0.000000e+00, !dbg !45
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %173) #3, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !47
  %177 = fmul float %176, %172, !dbg !48
  %178 = fadd float %166, %177, !dbg !49
  %179 = fadd float %135, %171, !dbg !50
  %180 = fmul float %172, %172, !dbg !51
  %181 = fmul float %161, %180, !dbg !52
  %182 = fmul float %176, %181, !dbg !53
  %183 = fadd float %179, %182, !dbg !54
  %184 = bitcast float %178 to i32, !dbg !40
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !40
  %186 = bitcast i32 %185 to float, !dbg !40
  %187 = bitcast float %183 to i32, !dbg !40
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 16, i32 31), !dbg !40
  %189 = bitcast i32 %188 to float, !dbg !40
  %190 = bitcast float %173 to i32, !dbg !40
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 16, i32 31), !dbg !40
  %192 = bitcast i32 %191 to float, !dbg !40
  %193 = fsub float %186, %178, !dbg !42
  %194 = fadd float %173, %192, !dbg !44
  %195 = fcmp oeq float %194, 0.000000e+00, !dbg !45
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %194) #3, !dbg !46
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !47
  %198 = fmul float %197, %193, !dbg !48
  %199 = fadd float %178, %198, !dbg !49
  %200 = fadd float %183, %189, !dbg !50
  %201 = fmul float %193, %193, !dbg !51
  %202 = fmul float %173, %201, !dbg !52
  %203 = fmul float %197, %202, !dbg !53
  %204 = fadd float %200, %203, !dbg !54
  %205 = bitcast float %199 to i32, !dbg !40
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 8, i32 31), !dbg !40
  %207 = bitcast i32 %206 to float, !dbg !40
  %208 = bitcast float %204 to i32, !dbg !40
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !40
  %210 = bitcast i32 %209 to float, !dbg !40
  %211 = bitcast float %194 to i32, !dbg !40
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 8, i32 31), !dbg !40
  %213 = bitcast i32 %212 to float, !dbg !40
  %214 = fsub float %207, %199, !dbg !42
  %215 = fadd float %194, %213, !dbg !44
  %216 = fcmp oeq float %215, 0.000000e+00, !dbg !45
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %215) #3, !dbg !46
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !47
  %219 = fmul float %214, %218, !dbg !48
  %220 = fadd float %199, %219, !dbg !49
  %221 = fadd float %204, %210, !dbg !50
  %222 = fmul float %214, %214, !dbg !51
  %223 = fmul float %194, %222, !dbg !52
  %224 = fmul float %218, %223, !dbg !53
  %225 = fadd float %221, %224, !dbg !54
  %226 = bitcast float %220 to i32, !dbg !40
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 4, i32 31), !dbg !40
  %228 = bitcast i32 %227 to float, !dbg !40
  %229 = bitcast float %225 to i32, !dbg !40
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 4, i32 31), !dbg !40
  %231 = bitcast i32 %230 to float, !dbg !40
  %232 = bitcast float %215 to i32, !dbg !40
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !40
  %234 = bitcast i32 %233 to float, !dbg !40
  %235 = fsub float %228, %220, !dbg !42
  %236 = fadd float %215, %234, !dbg !44
  %237 = fcmp oeq float %236, 0.000000e+00, !dbg !45
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %236) #3, !dbg !46
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !47
  %240 = fmul float %235, %239, !dbg !48
  %241 = fadd float %220, %240, !dbg !49
  %242 = fadd float %225, %231, !dbg !50
  %243 = fmul float %235, %235, !dbg !51
  %244 = fmul float %215, %243, !dbg !52
  %245 = fmul float %239, %244, !dbg !53
  %246 = fadd float %242, %245, !dbg !54
  %247 = bitcast float %241 to i32, !dbg !40
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 2, i32 31), !dbg !40
  %249 = bitcast i32 %248 to float, !dbg !40
  %250 = bitcast float %246 to i32, !dbg !40
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 2, i32 31), !dbg !40
  %252 = bitcast i32 %251 to float, !dbg !40
  %253 = bitcast float %236 to i32, !dbg !40
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 2, i32 31), !dbg !40
  %255 = bitcast i32 %254 to float, !dbg !40
  %256 = fsub float %249, %241, !dbg !42
  %257 = fadd float %236, %255, !dbg !44
  %258 = fcmp oeq float %257, 0.000000e+00, !dbg !45
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %255, float %257) #3, !dbg !46
  %260 = select i1 %258, float 0.000000e+00, float %259, !dbg !47
  %261 = fmul float %256, %260, !dbg !48
  %262 = fadd float %241, %261, !dbg !49
  %263 = fadd float %246, %252, !dbg !50
  %264 = fmul float %256, %256, !dbg !51
  %265 = fmul float %236, %264, !dbg !52
  %266 = fmul float %260, %265, !dbg !53
  %267 = fadd float %263, %266, !dbg !54
  %268 = bitcast float %262 to i32, !dbg !40
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 1, i32 31), !dbg !40
  %270 = bitcast i32 %269 to float, !dbg !40
  %271 = bitcast float %267 to i32, !dbg !40
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 1, i32 31), !dbg !40
  %273 = bitcast i32 %272 to float, !dbg !40
  %274 = bitcast float %257 to i32, !dbg !40
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 1, i32 31), !dbg !40
  %276 = bitcast i32 %275 to float, !dbg !40
  %277 = fsub float %270, %262, !dbg !42
  %278 = fadd float %257, %276, !dbg !44
  %279 = fcmp oeq float %278, 0.000000e+00, !dbg !45
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %276, float %278) #3, !dbg !46
  %281 = select i1 %279, float 0.000000e+00, float %280, !dbg !47
  %282 = fmul float %277, %281, !dbg !48
  %283 = fadd float %262, %282, !dbg !49
  %284 = fadd float %267, %273, !dbg !50
  %285 = fmul float %277, %277, !dbg !51
  %286 = fmul float %257, %285, !dbg !52
  %287 = fmul float %281, %286, !dbg !53
  %288 = fadd float %284, %287, !dbg !54
  %289 = icmp eq i32 %147, 0, !dbg !40
  %290 = and i32 %146, 15, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !40
  %292 = bitcast float %283 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 %289) #3, !dbg !40
  %293 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %290, !dbg !40
  %294 = bitcast float %288 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 %289) #3, !dbg !40
  %295 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %290, !dbg !40
  %296 = bitcast float %278 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %295, <1 x i32> %296, i1 %289) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %297 = icmp slt i32 %10, 16, !dbg !40
  %298 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %299 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %298, i1 %297) #3, !dbg !40
  %300 = bitcast i32 %299 to float, !dbg !40
  %301 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %10, !dbg !40
  %302 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %301, i1 %297) #3, !dbg !40
  %303 = bitcast i32 %302 to float, !dbg !40
  %304 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %10, !dbg !40
  %305 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %304, i1 %297) #3, !dbg !40
  %306 = bitcast i32 %305 to float, !dbg !40
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 8, i32 31), !dbg !40
  %308 = bitcast i32 %307 to float, !dbg !40
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !40
  %310 = bitcast i32 %309 to float, !dbg !40
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 8, i32 31), !dbg !40
  %312 = bitcast i32 %311 to float, !dbg !40
  %313 = fsub float %308, %300, !dbg !42
  %314 = fadd float %306, %312, !dbg !44
  %315 = fcmp oeq float %314, 0.000000e+00, !dbg !45
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %312, float %314) #3, !dbg !46
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !47
  %318 = fmul float %313, %317, !dbg !48
  %319 = fadd float %318, %300, !dbg !49
  %320 = fadd float %303, %310, !dbg !50
  %321 = fmul float %313, %313, !dbg !51
  %322 = fmul float %321, %306, !dbg !52
  %323 = fmul float %322, %317, !dbg !53
  %324 = fadd float %320, %323, !dbg !54
  %325 = bitcast float %319 to i32, !dbg !40
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 4, i32 31), !dbg !40
  %327 = bitcast i32 %326 to float, !dbg !40
  %328 = bitcast float %324 to i32, !dbg !40
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 4, i32 31), !dbg !40
  %330 = bitcast i32 %329 to float, !dbg !40
  %331 = bitcast float %314 to i32, !dbg !40
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !40
  %333 = bitcast i32 %332 to float, !dbg !40
  %334 = fsub float %327, %319, !dbg !42
  %335 = fadd float %314, %333, !dbg !44
  %336 = fcmp oeq float %335, 0.000000e+00, !dbg !45
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %333, float %335) #3, !dbg !46
  %338 = select i1 %336, float 0.000000e+00, float %337, !dbg !47
  %339 = fmul float %334, %338, !dbg !48
  %340 = fadd float %319, %339, !dbg !49
  %341 = fadd float %324, %330, !dbg !50
  %342 = fmul float %334, %334, !dbg !51
  %343 = fmul float %314, %342, !dbg !52
  %344 = fmul float %338, %343, !dbg !53
  %345 = fadd float %341, %344, !dbg !54
  %346 = bitcast float %340 to i32, !dbg !40
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 2, i32 31), !dbg !40
  %348 = bitcast i32 %347 to float, !dbg !40
  %349 = bitcast float %345 to i32, !dbg !40
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 2, i32 31), !dbg !40
  %351 = bitcast i32 %350 to float, !dbg !40
  %352 = bitcast float %335 to i32, !dbg !40
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !40
  %354 = bitcast i32 %353 to float, !dbg !40
  %355 = fsub float %348, %340, !dbg !42
  %356 = fadd float %335, %354, !dbg !44
  %357 = fcmp oeq float %356, 0.000000e+00, !dbg !45
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %356) #3, !dbg !46
  %359 = select i1 %357, float 0.000000e+00, float %358, !dbg !47
  %360 = fmul float %355, %359, !dbg !48
  %361 = fadd float %340, %360, !dbg !49
  %362 = fadd float %345, %351, !dbg !50
  %363 = fmul float %355, %355, !dbg !51
  %364 = fmul float %335, %363, !dbg !52
  %365 = fmul float %359, %364, !dbg !53
  %366 = fadd float %362, %365, !dbg !54
  %367 = bitcast float %361 to i32, !dbg !40
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 1, i32 31), !dbg !40
  %369 = bitcast i32 %368 to float, !dbg !40
  %370 = bitcast float %366 to i32, !dbg !40
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 1, i32 31), !dbg !40
  %372 = bitcast i32 %371 to float, !dbg !40
  %373 = bitcast float %356 to i32, !dbg !40
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 1, i32 31), !dbg !40
  %375 = bitcast i32 %374 to float, !dbg !40
  %376 = fsub float %369, %361, !dbg !42
  %377 = fadd float %356, %375, !dbg !44
  %378 = fcmp oeq float %377, 0.000000e+00, !dbg !45
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float %377) #3, !dbg !46
  %380 = select i1 %378, float 0.000000e+00, float %379, !dbg !47
  %381 = fmul float %376, %380, !dbg !48
  %382 = fadd float %361, %381, !dbg !49
  %383 = fadd float %366, %372, !dbg !50
  %384 = fmul float %376, %376, !dbg !51
  %385 = fmul float %356, %384, !dbg !52
  %386 = fmul float %380, %385, !dbg !53
  %387 = fadd float %383, %386, !dbg !54
  %388 = and i32 %10, 15, !dbg !40
  %389 = icmp eq i32 %388, 0, !dbg !40
  %390 = and i1 %297, %389, !dbg !40
  %391 = bitcast float %382 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %391, i1 %390) #3, !dbg !40
  %392 = bitcast float %387 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %392, i1 %390) #3, !dbg !40
  %393 = bitcast float %377 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %393, i1 %390) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %394 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !40
  %395 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !40
  %396 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !40
  %397 = sext i32 %8 to i64, !dbg !55
  %398 = getelementptr float, ptr addrspace(1) %2, i64 %397, !dbg !55
  %399 = icmp eq i32 %11, 0, !dbg !56
  %400 = and i1 %399, %9, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %394, ptr addrspace(1) %398, i1 %400) #3, !dbg !56
  %401 = getelementptr float, ptr addrspace(1) %3, i64 %397, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %395, ptr addrspace(1) %401, i1 %400) #3, !dbg !58
  %402 = getelementptr float, ptr addrspace(1) %4, i64 %397, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %396, ptr addrspace(1) %402, i1 %400) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfq5boqc2moxz2vrkvjqmsv442rk64fqj2egeoqmpatioksqx2f2.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_20, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_20, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_20", linkageName: "triton_red_fused_convolution_native_group_norm_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 42, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 39, scope: !7)
!21 = !DILocation(line: 37, column: 34, scope: !7)
!22 = !DILocation(line: 37, column: 47, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 41, column: 62, scope: !7)
!25 = !DILocation(line: 178, column: 7, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 183, column: 24, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 184, column: 30, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 185, column: 34, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 185, column: 26, scope: !26, inlinedAt: !28)
!33 = !DILocation(line: 186, column: 39, scope: !26, inlinedAt: !28)
!34 = !DILocation(line: 186, column: 31, scope: !26, inlinedAt: !28)
!35 = !DILocation(line: 186, column: 22, scope: !26, inlinedAt: !28)
!36 = !DILocation(line: 43, column: 60, scope: !7)
!37 = !DILocation(line: 44, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 64, scope: !7)
!39 = !DILocation(line: 46, column: 53, scope: !7)
!40 = !DILocation(line: 204, column: 46, scope: !26, inlinedAt: !41)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 192, column: 21, scope: !43, inlinedAt: !41)
!43 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!44 = !DILocation(line: 193, column: 28, scope: !43, inlinedAt: !41)
!45 = !DILocation(line: 194, column: 39, scope: !43, inlinedAt: !41)
!46 = !DILocation(line: 194, column: 60, scope: !43, inlinedAt: !41)
!47 = !DILocation(line: 194, column: 49, scope: !43, inlinedAt: !41)
!48 = !DILocation(line: 196, column: 25, scope: !43, inlinedAt: !41)
!49 = !DILocation(line: 196, column: 17, scope: !43, inlinedAt: !41)
!50 = !DILocation(line: 197, column: 15, scope: !43, inlinedAt: !41)
!51 = !DILocation(line: 197, column: 30, scope: !43, inlinedAt: !41)
!52 = !DILocation(line: 197, column: 38, scope: !43, inlinedAt: !41)
!53 = !DILocation(line: 197, column: 49, scope: !43, inlinedAt: !41)
!54 = !DILocation(line: 197, column: 22, scope: !43, inlinedAt: !41)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 25, scope: !7)
!58 = !DILocation(line: 54, column: 36, scope: !7)
!59 = !DILocation(line: 55, column: 25, scope: !7)
!60 = !DILocation(line: 55, column: 36, scope: !7)
!61 = !DILocation(line: 55, column: 4, scope: !7)
