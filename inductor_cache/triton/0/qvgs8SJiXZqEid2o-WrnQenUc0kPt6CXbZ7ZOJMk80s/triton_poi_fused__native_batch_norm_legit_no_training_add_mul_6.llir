; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 2048, !dbg !14
  %22 = srem i32 %20, 2048, !dbg !14
  %23 = sext i32 %19 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !15
  %25 = sext i32 %20 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !18
  %33 = sext i32 %21 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !19
  %35 = sext i32 %22 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !21
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = bitcast i32 %53 to float, !dbg !22
  %58 = bitcast i32 %54 to float, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !24
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !27
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !29
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %35, !dbg !29
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !30
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !30
  %75 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %8, i64 %35, !dbg !31
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !32
  %91 = bitcast i32 %87 to float, !dbg !32
  %92 = bitcast i32 %88 to float, !dbg !32
  %93 = bitcast i32 %89 to float, !dbg !32
  %94 = bitcast i32 %90 to float, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !33
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 true) #3, !dbg !34
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !34
  %99 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !35
  %100 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !35
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !36
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !36
  %103 = fadd float %46, 0x3EE4F8B580000000, !dbg !37
  %104 = fadd float %47, 0x3EE4F8B580000000, !dbg !37
  %105 = fadd float %48, 0x3EE4F8B580000000, !dbg !37
  %106 = fadd float %49, 0x3EE4F8B580000000, !dbg !37
  %107 = fadd float %55, 0x3EE4F8B580000000, !dbg !37
  %108 = fadd float %56, 0x3EE4F8B580000000, !dbg !37
  %109 = fadd float %57, 0x3EE4F8B580000000, !dbg !37
  %110 = fadd float %58, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %13
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %13
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %123, 0, !dbg !38
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %124, 0, !dbg !38
  br i1 %.not.i1, label %130, label %125, !dbg !38

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !38

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !38

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %126, %128, %131, %133
  %.0.i3 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !38
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %135, 0, !dbg !38
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %136, 0, !dbg !38
  br i1 %.not.i6, label %142, label %137, !dbg !38

137:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %140, label %138, !dbg !38

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

142:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %145, label %143, !dbg !38

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %138, %140, %143, %145
  %.0.i8 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !38
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %147, 0, !dbg !38
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %148, 0, !dbg !38
  br i1 %.not.i11, label %154, label %149, !dbg !38

149:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %152, label %150, !dbg !38

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

154:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %157, label %155, !dbg !38

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %150, %152, %155, %157
  %.0.i13 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !38
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i16 = icmp eq i32 %159, 0, !dbg !38
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i19 = icmp eq i32 %160, 0, !dbg !38
  br i1 %.not.i16, label %166, label %161, !dbg !38

161:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %164, label %162, !dbg !38

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

166:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %169, label %167, !dbg !38

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %162, %164, %167, %169
  %.0.i18 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !38
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i21 = icmp eq i32 %171, 0, !dbg !38
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i24 = icmp eq i32 %172, 0, !dbg !38
  br i1 %.not.i21, label %178, label %173, !dbg !38

173:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %176, label %174, !dbg !38

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

178:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %181, label %179, !dbg !38

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %174, %176, %179, %181
  %.0.i23 = phi float [ %175, %174 ], [ %177, %176 ], [ %180, %179 ], [ %182, %181 ], !dbg !38
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %183, 0, !dbg !38
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %184, 0, !dbg !38
  br i1 %.not.i26, label %190, label %185, !dbg !38

185:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %188, label %186, !dbg !38

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

190:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %193, label %191, !dbg !38

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %186, %188, %191, %193
  %.0.i28 = phi float [ %187, %186 ], [ %189, %188 ], [ %192, %191 ], [ %194, %193 ], !dbg !38
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i31 = icmp eq i32 %195, 0, !dbg !38
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i34 = icmp eq i32 %196, 0, !dbg !38
  br i1 %.not.i31, label %202, label %197, !dbg !38

197:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %200, label %198, !dbg !38

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

202:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %205, label %203, !dbg !38

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %198, %200, %203, %205
  %.0.i33 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !38
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %215 = fadd float %82, 0x3EE4F8B580000000, !dbg !40
  %216 = fadd float %83, 0x3EE4F8B580000000, !dbg !40
  %217 = fadd float %84, 0x3EE4F8B580000000, !dbg !40
  %218 = fadd float %85, 0x3EE4F8B580000000, !dbg !40
  %219 = fadd float %91, 0x3EE4F8B580000000, !dbg !40
  %220 = fadd float %92, 0x3EE4F8B580000000, !dbg !40
  %221 = fadd float %93, 0x3EE4F8B580000000, !dbg !40
  %222 = fadd float %94, 0x3EE4F8B580000000, !dbg !40
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i36 = icmp eq i32 %223, 0, !dbg !41
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i39 = icmp eq i32 %224, 0, !dbg !41
  br i1 %.not.i36, label %230, label %225, !dbg !41

225:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %228, label %226, !dbg !41

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %215) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %215) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

230:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %233, label %231, !dbg !41

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.f(float %215) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.f(float %215) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

__nv_sqrtf.exit40:                                ; preds = %226, %228, %231, %233
  %.0.i38 = phi float [ %227, %226 ], [ %229, %228 ], [ %232, %231 ], [ %234, %233 ], !dbg !41
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i41 = icmp eq i32 %235, 0, !dbg !41
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i44 = icmp eq i32 %236, 0, !dbg !41
  br i1 %.not.i41, label %242, label %237, !dbg !41

237:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %240, label %238, !dbg !41

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %216) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %216) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

242:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %245, label %243, !dbg !41

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.f(float %216) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.f(float %216) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

__nv_sqrtf.exit45:                                ; preds = %238, %240, %243, %245
  %.0.i43 = phi float [ %239, %238 ], [ %241, %240 ], [ %244, %243 ], [ %246, %245 ], !dbg !41
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i46 = icmp eq i32 %247, 0, !dbg !41
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i49 = icmp eq i32 %248, 0, !dbg !41
  br i1 %.not.i46, label %254, label %249, !dbg !41

249:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %252, label %250, !dbg !41

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

254:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %257, label %255, !dbg !41

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

__nv_sqrtf.exit50:                                ; preds = %250, %252, %255, %257
  %.0.i48 = phi float [ %251, %250 ], [ %253, %252 ], [ %256, %255 ], [ %258, %257 ], !dbg !41
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i51 = icmp eq i32 %259, 0, !dbg !41
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i54 = icmp eq i32 %260, 0, !dbg !41
  br i1 %.not.i51, label %266, label %261, !dbg !41

261:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %264, label %262, !dbg !41

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

266:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %269, label %267, !dbg !41

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

__nv_sqrtf.exit55:                                ; preds = %262, %264, %267, %269
  %.0.i53 = phi float [ %263, %262 ], [ %265, %264 ], [ %268, %267 ], [ %270, %269 ], !dbg !41
  %271 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i56 = icmp eq i32 %271, 0, !dbg !41
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i59 = icmp eq i32 %272, 0, !dbg !41
  br i1 %.not.i56, label %278, label %273, !dbg !41

273:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %276, label %274, !dbg !41

274:                                              ; preds = %273
  %275 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

276:                                              ; preds = %273
  %277 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

278:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %281, label %279, !dbg !41

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

__nv_sqrtf.exit60:                                ; preds = %274, %276, %279, %281
  %.0.i58 = phi float [ %275, %274 ], [ %277, %276 ], [ %280, %279 ], [ %282, %281 ], !dbg !41
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i61 = icmp eq i32 %283, 0, !dbg !41
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i64 = icmp eq i32 %284, 0, !dbg !41
  br i1 %.not.i61, label %290, label %285, !dbg !41

285:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %288, label %286, !dbg !41

286:                                              ; preds = %285
  %287 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

288:                                              ; preds = %285
  %289 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

290:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %293, label %291, !dbg !41

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

__nv_sqrtf.exit65:                                ; preds = %286, %288, %291, %293
  %.0.i63 = phi float [ %287, %286 ], [ %289, %288 ], [ %292, %291 ], [ %294, %293 ], !dbg !41
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i66 = icmp eq i32 %295, 0, !dbg !41
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i69 = icmp eq i32 %296, 0, !dbg !41
  br i1 %.not.i66, label %302, label %297, !dbg !41

297:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %300, label %298, !dbg !41

298:                                              ; preds = %297
  %299 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

300:                                              ; preds = %297
  %301 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

302:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %305, label %303, !dbg !41

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

__nv_sqrtf.exit70:                                ; preds = %298, %300, %303, %305
  %.0.i68 = phi float [ %299, %298 ], [ %301, %300 ], [ %304, %303 ], [ %306, %305 ], !dbg !41
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i71 = icmp eq i32 %307, 0, !dbg !41
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i74 = icmp eq i32 %308, 0, !dbg !41
  br i1 %.not.i71, label %314, label %309, !dbg !41

309:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %312, label %310, !dbg !41

310:                                              ; preds = %309
  %311 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

312:                                              ; preds = %309
  %313 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

314:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %317, label %315, !dbg !41

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

__nv_sqrtf.exit75:                                ; preds = %310, %312, %315, %317
  %.0.i73 = phi float [ %311, %310 ], [ %313, %312 ], [ %316, %315 ], [ %318, %317 ], !dbg !41
  %319 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %320 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %321 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %323 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %324 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %325 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %326 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %327 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !28
  %330 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !30
  %331 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !28
  %332 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !30
  %333 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !28
  %334 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !30
  %335 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %336 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %337 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !24
  %338 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %339 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %340 = bitcast i32 %339 to float, !dbg !16
  %341 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %342 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %343 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !24
  %344 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %345 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %346 = bitcast i32 %345 to float, !dbg !16
  %347 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %348 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %349 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !24
  %350 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %351 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %352 = bitcast i32 %351 to float, !dbg !16
  %353 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %354 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %355 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !24
  %356 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %357 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %358 = bitcast i32 %357 to float, !dbg !16
  %359 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %360 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %361 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !24
  %362 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %363 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %364 = bitcast i32 %363 to float, !dbg !16
  %365 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %366 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %367 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !24
  %368 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %369 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %370 = bitcast i32 %369 to float, !dbg !16
  %371 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %372 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %373 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !24
  %374 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %375 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %376 = bitcast i32 %375 to float, !dbg !16
  %377 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %378 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %379 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !24
  %380 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %381 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %382 = bitcast i32 %381 to float, !dbg !16
  %383 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %384 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %385 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %386 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %387 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !36
  %388 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !36
  %389 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !36
  %390 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !36
  %391 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !34
  %392 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !34
  %393 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !34
  %394 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !34
  %395 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !34
  %396 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !34
  %397 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !34
  %398 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !34
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !42
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !42
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !42
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !42
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !42
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !42
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !42
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !42
  %407 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !18
  %408 = insertelement <2 x i32> %407, i32 %333, i64 1, !dbg !18
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !18
  %410 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !20
  %411 = insertelement <2 x i32> %410, i32 %334, i64 1, !dbg !20
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !20
  %413 = fsub <2 x float> %409, %412, !dbg !43
  %414 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !26
  %415 = insertelement <2 x i32> %414, i32 %390, i64 1, !dbg !26
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !26
  %417 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !24
  %418 = insertelement <2 x i32> %417, i32 %398, i64 1, !dbg !24
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !24
  %420 = insertelement <2 x float> poison, float %207, i64 0, !dbg !44
  %421 = insertelement <2 x float> %420, float %399, i64 1, !dbg !44
  %422 = fmul <2 x float> %413, %421, !dbg !44
  %423 = fmul <2 x float> %422, %419, !dbg !45
  %424 = fadd <2 x float> %423, %416, !dbg !46
  %425 = extractelement <2 x float> %424, i64 0, !dbg !47
  %426 = fadd float %425, %382, !dbg !47
  %427 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !18
  %428 = insertelement <2 x i32> %427, i32 %331, i64 1, !dbg !18
  %429 = bitcast <2 x i32> %428 to <2 x float>, !dbg !18
  %430 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !20
  %431 = insertelement <2 x i32> %430, i32 %332, i64 1, !dbg !20
  %432 = bitcast <2 x i32> %431 to <2 x float>, !dbg !20
  %433 = fsub <2 x float> %429, %432, !dbg !43
  %434 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !26
  %435 = insertelement <2 x i32> %434, i32 %389, i64 1, !dbg !26
  %436 = bitcast <2 x i32> %435 to <2 x float>, !dbg !26
  %437 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !24
  %438 = insertelement <2 x i32> %437, i32 %397, i64 1, !dbg !24
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !24
  %440 = insertelement <2 x float> poison, float %208, i64 0, !dbg !44
  %441 = insertelement <2 x float> %440, float %400, i64 1, !dbg !44
  %442 = fmul <2 x float> %433, %441, !dbg !44
  %443 = fmul <2 x float> %442, %439, !dbg !45
  %444 = fadd <2 x float> %443, %436, !dbg !46
  %445 = extractelement <2 x float> %444, i64 0, !dbg !47
  %446 = fadd float %445, %376, !dbg !47
  %447 = insertelement <2 x i32> poison, i32 %365, i64 0, !dbg !18
  %448 = insertelement <2 x i32> %447, i32 %329, i64 1, !dbg !18
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !18
  %450 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !20
  %451 = insertelement <2 x i32> %450, i32 %330, i64 1, !dbg !20
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !20
  %453 = fsub <2 x float> %449, %452, !dbg !43
  %454 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !26
  %455 = insertelement <2 x i32> %454, i32 %388, i64 1, !dbg !26
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !26
  %457 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !24
  %458 = insertelement <2 x i32> %457, i32 %396, i64 1, !dbg !24
  %459 = bitcast <2 x i32> %458 to <2 x float>, !dbg !24
  %460 = insertelement <2 x float> poison, float %209, i64 0, !dbg !44
  %461 = insertelement <2 x float> %460, float %401, i64 1, !dbg !44
  %462 = fmul <2 x float> %453, %461, !dbg !44
  %463 = fmul <2 x float> %462, %459, !dbg !45
  %464 = fadd <2 x float> %463, %456, !dbg !46
  %465 = extractelement <2 x float> %464, i64 0, !dbg !47
  %466 = fadd float %465, %370, !dbg !47
  %467 = insertelement <2 x i32> poison, i32 %359, i64 0, !dbg !18
  %468 = insertelement <2 x i32> %467, i32 %327, i64 1, !dbg !18
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !18
  %470 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !20
  %471 = insertelement <2 x i32> %470, i32 %328, i64 1, !dbg !20
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !20
  %473 = fsub <2 x float> %469, %472, !dbg !43
  %474 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !26
  %475 = insertelement <2 x i32> %474, i32 %387, i64 1, !dbg !26
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !26
  %477 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !24
  %478 = insertelement <2 x i32> %477, i32 %395, i64 1, !dbg !24
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !24
  %480 = insertelement <2 x float> poison, float %210, i64 0, !dbg !44
  %481 = insertelement <2 x float> %480, float %402, i64 1, !dbg !44
  %482 = fmul <2 x float> %473, %481, !dbg !44
  %483 = fmul <2 x float> %482, %479, !dbg !45
  %484 = fadd <2 x float> %483, %476, !dbg !46
  %485 = extractelement <2 x float> %484, i64 0, !dbg !47
  %486 = fadd float %485, %364, !dbg !47
  %487 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !18
  %488 = insertelement <2 x i32> %487, i32 %325, i64 1, !dbg !18
  %489 = bitcast <2 x i32> %488 to <2 x float>, !dbg !18
  %490 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !20
  %491 = insertelement <2 x i32> %490, i32 %326, i64 1, !dbg !20
  %492 = bitcast <2 x i32> %491 to <2 x float>, !dbg !20
  %493 = fsub <2 x float> %489, %492, !dbg !43
  %494 = insertelement <2 x i32> poison, i32 %356, i64 0, !dbg !26
  %495 = insertelement <2 x i32> %494, i32 %386, i64 1, !dbg !26
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !26
  %497 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !24
  %498 = insertelement <2 x i32> %497, i32 %394, i64 1, !dbg !24
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !24
  %500 = insertelement <2 x float> poison, float %211, i64 0, !dbg !44
  %501 = insertelement <2 x float> %500, float %403, i64 1, !dbg !44
  %502 = fmul <2 x float> %493, %501, !dbg !44
  %503 = fmul <2 x float> %502, %499, !dbg !45
  %504 = fadd <2 x float> %503, %496, !dbg !46
  %505 = extractelement <2 x float> %504, i64 0, !dbg !47
  %506 = fadd float %505, %358, !dbg !47
  %507 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !18
  %508 = insertelement <2 x i32> %507, i32 %323, i64 1, !dbg !18
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !18
  %510 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !20
  %511 = insertelement <2 x i32> %510, i32 %324, i64 1, !dbg !20
  %512 = bitcast <2 x i32> %511 to <2 x float>, !dbg !20
  %513 = fsub <2 x float> %509, %512, !dbg !43
  %514 = insertelement <2 x i32> poison, i32 %350, i64 0, !dbg !26
  %515 = insertelement <2 x i32> %514, i32 %385, i64 1, !dbg !26
  %516 = bitcast <2 x i32> %515 to <2 x float>, !dbg !26
  %517 = insertelement <2 x i32> poison, i32 %349, i64 0, !dbg !24
  %518 = insertelement <2 x i32> %517, i32 %393, i64 1, !dbg !24
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !24
  %520 = insertelement <2 x float> poison, float %212, i64 0, !dbg !44
  %521 = insertelement <2 x float> %520, float %404, i64 1, !dbg !44
  %522 = fmul <2 x float> %513, %521, !dbg !44
  %523 = fmul <2 x float> %522, %519, !dbg !45
  %524 = fadd <2 x float> %523, %516, !dbg !46
  %525 = extractelement <2 x float> %524, i64 0, !dbg !47
  %526 = fadd float %525, %352, !dbg !47
  %527 = insertelement <2 x i32> poison, i32 %341, i64 0, !dbg !18
  %528 = insertelement <2 x i32> %527, i32 %321, i64 1, !dbg !18
  %529 = bitcast <2 x i32> %528 to <2 x float>, !dbg !18
  %530 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !20
  %531 = insertelement <2 x i32> %530, i32 %322, i64 1, !dbg !20
  %532 = bitcast <2 x i32> %531 to <2 x float>, !dbg !20
  %533 = fsub <2 x float> %529, %532, !dbg !43
  %534 = insertelement <2 x i32> poison, i32 %344, i64 0, !dbg !26
  %535 = insertelement <2 x i32> %534, i32 %384, i64 1, !dbg !26
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !26
  %537 = insertelement <2 x i32> poison, i32 %343, i64 0, !dbg !24
  %538 = insertelement <2 x i32> %537, i32 %392, i64 1, !dbg !24
  %539 = bitcast <2 x i32> %538 to <2 x float>, !dbg !24
  %540 = insertelement <2 x float> poison, float %213, i64 0, !dbg !44
  %541 = insertelement <2 x float> %540, float %405, i64 1, !dbg !44
  %542 = fmul <2 x float> %533, %541, !dbg !44
  %543 = fmul <2 x float> %542, %539, !dbg !45
  %544 = fadd <2 x float> %543, %536, !dbg !46
  %545 = extractelement <2 x float> %544, i64 0, !dbg !47
  %546 = fadd float %545, %346, !dbg !47
  %547 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !18
  %548 = insertelement <2 x i32> %547, i32 %319, i64 1, !dbg !18
  %549 = bitcast <2 x i32> %548 to <2 x float>, !dbg !18
  %550 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !20
  %551 = insertelement <2 x i32> %550, i32 %320, i64 1, !dbg !20
  %552 = bitcast <2 x i32> %551 to <2 x float>, !dbg !20
  %553 = fsub <2 x float> %549, %552, !dbg !43
  %554 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !26
  %555 = insertelement <2 x i32> %554, i32 %383, i64 1, !dbg !26
  %556 = bitcast <2 x i32> %555 to <2 x float>, !dbg !26
  %557 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !24
  %558 = insertelement <2 x i32> %557, i32 %391, i64 1, !dbg !24
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !24
  %560 = insertelement <2 x float> poison, float %214, i64 0, !dbg !44
  %561 = insertelement <2 x float> %560, float %406, i64 1, !dbg !44
  %562 = fmul <2 x float> %553, %561, !dbg !44
  %563 = fmul <2 x float> %562, %559, !dbg !45
  %564 = fadd <2 x float> %563, %556, !dbg !46
  %565 = extractelement <2 x float> %564, i64 0, !dbg !47
  %566 = fadd float %565, %340, !dbg !47
  %567 = extractelement <2 x float> %424, i64 1, !dbg !48
  %568 = fadd float %426, %567, !dbg !48
  %569 = extractelement <2 x float> %444, i64 1, !dbg !48
  %570 = fadd float %446, %569, !dbg !48
  %571 = extractelement <2 x float> %464, i64 1, !dbg !48
  %572 = fadd float %466, %571, !dbg !48
  %573 = extractelement <2 x float> %484, i64 1, !dbg !48
  %574 = fadd float %486, %573, !dbg !48
  %575 = extractelement <2 x float> %504, i64 1, !dbg !48
  %576 = fadd float %506, %575, !dbg !48
  %577 = extractelement <2 x float> %524, i64 1, !dbg !48
  %578 = fadd float %526, %577, !dbg !48
  %579 = extractelement <2 x float> %544, i64 1, !dbg !48
  %580 = fadd float %546, %579, !dbg !48
  %581 = extractelement <2 x float> %564, i64 1, !dbg !48
  %582 = fadd float %566, %581, !dbg !48
  %583 = getelementptr float, ptr addrspace(1) %11, i64 %23, !dbg !49
  %584 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !49
  %585 = bitcast float %568 to i32, !dbg !50
  %586 = bitcast float %570 to i32, !dbg !50
  %587 = bitcast float %572 to i32, !dbg !50
  %588 = bitcast float %574 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %585, i32 %586, i32 %587, i32 %588, ptr addrspace(1) %583, i1 true) #3, !dbg !50
  %589 = bitcast float %576 to i32, !dbg !50
  %590 = bitcast float %578 to i32, !dbg !50
  %591 = bitcast float %580 to i32, !dbg !50
  %592 = bitcast float %582 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %589, i32 %590, i32 %591, i32 %592, ptr addrspace(1) %584, i1 true) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cak7fmjczfzp77yvifbvxh4e4yvrxwv2peytnzkzdhn2svh2cidt.py", directory: "inductor_cache/ak")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 27, scope: !7)
!42 = !DILocation(line: 53, column: 19, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 25, scope: !7)
!50 = !DILocation(line: 60, column: 37, scope: !7)
!51 = !DILocation(line: 60, column: 4, scope: !7)
