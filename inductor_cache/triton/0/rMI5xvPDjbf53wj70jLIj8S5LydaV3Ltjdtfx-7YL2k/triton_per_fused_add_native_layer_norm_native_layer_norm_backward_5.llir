; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %12 = icmp slt i32 %11, 256, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %.frozen = freeze i32 %11, !dbg !13
  %15 = sdiv i32 %.frozen, 64, !dbg !13
  %16 = mul i32 %15, 64, !dbg !14
  %.decomposed = sub i32 %.frozen, %16, !dbg !14
  %17 = shl nuw nsw i32 %14, 6, !dbg !15
  %18 = add nsw i32 %.decomposed, %17, !dbg !16
  %19 = shl i32 %15, 11, !dbg !17
  %20 = add i32 %18, %19, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %12, i32 0, i1 %12) #4, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %12, i32 0, i1 %12) #4, !dbg !20
  %26 = bitcast i32 %25 to float, !dbg !20
  %27 = shl i32 %11, 5, !dbg !21
  %28 = or disjoint i32 %27, %14, !dbg !22
  %29 = sext i32 %28 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #4, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %12, i32 0, i1 %12) #4, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = zext nneg i32 %14 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !26
  %40 = bitcast i32 %39 to float, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #4, !dbg !30
  %45 = fadd float %32, %38, !dbg !31
  %46 = fadd float %34, %40, !dbg !31
  %47 = fadd float %45, %24, !dbg !32
  %48 = fadd float %46, %26, !dbg !32
  %49 = select i1 %12, float %47, float 0.000000e+00, !dbg !33
  %50 = select i1 %12, float %48, float 0.000000e+00, !dbg !33
  %51 = bitcast float %49 to i32, !dbg !34
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 16, i32 31), !dbg !34
  %53 = bitcast i32 %52 to float, !dbg !34
  %54 = fadd float %49, %53, !dbg !38
  %55 = bitcast float %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %54, %57, !dbg !38
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !38
  %63 = bitcast float %62 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %62, %65, !dbg !38
  %67 = bitcast float %66 to i32, !dbg !34
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = fadd float %66, %69, !dbg !38
  %71 = bitcast float %50 to i32, !dbg !34
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = fadd float %50, %73, !dbg !38
  %75 = bitcast float %74 to i32, !dbg !34
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = fadd float %74, %77, !dbg !38
  %79 = bitcast float %78 to i32, !dbg !34
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 4, i32 31), !dbg !34
  %81 = bitcast i32 %80 to float, !dbg !34
  %82 = fadd float %78, %81, !dbg !38
  %83 = bitcast float %82 to i32, !dbg !34
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 2, i32 31), !dbg !34
  %85 = bitcast i32 %84 to float, !dbg !34
  %86 = fadd float %82, %85, !dbg !38
  %87 = bitcast float %86 to i32, !dbg !34
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !34
  %89 = bitcast i32 %88 to float, !dbg !34
  %90 = fadd float %86, %89, !dbg !38
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 3.200000e+01) #4, !dbg !40
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 3.200000e+01) #4, !dbg !40
  %93 = fsub float %47, %91, !dbg !41
  %94 = fsub float %48, %92, !dbg !41
  %95 = fmul float %93, %93, !dbg !42
  %96 = fmul float %94, %94, !dbg !42
  %97 = select i1 %12, float %95, float 0.000000e+00, !dbg !43
  %98 = select i1 %12, float %96, float 0.000000e+00, !dbg !43
  %99 = bitcast float %97 to i32, !dbg !44
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !44
  %101 = bitcast i32 %100 to float, !dbg !44
  %102 = fadd float %97, %101, !dbg !46
  %103 = bitcast float %102 to i32, !dbg !44
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 8, i32 31), !dbg !44
  %105 = bitcast i32 %104 to float, !dbg !44
  %106 = fadd float %102, %105, !dbg !46
  %107 = bitcast float %106 to i32, !dbg !44
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 4, i32 31), !dbg !44
  %109 = bitcast i32 %108 to float, !dbg !44
  %110 = fadd float %106, %109, !dbg !46
  %111 = bitcast float %110 to i32, !dbg !44
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 2, i32 31), !dbg !44
  %113 = bitcast i32 %112 to float, !dbg !44
  %114 = fadd float %110, %113, !dbg !46
  %115 = bitcast float %114 to i32, !dbg !44
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 1, i32 31), !dbg !44
  %117 = bitcast i32 %116 to float, !dbg !44
  %118 = fadd float %114, %117, !dbg !46
  %119 = bitcast float %98 to i32, !dbg !44
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !44
  %121 = bitcast i32 %120 to float, !dbg !44
  %122 = fadd float %98, %121, !dbg !46
  %123 = bitcast float %122 to i32, !dbg !44
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 8, i32 31), !dbg !44
  %125 = bitcast i32 %124 to float, !dbg !44
  %126 = fadd float %122, %125, !dbg !46
  %127 = bitcast float %126 to i32, !dbg !44
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !44
  %129 = bitcast i32 %128 to float, !dbg !44
  %130 = fadd float %126, %129, !dbg !46
  %131 = bitcast float %130 to i32, !dbg !44
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 2, i32 31), !dbg !44
  %133 = bitcast i32 %132 to float, !dbg !44
  %134 = fadd float %130, %133, !dbg !46
  %135 = bitcast float %134 to i32, !dbg !44
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !44
  %137 = bitcast i32 %136 to float, !dbg !44
  %138 = fadd float %134, %137, !dbg !46
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 3.200000e+01) #4, !dbg !47
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 3.200000e+01) #4, !dbg !47
  %141 = fadd float %139, 0x3EE4F8B580000000, !dbg !48
  %142 = fadd float %140, 0x3EE4F8B580000000, !dbg !48
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i = icmp eq i32 %143, 0, !dbg !49
  br i1 %.not.i, label %146, label %144, !dbg !49

144:                                              ; preds = %10
  %145 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %141), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

146:                                              ; preds = %10
  %147 = tail call float @llvm.nvvm.rsqrt.approx.f(float %141), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %144, %146
  %.0.i = phi float [ %145, %144 ], [ %147, %146 ], !dbg !49
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i1 = icmp eq i32 %148, 0, !dbg !49
  br i1 %.not.i1, label %151, label %149, !dbg !49

149:                                              ; preds = %__nv_rsqrtf.exit
  %150 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %142), !dbg !49
  br label %__nv_rsqrtf.exit3, !dbg !49

151:                                              ; preds = %__nv_rsqrtf.exit
  %152 = tail call float @llvm.nvvm.rsqrt.approx.f(float %142), !dbg !49
  br label %__nv_rsqrtf.exit3, !dbg !49

__nv_rsqrtf.exit3:                                ; preds = %149, %151
  %.0.i2 = phi float [ %150, %149 ], [ %152, %151 ], !dbg !49
  %153 = bitcast i32 %44 to float, !dbg !30
  %154 = bitcast i32 %42 to float, !dbg !28
  %155 = fmul float %93, %.0.i, !dbg !50
  %156 = fmul float %155, %154, !dbg !51
  %157 = fadd float %156, %153, !dbg !52
  %158 = fmul float %.0.i2, 3.125000e-02, !dbg !53
  %159 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !54
  %160 = and i32 %13, 32, !dbg !55
  %161 = icmp eq i32 %160, 0, !dbg !55
  %162 = bitcast float %155 to i32, !dbg !55
  %163 = and i1 %161, %12, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %162, ptr addrspace(1) %159, i1 %163) #4, !dbg !55
  %164 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !56
  %165 = bitcast float %157 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %164, i1 %163) #4, !dbg !57
  %166 = sext i32 %11 to i64, !dbg !58
  %167 = getelementptr float, ptr addrspace(1) %7, i64 %166, !dbg !58
  %urem = and i32 %13, 63, !dbg !59
  %168 = icmp eq i32 %urem, 0, !dbg !59
  %169 = bitcast float %158 to i32, !dbg !59
  %170 = and i1 %168, %12, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %169, ptr addrspace(1) %167, i1 %170) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuikj2fj7dthoyhdafnokwdyuhlh7dg2nrrpeedhe6yomz4lhufr.py", directory: "inductor_cache/ui")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 48, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 53, scope: !7)
!21 = !DILocation(line: 34, column: 38, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 34, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 44, column: 26, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !37)
!39 = distinct !DILexicalBlockFile(scope: !35, file: !36, discriminator: 0)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 35, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !45)
!45 = !DILocation(line: 52, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !45)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 28, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 63, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 45, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 45, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 66, column: 37, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
