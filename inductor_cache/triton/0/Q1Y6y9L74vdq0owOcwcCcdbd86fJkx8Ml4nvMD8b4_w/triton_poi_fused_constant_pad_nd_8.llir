; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_constant_pad_nd_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = shl i32 %12, 1, !dbg !12
  %16 = and i32 %15, 14, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = icmp slt i32 %17, 12, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %20, %16, !dbg !17
  %22 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %23 = sdiv i32 %.frozen, 4, !dbg !19
  %24 = mul i32 %23, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = add i32 %17, -8, !dbg !21
  %26 = icmp sgt i32 %25, -1, !dbg !22
  %27 = add i32 %21, -128, !dbg !23
  %28 = shl i32 %17, 4, !dbg !24
  %29 = add i32 %27, %28, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = and i1 %18, %22, !dbg !27
  %33 = and i1 %26, %32, !dbg !27
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #4, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #4, !dbg !30
  %37 = shl i32 %17, 2, !dbg !31
  %38 = add i32 %37, -32, !dbg !32
  %39 = add i32 %38, %.decomposed, !dbg !33
  %40 = sext i32 %39 to i64, !dbg !34
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !34
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #4, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !36
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #4, !dbg !37
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !37
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !37
  %47 = bitcast i32 %45 to float, !dbg !37
  %48 = bitcast i32 %46 to float, !dbg !37
  %49 = fadd float %47, 0x3F1A36E2E0000000, !dbg !38
  %50 = fadd float %48, 0x3F1A36E2E0000000, !dbg !38
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %51, 0, !dbg !39
  br i1 %.not.i, label %54, label %52, !dbg !39

52:                                               ; preds = %9
  %53 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %49), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

54:                                               ; preds = %9
  %55 = tail call float @llvm.nvvm.rsqrt.approx.f(float %49), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %52, %54
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], !dbg !39
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i3 = icmp eq i32 %56, 0, !dbg !39
  br i1 %.not.i3, label %59, label %57, !dbg !39

57:                                               ; preds = %__nv_rsqrtf.exit
  %58 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %50), !dbg !39
  br label %__nv_rsqrtf.exit5, !dbg !39

59:                                               ; preds = %__nv_rsqrtf.exit
  %60 = tail call float @llvm.nvvm.rsqrt.approx.f(float %50), !dbg !39
  br label %__nv_rsqrtf.exit5, !dbg !39

__nv_rsqrtf.exit5:                                ; preds = %57, %59
  %.0.i4 = phi float [ %58, %57 ], [ %60, %59 ], !dbg !39
  %61 = extractvalue { i32, i32 } %34, 1, !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = extractvalue { i32, i32 } %36, 1, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = fadd float %62, %64, !dbg !40
  %66 = extractvalue { i32, i32 } %42, 1, !dbg !35
  %67 = bitcast i32 %66 to float, !dbg !35
  %68 = fsub float %65, %67, !dbg !41
  %69 = extractvalue { i32, i32 } %34, 0, !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = extractvalue { i32, i32 } %36, 0, !dbg !30
  %72 = bitcast i32 %71 to float, !dbg !30
  %73 = fadd float %70, %72, !dbg !40
  %74 = extractvalue { i32, i32 } %42, 0, !dbg !35
  %75 = bitcast i32 %74 to float, !dbg !35
  %76 = fsub float %73, %75, !dbg !41
  %77 = or disjoint i32 %20, %14, !dbg !17
  %78 = icmp slt i32 %77, 16, !dbg !18
  %79 = or disjoint i32 %11, %16, !dbg !13
  %80 = icmp slt i32 %79, 12, !dbg !14
  %81 = fmul float %76, %.0.i, !dbg !42
  %82 = fmul float %68, %.0.i4, !dbg !42
  %83 = sext i32 %23 to i64, !dbg !43
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !43
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %33, i32 0, i1 %33) #4, !dbg !44
  %86 = bitcast i32 %85 to float, !dbg !44
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %33, i32 0, i1 %33) #4, !dbg !44
  %88 = bitcast i32 %87 to float, !dbg !44
  %89 = fmul float %81, %86, !dbg !45
  %90 = fmul float %82, %88, !dbg !45
  %91 = getelementptr float, ptr addrspace(1) %5, i64 %83, !dbg !46
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %33, i32 0, i1 %33) #4, !dbg !47
  %93 = bitcast i32 %92 to float, !dbg !47
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %33, i32 0, i1 %33) #4, !dbg !47
  %95 = bitcast i32 %94 to float, !dbg !47
  %96 = fadd float %89, %93, !dbg !48
  %97 = fadd float %90, %95, !dbg !48
  %98 = mul i32 %77, 12, !dbg !49
  %99 = add i32 %98, %79, !dbg !50
  %100 = sext i32 %99 to i64, !dbg !51
  %101 = getelementptr float, ptr addrspace(1) %6, i64 %100, !dbg !51
  %102 = and i1 %80, %78, !dbg !52
  %103 = shl i32 %12, 5, !dbg !53
  %104 = and i32 %103, 224, !dbg !53
  %105 = or disjoint i32 %104, %14, !dbg !53
  %106 = and i32 %15, 254, !dbg !53
  %107 = lshr exact i32 %104, 3, !dbg !53
  %108 = add nuw nsw i32 %107, %105, !dbg !53
  %109 = zext nneg i32 %108 to i64, !dbg !53
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !53
  %111 = bitcast float %96 to i32, !dbg !53
  %112 = select i1 %26, i32 %111, i32 0, !dbg !54
  %113 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %113, i1 true) #4, !dbg !53
  %114 = or disjoint i32 %105, 16, !dbg !53
  %115 = lshr i32 %114, 3, !dbg !53
  %116 = and i32 %115, 30, !dbg !53
  %117 = add nuw nsw i32 %116, %114, !dbg !53
  %118 = zext nneg i32 %117 to i64, !dbg !53
  %119 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %118, !dbg !53
  %120 = bitcast float %97 to i32, !dbg !53
  %121 = select i1 %26, i32 %120, i32 0, !dbg !54
  %122 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %122, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %123 = lshr i32 %15, 3, !dbg !53
  %124 = and i32 %123, 30, !dbg !53
  %125 = add nuw nsw i32 %124, %106, !dbg !53
  %126 = zext nneg i32 %125 to i64, !dbg !53
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !53
  %.extract = load i32, ptr addrspace(3) %127, align 8, !dbg !53
  %128 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 4, !dbg !53
  %.extract2 = load i32, ptr addrspace(3) %128, align 4, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %101, i1 %102) #4, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp2tui67vg64x55z4zxxv3bmjyfpgw6kegvdpen7vvgicev7tw3y.py", directory: "inductor_cache/p2")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_8", linkageName: "triton_poi_fused_constant_pad_nd_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 18, scope: !7)
!22 = !DILocation(line: 34, column: 19, scope: !7)
!23 = !DILocation(line: 35, column: 39, scope: !7)
!24 = !DILocation(line: 35, column: 47, scope: !7)
!25 = !DILocation(line: 35, column: 44, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 67, scope: !7)
!28 = !DILocation(line: 35, column: 52, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 52, scope: !7)
!31 = !DILocation(line: 38, column: 45, scope: !7)
!32 = !DILocation(line: 38, column: 38, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 50, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 50, scope: !7)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 28, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 44, column: 19, scope: !7)
!43 = !DILocation(line: 45, column: 31, scope: !7)
!44 = !DILocation(line: 45, column: 71, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 71, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 33, scope: !7)
!50 = !DILocation(line: 51, column: 30, scope: !7)
!51 = !DILocation(line: 51, column: 25, scope: !7)
!52 = !DILocation(line: 51, column: 53, scope: !7)
!53 = !DILocation(line: 51, column: 45, scope: !7)
!54 = !DILocation(line: 50, column: 34, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
