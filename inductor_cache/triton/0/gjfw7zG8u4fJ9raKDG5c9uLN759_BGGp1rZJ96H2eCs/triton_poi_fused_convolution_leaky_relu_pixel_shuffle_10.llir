; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 62, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = shl i32 %16, 6, !dbg !15
  %18 = shl i32 %9, 4, !dbg !16
  %19 = and i32 %18, 48, !dbg !16
  %20 = or disjoint i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %19, 8, !dbg !16
  %22 = or disjoint i32 %19, 12, !dbg !16
  %23 = lshr i32 %9, 5, !dbg !16
  %24 = and i32 %23, 7, !dbg !16
  %25 = or disjoint i32 %17, %19, !dbg !17
  %26 = or disjoint i32 %17, %20, !dbg !17
  %27 = or disjoint i32 %17, %21, !dbg !17
  %28 = or disjoint i32 %17, %22, !dbg !17
  %29 = icmp slt i32 %25, 64, !dbg !18
  %30 = srem i32 %14, 256, !dbg !19
  %31 = sdiv i32 %15, 4, !dbg !20
  %32 = shl i32 %14, 6, !dbg !21
  %33 = add i32 %25, %32, !dbg !22
  %34 = add i32 %26, %32, !dbg !22
  %35 = add i32 %27, %32, !dbg !22
  %36 = add i32 %28, %32, !dbg !22
  %37 = sext i32 %33 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = sext i32 %34 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %35 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %36 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %29) #2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %29) #2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %29) #2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %29) #2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = sext i32 %30 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !25
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !26
  %83 = getelementptr i1, ptr addrspace(1) %2, i64 %37, !dbg !27
  %84 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !24
  %85 = insertelement <4 x i32> %84, i32 %47, i64 1, !dbg !24
  %86 = insertelement <4 x i32> %85, i32 %48, i64 2, !dbg !24
  %87 = insertelement <4 x i32> %86, i32 %49, i64 3, !dbg !24
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !24
  %89 = insertelement <4 x i32> poison, i32 %82, i64 0, !dbg !28
  %90 = bitcast <4 x i32> %89 to <4 x float>, !dbg !28
  %91 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !28
  %92 = fadd <4 x float> %91, %88, !dbg !28
  %93 = fcmp ogt <4 x float> %92, zeroinitializer, !dbg !29
  %94 = extractelement <4 x float> %92, i64 0, !dbg !30
  %95 = fmul float %94, 0x3F847AE140000000, !dbg !31
  %96 = extractelement <4 x float> %92, i64 1, !dbg !30
  %97 = fmul float %96, 0x3F847AE140000000, !dbg !31
  %98 = extractelement <4 x float> %92, i64 2, !dbg !30
  %99 = fmul float %98, 0x3F847AE140000000, !dbg !31
  %100 = extractelement <4 x float> %92, i64 3, !dbg !30
  %101 = fmul float %100, 0x3F847AE140000000, !dbg !31
  %102 = extractelement <4 x i1> %93, i64 0, !dbg !30
  %103 = select i1 %102, float %94, float %95, !dbg !30
  %104 = extractelement <4 x i1> %93, i64 1, !dbg !30
  %105 = select i1 %104, float %96, float %97, !dbg !30
  %106 = extractelement <4 x i1> %93, i64 2, !dbg !30
  %107 = select i1 %106, float %98, float %99, !dbg !30
  %108 = extractelement <4 x i1> %93, i64 3, !dbg !30
  %109 = select i1 %108, float %100, float %101, !dbg !30
  %110 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !24
  %111 = insertelement <4 x i32> %110, i32 %52, i64 1, !dbg !24
  %112 = insertelement <4 x i32> %111, i32 %53, i64 2, !dbg !24
  %113 = insertelement <4 x i32> %112, i32 %54, i64 3, !dbg !24
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !24
  %115 = fadd <4 x float> %91, %114, !dbg !28
  %116 = fcmp ogt <4 x float> %115, zeroinitializer, !dbg !29
  %117 = extractelement <4 x float> %115, i64 0, !dbg !30
  %118 = fmul float %117, 0x3F847AE140000000, !dbg !31
  %119 = extractelement <4 x float> %115, i64 1, !dbg !30
  %120 = fmul float %119, 0x3F847AE140000000, !dbg !31
  %121 = extractelement <4 x float> %115, i64 2, !dbg !30
  %122 = fmul float %121, 0x3F847AE140000000, !dbg !31
  %123 = extractelement <4 x float> %115, i64 3, !dbg !30
  %124 = fmul float %123, 0x3F847AE140000000, !dbg !31
  %125 = extractelement <4 x i1> %116, i64 0, !dbg !30
  %126 = select i1 %125, float %117, float %118, !dbg !30
  %127 = extractelement <4 x i1> %116, i64 1, !dbg !30
  %128 = select i1 %127, float %119, float %120, !dbg !30
  %129 = extractelement <4 x i1> %116, i64 2, !dbg !30
  %130 = select i1 %129, float %121, float %122, !dbg !30
  %131 = extractelement <4 x i1> %116, i64 3, !dbg !30
  %132 = select i1 %131, float %123, float %124, !dbg !30
  %133 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !24
  %134 = insertelement <4 x i32> %133, i32 %57, i64 1, !dbg !24
  %135 = insertelement <4 x i32> %134, i32 %58, i64 2, !dbg !24
  %136 = insertelement <4 x i32> %135, i32 %59, i64 3, !dbg !24
  %137 = bitcast <4 x i32> %136 to <4 x float>, !dbg !24
  %138 = fadd <4 x float> %91, %137, !dbg !28
  %139 = fcmp ogt <4 x float> %138, zeroinitializer, !dbg !29
  %140 = extractelement <4 x float> %138, i64 0, !dbg !30
  %141 = fmul float %140, 0x3F847AE140000000, !dbg !31
  %142 = extractelement <4 x float> %138, i64 1, !dbg !30
  %143 = fmul float %142, 0x3F847AE140000000, !dbg !31
  %144 = extractelement <4 x float> %138, i64 2, !dbg !30
  %145 = fmul float %144, 0x3F847AE140000000, !dbg !31
  %146 = extractelement <4 x float> %138, i64 3, !dbg !30
  %147 = fmul float %146, 0x3F847AE140000000, !dbg !31
  %148 = extractelement <4 x i1> %139, i64 0, !dbg !30
  %149 = select i1 %148, float %140, float %141, !dbg !30
  %150 = extractelement <4 x i1> %139, i64 1, !dbg !30
  %151 = select i1 %150, float %142, float %143, !dbg !30
  %152 = extractelement <4 x i1> %139, i64 2, !dbg !30
  %153 = select i1 %152, float %144, float %145, !dbg !30
  %154 = extractelement <4 x i1> %139, i64 3, !dbg !30
  %155 = select i1 %154, float %146, float %147, !dbg !30
  %156 = insertelement <4 x i32> poison, i32 %61, i64 0, !dbg !24
  %157 = insertelement <4 x i32> %156, i32 %62, i64 1, !dbg !24
  %158 = insertelement <4 x i32> %157, i32 %63, i64 2, !dbg !24
  %159 = insertelement <4 x i32> %158, i32 %64, i64 3, !dbg !24
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !24
  %161 = fadd <4 x float> %91, %160, !dbg !28
  %162 = fcmp ogt <4 x float> %161, zeroinitializer, !dbg !29
  %163 = extractelement <4 x float> %161, i64 0, !dbg !30
  %164 = fmul float %163, 0x3F847AE140000000, !dbg !31
  %165 = extractelement <4 x float> %161, i64 1, !dbg !30
  %166 = fmul float %165, 0x3F847AE140000000, !dbg !31
  %167 = extractelement <4 x float> %161, i64 2, !dbg !30
  %168 = fmul float %167, 0x3F847AE140000000, !dbg !31
  %169 = extractelement <4 x float> %161, i64 3, !dbg !30
  %170 = fmul float %169, 0x3F847AE140000000, !dbg !31
  %171 = extractelement <4 x i1> %162, i64 0, !dbg !30
  %172 = select i1 %171, float %163, float %164, !dbg !30
  %173 = extractelement <4 x i1> %162, i64 1, !dbg !30
  %174 = select i1 %173, float %165, float %166, !dbg !30
  %175 = extractelement <4 x i1> %162, i64 2, !dbg !30
  %176 = select i1 %175, float %167, float %168, !dbg !30
  %177 = extractelement <4 x i1> %162, i64 3, !dbg !30
  %178 = select i1 %177, float %169, float %170, !dbg !30
  %179 = zext <4 x i1> %93 to <4 x i8>, !dbg !32
  %180 = bitcast <4 x i8> %179 to i32, !dbg !32
  %181 = zext <4 x i1> %116 to <4 x i8>, !dbg !32
  %182 = bitcast <4 x i8> %181 to i32, !dbg !32
  %183 = zext <4 x i1> %139 to <4 x i8>, !dbg !32
  %184 = bitcast <4 x i8> %183 to i32, !dbg !32
  %185 = zext <4 x i1> %162 to <4 x i8>, !dbg !32
  %186 = bitcast <4 x i8> %185 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %182, i32 %184, i32 %186, ptr addrspace(1) %83, i1 %29) #2, !dbg !32
  %187 = or disjoint i32 %17, %24, !dbg !17
  %188 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !33
  %189 = insertelement <2 x i32> %188, i32 %24, i64 1, !dbg !33
  %190 = insertelement <2 x i32> <i32 1, i32 poison>, i32 %17, i64 1, !dbg !33
  %191 = ashr exact <2 x i32> %189, %190, !dbg !33
  %192 = or disjoint <2 x i32> %189, %190, !dbg !33
  %193 = shufflevector <2 x i32> %191, <2 x i32> %192, <2 x i32> <i32 0, i32 3>, !dbg !33
  %194 = or disjoint i32 %187, 8, !dbg !17
  %195 = or disjoint i32 %187, 16, !dbg !17
  %196 = or disjoint i32 %187, 24, !dbg !17
  %197 = or disjoint i32 %187, 32, !dbg !17
  %198 = or disjoint i32 %187, 40, !dbg !17
  %199 = or disjoint i32 %187, 48, !dbg !17
  %200 = or disjoint i32 %187, 56, !dbg !17
  %201 = icmp slt i32 %187, 64, !dbg !18
  %202 = icmp slt i32 %194, 64, !dbg !18
  %203 = icmp slt i32 %195, 64, !dbg !18
  %204 = icmp slt i32 %196, 64, !dbg !18
  %205 = icmp slt i32 %197, 64, !dbg !18
  %206 = icmp slt i32 %198, 64, !dbg !18
  %207 = icmp slt i32 %199, 64, !dbg !18
  %208 = icmp slt i32 %200, 64, !dbg !18
  %209 = sdiv i32 %187, 8, !dbg !34
  %210 = sdiv i32 %194, 8, !dbg !34
  %211 = sdiv i32 %195, 8, !dbg !34
  %212 = sdiv i32 %196, 8, !dbg !34
  %213 = sdiv i32 %197, 8, !dbg !34
  %214 = sdiv i32 %198, 8, !dbg !34
  %215 = sdiv i32 %199, 8, !dbg !34
  %216 = sdiv i32 %200, 8, !dbg !34
  %217 = srem <2 x i32> %193, <i32 2, i32 8>, !dbg !35
  %218 = shl nsw <2 x i32> %217, <i32 4, i32 1>, !dbg !36
  %219 = shl i32 %209, 5, !dbg !37
  %220 = shl i32 %210, 5, !dbg !37
  %221 = shl i32 %211, 5, !dbg !37
  %222 = shl i32 %212, 5, !dbg !37
  %223 = shl i32 %213, 5, !dbg !37
  %224 = shl i32 %214, 5, !dbg !37
  %225 = shl i32 %215, 5, !dbg !37
  %226 = shl i32 %216, 5, !dbg !37
  %227 = shl i32 %31, 8, !dbg !38
  %228 = extractelement <2 x i32> %218, i64 0, !dbg !39
  %229 = add i32 %228, %227, !dbg !39
  %230 = extractelement <2 x i32> %218, i64 1, !dbg !40
  %231 = add i32 %229, %230, !dbg !40
  %232 = add i32 %231, %219, !dbg !41
  %233 = add i32 %231, %220, !dbg !41
  %234 = add i32 %231, %221, !dbg !41
  %235 = add i32 %231, %222, !dbg !41
  %236 = add i32 %231, %223, !dbg !41
  %237 = add i32 %231, %224, !dbg !41
  %238 = add i32 %231, %225, !dbg !41
  %239 = add i32 %231, %226, !dbg !41
  %240 = sext i32 %232 to i64, !dbg !42
  %241 = getelementptr float, ptr addrspace(1) %3, i64 %240, !dbg !42
  %242 = sext i32 %233 to i64, !dbg !42
  %243 = getelementptr float, ptr addrspace(1) %3, i64 %242, !dbg !42
  %244 = sext i32 %234 to i64, !dbg !42
  %245 = getelementptr float, ptr addrspace(1) %3, i64 %244, !dbg !42
  %246 = sext i32 %235 to i64, !dbg !42
  %247 = getelementptr float, ptr addrspace(1) %3, i64 %246, !dbg !42
  %248 = sext i32 %236 to i64, !dbg !42
  %249 = getelementptr float, ptr addrspace(1) %3, i64 %248, !dbg !42
  %250 = sext i32 %237 to i64, !dbg !42
  %251 = getelementptr float, ptr addrspace(1) %3, i64 %250, !dbg !42
  %252 = sext i32 %238 to i64, !dbg !42
  %253 = getelementptr float, ptr addrspace(1) %3, i64 %252, !dbg !42
  %254 = sext i32 %239 to i64, !dbg !42
  %255 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !42
  %256 = shl i32 %9, 10, !dbg !43
  %257 = and i32 %256, 3072, !dbg !43
  %258 = or disjoint i32 %257, %11, !dbg !43
  %259 = and i32 %12, 510, !dbg !43
  %260 = lshr exact i32 %257, 3, !dbg !43
  %261 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %260, !dbg !43
  %262 = getelementptr float, ptr addrspace(3) %261, i32 %258, !dbg !43
  %263 = bitcast float %103 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !43
  %264 = or disjoint i32 %258, 64, !dbg !43
  %265 = lshr i32 %264, 5, !dbg !43
  %266 = and i32 %265, 98, !dbg !43
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !43
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %264, !dbg !43
  %269 = bitcast float %105 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !43
  %270 = or disjoint i32 %258, 128, !dbg !43
  %271 = lshr i32 %270, 5, !dbg !43
  %272 = and i32 %271, 100, !dbg !43
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !43
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !43
  %275 = bitcast float %107 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !43
  %276 = or disjoint i32 %258, 192, !dbg !43
  %277 = lshr i32 %276, 5, !dbg !43
  %278 = and i32 %277, 102, !dbg !43
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !43
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !43
  %281 = bitcast float %109 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !43
  %282 = or disjoint i32 %258, 256, !dbg !43
  %283 = lshr i32 %282, 5, !dbg !43
  %284 = and i32 %283, 104, !dbg !43
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !43
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !43
  %287 = bitcast float %126 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !43
  %288 = or disjoint i32 %258, 320, !dbg !43
  %289 = lshr i32 %288, 5, !dbg !43
  %290 = and i32 %289, 106, !dbg !43
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !43
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !43
  %293 = bitcast float %128 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %292, <1 x i32> %293, i1 true) #2, !dbg !43
  %294 = or disjoint i32 %258, 384, !dbg !43
  %295 = lshr i32 %294, 5, !dbg !43
  %296 = and i32 %295, 108, !dbg !43
  %297 = getelementptr float, ptr addrspace(3) @global_smem, i32 %296, !dbg !43
  %298 = getelementptr float, ptr addrspace(3) %297, i32 %294, !dbg !43
  %299 = bitcast float %130 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %298, <1 x i32> %299, i1 true) #2, !dbg !43
  %300 = or disjoint i32 %258, 448, !dbg !43
  %301 = lshr i32 %300, 5, !dbg !43
  %302 = and i32 %301, 110, !dbg !43
  %303 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !43
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %300, !dbg !43
  %305 = bitcast float %132 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !43
  %306 = or disjoint i32 %258, 512, !dbg !43
  %307 = lshr i32 %306, 5, !dbg !43
  %308 = and i32 %307, 112, !dbg !43
  %309 = getelementptr float, ptr addrspace(3) @global_smem, i32 %308, !dbg !43
  %310 = getelementptr float, ptr addrspace(3) %309, i32 %306, !dbg !43
  %311 = bitcast float %149 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %310, <1 x i32> %311, i1 true) #2, !dbg !43
  %312 = or disjoint i32 %258, 576, !dbg !43
  %313 = lshr i32 %312, 5, !dbg !43
  %314 = and i32 %313, 114, !dbg !43
  %315 = getelementptr float, ptr addrspace(3) @global_smem, i32 %314, !dbg !43
  %316 = getelementptr float, ptr addrspace(3) %315, i32 %312, !dbg !43
  %317 = bitcast float %151 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #2, !dbg !43
  %318 = or disjoint i32 %258, 640, !dbg !43
  %319 = lshr i32 %318, 5, !dbg !43
  %320 = and i32 %319, 116, !dbg !43
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !43
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %318, !dbg !43
  %323 = bitcast float %153 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !43
  %324 = or disjoint i32 %258, 704, !dbg !43
  %325 = lshr i32 %324, 5, !dbg !43
  %326 = and i32 %325, 118, !dbg !43
  %327 = getelementptr float, ptr addrspace(3) @global_smem, i32 %326, !dbg !43
  %328 = getelementptr float, ptr addrspace(3) %327, i32 %324, !dbg !43
  %329 = bitcast float %155 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %328, <1 x i32> %329, i1 true) #2, !dbg !43
  %330 = or disjoint i32 %258, 768, !dbg !43
  %331 = lshr i32 %330, 5, !dbg !43
  %332 = and i32 %331, 120, !dbg !43
  %333 = getelementptr float, ptr addrspace(3) @global_smem, i32 %332, !dbg !43
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %330, !dbg !43
  %335 = bitcast float %172 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #2, !dbg !43
  %336 = or disjoint i32 %258, 832, !dbg !43
  %337 = lshr i32 %336, 5, !dbg !43
  %338 = and i32 %337, 122, !dbg !43
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !43
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %336, !dbg !43
  %341 = bitcast float %174 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #2, !dbg !43
  %342 = or disjoint i32 %258, 896, !dbg !43
  %343 = lshr i32 %342, 5, !dbg !43
  %344 = and i32 %343, 124, !dbg !43
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !43
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %342, !dbg !43
  %347 = bitcast float %176 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !43
  %348 = or disjoint i32 %258, 960, !dbg !43
  %349 = lshr i32 %348, 5, !dbg !43
  %350 = and i32 %349, 126, !dbg !43
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %350, !dbg !43
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %348, !dbg !43
  %353 = bitcast float %178 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %354 = lshr i32 %12, 5, !dbg !43
  %355 = and i32 %354, 14, !dbg !43
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %355, !dbg !43
  %357 = getelementptr inbounds float, ptr addrspace(3) %356, i32 %259, !dbg !43
  %358 = load <2 x i32>, ptr addrspace(3) %357, align 8, !dbg !43
  %359 = or disjoint i32 %259, 512, !dbg !43
  %360 = lshr i32 %359, 5, !dbg !43
  %361 = and i32 %360, 30, !dbg !43
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !43
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %359, !dbg !43
  %364 = load <2 x i32>, ptr addrspace(3) %363, align 8, !dbg !43
  %365 = or disjoint i32 %259, 1024, !dbg !43
  %366 = lshr i32 %365, 5, !dbg !43
  %367 = and i32 %366, 46, !dbg !43
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %367, !dbg !43
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %365, !dbg !43
  %370 = load <2 x i32>, ptr addrspace(3) %369, align 8, !dbg !43
  %371 = or disjoint i32 %259, 1536, !dbg !43
  %372 = lshr i32 %371, 5, !dbg !43
  %373 = and i32 %372, 62, !dbg !43
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %373, !dbg !43
  %375 = getelementptr inbounds float, ptr addrspace(3) %374, i32 %371, !dbg !43
  %376 = load <2 x i32>, ptr addrspace(3) %375, align 8, !dbg !43
  %377 = or disjoint i32 %259, 2048, !dbg !43
  %378 = lshr i32 %377, 5, !dbg !43
  %379 = and i32 %378, 78, !dbg !43
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %379, !dbg !43
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %377, !dbg !43
  %382 = load <2 x i32>, ptr addrspace(3) %381, align 8, !dbg !43
  %383 = or disjoint i32 %259, 2560, !dbg !43
  %384 = lshr i32 %383, 5, !dbg !43
  %385 = and i32 %384, 94, !dbg !43
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %385, !dbg !43
  %387 = getelementptr inbounds float, ptr addrspace(3) %386, i32 %383, !dbg !43
  %388 = load <2 x i32>, ptr addrspace(3) %387, align 8, !dbg !43
  %389 = or disjoint i32 %259, 3072, !dbg !43
  %390 = lshr i32 %389, 5, !dbg !43
  %391 = and i32 %390, 110, !dbg !43
  %392 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %391, !dbg !43
  %393 = getelementptr inbounds float, ptr addrspace(3) %392, i32 %389, !dbg !43
  %394 = load <2 x i32>, ptr addrspace(3) %393, align 8, !dbg !43
  %395 = or disjoint i32 %259, 3584, !dbg !43
  %396 = lshr i32 %395, 5, !dbg !43
  %397 = and i32 %396, 126, !dbg !43
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %397, !dbg !43
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %395, !dbg !43
  %400 = load <2 x i32>, ptr addrspace(3) %399, align 8, !dbg !43
  %.extract = extractelement <2 x i32> %358, i64 0, !dbg !43
  %.extract18 = extractelement <2 x i32> %358, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract18, ptr addrspace(1) %241, i1 %201) #2, !dbg !43
  %.extract19 = extractelement <2 x i32> %364, i64 0, !dbg !43
  %.extract20 = extractelement <2 x i32> %364, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract19, i32 %.extract20, ptr addrspace(1) %243, i1 %202) #2, !dbg !43
  %.extract21 = extractelement <2 x i32> %370, i64 0, !dbg !43
  %.extract22 = extractelement <2 x i32> %370, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract21, i32 %.extract22, ptr addrspace(1) %245, i1 %203) #2, !dbg !43
  %.extract23 = extractelement <2 x i32> %376, i64 0, !dbg !43
  %.extract24 = extractelement <2 x i32> %376, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract23, i32 %.extract24, ptr addrspace(1) %247, i1 %204) #2, !dbg !43
  %.extract25 = extractelement <2 x i32> %382, i64 0, !dbg !43
  %.extract26 = extractelement <2 x i32> %382, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract25, i32 %.extract26, ptr addrspace(1) %249, i1 %205) #2, !dbg !43
  %.extract27 = extractelement <2 x i32> %388, i64 0, !dbg !43
  %.extract28 = extractelement <2 x i32> %388, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract27, i32 %.extract28, ptr addrspace(1) %251, i1 %206) #2, !dbg !43
  %.extract29 = extractelement <2 x i32> %394, i64 0, !dbg !43
  %.extract30 = extractelement <2 x i32> %394, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract29, i32 %.extract30, ptr addrspace(1) %253, i1 %207) #2, !dbg !43
  %.extract31 = extractelement <2 x i32> %400, i64 0, !dbg !43
  %.extract32 = extractelement <2 x i32> %400, i64 1, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract31, i32 %.extract32, ptr addrspace(1) %255, i1 %208) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjq7fqozuqqoevvjxwtrriuldvdd2aplp322qhxzxhlleuxrvre3.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", linkageName: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 19, scope: !7)
!21 = !DILocation(line: 36, column: 38, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 30, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 44, column: 25, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 43, column: 32, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 21, scope: !7)
!34 = !DILocation(line: 32, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 26, scope: !7)
!36 = !DILocation(line: 45, column: 40, scope: !7)
!37 = !DILocation(line: 45, column: 48, scope: !7)
!38 = !DILocation(line: 45, column: 57, scope: !7)
!39 = !DILocation(line: 45, column: 37, scope: !7)
!40 = !DILocation(line: 45, column: 45, scope: !7)
!41 = !DILocation(line: 45, column: 53, scope: !7)
!42 = !DILocation(line: 45, column: 25, scope: !7)
!43 = !DILocation(line: 45, column: 68, scope: !7)
!44 = !DILocation(line: 45, column: 4, scope: !7)
