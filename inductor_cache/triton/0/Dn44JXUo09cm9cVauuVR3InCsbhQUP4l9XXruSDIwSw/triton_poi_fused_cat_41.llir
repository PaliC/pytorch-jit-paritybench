; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 1016, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %15, 4, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %19 = sdiv i32 %.frozen, 4096, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = mul i32 %19, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %16, 4096, !dbg !16
  %.frozen22 = freeze i32 %15, !dbg !17
  %23 = sdiv i32 %.frozen22, 262144, !dbg !17
  %24 = icmp slt i32 %20, 32, !dbg !18
  %25 = shl nsw i32 %20, 12, !dbg !19
  %26 = mul i32 %23, 262144, !dbg !20
  %srem.decomposed = sub i32 %.frozen22, %26, !dbg !20
  %27 = shl nsw i32 %23, 17, !dbg !21
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !22
  %29 = add nsw i32 %27, %22, !dbg !20
  %30 = add nsw i32 %29, %25, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !23
  %32 = getelementptr i1, ptr addrspace(1) %0, i64 %31, !dbg !23
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u32 $0, 0x0;\0A\09@!$5 mov.u32 $1, 0x0;", "=r,=r,l,b,b,b"(ptr addrspace(1) %32, i1 %24, i1 %24, i1 %24) #2, !dbg !24
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !24
  %35 = bitcast i32 %34 to <4 x i8>, !dbg !24
  %36 = extractvalue { i32, i32 } %33, 1, !dbg !24
  %37 = bitcast i32 %36 to <4 x i8>, !dbg !24
  %38 = extractelement <4 x i8> %35, i64 0, !dbg !24
  %39 = extractelement <4 x i8> %35, i64 1, !dbg !24
  %40 = extractelement <4 x i8> %35, i64 2, !dbg !24
  %41 = extractelement <4 x i8> %35, i64 3, !dbg !24
  %42 = extractelement <4 x i8> %37, i64 0, !dbg !24
  %43 = extractelement <4 x i8> %37, i64 1, !dbg !24
  %44 = extractelement <4 x i8> %37, i64 2, !dbg !24
  %45 = extractelement <4 x i8> %37, i64 3, !dbg !24
  %.not = icmp eq i8 %38, 0, !dbg !24
  %.not1 = icmp eq i8 %39, 0, !dbg !24
  %.not2 = icmp eq i8 %40, 0, !dbg !24
  %.not3 = icmp eq i8 %41, 0, !dbg !24
  %.not4 = icmp eq i8 %42, 0, !dbg !24
  %.not5 = icmp eq i8 %43, 0, !dbg !24
  %.not6 = icmp eq i8 %44, 0, !dbg !24
  %.not7 = icmp eq i8 %45, 0, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !25
  %47 = sext i32 %30 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = sext i32 %20 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %70 = bitcast i32 %69 to float, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %74 = bitcast i32 %73 to float, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %24, i32 0, i1 %24) #2, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %54, %70, !dbg !29
  %86 = fadd float %55, %72, !dbg !29
  %87 = fadd float %56, %74, !dbg !29
  %88 = fadd float %57, %76, !dbg !29
  %89 = fadd float %63, %78, !dbg !29
  %90 = fadd float %64, %80, !dbg !29
  %91 = fadd float %65, %82, !dbg !29
  %92 = fadd float %66, %84, !dbg !29
  %93 = fmul float %85, 0x3FB99999A0000000, !dbg !30
  %94 = fmul float %86, 0x3FB99999A0000000, !dbg !30
  %95 = fmul float %87, 0x3FB99999A0000000, !dbg !30
  %96 = fmul float %88, 0x3FB99999A0000000, !dbg !30
  %97 = fmul float %89, 0x3FB99999A0000000, !dbg !30
  %98 = fmul float %90, 0x3FB99999A0000000, !dbg !30
  %99 = fmul float %91, 0x3FB99999A0000000, !dbg !30
  %100 = fmul float %92, 0x3FB99999A0000000, !dbg !30
  %101 = select i1 %.not, float %93, float %85, !dbg !31
  %102 = select i1 %.not1, float %94, float %86, !dbg !31
  %103 = select i1 %.not2, float %95, float %87, !dbg !31
  %104 = select i1 %.not3, float %96, float %88, !dbg !31
  %105 = select i1 %.not4, float %97, float %89, !dbg !31
  %106 = select i1 %.not5, float %98, float %90, !dbg !31
  %107 = select i1 %.not6, float %99, float %91, !dbg !31
  %108 = select i1 %.not7, float %100, float %92, !dbg !31
  %109 = icmp sgt i32 %20, 31, !dbg !32
  %110 = add nsw i32 %25, -131072, !dbg !33
  %111 = add nsw i32 %110, %27, !dbg !34
  %112 = add nsw i32 %111, %.decomposed, !dbg !35
  %113 = add nsw i32 %29, %110, !dbg !35
  %114 = sext i32 %112 to i64, !dbg !36
  %115 = getelementptr float, ptr addrspace(1) %3, i64 %114, !dbg !36
  %116 = sext i32 %113 to i64, !dbg !36
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !36
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #2, !dbg !37
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !37
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !37
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !37
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !37
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109, i32 0, i1 %109) #2, !dbg !37
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !37
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !37
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !37
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !37
  %128 = sext i32 %17 to i64, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !38
  %130 = sext i32 %18 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !38
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !39
  %133 = bitcast float %101 to i32, !dbg !39
  %134 = select i1 %24, i32 %133, i32 %119, !dbg !40
  %135 = bitcast float %102 to i32, !dbg !39
  %136 = select i1 %24, i32 %135, i32 %120, !dbg !40
  %137 = bitcast float %103 to i32, !dbg !39
  %138 = select i1 %24, i32 %137, i32 %121, !dbg !40
  %139 = bitcast float %104 to i32, !dbg !39
  %140 = select i1 %24, i32 %139, i32 %122, !dbg !40
  %141 = bitcast float %105 to i32, !dbg !39
  %142 = select i1 %24, i32 %141, i32 %124, !dbg !40
  %143 = bitcast float %106 to i32, !dbg !39
  %144 = select i1 %24, i32 %143, i32 %125, !dbg !40
  %145 = bitcast float %107 to i32, !dbg !39
  %146 = select i1 %24, i32 %145, i32 %126, !dbg !40
  %147 = bitcast float %108 to i32, !dbg !39
  %148 = select i1 %24, i32 %147, i32 %127, !dbg !40
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %132, i32 %134, i32 %136, i32 %138, i32 %140, i1 true) #2, !dbg !39
  %149 = getelementptr inbounds i8, ptr addrspace(3) %132, i32 16, !dbg !39
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %149, i32 %142, i32 %144, i32 %146, i32 %148, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !39
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !39
  %152 = load <4 x i32>, ptr addrspace(3) %151, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %150, align 16, !dbg !39
  %153 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 4, !dbg !39
  %.extract15 = load i32, ptr addrspace(3) %153, align 4, !dbg !39
  %154 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 8, !dbg !39
  %.extract16 = load i32, ptr addrspace(3) %154, align 8, !dbg !39
  %155 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 12, !dbg !39
  %.extract17 = load i32, ptr addrspace(3) %155, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %129, i1 true) #2, !dbg !39
  %.extract18 = extractelement <4 x i32> %152, i64 0, !dbg !39
  %.extract19 = extractelement <4 x i32> %152, i64 1, !dbg !39
  %.extract20 = extractelement <4 x i32> %152, i64 2, !dbg !39
  %.extract21 = extractelement <4 x i32> %152, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %131, i1 true) #2, !dbg !39
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvxnvkgqz32pjflewq7avusnubr6glctsoyjdhfwzwkmdgji5k3w.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_poi_fused_cat_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_41", linkageName: "triton_poi_fused_cat_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 41, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 54, scope: !7)
!22 = !DILocation(line: 33, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 59, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 39, column: 33, scope: !7)
!32 = !DILocation(line: 42, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 42, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 45, column: 56, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 68, scope: !7)
!38 = !DILocation(line: 47, column: 25, scope: !7)
!39 = !DILocation(line: 47, column: 37, scope: !7)
!40 = !DILocation(line: 0, scope: !7)
!41 = !DILocation(line: 47, column: 4, scope: !7)
