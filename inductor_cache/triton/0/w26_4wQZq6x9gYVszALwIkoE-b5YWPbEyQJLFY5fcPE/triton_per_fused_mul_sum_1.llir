; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %11, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = shl i32 %8, 2, !dbg !15
  %20 = and i32 %19, 12, !dbg !15
  %21 = and i32 %19, 60, !dbg !15
  %22 = sdiv i32 %13, 64, !dbg !16
  %23 = sdiv i32 %14, 64, !dbg !16
  %24 = sdiv i32 %13, 16, !dbg !17
  %25 = sdiv i32 %14, 16, !dbg !17
  %26 = shl nsw i32 %22, 6, !dbg !18
  %27 = shl nsw i32 %23, 6, !dbg !18
  %28 = or disjoint i32 %26, %21, !dbg !19
  %29 = or disjoint i32 %27, %21, !dbg !19
  %30 = sext i32 %28 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !21
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !21
  %44 = shl i32 %8, 6, !dbg !22
  %45 = and i32 %44, 768, !dbg !22
  %46 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !23
  %47 = insertelement <2 x i32> %46, i32 %24, i64 1, !dbg !23
  %48 = srem <2 x i32> %47, <i32 16, i32 4>, !dbg !23
  %49 = shl nsw <2 x i32> %48, <i32 4, i32 10>, !dbg !24
  %50 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !23
  %51 = insertelement <2 x i32> %50, i32 %25, i64 1, !dbg !23
  %52 = srem <2 x i32> %51, <i32 16, i32 4>, !dbg !23
  %53 = shl nsw <2 x i32> %52, <i32 4, i32 10>, !dbg !24
  %54 = or disjoint i32 %45, %20, !dbg !25
  %55 = extractelement <2 x i32> %49, i64 0, !dbg !26
  %56 = add nsw i32 %54, %55, !dbg !26
  %57 = extractelement <2 x i32> %49, i64 1, !dbg !27
  %58 = add nsw i32 %56, %57, !dbg !27
  %59 = extractelement <2 x i32> %53, i64 0, !dbg !26
  %60 = add nsw i32 %54, %59, !dbg !26
  %61 = extractelement <2 x i32> %53, i64 1, !dbg !27
  %62 = add nsw i32 %60, %61, !dbg !27
  %63 = sext i32 %58 to i64, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !28
  %65 = sext i32 %62 to i64, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %64, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #3, !dbg !29
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !29
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !29
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !29
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !29
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !29
  %77 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !21
  %78 = insertelement <2 x i32> %77, i32 %36, i64 1, !dbg !21
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !21
  %80 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !29
  %81 = insertelement <2 x i32> %80, i32 %69, i64 1, !dbg !29
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !29
  %83 = fmul <2 x float> %79, %82, !dbg !30
  %84 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !21
  %85 = insertelement <2 x i32> %84, i32 %37, i64 1, !dbg !21
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !21
  %87 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !29
  %88 = insertelement <2 x i32> %87, i32 %70, i64 1, !dbg !29
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !29
  %90 = fmul <2 x float> %86, %89, !dbg !30
  %91 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !21
  %92 = insertelement <2 x i32> %91, i32 %41, i64 1, !dbg !21
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !21
  %94 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !29
  %95 = insertelement <2 x i32> %94, i32 %74, i64 1, !dbg !29
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !29
  %97 = fmul <2 x float> %93, %96, !dbg !30
  %98 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !21
  %99 = insertelement <2 x i32> %98, i32 %42, i64 1, !dbg !21
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !21
  %101 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !29
  %102 = insertelement <2 x i32> %101, i32 %75, i64 1, !dbg !29
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !29
  %104 = fmul <2 x float> %100, %103, !dbg !30
  %shift = shufflevector <2 x float> %83, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %105 = fadd <2 x float> %83, %shift, !dbg !31
  %shift2 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %106 = fadd <2 x float> %shift2, %105, !dbg !31
  %107 = fadd <2 x float> %90, %106, !dbg !31
  %108 = extractelement <2 x float> %107, i64 0, !dbg !31
  %109 = select i1 %16, float %108, float 0.000000e+00, !dbg !31
  %shift3 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %110 = fadd <2 x float> %97, %shift3, !dbg !31
  %shift4 = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !31
  %111 = fadd <2 x float> %shift4, %110, !dbg !31
  %112 = fadd <2 x float> %104, %111, !dbg !31
  %113 = extractelement <2 x float> %112, i64 0, !dbg !31
  %114 = select i1 %17, float %113, float 0.000000e+00, !dbg !31
  %115 = bitcast float %109 to i32, !dbg !36
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !36
  %117 = bitcast i32 %116 to float, !dbg !36
  %118 = fadd float %109, %117, !dbg !31
  %119 = bitcast float %118 to i32, !dbg !36
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = fadd float %118, %121, !dbg !31
  %123 = bitcast float %122 to i32, !dbg !36
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 2, i32 31), !dbg !36
  %125 = bitcast i32 %124 to float, !dbg !36
  %126 = fadd float %122, %125, !dbg !31
  %127 = bitcast float %126 to i32, !dbg !36
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 1, i32 31), !dbg !36
  %129 = bitcast i32 %128 to float, !dbg !36
  %130 = fadd float %126, %129, !dbg !31
  %131 = bitcast float %114 to i32, !dbg !36
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = fadd float %114, %133, !dbg !31
  %135 = bitcast float %134 to i32, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fadd float %134, %137, !dbg !31
  %139 = bitcast float %138 to i32, !dbg !36
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = fadd float %138, %141, !dbg !31
  %143 = bitcast float %142 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %142, %145, !dbg !31
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  %148 = bitcast float %130 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #3, !dbg !37
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %150 = bitcast float %146 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %152 = load i32, ptr addrspace(3) %151, align 4, !dbg !37
  %153 = sext i32 %15 to i64, !dbg !38
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !38
  %155 = and i32 %8, 224, !dbg !39
  %156 = icmp eq i32 %155, 0, !dbg !39
  %157 = and i1 %156, %18, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %152, ptr addrspace(1) %154, i1 %157) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clije5n3zqrlejmzf2iasbdve5mbuijnh6airagjdz45z6fxthuk.py", directory: "inductor_cache/li")
!4 = !{ptr @triton_per_fused_mul_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sum_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sum_1", linkageName: "triton_per_fused_mul_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 21, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 30, scope: !7)
!21 = !DILocation(line: 36, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 37, column: 38, scope: !7)
!25 = !DILocation(line: 37, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 43, scope: !7)
!27 = !DILocation(line: 37, column: 52, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 62, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 41, column: 24, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 41, column: 27, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 42, column: 36, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
