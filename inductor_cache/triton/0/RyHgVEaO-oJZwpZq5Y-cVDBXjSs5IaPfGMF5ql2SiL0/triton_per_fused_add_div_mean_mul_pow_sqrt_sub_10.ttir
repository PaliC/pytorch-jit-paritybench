#loc = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":40:24)
#loc31 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":47:26)
#loc48 = loc(callsite(#loc1 at #loc24))
#loc51 = loc(callsite(#loc1 at #loc31))
module {
  tt.func public @triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":19:0)) attributes {noinline = false} {
    %c96_i32 = arith.constant 96 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999997E-7> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<9.600000e+01> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x128xf32> loc(#loc1)
    %cst_2 = arith.constant dense<96> : tensor<1x128xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<128xi32> -> tensor<1x128xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<1x128xi32> loc(#loc6)
    %6 = arith.muli %0, %c96_i32 : i32 loc(#loc7)
    %7 = tt.splat %6 : i32 -> tensor<1x128xi32> loc(#loc8)
    %8 = arith.addi %4, %7 : tensor<1x128xi32> loc(#loc8)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc9)
    %10 = tt.addptr %9, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc9)
    %11 = tt.splat %1 : i1 -> tensor<1x128xi1> loc(#loc10)
    %12 = arith.andi %5, %11 : tensor<1x128xi1> loc(#loc10)
    %13 = tt.load %10, %12, %cst_1 : tensor<1x128x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %4 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc12)
    %16 = tt.load %15, %5, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc14)
    %18 = tt.addptr %17, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc14)
    %19 = tt.load %18, %12, %cst_1 : tensor<1x128x!tt.ptr<f32>> loc(#loc15)
    %20 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc16)
    %21 = tt.addptr %20, %4 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc16)
    %22 = tt.load %21, %5, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc17)
    %23 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc18)
    %24 = tt.addptr %23, %4 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc18)
    %25 = tt.load %24, %5, %cst_1 evictionPolicy = evict_last : tensor<1x128x!tt.ptr<f32>> loc(#loc19)
    %26 = arith.mulf %16, %19 : tensor<1x128xf32> loc(#loc20)
    %27 = arith.addf %13, %26 : tensor<1x128xf32> loc(#loc21)
    %28 = arith.select %12, %27, %cst_1 : tensor<1x128xi1>, tensor<1x128xf32> loc(#loc22)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc24)), %arg11: f32 loc(callsite(#loc1 at #loc24))):
      %51 = arith.addf %arg10, %arg11 : f32 loc(#loc52)
      tt.reduce.return %51 : f32 loc(#loc47)
    }) : (tensor<1x128xf32>) -> tensor<1xf32> loc(#loc47)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc26)
    %31 = arith.divf %30, %cst_0 : tensor<1x1xf32> loc(#loc27)
    %32 = tt.broadcast %31 : tensor<1x1xf32> -> tensor<1x128xf32> loc(#loc28)
    %33 = arith.subf %27, %32 : tensor<1x128xf32> loc(#loc28)
    %34 = arith.mulf %33, %33 : tensor<1x128xf32> loc(#loc29)
    %35 = arith.select %12, %34, %cst_1 : tensor<1x128xi1>, tensor<1x128xf32> loc(#loc30)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc31)), %arg11: f32 loc(callsite(#loc1 at #loc31))):
      %51 = arith.addf %arg10, %arg11 : f32 loc(#loc53)
      tt.reduce.return %51 : f32 loc(#loc50)
    }) : (tensor<1x128xf32>) -> tensor<1xf32> loc(#loc50)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc32)
    %38 = arith.divf %37, %cst_0 : tensor<1x1xf32> loc(#loc33)
    %39 = arith.addf %38, %cst : tensor<1x1xf32> loc(#loc34)
    %40 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc35)
    %41 = tt.broadcast %40 : tensor<1x1xf32> -> tensor<1x128xf32> loc(#loc36)
    %42 = arith.divf %33, %41 : tensor<1x128xf32> loc(#loc36)
    %43 = arith.mulf %22, %42 : tensor<1x128xf32> loc(#loc37)
    %44 = arith.addf %43, %25 : tensor<1x128xf32> loc(#loc38)
    %45 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc39)
    %46 = tt.addptr %45, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc39)
    tt.store %46, %33, %12 : tensor<1x128x!tt.ptr<f32>> loc(#loc40)
    gpu.barrier loc(#loc41)
    %47 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc42)
    tt.store %48, %40, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc43)
    %49 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>> loc(#loc44)
    %50 = tt.addptr %49, %8 : tensor<1x128x!tt.ptr<f32>>, tensor<1x128xi32> loc(#loc44)
    tt.store %50, %44, %12 : tensor<1x128x!tt.ptr<f32>> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":23:28)
#loc3 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":25:21)
#loc4 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":26:26)
#loc5 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":26:34)
#loc6 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":28:21)
#loc7 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:38)
#loc8 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:35)
#loc9 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:30)
#loc10 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:51)
#loc11 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":31:43)
#loc12 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":32:30)
#loc13 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":32:35)
#loc14 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":33:30)
#loc15 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":33:43)
#loc16 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":34:31)
#loc17 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":34:36)
#loc18 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":35:31)
#loc19 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":35:36)
#loc20 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":36:18)
#loc21 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":37:18)
#loc22 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":39:41)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":40:27)
#loc27 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":42:19)
#loc28 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":43:19)
#loc29 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":44:20)
#loc30 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":46:43)
#loc32 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":47:29)
#loc33 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":48:20)
#loc34 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":50:20)
#loc35 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":51:27)
#loc36 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":52:20)
#loc37 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":53:20)
#loc38 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":54:20)
#loc39 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":55:25)
#loc40 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":55:45)
#loc41 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":56:4)
#loc42 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":57:28)
#loc43 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":57:40)
#loc44 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:25)
#loc45 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:45)
#loc46 = loc("inductor_cache/qk/cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py":58:4)
#loc47 = loc(callsite(#loc23 at #loc24))
#loc49 = loc(callsite(#loc25 at #loc23))
#loc50 = loc(callsite(#loc23 at #loc31))
#loc52 = loc(callsite(#loc49 at #loc24))
#loc53 = loc(callsite(#loc49 at #loc31))
