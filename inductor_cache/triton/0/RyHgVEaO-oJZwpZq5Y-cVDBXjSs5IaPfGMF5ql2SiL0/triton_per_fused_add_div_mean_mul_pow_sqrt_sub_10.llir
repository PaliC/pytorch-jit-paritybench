; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 1024, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 126, !dbg !12
  %18 = icmp samesign ult i32 %17, 96, !dbg !13
  %19 = mul i32 %11, 96, !dbg !14
  %20 = add i32 %19, %17, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = and i1 %18, %12, !dbg !17
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %22, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !18
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !18
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !18
  %27 = zext nneg i32 %17 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !22
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !25
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !26
  %40 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %41 = insertelement <2 x i32> %40, i32 %26, i64 1, !dbg !18
  %42 = bitcast <2 x i32> %41 to <2 x float>, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %44 = insertelement <2 x i32> %43, i32 %31, i64 1, !dbg !20
  %45 = bitcast <2 x i32> %44 to <2 x float>, !dbg !20
  %46 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !22
  %47 = insertelement <2 x i32> %46, i32 %35, i64 1, !dbg !22
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !22
  %49 = fmul <2 x float> %45, %48, !dbg !27
  %50 = fadd <2 x float> %49, %42, !dbg !28
  %51 = extractelement <2 x float> %50, i64 0, !dbg !29
  %52 = extractelement <2 x float> %50, i64 1, !dbg !29
  %53 = fadd float %51, %52, !dbg !29
  %54 = select i1 %23, float %53, float 0.000000e+00, !dbg !29
  %55 = bitcast float %54 to i32, !dbg !34
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 16, i32 31), !dbg !34
  %57 = bitcast i32 %56 to float, !dbg !34
  %58 = fadd float %54, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !34
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 8, i32 31), !dbg !34
  %61 = bitcast i32 %60 to float, !dbg !34
  %62 = fadd float %58, %61, !dbg !29
  %63 = bitcast float %62 to i32, !dbg !34
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 4, i32 31), !dbg !34
  %65 = bitcast i32 %64 to float, !dbg !34
  %66 = fadd float %62, %65, !dbg !29
  %67 = bitcast float %66 to i32, !dbg !34
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 2, i32 31), !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = fadd float %66, %69, !dbg !29
  %71 = bitcast float %70 to i32, !dbg !34
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !34
  %73 = bitcast i32 %72 to float, !dbg !34
  %74 = fadd float %70, %73, !dbg !29
  %75 = icmp eq i32 %14, 0, !dbg !34
  %76 = and i32 %15, 1, !dbg !34
  %77 = zext nneg i32 %76 to i64, !dbg !34
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i64 %77, !dbg !34
  %79 = bitcast float %74 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 %75) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %80 = icmp slt i32 %13, 2, !dbg !34
  %81 = sext i32 %13 to i64, !dbg !34
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i64 %81, !dbg !34
  %83 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %80) #5, !dbg !34
  %84 = bitcast i32 %83 to float, !dbg !34
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %87 = fadd float %84, %86, !dbg !29
  %88 = and i32 %13, 1, !dbg !34
  %89 = icmp eq i32 %88, 0, !dbg !34
  %90 = and i1 %80, %89, !dbg !34
  %91 = bitcast float %87 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %91, i1 %90) #5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !34
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 9.600000e+01) #5, !dbg !35
  %94 = fsub float %51, %93, !dbg !36
  %95 = fsub float %52, %93, !dbg !36
  %96 = fmul float %94, %94, !dbg !37
  %97 = fmul float %95, %95, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %98 = fadd float %96, %97, !dbg !40
  %99 = select i1 %23, float %98, float 0.000000e+00, !dbg !40
  %100 = bitcast float %99 to i32, !dbg !38
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fadd float %99, %102, !dbg !40
  %104 = bitcast float %103 to i32, !dbg !38
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fadd float %103, %106, !dbg !40
  %108 = bitcast float %107 to i32, !dbg !38
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !38
  %110 = bitcast i32 %109 to float, !dbg !38
  %111 = fadd float %107, %110, !dbg !40
  %112 = bitcast float %111 to i32, !dbg !38
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !38
  %114 = bitcast i32 %113 to float, !dbg !38
  %115 = fadd float %111, %114, !dbg !40
  %116 = bitcast float %115 to i32, !dbg !38
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !38
  %118 = bitcast i32 %117 to float, !dbg !38
  %119 = fadd float %115, %118, !dbg !40
  %120 = bitcast float %119 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %120, i1 %75) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %121 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %82, i1 %80) #5, !dbg !38
  %122 = bitcast i32 %121 to float, !dbg !38
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !38
  %124 = bitcast i32 %123 to float, !dbg !38
  %125 = fadd float %122, %124, !dbg !40
  %126 = bitcast float %125 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %126, i1 %90) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %127 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 9.600000e+01) #5, !dbg !41
  %129 = fadd float %128, 0x3EB0C6F7A0000000, !dbg !42
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %130, 0, !dbg !43
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i = icmp eq i32 %131, 0, !dbg !43
  br i1 %.not.i, label %137, label %132, !dbg !43

132:                                              ; preds = %10
  br i1 %.not1.i, label %135, label %133, !dbg !43

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

137:                                              ; preds = %10
  br i1 %.not1.i, label %140, label %138, !dbg !43

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %133, %135, %138, %140
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !43
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i6 = icmp eq i32 %144, 0, !dbg !43
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i9 = icmp eq i32 %145, 0, !dbg !43
  br i1 %.not.i6, label %151, label %146, !dbg !43

146:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %149, label %147, !dbg !43

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

151:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %154, label %152, !dbg !43

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #5, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %147, %149, %152, %154
  %.0.i8 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !43
  %156 = extractvalue { i32, i32 } %39, 1, !dbg !26
  %157 = bitcast i32 %156 to float, !dbg !26
  %158 = extractvalue { i32, i32 } %39, 0, !dbg !26
  %159 = bitcast i32 %158 to float, !dbg !26
  %160 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %161 = bitcast i32 %160 to float, !dbg !24
  %162 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %163 = bitcast i32 %162 to float, !dbg !24
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %.0.i8) #5, !dbg !44
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %.0.i8) #5, !dbg !44
  %166 = fmul float %164, %163, !dbg !45
  %167 = fmul float %165, %161, !dbg !45
  %168 = fadd float %166, %159, !dbg !46
  %169 = fadd float %167, %157, !dbg !46
  %170 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !47
  %171 = bitcast float %94 to i32, !dbg !48
  %172 = bitcast float %95 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %171, i32 %172, ptr addrspace(1) %170, i1 %23) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %173 = sext i32 %11 to i64, !dbg !50
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !50
  %urem = and i32 %13, 63, !dbg !51
  %175 = icmp eq i32 %urem, 0, !dbg !51
  %176 = bitcast float %.0.i to i32, !dbg !51
  %177 = and i1 %175, %12, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %174, i1 %177) #5, !dbg !51
  %178 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !52
  %179 = bitcast float %168 to i32, !dbg !53
  %180 = bitcast float %169 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %178, i1 %23) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqkcoh5gyqyjbmhap2bhkfgmknetci5oj3g7nf4pskxyyn7w3daj.py", directory: "inductor_cache/qk")
!4 = !{ptr @triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10", linkageName: "triton_per_fused_add_div_mean_mul_pow_sqrt_sub_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 38, scope: !7)
!15 = !DILocation(line: 31, column: 35, scope: !7)
!16 = !DILocation(line: 31, column: 30, scope: !7)
!17 = !DILocation(line: 31, column: 51, scope: !7)
!18 = !DILocation(line: 31, column: 43, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 40, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!39 = !DILocation(line: 47, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 27, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 45, scope: !7)
!49 = !DILocation(line: 56, column: 4, scope: !7)
!50 = !DILocation(line: 57, column: 28, scope: !7)
!51 = !DILocation(line: 57, column: 40, scope: !7)
!52 = !DILocation(line: 58, column: 25, scope: !7)
!53 = !DILocation(line: 58, column: 45, scope: !7)
!54 = !DILocation(line: 58, column: 4, scope: !7)
