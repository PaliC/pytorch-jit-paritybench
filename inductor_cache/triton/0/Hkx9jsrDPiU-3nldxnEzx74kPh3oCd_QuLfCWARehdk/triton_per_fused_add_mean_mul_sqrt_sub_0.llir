; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_mul_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 2, !dbg !10
  %7 = and i32 %6, 252, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !11
  %10 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %9, i1 true) #5, !dbg !12
  %11 = extractvalue { i32, i32, i32, i32 } %10, 0, !dbg !12
  %12 = extractvalue { i32, i32, i32, i32 } %10, 1, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %10, 2, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %10, 3, !dbg !12
  %15 = bitcast i32 %11 to float, !dbg !12
  %16 = bitcast i32 %12 to float, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %8, !dbg !13
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #5, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !14
  %25 = bitcast i32 %21 to float, !dbg !14
  %26 = bitcast i32 %22 to float, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = fsub float %15, %25, !dbg !15
  %30 = fsub float %16, %26, !dbg !15
  %31 = fsub float %17, %27, !dbg !15
  %32 = fsub float %18, %28, !dbg !15
  %33 = fmul float %29, %29, !dbg !16
  %34 = fmul float %30, %30, !dbg !16
  %35 = fmul float %31, %31, !dbg !16
  %36 = fmul float %32, %32, !dbg !16
  %37 = fadd float %33, 0x3E112E0BE0000000, !dbg !17
  %38 = fadd float %34, 0x3E112E0BE0000000, !dbg !17
  %39 = fadd float %35, 0x3E112E0BE0000000, !dbg !17
  %40 = fadd float %36, 0x3E112E0BE0000000, !dbg !17
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !18
  %.not.i = icmp eq i32 %41, 0, !dbg !18
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !18
  %.not1.i = icmp eq i32 %42, 0, !dbg !18
  br i1 %.not.i, label %48, label %43, !dbg !18

43:                                               ; preds = %4
  br i1 %.not1.i, label %46, label %44, !dbg !18

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #5, !dbg !18
  br label %__nv_sqrtf.exit, !dbg !18

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #5, !dbg !18
  br label %__nv_sqrtf.exit, !dbg !18

48:                                               ; preds = %4
  br i1 %.not1.i, label %51, label %49, !dbg !18

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #5, !dbg !18
  br label %__nv_sqrtf.exit, !dbg !18

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #5, !dbg !18
  br label %__nv_sqrtf.exit, !dbg !18

__nv_sqrtf.exit:                                  ; preds = %44, %46, %49, %51
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !18
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !18
  %.not.i1 = icmp eq i32 %53, 0, !dbg !18
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !18
  %.not1.i4 = icmp eq i32 %54, 0, !dbg !18
  br i1 %.not.i1, label %60, label %55, !dbg !18

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !18

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #5, !dbg !18
  br label %__nv_sqrtf.exit5, !dbg !18

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #5, !dbg !18
  br label %__nv_sqrtf.exit5, !dbg !18

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !18

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #5, !dbg !18
  br label %__nv_sqrtf.exit5, !dbg !18

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #5, !dbg !18
  br label %__nv_sqrtf.exit5, !dbg !18

__nv_sqrtf.exit5:                                 ; preds = %56, %58, %61, %63
  %.0.i3 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !18
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !18
  %.not.i6 = icmp eq i32 %65, 0, !dbg !18
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !18
  %.not1.i9 = icmp eq i32 %66, 0, !dbg !18
  br i1 %.not.i6, label %72, label %67, !dbg !18

67:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %70, label %68, !dbg !18

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !18
  br label %__nv_sqrtf.exit10, !dbg !18

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !18
  br label %__nv_sqrtf.exit10, !dbg !18

72:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %75, label %73, !dbg !18

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !18
  br label %__nv_sqrtf.exit10, !dbg !18

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !18
  br label %__nv_sqrtf.exit10, !dbg !18

__nv_sqrtf.exit10:                                ; preds = %68, %70, %73, %75
  %.0.i8 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !18
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !18
  %.not.i11 = icmp eq i32 %77, 0, !dbg !18
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !18
  %.not1.i14 = icmp eq i32 %78, 0, !dbg !18
  br i1 %.not.i11, label %84, label %79, !dbg !18

79:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %82, label %80, !dbg !18

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #5, !dbg !18
  br label %__nv_sqrtf.exit15, !dbg !18

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #5, !dbg !18
  br label %__nv_sqrtf.exit15, !dbg !18

84:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %87, label %85, !dbg !18

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #5, !dbg !18
  br label %__nv_sqrtf.exit15, !dbg !18

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #5, !dbg !18
  br label %__nv_sqrtf.exit15, !dbg !18

__nv_sqrtf.exit15:                                ; preds = %80, %82, %85, %87
  %.0.i13 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !18
  %89 = lshr i32 %5, 5, !dbg !10
  %90 = and i32 %5, 31, !dbg !10
  %91 = fadd float %.0.i, %.0.i3, !dbg !19
  %92 = fadd float %91, %.0.i8, !dbg !19
  %93 = fadd float %92, %.0.i13, !dbg !19
  %94 = bitcast float %93 to i32, !dbg !24
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = fadd float %93, %96, !dbg !19
  %98 = bitcast float %97 to i32, !dbg !24
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 8, i32 31), !dbg !24
  %100 = bitcast i32 %99 to float, !dbg !24
  %101 = fadd float %97, %100, !dbg !19
  %102 = bitcast float %101 to i32, !dbg !24
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 4, i32 31), !dbg !24
  %104 = bitcast i32 %103 to float, !dbg !24
  %105 = fadd float %101, %104, !dbg !19
  %106 = bitcast float %105 to i32, !dbg !24
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !24
  %108 = bitcast i32 %107 to float, !dbg !24
  %109 = fadd float %105, %108, !dbg !19
  %110 = bitcast float %109 to i32, !dbg !24
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !24
  %112 = bitcast i32 %111 to float, !dbg !24
  %113 = fadd float %109, %112, !dbg !19
  %114 = icmp eq i32 %90, 0, !dbg !24
  %115 = and i32 %89, 1, !dbg !24
  %116 = zext nneg i32 %115 to i64, !dbg !24
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i64 %116, !dbg !24
  %118 = bitcast float %113 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %114) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %119 = icmp slt i32 %5, 2, !dbg !24
  %120 = sext i32 %5 to i64, !dbg !24
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i64 %120, !dbg !24
  %122 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %121, i1 %119) #5, !dbg !24
  %123 = bitcast i32 %122 to float, !dbg !24
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 1, i32 31), !dbg !24
  %125 = bitcast i32 %124 to float, !dbg !24
  %126 = fadd float %123, %125, !dbg !19
  %127 = and i32 %5, 1, !dbg !24
  %128 = icmp eq i32 %127, 0, !dbg !24
  %129 = and i1 %119, %128, !dbg !24
  %130 = bitcast float %126 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %130, i1 %129) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %131 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %132 = fadd float %131, 0.000000e+00, !dbg !25
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 2.560000e+02) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %urem = and i32 %5, 63, !dbg !31
  %134 = icmp eq i32 %urem, 0, !dbg !31
  %135 = bitcast float %133 to i32, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %0, i1 %134) #5, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5dhpn5ju6fezyl3grzp6zkxmu6r5idmyotaw7mbn43jqgy7wnzs.py", directory: "inductor_cache/5d")
!4 = !{ptr @triton_per_fused_add_mean_mul_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_mul_sqrt_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_mul_sqrt_sub_0", linkageName: "triton_per_fused_add_mean_mul_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 36, column: 18, scope: !7)
!18 = !DILocation(line: 37, column: 26, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 39, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 39, column: 44, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 4, scope: !7)
!31 = !DILocation(line: 43, column: 63, scope: !7)
!32 = !DILocation(line: 43, column: 4, scope: !7)
