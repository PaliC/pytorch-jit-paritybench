; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 1, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %12, 64, !dbg !12
  %.lobit = lshr exact i32 %14, 6, !dbg !12
  %15 = and i32 %12, 31, !dbg !12
  %16 = and i32 %12, 1, !dbg !12
  %17 = or disjoint i32 %11, 1, !dbg !13
  %18 = or disjoint i32 %11, %.lobit, !dbg !13
  %19 = or disjoint i32 %11, %16, !dbg !13
  %20 = icmp slt i32 %11, 256, !dbg !14
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = shl i32 %12, 1, !dbg !15
  %25 = and i32 %24, 254, !dbg !15
  %26 = shl i32 %12, 2, !dbg !15
  %27 = and i32 %26, 252, !dbg !15
  %28 = sdiv i32 %19, 8, !dbg !16
  %29 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !17
  %30 = insertelement <2 x i32> %29, i32 %19, i64 1, !dbg !17
  %31 = srem <2 x i32> %30, splat (i32 8), !dbg !17
  %32 = sdiv i32 %19, 64, !dbg !18
  %33 = icmp samesign ult i32 %25, 192, !dbg !19
  %34 = icmp samesign ult i32 %27, 192, !dbg !19
  %35 = mul i32 %18, 192, !dbg !20
  %36 = add i32 %35, %27, !dbg !21
  %37 = sext i32 %36 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = and i1 %33, %20, !dbg !23
  %40 = and i1 %33, %21, !dbg !23
  %41 = and i1 %34, %22, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #5, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = bitcast i32 %43 to float, !dbg !24
  %48 = bitcast i32 %44 to float, !dbg !24
  %49 = bitcast i32 %45 to float, !dbg !24
  %50 = bitcast i32 %46 to float, !dbg !24
  %51 = and i32 %26, 508, !dbg !24
  %52 = lshr i32 %26, 6, !dbg !24
  %53 = and i32 %52, 4, !dbg !24
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %53, !dbg !24
  %55 = getelementptr inbounds float, ptr addrspace(3) %54, i32 %51, !dbg !24
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %55, i32 %43, i32 %44, i32 %45, i32 %46, i1 true) #5, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !24
  %57 = load float, ptr addrspace(3) %56, align 8, !dbg !24
  %58 = getelementptr inbounds i8, ptr addrspace(3) %56, i32 4, !dbg !24
  %59 = load float, ptr addrspace(3) %58, align 4, !dbg !24
  %60 = getelementptr inbounds i8, ptr addrspace(3) %56, i32 1040, !dbg !24
  %61 = load float, ptr addrspace(3) %60, align 8, !dbg !24
  %62 = getelementptr inbounds i8, ptr addrspace(3) %56, i32 1044, !dbg !24
  %63 = load float, ptr addrspace(3) %62, align 4, !dbg !24
  %64 = zext nneg i32 %25 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !25
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #5, !dbg !26
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !26
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !26
  %69 = bitcast i32 %67 to float, !dbg !26
  %70 = bitcast i32 %68 to float, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %56, i32 %67, i32 %68, i1 true) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !27
  %72 = load float, ptr addrspace(3) %71, align 16, !dbg !27
  %73 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 4, !dbg !27
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !27
  %75 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 8, !dbg !27
  %76 = load float, ptr addrspace(3) %75, align 8, !dbg !27
  %77 = getelementptr inbounds i8, ptr addrspace(3) %71, i32 12, !dbg !27
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !27
  %79 = fadd float %72, %47, !dbg !27
  %80 = fadd float %74, %48, !dbg !27
  %81 = fadd float %76, %49, !dbg !27
  %82 = fadd float %78, %50, !dbg !27
  %83 = fadd float %57, %69, !dbg !27
  %84 = fadd float %59, %70, !dbg !27
  %85 = fadd float %61, %69, !dbg !27
  %86 = fadd float %63, %70, !dbg !27
  %87 = select i1 %39, float %83, float 0.000000e+00, !dbg !28
  %88 = select i1 %39, float %84, float 0.000000e+00, !dbg !28
  %89 = select i1 %40, float %85, float 0.000000e+00, !dbg !28
  %90 = select i1 %40, float %86, float 0.000000e+00, !dbg !28
  %91 = select i1 %39, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %92 = select i1 %40, float 1.000000e+00, float 0.000000e+00, !dbg !29
  %93 = bitcast float %79 to i32, !dbg !30
  %94 = bitcast float %80 to i32, !dbg !30
  %95 = bitcast float %81 to i32, !dbg !30
  %96 = bitcast float %82 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %93, i32 %94, i32 %95, i32 %96, ptr addrspace(1) %38, i1 %41) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %97 = fsub float %88, %87, !dbg !35
  %98 = select i1 %39, float 2.000000e+00, float 0.000000e+00, !dbg !37
  %99 = fcmp oeq float %98, 0.000000e+00, !dbg !38
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %98) #5, !dbg !39
  %101 = select i1 %99, float 0.000000e+00, float %100, !dbg !40
  %102 = fmul float %97, %101, !dbg !41
  %103 = fadd float %87, %102, !dbg !42
  %104 = fmul float %97, %97, !dbg !43
  %105 = fmul float %91, %104, !dbg !44
  %106 = fmul float %105, %101, !dbg !45
  %107 = fadd float %106, 0.000000e+00, !dbg !46
  %108 = fsub float %90, %89, !dbg !35
  %109 = select i1 %40, float 2.000000e+00, float 0.000000e+00, !dbg !37
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !38
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %109) #5, !dbg !39
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !40
  %113 = fmul float %108, %112, !dbg !41
  %114 = fadd float %89, %113, !dbg !42
  %115 = fmul float %108, %108, !dbg !43
  %116 = fmul float %92, %115, !dbg !44
  %117 = fmul float %116, %112, !dbg !45
  %118 = fadd float %117, 0.000000e+00, !dbg !46
  %119 = bitcast float %103 to i32, !dbg !31
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 16, i32 31), !dbg !31
  %121 = bitcast i32 %120 to float, !dbg !31
  %122 = bitcast float %107 to i32, !dbg !31
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 16, i32 31), !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = bitcast float %98 to i32, !dbg !31
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 16, i32 31), !dbg !31
  %127 = bitcast i32 %126 to float, !dbg !31
  %128 = fsub float %121, %103, !dbg !35
  %129 = fadd float %98, %127, !dbg !37
  %130 = fcmp oeq float %129, 0.000000e+00, !dbg !38
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %129) #5, !dbg !39
  %132 = select i1 %130, float 0.000000e+00, float %131, !dbg !40
  %133 = fmul float %128, %132, !dbg !41
  %134 = fadd float %103, %133, !dbg !42
  %135 = fadd float %107, %124, !dbg !47
  %136 = fmul float %128, %128, !dbg !43
  %137 = fmul float %98, %136, !dbg !44
  %138 = fmul float %137, %132, !dbg !45
  %139 = fadd float %135, %138, !dbg !46
  %140 = bitcast float %134 to i32, !dbg !31
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = bitcast float %139 to i32, !dbg !31
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !31
  %145 = bitcast i32 %144 to float, !dbg !31
  %146 = bitcast float %129 to i32, !dbg !31
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !31
  %148 = bitcast i32 %147 to float, !dbg !31
  %149 = fsub float %142, %134, !dbg !35
  %150 = fadd float %129, %148, !dbg !37
  %151 = fcmp oeq float %150, 0.000000e+00, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %150) #5, !dbg !39
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !40
  %154 = fmul float %149, %153, !dbg !41
  %155 = fadd float %134, %154, !dbg !42
  %156 = fadd float %139, %145, !dbg !47
  %157 = fmul float %149, %149, !dbg !43
  %158 = fmul float %129, %157, !dbg !44
  %159 = fmul float %153, %158, !dbg !45
  %160 = fadd float %156, %159, !dbg !46
  %161 = bitcast float %155 to i32, !dbg !31
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 4, i32 31), !dbg !31
  %163 = bitcast i32 %162 to float, !dbg !31
  %164 = bitcast float %160 to i32, !dbg !31
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 4, i32 31), !dbg !31
  %166 = bitcast i32 %165 to float, !dbg !31
  %167 = bitcast float %150 to i32, !dbg !31
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 4, i32 31), !dbg !31
  %169 = bitcast i32 %168 to float, !dbg !31
  %170 = fsub float %163, %155, !dbg !35
  %171 = fadd float %150, %169, !dbg !37
  %172 = fcmp oeq float %171, 0.000000e+00, !dbg !38
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %169, float %171) #5, !dbg !39
  %174 = select i1 %172, float 0.000000e+00, float %173, !dbg !40
  %175 = fmul float %170, %174, !dbg !41
  %176 = fadd float %155, %175, !dbg !42
  %177 = fadd float %160, %166, !dbg !47
  %178 = fmul float %170, %170, !dbg !43
  %179 = fmul float %150, %178, !dbg !44
  %180 = fmul float %174, %179, !dbg !45
  %181 = fadd float %177, %180, !dbg !46
  %182 = bitcast float %176 to i32, !dbg !31
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !31
  %184 = bitcast i32 %183 to float, !dbg !31
  %185 = bitcast float %181 to i32, !dbg !31
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %185, i32 2, i32 31), !dbg !31
  %187 = bitcast i32 %186 to float, !dbg !31
  %188 = bitcast float %171 to i32, !dbg !31
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 2, i32 31), !dbg !31
  %190 = bitcast i32 %189 to float, !dbg !31
  %191 = fsub float %184, %176, !dbg !35
  %192 = fadd float %171, %190, !dbg !37
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !38
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %192) #5, !dbg !39
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !40
  %196 = fmul float %191, %195, !dbg !41
  %197 = fadd float %176, %196, !dbg !42
  %198 = fadd float %181, %187, !dbg !47
  %199 = fmul float %191, %191, !dbg !43
  %200 = fmul float %171, %199, !dbg !44
  %201 = fmul float %195, %200, !dbg !45
  %202 = fadd float %198, %201, !dbg !46
  %203 = bitcast float %197 to i32, !dbg !31
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 1, i32 31), !dbg !31
  %205 = bitcast i32 %204 to float, !dbg !31
  %206 = bitcast float %202 to i32, !dbg !31
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !31
  %208 = bitcast i32 %207 to float, !dbg !31
  %209 = bitcast float %192 to i32, !dbg !31
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 1, i32 31), !dbg !31
  %211 = bitcast i32 %210 to float, !dbg !31
  %212 = fsub float %205, %197, !dbg !35
  %213 = fadd float %192, %211, !dbg !37
  %214 = fcmp oeq float %213, 0.000000e+00, !dbg !38
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %213) #5, !dbg !39
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !40
  %217 = fmul float %212, %216, !dbg !41
  %218 = fadd float %197, %217, !dbg !42
  %219 = fadd float %202, %208, !dbg !47
  %220 = fmul float %212, %212, !dbg !43
  %221 = fmul float %192, %220, !dbg !44
  %222 = fmul float %216, %221, !dbg !45
  %223 = fadd float %219, %222, !dbg !46
  %224 = bitcast float %114 to i32, !dbg !31
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !31
  %226 = bitcast i32 %225 to float, !dbg !31
  %227 = bitcast float %118 to i32, !dbg !31
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 16, i32 31), !dbg !31
  %229 = bitcast i32 %228 to float, !dbg !31
  %230 = bitcast float %109 to i32, !dbg !31
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !31
  %232 = bitcast i32 %231 to float, !dbg !31
  %233 = fsub float %226, %114, !dbg !35
  %234 = fadd float %109, %232, !dbg !37
  %235 = fcmp oeq float %234, 0.000000e+00, !dbg !38
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %232, float %234) #5, !dbg !39
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !40
  %238 = fmul float %233, %237, !dbg !41
  %239 = fadd float %114, %238, !dbg !42
  %240 = fadd float %118, %229, !dbg !47
  %241 = fmul float %233, %233, !dbg !43
  %242 = fmul float %109, %241, !dbg !44
  %243 = fmul float %242, %237, !dbg !45
  %244 = fadd float %240, %243, !dbg !46
  %245 = bitcast float %239 to i32, !dbg !31
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !31
  %247 = bitcast i32 %246 to float, !dbg !31
  %248 = bitcast float %244 to i32, !dbg !31
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !31
  %250 = bitcast i32 %249 to float, !dbg !31
  %251 = bitcast float %234 to i32, !dbg !31
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 8, i32 31), !dbg !31
  %253 = bitcast i32 %252 to float, !dbg !31
  %254 = fsub float %247, %239, !dbg !35
  %255 = fadd float %234, %253, !dbg !37
  %256 = fcmp oeq float %255, 0.000000e+00, !dbg !38
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %253, float %255) #5, !dbg !39
  %258 = select i1 %256, float 0.000000e+00, float %257, !dbg !40
  %259 = fmul float %254, %258, !dbg !41
  %260 = fadd float %239, %259, !dbg !42
  %261 = fadd float %244, %250, !dbg !47
  %262 = fmul float %254, %254, !dbg !43
  %263 = fmul float %234, %262, !dbg !44
  %264 = fmul float %258, %263, !dbg !45
  %265 = fadd float %261, %264, !dbg !46
  %266 = bitcast float %260 to i32, !dbg !31
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 4, i32 31), !dbg !31
  %268 = bitcast i32 %267 to float, !dbg !31
  %269 = bitcast float %265 to i32, !dbg !31
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !31
  %271 = bitcast i32 %270 to float, !dbg !31
  %272 = bitcast float %255 to i32, !dbg !31
  %273 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 4, i32 31), !dbg !31
  %274 = bitcast i32 %273 to float, !dbg !31
  %275 = fsub float %268, %260, !dbg !35
  %276 = fadd float %255, %274, !dbg !37
  %277 = fcmp oeq float %276, 0.000000e+00, !dbg !38
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %274, float %276) #5, !dbg !39
  %279 = select i1 %277, float 0.000000e+00, float %278, !dbg !40
  %280 = fmul float %275, %279, !dbg !41
  %281 = fadd float %260, %280, !dbg !42
  %282 = fadd float %265, %271, !dbg !47
  %283 = fmul float %275, %275, !dbg !43
  %284 = fmul float %255, %283, !dbg !44
  %285 = fmul float %279, %284, !dbg !45
  %286 = fadd float %282, %285, !dbg !46
  %287 = bitcast float %281 to i32, !dbg !31
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !31
  %289 = bitcast i32 %288 to float, !dbg !31
  %290 = bitcast float %286 to i32, !dbg !31
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !31
  %292 = bitcast i32 %291 to float, !dbg !31
  %293 = bitcast float %276 to i32, !dbg !31
  %294 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %293, i32 2, i32 31), !dbg !31
  %295 = bitcast i32 %294 to float, !dbg !31
  %296 = fsub float %289, %281, !dbg !35
  %297 = fadd float %276, %295, !dbg !37
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !38
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float %297) #5, !dbg !39
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !40
  %301 = fmul float %296, %300, !dbg !41
  %302 = fadd float %281, %301, !dbg !42
  %303 = fadd float %286, %292, !dbg !47
  %304 = fmul float %296, %296, !dbg !43
  %305 = fmul float %276, %304, !dbg !44
  %306 = fmul float %300, %305, !dbg !45
  %307 = fadd float %303, %306, !dbg !46
  %308 = bitcast float %302 to i32, !dbg !31
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 1, i32 31), !dbg !31
  %310 = bitcast i32 %309 to float, !dbg !31
  %311 = bitcast float %307 to i32, !dbg !31
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !31
  %313 = bitcast i32 %312 to float, !dbg !31
  %314 = bitcast float %297 to i32, !dbg !31
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !31
  %316 = bitcast i32 %315 to float, !dbg !31
  %317 = fsub float %310, %302, !dbg !35
  %318 = fadd float %297, %316, !dbg !37
  %319 = fcmp oeq float %318, 0.000000e+00, !dbg !38
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %316, float %318) #5, !dbg !39
  %321 = select i1 %319, float 0.000000e+00, float %320, !dbg !40
  %322 = fmul float %317, %321, !dbg !41
  %323 = fadd float %302, %322, !dbg !42
  %324 = fadd float %307, %313, !dbg !47
  %325 = fmul float %317, %317, !dbg !43
  %326 = fmul float %297, %325, !dbg !44
  %327 = fmul float %321, %326, !dbg !45
  %328 = fadd float %324, %327, !dbg !46
  %329 = icmp eq i32 %15, 0, !dbg !31
  %330 = and i32 %13, 3, !dbg !31
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !31
  %332 = bitcast float %218 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 %329) #5, !dbg !31
  %333 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %330, !dbg !31
  %334 = bitcast float %223 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 %329) #5, !dbg !31
  %335 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %330, !dbg !31
  %336 = bitcast float %213 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 %329) #5, !dbg !31
  %337 = or disjoint i32 %330, 4, !dbg !31
  %338 = getelementptr float, ptr addrspace(3) @global_smem, i32 %337, !dbg !31
  %339 = bitcast float %323 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 %329) #5, !dbg !31
  %340 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %337, !dbg !31
  %341 = bitcast float %328 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 %329) #5, !dbg !31
  %342 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %337, !dbg !31
  %343 = bitcast float %318 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 %329) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %344 = icmp slt i32 %12, 8, !dbg !31
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %346 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %345, i1 %344) #5, !dbg !31
  %347 = bitcast i32 %346 to float, !dbg !31
  %348 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), i32 %12, !dbg !31
  %349 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %348, i1 %344) #5, !dbg !31
  %350 = bitcast i32 %349 to float, !dbg !31
  %351 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !31
  %352 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %351, i1 %344) #5, !dbg !31
  %353 = bitcast i32 %352 to float, !dbg !31
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 2, i32 31), !dbg !31
  %355 = bitcast i32 %354 to float, !dbg !31
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 2, i32 31), !dbg !31
  %357 = bitcast i32 %356 to float, !dbg !31
  %358 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 2, i32 31), !dbg !31
  %359 = bitcast i32 %358 to float, !dbg !31
  %360 = fsub float %355, %347, !dbg !35
  %361 = fadd float %353, %359, !dbg !37
  %362 = fcmp oeq float %361, 0.000000e+00, !dbg !38
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %361) #5, !dbg !39
  %364 = select i1 %362, float 0.000000e+00, float %363, !dbg !40
  %365 = fmul float %360, %364, !dbg !41
  %366 = fadd float %365, %347, !dbg !42
  %367 = fadd float %350, %357, !dbg !47
  %368 = fmul float %360, %360, !dbg !43
  %369 = fmul float %368, %353, !dbg !44
  %370 = fmul float %369, %364, !dbg !45
  %371 = fadd float %367, %370, !dbg !46
  %372 = bitcast float %366 to i32, !dbg !31
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 1, i32 31), !dbg !31
  %374 = bitcast i32 %373 to float, !dbg !31
  %375 = bitcast float %371 to i32, !dbg !31
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 1, i32 31), !dbg !31
  %377 = bitcast i32 %376 to float, !dbg !31
  %378 = bitcast float %361 to i32, !dbg !31
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !31
  %380 = bitcast i32 %379 to float, !dbg !31
  %381 = fsub float %374, %366, !dbg !35
  %382 = fadd float %361, %380, !dbg !37
  %383 = fcmp oeq float %382, 0.000000e+00, !dbg !38
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float %382) #5, !dbg !39
  %385 = select i1 %383, float 0.000000e+00, float %384, !dbg !40
  %386 = fmul float %381, %385, !dbg !41
  %387 = fadd float %366, %386, !dbg !42
  %388 = fadd float %371, %377, !dbg !47
  %389 = fmul float %381, %381, !dbg !43
  %390 = fmul float %361, %389, !dbg !44
  %391 = fmul float %385, %390, !dbg !45
  %392 = fadd float %388, %391, !dbg !46
  %393 = and i32 %12, 3, !dbg !31
  %394 = icmp eq i32 %393, 0, !dbg !31
  %395 = and i1 %344, %394, !dbg !31
  %396 = bitcast float %387 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %396, i1 %395) #5, !dbg !31
  %397 = bitcast float %392 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %397, i1 %395) #5, !dbg !31
  %398 = bitcast float %382 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %398, i1 %395) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %399 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %400 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 16), align 16, !dbg !31
  %401 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 32), align 16, !dbg !31
  %402 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 48), align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %403 = insertelement <1 x i32> poison, i32 %399, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %403, i1 true) #5, !dbg !48
  %404 = insertelement <1 x i32> poison, i32 %400, i64 0, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %404, i1 true) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %405 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !48
  %406 = load i32, ptr addrspace(3) %405, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %407 = bitcast float %401 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %407, i1 true) #5, !dbg !49
  %408 = bitcast float %402 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 4), <1 x i32> %408, i1 true) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %409 = load float, ptr addrspace(3) %405, align 4, !dbg !49
  %410 = extractelement <2 x i32> %31, i64 1, !dbg !50
  %411 = shl nsw i32 %410, 3, !dbg !50
  %412 = extractelement <2 x i32> %31, i64 0, !dbg !51
  %413 = add nsw i32 %412, %411, !dbg !51
  %414 = shl nsw i32 %32, 6, !dbg !52
  %415 = add i32 %413, %414, !dbg !53
  %416 = sext i32 %415 to i64, !dbg !54
  %417 = getelementptr float, ptr addrspace(1) %4, i64 %416, !dbg !54
  %418 = lshr i32 %15, 1, !dbg !55
  %419 = shl nuw nsw i32 %330, 4, !dbg !55
  %420 = or disjoint i32 %419, %418, !dbg !55
  %421 = icmp eq i32 %420, 0, !dbg !55
  %422 = and i1 %421, %23, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %406, ptr addrspace(1) %417, i1 %422) #5, !dbg !55
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %409, float 1.920000e+02) #5, !dbg !56
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float 1.920000e+02) #5, !dbg !56
  %425 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %402, float 1.920000e+02) #5, !dbg !56
  %426 = fadd float %423, 0x3EB0C6F7A0000000, !dbg !57
  %427 = fadd float %424, 0x3EB0C6F7A0000000, !dbg !57
  %428 = fadd float %425, 0x3EB0C6F7A0000000, !dbg !57
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %429, 0, !dbg !49
  br i1 %.not.i, label %432, label %430, !dbg !49

430:                                              ; preds = %9
  %431 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %426), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

432:                                              ; preds = %9
  %433 = tail call float @llvm.nvvm.rsqrt.approx.f(float %426), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %430, %432
  %.0.i = phi float [ %431, %430 ], [ %433, %432 ], !dbg !49
  %434 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i20 = icmp eq i32 %434, 0, !dbg !49
  br i1 %.not.i20, label %437, label %435, !dbg !49

435:                                              ; preds = %__nv_rsqrtf.exit
  %436 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit22, !dbg !49

437:                                              ; preds = %__nv_rsqrtf.exit
  %438 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit22, !dbg !49

__nv_rsqrtf.exit22:                               ; preds = %435, %437
  %.0.i21 = phi float [ %436, %435 ], [ %438, %437 ], !dbg !49
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i23 = icmp eq i32 %439, 0, !dbg !49
  br i1 %.not.i23, label %442, label %440, !dbg !49

440:                                              ; preds = %__nv_rsqrtf.exit22
  %441 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit25, !dbg !49

442:                                              ; preds = %__nv_rsqrtf.exit22
  %443 = tail call float @llvm.nvvm.rsqrt.approx.f(float %427), !dbg !49
  br label %__nv_rsqrtf.exit25, !dbg !49

__nv_rsqrtf.exit25:                               ; preds = %440, %442
  %.0.i24 = phi float [ %441, %440 ], [ %443, %442 ], !dbg !49
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i26 = icmp eq i32 %444, 0, !dbg !49
  br i1 %.not.i26, label %447, label %445, !dbg !49

445:                                              ; preds = %__nv_rsqrtf.exit25
  %446 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit28, !dbg !49

447:                                              ; preds = %__nv_rsqrtf.exit25
  %448 = tail call float @llvm.nvvm.rsqrt.approx.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit28, !dbg !49

__nv_rsqrtf.exit28:                               ; preds = %445, %447
  %.0.i27 = phi float [ %446, %445 ], [ %448, %447 ], !dbg !49
  %449 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i29 = icmp eq i32 %449, 0, !dbg !49
  br i1 %.not.i29, label %452, label %450, !dbg !49

450:                                              ; preds = %__nv_rsqrtf.exit28
  %451 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

452:                                              ; preds = %__nv_rsqrtf.exit28
  %453 = tail call float @llvm.nvvm.rsqrt.approx.f(float %428), !dbg !49
  br label %__nv_rsqrtf.exit31, !dbg !49

__nv_rsqrtf.exit31:                               ; preds = %450, %452
  %.0.i30 = phi float [ %451, %450 ], [ %453, %452 ], !dbg !49
  %454 = getelementptr float, ptr addrspace(1) %5, i64 %416, !dbg !58
  %455 = bitcast float %.0.i to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %455, ptr addrspace(1) %454, i1 %422) #5, !dbg !59
  %456 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #5, !dbg !60
  %457 = extractvalue { i32, i32, i32, i32 } %456, 0, !dbg !60
  %458 = extractvalue { i32, i32, i32, i32 } %456, 1, !dbg !60
  %459 = extractvalue { i32, i32, i32, i32 } %456, 2, !dbg !60
  %460 = extractvalue { i32, i32, i32, i32 } %456, 3, !dbg !60
  %461 = bitcast i32 %457 to float, !dbg !60
  %462 = bitcast i32 %458 to float, !dbg !60
  %463 = bitcast i32 %459 to float, !dbg !60
  %464 = bitcast i32 %460 to float, !dbg !60
  %465 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !61
  %466 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %465, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #5, !dbg !62
  %467 = extractvalue { i32, i32 } %466, 0, !dbg !62
  %468 = extractvalue { i32, i32 } %466, 1, !dbg !62
  %469 = bitcast i32 %467 to float, !dbg !62
  %470 = bitcast i32 %468 to float, !dbg !62
  %471 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !63
  %472 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %471, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #5, !dbg !64
  %473 = extractvalue { i32, i32 } %472, 0, !dbg !64
  %474 = extractvalue { i32, i32 } %472, 1, !dbg !64
  %475 = bitcast i32 %473 to float, !dbg !64
  %476 = bitcast i32 %474 to float, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %403, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %403, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %404, i1 true) #5, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %404, i1 true) #5, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %477 = lshr exact i32 %14, 3, !dbg !65
  %478 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %477, !dbg !65
  %479 = load float, ptr addrspace(3) %478, align 8, !dbg !65
  %480 = fsub float %461, %479, !dbg !65
  %481 = fsub float %462, %479, !dbg !65
  %482 = fsub float %463, %479, !dbg !65
  %483 = fsub float %464, %479, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %484 = bitcast float %.0.i21 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %484, i1 true) #5, !dbg !66
  %485 = bitcast float %.0.i24 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %485, i1 true) #5, !dbg !66
  %486 = bitcast float %.0.i27 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %486, i1 true) #5, !dbg !66
  %487 = bitcast float %.0.i30 to <1 x i32>, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) getelementptr inbounds (i8, ptr addrspace(3) @global_smem, i32 8), <1 x i32> %487, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %488 = load float, ptr addrspace(3) %478, align 8, !dbg !66
  %489 = fmul float %480, %488, !dbg !66
  %490 = fmul float %481, %488, !dbg !66
  %491 = fmul float %482, %488, !dbg !66
  %492 = fmul float %483, %488, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %493 = bitcast float %489 to i32, !dbg !66
  %494 = bitcast float %490 to i32, !dbg !66
  %495 = bitcast float %491 to i32, !dbg !66
  %496 = bitcast float %492 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %55, i32 %493, i32 %494, i32 %495, i32 %496, i1 true) #5, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %497 = load float, ptr addrspace(3) %56, align 8, !dbg !66
  %498 = load float, ptr addrspace(3) %58, align 4, !dbg !66
  %499 = load float, ptr addrspace(3) %60, align 8, !dbg !66
  %500 = load float, ptr addrspace(3) %62, align 4, !dbg !66
  %501 = fmul float %497, %469, !dbg !67
  %502 = fmul float %498, %470, !dbg !67
  %503 = fmul float %499, %469, !dbg !67
  %504 = fmul float %500, %470, !dbg !67
  %505 = fadd float %501, %475, !dbg !68
  %506 = fadd float %502, %476, !dbg !68
  %507 = fadd float %503, %475, !dbg !68
  %508 = fadd float %504, %476, !dbg !68
  %509 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %510 = bitcast float %505 to i32, !dbg !70
  %511 = bitcast float %506 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %56, i32 %510, i32 %511, i1 true) #5, !dbg !70
  %512 = bitcast float %507 to i32, !dbg !70
  %513 = bitcast float %508 to i32, !dbg !70
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %60, i32 %512, i32 %513, i1 true) #5, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %.extract = load i32, ptr addrspace(3) %55, align 16, !dbg !70
  %514 = getelementptr inbounds i8, ptr addrspace(3) %55, i32 4, !dbg !70
  %.extract17 = load i32, ptr addrspace(3) %514, align 4, !dbg !70
  %515 = getelementptr inbounds i8, ptr addrspace(3) %55, i32 8, !dbg !70
  %.extract18 = load i32, ptr addrspace(3) %515, align 8, !dbg !70
  %516 = getelementptr inbounds i8, ptr addrspace(3) %55, i32 12, !dbg !70
  %.extract19 = load i32, ptr addrspace(3) %516, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %509, i1 %41) #5, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5ngepos6tyhoegx4agldkkaxh3ozy7ih6x7xbladud4npqoheos.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_12", linkageName: "triton_red_fused_convolution_native_layer_norm_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 31, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 26, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 25, scope: !7)
!20 = !DILocation(line: 37, column: 47, scope: !7)
!21 = !DILocation(line: 37, column: 43, scope: !7)
!22 = !DILocation(line: 37, column: 38, scope: !7)
!23 = !DILocation(line: 37, column: 60, scope: !7)
!24 = !DILocation(line: 37, column: 52, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 39, column: 22, scope: !7)
!28 = !DILocation(line: 44, column: 60, scope: !7)
!29 = !DILocation(line: 46, column: 64, scope: !7)
!30 = !DILocation(line: 47, column: 52, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 49, column: 41, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 54, column: 32, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 40, scope: !7)
!53 = !DILocation(line: 54, column: 37, scope: !7)
!54 = !DILocation(line: 54, column: 25, scope: !7)
!55 = !DILocation(line: 54, column: 51, scope: !7)
!56 = !DILocation(line: 56, column: 18, scope: !7)
!57 = !DILocation(line: 58, column: 19, scope: !7)
!58 = !DILocation(line: 60, column: 25, scope: !7)
!59 = !DILocation(line: 60, column: 52, scope: !7)
!60 = !DILocation(line: 65, column: 53, scope: !7)
!61 = !DILocation(line: 66, column: 35, scope: !7)
!62 = !DILocation(line: 66, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 24, scope: !7)
!66 = !DILocation(line: 69, column: 24, scope: !7)
!67 = !DILocation(line: 70, column: 24, scope: !7)
!68 = !DILocation(line: 71, column: 24, scope: !7)
!69 = !DILocation(line: 72, column: 29, scope: !7)
!70 = !DILocation(line: 72, column: 50, scope: !7)
!71 = !DILocation(line: 61, column: 4, scope: !7)
