; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_eq_masked_fill_mul_ones_like_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 4, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %9, 4, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %25 = bitcast i32 %24 to float, !dbg !18
  %26 = fcmp oeq float %18, 0.000000e+00, !dbg !19
  %27 = fcmp oeq float %20, 0.000000e+00, !dbg !19
  %28 = select i1 %26, float 1.000000e+00, float %18, !dbg !20
  %29 = select i1 %27, float 1.000000e+00, float %20, !dbg !20
  %30 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %23, float %28) #5, !dbg !21
  %31 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %25, float %29) #5, !dbg !21
  %32 = select i1 %26, float 0.000000e+00, float %30, !dbg !22
  %33 = select i1 %27, float 0.000000e+00, float %31, !dbg !22
  %34 = select i1 %10, float %32, float 0.000000e+00, !dbg !23
  %35 = select i1 %10, float %33, float 0.000000e+00, !dbg !23
  %36 = bitcast float %34 to i32, !dbg !24
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = fadd float %34, %38, !dbg !28
  %40 = bitcast float %39 to i32, !dbg !24
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = fadd float %39, %42, !dbg !28
  %44 = bitcast float %43 to i32, !dbg !24
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !24
  %46 = bitcast i32 %45 to float, !dbg !24
  %47 = fadd float %43, %46, !dbg !28
  %48 = bitcast float %47 to i32, !dbg !24
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !24
  %50 = bitcast i32 %49 to float, !dbg !24
  %51 = fadd float %47, %50, !dbg !28
  %52 = bitcast float %35 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 8, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = fadd float %35, %54, !dbg !28
  %56 = bitcast float %55 to i32, !dbg !24
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 4, i32 31), !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = fadd float %55, %58, !dbg !28
  %60 = bitcast float %59 to i32, !dbg !24
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 2, i32 31), !dbg !24
  %62 = bitcast i32 %61 to float, !dbg !24
  %63 = fadd float %59, %62, !dbg !28
  %64 = bitcast float %63 to i32, !dbg !24
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !24
  %66 = bitcast i32 %65 to float, !dbg !24
  %67 = fadd float %63, %66, !dbg !28
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 1.600000e+01) #5, !dbg !30
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float 1.600000e+01) #5, !dbg !30
  %70 = fsub float %32, %68, !dbg !31
  %71 = fsub float %33, %69, !dbg !31
  %72 = fmul float %70, %70, !dbg !32
  %73 = fmul float %71, %71, !dbg !32
  %74 = select i1 %10, float %72, float 0.000000e+00, !dbg !33
  %75 = select i1 %10, float %73, float 0.000000e+00, !dbg !33
  %76 = bitcast float %74 to i32, !dbg !34
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !34
  %78 = bitcast i32 %77 to float, !dbg !34
  %79 = fadd float %74, %78, !dbg !36
  %80 = bitcast float %79 to i32, !dbg !34
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !34
  %82 = bitcast i32 %81 to float, !dbg !34
  %83 = fadd float %79, %82, !dbg !36
  %84 = bitcast float %83 to i32, !dbg !34
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !34
  %86 = bitcast i32 %85 to float, !dbg !34
  %87 = fadd float %83, %86, !dbg !36
  %88 = bitcast float %87 to i32, !dbg !34
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !34
  %90 = bitcast i32 %89 to float, !dbg !34
  %91 = fadd float %87, %90, !dbg !36
  %92 = bitcast float %75 to i32, !dbg !34
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !34
  %94 = bitcast i32 %93 to float, !dbg !34
  %95 = fadd float %75, %94, !dbg !36
  %96 = bitcast float %95 to i32, !dbg !34
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = fadd float %95, %98, !dbg !36
  %100 = bitcast float %99 to i32, !dbg !34
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !34
  %102 = bitcast i32 %101 to float, !dbg !34
  %103 = fadd float %99, %102, !dbg !36
  %104 = bitcast float %103 to i32, !dbg !34
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !34
  %106 = bitcast i32 %105 to float, !dbg !34
  %107 = fadd float %103, %106, !dbg !36
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float 1.600000e+01) #5, !dbg !37
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.600000e+01) #5, !dbg !37
  %110 = fadd float %108, 0x3EE4F8B580000000, !dbg !38
  %111 = fadd float %109, 0x3EE4F8B580000000, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %112, 0, !dbg !39
  br i1 %.not.i, label %115, label %113, !dbg !39

113:                                              ; preds = %8
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %110), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

115:                                              ; preds = %8
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %110), !dbg !39
  br label %__nv_rsqrtf.exit, !dbg !39

__nv_rsqrtf.exit:                                 ; preds = %113, %115
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], !dbg !39
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i1 = icmp eq i32 %117, 0, !dbg !39
  br i1 %.not.i1, label %120, label %118, !dbg !39

118:                                              ; preds = %__nv_rsqrtf.exit
  %119 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

120:                                              ; preds = %__nv_rsqrtf.exit
  %121 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !39
  br label %__nv_rsqrtf.exit3, !dbg !39

__nv_rsqrtf.exit3:                                ; preds = %118, %120
  %.0.i2 = phi float [ %119, %118 ], [ %121, %120 ], !dbg !39
  %122 = fmul float %70, %.0.i, !dbg !40
  %123 = fcmp olt float %122, 0.000000e+00, !dbg !41
  %124 = select i1 %123, float 0.000000e+00, float %122, !dbg !45
  %125 = select i1 %26, float 0.000000e+00, float 1.000000e+00, !dbg !46
  %126 = fmul float %125, %124, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %127 = sext i32 %9 to i64, !dbg !49
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !49
  %urem = and i32 %11, 63, !dbg !50
  %129 = icmp eq i32 %urem, 0, !dbg !50
  %130 = bitcast float %.0.i2 to i32, !dbg !50
  %131 = and i1 %129, %10, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %128, i1 %131) #5, !dbg !50
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %15, !dbg !51
  %133 = and i32 %11, 48, !dbg !52
  %134 = icmp eq i32 %133, 0, !dbg !52
  %135 = bitcast float %126 to i32, !dbg !52
  %136 = and i1 %134, %10, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %132, i1 %136) #5, !dbg !52
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !53
  %138 = bitcast float %125 to i32, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %137, i1 %136) #5, !dbg !54
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !55
  %140 = bitcast float %69 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %139, i1 %131) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckrajbnrdamixc2nl4gasxwobdfqbzdknbzxki7zqmrtmkwp42yt.py", directory: "inductor_cache/kr")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_eq_masked_fill_mul_ones_like_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_eq_masked_fill_mul_ones_like_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_eq_masked_fill_mul_ones_like_1", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_eq_masked_fill_mul_ones_like_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 19, scope: !7)
!20 = !DILocation(line: 36, column: 32, scope: !7)
!21 = !DILocation(line: 37, column: 18, scope: !7)
!22 = !DILocation(line: 38, column: 32, scope: !7)
!23 = !DILocation(line: 42, column: 35, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 43, column: 26, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 46, column: 20, scope: !7)
!31 = !DILocation(line: 47, column: 19, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 35, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !35)
!35 = !DILocation(line: 51, column: 26, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !35)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 55, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 28, scope: !7)
!40 = !DILocation(line: 58, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 60, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 61, column: 33, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 4, scope: !7)
!49 = !DILocation(line: 64, column: 28, scope: !7)
!50 = !DILocation(line: 64, column: 40, scope: !7)
!51 = !DILocation(line: 65, column: 25, scope: !7)
!52 = !DILocation(line: 65, column: 45, scope: !7)
!53 = !DILocation(line: 66, column: 25, scope: !7)
!54 = !DILocation(line: 66, column: 45, scope: !7)
!55 = !DILocation(line: 67, column: 25, scope: !7)
!56 = !DILocation(line: 67, column: 37, scope: !7)
!57 = !DILocation(line: 67, column: 4, scope: !7)
