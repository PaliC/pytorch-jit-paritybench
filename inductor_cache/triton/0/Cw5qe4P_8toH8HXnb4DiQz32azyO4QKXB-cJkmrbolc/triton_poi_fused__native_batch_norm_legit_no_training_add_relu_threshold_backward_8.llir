; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = and i32 %14, 127, !dbg !12
  %18 = or disjoint i32 %17, 128, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %17, !dbg !13
  %21 = or disjoint i32 %13, %18, !dbg !13
  %22 = icmp slt i32 %19, 512, !dbg !14
  %23 = icmp slt i32 %20, 512, !dbg !14
  %24 = icmp slt i32 %21, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = icmp slt i32 %25, 16, !dbg !16
  %.frozen = freeze i32 %19, !dbg !17
  %27 = sdiv i32 %.frozen, 128, !dbg !17
  %28 = mul i32 %27, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %28, !dbg !18
  %29 = shl i32 %25, 7, !dbg !19
  %30 = add i32 %.decomposed, %29, !dbg !20
  %31 = shl i32 %27, 11, !dbg !21
  %32 = add i32 %30, %31, !dbg !22
  %33 = sext i32 %32 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %26, %22, !dbg !24
  %36 = and i1 %26, %23, !dbg !24
  %37 = and i1 %26, %24, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #4, !dbg !25
  %39 = sext i32 %.decomposed to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #4, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !28
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !29
  %44 = extractvalue { i32, i32 } %43, 0, !dbg !29
  %45 = extractvalue { i32, i32 } %43, 1, !dbg !29
  %46 = bitcast i32 %44 to float, !dbg !29
  %47 = bitcast i32 %45 to float, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %22) #4, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !32
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %22) #4, !dbg !33
  %52 = shl i32 %20, 4, !dbg !34
  %53 = shl i32 %21, 4, !dbg !34
  %54 = add i32 %52, %25, !dbg !35
  %55 = add i32 %53, %25, !dbg !35
  %56 = sext i32 %54 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !36
  %58 = sext i32 %55 to i64, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !36
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %36) #4, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %37) #4, !dbg !37
  %62 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %63 = fadd float %47, 0x3EE4F8B580000000, !dbg !38
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %64, 0, !dbg !39
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i = icmp eq i32 %65, 0, !dbg !39
  br i1 %.not.i, label %71, label %66, !dbg !39

66:                                               ; preds = %11
  br i1 %.not1.i, label %69, label %67, !dbg !39

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

71:                                               ; preds = %11
  br i1 %.not1.i, label %74, label %72, !dbg !39

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !39
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i5 = icmp eq i32 %76, 0, !dbg !39
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i8 = icmp eq i32 %77, 0, !dbg !39
  br i1 %.not.i5, label %83, label %78, !dbg !39

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %81, label %79, !dbg !39

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit9, !dbg !39

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit9, !dbg !39

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %86, label %84, !dbg !39

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit9, !dbg !39

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit9, !dbg !39

__nv_sqrtf.exit9:                                 ; preds = %79, %81, %84, %86
  %.0.i7 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !39
  %88 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %89 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %90 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %91 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %92 = bitcast i32 %61 to float, !dbg !37
  %93 = bitcast i32 %60 to float, !dbg !37
  %94 = extractvalue { i32, i32 } %51, 1, !dbg !33
  %95 = extractvalue { i32, i32 } %51, 0, !dbg !33
  %96 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %97 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !40
  %.idx = shl nuw nsw i32 %16, 3, !dbg !41
  %100 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !41
  %101 = shl nuw nsw i32 %16, 1, !dbg !41
  %102 = or disjoint i32 %101, 2, !dbg !41
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !41
  %.idx1 = shl nuw nsw i32 %17, 3, !dbg !41
  %104 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !41
  %.idx2 = shl nuw nsw i32 %18, 3, !dbg !41
  %105 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !41
  %106 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !45
  %107 = getelementptr float, ptr addrspace(1) %6, i64 %58, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !46
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !47
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !47
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !47
  %112 = getelementptr inbounds i8, ptr addrspace(3) %111, i32 4, !dbg !47
  %113 = getelementptr i1, ptr addrspace(1) %8, i64 %33, !dbg !48
  %114 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !25
  %115 = insertelement <2 x i32> %114, i32 %88, i64 1, !dbg !25
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !25
  %117 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !27
  %118 = insertelement <2 x i32> %117, i32 %89, i64 1, !dbg !27
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !27
  %120 = fsub <2 x float> %116, %119, !dbg !49
  %121 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !33
  %122 = insertelement <2 x i32> %121, i32 %94, i64 1, !dbg !33
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !33
  %124 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !31
  %125 = insertelement <2 x i32> %124, i32 %96, i64 1, !dbg !31
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !31
  %127 = insertelement <2 x float> poison, float %98, i64 0, !dbg !50
  %128 = insertelement <2 x float> %127, float %99, i64 1, !dbg !50
  %129 = fmul <2 x float> %120, %128, !dbg !50
  %130 = fmul <2 x float> %129, %126, !dbg !51
  %131 = fadd <2 x float> %130, %123, !dbg !52
  %132 = fcmp olt <2 x float> %131, zeroinitializer, !dbg !53
  %133 = select <2 x i1> %132, <2 x float> zeroinitializer, <2 x float> %131, !dbg !41
  %134 = extractelement <2 x float> %133, i64 0, !dbg !41
  %135 = bitcast float %134 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %135, i1 true) #4, !dbg !41
  %136 = extractelement <2 x float> %133, i64 1, !dbg !41
  %137 = bitcast float %136 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %137, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %138 = load float, ptr addrspace(3) %104, align 8, !dbg !41
  %139 = load float, ptr addrspace(3) %105, align 8, !dbg !41
  %140 = fadd float %138, %93, !dbg !54
  %141 = fadd float %139, %92, !dbg !54
  %142 = fcmp ole <2 x float> %133, zeroinitializer, !dbg !55
  %143 = bitcast float %138 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %106, i1 %36) #4, !dbg !56
  %144 = bitcast float %139 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %144, ptr addrspace(1) %107, i1 %37) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %145 = bitcast float %140 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %145, i1 true) #4, !dbg !47
  %146 = bitcast float %141 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %146, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %.extract = load i32, ptr addrspace(3) %111, align 8, !dbg !47
  %.extract4 = load i32, ptr addrspace(3) %112, align 4, !dbg !47
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %108, i1 %35) #4, !dbg !47
  %147 = zext <2 x i1> %142 to <2 x i8>, !dbg !57
  %148 = bitcast <2 x i8> %147 to i16, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %148, ptr addrspace(1) %113, i1 %35) #4, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr3wh7jwrrgf2e26oaawrjabuarzfl3bjeiohmmeb5ipye3bk55o.py", directory: "inductor_cache/r3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 44, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 26, scope: !7)
!40 = !DILocation(line: 43, column: 18, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 50, column: 42, scope: !7)
!45 = !DILocation(line: 54, column: 25, scope: !7)
!46 = !DILocation(line: 55, column: 25, scope: !7)
!47 = !DILocation(line: 55, column: 56, scope: !7)
!48 = !DILocation(line: 56, column: 25, scope: !7)
!49 = !DILocation(line: 38, column: 18, scope: !7)
!50 = !DILocation(line: 46, column: 19, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 48, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!54 = !DILocation(line: 51, column: 20, scope: !7)
!55 = !DILocation(line: 53, column: 21, scope: !7)
!56 = !DILocation(line: 54, column: 45, scope: !7)
!57 = !DILocation(line: 56, column: 56, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
