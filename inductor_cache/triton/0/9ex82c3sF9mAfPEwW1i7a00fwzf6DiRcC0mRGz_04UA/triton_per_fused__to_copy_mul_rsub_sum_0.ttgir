#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":43:58)
#loc31 = loc(callsite(#loc1 at #loc19))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__to_copy_mul_rsub_sum_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0), %arg2: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0), %arg3: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<16> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<64> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = arith.remsi %0, %cst_1 : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.divsi %0, %cst_1 : tensor<256xi32, #blocked> loc(#loc4)
    %3 = arith.remsi %2, %cst_2 : tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.muli %3, %cst_3 : tensor<256xi32, #blocked> loc(#loc6)
    %5 = arith.addi %1, %4 : tensor<256xi32, #blocked> loc(#loc7)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %7 = tt.addptr %6, %5 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc8)
    %8 = tt.load %7 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = arith.mulf %8, %11 : tensor<256xf32, #blocked> loc(#loc12)
    %13 = arith.fptosi %12 : tensor<256xf32, #blocked> to tensor<256xi8, #blocked> loc(#loc13)
    %14 = arith.subf %cst, %8 : tensor<256xf32, #blocked> loc(#loc14)
    %15 = arith.mulf %14, %11 : tensor<256xf32, #blocked> loc(#loc15)
    %16 = arith.fptosi %15 : tensor<256xf32, #blocked> to tensor<256xi8, #blocked> loc(#loc16)
    %17 = arith.uitofp %13 : tensor<256xi8, #blocked> to tensor<256xf32, #blocked> loc(#loc17)
    %18 = "tt.reduce"(%17) <{axis = 0 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc19)), %arg7: f32 loc(callsite(#loc1 at #loc19))):
      %27 = arith.addf %arg6, %arg7 : f32 loc(#loc34)
      tt.reduce.return %27 : f32 loc(#loc30)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc30)
    %19 = arith.addf %18, %cst_0 : f32 loc(#loc33)
    %20 = tt.splat %19 : f32 -> tensor<1xf32, #blocked1> loc(#loc33)
    %21 = tt.splat %arg2 : !tt.ptr<i8> -> tensor<256x!tt.ptr<i8>, #blocked> loc(#loc23)
    %22 = tt.addptr %21, %0 : tensor<256x!tt.ptr<i8>, #blocked>, tensor<256xi32, #blocked> loc(#loc23)
    tt.store %22, %13 : tensor<256x!tt.ptr<i8>, #blocked> loc(#loc24)
    %23 = tt.splat %arg3 : !tt.ptr<i8> -> tensor<256x!tt.ptr<i8>, #blocked> loc(#loc25)
    %24 = tt.addptr %23, %0 : tensor<256x!tt.ptr<i8>, #blocked>, tensor<256xi32, #blocked> loc(#loc25)
    tt.store %24, %16 : tensor<256x!tt.ptr<i8>, #blocked> loc(#loc26)
    %25 = tt.addptr %arg4, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc27)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.store %26, %20 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":27:26)
#loc3 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":30:19)
#loc4 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":31:21)
#loc5 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":31:27)
#loc6 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":33:38)
#loc7 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":33:35)
#loc8 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":33:30)
#loc9 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":33:43)
#loc10 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":34:30)
#loc11 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":34:35)
#loc12 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":35:18)
#loc13 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":36:19)
#loc14 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":38:18)
#loc15 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":39:18)
#loc16 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":40:19)
#loc17 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":41:19)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc22 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":43:45)
#loc23 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":44:25)
#loc24 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":44:63)
#loc25 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":45:25)
#loc26 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":45:63)
#loc27 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":46:25)
#loc28 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":46:60)
#loc29 = loc("inductor_cache/kd/ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py":46:4)
#loc30 = loc(callsite(#loc18 at #loc19))
#loc32 = loc(callsite(#loc20 at #loc18))
#loc33 = loc(callsite(#loc21 at #loc22))
#loc34 = loc(callsite(#loc32 at #loc19))
