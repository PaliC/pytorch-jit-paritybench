; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_mul_rsub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = and i32 %7, 31, !dbg !10
  %9 = lshr i32 %7, 5, !dbg !10
  %10 = shl i32 %7, 2, !dbg !10
  %11 = and i32 %10, 12, !dbg !10
  %12 = and i32 %10, 252, !dbg !10
  %13 = shl i32 %7, 4, !dbg !11
  %14 = and i32 %13, 192, !dbg !11
  %15 = or disjoint i32 %11, %14, !dbg !12
  %16 = zext nneg i32 %15 to i64, !dbg !13
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !13
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !14
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !14
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !14
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !14
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !14
  %23 = zext nneg i32 %12 to i64, !dbg !15
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !14
  %31 = insertelement <4 x i32> %30, i32 %20, i64 1, !dbg !14
  %32 = insertelement <4 x i32> %31, i32 %21, i64 2, !dbg !14
  %33 = insertelement <4 x i32> %32, i32 %22, i64 3, !dbg !14
  %34 = bitcast <4 x i32> %33 to <4 x float>, !dbg !14
  %35 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !16
  %36 = insertelement <4 x i32> %35, i32 %27, i64 1, !dbg !16
  %37 = insertelement <4 x i32> %36, i32 %28, i64 2, !dbg !16
  %38 = insertelement <4 x i32> %37, i32 %29, i64 3, !dbg !16
  %39 = bitcast <4 x i32> %38 to <4 x float>, !dbg !16
  %40 = fmul <4 x float> %34, %39, !dbg !17
  %41 = extractelement <4 x float> %40, i64 0, !dbg !17
  %42 = fmul <4 x float> %34, %39, !dbg !17
  %43 = extractelement <4 x float> %42, i64 1, !dbg !17
  %44 = fmul <4 x float> %34, %39, !dbg !17
  %45 = extractelement <4 x float> %44, i64 2, !dbg !17
  %46 = fmul <4 x float> %34, %39, !dbg !17
  %47 = extractelement <4 x float> %46, i64 3, !dbg !17
  %48 = fptosi float %41 to i8, !dbg !18
  %49 = fptosi float %43 to i8, !dbg !18
  %50 = fptosi float %45 to i8, !dbg !18
  %51 = fptosi float %47 to i8, !dbg !18
  %52 = fsub <4 x float> splat (float 1.000000e+00), %34, !dbg !19
  %53 = fmul <4 x float> %52, %39, !dbg !20
  %54 = fptosi <4 x float> %53 to <4 x i8>, !dbg !21
  %55 = uitofp i8 %48 to float, !dbg !22
  %56 = uitofp i8 %49 to float, !dbg !22
  %57 = uitofp i8 %50 to float, !dbg !22
  %58 = uitofp i8 %51 to float, !dbg !22
  %59 = fadd float %55, %56, !dbg !23
  %60 = fadd float %59, %57, !dbg !23
  %61 = fadd float %60, %58, !dbg !23
  %62 = bitcast float %61 to i32, !dbg !28
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 16, i32 31), !dbg !28
  %64 = bitcast i32 %63 to float, !dbg !28
  %65 = fadd float %61, %64, !dbg !23
  %66 = bitcast float %65 to i32, !dbg !28
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 8, i32 31), !dbg !28
  %68 = bitcast i32 %67 to float, !dbg !28
  %69 = fadd float %65, %68, !dbg !23
  %70 = bitcast float %69 to i32, !dbg !28
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 4, i32 31), !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %69, %72, !dbg !23
  %74 = bitcast float %73 to i32, !dbg !28
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 2, i32 31), !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %73, %76, !dbg !23
  %78 = bitcast float %77 to i32, !dbg !28
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = fadd float %77, %80, !dbg !23
  %82 = icmp eq i32 %8, 0, !dbg !28
  %83 = and i32 %9, 1, !dbg !28
  %84 = zext nneg i32 %83 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i64 %84, !dbg !28
  %86 = bitcast float %81 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 %82) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %87 = icmp slt i32 %7, 2, !dbg !28
  %88 = sext i32 %7 to i64, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88, !dbg !28
  %90 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %89, i1 %87) #3, !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 1, i32 31), !dbg !28
  %93 = bitcast i32 %92 to float, !dbg !28
  %94 = fadd float %91, %93, !dbg !23
  %95 = and i32 %7, 1, !dbg !28
  %96 = icmp eq i32 %95, 0, !dbg !28
  %97 = and i1 %87, %96, !dbg !28
  %98 = bitcast float %94 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %98, i1 %97) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %99 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %100 = fadd float %99, 0.000000e+00, !dbg !29
  %101 = getelementptr i8, ptr addrspace(1) %2, i64 %23, !dbg !33
  %102 = insertelement <4 x i8> poison, i8 %48, i64 0, !dbg !34
  %103 = insertelement <4 x i8> %102, i8 %49, i64 1, !dbg !34
  %104 = insertelement <4 x i8> %103, i8 %50, i64 2, !dbg !34
  %105 = insertelement <4 x i8> %104, i8 %51, i64 3, !dbg !34
  %106 = bitcast <4 x i8> %105 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %101, i1 true) #3, !dbg !34
  %107 = getelementptr i8, ptr addrspace(1) %3, i64 %23, !dbg !35
  %108 = bitcast <4 x i8> %54 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 true) #3, !dbg !36
  %urem = and i32 %7, 63, !dbg !37
  %109 = icmp eq i32 %urem, 0, !dbg !37
  %110 = bitcast float %100 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %4, i1 %109) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckd3mko3k26xysfvokoxeskqusfkba5qhsm25rfnj4nw2qa3hklg.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_per_fused__to_copy_mul_rsub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_mul_rsub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_mul_rsub_sum_0", linkageName: "triton_per_fused__to_copy_mul_rsub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 33, column: 38, scope: !7)
!12 = !DILocation(line: 33, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 30, scope: !7)
!14 = !DILocation(line: 33, column: 43, scope: !7)
!15 = !DILocation(line: 34, column: 30, scope: !7)
!16 = !DILocation(line: 34, column: 35, scope: !7)
!17 = !DILocation(line: 35, column: 18, scope: !7)
!18 = !DILocation(line: 36, column: 19, scope: !7)
!19 = !DILocation(line: 38, column: 18, scope: !7)
!20 = !DILocation(line: 39, column: 18, scope: !7)
!21 = !DILocation(line: 40, column: 19, scope: !7)
!22 = !DILocation(line: 41, column: 19, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 43, column: 58, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 73, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 43, column: 45, scope: !7)
!33 = !DILocation(line: 44, column: 25, scope: !7)
!34 = !DILocation(line: 44, column: 63, scope: !7)
!35 = !DILocation(line: 45, column: 25, scope: !7)
!36 = !DILocation(line: 45, column: 63, scope: !7)
!37 = !DILocation(line: 46, column: 60, scope: !7)
!38 = !DILocation(line: 46, column: 4, scope: !7)
