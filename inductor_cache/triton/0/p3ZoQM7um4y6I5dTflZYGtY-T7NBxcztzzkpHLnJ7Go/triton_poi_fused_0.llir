; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 30, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 24, !dbg !14
  %16 = icmp slt i32 %13, 24, !dbg !14
  %17 = icmp slt i32 %14, 24, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %7, 2, !dbg !17
  %21 = and i32 %20, 28, !dbg !17
  %22 = lshr i32 %7, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %23, 8, !dbg !17
  %25 = or disjoint i32 %23, 16, !dbg !17
  %26 = or disjoint i32 %23, 24, !dbg !17
  %27 = or disjoint i32 %19, %21, !dbg !18
  %28 = or disjoint i32 %19, %23, !dbg !18
  %29 = or disjoint i32 %19, %24, !dbg !18
  %30 = or disjoint i32 %19, %25, !dbg !18
  %31 = or disjoint i32 %19, %26, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %32 = sdiv i32 %.frozen, 6, !dbg !19
  %33 = mul i32 %32, 6, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %34 = shl i32 %12, 12, !dbg !21
  %35 = shl i32 %13, 12, !dbg !21
  %36 = add i32 %27, %34, !dbg !22
  %37 = add i32 %27, %35, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !23
  %40 = sext i32 %37 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %15) #2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !24
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %16) #2, !dbg !24
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %52 = mul i32 %28, 6, !dbg !25
  %53 = mul i32 %29, 6, !dbg !25
  %54 = mul i32 %30, 6, !dbg !25
  %55 = mul i32 %31, 6, !dbg !25
  %56 = mul i32 %32, 24576, !dbg !26
  %57 = add i32 %56, %.decomposed, !dbg !27
  %58 = add i32 %57, %52, !dbg !28
  %59 = add i32 %57, %53, !dbg !28
  %60 = add i32 %57, %54, !dbg !28
  %61 = add i32 %57, %55, !dbg !28
  %62 = sext i32 %58 to i64, !dbg !29
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !29
  %64 = sext i32 %59 to i64, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %1, i64 %64, !dbg !29
  %66 = sext i32 %60 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !29
  %68 = sext i32 %61 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !29
  %70 = shl i32 %7, 7, !dbg !30
  %71 = and i32 %70, 896, !dbg !30
  %72 = or disjoint i32 %71, %9, !dbg !30
  %73 = and i32 %10, 254, !dbg !30
  %74 = lshr exact i32 %71, 4, !dbg !30
  %75 = add nuw nsw i32 %74, %72, !dbg !30
  %76 = zext nneg i32 %75 to i64, !dbg !30
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %76, !dbg !30
  %78 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !30
  %79 = or disjoint i32 %72, 32, !dbg !30
  %80 = lshr i32 %79, 4, !dbg !30
  %81 = add nuw nsw i32 %80, %79, !dbg !30
  %82 = zext nneg i32 %81 to i64, !dbg !30
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %82, !dbg !30
  %84 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !30
  %85 = or disjoint i32 %72, 64, !dbg !30
  %86 = lshr i32 %85, 4, !dbg !30
  %87 = add nuw nsw i32 %86, %85, !dbg !30
  %88 = zext nneg i32 %87 to i64, !dbg !30
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !30
  %90 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !30
  %91 = or disjoint i32 %72, 96, !dbg !30
  %92 = lshr i32 %91, 4, !dbg !30
  %93 = add nuw nsw i32 %92, %91, !dbg !30
  %94 = zext nneg i32 %93 to i64, !dbg !30
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !30
  %96 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !30
  %97 = or disjoint i32 %72, 16, !dbg !30
  %98 = add nuw nsw i32 %97, %74, !dbg !30
  %99 = zext nneg i32 %98 to i64, !dbg !30
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !30
  %101 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !30
  %102 = or disjoint i32 %72, 48, !dbg !30
  %103 = lshr i32 %102, 4, !dbg !30
  %104 = and i32 %103, 58, !dbg !30
  %105 = add nuw nsw i32 %104, %102, !dbg !30
  %106 = zext nneg i32 %105 to i64, !dbg !30
  %107 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %106, !dbg !30
  %108 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !30
  %109 = or disjoint i32 %72, 80, !dbg !30
  %110 = lshr i32 %109, 4, !dbg !30
  %111 = and i32 %110, 60, !dbg !30
  %112 = add nuw nsw i32 %111, %109, !dbg !30
  %113 = zext nneg i32 %112 to i64, !dbg !30
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !30
  %115 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !30
  %116 = or disjoint i32 %72, 112, !dbg !30
  %117 = lshr i32 %116, 4, !dbg !30
  %118 = and i32 %117, 62, !dbg !30
  %119 = add nuw nsw i32 %118, %116, !dbg !30
  %120 = zext nneg i32 %119 to i64, !dbg !30
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !30
  %122 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %123 = lshr i32 %10, 4, !dbg !30
  %124 = and i32 %123, 14, !dbg !30
  %125 = add nuw nsw i32 %124, %73, !dbg !30
  %126 = zext nneg i32 %125 to i64, !dbg !30
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %126, !dbg !30
  %128 = or disjoint i32 %73, 256, !dbg !30
  %129 = lshr i32 %128, 4, !dbg !30
  %130 = and i32 %129, 30, !dbg !30
  %131 = add nuw nsw i32 %130, %128, !dbg !30
  %132 = zext nneg i32 %131 to i64, !dbg !30
  %133 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %132, !dbg !30
  %134 = load <2 x i32>, ptr addrspace(3) %133, align 8, !dbg !30
  %135 = or disjoint i32 %73, 512, !dbg !30
  %136 = lshr i32 %135, 4, !dbg !30
  %137 = and i32 %136, 46, !dbg !30
  %138 = add nuw nsw i32 %137, %135, !dbg !30
  %139 = zext nneg i32 %138 to i64, !dbg !30
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !30
  %141 = load <2 x i32>, ptr addrspace(3) %140, align 8, !dbg !30
  %142 = or disjoint i32 %73, 768, !dbg !30
  %143 = lshr i32 %142, 4, !dbg !30
  %144 = and i32 %143, 62, !dbg !30
  %145 = add nuw nsw i32 %144, %142, !dbg !30
  %146 = zext nneg i32 %145 to i64, !dbg !30
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %146, !dbg !30
  %148 = load <2 x i32>, ptr addrspace(3) %147, align 8, !dbg !30
  %.extract = load i32, ptr addrspace(3) %127, align 8, !dbg !30
  %149 = getelementptr inbounds i8, ptr addrspace(3) %127, i64 4, !dbg !30
  %.extract10 = load i32, ptr addrspace(3) %149, align 4, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %63, i1 %17) #2, !dbg !30
  %.extract11 = extractelement <2 x i32> %134, i64 0, !dbg !30
  %.extract12 = extractelement <2 x i32> %134, i64 1, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %65, i1 %17) #2, !dbg !30
  %.extract13 = extractelement <2 x i32> %141, i64 0, !dbg !30
  %.extract14 = extractelement <2 x i32> %141, i64 1, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %67, i1 %17) #2, !dbg !30
  %.extract15 = extractelement <2 x i32> %148, i64 0, !dbg !30
  %.extract16 = extractelement <2 x i32> %148, i64 1, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %69, i1 %17) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce5n7ueosuhgzrjh4lmsc4ou77q3nkzcdb7zgsvcaiwedgtp7frd.py", directory: "inductor_cache/e5")
!4 = !{ptr @triton_poi_fused_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_0", linkageName: "triton_poi_fused_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 32, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 54, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
