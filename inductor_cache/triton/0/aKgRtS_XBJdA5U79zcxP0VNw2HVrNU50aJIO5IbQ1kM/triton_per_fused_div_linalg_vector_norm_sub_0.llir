; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %6, 6, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = or disjoint i32 %11, 16, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %7, i32 0, i1 %7) #4, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = or disjoint i32 %11, 32, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %7, i32 0, i1 %7) #4, !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = or disjoint i32 %11, 48, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %7, i32 0, i1 %7) #4, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7) #4, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %7, i32 0, i1 %7) #4, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %7, i32 0, i1 %7) #4, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7) #4, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = fmul float %15, %15, !dbg !34
  %44 = fmul float %20, %20, !dbg !35
  %45 = fadd float %43, %44, !dbg !36
  %46 = fmul float %25, %25, !dbg !37
  %47 = fadd float %45, %46, !dbg !38
  %48 = fmul float %30, %30, !dbg !39
  %49 = fadd float %47, %48, !dbg !40
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 4.000000e+00) #4, !dbg !41
  %51 = fmul float %50, %50, !dbg !42
  %52 = select i1 %7, float %51, float 0.000000e+00, !dbg !43
  %53 = bitcast float %52 to i32, !dbg !44
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !44
  %55 = bitcast i32 %54 to float, !dbg !44
  %56 = fadd float %52, %55, !dbg !48
  %57 = bitcast float %56 to i32, !dbg !44
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !44
  %59 = bitcast i32 %58 to float, !dbg !44
  %60 = fadd float %56, %59, !dbg !48
  %61 = bitcast float %60 to i32, !dbg !44
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !44
  %63 = bitcast i32 %62 to float, !dbg !44
  %64 = fadd float %60, %63, !dbg !48
  %65 = bitcast float %64 to i32, !dbg !44
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !44
  %67 = bitcast i32 %66 to float, !dbg !44
  %68 = fadd float %64, %67, !dbg !48
  %69 = fmul float %33, %33, !dbg !50
  %70 = fmul float %36, %36, !dbg !51
  %71 = fadd float %69, %70, !dbg !52
  %72 = fmul float %39, %39, !dbg !53
  %73 = fadd float %71, %72, !dbg !54
  %74 = fmul float %42, %42, !dbg !55
  %75 = fadd float %73, %74, !dbg !56
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 4.000000e+00) #4, !dbg !57
  %77 = fmul float %76, %76, !dbg !58
  %78 = select i1 %7, float %77, float 0.000000e+00, !dbg !59
  %79 = bitcast float %78 to i32, !dbg !60
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !60
  %81 = bitcast i32 %80 to float, !dbg !60
  %82 = fadd float %78, %81, !dbg !62
  %83 = bitcast float %82 to i32, !dbg !60
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !60
  %85 = bitcast i32 %84 to float, !dbg !60
  %86 = fadd float %82, %85, !dbg !62
  %87 = bitcast float %86 to i32, !dbg !60
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !60
  %89 = bitcast i32 %88 to float, !dbg !60
  %90 = fadd float %86, %89, !dbg !62
  %91 = bitcast float %90 to i32, !dbg !60
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !60
  %93 = bitcast i32 %92 to float, !dbg !60
  %94 = fadd float %90, %93, !dbg !62
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i = icmp eq i32 %95, 0, !dbg !63
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !63
  %.not1.i = icmp eq i32 %96, 0, !dbg !63
  br i1 %.not.i, label %102, label %97, !dbg !63

97:                                               ; preds = %5
  br i1 %.not1.i, label %100, label %98, !dbg !63

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

102:                                              ; preds = %5
  br i1 %.not1.i, label %105, label %103, !dbg !63

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !63
  br label %__nv_sqrtf.exit, !dbg !63

__nv_sqrtf.exit:                                  ; preds = %98, %100, %103, %105
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !63
  %107 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !64
  %108 = fcmp uno float %.0.i, 0.000000e+00, !dbg !68
  %109 = or i1 %107, %108, !dbg !69
  %110 = select i1 %109, float %.0.i, float 0x3D71979980000000, !dbg !70
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float %110) #4, !dbg !71
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !72
  %.not.i1 = icmp eq i32 %112, 0, !dbg !72
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !72
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !72
  br i1 %.not.i1, label %119, label %114, !dbg !72

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !72

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #4, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #4, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !72

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #4, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #4, !dbg !72
  br label %__nv_sqrtf.exit5, !dbg !72

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !72
  %124 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !73
  %125 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !75
  %126 = or i1 %124, %125, !dbg !76
  %127 = select i1 %126, float %.0.i3, float 0x3D71979980000000, !dbg !77
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %127) #4, !dbg !78
  %129 = fsub float %111, %128, !dbg !79
  %130 = shl i32 %6, 4, !dbg !80
  %131 = or disjoint i32 %130, %9, !dbg !81
  %132 = sext i32 %131 to i64, !dbg !82
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !82
  %134 = and i32 %8, 48, !dbg !83
  %135 = icmp eq i32 %134, 0, !dbg !83
  %136 = bitcast float %129 to i32, !dbg !83
  %137 = and i1 %135, %7, !dbg !83
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %133, i1 %137) #4, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csn4fpi6evmfkvbm64acofluvrvtkkrpn7tqbwqnwgogut2hwrot.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_sub_0", linkageName: "triton_per_fused_div_linalg_vector_norm_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 40, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 48, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 44, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 49, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 35, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 51, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 20, scope: !7)
!53 = !DILocation(line: 55, column: 20, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 62, column: 35, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !61)
!61 = !DILocation(line: 63, column: 26, scope: !7)
!62 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !61)
!63 = !DILocation(line: 64, column: 27, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 66, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !65, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !67)
!71 = !DILocation(line: 67, column: 20, scope: !7)
!72 = !DILocation(line: 68, column: 27, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !74)
!74 = !DILocation(line: 69, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !65, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !65, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !74)
!78 = !DILocation(line: 70, column: 20, scope: !7)
!79 = !DILocation(line: 71, column: 20, scope: !7)
!80 = !DILocation(line: 72, column: 33, scope: !7)
!81 = !DILocation(line: 72, column: 30, scope: !7)
!82 = !DILocation(line: 72, column: 25, scope: !7)
!83 = !DILocation(line: 72, column: 45, scope: !7)
!84 = !DILocation(line: 72, column: 4, scope: !7)
