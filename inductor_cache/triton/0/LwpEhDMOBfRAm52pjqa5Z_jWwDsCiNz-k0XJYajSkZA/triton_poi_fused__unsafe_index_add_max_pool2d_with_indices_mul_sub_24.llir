; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_max_pool2d_with_indices_mul_sub_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 8, !dbg !14
  %17 = srem i32 %16, 8, !dbg !15
  %18 = mul i32 %16, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = sdiv i32 %15, 64, !dbg !17
  %20 = srem i32 %19, 64, !dbg !18
  %21 = sdiv i32 %15, 4096, !dbg !19
  %22 = sext i32 %17 to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %2, i64 %22, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %26 = sext i32 %.decomposed to i64, !dbg !22
  %27 = getelementptr i64, ptr addrspace(1) %3, i64 %26, !dbg !22
  %28 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = extractvalue { i64, i64 } %28, 0, !dbg !23
  %30 = extractvalue { i64, i64 } %28, 1, !dbg !23
  %31 = getelementptr i64, ptr addrspace(1) %5, i64 %22, !dbg !24
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %34 = getelementptr i64, ptr addrspace(1) %6, i64 %26, !dbg !26
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !27
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !27
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = lshr i64 %24, 60, !dbg !30
  %45 = and i64 %44, 8, !dbg !30
  %46 = add i64 %45, %24, !dbg !30
  %47 = lshr i64 %29, 60, !dbg !31
  %48 = and i64 %47, 8, !dbg !31
  %49 = add i64 %48, %29, !dbg !31
  %50 = lshr i64 %30, 60, !dbg !31
  %51 = and i64 %50, 8, !dbg !31
  %52 = add i64 %51, %30, !dbg !31
  %53 = sext i32 %20 to i64, !dbg !32
  %54 = shl i64 %46, 11, !dbg !33
  %55 = shl i32 %21, 14, !dbg !34
  %56 = sext i32 %55 to i64, !dbg !35
  %.idx = shl i64 %49, 9, !dbg !36
  %57 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %53, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %54, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %56, !dbg !36
  %.idx1 = shl i64 %52, 9, !dbg !36
  %61 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %53, !dbg !36
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %54, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %56, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !37
  %67 = add nsw i32 %20, 64, !dbg !38
  %68 = zext nneg i32 %67 to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %57, i64 %68, !dbg !40
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %54, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %56, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %61, i64 %68, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %54, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %56, !dbg !40
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !41
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #1, !dbg !41
  %77 = add nsw i32 %20, 1024, !dbg !42
  %78 = zext nneg i32 %77 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %57, i64 %78, !dbg !44
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %54, !dbg !44
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %56, !dbg !44
  %82 = getelementptr float, ptr addrspace(1) %61, i64 %78, !dbg !44
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %54, !dbg !44
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %56, !dbg !44
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #1, !dbg !45
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #1, !dbg !45
  %87 = add nsw i32 %20, 1088, !dbg !46
  %88 = zext nneg i32 %87 to i64, !dbg !47
  %89 = getelementptr float, ptr addrspace(1) %57, i64 %88, !dbg !48
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %54, !dbg !48
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %56, !dbg !48
  %92 = getelementptr float, ptr addrspace(1) %61, i64 %88, !dbg !48
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %54, !dbg !48
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %56, !dbg !48
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !49
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !49
  %97 = lshr i64 %32, 60, !dbg !50
  %98 = and i64 %97, 8, !dbg !50
  %99 = add i64 %98, %32, !dbg !50
  %100 = shl i64 %99, 11, !dbg !51
  %101 = getelementptr float, ptr addrspace(1) %58, i64 %100, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %56, !dbg !52
  %103 = getelementptr float, ptr addrspace(1) %62, i64 %100, !dbg !52
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %56, !dbg !52
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !53
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !53
  %107 = getelementptr float, ptr addrspace(1) %69, i64 %100, !dbg !54
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %56, !dbg !54
  %109 = getelementptr float, ptr addrspace(1) %72, i64 %100, !dbg !54
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %56, !dbg !54
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !55
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #1, !dbg !55
  %113 = getelementptr float, ptr addrspace(1) %79, i64 %100, !dbg !56
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %56, !dbg !56
  %115 = getelementptr float, ptr addrspace(1) %82, i64 %100, !dbg !56
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %56, !dbg !56
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #1, !dbg !57
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !57
  %119 = getelementptr float, ptr addrspace(1) %89, i64 %100, !dbg !58
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %56, !dbg !58
  %121 = getelementptr float, ptr addrspace(1) %92, i64 %100, !dbg !58
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %56, !dbg !58
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 true) #1, !dbg !59
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !59
  %125 = lshr i64 %36, 60, !dbg !60
  %126 = and i64 %125, 8, !dbg !60
  %127 = add i64 %126, %36, !dbg !60
  %128 = lshr i64 %37, 60, !dbg !60
  %129 = and i64 %128, 8, !dbg !60
  %130 = add i64 %129, %37, !dbg !60
  %.idx2 = shl i64 %127, 9, !dbg !61
  %131 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx2, !dbg !61
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %53, !dbg !61
  %133 = getelementptr float, ptr addrspace(1) %132, i64 %100, !dbg !61
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %56, !dbg !61
  %.idx3 = shl i64 %130, 9, !dbg !61
  %135 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx3, !dbg !61
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %53, !dbg !61
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %100, !dbg !61
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %56, !dbg !61
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !62
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !62
  %141 = getelementptr float, ptr addrspace(1) %131, i64 %68, !dbg !63
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %100, !dbg !63
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %56, !dbg !63
  %144 = getelementptr float, ptr addrspace(1) %135, i64 %68, !dbg !63
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %100, !dbg !63
  %146 = getelementptr float, ptr addrspace(1) %145, i64 %56, !dbg !63
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !64
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !64
  %149 = getelementptr float, ptr addrspace(1) %131, i64 %78, !dbg !65
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %100, !dbg !65
  %151 = getelementptr float, ptr addrspace(1) %150, i64 %56, !dbg !65
  %152 = getelementptr float, ptr addrspace(1) %135, i64 %78, !dbg !65
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %100, !dbg !65
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %56, !dbg !65
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 true) #1, !dbg !66
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !66
  %157 = getelementptr float, ptr addrspace(1) %131, i64 %88, !dbg !67
  %158 = getelementptr float, ptr addrspace(1) %157, i64 %100, !dbg !67
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %56, !dbg !67
  %160 = getelementptr float, ptr addrspace(1) %135, i64 %88, !dbg !67
  %161 = getelementptr float, ptr addrspace(1) %160, i64 %100, !dbg !67
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %56, !dbg !67
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !68
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !68
  %165 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !62
  %166 = insertelement <2 x i32> %165, i32 %105, i64 1, !dbg !62
  %167 = bitcast <2 x i32> %166 to <2 x float>, !dbg !62
  %168 = insertelement <2 x i32> poison, i32 %147, i64 0, !dbg !64
  %169 = insertelement <2 x i32> %168, i32 %111, i64 1, !dbg !64
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !64
  %171 = fcmp ogt <2 x float> %170, %167, !dbg !69
  %172 = fcmp uno <2 x float> %170, zeroinitializer, !dbg !73
  %173 = or <2 x i1> %171, %172, !dbg !74
  %.v = select <2 x i1> %173, <2 x i32> %169, <2 x i32> %166, !dbg !75
  %174 = bitcast <2 x i32> %.v to <2 x float>, !dbg !75
  %175 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !66
  %176 = insertelement <2 x i32> %175, i32 %117, i64 1, !dbg !66
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !66
  %178 = fcmp olt <2 x float> %174, %177, !dbg !76
  %179 = fcmp uno <2 x float> %177, zeroinitializer, !dbg !78
  %180 = or <2 x i1> %179, %178, !dbg !79
  %.v4 = select <2 x i1> %180, <2 x i32> %176, <2 x i32> %.v, !dbg !80
  %181 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !80
  %182 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !68
  %183 = insertelement <2 x i32> %182, i32 %123, i64 1, !dbg !68
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !68
  %185 = fcmp olt <2 x float> %181, %184, !dbg !81
  %186 = fcmp uno <2 x float> %184, zeroinitializer, !dbg !83
  %187 = or <2 x i1> %186, %185, !dbg !84
  %.v5 = select <2 x i1> %187, <2 x i32> %183, <2 x i32> %.v4, !dbg !85
  %188 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !85
  %189 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !62
  %190 = insertelement <2 x i32> %189, i32 %106, i64 1, !dbg !62
  %191 = bitcast <2 x i32> %190 to <2 x float>, !dbg !62
  %192 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !64
  %193 = insertelement <2 x i32> %192, i32 %112, i64 1, !dbg !64
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !64
  %195 = fcmp ogt <2 x float> %194, %191, !dbg !69
  %196 = fcmp uno <2 x float> %194, zeroinitializer, !dbg !73
  %197 = or <2 x i1> %195, %196, !dbg !74
  %.v6 = select <2 x i1> %197, <2 x i32> %193, <2 x i32> %190, !dbg !75
  %198 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !75
  %199 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !66
  %200 = insertelement <2 x i32> %199, i32 %118, i64 1, !dbg !66
  %201 = bitcast <2 x i32> %200 to <2 x float>, !dbg !66
  %202 = fcmp olt <2 x float> %198, %201, !dbg !76
  %203 = fcmp uno <2 x float> %201, zeroinitializer, !dbg !78
  %204 = or <2 x i1> %203, %202, !dbg !79
  %.v7 = select <2 x i1> %204, <2 x i32> %200, <2 x i32> %.v6, !dbg !80
  %205 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !80
  %206 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !68
  %207 = insertelement <2 x i32> %206, i32 %124, i64 1, !dbg !68
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !68
  %209 = fcmp olt <2 x float> %205, %208, !dbg !81
  %210 = fcmp uno <2 x float> %208, zeroinitializer, !dbg !83
  %211 = or <2 x i1> %210, %209, !dbg !84
  %.v8 = select <2 x i1> %211, <2 x i32> %207, <2 x i32> %.v7, !dbg !85
  %212 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !85
  %213 = extractelement <2 x float> %188, i64 0, !dbg !86
  %214 = extractelement <2 x float> %188, i64 1, !dbg !87
  %215 = fsub float %213, %214, !dbg !86
  %216 = extractelement <2 x float> %212, i64 0, !dbg !86
  %217 = extractelement <2 x float> %212, i64 1, !dbg !87
  %218 = fsub float %216, %217, !dbg !86
  %219 = fmul float %215, %42, !dbg !88
  %220 = fmul float %218, %43, !dbg !88
  %221 = fadd float %214, %219, !dbg !87
  %222 = fadd float %217, %220, !dbg !87
  %223 = getelementptr float, ptr addrspace(1) %132, i64 %54, !dbg !89
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %56, !dbg !89
  %225 = getelementptr float, ptr addrspace(1) %136, i64 %54, !dbg !89
  %226 = getelementptr float, ptr addrspace(1) %225, i64 %56, !dbg !89
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %224, i1 true) #1, !dbg !90
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 true) #1, !dbg !90
  %229 = getelementptr float, ptr addrspace(1) %141, i64 %54, !dbg !91
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %56, !dbg !91
  %231 = getelementptr float, ptr addrspace(1) %144, i64 %54, !dbg !91
  %232 = getelementptr float, ptr addrspace(1) %231, i64 %56, !dbg !91
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !92
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !92
  %235 = getelementptr float, ptr addrspace(1) %149, i64 %54, !dbg !93
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %56, !dbg !93
  %237 = getelementptr float, ptr addrspace(1) %152, i64 %54, !dbg !93
  %238 = getelementptr float, ptr addrspace(1) %237, i64 %56, !dbg !93
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !94
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !94
  %241 = getelementptr float, ptr addrspace(1) %157, i64 %54, !dbg !95
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %56, !dbg !95
  %243 = getelementptr float, ptr addrspace(1) %160, i64 %54, !dbg !95
  %244 = getelementptr float, ptr addrspace(1) %243, i64 %56, !dbg !95
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #1, !dbg !96
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !96
  %247 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !90
  %248 = insertelement <2 x i32> %247, i32 %65, i64 1, !dbg !90
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !90
  %250 = insertelement <2 x i32> poison, i32 %233, i64 0, !dbg !92
  %251 = insertelement <2 x i32> %250, i32 %75, i64 1, !dbg !92
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !92
  %253 = fcmp ogt <2 x float> %252, %249, !dbg !97
  %254 = fcmp uno <2 x float> %252, zeroinitializer, !dbg !99
  %255 = or <2 x i1> %253, %254, !dbg !100
  %.v9 = select <2 x i1> %255, <2 x i32> %251, <2 x i32> %248, !dbg !101
  %256 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !101
  %257 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !94
  %258 = insertelement <2 x i32> %257, i32 %85, i64 1, !dbg !94
  %259 = bitcast <2 x i32> %258 to <2 x float>, !dbg !94
  %260 = fcmp olt <2 x float> %256, %259, !dbg !102
  %261 = fcmp uno <2 x float> %259, zeroinitializer, !dbg !104
  %262 = or <2 x i1> %261, %260, !dbg !105
  %.v10 = select <2 x i1> %262, <2 x i32> %258, <2 x i32> %.v9, !dbg !106
  %263 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !106
  %264 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !96
  %265 = insertelement <2 x i32> %264, i32 %95, i64 1, !dbg !96
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !96
  %267 = fcmp olt <2 x float> %263, %266, !dbg !107
  %268 = fcmp uno <2 x float> %266, zeroinitializer, !dbg !109
  %269 = or <2 x i1> %268, %267, !dbg !110
  %.v11 = select <2 x i1> %269, <2 x i32> %265, <2 x i32> %.v10, !dbg !111
  %270 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !111
  %271 = insertelement <2 x i32> poison, i32 %228, i64 0, !dbg !90
  %272 = insertelement <2 x i32> %271, i32 %66, i64 1, !dbg !90
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !90
  %274 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !92
  %275 = insertelement <2 x i32> %274, i32 %76, i64 1, !dbg !92
  %276 = bitcast <2 x i32> %275 to <2 x float>, !dbg !92
  %277 = fcmp ogt <2 x float> %276, %273, !dbg !97
  %278 = fcmp uno <2 x float> %276, zeroinitializer, !dbg !99
  %279 = or <2 x i1> %277, %278, !dbg !100
  %.v12 = select <2 x i1> %279, <2 x i32> %275, <2 x i32> %272, !dbg !101
  %280 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !101
  %281 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !94
  %282 = insertelement <2 x i32> %281, i32 %86, i64 1, !dbg !94
  %283 = bitcast <2 x i32> %282 to <2 x float>, !dbg !94
  %284 = fcmp olt <2 x float> %280, %283, !dbg !102
  %285 = fcmp uno <2 x float> %283, zeroinitializer, !dbg !104
  %286 = or <2 x i1> %285, %284, !dbg !105
  %.v13 = select <2 x i1> %286, <2 x i32> %282, <2 x i32> %.v12, !dbg !106
  %287 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !106
  %288 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !96
  %289 = insertelement <2 x i32> %288, i32 %96, i64 1, !dbg !96
  %290 = bitcast <2 x i32> %289 to <2 x float>, !dbg !96
  %291 = fcmp olt <2 x float> %287, %290, !dbg !107
  %292 = fcmp uno <2 x float> %290, zeroinitializer, !dbg !109
  %293 = or <2 x i1> %292, %291, !dbg !110
  %.v14 = select <2 x i1> %293, <2 x i32> %289, <2 x i32> %.v13, !dbg !111
  %294 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !111
  %295 = extractelement <2 x float> %270, i64 0, !dbg !112
  %296 = extractelement <2 x float> %270, i64 1, !dbg !113
  %297 = fsub float %295, %296, !dbg !112
  %298 = extractelement <2 x float> %294, i64 0, !dbg !112
  %299 = extractelement <2 x float> %294, i64 1, !dbg !113
  %300 = fsub float %298, %299, !dbg !112
  %301 = fmul float %297, %42, !dbg !114
  %302 = fmul float %300, %43, !dbg !114
  %303 = fadd float %296, %301, !dbg !113
  %304 = fadd float %299, %302, !dbg !113
  %305 = fsub float %303, %221, !dbg !115
  %306 = fsub float %304, %222, !dbg !115
  %307 = sext i32 %15 to i64, !dbg !116
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !116
  %309 = bitcast float %221 to i32, !dbg !117
  %310 = bitcast float %222 to i32, !dbg !117
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %309, i32 %310, ptr addrspace(1) %308, i1 true) #1, !dbg !117
  %311 = getelementptr float, ptr addrspace(1) %1, i64 %307, !dbg !118
  %312 = bitcast float %305 to i32, !dbg !119
  %313 = bitcast float %306 to i32, !dbg !119
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %312, i32 %313, ptr addrspace(1) %311, i1 true) #1, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz7w6quofihvcbhmzpy3qfj7ravjyoeuw6gzvlmxizv3dojofvgt.py", directory: "inductor_cache/z7")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_max_pool2d_with_indices_mul_sub_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_max_pool2d_with_indices_mul_sub_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_max_pool2d_with_indices_mul_sub_24", linkageName: "triton_poi_fused__unsafe_index_add_max_pool2d_with_indices_mul_sub_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 35, scope: !7)
!33 = !DILocation(line: 41, column: 51, scope: !7)
!34 = !DILocation(line: 41, column: 64, scope: !7)
!35 = !DILocation(line: 41, column: 58, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 69, scope: !7)
!38 = !DILocation(line: 42, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 41, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 75, scope: !7)
!42 = !DILocation(line: 44, column: 38, scope: !7)
!43 = !DILocation(line: 44, column: 43, scope: !7)
!44 = !DILocation(line: 44, column: 31, scope: !7)
!45 = !DILocation(line: 44, column: 77, scope: !7)
!46 = !DILocation(line: 46, column: 38, scope: !7)
!47 = !DILocation(line: 46, column: 43, scope: !7)
!48 = !DILocation(line: 46, column: 31, scope: !7)
!49 = !DILocation(line: 46, column: 77, scope: !7)
!50 = !DILocation(line: 50, column: 35, scope: !7)
!51 = !DILocation(line: 51, column: 52, scope: !7)
!52 = !DILocation(line: 51, column: 31, scope: !7)
!53 = !DILocation(line: 51, column: 71, scope: !7)
!54 = !DILocation(line: 52, column: 31, scope: !7)
!55 = !DILocation(line: 52, column: 76, scope: !7)
!56 = !DILocation(line: 54, column: 31, scope: !7)
!57 = !DILocation(line: 54, column: 78, scope: !7)
!58 = !DILocation(line: 56, column: 31, scope: !7)
!59 = !DILocation(line: 56, column: 78, scope: !7)
!60 = !DILocation(line: 60, column: 35, scope: !7)
!61 = !DILocation(line: 61, column: 31, scope: !7)
!62 = !DILocation(line: 61, column: 72, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 77, scope: !7)
!65 = !DILocation(line: 64, column: 31, scope: !7)
!66 = !DILocation(line: 64, column: 79, scope: !7)
!67 = !DILocation(line: 66, column: 31, scope: !7)
!68 = !DILocation(line: 66, column: 79, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 63, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !77)
!77 = !DILocation(line: 65, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !82)
!82 = !DILocation(line: 67, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !82)
!86 = !DILocation(line: 68, column: 20, scope: !7)
!87 = !DILocation(line: 70, column: 20, scope: !7)
!88 = !DILocation(line: 69, column: 20, scope: !7)
!89 = !DILocation(line: 71, column: 31, scope: !7)
!90 = !DILocation(line: 71, column: 71, scope: !7)
!91 = !DILocation(line: 72, column: 31, scope: !7)
!92 = !DILocation(line: 72, column: 76, scope: !7)
!93 = !DILocation(line: 74, column: 31, scope: !7)
!94 = !DILocation(line: 74, column: 78, scope: !7)
!95 = !DILocation(line: 76, column: 31, scope: !7)
!96 = !DILocation(line: 76, column: 78, scope: !7)
!97 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !98)
!98 = !DILocation(line: 73, column: 42, scope: !7)
!99 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !98)
!100 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !98)
!101 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !98)
!102 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !103)
!103 = !DILocation(line: 75, column: 42, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !103)
!105 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !103)
!106 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !103)
!107 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !108)
!108 = !DILocation(line: 77, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !108)
!112 = !DILocation(line: 78, column: 20, scope: !7)
!113 = !DILocation(line: 80, column: 20, scope: !7)
!114 = !DILocation(line: 79, column: 20, scope: !7)
!115 = !DILocation(line: 81, column: 20, scope: !7)
!116 = !DILocation(line: 82, column: 28, scope: !7)
!117 = !DILocation(line: 82, column: 40, scope: !7)
!118 = !DILocation(line: 83, column: 28, scope: !7)
!119 = !DILocation(line: 83, column: 40, scope: !7)
!120 = !DILocation(line: 83, column: 4, scope: !7)
