; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_constant_pad_nd_relu_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = and i32 %7, 255, !dbg !12
  %11 = or disjoint i32 %10, 256, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = icmp slt i32 %12, 67600, !dbg !14
  %17 = icmp slt i32 %14, 67600, !dbg !14
  %18 = icmp slt i32 %15, 67600, !dbg !14
  %19 = sdiv i32 %12, 65, !dbg !15
  %20 = sdiv i32 %13, 65, !dbg !15
  %21 = sdiv i32 %12, 4225, !dbg !16
  %22 = sdiv i32 %13, 4225, !dbg !16
  %.frozen = freeze i32 %14, !dbg !16
  %23 = sdiv i32 %.frozen, 4225, !dbg !16
  %.frozen2 = freeze i32 %15, !dbg !16
  %24 = sdiv i32 %.frozen2, 4225, !dbg !16
  %25 = mul i32 %23, 4225, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = mul i32 %24, 4225, !dbg !17
  %.decomposed3 = sub i32 %.frozen2, %26, !dbg !17
  %27 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %28 = insertelement <2 x i32> %27, i32 %19, i64 1, !dbg !18
  %29 = srem <2 x i32> %28, splat (i32 65), !dbg !18
  %30 = icmp sgt <2 x i32> %29, zeroinitializer, !dbg !19
  %31 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %32 = insertelement <2 x i32> %31, i32 %20, i64 1, !dbg !18
  %33 = srem <2 x i32> %32, splat (i32 65), !dbg !18
  %34 = icmp sgt <2 x i32> %33, zeroinitializer, !dbg !19
  %shift = shufflevector <2 x i1> %30, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %35 = and <2 x i1> %30, %shift, !dbg !20
  %36 = extractelement <2 x i1> %35, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %34, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %37 = and <2 x i1> %34, %shift1, !dbg !20
  %38 = extractelement <2 x i1> %37, i64 0, !dbg !20
  %39 = extractelement <2 x i32> %29, i64 0, !dbg !21
  %40 = add nsw i32 %39, -65, !dbg !21
  %41 = extractelement <2 x i32> %33, i64 0, !dbg !21
  %42 = add nsw i32 %41, -65, !dbg !21
  %43 = extractelement <2 x i32> %29, i64 1, !dbg !22
  %44 = shl nsw i32 %43, 6, !dbg !22
  %45 = extractelement <2 x i32> %33, i64 1, !dbg !22
  %46 = shl nsw i32 %45, 6, !dbg !22
  %47 = shl nsw i32 %21, 12, !dbg !23
  %48 = shl nsw i32 %22, 12, !dbg !23
  %49 = add nsw i32 %40, %47, !dbg !24
  %50 = add nsw i32 %49, %44, !dbg !25
  %51 = add nsw i32 %42, %48, !dbg !24
  %52 = add nsw i32 %51, %46, !dbg !25
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %52 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = and i1 %16, %36, !dbg !27
  %58 = and i1 %38, %16, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %57, i32 0, i1 %57) #2, !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %58, i32 0, i1 %58) #2, !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = fcmp olt float %60, 0.000000e+00, !dbg !29
  %64 = fcmp olt float %62, 0.000000e+00, !dbg !29
  %65 = select i1 %63, float 0.000000e+00, float %60, !dbg !33
  %66 = select i1 %64, float 0.000000e+00, float %62, !dbg !33
  %67 = sext i32 %12 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !34
  %69 = bitcast float %65 to i32, !dbg !35
  %70 = select i1 %36, i32 %69, i32 0, !dbg !36
  %71 = bitcast float %66 to i32, !dbg !35
  %72 = select i1 %38, i32 %71, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %72, ptr addrspace(1) %68, i1 %16) #2, !dbg !35
  %73 = mul i32 %23, 4256, !dbg !37
  %74 = mul i32 %24, 4256, !dbg !37
  %75 = add i32 %73, %.decomposed, !dbg !38
  %76 = add i32 %74, %.decomposed3, !dbg !38
  %77 = sext i32 %75 to i64, !dbg !39
  %78 = getelementptr float, ptr addrspace(1) %2, i64 %77, !dbg !39
  %79 = sext i32 %76 to i64, !dbg !39
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !39
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !40
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %81, i32 %59, i32 %61, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %83 = load i32, ptr addrspace(3) %82, align 4, !dbg !40
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %85 = load i32, ptr addrspace(3) %84, align 4, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %83, ptr addrspace(1) %78, i1 %17) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %85, ptr addrspace(1) %80, i1 %18) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3zk36qur2k7euplfn5vp26omqotaujkohsfstktnpe2iyhf7wx4.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_5", linkageName: "triton_poi_fused_constant_pad_nd_relu_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 46, scope: !7)
!23 = !DILocation(line: 35, column: 56, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 51, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 68, scope: !7)
!28 = !DILocation(line: 35, column: 61, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 37, column: 40, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 40, column: 25, scope: !7)
!35 = !DILocation(line: 40, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 33, scope: !7)
!37 = !DILocation(line: 41, column: 35, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 46, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
