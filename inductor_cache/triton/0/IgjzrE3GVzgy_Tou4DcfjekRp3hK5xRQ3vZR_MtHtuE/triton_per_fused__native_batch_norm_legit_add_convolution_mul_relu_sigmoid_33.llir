; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 2, !dbg !12
  %17 = and i32 %16, 63, !dbg !12
  %18 = or disjoint i32 %17, 64, !dbg !12
  %19 = and i32 %15, 127, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = or disjoint i32 %14, %18, !dbg !13
  %22 = or disjoint i32 %14, %19, !dbg !13
  %23 = shl i32 %15, 2, !dbg !14
  %24 = and i32 %23, 12, !dbg !14
  %25 = srem i32 %20, 1024, !dbg !15
  %26 = srem i32 %21, 1024, !dbg !15
  %27 = srem i32 %22, 1024, !dbg !15
  %28 = sext i32 %20 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = sext i32 %21 to i64, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !16
  %32 = sext i32 %22 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !17
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !17
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !17
  %38 = bitcast i32 %37 to float, !dbg !17
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !17
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !17
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !17
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !17
  %43 = bitcast i32 %42 to float, !dbg !17
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !17
  %45 = sext i32 %25 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !18
  %47 = sext i32 %26 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !18
  %49 = sext i32 %27 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !18
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !19
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !19
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !19
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #5, !dbg !19
  %55 = bitcast i32 %54 to float, !dbg !19
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !19
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !19
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !19
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !19
  %60 = bitcast i32 %59 to float, !dbg !19
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #5, !dbg !19
  %62 = shl i32 %20, 4, !dbg !20
  %63 = shl i32 %21, 4, !dbg !20
  %64 = or disjoint i32 %62, %24, !dbg !21
  %65 = or disjoint i32 %63, %24, !dbg !21
  %66 = sext i32 %64 to i64, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !22
  %68 = sext i32 %65 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !22
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #5, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !23
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !23
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #5, !dbg !23
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !23
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !23
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #5, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #5, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 true) #5, !dbg !27
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #5, !dbg !27
  %94 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !28
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !29
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !29
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #5, !dbg !29
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !29
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !29
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #5, !dbg !29
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !31
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !31
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #5, !dbg !31
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !31
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !31
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !31
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 true) #5, !dbg !31
  %114 = fadd float %38, %55, !dbg !32
  %115 = fadd float %43, %60, !dbg !32
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !33
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !33
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !33
  %119 = insertelement <8 x i32> poison, i32 %79, i64 0, !dbg !23
  %120 = insertelement <8 x i32> %119, i32 %78, i64 1, !dbg !23
  %121 = insertelement <8 x i32> %120, i32 %77, i64 2, !dbg !23
  %122 = insertelement <8 x i32> %121, i32 %76, i64 3, !dbg !23
  %123 = insertelement <8 x i32> %122, i32 %74, i64 4, !dbg !23
  %124 = insertelement <8 x i32> %123, i32 %73, i64 5, !dbg !23
  %125 = insertelement <8 x i32> %124, i32 %72, i64 6, !dbg !23
  %126 = insertelement <8 x i32> %125, i32 %71, i64 7, !dbg !23
  %127 = bitcast <8 x i32> %126 to <8 x float>, !dbg !23
  %128 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !25
  %129 = insertelement <2 x i32> %128, i32 %85, i64 1, !dbg !25
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !25
  %131 = shufflevector <2 x float> %130, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !25
  %132 = fadd <8 x float> %131, %127, !dbg !34
  %133 = extractelement <8 x float> %132, i64 6, !dbg !35
  %134 = extractelement <8 x float> %132, i64 7, !dbg !35
  %135 = fadd float %134, %133, !dbg !35
  %136 = extractelement <8 x float> %132, i64 5, !dbg !35
  %137 = fadd float %136, %135, !dbg !35
  %138 = extractelement <8 x float> %132, i64 4, !dbg !35
  %139 = fadd float %138, %137, !dbg !35
  %140 = extractelement <8 x float> %132, i64 2, !dbg !35
  %141 = extractelement <8 x float> %132, i64 3, !dbg !35
  %142 = fadd float %141, %140, !dbg !35
  %143 = extractelement <8 x float> %132, i64 1, !dbg !35
  %144 = fadd float %143, %142, !dbg !35
  %145 = extractelement <8 x float> %132, i64 0, !dbg !35
  %146 = fadd float %145, %144, !dbg !35
  %147 = bitcast float %139 to i32, !dbg !40
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 2, i32 31), !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = fadd float %139, %149, !dbg !35
  %151 = bitcast float %150 to i32, !dbg !40
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 1, i32 31), !dbg !40
  %153 = bitcast i32 %152 to float, !dbg !40
  %154 = fadd float %150, %153, !dbg !35
  %155 = bitcast float %146 to i32, !dbg !40
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !40
  %157 = bitcast i32 %156 to float, !dbg !40
  %158 = fadd float %146, %157, !dbg !35
  %159 = bitcast float %158 to i32, !dbg !40
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !40
  %161 = bitcast i32 %160 to float, !dbg !40
  %162 = fadd float %158, %161, !dbg !35
  %163 = bitcast float %154 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %163, i1 true) #5, !dbg !33
  %164 = bitcast float %162 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %164, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %165 = load float, ptr addrspace(3) %118, align 4, !dbg !33
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float 1.600000e+01) #5, !dbg !33
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float 1.600000e+01) #5, !dbg !33
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float 1.600000e+01) #5, !dbg !33
  %169 = insertelement <8 x float> poison, float %168, i64 0, !dbg !41
  %170 = insertelement <8 x float> %169, float %167, i64 1, !dbg !41
  %171 = shufflevector <8 x float> %170, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %172 = fsub <8 x float> %132, %171, !dbg !41
  %173 = fmul <8 x float> %172, %172, !dbg !42
  %174 = fmul <8 x float> %172, %172, !dbg !42
  %175 = fmul <8 x float> %172, %172, !dbg !42
  %176 = fmul <8 x float> %172, %172, !dbg !42
  %177 = fmul <8 x float> %172, %172, !dbg !42
  %178 = fmul <8 x float> %172, %172, !dbg !42
  %179 = fmul <8 x float> %172, %172, !dbg !42
  %180 = fmul <8 x float> %172, %172, !dbg !42
  %shift = shufflevector <8 x float> %173, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison>, !dbg !43
  %181 = fadd <8 x float> %shift, %174, !dbg !43
  %shift27 = shufflevector <8 x float> %181, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison>, !dbg !43
  %182 = fadd <8 x float> %175, %shift27, !dbg !43
  %shift28 = shufflevector <8 x float> %182, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !43
  %183 = fadd <8 x float> %176, %shift28, !dbg !43
  %184 = extractelement <8 x float> %183, i64 4, !dbg !43
  %shift29 = shufflevector <8 x float> %177, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %185 = fadd <8 x float> %shift29, %178, !dbg !43
  %shift30 = shufflevector <8 x float> %185, <8 x float> poison, <8 x i32> <i32 poison, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %186 = fadd <8 x float> %179, %shift30, !dbg !43
  %shift31 = shufflevector <8 x float> %186, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !43
  %187 = fadd <8 x float> %180, %shift31, !dbg !43
  %188 = extractelement <8 x float> %187, i64 0, !dbg !43
  %189 = bitcast float %184 to i32, !dbg !45
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 2, i32 31), !dbg !45
  %191 = bitcast i32 %190 to float, !dbg !45
  %192 = fadd float %184, %191, !dbg !43
  %193 = bitcast float %192 to i32, !dbg !45
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 1, i32 31), !dbg !45
  %195 = bitcast i32 %194 to float, !dbg !45
  %196 = fadd float %192, %195, !dbg !43
  %197 = bitcast float %188 to i32, !dbg !45
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !45
  %199 = bitcast i32 %198 to float, !dbg !45
  %200 = fadd float %188, %199, !dbg !43
  %201 = bitcast float %200 to i32, !dbg !45
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 1, i32 31), !dbg !45
  %203 = bitcast i32 %202 to float, !dbg !45
  %204 = fadd float %200, %203, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %205 = bitcast float %196 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %205, i1 true) #5, !dbg !46
  %206 = bitcast float %204 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %206, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %207 = load float, ptr addrspace(3) %118, align 4, !dbg !46
  %208 = fsub float 0.000000e+00, %114, !dbg !47
  %209 = fsub float 0.000000e+00, %115, !dbg !47
  %210 = fmul float %208, 0x3FF7154760000000, !dbg !49
  %211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #5, !dbg !49
  %212 = fmul float %209, 0x3FF7154760000000, !dbg !49
  %213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %212) #5, !dbg !49
  %214 = fadd float %211, 1.000000e+00, !dbg !50
  %215 = fadd float %213, 1.000000e+00, !dbg !50
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %214) #5, !dbg !51
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %215) #5, !dbg !51
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float 1.600000e+01) #5, !dbg !52
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float 1.600000e+01) #5, !dbg !52
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %204, float 1.600000e+01) #5, !dbg !52
  %221 = fadd float %218, 0x3EE4F8B580000000, !dbg !53
  %222 = fadd float %219, 0x3EE4F8B580000000, !dbg !53
  %223 = fadd float %220, 0x3EE4F8B580000000, !dbg !53
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %224, 0, !dbg !46
  br i1 %.not.i, label %227, label %225, !dbg !46

225:                                              ; preds = %12
  %226 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

227:                                              ; preds = %12
  %228 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %225, %227
  %.0.i = phi float [ %226, %225 ], [ %228, %227 ], !dbg !46
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i12 = icmp eq i32 %232, 0, !dbg !46
  br i1 %.not.i12, label %235, label %233, !dbg !46

233:                                              ; preds = %__nv_rsqrtf.exit
  %234 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %222), !dbg !46
  br label %__nv_rsqrtf.exit14, !dbg !46

235:                                              ; preds = %__nv_rsqrtf.exit
  %236 = tail call float @llvm.nvvm.rsqrt.approx.f(float %222), !dbg !46
  br label %__nv_rsqrtf.exit14, !dbg !46

__nv_rsqrtf.exit14:                               ; preds = %233, %235
  %.0.i13 = phi float [ %234, %233 ], [ %236, %235 ], !dbg !46
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %239 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i24 = icmp eq i32 %240, 0, !dbg !46
  br i1 %.not.i24, label %243, label %241, !dbg !46

241:                                              ; preds = %__nv_rsqrtf.exit14
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %223), !dbg !46
  br label %__nv_rsqrtf.exit26, !dbg !46

243:                                              ; preds = %__nv_rsqrtf.exit14
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %223), !dbg !46
  br label %__nv_rsqrtf.exit26, !dbg !46

__nv_rsqrtf.exit26:                               ; preds = %241, %243
  %.0.i25 = phi float [ %242, %241 ], [ %244, %243 ], !dbg !46
  %245 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !27
  %246 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !29
  %247 = insertelement <2 x i32> %246, i32 %99, i64 1, !dbg !29
  %248 = bitcast <2 x i32> %247 to <2 x float>, !dbg !29
  %249 = shufflevector <2 x float> %248, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !29
  %250 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !31
  %251 = insertelement <2 x i32> %250, i32 %109, i64 1, !dbg !31
  %252 = bitcast <2 x i32> %251 to <2 x float>, !dbg !31
  %253 = shufflevector <2 x float> %252, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !31
  %254 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !27
  %255 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !27
  %256 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !27
  %257 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !27
  %258 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !27
  %259 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !27
  %260 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !27
  %261 = bitcast i32 %44 to float, !dbg !17
  %262 = bitcast i32 %61 to float, !dbg !19
  %263 = fadd float %261, %262, !dbg !32
  %264 = insertelement <8 x float> poison, float %.0.i25, i64 0, !dbg !54
  %265 = insertelement <8 x float> %264, float %.0.i13, i64 1, !dbg !54
  %266 = shufflevector <8 x float> %265, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !54
  %267 = fmul <8 x float> %172, %266, !dbg !54
  %268 = insertelement <8 x i32> poison, i32 %245, i64 0, !dbg !27
  %269 = insertelement <8 x i32> %268, i32 %254, i64 1, !dbg !27
  %270 = insertelement <8 x i32> %269, i32 %255, i64 2, !dbg !27
  %271 = insertelement <8 x i32> %270, i32 %256, i64 3, !dbg !27
  %272 = insertelement <8 x i32> %271, i32 %257, i64 4, !dbg !27
  %273 = insertelement <8 x i32> %272, i32 %258, i64 5, !dbg !27
  %274 = insertelement <8 x i32> %273, i32 %259, i64 6, !dbg !27
  %275 = insertelement <8 x i32> %274, i32 %260, i64 7, !dbg !27
  %276 = bitcast <8 x i32> %275 to <8 x float>, !dbg !27
  %277 = fsub <8 x float> %276, %249, !dbg !55
  %278 = fmul <8 x float> %277, %253, !dbg !56
  %279 = insertelement <8 x float> poison, float %217, i64 0, !dbg !57
  %280 = insertelement <8 x float> %279, float %216, i64 1, !dbg !57
  %281 = shufflevector <8 x float> %280, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !57
  %282 = fmul <8 x float> %278, %281, !dbg !57
  %283 = fadd <8 x float> %282, %267, !dbg !58
  %284 = fcmp olt <8 x float> %283, zeroinitializer, !dbg !59
  %285 = extractelement <8 x i1> %284, i64 7, !dbg !63
  %286 = extractelement <8 x i1> %284, i64 6, !dbg !63
  %287 = extractelement <8 x i1> %284, i64 5, !dbg !63
  %288 = extractelement <8 x i1> %284, i64 4, !dbg !63
  %289 = extractelement <8 x i1> %284, i64 3, !dbg !63
  %290 = extractelement <8 x i1> %284, i64 2, !dbg !63
  %291 = extractelement <8 x i1> %284, i64 1, !dbg !63
  %292 = extractelement <8 x i1> %284, i64 0, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %293 = and i32 %15, 128, !dbg !65
  %294 = icmp eq i32 %293, 0, !dbg !65
  %295 = bitcast float %263 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %295, ptr addrspace(1) %33, i1 %294) #5, !dbg !65
  %296 = bitcast float %134 to i32, !dbg !66
  %297 = bitcast float %133 to i32, !dbg !66
  %298 = bitcast float %136 to i32, !dbg !66
  %299 = bitcast float %138 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %296, i32 %297, i32 %298, i32 %299, ptr addrspace(1) %67, i1 true) #5, !dbg !66
  %300 = bitcast float %141 to i32, !dbg !66
  %301 = bitcast float %140 to i32, !dbg !66
  %302 = bitcast float %143 to i32, !dbg !66
  %303 = bitcast float %145 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %300, i32 %301, i32 %302, i32 %303, ptr addrspace(1) %69, i1 true) #5, !dbg !66
  %304 = getelementptr float, ptr addrspace(1) %8, i64 %66, !dbg !67
  %305 = getelementptr float, ptr addrspace(1) %8, i64 %68, !dbg !67
  %bc = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %306 = extractelement <8 x i32> %bc, i64 7, !dbg !68
  %307 = select i1 %285, i32 0, i32 %306, !dbg !63
  %bc32 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %308 = extractelement <8 x i32> %bc32, i64 6, !dbg !68
  %309 = select i1 %286, i32 0, i32 %308, !dbg !63
  %bc33 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %310 = extractelement <8 x i32> %bc33, i64 5, !dbg !68
  %311 = select i1 %287, i32 0, i32 %310, !dbg !63
  %bc34 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %312 = extractelement <8 x i32> %bc34, i64 4, !dbg !68
  %313 = select i1 %288, i32 0, i32 %312, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %309, i32 %311, i32 %313, ptr addrspace(1) %304, i1 true) #5, !dbg !68
  %bc35 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %314 = extractelement <8 x i32> %bc35, i64 3, !dbg !68
  %315 = select i1 %289, i32 0, i32 %314, !dbg !63
  %bc36 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %316 = extractelement <8 x i32> %bc36, i64 2, !dbg !68
  %317 = select i1 %290, i32 0, i32 %316, !dbg !63
  %bc37 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %318 = extractelement <8 x i32> %bc37, i64 1, !dbg !68
  %319 = select i1 %291, i32 0, i32 %318, !dbg !63
  %bc38 = bitcast <8 x float> %283 to <8 x i32>, !dbg !68
  %320 = extractelement <8 x i32> %bc38, i64 0, !dbg !68
  %321 = select i1 %292, i32 0, i32 %320, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %317, i32 %319, i32 %321, ptr addrspace(1) %305, i1 true) #5, !dbg !68
  %322 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !69
  %323 = bitcast float %.0.i to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %323, ptr addrspace(1) %322, i1 %294) #5, !dbg !70
  %324 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !71
  %325 = bitcast float %166 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %325, ptr addrspace(1) %324, i1 %294) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py", directory: "inductor_cache/gw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 42, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 60, column: 28, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !38, inlinedAt: !48)
!48 = !DILocation(line: 53, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !38, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !38, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !38, inlinedAt: !48)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 64, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 65, column: 4, scope: !7)
!65 = !DILocation(line: 66, column: 39, scope: !7)
!66 = !DILocation(line: 67, column: 47, scope: !7)
!67 = !DILocation(line: 68, column: 25, scope: !7)
!68 = !DILocation(line: 68, column: 45, scope: !7)
!69 = !DILocation(line: 69, column: 25, scope: !7)
!70 = !DILocation(line: 69, column: 37, scope: !7)
!71 = !DILocation(line: 70, column: 25, scope: !7)
!72 = !DILocation(line: 70, column: 37, scope: !7)
!73 = !DILocation(line: 70, column: 4, scope: !7)
