; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 1024, !dbg !14
  %18 = srem i32 %17, 60, !dbg !15
  %19 = mul i32 %17, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen6 = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen6, 61440, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %36 = icmp slt i32 %18, 56, !dbg !26
  %37 = mul i32 %20, 61440, !dbg !27
  %srem.decomposed = sub i32 %.frozen6, %37, !dbg !27
  %38 = mul nsw i32 %20, 57344, !dbg !28
  %39 = add nsw i32 %38, %srem.decomposed, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !31
  %43 = icmp sgt i32 %18, 55, !dbg !32
  %44 = add nsw i32 %18, -56, !dbg !33
  %45 = shl nsw i32 %44, 10, !dbg !34
  %46 = shl nsw i32 %20, 12, !dbg !35
  %47 = add nsw i32 %46, %.decomposed, !dbg !36
  %48 = add nsw i32 %47, %45, !dbg !37
  %49 = sext i32 %48 to i64, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !38
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #3, !dbg !39
  %52 = sext i32 %44 to i64, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !40
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %43, i32 0, i1 %43) #3, !dbg !41
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %43, i32 0, i1 %43) #3, !dbg !41
  %56 = fadd float %27, 0x3EE4F8B580000000, !dbg !42
  %57 = fadd float %29, 0x3EE4F8B580000000, !dbg !42
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %58, 0, !dbg !43
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %59, 0, !dbg !43
  br i1 %.not.i, label %65, label %60, !dbg !43

60:                                               ; preds = %10
  br i1 %.not1.i, label %63, label %61, !dbg !43

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

65:                                               ; preds = %10
  br i1 %.not1.i, label %68, label %66, !dbg !43

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !43
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i1 = icmp eq i32 %70, 0, !dbg !43
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !43
  br i1 %.not.i1, label %77, label %72, !dbg !43

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !43

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !43

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !43
  br label %__nv_sqrtf.exit5, !dbg !43

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !43
  %82 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = extractvalue { i32, i32 } %51, 1, !dbg !39
  %85 = bitcast i32 %84 to float, !dbg !39
  %86 = bitcast i32 %55 to float, !dbg !41
  %87 = fadd float %85, %86, !dbg !44
  %88 = select i1 %36, float %83, float %87, !dbg !45
  %89 = bitcast i32 %24 to float, !dbg !19
  %90 = fsub float %88, %89, !dbg !46
  %91 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %92 = bitcast i32 %91 to float, !dbg !31
  %93 = extractvalue { i32, i32 } %51, 0, !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = bitcast i32 %54 to float, !dbg !41
  %96 = fadd float %94, %95, !dbg !44
  %97 = select i1 %36, float %92, float %96, !dbg !45
  %98 = bitcast i32 %23 to float, !dbg !19
  %99 = fsub float %97, %98, !dbg !46
  %100 = bitcast i32 %35 to float, !dbg !25
  %101 = bitcast i32 %34 to float, !dbg !25
  %102 = bitcast i32 %32 to float, !dbg !23
  %103 = bitcast i32 %31 to float, !dbg !23
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !47
  %106 = fmul float %99, %104, !dbg !48
  %107 = fmul float %90, %105, !dbg !48
  %108 = fmul float %106, %103, !dbg !49
  %109 = fmul float %107, %102, !dbg !49
  %110 = fadd float %108, %101, !dbg !50
  %111 = fadd float %109, %100, !dbg !50
  %112 = fcmp olt float %110, 0.000000e+00, !dbg !51
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !51
  %114 = select i1 %112, float 0.000000e+00, float %110, !dbg !55
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !55
  %116 = sext i32 %16 to i64, !dbg !56
  %117 = getelementptr float, ptr addrspace(1) %7, i64 %116, !dbg !56
  %118 = bitcast float %97 to i32, !dbg !57
  %119 = bitcast float %88 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 true) #3, !dbg !57
  %120 = getelementptr float, ptr addrspace(1) %8, i64 %116, !dbg !58
  %121 = bitcast float %114 to i32, !dbg !59
  %122 = bitcast float %115 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %120, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cer6wtbj3c6ndikdt6qscgvbdsgt6xenqzqwjayksvd4zsrty2ua.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 53, scope: !7)
!29 = !DILocation(line: 37, column: 47, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 58, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 41, scope: !7)
!35 = !DILocation(line: 41, column: 60, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 41, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 65, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 44, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 27, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 33, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 59, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 60, column: 25, scope: !7)
!57 = !DILocation(line: 60, column: 37, scope: !7)
!58 = !DILocation(line: 61, column: 25, scope: !7)
!59 = !DILocation(line: 61, column: 37, scope: !7)
!60 = !DILocation(line: 61, column: 4, scope: !7)
