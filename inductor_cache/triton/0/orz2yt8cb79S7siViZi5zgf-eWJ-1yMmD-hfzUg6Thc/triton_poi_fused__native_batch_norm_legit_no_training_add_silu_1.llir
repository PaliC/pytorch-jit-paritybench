; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 4096, !dbg !14
  %17 = sdiv i32 %15, 4096, !dbg !14
  %18 = srem i32 %16, 64, !dbg !15
  %19 = srem i32 %17, 64, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !18
  %28 = sext i32 %19 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %41 = bitcast i32 %40 to float, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %43 = bitcast i32 %42 to float, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %45 = bitcast i32 %44 to float, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %47 = bitcast i32 %46 to float, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %49 = bitcast i32 %48 to float, !dbg !21
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %51 = bitcast i32 %50 to float, !dbg !21
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %53 = bitcast i32 %52 to float, !dbg !21
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %55 = bitcast i32 %54 to float, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %80 = fadd float %41, 0x3EE4F8B580000000, !dbg !28
  %81 = fadd float %43, 0x3EE4F8B580000000, !dbg !28
  %82 = fadd float %45, 0x3EE4F8B580000000, !dbg !28
  %83 = fadd float %47, 0x3EE4F8B580000000, !dbg !28
  %84 = fadd float %49, 0x3EE4F8B580000000, !dbg !28
  %85 = fadd float %51, 0x3EE4F8B580000000, !dbg !28
  %86 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %87 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %88, 0, !dbg !29
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %89, 0, !dbg !29
  br i1 %.not.i, label %95, label %90, !dbg !29

90:                                               ; preds = %8
  br i1 %.not1.i, label %93, label %91, !dbg !29

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

95:                                               ; preds = %8
  br i1 %.not1.i, label %98, label %96, !dbg !29

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %100, 0, !dbg !29
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %101, 0, !dbg !29
  br i1 %.not.i1, label %107, label %102, !dbg !29

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %105, label %103, !dbg !29

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !29

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %103, %105, %108, %110
  %.0.i3 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %112, 0, !dbg !29
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %113, 0, !dbg !29
  br i1 %.not.i6, label %119, label %114, !dbg !29

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !29

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !29

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %115, %117, %120, %122
  %.0.i8 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %124, 0, !dbg !29
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %125, 0, !dbg !29
  br i1 %.not.i11, label %131, label %126, !dbg !29

126:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %129, label %127, !dbg !29

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

131:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %134, label %132, !dbg !29

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %127, %129, %132, %134
  %.0.i13 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !29
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %136, 0, !dbg !29
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %137, 0, !dbg !29
  br i1 %.not.i16, label %143, label %138, !dbg !29

138:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %141, label %139, !dbg !29

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

143:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %146, label %144, !dbg !29

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %139, %141, %144, %146
  %.0.i18 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !29
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %148, 0, !dbg !29
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %149, 0, !dbg !29
  br i1 %.not.i21, label %155, label %150, !dbg !29

150:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %153, label %151, !dbg !29

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

155:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %158, label %156, !dbg !29

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %151, %153, %156, %158
  %.0.i23 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %160, 0, !dbg !29
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %161, 0, !dbg !29
  br i1 %.not.i26, label %167, label %162, !dbg !29

162:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %165, label %163, !dbg !29

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

167:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %170, label %168, !dbg !29

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %163, %165, %168, %170
  %.0.i28 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %172, 0, !dbg !29
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %173, 0, !dbg !29
  br i1 %.not.i31, label %179, label %174, !dbg !29

174:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %177, label %175, !dbg !29

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

179:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %182, label %180, !dbg !29

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %175, %177, %180, %182
  %.0.i33 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !29
  %184 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %185 = bitcast i32 %184 to float, !dbg !17
  %186 = bitcast i32 %37 to float, !dbg !19
  %187 = fsub float %185, %186, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %189 = bitcast i32 %188 to float, !dbg !17
  %190 = bitcast i32 %36 to float, !dbg !19
  %191 = fsub float %189, %190, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %193 = bitcast i32 %192 to float, !dbg !17
  %194 = bitcast i32 %35 to float, !dbg !19
  %195 = fsub float %193, %194, !dbg !30
  %196 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %197 = bitcast i32 %196 to float, !dbg !17
  %198 = bitcast i32 %34 to float, !dbg !19
  %199 = fsub float %197, %198, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %201 = bitcast i32 %200 to float, !dbg !17
  %202 = bitcast i32 %33 to float, !dbg !19
  %203 = fsub float %201, %202, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %205 = bitcast i32 %204 to float, !dbg !17
  %206 = bitcast i32 %32 to float, !dbg !19
  %207 = fsub float %205, %206, !dbg !30
  %208 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %209 = bitcast i32 %208 to float, !dbg !17
  %210 = bitcast i32 %31 to float, !dbg !19
  %211 = fsub float %209, %210, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %213 = bitcast i32 %212 to float, !dbg !17
  %214 = bitcast i32 %30 to float, !dbg !19
  %215 = fsub float %213, %214, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !27
  %217 = bitcast i32 %216 to float, !dbg !27
  %218 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !27
  %219 = bitcast i32 %218 to float, !dbg !27
  %220 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !27
  %221 = bitcast i32 %220 to float, !dbg !27
  %222 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !27
  %223 = bitcast i32 %222 to float, !dbg !27
  %224 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %225 = bitcast i32 %224 to float, !dbg !27
  %226 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %227 = bitcast i32 %226 to float, !dbg !27
  %228 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %229 = bitcast i32 %228 to float, !dbg !27
  %230 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %231 = bitcast i32 %230 to float, !dbg !27
  %232 = bitcast i32 %75 to float, !dbg !25
  %233 = bitcast i32 %74 to float, !dbg !25
  %234 = bitcast i32 %73 to float, !dbg !25
  %235 = bitcast i32 %72 to float, !dbg !25
  %236 = bitcast i32 %71 to float, !dbg !25
  %237 = bitcast i32 %70 to float, !dbg !25
  %238 = bitcast i32 %69 to float, !dbg !25
  %239 = bitcast i32 %68 to float, !dbg !25
  %240 = bitcast i32 %65 to float, !dbg !23
  %241 = bitcast i32 %64 to float, !dbg !23
  %242 = bitcast i32 %63 to float, !dbg !23
  %243 = bitcast i32 %62 to float, !dbg !23
  %244 = bitcast i32 %61 to float, !dbg !23
  %245 = bitcast i32 %60 to float, !dbg !23
  %246 = bitcast i32 %59 to float, !dbg !23
  %247 = bitcast i32 %58 to float, !dbg !23
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %256 = fmul float %215, %248, !dbg !32
  %257 = fmul float %211, %249, !dbg !32
  %258 = fmul float %207, %250, !dbg !32
  %259 = fmul float %203, %251, !dbg !32
  %260 = fmul float %199, %252, !dbg !32
  %261 = fmul float %195, %253, !dbg !32
  %262 = fmul float %191, %254, !dbg !32
  %263 = fmul float %187, %255, !dbg !32
  %264 = fmul float %256, %247, !dbg !33
  %265 = fmul float %257, %246, !dbg !33
  %266 = fmul float %258, %245, !dbg !33
  %267 = fmul float %259, %244, !dbg !33
  %268 = fmul float %260, %243, !dbg !33
  %269 = fmul float %261, %242, !dbg !33
  %270 = fmul float %262, %241, !dbg !33
  %271 = fmul float %263, %240, !dbg !33
  %272 = fadd float %264, %239, !dbg !34
  %273 = fadd float %265, %238, !dbg !34
  %274 = fadd float %266, %237, !dbg !34
  %275 = fadd float %267, %236, !dbg !34
  %276 = fadd float %268, %235, !dbg !34
  %277 = fadd float %269, %234, !dbg !34
  %278 = fadd float %270, %233, !dbg !34
  %279 = fadd float %271, %232, !dbg !34
  %280 = fsub float 0.000000e+00, %272, !dbg !35
  %281 = fsub float 0.000000e+00, %273, !dbg !35
  %282 = fsub float 0.000000e+00, %274, !dbg !35
  %283 = fsub float 0.000000e+00, %275, !dbg !35
  %284 = fsub float 0.000000e+00, %276, !dbg !35
  %285 = fsub float 0.000000e+00, %277, !dbg !35
  %286 = fsub float 0.000000e+00, %278, !dbg !35
  %287 = fsub float 0.000000e+00, %279, !dbg !35
  %288 = fmul float %280, 0x3FF7154760000000, !dbg !39
  %289 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %288) #3, !dbg !39
  %290 = fmul float %281, 0x3FF7154760000000, !dbg !39
  %291 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %290) #3, !dbg !39
  %292 = fmul float %282, 0x3FF7154760000000, !dbg !39
  %293 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #3, !dbg !39
  %294 = fmul float %283, 0x3FF7154760000000, !dbg !39
  %295 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %294) #3, !dbg !39
  %296 = fmul float %284, 0x3FF7154760000000, !dbg !39
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %296) #3, !dbg !39
  %298 = fmul float %285, 0x3FF7154760000000, !dbg !39
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %298) #3, !dbg !39
  %300 = fmul float %286, 0x3FF7154760000000, !dbg !39
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %300) #3, !dbg !39
  %302 = fmul float %287, 0x3FF7154760000000, !dbg !39
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %302) #3, !dbg !39
  %304 = fadd float %289, 1.000000e+00, !dbg !40
  %305 = fadd float %291, 1.000000e+00, !dbg !40
  %306 = fadd float %293, 1.000000e+00, !dbg !40
  %307 = fadd float %295, 1.000000e+00, !dbg !40
  %308 = fadd float %297, 1.000000e+00, !dbg !40
  %309 = fadd float %299, 1.000000e+00, !dbg !40
  %310 = fadd float %301, 1.000000e+00, !dbg !40
  %311 = fadd float %303, 1.000000e+00, !dbg !40
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %304) #3, !dbg !41
  %313 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %305) #3, !dbg !41
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %306) #3, !dbg !41
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %307) #3, !dbg !41
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %308) #3, !dbg !41
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %309) #3, !dbg !41
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %310) #3, !dbg !41
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %311) #3, !dbg !41
  %320 = fmul float %272, %312, !dbg !42
  %321 = fmul float %273, %313, !dbg !42
  %322 = fmul float %274, %314, !dbg !42
  %323 = fmul float %275, %315, !dbg !42
  %324 = fmul float %276, %316, !dbg !42
  %325 = fmul float %277, %317, !dbg !42
  %326 = fmul float %278, %318, !dbg !42
  %327 = fmul float %279, %319, !dbg !42
  %328 = fadd float %320, %231, !dbg !43
  %329 = fadd float %321, %229, !dbg !43
  %330 = fadd float %322, %227, !dbg !43
  %331 = fadd float %323, %225, !dbg !43
  %332 = fadd float %324, %223, !dbg !43
  %333 = fadd float %325, %221, !dbg !43
  %334 = fadd float %326, %219, !dbg !43
  %335 = fadd float %327, %217, !dbg !43
  %336 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !44
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !44
  %338 = bitcast float %328 to i32, !dbg !45
  %339 = bitcast float %329 to i32, !dbg !45
  %340 = bitcast float %330 to i32, !dbg !45
  %341 = bitcast float %331 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %338, i32 %339, i32 %340, i32 %341, ptr addrspace(1) %336, i1 true) #3, !dbg !45
  %342 = bitcast float %332 to i32, !dbg !45
  %343 = bitcast float %333 to i32, !dbg !45
  %344 = bitcast float %334 to i32, !dbg !45
  %345 = bitcast float %335 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %343, i32 %344, i32 %345, ptr addrspace(1) %337, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmjg5yyom7k6evig3uxgo77i2n6aokugii4jy5snkcfhxkamoz2.py", directory: "inductor_cache/vm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_silu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 47, column: 30, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = !DILocation(line: 43, column: 23, scope: !7)
!39 = !DILocation(line: 47, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 47, column: 20, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 47, column: 16, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 28, scope: !7)
!45 = !DILocation(line: 46, column: 40, scope: !7)
!46 = !DILocation(line: 46, column: 4, scope: !7)
