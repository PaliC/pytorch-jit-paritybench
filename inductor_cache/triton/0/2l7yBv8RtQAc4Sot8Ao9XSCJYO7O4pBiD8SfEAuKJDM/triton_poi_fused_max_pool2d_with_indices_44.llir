; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 16, !dbg !14
  %16 = icmp slt i32 %14, 16, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = or disjoint i32 %18, %12, !dbg !17
  %20 = or disjoint i32 %18, %10, !dbg !17
  %21 = icmp slt i32 %19, 1088, !dbg !18
  %22 = icmp slt i32 %20, 1088, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %23 = sdiv i32 %.frozen, 2, !dbg !19
  %24 = mul i32 %23, 2, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = srem i32 %23, 2, !dbg !21
  %26 = sdiv i32 %13, 4, !dbg !22
  %.frozen9 = freeze i32 %14, !dbg !22
  %27 = sdiv i32 %.frozen9, 4, !dbg !22
  %28 = mul i32 %27, 4, !dbg !23
  %.decomposed10 = sub i32 %.frozen9, %28, !dbg !23
  %29 = mul nsw i32 %.decomposed, 2176, !dbg !24
  %30 = add i32 %29, %19, !dbg !25
  %31 = mul nsw i32 %25, 13056, !dbg !26
  %32 = mul i32 %26, 39168, !dbg !27
  %33 = add i32 %30, %32, !dbg !28
  %34 = add i32 %33, %31, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !30
  %37 = and i1 %15, %21, !dbg !31
  %38 = and i1 %16, %22, !dbg !31
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %37) #2, !dbg !32
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !32
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !32
  %42 = add i32 %30, 1088, !dbg !33
  %43 = add i32 %42, %32, !dbg !34
  %44 = add i32 %43, %31, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !36
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %37) #2, !dbg !37
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !37
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !37
  %50 = add i32 %30, 2176, !dbg !38
  %51 = add i32 %50, %32, !dbg !39
  %52 = add i32 %51, %31, !dbg !40
  %53 = sext i32 %52 to i64, !dbg !41
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !41
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %37) #2, !dbg !42
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !42
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !42
  %58 = add i32 %30, 6528, !dbg !43
  %59 = add i32 %58, %32, !dbg !44
  %60 = add i32 %59, %31, !dbg !45
  %61 = sext i32 %60 to i64, !dbg !46
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !46
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %37) #2, !dbg !47
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !47
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !47
  %66 = add i32 %30, 7616, !dbg !48
  %67 = add i32 %66, %32, !dbg !49
  %68 = add i32 %67, %31, !dbg !50
  %69 = sext i32 %68 to i64, !dbg !51
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !51
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %70, i1 %37) #2, !dbg !52
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !52
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !52
  %74 = add i32 %30, 8704, !dbg !53
  %75 = add i32 %74, %32, !dbg !54
  %76 = add i32 %75, %31, !dbg !55
  %77 = sext i32 %76 to i64, !dbg !56
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !56
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %78, i1 %37) #2, !dbg !57
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !57
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !57
  %82 = add i32 %30, 13056, !dbg !58
  %83 = add i32 %82, %32, !dbg !59
  %84 = add i32 %83, %31, !dbg !60
  %85 = sext i32 %84 to i64, !dbg !61
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !61
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %86, i1 %37) #2, !dbg !62
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !62
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !62
  %90 = add i32 %30, 14144, !dbg !63
  %91 = add i32 %90, %32, !dbg !64
  %92 = add i32 %91, %31, !dbg !65
  %93 = sext i32 %92 to i64, !dbg !66
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !66
  %95 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %94, i1 %37) #2, !dbg !67
  %96 = extractvalue { i32, i32 } %95, 0, !dbg !67
  %97 = extractvalue { i32, i32 } %95, 1, !dbg !67
  %98 = add i32 %30, 15232, !dbg !68
  %99 = add i32 %98, %32, !dbg !69
  %100 = add i32 %99, %31, !dbg !70
  %101 = sext i32 %100 to i64, !dbg !71
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !71
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %102, i1 %37) #2, !dbg !72
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !72
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !72
  %106 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !32
  %107 = insertelement <2 x i32> %106, i32 %41, i64 1, !dbg !32
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !32
  %109 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !37
  %110 = insertelement <2 x i32> %109, i32 %49, i64 1, !dbg !37
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !37
  %112 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !42
  %113 = insertelement <2 x i32> %112, i32 %57, i64 1, !dbg !42
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !42
  %115 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !47
  %116 = insertelement <2 x i32> %115, i32 %65, i64 1, !dbg !47
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !47
  %118 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !52
  %119 = insertelement <2 x i32> %118, i32 %73, i64 1, !dbg !52
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !52
  %121 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !57
  %122 = insertelement <2 x i32> %121, i32 %81, i64 1, !dbg !57
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !57
  %124 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !62
  %125 = insertelement <2 x i32> %124, i32 %89, i64 1, !dbg !62
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !62
  %127 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !67
  %128 = insertelement <2 x i32> %127, i32 %97, i64 1, !dbg !67
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !67
  %130 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !72
  %131 = insertelement <2 x i32> %130, i32 %105, i64 1, !dbg !72
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !72
  %133 = fcmp ogt <2 x float> %111, %108, !dbg !73
  %134 = fcmp uno <2 x float> %111, zeroinitializer, !dbg !77
  %135 = or <2 x i1> %133, %134, !dbg !78
  %.v = select <2 x i1> %135, <2 x i32> %110, <2 x i32> %107, !dbg !79
  %136 = bitcast <2 x i32> %.v to <2 x float>, !dbg !79
  %137 = fcmp olt <2 x float> %136, %114, !dbg !80
  %138 = fcmp uno <2 x float> %114, zeroinitializer, !dbg !82
  %139 = or <2 x i1> %138, %137, !dbg !83
  %.v3 = select <2 x i1> %139, <2 x i32> %113, <2 x i32> %.v, !dbg !84
  %140 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !84
  %141 = fcmp olt <2 x float> %140, %117, !dbg !85
  %142 = fcmp uno <2 x float> %117, zeroinitializer, !dbg !87
  %143 = or <2 x i1> %142, %141, !dbg !88
  %.v4 = select <2 x i1> %143, <2 x i32> %116, <2 x i32> %.v3, !dbg !89
  %144 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !89
  %145 = fcmp olt <2 x float> %144, %120, !dbg !90
  %146 = fcmp uno <2 x float> %120, zeroinitializer, !dbg !92
  %147 = or <2 x i1> %146, %145, !dbg !93
  %.v5 = select <2 x i1> %147, <2 x i32> %119, <2 x i32> %.v4, !dbg !94
  %148 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !94
  %149 = fcmp olt <2 x float> %148, %123, !dbg !95
  %150 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !97
  %151 = or <2 x i1> %150, %149, !dbg !98
  %.v6 = select <2 x i1> %151, <2 x i32> %122, <2 x i32> %.v5, !dbg !99
  %152 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !99
  %153 = fcmp olt <2 x float> %152, %126, !dbg !100
  %154 = fcmp uno <2 x float> %126, zeroinitializer, !dbg !102
  %155 = or <2 x i1> %154, %153, !dbg !103
  %.v7 = select <2 x i1> %155, <2 x i32> %125, <2 x i32> %.v6, !dbg !104
  %156 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !104
  %157 = fcmp olt <2 x float> %156, %129, !dbg !105
  %158 = fcmp uno <2 x float> %129, zeroinitializer, !dbg !107
  %159 = or <2 x i1> %158, %157, !dbg !108
  %.v8 = select <2 x i1> %159, <2 x i32> %128, <2 x i32> %.v7, !dbg !109
  %160 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !109
  %161 = fcmp olt <2 x float> %160, %132, !dbg !110
  %162 = bitcast i32 %104 to float, !dbg !112
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !112
  %164 = bitcast i32 %105 to float, !dbg !112
  %165 = fcmp uno float %164, 0.000000e+00, !dbg !112
  %166 = extractelement <2 x i1> %161, i64 0, !dbg !113
  %167 = or i1 %163, %166, !dbg !113
  %168 = extractelement <2 x i1> %161, i64 1, !dbg !113
  %169 = or i1 %165, %168, !dbg !113
  %170 = zext <2 x i1> %133 to <2 x i8>, !dbg !114
  %171 = select <2 x i1> %137, <2 x i8> splat (i8 2), <2 x i8> %170, !dbg !115
  %172 = select <2 x i1> %141, <2 x i8> splat (i8 3), <2 x i8> %171, !dbg !116
  %173 = select <2 x i1> %145, <2 x i8> splat (i8 4), <2 x i8> %172, !dbg !117
  %174 = select <2 x i1> %149, <2 x i8> splat (i8 5), <2 x i8> %173, !dbg !118
  %175 = select <2 x i1> %153, <2 x i8> splat (i8 6), <2 x i8> %174, !dbg !119
  %176 = select <2 x i1> %157, <2 x i8> splat (i8 7), <2 x i8> %175, !dbg !120
  %177 = select <2 x i1> %161, <2 x i8> splat (i8 8), <2 x i8> %176, !dbg !121
  %178 = shl i32 %20, 2, !dbg !122
  %179 = add i32 %178, %.decomposed10, !dbg !123
  %180 = mul i32 %27, 8320, !dbg !124
  %181 = add i32 %179, %180, !dbg !125
  %182 = sext i32 %181 to i64, !dbg !126
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !126
  %184 = shl i32 %8, 5, !dbg !127
  %185 = and i32 %184, 224, !dbg !127
  %186 = or disjoint i32 %185, %10, !dbg !127
  %187 = and i32 %11, 254, !dbg !127
  %188 = lshr exact i32 %185, 1, !dbg !127
  %189 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %188, !dbg !127
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %186, !dbg !127
  %191 = extractelement <2 x i32> %.v8, i64 0, !dbg !127
  %192 = select i1 %167, i32 %104, i32 %191, !dbg !128
  %193 = insertelement <1 x i32> poison, i32 %192, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %193, i1 true) #2, !dbg !127
  %194 = or disjoint i32 %186, 16, !dbg !127
  %195 = lshr i32 %194, 3, !dbg !127
  %196 = and i32 %195, 30, !dbg !127
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !127
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %194, !dbg !127
  %199 = extractelement <2 x i32> %.v8, i64 1, !dbg !127
  %200 = select i1 %169, i32 %105, i32 %199, !dbg !128
  %201 = insertelement <1 x i32> poison, i32 %200, i64 0, !dbg !127
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %201, i1 true) #2, !dbg !127
  tail call void @llvm.nvvm.barrier0(), !dbg !127
  %202 = lshr i32 %11, 3, !dbg !127
  %203 = and i32 %202, 30, !dbg !127
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !127
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %187, !dbg !127
  %.extract = load i32, ptr addrspace(3) %205, align 8, !dbg !127
  %206 = getelementptr inbounds i8, ptr addrspace(3) %205, i32 4, !dbg !127
  %.extract2 = load i32, ptr addrspace(3) %206, align 4, !dbg !127
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %183, i1 %38) #2, !dbg !127
  %207 = mul i32 %13, 1088, !dbg !129
  %208 = add i32 %19, %207, !dbg !130
  %209 = sext i32 %208 to i64, !dbg !131
  %210 = getelementptr i8, ptr addrspace(1) %2, i64 %209, !dbg !131
  %211 = bitcast <2 x i8> %177 to i16, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %211, ptr addrspace(1) %210, i1 %37) #2, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caplh4qdioeurhnwun4r24hq6iy54thprjhktihkiyowneggu2nu.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_44", linkageName: "triton_poi_fused_max_pool2d_with_indices_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 40, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 62, scope: !7)
!28 = !DILocation(line: 34, column: 45, scope: !7)
!29 = !DILocation(line: 34, column: 56, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 75, scope: !7)
!32 = !DILocation(line: 34, column: 67, scope: !7)
!33 = !DILocation(line: 35, column: 42, scope: !7)
!34 = !DILocation(line: 35, column: 52, scope: !7)
!35 = !DILocation(line: 35, column: 63, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 74, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 52, scope: !7)
!40 = !DILocation(line: 36, column: 63, scope: !7)
!41 = !DILocation(line: 36, column: 30, scope: !7)
!42 = !DILocation(line: 36, column: 74, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 37, column: 52, scope: !7)
!45 = !DILocation(line: 37, column: 63, scope: !7)
!46 = !DILocation(line: 37, column: 30, scope: !7)
!47 = !DILocation(line: 37, column: 74, scope: !7)
!48 = !DILocation(line: 38, column: 42, scope: !7)
!49 = !DILocation(line: 38, column: 52, scope: !7)
!50 = !DILocation(line: 38, column: 63, scope: !7)
!51 = !DILocation(line: 38, column: 30, scope: !7)
!52 = !DILocation(line: 38, column: 74, scope: !7)
!53 = !DILocation(line: 39, column: 42, scope: !7)
!54 = !DILocation(line: 39, column: 52, scope: !7)
!55 = !DILocation(line: 39, column: 63, scope: !7)
!56 = !DILocation(line: 39, column: 30, scope: !7)
!57 = !DILocation(line: 39, column: 74, scope: !7)
!58 = !DILocation(line: 40, column: 44, scope: !7)
!59 = !DILocation(line: 40, column: 54, scope: !7)
!60 = !DILocation(line: 40, column: 65, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 76, scope: !7)
!63 = !DILocation(line: 41, column: 44, scope: !7)
!64 = !DILocation(line: 41, column: 54, scope: !7)
!65 = !DILocation(line: 41, column: 65, scope: !7)
!66 = !DILocation(line: 41, column: 31, scope: !7)
!67 = !DILocation(line: 41, column: 76, scope: !7)
!68 = !DILocation(line: 42, column: 44, scope: !7)
!69 = !DILocation(line: 42, column: 54, scope: !7)
!70 = !DILocation(line: 42, column: 65, scope: !7)
!71 = !DILocation(line: 42, column: 31, scope: !7)
!72 = !DILocation(line: 42, column: 76, scope: !7)
!73 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !76)
!74 = distinct !DILexicalBlockFile(scope: !7, file: !75, discriminator: 0)
!75 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!76 = !DILocation(line: 43, column: 40, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !81)
!81 = !DILocation(line: 44, column: 40, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !86)
!86 = !DILocation(line: 45, column: 40, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !91)
!91 = !DILocation(line: 46, column: 40, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !96)
!96 = !DILocation(line: 47, column: 41, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !101)
!101 = !DILocation(line: 48, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !101)
!104 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !101)
!105 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !106)
!106 = !DILocation(line: 49, column: 42, scope: !7)
!107 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !106)
!108 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !106)
!109 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !106)
!110 = !DILocation(line: 118, column: 15, scope: !74, inlinedAt: !111)
!111 = !DILocation(line: 50, column: 42, scope: !7)
!112 = !DILocation(line: 120, column: 21, scope: !74, inlinedAt: !111)
!113 = !DILocation(line: 120, column: 16, scope: !74, inlinedAt: !111)
!114 = !DILocation(line: 54, column: 35, scope: !7)
!115 = !DILocation(line: 57, column: 35, scope: !7)
!116 = !DILocation(line: 60, column: 35, scope: !7)
!117 = !DILocation(line: 63, column: 35, scope: !7)
!118 = !DILocation(line: 66, column: 35, scope: !7)
!119 = !DILocation(line: 69, column: 35, scope: !7)
!120 = !DILocation(line: 72, column: 35, scope: !7)
!121 = !DILocation(line: 75, column: 35, scope: !7)
!122 = !DILocation(line: 76, column: 32, scope: !7)
!123 = !DILocation(line: 76, column: 30, scope: !7)
!124 = !DILocation(line: 76, column: 42, scope: !7)
!125 = !DILocation(line: 76, column: 37, scope: !7)
!126 = !DILocation(line: 76, column: 25, scope: !7)
!127 = !DILocation(line: 76, column: 54, scope: !7)
!128 = !DILocation(line: 121, column: 29, scope: !74, inlinedAt: !111)
!129 = !DILocation(line: 77, column: 35, scope: !7)
!130 = !DILocation(line: 77, column: 30, scope: !7)
!131 = !DILocation(line: 77, column: 25, scope: !7)
!132 = !DILocation(line: 77, column: 47, scope: !7)
!133 = !DILocation(line: 77, column: 4, scope: !7)
