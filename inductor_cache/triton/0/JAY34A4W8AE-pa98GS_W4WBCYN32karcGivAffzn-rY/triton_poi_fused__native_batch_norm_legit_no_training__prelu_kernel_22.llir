; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %13, 512, !dbg !12
  %18 = or disjoint i32 %13, 640, !dbg !12
  %19 = or disjoint i32 %13, 768, !dbg !12
  %20 = or disjoint i32 %13, 896, !dbg !12
  %21 = or disjoint i32 %11, %13, !dbg !13
  %22 = or disjoint i32 %11, %14, !dbg !13
  %23 = or disjoint i32 %11, %15, !dbg !13
  %24 = or disjoint i32 %11, %16, !dbg !13
  %25 = or disjoint i32 %11, %17, !dbg !13
  %26 = or disjoint i32 %11, %18, !dbg !13
  %27 = or disjoint i32 %11, %19, !dbg !13
  %28 = or disjoint i32 %11, %20, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %30 = icmp slt i32 %29, 131, !dbg !15
  %31 = mul i32 %21, 131, !dbg !16
  %32 = mul i32 %22, 131, !dbg !16
  %33 = mul i32 %23, 131, !dbg !16
  %34 = mul i32 %24, 131, !dbg !16
  %35 = mul i32 %25, 131, !dbg !16
  %36 = mul i32 %26, 131, !dbg !16
  %37 = mul i32 %27, 131, !dbg !16
  %38 = mul i32 %28, 131, !dbg !16
  %39 = add i32 %31, %29, !dbg !17
  %40 = add i32 %32, %29, !dbg !17
  %41 = add i32 %33, %29, !dbg !17
  %42 = add i32 %34, %29, !dbg !17
  %43 = add i32 %35, %29, !dbg !17
  %44 = add i32 %36, %29, !dbg !17
  %45 = add i32 %37, %29, !dbg !17
  %46 = add i32 %38, %29, !dbg !17
  %47 = sext i32 %39 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !18
  %49 = sext i32 %40 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !18
  %51 = sext i32 %41 to i64, !dbg !18
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !18
  %53 = sext i32 %42 to i64, !dbg !18
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !18
  %55 = sext i32 %43 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !18
  %57 = sext i32 %44 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !18
  %59 = sext i32 %45 to i64, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !18
  %61 = sext i32 %46 to i64, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !18
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %30) #4, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %30) #4, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %30) #4, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %30) #4, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %30) #4, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %30) #4, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %30) #4, !dbg !19
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %30) #4, !dbg !19
  %71 = sext i32 %29 to i64, !dbg !20
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !20
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %30) #4, !dbg !21
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %30) #4, !dbg !23
  %76 = bitcast i32 %75 to float, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %30) #4, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %30) #4, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %30) #4, !dbg !29
  %83 = fadd float %76, 0x3EE4F8B580000000, !dbg !30
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %84, 0, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %85, 0, !dbg !31
  br i1 %.not.i, label %91, label %86, !dbg !31

86:                                               ; preds = %9
  br i1 %.not1.i, label %89, label %87, !dbg !31

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

91:                                               ; preds = %9
  br i1 %.not1.i, label %94, label %92, !dbg !31

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !31
  %96 = insertelement <8 x i32> poison, i32 %70, i64 0, !dbg !19
  %97 = insertelement <8 x i32> %96, i32 %69, i64 1, !dbg !19
  %98 = insertelement <8 x i32> %97, i32 %68, i64 2, !dbg !19
  %99 = insertelement <8 x i32> %98, i32 %67, i64 3, !dbg !19
  %100 = insertelement <8 x i32> %99, i32 %66, i64 4, !dbg !19
  %101 = insertelement <8 x i32> %100, i32 %65, i64 5, !dbg !19
  %102 = insertelement <8 x i32> %101, i32 %64, i64 6, !dbg !19
  %103 = insertelement <8 x i32> %102, i32 %63, i64 7, !dbg !19
  %104 = bitcast <8 x i32> %103 to <8 x float>, !dbg !19
  %105 = bitcast i32 %82 to float, !dbg !29
  %106 = shl i32 %12, 2, !dbg !12
  %107 = and i32 %106, 508, !dbg !12
  %108 = or disjoint i32 %107, %11, !dbg !13
  %109 = or disjoint i32 %108, 512, !dbg !13
  %110 = sdiv i32 %109, 256, !dbg !32
  %.frozen = freeze i32 %108, !dbg !32
  %111 = sdiv i32 %.frozen, 256, !dbg !32
  %112 = mul i32 %111, 256, !dbg !33
  %.decomposed = sub i32 %.frozen, %112, !dbg !33
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %114 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !35
  %115 = bitcast <8 x i32> %114 to <8 x float>, !dbg !35
  %116 = shufflevector <8 x float> %115, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %117 = fsub <8 x float> %104, %116, !dbg !35
  %118 = insertelement <8 x float> poison, float %113, i64 0, !dbg !36
  %119 = shufflevector <8 x float> %118, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %120 = fmul <8 x float> %117, %119, !dbg !36
  %121 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !37
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !37
  %123 = shufflevector <8 x float> %122, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !37
  %124 = fmul <8 x float> %120, %123, !dbg !37
  %125 = insertelement <8 x i32> poison, i32 %80, i64 0, !dbg !38
  %126 = bitcast <8 x i32> %125 to <8 x float>, !dbg !38
  %127 = shufflevector <8 x float> %126, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %128 = fadd <8 x float> %124, %127, !dbg !38
  %129 = fcmp ogt <8 x float> %128, zeroinitializer, !dbg !39
  %130 = extractelement <8 x float> %128, i64 7, !dbg !40
  %131 = fmul float %130, %105, !dbg !41
  %132 = extractelement <8 x float> %128, i64 6, !dbg !40
  %133 = fmul float %132, %105, !dbg !41
  %134 = extractelement <8 x float> %128, i64 5, !dbg !40
  %135 = fmul float %134, %105, !dbg !41
  %136 = extractelement <8 x float> %128, i64 4, !dbg !40
  %137 = fmul float %136, %105, !dbg !41
  %138 = extractelement <8 x float> %128, i64 3, !dbg !40
  %139 = fmul float %138, %105, !dbg !41
  %140 = extractelement <8 x float> %128, i64 2, !dbg !40
  %141 = fmul float %140, %105, !dbg !41
  %142 = extractelement <8 x float> %128, i64 1, !dbg !40
  %143 = fmul float %142, %105, !dbg !41
  %144 = extractelement <8 x float> %128, i64 0, !dbg !40
  %145 = fmul float %144, %105, !dbg !41
  %146 = extractelement <8 x i1> %129, i64 7, !dbg !40
  %147 = select i1 %146, float %130, float %131, !dbg !40
  %148 = extractelement <8 x i1> %129, i64 6, !dbg !40
  %149 = select i1 %148, float %132, float %133, !dbg !40
  %150 = extractelement <8 x i1> %129, i64 5, !dbg !40
  %151 = select i1 %150, float %134, float %135, !dbg !40
  %152 = extractelement <8 x i1> %129, i64 4, !dbg !40
  %153 = select i1 %152, float %136, float %137, !dbg !40
  %154 = extractelement <8 x i1> %129, i64 3, !dbg !40
  %155 = select i1 %154, float %138, float %139, !dbg !40
  %156 = extractelement <8 x i1> %129, i64 2, !dbg !40
  %157 = select i1 %156, float %140, float %141, !dbg !40
  %158 = extractelement <8 x i1> %129, i64 1, !dbg !40
  %159 = select i1 %158, float %142, float %143, !dbg !40
  %160 = extractelement <8 x i1> %129, i64 0, !dbg !40
  %161 = select i1 %160, float %144, float %145, !dbg !40
  %162 = shl i32 %29, 8, !dbg !42
  %163 = add i32 %.decomposed, %162, !dbg !43
  %164 = mul i32 %111, 33536, !dbg !44
  %165 = mul i32 %110, 33536, !dbg !44
  %166 = add i32 %163, %164, !dbg !45
  %167 = add i32 %163, %165, !dbg !45
  %168 = sext i32 %166 to i64, !dbg !46
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %168, !dbg !46
  %170 = sext i32 %167 to i64, !dbg !46
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !46
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %173 = bitcast float %147 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #4, !dbg !47
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  %175 = bitcast float %149 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #4, !dbg !47
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %177 = bitcast float %151 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %177, i1 true) #4, !dbg !47
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !47
  %179 = bitcast float %153 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !47
  %181 = load <4 x i32>, ptr addrspace(3) %180, align 16, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %182 = bitcast float %155 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %182, i1 true) #4, !dbg !47
  %183 = bitcast float %157 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %183, i1 true) #4, !dbg !47
  %184 = bitcast float %159 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %176, <1 x i32> %184, i1 true) #4, !dbg !47
  %185 = bitcast float %161 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %185, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %186 = load <4 x i32>, ptr addrspace(3) %180, align 16, !dbg !47
  %.extract = extractelement <4 x i32> %181, i64 0, !dbg !47
  %.extract8 = extractelement <4 x i32> %181, i64 1, !dbg !47
  %.extract9 = extractelement <4 x i32> %181, i64 2, !dbg !47
  %.extract10 = extractelement <4 x i32> %181, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %169, i1 %30) #4, !dbg !47
  %.extract11 = extractelement <4 x i32> %186, i64 0, !dbg !47
  %.extract12 = extractelement <4 x i32> %186, i64 1, !dbg !47
  %.extract13 = extractelement <4 x i32> %186, i64 2, !dbg !47
  %.extract14 = extractelement <4 x i32> %186, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %171, i1 %30) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caprzmeyxnstor3taxev322jmu34u442jkilf3zykmu7pd2zt7yj.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 39, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 30, column: 19, scope: !7)
!34 = !DILocation(line: 43, column: 18, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 46, column: 19, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 53, column: 34, scope: !7)
!43 = !DILocation(line: 53, column: 30, scope: !7)
!44 = !DILocation(line: 53, column: 45, scope: !7)
!45 = !DILocation(line: 53, column: 39, scope: !7)
!46 = !DILocation(line: 53, column: 25, scope: !7)
!47 = !DILocation(line: 53, column: 57, scope: !7)
!48 = !DILocation(line: 53, column: 4, scope: !7)
