; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_mean_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 7, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = shl i32 %10, 1, !dbg !14
  %16 = and i32 %15, 14, !dbg !14
  %17 = srem i32 %14, 1024, !dbg !15
  %18 = shl i32 %14, 4, !dbg !16
  %19 = or disjoint i32 %18, %16, !dbg !17
  %20 = sext i32 %19 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !18
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !19
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = bitcast i32 %24 to float, !dbg !19
  %27 = sext i32 %17 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = fadd float %25, %31, !dbg !22
  %33 = fadd float %26, %31, !dbg !22
  %34 = fadd float %32, %33, !dbg !23
  %35 = bitcast float %34 to i32, !dbg !28
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !28
  %37 = bitcast i32 %36 to float, !dbg !28
  %38 = fadd float %34, %37, !dbg !23
  %39 = bitcast float %38 to i32, !dbg !28
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = fadd float %38, %41, !dbg !23
  %43 = bitcast float %42 to i32, !dbg !28
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = fadd float %42, %45, !dbg !23
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %48 = bitcast float %46 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %50 = load float, ptr addrspace(3) %49, align 4, !dbg !29
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 1.600000e+01) #5, !dbg !29
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 1.600000e+01) #5, !dbg !29
  %53 = fsub float %32, %52, !dbg !30
  %54 = fsub float %33, %52, !dbg !30
  %55 = fmul float %53, %53, !dbg !31
  %56 = fmul float %54, %54, !dbg !31
  %57 = fadd float %55, %56, !dbg !32
  %58 = bitcast float %57 to i32, !dbg !34
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 4, i32 31), !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = fadd float %57, %60, !dbg !32
  %62 = bitcast float %61 to i32, !dbg !34
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 2, i32 31), !dbg !34
  %64 = bitcast i32 %63 to float, !dbg !34
  %65 = fadd float %61, %64, !dbg !32
  %66 = bitcast float %65 to i32, !dbg !34
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 1, i32 31), !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = fadd float %65, %68, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %70 = bitcast float %69 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %70, i1 true) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %71 = load float, ptr addrspace(3) %49, align 4, !dbg !35
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float 1.600000e+01) #5, !dbg !36
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float 1.600000e+01) #5, !dbg !36
  %74 = fadd float %72, 0x3EE4F8B580000000, !dbg !37
  %75 = fadd float %73, 0x3EE4F8B580000000, !dbg !37
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i = icmp eq i32 %76, 0, !dbg !35
  br i1 %.not.i, label %79, label %77, !dbg !35

77:                                               ; preds = %7
  %78 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %74), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

79:                                               ; preds = %7
  %80 = tail call float @llvm.nvvm.rsqrt.approx.f(float %74), !dbg !35
  br label %__nv_rsqrtf.exit, !dbg !35

__nv_rsqrtf.exit:                                 ; preds = %77, %79
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], !dbg !35
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !35
  %.not.i4 = icmp eq i32 %82, 0, !dbg !35
  br i1 %.not.i4, label %85, label %83, !dbg !35

83:                                               ; preds = %__nv_rsqrtf.exit
  %84 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %75), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

85:                                               ; preds = %__nv_rsqrtf.exit
  %86 = tail call float @llvm.nvvm.rsqrt.approx.f(float %75), !dbg !35
  br label %__nv_rsqrtf.exit6, !dbg !35

__nv_rsqrtf.exit6:                                ; preds = %83, %85
  %.0.i5 = phi float [ %84, %83 ], [ %86, %85 ], !dbg !35
  %87 = or disjoint i32 %9, %13, !dbg !13
  %88 = fmul float %53, %.0.i5, !dbg !38
  %89 = fmul float %54, %.0.i5, !dbg !38
  %90 = fadd float %88, %89, !dbg !39
  %91 = bitcast float %90 to i32, !dbg !41
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !41
  %93 = bitcast i32 %92 to float, !dbg !41
  %94 = fadd float %90, %93, !dbg !39
  %95 = bitcast float %94 to i32, !dbg !41
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !41
  %97 = bitcast i32 %96 to float, !dbg !41
  %98 = fadd float %94, %97, !dbg !39
  %99 = bitcast float %98 to i32, !dbg !41
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !41
  %101 = bitcast i32 %100 to float, !dbg !41
  %102 = fadd float %98, %101, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %103 = bitcast float %102 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %103, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %104 = load float, ptr addrspace(3) %49, align 4, !dbg !42
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 1.600000e+01) #5, !dbg !42
  %106 = bitcast float %32 to i32, !dbg !43
  %107 = bitcast float %33 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %21, i1 true) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %108 = sext i32 %87 to i64, !dbg !45
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !45
  %110 = and i32 %10, 56, !dbg !46
  %111 = icmp eq i32 %110, 0, !dbg !46
  %112 = bitcast float %.0.i to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %109, i1 %111) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !48
  %114 = bitcast float %105 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %114, ptr addrspace(1) %113, i1 %111) #5, !dbg !49
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %108, !dbg !50
  %116 = bitcast float %51 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %115, i1 %111) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqre2r7c5ic6nk7cusb7fvguymgf62c5dr4nizcwxiqyjh5yiau.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_31, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_mean_31, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_mean_31", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_mean_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 42, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 37, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 40, column: 19, scope: !7)
!30 = !DILocation(line: 41, column: 19, scope: !7)
!31 = !DILocation(line: 42, column: 20, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !33)
!33 = !DILocation(line: 44, column: 26, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !33)
!35 = !DILocation(line: 49, column: 28, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !40)
!40 = !DILocation(line: 53, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !40)
!42 = !DILocation(line: 54, column: 20, scope: !7)
!43 = !DILocation(line: 55, column: 47, scope: !7)
!44 = !DILocation(line: 56, column: 4, scope: !7)
!45 = !DILocation(line: 57, column: 28, scope: !7)
!46 = !DILocation(line: 57, column: 40, scope: !7)
!47 = !DILocation(line: 58, column: 4, scope: !7)
!48 = !DILocation(line: 59, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 40, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
