; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %19 = or disjoint i32 %15, 512, !dbg !13
  %20 = or disjoint i32 %15, 513, !dbg !13
  %21 = or disjoint i32 %15, 514, !dbg !13
  %22 = or disjoint i32 %15, 515, !dbg !13
  %23 = srem i32 %16, 104, !dbg !14
  %24 = srem i32 %18, 104, !dbg !14
  %25 = srem i32 %20, 104, !dbg !14
  %26 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !14
  %27 = insertelement <4 x i32> %26, i32 %19, i64 1, !dbg !14
  %28 = insertelement <4 x i32> %27, i32 %17, i64 2, !dbg !14
  %29 = insertelement <4 x i32> %28, i32 %15, i64 3, !dbg !14
  %30 = srem <4 x i32> %29, splat (i32 104), !dbg !14
  %31 = srem i32 %22, 104, !dbg !14
  %32 = sdiv i32 %15, 104, !dbg !15
  %33 = sdiv i32 %19, 104, !dbg !15
  %34 = srem i32 %32, 256, !dbg !16
  %35 = srem i32 %33, 256, !dbg !16
  %36 = sdiv i32 %15, 26624, !dbg !17
  %37 = sdiv i32 %19, 26624, !dbg !17
  %38 = extractelement <4 x i32> %30, i64 2, !dbg !18
  %39 = icmp slt i32 %38, 78, !dbg !19
  %40 = extractelement <4 x i32> %30, i64 0, !dbg !18
  %41 = icmp slt i32 %40, 78, !dbg !19
  %42 = extractelement <4 x i32> %30, i64 3, !dbg !20
  %43 = icmp slt i32 %42, 52, !dbg !21
  %44 = extractelement <4 x i32> %30, i64 1, !dbg !20
  %45 = icmp slt i32 %44, 52, !dbg !21
  %46 = and i1 %39, %43, !dbg !22
  %47 = and i1 %45, %41, !dbg !22
  %48 = shl nsw i32 %42, 8, !dbg !18
  %49 = shl nsw i32 %23, 8, !dbg !18
  %50 = shl nsw i32 %38, 8, !dbg !18
  %51 = shl nsw i32 %24, 8, !dbg !18
  %52 = shl nsw i32 %44, 8, !dbg !18
  %53 = shl nsw i32 %25, 8, !dbg !18
  %54 = shl nsw i32 %40, 8, !dbg !18
  %55 = shl nsw i32 %31, 8, !dbg !18
  %56 = add nsw i32 %34, %48, !dbg !23
  %57 = add nsw i32 %34, %49, !dbg !23
  %58 = add nsw i32 %34, %50, !dbg !23
  %59 = add nsw i32 %34, %51, !dbg !23
  %60 = add nsw i32 %35, %52, !dbg !23
  %61 = add nsw i32 %35, %53, !dbg !23
  %62 = add nsw i32 %35, %54, !dbg !23
  %63 = add nsw i32 %35, %55, !dbg !23
  %64 = mul nsw i32 %36, 13312, !dbg !24
  %65 = mul nsw i32 %37, 13312, !dbg !24
  %66 = add nsw i32 %56, %64, !dbg !25
  %67 = add nsw i32 %57, %64, !dbg !25
  %68 = add nsw i32 %58, %64, !dbg !25
  %69 = add nsw i32 %59, %64, !dbg !25
  %70 = add nsw i32 %60, %65, !dbg !25
  %71 = add nsw i32 %61, %65, !dbg !25
  %72 = add nsw i32 %62, %65, !dbg !25
  %73 = add nsw i32 %63, %65, !dbg !25
  %74 = sext i32 %66 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !26
  %76 = sext i32 %67 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !26
  %78 = sext i32 %68 to i64, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !26
  %80 = sext i32 %69 to i64, !dbg !26
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !26
  %82 = sext i32 %70 to i64, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !26
  %84 = sext i32 %71 to i64, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !26
  %86 = sext i32 %72 to i64, !dbg !26
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !26
  %88 = sext i32 %73 to i64, !dbg !26
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !26
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %43, i32 0, i1 %43) #3, !dbg !27
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %43, i32 0, i1 %43) #3, !dbg !27
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %46, i32 0, i1 %46) #3, !dbg !27
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %46, i32 0, i1 %46) #3, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %45, i32 0, i1 %45) #3, !dbg !27
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %45, i32 0, i1 %45) #3, !dbg !27
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %47, i32 0, i1 %47) #3, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %47, i32 0, i1 %47) #3, !dbg !27
  %98 = icmp sgt i32 %42, 51, !dbg !28
  %99 = icmp sgt i32 %44, 51, !dbg !28
  %100 = add nsw i32 %42, -52, !dbg !20
  %101 = icmp ult i32 %100, 26, !dbg !20
  %102 = and i1 %39, %98, !dbg !20
  %103 = add nsw i32 %44, -52, !dbg !20
  %104 = icmp ult i32 %103, 26, !dbg !20
  %105 = and i1 %99, %41, !dbg !20
  %106 = mul nsw i32 %32, 26, !dbg !29
  %107 = mul nsw i32 %33, 26, !dbg !29
  %108 = add nsw i32 %38, -52, !dbg !30
  %109 = add nsw i32 %40, -52, !dbg !30
  %110 = add nsw i32 %106, %100, !dbg !31
  %111 = add nsw i32 %106, %108, !dbg !31
  %112 = add nsw i32 %107, %103, !dbg !31
  %113 = add nsw i32 %107, %109, !dbg !31
  %114 = sext i32 %110 to i64, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !32
  %116 = sext i32 %111 to i64, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !32
  %118 = sext i32 %112 to i64, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !32
  %120 = sext i32 %113 to i64, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !32
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !33
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %117, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !33
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %119, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !33
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !33
  %126 = sext i32 %100 to i64, !dbg !34
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !34
  %128 = sext i32 %108 to i64, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !34
  %130 = sext i32 %103 to i64, !dbg !34
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !34
  %132 = sext i32 %109 to i64, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !34
  %134 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !35
  %135 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %129, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !35
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %131, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !35
  %137 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %133, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !35
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !36
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !36
  %141 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !36
  %142 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %138, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !37
  %143 = extractvalue { i32, i32 } %142, 0, !dbg !37
  %144 = extractvalue { i32, i32 } %142, 1, !dbg !37
  %145 = bitcast i32 %143 to float, !dbg !37
  %146 = bitcast i32 %144 to float, !dbg !37
  %147 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %139, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !37
  %148 = extractvalue { i32, i32 } %147, 0, !dbg !37
  %149 = extractvalue { i32, i32 } %147, 1, !dbg !37
  %150 = bitcast i32 %148 to float, !dbg !37
  %151 = bitcast i32 %149 to float, !dbg !37
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %140, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !37
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !37
  %154 = extractvalue { i32, i32 } %152, 1, !dbg !37
  %155 = bitcast i32 %153 to float, !dbg !37
  %156 = bitcast i32 %154 to float, !dbg !37
  %157 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %141, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !37
  %158 = extractvalue { i32, i32 } %157, 0, !dbg !37
  %159 = extractvalue { i32, i32 } %157, 1, !dbg !37
  %160 = bitcast i32 %158 to float, !dbg !37
  %161 = bitcast i32 %159 to float, !dbg !37
  %162 = fadd float %145, 0x3EE4F8B580000000, !dbg !38
  %163 = fadd float %146, 0x3EE4F8B580000000, !dbg !38
  %164 = fadd float %150, 0x3EE4F8B580000000, !dbg !38
  %165 = fadd float %151, 0x3EE4F8B580000000, !dbg !38
  %166 = fadd float %155, 0x3EE4F8B580000000, !dbg !38
  %167 = fadd float %156, 0x3EE4F8B580000000, !dbg !38
  %168 = fadd float %160, 0x3EE4F8B580000000, !dbg !38
  %169 = fadd float %161, 0x3EE4F8B580000000, !dbg !38
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %170, 0, !dbg !39
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %171, 0, !dbg !39
  br i1 %.not.i, label %177, label %172, !dbg !39

172:                                              ; preds = %9
  br i1 %.not1.i, label %175, label %173, !dbg !39

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

177:                                              ; preds = %9
  br i1 %.not1.i, label %180, label %178, !dbg !39

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %173, %175, %178, %180
  %.0.i = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !39
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %182, 0, !dbg !39
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %183, 0, !dbg !39
  br i1 %.not.i1, label %189, label %184, !dbg !39

184:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %187, label %185, !dbg !39

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

189:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %192, label %190, !dbg !39

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %185, %187, %190, %192
  %.0.i3 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !39
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i6 = icmp eq i32 %194, 0, !dbg !39
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i9 = icmp eq i32 %195, 0, !dbg !39
  br i1 %.not.i6, label %201, label %196, !dbg !39

196:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %199, label %197, !dbg !39

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

201:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %204, label %202, !dbg !39

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #3, !dbg !39
  br label %__nv_sqrtf.exit10, !dbg !39

__nv_sqrtf.exit10:                                ; preds = %197, %199, %202, %204
  %.0.i8 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !39
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i11 = icmp eq i32 %206, 0, !dbg !39
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i14 = icmp eq i32 %207, 0, !dbg !39
  br i1 %.not.i11, label %213, label %208, !dbg !39

208:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %211, label %209, !dbg !39

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

213:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %216, label %214, !dbg !39

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !39
  br label %__nv_sqrtf.exit15, !dbg !39

__nv_sqrtf.exit15:                                ; preds = %209, %211, %214, %216
  %.0.i13 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !39
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i16 = icmp eq i32 %218, 0, !dbg !39
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i19 = icmp eq i32 %219, 0, !dbg !39
  br i1 %.not.i16, label %225, label %220, !dbg !39

220:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %223, label %221, !dbg !39

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

225:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %228, label %226, !dbg !39

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !39
  br label %__nv_sqrtf.exit20, !dbg !39

__nv_sqrtf.exit20:                                ; preds = %221, %223, %226, %228
  %.0.i18 = phi float [ %222, %221 ], [ %224, %223 ], [ %227, %226 ], [ %229, %228 ], !dbg !39
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i21 = icmp eq i32 %230, 0, !dbg !39
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i24 = icmp eq i32 %231, 0, !dbg !39
  br i1 %.not.i21, label %237, label %232, !dbg !39

232:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %235, label %233, !dbg !39

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

237:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %240, label %238, !dbg !39

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !39
  br label %__nv_sqrtf.exit25, !dbg !39

__nv_sqrtf.exit25:                                ; preds = %233, %235, %238, %240
  %.0.i23 = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !39
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i26 = icmp eq i32 %242, 0, !dbg !39
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i29 = icmp eq i32 %243, 0, !dbg !39
  br i1 %.not.i26, label %249, label %244, !dbg !39

244:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %247, label %245, !dbg !39

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

249:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %252, label %250, !dbg !39

250:                                              ; preds = %249
  %251 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

252:                                              ; preds = %249
  %253 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !39
  br label %__nv_sqrtf.exit30, !dbg !39

__nv_sqrtf.exit30:                                ; preds = %245, %247, %250, %252
  %.0.i28 = phi float [ %246, %245 ], [ %248, %247 ], [ %251, %250 ], [ %253, %252 ], !dbg !39
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i31 = icmp eq i32 %254, 0, !dbg !39
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i34 = icmp eq i32 %255, 0, !dbg !39
  br i1 %.not.i31, label %261, label %256, !dbg !39

256:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %259, label %257, !dbg !39

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

261:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %264, label %262, !dbg !39

262:                                              ; preds = %261
  %263 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

264:                                              ; preds = %261
  %265 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !39
  br label %__nv_sqrtf.exit35, !dbg !39

__nv_sqrtf.exit35:                                ; preds = %257, %259, %262, %264
  %.0.i33 = phi float [ %258, %257 ], [ %260, %259 ], [ %263, %262 ], [ %265, %264 ], !dbg !39
  %266 = extractvalue { i32, i32 } %125, 1, !dbg !33
  %267 = extractvalue { i32, i32 } %137, 1, !dbg !35
  %268 = extractvalue { i32, i32 } %125, 0, !dbg !33
  %269 = extractvalue { i32, i32 } %137, 0, !dbg !35
  %270 = extractvalue { i32, i32 } %124, 1, !dbg !33
  %271 = extractvalue { i32, i32 } %136, 1, !dbg !35
  %272 = extractvalue { i32, i32 } %124, 0, !dbg !33
  %273 = extractvalue { i32, i32 } %136, 0, !dbg !35
  %274 = extractvalue { i32, i32 } %123, 1, !dbg !33
  %275 = extractvalue { i32, i32 } %135, 1, !dbg !35
  %276 = extractvalue { i32, i32 } %123, 0, !dbg !33
  %277 = extractvalue { i32, i32 } %135, 0, !dbg !35
  %278 = extractvalue { i32, i32 } %122, 1, !dbg !33
  %279 = extractvalue { i32, i32 } %134, 1, !dbg !35
  %280 = extractvalue { i32, i32 } %122, 0, !dbg !33
  %281 = extractvalue { i32, i32 } %134, 0, !dbg !35
  %282 = icmp slt i32 %44, 78, !dbg !19
  %283 = icmp slt i32 %42, 78, !dbg !19
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !40
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !40
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !40
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !40
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !40
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !40
  %292 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !41
  %293 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !41
  %294 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !41
  %295 = getelementptr float, ptr addrspace(1) %4, i64 %132, !dbg !41
  %296 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %292, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !42
  %297 = extractvalue { i32, i32 } %296, 0, !dbg !42
  %298 = extractvalue { i32, i32 } %296, 1, !dbg !42
  %299 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %293, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !42
  %300 = extractvalue { i32, i32 } %299, 0, !dbg !42
  %301 = extractvalue { i32, i32 } %299, 1, !dbg !42
  %302 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !42
  %303 = extractvalue { i32, i32 } %302, 0, !dbg !42
  %304 = extractvalue { i32, i32 } %302, 1, !dbg !42
  %305 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %295, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !42
  %306 = extractvalue { i32, i32 } %305, 0, !dbg !42
  %307 = extractvalue { i32, i32 } %305, 1, !dbg !42
  %308 = getelementptr float, ptr addrspace(1) %5, i64 %126, !dbg !43
  %309 = getelementptr float, ptr addrspace(1) %5, i64 %128, !dbg !43
  %310 = getelementptr float, ptr addrspace(1) %5, i64 %130, !dbg !43
  %311 = getelementptr float, ptr addrspace(1) %5, i64 %132, !dbg !43
  %312 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %308, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !44
  %313 = extractvalue { i32, i32 } %312, 0, !dbg !44
  %314 = extractvalue { i32, i32 } %312, 1, !dbg !44
  %315 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %309, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #3, !dbg !44
  %316 = extractvalue { i32, i32 } %315, 0, !dbg !44
  %317 = extractvalue { i32, i32 } %315, 1, !dbg !44
  %318 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %310, i1 %104, i32 0, i1 %104, i32 0, i1 %104) #3, !dbg !44
  %319 = extractvalue { i32, i32 } %318, 0, !dbg !44
  %320 = extractvalue { i32, i32 } %318, 1, !dbg !44
  %321 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %311, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !44
  %322 = extractvalue { i32, i32 } %321, 0, !dbg !44
  %323 = extractvalue { i32, i32 } %321, 1, !dbg !44
  %324 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !33
  %325 = insertelement <8 x i32> %324, i32 %268, i64 1, !dbg !33
  %326 = insertelement <8 x i32> %325, i32 %270, i64 2, !dbg !33
  %327 = insertelement <8 x i32> %326, i32 %272, i64 3, !dbg !33
  %328 = insertelement <8 x i32> %327, i32 %274, i64 4, !dbg !33
  %329 = insertelement <8 x i32> %328, i32 %276, i64 5, !dbg !33
  %330 = insertelement <8 x i32> %329, i32 %278, i64 6, !dbg !33
  %331 = insertelement <8 x i32> %330, i32 %280, i64 7, !dbg !33
  %332 = bitcast <8 x i32> %331 to <8 x float>, !dbg !33
  %333 = insertelement <8 x i32> poison, i32 %267, i64 0, !dbg !35
  %334 = insertelement <8 x i32> %333, i32 %269, i64 1, !dbg !35
  %335 = insertelement <8 x i32> %334, i32 %271, i64 2, !dbg !35
  %336 = insertelement <8 x i32> %335, i32 %273, i64 3, !dbg !35
  %337 = insertelement <8 x i32> %336, i32 %275, i64 4, !dbg !35
  %338 = insertelement <8 x i32> %337, i32 %277, i64 5, !dbg !35
  %339 = insertelement <8 x i32> %338, i32 %279, i64 6, !dbg !35
  %340 = insertelement <8 x i32> %339, i32 %281, i64 7, !dbg !35
  %341 = bitcast <8 x i32> %340 to <8 x float>, !dbg !35
  %342 = fsub <8 x float> %332, %341, !dbg !45
  %343 = insertelement <8 x float> poison, float %291, i64 0, !dbg !46
  %344 = insertelement <8 x float> %343, float %290, i64 1, !dbg !46
  %345 = insertelement <8 x float> %344, float %289, i64 2, !dbg !46
  %346 = insertelement <8 x float> %345, float %288, i64 3, !dbg !46
  %347 = insertelement <8 x float> %346, float %287, i64 4, !dbg !46
  %348 = insertelement <8 x float> %347, float %286, i64 5, !dbg !46
  %349 = insertelement <8 x float> %348, float %285, i64 6, !dbg !46
  %350 = insertelement <8 x float> %349, float %284, i64 7, !dbg !46
  %351 = fmul <8 x float> %342, %350, !dbg !46
  %352 = insertelement <8 x i32> poison, i32 %307, i64 0, !dbg !42
  %353 = insertelement <8 x i32> %352, i32 %306, i64 1, !dbg !42
  %354 = insertelement <8 x i32> %353, i32 %304, i64 2, !dbg !42
  %355 = insertelement <8 x i32> %354, i32 %303, i64 3, !dbg !42
  %356 = insertelement <8 x i32> %355, i32 %301, i64 4, !dbg !42
  %357 = insertelement <8 x i32> %356, i32 %300, i64 5, !dbg !42
  %358 = insertelement <8 x i32> %357, i32 %298, i64 6, !dbg !42
  %359 = insertelement <8 x i32> %358, i32 %297, i64 7, !dbg !42
  %360 = bitcast <8 x i32> %359 to <8 x float>, !dbg !42
  %361 = fmul <8 x float> %351, %360, !dbg !47
  %362 = insertelement <8 x i32> poison, i32 %323, i64 0, !dbg !44
  %363 = insertelement <8 x i32> %362, i32 %322, i64 1, !dbg !44
  %364 = insertelement <8 x i32> %363, i32 %320, i64 2, !dbg !44
  %365 = insertelement <8 x i32> %364, i32 %319, i64 3, !dbg !44
  %366 = insertelement <8 x i32> %365, i32 %317, i64 4, !dbg !44
  %367 = insertelement <8 x i32> %366, i32 %316, i64 5, !dbg !44
  %368 = insertelement <8 x i32> %367, i32 %314, i64 6, !dbg !44
  %369 = insertelement <8 x i32> %368, i32 %313, i64 7, !dbg !44
  %370 = bitcast <8 x i32> %369 to <8 x float>, !dbg !44
  %371 = fadd <8 x float> %361, %370, !dbg !48
  %372 = fcmp olt <8 x float> %371, zeroinitializer, !dbg !49
  %373 = extractelement <8 x i1> %372, i64 7, !dbg !53
  %374 = extractelement <8 x i1> %372, i64 6, !dbg !53
  %375 = extractelement <8 x i1> %372, i64 5, !dbg !53
  %376 = extractelement <8 x i1> %372, i64 4, !dbg !53
  %377 = extractelement <8 x i1> %372, i64 3, !dbg !53
  %378 = extractelement <8 x i1> %372, i64 2, !dbg !53
  %379 = extractelement <8 x i1> %372, i64 1, !dbg !53
  %380 = extractelement <8 x i1> %372, i64 0, !dbg !53
  %381 = icmp sgt <4 x i32> %30, splat (i32 77), !dbg !54
  %382 = mul nsw i32 %36, 26624, !dbg !55
  %383 = mul nsw i32 %37, 26624, !dbg !55
  %384 = add i32 %56, %382, !dbg !56
  %385 = add i32 %57, %382, !dbg !56
  %386 = add i32 %58, %382, !dbg !56
  %387 = add i32 %59, %382, !dbg !56
  %388 = add i32 %60, %383, !dbg !56
  %389 = add i32 %61, %383, !dbg !56
  %390 = add i32 %62, %383, !dbg !56
  %391 = add i32 %63, %383, !dbg !56
  %392 = sext i32 %384 to i64, !dbg !57
  %393 = getelementptr float, ptr addrspace(1) %6, i64 %392, !dbg !57
  %394 = sext i32 %385 to i64, !dbg !57
  %395 = getelementptr float, ptr addrspace(1) %6, i64 %394, !dbg !57
  %396 = sext i32 %386 to i64, !dbg !57
  %397 = getelementptr float, ptr addrspace(1) %6, i64 %396, !dbg !57
  %398 = sext i32 %387 to i64, !dbg !57
  %399 = getelementptr float, ptr addrspace(1) %6, i64 %398, !dbg !57
  %400 = sext i32 %388 to i64, !dbg !57
  %401 = getelementptr float, ptr addrspace(1) %6, i64 %400, !dbg !57
  %402 = sext i32 %389 to i64, !dbg !57
  %403 = getelementptr float, ptr addrspace(1) %6, i64 %402, !dbg !57
  %404 = sext i32 %390 to i64, !dbg !57
  %405 = getelementptr float, ptr addrspace(1) %6, i64 %404, !dbg !57
  %406 = sext i32 %391 to i64, !dbg !57
  %407 = getelementptr float, ptr addrspace(1) %6, i64 %406, !dbg !57
  %408 = extractelement <4 x i1> %381, i64 3, !dbg !58
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %393, i1 %408, i32 0, i1 %408) #3, !dbg !58
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %395, i1 %408, i32 0, i1 %408) #3, !dbg !58
  %411 = extractelement <4 x i1> %381, i64 2, !dbg !58
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %397, i1 %411, i32 0, i1 %411) #3, !dbg !58
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %399, i1 %411, i32 0, i1 %411) #3, !dbg !58
  %414 = extractelement <4 x i1> %381, i64 1, !dbg !58
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %401, i1 %414, i32 0, i1 %414) #3, !dbg !58
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %403, i1 %414, i32 0, i1 %414) #3, !dbg !58
  %417 = extractelement <4 x i1> %381, i64 0, !dbg !58
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %405, i1 %417, i32 0, i1 %417) #3, !dbg !58
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %407, i1 %417, i32 0, i1 %417) #3, !dbg !58
  %420 = sext i32 %15 to i64, !dbg !59
  %421 = getelementptr float, ptr addrspace(1) %7, i64 %420, !dbg !59
  %422 = sext i32 %19 to i64, !dbg !59
  %423 = getelementptr float, ptr addrspace(1) %7, i64 %422, !dbg !59
  %bc = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %424 = extractelement <8 x i32> %bc, i64 7, !dbg !60
  %425 = select i1 %373, i32 0, i32 %424, !dbg !53
  %426 = select i1 %101, i32 %425, i32 0, !dbg !61
  %427 = select i1 %43, i32 %90, i32 %426, !dbg !62
  %428 = select i1 %283, i32 %427, i32 %409, !dbg !63
  %bc36 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %429 = extractelement <8 x i32> %bc36, i64 6, !dbg !60
  %430 = select i1 %374, i32 0, i32 %429, !dbg !53
  %431 = select i1 %101, i32 %430, i32 0, !dbg !61
  %432 = select i1 %43, i32 %91, i32 %431, !dbg !62
  %433 = select i1 %283, i32 %432, i32 %410, !dbg !63
  %bc37 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %434 = extractelement <8 x i32> %bc37, i64 5, !dbg !60
  %435 = select i1 %375, i32 0, i32 %434, !dbg !53
  %436 = select i1 %102, i32 %435, i32 0, !dbg !61
  %437 = select i1 %43, i32 %92, i32 %436, !dbg !62
  %438 = select i1 %39, i32 %437, i32 %412, !dbg !63
  %bc38 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %439 = extractelement <8 x i32> %bc38, i64 4, !dbg !60
  %440 = select i1 %376, i32 0, i32 %439, !dbg !53
  %441 = select i1 %102, i32 %440, i32 0, !dbg !61
  %442 = select i1 %43, i32 %93, i32 %441, !dbg !62
  %443 = select i1 %39, i32 %442, i32 %413, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %428, i32 %433, i32 %438, i32 %443, ptr addrspace(1) %421, i1 true) #3, !dbg !60
  %bc39 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %444 = extractelement <8 x i32> %bc39, i64 3, !dbg !60
  %445 = select i1 %377, i32 0, i32 %444, !dbg !53
  %446 = select i1 %104, i32 %445, i32 0, !dbg !61
  %447 = select i1 %45, i32 %94, i32 %446, !dbg !62
  %448 = select i1 %282, i32 %447, i32 %415, !dbg !63
  %bc40 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %449 = extractelement <8 x i32> %bc40, i64 2, !dbg !60
  %450 = select i1 %378, i32 0, i32 %449, !dbg !53
  %451 = select i1 %104, i32 %450, i32 0, !dbg !61
  %452 = select i1 %45, i32 %95, i32 %451, !dbg !62
  %453 = select i1 %282, i32 %452, i32 %416, !dbg !63
  %bc41 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %454 = extractelement <8 x i32> %bc41, i64 1, !dbg !60
  %455 = select i1 %379, i32 0, i32 %454, !dbg !53
  %456 = select i1 %105, i32 %455, i32 0, !dbg !61
  %457 = select i1 %45, i32 %96, i32 %456, !dbg !62
  %458 = select i1 %41, i32 %457, i32 %418, !dbg !63
  %bc42 = bitcast <8 x float> %371 to <8 x i32>, !dbg !60
  %459 = extractelement <8 x i32> %bc42, i64 0, !dbg !60
  %460 = select i1 %380, i32 0, i32 %459, !dbg !53
  %461 = select i1 %105, i32 %460, i32 0, !dbg !61
  %462 = select i1 %45, i32 %97, i32 %461, !dbg !62
  %463 = select i1 %41, i32 %462, i32 %419, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %453, i32 %458, i32 %463, ptr addrspace(1) %423, i1 true) #3, !dbg !60
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfmkzznplpqxyp5bjd77usfauz5igvfwzf2xlezoxvq3kwwwamkj.py", directory: "inductor_cache/fm")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 40, column: 41, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 44, column: 20, scope: !7)
!21 = !DILocation(line: 38, column: 18, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 36, scope: !7)
!24 = !DILocation(line: 40, column: 53, scope: !7)
!25 = !DILocation(line: 40, column: 47, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 58, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 45, column: 34, scope: !7)
!30 = !DILocation(line: 45, column: 49, scope: !7)
!31 = !DILocation(line: 45, column: 40, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 56, scope: !7)
!34 = !DILocation(line: 46, column: 31, scope: !7)
!35 = !DILocation(line: 46, column: 46, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 46, scope: !7)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 27, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 46, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 46, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 62, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 68, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 69, scope: !7)
!56 = !DILocation(line: 71, column: 63, scope: !7)
!57 = !DILocation(line: 71, column: 31, scope: !7)
!58 = !DILocation(line: 71, column: 74, scope: !7)
!59 = !DILocation(line: 73, column: 25, scope: !7)
!60 = !DILocation(line: 73, column: 37, scope: !7)
!61 = !DILocation(line: 64, column: 35, scope: !7)
!62 = !DILocation(line: 65, column: 34, scope: !7)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 73, column: 4, scope: !7)
