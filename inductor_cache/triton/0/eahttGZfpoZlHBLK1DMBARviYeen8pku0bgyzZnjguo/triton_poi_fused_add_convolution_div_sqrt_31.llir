; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 4, !dbg !15
  %23 = and i32 %9, 15, !dbg !16
  %24 = or disjoint i32 %22, %23, !dbg !17
  %25 = icmp slt i32 %24, 9, !dbg !18
  %26 = sdiv i32 %13, 512, !dbg !19
  %27 = sdiv i32 %14, 512, !dbg !19
  %28 = sdiv i32 %15, 512, !dbg !19
  %29 = sdiv i32 %16, 512, !dbg !19
  %30 = sdiv i32 %17, 512, !dbg !19
  %31 = sdiv i32 %18, 512, !dbg !19
  %32 = sdiv i32 %19, 512, !dbg !19
  %33 = sdiv i32 %20, 512, !dbg !19
  %34 = mul i32 %13, 9, !dbg !20
  %35 = mul i32 %14, 9, !dbg !20
  %36 = mul i32 %15, 9, !dbg !20
  %37 = mul i32 %16, 9, !dbg !20
  %38 = mul i32 %17, 9, !dbg !20
  %39 = mul i32 %18, 9, !dbg !20
  %40 = mul i32 %19, 9, !dbg !20
  %41 = mul i32 %20, 9, !dbg !20
  %42 = add i32 %24, %34, !dbg !21
  %43 = add i32 %24, %35, !dbg !21
  %44 = add i32 %24, %36, !dbg !21
  %45 = add i32 %24, %37, !dbg !21
  %46 = add i32 %24, %38, !dbg !21
  %47 = add i32 %24, %39, !dbg !21
  %48 = add i32 %24, %40, !dbg !21
  %49 = add i32 %24, %41, !dbg !21
  %50 = sext i32 %42 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %43 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %44 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %45 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %46 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %47 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %48 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %49 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %25) #4, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %25) #4, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #4, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #4, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #4, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #4, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #4, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %25) #4, !dbg !23
  %74 = mul nsw i32 %26, 9, !dbg !24
  %75 = mul nsw i32 %27, 9, !dbg !24
  %76 = mul nsw i32 %28, 9, !dbg !24
  %77 = mul nsw i32 %29, 9, !dbg !24
  %78 = mul nsw i32 %30, 9, !dbg !24
  %79 = mul nsw i32 %31, 9, !dbg !24
  %80 = mul nsw i32 %32, 9, !dbg !24
  %81 = mul nsw i32 %33, 9, !dbg !24
  %82 = add i32 %74, %24, !dbg !25
  %83 = add i32 %75, %24, !dbg !25
  %84 = add i32 %24, %76, !dbg !25
  %85 = add i32 %24, %77, !dbg !25
  %86 = add i32 %24, %78, !dbg !25
  %87 = add i32 %24, %79, !dbg !25
  %88 = add i32 %24, %80, !dbg !25
  %89 = add i32 %24, %81, !dbg !25
  %90 = sext i32 %82 to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !26
  %92 = sext i32 %83 to i64, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !26
  %94 = sext i32 %84 to i64, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !26
  %96 = sext i32 %85 to i64, !dbg !26
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !26
  %98 = sext i32 %86 to i64, !dbg !26
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !26
  %100 = sext i32 %87 to i64, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !26
  %102 = sext i32 %88 to i64, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !26
  %104 = sext i32 %89 to i64, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %25) #4, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %25) #4, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %25) #4, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %25) #4, !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %25) #4, !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %25) #4, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %25) #4, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %25) #4, !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i = icmp eq i32 %122, 0, !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i = icmp eq i32 %123, 0, !dbg !28
  br i1 %.not.i, label %129, label %124, !dbg !28

124:                                              ; preds = %6
  br i1 %.not1.i, label %127, label %125, !dbg !28

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

129:                                              ; preds = %6
  br i1 %.not1.i, label %132, label %130, !dbg !28

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #4, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %125, %127, %130, %132
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i16 = icmp eq i32 %134, 0, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i19 = icmp eq i32 %135, 0, !dbg !28
  br i1 %.not.i16, label %141, label %136, !dbg !28

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %139, label %137, !dbg !28

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #4, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #4, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %144, label %142, !dbg !28

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #4, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #4, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %137, %139, %142, %144
  %.0.i18 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i21 = icmp eq i32 %146, 0, !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i24 = icmp eq i32 %147, 0, !dbg !28
  br i1 %.not.i21, label %153, label %148, !dbg !28

148:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %151, label %149, !dbg !28

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

153:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %156, label %154, !dbg !28

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %149, %151, %154, %156
  %.0.i23 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i26 = icmp eq i32 %158, 0, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i29 = icmp eq i32 %159, 0, !dbg !28
  br i1 %.not.i26, label %165, label %160, !dbg !28

160:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %163, label %161, !dbg !28

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

165:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %168, label %166, !dbg !28

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %161, %163, %166, %168
  %.0.i28 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !28
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i31 = icmp eq i32 %170, 0, !dbg !28
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i34 = icmp eq i32 %171, 0, !dbg !28
  br i1 %.not.i31, label %177, label %172, !dbg !28

172:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %175, label %173, !dbg !28

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

177:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %180, label %178, !dbg !28

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %173, %175, %178, %180
  %.0.i33 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !28
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i36 = icmp eq i32 %182, 0, !dbg !28
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i39 = icmp eq i32 %183, 0, !dbg !28
  br i1 %.not.i36, label %189, label %184, !dbg !28

184:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %187, label %185, !dbg !28

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !28
  br label %__nv_sqrtf.exit40, !dbg !28

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !28
  br label %__nv_sqrtf.exit40, !dbg !28

189:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %192, label %190, !dbg !28

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !28
  br label %__nv_sqrtf.exit40, !dbg !28

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !28
  br label %__nv_sqrtf.exit40, !dbg !28

__nv_sqrtf.exit40:                                ; preds = %185, %187, %190, %192
  %.0.i38 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !28
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i41 = icmp eq i32 %194, 0, !dbg !28
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i44 = icmp eq i32 %195, 0, !dbg !28
  br i1 %.not.i41, label %201, label %196, !dbg !28

196:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %199, label %197, !dbg !28

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !28
  br label %__nv_sqrtf.exit45, !dbg !28

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !28
  br label %__nv_sqrtf.exit45, !dbg !28

201:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %204, label %202, !dbg !28

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !28
  br label %__nv_sqrtf.exit45, !dbg !28

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !28
  br label %__nv_sqrtf.exit45, !dbg !28

__nv_sqrtf.exit45:                                ; preds = %197, %199, %202, %204
  %.0.i43 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !28
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !28
  %.not.i46 = icmp eq i32 %206, 0, !dbg !28
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !28
  %.not1.i49 = icmp eq i32 %207, 0, !dbg !28
  br i1 %.not.i46, label %213, label %208, !dbg !28

208:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %211, label %209, !dbg !28

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !28
  br label %__nv_sqrtf.exit50, !dbg !28

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !28
  br label %__nv_sqrtf.exit50, !dbg !28

213:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %216, label %214, !dbg !28

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !28
  br label %__nv_sqrtf.exit50, !dbg !28

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !28
  br label %__nv_sqrtf.exit50, !dbg !28

__nv_sqrtf.exit50:                                ; preds = %209, %211, %214, %216
  %.0.i48 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !28
  %218 = bitcast i32 %73 to float, !dbg !23
  %219 = bitcast i32 %72 to float, !dbg !23
  %220 = bitcast i32 %71 to float, !dbg !23
  %221 = bitcast i32 %70 to float, !dbg !23
  %222 = bitcast i32 %69 to float, !dbg !23
  %223 = bitcast i32 %68 to float, !dbg !23
  %224 = bitcast i32 %67 to float, !dbg !23
  %225 = bitcast i32 %66 to float, !dbg !23
  %226 = shl i32 %9, 2, !dbg !12
  %227 = and i32 %226, 60, !dbg !12
  %228 = or disjoint i32 %8, %227, !dbg !13
  %.frozen = freeze i32 %228, !dbg !19
  %229 = sdiv i32 %.frozen, 512, !dbg !19
  %230 = mul i32 %229, 512, !dbg !29
  %.decomposed = sub i32 %.frozen, %230, !dbg !29
  %231 = or disjoint i32 %22, %12, !dbg !17
  %232 = icmp slt i32 %231, 9, !dbg !18
  %233 = or disjoint i32 %22, %11, !dbg !17
  %234 = icmp slt i32 %233, 9, !dbg !18
  %235 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !30
  %236 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !30
  %237 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !30
  %238 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !30
  %239 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !30
  %240 = fadd float %.0.i38, 0x3DDB7CDFE0000000, !dbg !30
  %241 = fadd float %.0.i43, 0x3DDB7CDFE0000000, !dbg !30
  %242 = fadd float %.0.i48, 0x3DDB7CDFE0000000, !dbg !30
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %225, float %235) #4, !dbg !31
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %236) #4, !dbg !31
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %237) #4, !dbg !31
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %238) #4, !dbg !31
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %239) #4, !dbg !31
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %240) #4, !dbg !31
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %241) #4, !dbg !31
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %242) #4, !dbg !31
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !32
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !32
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !32
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !32
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !32
  %256 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !32
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !32
  %258 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !32
  %259 = bitcast float %243 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %259, ptr addrspace(1) %251, i1 %25) #4, !dbg !33
  %260 = bitcast float %244 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %260, ptr addrspace(1) %252, i1 %25) #4, !dbg !33
  %261 = bitcast float %245 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %261, ptr addrspace(1) %253, i1 %25) #4, !dbg !33
  %262 = bitcast float %246 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %262, ptr addrspace(1) %254, i1 %25) #4, !dbg !33
  %263 = bitcast float %247 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %263, ptr addrspace(1) %255, i1 %25) #4, !dbg !33
  %264 = bitcast float %248 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %264, ptr addrspace(1) %256, i1 %25) #4, !dbg !33
  %265 = bitcast float %249 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %257, i1 %25) #4, !dbg !33
  %266 = bitcast float %250 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %266, ptr addrspace(1) %258, i1 %25) #4, !dbg !33
  %267 = shl i32 %233, 9, !dbg !34
  %268 = shl i32 %231, 9, !dbg !34
  %269 = mul i32 %229, 4608, !dbg !35
  %270 = add i32 %269, %.decomposed, !dbg !36
  %271 = add i32 %270, %267, !dbg !37
  %272 = add i32 %270, %268, !dbg !37
  %273 = sext i32 %271 to i64, !dbg !38
  %274 = getelementptr float, ptr addrspace(1) %3, i64 %273, !dbg !38
  %275 = sext i32 %272 to i64, !dbg !38
  %276 = getelementptr float, ptr addrspace(1) %3, i64 %275, !dbg !38
  %277 = shl i32 %9, 6, !dbg !39
  %278 = and i32 %277, 960, !dbg !39
  %279 = or disjoint i32 %278, %11, !dbg !39
  %280 = and i32 %226, 508, !dbg !39
  %281 = lshr exact i32 %278, 4, !dbg !39
  %282 = add nuw nsw i32 %281, %279, !dbg !39
  %283 = zext nneg i32 %282 to i64, !dbg !39
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !39
  %285 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !39
  %286 = or disjoint i32 %279, 8, !dbg !39
  %287 = add nuw nsw i32 %286, %281, !dbg !39
  %288 = zext nneg i32 %287 to i64, !dbg !39
  %289 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %288, !dbg !39
  %290 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !39
  %291 = or disjoint i32 %279, 16, !dbg !39
  %292 = add nuw nsw i32 %291, %281, !dbg !39
  %293 = zext nneg i32 %292 to i64, !dbg !39
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %293, !dbg !39
  %295 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !39
  %296 = or disjoint i32 %279, 24, !dbg !39
  %297 = add nuw nsw i32 %296, %281, !dbg !39
  %298 = zext nneg i32 %297 to i64, !dbg !39
  %299 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %298, !dbg !39
  %300 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #4, !dbg !39
  %301 = or disjoint i32 %279, 32, !dbg !39
  %302 = add nuw nsw i32 %301, %281, !dbg !39
  %303 = zext nneg i32 %302 to i64, !dbg !39
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %303, !dbg !39
  %305 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #4, !dbg !39
  %306 = or disjoint i32 %279, 40, !dbg !39
  %307 = add nuw nsw i32 %306, %281, !dbg !39
  %308 = zext nneg i32 %307 to i64, !dbg !39
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %308, !dbg !39
  %310 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #4, !dbg !39
  %311 = or disjoint i32 %279, 48, !dbg !39
  %312 = add nuw nsw i32 %311, %281, !dbg !39
  %313 = zext nneg i32 %312 to i64, !dbg !39
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %313, !dbg !39
  %315 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !39
  %316 = or disjoint i32 %279, 56, !dbg !39
  %317 = add nuw nsw i32 %316, %281, !dbg !39
  %318 = zext nneg i32 %317 to i64, !dbg !39
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %318, !dbg !39
  %320 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %319, <1 x i32> %320, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %321 = lshr i32 %226, 4, !dbg !39
  %322 = and i32 %321, 28, !dbg !39
  %323 = add nuw nsw i32 %322, %280, !dbg !39
  %324 = zext nneg i32 %323 to i64, !dbg !39
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %324, !dbg !39
  %326 = or disjoint i32 %280, 512, !dbg !39
  %327 = lshr i32 %326, 4, !dbg !39
  %328 = and i32 %327, 60, !dbg !39
  %329 = add nuw nsw i32 %328, %326, !dbg !39
  %330 = zext nneg i32 %329 to i64, !dbg !39
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %330, !dbg !39
  %332 = load <4 x i32>, ptr addrspace(3) %331, align 16, !dbg !39
  %.extract = load i32, ptr addrspace(3) %325, align 16, !dbg !39
  %333 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 4, !dbg !39
  %.extract9 = load i32, ptr addrspace(3) %333, align 4, !dbg !39
  %334 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 8, !dbg !39
  %.extract10 = load i32, ptr addrspace(3) %334, align 8, !dbg !39
  %335 = getelementptr inbounds i8, ptr addrspace(3) %325, i64 12, !dbg !39
  %.extract11 = load i32, ptr addrspace(3) %335, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %274, i1 %234) #4, !dbg !39
  %.extract12 = extractelement <4 x i32> %332, i64 0, !dbg !39
  %.extract13 = extractelement <4 x i32> %332, i64 1, !dbg !39
  %.extract14 = extractelement <4 x i32> %332, i64 2, !dbg !39
  %.extract15 = extractelement <4 x i32> %332, i64 3, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %276, i1 %232) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5jxyuzwle4rs3d4dupwf64vu4vgvdiw77pkfjhi3fqylmcssmu4.py", directory: "inductor_cache/5j")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_31", linkageName: "triton_poi_fused_add_convolution_div_sqrt_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 37, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 33, column: 37, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 42, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 31, column: 19, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 43, scope: !7)
!34 = !DILocation(line: 39, column: 34, scope: !7)
!35 = !DILocation(line: 39, column: 44, scope: !7)
!36 = !DILocation(line: 39, column: 30, scope: !7)
!37 = !DILocation(line: 39, column: 39, scope: !7)
!38 = !DILocation(line: 39, column: 25, scope: !7)
!39 = !DILocation(line: 39, column: 55, scope: !7)
!40 = !DILocation(line: 39, column: 4, scope: !7)
