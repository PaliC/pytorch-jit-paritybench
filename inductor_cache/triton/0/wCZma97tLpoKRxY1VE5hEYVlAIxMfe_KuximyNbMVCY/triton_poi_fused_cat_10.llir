; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 1024, !dbg !14
  %17 = srem i32 %16, 12, !dbg !15
  %18 = mul i32 %16, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen6 = freeze i32 %15, !dbg !17
  %19 = sdiv i32 %.frozen6, 12288, !dbg !17
  %20 = icmp slt i32 %17, 4, !dbg !18
  %21 = mul i32 %19, 12288, !dbg !19
  %srem.decomposed = sub i32 %.frozen6, %21, !dbg !19
  %22 = shl nsw i32 %19, 12, !dbg !20
  %23 = add nsw i32 %22, %srem.decomposed, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #3, !dbg !25
  %29 = icmp sgt i32 %17, 3, !dbg !26
  %30 = add nsw i32 %17, -4, !dbg !27
  %31 = shl nsw i32 %30, 10, !dbg !28
  %32 = shl nsw i32 %19, 13, !dbg !29
  %33 = add nsw i32 %32, %.decomposed, !dbg !30
  %34 = add nsw i32 %33, %31, !dbg !31
  %35 = sext i32 %34 to i64, !dbg !32
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !32
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %38 = sext i32 %30 to i64, !dbg !34
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !34
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !36
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %44 = bitcast i32 %43 to float, !dbg !37
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %29, i32 0, i1 %29) #3, !dbg !37
  %46 = bitcast i32 %45 to float, !dbg !37
  %47 = fadd float %44, 0x3EE4F8B580000000, !dbg !38
  %48 = fadd float %46, 0x3EE4F8B580000000, !dbg !38
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %49, 0, !dbg !39
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %50, 0, !dbg !39
  br i1 %.not.i, label %56, label %51, !dbg !39

51:                                               ; preds = %9
  br i1 %.not1.i, label %54, label %52, !dbg !39

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

56:                                               ; preds = %9
  br i1 %.not1.i, label %59, label %57, !dbg !39

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %52, %54, %57, %59
  %.0.i = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !39
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %61, 0, !dbg !39
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !39
  br i1 %.not.i1, label %68, label %63, !dbg !39

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !39

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !39
  %73 = extractvalue { i32, i32 } %37, 1, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = bitcast i32 %41 to float, !dbg !35
  %76 = fsub float %74, %75, !dbg !40
  %77 = extractvalue { i32, i32 } %37, 0, !dbg !33
  %78 = bitcast i32 %77 to float, !dbg !33
  %79 = bitcast i32 %40 to float, !dbg !35
  %80 = fsub float %78, %79, !dbg !40
  %81 = extractvalue { i32, i32 } %26, 1, !dbg !23
  %82 = bitcast i32 %81 to float, !dbg !23
  %83 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = fmul float %82, %84, !dbg !41
  %86 = extractvalue { i32, i32 } %26, 0, !dbg !23
  %87 = bitcast i32 %86 to float, !dbg !23
  %88 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %89 = bitcast i32 %88 to float, !dbg !25
  %90 = fmul float %87, %89, !dbg !41
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !42
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !42
  %93 = fmul float %80, %91, !dbg !43
  %94 = fmul float %76, %92, !dbg !43
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !44
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %97 = bitcast i32 %96 to float, !dbg !45
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %29, i32 0, i1 %29) #3, !dbg !45
  %99 = bitcast i32 %98 to float, !dbg !45
  %100 = fmul float %93, %97, !dbg !46
  %101 = fmul float %94, %99, !dbg !46
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !47
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %29, i32 0, i1 %29) #3, !dbg !48
  %104 = bitcast i32 %103 to float, !dbg !48
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %29, i32 0, i1 %29) #3, !dbg !48
  %106 = bitcast i32 %105 to float, !dbg !48
  %107 = fadd float %100, %104, !dbg !49
  %108 = fadd float %101, %106, !dbg !49
  %109 = fcmp olt float %107, 0.000000e+00, !dbg !50
  %110 = fcmp olt float %108, 0.000000e+00, !dbg !50
  %111 = select i1 %109, float 0.000000e+00, float %107, !dbg !54
  %112 = select i1 %110, float 0.000000e+00, float %108, !dbg !54
  %113 = select i1 %20, float %90, float %111, !dbg !55
  %114 = select i1 %20, float %85, float %112, !dbg !55
  %115 = sext i32 %15 to i64, !dbg !56
  %116 = getelementptr float, ptr addrspace(1) %7, i64 %115, !dbg !56
  %117 = bitcast float %113 to i32, !dbg !57
  %118 = bitcast float %114 to i32, !dbg !57
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %118, ptr addrspace(1) %116, i1 true) #3, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyt3ro2cgxahaxmriluu5xvhzfzsx2uvg23nqbndc5zjmernieej.py", directory: "inductor_cache/yt")
!4 = !{ptr @triton_poi_fused_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_10", linkageName: "triton_poi_fused_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 57, scope: !7)
!26 = !DILocation(line: 38, column: 20, scope: !7)
!27 = !DILocation(line: 41, column: 49, scope: !7)
!28 = !DILocation(line: 41, column: 42, scope: !7)
!29 = !DILocation(line: 41, column: 60, scope: !7)
!30 = !DILocation(line: 41, column: 36, scope: !7)
!31 = !DILocation(line: 41, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 31, scope: !7)
!33 = !DILocation(line: 41, column: 65, scope: !7)
!34 = !DILocation(line: 42, column: 31, scope: !7)
!35 = !DILocation(line: 42, column: 43, scope: !7)
!36 = !DILocation(line: 44, column: 31, scope: !7)
!37 = !DILocation(line: 44, column: 43, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 47, column: 27, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 35, column: 18, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 43, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 43, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 58, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 0, scope: !7)
!56 = !DILocation(line: 62, column: 25, scope: !7)
!57 = !DILocation(line: 62, column: 37, scope: !7)
!58 = !DILocation(line: 62, column: 4, scope: !7)
