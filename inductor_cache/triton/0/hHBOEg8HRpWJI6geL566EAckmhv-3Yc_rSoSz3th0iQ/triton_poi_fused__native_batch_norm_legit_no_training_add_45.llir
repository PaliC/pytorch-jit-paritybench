; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 2, !dbg !15
  %19 = icmp slt i32 %18, 4, !dbg !16
  %20 = add i32 %15, %17, !dbg !17
  %21 = shl i32 %20, 2, !dbg !17
  %22 = add i32 %16, %17, !dbg !17
  %23 = shl i32 %22, 2, !dbg !17
  %24 = sext i32 %21 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %19) #4, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #4, !dbg !19
  %30 = sext i32 %18 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %19) #4, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %19) #4, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !24
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #4, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #4, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !28
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %19) #4, !dbg !29
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %19) #4, !dbg !29
  %51 = fadd float %39, 0x3EE4F8B580000000, !dbg !30
  %52 = fadd float %40, 0x3EE4F8B580000000, !dbg !30
  %53 = fadd float %41, 0x3EE4F8B580000000, !dbg !30
  %54 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %55, 0, !dbg !31
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %56, 0, !dbg !31
  br i1 %.not.i, label %62, label %57, !dbg !31

57:                                               ; preds = %9
  br i1 %.not1.i, label %60, label %58, !dbg !31

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

62:                                               ; preds = %9
  br i1 %.not1.i, label %65, label %63, !dbg !31

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i15 = icmp eq i32 %67, 0, !dbg !31
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i18 = icmp eq i32 %68, 0, !dbg !31
  br i1 %.not.i15, label %74, label %69, !dbg !31

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %72, label %70, !dbg !31

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %77, label %75, !dbg !31

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !31
  br label %__nv_sqrtf.exit19, !dbg !31

__nv_sqrtf.exit19:                                ; preds = %70, %72, %75, %77
  %.0.i17 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !31
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i20 = icmp eq i32 %79, 0, !dbg !31
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i23 = icmp eq i32 %80, 0, !dbg !31
  br i1 %.not.i20, label %86, label %81, !dbg !31

81:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %84, label %82, !dbg !31

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

86:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %89, label %87, !dbg !31

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !31
  br label %__nv_sqrtf.exit24, !dbg !31

__nv_sqrtf.exit24:                                ; preds = %82, %84, %87, %89
  %.0.i22 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !31
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i25 = icmp eq i32 %91, 0, !dbg !31
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i28 = icmp eq i32 %92, 0, !dbg !31
  br i1 %.not.i25, label %98, label %93, !dbg !31

93:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %96, label %94, !dbg !31

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

98:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %101, label %99, !dbg !31

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !31
  br label %__nv_sqrtf.exit29, !dbg !31

__nv_sqrtf.exit29:                                ; preds = %94, %96, %99, %101
  %.0.i27 = phi float [ %95, %94 ], [ %97, %96 ], [ %100, %99 ], [ %102, %101 ], !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %104 = bitcast i32 %103 to float, !dbg !19
  %105 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %106 = bitcast i32 %105 to float, !dbg !21
  %107 = fsub float %104, %106, !dbg !32
  %108 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %109 = bitcast i32 %108 to float, !dbg !19
  %110 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %111 = bitcast i32 %110 to float, !dbg !21
  %112 = fsub float %109, %111, !dbg !32
  %113 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %114 = bitcast i32 %113 to float, !dbg !19
  %115 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %116 = bitcast i32 %115 to float, !dbg !21
  %117 = fsub float %114, %116, !dbg !32
  %118 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %119 = bitcast i32 %118 to float, !dbg !19
  %120 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %121 = bitcast i32 %120 to float, !dbg !21
  %122 = fsub float %119, %121, !dbg !32
  %123 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %124 = bitcast i32 %123 to float, !dbg !19
  %125 = fsub float %124, %106, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %127 = bitcast i32 %126 to float, !dbg !19
  %128 = fsub float %127, %111, !dbg !32
  %129 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %130 = bitcast i32 %129 to float, !dbg !19
  %131 = fsub float %130, %116, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %133 = bitcast i32 %132 to float, !dbg !19
  %134 = fsub float %133, %121, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !29
  %138 = bitcast i32 %137 to float, !dbg !29
  %139 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !29
  %140 = bitcast i32 %139 to float, !dbg !29
  %141 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !29
  %142 = bitcast i32 %141 to float, !dbg !29
  %143 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !29
  %146 = bitcast i32 %145 to float, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !27
  %154 = bitcast i32 %153 to float, !dbg !27
  %155 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !27
  %156 = bitcast i32 %155 to float, !dbg !27
  %157 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !27
  %158 = bitcast i32 %157 to float, !dbg !27
  %159 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !25
  %160 = bitcast i32 %159 to float, !dbg !25
  %161 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !25
  %162 = bitcast i32 %161 to float, !dbg !25
  %163 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !25
  %164 = bitcast i32 %163 to float, !dbg !25
  %165 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !25
  %166 = bitcast i32 %165 to float, !dbg !25
  %167 = shl i32 %12, 2, !dbg !12
  %168 = and i32 %167, 252, !dbg !12
  %169 = or disjoint i32 %11, %168, !dbg !13
  %.frozen = freeze i32 %169, !dbg !33
  %170 = sdiv i32 %.frozen, 4096, !dbg !33
  %171 = mul i32 %170, 4096, !dbg !34
  %.decomposed = sub i32 %.frozen, %171, !dbg !34
  %172 = lshr i32 %12, 6, !dbg !35
  %.lobit = and i32 %172, 1, !dbg !35
  %173 = or disjoint i32 %.lobit, %18, !dbg !36
  %174 = or disjoint i32 %173, 2, !dbg !36
  %175 = icmp slt i32 %174, 4, !dbg !16
  %176 = icmp slt i32 %173, 4, !dbg !16
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !37
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !37
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !37
  %181 = fmul float %134, %177, !dbg !38
  %182 = fmul float %131, %178, !dbg !38
  %183 = fmul float %128, %179, !dbg !38
  %184 = fmul float %125, %180, !dbg !38
  %185 = fmul float %122, %177, !dbg !38
  %186 = fmul float %117, %178, !dbg !38
  %187 = fmul float %112, %179, !dbg !38
  %188 = fmul float %107, %180, !dbg !38
  %189 = fmul float %181, %166, !dbg !39
  %190 = fmul float %182, %164, !dbg !39
  %191 = fmul float %183, %162, !dbg !39
  %192 = fmul float %184, %160, !dbg !39
  %193 = fmul float %185, %166, !dbg !39
  %194 = fmul float %186, %164, !dbg !39
  %195 = fmul float %187, %162, !dbg !39
  %196 = fmul float %188, %160, !dbg !39
  %197 = fadd float %189, %158, !dbg !40
  %198 = fadd float %190, %156, !dbg !40
  %199 = fadd float %191, %154, !dbg !40
  %200 = fadd float %192, %152, !dbg !40
  %201 = fadd float %193, %158, !dbg !40
  %202 = fadd float %194, %156, !dbg !40
  %203 = fadd float %195, %154, !dbg !40
  %204 = fadd float %196, %152, !dbg !40
  %205 = fadd float %197, %150, !dbg !41
  %206 = fadd float %198, %148, !dbg !41
  %207 = fadd float %199, %146, !dbg !41
  %208 = fadd float %200, %144, !dbg !41
  %209 = fadd float %201, %142, !dbg !41
  %210 = fadd float %202, %140, !dbg !41
  %211 = fadd float %203, %138, !dbg !41
  %212 = fadd float %204, %136, !dbg !41
  %213 = shl i32 %173, 12, !dbg !42
  %214 = shl i32 %174, 12, !dbg !42
  %215 = shl i32 %170, 14, !dbg !43
  %216 = add i32 %215, %.decomposed, !dbg !44
  %217 = add i32 %216, %213, !dbg !45
  %218 = add i32 %216, %214, !dbg !45
  %219 = sext i32 %217 to i64, !dbg !46
  %220 = getelementptr float, ptr addrspace(1) %6, i64 %219, !dbg !46
  %221 = sext i32 %218 to i64, !dbg !46
  %222 = getelementptr float, ptr addrspace(1) %6, i64 %221, !dbg !46
  %223 = and i32 %167, 508, !dbg !47
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !47
  %225 = bitcast float %205 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !47
  %226 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 1040, !dbg !47
  %227 = bitcast float %206 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #4, !dbg !47
  %228 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 2080, !dbg !47
  %229 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !47
  %230 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 3120, !dbg !47
  %231 = bitcast float %208 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !47
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  %233 = bitcast float %209 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !47
  %234 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 1552, !dbg !47
  %235 = bitcast float %210 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !47
  %236 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 2592, !dbg !47
  %237 = bitcast float %211 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !47
  %238 = getelementptr inbounds i8, ptr addrspace(3) %224, i32 3632, !dbg !47
  %239 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %240 = lshr i32 %167, 6, !dbg !47
  %241 = and i32 %240, 4, !dbg !47
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !47
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %223, !dbg !47
  %244 = or disjoint i32 %223, 512, !dbg !47
  %245 = lshr i32 %244, 6, !dbg !47
  %246 = and i32 %245, 12, !dbg !47
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !47
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %244, !dbg !47
  %249 = load <4 x i32>, ptr addrspace(3) %248, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %243, align 16, !dbg !47
  %250 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 4, !dbg !47
  %.extract8 = load i32, ptr addrspace(3) %250, align 4, !dbg !47
  %251 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 8, !dbg !47
  %.extract9 = load i32, ptr addrspace(3) %251, align 8, !dbg !47
  %252 = getelementptr inbounds i8, ptr addrspace(3) %243, i32 12, !dbg !47
  %.extract10 = load i32, ptr addrspace(3) %252, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %220, i1 %176) #4, !dbg !47
  %.extract11 = extractelement <4 x i32> %249, i64 0, !dbg !47
  %.extract12 = extractelement <4 x i32> %249, i64 1, !dbg !47
  %.extract13 = extractelement <4 x i32> %249, i64 2, !dbg !47
  %.extract14 = extractelement <4 x i32> %249, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %222, i1 %175) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67zzgaqo2lk3amltc52bp53bvc4z3b4klngwzyhjpqfnnreuxwe.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_45, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 42, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 43, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 31, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 26, column: 23, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 35, scope: !7)
!43 = !DILocation(line: 50, column: 46, scope: !7)
!44 = !DILocation(line: 50, column: 30, scope: !7)
!45 = !DILocation(line: 50, column: 40, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 58, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
