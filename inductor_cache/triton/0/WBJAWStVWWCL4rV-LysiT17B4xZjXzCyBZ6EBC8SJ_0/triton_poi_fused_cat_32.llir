; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 10, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 2, !dbg !12
  %22 = and i32 %21, 508, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 512, !dbg !13
  %25 = icmp slt i32 %23, 86528, !dbg !14
  %26 = icmp slt i32 %24, 86528, !dbg !14
  %.frozen = freeze i32 %23, !dbg !15
  %27 = sdiv i32 %.frozen, 128, !dbg !15
  %28 = mul i32 %27, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %28, !dbg !16
  %29 = sdiv i32 %24, 128, !dbg !15
  %30 = icmp slt i32 %.decomposed, 32, !dbg !17
  %31 = shl nsw i32 %27, 5, !dbg !18
  %32 = shl nsw i32 %29, 5, !dbg !18
  %33 = add nsw i32 %31, %.decomposed, !dbg !19
  %34 = add nsw i32 %32, %.decomposed, !dbg !19
  %35 = sext i32 %33 to i64, !dbg !20
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !20
  %37 = sext i32 %34 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = and i1 %25, %30, !dbg !21
  %40 = and i1 %26, %30, !dbg !21
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !22
  %43 = sext i32 %.decomposed to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = fadd float %53, 0x3F50624DE0000000, !dbg !27
  %67 = fadd float %54, 0x3F50624DE0000000, !dbg !27
  %68 = fadd float %55, 0x3F50624DE0000000, !dbg !27
  %69 = fadd float %56, 0x3F50624DE0000000, !dbg !27
  %70 = fadd float %62, 0x3F50624DE0000000, !dbg !27
  %71 = fadd float %63, 0x3F50624DE0000000, !dbg !27
  %72 = fadd float %64, 0x3F50624DE0000000, !dbg !27
  %73 = fadd float %65, 0x3F50624DE0000000, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %74, 0, !dbg !28
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %75, 0, !dbg !28
  br i1 %.not.i, label %81, label %76, !dbg !28

76:                                               ; preds = %17
  br i1 %.not1.i, label %79, label %77, !dbg !28

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

81:                                               ; preds = %17
  br i1 %.not1.i, label %84, label %82, !dbg !28

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %86, 0, !dbg !28
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !28
  br i1 %.not.i1, label %93, label %88, !dbg !28

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !28

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !28

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %98, 0, !dbg !28
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !28
  br i1 %.not.i6, label %105, label %100, !dbg !28

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !28

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !28

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %110, 0, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !28
  br i1 %.not.i11, label %117, label %112, !dbg !28

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !28

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !28

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !28
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %122, 0, !dbg !28
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %123, 0, !dbg !28
  br i1 %.not.i16, label %129, label %124, !dbg !28

124:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %127, label %125, !dbg !28

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

129:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %132, label %130, !dbg !28

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %125, %127, %130, %132
  %.0.i18 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !28
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %134, 0, !dbg !28
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %135, 0, !dbg !28
  br i1 %.not.i21, label %141, label %136, !dbg !28

136:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %139, label %137, !dbg !28

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

141:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %144, label %142, !dbg !28

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %137, %139, %142, %144
  %.0.i23 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !28
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %146, 0, !dbg !28
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %147, 0, !dbg !28
  br i1 %.not.i26, label %153, label %148, !dbg !28

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !28

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

153:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %156, label %154, !dbg !28

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %149, %151, %154, %156
  %.0.i28 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !28
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %158, 0, !dbg !28
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %159, 0, !dbg !28
  br i1 %.not.i31, label %165, label %160, !dbg !28

160:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %163, label %161, !dbg !28

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

165:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %168, label %166, !dbg !28

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %161, %163, %166, %168
  %.0.i33 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !28
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !29
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !29
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !29
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !29
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %43, !dbg !30
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !31
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %178, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !31
  %181 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !32
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %181, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40, i32 0, i1 %40) #3, !dbg !33
  %184 = and i32 %.decomposed, -32, !dbg !34
  %185 = icmp eq i32 %184, 32, !dbg !34
  %186 = add nsw i32 %.decomposed, -32, !dbg !35
  %187 = add nsw i32 %31, %186, !dbg !36
  %188 = add nsw i32 %32, %186, !dbg !36
  %189 = sext i32 %187 to i64, !dbg !37
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %189, !dbg !37
  %191 = sext i32 %188 to i64, !dbg !37
  %192 = getelementptr float, ptr addrspace(1) %5, i64 %191, !dbg !37
  %193 = and i1 %25, %185, !dbg !38
  %194 = and i1 %26, %185, !dbg !38
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #3, !dbg !39
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194) #3, !dbg !39
  %197 = sext i32 %186 to i64, !dbg !40
  %198 = getelementptr float, ptr addrspace(1) %6, i64 %197, !dbg !40
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #3, !dbg !41
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %198, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194) #3, !dbg !41
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %197, !dbg !42
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #3, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !43
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !43
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !43
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !43
  %207 = bitcast i32 %203 to float, !dbg !43
  %208 = bitcast i32 %204 to float, !dbg !43
  %209 = bitcast i32 %205 to float, !dbg !43
  %210 = bitcast i32 %206 to float, !dbg !43
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194) #3, !dbg !43
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !43
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !43
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !43
  %216 = bitcast i32 %212 to float, !dbg !43
  %217 = bitcast i32 %213 to float, !dbg !43
  %218 = bitcast i32 %214 to float, !dbg !43
  %219 = bitcast i32 %215 to float, !dbg !43
  %220 = fadd float %207, 0x3F50624DE0000000, !dbg !44
  %221 = fadd float %208, 0x3F50624DE0000000, !dbg !44
  %222 = fadd float %209, 0x3F50624DE0000000, !dbg !44
  %223 = fadd float %210, 0x3F50624DE0000000, !dbg !44
  %224 = fadd float %216, 0x3F50624DE0000000, !dbg !44
  %225 = fadd float %217, 0x3F50624DE0000000, !dbg !44
  %226 = fadd float %218, 0x3F50624DE0000000, !dbg !44
  %227 = fadd float %219, 0x3F50624DE0000000, !dbg !44
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i36 = icmp eq i32 %228, 0, !dbg !45
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i39 = icmp eq i32 %229, 0, !dbg !45
  br i1 %.not.i36, label %235, label %230, !dbg !45

230:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %233, label %231, !dbg !45

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

235:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %238, label %236, !dbg !45

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !45
  br label %__nv_sqrtf.exit40, !dbg !45

__nv_sqrtf.exit40:                                ; preds = %231, %233, %236, %238
  %.0.i38 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !45
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i41 = icmp eq i32 %240, 0, !dbg !45
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i44 = icmp eq i32 %241, 0, !dbg !45
  br i1 %.not.i41, label %247, label %242, !dbg !45

242:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %245, label %243, !dbg !45

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

247:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %250, label %248, !dbg !45

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !45
  br label %__nv_sqrtf.exit45, !dbg !45

__nv_sqrtf.exit45:                                ; preds = %243, %245, %248, %250
  %.0.i43 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !45
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i46 = icmp eq i32 %252, 0, !dbg !45
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i49 = icmp eq i32 %253, 0, !dbg !45
  br i1 %.not.i46, label %259, label %254, !dbg !45

254:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %257, label %255, !dbg !45

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

259:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %262, label %260, !dbg !45

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !45
  br label %__nv_sqrtf.exit50, !dbg !45

__nv_sqrtf.exit50:                                ; preds = %255, %257, %260, %262
  %.0.i48 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !45
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i51 = icmp eq i32 %264, 0, !dbg !45
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i54 = icmp eq i32 %265, 0, !dbg !45
  br i1 %.not.i51, label %271, label %266, !dbg !45

266:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %269, label %267, !dbg !45

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

271:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %274, label %272, !dbg !45

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !45
  br label %__nv_sqrtf.exit55, !dbg !45

__nv_sqrtf.exit55:                                ; preds = %267, %269, %272, %274
  %.0.i53 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !45
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i56 = icmp eq i32 %276, 0, !dbg !45
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i59 = icmp eq i32 %277, 0, !dbg !45
  br i1 %.not.i56, label %283, label %278, !dbg !45

278:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %281, label %279, !dbg !45

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

283:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %286, label %284, !dbg !45

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !45
  br label %__nv_sqrtf.exit60, !dbg !45

__nv_sqrtf.exit60:                                ; preds = %279, %281, %284, %286
  %.0.i58 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !45
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i61 = icmp eq i32 %288, 0, !dbg !45
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i64 = icmp eq i32 %289, 0, !dbg !45
  br i1 %.not.i61, label %295, label %290, !dbg !45

290:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %293, label %291, !dbg !45

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

295:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %298, label %296, !dbg !45

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #3, !dbg !45
  br label %__nv_sqrtf.exit65, !dbg !45

__nv_sqrtf.exit65:                                ; preds = %291, %293, %296, %298
  %.0.i63 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !45
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i66 = icmp eq i32 %300, 0, !dbg !45
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i69 = icmp eq i32 %301, 0, !dbg !45
  br i1 %.not.i66, label %307, label %302, !dbg !45

302:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %305, label %303, !dbg !45

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

307:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %310, label %308, !dbg !45

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !45
  br label %__nv_sqrtf.exit70, !dbg !45

__nv_sqrtf.exit70:                                ; preds = %303, %305, %308, %310
  %.0.i68 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !45
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i71 = icmp eq i32 %312, 0, !dbg !45
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i74 = icmp eq i32 %313, 0, !dbg !45
  br i1 %.not.i71, label %319, label %314, !dbg !45

314:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %317, label %315, !dbg !45

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

319:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %322, label %320, !dbg !45

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !45
  br label %__nv_sqrtf.exit75, !dbg !45

__nv_sqrtf.exit75:                                ; preds = %315, %317, %320, %322
  %.0.i73 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !45
  %324 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !46
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !46
  %326 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !46
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !46
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !46
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !46
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !46
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !46
  %332 = getelementptr float, ptr addrspace(1) %8, i64 %197, !dbg !47
  %333 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #3, !dbg !48
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %332, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194) #3, !dbg !48
  %335 = getelementptr float, ptr addrspace(1) %9, i64 %197, !dbg !49
  %336 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %335, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193, i32 0, i1 %193) #3, !dbg !50
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %335, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194, i32 0, i1 %194) #3, !dbg !50
  %338 = icmp sgt i32 %.decomposed, 63, !dbg !51
  %339 = shl nsw i32 %27, 6, !dbg !52
  %340 = shl nsw i32 %29, 6, !dbg !52
  %341 = add nsw i32 %.decomposed, -64, !dbg !53
  %342 = add nsw i32 %339, %341, !dbg !54
  %343 = add nsw i32 %340, %341, !dbg !54
  %344 = sext i32 %342 to i64, !dbg !55
  %345 = getelementptr float, ptr addrspace(1) %10, i64 %344, !dbg !55
  %346 = sext i32 %343 to i64, !dbg !55
  %347 = getelementptr float, ptr addrspace(1) %10, i64 %346, !dbg !55
  %348 = and i1 %25, %338, !dbg !56
  %349 = and i1 %26, %338, !dbg !56
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %345, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348) #3, !dbg !57
  %351 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %347, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349) #3, !dbg !57
  %352 = sext i32 %341 to i64, !dbg !58
  %353 = getelementptr float, ptr addrspace(1) %11, i64 %352, !dbg !58
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %353, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348) #3, !dbg !59
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %353, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349) #3, !dbg !59
  %356 = getelementptr float, ptr addrspace(1) %12, i64 %352, !dbg !60
  %357 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %356, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348) #3, !dbg !61
  %358 = extractvalue { i32, i32, i32, i32 } %357, 0, !dbg !61
  %359 = extractvalue { i32, i32, i32, i32 } %357, 1, !dbg !61
  %360 = extractvalue { i32, i32, i32, i32 } %357, 2, !dbg !61
  %361 = extractvalue { i32, i32, i32, i32 } %357, 3, !dbg !61
  %362 = bitcast i32 %358 to float, !dbg !61
  %363 = bitcast i32 %359 to float, !dbg !61
  %364 = bitcast i32 %360 to float, !dbg !61
  %365 = bitcast i32 %361 to float, !dbg !61
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %356, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349) #3, !dbg !61
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !61
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !61
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !61
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !61
  %371 = bitcast i32 %367 to float, !dbg !61
  %372 = bitcast i32 %368 to float, !dbg !61
  %373 = bitcast i32 %369 to float, !dbg !61
  %374 = bitcast i32 %370 to float, !dbg !61
  %375 = fadd float %362, 0x3F50624DE0000000, !dbg !62
  %376 = fadd float %363, 0x3F50624DE0000000, !dbg !62
  %377 = fadd float %364, 0x3F50624DE0000000, !dbg !62
  %378 = fadd float %365, 0x3F50624DE0000000, !dbg !62
  %379 = fadd float %371, 0x3F50624DE0000000, !dbg !62
  %380 = fadd float %372, 0x3F50624DE0000000, !dbg !62
  %381 = fadd float %373, 0x3F50624DE0000000, !dbg !62
  %382 = fadd float %374, 0x3F50624DE0000000, !dbg !62
  %383 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i76 = icmp eq i32 %383, 0, !dbg !63
  %384 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i79 = icmp eq i32 %384, 0, !dbg !63
  br i1 %.not.i76, label %390, label %385, !dbg !63

385:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %388, label %386, !dbg !63

386:                                              ; preds = %385
  %387 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %375) #3, !dbg !63
  br label %__nv_sqrtf.exit80, !dbg !63

388:                                              ; preds = %385
  %389 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %375) #3, !dbg !63
  br label %__nv_sqrtf.exit80, !dbg !63

390:                                              ; preds = %__nv_sqrtf.exit75
  br i1 %.not1.i79, label %393, label %391, !dbg !63

391:                                              ; preds = %390
  %392 = tail call float @llvm.nvvm.sqrt.rn.f(float %375) #3, !dbg !63
  br label %__nv_sqrtf.exit80, !dbg !63

393:                                              ; preds = %390
  %394 = tail call float @llvm.nvvm.sqrt.approx.f(float %375) #3, !dbg !63
  br label %__nv_sqrtf.exit80, !dbg !63

__nv_sqrtf.exit80:                                ; preds = %386, %388, %391, %393
  %.0.i78 = phi float [ %387, %386 ], [ %389, %388 ], [ %392, %391 ], [ %394, %393 ], !dbg !63
  %395 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i81 = icmp eq i32 %395, 0, !dbg !63
  %396 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i84 = icmp eq i32 %396, 0, !dbg !63
  br i1 %.not.i81, label %402, label %397, !dbg !63

397:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %400, label %398, !dbg !63

398:                                              ; preds = %397
  %399 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %376) #3, !dbg !63
  br label %__nv_sqrtf.exit85, !dbg !63

400:                                              ; preds = %397
  %401 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %376) #3, !dbg !63
  br label %__nv_sqrtf.exit85, !dbg !63

402:                                              ; preds = %__nv_sqrtf.exit80
  br i1 %.not1.i84, label %405, label %403, !dbg !63

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.f(float %376) #3, !dbg !63
  br label %__nv_sqrtf.exit85, !dbg !63

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.f(float %376) #3, !dbg !63
  br label %__nv_sqrtf.exit85, !dbg !63

__nv_sqrtf.exit85:                                ; preds = %398, %400, %403, %405
  %.0.i83 = phi float [ %399, %398 ], [ %401, %400 ], [ %404, %403 ], [ %406, %405 ], !dbg !63
  %407 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i86 = icmp eq i32 %407, 0, !dbg !63
  %408 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i89 = icmp eq i32 %408, 0, !dbg !63
  br i1 %.not.i86, label %414, label %409, !dbg !63

409:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %412, label %410, !dbg !63

410:                                              ; preds = %409
  %411 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %377) #3, !dbg !63
  br label %__nv_sqrtf.exit90, !dbg !63

412:                                              ; preds = %409
  %413 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %377) #3, !dbg !63
  br label %__nv_sqrtf.exit90, !dbg !63

414:                                              ; preds = %__nv_sqrtf.exit85
  br i1 %.not1.i89, label %417, label %415, !dbg !63

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.f(float %377) #3, !dbg !63
  br label %__nv_sqrtf.exit90, !dbg !63

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.f(float %377) #3, !dbg !63
  br label %__nv_sqrtf.exit90, !dbg !63

__nv_sqrtf.exit90:                                ; preds = %410, %412, %415, %417
  %.0.i88 = phi float [ %411, %410 ], [ %413, %412 ], [ %416, %415 ], [ %418, %417 ], !dbg !63
  %419 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i91 = icmp eq i32 %419, 0, !dbg !63
  %420 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i94 = icmp eq i32 %420, 0, !dbg !63
  br i1 %.not.i91, label %426, label %421, !dbg !63

421:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %424, label %422, !dbg !63

422:                                              ; preds = %421
  %423 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %378) #3, !dbg !63
  br label %__nv_sqrtf.exit95, !dbg !63

424:                                              ; preds = %421
  %425 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %378) #3, !dbg !63
  br label %__nv_sqrtf.exit95, !dbg !63

426:                                              ; preds = %__nv_sqrtf.exit90
  br i1 %.not1.i94, label %429, label %427, !dbg !63

427:                                              ; preds = %426
  %428 = tail call float @llvm.nvvm.sqrt.rn.f(float %378) #3, !dbg !63
  br label %__nv_sqrtf.exit95, !dbg !63

429:                                              ; preds = %426
  %430 = tail call float @llvm.nvvm.sqrt.approx.f(float %378) #3, !dbg !63
  br label %__nv_sqrtf.exit95, !dbg !63

__nv_sqrtf.exit95:                                ; preds = %422, %424, %427, %429
  %.0.i93 = phi float [ %423, %422 ], [ %425, %424 ], [ %428, %427 ], [ %430, %429 ], !dbg !63
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i96 = icmp eq i32 %431, 0, !dbg !63
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i99 = icmp eq i32 %432, 0, !dbg !63
  br i1 %.not.i96, label %438, label %433, !dbg !63

433:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %436, label %434, !dbg !63

434:                                              ; preds = %433
  %435 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %379) #3, !dbg !63
  br label %__nv_sqrtf.exit100, !dbg !63

436:                                              ; preds = %433
  %437 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %379) #3, !dbg !63
  br label %__nv_sqrtf.exit100, !dbg !63

438:                                              ; preds = %__nv_sqrtf.exit95
  br i1 %.not1.i99, label %441, label %439, !dbg !63

439:                                              ; preds = %438
  %440 = tail call float @llvm.nvvm.sqrt.rn.f(float %379) #3, !dbg !63
  br label %__nv_sqrtf.exit100, !dbg !63

441:                                              ; preds = %438
  %442 = tail call float @llvm.nvvm.sqrt.approx.f(float %379) #3, !dbg !63
  br label %__nv_sqrtf.exit100, !dbg !63

__nv_sqrtf.exit100:                               ; preds = %434, %436, %439, %441
  %.0.i98 = phi float [ %435, %434 ], [ %437, %436 ], [ %440, %439 ], [ %442, %441 ], !dbg !63
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i101 = icmp eq i32 %443, 0, !dbg !63
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i104 = icmp eq i32 %444, 0, !dbg !63
  br i1 %.not.i101, label %450, label %445, !dbg !63

445:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %448, label %446, !dbg !63

446:                                              ; preds = %445
  %447 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %380) #3, !dbg !63
  br label %__nv_sqrtf.exit105, !dbg !63

448:                                              ; preds = %445
  %449 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %380) #3, !dbg !63
  br label %__nv_sqrtf.exit105, !dbg !63

450:                                              ; preds = %__nv_sqrtf.exit100
  br i1 %.not1.i104, label %453, label %451, !dbg !63

451:                                              ; preds = %450
  %452 = tail call float @llvm.nvvm.sqrt.rn.f(float %380) #3, !dbg !63
  br label %__nv_sqrtf.exit105, !dbg !63

453:                                              ; preds = %450
  %454 = tail call float @llvm.nvvm.sqrt.approx.f(float %380) #3, !dbg !63
  br label %__nv_sqrtf.exit105, !dbg !63

__nv_sqrtf.exit105:                               ; preds = %446, %448, %451, %453
  %.0.i103 = phi float [ %447, %446 ], [ %449, %448 ], [ %452, %451 ], [ %454, %453 ], !dbg !63
  %455 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i106 = icmp eq i32 %455, 0, !dbg !63
  %456 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i109 = icmp eq i32 %456, 0, !dbg !63
  br i1 %.not.i106, label %462, label %457, !dbg !63

457:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %460, label %458, !dbg !63

458:                                              ; preds = %457
  %459 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %381) #3, !dbg !63
  br label %__nv_sqrtf.exit110, !dbg !63

460:                                              ; preds = %457
  %461 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %381) #3, !dbg !63
  br label %__nv_sqrtf.exit110, !dbg !63

462:                                              ; preds = %__nv_sqrtf.exit105
  br i1 %.not1.i109, label %465, label %463, !dbg !63

463:                                              ; preds = %462
  %464 = tail call float @llvm.nvvm.sqrt.rn.f(float %381) #3, !dbg !63
  br label %__nv_sqrtf.exit110, !dbg !63

465:                                              ; preds = %462
  %466 = tail call float @llvm.nvvm.sqrt.approx.f(float %381) #3, !dbg !63
  br label %__nv_sqrtf.exit110, !dbg !63

__nv_sqrtf.exit110:                               ; preds = %458, %460, %463, %465
  %.0.i108 = phi float [ %459, %458 ], [ %461, %460 ], [ %464, %463 ], [ %466, %465 ], !dbg !63
  %467 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !63
  %.not.i111 = icmp eq i32 %467, 0, !dbg !63
  %468 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !63
  %.not1.i114 = icmp eq i32 %468, 0, !dbg !63
  br i1 %.not.i111, label %474, label %469, !dbg !63

469:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %472, label %470, !dbg !63

470:                                              ; preds = %469
  %471 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %382) #3, !dbg !63
  br label %__nv_sqrtf.exit115, !dbg !63

472:                                              ; preds = %469
  %473 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %382) #3, !dbg !63
  br label %__nv_sqrtf.exit115, !dbg !63

474:                                              ; preds = %__nv_sqrtf.exit110
  br i1 %.not1.i114, label %477, label %475, !dbg !63

475:                                              ; preds = %474
  %476 = tail call float @llvm.nvvm.sqrt.rn.f(float %382) #3, !dbg !63
  br label %__nv_sqrtf.exit115, !dbg !63

477:                                              ; preds = %474
  %478 = tail call float @llvm.nvvm.sqrt.approx.f(float %382) #3, !dbg !63
  br label %__nv_sqrtf.exit115, !dbg !63

__nv_sqrtf.exit115:                               ; preds = %470, %472, %475, %477
  %.0.i113 = phi float [ %471, %470 ], [ %473, %472 ], [ %476, %475 ], [ %478, %477 ], !dbg !63
  %479 = extractvalue { i32, i32, i32, i32 } %351, 3, !dbg !57
  %480 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !59
  %481 = extractvalue { i32, i32, i32, i32 } %351, 2, !dbg !57
  %482 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !59
  %483 = extractvalue { i32, i32, i32, i32 } %351, 1, !dbg !57
  %484 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !59
  %485 = extractvalue { i32, i32, i32, i32 } %351, 0, !dbg !57
  %486 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !59
  %487 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !57
  %488 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !59
  %489 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !57
  %490 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !59
  %491 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !57
  %492 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !59
  %493 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !57
  %494 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !59
  %495 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !39
  %496 = bitcast i32 %495 to float, !dbg !39
  %497 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !41
  %498 = bitcast i32 %497 to float, !dbg !41
  %499 = fsub float %496, %498, !dbg !64
  %500 = fmul float %499, %331, !dbg !65
  %501 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !48
  %502 = bitcast i32 %501 to float, !dbg !48
  %503 = fmul float %500, %502, !dbg !66
  %504 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !50
  %505 = bitcast i32 %504 to float, !dbg !50
  %506 = fadd float %503, %505, !dbg !67
  %507 = fcmp olt float %506, 0.000000e+00, !dbg !68
  %508 = select i1 %507, float 0.000000e+00, float %506, !dbg !72
  %509 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !39
  %510 = bitcast i32 %509 to float, !dbg !39
  %511 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !41
  %512 = bitcast i32 %511 to float, !dbg !41
  %513 = fsub float %510, %512, !dbg !64
  %514 = fmul float %513, %330, !dbg !65
  %515 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !48
  %516 = bitcast i32 %515 to float, !dbg !48
  %517 = fmul float %514, %516, !dbg !66
  %518 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !50
  %519 = bitcast i32 %518 to float, !dbg !50
  %520 = fadd float %517, %519, !dbg !67
  %521 = fcmp olt float %520, 0.000000e+00, !dbg !68
  %522 = select i1 %521, float 0.000000e+00, float %520, !dbg !72
  %523 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !39
  %524 = bitcast i32 %523 to float, !dbg !39
  %525 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !41
  %526 = bitcast i32 %525 to float, !dbg !41
  %527 = fsub float %524, %526, !dbg !64
  %528 = fmul float %527, %329, !dbg !65
  %529 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !48
  %530 = bitcast i32 %529 to float, !dbg !48
  %531 = fmul float %528, %530, !dbg !66
  %532 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !50
  %533 = bitcast i32 %532 to float, !dbg !50
  %534 = fadd float %531, %533, !dbg !67
  %535 = fcmp olt float %534, 0.000000e+00, !dbg !68
  %536 = select i1 %535, float 0.000000e+00, float %534, !dbg !72
  %537 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !39
  %538 = bitcast i32 %537 to float, !dbg !39
  %539 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !41
  %540 = bitcast i32 %539 to float, !dbg !41
  %541 = fsub float %538, %540, !dbg !64
  %542 = fmul float %541, %328, !dbg !65
  %543 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !48
  %544 = bitcast i32 %543 to float, !dbg !48
  %545 = fmul float %542, %544, !dbg !66
  %546 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !50
  %547 = bitcast i32 %546 to float, !dbg !50
  %548 = fadd float %545, %547, !dbg !67
  %549 = fcmp olt float %548, 0.000000e+00, !dbg !68
  %550 = select i1 %549, float 0.000000e+00, float %548, !dbg !72
  %551 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !39
  %552 = bitcast i32 %551 to float, !dbg !39
  %553 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !41
  %554 = bitcast i32 %553 to float, !dbg !41
  %555 = fsub float %552, %554, !dbg !64
  %556 = fmul float %555, %327, !dbg !65
  %557 = extractvalue { i32, i32, i32, i32 } %333, 3, !dbg !48
  %558 = bitcast i32 %557 to float, !dbg !48
  %559 = fmul float %556, %558, !dbg !66
  %560 = extractvalue { i32, i32, i32, i32 } %336, 3, !dbg !50
  %561 = bitcast i32 %560 to float, !dbg !50
  %562 = fadd float %559, %561, !dbg !67
  %563 = fcmp olt float %562, 0.000000e+00, !dbg !68
  %564 = select i1 %563, float 0.000000e+00, float %562, !dbg !72
  %565 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !39
  %566 = bitcast i32 %565 to float, !dbg !39
  %567 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !41
  %568 = bitcast i32 %567 to float, !dbg !41
  %569 = fsub float %566, %568, !dbg !64
  %570 = fmul float %569, %326, !dbg !65
  %571 = extractvalue { i32, i32, i32, i32 } %333, 2, !dbg !48
  %572 = bitcast i32 %571 to float, !dbg !48
  %573 = fmul float %570, %572, !dbg !66
  %574 = extractvalue { i32, i32, i32, i32 } %336, 2, !dbg !50
  %575 = bitcast i32 %574 to float, !dbg !50
  %576 = fadd float %573, %575, !dbg !67
  %577 = fcmp olt float %576, 0.000000e+00, !dbg !68
  %578 = select i1 %577, float 0.000000e+00, float %576, !dbg !72
  %579 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !39
  %580 = bitcast i32 %579 to float, !dbg !39
  %581 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !41
  %582 = bitcast i32 %581 to float, !dbg !41
  %583 = fsub float %580, %582, !dbg !64
  %584 = fmul float %583, %325, !dbg !65
  %585 = extractvalue { i32, i32, i32, i32 } %333, 1, !dbg !48
  %586 = bitcast i32 %585 to float, !dbg !48
  %587 = fmul float %584, %586, !dbg !66
  %588 = extractvalue { i32, i32, i32, i32 } %336, 1, !dbg !50
  %589 = bitcast i32 %588 to float, !dbg !50
  %590 = fadd float %587, %589, !dbg !67
  %591 = fcmp olt float %590, 0.000000e+00, !dbg !68
  %592 = select i1 %591, float 0.000000e+00, float %590, !dbg !72
  %593 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !39
  %594 = bitcast i32 %593 to float, !dbg !39
  %595 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !41
  %596 = bitcast i32 %595 to float, !dbg !41
  %597 = fsub float %594, %596, !dbg !64
  %598 = fmul float %597, %324, !dbg !65
  %599 = extractvalue { i32, i32, i32, i32 } %333, 0, !dbg !48
  %600 = bitcast i32 %599 to float, !dbg !48
  %601 = fmul float %598, %600, !dbg !66
  %602 = extractvalue { i32, i32, i32, i32 } %336, 0, !dbg !50
  %603 = bitcast i32 %602 to float, !dbg !50
  %604 = fadd float %601, %603, !dbg !67
  %605 = fcmp olt float %604, 0.000000e+00, !dbg !68
  %606 = select i1 %605, float 0.000000e+00, float %604, !dbg !72
  %607 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %608 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %609 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !31
  %610 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !33
  %611 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %612 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %613 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !31
  %614 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !33
  %615 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %616 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %617 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !31
  %618 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !33
  %619 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %620 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %621 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !31
  %622 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !33
  %623 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %624 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %625 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !31
  %626 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !33
  %627 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %628 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %629 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !31
  %630 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !33
  %631 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %632 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %633 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !31
  %634 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !33
  %635 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %636 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %637 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !31
  %638 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !33
  %639 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i78) #3, !dbg !73
  %640 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i83) #3, !dbg !73
  %641 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i88) #3, !dbg !73
  %642 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i93) #3, !dbg !73
  %643 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i98) #3, !dbg !73
  %644 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i103) #3, !dbg !73
  %645 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i108) #3, !dbg !73
  %646 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i113) #3, !dbg !73
  %647 = getelementptr float, ptr addrspace(1) %13, i64 %352, !dbg !74
  %648 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %647, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348) #3, !dbg !75
  %649 = extractvalue { i32, i32, i32, i32 } %648, 0, !dbg !75
  %650 = extractvalue { i32, i32, i32, i32 } %648, 1, !dbg !75
  %651 = extractvalue { i32, i32, i32, i32 } %648, 2, !dbg !75
  %652 = extractvalue { i32, i32, i32, i32 } %648, 3, !dbg !75
  %653 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %647, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349) #3, !dbg !75
  %654 = extractvalue { i32, i32, i32, i32 } %653, 0, !dbg !75
  %655 = extractvalue { i32, i32, i32, i32 } %653, 1, !dbg !75
  %656 = extractvalue { i32, i32, i32, i32 } %653, 2, !dbg !75
  %657 = extractvalue { i32, i32, i32, i32 } %653, 3, !dbg !75
  %658 = getelementptr float, ptr addrspace(1) %14, i64 %352, !dbg !76
  %659 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %658, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348, i32 0, i1 %348) #3, !dbg !77
  %660 = extractvalue { i32, i32, i32, i32 } %659, 0, !dbg !77
  %661 = extractvalue { i32, i32, i32, i32 } %659, 1, !dbg !77
  %662 = extractvalue { i32, i32, i32, i32 } %659, 2, !dbg !77
  %663 = extractvalue { i32, i32, i32, i32 } %659, 3, !dbg !77
  %664 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %658, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349, i32 0, i1 %349) #3, !dbg !77
  %665 = extractvalue { i32, i32, i32, i32 } %664, 0, !dbg !77
  %666 = extractvalue { i32, i32, i32, i32 } %664, 1, !dbg !77
  %667 = extractvalue { i32, i32, i32, i32 } %664, 2, !dbg !77
  %668 = extractvalue { i32, i32, i32, i32 } %664, 3, !dbg !77
  %669 = insertelement <16 x i32> poison, i32 %479, i64 0, !dbg !57
  %670 = insertelement <16 x i32> %669, i32 %481, i64 1, !dbg !57
  %671 = insertelement <16 x i32> %670, i32 %483, i64 2, !dbg !57
  %672 = insertelement <16 x i32> %671, i32 %485, i64 3, !dbg !57
  %673 = insertelement <16 x i32> %672, i32 %487, i64 4, !dbg !57
  %674 = insertelement <16 x i32> %673, i32 %489, i64 5, !dbg !57
  %675 = insertelement <16 x i32> %674, i32 %491, i64 6, !dbg !57
  %676 = insertelement <16 x i32> %675, i32 %493, i64 7, !dbg !57
  %677 = insertelement <16 x i32> %676, i32 %635, i64 8, !dbg !57
  %678 = insertelement <16 x i32> %677, i32 %631, i64 9, !dbg !57
  %679 = insertelement <16 x i32> %678, i32 %627, i64 10, !dbg !57
  %680 = insertelement <16 x i32> %679, i32 %623, i64 11, !dbg !57
  %681 = insertelement <16 x i32> %680, i32 %619, i64 12, !dbg !57
  %682 = insertelement <16 x i32> %681, i32 %615, i64 13, !dbg !57
  %683 = insertelement <16 x i32> %682, i32 %611, i64 14, !dbg !57
  %684 = insertelement <16 x i32> %683, i32 %607, i64 15, !dbg !57
  %685 = bitcast <16 x i32> %684 to <16 x float>, !dbg !57
  %686 = insertelement <16 x i32> poison, i32 %480, i64 0, !dbg !59
  %687 = insertelement <16 x i32> %686, i32 %482, i64 1, !dbg !59
  %688 = insertelement <16 x i32> %687, i32 %484, i64 2, !dbg !59
  %689 = insertelement <16 x i32> %688, i32 %486, i64 3, !dbg !59
  %690 = insertelement <16 x i32> %689, i32 %488, i64 4, !dbg !59
  %691 = insertelement <16 x i32> %690, i32 %490, i64 5, !dbg !59
  %692 = insertelement <16 x i32> %691, i32 %492, i64 6, !dbg !59
  %693 = insertelement <16 x i32> %692, i32 %494, i64 7, !dbg !59
  %694 = insertelement <16 x i32> %693, i32 %636, i64 8, !dbg !59
  %695 = insertelement <16 x i32> %694, i32 %632, i64 9, !dbg !59
  %696 = insertelement <16 x i32> %695, i32 %628, i64 10, !dbg !59
  %697 = insertelement <16 x i32> %696, i32 %624, i64 11, !dbg !59
  %698 = insertelement <16 x i32> %697, i32 %620, i64 12, !dbg !59
  %699 = insertelement <16 x i32> %698, i32 %616, i64 13, !dbg !59
  %700 = insertelement <16 x i32> %699, i32 %612, i64 14, !dbg !59
  %701 = insertelement <16 x i32> %700, i32 %608, i64 15, !dbg !59
  %702 = bitcast <16 x i32> %701 to <16 x float>, !dbg !59
  %703 = fsub <16 x float> %685, %702, !dbg !78
  %704 = insertelement <16 x float> poison, float %646, i64 0, !dbg !79
  %705 = insertelement <16 x float> %704, float %645, i64 1, !dbg !79
  %706 = insertelement <16 x float> %705, float %644, i64 2, !dbg !79
  %707 = insertelement <16 x float> %706, float %643, i64 3, !dbg !79
  %708 = insertelement <16 x float> %707, float %642, i64 4, !dbg !79
  %709 = insertelement <16 x float> %708, float %641, i64 5, !dbg !79
  %710 = insertelement <16 x float> %709, float %640, i64 6, !dbg !79
  %711 = insertelement <16 x float> %710, float %639, i64 7, !dbg !79
  %712 = insertelement <16 x float> %711, float %170, i64 8, !dbg !79
  %713 = insertelement <16 x float> %712, float %171, i64 9, !dbg !79
  %714 = insertelement <16 x float> %713, float %172, i64 10, !dbg !79
  %715 = insertelement <16 x float> %714, float %173, i64 11, !dbg !79
  %716 = insertelement <16 x float> %715, float %174, i64 12, !dbg !79
  %717 = insertelement <16 x float> %716, float %175, i64 13, !dbg !79
  %718 = insertelement <16 x float> %717, float %176, i64 14, !dbg !79
  %719 = insertelement <16 x float> %718, float %177, i64 15, !dbg !79
  %720 = fmul <16 x float> %703, %719, !dbg !79
  %721 = insertelement <16 x i32> poison, i32 %657, i64 0, !dbg !75
  %722 = insertelement <16 x i32> %721, i32 %656, i64 1, !dbg !75
  %723 = insertelement <16 x i32> %722, i32 %655, i64 2, !dbg !75
  %724 = insertelement <16 x i32> %723, i32 %654, i64 3, !dbg !75
  %725 = insertelement <16 x i32> %724, i32 %652, i64 4, !dbg !75
  %726 = insertelement <16 x i32> %725, i32 %651, i64 5, !dbg !75
  %727 = insertelement <16 x i32> %726, i32 %650, i64 6, !dbg !75
  %728 = insertelement <16 x i32> %727, i32 %649, i64 7, !dbg !75
  %729 = insertelement <16 x i32> %728, i32 %637, i64 8, !dbg !75
  %730 = insertelement <16 x i32> %729, i32 %633, i64 9, !dbg !75
  %731 = insertelement <16 x i32> %730, i32 %629, i64 10, !dbg !75
  %732 = insertelement <16 x i32> %731, i32 %625, i64 11, !dbg !75
  %733 = insertelement <16 x i32> %732, i32 %621, i64 12, !dbg !75
  %734 = insertelement <16 x i32> %733, i32 %617, i64 13, !dbg !75
  %735 = insertelement <16 x i32> %734, i32 %613, i64 14, !dbg !75
  %736 = insertelement <16 x i32> %735, i32 %609, i64 15, !dbg !75
  %737 = bitcast <16 x i32> %736 to <16 x float>, !dbg !75
  %738 = fmul <16 x float> %720, %737, !dbg !80
  %739 = insertelement <16 x i32> poison, i32 %668, i64 0, !dbg !77
  %740 = insertelement <16 x i32> %739, i32 %667, i64 1, !dbg !77
  %741 = insertelement <16 x i32> %740, i32 %666, i64 2, !dbg !77
  %742 = insertelement <16 x i32> %741, i32 %665, i64 3, !dbg !77
  %743 = insertelement <16 x i32> %742, i32 %663, i64 4, !dbg !77
  %744 = insertelement <16 x i32> %743, i32 %662, i64 5, !dbg !77
  %745 = insertelement <16 x i32> %744, i32 %661, i64 6, !dbg !77
  %746 = insertelement <16 x i32> %745, i32 %660, i64 7, !dbg !77
  %747 = insertelement <16 x i32> %746, i32 %638, i64 8, !dbg !77
  %748 = insertelement <16 x i32> %747, i32 %634, i64 9, !dbg !77
  %749 = insertelement <16 x i32> %748, i32 %630, i64 10, !dbg !77
  %750 = insertelement <16 x i32> %749, i32 %626, i64 11, !dbg !77
  %751 = insertelement <16 x i32> %750, i32 %622, i64 12, !dbg !77
  %752 = insertelement <16 x i32> %751, i32 %618, i64 13, !dbg !77
  %753 = insertelement <16 x i32> %752, i32 %614, i64 14, !dbg !77
  %754 = insertelement <16 x i32> %753, i32 %610, i64 15, !dbg !77
  %755 = bitcast <16 x i32> %754 to <16 x float>, !dbg !77
  %756 = fadd <16 x float> %738, %755, !dbg !81
  %757 = fcmp olt <16 x float> %756, zeroinitializer, !dbg !82
  %758 = extractelement <16 x i1> %757, i64 15, !dbg !84
  %759 = extractelement <16 x float> %756, i64 15, !dbg !84
  %760 = select i1 %758, float 0.000000e+00, float %759, !dbg !84
  %761 = extractelement <16 x i1> %757, i64 14, !dbg !84
  %762 = extractelement <16 x float> %756, i64 14, !dbg !84
  %763 = select i1 %761, float 0.000000e+00, float %762, !dbg !84
  %764 = extractelement <16 x i1> %757, i64 13, !dbg !84
  %765 = extractelement <16 x float> %756, i64 13, !dbg !84
  %766 = select i1 %764, float 0.000000e+00, float %765, !dbg !84
  %767 = extractelement <16 x i1> %757, i64 12, !dbg !84
  %768 = extractelement <16 x float> %756, i64 12, !dbg !84
  %769 = select i1 %767, float 0.000000e+00, float %768, !dbg !84
  %770 = extractelement <16 x i1> %757, i64 11, !dbg !84
  %771 = extractelement <16 x float> %756, i64 11, !dbg !84
  %772 = select i1 %770, float 0.000000e+00, float %771, !dbg !84
  %773 = extractelement <16 x i1> %757, i64 10, !dbg !84
  %774 = extractelement <16 x float> %756, i64 10, !dbg !84
  %775 = select i1 %773, float 0.000000e+00, float %774, !dbg !84
  %776 = extractelement <16 x i1> %757, i64 9, !dbg !84
  %777 = extractelement <16 x float> %756, i64 9, !dbg !84
  %778 = select i1 %776, float 0.000000e+00, float %777, !dbg !84
  %779 = extractelement <16 x i1> %757, i64 8, !dbg !84
  %780 = extractelement <16 x float> %756, i64 8, !dbg !84
  %781 = select i1 %779, float 0.000000e+00, float %780, !dbg !84
  %782 = extractelement <16 x i1> %757, i64 7, !dbg !86
  %783 = extractelement <16 x float> %756, i64 7, !dbg !86
  %784 = select i1 %782, float 0.000000e+00, float %783, !dbg !86
  %785 = extractelement <16 x i1> %757, i64 6, !dbg !86
  %786 = extractelement <16 x float> %756, i64 6, !dbg !86
  %787 = select i1 %785, float 0.000000e+00, float %786, !dbg !86
  %788 = extractelement <16 x i1> %757, i64 5, !dbg !86
  %789 = extractelement <16 x float> %756, i64 5, !dbg !86
  %790 = select i1 %788, float 0.000000e+00, float %789, !dbg !86
  %791 = extractelement <16 x i1> %757, i64 4, !dbg !86
  %792 = extractelement <16 x float> %756, i64 4, !dbg !86
  %793 = select i1 %791, float 0.000000e+00, float %792, !dbg !86
  %794 = extractelement <16 x i1> %757, i64 3, !dbg !86
  %795 = extractelement <16 x float> %756, i64 3, !dbg !86
  %796 = select i1 %794, float 0.000000e+00, float %795, !dbg !86
  %797 = extractelement <16 x i1> %757, i64 2, !dbg !86
  %798 = extractelement <16 x float> %756, i64 2, !dbg !86
  %799 = select i1 %797, float 0.000000e+00, float %798, !dbg !86
  %800 = extractelement <16 x i1> %757, i64 1, !dbg !86
  %801 = extractelement <16 x float> %756, i64 1, !dbg !86
  %802 = select i1 %800, float 0.000000e+00, float %801, !dbg !86
  %803 = extractelement <16 x i1> %757, i64 0, !dbg !86
  %804 = extractelement <16 x float> %756, i64 0, !dbg !86
  %805 = select i1 %803, float 0.000000e+00, float %804, !dbg !86
  %806 = select i1 %338, float %784, float 0.000000e+00, !dbg !87
  %807 = select i1 %338, float %787, float 0.000000e+00, !dbg !87
  %808 = select i1 %338, float %790, float 0.000000e+00, !dbg !87
  %809 = select i1 %338, float %793, float 0.000000e+00, !dbg !87
  %810 = select i1 %338, float %796, float 0.000000e+00, !dbg !87
  %811 = select i1 %338, float %799, float 0.000000e+00, !dbg !87
  %812 = select i1 %338, float %802, float 0.000000e+00, !dbg !87
  %813 = select i1 %338, float %805, float 0.000000e+00, !dbg !87
  %814 = select i1 %185, float %606, float %806, !dbg !88
  %815 = select i1 %185, float %592, float %807, !dbg !88
  %816 = select i1 %185, float %578, float %808, !dbg !88
  %817 = select i1 %185, float %564, float %809, !dbg !88
  %818 = select i1 %185, float %550, float %810, !dbg !88
  %819 = select i1 %185, float %536, float %811, !dbg !88
  %820 = select i1 %185, float %522, float %812, !dbg !88
  %821 = select i1 %185, float %508, float %813, !dbg !88
  %822 = select i1 %30, float %781, float %814, !dbg !88
  %823 = select i1 %30, float %778, float %815, !dbg !88
  %824 = select i1 %30, float %775, float %816, !dbg !88
  %825 = select i1 %30, float %772, float %817, !dbg !88
  %826 = select i1 %30, float %769, float %818, !dbg !88
  %827 = select i1 %30, float %766, float %819, !dbg !88
  %828 = select i1 %30, float %763, float %820, !dbg !88
  %829 = select i1 %30, float %760, float %821, !dbg !88
  %830 = sext i32 %23 to i64, !dbg !89
  %831 = getelementptr float, ptr addrspace(1) %15, i64 %830, !dbg !89
  %832 = sext i32 %24 to i64, !dbg !89
  %833 = getelementptr float, ptr addrspace(1) %15, i64 %832, !dbg !89
  %834 = bitcast float %822 to i32, !dbg !90
  %835 = bitcast float %823 to i32, !dbg !90
  %836 = bitcast float %824 to i32, !dbg !90
  %837 = bitcast float %825 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %834, i32 %835, i32 %836, i32 %837, ptr addrspace(1) %831, i1 %25) #3, !dbg !90
  %838 = bitcast float %826 to i32, !dbg !90
  %839 = bitcast float %827 to i32, !dbg !90
  %840 = bitcast float %828 to i32, !dbg !90
  %841 = bitcast float %829 to i32, !dbg !90
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %838, i32 %839, i32 %840, i32 %841, ptr addrspace(1) %833, i1 %26) #3, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemwp7hhtot7m33uey33krxyywmx4jplxkrnlh2dnomd6tnneuqs.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_poi_fused_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_32", linkageName: "triton_poi_fused_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 33, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 27, scope: !7)
!29 = !DILocation(line: 40, column: 20, scope: !7)
!30 = !DILocation(line: 44, column: 31, scope: !7)
!31 = !DILocation(line: 44, column: 36, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 46, column: 36, scope: !7)
!34 = !DILocation(line: 55, column: 20, scope: !7)
!35 = !DILocation(line: 56, column: 48, scope: !7)
!36 = !DILocation(line: 56, column: 40, scope: !7)
!37 = !DILocation(line: 56, column: 31, scope: !7)
!38 = !DILocation(line: 56, column: 62, scope: !7)
!39 = !DILocation(line: 56, column: 54, scope: !7)
!40 = !DILocation(line: 57, column: 31, scope: !7)
!41 = !DILocation(line: 57, column: 44, scope: !7)
!42 = !DILocation(line: 59, column: 31, scope: !7)
!43 = !DILocation(line: 59, column: 44, scope: !7)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 62, column: 27, scope: !7)
!46 = !DILocation(line: 64, column: 20, scope: !7)
!47 = !DILocation(line: 68, column: 31, scope: !7)
!48 = !DILocation(line: 68, column: 44, scope: !7)
!49 = !DILocation(line: 70, column: 31, scope: !7)
!50 = !DILocation(line: 70, column: 44, scope: !7)
!51 = !DILocation(line: 76, column: 20, scope: !7)
!52 = !DILocation(line: 79, column: 35, scope: !7)
!53 = !DILocation(line: 79, column: 49, scope: !7)
!54 = !DILocation(line: 79, column: 41, scope: !7)
!55 = !DILocation(line: 79, column: 32, scope: !7)
!56 = !DILocation(line: 79, column: 63, scope: !7)
!57 = !DILocation(line: 79, column: 55, scope: !7)
!58 = !DILocation(line: 80, column: 32, scope: !7)
!59 = !DILocation(line: 80, column: 45, scope: !7)
!60 = !DILocation(line: 82, column: 32, scope: !7)
!61 = !DILocation(line: 82, column: 45, scope: !7)
!62 = !DILocation(line: 84, column: 20, scope: !7)
!63 = !DILocation(line: 85, column: 27, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !71)
!69 = distinct !DILexicalBlockFile(scope: !7, file: !70, discriminator: 0)
!70 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!71 = !DILocation(line: 73, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !71)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 91, column: 32, scope: !7)
!75 = !DILocation(line: 91, column: 45, scope: !7)
!76 = !DILocation(line: 93, column: 32, scope: !7)
!77 = !DILocation(line: 93, column: 45, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 90, column: 20, scope: !7)
!80 = !DILocation(line: 92, column: 20, scope: !7)
!81 = !DILocation(line: 94, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !83)
!83 = !DILocation(line: 96, column: 42, scope: !7)
!84 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !85)
!85 = !DILocation(line: 49, column: 42, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !83)
!87 = !DILocation(line: 98, column: 35, scope: !7)
!88 = !DILocation(line: 0, scope: !7)
!89 = !DILocation(line: 101, column: 25, scope: !7)
!90 = !DILocation(line: 101, column: 37, scope: !7)
!91 = !DILocation(line: 101, column: 4, scope: !7)
