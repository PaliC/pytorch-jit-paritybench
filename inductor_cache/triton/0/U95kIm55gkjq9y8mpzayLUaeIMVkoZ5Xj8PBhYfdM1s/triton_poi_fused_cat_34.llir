; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = or disjoint i32 %15, 2, !dbg !13
  %18 = or disjoint i32 %15, 3, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %19 = sdiv i32 %.frozen, 208, !dbg !14
  %20 = mul i32 %19, 208, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = srem i32 %16, 208, !dbg !15
  %22 = srem i32 %17, 208, !dbg !15
  %23 = srem i32 %18, 208, !dbg !15
  %24 = srem i32 %19, 64, !dbg !16
  %25 = sdiv i32 %15, 13312, !dbg !17
  %26 = icmp slt i32 %.decomposed, 104, !dbg !18
  %27 = shl nsw i32 %.decomposed, 6, !dbg !19
  %28 = shl nsw i32 %21, 6, !dbg !19
  %29 = shl nsw i32 %22, 6, !dbg !19
  %30 = shl nsw i32 %23, 6, !dbg !19
  %31 = add nsw i32 %24, %27, !dbg !20
  %32 = add nsw i32 %24, %28, !dbg !20
  %33 = add nsw i32 %24, %29, !dbg !20
  %34 = add nsw i32 %24, %30, !dbg !20
  %35 = mul nsw i32 %25, 6656, !dbg !21
  %36 = add nsw i32 %31, %35, !dbg !22
  %37 = add nsw i32 %32, %35, !dbg !22
  %38 = add nsw i32 %33, %35, !dbg !22
  %39 = add nsw i32 %34, %35, !dbg !22
  %40 = sext i32 %36 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %37 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %38 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %39 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %26, i32 0, i1 %26) #3, !dbg !24
  %52 = add nsw i32 %.decomposed, -104, !dbg !25
  %53 = icmp ult i32 %52, 52, !dbg !25
  %54 = mul nsw i32 %19, 52, !dbg !26
  %55 = add nsw i32 %54, %52, !dbg !27
  %56 = sext i32 %55 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !28
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !29
  %59 = sext i32 %52 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !30
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !32
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !33
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !33
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !33
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !33
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !33
  %68 = bitcast i32 %64 to float, !dbg !33
  %69 = bitcast i32 %65 to float, !dbg !33
  %70 = bitcast i32 %66 to float, !dbg !33
  %71 = bitcast i32 %67 to float, !dbg !33
  %72 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %73 = fadd float %69, 0x3EE4F8B580000000, !dbg !34
  %74 = fadd float %70, 0x3EE4F8B580000000, !dbg !34
  %75 = fadd float %71, 0x3EE4F8B580000000, !dbg !34
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %76, 0, !dbg !35
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %77, 0, !dbg !35
  br i1 %.not.i, label %83, label %78, !dbg !35

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

83:                                               ; preds = %9
  br i1 %.not1.i, label %86, label %84, !dbg !35

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %79, %81, %84, %86
  %.0.i = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %88, 0, !dbg !35
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %89, 0, !dbg !35
  br i1 %.not.i1, label %95, label %90, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %91, %93, %96, %98
  %.0.i3 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !35
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %100, 0, !dbg !35
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %101, 0, !dbg !35
  br i1 %.not.i6, label %107, label %102, !dbg !35

102:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %105, label %103, !dbg !35

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

107:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %110, label %108, !dbg !35

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %103, %105, %108, %110
  %.0.i8 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !35
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %112, 0, !dbg !35
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %113, 0, !dbg !35
  br i1 %.not.i11, label %119, label %114, !dbg !35

114:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %117, label %115, !dbg !35

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !35

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %115, %117, %120, %122
  %.0.i13 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !35
  %124 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !29
  %131 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !31
  %132 = icmp slt i32 %.decomposed, 156, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !37
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !38
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !39
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !40
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %143, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #3, !dbg !41
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !41
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !41
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !41
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !41
  %149 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !29
  %150 = insertelement <4 x i32> %149, i32 %126, i64 1, !dbg !29
  %151 = insertelement <4 x i32> %150, i32 %128, i64 2, !dbg !29
  %152 = insertelement <4 x i32> %151, i32 %130, i64 3, !dbg !29
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !29
  %154 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !31
  %155 = insertelement <4 x i32> %154, i32 %127, i64 1, !dbg !31
  %156 = insertelement <4 x i32> %155, i32 %129, i64 2, !dbg !31
  %157 = insertelement <4 x i32> %156, i32 %131, i64 3, !dbg !31
  %158 = bitcast <4 x i32> %157 to <4 x float>, !dbg !31
  %159 = fsub <4 x float> %153, %158, !dbg !42
  %160 = insertelement <4 x float> poison, float %136, i64 0, !dbg !43
  %161 = insertelement <4 x float> %160, float %135, i64 1, !dbg !43
  %162 = insertelement <4 x float> %161, float %134, i64 2, !dbg !43
  %163 = insertelement <4 x float> %162, float %133, i64 3, !dbg !43
  %164 = fmul <4 x float> %159, %163, !dbg !43
  %165 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !39
  %166 = insertelement <4 x i32> %165, i32 %141, i64 1, !dbg !39
  %167 = insertelement <4 x i32> %166, i32 %140, i64 2, !dbg !39
  %168 = insertelement <4 x i32> %167, i32 %139, i64 3, !dbg !39
  %169 = bitcast <4 x i32> %168 to <4 x float>, !dbg !39
  %170 = fmul <4 x float> %164, %169, !dbg !44
  %171 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !41
  %172 = insertelement <4 x i32> %171, i32 %147, i64 1, !dbg !41
  %173 = insertelement <4 x i32> %172, i32 %146, i64 2, !dbg !41
  %174 = insertelement <4 x i32> %173, i32 %145, i64 3, !dbg !41
  %175 = bitcast <4 x i32> %174 to <4 x float>, !dbg !41
  %176 = fadd <4 x float> %170, %175, !dbg !45
  %177 = fcmp olt <4 x float> %176, zeroinitializer, !dbg !46
  %178 = extractelement <4 x i1> %177, i64 3, !dbg !50
  %179 = extractelement <4 x i1> %177, i64 2, !dbg !50
  %180 = extractelement <4 x i1> %177, i64 1, !dbg !50
  %181 = extractelement <4 x i1> %177, i64 0, !dbg !50
  %182 = icmp sgt i32 %.decomposed, 155, !dbg !51
  %183 = mul nsw i32 %25, 13312, !dbg !52
  %184 = add i32 %31, %183, !dbg !53
  %185 = add i32 %32, %183, !dbg !53
  %186 = add i32 %33, %183, !dbg !53
  %187 = add i32 %34, %183, !dbg !53
  %188 = sext i32 %184 to i64, !dbg !54
  %189 = getelementptr float, ptr addrspace(1) %6, i64 %188, !dbg !54
  %190 = sext i32 %185 to i64, !dbg !54
  %191 = getelementptr float, ptr addrspace(1) %6, i64 %190, !dbg !54
  %192 = sext i32 %186 to i64, !dbg !54
  %193 = getelementptr float, ptr addrspace(1) %6, i64 %192, !dbg !54
  %194 = sext i32 %187 to i64, !dbg !54
  %195 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !54
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %189, i1 %182, i32 0, i1 %182) #3, !dbg !55
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %191, i1 %182, i32 0, i1 %182) #3, !dbg !55
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %182, i32 0, i1 %182) #3, !dbg !55
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %182, i32 0, i1 %182) #3, !dbg !55
  %200 = sext i32 %15 to i64, !dbg !56
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %200, !dbg !56
  %bc = bitcast <4 x float> %176 to <4 x i32>, !dbg !57
  %202 = extractelement <4 x i32> %bc, i64 3, !dbg !57
  %203 = select i1 %178, i32 0, i32 %202, !dbg !50
  %204 = select i1 %53, i32 %203, i32 0, !dbg !58
  %205 = select i1 %26, i32 %48, i32 %204, !dbg !59
  %206 = select i1 %132, i32 %205, i32 %196, !dbg !60
  %bc16 = bitcast <4 x float> %176 to <4 x i32>, !dbg !57
  %207 = extractelement <4 x i32> %bc16, i64 2, !dbg !57
  %208 = select i1 %179, i32 0, i32 %207, !dbg !50
  %209 = select i1 %53, i32 %208, i32 0, !dbg !58
  %210 = select i1 %26, i32 %49, i32 %209, !dbg !59
  %211 = select i1 %132, i32 %210, i32 %197, !dbg !60
  %bc17 = bitcast <4 x float> %176 to <4 x i32>, !dbg !57
  %212 = extractelement <4 x i32> %bc17, i64 1, !dbg !57
  %213 = select i1 %180, i32 0, i32 %212, !dbg !50
  %214 = select i1 %53, i32 %213, i32 0, !dbg !58
  %215 = select i1 %26, i32 %50, i32 %214, !dbg !59
  %216 = select i1 %132, i32 %215, i32 %198, !dbg !60
  %bc18 = bitcast <4 x float> %176 to <4 x i32>, !dbg !57
  %217 = extractelement <4 x i32> %bc18, i64 0, !dbg !57
  %218 = select i1 %181, i32 0, i32 %217, !dbg !50
  %219 = select i1 %53, i32 %218, i32 0, !dbg !58
  %220 = select i1 %26, i32 %51, i32 %219, !dbg !59
  %221 = select i1 %132, i32 %220, i32 %199, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %211, i32 %216, i32 %221, ptr addrspace(1) %201, i1 true) #3, !dbg !57
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqcki7n7qigxtjkvrfhwzqptk2nn4sxu4y4vedx7tk43asyv4eot.py", directory: "inductor_cache/qc")
!4 = !{ptr @triton_poi_fused_cat_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_34", linkageName: "triton_poi_fused_cat_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 18, scope: !7)
!19 = !DILocation(line: 40, column: 40, scope: !7)
!20 = !DILocation(line: 40, column: 36, scope: !7)
!21 = !DILocation(line: 40, column: 51, scope: !7)
!22 = !DILocation(line: 40, column: 46, scope: !7)
!23 = !DILocation(line: 40, column: 31, scope: !7)
!24 = !DILocation(line: 40, column: 56, scope: !7)
!25 = !DILocation(line: 44, column: 20, scope: !7)
!26 = !DILocation(line: 45, column: 34, scope: !7)
!27 = !DILocation(line: 45, column: 40, scope: !7)
!28 = !DILocation(line: 45, column: 31, scope: !7)
!29 = !DILocation(line: 45, column: 57, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 47, scope: !7)
!32 = !DILocation(line: 48, column: 31, scope: !7)
!33 = !DILocation(line: 48, column: 47, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 27, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 31, scope: !7)
!39 = !DILocation(line: 57, column: 47, scope: !7)
!40 = !DILocation(line: 59, column: 31, scope: !7)
!41 = !DILocation(line: 59, column: 47, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 56, column: 20, scope: !7)
!44 = !DILocation(line: 58, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 62, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 68, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 68, scope: !7)
!53 = !DILocation(line: 71, column: 62, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 73, scope: !7)
!56 = !DILocation(line: 73, column: 25, scope: !7)
!57 = !DILocation(line: 73, column: 37, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 65, column: 34, scope: !7)
!60 = !DILocation(line: 0, scope: !7)
!61 = !DILocation(line: 73, column: 4, scope: !7)
