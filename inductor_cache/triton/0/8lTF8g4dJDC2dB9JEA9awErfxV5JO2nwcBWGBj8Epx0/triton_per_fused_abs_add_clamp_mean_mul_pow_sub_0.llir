; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_add_clamp_mean_mul_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = and i32 %5, 15, !dbg !11
  %9 = shl i32 %5, 2, !dbg !12
  %10 = and i32 %9, 192, !dbg !12
  %11 = or disjoint i32 %10, %8, !dbg !13
  %12 = zext nneg i32 %11 to i64, !dbg !14
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !16
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !17
  %17 = or disjoint i32 %11, 16, !dbg !18
  %18 = zext nneg i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !19
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #4, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !22
  %23 = or disjoint i32 %11, 32, !dbg !23
  %24 = zext nneg i32 %23 to i64, !dbg !24
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !24
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #4, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !26
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !27
  %29 = or disjoint i32 %11, 48, !dbg !28
  %30 = zext nneg i32 %29 to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !30
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !32
  %35 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %20, i64 1, !dbg !15
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !15
  %38 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !17
  %39 = insertelement <2 x i32> %38, i32 %22, i64 1, !dbg !17
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !17
  %41 = fsub <2 x float> %37, %40, !dbg !33
  %42 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %41), !dbg !34
  %43 = fcmp olt <2 x float> %42, splat (float 1.000000e+00), !dbg !35
  %44 = fcmp uno <2 x float> %41, zeroinitializer, !dbg !39
  %45 = or <2 x i1> %44, %43, !dbg !40
  %46 = select <2 x i1> %45, <2 x float> %42, <2 x float> splat (float 1.000000e+00), !dbg !41
  %47 = fmul <2 x float> %46, %46, !dbg !42
  %48 = fmul <2 x float> %47, splat (float 5.000000e-01), !dbg !43
  %49 = fsub <2 x float> %42, %46, !dbg !44
  %50 = fadd <2 x float> %49, %48, !dbg !45
  %shift = shufflevector <2 x float> %50, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !46
  %51 = fadd <2 x float> %50, %shift, !dbg !46
  %52 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !25
  %53 = insertelement <2 x i32> %52, i32 %32, i64 1, !dbg !25
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !25
  %55 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !27
  %56 = insertelement <2 x i32> %55, i32 %34, i64 1, !dbg !27
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !27
  %58 = fsub <2 x float> %54, %57, !dbg !47
  %59 = tail call <2 x float> @llvm.fabs.v2f32(<2 x float> %58), !dbg !48
  %60 = fcmp olt <2 x float> %59, splat (float 1.000000e+00), !dbg !49
  %61 = fcmp uno <2 x float> %58, zeroinitializer, !dbg !51
  %62 = or <2 x i1> %61, %60, !dbg !52
  %63 = select <2 x i1> %62, <2 x float> %59, <2 x float> splat (float 1.000000e+00), !dbg !53
  %64 = fmul <2 x float> %63, %63, !dbg !54
  %65 = fmul <2 x float> %64, splat (float 5.000000e-01), !dbg !55
  %66 = fsub <2 x float> %59, %63, !dbg !56
  %67 = fadd <2 x float> %66, %65, !dbg !57
  %68 = fadd <2 x float> %51, %67, !dbg !58
  %shift1 = shufflevector <2 x float> %67, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !59
  %69 = fadd <2 x float> %68, %shift1, !dbg !59
  %70 = extractelement <2 x float> %69, i64 0, !dbg !59
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 4.000000e+00) #4, !dbg !60
  %72 = bitcast float %71 to i32, !dbg !61
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !61
  %74 = bitcast i32 %73 to float, !dbg !61
  %75 = fadd float %71, %74, !dbg !65
  %76 = bitcast float %75 to i32, !dbg !61
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 8, i32 31), !dbg !61
  %78 = bitcast i32 %77 to float, !dbg !61
  %79 = fadd float %75, %78, !dbg !65
  %80 = bitcast float %79 to i32, !dbg !61
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 4, i32 31), !dbg !61
  %82 = bitcast i32 %81 to float, !dbg !61
  %83 = fadd float %79, %82, !dbg !65
  %84 = bitcast float %83 to i32, !dbg !61
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 2, i32 31), !dbg !61
  %86 = bitcast i32 %85 to float, !dbg !61
  %87 = fadd float %83, %86, !dbg !65
  %88 = bitcast float %87 to i32, !dbg !61
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !61
  %90 = bitcast i32 %89 to float, !dbg !61
  %91 = fadd float %87, %90, !dbg !65
  %92 = icmp eq i32 %6, 0, !dbg !61
  %93 = and i32 %7, 1, !dbg !61
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !61
  %95 = bitcast float %91 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %92) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %96 = icmp slt i32 %5, 2, !dbg !61
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !61
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %96) #4, !dbg !61
  %99 = bitcast i32 %98 to float, !dbg !61
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !61
  %101 = bitcast i32 %100 to float, !dbg !61
  %102 = fadd float %99, %101, !dbg !65
  %103 = and i32 %5, 1, !dbg !61
  %104 = icmp eq i32 %103, 0, !dbg !61
  %105 = and i1 %96, %104, !dbg !61
  %106 = bitcast float %102 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %106, i1 %105) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %107 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !61
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 6.400000e+01) #4, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %urem = and i32 %5, 63, !dbg !69
  %109 = icmp eq i32 %urem, 0, !dbg !69
  %110 = bitcast float %108 to i32, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %0, i1 %109) #4, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cahs75qbl5isajz4iebe2uku5z3krehmlumvlk4i3bl5phrww675.py", directory: "inductor_cache/ah")
!4 = !{ptr @triton_per_fused_abs_add_clamp_mean_mul_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_clamp_mean_mul_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_clamp_mean_mul_pow_sub_0", linkageName: "triton_per_fused_abs_add_clamp_mean_mul_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 38, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 43, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 34, column: 41, scope: !7)
!19 = !DILocation(line: 34, column: 31, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 35, column: 31, scope: !7)
!22 = !DILocation(line: 35, column: 49, scope: !7)
!23 = !DILocation(line: 36, column: 41, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 49, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 41, scope: !7)
!29 = !DILocation(line: 38, column: 31, scope: !7)
!30 = !DILocation(line: 38, column: 49, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 49, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 23, scope: !7)
!35 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 43, column: 40, scope: !7)
!39 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 44, column: 18, scope: !7)
!43 = !DILocation(line: 46, column: 18, scope: !7)
!44 = !DILocation(line: 47, column: 18, scope: !7)
!45 = !DILocation(line: 49, column: 19, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 24, scope: !7)
!49 = !DILocation(line: 110, column: 15, scope: !36, inlinedAt: !50)
!50 = !DILocation(line: 61, column: 42, scope: !7)
!51 = !DILocation(line: 112, column: 21, scope: !36, inlinedAt: !50)
!52 = !DILocation(line: 112, column: 16, scope: !36, inlinedAt: !50)
!53 = !DILocation(line: 113, column: 29, scope: !36, inlinedAt: !50)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 20, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 20, scope: !7)
!61 = !DILocation(line: 267, column: 36, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!64 = !DILocation(line: 80, column: 26, scope: !7)
!65 = !DILocation(line: 256, column: 15, scope: !66, inlinedAt: !64)
!66 = distinct !DILexicalBlockFile(scope: !62, file: !63, discriminator: 0)
!67 = !DILocation(line: 82, column: 20, scope: !7)
!68 = !DILocation(line: 83, column: 4, scope: !7)
!69 = !DILocation(line: 84, column: 71, scope: !7)
!70 = !DILocation(line: 84, column: 4, scope: !7)
