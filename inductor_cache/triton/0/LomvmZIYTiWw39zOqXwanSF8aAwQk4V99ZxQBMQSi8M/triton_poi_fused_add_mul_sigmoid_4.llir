; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_sigmoid_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %13 = sdiv i32 %11, 4096, !dbg !14
  %14 = sdiv i32 %12, 4096, !dbg !14
  %15 = sext i32 %11 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = sext i32 %12 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = bitcast i32 %29 to float, !dbg !16
  %34 = bitcast i32 %30 to float, !dbg !16
  %35 = bitcast i32 %31 to float, !dbg !16
  %36 = bitcast i32 %32 to float, !dbg !16
  %37 = sext i32 %13 to i64, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !17
  %39 = sext i32 %14 to i64, !dbg !17
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !17
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %42 = bitcast i32 %41 to float, !dbg !18
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %44 = bitcast i32 %43 to float, !dbg !18
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %46 = bitcast i32 %45 to float, !dbg !18
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !18
  %48 = bitcast i32 %47 to float, !dbg !18
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !18
  %50 = bitcast i32 %49 to float, !dbg !18
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !18
  %52 = bitcast i32 %51 to float, !dbg !18
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !18
  %54 = bitcast i32 %53 to float, !dbg !18
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !18
  %56 = bitcast i32 %55 to float, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !19
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #1, !dbg !20
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !20
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !20
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !20
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !20
  %64 = bitcast i32 %60 to float, !dbg !20
  %65 = bitcast i32 %61 to float, !dbg !20
  %66 = bitcast i32 %62 to float, !dbg !20
  %67 = bitcast i32 %63 to float, !dbg !20
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !20
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !20
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !20
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !20
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !20
  %73 = bitcast i32 %69 to float, !dbg !20
  %74 = bitcast i32 %70 to float, !dbg !20
  %75 = bitcast i32 %71 to float, !dbg !20
  %76 = bitcast i32 %72 to float, !dbg !20
  %77 = fsub float 0.000000e+00, %42, !dbg !21
  %78 = fsub float 0.000000e+00, %44, !dbg !21
  %79 = fsub float 0.000000e+00, %46, !dbg !21
  %80 = fsub float 0.000000e+00, %48, !dbg !21
  %81 = fsub float 0.000000e+00, %50, !dbg !21
  %82 = fsub float 0.000000e+00, %52, !dbg !21
  %83 = fsub float 0.000000e+00, %54, !dbg !21
  %84 = fsub float 0.000000e+00, %56, !dbg !21
  %85 = fmul float %77, 0x3FF7154760000000, !dbg !25
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !25
  %87 = fmul float %78, 0x3FF7154760000000, !dbg !25
  %88 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %87) #1, !dbg !25
  %89 = fmul float %79, 0x3FF7154760000000, !dbg !25
  %90 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %89) #1, !dbg !25
  %91 = fmul float %80, 0x3FF7154760000000, !dbg !25
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !25
  %93 = fmul float %81, 0x3FF7154760000000, !dbg !25
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !25
  %95 = fmul float %82, 0x3FF7154760000000, !dbg !25
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !25
  %97 = fmul float %83, 0x3FF7154760000000, !dbg !25
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #1, !dbg !25
  %99 = fmul float %84, 0x3FF7154760000000, !dbg !25
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !25
  %101 = fadd float %86, 1.000000e+00, !dbg !26
  %102 = fadd float %88, 1.000000e+00, !dbg !26
  %103 = fadd float %90, 1.000000e+00, !dbg !26
  %104 = fadd float %92, 1.000000e+00, !dbg !26
  %105 = fadd float %94, 1.000000e+00, !dbg !26
  %106 = fadd float %96, 1.000000e+00, !dbg !26
  %107 = fadd float %98, 1.000000e+00, !dbg !26
  %108 = fadd float %100, 1.000000e+00, !dbg !26
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %101) #1, !dbg !27
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %102) #1, !dbg !27
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %103) #1, !dbg !27
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %104) #1, !dbg !27
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %105) #1, !dbg !27
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #1, !dbg !27
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #1, !dbg !27
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #1, !dbg !27
  %117 = fmul float %109, %24, !dbg !28
  %118 = fmul float %110, %25, !dbg !28
  %119 = fmul float %111, %26, !dbg !28
  %120 = fmul float %112, %27, !dbg !28
  %121 = fmul float %113, %33, !dbg !28
  %122 = fmul float %114, %34, !dbg !28
  %123 = fmul float %115, %35, !dbg !28
  %124 = fmul float %116, %36, !dbg !28
  %125 = fadd float %117, %64, !dbg !29
  %126 = fadd float %118, %65, !dbg !29
  %127 = fadd float %119, %66, !dbg !29
  %128 = fadd float %120, %67, !dbg !29
  %129 = fadd float %121, %73, !dbg !29
  %130 = fadd float %122, %74, !dbg !29
  %131 = fadd float %123, %75, !dbg !29
  %132 = fadd float %124, %76, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !30
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !30
  %135 = bitcast float %125 to i32, !dbg !31
  %136 = bitcast float %126 to i32, !dbg !31
  %137 = bitcast float %127 to i32, !dbg !31
  %138 = bitcast float %128 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %135, i32 %136, i32 %137, i32 %138, ptr addrspace(1) %133, i1 true) #1, !dbg !31
  %139 = bitcast float %129 to i32, !dbg !31
  %140 = bitcast float %130 to i32, !dbg !31
  %141 = bitcast float %131 to i32, !dbg !31
  %142 = bitcast float %132 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %139, i32 %140, i32 %141, i32 %142, ptr addrspace(1) %134, i1 true) #1, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckdmpowvchddfixh3yuzk7gjskzanj6ahtn7grvaspv5xhi5atuc.py", directory: "inductor_cache/kd")
!4 = !{ptr @triton_poi_fused_add_mul_sigmoid_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_sigmoid_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_sigmoid_4", linkageName: "triton_poi_fused_add_mul_sigmoid_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 29, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 30, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 32, column: 25, scope: !7)
!31 = !DILocation(line: 32, column: 36, scope: !7)
!32 = !DILocation(line: 32, column: 4, scope: !7)
