#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0)
#loc1 = loc(unknown)
#loc42 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":55:27)
#loc51 = loc(callsite(#loc1 at #loc42))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_mean_relu_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<5120> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<5120> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<640> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<64x1xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<81920> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<640> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_1 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.expand_dims %12 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %14 = arith.remsi %8, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc8)
    %15 = arith.divsi %8, %cst_2 : tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = tt.addptr %16, %14 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc10)
    %18 = tt.load %17, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %20 = tt.addptr %19, %14 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc12)
    %21 = tt.load %20, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %22 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %23 = tt.addptr %22, %14 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc14)
    %24 = tt.load %23, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %25 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %26 = tt.addptr %25, %14 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc16)
    %27 = tt.load %26, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %28 = tt.broadcast %14 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc18)
    %29 = arith.muli %15, %cst_5 : tensor<64x1xi32, #blocked> loc(#loc19)
    %30 = tt.broadcast %29 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc20)
    %31 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc21)
    %32 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc22)
    %33 = tt.broadcast %18 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc23)
    %34 = arith.addf %21, %cst_4 : tensor<64x1xf32, #blocked> loc(#loc24)
    %35 = tt.extern_elementwise %34 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<64x1xf32, #blocked>) -> tensor<64x1xf32, #blocked> loc(#loc25)
    %36 = arith.divf %cst_3, %35 : tensor<64x1xf32, #blocked> loc(#loc26)
    %37 = tt.broadcast %36 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc27)
    %38 = tt.broadcast %24 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc28)
    %39 = tt.broadcast %27 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc29)
    %40 = scf.for %arg8 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg9 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %46 = tt.splat %arg8 : i32 -> tensor<1x8xi32, #blocked> loc(#loc31)
      %47 = arith.addi %46, %13 : tensor<1x8xi32, #blocked> loc(#loc31)
      %48 = arith.cmpi slt, %47, %cst_7 : tensor<1x8xi32, #blocked> loc(#loc32)
      %49 = arith.muli %47, %cst_6 : tensor<1x8xi32, #blocked> loc(#loc33)
      %50 = tt.broadcast %49 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc18)
      %51 = arith.addi %28, %50 : tensor<64x8xi32, #blocked> loc(#loc18)
      %52 = arith.addi %51, %30 : tensor<64x8xi32, #blocked> loc(#loc20)
      %53 = tt.addptr %31, %52 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc21)
      %54 = tt.broadcast %48 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc22)
      %55 = arith.andi %54, %32 : tensor<64x8xi1, #blocked> loc(#loc22)
      %56 = tt.load %53, %55, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc34)
      %57 = arith.subf %56, %33 : tensor<64x8xf32, #blocked> loc(#loc23)
      %58 = arith.mulf %57, %37 : tensor<64x8xf32, #blocked> loc(#loc27)
      %59 = arith.mulf %58, %38 : tensor<64x8xf32, #blocked> loc(#loc28)
      %60 = arith.addf %59, %39 : tensor<64x8xf32, #blocked> loc(#loc29)
      %61 = arith.cmpf ogt, %cst, %60 : tensor<64x8xf32, #blocked> loc(#loc48)
      %62 = arith.select %61, %cst, %60 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc49)
      %63 = arith.addf %arg9, %62 : tensor<64x8xf32, #blocked> loc(#loc38)
      %64 = arith.select %55, %63, %arg9 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc39)
      scf.yield %64 : tensor<64x8xf32, #blocked> loc(#loc40)
    } loc(#loc30)
    %41 = "tt.reduce"(%40) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc42)), %arg9: f32 loc(callsite(#loc1 at #loc42))):
      %46 = arith.addf %arg8, %arg9 : f32 loc(#loc53)
      tt.reduce.return %46 : f32 loc(#loc50)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc50)
    %42 = triton_gpu.convert_layout %41 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc44)
    %43 = tt.expand_dims %42 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc44)
    %44 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    %45 = tt.addptr %44, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc45)
    tt.store %45, %43, %11 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":22:28)
#loc3 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":22:33)
#loc4 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":23:44)
#loc5 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":23:23)
#loc6 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":24:21)
#loc7 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":25:33)
#loc8 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":26:19)
#loc9 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":27:19)
#loc10 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":28:30)
#loc11 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":28:35)
#loc12 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":29:30)
#loc13 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":29:35)
#loc14 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":30:31)
#loc15 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":30:36)
#loc16 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":31:31)
#loc17 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":31:36)
#loc18 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:39)
#loc19 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:54)
#loc20 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:48)
#loc21 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:34)
#loc22 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:67)
#loc23 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":39:22)
#loc24 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":41:22)
#loc25 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":42:30)
#loc26 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":44:22)
#loc27 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":47:23)
#loc28 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":48:24)
#loc29 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":49:24)
#loc30 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":34:36)
#loc31 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":35:27)
#loc32 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":36:25)
#loc33 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:43)
#loc34 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":38:59)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc36 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":51:46)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc38 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":53:25)
#loc39 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":54:48)
#loc40 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":54:8)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc44 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":55:30)
#loc45 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":56:25)
#loc46 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":56:37)
#loc47 = loc("inductor_cache/oz/cozxj3ide3va5hvcsvme2xmppnwbockxyog5bisjsamgpqwbczii.py":56:4)
#loc48 = loc(callsite(#loc35 at #loc36))
#loc49 = loc(callsite(#loc37 at #loc36))
#loc50 = loc(callsite(#loc41 at #loc42))
#loc52 = loc(callsite(#loc43 at #loc41))
#loc53 = loc(callsite(#loc52 at #loc42))
