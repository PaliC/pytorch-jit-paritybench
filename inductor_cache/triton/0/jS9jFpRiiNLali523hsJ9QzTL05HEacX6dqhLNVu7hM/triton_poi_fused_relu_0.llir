; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 2912, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 512, !dbg !14
  %14 = and i32 %10, 127, !dbg !14
  %15 = or disjoint i32 %14, 128, !dbg !14
  %16 = or disjoint i32 %14, 256, !dbg !14
  %17 = or disjoint i32 %14, 384, !dbg !14
  %18 = or disjoint i32 %14, 512, !dbg !14
  %19 = or disjoint i32 %14, 640, !dbg !14
  %20 = or disjoint i32 %14, 768, !dbg !14
  %21 = or disjoint i32 %14, 896, !dbg !14
  %22 = or disjoint i32 %9, %14, !dbg !15
  %23 = or disjoint i32 %9, %15, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = or disjoint i32 %9, %19, !dbg !15
  %28 = or disjoint i32 %9, %20, !dbg !15
  %29 = or disjoint i32 %9, %21, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %30 = sdiv i32 %.frozen, 728, !dbg !16
  %31 = mul i32 %30, 728, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = shl i32 %6, 12, !dbg !18
  %33 = or disjoint i32 %32, %12, !dbg !15
  %34 = add i32 %33, %9, !dbg !19
  %35 = or disjoint i32 %32, %13, !dbg !15
  %36 = add i32 %35, %9, !dbg !19
  %37 = sext i32 %34 to i64, !dbg !20
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %39 = sext i32 %36 to i64, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %7) #2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !21
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !21
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !21
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = bitcast i32 %43 to float, !dbg !21
  %48 = bitcast i32 %44 to float, !dbg !21
  %49 = bitcast i32 %45 to float, !dbg !21
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %7) #2, !dbg !21
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !21
  %55 = bitcast i32 %51 to float, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = fcmp olt float %46, 0.000000e+00, !dbg !22
  %60 = fcmp olt float %47, 0.000000e+00, !dbg !22
  %61 = fcmp olt float %48, 0.000000e+00, !dbg !22
  %62 = fcmp olt float %49, 0.000000e+00, !dbg !22
  %63 = fcmp olt float %55, 0.000000e+00, !dbg !22
  %64 = fcmp olt float %56, 0.000000e+00, !dbg !22
  %65 = fcmp olt float %57, 0.000000e+00, !dbg !22
  %66 = fcmp olt float %58, 0.000000e+00, !dbg !22
  %67 = select i1 %59, float 0.000000e+00, float %46, !dbg !26
  %68 = select i1 %60, float 0.000000e+00, float %47, !dbg !26
  %69 = select i1 %61, float 0.000000e+00, float %48, !dbg !26
  %70 = select i1 %62, float 0.000000e+00, float %49, !dbg !26
  %71 = select i1 %63, float 0.000000e+00, float %55, !dbg !26
  %72 = select i1 %64, float 0.000000e+00, float %56, !dbg !26
  %73 = select i1 %65, float 0.000000e+00, float %57, !dbg !26
  %74 = select i1 %66, float 0.000000e+00, float %58, !dbg !26
  %75 = mul i32 %22, 728, !dbg !27
  %76 = mul i32 %23, 728, !dbg !27
  %77 = mul i32 %24, 728, !dbg !27
  %78 = mul i32 %25, 728, !dbg !27
  %79 = mul i32 %26, 728, !dbg !27
  %80 = mul i32 %27, 728, !dbg !27
  %81 = mul i32 %28, 728, !dbg !27
  %82 = mul i32 %29, 728, !dbg !27
  %83 = mul i32 %30, 2981888, !dbg !28
  %84 = add i32 %83, %.decomposed, !dbg !29
  %85 = add i32 %84, %75, !dbg !30
  %86 = add i32 %84, %76, !dbg !30
  %87 = add i32 %84, %77, !dbg !30
  %88 = add i32 %84, %78, !dbg !30
  %89 = add i32 %84, %79, !dbg !30
  %90 = add i32 %84, %80, !dbg !30
  %91 = add i32 %84, %81, !dbg !30
  %92 = add i32 %84, %82, !dbg !30
  %93 = sext i32 %85 to i64, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !31
  %95 = sext i32 %86 to i64, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !31
  %97 = sext i32 %87 to i64, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !31
  %99 = sext i32 %88 to i64, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !31
  %101 = sext i32 %89 to i64, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !31
  %103 = sext i32 %90 to i64, !dbg !31
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !31
  %105 = sext i32 %91 to i64, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !31
  %107 = sext i32 %92 to i64, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !31
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %110 = bitcast float %67 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !32
  %111 = or disjoint i32 %12, 1, !dbg !32
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %113 = bitcast float %68 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !32
  %114 = or disjoint i32 %12, 2, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !32
  %116 = bitcast float %69 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !32
  %117 = or disjoint i32 %12, 3, !dbg !32
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !32
  %119 = bitcast float %70 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %119, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !32
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !32
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !32
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !32
  %125 = load i32, ptr addrspace(3) %124, align 4, !dbg !32
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !32
  %127 = load i32, ptr addrspace(3) %126, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %128 = bitcast float %71 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %128, i1 true) #2, !dbg !32
  %129 = bitcast float %72 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %129, i1 true) #2, !dbg !32
  %130 = bitcast float %73 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %130, i1 true) #2, !dbg !32
  %131 = bitcast float %74 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %131, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %132 = load i32, ptr addrspace(3) %120, align 4, !dbg !32
  %133 = load i32, ptr addrspace(3) %122, align 4, !dbg !32
  %134 = load i32, ptr addrspace(3) %124, align 4, !dbg !32
  %135 = load i32, ptr addrspace(3) %126, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %94, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %96, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %98, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %100, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %102, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %104, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %106, i1 %7) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %108, i1 %7) #2, !dbg !32
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  %137 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !33
  %138 = bitcast float %67 to i32, !dbg !34
  %139 = bitcast float %68 to i32, !dbg !34
  %140 = bitcast float %69 to i32, !dbg !34
  %141 = bitcast float %70 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %138, i32 %139, i32 %140, i32 %141, ptr addrspace(1) %136, i1 %7) #2, !dbg !34
  %142 = bitcast float %71 to i32, !dbg !34
  %143 = bitcast float %72 to i32, !dbg !34
  %144 = bitcast float %73 to i32, !dbg !34
  %145 = bitcast float %74 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %137, i1 %7) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcof3gaunu5ylnxoaek7ds6miywrb2a57hmj6ec4mi2nwsfa3sm.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_0", linkageName: "triton_poi_fused_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 45, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 34, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 35, column: 34, scope: !7)
!28 = !DILocation(line: 35, column: 47, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 39, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 58, scope: !7)
!33 = !DILocation(line: 36, column: 25, scope: !7)
!34 = !DILocation(line: 36, column: 46, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
