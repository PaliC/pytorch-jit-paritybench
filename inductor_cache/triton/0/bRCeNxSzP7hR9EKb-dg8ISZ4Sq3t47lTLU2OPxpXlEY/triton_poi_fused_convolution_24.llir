; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = and i32 %9, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %13, !dbg !13
  %18 = or disjoint i32 %8, %14, !dbg !13
  %19 = or disjoint i32 %8, %15, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %22 = lshr i32 %9, 6, !dbg !16
  %.lobit = and i32 %22, 1, !dbg !16
  %23 = or disjoint i32 %21, %.lobit, !dbg !17
  %24 = or disjoint i32 %23, 2, !dbg !17
  %25 = icmp slt i32 %23, 4, !dbg !18
  %26 = icmp slt i32 %24, 4, !dbg !18
  %27 = icmp slt i32 %21, 4, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %28 = sdiv i32 %.frozen, 256, !dbg !19
  %29 = mul i32 %28, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %17, 256, !dbg !20
  %31 = shl i32 %23, 8, !dbg !21
  %32 = shl i32 %24, 8, !dbg !21
  %33 = shl i32 %28, 10, !dbg !22
  %34 = add i32 %33, %.decomposed, !dbg !23
  %35 = add i32 %34, %31, !dbg !24
  %36 = add i32 %34, %32, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %25) #2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %26) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = shl i32 %9, 4, !dbg !26
  %60 = and i32 %59, 1008, !dbg !26
  %61 = or disjoint i32 %60, %.lobit, !dbg !26
  %62 = and i32 %10, 508, !dbg !26
  %63 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %64 = getelementptr float, ptr addrspace(3) %63, i32 %61, !dbg !26
  %65 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !26
  %66 = or disjoint i32 %61, 4, !dbg !26
  %67 = lshr i32 %66, 2, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !26
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %66, !dbg !26
  %70 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !26
  %71 = or disjoint i32 %61, 8, !dbg !26
  %72 = lshr i32 %71, 2, !dbg !26
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !26
  %75 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !26
  %76 = or disjoint i32 %61, 12, !dbg !26
  %77 = lshr i32 %76, 2, !dbg !26
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %76, !dbg !26
  %80 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !26
  %81 = or disjoint i32 %61, 2, !dbg !26
  %82 = getelementptr float, ptr addrspace(3) %63, i32 %81, !dbg !26
  %83 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !26
  %84 = or disjoint i32 %61, 6, !dbg !26
  %85 = lshr i32 %84, 2, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %84, !dbg !26
  %88 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !26
  %89 = or disjoint i32 %61, 10, !dbg !26
  %90 = lshr i32 %89, 2, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = getelementptr float, ptr addrspace(3) %91, i32 %89, !dbg !26
  %93 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %92, <1 x i32> %93, i1 true) #2, !dbg !26
  %94 = or disjoint i32 %61, 14, !dbg !26
  %95 = lshr i32 %94, 2, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %94, !dbg !26
  %98 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %99 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %62, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %62, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = or disjoint i32 %62, 1, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %102, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = or disjoint i32 %62, 2, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %105, !dbg !26
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !26
  %108 = or disjoint i32 %62, 3, !dbg !26
  %109 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %108, !dbg !26
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !26
  %111 = or disjoint i32 %62, 512, !dbg !26
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %111, !dbg !26
  %114 = load float, ptr addrspace(3) %113, align 4, !dbg !26
  %115 = or disjoint i32 %62, 513, !dbg !26
  %116 = lshr i32 %115, 2, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = or disjoint i32 %62, 514, !dbg !26
  %121 = lshr i32 %120, 2, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !26
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !26
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !26
  %125 = or disjoint i32 %62, 515, !dbg !26
  %126 = lshr i32 %125, 2, !dbg !26
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !26
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %125, !dbg !26
  %129 = load float, ptr addrspace(3) %128, align 4, !dbg !26
  %130 = sext i32 %30 to i64, !dbg !27
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !27
  %132 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %131, i1 true) #2, !dbg !28
  %133 = extractvalue { i32, i32 } %132, 0, !dbg !28
  %134 = extractvalue { i32, i32 } %132, 1, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx = shl nuw nsw i32 %13, 3, !dbg !29
  %135 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !29
  %136 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !29
  %137 = shl nuw nsw i32 %13, 1, !dbg !29
  %138 = or disjoint i32 %137, 2, !dbg !29
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !29
  %140 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !29
  %141 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !29
  %142 = load float, ptr addrspace(3) %141, align 8, !dbg !29
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !29
  %143 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !29
  %144 = load float, ptr addrspace(3) %143, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %145, i32 %133, i32 %134, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %147 = load float, ptr addrspace(3) %146, align 16, !dbg !29
  %148 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 4, !dbg !29
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !29
  %150 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 8, !dbg !29
  %151 = load float, ptr addrspace(3) %150, align 8, !dbg !29
  %152 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 12, !dbg !29
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !29
  %154 = fadd float %101, %142, !dbg !29
  %155 = fadd float %104, %142, !dbg !29
  %156 = fadd float %107, %142, !dbg !29
  %157 = fadd float %110, %142, !dbg !29
  %158 = fadd float %114, %144, !dbg !29
  %159 = fadd float %119, %144, !dbg !29
  %160 = fadd float %124, %144, !dbg !29
  %161 = fadd float %129, %144, !dbg !29
  %162 = fadd float %147, %46, !dbg !29
  %163 = fadd float %149, %47, !dbg !29
  %164 = fadd float %151, %48, !dbg !29
  %165 = fadd float %153, %49, !dbg !29
  %166 = fadd float %147, %55, !dbg !29
  %167 = fadd float %149, %56, !dbg !29
  %168 = fadd float %151, %57, !dbg !29
  %169 = fadd float %153, %58, !dbg !29
  %170 = add i32 %18, %20, !dbg !30
  %171 = shl i32 %170, 2, !dbg !30
  %172 = add i32 %19, %20, !dbg !30
  %173 = shl i32 %172, 2, !dbg !30
  %174 = sext i32 %171 to i64, !dbg !31
  %175 = getelementptr float, ptr addrspace(1) %2, i64 %174, !dbg !31
  %176 = sext i32 %173 to i64, !dbg !31
  %177 = getelementptr float, ptr addrspace(1) %2, i64 %176, !dbg !31
  %178 = bitcast float %154 to i32, !dbg !32
  %179 = bitcast float %155 to i32, !dbg !32
  %180 = bitcast float %156 to i32, !dbg !32
  %181 = bitcast float %157 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %175, i1 %27) #2, !dbg !32
  %182 = bitcast float %158 to i32, !dbg !32
  %183 = bitcast float %159 to i32, !dbg !32
  %184 = bitcast float %160 to i32, !dbg !32
  %185 = bitcast float %161 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %177, i1 %27) #2, !dbg !32
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !33
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !33
  %188 = bitcast float %162 to i32, !dbg !34
  %189 = bitcast float %163 to i32, !dbg !34
  %190 = bitcast float %164 to i32, !dbg !34
  %191 = bitcast float %165 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %186, i1 %25) #2, !dbg !34
  %192 = bitcast float %166 to i32, !dbg !34
  %193 = bitcast float %167 to i32, !dbg !34
  %194 = bitcast float %168 to i32, !dbg !34
  %195 = bitcast float %169 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %187, i1 %26) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqx3zdp5pw27wct37ty4ywplyqponchc7nms6f554f6aut5qeaeu.py", directory: "inductor_cache/qx")
!4 = !{ptr @triton_poi_fused_convolution_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_24", linkageName: "triton_poi_fused_convolution_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 43, scope: !7)
!33 = !DILocation(line: 36, column: 25, scope: !7)
!34 = !DILocation(line: 36, column: 55, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
