; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_3(ptr addrspace(1) %0, i64 %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = icmp slt i32 %11, 4, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 31, !dbg !12
  %15 = lshr i32 %13, 5, !dbg !12
  %16 = and i32 %13, 63, !dbg !12
  %17 = shl i32 %11, 6, !dbg !13
  %18 = or disjoint i32 %17, %16, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %12, i32 0, i1 %12) #5, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = sext i32 %11 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !17
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %12) #5, !dbg !18
  %26 = select i1 %12, float %22, float 0.000000e+00, !dbg !19
  %27 = bitcast float %26 to i32, !dbg !20
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 16, i32 31), !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = fadd float %26, %29, !dbg !24
  %31 = bitcast float %30 to i32, !dbg !20
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !20
  %33 = bitcast i32 %32 to float, !dbg !20
  %34 = fadd float %30, %33, !dbg !24
  %35 = bitcast float %34 to i32, !dbg !20
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !20
  %37 = bitcast i32 %36 to float, !dbg !20
  %38 = fadd float %34, %37, !dbg !24
  %39 = bitcast float %38 to i32, !dbg !20
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !20
  %41 = bitcast i32 %40 to float, !dbg !20
  %42 = fadd float %38, %41, !dbg !24
  %43 = bitcast float %42 to i32, !dbg !20
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !20
  %45 = bitcast i32 %44 to float, !dbg !20
  %46 = fadd float %42, %45, !dbg !24
  %47 = icmp eq i32 %14, 0, !dbg !20
  %48 = and i32 %15, 1, !dbg !20
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i32 %48, !dbg !20
  %50 = bitcast float %46 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 %47) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %51 = icmp slt i32 %13, 2, !dbg !20
  %52 = getelementptr float, ptr addrspace(3) @global_smem, i32 %13, !dbg !20
  %53 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %52, i1 %51) #5, !dbg !20
  %54 = bitcast i32 %53 to float, !dbg !20
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !20
  %56 = bitcast i32 %55 to float, !dbg !20
  %57 = fadd float %54, %56, !dbg !24
  %58 = and i32 %13, 1, !dbg !20
  %59 = icmp eq i32 %58, 0, !dbg !20
  %60 = and i1 %51, %59, !dbg !20
  %61 = bitcast float %57 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %61, i1 %60) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %62 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !20
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 6.400000e+01) #5, !dbg !26
  %64 = fsub float %22, %63, !dbg !27
  %65 = fmul float %64, %64, !dbg !28
  %66 = select i1 %12, float %65, float 0.000000e+00, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %67 = bitcast float %66 to i32, !dbg !30
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 16, i32 31), !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = fadd float %66, %69, !dbg !32
  %71 = bitcast float %70 to i32, !dbg !30
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = fadd float %70, %73, !dbg !32
  %75 = bitcast float %74 to i32, !dbg !30
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = fadd float %74, %77, !dbg !32
  %79 = bitcast float %78 to i32, !dbg !30
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = fadd float %78, %81, !dbg !32
  %83 = bitcast float %82 to i32, !dbg !30
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = fadd float %82, %85, !dbg !32
  %87 = bitcast float %86 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %87, i1 %47) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %52, i1 %51) #5, !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !30
  %91 = bitcast i32 %90 to float, !dbg !30
  %92 = fadd float %89, %91, !dbg !32
  %93 = bitcast float %92 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %93, i1 %60) #5, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %94 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 6.300000e+01) #5, !dbg !33
  %96 = sitofp i64 %1 to float, !dbg !34
  %97 = fmul float %95, %96, !dbg !35
  %98 = fcmp ogt float %97, 0x3F1A36E2E0000000, !dbg !36
  %99 = fcmp uno float %97, 0.000000e+00, !dbg !40
  %100 = or i1 %98, %99, !dbg !41
  %101 = select i1 %100, float %97, float 0x3F1A36E2E0000000, !dbg !42
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %102, 0, !dbg !43
  br i1 %.not.i, label %105, label %103, !dbg !43

103:                                              ; preds = %10
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

105:                                              ; preds = %10
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %103, %105
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], !dbg !43
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i1 = icmp eq i32 %107, 0, !dbg !43
  br i1 %.not.i1, label %110, label %108, !dbg !43

108:                                              ; preds = %__nv_rsqrtf.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %101), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

110:                                              ; preds = %__nv_rsqrtf.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %101), !dbg !43
  br label %__nv_rsqrtf.exit3, !dbg !43

__nv_rsqrtf.exit3:                                ; preds = %108, %110
  %.0.i2 = phi float [ %109, %108 ], [ %111, %110 ], !dbg !43
  %112 = bitcast i32 %25 to float, !dbg !18
  %113 = fcmp oeq float %97, 0x3F1A36E2E0000000, !dbg !44
  %114 = fcmp olt float %97, 0x3F1A36E2E0000000, !dbg !45
  %115 = fmul float %.0.i2, %112, !dbg !46
  %116 = fmul float %115, %22, !dbg !47
  %117 = fmul float %63, %115, !dbg !48
  %118 = fsub float %116, %117, !dbg !49
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !50
  %120 = icmp eq i32 %16, 0, !dbg !51
  %121 = bitcast float %.0.i to i32, !dbg !51
  %122 = and i1 %120, %12, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %119, i1 %122) #5, !dbg !51
  %123 = getelementptr i1, ptr addrspace(1) %5, i64 %23, !dbg !52
  %124 = zext i1 %113 to i8, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %124, ptr addrspace(1) %123, i1 %122) #5, !dbg !53
  %125 = getelementptr i1, ptr addrspace(1) %6, i64 %23, !dbg !54
  %126 = zext i1 %114 to i8, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %126, ptr addrspace(1) %125, i1 %122) #5, !dbg !55
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !56
  %128 = bitcast float %118 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 %12) #5, !dbg !57
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !58
  %130 = bitcast float %63 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %129, i1 %122) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmmsurdoho5dfdzki6rezxi4k3lmjxhbgaphlphueessorqhvdyh.py", directory: "inductor_cache/mm")
!4 = !{ptr @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_3", linkageName: "triton_per_fused_eq_lift_fresh_lt_maximum_mul_rsqrt_sub_var_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 31, scope: !7)
!18 = !DILocation(line: 33, column: 36, scope: !7)
!19 = !DILocation(line: 37, column: 33, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = !DILocation(line: 38, column: 24, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 41, column: 19, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 43, column: 20, scope: !7)
!29 = !DILocation(line: 45, column: 35, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !31)
!31 = !DILocation(line: 46, column: 26, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !31)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 21, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 52, column: 42, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 53, column: 28, scope: !7)
!44 = !DILocation(line: 54, column: 21, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 19, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 61, column: 25, scope: !7)
!53 = !DILocation(line: 61, column: 37, scope: !7)
!54 = !DILocation(line: 62, column: 25, scope: !7)
!55 = !DILocation(line: 62, column: 37, scope: !7)
!56 = !DILocation(line: 63, column: 25, scope: !7)
!57 = !DILocation(line: 63, column: 45, scope: !7)
!58 = !DILocation(line: 64, column: 25, scope: !7)
!59 = !DILocation(line: 64, column: 37, scope: !7)
!60 = !DILocation(line: 64, column: 4, scope: !7)
