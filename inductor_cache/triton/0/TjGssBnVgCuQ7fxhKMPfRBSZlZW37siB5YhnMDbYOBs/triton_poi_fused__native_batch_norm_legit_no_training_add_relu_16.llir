; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %14, 32, !dbg !12
  %17 = or disjoint i32 %14, 48, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %17, !dbg !13
  %24 = icmp slt i32 %20, 64, !dbg !14
  %25 = icmp slt i32 %21, 64, !dbg !14
  %26 = icmp slt i32 %22, 64, !dbg !14
  %27 = icmp slt i32 %23, 64, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %29 = shl i32 %28, 6, !dbg !16
  %30 = or disjoint i32 %29, %19, !dbg !17
  %31 = icmp slt i32 %30, 256, !dbg !18
  %32 = shl i32 %20, 8, !dbg !19
  %33 = shl i32 %21, 8, !dbg !19
  %34 = shl i32 %22, 8, !dbg !19
  %35 = shl i32 %23, 8, !dbg !19
  %36 = add i32 %30, %32, !dbg !20
  %37 = add i32 %30, %33, !dbg !20
  %38 = add i32 %30, %34, !dbg !20
  %39 = add i32 %30, %35, !dbg !20
  %40 = sext i32 %36 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %37 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %38 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %39 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = and i1 %24, %31, !dbg !22
  %49 = and i1 %25, %31, !dbg !22
  %50 = and i1 %26, %31, !dbg !22
  %51 = and i1 %27, %31, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !23
  %56 = sext i32 %30 to i64, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %31) #4, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %31) #4, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = bitcast i32 %62 to float, !dbg !27
  %67 = bitcast i32 %63 to float, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %31) #4, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !30
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %31) #4, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !32
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %48) #4, !dbg !33
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %49) #4, !dbg !33
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %50) #4, !dbg !33
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %51) #4, !dbg !33
  %81 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %82 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %83 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %84 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %85, 0, !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %86, 0, !dbg !35
  br i1 %.not.i, label %92, label %87, !dbg !35

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

92:                                               ; preds = %9
  br i1 %.not1.i, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i31 = icmp eq i32 %97, 0, !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i34 = icmp eq i32 %98, 0, !dbg !35
  br i1 %.not.i31, label %104, label %99, !dbg !35

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %102, label %100, !dbg !35

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %100, %102, %105, %107
  %.0.i33 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i36 = icmp eq i32 %109, 0, !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i39 = icmp eq i32 %110, 0, !dbg !35
  br i1 %.not.i36, label %116, label %111, !dbg !35

111:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

116:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

__nv_sqrtf.exit40:                                ; preds = %112, %114, %117, %119
  %.0.i38 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i41 = icmp eq i32 %121, 0, !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i44 = icmp eq i32 %122, 0, !dbg !35
  br i1 %.not.i41, label %128, label %123, !dbg !35

123:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %126, label %124, !dbg !35

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

__nv_sqrtf.exit45:                                ; preds = %124, %126, %129, %131
  %.0.i43 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %134 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %136 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %138 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %140 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %142 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %143 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %144 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %145 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %146 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %147 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %148 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %149 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %150 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %151 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %152 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %153 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !33
  %156 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !33
  %157 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !33
  %158 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !33
  %159 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !33
  %163 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !33
  %164 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !33
  %165 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !33
  %166 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !33
  %167 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !33
  %168 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !33
  %169 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !31
  %170 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !31
  %171 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !31
  %172 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !31
  %173 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !29
  %174 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !29
  %175 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !29
  %176 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !29
  %177 = or disjoint i32 %29, %17, !dbg !17
  %178 = icmp slt i32 %177, 256, !dbg !18
  %179 = or disjoint i32 %11, %19, !dbg !13
  %180 = icmp slt i32 %179, 64, !dbg !14
  %181 = and i1 %180, %178, !dbg !22
  %182 = or disjoint i32 %29, %16, !dbg !17
  %183 = icmp slt i32 %182, 256, !dbg !18
  %184 = and i1 %180, %183, !dbg !22
  %185 = or disjoint i32 %29, %15, !dbg !17
  %186 = icmp slt i32 %185, 256, !dbg !18
  %187 = and i1 %180, %186, !dbg !22
  %188 = or disjoint i32 %29, %14, !dbg !17
  %189 = icmp slt i32 %188, 256, !dbg !18
  %190 = and i1 %180, %189, !dbg !22
  %.frozen = freeze i32 %179, !dbg !36
  %191 = sdiv i32 %.frozen, 16, !dbg !36
  %192 = mul i32 %191, 16, !dbg !37
  %.decomposed = sub i32 %.frozen, %192, !dbg !37
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !38
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !38
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !38
  %197 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !25
  %198 = insertelement <4 x i32> %197, i32 %136, i64 1, !dbg !25
  %199 = insertelement <4 x i32> %198, i32 %138, i64 2, !dbg !25
  %200 = insertelement <4 x i32> %199, i32 %140, i64 3, !dbg !25
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !25
  %202 = shufflevector <4 x float> %201, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !25
  %203 = insertelement <16 x i32> poison, i32 %133, i64 0, !dbg !23
  %204 = insertelement <16 x i32> %203, i32 %135, i64 1, !dbg !23
  %205 = insertelement <16 x i32> %204, i32 %137, i64 2, !dbg !23
  %206 = insertelement <16 x i32> %205, i32 %139, i64 3, !dbg !23
  %207 = insertelement <16 x i32> %206, i32 %141, i64 4, !dbg !23
  %208 = insertelement <16 x i32> %207, i32 %142, i64 5, !dbg !23
  %209 = insertelement <16 x i32> %208, i32 %143, i64 6, !dbg !23
  %210 = insertelement <16 x i32> %209, i32 %144, i64 7, !dbg !23
  %211 = insertelement <16 x i32> %210, i32 %145, i64 8, !dbg !23
  %212 = insertelement <16 x i32> %211, i32 %146, i64 9, !dbg !23
  %213 = insertelement <16 x i32> %212, i32 %147, i64 10, !dbg !23
  %214 = insertelement <16 x i32> %213, i32 %148, i64 11, !dbg !23
  %215 = insertelement <16 x i32> %214, i32 %149, i64 12, !dbg !23
  %216 = insertelement <16 x i32> %215, i32 %150, i64 13, !dbg !23
  %217 = insertelement <16 x i32> %216, i32 %151, i64 14, !dbg !23
  %218 = insertelement <16 x i32> %217, i32 %152, i64 15, !dbg !23
  %219 = bitcast <16 x i32> %218 to <16 x float>, !dbg !23
  %220 = fsub <16 x float> %219, %202, !dbg !39
  %221 = insertelement <16 x i32> poison, i32 %153, i64 0, !dbg !33
  %222 = insertelement <16 x i32> %221, i32 %154, i64 1, !dbg !33
  %223 = insertelement <16 x i32> %222, i32 %155, i64 2, !dbg !33
  %224 = insertelement <16 x i32> %223, i32 %156, i64 3, !dbg !33
  %225 = insertelement <16 x i32> %224, i32 %157, i64 4, !dbg !33
  %226 = insertelement <16 x i32> %225, i32 %158, i64 5, !dbg !33
  %227 = insertelement <16 x i32> %226, i32 %159, i64 6, !dbg !33
  %228 = insertelement <16 x i32> %227, i32 %160, i64 7, !dbg !33
  %229 = insertelement <16 x i32> %228, i32 %161, i64 8, !dbg !33
  %230 = insertelement <16 x i32> %229, i32 %162, i64 9, !dbg !33
  %231 = insertelement <16 x i32> %230, i32 %163, i64 10, !dbg !33
  %232 = insertelement <16 x i32> %231, i32 %164, i64 11, !dbg !33
  %233 = insertelement <16 x i32> %232, i32 %165, i64 12, !dbg !33
  %234 = insertelement <16 x i32> %233, i32 %166, i64 13, !dbg !33
  %235 = insertelement <16 x i32> %234, i32 %167, i64 14, !dbg !33
  %236 = insertelement <16 x i32> %235, i32 %168, i64 15, !dbg !33
  %237 = bitcast <16 x i32> %236 to <16 x float>, !dbg !33
  %238 = insertelement <4 x i32> poison, i32 %169, i64 0, !dbg !31
  %239 = insertelement <4 x i32> %238, i32 %170, i64 1, !dbg !31
  %240 = insertelement <4 x i32> %239, i32 %171, i64 2, !dbg !31
  %241 = insertelement <4 x i32> %240, i32 %172, i64 3, !dbg !31
  %242 = bitcast <4 x i32> %241 to <4 x float>, !dbg !31
  %243 = shufflevector <4 x float> %242, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %244 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !29
  %245 = insertelement <4 x i32> %244, i32 %174, i64 1, !dbg !29
  %246 = insertelement <4 x i32> %245, i32 %175, i64 2, !dbg !29
  %247 = insertelement <4 x i32> %246, i32 %176, i64 3, !dbg !29
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !29
  %249 = shufflevector <4 x float> %248, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %250 = insertelement <16 x float> poison, float %196, i64 0, !dbg !40
  %251 = insertelement <16 x float> %250, float %195, i64 1, !dbg !40
  %252 = insertelement <16 x float> %251, float %194, i64 2, !dbg !40
  %253 = insertelement <16 x float> %252, float %193, i64 3, !dbg !40
  %254 = shufflevector <16 x float> %253, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !40
  %255 = fmul <16 x float> %220, %254, !dbg !40
  %256 = fmul <16 x float> %255, %249, !dbg !41
  %257 = fadd <16 x float> %256, %243, !dbg !42
  %258 = fadd <16 x float> %257, %237, !dbg !43
  %259 = fcmp olt <16 x float> %258, zeroinitializer, !dbg !44
  %260 = extractelement <16 x i1> %259, i64 15, !dbg !48
  %261 = extractelement <16 x float> %258, i64 15, !dbg !48
  %262 = select i1 %260, float 0.000000e+00, float %261, !dbg !48
  %263 = extractelement <16 x i1> %259, i64 14, !dbg !48
  %264 = extractelement <16 x float> %258, i64 14, !dbg !48
  %265 = select i1 %263, float 0.000000e+00, float %264, !dbg !48
  %266 = extractelement <16 x i1> %259, i64 13, !dbg !48
  %267 = extractelement <16 x float> %258, i64 13, !dbg !48
  %268 = select i1 %266, float 0.000000e+00, float %267, !dbg !48
  %269 = extractelement <16 x i1> %259, i64 12, !dbg !48
  %270 = extractelement <16 x float> %258, i64 12, !dbg !48
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !48
  %272 = extractelement <16 x i1> %259, i64 11, !dbg !48
  %273 = extractelement <16 x float> %258, i64 11, !dbg !48
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !48
  %275 = extractelement <16 x i1> %259, i64 10, !dbg !48
  %276 = extractelement <16 x float> %258, i64 10, !dbg !48
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !48
  %278 = extractelement <16 x i1> %259, i64 9, !dbg !48
  %279 = extractelement <16 x float> %258, i64 9, !dbg !48
  %280 = select i1 %278, float 0.000000e+00, float %279, !dbg !48
  %281 = extractelement <16 x i1> %259, i64 8, !dbg !48
  %282 = extractelement <16 x float> %258, i64 8, !dbg !48
  %283 = select i1 %281, float 0.000000e+00, float %282, !dbg !48
  %284 = extractelement <16 x i1> %259, i64 7, !dbg !48
  %285 = extractelement <16 x float> %258, i64 7, !dbg !48
  %286 = select i1 %284, float 0.000000e+00, float %285, !dbg !48
  %287 = extractelement <16 x i1> %259, i64 6, !dbg !48
  %288 = extractelement <16 x float> %258, i64 6, !dbg !48
  %289 = select i1 %287, float 0.000000e+00, float %288, !dbg !48
  %290 = extractelement <16 x i1> %259, i64 5, !dbg !48
  %291 = extractelement <16 x float> %258, i64 5, !dbg !48
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !48
  %293 = extractelement <16 x i1> %259, i64 4, !dbg !48
  %294 = extractelement <16 x float> %258, i64 4, !dbg !48
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !48
  %296 = extractelement <16 x i1> %259, i64 3, !dbg !48
  %297 = extractelement <16 x float> %258, i64 3, !dbg !48
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !48
  %299 = extractelement <16 x i1> %259, i64 2, !dbg !48
  %300 = extractelement <16 x float> %258, i64 2, !dbg !48
  %301 = select i1 %299, float 0.000000e+00, float %300, !dbg !48
  %302 = extractelement <16 x i1> %259, i64 1, !dbg !48
  %303 = extractelement <16 x float> %258, i64 1, !dbg !48
  %304 = select i1 %302, float 0.000000e+00, float %303, !dbg !48
  %305 = extractelement <16 x i1> %259, i64 0, !dbg !48
  %306 = extractelement <16 x float> %258, i64 0, !dbg !48
  %307 = select i1 %305, float 0.000000e+00, float %306, !dbg !48
  %308 = shl i32 %188, 4, !dbg !49
  %309 = shl i32 %185, 4, !dbg !49
  %310 = shl i32 %182, 4, !dbg !49
  %311 = shl i32 %177, 4, !dbg !49
  %312 = shl i32 %191, 12, !dbg !50
  %313 = add i32 %312, %.decomposed, !dbg !51
  %314 = add i32 %313, %308, !dbg !52
  %315 = add i32 %313, %309, !dbg !52
  %316 = add i32 %313, %310, !dbg !52
  %317 = add i32 %313, %311, !dbg !52
  %318 = sext i32 %314 to i64, !dbg !53
  %319 = getelementptr float, ptr addrspace(1) %6, i64 %318, !dbg !53
  %320 = sext i32 %315 to i64, !dbg !53
  %321 = getelementptr float, ptr addrspace(1) %6, i64 %320, !dbg !53
  %322 = sext i32 %316 to i64, !dbg !53
  %323 = getelementptr float, ptr addrspace(1) %6, i64 %322, !dbg !53
  %324 = sext i32 %317 to i64, !dbg !53
  %325 = getelementptr float, ptr addrspace(1) %6, i64 %324, !dbg !53
  %326 = shl i32 %12, 8, !dbg !54
  %327 = and i32 %326, 3840, !dbg !54
  %328 = or disjoint i32 %327, %14, !dbg !54
  %329 = and i32 %18, 1020, !dbg !54
  %330 = lshr exact i32 %327, 2, !dbg !54
  %331 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %330, !dbg !54
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %328, !dbg !54
  %333 = bitcast float %262 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !54
  %334 = or disjoint i32 %328, 64, !dbg !54
  %335 = lshr i32 %334, 4, !dbg !54
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !54
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !54
  %338 = bitcast float %265 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %337, <1 x i32> %338, i1 true) #4, !dbg !54
  %339 = or disjoint i32 %328, 128, !dbg !54
  %340 = lshr i32 %339, 4, !dbg !54
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !54
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %339, !dbg !54
  %343 = bitcast float %268 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !54
  %344 = or disjoint i32 %328, 192, !dbg !54
  %345 = lshr i32 %344, 4, !dbg !54
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !54
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %344, !dbg !54
  %348 = bitcast float %271 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !54
  %349 = or disjoint i32 %328, 16, !dbg !54
  %350 = getelementptr float, ptr addrspace(3) %331, i32 %349, !dbg !54
  %351 = bitcast float %274 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !54
  %352 = or disjoint i32 %328, 80, !dbg !54
  %353 = lshr i32 %352, 4, !dbg !54
  %354 = and i32 %353, 244, !dbg !54
  %355 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !54
  %356 = getelementptr float, ptr addrspace(3) %355, i32 %352, !dbg !54
  %357 = bitcast float %277 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !54
  %358 = or disjoint i32 %328, 144, !dbg !54
  %359 = lshr i32 %358, 4, !dbg !54
  %360 = and i32 %359, 248, !dbg !54
  %361 = getelementptr float, ptr addrspace(3) @global_smem, i32 %360, !dbg !54
  %362 = getelementptr float, ptr addrspace(3) %361, i32 %358, !dbg !54
  %363 = bitcast float %280 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #4, !dbg !54
  %364 = or disjoint i32 %328, 208, !dbg !54
  %365 = lshr i32 %364, 4, !dbg !54
  %366 = and i32 %365, 252, !dbg !54
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !54
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %364, !dbg !54
  %369 = bitcast float %283 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !54
  %370 = or disjoint i32 %328, 32, !dbg !54
  %371 = getelementptr float, ptr addrspace(3) %331, i32 %370, !dbg !54
  %372 = bitcast float %286 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !54
  %373 = or disjoint i32 %328, 96, !dbg !54
  %374 = lshr i32 %373, 4, !dbg !54
  %375 = and i32 %374, 244, !dbg !54
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !54
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %373, !dbg !54
  %378 = bitcast float %289 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !54
  %379 = or disjoint i32 %328, 160, !dbg !54
  %380 = lshr i32 %379, 4, !dbg !54
  %381 = and i32 %380, 248, !dbg !54
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !54
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %379, !dbg !54
  %384 = bitcast float %292 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !54
  %385 = or disjoint i32 %328, 224, !dbg !54
  %386 = lshr i32 %385, 4, !dbg !54
  %387 = and i32 %386, 252, !dbg !54
  %388 = getelementptr float, ptr addrspace(3) @global_smem, i32 %387, !dbg !54
  %389 = getelementptr float, ptr addrspace(3) %388, i32 %385, !dbg !54
  %390 = bitcast float %295 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %389, <1 x i32> %390, i1 true) #4, !dbg !54
  %391 = or disjoint i32 %328, 48, !dbg !54
  %392 = getelementptr float, ptr addrspace(3) %331, i32 %391, !dbg !54
  %393 = bitcast float %298 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !54
  %394 = or disjoint i32 %328, 112, !dbg !54
  %395 = lshr i32 %394, 4, !dbg !54
  %396 = and i32 %395, 244, !dbg !54
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !54
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !54
  %399 = bitcast float %301 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !54
  %400 = or disjoint i32 %328, 176, !dbg !54
  %401 = lshr i32 %400, 4, !dbg !54
  %402 = and i32 %401, 248, !dbg !54
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !54
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !54
  %405 = bitcast float %304 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !54
  %406 = or disjoint i32 %328, 240, !dbg !54
  %407 = lshr i32 %406, 4, !dbg !54
  %408 = and i32 %407, 252, !dbg !54
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !54
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %406, !dbg !54
  %411 = bitcast float %307 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %411, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %412 = lshr i32 %18, 4, !dbg !54
  %413 = and i32 %412, 60, !dbg !54
  %414 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %413, !dbg !54
  %415 = getelementptr inbounds float, ptr addrspace(3) %414, i32 %329, !dbg !54
  %416 = or disjoint i32 %329, 1024, !dbg !54
  %417 = lshr i32 %416, 4, !dbg !54
  %418 = and i32 %417, 124, !dbg !54
  %419 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %418, !dbg !54
  %420 = getelementptr inbounds float, ptr addrspace(3) %419, i32 %416, !dbg !54
  %421 = load <4 x i32>, ptr addrspace(3) %420, align 16, !dbg !54
  %422 = or disjoint i32 %329, 2048, !dbg !54
  %423 = lshr i32 %422, 4, !dbg !54
  %424 = and i32 %423, 188, !dbg !54
  %425 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %424, !dbg !54
  %426 = getelementptr inbounds float, ptr addrspace(3) %425, i32 %422, !dbg !54
  %427 = load <4 x i32>, ptr addrspace(3) %426, align 16, !dbg !54
  %428 = or disjoint i32 %329, 3072, !dbg !54
  %429 = lshr i32 %428, 4, !dbg !54
  %430 = and i32 %429, 252, !dbg !54
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !54
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %428, !dbg !54
  %433 = load <4 x i32>, ptr addrspace(3) %432, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %415, align 16, !dbg !54
  %434 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 4, !dbg !54
  %.extract16 = load i32, ptr addrspace(3) %434, align 4, !dbg !54
  %435 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 8, !dbg !54
  %.extract17 = load i32, ptr addrspace(3) %435, align 8, !dbg !54
  %436 = getelementptr inbounds i8, ptr addrspace(3) %415, i32 12, !dbg !54
  %.extract18 = load i32, ptr addrspace(3) %436, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %319, i1 %190) #4, !dbg !54
  %.extract19 = extractelement <4 x i32> %421, i64 0, !dbg !54
  %.extract20 = extractelement <4 x i32> %421, i64 1, !dbg !54
  %.extract21 = extractelement <4 x i32> %421, i64 2, !dbg !54
  %.extract22 = extractelement <4 x i32> %421, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %321, i1 %187) #4, !dbg !54
  %.extract23 = extractelement <4 x i32> %427, i64 0, !dbg !54
  %.extract24 = extractelement <4 x i32> %427, i64 1, !dbg !54
  %.extract25 = extractelement <4 x i32> %427, i64 2, !dbg !54
  %.extract26 = extractelement <4 x i32> %427, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %323, i1 %184) #4, !dbg !54
  %.extract27 = extractelement <4 x i32> %433, i64 0, !dbg !54
  %.extract28 = extractelement <4 x i32> %433, i64 1, !dbg !54
  %.extract29 = extractelement <4 x i32> %433, i64 2, !dbg !54
  %.extract30 = extractelement <4 x i32> %433, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %325, i1 %181) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4oiwjq7kscabltwx4agzhgetk42zdi65zcwlqo5o6p2yiuukglj.py", directory: "inductor_cache/4o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 45, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 52, column: 33, scope: !7)
!50 = !DILocation(line: 52, column: 43, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 38, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 55, scope: !7)
!55 = !DILocation(line: 52, column: 4, scope: !7)
