; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 30, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %.lobit = and i32 %16, 1, !dbg !12
  %17 = and i32 %13, 16, !dbg !12
  %18 = lshr exact i32 %17, 3, !dbg !12
  %19 = or disjoint i32 %.lobit, %18, !dbg !12
  %20 = and i32 %13, 32, !dbg !12
  %21 = lshr exact i32 %20, 3, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !12
  %23 = and i32 %13, 64, !dbg !12
  %24 = lshr exact i32 %23, 3, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !12
  %26 = or disjoint i32 %12, %15, !dbg !13
  %27 = or disjoint i32 %12, %25, !dbg !13
  %28 = or i32 %27, 16, !dbg !13
  %29 = icmp slt i32 %26, 104, !dbg !14
  %30 = icmp slt i32 %27, 104, !dbg !14
  %31 = icmp slt i32 %28, 104, !dbg !14
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %33 = shl i32 %32, 5, !dbg !16
  %.lobit1 = lshr exact i32 %17, 4, !dbg !17
  %34 = lshr exact i32 %20, 4, !dbg !17
  %35 = or disjoint i32 %.lobit1, %34, !dbg !17
  %36 = lshr exact i32 %23, 4, !dbg !17
  %37 = or disjoint i32 %35, %36, !dbg !17
  %38 = shl i32 %13, 2, !dbg !17
  %39 = and i32 %38, 28, !dbg !17
  %40 = or disjoint i32 %33, %37, !dbg !18
  %41 = or disjoint i32 %40, 8, !dbg !18
  %42 = or disjoint i32 %40, 16, !dbg !18
  %43 = or disjoint i32 %40, 24, !dbg !18
  %44 = or disjoint i32 %33, %39, !dbg !18
  %45 = icmp slt i32 %40, 256, !dbg !19
  %46 = icmp slt i32 %41, 256, !dbg !19
  %47 = icmp slt i32 %42, 256, !dbg !19
  %48 = icmp slt i32 %43, 256, !dbg !19
  %49 = icmp slt i32 %44, 256, !dbg !19
  %.frozen = freeze i32 %26, !dbg !20
  %50 = sdiv i32 %.frozen, 26, !dbg !20
  %51 = mul i32 %50, 26, !dbg !21
  %.decomposed = sub i32 %.frozen, %51, !dbg !21
  %.frozen22 = freeze i32 %27, !dbg !20
  %52 = sdiv i32 %.frozen22, 26, !dbg !20
  %53 = mul i32 %52, 26, !dbg !21
  %.decomposed23 = sub i32 %.frozen22, %53, !dbg !21
  %.frozen24 = freeze i32 %28, !dbg !20
  %54 = sdiv i32 %.frozen24, 26, !dbg !20
  %55 = mul i32 %54, 26, !dbg !21
  %.decomposed25 = sub i32 %.frozen24, %55, !dbg !21
  %56 = mul i32 %40, 26, !dbg !22
  %57 = mul i32 %41, 26, !dbg !22
  %58 = mul i32 %42, 26, !dbg !22
  %59 = mul i32 %43, 26, !dbg !22
  %60 = mul i32 %50, 6656, !dbg !23
  %61 = add i32 %60, %.decomposed, !dbg !24
  %62 = add i32 %61, %56, !dbg !25
  %63 = add i32 %61, %57, !dbg !25
  %64 = add i32 %61, %58, !dbg !25
  %65 = add i32 %61, %59, !dbg !25
  %66 = sext i32 %62 to i64, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !26
  %68 = sext i32 %63 to i64, !dbg !26
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !26
  %70 = sext i32 %64 to i64, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !26
  %72 = sext i32 %65 to i64, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !26
  %74 = and i1 %29, %45, !dbg !27
  %75 = and i1 %46, %29, !dbg !27
  %76 = and i1 %47, %29, !dbg !27
  %77 = and i1 %48, %29, !dbg !27
  %78 = and i1 %30, %49, !dbg !27
  %79 = and i1 %31, %49, !dbg !27
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %67, i1 %74) #4, !dbg !28
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %69, i1 %75) #4, !dbg !28
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %71, i1 %76) #4, !dbg !28
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %73, i1 %77) #4, !dbg !28
  %84 = sext i32 %.decomposed to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !29
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %29) #4, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !31
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %87, i1 %29) #4, !dbg !32
  %89 = extractvalue { i32, i32 } %88, 0, !dbg !32
  %90 = extractvalue { i32, i32 } %88, 1, !dbg !32
  %91 = bitcast i32 %89 to float, !dbg !32
  %92 = bitcast i32 %90 to float, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !33
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %93, i1 %29) #4, !dbg !34
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %84, !dbg !35
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %95, i1 %29) #4, !dbg !36
  %97 = add i32 %44, 6656, !dbg !37
  %98 = shl nsw i32 %.decomposed23, 8, !dbg !38
  %99 = shl nsw i32 %.decomposed25, 8, !dbg !38
  %100 = add i32 %97, %98, !dbg !39
  %101 = mul i32 %52, 26624, !dbg !40
  %102 = mul i32 %54, 26624, !dbg !40
  %103 = add i32 %100, %101, !dbg !41
  %104 = add i32 %102, %99, !dbg !39
  %105 = add i32 %104, %97, !dbg !41
  %106 = sext i32 %103 to i64, !dbg !42
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %106, !dbg !42
  %108 = sext i32 %105 to i64, !dbg !42
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !42
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %78) #4, !dbg !43
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %79) #4, !dbg !43
  %112 = fadd float %91, 0x3EE4F8B580000000, !dbg !44
  %113 = fadd float %92, 0x3EE4F8B580000000, !dbg !44
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %114, 0, !dbg !45
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %115, 0, !dbg !45
  br i1 %.not.i, label %121, label %116, !dbg !45

116:                                              ; preds = %10
  br i1 %.not1.i, label %119, label %117, !dbg !45

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

121:                                              ; preds = %10
  br i1 %.not1.i, label %124, label %122, !dbg !45

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %117, %119, %122, %124
  %.0.i = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !45
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i17 = icmp eq i32 %126, 0, !dbg !45
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i20 = icmp eq i32 %127, 0, !dbg !45
  br i1 %.not.i17, label %133, label %128, !dbg !45

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %131, label %129, !dbg !45

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

133:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %136, label %134, !dbg !45

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

__nv_sqrtf.exit21:                                ; preds = %129, %131, %134, %136
  %.0.i19 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !45
  %138 = extractvalue { i32, i32 } %83, 1, !dbg !28
  %139 = extractvalue { i32, i32 } %86, 1, !dbg !30
  %140 = extractvalue { i32, i32 } %83, 0, !dbg !28
  %141 = extractvalue { i32, i32 } %86, 0, !dbg !30
  %142 = extractvalue { i32, i32 } %82, 1, !dbg !28
  %143 = extractvalue { i32, i32 } %82, 0, !dbg !28
  %144 = extractvalue { i32, i32 } %81, 1, !dbg !28
  %145 = extractvalue { i32, i32 } %81, 0, !dbg !28
  %146 = extractvalue { i32, i32 } %80, 1, !dbg !28
  %147 = extractvalue { i32, i32 } %80, 0, !dbg !28
  %148 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !43
  %149 = bitcast i32 %148 to float, !dbg !43
  %150 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !43
  %151 = bitcast i32 %150 to float, !dbg !43
  %152 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !43
  %153 = bitcast i32 %152 to float, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !43
  %155 = bitcast i32 %154 to float, !dbg !43
  %156 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !43
  %157 = bitcast i32 %156 to float, !dbg !43
  %158 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !43
  %161 = bitcast i32 %160 to float, !dbg !43
  %162 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !43
  %163 = bitcast i32 %162 to float, !dbg !43
  %164 = extractvalue { i32, i32 } %96, 1, !dbg !36
  %165 = extractvalue { i32, i32 } %96, 0, !dbg !36
  %166 = extractvalue { i32, i32 } %94, 1, !dbg !34
  %167 = extractvalue { i32, i32 } %94, 0, !dbg !34
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !46
  %170 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !30
  %171 = insertelement <2 x i32> %170, i32 %141, i64 1, !dbg !30
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !30
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %174 = insertelement <8 x i32> poison, i32 %138, i64 0, !dbg !28
  %175 = insertelement <8 x i32> %174, i32 %140, i64 1, !dbg !28
  %176 = insertelement <8 x i32> %175, i32 %142, i64 2, !dbg !28
  %177 = insertelement <8 x i32> %176, i32 %143, i64 3, !dbg !28
  %178 = insertelement <8 x i32> %177, i32 %144, i64 4, !dbg !28
  %179 = insertelement <8 x i32> %178, i32 %145, i64 5, !dbg !28
  %180 = insertelement <8 x i32> %179, i32 %146, i64 6, !dbg !28
  %181 = insertelement <8 x i32> %180, i32 %147, i64 7, !dbg !28
  %182 = bitcast <8 x i32> %181 to <8 x float>, !dbg !28
  %183 = fsub <8 x float> %182, %173, !dbg !47
  %184 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !36
  %185 = insertelement <2 x i32> %184, i32 %165, i64 1, !dbg !36
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !36
  %187 = shufflevector <2 x float> %186, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %188 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !34
  %189 = insertelement <2 x i32> %188, i32 %167, i64 1, !dbg !34
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !34
  %191 = shufflevector <2 x float> %190, <2 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %192 = insertelement <8 x float> poison, float %169, i64 0, !dbg !48
  %193 = insertelement <8 x float> %192, float %168, i64 1, !dbg !48
  %194 = shufflevector <8 x float> %193, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1>, !dbg !48
  %195 = fmul <8 x float> %183, %194, !dbg !48
  %196 = fmul <8 x float> %195, %191, !dbg !49
  %197 = fadd <8 x float> %196, %187, !dbg !50
  %198 = fcmp olt <8 x float> %197, zeroinitializer, !dbg !51
  %199 = extractelement <8 x i1> %198, i64 7, !dbg !55
  %200 = extractelement <8 x float> %197, i64 7, !dbg !55
  %201 = select i1 %199, float 0.000000e+00, float %200, !dbg !55
  %202 = extractelement <8 x i1> %198, i64 6, !dbg !55
  %203 = extractelement <8 x float> %197, i64 6, !dbg !55
  %204 = select i1 %202, float 0.000000e+00, float %203, !dbg !55
  %205 = extractelement <8 x i1> %198, i64 5, !dbg !55
  %206 = extractelement <8 x float> %197, i64 5, !dbg !55
  %207 = select i1 %205, float 0.000000e+00, float %206, !dbg !55
  %208 = extractelement <8 x i1> %198, i64 4, !dbg !55
  %209 = extractelement <8 x float> %197, i64 4, !dbg !55
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !55
  %211 = extractelement <8 x i1> %198, i64 3, !dbg !55
  %212 = extractelement <8 x float> %197, i64 3, !dbg !55
  %213 = select i1 %211, float 0.000000e+00, float %212, !dbg !55
  %214 = extractelement <8 x i1> %198, i64 2, !dbg !55
  %215 = extractelement <8 x float> %197, i64 2, !dbg !55
  %216 = select i1 %214, float 0.000000e+00, float %215, !dbg !55
  %217 = extractelement <8 x i1> %198, i64 1, !dbg !55
  %218 = extractelement <8 x float> %197, i64 1, !dbg !55
  %219 = select i1 %217, float 0.000000e+00, float %218, !dbg !55
  %220 = extractelement <8 x i1> %198, i64 0, !dbg !55
  %221 = extractelement <8 x float> %197, i64 0, !dbg !55
  %222 = select i1 %220, float 0.000000e+00, float %221, !dbg !55
  %223 = shl i32 %13, 6, !dbg !55
  %224 = and i32 %223, 960, !dbg !55
  %225 = or disjoint i32 %224, %.lobit1, !dbg !55
  %226 = or disjoint i32 %225, %34, !dbg !55
  %227 = or disjoint i32 %226, %36, !dbg !55
  %228 = and i32 %38, 508, !dbg !55
  %229 = lshr exact i32 %224, 3, !dbg !55
  %230 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %229, !dbg !55
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %227, !dbg !55
  %232 = bitcast float %201 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !55
  %233 = or disjoint i32 %227, 32, !dbg !55
  %234 = lshr i32 %233, 5, !dbg !55
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !55
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !55
  %237 = bitcast float %204 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %236, <1 x i32> %237, i1 true) #4, !dbg !55
  %238 = or disjoint i32 %227, 8, !dbg !55
  %239 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %238, !dbg !55
  %240 = bitcast float %207 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #4, !dbg !55
  %241 = or disjoint i32 %227, 40, !dbg !55
  %242 = lshr i32 %241, 5, !dbg !55
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !55
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !55
  %245 = bitcast float %210 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !55
  %246 = or disjoint i32 %227, 16, !dbg !55
  %247 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %246, !dbg !55
  %248 = bitcast float %213 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !55
  %249 = or disjoint i32 %227, 48, !dbg !55
  %250 = lshr i32 %249, 5, !dbg !55
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !55
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !55
  %253 = bitcast float %216 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !55
  %254 = or disjoint i32 %227, 24, !dbg !55
  %255 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %254, !dbg !55
  %256 = bitcast float %219 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !55
  %257 = or disjoint i32 %227, 56, !dbg !55
  %258 = lshr i32 %257, 5, !dbg !55
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !55
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !55
  %261 = bitcast float %222 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %262 = lshr i32 %228, 5, !dbg !55
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !55
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %228, !dbg !55
  %265 = load float, ptr addrspace(3) %264, align 4, !dbg !55
  %266 = or disjoint i32 %228, 1, !dbg !55
  %267 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %266, !dbg !55
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !55
  %269 = or disjoint i32 %228, 2, !dbg !55
  %270 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %269, !dbg !55
  %271 = load float, ptr addrspace(3) %270, align 4, !dbg !55
  %272 = or disjoint i32 %228, 3, !dbg !55
  %273 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %272, !dbg !55
  %274 = load float, ptr addrspace(3) %273, align 4, !dbg !55
  %275 = or disjoint i32 %228, 512, !dbg !55
  %276 = lshr i32 %275, 5, !dbg !55
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !55
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !55
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !55
  %280 = or disjoint i32 %228, 513, !dbg !55
  %281 = lshr i32 %280, 5, !dbg !55
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !55
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !55
  %284 = load float, ptr addrspace(3) %283, align 4, !dbg !55
  %285 = or disjoint i32 %228, 514, !dbg !55
  %286 = lshr i32 %285, 5, !dbg !55
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !55
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !55
  %289 = load float, ptr addrspace(3) %288, align 4, !dbg !55
  %290 = or disjoint i32 %228, 515, !dbg !55
  %291 = lshr i32 %290, 5, !dbg !55
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !55
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !55
  %294 = load float, ptr addrspace(3) %293, align 4, !dbg !55
  %295 = fadd float %265, %163, !dbg !56
  %296 = fadd float %268, %161, !dbg !56
  %297 = fadd float %271, %159, !dbg !56
  %298 = fadd float %274, %157, !dbg !56
  %299 = fadd float %279, %155, !dbg !56
  %300 = fadd float %284, %153, !dbg !56
  %301 = fadd float %289, %151, !dbg !56
  %302 = fadd float %294, %149, !dbg !56
  %303 = add i32 %98, %44, !dbg !57
  %304 = mul i32 %52, 13312, !dbg !58
  %305 = mul i32 %54, 13312, !dbg !58
  %306 = add i32 %303, %304, !dbg !59
  %307 = add i32 %305, %99, !dbg !57
  %308 = add i32 %307, %44, !dbg !59
  %309 = sext i32 %306 to i64, !dbg !60
  %310 = getelementptr float, ptr addrspace(1) %6, i64 %309, !dbg !60
  %311 = sext i32 %308 to i64, !dbg !60
  %312 = getelementptr float, ptr addrspace(1) %6, i64 %311, !dbg !60
  %313 = bitcast float %265 to i32, !dbg !61
  %314 = bitcast float %268 to i32, !dbg !61
  %315 = bitcast float %271 to i32, !dbg !61
  %316 = bitcast float %274 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %314, i32 %315, i32 %316, ptr addrspace(1) %310, i1 %78) #4, !dbg !61
  %317 = bitcast float %279 to i32, !dbg !61
  %318 = bitcast float %284 to i32, !dbg !61
  %319 = bitcast float %289 to i32, !dbg !61
  %320 = bitcast float %294 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %312, i1 %79) #4, !dbg !61
  %321 = getelementptr float, ptr addrspace(1) %7, i64 %66, !dbg !62
  %322 = getelementptr float, ptr addrspace(1) %7, i64 %68, !dbg !62
  %323 = getelementptr float, ptr addrspace(1) %7, i64 %70, !dbg !62
  %324 = getelementptr float, ptr addrspace(1) %7, i64 %72, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %325 = shl i32 %13, 7, !dbg !63
  %326 = and i32 %325, 896, !dbg !63
  %327 = or disjoint i32 %326, %.lobit, !dbg !63
  %328 = or disjoint i32 %327, %18, !dbg !63
  %329 = or disjoint i32 %328, %21, !dbg !63
  %330 = or disjoint i32 %329, %24, !dbg !63
  %331 = and i32 %14, 254, !dbg !63
  %332 = lshr exact i32 %326, 2, !dbg !63
  %333 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %332, !dbg !63
  %334 = getelementptr float, ptr addrspace(3) %333, i32 %330, !dbg !63
  %335 = bitcast float %295 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 true) #4, !dbg !63
  %336 = or disjoint i32 %330, 32, !dbg !63
  %337 = lshr i32 %336, 4, !dbg !63
  %338 = and i32 %337, 268435454, !dbg !63
  %339 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !63
  %340 = getelementptr float, ptr addrspace(3) %339, i32 %336, !dbg !63
  %341 = bitcast float %296 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 true) #4, !dbg !63
  %342 = or disjoint i32 %330, 64, !dbg !63
  %343 = lshr i32 %342, 4, !dbg !63
  %344 = and i32 %343, 268435454, !dbg !63
  %345 = getelementptr float, ptr addrspace(3) @global_smem, i32 %344, !dbg !63
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %342, !dbg !63
  %347 = bitcast float %297 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #4, !dbg !63
  %348 = or disjoint i32 %330, 96, !dbg !63
  %349 = lshr i32 %348, 4, !dbg !63
  %350 = and i32 %349, 268435454, !dbg !63
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %350, !dbg !63
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %348, !dbg !63
  %353 = bitcast float %298 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !63
  %354 = or disjoint i32 %330, 16, !dbg !63
  %355 = getelementptr float, ptr addrspace(3) %333, i32 %354, !dbg !63
  %356 = bitcast float %299 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !63
  %357 = or disjoint i32 %330, 48, !dbg !63
  %358 = lshr i32 %357, 4, !dbg !63
  %359 = and i32 %358, 268435454, !dbg !63
  %360 = getelementptr float, ptr addrspace(3) @global_smem, i32 %359, !dbg !63
  %361 = getelementptr float, ptr addrspace(3) %360, i32 %357, !dbg !63
  %362 = bitcast float %300 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !63
  %363 = or disjoint i32 %330, 80, !dbg !63
  %364 = lshr i32 %363, 4, !dbg !63
  %365 = and i32 %364, 268435454, !dbg !63
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !63
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %363, !dbg !63
  %368 = bitcast float %301 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #4, !dbg !63
  %369 = or disjoint i32 %330, 112, !dbg !63
  %370 = lshr i32 %369, 4, !dbg !63
  %371 = and i32 %370, 268435454, !dbg !63
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !63
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %369, !dbg !63
  %374 = bitcast float %302 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %375 = lshr i32 %14, 4, !dbg !63
  %376 = and i32 %375, 14, !dbg !63
  %377 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %376, !dbg !63
  %378 = getelementptr inbounds float, ptr addrspace(3) %377, i32 %331, !dbg !63
  %379 = or disjoint i32 %331, 256, !dbg !63
  %380 = lshr i32 %379, 4, !dbg !63
  %381 = and i32 %380, 30, !dbg !63
  %382 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %381, !dbg !63
  %383 = getelementptr inbounds float, ptr addrspace(3) %382, i32 %379, !dbg !63
  %384 = load <2 x i32>, ptr addrspace(3) %383, align 8, !dbg !63
  %385 = or disjoint i32 %331, 512, !dbg !63
  %386 = lshr i32 %385, 4, !dbg !63
  %387 = and i32 %386, 46, !dbg !63
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %387, !dbg !63
  %389 = getelementptr inbounds float, ptr addrspace(3) %388, i32 %385, !dbg !63
  %390 = load <2 x i32>, ptr addrspace(3) %389, align 8, !dbg !63
  %391 = or disjoint i32 %331, 768, !dbg !63
  %392 = lshr i32 %391, 4, !dbg !63
  %393 = and i32 %392, 62, !dbg !63
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %393, !dbg !63
  %395 = getelementptr inbounds float, ptr addrspace(3) %394, i32 %391, !dbg !63
  %396 = load <2 x i32>, ptr addrspace(3) %395, align 8, !dbg !63
  %.extract = load i32, ptr addrspace(3) %378, align 8, !dbg !63
  %397 = getelementptr inbounds i8, ptr addrspace(3) %378, i32 4, !dbg !63
  %.extract10 = load i32, ptr addrspace(3) %397, align 4, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %321, i1 %74) #4, !dbg !63
  %.extract11 = extractelement <2 x i32> %384, i64 0, !dbg !63
  %.extract12 = extractelement <2 x i32> %384, i64 1, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %322, i1 %75) #4, !dbg !63
  %.extract13 = extractelement <2 x i32> %390, i64 0, !dbg !63
  %.extract14 = extractelement <2 x i32> %390, i64 1, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %323, i1 %76) #4, !dbg !63
  %.extract15 = extractelement <2 x i32> %396, i64 0, !dbg !63
  %.extract16 = extractelement <2 x i32> %396, i64 1, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %324, i1 %77) #4, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyumm56tp4lu3xm32uofugalzh5c2gkb5aikbv5loe5oggybrygt.py", directory: "inductor_cache/yu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 48, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 47, scope: !7)
!39 = !DILocation(line: 36, column: 43, scope: !7)
!40 = !DILocation(line: 36, column: 58, scope: !7)
!41 = !DILocation(line: 36, column: 52, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 63, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 30, scope: !7)
!58 = !DILocation(line: 51, column: 45, scope: !7)
!59 = !DILocation(line: 51, column: 39, scope: !7)
!60 = !DILocation(line: 51, column: 25, scope: !7)
!61 = !DILocation(line: 51, column: 57, scope: !7)
!62 = !DILocation(line: 52, column: 25, scope: !7)
!63 = !DILocation(line: 52, column: 55, scope: !7)
!64 = !DILocation(line: 52, column: 4, scope: !7)
