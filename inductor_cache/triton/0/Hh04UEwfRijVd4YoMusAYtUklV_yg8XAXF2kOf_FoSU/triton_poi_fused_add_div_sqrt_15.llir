; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %13, !dbg !15
  %21 = or disjoint i32 %9, %14, !dbg !15
  %22 = or disjoint i32 %9, %15, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %.frozen = freeze i32 %6, !dbg !16
  %27 = sdiv i32 %.frozen, 64, !dbg !16
  %28 = mul i32 %27, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = shl i32 %19, 6, !dbg !18
  %30 = shl i32 %20, 6, !dbg !18
  %31 = shl i32 %21, 6, !dbg !18
  %32 = shl i32 %22, 6, !dbg !18
  %33 = shl i32 %23, 6, !dbg !18
  %34 = shl i32 %24, 6, !dbg !18
  %35 = shl i32 %25, 6, !dbg !18
  %36 = shl i32 %26, 6, !dbg !18
  %37 = shl i32 %27, 18, !dbg !19
  %38 = add i32 %37, %.decomposed, !dbg !20
  %39 = add i32 %38, %29, !dbg !21
  %40 = add i32 %38, %30, !dbg !21
  %41 = add i32 %38, %31, !dbg !21
  %42 = add i32 %38, %32, !dbg !21
  %43 = add i32 %38, %33, !dbg !21
  %44 = add i32 %38, %34, !dbg !21
  %45 = add i32 %38, %35, !dbg !21
  %46 = add i32 %38, %36, !dbg !21
  %47 = sext i32 %39 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %40 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = sext i32 %41 to i64, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !22
  %53 = sext i32 %42 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %43 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %44 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %45 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %46 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %7) #3, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %7) #3, !dbg !23
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %7) #3, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %7) #3, !dbg !23
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %7) #3, !dbg !23
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %7) #3, !dbg !23
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %7) #3, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %7) #3, !dbg !23
  %71 = shl i32 %27, 12, !dbg !24
  %72 = add i32 %19, %71, !dbg !25
  %73 = add i32 %71, %23, !dbg !25
  %74 = sext i32 %72 to i64, !dbg !26
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !26
  %76 = sext i32 %73 to i64, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %7) #3, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !27
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = bitcast i32 %80 to float, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = bitcast i32 %82 to float, !dbg !27
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %7) #3, !dbg !27
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !27
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !27
  %92 = bitcast i32 %88 to float, !dbg !27
  %93 = bitcast i32 %89 to float, !dbg !27
  %94 = bitcast i32 %90 to float, !dbg !27
  %95 = bitcast i32 %91 to float, !dbg !27
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %96, 0, !dbg !28
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %97, 0, !dbg !28
  br i1 %.not.i, label %103, label %98, !dbg !28

98:                                               ; preds = %5
  br i1 %.not1.i, label %101, label %99, !dbg !28

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

103:                                              ; preds = %5
  br i1 %.not1.i, label %106, label %104, !dbg !28

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !28
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %108, 0, !dbg !28
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !28
  br i1 %.not.i1, label %115, label %110, !dbg !28

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !28

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !28

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !28
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %120, 0, !dbg !28
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !28
  br i1 %.not.i6, label %127, label %122, !dbg !28

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !28

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !28

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !28
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %132, 0, !dbg !28
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !28
  br i1 %.not.i11, label %139, label %134, !dbg !28

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !28

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !28

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !28
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i16 = icmp eq i32 %144, 0, !dbg !28
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i19 = icmp eq i32 %145, 0, !dbg !28
  br i1 %.not.i16, label %151, label %146, !dbg !28

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !28

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

151:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %154, label %152, !dbg !28

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !28
  br label %__nv_sqrtf.exit20, !dbg !28

__nv_sqrtf.exit20:                                ; preds = %147, %149, %152, %154
  %.0.i18 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !28
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i21 = icmp eq i32 %156, 0, !dbg !28
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i24 = icmp eq i32 %157, 0, !dbg !28
  br i1 %.not.i21, label %163, label %158, !dbg !28

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !28

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

163:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %166, label %164, !dbg !28

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !28
  br label %__nv_sqrtf.exit25, !dbg !28

__nv_sqrtf.exit25:                                ; preds = %159, %161, %164, %166
  %.0.i23 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !28
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i26 = icmp eq i32 %168, 0, !dbg !28
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i29 = icmp eq i32 %169, 0, !dbg !28
  br i1 %.not.i26, label %175, label %170, !dbg !28

170:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %173, label %171, !dbg !28

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

175:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %178, label %176, !dbg !28

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !28
  br label %__nv_sqrtf.exit30, !dbg !28

__nv_sqrtf.exit30:                                ; preds = %171, %173, %176, %178
  %.0.i28 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !28
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i31 = icmp eq i32 %180, 0, !dbg !28
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i34 = icmp eq i32 %181, 0, !dbg !28
  br i1 %.not.i31, label %187, label %182, !dbg !28

182:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %185, label %183, !dbg !28

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

187:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %190, label %188, !dbg !28

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !28
  br label %__nv_sqrtf.exit35, !dbg !28

__nv_sqrtf.exit35:                                ; preds = %183, %185, %188, %190
  %.0.i33 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !28
  %192 = bitcast i32 %70 to float, !dbg !23
  %193 = bitcast i32 %69 to float, !dbg !23
  %194 = bitcast i32 %68 to float, !dbg !23
  %195 = bitcast i32 %67 to float, !dbg !23
  %196 = bitcast i32 %66 to float, !dbg !23
  %197 = bitcast i32 %65 to float, !dbg !23
  %198 = bitcast i32 %64 to float, !dbg !23
  %199 = bitcast i32 %63 to float, !dbg !23
  %200 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !29
  %201 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !29
  %202 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !29
  %203 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !29
  %204 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !29
  %205 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !29
  %206 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !29
  %207 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !29
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %200) #3, !dbg !30
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %201) #3, !dbg !30
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %202) #3, !dbg !30
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %203) #3, !dbg !30
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %195, float %204) #3, !dbg !30
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %205) #3, !dbg !30
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %193, float %206) #3, !dbg !30
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %207) #3, !dbg !30
  %216 = shl i32 %6, 12, !dbg !31
  %217 = add i32 %19, %216, !dbg !32
  %218 = add i32 %216, %23, !dbg !32
  %219 = sext i32 %217 to i64, !dbg !33
  %220 = getelementptr float, ptr addrspace(1) %2, i64 %219, !dbg !33
  %221 = sext i32 %218 to i64, !dbg !33
  %222 = getelementptr float, ptr addrspace(1) %2, i64 %221, !dbg !33
  %223 = bitcast float %208 to i32, !dbg !34
  %224 = bitcast float %209 to i32, !dbg !34
  %225 = bitcast float %210 to i32, !dbg !34
  %226 = bitcast float %211 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %223, i32 %224, i32 %225, i32 %226, ptr addrspace(1) %220, i1 %7) #3, !dbg !34
  %227 = bitcast float %212 to i32, !dbg !34
  %228 = bitcast float %213 to i32, !dbg !34
  %229 = bitcast float %214 to i32, !dbg !34
  %230 = bitcast float %215 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %222, i1 %7) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c32nqvbwru636qjud3ykdwikdnfqkk2c3pqjrvpd2klyhxqybcsu.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_15", linkageName: "triton_poi_fused_add_div_sqrt_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 50, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 40, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 45, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 35, scope: !7)
!32 = !DILocation(line: 38, column: 30, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 38, column: 46, scope: !7)
!35 = !DILocation(line: 38, column: 4, scope: !7)
