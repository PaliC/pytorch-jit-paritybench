; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %20 = sdiv i32 %.frozen, 32, !dbg !14
  %21 = srem i32 %20, 32, !dbg !15
  %22 = mul i32 %20, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %19, 1024, !dbg !17
  %24 = srem i32 %23, 64, !dbg !18
  %25 = sext i32 %21 to i64, !dbg !19
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !20
  %29 = sext i32 %.decomposed to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %2, i64 %29, !dbg !21
  %31 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %32 = extractvalue { i64, i64 } %31, 0, !dbg !22
  %33 = extractvalue { i64, i64 } %31, 1, !dbg !22
  %34 = sext i32 %24 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !24
  %38 = getelementptr i64, ptr addrspace(1) %6, i64 %25, !dbg !25
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !26
  %41 = getelementptr i64, ptr addrspace(1) %7, i64 %29, !dbg !27
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !28
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !28
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %29, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !30
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !31
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !32
  %53 = bitcast i32 %52 to float, !dbg !32
  %54 = sext i32 %19 to i64, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !33
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !34
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !34
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !34
  %59 = bitcast i32 %57 to float, !dbg !34
  %60 = bitcast i32 %58 to float, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !35
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !36
  %63 = extractvalue { i32, i32 } %62, 0, !dbg !36
  %64 = extractvalue { i32, i32 } %62, 1, !dbg !36
  %65 = bitcast i32 %63 to float, !dbg !36
  %66 = bitcast i32 %64 to float, !dbg !36
  %67 = getelementptr float, ptr addrspace(1) %11, i64 %34, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !38
  %71 = bitcast i32 %70 to float, !dbg !38
  %72 = lshr i64 %27, 59, !dbg !39
  %73 = and i64 %72, 16, !dbg !39
  %74 = add i64 %73, %27, !dbg !39
  %75 = lshr i64 %32, 59, !dbg !40
  %76 = and i64 %75, 16, !dbg !40
  %77 = add i64 %76, %32, !dbg !40
  %78 = lshr i64 %33, 59, !dbg !40
  %79 = and i64 %78, 16, !dbg !40
  %80 = add i64 %79, %33, !dbg !40
  %81 = shl i64 %74, 4, !dbg !41
  %82 = shl nsw i32 %23, 8, !dbg !42
  %83 = sext i32 %82 to i64, !dbg !43
  %84 = add i64 %81, %83, !dbg !44
  %85 = add i64 %84, %77, !dbg !43
  %86 = add i64 %84, %80, !dbg !43
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !45
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !45
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #1, !dbg !46
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !46
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !47
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !47
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !48
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !48
  %95 = lshr i64 %39, 59, !dbg !49
  %96 = and i64 %95, 16, !dbg !49
  %97 = add i64 %96, %39, !dbg !49
  %98 = shl i64 %97, 4, !dbg !50
  %99 = add i64 %98, %83, !dbg !51
  %100 = add i64 %99, %77, !dbg !52
  %101 = add i64 %99, %80, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !53
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !53
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #1, !dbg !54
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !54
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !55
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !55
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !56
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !56
  %110 = lshr i64 %43, 59, !dbg !57
  %111 = and i64 %110, 16, !dbg !57
  %112 = add i64 %111, %43, !dbg !57
  %113 = lshr i64 %44, 59, !dbg !57
  %114 = and i64 %113, 16, !dbg !57
  %115 = add i64 %114, %44, !dbg !57
  %116 = add i64 %99, %112, !dbg !58
  %117 = add i64 %99, %115, !dbg !58
  %118 = getelementptr float, ptr addrspace(1) %3, i64 %116, !dbg !59
  %119 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !59
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !60
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !60
  %122 = getelementptr float, ptr addrspace(1) %4, i64 %116, !dbg !61
  %123 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !61
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #1, !dbg !62
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !62
  %126 = add i64 %84, %112, !dbg !63
  %127 = add i64 %84, %115, !dbg !63
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %126, !dbg !64
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !64
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !65
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #1, !dbg !65
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %126, !dbg !66
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !66
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !67
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !67
  %136 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !46
  %137 = insertelement <2 x i32> %136, i32 %104, i64 1, !dbg !46
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !46
  %139 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !48
  %140 = insertelement <2 x i32> %139, i32 %108, i64 1, !dbg !48
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !48
  %142 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !68
  %143 = bitcast <2 x i32> %142 to <2 x float>, !dbg !68
  %144 = shufflevector <2 x float> %143, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %145 = fadd <2 x float> %144, %141, !dbg !68
  %146 = fadd <2 x float> %145, %138, !dbg !69
  %147 = insertelement <2 x i32> poison, i32 %130, i64 0, !dbg !65
  %148 = insertelement <2 x i32> %147, i32 %120, i64 1, !dbg !65
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !65
  %150 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !67
  %151 = insertelement <2 x i32> %150, i32 %124, i64 1, !dbg !67
  %152 = bitcast <2 x i32> %151 to <2 x float>, !dbg !67
  %153 = fadd <2 x float> %144, %152, !dbg !70
  %154 = fadd <2 x float> %153, %149, !dbg !71
  %155 = fsub <2 x float> %154, %146, !dbg !72
  %156 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !73
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !73
  %158 = shufflevector <2 x float> %157, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %159 = fmul <2 x float> %155, %158, !dbg !73
  %160 = fadd <2 x float> %146, %159, !dbg !74
  %161 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !46
  %162 = insertelement <2 x i32> %161, i32 %105, i64 1, !dbg !46
  %163 = bitcast <2 x i32> %162 to <2 x float>, !dbg !46
  %164 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !48
  %165 = insertelement <2 x i32> %164, i32 %109, i64 1, !dbg !48
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !48
  %167 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !68
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !68
  %169 = shufflevector <2 x float> %168, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %170 = fadd <2 x float> %169, %166, !dbg !68
  %171 = fadd <2 x float> %170, %163, !dbg !69
  %172 = insertelement <2 x i32> poison, i32 %131, i64 0, !dbg !65
  %173 = insertelement <2 x i32> %172, i32 %121, i64 1, !dbg !65
  %174 = bitcast <2 x i32> %173 to <2 x float>, !dbg !65
  %175 = insertelement <2 x i32> poison, i32 %135, i64 0, !dbg !67
  %176 = insertelement <2 x i32> %175, i32 %125, i64 1, !dbg !67
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !67
  %178 = fadd <2 x float> %169, %177, !dbg !70
  %179 = fadd <2 x float> %178, %174, !dbg !71
  %180 = fsub <2 x float> %179, %171, !dbg !72
  %181 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !73
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !73
  %183 = shufflevector <2 x float> %182, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %184 = fmul <2 x float> %180, %183, !dbg !73
  %185 = fadd <2 x float> %171, %184, !dbg !74
  %186 = extractelement <2 x float> %160, i64 0, !dbg !75
  %187 = extractelement <2 x float> %160, i64 1, !dbg !76
  %188 = fsub float %186, %187, !dbg !75
  %189 = extractelement <2 x float> %185, i64 0, !dbg !75
  %190 = extractelement <2 x float> %185, i64 1, !dbg !76
  %191 = fsub float %189, %190, !dbg !75
  %192 = fmul float %188, %51, !dbg !77
  %193 = fmul float %191, %53, !dbg !77
  %194 = fadd float %65, %69, !dbg !78
  %195 = fadd float %66, %71, !dbg !78
  %196 = fadd float %194, %59, !dbg !79
  %197 = fadd float %195, %60, !dbg !79
  %198 = fadd float %187, %192, !dbg !76
  %199 = fadd float %190, %193, !dbg !76
  %200 = fadd float %196, %198, !dbg !80
  %201 = fadd float %197, %199, !dbg !80
  %202 = bitcast float %200 to i32, !dbg !81
  %203 = bitcast float %201 to i32, !dbg !81
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %202, i32 %203, ptr addrspace(1) %61, i1 true) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjxtjxo3pvis2cu4nwj7uq37nuw3ooc2qde2el6c4ctiefzrbci.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 40, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 40, scope: !7)
!42 = !DILocation(line: 46, column: 51, scope: !7)
!43 = !DILocation(line: 46, column: 47, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 56, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 57, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 41, scope: !7)
!51 = !DILocation(line: 55, column: 38, scope: !7)
!52 = !DILocation(line: 55, column: 49, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 58, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 58, scope: !7)
!57 = !DILocation(line: 62, column: 35, scope: !7)
!58 = !DILocation(line: 63, column: 50, scope: !7)
!59 = !DILocation(line: 63, column: 31, scope: !7)
!60 = !DILocation(line: 63, column: 59, scope: !7)
!61 = !DILocation(line: 64, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 59, scope: !7)
!63 = !DILocation(line: 71, column: 49, scope: !7)
!64 = !DILocation(line: 71, column: 31, scope: !7)
!65 = !DILocation(line: 71, column: 58, scope: !7)
!66 = !DILocation(line: 72, column: 31, scope: !7)
!67 = !DILocation(line: 72, column: 58, scope: !7)
!68 = !DILocation(line: 48, column: 20, scope: !7)
!69 = !DILocation(line: 51, column: 19, scope: !7)
!70 = !DILocation(line: 73, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 79, column: 20, scope: !7)
!76 = !DILocation(line: 84, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 40, scope: !7)
!82 = !DILocation(line: 86, column: 4, scope: !7)
