; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = icmp slt i32 %13, 8193152, !dbg !14
  %16 = icmp slt i32 %14, 8193152, !dbg !14
  %17 = srem i32 %13, 32, !dbg !15
  %18 = sext i32 %13 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %15) #3, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 %16) #3, !dbg !17
  %24 = sext i32 %17 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !18
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %15) #3, !dbg !19
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %15) #3, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = bitcast i32 %33 to float, !dbg !21
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !21
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !21
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !21
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !21
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !21
  %43 = bitcast i32 %39 to float, !dbg !21
  %44 = bitcast i32 %40 to float, !dbg !21
  %45 = bitcast i32 %41 to float, !dbg !21
  %46 = bitcast i32 %42 to float, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %15) #3, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %16) #3, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %15) #3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %16) #3, !dbg !25
  %53 = fadd float %34, 0x3F50624DE0000000, !dbg !26
  %54 = fadd float %35, 0x3F50624DE0000000, !dbg !26
  %55 = fadd float %36, 0x3F50624DE0000000, !dbg !26
  %56 = fadd float %37, 0x3F50624DE0000000, !dbg !26
  %57 = fadd float %43, 0x3F50624DE0000000, !dbg !26
  %58 = fadd float %44, 0x3F50624DE0000000, !dbg !26
  %59 = fadd float %45, 0x3F50624DE0000000, !dbg !26
  %60 = fadd float %46, 0x3F50624DE0000000, !dbg !26
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %61, 0, !dbg !27
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %62, 0, !dbg !27
  br i1 %.not.i, label %68, label %63, !dbg !27

63:                                               ; preds = %7
  br i1 %.not1.i, label %66, label %64, !dbg !27

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

68:                                               ; preds = %7
  br i1 %.not1.i, label %71, label %69, !dbg !27

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %64, %66, %69, %71
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %73, 0, !dbg !27
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %74, 0, !dbg !27
  br i1 %.not.i1, label %80, label %75, !dbg !27

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %78, label %76, !dbg !27

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !27

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %76, %78, %81, %83
  %.0.i3 = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !27
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i6 = icmp eq i32 %85, 0, !dbg !27
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i9 = icmp eq i32 %86, 0, !dbg !27
  br i1 %.not.i6, label %92, label %87, !dbg !27

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !27

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

92:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %95, label %93, !dbg !27

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %88, %90, %93, %95
  %.0.i8 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !27
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i11 = icmp eq i32 %97, 0, !dbg !27
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i14 = icmp eq i32 %98, 0, !dbg !27
  br i1 %.not.i11, label %104, label %99, !dbg !27

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !27

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

104:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %107, label %105, !dbg !27

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %100, %102, %105, %107
  %.0.i13 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !27
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i16 = icmp eq i32 %109, 0, !dbg !27
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i19 = icmp eq i32 %110, 0, !dbg !27
  br i1 %.not.i16, label %116, label %111, !dbg !27

111:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %114, label %112, !dbg !27

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

116:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %119, label %117, !dbg !27

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !27
  br label %__nv_sqrtf.exit20, !dbg !27

__nv_sqrtf.exit20:                                ; preds = %112, %114, %117, %119
  %.0.i18 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !27
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i21 = icmp eq i32 %121, 0, !dbg !27
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i24 = icmp eq i32 %122, 0, !dbg !27
  br i1 %.not.i21, label %128, label %123, !dbg !27

123:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %126, label %124, !dbg !27

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

128:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %131, label %129, !dbg !27

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !27
  br label %__nv_sqrtf.exit25, !dbg !27

__nv_sqrtf.exit25:                                ; preds = %124, %126, %129, %131
  %.0.i23 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !27
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i26 = icmp eq i32 %133, 0, !dbg !27
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i29 = icmp eq i32 %134, 0, !dbg !27
  br i1 %.not.i26, label %140, label %135, !dbg !27

135:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %138, label %136, !dbg !27

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

140:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %143, label %141, !dbg !27

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #3, !dbg !27
  br label %__nv_sqrtf.exit30, !dbg !27

__nv_sqrtf.exit30:                                ; preds = %136, %138, %141, %143
  %.0.i28 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !27
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i31 = icmp eq i32 %145, 0, !dbg !27
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i34 = icmp eq i32 %146, 0, !dbg !27
  br i1 %.not.i31, label %152, label %147, !dbg !27

147:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %150, label %148, !dbg !27

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

152:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %155, label %153, !dbg !27

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !27
  br label %__nv_sqrtf.exit35, !dbg !27

__nv_sqrtf.exit35:                                ; preds = %148, %150, %153, %155
  %.0.i33 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !27
  %157 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %158 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !19
  %159 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %160 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !19
  %161 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %162 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !19
  %163 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %164 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !19
  %165 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %166 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !19
  %167 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %168 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !19
  %169 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %170 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !19
  %171 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %172 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !19
  %173 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %174 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %175 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %176 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %177 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %178 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %179 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %180 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %181 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %182 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %183 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %184 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %185 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %186 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %187 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %188 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !28
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !28
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !28
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !28
  %197 = insertelement <8 x i32> poison, i32 %157, i64 0, !dbg !17
  %198 = insertelement <8 x i32> %197, i32 %159, i64 1, !dbg !17
  %199 = insertelement <8 x i32> %198, i32 %161, i64 2, !dbg !17
  %200 = insertelement <8 x i32> %199, i32 %163, i64 3, !dbg !17
  %201 = insertelement <8 x i32> %200, i32 %165, i64 4, !dbg !17
  %202 = insertelement <8 x i32> %201, i32 %167, i64 5, !dbg !17
  %203 = insertelement <8 x i32> %202, i32 %169, i64 6, !dbg !17
  %204 = insertelement <8 x i32> %203, i32 %171, i64 7, !dbg !17
  %205 = bitcast <8 x i32> %204 to <8 x float>, !dbg !17
  %206 = insertelement <8 x i32> poison, i32 %158, i64 0, !dbg !19
  %207 = insertelement <8 x i32> %206, i32 %160, i64 1, !dbg !19
  %208 = insertelement <8 x i32> %207, i32 %162, i64 2, !dbg !19
  %209 = insertelement <8 x i32> %208, i32 %164, i64 3, !dbg !19
  %210 = insertelement <8 x i32> %209, i32 %166, i64 4, !dbg !19
  %211 = insertelement <8 x i32> %210, i32 %168, i64 5, !dbg !19
  %212 = insertelement <8 x i32> %211, i32 %170, i64 6, !dbg !19
  %213 = insertelement <8 x i32> %212, i32 %172, i64 7, !dbg !19
  %214 = bitcast <8 x i32> %213 to <8 x float>, !dbg !19
  %215 = fsub <8 x float> %205, %214, !dbg !29
  %216 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !25
  %217 = insertelement <8 x i32> %216, i32 %174, i64 1, !dbg !25
  %218 = insertelement <8 x i32> %217, i32 %175, i64 2, !dbg !25
  %219 = insertelement <8 x i32> %218, i32 %176, i64 3, !dbg !25
  %220 = insertelement <8 x i32> %219, i32 %177, i64 4, !dbg !25
  %221 = insertelement <8 x i32> %220, i32 %178, i64 5, !dbg !25
  %222 = insertelement <8 x i32> %221, i32 %179, i64 6, !dbg !25
  %223 = insertelement <8 x i32> %222, i32 %180, i64 7, !dbg !25
  %224 = bitcast <8 x i32> %223 to <8 x float>, !dbg !25
  %225 = insertelement <8 x i32> poison, i32 %181, i64 0, !dbg !23
  %226 = insertelement <8 x i32> %225, i32 %182, i64 1, !dbg !23
  %227 = insertelement <8 x i32> %226, i32 %183, i64 2, !dbg !23
  %228 = insertelement <8 x i32> %227, i32 %184, i64 3, !dbg !23
  %229 = insertelement <8 x i32> %228, i32 %185, i64 4, !dbg !23
  %230 = insertelement <8 x i32> %229, i32 %186, i64 5, !dbg !23
  %231 = insertelement <8 x i32> %230, i32 %187, i64 6, !dbg !23
  %232 = insertelement <8 x i32> %231, i32 %188, i64 7, !dbg !23
  %233 = bitcast <8 x i32> %232 to <8 x float>, !dbg !23
  %234 = insertelement <8 x float> poison, float %196, i64 0, !dbg !30
  %235 = insertelement <8 x float> %234, float %195, i64 1, !dbg !30
  %236 = insertelement <8 x float> %235, float %194, i64 2, !dbg !30
  %237 = insertelement <8 x float> %236, float %193, i64 3, !dbg !30
  %238 = insertelement <8 x float> %237, float %192, i64 4, !dbg !30
  %239 = insertelement <8 x float> %238, float %191, i64 5, !dbg !30
  %240 = insertelement <8 x float> %239, float %190, i64 6, !dbg !30
  %241 = insertelement <8 x float> %240, float %189, i64 7, !dbg !30
  %242 = fmul <8 x float> %215, %241, !dbg !30
  %243 = fmul <8 x float> %242, %233, !dbg !31
  %244 = fadd <8 x float> %243, %224, !dbg !32
  %245 = fcmp olt <8 x float> %244, zeroinitializer, !dbg !33
  %246 = extractelement <8 x i1> %245, i64 7, !dbg !37
  %247 = extractelement <8 x i1> %245, i64 6, !dbg !37
  %248 = extractelement <8 x i1> %245, i64 5, !dbg !37
  %249 = extractelement <8 x i1> %245, i64 4, !dbg !37
  %250 = extractelement <8 x i1> %245, i64 3, !dbg !37
  %251 = extractelement <8 x i1> %245, i64 2, !dbg !37
  %252 = extractelement <8 x i1> %245, i64 1, !dbg !37
  %253 = extractelement <8 x i1> %245, i64 0, !dbg !37
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %18, !dbg !38
  %255 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !38
  %bc = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %256 = extractelement <8 x i32> %bc, i64 7, !dbg !39
  %257 = select i1 %246, i32 0, i32 %256, !dbg !37
  %bc36 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %258 = extractelement <8 x i32> %bc36, i64 6, !dbg !39
  %259 = select i1 %247, i32 0, i32 %258, !dbg !37
  %bc37 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %260 = extractelement <8 x i32> %bc37, i64 5, !dbg !39
  %261 = select i1 %248, i32 0, i32 %260, !dbg !37
  %bc38 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %262 = extractelement <8 x i32> %bc38, i64 4, !dbg !39
  %263 = select i1 %249, i32 0, i32 %262, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %259, i32 %261, i32 %263, ptr addrspace(1) %254, i1 %15) #3, !dbg !39
  %bc39 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %264 = extractelement <8 x i32> %bc39, i64 3, !dbg !39
  %265 = select i1 %250, i32 0, i32 %264, !dbg !37
  %bc40 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %266 = extractelement <8 x i32> %bc40, i64 2, !dbg !39
  %267 = select i1 %251, i32 0, i32 %266, !dbg !37
  %bc41 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %268 = extractelement <8 x i32> %bc41, i64 1, !dbg !39
  %269 = select i1 %252, i32 0, i32 %268, !dbg !37
  %bc42 = bitcast <8 x float> %244 to <8 x i32>, !dbg !39
  %270 = extractelement <8 x i32> %bc42, i64 0, !dbg !39
  %271 = select i1 %253, i32 0, i32 %270, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %267, i32 %269, i32 %271, ptr addrspace(1) %255, i1 %16) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2y2b7fhtzo4cn3eqvv7ypl535fzptjgkef7xnbca6rfwipjofyi.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 31, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 43, column: 42, scope: !7)
!37 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 44, column: 25, scope: !7)
!39 = !DILocation(line: 44, column: 37, scope: !7)
!40 = !DILocation(line: 44, column: 4, scope: !7)
