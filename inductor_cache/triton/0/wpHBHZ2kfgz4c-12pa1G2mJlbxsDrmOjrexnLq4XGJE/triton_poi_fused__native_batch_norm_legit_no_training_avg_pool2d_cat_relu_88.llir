; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) %23, ptr addrspace(1) %24, ptr addrspace(1) %25, ptr addrspace(1) %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, ptr addrspace(1) %30, ptr addrspace(1) %31, i32 %32) local_unnamed_addr !dbg !7 {
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %35 = shl i32 %34, 7, !dbg !11
  %36 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %37 = and i32 %36, 127, !dbg !12
  %38 = or disjoint i32 %35, %37, !dbg !13
  %39 = icmp slt i32 %38, 10240, !dbg !14
  %.frozen = freeze i32 %38, !dbg !15
  %40 = sdiv i32 %.frozen, 2, !dbg !15
  %41 = mul i32 %40, 2, !dbg !16
  %.decomposed = sub i32 %.frozen, %41, !dbg !16
  %42 = sdiv i32 %38, 4, !dbg !17
  %43 = srem i32 %42, 640, !dbg !18
  %44 = shl nsw i32 %.decomposed, 1, !dbg !19
  %45 = shl i32 %40, 3, !dbg !20
  %46 = add i32 %44, %45, !dbg !21
  %47 = sext i32 %46 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %39) #3, !dbg !23
  %50 = or disjoint i32 %46, 1, !dbg !24
  %51 = sext i32 %50 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %39) #3, !dbg !26
  %54 = add i32 %46, 4, !dbg !27
  %55 = sext i32 %54 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %39) #3, !dbg !29
  %58 = add i32 %46, 5, !dbg !30
  %59 = sext i32 %58 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %39) #3, !dbg !32
  %62 = sext i32 %43 to i64, !dbg !33
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !33
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %39) #3, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !35
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %39) #3, !dbg !36
  %67 = bitcast i32 %66 to float, !dbg !36
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %39) #3, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %39) #3, !dbg !40
  %72 = fadd float %67, 0x3EE4F8B580000000, !dbg !41
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %73, 0, !dbg !42
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %74, 0, !dbg !42
  br i1 %.not.i, label %80, label %75, !dbg !42

75:                                               ; preds = %33
  br i1 %.not1.i, label %78, label %76, !dbg !42

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

80:                                               ; preds = %33
  br i1 %.not1.i, label %83, label %81, !dbg !42

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !42
  %85 = bitcast i32 %53 to float, !dbg !26
  %86 = bitcast i32 %49 to float, !dbg !23
  %87 = fadd float %86, %85, !dbg !43
  %88 = bitcast i32 %57 to float, !dbg !29
  %89 = fadd float %87, %88, !dbg !44
  %90 = bitcast i32 %61 to float, !dbg !32
  %91 = fadd float %89, %90, !dbg !45
  %92 = fmul float %91, 2.500000e-01, !dbg !46
  %93 = bitcast i32 %64 to float, !dbg !34
  %94 = fsub float %92, %93, !dbg !47
  %95 = bitcast i32 %71 to float, !dbg !40
  %96 = bitcast i32 %69 to float, !dbg !38
  %.frozen1 = freeze i32 %38, !dbg !48
  %97 = sdiv i32 %.frozen1, 2560, !dbg !48
  %98 = mul i32 %97, 2560, !dbg !49
  %.decomposed2 = sub i32 %.frozen1, %98, !dbg !49
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %100 = fmul float %94, %99, !dbg !51
  %101 = fmul float %100, %96, !dbg !52
  %102 = fadd float %101, %95, !dbg !53
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !54
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !58
  %105 = sext i32 %38 to i64, !dbg !59
  %106 = getelementptr float, ptr addrspace(1) %5, i64 %105, !dbg !59
  %107 = bitcast float %92 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 %39) #3, !dbg !60
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %105, !dbg !61
  %109 = bitcast float %104 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %108, i1 %39) #3, !dbg !62
  %110 = mul i32 %97, 3584, !dbg !63
  %111 = add i32 %110, %.decomposed2, !dbg !64
  %112 = sext i32 %111 to i64, !dbg !65
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %112, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %113, i1 %39) #3, !dbg !66
  %114 = mul i32 %97, 3712, !dbg !67
  %115 = add i32 %114, %.decomposed2, !dbg !68
  %116 = sext i32 %115 to i64, !dbg !69
  %117 = getelementptr float, ptr addrspace(1) %8, i64 %116, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %117, i1 %39) #3, !dbg !70
  %118 = mul i32 %97, 3840, !dbg !71
  %119 = add i32 %118, %.decomposed2, !dbg !72
  %120 = sext i32 %119 to i64, !dbg !73
  %121 = getelementptr float, ptr addrspace(1) %9, i64 %120, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %121, i1 %39) #3, !dbg !74
  %122 = mul i32 %97, 3968, !dbg !75
  %123 = add i32 %122, %.decomposed2, !dbg !76
  %124 = sext i32 %123 to i64, !dbg !77
  %125 = getelementptr float, ptr addrspace(1) %10, i64 %124, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %125, i1 %39) #3, !dbg !78
  %126 = shl i32 %97, 12, !dbg !79
  %127 = add i32 %126, %.decomposed2, !dbg !80
  %128 = sext i32 %127 to i64, !dbg !81
  %129 = getelementptr float, ptr addrspace(1) %11, i64 %128, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %129, i1 %39) #3, !dbg !82
  %130 = mul i32 %97, 4224, !dbg !83
  %131 = add i32 %130, %.decomposed2, !dbg !84
  %132 = sext i32 %131 to i64, !dbg !85
  %133 = getelementptr float, ptr addrspace(1) %12, i64 %132, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %133, i1 %39) #3, !dbg !86
  %134 = mul i32 %97, 4352, !dbg !87
  %135 = add i32 %134, %.decomposed2, !dbg !88
  %136 = sext i32 %135 to i64, !dbg !89
  %137 = getelementptr float, ptr addrspace(1) %13, i64 %136, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %137, i1 %39) #3, !dbg !90
  %138 = mul i32 %97, 4480, !dbg !91
  %139 = add i32 %138, %.decomposed2, !dbg !92
  %140 = sext i32 %139 to i64, !dbg !93
  %141 = getelementptr float, ptr addrspace(1) %14, i64 %140, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %141, i1 %39) #3, !dbg !94
  %142 = mul i32 %97, 4608, !dbg !95
  %143 = add i32 %142, %.decomposed2, !dbg !96
  %144 = sext i32 %143 to i64, !dbg !97
  %145 = getelementptr float, ptr addrspace(1) %15, i64 %144, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %145, i1 %39) #3, !dbg !98
  %146 = mul i32 %97, 4736, !dbg !99
  %147 = add i32 %146, %.decomposed2, !dbg !100
  %148 = sext i32 %147 to i64, !dbg !101
  %149 = getelementptr float, ptr addrspace(1) %16, i64 %148, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %149, i1 %39) #3, !dbg !102
  %150 = mul i32 %97, 4864, !dbg !103
  %151 = add i32 %150, %.decomposed2, !dbg !104
  %152 = sext i32 %151 to i64, !dbg !105
  %153 = getelementptr float, ptr addrspace(1) %17, i64 %152, !dbg !105
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %153, i1 %39) #3, !dbg !106
  %154 = mul i32 %97, 4992, !dbg !107
  %155 = add i32 %154, %.decomposed2, !dbg !108
  %156 = sext i32 %155 to i64, !dbg !109
  %157 = getelementptr float, ptr addrspace(1) %18, i64 %156, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %157, i1 %39) #3, !dbg !110
  %158 = mul i32 %97, 5120, !dbg !111
  %159 = add i32 %158, %.decomposed2, !dbg !112
  %160 = sext i32 %159 to i64, !dbg !113
  %161 = getelementptr float, ptr addrspace(1) %19, i64 %160, !dbg !113
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %161, i1 %39) #3, !dbg !114
  %162 = mul i32 %97, 5248, !dbg !115
  %163 = add i32 %162, %.decomposed2, !dbg !116
  %164 = sext i32 %163 to i64, !dbg !117
  %165 = getelementptr float, ptr addrspace(1) %20, i64 %164, !dbg !117
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %165, i1 %39) #3, !dbg !118
  %166 = mul i32 %97, 5376, !dbg !119
  %167 = add i32 %166, %.decomposed2, !dbg !120
  %168 = sext i32 %167 to i64, !dbg !121
  %169 = getelementptr float, ptr addrspace(1) %21, i64 %168, !dbg !121
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %169, i1 %39) #3, !dbg !122
  %170 = mul i32 %97, 5504, !dbg !123
  %171 = add i32 %170, %.decomposed2, !dbg !124
  %172 = sext i32 %171 to i64, !dbg !125
  %173 = getelementptr float, ptr addrspace(1) %22, i64 %172, !dbg !125
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %173, i1 %39) #3, !dbg !126
  %174 = mul i32 %97, 5632, !dbg !127
  %175 = add i32 %174, %.decomposed2, !dbg !128
  %176 = sext i32 %175 to i64, !dbg !129
  %177 = getelementptr float, ptr addrspace(1) %23, i64 %176, !dbg !129
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %177, i1 %39) #3, !dbg !130
  %178 = mul i32 %97, 5760, !dbg !131
  %179 = add i32 %178, %.decomposed2, !dbg !132
  %180 = sext i32 %179 to i64, !dbg !133
  %181 = getelementptr float, ptr addrspace(1) %24, i64 %180, !dbg !133
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %181, i1 %39) #3, !dbg !134
  %182 = mul i32 %97, 5888, !dbg !135
  %183 = add i32 %182, %.decomposed2, !dbg !136
  %184 = sext i32 %183 to i64, !dbg !137
  %185 = getelementptr float, ptr addrspace(1) %25, i64 %184, !dbg !137
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %185, i1 %39) #3, !dbg !138
  %186 = mul i32 %97, 6016, !dbg !139
  %187 = add i32 %186, %.decomposed2, !dbg !140
  %188 = sext i32 %187 to i64, !dbg !141
  %189 = getelementptr float, ptr addrspace(1) %26, i64 %188, !dbg !141
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %189, i1 %39) #3, !dbg !142
  %190 = mul i32 %97, 6144, !dbg !143
  %191 = add i32 %190, %.decomposed2, !dbg !144
  %192 = sext i32 %191 to i64, !dbg !145
  %193 = getelementptr float, ptr addrspace(1) %27, i64 %192, !dbg !145
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %193, i1 %39) #3, !dbg !146
  %194 = mul i32 %97, 6272, !dbg !147
  %195 = add i32 %194, %.decomposed2, !dbg !148
  %196 = sext i32 %195 to i64, !dbg !149
  %197 = getelementptr float, ptr addrspace(1) %28, i64 %196, !dbg !149
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %197, i1 %39) #3, !dbg !150
  %198 = mul i32 %97, 6400, !dbg !151
  %199 = add i32 %198, %.decomposed2, !dbg !152
  %200 = sext i32 %199 to i64, !dbg !153
  %201 = getelementptr float, ptr addrspace(1) %29, i64 %200, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %201, i1 %39) #3, !dbg !154
  %202 = mul i32 %97, 6528, !dbg !155
  %203 = add i32 %202, %.decomposed2, !dbg !156
  %204 = sext i32 %203 to i64, !dbg !157
  %205 = getelementptr float, ptr addrspace(1) %30, i64 %204, !dbg !157
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %205, i1 %39) #3, !dbg !158
  %206 = mul i32 %97, 6656, !dbg !159
  %207 = add i32 %206, %.decomposed2, !dbg !160
  %208 = sext i32 %207 to i64, !dbg !161
  %209 = getelementptr float, ptr addrspace(1) %31, i64 %208, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %209, i1 %39) #3, !dbg !162
  ret void, !dbg !163
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmkjuqwhctzr453wwuvyu563qbqu7lxd6pzvfqdnajqj4tjdjfgk.py", directory: "inductor_cache/mk")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_avg_pool2d_cat_relu_88", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 30, column: 32, scope: !7)
!20 = !DILocation(line: 30, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 37, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 44, scope: !7)
!24 = !DILocation(line: 31, column: 41, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 48, scope: !7)
!27 = !DILocation(line: 32, column: 41, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 48, scope: !7)
!30 = !DILocation(line: 33, column: 41, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 48, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 36, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 27, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 19, scope: !7)
!48 = !DILocation(line: 28, column: 19, scope: !7)
!49 = !DILocation(line: 29, column: 19, scope: !7)
!50 = !DILocation(line: 48, column: 20, scope: !7)
!51 = !DILocation(line: 51, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 20, scope: !7)
!53 = !DILocation(line: 53, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 55, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 56, column: 25, scope: !7)
!60 = !DILocation(line: 56, column: 36, scope: !7)
!61 = !DILocation(line: 57, column: 25, scope: !7)
!62 = !DILocation(line: 57, column: 37, scope: !7)
!63 = !DILocation(line: 58, column: 35, scope: !7)
!64 = !DILocation(line: 58, column: 30, scope: !7)
!65 = !DILocation(line: 58, column: 25, scope: !7)
!66 = !DILocation(line: 58, column: 46, scope: !7)
!67 = !DILocation(line: 59, column: 35, scope: !7)
!68 = !DILocation(line: 59, column: 30, scope: !7)
!69 = !DILocation(line: 59, column: 25, scope: !7)
!70 = !DILocation(line: 59, column: 46, scope: !7)
!71 = !DILocation(line: 60, column: 35, scope: !7)
!72 = !DILocation(line: 60, column: 30, scope: !7)
!73 = !DILocation(line: 60, column: 25, scope: !7)
!74 = !DILocation(line: 60, column: 46, scope: !7)
!75 = !DILocation(line: 61, column: 35, scope: !7)
!76 = !DILocation(line: 61, column: 30, scope: !7)
!77 = !DILocation(line: 61, column: 25, scope: !7)
!78 = !DILocation(line: 61, column: 46, scope: !7)
!79 = !DILocation(line: 62, column: 35, scope: !7)
!80 = !DILocation(line: 62, column: 30, scope: !7)
!81 = !DILocation(line: 62, column: 25, scope: !7)
!82 = !DILocation(line: 62, column: 46, scope: !7)
!83 = !DILocation(line: 63, column: 35, scope: !7)
!84 = !DILocation(line: 63, column: 30, scope: !7)
!85 = !DILocation(line: 63, column: 25, scope: !7)
!86 = !DILocation(line: 63, column: 46, scope: !7)
!87 = !DILocation(line: 64, column: 35, scope: !7)
!88 = !DILocation(line: 64, column: 30, scope: !7)
!89 = !DILocation(line: 64, column: 25, scope: !7)
!90 = !DILocation(line: 64, column: 46, scope: !7)
!91 = !DILocation(line: 65, column: 35, scope: !7)
!92 = !DILocation(line: 65, column: 30, scope: !7)
!93 = !DILocation(line: 65, column: 25, scope: !7)
!94 = !DILocation(line: 65, column: 46, scope: !7)
!95 = !DILocation(line: 66, column: 36, scope: !7)
!96 = !DILocation(line: 66, column: 31, scope: !7)
!97 = !DILocation(line: 66, column: 26, scope: !7)
!98 = !DILocation(line: 66, column: 47, scope: !7)
!99 = !DILocation(line: 67, column: 36, scope: !7)
!100 = !DILocation(line: 67, column: 31, scope: !7)
!101 = !DILocation(line: 67, column: 26, scope: !7)
!102 = !DILocation(line: 67, column: 47, scope: !7)
!103 = !DILocation(line: 68, column: 36, scope: !7)
!104 = !DILocation(line: 68, column: 31, scope: !7)
!105 = !DILocation(line: 68, column: 26, scope: !7)
!106 = !DILocation(line: 68, column: 47, scope: !7)
!107 = !DILocation(line: 69, column: 36, scope: !7)
!108 = !DILocation(line: 69, column: 31, scope: !7)
!109 = !DILocation(line: 69, column: 26, scope: !7)
!110 = !DILocation(line: 69, column: 47, scope: !7)
!111 = !DILocation(line: 70, column: 36, scope: !7)
!112 = !DILocation(line: 70, column: 31, scope: !7)
!113 = !DILocation(line: 70, column: 26, scope: !7)
!114 = !DILocation(line: 70, column: 47, scope: !7)
!115 = !DILocation(line: 71, column: 36, scope: !7)
!116 = !DILocation(line: 71, column: 31, scope: !7)
!117 = !DILocation(line: 71, column: 26, scope: !7)
!118 = !DILocation(line: 71, column: 47, scope: !7)
!119 = !DILocation(line: 72, column: 36, scope: !7)
!120 = !DILocation(line: 72, column: 31, scope: !7)
!121 = !DILocation(line: 72, column: 26, scope: !7)
!122 = !DILocation(line: 72, column: 47, scope: !7)
!123 = !DILocation(line: 73, column: 36, scope: !7)
!124 = !DILocation(line: 73, column: 31, scope: !7)
!125 = !DILocation(line: 73, column: 26, scope: !7)
!126 = !DILocation(line: 73, column: 47, scope: !7)
!127 = !DILocation(line: 74, column: 36, scope: !7)
!128 = !DILocation(line: 74, column: 31, scope: !7)
!129 = !DILocation(line: 74, column: 26, scope: !7)
!130 = !DILocation(line: 74, column: 47, scope: !7)
!131 = !DILocation(line: 75, column: 36, scope: !7)
!132 = !DILocation(line: 75, column: 31, scope: !7)
!133 = !DILocation(line: 75, column: 26, scope: !7)
!134 = !DILocation(line: 75, column: 47, scope: !7)
!135 = !DILocation(line: 76, column: 36, scope: !7)
!136 = !DILocation(line: 76, column: 31, scope: !7)
!137 = !DILocation(line: 76, column: 26, scope: !7)
!138 = !DILocation(line: 76, column: 47, scope: !7)
!139 = !DILocation(line: 77, column: 36, scope: !7)
!140 = !DILocation(line: 77, column: 31, scope: !7)
!141 = !DILocation(line: 77, column: 26, scope: !7)
!142 = !DILocation(line: 77, column: 47, scope: !7)
!143 = !DILocation(line: 78, column: 36, scope: !7)
!144 = !DILocation(line: 78, column: 31, scope: !7)
!145 = !DILocation(line: 78, column: 26, scope: !7)
!146 = !DILocation(line: 78, column: 47, scope: !7)
!147 = !DILocation(line: 79, column: 36, scope: !7)
!148 = !DILocation(line: 79, column: 31, scope: !7)
!149 = !DILocation(line: 79, column: 26, scope: !7)
!150 = !DILocation(line: 79, column: 47, scope: !7)
!151 = !DILocation(line: 80, column: 36, scope: !7)
!152 = !DILocation(line: 80, column: 31, scope: !7)
!153 = !DILocation(line: 80, column: 26, scope: !7)
!154 = !DILocation(line: 80, column: 47, scope: !7)
!155 = !DILocation(line: 81, column: 36, scope: !7)
!156 = !DILocation(line: 81, column: 31, scope: !7)
!157 = !DILocation(line: 81, column: 26, scope: !7)
!158 = !DILocation(line: 81, column: 47, scope: !7)
!159 = !DILocation(line: 82, column: 36, scope: !7)
!160 = !DILocation(line: 82, column: 31, scope: !7)
!161 = !DILocation(line: 82, column: 26, scope: !7)
!162 = !DILocation(line: 82, column: 47, scope: !7)
!163 = !DILocation(line: 82, column: 4, scope: !7)
