; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %19 = insertelement <2 x i32> %18, i32 %16, i64 1, !dbg !14
  %20 = sdiv <2 x i32> %19, splat (i32 4096), !dbg !14
  %21 = srem <2 x i32> %20, splat (i32 56), !dbg !15
  %22 = srem i32 %16, 4096, !dbg !16
  %23 = srem i32 %17, 4096, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %24 = sdiv i32 %.frozen, 229376, !dbg !17
  %.frozen52 = freeze i32 %17, !dbg !17
  %25 = sdiv i32 %.frozen52, 229376, !dbg !17
  %26 = extractelement <2 x i32> %21, i64 1, !dbg !18
  %27 = sext i32 %26 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !19
  %29 = extractelement <2 x i32> %21, i64 0, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %43 = bitcast i32 %42 to float, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %47 = bitcast i32 %46 to float, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %51 = bitcast i32 %50 to float, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %55 = bitcast i32 %54 to float, !dbg !22
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !24
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !26
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !26
  %78 = icmp slt <2 x i32> %21, splat (i32 52), !dbg !27
  %79 = mul i32 %24, 229376, !dbg !28
  %srem.decomposed = sub i32 %.frozen, %79, !dbg !28
  %80 = mul i32 %25, 229376, !dbg !28
  %srem1.decomposed = sub i32 %.frozen52, %80, !dbg !28
  %81 = mul nsw i32 %24, 212992, !dbg !29
  %82 = mul nsw i32 %25, 212992, !dbg !29
  %83 = add nsw i32 %81, %srem.decomposed, !dbg !30
  %84 = add nsw i32 %82, %srem1.decomposed, !dbg !30
  %85 = sext i32 %83 to i64, !dbg !31
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !31
  %87 = sext i32 %84 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !31
  %89 = extractelement <2 x i1> %78, i64 1, !dbg !32
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %86, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #3, !dbg !32
  %91 = extractelement <2 x i1> %78, i64 0, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !32
  %93 = icmp sgt i32 %26, 51, !dbg !18
  %94 = icmp sgt i32 %29, 51, !dbg !18
  %95 = add nsw i32 %26, -52, !dbg !33
  %96 = add nsw i32 %29, -52, !dbg !33
  %97 = shl nsw i32 %95, 12, !dbg !34
  %98 = shl nsw i32 %96, 12, !dbg !34
  %99 = shl nsw i32 %24, 14, !dbg !35
  %100 = shl nsw i32 %25, 14, !dbg !35
  %101 = add nsw i32 %99, %22, !dbg !36
  %102 = add nsw i32 %101, %97, !dbg !37
  %103 = add nsw i32 %100, %23, !dbg !36
  %104 = add nsw i32 %103, %98, !dbg !37
  %105 = sext i32 %102 to i64, !dbg !38
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %105, !dbg !38
  %107 = sext i32 %104 to i64, !dbg !38
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %107, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #3, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %108, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #3, !dbg !39
  %111 = sext i32 %95 to i64, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !40
  %113 = sext i32 %96 to i64, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !40
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %93, i32 0, i1 %93) #3, !dbg !41
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %93, i32 0, i1 %93) #3, !dbg !41
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %93, i32 0, i1 %93) #3, !dbg !41
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %93, i32 0, i1 %93) #3, !dbg !41
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %94, i32 0, i1 %94) #3, !dbg !41
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %94, i32 0, i1 %94) #3, !dbg !41
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %94, i32 0, i1 %94) #3, !dbg !41
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %94, i32 0, i1 %94) #3, !dbg !41
  %123 = fadd float %43, 0x3EE4F8B580000000, !dbg !42
  %124 = fadd float %45, 0x3EE4F8B580000000, !dbg !42
  %125 = fadd float %47, 0x3EE4F8B580000000, !dbg !42
  %126 = fadd float %49, 0x3EE4F8B580000000, !dbg !42
  %127 = fadd float %51, 0x3EE4F8B580000000, !dbg !42
  %128 = fadd float %53, 0x3EE4F8B580000000, !dbg !42
  %129 = fadd float %55, 0x3EE4F8B580000000, !dbg !42
  %130 = fadd float %57, 0x3EE4F8B580000000, !dbg !42
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %131, 0, !dbg !43
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %132, 0, !dbg !43
  br i1 %.not.i, label %138, label %133, !dbg !43

133:                                              ; preds = %10
  br i1 %.not1.i, label %136, label %134, !dbg !43

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

138:                                              ; preds = %10
  br i1 %.not1.i, label %141, label %139, !dbg !43

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %134, %136, %139, %141
  %.0.i = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !43
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i2 = icmp eq i32 %143, 0, !dbg !43
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i5 = icmp eq i32 %144, 0, !dbg !43
  br i1 %.not.i2, label %150, label %145, !dbg !43

145:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %148, label %146, !dbg !43

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

150:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %153, label %151, !dbg !43

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

__nv_sqrtf.exit6:                                 ; preds = %146, %148, %151, %153
  %.0.i4 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !43
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i7 = icmp eq i32 %155, 0, !dbg !43
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i10 = icmp eq i32 %156, 0, !dbg !43
  br i1 %.not.i7, label %162, label %157, !dbg !43

157:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %160, label %158, !dbg !43

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit11, !dbg !43

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit11, !dbg !43

162:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %165, label %163, !dbg !43

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit11, !dbg !43

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !43
  br label %__nv_sqrtf.exit11, !dbg !43

__nv_sqrtf.exit11:                                ; preds = %158, %160, %163, %165
  %.0.i9 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !43
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i12 = icmp eq i32 %167, 0, !dbg !43
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i15 = icmp eq i32 %168, 0, !dbg !43
  br i1 %.not.i12, label %174, label %169, !dbg !43

169:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %172, label %170, !dbg !43

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit16, !dbg !43

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit16, !dbg !43

174:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %177, label %175, !dbg !43

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit16, !dbg !43

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !43
  br label %__nv_sqrtf.exit16, !dbg !43

__nv_sqrtf.exit16:                                ; preds = %170, %172, %175, %177
  %.0.i14 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !43
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i17 = icmp eq i32 %179, 0, !dbg !43
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i20 = icmp eq i32 %180, 0, !dbg !43
  br i1 %.not.i17, label %186, label %181, !dbg !43

181:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %184, label %182, !dbg !43

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit21, !dbg !43

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit21, !dbg !43

186:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %189, label %187, !dbg !43

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit21, !dbg !43

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !43
  br label %__nv_sqrtf.exit21, !dbg !43

__nv_sqrtf.exit21:                                ; preds = %182, %184, %187, %189
  %.0.i19 = phi float [ %183, %182 ], [ %185, %184 ], [ %188, %187 ], [ %190, %189 ], !dbg !43
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i22 = icmp eq i32 %191, 0, !dbg !43
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i25 = icmp eq i32 %192, 0, !dbg !43
  br i1 %.not.i22, label %198, label %193, !dbg !43

193:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %196, label %194, !dbg !43

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit26, !dbg !43

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit26, !dbg !43

198:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %201, label %199, !dbg !43

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit26, !dbg !43

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !43
  br label %__nv_sqrtf.exit26, !dbg !43

__nv_sqrtf.exit26:                                ; preds = %194, %196, %199, %201
  %.0.i24 = phi float [ %195, %194 ], [ %197, %196 ], [ %200, %199 ], [ %202, %201 ], !dbg !43
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i27 = icmp eq i32 %203, 0, !dbg !43
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i30 = icmp eq i32 %204, 0, !dbg !43
  br i1 %.not.i27, label %210, label %205, !dbg !43

205:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %208, label %206, !dbg !43

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !43
  br label %__nv_sqrtf.exit31, !dbg !43

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !43
  br label %__nv_sqrtf.exit31, !dbg !43

210:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %213, label %211, !dbg !43

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !43
  br label %__nv_sqrtf.exit31, !dbg !43

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !43
  br label %__nv_sqrtf.exit31, !dbg !43

__nv_sqrtf.exit31:                                ; preds = %206, %208, %211, %213
  %.0.i29 = phi float [ %207, %206 ], [ %209, %208 ], [ %212, %211 ], [ %214, %213 ], !dbg !43
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i32 = icmp eq i32 %215, 0, !dbg !43
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i35 = icmp eq i32 %216, 0, !dbg !43
  br i1 %.not.i32, label %222, label %217, !dbg !43

217:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %220, label %218, !dbg !43

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !43
  br label %__nv_sqrtf.exit36, !dbg !43

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !43
  br label %__nv_sqrtf.exit36, !dbg !43

222:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %225, label %223, !dbg !43

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !43
  br label %__nv_sqrtf.exit36, !dbg !43

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !43
  br label %__nv_sqrtf.exit36, !dbg !43

__nv_sqrtf.exit36:                                ; preds = %218, %220, %223, %225
  %.0.i34 = phi float [ %219, %218 ], [ %221, %220 ], [ %224, %223 ], [ %226, %225 ], !dbg !43
  %227 = shufflevector <2 x i1> %78, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !27
  %228 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !32
  %229 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !39
  %230 = insertelement <8 x i32> poison, i32 %122, i64 0, !dbg !41
  %231 = insertelement <8 x i32> %230, i32 %121, i64 1, !dbg !41
  %232 = insertelement <8 x i32> %231, i32 %120, i64 2, !dbg !41
  %233 = insertelement <8 x i32> %232, i32 %119, i64 3, !dbg !41
  %234 = insertelement <8 x i32> %233, i32 %118, i64 4, !dbg !41
  %235 = insertelement <8 x i32> %234, i32 %117, i64 5, !dbg !41
  %236 = insertelement <8 x i32> %235, i32 %116, i64 6, !dbg !41
  %237 = insertelement <8 x i32> %236, i32 %115, i64 7, !dbg !41
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !41
  %239 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %38, i64 1, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %37, i64 2, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %36, i64 3, !dbg !20
  %243 = insertelement <8 x i32> %242, i32 %35, i64 4, !dbg !20
  %244 = insertelement <8 x i32> %243, i32 %34, i64 5, !dbg !20
  %245 = insertelement <8 x i32> %244, i32 %33, i64 6, !dbg !20
  %246 = insertelement <8 x i32> %245, i32 %32, i64 7, !dbg !20
  %247 = bitcast <8 x i32> %246 to <8 x float>, !dbg !20
  %248 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !32
  %249 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !39
  %250 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !32
  %251 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !39
  %252 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !32
  %253 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !39
  %254 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !32
  %255 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !39
  %256 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !32
  %257 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !39
  %258 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !32
  %259 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !39
  %260 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !32
  %261 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !39
  %262 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !26
  %263 = insertelement <8 x i32> %262, i32 %76, i64 1, !dbg !26
  %264 = insertelement <8 x i32> %263, i32 %75, i64 2, !dbg !26
  %265 = insertelement <8 x i32> %264, i32 %74, i64 3, !dbg !26
  %266 = insertelement <8 x i32> %265, i32 %73, i64 4, !dbg !26
  %267 = insertelement <8 x i32> %266, i32 %72, i64 5, !dbg !26
  %268 = insertelement <8 x i32> %267, i32 %71, i64 6, !dbg !26
  %269 = insertelement <8 x i32> %268, i32 %70, i64 7, !dbg !26
  %270 = bitcast <8 x i32> %269 to <8 x float>, !dbg !26
  %271 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !24
  %272 = insertelement <8 x i32> %271, i32 %66, i64 1, !dbg !24
  %273 = insertelement <8 x i32> %272, i32 %65, i64 2, !dbg !24
  %274 = insertelement <8 x i32> %273, i32 %64, i64 3, !dbg !24
  %275 = insertelement <8 x i32> %274, i32 %63, i64 4, !dbg !24
  %276 = insertelement <8 x i32> %275, i32 %62, i64 5, !dbg !24
  %277 = insertelement <8 x i32> %276, i32 %61, i64 6, !dbg !24
  %278 = insertelement <8 x i32> %277, i32 %60, i64 7, !dbg !24
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !24
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !44
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !44
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !44
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #3, !dbg !44
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #3, !dbg !44
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #3, !dbg !44
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #3, !dbg !44
  %288 = insertelement <8 x i32> poison, i32 %228, i64 0, !dbg !32
  %289 = insertelement <8 x i32> %288, i32 %248, i64 1, !dbg !32
  %290 = insertelement <8 x i32> %289, i32 %250, i64 2, !dbg !32
  %291 = insertelement <8 x i32> %290, i32 %252, i64 3, !dbg !32
  %292 = insertelement <8 x i32> %291, i32 %254, i64 4, !dbg !32
  %293 = insertelement <8 x i32> %292, i32 %256, i64 5, !dbg !32
  %294 = insertelement <8 x i32> %293, i32 %258, i64 6, !dbg !32
  %295 = insertelement <8 x i32> %294, i32 %260, i64 7, !dbg !32
  %296 = bitcast <8 x i32> %295 to <8 x float>, !dbg !32
  %297 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !39
  %298 = insertelement <8 x i32> %297, i32 %249, i64 1, !dbg !39
  %299 = insertelement <8 x i32> %298, i32 %251, i64 2, !dbg !39
  %300 = insertelement <8 x i32> %299, i32 %253, i64 3, !dbg !39
  %301 = insertelement <8 x i32> %300, i32 %255, i64 4, !dbg !39
  %302 = insertelement <8 x i32> %301, i32 %257, i64 5, !dbg !39
  %303 = insertelement <8 x i32> %302, i32 %259, i64 6, !dbg !39
  %304 = insertelement <8 x i32> %303, i32 %261, i64 7, !dbg !39
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !39
  %306 = fadd <8 x float> %305, %238, !dbg !45
  %307 = select <8 x i1> %227, <8 x float> %296, <8 x float> %306, !dbg !46
  %308 = fsub <8 x float> %307, %247, !dbg !47
  %309 = insertelement <8 x float> poison, float %287, i64 0, !dbg !48
  %310 = insertelement <8 x float> %309, float %286, i64 1, !dbg !48
  %311 = insertelement <8 x float> %310, float %285, i64 2, !dbg !48
  %312 = insertelement <8 x float> %311, float %284, i64 3, !dbg !48
  %313 = insertelement <8 x float> %312, float %283, i64 4, !dbg !48
  %314 = insertelement <8 x float> %313, float %282, i64 5, !dbg !48
  %315 = insertelement <8 x float> %314, float %281, i64 6, !dbg !48
  %316 = insertelement <8 x float> %315, float %280, i64 7, !dbg !48
  %317 = fmul <8 x float> %308, %316, !dbg !48
  %318 = fmul <8 x float> %317, %279, !dbg !49
  %319 = fadd <8 x float> %318, %270, !dbg !50
  %320 = fcmp olt <8 x float> %319, zeroinitializer, !dbg !51
  %321 = extractelement <8 x i1> %320, i64 7, !dbg !55
  %322 = extractelement <8 x i1> %320, i64 6, !dbg !55
  %323 = extractelement <8 x i1> %320, i64 5, !dbg !55
  %324 = extractelement <8 x i1> %320, i64 4, !dbg !55
  %325 = extractelement <8 x i1> %320, i64 3, !dbg !55
  %326 = extractelement <8 x i1> %320, i64 2, !dbg !55
  %327 = extractelement <8 x i1> %320, i64 1, !dbg !55
  %328 = extractelement <8 x i1> %320, i64 0, !dbg !55
  %329 = sext i32 %16 to i64, !dbg !56
  %330 = getelementptr float, ptr addrspace(1) %7, i64 %329, !dbg !56
  %331 = sext i32 %17 to i64, !dbg !56
  %332 = getelementptr float, ptr addrspace(1) %7, i64 %331, !dbg !56
  %bc = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %333 = extractelement <8 x i32> %bc, i64 7, !dbg !57
  %bc37 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %334 = extractelement <8 x i32> %bc37, i64 6, !dbg !57
  %bc38 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %335 = extractelement <8 x i32> %bc38, i64 5, !dbg !57
  %bc39 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %336 = extractelement <8 x i32> %bc39, i64 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %334, i32 %335, i32 %336, ptr addrspace(1) %330, i1 true) #3, !dbg !57
  %bc40 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %337 = extractelement <8 x i32> %bc40, i64 3, !dbg !57
  %bc41 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %338 = extractelement <8 x i32> %bc41, i64 2, !dbg !57
  %bc42 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %339 = extractelement <8 x i32> %bc42, i64 1, !dbg !57
  %bc43 = bitcast <8 x float> %307 to <8 x i32>, !dbg !57
  %340 = extractelement <8 x i32> %bc43, i64 0, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %337, i32 %338, i32 %339, i32 %340, ptr addrspace(1) %332, i1 true) #3, !dbg !57
  %341 = getelementptr float, ptr addrspace(1) %8, i64 %329, !dbg !58
  %342 = getelementptr float, ptr addrspace(1) %8, i64 %331, !dbg !58
  %bc44 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %343 = extractelement <8 x i32> %bc44, i64 7, !dbg !59
  %344 = select i1 %321, i32 0, i32 %343, !dbg !55
  %bc45 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %345 = extractelement <8 x i32> %bc45, i64 6, !dbg !59
  %346 = select i1 %322, i32 0, i32 %345, !dbg !55
  %bc46 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %347 = extractelement <8 x i32> %bc46, i64 5, !dbg !59
  %348 = select i1 %323, i32 0, i32 %347, !dbg !55
  %bc47 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %349 = extractelement <8 x i32> %bc47, i64 4, !dbg !59
  %350 = select i1 %324, i32 0, i32 %349, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %346, i32 %348, i32 %350, ptr addrspace(1) %341, i1 true) #3, !dbg !59
  %bc48 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %351 = extractelement <8 x i32> %bc48, i64 3, !dbg !59
  %352 = select i1 %325, i32 0, i32 %351, !dbg !55
  %bc49 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %353 = extractelement <8 x i32> %bc49, i64 2, !dbg !59
  %354 = select i1 %326, i32 0, i32 %353, !dbg !55
  %bc50 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %355 = extractelement <8 x i32> %bc50, i64 1, !dbg !59
  %356 = select i1 %327, i32 0, i32 %355, !dbg !55
  %bc51 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %357 = extractelement <8 x i32> %bc51, i64 0, !dbg !59
  %358 = select i1 %328, i32 0, i32 %357, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %354, i32 %356, i32 %358, ptr addrspace(1) %342, i1 true) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cngrindocs52wqoiazfjgyci5k4if4za6j4vjqwsytybhvebral5.py", directory: "inductor_cache/ng")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 54, scope: !7)
!30 = !DILocation(line: 37, column: 47, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 59, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 41, scope: !7)
!35 = !DILocation(line: 41, column: 61, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 41, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 30, scope: !7)
!39 = !DILocation(line: 41, column: 66, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 44, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 27, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 43, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 33, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 59, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 60, column: 25, scope: !7)
!57 = !DILocation(line: 60, column: 37, scope: !7)
!58 = !DILocation(line: 61, column: 25, scope: !7)
!59 = !DILocation(line: 61, column: 37, scope: !7)
!60 = !DILocation(line: 61, column: 4, scope: !7)
