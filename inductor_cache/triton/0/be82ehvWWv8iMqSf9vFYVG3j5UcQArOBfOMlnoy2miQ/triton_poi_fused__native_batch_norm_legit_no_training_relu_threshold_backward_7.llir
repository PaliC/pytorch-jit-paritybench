; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = or disjoint i32 %11, 4, !dbg !13
  %14 = or disjoint i32 %11, 8, !dbg !13
  %15 = or disjoint i32 %11, 12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 8, !dbg !15
  %18 = and i32 %12, 255, !dbg !16
  %19 = or disjoint i32 %17, %18, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %20 = sdiv i32 %.frozen, 256, !dbg !18
  %21 = mul i32 %20, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %21, !dbg !19
  %22 = srem i32 %13, 256, !dbg !19
  %23 = srem i32 %14, 256, !dbg !19
  %24 = srem i32 %15, 256, !dbg !19
  %25 = shl i32 %19, 8, !dbg !20
  %26 = shl i32 %20, 20, !dbg !21
  %27 = add i32 %25, %26, !dbg !22
  %28 = add i32 %27, %.decomposed, !dbg !23
  %29 = add i32 %27, %22, !dbg !23
  %30 = add i32 %27, %23, !dbg !23
  %31 = add i32 %27, %24, !dbg !23
  %32 = sext i32 %28 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %29 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %30 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = sext i32 %31 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #4, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #4, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !25
  %44 = sext i32 %.decomposed to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = sext i32 %22 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !26
  %48 = sext i32 %23 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = sext i32 %24 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #4, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #4, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #4, !dbg !29
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !29
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !29
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !29
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !29
  %65 = bitcast i32 %61 to float, !dbg !29
  %66 = bitcast i32 %62 to float, !dbg !29
  %67 = bitcast i32 %63 to float, !dbg !29
  %68 = bitcast i32 %64 to float, !dbg !29
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !29
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !29
  %74 = bitcast i32 %70 to float, !dbg !29
  %75 = bitcast i32 %71 to float, !dbg !29
  %76 = bitcast i32 %72 to float, !dbg !29
  %77 = bitcast i32 %73 to float, !dbg !29
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = bitcast i32 %82 to float, !dbg !29
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !29
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !29
  %92 = bitcast i32 %88 to float, !dbg !29
  %93 = bitcast i32 %89 to float, !dbg !29
  %94 = bitcast i32 %90 to float, !dbg !29
  %95 = bitcast i32 %91 to float, !dbg !29
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !30
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !31
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !31
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #4, !dbg !31
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #4, !dbg !31
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !32
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !33
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #4, !dbg !33
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #4, !dbg !33
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #4, !dbg !33
  %112 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %113 = fadd float %66, 0x3EE4F8B580000000, !dbg !34
  %114 = fadd float %67, 0x3EE4F8B580000000, !dbg !34
  %115 = fadd float %68, 0x3EE4F8B580000000, !dbg !34
  %116 = fadd float %74, 0x3EE4F8B580000000, !dbg !34
  %117 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %118 = fadd float %76, 0x3EE4F8B580000000, !dbg !34
  %119 = fadd float %77, 0x3EE4F8B580000000, !dbg !34
  %120 = fadd float %83, 0x3EE4F8B580000000, !dbg !34
  %121 = fadd float %84, 0x3EE4F8B580000000, !dbg !34
  %122 = fadd float %85, 0x3EE4F8B580000000, !dbg !34
  %123 = fadd float %86, 0x3EE4F8B580000000, !dbg !34
  %124 = fadd float %92, 0x3EE4F8B580000000, !dbg !34
  %125 = fadd float %93, 0x3EE4F8B580000000, !dbg !34
  %126 = fadd float %94, 0x3EE4F8B580000000, !dbg !34
  %127 = fadd float %95, 0x3EE4F8B580000000, !dbg !34
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %128, 0, !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %129, 0, !dbg !35
  br i1 %.not.i, label %135, label %130, !dbg !35

130:                                              ; preds = %9
  br i1 %.not1.i, label %133, label %131, !dbg !35

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

135:                                              ; preds = %9
  br i1 %.not1.i, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !35
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i3 = icmp eq i32 %140, 0, !dbg !35
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i6 = icmp eq i32 %141, 0, !dbg !35
  br i1 %.not.i3, label %147, label %142, !dbg !35

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %145, label %143, !dbg !35

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %150, label %148, !dbg !35

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !35
  br label %__nv_sqrtf.exit7, !dbg !35

__nv_sqrtf.exit7:                                 ; preds = %143, %145, %148, %150
  %.0.i5 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !35
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i8 = icmp eq i32 %152, 0, !dbg !35
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i11 = icmp eq i32 %153, 0, !dbg !35
  br i1 %.not.i8, label %159, label %154, !dbg !35

154:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %157, label %155, !dbg !35

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

159:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %162, label %160, !dbg !35

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #4, !dbg !35
  br label %__nv_sqrtf.exit12, !dbg !35

__nv_sqrtf.exit12:                                ; preds = %155, %157, %160, %162
  %.0.i10 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !35
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i13 = icmp eq i32 %164, 0, !dbg !35
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i16 = icmp eq i32 %165, 0, !dbg !35
  br i1 %.not.i13, label %171, label %166, !dbg !35

166:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %169, label %167, !dbg !35

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

171:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %174, label %172, !dbg !35

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !35
  br label %__nv_sqrtf.exit17, !dbg !35

__nv_sqrtf.exit17:                                ; preds = %167, %169, %172, %174
  %.0.i15 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !35
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i18 = icmp eq i32 %176, 0, !dbg !35
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i21 = icmp eq i32 %177, 0, !dbg !35
  br i1 %.not.i18, label %183, label %178, !dbg !35

178:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %181, label %179, !dbg !35

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

183:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %186, label %184, !dbg !35

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !35
  br label %__nv_sqrtf.exit22, !dbg !35

__nv_sqrtf.exit22:                                ; preds = %179, %181, %184, %186
  %.0.i20 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !35
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i23 = icmp eq i32 %188, 0, !dbg !35
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i26 = icmp eq i32 %189, 0, !dbg !35
  br i1 %.not.i23, label %195, label %190, !dbg !35

190:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %193, label %191, !dbg !35

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

195:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %198, label %196, !dbg !35

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !35
  br label %__nv_sqrtf.exit27, !dbg !35

__nv_sqrtf.exit27:                                ; preds = %191, %193, %196, %198
  %.0.i25 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !35
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i28 = icmp eq i32 %200, 0, !dbg !35
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i31 = icmp eq i32 %201, 0, !dbg !35
  br i1 %.not.i28, label %207, label %202, !dbg !35

202:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %205, label %203, !dbg !35

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

207:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %210, label %208, !dbg !35

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !35
  br label %__nv_sqrtf.exit32, !dbg !35

__nv_sqrtf.exit32:                                ; preds = %203, %205, %208, %210
  %.0.i30 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !35
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i33 = icmp eq i32 %212, 0, !dbg !35
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i36 = icmp eq i32 %213, 0, !dbg !35
  br i1 %.not.i33, label %219, label %214, !dbg !35

214:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %217, label %215, !dbg !35

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

219:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %222, label %220, !dbg !35

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !35
  br label %__nv_sqrtf.exit37, !dbg !35

__nv_sqrtf.exit37:                                ; preds = %215, %217, %220, %222
  %.0.i35 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !35
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i38 = icmp eq i32 %224, 0, !dbg !35
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i41 = icmp eq i32 %225, 0, !dbg !35
  br i1 %.not.i38, label %231, label %226, !dbg !35

226:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %229, label %227, !dbg !35

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

231:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %234, label %232, !dbg !35

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !35
  br label %__nv_sqrtf.exit42, !dbg !35

__nv_sqrtf.exit42:                                ; preds = %227, %229, %232, %234
  %.0.i40 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !35
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i43 = icmp eq i32 %236, 0, !dbg !35
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i46 = icmp eq i32 %237, 0, !dbg !35
  br i1 %.not.i43, label %243, label %238, !dbg !35

238:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %241, label %239, !dbg !35

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

243:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %246, label %244, !dbg !35

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !35
  br label %__nv_sqrtf.exit47, !dbg !35

__nv_sqrtf.exit47:                                ; preds = %239, %241, %244, %246
  %.0.i45 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !35
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i48 = icmp eq i32 %248, 0, !dbg !35
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i51 = icmp eq i32 %249, 0, !dbg !35
  br i1 %.not.i48, label %255, label %250, !dbg !35

250:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %253, label %251, !dbg !35

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

255:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %258, label %256, !dbg !35

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !35
  br label %__nv_sqrtf.exit52, !dbg !35

__nv_sqrtf.exit52:                                ; preds = %251, %253, %256, %258
  %.0.i50 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !35
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i53 = icmp eq i32 %260, 0, !dbg !35
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i56 = icmp eq i32 %261, 0, !dbg !35
  br i1 %.not.i53, label %267, label %262, !dbg !35

262:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %265, label %263, !dbg !35

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

267:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %270, label %268, !dbg !35

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !35
  br label %__nv_sqrtf.exit57, !dbg !35

__nv_sqrtf.exit57:                                ; preds = %263, %265, %268, %270
  %.0.i55 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !35
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i58 = icmp eq i32 %272, 0, !dbg !35
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i61 = icmp eq i32 %273, 0, !dbg !35
  br i1 %.not.i58, label %279, label %274, !dbg !35

274:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %277, label %275, !dbg !35

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

279:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %282, label %280, !dbg !35

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !35
  br label %__nv_sqrtf.exit62, !dbg !35

__nv_sqrtf.exit62:                                ; preds = %275, %277, %280, %282
  %.0.i60 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !35
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i63 = icmp eq i32 %284, 0, !dbg !35
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i66 = icmp eq i32 %285, 0, !dbg !35
  br i1 %.not.i63, label %291, label %286, !dbg !35

286:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %289, label %287, !dbg !35

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

291:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %294, label %292, !dbg !35

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !35
  br label %__nv_sqrtf.exit67, !dbg !35

__nv_sqrtf.exit67:                                ; preds = %287, %289, %292, %294
  %.0.i65 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !35
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i68 = icmp eq i32 %296, 0, !dbg !35
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i71 = icmp eq i32 %297, 0, !dbg !35
  br i1 %.not.i68, label %303, label %298, !dbg !35

298:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %301, label %299, !dbg !35

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

303:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %306, label %304, !dbg !35

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !35
  br label %__nv_sqrtf.exit72, !dbg !35

__nv_sqrtf.exit72:                                ; preds = %299, %301, %304, %306
  %.0.i70 = phi float [ %300, %299 ], [ %302, %301 ], [ %305, %304 ], [ %307, %306 ], !dbg !35
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i73 = icmp eq i32 %308, 0, !dbg !35
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i76 = icmp eq i32 %309, 0, !dbg !35
  br i1 %.not.i73, label %315, label %310, !dbg !35

310:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %313, label %311, !dbg !35

311:                                              ; preds = %310
  %312 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

313:                                              ; preds = %310
  %314 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

315:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %318, label %316, !dbg !35

316:                                              ; preds = %315
  %317 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

318:                                              ; preds = %315
  %319 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !35
  br label %__nv_sqrtf.exit77, !dbg !35

__nv_sqrtf.exit77:                                ; preds = %311, %313, %316, %318
  %.0.i75 = phi float [ %312, %311 ], [ %314, %313 ], [ %317, %316 ], [ %319, %318 ], !dbg !35
  %320 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %321 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !27
  %322 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %323 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !27
  %324 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %325 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !27
  %326 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %327 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !27
  %328 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !25
  %329 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %330 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !25
  %331 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %332 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !25
  %333 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %334 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !25
  %335 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %336 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %337 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %338 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %339 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %340 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %341 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %342 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %343 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %344 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %345 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !27
  %346 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %347 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !27
  %348 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %349 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !27
  %350 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %351 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !27
  %352 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !33
  %353 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !33
  %354 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !33
  %355 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !33
  %356 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !33
  %357 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !33
  %358 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !33
  %359 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !33
  %360 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !33
  %361 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !33
  %362 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !33
  %363 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !33
  %364 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !33
  %365 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !33
  %366 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !33
  %367 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !33
  %368 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !31
  %369 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !31
  %370 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !31
  %371 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !31
  %372 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !31
  %373 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !31
  %374 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !31
  %375 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !31
  %376 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !31
  %377 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !31
  %378 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !31
  %379 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !31
  %380 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !31
  %381 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !31
  %382 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !31
  %383 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !31
  %384 = shl i32 %12, 2, !dbg !16
  %385 = and i32 %384, 252, !dbg !16
  %386 = or disjoint i32 %17, %385, !dbg !17
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %387 = and i32 %.lobit1, 3, !dbg !12
  %388 = or disjoint i32 %387, 12, !dbg !12
  %389 = or disjoint i32 %11, %388, !dbg !13
  %390 = or disjoint i32 %387, 8, !dbg !12
  %391 = or disjoint i32 %11, %390, !dbg !13
  %392 = or disjoint i32 %387, 4, !dbg !12
  %393 = or disjoint i32 %11, %392, !dbg !13
  %394 = or disjoint i32 %11, %387, !dbg !13
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !36
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !36
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !36
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !36
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !36
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !36
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !36
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !36
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !36
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !36
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !36
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !36
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !36
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !36
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !36
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !36
  %411 = shl i32 %394, 12, !dbg !37
  %412 = shl i32 %393, 12, !dbg !37
  %413 = shl i32 %391, 12, !dbg !37
  %414 = shl i32 %389, 12, !dbg !37
  %415 = add i32 %386, %411, !dbg !38
  %416 = add i32 %386, %412, !dbg !38
  %417 = add i32 %386, %413, !dbg !38
  %418 = add i32 %386, %414, !dbg !38
  %419 = sext i32 %415 to i64, !dbg !39
  %420 = getelementptr float, ptr addrspace(1) %5, i64 %419, !dbg !39
  %421 = sext i32 %416 to i64, !dbg !39
  %422 = getelementptr float, ptr addrspace(1) %5, i64 %421, !dbg !39
  %423 = sext i32 %417 to i64, !dbg !39
  %424 = getelementptr float, ptr addrspace(1) %5, i64 %423, !dbg !39
  %425 = sext i32 %418 to i64, !dbg !39
  %426 = getelementptr float, ptr addrspace(1) %5, i64 %425, !dbg !39
  %427 = and i32 %384, 1020, !dbg !40
  %428 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %429 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 1028, !dbg !40
  %430 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 2056, !dbg !40
  %431 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 3084, !dbg !40
  %432 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 4112, !dbg !40
  %433 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 5140, !dbg !40
  %434 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 6168, !dbg !40
  %435 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 7196, !dbg !40
  %436 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 8224, !dbg !40
  %437 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 9252, !dbg !40
  %438 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 10280, !dbg !40
  %439 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 11308, !dbg !40
  %440 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 12336, !dbg !40
  %441 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 13364, !dbg !40
  %442 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 14392, !dbg !40
  %443 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 15420, !dbg !40
  %444 = lshr i32 %427, 8, !dbg !40
  %445 = getelementptr float, ptr addrspace(3) @global_smem, i32 %444, !dbg !40
  %446 = getelementptr float, ptr addrspace(3) %445, i32 %427, !dbg !40
  %447 = or disjoint i32 %427, 1, !dbg !40
  %448 = getelementptr float, ptr addrspace(3) %445, i32 %447, !dbg !40
  %449 = or disjoint i32 %427, 2, !dbg !40
  %450 = getelementptr float, ptr addrspace(3) %445, i32 %449, !dbg !40
  %451 = or disjoint i32 %427, 3, !dbg !40
  %452 = getelementptr float, ptr addrspace(3) %445, i32 %451, !dbg !40
  %453 = or disjoint i32 %427, 1024, !dbg !40
  %454 = lshr i32 %453, 8, !dbg !40
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %454, !dbg !40
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %453, !dbg !40
  %457 = or disjoint i32 %427, 1025, !dbg !40
  %458 = lshr i32 %457, 8, !dbg !40
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !40
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %457, !dbg !40
  %461 = or disjoint i32 %427, 1026, !dbg !40
  %462 = lshr i32 %461, 8, !dbg !40
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !40
  %464 = getelementptr float, ptr addrspace(3) %463, i32 %461, !dbg !40
  %465 = or disjoint i32 %427, 1027, !dbg !40
  %466 = lshr i32 %465, 8, !dbg !40
  %467 = getelementptr float, ptr addrspace(3) @global_smem, i32 %466, !dbg !40
  %468 = getelementptr float, ptr addrspace(3) %467, i32 %465, !dbg !40
  %469 = or disjoint i32 %427, 2048, !dbg !40
  %470 = lshr i32 %469, 8, !dbg !40
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !40
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %469, !dbg !40
  %473 = or disjoint i32 %427, 2049, !dbg !40
  %474 = lshr i32 %473, 8, !dbg !40
  %475 = getelementptr float, ptr addrspace(3) @global_smem, i32 %474, !dbg !40
  %476 = getelementptr float, ptr addrspace(3) %475, i32 %473, !dbg !40
  %477 = or disjoint i32 %427, 2050, !dbg !40
  %478 = lshr i32 %477, 8, !dbg !40
  %479 = getelementptr float, ptr addrspace(3) @global_smem, i32 %478, !dbg !40
  %480 = getelementptr float, ptr addrspace(3) %479, i32 %477, !dbg !40
  %481 = or disjoint i32 %427, 2051, !dbg !40
  %482 = lshr i32 %481, 8, !dbg !40
  %483 = getelementptr float, ptr addrspace(3) @global_smem, i32 %482, !dbg !40
  %484 = getelementptr float, ptr addrspace(3) %483, i32 %481, !dbg !40
  %485 = or disjoint i32 %427, 3072, !dbg !40
  %486 = lshr i32 %485, 8, !dbg !40
  %487 = getelementptr float, ptr addrspace(3) @global_smem, i32 %486, !dbg !40
  %488 = getelementptr float, ptr addrspace(3) %487, i32 %485, !dbg !40
  %489 = or disjoint i32 %427, 3073, !dbg !40
  %490 = lshr i32 %489, 8, !dbg !40
  %491 = getelementptr float, ptr addrspace(3) @global_smem, i32 %490, !dbg !40
  %492 = getelementptr float, ptr addrspace(3) %491, i32 %489, !dbg !40
  %493 = or disjoint i32 %427, 3074, !dbg !40
  %494 = lshr i32 %493, 8, !dbg !40
  %495 = getelementptr float, ptr addrspace(3) @global_smem, i32 %494, !dbg !40
  %496 = getelementptr float, ptr addrspace(3) %495, i32 %493, !dbg !40
  %497 = or disjoint i32 %427, 3075, !dbg !40
  %498 = lshr i32 %497, 8, !dbg !40
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !40
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %497, !dbg !40
  %501 = getelementptr i1, ptr addrspace(1) %6, i64 %32, !dbg !41
  %502 = insertelement <4 x i32> poison, i32 %350, i64 0, !dbg !25
  %503 = insertelement <4 x i32> %502, i32 %348, i64 1, !dbg !25
  %504 = insertelement <4 x i32> %503, i32 %346, i64 2, !dbg !25
  %505 = insertelement <4 x i32> %504, i32 %344, i64 3, !dbg !25
  %506 = bitcast <4 x i32> %505 to <4 x float>, !dbg !25
  %507 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !27
  %508 = insertelement <4 x i32> %507, i32 %349, i64 1, !dbg !27
  %509 = insertelement <4 x i32> %508, i32 %347, i64 2, !dbg !27
  %510 = insertelement <4 x i32> %509, i32 %345, i64 3, !dbg !27
  %511 = bitcast <4 x i32> %510 to <4 x float>, !dbg !27
  %512 = fsub <4 x float> %506, %511, !dbg !42
  %513 = insertelement <4 x i32> poison, i32 %367, i64 0, !dbg !33
  %514 = insertelement <4 x i32> %513, i32 %366, i64 1, !dbg !33
  %515 = insertelement <4 x i32> %514, i32 %365, i64 2, !dbg !33
  %516 = insertelement <4 x i32> %515, i32 %364, i64 3, !dbg !33
  %517 = bitcast <4 x i32> %516 to <4 x float>, !dbg !33
  %518 = insertelement <4 x i32> poison, i32 %383, i64 0, !dbg !31
  %519 = insertelement <4 x i32> %518, i32 %382, i64 1, !dbg !31
  %520 = insertelement <4 x i32> %519, i32 %381, i64 2, !dbg !31
  %521 = insertelement <4 x i32> %520, i32 %380, i64 3, !dbg !31
  %522 = bitcast <4 x i32> %521 to <4 x float>, !dbg !31
  %523 = insertelement <4 x float> poison, float %395, i64 0, !dbg !43
  %524 = insertelement <4 x float> %523, float %396, i64 1, !dbg !43
  %525 = insertelement <4 x float> %524, float %397, i64 2, !dbg !43
  %526 = insertelement <4 x float> %525, float %398, i64 3, !dbg !43
  %527 = fmul <4 x float> %512, %526, !dbg !43
  %528 = fmul <4 x float> %527, %522, !dbg !44
  %529 = fadd <4 x float> %528, %517, !dbg !45
  %530 = fcmp olt <4 x float> %529, zeroinitializer, !dbg !46
  %531 = select <4 x i1> %530, <4 x float> zeroinitializer, <4 x float> %529, !dbg !50
  %532 = fcmp ole <4 x float> %531, zeroinitializer, !dbg !51
  %533 = extractelement <4 x float> %531, i64 0, !dbg !40
  %534 = bitcast float %533 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %534, i1 true) #4, !dbg !40
  %535 = extractelement <4 x float> %531, i64 1, !dbg !40
  %536 = bitcast float %535 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %536, i1 true) #4, !dbg !40
  %537 = extractelement <4 x float> %531, i64 2, !dbg !40
  %538 = bitcast float %537 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %538, i1 true) #4, !dbg !40
  %539 = extractelement <4 x float> %531, i64 3, !dbg !40
  %540 = bitcast float %539 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %540, i1 true) #4, !dbg !40
  %541 = insertelement <4 x i32> poison, i32 %342, i64 0, !dbg !25
  %542 = insertelement <4 x i32> %541, i32 %340, i64 1, !dbg !25
  %543 = insertelement <4 x i32> %542, i32 %338, i64 2, !dbg !25
  %544 = insertelement <4 x i32> %543, i32 %336, i64 3, !dbg !25
  %545 = bitcast <4 x i32> %544 to <4 x float>, !dbg !25
  %546 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !27
  %547 = insertelement <4 x i32> %546, i32 %341, i64 1, !dbg !27
  %548 = insertelement <4 x i32> %547, i32 %339, i64 2, !dbg !27
  %549 = insertelement <4 x i32> %548, i32 %337, i64 3, !dbg !27
  %550 = bitcast <4 x i32> %549 to <4 x float>, !dbg !27
  %551 = fsub <4 x float> %545, %550, !dbg !42
  %552 = insertelement <4 x i32> poison, i32 %363, i64 0, !dbg !33
  %553 = insertelement <4 x i32> %552, i32 %362, i64 1, !dbg !33
  %554 = insertelement <4 x i32> %553, i32 %361, i64 2, !dbg !33
  %555 = insertelement <4 x i32> %554, i32 %360, i64 3, !dbg !33
  %556 = bitcast <4 x i32> %555 to <4 x float>, !dbg !33
  %557 = insertelement <4 x i32> poison, i32 %379, i64 0, !dbg !31
  %558 = insertelement <4 x i32> %557, i32 %378, i64 1, !dbg !31
  %559 = insertelement <4 x i32> %558, i32 %377, i64 2, !dbg !31
  %560 = insertelement <4 x i32> %559, i32 %376, i64 3, !dbg !31
  %561 = bitcast <4 x i32> %560 to <4 x float>, !dbg !31
  %562 = insertelement <4 x float> poison, float %399, i64 0, !dbg !43
  %563 = insertelement <4 x float> %562, float %400, i64 1, !dbg !43
  %564 = insertelement <4 x float> %563, float %401, i64 2, !dbg !43
  %565 = insertelement <4 x float> %564, float %402, i64 3, !dbg !43
  %566 = fmul <4 x float> %551, %565, !dbg !43
  %567 = fmul <4 x float> %566, %561, !dbg !44
  %568 = fadd <4 x float> %567, %556, !dbg !45
  %569 = fcmp olt <4 x float> %568, zeroinitializer, !dbg !46
  %570 = select <4 x i1> %569, <4 x float> zeroinitializer, <4 x float> %568, !dbg !50
  %571 = fcmp ole <4 x float> %570, zeroinitializer, !dbg !51
  %572 = extractelement <4 x float> %570, i64 0, !dbg !40
  %573 = bitcast float %572 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %573, i1 true) #4, !dbg !40
  %574 = extractelement <4 x float> %570, i64 1, !dbg !40
  %575 = bitcast float %574 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %575, i1 true) #4, !dbg !40
  %576 = extractelement <4 x float> %570, i64 2, !dbg !40
  %577 = bitcast float %576 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %577, i1 true) #4, !dbg !40
  %578 = extractelement <4 x float> %570, i64 3, !dbg !40
  %579 = bitcast float %578 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %579, i1 true) #4, !dbg !40
  %580 = insertelement <4 x i32> poison, i32 %334, i64 0, !dbg !25
  %581 = insertelement <4 x i32> %580, i32 %332, i64 1, !dbg !25
  %582 = insertelement <4 x i32> %581, i32 %330, i64 2, !dbg !25
  %583 = insertelement <4 x i32> %582, i32 %328, i64 3, !dbg !25
  %584 = bitcast <4 x i32> %583 to <4 x float>, !dbg !25
  %585 = insertelement <4 x i32> poison, i32 %335, i64 0, !dbg !27
  %586 = insertelement <4 x i32> %585, i32 %333, i64 1, !dbg !27
  %587 = insertelement <4 x i32> %586, i32 %331, i64 2, !dbg !27
  %588 = insertelement <4 x i32> %587, i32 %329, i64 3, !dbg !27
  %589 = bitcast <4 x i32> %588 to <4 x float>, !dbg !27
  %590 = fsub <4 x float> %584, %589, !dbg !42
  %591 = insertelement <4 x i32> poison, i32 %359, i64 0, !dbg !33
  %592 = insertelement <4 x i32> %591, i32 %358, i64 1, !dbg !33
  %593 = insertelement <4 x i32> %592, i32 %357, i64 2, !dbg !33
  %594 = insertelement <4 x i32> %593, i32 %356, i64 3, !dbg !33
  %595 = bitcast <4 x i32> %594 to <4 x float>, !dbg !33
  %596 = insertelement <4 x i32> poison, i32 %375, i64 0, !dbg !31
  %597 = insertelement <4 x i32> %596, i32 %374, i64 1, !dbg !31
  %598 = insertelement <4 x i32> %597, i32 %373, i64 2, !dbg !31
  %599 = insertelement <4 x i32> %598, i32 %372, i64 3, !dbg !31
  %600 = bitcast <4 x i32> %599 to <4 x float>, !dbg !31
  %601 = insertelement <4 x float> poison, float %403, i64 0, !dbg !43
  %602 = insertelement <4 x float> %601, float %404, i64 1, !dbg !43
  %603 = insertelement <4 x float> %602, float %405, i64 2, !dbg !43
  %604 = insertelement <4 x float> %603, float %406, i64 3, !dbg !43
  %605 = fmul <4 x float> %590, %604, !dbg !43
  %606 = fmul <4 x float> %605, %600, !dbg !44
  %607 = fadd <4 x float> %606, %595, !dbg !45
  %608 = fcmp olt <4 x float> %607, zeroinitializer, !dbg !46
  %609 = select <4 x i1> %608, <4 x float> zeroinitializer, <4 x float> %607, !dbg !50
  %610 = fcmp ole <4 x float> %609, zeroinitializer, !dbg !51
  %611 = extractelement <4 x float> %609, i64 0, !dbg !40
  %612 = bitcast float %611 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %612, i1 true) #4, !dbg !40
  %613 = extractelement <4 x float> %609, i64 1, !dbg !40
  %614 = bitcast float %613 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %614, i1 true) #4, !dbg !40
  %615 = extractelement <4 x float> %609, i64 2, !dbg !40
  %616 = bitcast float %615 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %616, i1 true) #4, !dbg !40
  %617 = extractelement <4 x float> %609, i64 3, !dbg !40
  %618 = bitcast float %617 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %618, i1 true) #4, !dbg !40
  %619 = insertelement <4 x i32> poison, i32 %326, i64 0, !dbg !25
  %620 = insertelement <4 x i32> %619, i32 %324, i64 1, !dbg !25
  %621 = insertelement <4 x i32> %620, i32 %322, i64 2, !dbg !25
  %622 = insertelement <4 x i32> %621, i32 %320, i64 3, !dbg !25
  %623 = bitcast <4 x i32> %622 to <4 x float>, !dbg !25
  %624 = insertelement <4 x i32> poison, i32 %327, i64 0, !dbg !27
  %625 = insertelement <4 x i32> %624, i32 %325, i64 1, !dbg !27
  %626 = insertelement <4 x i32> %625, i32 %323, i64 2, !dbg !27
  %627 = insertelement <4 x i32> %626, i32 %321, i64 3, !dbg !27
  %628 = bitcast <4 x i32> %627 to <4 x float>, !dbg !27
  %629 = fsub <4 x float> %623, %628, !dbg !42
  %630 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !33
  %631 = insertelement <4 x i32> %630, i32 %354, i64 1, !dbg !33
  %632 = insertelement <4 x i32> %631, i32 %353, i64 2, !dbg !33
  %633 = insertelement <4 x i32> %632, i32 %352, i64 3, !dbg !33
  %634 = bitcast <4 x i32> %633 to <4 x float>, !dbg !33
  %635 = insertelement <4 x i32> poison, i32 %371, i64 0, !dbg !31
  %636 = insertelement <4 x i32> %635, i32 %370, i64 1, !dbg !31
  %637 = insertelement <4 x i32> %636, i32 %369, i64 2, !dbg !31
  %638 = insertelement <4 x i32> %637, i32 %368, i64 3, !dbg !31
  %639 = bitcast <4 x i32> %638 to <4 x float>, !dbg !31
  %640 = insertelement <4 x float> poison, float %407, i64 0, !dbg !43
  %641 = insertelement <4 x float> %640, float %408, i64 1, !dbg !43
  %642 = insertelement <4 x float> %641, float %409, i64 2, !dbg !43
  %643 = insertelement <4 x float> %642, float %410, i64 3, !dbg !43
  %644 = fmul <4 x float> %629, %643, !dbg !43
  %645 = fmul <4 x float> %644, %639, !dbg !44
  %646 = fadd <4 x float> %645, %634, !dbg !45
  %647 = fcmp olt <4 x float> %646, zeroinitializer, !dbg !46
  %648 = select <4 x i1> %647, <4 x float> zeroinitializer, <4 x float> %646, !dbg !50
  %649 = fcmp ole <4 x float> %648, zeroinitializer, !dbg !51
  %650 = extractelement <4 x float> %648, i64 0, !dbg !40
  %651 = bitcast float %650 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %651, i1 true) #4, !dbg !40
  %652 = extractelement <4 x float> %648, i64 1, !dbg !40
  %653 = bitcast float %652 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %653, i1 true) #4, !dbg !40
  %654 = extractelement <4 x float> %648, i64 2, !dbg !40
  %655 = bitcast float %654 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %655, i1 true) #4, !dbg !40
  %656 = extractelement <4 x float> %648, i64 3, !dbg !40
  %657 = bitcast float %656 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %657, i1 true) #4, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %658 = load i32, ptr addrspace(3) %446, align 4, !dbg !40
  %659 = load i32, ptr addrspace(3) %448, align 4, !dbg !40
  %660 = load i32, ptr addrspace(3) %450, align 4, !dbg !40
  %661 = load i32, ptr addrspace(3) %452, align 4, !dbg !40
  %662 = load i32, ptr addrspace(3) %456, align 4, !dbg !40
  %663 = load i32, ptr addrspace(3) %460, align 4, !dbg !40
  %664 = load i32, ptr addrspace(3) %464, align 4, !dbg !40
  %665 = load i32, ptr addrspace(3) %468, align 4, !dbg !40
  %666 = load i32, ptr addrspace(3) %472, align 4, !dbg !40
  %667 = load i32, ptr addrspace(3) %476, align 4, !dbg !40
  %668 = load i32, ptr addrspace(3) %480, align 4, !dbg !40
  %669 = load i32, ptr addrspace(3) %484, align 4, !dbg !40
  %670 = load i32, ptr addrspace(3) %488, align 4, !dbg !40
  %671 = load i32, ptr addrspace(3) %492, align 4, !dbg !40
  %672 = load i32, ptr addrspace(3) %496, align 4, !dbg !40
  %673 = load i32, ptr addrspace(3) %500, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %658, i32 %659, i32 %660, i32 %661, ptr addrspace(1) %420, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %662, i32 %663, i32 %664, i32 %665, ptr addrspace(1) %422, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %666, i32 %667, i32 %668, i32 %669, ptr addrspace(1) %424, i1 true) #4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %670, i32 %671, i32 %672, i32 %673, ptr addrspace(1) %426, i1 true) #4, !dbg !40
  %674 = zext <4 x i1> %532 to <4 x i8>, !dbg !52
  %675 = bitcast <4 x i8> %674 to i32, !dbg !52
  %676 = zext <4 x i1> %571 to <4 x i8>, !dbg !52
  %677 = bitcast <4 x i8> %676 to i32, !dbg !52
  %678 = zext <4 x i1> %610 to <4 x i8>, !dbg !52
  %679 = bitcast <4 x i8> %678 to i32, !dbg !52
  %680 = zext <4 x i1> %649 to <4 x i8>, !dbg !52
  %681 = bitcast <4 x i8> %680 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %675, i32 %677, i32 %679, i32 %681, ptr addrspace(1) %501, i1 true) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 31, scope: !7)
!31 = !DILocation(line: 35, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 31, scope: !7)
!33 = !DILocation(line: 36, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 26, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 52, column: 30, scope: !7)
!39 = !DILocation(line: 52, column: 25, scope: !7)
!40 = !DILocation(line: 52, column: 47, scope: !7)
!41 = !DILocation(line: 53, column: 25, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 45, column: 19, scope: !7)
!44 = !DILocation(line: 46, column: 20, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !47, inlinedAt: !49)
!47 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!48 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!49 = !DILocation(line: 49, column: 42, scope: !7)
!50 = !DILocation(line: 121, column: 29, scope: !47, inlinedAt: !49)
!51 = !DILocation(line: 51, column: 21, scope: !7)
!52 = !DILocation(line: 53, column: 59, scope: !7)
!53 = !DILocation(line: 53, column: 4, scope: !7)
