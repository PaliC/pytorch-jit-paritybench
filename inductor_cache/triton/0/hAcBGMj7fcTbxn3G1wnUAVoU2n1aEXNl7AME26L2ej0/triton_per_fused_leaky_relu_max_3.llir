; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_leaky_relu_max_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 24, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = and i32 %8, 31, !dbg !12
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = lshr i32 %8, 5, !dbg !14
  %16 = lshr i32 %8, 3, !dbg !14
  %17 = and i32 %16, 31, !dbg !14
  %18 = or disjoint i32 %17, 32, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %19 = sdiv i32 %.frozen, 128, !dbg !15
  %20 = mul i32 %19, 128, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %14, 128, !dbg !15
  %22 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !17
  %23 = insertelement <2 x i32> %22, i32 %14, i64 1, !dbg !17
  %24 = srem <2 x i32> %23, <i32 64, i32 128>, !dbg !17
  %25 = sdiv i32 %14, 8192, !dbg !18
  %26 = shl nuw nsw i32 %17, 7, !dbg !19
  %27 = shl nuw nsw i32 %18, 7, !dbg !19
  %28 = shl i32 %19, 13, !dbg !20
  %29 = add i32 %28, %.decomposed, !dbg !21
  %30 = add i32 %29, %26, !dbg !22
  %31 = add i32 %29, %27, !dbg !22
  %32 = sext i32 %30 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !24
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !24
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !24
  %46 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !24
  %47 = insertelement <2 x i32> %46, i32 %42, i64 1, !dbg !24
  %48 = bitcast <2 x i32> %47 to <2 x float>, !dbg !24
  %49 = fcmp ogt <2 x float> %48, zeroinitializer, !dbg !25
  %50 = fmul <2 x float> %48, splat (float 0x3FC99999A0000000), !dbg !26
  %51 = select <2 x i1> %49, <2 x float> %48, <2 x float> %50, !dbg !27
  %52 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !24
  %53 = insertelement <2 x i32> %52, i32 %43, i64 1, !dbg !24
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !24
  %55 = fcmp ogt <2 x float> %54, zeroinitializer, !dbg !25
  %56 = fmul <2 x float> %54, splat (float 0x3FC99999A0000000), !dbg !26
  %57 = select <2 x i1> %55, <2 x float> %54, <2 x float> %56, !dbg !27
  %58 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !24
  %59 = insertelement <2 x i32> %58, i32 %44, i64 1, !dbg !24
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !24
  %61 = fcmp ogt <2 x float> %60, zeroinitializer, !dbg !25
  %62 = fmul <2 x float> %60, splat (float 0x3FC99999A0000000), !dbg !26
  %63 = select <2 x i1> %61, <2 x float> %60, <2 x float> %62, !dbg !27
  %64 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !24
  %65 = insertelement <2 x i32> %64, i32 %45, i64 1, !dbg !24
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !24
  %67 = fcmp ogt <2 x float> %66, zeroinitializer, !dbg !25
  %68 = fmul <2 x float> %66, splat (float 0x3FC99999A0000000), !dbg !26
  %69 = select <2 x i1> %67, <2 x float> %66, <2 x float> %68, !dbg !27
  %70 = or disjoint i32 %11, 1, !dbg !28
  %71 = or disjoint i32 %11, 2, !dbg !28
  %72 = or disjoint i32 %11, 3, !dbg !28
  %73 = extractelement <2 x float> %51, i64 0, !dbg !32
  %74 = extractelement <2 x float> %51, i64 1, !dbg !32
  %75 = fcmp ogt float %73, %74, !dbg !35
  %76 = fcmp uno float %73, 0.000000e+00, !dbg !36
  %77 = or i1 %76, %75, !dbg !37
  %78 = select i1 %77, float %73, float %74, !dbg !38
  %79 = extractelement <2 x float> %57, i64 0, !dbg !32
  %80 = extractelement <2 x float> %57, i64 1, !dbg !32
  %81 = fcmp ogt float %79, %80, !dbg !35
  %82 = fcmp uno float %79, 0.000000e+00, !dbg !36
  %83 = or i1 %82, %81, !dbg !37
  %84 = select i1 %83, float %79, float %80, !dbg !38
  %85 = extractelement <2 x float> %63, i64 0, !dbg !32
  %86 = extractelement <2 x float> %63, i64 1, !dbg !32
  %87 = fcmp ogt float %85, %86, !dbg !35
  %88 = fcmp uno float %85, 0.000000e+00, !dbg !36
  %89 = or i1 %88, %87, !dbg !37
  %90 = select i1 %89, float %85, float %86, !dbg !38
  %91 = extractelement <2 x float> %69, i64 0, !dbg !32
  %92 = extractelement <2 x float> %69, i64 1, !dbg !32
  %93 = fcmp ogt float %91, %92, !dbg !35
  %94 = fcmp uno float %91, 0.000000e+00, !dbg !36
  %95 = or i1 %94, %93, !dbg !37
  %96 = select i1 %95, float %91, float %92, !dbg !38
  %97 = bitcast float %78 to i32, !dbg !28
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !28
  %99 = bitcast i32 %98 to float, !dbg !28
  %100 = fcmp ogt float %78, %99, !dbg !35
  %101 = fcmp uno float %78, 0.000000e+00, !dbg !36
  %102 = or i1 %100, %101, !dbg !37
  %103 = select i1 %102, float %78, float %99, !dbg !38
  %104 = bitcast float %103 to i32, !dbg !28
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = fcmp ogt float %103, %106, !dbg !35
  %108 = fcmp uno float %103, 0.000000e+00, !dbg !36
  %109 = or i1 %107, %108, !dbg !37
  %110 = bitcast float %84 to i32, !dbg !28
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = fcmp ogt float %84, %112, !dbg !35
  %114 = fcmp uno float %84, 0.000000e+00, !dbg !36
  %115 = or i1 %113, %114, !dbg !37
  %116 = select i1 %115, float %84, float %112, !dbg !38
  %117 = bitcast float %116 to i32, !dbg !28
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 8, i32 31), !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = fcmp ogt float %116, %119, !dbg !35
  %121 = fcmp uno float %116, 0.000000e+00, !dbg !36
  %122 = or i1 %120, %121, !dbg !37
  %123 = bitcast float %90 to i32, !dbg !28
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !28
  %125 = bitcast i32 %124 to float, !dbg !28
  %126 = fcmp ogt float %90, %125, !dbg !35
  %127 = fcmp uno float %90, 0.000000e+00, !dbg !36
  %128 = or i1 %126, %127, !dbg !37
  %129 = select i1 %128, float %90, float %125, !dbg !38
  %130 = bitcast float %129 to i32, !dbg !28
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 8, i32 31), !dbg !28
  %132 = bitcast i32 %131 to float, !dbg !28
  %133 = fcmp ogt float %129, %132, !dbg !35
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !36
  %135 = or i1 %133, %134, !dbg !37
  %136 = bitcast float %96 to i32, !dbg !28
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !28
  %138 = bitcast i32 %137 to float, !dbg !28
  %139 = fcmp ogt float %96, %138, !dbg !35
  %140 = fcmp uno float %96, 0.000000e+00, !dbg !36
  %141 = or i1 %140, %139, !dbg !37
  %142 = select i1 %141, float %96, float %138, !dbg !38
  %143 = bitcast float %142 to i32, !dbg !28
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 8, i32 31), !dbg !28
  %145 = bitcast i32 %144 to float, !dbg !28
  %146 = fcmp ogt float %142, %145, !dbg !35
  %147 = fcmp uno float %142, 0.000000e+00, !dbg !36
  %148 = or i1 %146, %147, !dbg !37
  %149 = icmp eq i32 %9, 0, !dbg !28
  %150 = and i32 %15, 7, !dbg !28
  %151 = shl nuw nsw i32 %11, 3, !dbg !28
  %152 = or disjoint i32 %151, %150, !dbg !28
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !28
  %154 = select i1 %109, i32 %104, i32 %105, !dbg !38
  %155 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %155, i1 %149) #3, !dbg !28
  %156 = shl nuw nsw i32 %70, 3, !dbg !28
  %157 = or disjoint i32 %156, %150, !dbg !28
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !28
  %159 = select i1 %122, i32 %117, i32 %118, !dbg !38
  %160 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %160, i1 %149) #3, !dbg !28
  %161 = shl nuw nsw i32 %71, 3, !dbg !28
  %162 = or disjoint i32 %161, %150, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !28
  %164 = select i1 %135, i32 %130, i32 %131, !dbg !38
  %165 = insertelement <1 x i32> poison, i32 %164, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %165, i1 %149) #3, !dbg !28
  %166 = shl nuw nsw i32 %72, 3, !dbg !28
  %167 = or disjoint i32 %166, %150, !dbg !28
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !28
  %169 = select i1 %148, i32 %143, i32 %144, !dbg !38
  %170 = insertelement <1 x i32> poison, i32 %169, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %170, i1 %149) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %171 = icmp slt i32 %8, 256, !dbg !28
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !28
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #3, !dbg !28
  %174 = bitcast i32 %173 to float, !dbg !28
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !28
  %176 = bitcast i32 %175 to float, !dbg !28
  %177 = fcmp ogt float %174, %176, !dbg !35
  %178 = fcmp uno float %174, 0.000000e+00, !dbg !36
  %179 = or i1 %178, %177, !dbg !37
  %180 = select i1 %179, float %174, float %176, !dbg !38
  %181 = bitcast float %180 to i32, !dbg !28
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 2, i32 31), !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = fcmp ogt float %180, %183, !dbg !35
  %185 = fcmp uno float %180, 0.000000e+00, !dbg !36
  %186 = or i1 %184, %185, !dbg !37
  %187 = select i1 %186, float %180, float %183, !dbg !38
  %188 = bitcast float %187 to i32, !dbg !28
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !28
  %190 = bitcast i32 %189 to float, !dbg !28
  %191 = fcmp ogt float %187, %190, !dbg !35
  %192 = fcmp uno float %187, 0.000000e+00, !dbg !36
  %193 = or i1 %191, %192, !dbg !37
  %194 = and i32 %8, 7, !dbg !28
  %195 = icmp eq i32 %194, 0, !dbg !28
  %196 = and i1 %171, %195, !dbg !28
  %197 = select i1 %193, i32 %188, i32 %189, !dbg !38
  %198 = insertelement <1 x i32> poison, i32 %197, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %198, i1 %196) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %199 = getelementptr float, ptr addrspace(3) @global_smem, i32 %151, !dbg !28
  %200 = load i32, ptr addrspace(3) %199, align 16, !dbg !28
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %156, !dbg !28
  %202 = load i32, ptr addrspace(3) %201, align 16, !dbg !28
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !28
  %204 = load i32, ptr addrspace(3) %203, align 16, !dbg !28
  %205 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !28
  %206 = load i32, ptr addrspace(3) %205, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !39
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %207, i32 %200, i32 %202, i32 %204, i32 %206, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !39
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %210 = fcmp oeq float %73, %74, !dbg !41
  %211 = or i1 %76, %210, !dbg !42
  %212 = or i1 %75, %211, !dbg !42
  %213 = select i1 %212, float %73, float %74, !dbg !32
  %214 = select i1 %212, i32 %17, i32 %18, !dbg !43
  %215 = fcmp oeq float %79, %80, !dbg !41
  %216 = or i1 %82, %215, !dbg !42
  %217 = or i1 %81, %216, !dbg !42
  %218 = select i1 %217, float %79, float %80, !dbg !32
  %219 = select i1 %217, i32 %17, i32 %18, !dbg !43
  %220 = fcmp oeq float %85, %86, !dbg !41
  %221 = or i1 %88, %220, !dbg !42
  %222 = or i1 %87, %221, !dbg !42
  %223 = select i1 %222, float %85, float %86, !dbg !32
  %224 = select i1 %222, i32 %17, i32 %18, !dbg !43
  %225 = fcmp oeq float %91, %92, !dbg !41
  %226 = or i1 %94, %225, !dbg !42
  %227 = or i1 %93, %226, !dbg !42
  %228 = select i1 %227, float %91, float %92, !dbg !32
  %229 = select i1 %227, i32 %17, i32 %18, !dbg !43
  %230 = bitcast float %213 to i32, !dbg !40
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !40
  %232 = bitcast i32 %231 to float, !dbg !40
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 16, i32 31), !dbg !40
  %234 = fcmp ogt float %213, %232, !dbg !44
  %235 = fcmp oeq float %213, %232, !dbg !41
  %236 = fcmp uno float %213, 0.000000e+00, !dbg !45
  %237 = fcmp uno float %232, 0.000000e+00, !dbg !46
  %238 = xor i1 %237, true, !dbg !47
  %239 = and i1 %236, %238, !dbg !48
  %240 = or i1 %234, %239, !dbg !49
  %241 = and i1 %236, %237, !dbg !50
  %242 = or i1 %235, %241, !dbg !51
  %243 = icmp slt i32 %214, %233, !dbg !52
  %244 = and i1 %243, %242, !dbg !53
  %245 = or i1 %240, %244, !dbg !42
  %246 = select i1 %245, float %213, float %232, !dbg !32
  %247 = select i1 %245, i32 %214, i32 %233, !dbg !43
  %248 = bitcast float %246 to i32, !dbg !40
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !40
  %250 = bitcast i32 %249 to float, !dbg !40
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !40
  %252 = fcmp ogt float %246, %250, !dbg !44
  %253 = fcmp oeq float %246, %250, !dbg !41
  %254 = fcmp uno float %246, 0.000000e+00, !dbg !45
  %255 = fcmp uno float %250, 0.000000e+00, !dbg !46
  %256 = xor i1 %255, true, !dbg !47
  %257 = and i1 %254, %256, !dbg !48
  %258 = or i1 %252, %257, !dbg !49
  %259 = and i1 %255, %254, !dbg !50
  %260 = or i1 %253, %259, !dbg !51
  %261 = icmp slt i32 %247, %251, !dbg !52
  %262 = and i1 %261, %260, !dbg !53
  %263 = or i1 %258, %262, !dbg !42
  %264 = select i1 %263, i32 %247, i32 %251, !dbg !43
  %265 = bitcast float %218 to i32, !dbg !40
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 16, i32 31), !dbg !40
  %267 = bitcast i32 %266 to float, !dbg !40
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 16, i32 31), !dbg !40
  %269 = fcmp ogt float %218, %267, !dbg !44
  %270 = fcmp oeq float %218, %267, !dbg !41
  %271 = fcmp uno float %218, 0.000000e+00, !dbg !45
  %272 = fcmp uno float %267, 0.000000e+00, !dbg !46
  %273 = xor i1 %272, true, !dbg !47
  %274 = and i1 %271, %273, !dbg !48
  %275 = or i1 %269, %274, !dbg !49
  %276 = and i1 %271, %272, !dbg !50
  %277 = or i1 %270, %276, !dbg !51
  %278 = icmp slt i32 %219, %268, !dbg !52
  %279 = and i1 %278, %277, !dbg !53
  %280 = or i1 %275, %279, !dbg !42
  %281 = select i1 %280, float %218, float %267, !dbg !32
  %282 = select i1 %280, i32 %219, i32 %268, !dbg !43
  %283 = bitcast float %281 to i32, !dbg !40
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 8, i32 31), !dbg !40
  %285 = bitcast i32 %284 to float, !dbg !40
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 8, i32 31), !dbg !40
  %287 = fcmp ogt float %281, %285, !dbg !44
  %288 = fcmp oeq float %281, %285, !dbg !41
  %289 = fcmp uno float %281, 0.000000e+00, !dbg !45
  %290 = fcmp uno float %285, 0.000000e+00, !dbg !46
  %291 = xor i1 %290, true, !dbg !47
  %292 = and i1 %289, %291, !dbg !48
  %293 = or i1 %287, %292, !dbg !49
  %294 = and i1 %290, %289, !dbg !50
  %295 = or i1 %288, %294, !dbg !51
  %296 = icmp slt i32 %282, %286, !dbg !52
  %297 = and i1 %296, %295, !dbg !53
  %298 = or i1 %293, %297, !dbg !42
  %299 = select i1 %298, i32 %282, i32 %286, !dbg !43
  %300 = bitcast float %223 to i32, !dbg !40
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 16, i32 31), !dbg !40
  %302 = bitcast i32 %301 to float, !dbg !40
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !40
  %304 = fcmp ogt float %223, %302, !dbg !44
  %305 = fcmp oeq float %223, %302, !dbg !41
  %306 = fcmp uno float %223, 0.000000e+00, !dbg !45
  %307 = fcmp uno float %302, 0.000000e+00, !dbg !46
  %308 = xor i1 %307, true, !dbg !47
  %309 = and i1 %306, %308, !dbg !48
  %310 = or i1 %304, %309, !dbg !49
  %311 = and i1 %306, %307, !dbg !50
  %312 = or i1 %305, %311, !dbg !51
  %313 = icmp slt i32 %224, %303, !dbg !52
  %314 = and i1 %313, %312, !dbg !53
  %315 = or i1 %310, %314, !dbg !42
  %316 = select i1 %315, float %223, float %302, !dbg !32
  %317 = select i1 %315, i32 %224, i32 %303, !dbg !43
  %318 = bitcast float %316 to i32, !dbg !40
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 8, i32 31), !dbg !40
  %320 = bitcast i32 %319 to float, !dbg !40
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %317, i32 8, i32 31), !dbg !40
  %322 = fcmp ogt float %316, %320, !dbg !44
  %323 = fcmp oeq float %316, %320, !dbg !41
  %324 = fcmp uno float %316, 0.000000e+00, !dbg !45
  %325 = fcmp uno float %320, 0.000000e+00, !dbg !46
  %326 = xor i1 %325, true, !dbg !47
  %327 = and i1 %324, %326, !dbg !48
  %328 = or i1 %322, %327, !dbg !49
  %329 = and i1 %325, %324, !dbg !50
  %330 = or i1 %323, %329, !dbg !51
  %331 = icmp slt i32 %317, %321, !dbg !52
  %332 = and i1 %331, %330, !dbg !53
  %333 = or i1 %328, %332, !dbg !42
  %334 = select i1 %333, i32 %317, i32 %321, !dbg !43
  %335 = bitcast float %228 to i32, !dbg !40
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 16, i32 31), !dbg !40
  %337 = bitcast i32 %336 to float, !dbg !40
  %338 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !40
  %339 = fcmp ogt float %228, %337, !dbg !44
  %340 = fcmp oeq float %228, %337, !dbg !41
  %341 = fcmp uno float %228, 0.000000e+00, !dbg !45
  %342 = fcmp uno float %337, 0.000000e+00, !dbg !46
  %343 = xor i1 %342, true, !dbg !47
  %344 = and i1 %341, %343, !dbg !48
  %345 = or i1 %339, %344, !dbg !49
  %346 = and i1 %341, %342, !dbg !50
  %347 = or i1 %340, %346, !dbg !51
  %348 = icmp slt i32 %229, %338, !dbg !52
  %349 = and i1 %348, %347, !dbg !53
  %350 = or i1 %345, %349, !dbg !42
  %351 = select i1 %350, float %228, float %337, !dbg !32
  %352 = select i1 %350, i32 %229, i32 %338, !dbg !43
  %353 = bitcast float %351 to i32, !dbg !40
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !40
  %355 = bitcast i32 %354 to float, !dbg !40
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 8, i32 31), !dbg !40
  %357 = fcmp ogt float %351, %355, !dbg !44
  %358 = fcmp oeq float %351, %355, !dbg !41
  %359 = fcmp uno float %351, 0.000000e+00, !dbg !45
  %360 = fcmp uno float %355, 0.000000e+00, !dbg !46
  %361 = xor i1 %360, true, !dbg !47
  %362 = and i1 %359, %361, !dbg !48
  %363 = or i1 %357, %362, !dbg !49
  %364 = and i1 %360, %359, !dbg !50
  %365 = or i1 %358, %364, !dbg !51
  %366 = icmp slt i32 %352, %356, !dbg !52
  %367 = and i1 %366, %365, !dbg !53
  %368 = or i1 %363, %367, !dbg !42
  %369 = select i1 %368, i32 %352, i32 %356, !dbg !43
  %370 = select i1 %263, i32 %248, i32 %249, !dbg !32
  %371 = insertelement <1 x i32> poison, i32 %370, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %371, i1 %149) #3, !dbg !40
  %372 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %152, !dbg !40
  %373 = insertelement <1 x i32> poison, i32 %264, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 %149) #3, !dbg !40
  %374 = select i1 %298, i32 %283, i32 %284, !dbg !32
  %375 = insertelement <1 x i32> poison, i32 %374, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %158, <1 x i32> %375, i1 %149) #3, !dbg !40
  %376 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %157, !dbg !40
  %377 = insertelement <1 x i32> poison, i32 %299, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %376, <1 x i32> %377, i1 %149) #3, !dbg !40
  %378 = select i1 %333, i32 %318, i32 %319, !dbg !32
  %379 = insertelement <1 x i32> poison, i32 %378, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %379, i1 %149) #3, !dbg !40
  %380 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %162, !dbg !40
  %381 = insertelement <1 x i32> poison, i32 %334, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 %149) #3, !dbg !40
  %382 = select i1 %368, i32 %353, i32 %354, !dbg !32
  %383 = insertelement <1 x i32> poison, i32 %382, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %383, i1 %149) #3, !dbg !40
  %384 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %167, !dbg !40
  %385 = insertelement <1 x i32> poison, i32 %369, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 %149) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %386 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #3, !dbg !40
  %387 = bitcast i32 %386 to float, !dbg !40
  %388 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %8, !dbg !40
  %389 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %388, i1 %171) #3, !dbg !40
  %390 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 4, i32 31), !dbg !40
  %391 = bitcast i32 %390 to float, !dbg !40
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 4, i32 31), !dbg !40
  %393 = fcmp ogt float %387, %391, !dbg !44
  %394 = fcmp oeq float %387, %391, !dbg !41
  %395 = fcmp uno float %387, 0.000000e+00, !dbg !45
  %396 = fcmp uno float %391, 0.000000e+00, !dbg !46
  %397 = xor i1 %396, true, !dbg !47
  %398 = and i1 %395, %397, !dbg !48
  %399 = or i1 %393, %398, !dbg !49
  %400 = and i1 %395, %396, !dbg !50
  %401 = or i1 %394, %400, !dbg !51
  %402 = icmp slt i32 %389, %392, !dbg !52
  %403 = and i1 %402, %401, !dbg !53
  %404 = or i1 %399, %403, !dbg !42
  %405 = select i1 %404, float %387, float %391, !dbg !32
  %406 = select i1 %404, i32 %389, i32 %392, !dbg !43
  %407 = bitcast float %405 to i32, !dbg !40
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !40
  %409 = bitcast i32 %408 to float, !dbg !40
  %410 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 2, i32 31), !dbg !40
  %411 = fcmp ogt float %405, %409, !dbg !44
  %412 = fcmp oeq float %405, %409, !dbg !41
  %413 = fcmp uno float %405, 0.000000e+00, !dbg !45
  %414 = fcmp uno float %409, 0.000000e+00, !dbg !46
  %415 = xor i1 %414, true, !dbg !47
  %416 = and i1 %413, %415, !dbg !48
  %417 = or i1 %411, %416, !dbg !49
  %418 = and i1 %414, %413, !dbg !50
  %419 = or i1 %412, %418, !dbg !51
  %420 = icmp slt i32 %406, %410, !dbg !52
  %421 = and i1 %420, %419, !dbg !53
  %422 = or i1 %417, %421, !dbg !42
  %423 = select i1 %422, float %405, float %409, !dbg !32
  %424 = select i1 %422, i32 %406, i32 %410, !dbg !43
  %425 = bitcast float %423 to i32, !dbg !40
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 1, i32 31), !dbg !40
  %427 = bitcast i32 %426 to float, !dbg !40
  %428 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !40
  %429 = fcmp ogt float %423, %427, !dbg !44
  %430 = fcmp oeq float %423, %427, !dbg !41
  %431 = fcmp uno float %423, 0.000000e+00, !dbg !45
  %432 = fcmp uno float %427, 0.000000e+00, !dbg !46
  %433 = xor i1 %432, true, !dbg !47
  %434 = and i1 %431, %433, !dbg !48
  %435 = or i1 %429, %434, !dbg !49
  %436 = and i1 %432, %431, !dbg !50
  %437 = or i1 %430, %436, !dbg !51
  %438 = icmp slt i32 %424, %428, !dbg !52
  %439 = and i1 %438, %437, !dbg !53
  %440 = or i1 %435, %439, !dbg !42
  %441 = select i1 %440, i32 %424, i32 %428, !dbg !43
  %442 = select i1 %440, i32 %425, i32 %426, !dbg !32
  %443 = insertelement <1 x i32> poison, i32 %442, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %443, i1 %196) #3, !dbg !40
  %444 = insertelement <1 x i32> poison, i32 %441, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %444, i1 %196) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %445 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %151, !dbg !40
  %446 = load i32, ptr addrspace(3) %445, align 16, !dbg !40
  %447 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %156, !dbg !40
  %448 = load i32, ptr addrspace(3) %447, align 16, !dbg !40
  %449 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %161, !dbg !40
  %450 = load i32, ptr addrspace(3) %449, align 16, !dbg !40
  %451 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %166, !dbg !40
  %452 = load i32, ptr addrspace(3) %451, align 16, !dbg !40
  %453 = extractelement <2 x i32> %24, i64 1, !dbg !54
  %454 = shl nsw i32 %453, 6, !dbg !54
  %455 = extractelement <2 x i32> %24, i64 0, !dbg !55
  %456 = add nsw i32 %455, %454, !dbg !55
  %457 = shl nsw i32 %25, 13, !dbg !56
  %458 = add i32 %456, %457, !dbg !57
  %459 = sext i32 %458 to i64, !dbg !58
  %460 = getelementptr float, ptr addrspace(1) %1, i64 %459, !dbg !58
  %461 = icmp eq i32 %150, 0, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %460, i1 %461) #3, !dbg !59
  %462 = getelementptr i64, ptr addrspace(1) %2, i64 %459, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %463 = insertelement <1 x i32> poison, i32 %446, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %463, i1 true) #3, !dbg !61
  %464 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %70, !dbg !61
  %465 = insertelement <1 x i32> poison, i32 %448, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #3, !dbg !61
  %466 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %71, !dbg !61
  %467 = insertelement <1 x i32> poison, i32 %450, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #3, !dbg !61
  %468 = getelementptr inbounds i32, ptr addrspace(3) @global_smem, i32 %72, !dbg !61
  %469 = insertelement <1 x i32> poison, i32 %452, i64 0, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %468, <1 x i32> %469, i1 true) #3, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %470 = load i32, ptr addrspace(3) %208, align 4, !dbg !61
  %471 = sext i32 %470 to i64, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %471, ptr addrspace(1) %462, i1 %461) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwzexd3kobkxrmfh3w6exwobhjemnzwa454g6ma3fsl2dvwpyd3v.py", directory: "inductor_cache/wz")
!4 = !{ptr @triton_per_fused_leaky_relu_max_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_leaky_relu_max_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_leaky_relu_max_3", linkageName: "triton_per_fused_leaky_relu_max_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 28, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 44, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 54, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 32, scope: !7)
!28 = !DILocation(line: 131, column: 29, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 41, column: 37, scope: !7)
!32 = !DILocation(line: 163, column: 35, scope: !33, inlinedAt: !34)
!33 = distinct !DILexicalBlockFile(scope: !29, file: !30, discriminator: 0)
!34 = !DILocation(line: 43, column: 68, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !31)
!36 = !DILocation(line: 120, column: 21, scope: !33, inlinedAt: !31)
!37 = !DILocation(line: 120, column: 16, scope: !33, inlinedAt: !31)
!38 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !31)
!39 = !DILocation(line: 41, column: 40, scope: !7)
!40 = !DILocation(line: 173, column: 42, scope: !29, inlinedAt: !34)
!41 = !DILocation(line: 153, column: 23, scope: !33, inlinedAt: !34)
!42 = !DILocation(line: 162, column: 12, scope: !33, inlinedAt: !34)
!43 = !DILocation(line: 163, column: 69, scope: !33, inlinedAt: !34)
!44 = !DILocation(line: 152, column: 21, scope: !33, inlinedAt: !34)
!45 = !DILocation(line: 155, column: 29, scope: !33, inlinedAt: !34)
!46 = !DILocation(line: 156, column: 29, scope: !33, inlinedAt: !34)
!47 = !DILocation(line: 157, column: 32, scope: !33, inlinedAt: !34)
!48 = !DILocation(line: 157, column: 28, scope: !33, inlinedAt: !34)
!49 = !DILocation(line: 157, column: 16, scope: !33, inlinedAt: !34)
!50 = !DILocation(line: 159, column: 29, scope: !33, inlinedAt: !34)
!51 = !DILocation(line: 159, column: 17, scope: !33, inlinedAt: !34)
!52 = !DILocation(line: 162, column: 31, scope: !33, inlinedAt: !34)
!53 = !DILocation(line: 162, column: 21, scope: !33, inlinedAt: !34)
!54 = !DILocation(line: 45, column: 33, scope: !7)
!55 = !DILocation(line: 45, column: 30, scope: !7)
!56 = !DILocation(line: 45, column: 43, scope: !7)
!57 = !DILocation(line: 45, column: 38, scope: !7)
!58 = !DILocation(line: 45, column: 25, scope: !7)
!59 = !DILocation(line: 45, column: 54, scope: !7)
!60 = !DILocation(line: 46, column: 25, scope: !7)
!61 = !DILocation(line: 46, column: 54, scope: !7)
!62 = !DILocation(line: 46, column: 4, scope: !7)
