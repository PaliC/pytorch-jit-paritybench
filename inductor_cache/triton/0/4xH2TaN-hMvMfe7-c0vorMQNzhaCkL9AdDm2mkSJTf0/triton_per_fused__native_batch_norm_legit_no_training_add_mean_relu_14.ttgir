#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0)
#loc1 = loc(unknown)
#loc49 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":67:26)
#loc64 = loc(callsite(#loc1 at #loc49))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg11: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":19:0)) attributes {noinline = false} {
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c2048_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c512_i32 : i32 loc(#loc5)
    %5 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %11 = tt.load %9, %10, %cst : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc11)
    %15 = tt.load %13, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc12)
    %17 = tt.splat %16 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = tt.load %17, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %19 = tt.addptr %arg5, %4 : !tt.ptr<f32>, i32 loc(#loc14)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = tt.load %20, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %22 = tt.addptr %arg6, %4 : !tt.ptr<f32>, i32 loc(#loc16)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.load %23, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %25 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc18)
    %26 = tt.addptr %25, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc18)
    %27 = tt.load %26, %10, %cst : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc19)
    %28 = tt.addptr %arg8, %4 : !tt.ptr<f32>, i32 loc(#loc20)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %30 = tt.load %29, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %31 = tt.addptr %arg9, %4 : !tt.ptr<f32>, i32 loc(#loc22)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %33 = tt.load %32, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %34 = tt.addptr %arg10, %4 : !tt.ptr<f32>, i32 loc(#loc24)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %36 = tt.load %35, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %37 = tt.addptr %arg11, %4 : !tt.ptr<f32>, i32 loc(#loc26)
    %38 = tt.splat %37 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %39 = tt.load %38, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %40 = tt.broadcast %15 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc28)
    %41 = arith.subf %11, %40 : tensor<1x64xf32, #blocked> loc(#loc28)
    %42 = arith.addf %18, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc29)
    %43 = tt.extern_elementwise %42 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc30)
    %44 = arith.divf %cst_1, %43 : tensor<1x1xf32, #blocked> loc(#loc31)
    %45 = tt.broadcast %44 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc32)
    %46 = arith.mulf %41, %45 : tensor<1x64xf32, #blocked> loc(#loc32)
    %47 = tt.broadcast %21 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc33)
    %48 = arith.mulf %46, %47 : tensor<1x64xf32, #blocked> loc(#loc33)
    %49 = tt.broadcast %24 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc34)
    %50 = arith.addf %48, %49 : tensor<1x64xf32, #blocked> loc(#loc34)
    %51 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc35)
    %52 = arith.subf %27, %51 : tensor<1x64xf32, #blocked> loc(#loc35)
    %53 = arith.addf %33, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc36)
    %54 = tt.extern_elementwise %53 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc37)
    %55 = arith.divf %cst_1, %54 : tensor<1x1xf32, #blocked> loc(#loc38)
    %56 = tt.broadcast %55 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc39)
    %57 = arith.mulf %52, %56 : tensor<1x64xf32, #blocked> loc(#loc39)
    %58 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc40)
    %59 = arith.mulf %57, %58 : tensor<1x64xf32, #blocked> loc(#loc40)
    %60 = tt.broadcast %39 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc41)
    %61 = arith.addf %59, %60 : tensor<1x64xf32, #blocked> loc(#loc41)
    %62 = arith.cmpf ogt, %cst, %61 : tensor<1x64xf32, #blocked> loc(#loc59)
    %63 = arith.select %62, %cst, %61 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc60)
    %64 = arith.addf %50, %63 : tensor<1x64xf32, #blocked> loc(#loc45)
    %65 = arith.cmpf ogt, %cst, %64 : tensor<1x64xf32, #blocked> loc(#loc61)
    %66 = arith.select %65, %cst, %64 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc62)
    %67 = arith.select %10, %66, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc47)
    %68 = "tt.reduce"(%67) <{axis = 1 : i32}> ({
    ^bb0(%arg14: f32 loc(callsite(#loc1 at #loc49)), %arg15: f32 loc(callsite(#loc1 at #loc49))):
      %77 = arith.addf %arg14, %arg15 : f32 loc(#loc66)
      tt.reduce.return %77 : f32 loc(#loc63)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc63)
    %69 = triton_gpu.convert_layout %68 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc51)
    %70 = tt.expand_dims %69 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc52)
    %71 = arith.divf %70, %cst_2 : tensor<1x1xf32, #blocked1> loc(#loc51)
    %72 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc53)
    %73 = tt.addptr %72, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc53)
    tt.store %73, %66, %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc54)
    gpu.barrier loc(#loc55)
    %74 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc56)
    %75 = tt.splat %74 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc57)
    %76 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc57)
    tt.store %75, %71, %76 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc57)
    tt.return loc(#loc58)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":23:28)
#loc3 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":25:21)
#loc4 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":26:34)
#loc5 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":31:19)
#loc6 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:38)
#loc7 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:35)
#loc8 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:30)
#loc9 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":32:43)
#loc10 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":33:30)
#loc11 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":33:35)
#loc12 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":34:30)
#loc13 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":34:35)
#loc14 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":35:31)
#loc15 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":35:36)
#loc16 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":36:31)
#loc17 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":36:36)
#loc18 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":37:31)
#loc19 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":37:44)
#loc20 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":38:31)
#loc21 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":38:36)
#loc22 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":39:31)
#loc23 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":39:36)
#loc24 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":40:31)
#loc25 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":40:36)
#loc26 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":41:31)
#loc27 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":41:36)
#loc28 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":42:18)
#loc29 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":44:18)
#loc30 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":45:26)
#loc31 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":47:18)
#loc32 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":50:19)
#loc33 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":51:20)
#loc34 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":52:20)
#loc35 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":53:20)
#loc36 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":54:20)
#loc37 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":55:27)
#loc38 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":56:19)
#loc39 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":58:20)
#loc40 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":59:20)
#loc41 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":60:20)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc43 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":62:42)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc45 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":63:20)
#loc46 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":64:42)
#loc47 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":66:35)
#loc48 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc51 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":69:20)
#loc52 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":67:29)
#loc53 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":70:28)
#loc54 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":70:48)
#loc55 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":71:4)
#loc56 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:28)
#loc57 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:40)
#loc58 = loc("inductor_cache/6h/c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py":72:4)
#loc59 = loc(callsite(#loc42 at #loc43))
#loc60 = loc(callsite(#loc44 at #loc43))
#loc61 = loc(callsite(#loc42 at #loc46))
#loc62 = loc(callsite(#loc44 at #loc46))
#loc63 = loc(callsite(#loc48 at #loc49))
#loc65 = loc(callsite(#loc50 at #loc48))
#loc66 = loc(callsite(#loc65 at #loc49))
