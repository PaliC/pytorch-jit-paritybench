; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %16 = icmp slt i32 %15, 2048, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = srem i32 %15, 512, !dbg !13
  %20 = shl i32 %15, 6, !dbg !14
  %21 = or disjoint i32 %20, %18, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16) #5, !dbg !17
  %25 = sext i32 %19 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %16) #5, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %16) #5, !dbg !21
  %30 = bitcast i32 %29 to float, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %16) #5, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %16) #5, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %16, i32 0, i1 %16) #5, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %16) #5, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !32
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %16) #5, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !34
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %16) #5, !dbg !35
  %46 = fadd float %30, 0x3EE4F8B580000000, !dbg !36
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %47, 0, !dbg !37
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %48, 0, !dbg !37
  br i1 %.not.i, label %54, label %49, !dbg !37

49:                                               ; preds = %14
  br i1 %.not1.i, label %52, label %50, !dbg !37

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

54:                                               ; preds = %14
  br i1 %.not1.i, label %57, label %55, !dbg !37

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !37
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !38
  %60 = fadd float %41, 0x3EE4F8B580000000, !dbg !39
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i1 = icmp eq i32 %61, 0, !dbg !40
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !40
  %.not1.i4 = icmp eq i32 %62, 0, !dbg !40
  br i1 %.not.i1, label %68, label %63, !dbg !40

63:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %66, label %64, !dbg !40

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #5, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #5, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !40

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #5, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #5, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %64, %66, %69, %71
  %.0.i3 = phi float [ %65, %64 ], [ %67, %66 ], [ %70, %69 ], [ %72, %71 ], !dbg !40
  %73 = bitcast i32 %36 to float, !dbg !27
  %74 = bitcast i32 %38 to float, !dbg !29
  %75 = fsub float %73, %74, !dbg !41
  %76 = bitcast i32 %24 to float, !dbg !17
  %77 = bitcast i32 %27 to float, !dbg !19
  %78 = fsub float %76, %77, !dbg !42
  %79 = fmul float %78, %59, !dbg !43
  %80 = bitcast i32 %32 to float, !dbg !23
  %81 = fmul float %79, %80, !dbg !44
  %82 = bitcast i32 %34 to float, !dbg !25
  %83 = fadd float %81, %82, !dbg !45
  %84 = bitcast i32 %45 to float, !dbg !35
  %85 = bitcast i32 %43 to float, !dbg !33
  %86 = lshr i32 %17, 5, !dbg !12
  %87 = and i32 %17, 31, !dbg !12
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !46
  %89 = fmul float %75, %88, !dbg !47
  %90 = fmul float %89, %85, !dbg !48
  %91 = fadd float %90, %84, !dbg !49
  %92 = fcmp olt float %91, 0.000000e+00, !dbg !50
  %93 = select i1 %92, float 0.000000e+00, float %91, !dbg !54
  %94 = fadd float %83, %93, !dbg !55
  %95 = fcmp olt float %94, 0.000000e+00, !dbg !56
  %96 = select i1 %95, float 0.000000e+00, float %94, !dbg !58
  %97 = select i1 %16, float %96, float 0.000000e+00, !dbg !59
  %98 = bitcast float %97 to i32, !dbg !60
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 16, i32 31), !dbg !60
  %100 = bitcast i32 %99 to float, !dbg !60
  %101 = fadd float %97, %100, !dbg !64
  %102 = bitcast float %101 to i32, !dbg !60
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !60
  %104 = bitcast i32 %103 to float, !dbg !60
  %105 = fadd float %101, %104, !dbg !64
  %106 = bitcast float %105 to i32, !dbg !60
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !60
  %108 = bitcast i32 %107 to float, !dbg !60
  %109 = fadd float %105, %108, !dbg !64
  %110 = bitcast float %109 to i32, !dbg !60
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !60
  %112 = bitcast i32 %111 to float, !dbg !60
  %113 = fadd float %109, %112, !dbg !64
  %114 = bitcast float %113 to i32, !dbg !60
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !60
  %116 = bitcast i32 %115 to float, !dbg !60
  %117 = fadd float %113, %116, !dbg !64
  %118 = icmp eq i32 %87, 0, !dbg !60
  %119 = and i32 %86, 1, !dbg !60
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !60
  %121 = bitcast float %117 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 %118) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %122 = icmp slt i32 %17, 2, !dbg !60
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %17, !dbg !60
  %124 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %123, i1 %122) #5, !dbg !60
  %125 = bitcast i32 %124 to float, !dbg !60
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 1, i32 31), !dbg !60
  %127 = bitcast i32 %126 to float, !dbg !60
  %128 = fadd float %125, %127, !dbg !64
  %129 = and i32 %17, 1, !dbg !60
  %130 = icmp eq i32 %129, 0, !dbg !60
  %131 = and i1 %122, %130, !dbg !60
  %132 = bitcast float %128 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %123, <1 x i32> %132, i1 %131) #5, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %133 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !60
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 6.400000e+01) #5, !dbg !66
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !67
  %136 = bitcast float %96 to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %16) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !69
  %137 = sext i32 %15 to i64, !dbg !70
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !70
  %139 = icmp eq i32 %18, 0, !dbg !71
  %140 = bitcast float %134 to i32, !dbg !71
  %141 = and i1 %139, %16, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %140, ptr addrspace(1) %138, i1 %141) #5, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6h5jfxdwg6fmketcllgwew6rwamordbnqy4iwwgmpal6uy2tmet.py", directory: "inductor_cache/6h")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 31, scope: !7)
!35 = !DILocation(line: 41, column: 36, scope: !7)
!36 = !DILocation(line: 44, column: 18, scope: !7)
!37 = !DILocation(line: 45, column: 26, scope: !7)
!38 = !DILocation(line: 47, column: 18, scope: !7)
!39 = !DILocation(line: 54, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 27, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 19, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 62, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !57)
!57 = !DILocation(line: 64, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !57)
!59 = !DILocation(line: 66, column: 35, scope: !7)
!60 = !DILocation(line: 267, column: 36, scope: !61, inlinedAt: !63)
!61 = distinct !DILexicalBlockFile(scope: !7, file: !62, discriminator: 0)
!62 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!63 = !DILocation(line: 67, column: 26, scope: !7)
!64 = !DILocation(line: 256, column: 15, scope: !65, inlinedAt: !63)
!65 = distinct !DILexicalBlockFile(scope: !61, file: !62, discriminator: 0)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 28, scope: !7)
!68 = !DILocation(line: 70, column: 48, scope: !7)
!69 = !DILocation(line: 71, column: 4, scope: !7)
!70 = !DILocation(line: 72, column: 28, scope: !7)
!71 = !DILocation(line: 72, column: 40, scope: !7)
!72 = !DILocation(line: 72, column: 4, scope: !7)
