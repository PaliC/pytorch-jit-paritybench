; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %13 = sdiv i32 %.frozen, 64, !dbg !15
  %14 = mul i32 %13, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = shl i32 %11, 2, !dbg !17
  %16 = or disjoint i32 %15, 4, !dbg !17
  %17 = sext i32 %15 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = sext i32 %16 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 -8388608, i1 %12) #1, !dbg !19
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %12, i32 -8388608, i1 %12) #1, !dbg !19
  %23 = or disjoint i32 %15, 1, !dbg !20
  %24 = or disjoint i32 %15, 5, !dbg !20
  %25 = sext i32 %23 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %12, i32 -8388608, i1 %12) #1, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %12, i32 -8388608, i1 %12) #1, !dbg !22
  %31 = or disjoint i32 %15, 2, !dbg !23
  %32 = or disjoint i32 %15, 6, !dbg !23
  %33 = sext i32 %31 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = sext i32 %32 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %12, i32 -8388608, i1 %12) #1, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %12, i32 -8388608, i1 %12) #1, !dbg !25
  %39 = or disjoint i32 %15, 3, !dbg !26
  %40 = or disjoint i32 %15, 7, !dbg !26
  %41 = sext i32 %39 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !27
  %43 = sext i32 %40 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %12, i32 -8388608, i1 %12) #1, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %12, i32 -8388608, i1 %12) #1, !dbg !28
  %47 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !19
  %48 = insertelement <2 x i32> %47, i32 %22, i64 1, !dbg !19
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !19
  %50 = fcmp one <2 x float> %49, splat (float 0xFFF0000000000000), !dbg !29
  %51 = bitcast i32 %21 to float, !dbg !33
  %52 = fcmp uno float %51, 0.000000e+00, !dbg !33
  %53 = bitcast i32 %22 to float, !dbg !33
  %54 = fcmp uno float %53, 0.000000e+00, !dbg !33
  %55 = insertelement <2 x i1> %50, i1 %52, i64 0, !dbg !34
  %56 = insertelement <2 x i1> %50, i1 %54, i64 1, !dbg !34
  %57 = or <2 x i1> %55, %56, !dbg !34
  %58 = select <2 x i1> %57, <2 x float> %49, <2 x float> splat (float 0xFFF0000000000000), !dbg !35
  %59 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %60 = insertelement <2 x i32> %59, i32 %30, i64 1, !dbg !22
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !22
  %62 = fcmp olt <2 x float> %58, %61, !dbg !36
  %63 = fcmp uno <2 x float> %61, zeroinitializer, !dbg !38
  %64 = or <2 x i1> %63, %62, !dbg !39
  %65 = select <2 x i1> %64, <2 x float> %61, <2 x float> %58, !dbg !40
  %66 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !25
  %67 = insertelement <2 x i32> %66, i32 %38, i64 1, !dbg !25
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !25
  %69 = fcmp olt <2 x float> %65, %68, !dbg !41
  %70 = fcmp uno <2 x float> %68, zeroinitializer, !dbg !43
  %71 = or <2 x i1> %70, %69, !dbg !44
  %72 = select <2 x i1> %71, <2 x float> %68, <2 x float> %65, !dbg !45
  %73 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !28
  %74 = insertelement <2 x i32> %73, i32 %46, i64 1, !dbg !28
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !28
  %76 = fcmp olt <2 x float> %72, %75, !dbg !46
  %77 = bitcast i32 %45 to float, !dbg !48
  %78 = fcmp uno float %77, 0.000000e+00, !dbg !48
  %79 = bitcast i32 %46 to float, !dbg !48
  %80 = fcmp uno float %79, 0.000000e+00, !dbg !48
  %81 = extractelement <2 x i1> %76, i64 0, !dbg !49
  %82 = or i1 %78, %81, !dbg !49
  %83 = extractelement <2 x i1> %76, i64 1, !dbg !49
  %84 = or i1 %80, %83, !dbg !49
  %85 = select <2 x i1> %50, <2 x i8> splat (i8 4), <2 x i8> zeroinitializer, !dbg !50
  %86 = select <2 x i1> %62, <2 x i8> splat (i8 5), <2 x i8> %85, !dbg !51
  %87 = select <2 x i1> %69, <2 x i8> splat (i8 7), <2 x i8> %86, !dbg !52
  %88 = select <2 x i1> %76, <2 x i8> splat (i8 8), <2 x i8> %87, !dbg !53
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %12, i32 0, i1 %12) #1, !dbg !54
  %90 = bitcast i32 %89 to float, !dbg !54
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %12, i32 0, i1 %12) #1, !dbg !54
  %92 = bitcast i32 %91 to float, !dbg !54
  %93 = fadd float %90, 0.000000e+00, !dbg !55
  %94 = fadd float %92, 0.000000e+00, !dbg !55
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %12, i32 0, i1 %12) #1, !dbg !56
  %96 = bitcast i32 %95 to float, !dbg !56
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %12, i32 0, i1 %12) #1, !dbg !56
  %98 = bitcast i32 %97 to float, !dbg !56
  %99 = fadd float %93, %96, !dbg !57
  %100 = fadd float %94, %98, !dbg !57
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %12, i32 0, i1 %12) #1, !dbg !58
  %102 = bitcast i32 %101 to float, !dbg !58
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %12, i32 0, i1 %12) #1, !dbg !58
  %104 = bitcast i32 %103 to float, !dbg !58
  %105 = fadd float %99, %102, !dbg !59
  %106 = fadd float %100, %104, !dbg !59
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %12, i32 0, i1 %12) #1, !dbg !60
  %108 = bitcast i32 %107 to float, !dbg !60
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %12, i32 0, i1 %12) #1, !dbg !60
  %110 = bitcast i32 %109 to float, !dbg !60
  %111 = fadd float %105, %108, !dbg !61
  %112 = fadd float %106, %110, !dbg !61
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 9.000000e+00) #1, !dbg !62
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float 9.000000e+00) #1, !dbg !62
  %115 = shl i32 %13, 7, !dbg !63
  %116 = add i32 %115, %.decomposed, !dbg !64
  %117 = sext i32 %116 to i64, !dbg !65
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !65
  %bc = bitcast <2 x float> %72 to <2 x i32>, !dbg !66
  %119 = extractelement <2 x i32> %bc, i64 0, !dbg !66
  %120 = select i1 %82, i32 %45, i32 %119, !dbg !67
  %bc1 = bitcast <2 x float> %72 to <2 x i32>, !dbg !66
  %121 = extractelement <2 x i32> %bc1, i64 1, !dbg !66
  %122 = select i1 %84, i32 %46, i32 %121, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %122, ptr addrspace(1) %118, i1 %12) #1, !dbg !66
  %123 = sext i32 %11 to i64, !dbg !68
  %124 = getelementptr i8, ptr addrspace(1) %2, i64 %123, !dbg !68
  %125 = bitcast <2 x i8> %88 to i16, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %125, ptr addrspace(1) %124, i1 %12) #1, !dbg !69
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %117, !dbg !70
  %127 = bitcast float %113 to i32, !dbg !71
  %128 = bitcast float %114 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %12) #1, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctghik24xu35wacv5xrnjzss6pm3f3ckzr5hev6merq6v642ifyu.py", directory: "inductor_cache/tg")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 52, column: 33, scope: !7)
!18 = !DILocation(line: 52, column: 31, scope: !7)
!19 = !DILocation(line: 52, column: 38, scope: !7)
!20 = !DILocation(line: 55, column: 35, scope: !7)
!21 = !DILocation(line: 55, column: 31, scope: !7)
!22 = !DILocation(line: 55, column: 42, scope: !7)
!23 = !DILocation(line: 61, column: 35, scope: !7)
!24 = !DILocation(line: 61, column: 31, scope: !7)
!25 = !DILocation(line: 61, column: 42, scope: !7)
!26 = !DILocation(line: 64, column: 35, scope: !7)
!27 = !DILocation(line: 64, column: 31, scope: !7)
!28 = !DILocation(line: 64, column: 42, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 53, column: 42, scope: !7)
!33 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !37)
!37 = !DILocation(line: 56, column: 42, scope: !7)
!38 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !37)
!39 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !37)
!40 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !42)
!42 = !DILocation(line: 62, column: 42, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !42)
!46 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !47)
!47 = !DILocation(line: 65, column: 42, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !47)
!50 = !DILocation(line: 78, column: 35, scope: !7)
!51 = !DILocation(line: 81, column: 35, scope: !7)
!52 = !DILocation(line: 87, column: 35, scope: !7)
!53 = !DILocation(line: 90, column: 35, scope: !7)
!54 = !DILocation(line: 98, column: 38, scope: !7)
!55 = !DILocation(line: 99, column: 20, scope: !7)
!56 = !DILocation(line: 100, column: 42, scope: !7)
!57 = !DILocation(line: 101, column: 20, scope: !7)
!58 = !DILocation(line: 104, column: 42, scope: !7)
!59 = !DILocation(line: 105, column: 20, scope: !7)
!60 = !DILocation(line: 106, column: 42, scope: !7)
!61 = !DILocation(line: 107, column: 20, scope: !7)
!62 = !DILocation(line: 109, column: 20, scope: !7)
!63 = !DILocation(line: 110, column: 34, scope: !7)
!64 = !DILocation(line: 110, column: 30, scope: !7)
!65 = !DILocation(line: 110, column: 25, scope: !7)
!66 = !DILocation(line: 110, column: 46, scope: !7)
!67 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !47)
!68 = !DILocation(line: 111, column: 25, scope: !7)
!69 = !DILocation(line: 111, column: 37, scope: !7)
!70 = !DILocation(line: 112, column: 25, scope: !7)
!71 = !DILocation(line: 112, column: 46, scope: !7)
!72 = !DILocation(line: 112, column: 4, scope: !7)
