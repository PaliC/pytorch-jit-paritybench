; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 256, !dbg !14
  %14 = sdiv i32 %12, 256, !dbg !14
  %15 = srem i32 %13, 256, !dbg !15
  %16 = srem i32 %14, 256, !dbg !15
  %17 = mul i32 %13, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %.frozen2 = freeze i32 %11, !dbg !17
  %18 = sdiv i32 %.frozen2, 65536, !dbg !17
  %.frozen3 = freeze i32 %12, !dbg !17
  %19 = sdiv i32 %.frozen3, 65536, !dbg !17
  %20 = icmp slt i32 %15, 128, !dbg !18
  %21 = icmp slt i32 %16, 128, !dbg !18
  %22 = mul i32 %18, 65536, !dbg !19
  %srem.decomposed = sub i32 %.frozen2, %22, !dbg !19
  %23 = mul i32 %19, 65536, !dbg !19
  %srem1.decomposed = sub i32 %.frozen3, %23, !dbg !19
  %24 = shl nsw i32 %18, 15, !dbg !20
  %25 = shl nsw i32 %19, 15, !dbg !20
  %26 = add nsw i32 %24, %srem.decomposed, !dbg !21
  %27 = add nsw i32 %25, %srem1.decomposed, !dbg !21
  %28 = sext i32 %26 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #1, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = sext i32 %15 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !24
  %52 = sext i32 %16 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %55 = bitcast i32 %54 to float, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %57 = bitcast i32 %56 to float, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %20, i32 0, i1 %20) #1, !dbg !25
  %61 = bitcast i32 %60 to float, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %63 = bitcast i32 %62 to float, !dbg !25
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %67 = bitcast i32 %66 to float, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 0, i1 %21) #1, !dbg !25
  %69 = bitcast i32 %68 to float, !dbg !25
  %70 = fadd float %37, %55, !dbg !26
  %71 = fadd float %38, %57, !dbg !26
  %72 = fadd float %39, %59, !dbg !26
  %73 = fadd float %40, %61, !dbg !26
  %74 = fadd float %46, %63, !dbg !26
  %75 = fadd float %47, %65, !dbg !26
  %76 = fadd float %48, %67, !dbg !26
  %77 = fadd float %49, %69, !dbg !26
  %78 = icmp sgt i32 %15, 127, !dbg !27
  %79 = icmp sgt i32 %16, 127, !dbg !27
  %80 = shl nsw i32 %15, 8, !dbg !28
  %81 = shl nsw i32 %16, 8, !dbg !28
  %82 = add nsw i32 %.decomposed, -32768, !dbg !28
  %83 = add nsw i32 %82, %24, !dbg !29
  %84 = add nsw i32 %83, %80, !dbg !30
  %85 = add nsw i32 %82, %25, !dbg !29
  %86 = add nsw i32 %85, %81, !dbg !30
  %87 = sext i32 %84 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !31
  %89 = sext i32 %86 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #1, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !32
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !32
  %101 = sext i32 %11 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !33
  %103 = sext i32 %12 to i64, !dbg !33
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !33
  %105 = bitcast float %70 to i32, !dbg !34
  %106 = select i1 %20, i32 %105, i32 %92, !dbg !35
  %107 = bitcast float %71 to i32, !dbg !34
  %108 = select i1 %20, i32 %107, i32 %93, !dbg !35
  %109 = bitcast float %72 to i32, !dbg !34
  %110 = select i1 %20, i32 %109, i32 %94, !dbg !35
  %111 = bitcast float %73 to i32, !dbg !34
  %112 = select i1 %20, i32 %111, i32 %95, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %106, i32 %108, i32 %110, i32 %112, ptr addrspace(1) %102, i1 true) #1, !dbg !34
  %113 = bitcast float %74 to i32, !dbg !34
  %114 = select i1 %21, i32 %113, i32 %97, !dbg !35
  %115 = bitcast float %75 to i32, !dbg !34
  %116 = select i1 %21, i32 %115, i32 %98, !dbg !35
  %117 = bitcast float %76 to i32, !dbg !34
  %118 = select i1 %21, i32 %117, i32 %99, !dbg !35
  %119 = bitcast float %77 to i32, !dbg !34
  %120 = select i1 %21, i32 %119, i32 %100, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %114, i32 %116, i32 %118, i32 %120, ptr addrspace(1) %104, i1 true) #1, !dbg !34
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjyzevrhnivhua6mbj3ssaxecawk2gxdkmpjvu5wl3c4gfpaycn2.py", directory: "inductor_cache/jy")
!4 = !{ptr @triton_poi_fused_cat_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_13", linkageName: "triton_poi_fused_cat_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 52, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 57, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 41, scope: !7)
!29 = !DILocation(line: 41, column: 36, scope: !7)
!30 = !DILocation(line: 41, column: 56, scope: !7)
!31 = !DILocation(line: 41, column: 31, scope: !7)
!32 = !DILocation(line: 41, column: 67, scope: !7)
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 43, column: 37, scope: !7)
!35 = !DILocation(line: 0, scope: !7)
!36 = !DILocation(line: 43, column: 4, scope: !7)
