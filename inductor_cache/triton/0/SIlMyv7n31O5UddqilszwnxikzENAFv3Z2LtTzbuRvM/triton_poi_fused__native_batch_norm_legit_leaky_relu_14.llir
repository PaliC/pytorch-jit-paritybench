; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %10, %12, !dbg !13
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = icmp slt i32 %19, 1024, !dbg !17
  %21 = shl i32 %14, 8, !dbg !18
  %22 = shl i32 %15, 8, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %23 = sdiv i32 %.frozen, 256, !dbg !19
  %24 = shl i32 %23, 16, !dbg !20
  %25 = mul i32 %23, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %25, !dbg !21
  %26 = add i32 %24, %.decomposed, !dbg !22
  %27 = add i32 %26, %21, !dbg !23
  %28 = add i32 %26, %22, !dbg !23
  %29 = sext i32 %27 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !24
  %31 = sext i32 %28 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = and i1 %20, %16, !dbg !25
  %34 = and i1 %20, %17, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !26
  %37 = sext i32 %19 to i64, !dbg !27
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !27
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #4, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !29
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #4, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !30
  %46 = bitcast i32 %42 to float, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !31
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %20) #4, !dbg !32
  %52 = sext i32 %.decomposed to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %20) #4, !dbg !34
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 2.560000e+02) #4, !dbg !35
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 2.560000e+02) #4, !dbg !35
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 2.560000e+02) #4, !dbg !35
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.560000e+02) #4, !dbg !35
  %59 = fadd float %55, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %56, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %57, 0x3EE4F8B580000000, !dbg !36
  %62 = fadd float %58, 0x3EE4F8B580000000, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %63, 0, !dbg !37
  br i1 %.not.i, label %66, label %64, !dbg !37

64:                                               ; preds = %8
  %65 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

66:                                               ; preds = %8
  %67 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %64, %66
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], !dbg !37
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i15 = icmp eq i32 %68, 0, !dbg !37
  br i1 %.not.i15, label %71, label %69, !dbg !37

69:                                               ; preds = %__nv_rsqrtf.exit
  %70 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !37
  br label %__nv_rsqrtf.exit17, !dbg !37

71:                                               ; preds = %__nv_rsqrtf.exit
  %72 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !37
  br label %__nv_rsqrtf.exit17, !dbg !37

__nv_rsqrtf.exit17:                               ; preds = %69, %71
  %.0.i16 = phi float [ %70, %69 ], [ %72, %71 ], !dbg !37
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i18 = icmp eq i32 %73, 0, !dbg !37
  br i1 %.not.i18, label %76, label %74, !dbg !37

74:                                               ; preds = %__nv_rsqrtf.exit17
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !37
  br label %__nv_rsqrtf.exit20, !dbg !37

76:                                               ; preds = %__nv_rsqrtf.exit17
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !37
  br label %__nv_rsqrtf.exit20, !dbg !37

__nv_rsqrtf.exit20:                               ; preds = %74, %76
  %.0.i19 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !37
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i21 = icmp eq i32 %78, 0, !dbg !37
  br i1 %.not.i21, label %81, label %79, !dbg !37

79:                                               ; preds = %__nv_rsqrtf.exit20
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !37
  br label %__nv_rsqrtf.exit23, !dbg !37

81:                                               ; preds = %__nv_rsqrtf.exit20
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !37
  br label %__nv_rsqrtf.exit23, !dbg !37

__nv_rsqrtf.exit23:                               ; preds = %79, %81
  %.0.i22 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !37
  %83 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !28
  %85 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %96 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %97 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %98 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %99 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !32
  %103 = lshr i32 %11, 6, !dbg !38
  %.lobit = and i32 %103, 1, !dbg !38
  %104 = or disjoint i32 %.lobit, %19, !dbg !39
  %105 = or disjoint i32 %104, 2, !dbg !39
  %106 = icmp slt i32 %105, 1024, !dbg !17
  %107 = shl i32 %11, 2, !dbg !12
  %108 = and i32 %107, 252, !dbg !12
  %109 = or disjoint i32 %10, %108, !dbg !13
  %110 = icmp slt i32 %109, 256, !dbg !14
  %111 = and i1 %110, %106, !dbg !25
  %112 = icmp slt i32 %104, 1024, !dbg !17
  %113 = and i1 %110, %112, !dbg !25
  %114 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !28
  %115 = insertelement <4 x i32> %114, i32 %86, i64 1, !dbg !28
  %116 = insertelement <4 x i32> %115, i32 %88, i64 2, !dbg !28
  %117 = insertelement <4 x i32> %116, i32 %90, i64 3, !dbg !28
  %118 = bitcast <4 x i32> %117 to <4 x float>, !dbg !28
  %119 = shufflevector <4 x float> %118, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %120 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !26
  %121 = insertelement <8 x i32> %120, i32 %85, i64 1, !dbg !26
  %122 = insertelement <8 x i32> %121, i32 %87, i64 2, !dbg !26
  %123 = insertelement <8 x i32> %122, i32 %89, i64 3, !dbg !26
  %124 = insertelement <8 x i32> %123, i32 %91, i64 4, !dbg !26
  %125 = insertelement <8 x i32> %124, i32 %92, i64 5, !dbg !26
  %126 = insertelement <8 x i32> %125, i32 %93, i64 6, !dbg !26
  %127 = insertelement <8 x i32> %126, i32 %94, i64 7, !dbg !26
  %128 = bitcast <8 x i32> %127 to <8 x float>, !dbg !26
  %129 = fsub <8 x float> %128, %119, !dbg !40
  %130 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !34
  %131 = insertelement <4 x i32> %130, i32 %96, i64 1, !dbg !34
  %132 = insertelement <4 x i32> %131, i32 %97, i64 2, !dbg !34
  %133 = insertelement <4 x i32> %132, i32 %98, i64 3, !dbg !34
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !34
  %135 = shufflevector <4 x float> %134, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %136 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !32
  %137 = insertelement <4 x i32> %136, i32 %100, i64 1, !dbg !32
  %138 = insertelement <4 x i32> %137, i32 %101, i64 2, !dbg !32
  %139 = insertelement <4 x i32> %138, i32 %102, i64 3, !dbg !32
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !32
  %141 = shufflevector <4 x float> %140, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %142 = insertelement <8 x float> poison, float %.0.i22, i64 0, !dbg !41
  %143 = insertelement <8 x float> %142, float %.0.i19, i64 1, !dbg !41
  %144 = insertelement <8 x float> %143, float %.0.i16, i64 2, !dbg !41
  %145 = insertelement <8 x float> %144, float %.0.i, i64 3, !dbg !41
  %146 = shufflevector <8 x float> %145, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !41
  %147 = fmul <8 x float> %129, %146, !dbg !41
  %148 = fmul <8 x float> %147, %141, !dbg !42
  %149 = fadd <8 x float> %148, %135, !dbg !43
  %150 = fcmp ogt <8 x float> %149, zeroinitializer, !dbg !44
  %151 = extractelement <8 x float> %149, i64 7, !dbg !45
  %152 = fmul float %151, 0x3FC99999A0000000, !dbg !46
  %153 = extractelement <8 x float> %149, i64 6, !dbg !45
  %154 = fmul float %153, 0x3FC99999A0000000, !dbg !46
  %155 = extractelement <8 x float> %149, i64 5, !dbg !45
  %156 = fmul float %155, 0x3FC99999A0000000, !dbg !46
  %157 = extractelement <8 x float> %149, i64 4, !dbg !45
  %158 = fmul float %157, 0x3FC99999A0000000, !dbg !46
  %159 = extractelement <8 x float> %149, i64 3, !dbg !45
  %160 = fmul float %159, 0x3FC99999A0000000, !dbg !46
  %161 = extractelement <8 x float> %149, i64 2, !dbg !45
  %162 = fmul float %161, 0x3FC99999A0000000, !dbg !46
  %163 = extractelement <8 x float> %149, i64 1, !dbg !45
  %164 = fmul float %163, 0x3FC99999A0000000, !dbg !46
  %165 = extractelement <8 x float> %149, i64 0, !dbg !45
  %166 = fmul float %165, 0x3FC99999A0000000, !dbg !46
  %167 = extractelement <8 x i1> %150, i64 7, !dbg !45
  %168 = select i1 %167, float %151, float %152, !dbg !45
  %169 = extractelement <8 x i1> %150, i64 6, !dbg !45
  %170 = select i1 %169, float %153, float %154, !dbg !45
  %171 = extractelement <8 x i1> %150, i64 5, !dbg !45
  %172 = select i1 %171, float %155, float %156, !dbg !45
  %173 = extractelement <8 x i1> %150, i64 4, !dbg !45
  %174 = select i1 %173, float %157, float %158, !dbg !45
  %175 = extractelement <8 x i1> %150, i64 3, !dbg !45
  %176 = select i1 %175, float %159, float %160, !dbg !45
  %177 = extractelement <8 x i1> %150, i64 2, !dbg !45
  %178 = select i1 %177, float %161, float %162, !dbg !45
  %179 = extractelement <8 x i1> %150, i64 1, !dbg !45
  %180 = select i1 %179, float %163, float %164, !dbg !45
  %181 = extractelement <8 x i1> %150, i64 0, !dbg !45
  %182 = select i1 %181, float %165, float %166, !dbg !45
  %183 = shl i32 %104, 8, !dbg !47
  %184 = shl i32 %105, 8, !dbg !47
  %185 = add i32 %183, %109, !dbg !48
  %186 = add i32 %184, %109, !dbg !48
  %187 = sext i32 %185 to i64, !dbg !49
  %188 = getelementptr float, ptr addrspace(1) %5, i64 %187, !dbg !49
  %189 = sext i32 %186 to i64, !dbg !49
  %190 = getelementptr float, ptr addrspace(1) %5, i64 %189, !dbg !49
  %191 = and i32 %107, 508, !dbg !50
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !50
  %193 = bitcast float %168 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #4, !dbg !50
  %194 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 1040, !dbg !50
  %195 = bitcast float %170 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #4, !dbg !50
  %196 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 2080, !dbg !50
  %197 = bitcast float %172 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !50
  %198 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 3120, !dbg !50
  %199 = bitcast float %174 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !50
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !50
  %201 = bitcast float %176 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #4, !dbg !50
  %202 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 1552, !dbg !50
  %203 = bitcast float %178 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !50
  %204 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 2592, !dbg !50
  %205 = bitcast float %180 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !50
  %206 = getelementptr inbounds i8, ptr addrspace(3) %192, i32 3632, !dbg !50
  %207 = bitcast float %182 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %208 = lshr i32 %107, 6, !dbg !50
  %209 = and i32 %208, 4, !dbg !50
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !50
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %191, !dbg !50
  %212 = or disjoint i32 %191, 512, !dbg !50
  %213 = lshr i32 %212, 6, !dbg !50
  %214 = and i32 %213, 12, !dbg !50
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !50
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %212, !dbg !50
  %217 = load <4 x i32>, ptr addrspace(3) %216, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %211, align 16, !dbg !50
  %218 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 4, !dbg !50
  %.extract8 = load i32, ptr addrspace(3) %218, align 4, !dbg !50
  %219 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 8, !dbg !50
  %.extract9 = load i32, ptr addrspace(3) %219, align 8, !dbg !50
  %220 = getelementptr inbounds i8, ptr addrspace(3) %211, i32 12, !dbg !50
  %.extract10 = load i32, ptr addrspace(3) %220, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %188, i1 %113) #4, !dbg !50
  %.extract11 = extractelement <4 x i32> %217, i64 0, !dbg !50
  %.extract12 = extractelement <4 x i32> %217, i64 1, !dbg !50
  %.extract13 = extractelement <4 x i32> %217, i64 2, !dbg !50
  %.extract14 = extractelement <4 x i32> %217, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %190, i1 %111) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c325wpgnvlzpy6rg7wxi3qlbbobvihluavyr6422kyxj4gwvox6i.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 34, scope: !7)
!19 = !DILocation(line: 30, column: 52, scope: !7)
!20 = !DILocation(line: 30, column: 46, scope: !7)
!21 = !DILocation(line: 30, column: 66, scope: !7)
!22 = !DILocation(line: 30, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 61, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 82, scope: !7)
!26 = !DILocation(line: 30, column: 74, scope: !7)
!27 = !DILocation(line: 31, column: 30, scope: !7)
!28 = !DILocation(line: 31, column: 35, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 36, scope: !7)
!33 = !DILocation(line: 34, column: 32, scope: !7)
!34 = !DILocation(line: 34, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 27, scope: !7)
!38 = !DILocation(line: 26, column: 44, scope: !7)
!39 = !DILocation(line: 26, column: 23, scope: !7)
!40 = !DILocation(line: 35, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 19, scope: !7)
!43 = !DILocation(line: 43, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 48, column: 35, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 34, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 25, scope: !7)
!50 = !DILocation(line: 49, column: 46, scope: !7)
!51 = !DILocation(line: 49, column: 4, scope: !7)
