; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_avg_pool2d_clamp_pow_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 15, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 16, !dbg !14
  %10 = shl i32 %8, 4, !dbg !15
  %11 = sext i32 %10 to i64, !dbg !16
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !16
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 %9) #4, !dbg !17
  %14 = bitcast i32 %13 to float, !dbg !17
  %15 = or disjoint i32 %10, 1, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !19
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %9) #4, !dbg !20
  %19 = bitcast i32 %18 to float, !dbg !20
  %20 = or disjoint i32 %10, 2, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !22
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %9) #4, !dbg !23
  %24 = bitcast i32 %23 to float, !dbg !23
  %25 = or disjoint i32 %10, 3, !dbg !24
  %26 = sext i32 %25 to i64, !dbg !25
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !25
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %9) #4, !dbg !26
  %29 = bitcast i32 %28 to float, !dbg !26
  %30 = or disjoint i32 %10, 4, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !28
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %9) #4, !dbg !29
  %34 = bitcast i32 %33 to float, !dbg !29
  %35 = or disjoint i32 %10, 5, !dbg !30
  %36 = sext i32 %35 to i64, !dbg !31
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %9) #4, !dbg !32
  %39 = bitcast i32 %38 to float, !dbg !32
  %40 = or disjoint i32 %10, 6, !dbg !33
  %41 = sext i32 %40 to i64, !dbg !34
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !34
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %9) #4, !dbg !35
  %44 = or disjoint i32 %10, 7, !dbg !36
  %45 = sext i32 %44 to i64, !dbg !37
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !37
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %9) #4, !dbg !38
  %48 = or disjoint i32 %10, 8, !dbg !39
  %49 = sext i32 %48 to i64, !dbg !40
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %9) #4, !dbg !41
  %52 = or disjoint i32 %10, 9, !dbg !42
  %53 = sext i32 %52 to i64, !dbg !43
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !43
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %9) #4, !dbg !44
  %56 = or disjoint i32 %10, 10, !dbg !45
  %57 = sext i32 %56 to i64, !dbg !46
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !46
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %9) #4, !dbg !47
  %60 = or disjoint i32 %10, 11, !dbg !48
  %61 = sext i32 %60 to i64, !dbg !49
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !49
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %9) #4, !dbg !50
  %64 = or disjoint i32 %10, 12, !dbg !51
  %65 = sext i32 %64 to i64, !dbg !52
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !52
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %9) #4, !dbg !53
  %68 = or disjoint i32 %10, 13, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !55
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %9) #4, !dbg !56
  %72 = or disjoint i32 %10, 14, !dbg !57
  %73 = sext i32 %72 to i64, !dbg !58
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !58
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %9) #4, !dbg !59
  %76 = or disjoint i32 %10, 15, !dbg !60
  %77 = sext i32 %76 to i64, !dbg !61
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !61
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %9) #4, !dbg !62
  %80 = fcmp ogt float %14, 0x3E7AD7F2A0000000, !dbg !63
  %81 = fcmp uno float %14, 0.000000e+00, !dbg !67
  %82 = or i1 %80, %81, !dbg !68
  %83 = select i1 %82, float %14, float 0x3E7AD7F2A0000000, !dbg !69
  %84 = fmul float %83, %83, !dbg !70
  %85 = fmul float %83, %84, !dbg !71
  %86 = fcmp ogt float %19, 0x3E7AD7F2A0000000, !dbg !72
  %87 = fcmp uno float %19, 0.000000e+00, !dbg !74
  %88 = or i1 %86, %87, !dbg !75
  %89 = select i1 %88, float %19, float 0x3E7AD7F2A0000000, !dbg !76
  %90 = fmul float %89, %89, !dbg !77
  %91 = fmul float %89, %90, !dbg !78
  %92 = fadd float %85, %91, !dbg !79
  %93 = fcmp ogt float %24, 0x3E7AD7F2A0000000, !dbg !80
  %94 = fcmp uno float %24, 0.000000e+00, !dbg !82
  %95 = or i1 %93, %94, !dbg !83
  %96 = select i1 %95, float %24, float 0x3E7AD7F2A0000000, !dbg !84
  %97 = fmul float %96, %96, !dbg !85
  %98 = fmul float %96, %97, !dbg !86
  %99 = fadd float %98, %92, !dbg !87
  %100 = fcmp ogt float %29, 0x3E7AD7F2A0000000, !dbg !88
  %101 = fcmp uno float %29, 0.000000e+00, !dbg !90
  %102 = or i1 %100, %101, !dbg !91
  %103 = select i1 %102, float %29, float 0x3E7AD7F2A0000000, !dbg !92
  %104 = fmul float %103, %103, !dbg !93
  %105 = fmul float %103, %104, !dbg !94
  %106 = fadd float %105, %99, !dbg !95
  %107 = fcmp ogt float %34, 0x3E7AD7F2A0000000, !dbg !96
  %108 = fcmp uno float %34, 0.000000e+00, !dbg !98
  %109 = or i1 %107, %108, !dbg !99
  %110 = select i1 %109, float %34, float 0x3E7AD7F2A0000000, !dbg !100
  %111 = fmul float %110, %110, !dbg !101
  %112 = fmul float %110, %111, !dbg !102
  %113 = fadd float %112, %106, !dbg !103
  %114 = fcmp ogt float %39, 0x3E7AD7F2A0000000, !dbg !104
  %115 = fcmp uno float %39, 0.000000e+00, !dbg !106
  %116 = or i1 %114, %115, !dbg !107
  %117 = select i1 %116, float %39, float 0x3E7AD7F2A0000000, !dbg !108
  %118 = fmul float %117, %117, !dbg !109
  %119 = fmul float %117, %118, !dbg !110
  %120 = fadd float %119, %113, !dbg !111
  %121 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !38
  %122 = insertelement <2 x i32> %121, i32 %43, i64 1, !dbg !38
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !38
  %124 = fcmp ogt <2 x float> %123, splat (float 0x3E7AD7F2A0000000), !dbg !112
  %125 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !114
  %126 = or <2 x i1> %124, %125, !dbg !115
  %127 = select <2 x i1> %126, <2 x float> %123, <2 x float> splat (float 0x3E7AD7F2A0000000), !dbg !116
  %128 = fmul <2 x float> %127, %127, !dbg !117
  %129 = fmul <2 x float> %127, %128, !dbg !118
  %130 = extractelement <2 x float> %129, i64 1, !dbg !119
  %131 = fadd float %130, %120, !dbg !119
  %132 = extractelement <2 x float> %129, i64 0, !dbg !120
  %133 = fadd float %132, %131, !dbg !120
  %134 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !44
  %135 = insertelement <2 x i32> %134, i32 %51, i64 1, !dbg !44
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !44
  %137 = fcmp ogt <2 x float> %136, splat (float 0x3E7AD7F2A0000000), !dbg !121
  %138 = fcmp uno <2 x float> %136, zeroinitializer, !dbg !123
  %139 = or <2 x i1> %137, %138, !dbg !124
  %140 = select <2 x i1> %139, <2 x float> %136, <2 x float> splat (float 0x3E7AD7F2A0000000), !dbg !125
  %141 = fmul <2 x float> %140, %140, !dbg !126
  %142 = fmul <2 x float> %140, %141, !dbg !127
  %143 = extractelement <2 x float> %142, i64 1, !dbg !128
  %144 = fadd float %143, %133, !dbg !128
  %145 = extractelement <2 x float> %142, i64 0, !dbg !129
  %146 = fadd float %145, %144, !dbg !129
  %147 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !50
  %148 = insertelement <2 x i32> %147, i32 %59, i64 1, !dbg !50
  %149 = bitcast <2 x i32> %148 to <2 x float>, !dbg !50
  %150 = fcmp ogt <2 x float> %149, splat (float 0x3E7AD7F2A0000000), !dbg !130
  %151 = fcmp uno <2 x float> %149, zeroinitializer, !dbg !132
  %152 = or <2 x i1> %150, %151, !dbg !133
  %153 = select <2 x i1> %152, <2 x float> %149, <2 x float> splat (float 0x3E7AD7F2A0000000), !dbg !134
  %154 = fmul <2 x float> %153, %153, !dbg !135
  %155 = fmul <2 x float> %153, %154, !dbg !136
  %156 = extractelement <2 x float> %155, i64 1, !dbg !137
  %157 = fadd float %156, %146, !dbg !137
  %158 = extractelement <2 x float> %155, i64 0, !dbg !138
  %159 = fadd float %158, %157, !dbg !138
  %160 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !56
  %161 = insertelement <2 x i32> %160, i32 %67, i64 1, !dbg !56
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !56
  %163 = fcmp ogt <2 x float> %162, splat (float 0x3E7AD7F2A0000000), !dbg !139
  %164 = fcmp uno <2 x float> %162, zeroinitializer, !dbg !141
  %165 = or <2 x i1> %163, %164, !dbg !142
  %166 = select <2 x i1> %165, <2 x float> %162, <2 x float> splat (float 0x3E7AD7F2A0000000), !dbg !143
  %167 = fmul <2 x float> %166, %166, !dbg !144
  %168 = fmul <2 x float> %166, %167, !dbg !145
  %169 = extractelement <2 x float> %168, i64 1, !dbg !146
  %170 = fadd float %169, %159, !dbg !146
  %171 = extractelement <2 x float> %168, i64 0, !dbg !147
  %172 = fadd float %171, %170, !dbg !147
  %173 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !62
  %174 = insertelement <2 x i32> %173, i32 %75, i64 1, !dbg !62
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !62
  %176 = fcmp ogt <2 x float> %175, splat (float 0x3E7AD7F2A0000000), !dbg !148
  %177 = fcmp uno <2 x float> %175, zeroinitializer, !dbg !150
  %178 = or <2 x i1> %176, %177, !dbg !151
  %179 = select <2 x i1> %178, <2 x float> %175, <2 x float> splat (float 0x3E7AD7F2A0000000), !dbg !152
  %180 = fmul <2 x float> %179, %179, !dbg !153
  %181 = fmul <2 x float> %179, %180, !dbg !154
  %182 = extractelement <2 x float> %181, i64 1, !dbg !155
  %183 = fadd float %182, %172, !dbg !155
  %184 = extractelement <2 x float> %181, i64 0, !dbg !156
  %185 = fadd float %184, %183, !dbg !156
  %186 = fmul float %185, 6.250000e-02, !dbg !157
  %187 = tail call float @llvm.nvvm.trunc.f(float 0x3FC5555560000000) #4, !dbg !158
  %188 = fmul float %187, 2.000000e+00, !dbg !158
  %189 = fsub float 0x3FD5555560000000, %188, !dbg !158
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not.i = icmp eq i32 %190, 0, !dbg !158
  %191 = tail call float @llvm.nvvm.fabs.ftz.f(float %189) #4, !dbg !158
  %192 = tail call float @llvm.nvvm.fabs.f(float %189) #4, !dbg !158
  %.08.i = select i1 %.not.i, float %192, float %191, !dbg !158
  %193 = fcmp oeq float %.08.i, 1.000000e+00, !dbg !158
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not12.i = icmp eq i32 %194, 0, !dbg !158
  %195 = tail call float @llvm.nvvm.fabs.ftz.f(float %186) #4, !dbg !158
  %196 = tail call float @llvm.nvvm.fabs.f(float %186) #4, !dbg !158
  %.09.i = select i1 %.not12.i, float %196, float %195, !dbg !158
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not13.i = icmp eq i32 %197, 0, !dbg !158
  %198 = fcmp olt float %.09.i, 0x3810000000000000, !dbg !158
  %199 = fmul float %.09.i, 0x4170000000000000, !dbg !158
  %200 = select i1 %.not13.i, i1 %198, i1 false, !dbg !158
  %.116.i = select i1 %200, float %199, float %.09.i, !dbg !158
  %expo.i.i.1.i = select i1 %200, float -1.510000e+02, float -1.270000e+02, !dbg !158
  %201 = bitcast float %.116.i to i32, !dbg !158
  %202 = and i32 %201, 8388607, !dbg !158
  %203 = or disjoint i32 %202, 1065353216, !dbg !158
  %204 = bitcast i32 %203 to float, !dbg !158
  %205 = lshr i32 %201, 23, !dbg !158
  %206 = uitofp nneg i32 %205 to float, !dbg !158
  %207 = fadd float %expo.i.i.1.i, %206, !dbg !158
  %208 = fcmp ogt float %204, 0x3FF6A09E60000000, !dbg !158
  %209 = fmul float %204, 5.000000e-01, !dbg !158
  %210 = fadd float %207, 1.000000e+00, !dbg !158
  %expo.i.i.2.i = select i1 %208, float %210, float %207, !dbg !158
  %m.i.i.0.i = select i1 %208, float %209, float %204, !dbg !158
  %211 = fadd float %m.i.i.0.i, -1.000000e+00, !dbg !158
  %212 = fadd float %m.i.i.0.i, 1.000000e+00, !dbg !158
  %213 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %212) #5, !dbg !158, !srcloc !159
  %214 = fmul float %211, 2.000000e+00, !dbg !158
  %215 = fmul float %213, %214, !dbg !158
  %216 = fmul float %215, %215, !dbg !158
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not14.i = icmp eq i32 %217, 0, !dbg !158
  %218 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F631E1FC0000000, float %216, float 0x3F8995EC60000000) #4, !dbg !158
  %219 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F631E1FC0000000, float %216, float 0x3F8995EC60000000) #4, !dbg !158
  %.020.i = select i1 %.not14.i, float %219, float %218, !dbg !158
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not15.i = icmp eq i32 %220, 0, !dbg !158
  %221 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.020.i, float %216, float 0x3FB55557A0000000) #4, !dbg !158
  %222 = tail call float @llvm.nvvm.fma.rn.f(float %.020.i, float %216, float 0x3FB55557A0000000) #4, !dbg !158
  %.021.i = select i1 %.not15.i, float %222, float %221, !dbg !158
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not16.i = icmp eq i32 %223, 0, !dbg !158
  %224 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.021.i, float %216) #4, !dbg !158
  %225 = tail call float @llvm.nvvm.mul.rn.f(float %.021.i, float %216) #4, !dbg !158
  %.022.i = select i1 %.not16.i, float %225, float %224, !dbg !158
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not17.i = icmp eq i32 %226, 0, !dbg !158
  %227 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.022.i, float %215) #4, !dbg !158
  %228 = tail call float @llvm.nvvm.mul.rn.f(float %.022.i, float %215) #4, !dbg !158
  %.024.i = select i1 %.not17.i, float %228, float %227, !dbg !158
  %229 = fsub float %211, %215, !dbg !158
  %230 = fmul float %229, 2.000000e+00, !dbg !158
  %231 = fneg float %215, !dbg !158
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not18.i = icmp eq i32 %232, 0, !dbg !158
  %233 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %231, float %211, float %230) #4, !dbg !158
  %234 = tail call float @llvm.nvvm.fma.rn.f(float %231, float %211, float %230) #4, !dbg !158
  %.025.i = select i1 %.not18.i, float %234, float %233, !dbg !158
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not19.i = icmp eq i32 %235, 0, !dbg !158
  %236 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %213, float %.025.i) #4, !dbg !158
  %237 = tail call float @llvm.nvvm.mul.rn.f(float %213, float %.025.i) #4, !dbg !158
  %.026.i = select i1 %.not19.i, float %237, float %236, !dbg !158
  %238 = fadd float %215, %.024.i, !dbg !158
  %239 = fsub float %215, %238, !dbg !158
  %240 = fadd float %.024.i, %239, !dbg !158
  %241 = fadd float %.026.i, %240, !dbg !158
  %242 = fadd float %238, %241, !dbg !158
  %243 = fsub float %238, %242, !dbg !158
  %244 = fadd float %241, %243, !dbg !158
  %245 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not20.i = icmp eq i32 %245, 0, !dbg !158
  %246 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #4, !dbg !158
  %247 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3FE62E4000000000) #4, !dbg !158
  %.019.i = select i1 %.not20.i, float %247, float %246, !dbg !158
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not21.i = icmp eq i32 %248, 0, !dbg !158
  %249 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #4, !dbg !158
  %250 = tail call float @llvm.nvvm.mul.rn.f(float %expo.i.i.2.i, float 0x3EB7F7D1C0000000) #4, !dbg !158
  %.018.i = select i1 %.not21.i, float %250, float %249, !dbg !158
  %251 = fadd float %.019.i, %242, !dbg !158
  %252 = fsub float %.019.i, %251, !dbg !158
  %253 = fadd float %242, %252, !dbg !158
  %254 = fadd float %244, %253, !dbg !158
  %255 = fadd float %.018.i, %254, !dbg !158
  %256 = fadd float %251, %255, !dbg !158
  %257 = fsub float %251, %256, !dbg !158
  %258 = fadd float %255, %257, !dbg !158
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not22.i = icmp eq i32 %259, 0, !dbg !158
  %260 = tail call float @llvm.nvvm.fabs.ftz.f(float 0x3FD5555560000000) #4, !dbg !158
  %261 = tail call float @llvm.nvvm.fabs.f(float 0x3FD5555560000000) #4, !dbg !158
  %.027.i = select i1 %.not22.i, float %261, float %260, !dbg !158
  %262 = fcmp ogt float %.027.i, 0x46FED09BE0000000, !dbg !158
  %.013.i = select i1 %262, float 0x3F05555560000000, float 0x3FD5555560000000, !dbg !158
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not23.i = icmp eq i32 %263, 0, !dbg !158
  %264 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %.013.i, float %256) #4, !dbg !158
  %265 = tail call float @llvm.nvvm.mul.rn.f(float %.013.i, float %256) #4, !dbg !158
  %.028.i = select i1 %.not23.i, float %265, float %264, !dbg !158
  %266 = fneg float %.028.i, !dbg !158
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not24.i = icmp eq i32 %267, 0, !dbg !158
  %268 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %256, float %266) #4, !dbg !158
  %269 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %256, float %266) #4, !dbg !158
  %.029.i = select i1 %.not24.i, float %269, float %268, !dbg !158
  %270 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not25.i = icmp eq i32 %270, 0, !dbg !158
  %271 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.013.i, float %258, float %.029.i) #4, !dbg !158
  %272 = tail call float @llvm.nvvm.fma.rn.f(float %.013.i, float %258, float %.029.i) #4, !dbg !158
  %.030.i = select i1 %.not25.i, float %272, float %271, !dbg !158
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not26.i = icmp eq i32 %273, 0, !dbg !158
  %274 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0.000000e+00, float %256, float %.030.i) #4, !dbg !158
  %275 = tail call float @llvm.nvvm.fma.rn.f(float 0.000000e+00, float %256, float %.030.i) #4, !dbg !158
  %.031.i = select i1 %.not26.i, float %275, float %274, !dbg !158
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not27.i = icmp eq i32 %276, 0, !dbg !158
  %277 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %.031.i) #4, !dbg !158
  %278 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %.031.i) #4, !dbg !158
  %.032.i = select i1 %.not27.i, float %278, float %277, !dbg !158
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %281 = bitcast float %.032.i to i32, !dbg !158
  %282 = icmp eq i32 %281, 1118925336, !dbg !158
  %prod.i.145.0.i = select i1 %282, float 0x40562E42E0000000, float %.032.i, !dbg !158
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not30.i = icmp eq i32 %283, 0, !dbg !158
  %284 = tail call float @llvm.nvvm.mul.rn.ftz.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #4, !dbg !158
  %285 = tail call float @llvm.nvvm.mul.rn.f(float %prod.i.145.0.i, float 0x3FF7154760000000) #4, !dbg !158
  %.017.i = select i1 %.not30.i, float %285, float %284, !dbg !158
  %286 = tail call float @llvm.nvvm.trunc.f(float %.017.i) #4, !dbg !158
  %287 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not31.i = icmp eq i32 %287, 0, !dbg !158
  %288 = tail call float @llvm.nvvm.fabs.ftz.f(float %286) #4, !dbg !158
  %289 = tail call float @llvm.nvvm.fabs.f(float %286) #4, !dbg !158
  %.023.i = select i1 %.not31.i, float %289, float %288, !dbg !158
  %290 = fcmp ogt float %.023.i, 1.260000e+02, !dbg !158
  %291 = tail call float @llvm.copysign.f32(float 1.260000e+02, float %286), !dbg !158
  %j.i.i.0.i = select i1 %290, float %291, float %286, !dbg !158
  %292 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not32.i = icmp eq i32 %292, 0, !dbg !158
  %293 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #4, !dbg !158
  %294 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0xBFE62E4300000000, float %prod.i.145.0.i) #4, !dbg !158
  %.035.i = select i1 %.not32.i, float %294, float %293, !dbg !158
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not33.i = icmp eq i32 %295, 0, !dbg !158
  %296 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #4, !dbg !158
  %297 = tail call float @llvm.nvvm.fma.rn.f(float %j.i.i.0.i, float 0x3E205C6100000000, float %.035.i) #4, !dbg !158
  %.036.i = select i1 %.not33.i, float %297, float %296, !dbg !158
  %298 = fmul float %.036.i, 0x3FF7154760000000, !dbg !158
  %299 = fadd float %j.i.i.0.i, 0x4168000FE0000000, !dbg !158
  %300 = bitcast float %299 to i32, !dbg !158
  %301 = shl i32 %300, 23, !dbg !158
  %302 = bitcast i32 %301 to float, !dbg !158
  %303 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %298) #4, !dbg !158
  %304 = fmul float %303, %302, !dbg !158
  %305 = fcmp une float %304, 0x7FF0000000000000, !dbg !158
  br i1 %305, label %__internal_fmad.exit.i.i, label %__internal_accurate_powf.exit.i, !dbg !158

__internal_fmad.exit.i.i:                         ; preds = %3
  %.not29.i = icmp eq i32 %280, 0, !dbg !158
  %.not28.i = icmp eq i32 %279, 0, !dbg !158
  %306 = fneg float %.032.i, !dbg !158
  %307 = tail call float @llvm.nvvm.add.rn.f(float %.028.i, float %306) #4, !dbg !158
  %308 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.028.i, float %306) #4, !dbg !158
  %.033.i = select i1 %.not28.i, float %307, float %308, !dbg !158
  %309 = tail call float @llvm.nvvm.add.rn.f(float %.033.i, float %.031.i) #4, !dbg !158
  %310 = tail call float @llvm.nvvm.add.rn.ftz.f(float %.033.i, float %.031.i) #4, !dbg !158
  %.034.i = select i1 %.not29.i, float %309, float %310, !dbg !158
  %311 = fadd float %.034.i, 0x3EE0000000000000, !dbg !158
  %prod.i.044.0.i = select i1 %282, float %311, float %.034.i, !dbg !158
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not34.i = icmp eq i32 %312, 0, !dbg !158
  %313 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %304, float %prod.i.044.0.i, float %304) #4, !dbg !158
  %314 = tail call float @llvm.nvvm.fma.rn.f(float %304, float %prod.i.044.0.i, float %304) #4, !dbg !158
  %.014.i = select i1 %.not34.i, float %314, float %313, !dbg !158
  br label %__internal_accurate_powf.exit.i, !dbg !158

__internal_accurate_powf.exit.i:                  ; preds = %__internal_fmad.exit.i.i, %3
  %t.i.0.i = phi float [ %.014.i, %__internal_fmad.exit.i.i ], [ 0x7FF0000000000000, %3 ], !dbg !158
  %315 = fcmp olt float %186, 0.000000e+00, !dbg !158
  %or.cond.i = select i1 %315, i1 %193, i1 false, !dbg !158
  %316 = fcmp oeq float %186, 0.000000e+00, !dbg !158
  br i1 %316, label %317, label %320, !dbg !158

317:                                              ; preds = %__internal_accurate_powf.exit.i
  %318 = fadd float %186, %186, !dbg !158
  %319 = select i1 %193, float %318, float 0.000000e+00, !dbg !158
  br label %__internal_powf_corner_cases.exit.i, !dbg !158

320:                                              ; preds = %__internal_accurate_powf.exit.i
  %321 = fneg float %t.i.0.i, !dbg !158
  %.010.i = select i1 %or.cond.i, float %321, float %t.i.0.i, !dbg !158
  %322 = tail call float @llvm.nvvm.trunc.f(float 0x3FD5555560000000) #4, !dbg !158
  %323 = fcmp une float %322, 0x3FD5555560000000, !dbg !158
  %or.cond2.i = select i1 %315, i1 %323, i1 false, !dbg !158
  %.111.i = select i1 %or.cond2.i, float 0x7FFFFFFFE0000000, float %.010.i, !dbg !158
  br label %__internal_powf_corner_cases.exit.i, !dbg !158

__internal_powf_corner_cases.exit.i:              ; preds = %320, %317
  %.212.i = phi float [ %319, %317 ], [ %.111.i, %320 ], !dbg !158
  %324 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not35.i = icmp eq i32 %324, 0, !dbg !158
  %.01.i = select i1 %.not35.i, float %196, float %195, !dbg !158
  %325 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not36.i = icmp eq i32 %325, 0, !dbg !158
  %.02.i = select i1 %.not36.i, float %261, float %260, !dbg !158
  %326 = fadd float %.01.i, %.02.i, !dbg !158
  %327 = bitcast float %326 to i32, !dbg !158
  %328 = icmp sgt i32 %327, 2139095039, !dbg !158
  br i1 %328, label %__nv_isnanf.exit.i.i, label %__nv_powf.exit, !dbg !158

__nv_isnanf.exit.i.i:                             ; preds = %__internal_powf_corner_cases.exit.i
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not37.i = icmp eq i32 %329, 0, !dbg !158
  %.06.i = select i1 %.not37.i, float %196, float %195, !dbg !158
  %330 = fcmp uno float %.06.i, 0.000000e+00, !dbg !158
  br i1 %330, label %333, label %__nv_isnanf.exit11.i.i, !dbg !158

__nv_isnanf.exit11.i.i:                           ; preds = %__nv_isnanf.exit.i.i
  %331 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not38.i = icmp eq i32 %331, 0, !dbg !158
  %.07.i = select i1 %.not38.i, float %261, float %260, !dbg !158
  %332 = fcmp uno float %.07.i, 0.000000e+00, !dbg !158
  br i1 %332, label %333, label %__nv_isinff.exit8.i.i, !dbg !158

333:                                              ; preds = %__nv_isnanf.exit11.i.i, %__nv_isnanf.exit.i.i
  %334 = fadd float %186, 0x3FD5555560000000, !dbg !158
  br label %__nv_powf.exit, !dbg !158

__nv_isinff.exit8.i.i:                            ; preds = %__nv_isnanf.exit11.i.i
  %335 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not39.i = icmp eq i32 %335, 0, !dbg !158
  %.05.i = select i1 %.not39.i, float %261, float %260, !dbg !158
  %336 = fcmp oeq float %.05.i, 0x7FF0000000000000, !dbg !158
  %337 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !158
  %.not41.i = icmp eq i32 %337, 0, !dbg !158
  %.04.i = select i1 %.not41.i, float %196, float %195, !dbg !158
  br i1 %336, label %__nv_fabsf.exit5.i.i, label %__nv_isinff.exit.i.i, !dbg !158

__nv_fabsf.exit5.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %338 = fcmp ogt float %.04.i, 1.000000e+00, !dbg !158
  %339 = fcmp oeq float %186, -1.000000e+00, !dbg !158
  %340 = select i1 %338, float 0x7FF0000000000000, float 0.000000e+00, !dbg !158
  %341 = select i1 %339, float 1.000000e+00, float %340, !dbg !158
  br label %__nv_powf.exit, !dbg !158

__nv_isinff.exit.i.i:                             ; preds = %__nv_isinff.exit8.i.i
  %342 = fcmp oeq float %.04.i, 0x7FF0000000000000, !dbg !158
  br i1 %342, label %343, label %__nv_powf.exit, !dbg !158

343:                                              ; preds = %__nv_isinff.exit.i.i
  %344 = select i1 %or.cond.i, float 0xFFF0000000000000, float 0x7FF0000000000000, !dbg !158
  br label %__nv_powf.exit, !dbg !158

__nv_powf.exit:                                   ; preds = %__internal_powf_corner_cases.exit.i, %333, %__nv_fabsf.exit5.i.i, %__nv_isinff.exit.i.i, %343
  %.3.i = phi float [ %.212.i, %__internal_powf_corner_cases.exit.i ], [ %334, %333 ], [ %341, %__nv_fabsf.exit5.i.i ], [ %344, %343 ], [ %.212.i, %__nv_isinff.exit.i.i ], !dbg !158
  %345 = and i32 %6, 16, !dbg !12
  %346 = fcmp oeq float %186, 1.000000e+00, !dbg !158
  %t.0.i = select i1 %346, float 1.000000e+00, float %.3.i, !dbg !158
  %347 = sext i32 %8 to i64, !dbg !160
  %348 = getelementptr float, ptr addrspace(1) %0, i64 %347, !dbg !160
  %349 = icmp eq i32 %345, 0, !dbg !161
  %350 = bitcast float %t.0.i to i32, !dbg !161
  %351 = and i1 %349, %9, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %348, i1 %351) #4, !dbg !161
  ret void, !dbg !162
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.trunc.f(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.mul.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rn.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.copysign.f32(float, float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crnq2nsnldl2sndpyqsdjtdubxdmcvb3vfriw7lns7qlxfcczsac.py", directory: "inductor_cache/rn")
!4 = !{ptr @triton_poi_fused_avg_pool2d_clamp_pow_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_clamp_pow_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_clamp_pow_0", linkageName: "triton_poi_fused_avg_pool2d_clamp_pow_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 38, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 42, scope: !7)
!21 = !DILocation(line: 27, column: 35, scope: !7)
!22 = !DILocation(line: 27, column: 31, scope: !7)
!23 = !DILocation(line: 27, column: 43, scope: !7)
!24 = !DILocation(line: 28, column: 35, scope: !7)
!25 = !DILocation(line: 28, column: 31, scope: !7)
!26 = !DILocation(line: 28, column: 43, scope: !7)
!27 = !DILocation(line: 29, column: 35, scope: !7)
!28 = !DILocation(line: 29, column: 31, scope: !7)
!29 = !DILocation(line: 29, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 35, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 35, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 43, scope: !7)
!36 = !DILocation(line: 32, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 43, scope: !7)
!39 = !DILocation(line: 33, column: 35, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 43, scope: !7)
!42 = !DILocation(line: 34, column: 35, scope: !7)
!43 = !DILocation(line: 34, column: 31, scope: !7)
!44 = !DILocation(line: 34, column: 43, scope: !7)
!45 = !DILocation(line: 35, column: 36, scope: !7)
!46 = !DILocation(line: 35, column: 31, scope: !7)
!47 = !DILocation(line: 35, column: 44, scope: !7)
!48 = !DILocation(line: 36, column: 36, scope: !7)
!49 = !DILocation(line: 36, column: 31, scope: !7)
!50 = !DILocation(line: 36, column: 44, scope: !7)
!51 = !DILocation(line: 37, column: 36, scope: !7)
!52 = !DILocation(line: 37, column: 31, scope: !7)
!53 = !DILocation(line: 37, column: 44, scope: !7)
!54 = !DILocation(line: 38, column: 36, scope: !7)
!55 = !DILocation(line: 38, column: 31, scope: !7)
!56 = !DILocation(line: 38, column: 44, scope: !7)
!57 = !DILocation(line: 39, column: 36, scope: !7)
!58 = !DILocation(line: 39, column: 31, scope: !7)
!59 = !DILocation(line: 39, column: 44, scope: !7)
!60 = !DILocation(line: 40, column: 36, scope: !7)
!61 = !DILocation(line: 40, column: 31, scope: !7)
!62 = !DILocation(line: 40, column: 44, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 42, column: 40, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 43, column: 18, scope: !7)
!71 = !DILocation(line: 44, column: 18, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !73)
!73 = !DILocation(line: 45, column: 40, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !73)
!77 = !DILocation(line: 46, column: 18, scope: !7)
!78 = !DILocation(line: 47, column: 18, scope: !7)
!79 = !DILocation(line: 48, column: 18, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !81)
!81 = !DILocation(line: 49, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !81)
!85 = !DILocation(line: 50, column: 20, scope: !7)
!86 = !DILocation(line: 51, column: 20, scope: !7)
!87 = !DILocation(line: 52, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !89)
!89 = !DILocation(line: 53, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !89)
!93 = !DILocation(line: 54, column: 20, scope: !7)
!94 = !DILocation(line: 55, column: 20, scope: !7)
!95 = !DILocation(line: 56, column: 20, scope: !7)
!96 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !97)
!97 = !DILocation(line: 57, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !97)
!101 = !DILocation(line: 58, column: 20, scope: !7)
!102 = !DILocation(line: 59, column: 20, scope: !7)
!103 = !DILocation(line: 60, column: 20, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !105)
!105 = !DILocation(line: 61, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !105)
!109 = !DILocation(line: 62, column: 20, scope: !7)
!110 = !DILocation(line: 63, column: 20, scope: !7)
!111 = !DILocation(line: 64, column: 20, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !113)
!113 = !DILocation(line: 69, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !113)
!117 = !DILocation(line: 70, column: 20, scope: !7)
!118 = !DILocation(line: 71, column: 20, scope: !7)
!119 = !DILocation(line: 68, column: 20, scope: !7)
!120 = !DILocation(line: 72, column: 20, scope: !7)
!121 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !122)
!122 = !DILocation(line: 77, column: 42, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !122)
!124 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !122)
!125 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !122)
!126 = !DILocation(line: 78, column: 20, scope: !7)
!127 = !DILocation(line: 79, column: 20, scope: !7)
!128 = !DILocation(line: 76, column: 20, scope: !7)
!129 = !DILocation(line: 80, column: 20, scope: !7)
!130 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !131)
!131 = !DILocation(line: 85, column: 42, scope: !7)
!132 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !131)
!133 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !131)
!134 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !131)
!135 = !DILocation(line: 86, column: 20, scope: !7)
!136 = !DILocation(line: 87, column: 20, scope: !7)
!137 = !DILocation(line: 84, column: 20, scope: !7)
!138 = !DILocation(line: 88, column: 20, scope: !7)
!139 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !140)
!140 = !DILocation(line: 93, column: 42, scope: !7)
!141 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !140)
!142 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !140)
!143 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !140)
!144 = !DILocation(line: 94, column: 20, scope: !7)
!145 = !DILocation(line: 95, column: 20, scope: !7)
!146 = !DILocation(line: 92, column: 20, scope: !7)
!147 = !DILocation(line: 96, column: 20, scope: !7)
!148 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !149)
!149 = !DILocation(line: 101, column: 42, scope: !7)
!150 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !149)
!151 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !149)
!152 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !149)
!153 = !DILocation(line: 102, column: 20, scope: !7)
!154 = !DILocation(line: 103, column: 20, scope: !7)
!155 = !DILocation(line: 100, column: 20, scope: !7)
!156 = !DILocation(line: 104, column: 20, scope: !7)
!157 = !DILocation(line: 106, column: 20, scope: !7)
!158 = !DILocation(line: 108, column: 33, scope: !7)
!159 = !{i32 21046}
!160 = !DILocation(line: 109, column: 28, scope: !7)
!161 = !DILocation(line: 109, column: 40, scope: !7)
!162 = !DILocation(line: 109, column: 4, scope: !7)
