; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %21 = shl i32 %20, 5, !dbg !15
  %22 = or disjoint i32 %21, %17, !dbg !16
  %23 = icmp slt i32 %22, 256, !dbg !17
  %24 = shl i32 %18, 8, !dbg !18
  %25 = shl i32 %19, 8, !dbg !18
  %26 = add i32 %22, %24, !dbg !19
  %27 = add i32 %22, %25, !dbg !19
  %28 = sext i32 %26 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = sext i32 %27 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 %23) #4, !dbg !21
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %23) #4, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %23) #4, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !23
  %38 = sext i32 %22 to i64, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %23) #4, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %23) #4, !dbg !27
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !27
  %47 = bitcast i32 %43 to float, !dbg !27
  %48 = bitcast i32 %44 to float, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %23) #4, !dbg !29
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !30
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %23) #4, !dbg !31
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !32
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !32
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !32
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !32
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %59, 0, !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %60, 0, !dbg !33
  br i1 %.not.i, label %66, label %61, !dbg !33

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !33

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !33

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %71, 0, !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %72, 0, !dbg !33
  br i1 %.not.i15, label %78, label %73, !dbg !33

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %76, label %74, !dbg !33

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %74, %76, %79, %81
  %.0.i17 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i20 = icmp eq i32 %83, 0, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i23 = icmp eq i32 %84, 0, !dbg !33
  br i1 %.not.i20, label %90, label %85, !dbg !33

85:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %88, label %86, !dbg !33

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

90:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %93, label %91, !dbg !33

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !33
  br label %__nv_sqrtf.exit24, !dbg !33

__nv_sqrtf.exit24:                                ; preds = %86, %88, %91, %93
  %.0.i22 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !33
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i25 = icmp eq i32 %95, 0, !dbg !33
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i28 = icmp eq i32 %96, 0, !dbg !33
  br i1 %.not.i25, label %102, label %97, !dbg !33

97:                                               ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %100, label %98, !dbg !33

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

102:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %105, label %103, !dbg !33

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !33
  br label %__nv_sqrtf.exit29, !dbg !33

__nv_sqrtf.exit29:                                ; preds = %98, %100, %103, %105
  %.0.i27 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !33
  %107 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %108 = bitcast i32 %107 to float, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = fsub float %108, %110, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %113 = bitcast i32 %112 to float, !dbg !23
  %114 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %115 = bitcast i32 %114 to float, !dbg !25
  %116 = fsub float %113, %115, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %118 = bitcast i32 %117 to float, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = fsub float %118, %120, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %123 = bitcast i32 %122 to float, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %125 = bitcast i32 %124 to float, !dbg !25
  %126 = fsub float %123, %125, !dbg !34
  %127 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %128 = bitcast i32 %127 to float, !dbg !23
  %129 = fsub float %128, %110, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %131 = bitcast i32 %130 to float, !dbg !23
  %132 = fsub float %131, %115, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %134 = bitcast i32 %133 to float, !dbg !23
  %135 = fsub float %134, %120, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = fsub float %137, %125, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !31
  %140 = bitcast i32 %139 to float, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !31
  %142 = bitcast i32 %141 to float, !dbg !31
  %143 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !31
  %146 = bitcast i32 %145 to float, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %148 = bitcast i32 %147 to float, !dbg !29
  %149 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %152 = bitcast i32 %151 to float, !dbg !29
  %153 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %156 = bitcast i32 %155 to float, !dbg !21
  %157 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %158 = bitcast i32 %157 to float, !dbg !21
  %159 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %160 = bitcast i32 %159 to float, !dbg !21
  %161 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %162 = bitcast i32 %161 to float, !dbg !21
  %163 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !21
  %164 = bitcast i32 %163 to float, !dbg !21
  %165 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !21
  %166 = bitcast i32 %165 to float, !dbg !21
  %167 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !21
  %168 = bitcast i32 %167 to float, !dbg !21
  %169 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !21
  %170 = bitcast i32 %169 to float, !dbg !21
  %171 = or disjoint i32 %11, %17, !dbg !13
  %.frozen = freeze i32 %171, !dbg !35
  %172 = sdiv i32 %.frozen, 256, !dbg !35
  %173 = mul i32 %172, 256, !dbg !36
  %.decomposed = sub i32 %.frozen, %173, !dbg !36
  %174 = or disjoint i32 %21, %15, !dbg !16
  %175 = icmp slt i32 %174, 256, !dbg !17
  %176 = or disjoint i32 %21, %14, !dbg !16
  %177 = icmp slt i32 %176, 256, !dbg !17
  %178 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !37
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !37
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !37
  %182 = fmul float %138, %178, !dbg !38
  %183 = fmul float %135, %179, !dbg !38
  %184 = fmul float %132, %180, !dbg !38
  %185 = fmul float %129, %181, !dbg !38
  %186 = fmul float %126, %178, !dbg !38
  %187 = fmul float %121, %179, !dbg !38
  %188 = fmul float %116, %180, !dbg !38
  %189 = fmul float %111, %181, !dbg !38
  %190 = fmul float %182, %154, !dbg !39
  %191 = fmul float %183, %152, !dbg !39
  %192 = fmul float %184, %150, !dbg !39
  %193 = fmul float %185, %148, !dbg !39
  %194 = fmul float %186, %154, !dbg !39
  %195 = fmul float %187, %152, !dbg !39
  %196 = fmul float %188, %150, !dbg !39
  %197 = fmul float %189, %148, !dbg !39
  %198 = fadd float %190, %146, !dbg !40
  %199 = fadd float %191, %144, !dbg !40
  %200 = fadd float %192, %142, !dbg !40
  %201 = fadd float %193, %140, !dbg !40
  %202 = fadd float %194, %146, !dbg !40
  %203 = fadd float %195, %144, !dbg !40
  %204 = fadd float %196, %142, !dbg !40
  %205 = fadd float %197, %140, !dbg !40
  %206 = fadd float %198, %170, !dbg !41
  %207 = fadd float %199, %168, !dbg !41
  %208 = fadd float %200, %166, !dbg !41
  %209 = fadd float %201, %164, !dbg !41
  %210 = fadd float %202, %162, !dbg !41
  %211 = fadd float %203, %160, !dbg !41
  %212 = fadd float %204, %158, !dbg !41
  %213 = fadd float %205, %156, !dbg !41
  %214 = shl i32 %176, 8, !dbg !42
  %215 = shl i32 %174, 8, !dbg !42
  %216 = shl i32 %172, 16, !dbg !43
  %217 = add i32 %216, %.decomposed, !dbg !44
  %218 = add i32 %217, %214, !dbg !45
  %219 = add i32 %217, %215, !dbg !45
  %220 = sext i32 %218 to i64, !dbg !46
  %221 = getelementptr float, ptr addrspace(1) %6, i64 %220, !dbg !46
  %222 = sext i32 %219 to i64, !dbg !46
  %223 = getelementptr float, ptr addrspace(1) %6, i64 %222, !dbg !46
  %224 = shl i32 %12, 7, !dbg !47
  %225 = and i32 %224, 896, !dbg !47
  %226 = or disjoint i32 %225, %14, !dbg !47
  %227 = and i32 %16, 508, !dbg !47
  %228 = lshr exact i32 %225, 3, !dbg !47
  %229 = or disjoint i32 %228, %226, !dbg !47
  %230 = zext nneg i32 %229 to i64, !dbg !47
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %230, !dbg !47
  %232 = bitcast float %206 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !47
  %233 = or disjoint i32 %226, 32, !dbg !47
  %234 = lshr i32 %233, 3, !dbg !47
  %235 = and i32 %234, 116, !dbg !47
  %236 = add nuw nsw i32 %235, %233, !dbg !47
  %237 = zext nneg i32 %236 to i64, !dbg !47
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %237, !dbg !47
  %239 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !47
  %240 = or disjoint i32 %226, 64, !dbg !47
  %241 = lshr i32 %240, 3, !dbg !47
  %242 = and i32 %241, 120, !dbg !47
  %243 = add nuw nsw i32 %242, %240, !dbg !47
  %244 = zext nneg i32 %243 to i64, !dbg !47
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !47
  %246 = bitcast float %208 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !47
  %247 = or disjoint i32 %226, 96, !dbg !47
  %248 = lshr i32 %247, 3, !dbg !47
  %249 = and i32 %248, 124, !dbg !47
  %250 = add nuw nsw i32 %249, %247, !dbg !47
  %251 = zext nneg i32 %250 to i64, !dbg !47
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !47
  %253 = bitcast float %209 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !47
  %254 = or disjoint i32 %226, 16, !dbg !47
  %255 = add nuw nsw i32 %254, %228, !dbg !47
  %256 = zext nneg i32 %255 to i64, !dbg !47
  %257 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %256, !dbg !47
  %258 = bitcast float %210 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !47
  %259 = or disjoint i32 %226, 48, !dbg !47
  %260 = lshr i32 %259, 3, !dbg !47
  %261 = and i32 %260, 116, !dbg !47
  %262 = add nuw nsw i32 %261, %259, !dbg !47
  %263 = zext nneg i32 %262 to i64, !dbg !47
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %263, !dbg !47
  %265 = bitcast float %211 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !47
  %266 = or disjoint i32 %226, 80, !dbg !47
  %267 = lshr i32 %266, 3, !dbg !47
  %268 = and i32 %267, 120, !dbg !47
  %269 = add nuw nsw i32 %268, %266, !dbg !47
  %270 = zext nneg i32 %269 to i64, !dbg !47
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !47
  %272 = bitcast float %212 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !47
  %273 = or disjoint i32 %226, 112, !dbg !47
  %274 = lshr i32 %273, 3, !dbg !47
  %275 = and i32 %274, 124, !dbg !47
  %276 = add nuw nsw i32 %275, %273, !dbg !47
  %277 = zext nneg i32 %276 to i64, !dbg !47
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %277, !dbg !47
  %279 = bitcast float %213 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %280 = lshr i32 %16, 3, !dbg !47
  %281 = and i32 %280, 60, !dbg !47
  %282 = add nuw nsw i32 %281, %227, !dbg !47
  %283 = zext nneg i32 %282 to i64, !dbg !47
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !47
  %285 = or disjoint i32 %227, 512, !dbg !47
  %286 = lshr i32 %285, 3, !dbg !47
  %287 = and i32 %286, 124, !dbg !47
  %288 = add nuw nsw i32 %287, %285, !dbg !47
  %289 = zext nneg i32 %288 to i64, !dbg !47
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %289, !dbg !47
  %291 = load <4 x i32>, ptr addrspace(3) %290, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %284, align 16, !dbg !47
  %292 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 4, !dbg !47
  %.extract8 = load i32, ptr addrspace(3) %292, align 4, !dbg !47
  %293 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 8, !dbg !47
  %.extract9 = load i32, ptr addrspace(3) %293, align 8, !dbg !47
  %294 = getelementptr inbounds i8, ptr addrspace(3) %284, i64 12, !dbg !47
  %.extract10 = load i32, ptr addrspace(3) %294, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %221, i1 %177) #4, !dbg !47
  %.extract11 = extractelement <4 x i32> %291, i64 0, !dbg !47
  %.extract12 = extractelement <4 x i32> %291, i64 1, !dbg !47
  %.extract13 = extractelement <4 x i32> %291, i64 2, !dbg !47
  %.extract14 = extractelement <4 x i32> %291, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %223, i1 %175) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4frxsey4iwjr5trqs6hk72r677jec4bfclxen7aaofznvaj5xvl.py", directory: "inductor_cache/4f")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 26, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 46, column: 19, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 50, column: 34, scope: !7)
!43 = !DILocation(line: 50, column: 45, scope: !7)
!44 = !DILocation(line: 50, column: 30, scope: !7)
!45 = !DILocation(line: 50, column: 39, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 57, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
