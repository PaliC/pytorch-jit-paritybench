; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 12, !dbg !12
  %.lobit1 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit1, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = icmp slt i32 %12, 256, !dbg !14
  %18 = icmp slt i32 %13, 256, !dbg !14
  %19 = icmp slt i32 %14, 256, !dbg !14
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 8, !dbg !16
  %24 = lshr i32 %8, 2, !dbg !17
  %25 = and i32 %24, 63, !dbg !17
  %26 = or disjoint i32 %25, 64, !dbg !17
  %27 = or disjoint i32 %25, 128, !dbg !17
  %28 = or disjoint i32 %25, 192, !dbg !17
  %29 = and i32 %9, 252, !dbg !17
  %30 = or disjoint i32 %23, %25, !dbg !18
  %31 = or disjoint i32 %23, %26, !dbg !18
  %32 = or disjoint i32 %23, %27, !dbg !18
  %33 = or disjoint i32 %23, %28, !dbg !18
  %34 = or disjoint i32 %23, %29, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %35 = sdiv i32 %.frozen, 64, !dbg !19
  %36 = mul i32 %35, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = shl i32 %30, 6, !dbg !21
  %38 = shl i32 %31, 6, !dbg !21
  %39 = shl i32 %32, 6, !dbg !21
  %40 = shl i32 %33, 6, !dbg !21
  %41 = shl i32 %35, 18, !dbg !22
  %42 = add i32 %41, %.decomposed, !dbg !23
  %43 = add i32 %42, %37, !dbg !24
  %44 = add i32 %42, %38, !dbg !24
  %45 = add i32 %42, %39, !dbg !24
  %46 = add i32 %42, %40, !dbg !24
  %47 = sext i32 %43 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %44 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = sext i32 %45 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = sext i32 %46 to i64, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %17) #2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %17) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %17) #2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !26
  %75 = shl i32 %13, 12, !dbg !27
  %76 = shl i32 %14, 12, !dbg !27
  %77 = shl i32 %15, 12, !dbg !27
  %78 = shl i32 %16, 12, !dbg !27
  %79 = add i32 %34, %75, !dbg !28
  %80 = add i32 %34, %76, !dbg !28
  %81 = add i32 %34, %77, !dbg !28
  %82 = add i32 %34, %78, !dbg !28
  %83 = sext i32 %79 to i64, !dbg !29
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !29
  %85 = sext i32 %80 to i64, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !29
  %87 = sext i32 %81 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !29
  %89 = sext i32 %82 to i64, !dbg !29
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !29
  %91 = shl i32 %8, 10, !dbg !30
  %92 = and i32 %91, 3072, !dbg !30
  %93 = or disjoint i32 %92, %25, !dbg !30
  %94 = and i32 %9, 1020, !dbg !30
  %95 = lshr exact i32 %92, 6, !dbg !30
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !30
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !30
  %98 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !30
  %99 = or disjoint i32 %93, 256, !dbg !30
  %100 = lshr i32 %99, 8, !dbg !30
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !30
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !30
  %103 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !30
  %104 = or disjoint i32 %93, 512, !dbg !30
  %105 = lshr i32 %104, 8, !dbg !30
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !30
  %108 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !30
  %109 = or disjoint i32 %93, 768, !dbg !30
  %110 = lshr i32 %109, 8, !dbg !30
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !30
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !30
  %113 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !30
  %114 = or disjoint i32 %93, 64, !dbg !30
  %115 = getelementptr float, ptr addrspace(3) %96, i32 %114, !dbg !30
  %116 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !30
  %117 = or disjoint i32 %93, 320, !dbg !30
  %118 = lshr i32 %117, 8, !dbg !30
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !30
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !30
  %121 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !30
  %122 = or disjoint i32 %93, 576, !dbg !30
  %123 = lshr i32 %122, 8, !dbg !30
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !30
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !30
  %126 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !30
  %127 = or disjoint i32 %93, 832, !dbg !30
  %128 = lshr i32 %127, 8, !dbg !30
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !30
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !30
  %131 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !30
  %132 = or disjoint i32 %93, 128, !dbg !30
  %133 = getelementptr float, ptr addrspace(3) %96, i32 %132, !dbg !30
  %134 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !30
  %135 = or disjoint i32 %93, 384, !dbg !30
  %136 = lshr i32 %135, 8, !dbg !30
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !30
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !30
  %139 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !30
  %140 = or disjoint i32 %93, 640, !dbg !30
  %141 = lshr i32 %140, 8, !dbg !30
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !30
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !30
  %144 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !30
  %145 = or disjoint i32 %93, 896, !dbg !30
  %146 = lshr i32 %145, 8, !dbg !30
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %146, !dbg !30
  %148 = getelementptr float, ptr addrspace(3) %147, i32 %145, !dbg !30
  %149 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #2, !dbg !30
  %150 = or disjoint i32 %93, 192, !dbg !30
  %151 = getelementptr float, ptr addrspace(3) %96, i32 %150, !dbg !30
  %152 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !30
  %153 = or disjoint i32 %93, 448, !dbg !30
  %154 = lshr i32 %153, 8, !dbg !30
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !30
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !30
  %157 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !30
  %158 = or disjoint i32 %93, 704, !dbg !30
  %159 = lshr i32 %158, 8, !dbg !30
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !30
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !30
  %162 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !30
  %163 = or disjoint i32 %93, 960, !dbg !30
  %164 = lshr i32 %163, 8, !dbg !30
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i32 %164, !dbg !30
  %166 = getelementptr float, ptr addrspace(3) %165, i32 %163, !dbg !30
  %167 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %168 = lshr i32 %94, 8, !dbg !30
  %169 = or disjoint i32 %168, %94, !dbg !30
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !30
  %171 = load i32, ptr addrspace(3) %170, align 4, !dbg !30
  %172 = or disjoint i32 %94, 1, !dbg !30
  %173 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %168, !dbg !30
  %174 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %172, !dbg !30
  %175 = load i32, ptr addrspace(3) %174, align 4, !dbg !30
  %176 = or disjoint i32 %94, 2, !dbg !30
  %177 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %176, !dbg !30
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !30
  %179 = or disjoint i32 %94, 3, !dbg !30
  %180 = getelementptr inbounds float, ptr addrspace(3) %173, i32 %179, !dbg !30
  %181 = load i32, ptr addrspace(3) %180, align 4, !dbg !30
  %182 = or disjoint i32 %94, 1024, !dbg !30
  %183 = lshr i32 %182, 8, !dbg !30
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !30
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %182, !dbg !30
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !30
  %187 = or disjoint i32 %94, 1025, !dbg !30
  %188 = lshr i32 %187, 8, !dbg !30
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !30
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %187, !dbg !30
  %191 = load i32, ptr addrspace(3) %190, align 4, !dbg !30
  %192 = or disjoint i32 %94, 1026, !dbg !30
  %193 = lshr i32 %192, 8, !dbg !30
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !30
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !30
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !30
  %197 = or disjoint i32 %94, 1027, !dbg !30
  %198 = lshr i32 %197, 8, !dbg !30
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !30
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !30
  %201 = load i32, ptr addrspace(3) %200, align 4, !dbg !30
  %202 = or disjoint i32 %94, 2048, !dbg !30
  %203 = lshr i32 %202, 8, !dbg !30
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !30
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !30
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !30
  %207 = or disjoint i32 %94, 2049, !dbg !30
  %208 = lshr i32 %207, 8, !dbg !30
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !30
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !30
  %211 = load i32, ptr addrspace(3) %210, align 4, !dbg !30
  %212 = or disjoint i32 %94, 2050, !dbg !30
  %213 = lshr i32 %212, 8, !dbg !30
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !30
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !30
  %216 = load i32, ptr addrspace(3) %215, align 4, !dbg !30
  %217 = or disjoint i32 %94, 2051, !dbg !30
  %218 = lshr i32 %217, 8, !dbg !30
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !30
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !30
  %221 = load i32, ptr addrspace(3) %220, align 4, !dbg !30
  %222 = or disjoint i32 %94, 3072, !dbg !30
  %223 = lshr i32 %222, 8, !dbg !30
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %223, !dbg !30
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %222, !dbg !30
  %226 = load i32, ptr addrspace(3) %225, align 4, !dbg !30
  %227 = or disjoint i32 %94, 3073, !dbg !30
  %228 = lshr i32 %227, 8, !dbg !30
  %229 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %228, !dbg !30
  %230 = getelementptr inbounds float, ptr addrspace(3) %229, i32 %227, !dbg !30
  %231 = load i32, ptr addrspace(3) %230, align 4, !dbg !30
  %232 = or disjoint i32 %94, 3074, !dbg !30
  %233 = lshr i32 %232, 8, !dbg !30
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !30
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %232, !dbg !30
  %236 = load i32, ptr addrspace(3) %235, align 4, !dbg !30
  %237 = or disjoint i32 %94, 3075, !dbg !30
  %238 = lshr i32 %237, 8, !dbg !30
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !30
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !30
  %241 = load i32, ptr addrspace(3) %240, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %171, i32 %175, i32 %178, i32 %181, ptr addrspace(1) %84, i1 %18) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %191, i32 %196, i32 %201, ptr addrspace(1) %86, i1 %19) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %211, i32 %216, i32 %221, ptr addrspace(1) %88, i1 %20) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %226, i32 %231, i32 %236, i32 %241, ptr addrspace(1) %90, i1 %21) #2, !dbg !30
  %242 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !31
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !31
  %244 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %245 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %56, i32 %57, i32 %58, i32 %59, ptr addrspace(1) %242, i1 %17) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %61, i32 %62, i32 %63, i32 %64, ptr addrspace(1) %243, i1 %17) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %66, i32 %67, i32 %68, i32 %69, ptr addrspace(1) %244, i1 %17) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %71, i32 %72, i32 %73, i32 %74, ptr addrspace(1) %245, i1 %17) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpszzrez4pflvtdfu6ka6fr3qa4lae7adgucrrospbxrvogsa2or.py", directory: "inductor_cache/ps")
!4 = !{ptr @triton_poi_fused_convolution_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_6", linkageName: "triton_poi_fused_convolution_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 46, scope: !7)
!31 = !DILocation(line: 34, column: 25, scope: !7)
!32 = !DILocation(line: 34, column: 56, scope: !7)
!33 = !DILocation(line: 34, column: 4, scope: !7)
