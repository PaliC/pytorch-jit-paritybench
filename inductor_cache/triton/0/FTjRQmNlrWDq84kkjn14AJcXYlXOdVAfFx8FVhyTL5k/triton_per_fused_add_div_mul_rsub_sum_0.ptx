//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_per_fused_add_div_mul_rsub_sum_0 // -- Begin function triton_per_fused_add_div_mul_rsub_sum_0
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_per_fused_add_div_mul_rsub_sum_0
.visible .entry triton_per_fused_add_div_mul_rsub_sum_0(
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sum_0_param_0,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sum_0_param_1,
	.param .u64 .ptr .global .align 1 triton_per_fused_add_div_mul_rsub_sum_0_param_2,
	.param .u32 triton_per_fused_add_div_mul_rsub_sum_0_param_3
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<15>;
	.reg .b32 	%r<85>;
	.reg .f32 	%f<91>;
	.reg .b64 	%rd<7>;
	.loc	1 19 0                          // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:19:0

// %bb.0:
	ld.param.u64 	%rd3, [triton_per_fused_add_div_mul_rsub_sum_0_param_0];
	ld.param.u64 	%rd4, [triton_per_fused_add_div_mul_rsub_sum_0_param_1];
$L__tmp0:
	.loc	1 27 26                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:27:26
	mov.u32 	%r43, %tid.x;
	and.b32  	%r44, %r43, 31;
	ld.param.u64 	%rd5, [triton_per_fused_add_div_mul_rsub_sum_0_param_2];
	shl.b32 	%r45, %r43, 2;
	and.b32  	%r46, %r45, 252;
	.loc	1 31 30                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:31:30
	mul.wide.u32 	%rd6, %r46, 4;
	add.s64 	%rd1, %rd4, %rd6;
	mov.pred 	%p1, -1;
	.loc	1 31 35                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:31:35
	// begin inline asm
	mov.u32 %r1, 0x0;
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	@%p1 ld.global.v4.b32 { %r1, %r2, %r3, %r4 }, [ %rd1 + 0 ];
	// end inline asm
	mov.b32 	%f9, %r1;
	mov.b32 	%f10, %r2;
	mov.b32 	%f11, %r3;
	mov.b32 	%f12, %r4;
	.loc	1 32 30                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:32:30
	add.s64 	%rd2, %rd5, %rd6;
	.loc	1 32 35                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:32:35
	// begin inline asm
	mov.u32 %r5, 0x0;
	mov.u32 %r6, 0x0;
	mov.u32 %r7, 0x0;
	mov.u32 %r8, 0x0;
	@%p1 ld.global.v4.b32 { %r5, %r6, %r7, %r8 }, [ %rd2 + 0 ];
	// end inline asm
	mov.b32 	%f13, %r5;
	mov.b32 	%f14, %r6;
	mov.b32 	%f15, %r7;
	mov.b32 	%f16, %r8;
	mov.f32 	%f17, 0f00000000;
$L__tmp1:
	.loc	2 47 30                         // standard.py:47:30
	sub.f32 	%f18, %f17, %f9;
	sub.f32 	%f19, %f17, %f10;
	sub.f32 	%f20, %f17, %f11;
	sub.f32 	%f21, %f17, %f12;
	.loc	2 47 29                         // standard.py:47:29
	mul.f32 	%f2, %f18, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f1, %f2;
	// end inline asm
	mul.f32 	%f4, %f19, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f3, %f4;
	// end inline asm
	mul.f32 	%f6, %f20, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f5, %f6;
	// end inline asm
	mul.f32 	%f8, %f21, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f7, %f8;
	// end inline asm
	.loc	2 47 20                         // standard.py:47:20
	add.f32 	%f22, %f1, 0f3F800000;
	add.f32 	%f23, %f3, 0f3F800000;
	add.f32 	%f24, %f5, 0f3F800000;
	add.f32 	%f25, %f7, 0f3F800000;
	.loc	2 47 16                         // standard.py:47:16
	mov.b32 	%r11, %f22;
	mov.b32 	%r10, 1065353216;
	// begin inline asm
	div.full.f32 %r9, %r10, %r11;
	// end inline asm
	mov.b32 	%f26, %r9;
	mov.b32 	%r14, %f23;
	// begin inline asm
	div.full.f32 %r12, %r10, %r14;
	// end inline asm
	mov.b32 	%f27, %r12;
	mov.b32 	%r17, %f24;
	// begin inline asm
	div.full.f32 %r15, %r10, %r17;
	// end inline asm
	mov.b32 	%f28, %r15;
	mov.b32 	%r20, %f25;
	// begin inline asm
	div.full.f32 %r18, %r10, %r20;
	// end inline asm
	mov.b32 	%f29, %r18;
$L__tmp2:
	.loc	1 34 18                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:34:18
	mul.f32 	%f30, %f27, %f14;
$L__tmp3:
	.loc	2 256 15                        // standard.py:256:15
	fma.rn.f32 	%f31, %f26, %f13, %f30;
	fma.rn.f32 	%f32, %f28, %f15, %f31;
	fma.rn.f32 	%f33, %f29, %f16, %f32;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r47, %f33;
	shfl.sync.bfly.b32	%r48, %r47, 16, 31, -1;
	mov.b32 	%f34, %r48;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f33, %f34;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r49, %f35;
	shfl.sync.bfly.b32	%r50, %r49, 8, 31, -1;
	mov.b32 	%f36, %r50;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f37, %f35, %f36;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r51, %f37;
	shfl.sync.bfly.b32	%r52, %r51, 4, 31, -1;
	mov.b32 	%f38, %r52;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f39, %f37, %f38;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r53, %f39;
	shfl.sync.bfly.b32	%r54, %r53, 2, 31, -1;
	mov.b32 	%f40, %r54;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f41, %f39, %f40;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r55, %f41;
	shfl.sync.bfly.b32	%r56, %r55, 1, 31, -1;
	mov.b32 	%f42, %r56;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f43, %f41, %f42;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p3, %r44, 0;
	shr.u32 	%r57, %r43, 3;
	and.b32  	%r58, %r57, 4;
	mov.u32 	%r59, global_smem;
	add.s32 	%r21, %r59, %r58;
	mov.b32 	%r22, %f43;
	// begin inline asm
	@%p3 st.shared.b32 [ %r21 + 0 ], %r22;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p4, %r43, 2;
	add.s32 	%r24, %r59, %r45;
	// begin inline asm
	@%p4 ld.shared.b32 %r23, [ %r24 + 0 ];
	// end inline asm
	mov.b32 	%f44, %r23;
	shfl.sync.bfly.b32	%r60, %r23, 1, 31, -1;
	mov.b32 	%f45, %r60;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f46, %f44, %f45;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r61, %r43, 1;
	setp.eq.b32 	%p13, %r61, 1;
	not.pred 	%p14, %p13;
	and.pred  	%p5, %p4, %p14;
	mov.b32 	%r26, %f46;
	// begin inline asm
	@%p5 st.shared.b32 [ %r24 + 0 ], %r26;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f47, [global_smem];
$L__tmp4:
	.loc	3 73 15                         // triton_helpers.py:73:15
	add.f32 	%f48, %f47, 0f00000000;
$L__tmp5:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f49, %f26, %f27;
	add.f32 	%f50, %f49, %f28;
	add.f32 	%f51, %f50, %f29;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r62, %f51;
	shfl.sync.bfly.b32	%r63, %r62, 16, 31, -1;
	mov.b32 	%f52, %r63;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f53, %f51, %f52;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r64, %f53;
	shfl.sync.bfly.b32	%r65, %r64, 8, 31, -1;
	mov.b32 	%f54, %r65;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f55, %f53, %f54;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r66, %f55;
	shfl.sync.bfly.b32	%r67, %r66, 4, 31, -1;
	mov.b32 	%f56, %r67;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f57, %f55, %f56;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r68, %f57;
	shfl.sync.bfly.b32	%r69, %r68, 2, 31, -1;
	mov.b32 	%f58, %r69;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f59, %f57, %f58;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r70, %f59;
	shfl.sync.bfly.b32	%r71, %r70, 1, 31, -1;
	mov.b32 	%f60, %r71;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f61, %f59, %f60;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r28, %f61;
	// begin inline asm
	@%p3 st.shared.b32 [ %r21 + 0 ], %r28;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p4 ld.shared.b32 %r29, [ %r24 + 0 ];
	// end inline asm
	mov.b32 	%f62, %r29;
	shfl.sync.bfly.b32	%r72, %r29, 1, 31, -1;
	mov.b32 	%f63, %r72;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f64, %f62, %f63;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r32, %f64;
	// begin inline asm
	@%p5 st.shared.b32 [ %r24 + 0 ], %r32;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f65, [global_smem];
$L__tmp6:
	.loc	3 73 15                         // triton_helpers.py:73:15
	add.f32 	%f66, %f65, 0f00000000;
$L__tmp7:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f67, %f13, %f14;
	add.f32 	%f68, %f67, %f15;
	add.f32 	%f69, %f68, %f16;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r73, %f69;
	shfl.sync.bfly.b32	%r74, %r73, 16, 31, -1;
	mov.b32 	%f70, %r74;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f71, %f69, %f70;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r75, %f71;
	shfl.sync.bfly.b32	%r76, %r75, 8, 31, -1;
	mov.b32 	%f72, %r76;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f73, %f71, %f72;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r77, %f73;
	shfl.sync.bfly.b32	%r78, %r77, 4, 31, -1;
	mov.b32 	%f74, %r78;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f75, %f73, %f74;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r79, %f75;
	shfl.sync.bfly.b32	%r80, %r79, 2, 31, -1;
	mov.b32 	%f76, %r80;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f77, %f75, %f76;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r81, %f77;
	shfl.sync.bfly.b32	%r82, %r81, 1, 31, -1;
	mov.b32 	%f78, %r82;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f79, %f77, %f78;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r34, %f79;
	// begin inline asm
	@%p3 st.shared.b32 [ %r21 + 0 ], %r34;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p4 ld.shared.b32 %r35, [ %r24 + 0 ];
	// end inline asm
	mov.b32 	%f80, %r35;
	shfl.sync.bfly.b32	%r83, %r35, 1, 31, -1;
	mov.b32 	%f81, %r83;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f82, %f80, %f81;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r38, %f82;
	// begin inline asm
	@%p5 st.shared.b32 [ %r24 + 0 ], %r38;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f83, [global_smem];
$L__tmp8:
	.loc	3 73 15                         // triton_helpers.py:73:15
	add.f32 	%f84, %f83, 0f00000000;
$L__tmp9:
	.loc	1 44 20                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:44:20
	fma.rn.f32 	%f85, %f48, 0f40000000, 0f3F800000;
	.loc	1 45 19                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:45:19
	add.f32 	%f86, %f66, %f84;
	.loc	1 46 20                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:46:20
	add.f32 	%f87, %f86, 0f3F800000;
	.loc	1 47 20                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:47:20
	mov.b32 	%r41, %f87;
	mov.b32 	%r40, %f85;
	// begin inline asm
	div.full.f32 %r39, %r40, %r41;
	// end inline asm
	mov.b32 	%f88, %r39;
	mov.f32 	%f89, 0f3F800000;
	.loc	1 48 20                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:48:20
	sub.f32 	%f90, %f89, %f88;
	.loc	1 49 4                          // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:49:4
	bar.sync 	0;
	.loc	1 50 63                         // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:50:63
	and.b32  	%r84, %r43, 63;
	setp.eq.s32 	%p12, %r84, 0;
	mov.b32 	%r42, %f90;
	// begin inline asm
	@%p12 st.global.b32 [ %rd3 + 0 ], { %r42 };
	// end inline asm
	.loc	1 50 4                          // cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py:50:4
	ret;
$L__tmp10:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/yq/cyq64f5vtk4c5spfxrhpwmwplk2izkrknf264mnd4r5n6virm2yd.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.file	3 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 328                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0x141 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 121
.b8 113
.b8 54
.b8 52
.b8 102
.b8 53
.b8 118
.b8 116
.b8 107
.b8 52
.b8 99
.b8 53
.b8 115
.b8 112
.b8 102
.b8 120
.b8 114
.b8 104
.b8 112
.b8 119
.b8 109
.b8 119
.b8 112
.b8 108
.b8 107
.b8 50
.b8 105
.b8 122
.b8 107
.b8 114
.b8 107
.b8 110
.b8 102
.b8 50
.b8 54
.b8 52
.b8 109
.b8 110
.b8 100
.b8 52
.b8 114
.b8 53
.b8 110
.b8 54
.b8 118
.b8 105
.b8 114
.b8 109
.b8 50
.b8 121
.b8 100
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 121
.b8 113
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x2a DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 112
.b8 101
.b8 114
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 100
.b8 105
.b8 118
.b8 95
.b8 109
.b8 117
.b8 108
.b8 95
.b8 114
.b8 115
.b8 117
.b8 98
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 48
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x8d:0xbe DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xa2:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 33                                  // DW_AT_call_line
.b8 22                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xba:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 57                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xd2:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp4                           // DW_AT_low_pc
.b64 $L__tmp5                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 36                                  // DW_AT_call_line
.b8 44                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xea:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp5                           // DW_AT_low_pc
.b64 $L__tmp6                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 38                                  // DW_AT_call_line
.b8 57                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x102:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp6                           // DW_AT_low_pc
.b64 $L__tmp7                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 38                                  // DW_AT_call_line
.b8 44                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x11a:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp7                           // DW_AT_low_pc
.b64 $L__tmp8                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 40                                  // DW_AT_call_line
.b8 59                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0x132:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp8                           // DW_AT_low_pc
.b64 $L__tmp9                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 40                                  // DW_AT_call_line
.b8 45                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
