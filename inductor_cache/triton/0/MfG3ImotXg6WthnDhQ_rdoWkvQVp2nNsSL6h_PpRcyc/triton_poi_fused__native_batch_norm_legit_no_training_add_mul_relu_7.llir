; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %14, 6, !dbg !12
  %15 = and i32 %.lobit1, 3, !dbg !12
  %16 = or disjoint i32 %15, 4, !dbg !12
  %17 = or disjoint i32 %15, 8, !dbg !12
  %18 = or disjoint i32 %15, 12, !dbg !12
  %19 = shl i32 %14, 2, !dbg !12
  %20 = or disjoint i32 %13, %15, !dbg !13
  %21 = or disjoint i32 %13, %16, !dbg !13
  %22 = or disjoint i32 %13, %17, !dbg !13
  %23 = or disjoint i32 %13, %18, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %25 = shl i32 %24, 8, !dbg !15
  %26 = and i32 %19, 252, !dbg !16
  %27 = and i32 %14, 255, !dbg !16
  %28 = or disjoint i32 %25, %26, !dbg !17
  %29 = or disjoint i32 %25, %27, !dbg !17
  %30 = icmp slt i32 %28, 2048, !dbg !18
  %31 = icmp slt i32 %29, 2048, !dbg !18
  %32 = shl i32 %20, 11, !dbg !19
  %33 = shl i32 %21, 11, !dbg !19
  %34 = shl i32 %22, 11, !dbg !19
  %35 = shl i32 %23, 11, !dbg !19
  %36 = add i32 %28, %32, !dbg !20
  %37 = add i32 %28, %33, !dbg !20
  %38 = add i32 %28, %34, !dbg !20
  %39 = add i32 %28, %35, !dbg !20
  %40 = sext i32 %36 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %37 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %38 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %39 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %30) #4, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = bitcast i32 %51 to float, !dbg !22
  %56 = bitcast i32 %52 to float, !dbg !22
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %30) #4, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !22
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = bitcast i32 %59 to float, !dbg !22
  %64 = bitcast i32 %60 to float, !dbg !22
  %65 = bitcast i32 %61 to float, !dbg !22
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %30) #4, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !22
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !22
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !22
  %71 = bitcast i32 %67 to float, !dbg !22
  %72 = bitcast i32 %68 to float, !dbg !22
  %73 = bitcast i32 %69 to float, !dbg !22
  %74 = bitcast i32 %70 to float, !dbg !22
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %30) #4, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !22
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !22
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !22
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !22
  %80 = bitcast i32 %76 to float, !dbg !22
  %81 = bitcast i32 %77 to float, !dbg !22
  %82 = bitcast i32 %78 to float, !dbg !22
  %83 = bitcast i32 %79 to float, !dbg !22
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !23
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !23
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !23
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %30) #4, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = bitcast i32 %91 to float, !dbg !24
  %96 = bitcast i32 %92 to float, !dbg !24
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %85, i1 %30) #4, !dbg !24
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !24
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !24
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !24
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !24
  %102 = bitcast i32 %98 to float, !dbg !24
  %103 = bitcast i32 %99 to float, !dbg !24
  %104 = bitcast i32 %100 to float, !dbg !24
  %105 = bitcast i32 %101 to float, !dbg !24
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %30) #4, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !24
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !24
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !24
  %111 = bitcast i32 %107 to float, !dbg !24
  %112 = bitcast i32 %108 to float, !dbg !24
  %113 = bitcast i32 %109 to float, !dbg !24
  %114 = bitcast i32 %110 to float, !dbg !24
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %30) #4, !dbg !24
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !24
  %120 = bitcast i32 %116 to float, !dbg !24
  %121 = bitcast i32 %117 to float, !dbg !24
  %122 = bitcast i32 %118 to float, !dbg !24
  %123 = bitcast i32 %119 to float, !dbg !24
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !25
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !25
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !25
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !25
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %30) #4, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !26
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !26
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !26
  %133 = bitcast i32 %129 to float, !dbg !26
  %134 = bitcast i32 %130 to float, !dbg !26
  %135 = bitcast i32 %131 to float, !dbg !26
  %136 = bitcast i32 %132 to float, !dbg !26
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %30) #4, !dbg !26
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !26
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !26
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !26
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !26
  %142 = bitcast i32 %138 to float, !dbg !26
  %143 = bitcast i32 %139 to float, !dbg !26
  %144 = bitcast i32 %140 to float, !dbg !26
  %145 = bitcast i32 %141 to float, !dbg !26
  %146 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %30) #4, !dbg !26
  %147 = extractvalue { i32, i32, i32, i32 } %146, 0, !dbg !26
  %148 = extractvalue { i32, i32, i32, i32 } %146, 1, !dbg !26
  %149 = extractvalue { i32, i32, i32, i32 } %146, 2, !dbg !26
  %150 = extractvalue { i32, i32, i32, i32 } %146, 3, !dbg !26
  %151 = bitcast i32 %147 to float, !dbg !26
  %152 = bitcast i32 %148 to float, !dbg !26
  %153 = bitcast i32 %149 to float, !dbg !26
  %154 = bitcast i32 %150 to float, !dbg !26
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %127, i1 %30) #4, !dbg !26
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !26
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !26
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !26
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !26
  %160 = bitcast i32 %156 to float, !dbg !26
  %161 = bitcast i32 %157 to float, !dbg !26
  %162 = bitcast i32 %158 to float, !dbg !26
  %163 = bitcast i32 %159 to float, !dbg !26
  %164 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !27
  %165 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !27
  %166 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !27
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !27
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %30) #4, !dbg !28
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !28
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !28
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !28
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !28
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %165, i1 %30) #4, !dbg !28
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !28
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !28
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !28
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !28
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %166, i1 %30) #4, !dbg !28
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !28
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !28
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !28
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !28
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %30) #4, !dbg !28
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !28
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !28
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !28
  %188 = and i32 %19, 1020, !dbg !28
  %189 = lshr i32 %188, 8, !dbg !28
  %190 = or disjoint i32 %189, %188, !dbg !28
  %191 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %190, !dbg !28
  %192 = insertelement <1 x i32> poison, i32 %169, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !28
  %193 = or disjoint i32 %188, 1, !dbg !28
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !28
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %193, !dbg !28
  %196 = insertelement <1 x i32> poison, i32 %170, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #4, !dbg !28
  %197 = or disjoint i32 %188, 2, !dbg !28
  %198 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %197, !dbg !28
  %199 = insertelement <1 x i32> poison, i32 %171, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !28
  %200 = or disjoint i32 %188, 3, !dbg !28
  %201 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %200, !dbg !28
  %202 = insertelement <1 x i32> poison, i32 %172, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %27, !dbg !28
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %205 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 1028, !dbg !28
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !28
  %207 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 2056, !dbg !28
  %208 = load float, ptr addrspace(3) %207, align 4, !dbg !28
  %209 = getelementptr inbounds i8, ptr addrspace(3) %203, i32 3084, !dbg !28
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %211 = insertelement <1 x i32> poison, i32 %174, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %211, i1 true) #4, !dbg !28
  %212 = insertelement <1 x i32> poison, i32 %175, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %212, i1 true) #4, !dbg !28
  %213 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %213, i1 true) #4, !dbg !28
  %214 = insertelement <1 x i32> poison, i32 %177, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %214, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %215 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %216 = load float, ptr addrspace(3) %205, align 4, !dbg !28
  %217 = load float, ptr addrspace(3) %207, align 4, !dbg !28
  %218 = load float, ptr addrspace(3) %209, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %219 = insertelement <1 x i32> poison, i32 %179, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %219, i1 true) #4, !dbg !28
  %220 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %220, i1 true) #4, !dbg !28
  %221 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %221, i1 true) #4, !dbg !28
  %222 = insertelement <1 x i32> poison, i32 %182, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %222, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %223 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %224 = load float, ptr addrspace(3) %205, align 4, !dbg !28
  %225 = load float, ptr addrspace(3) %207, align 4, !dbg !28
  %226 = load float, ptr addrspace(3) %209, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %227 = insertelement <1 x i32> poison, i32 %184, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %227, i1 true) #4, !dbg !28
  %228 = insertelement <1 x i32> poison, i32 %185, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %228, i1 true) #4, !dbg !28
  %229 = insertelement <1 x i32> poison, i32 %186, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %229, i1 true) #4, !dbg !28
  %230 = insertelement <1 x i32> poison, i32 %187, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %230, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %231 = load float, ptr addrspace(3) %203, align 4, !dbg !28
  %232 = load float, ptr addrspace(3) %205, align 4, !dbg !28
  %233 = load float, ptr addrspace(3) %207, align 4, !dbg !28
  %234 = load float, ptr addrspace(3) %209, align 4, !dbg !28
  %235 = sext i32 %29 to i64, !dbg !29
  %236 = getelementptr float, ptr addrspace(1) %4, i64 %235, !dbg !29
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %31) #4, !dbg !30
  %238 = getelementptr float, ptr addrspace(1) %5, i64 %235, !dbg !31
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %31) #4, !dbg !32
  %240 = bitcast i32 %239 to float, !dbg !32
  %241 = getelementptr float, ptr addrspace(1) %6, i64 %235, !dbg !33
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %241, i1 %31) #4, !dbg !34
  %243 = getelementptr float, ptr addrspace(1) %7, i64 %235, !dbg !35
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %243, i1 %31) #4, !dbg !36
  %245 = fadd float %53, %93, !dbg !37
  %246 = fadd float %54, %94, !dbg !37
  %247 = fadd float %55, %95, !dbg !37
  %248 = fadd float %56, %96, !dbg !37
  %249 = fadd float %62, %102, !dbg !37
  %250 = fadd float %63, %103, !dbg !37
  %251 = fadd float %64, %104, !dbg !37
  %252 = fadd float %65, %105, !dbg !37
  %253 = fadd float %71, %111, !dbg !37
  %254 = fadd float %72, %112, !dbg !37
  %255 = fadd float %73, %113, !dbg !37
  %256 = fadd float %74, %114, !dbg !37
  %257 = fadd float %80, %120, !dbg !37
  %258 = fadd float %81, %121, !dbg !37
  %259 = fadd float %82, %122, !dbg !37
  %260 = fadd float %83, %123, !dbg !37
  %261 = fadd float %245, %133, !dbg !38
  %262 = fadd float %246, %134, !dbg !38
  %263 = fadd float %247, %135, !dbg !38
  %264 = fadd float %248, %136, !dbg !38
  %265 = fadd float %249, %142, !dbg !38
  %266 = fadd float %250, %143, !dbg !38
  %267 = fadd float %251, %144, !dbg !38
  %268 = fadd float %252, %145, !dbg !38
  %269 = fadd float %253, %151, !dbg !38
  %270 = fadd float %254, %152, !dbg !38
  %271 = fadd float %255, %153, !dbg !38
  %272 = fadd float %256, %154, !dbg !38
  %273 = fadd float %257, %160, !dbg !38
  %274 = fadd float %258, %161, !dbg !38
  %275 = fadd float %259, %162, !dbg !38
  %276 = fadd float %260, %163, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %277 = bitcast float %261 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %277, i1 true) #4, !dbg !38
  %278 = bitcast float %262 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %278, i1 true) #4, !dbg !38
  %279 = bitcast float %263 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %279, i1 true) #4, !dbg !38
  %280 = bitcast float %264 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %280, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %281 = load float, ptr addrspace(3) %203, align 4, !dbg !38
  %282 = load float, ptr addrspace(3) %205, align 4, !dbg !38
  %283 = load float, ptr addrspace(3) %207, align 4, !dbg !38
  %284 = load float, ptr addrspace(3) %209, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %285 = bitcast float %265 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %285, i1 true) #4, !dbg !38
  %286 = bitcast float %266 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %286, i1 true) #4, !dbg !38
  %287 = bitcast float %267 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %287, i1 true) #4, !dbg !38
  %288 = bitcast float %268 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %288, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %289 = load float, ptr addrspace(3) %203, align 4, !dbg !38
  %290 = load float, ptr addrspace(3) %205, align 4, !dbg !38
  %291 = load float, ptr addrspace(3) %207, align 4, !dbg !38
  %292 = load float, ptr addrspace(3) %209, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %293 = bitcast float %269 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %293, i1 true) #4, !dbg !38
  %294 = bitcast float %270 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %294, i1 true) #4, !dbg !38
  %295 = bitcast float %271 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %295, i1 true) #4, !dbg !38
  %296 = bitcast float %272 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %296, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %297 = load float, ptr addrspace(3) %203, align 4, !dbg !38
  %298 = load float, ptr addrspace(3) %205, align 4, !dbg !38
  %299 = load float, ptr addrspace(3) %207, align 4, !dbg !38
  %300 = load float, ptr addrspace(3) %209, align 4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %301 = bitcast float %273 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %301, i1 true) #4, !dbg !38
  %302 = bitcast float %274 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %302, i1 true) #4, !dbg !38
  %303 = bitcast float %275 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %303, i1 true) #4, !dbg !38
  %304 = bitcast float %276 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %304, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %305 = load float, ptr addrspace(3) %203, align 4, !dbg !38
  %306 = load float, ptr addrspace(3) %205, align 4, !dbg !38
  %307 = load float, ptr addrspace(3) %207, align 4, !dbg !38
  %308 = load float, ptr addrspace(3) %209, align 4, !dbg !38
  %309 = fadd float %240, 0x3EE4F8B580000000, !dbg !39
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %310, 0, !dbg !40
  %311 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !40
  %.not1.i = icmp eq i32 %311, 0, !dbg !40
  br i1 %.not.i, label %317, label %312, !dbg !40

312:                                              ; preds = %11
  br i1 %.not1.i, label %315, label %313, !dbg !40

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %309) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %309) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

317:                                              ; preds = %11
  br i1 %.not1.i, label %320, label %318, !dbg !40

318:                                              ; preds = %317
  %319 = tail call float @llvm.nvvm.sqrt.rn.f(float %309) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

320:                                              ; preds = %317
  %321 = tail call float @llvm.nvvm.sqrt.approx.f(float %309) #4, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %313, %315, %318, %320
  %.0.i = phi float [ %314, %313 ], [ %316, %315 ], [ %319, %318 ], [ %321, %320 ], !dbg !40
  %322 = and i32 %19, 12, !dbg !12
  %323 = or disjoint i32 %13, %322, !dbg !13
  %.frozen = freeze i32 %323, !dbg !41
  %324 = sdiv i32 %.frozen, 4096, !dbg !41
  %325 = mul i32 %324, 4096, !dbg !42
  %.decomposed = sub i32 %.frozen, %325, !dbg !42
  %326 = lshr i32 %14, 2, !dbg !16
  %327 = and i32 %326, 63, !dbg !16
  %328 = or disjoint i32 %327, %25, !dbg !17
  %329 = or disjoint i32 %328, 192, !dbg !17
  %330 = icmp slt i32 %329, 2048, !dbg !18
  %331 = or disjoint i32 %328, 128, !dbg !17
  %332 = icmp slt i32 %331, 2048, !dbg !18
  %333 = or disjoint i32 %328, 64, !dbg !17
  %334 = icmp slt i32 %333, 2048, !dbg !18
  %335 = icmp slt i32 %328, 2048, !dbg !18
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %337 = insertelement <16 x float> poison, float %234, i64 0, !dbg !44
  %338 = insertelement <16 x float> %337, float %233, i64 1, !dbg !44
  %339 = insertelement <16 x float> %338, float %232, i64 2, !dbg !44
  %340 = insertelement <16 x float> %339, float %231, i64 3, !dbg !44
  %341 = insertelement <16 x float> %340, float %226, i64 4, !dbg !44
  %342 = insertelement <16 x float> %341, float %225, i64 5, !dbg !44
  %343 = insertelement <16 x float> %342, float %224, i64 6, !dbg !44
  %344 = insertelement <16 x float> %343, float %223, i64 7, !dbg !44
  %345 = insertelement <16 x float> %344, float %218, i64 8, !dbg !44
  %346 = insertelement <16 x float> %345, float %217, i64 9, !dbg !44
  %347 = insertelement <16 x float> %346, float %216, i64 10, !dbg !44
  %348 = insertelement <16 x float> %347, float %215, i64 11, !dbg !44
  %349 = insertelement <16 x float> %348, float %210, i64 12, !dbg !44
  %350 = insertelement <16 x float> %349, float %208, i64 13, !dbg !44
  %351 = insertelement <16 x float> %350, float %206, i64 14, !dbg !44
  %352 = insertelement <16 x float> %351, float %204, i64 15, !dbg !44
  %353 = insertelement <16 x i32> poison, i32 %237, i64 0, !dbg !44
  %354 = bitcast <16 x i32> %353 to <16 x float>, !dbg !44
  %355 = shufflevector <16 x float> %354, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !44
  %356 = fsub <16 x float> %352, %355, !dbg !44
  %357 = insertelement <16 x float> poison, float %336, i64 0, !dbg !45
  %358 = shufflevector <16 x float> %357, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !45
  %359 = fmul <16 x float> %356, %358, !dbg !45
  %360 = insertelement <16 x i32> poison, i32 %242, i64 0, !dbg !46
  %361 = bitcast <16 x i32> %360 to <16 x float>, !dbg !46
  %362 = shufflevector <16 x float> %361, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !46
  %363 = fmul <16 x float> %359, %362, !dbg !46
  %364 = insertelement <16 x i32> poison, i32 %244, i64 0, !dbg !47
  %365 = bitcast <16 x i32> %364 to <16 x float>, !dbg !47
  %366 = shufflevector <16 x float> %365, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !47
  %367 = fadd <16 x float> %363, %366, !dbg !47
  %368 = insertelement <16 x float> poison, float %308, i64 0, !dbg !48
  %369 = insertelement <16 x float> %368, float %307, i64 1, !dbg !48
  %370 = insertelement <16 x float> %369, float %306, i64 2, !dbg !48
  %371 = insertelement <16 x float> %370, float %305, i64 3, !dbg !48
  %372 = insertelement <16 x float> %371, float %300, i64 4, !dbg !48
  %373 = insertelement <16 x float> %372, float %299, i64 5, !dbg !48
  %374 = insertelement <16 x float> %373, float %298, i64 6, !dbg !48
  %375 = insertelement <16 x float> %374, float %297, i64 7, !dbg !48
  %376 = insertelement <16 x float> %375, float %292, i64 8, !dbg !48
  %377 = insertelement <16 x float> %376, float %291, i64 9, !dbg !48
  %378 = insertelement <16 x float> %377, float %290, i64 10, !dbg !48
  %379 = insertelement <16 x float> %378, float %289, i64 11, !dbg !48
  %380 = insertelement <16 x float> %379, float %284, i64 12, !dbg !48
  %381 = insertelement <16 x float> %380, float %283, i64 13, !dbg !48
  %382 = insertelement <16 x float> %381, float %282, i64 14, !dbg !48
  %383 = insertelement <16 x float> %382, float %281, i64 15, !dbg !48
  %384 = fadd <16 x float> %383, %367, !dbg !48
  %385 = fcmp olt <16 x float> %384, zeroinitializer, !dbg !49
  %386 = extractelement <16 x i1> %385, i64 15, !dbg !53
  %387 = extractelement <16 x float> %384, i64 15, !dbg !53
  %388 = select i1 %386, float 0.000000e+00, float %387, !dbg !53
  %389 = extractelement <16 x i1> %385, i64 14, !dbg !53
  %390 = extractelement <16 x float> %384, i64 14, !dbg !53
  %391 = select i1 %389, float 0.000000e+00, float %390, !dbg !53
  %392 = extractelement <16 x i1> %385, i64 13, !dbg !53
  %393 = extractelement <16 x float> %384, i64 13, !dbg !53
  %394 = select i1 %392, float 0.000000e+00, float %393, !dbg !53
  %395 = extractelement <16 x i1> %385, i64 12, !dbg !53
  %396 = extractelement <16 x float> %384, i64 12, !dbg !53
  %397 = select i1 %395, float 0.000000e+00, float %396, !dbg !53
  %398 = extractelement <16 x i1> %385, i64 11, !dbg !53
  %399 = extractelement <16 x float> %384, i64 11, !dbg !53
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !53
  %401 = extractelement <16 x i1> %385, i64 10, !dbg !53
  %402 = extractelement <16 x float> %384, i64 10, !dbg !53
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !53
  %404 = extractelement <16 x i1> %385, i64 9, !dbg !53
  %405 = extractelement <16 x float> %384, i64 9, !dbg !53
  %406 = select i1 %404, float 0.000000e+00, float %405, !dbg !53
  %407 = extractelement <16 x i1> %385, i64 8, !dbg !53
  %408 = extractelement <16 x float> %384, i64 8, !dbg !53
  %409 = select i1 %407, float 0.000000e+00, float %408, !dbg !53
  %410 = extractelement <16 x i1> %385, i64 7, !dbg !53
  %411 = extractelement <16 x float> %384, i64 7, !dbg !53
  %412 = select i1 %410, float 0.000000e+00, float %411, !dbg !53
  %413 = extractelement <16 x i1> %385, i64 6, !dbg !53
  %414 = extractelement <16 x float> %384, i64 6, !dbg !53
  %415 = select i1 %413, float 0.000000e+00, float %414, !dbg !53
  %416 = extractelement <16 x i1> %385, i64 5, !dbg !53
  %417 = extractelement <16 x float> %384, i64 5, !dbg !53
  %418 = select i1 %416, float 0.000000e+00, float %417, !dbg !53
  %419 = extractelement <16 x i1> %385, i64 4, !dbg !53
  %420 = extractelement <16 x float> %384, i64 4, !dbg !53
  %421 = select i1 %419, float 0.000000e+00, float %420, !dbg !53
  %422 = extractelement <16 x i1> %385, i64 3, !dbg !53
  %423 = extractelement <16 x float> %384, i64 3, !dbg !53
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !53
  %425 = extractelement <16 x i1> %385, i64 2, !dbg !53
  %426 = extractelement <16 x float> %384, i64 2, !dbg !53
  %427 = select i1 %425, float 0.000000e+00, float %426, !dbg !53
  %428 = extractelement <16 x i1> %385, i64 1, !dbg !53
  %429 = extractelement <16 x float> %384, i64 1, !dbg !53
  %430 = select i1 %428, float 0.000000e+00, float %429, !dbg !53
  %431 = extractelement <16 x i1> %385, i64 0, !dbg !53
  %432 = extractelement <16 x float> %384, i64 0, !dbg !53
  %433 = select i1 %431, float 0.000000e+00, float %432, !dbg !53
  %434 = shl i32 %328, 12, !dbg !54
  %435 = shl i32 %333, 12, !dbg !54
  %436 = shl i32 %331, 12, !dbg !54
  %437 = shl i32 %329, 12, !dbg !54
  %438 = shl i32 %324, 23, !dbg !55
  %439 = add i32 %438, %.decomposed, !dbg !56
  %440 = add i32 %439, %434, !dbg !57
  %441 = add i32 %439, %435, !dbg !57
  %442 = add i32 %439, %436, !dbg !57
  %443 = add i32 %439, %437, !dbg !57
  %444 = sext i32 %440 to i64, !dbg !58
  %445 = getelementptr float, ptr addrspace(1) %8, i64 %444, !dbg !58
  %446 = sext i32 %441 to i64, !dbg !58
  %447 = getelementptr float, ptr addrspace(1) %8, i64 %446, !dbg !58
  %448 = sext i32 %442 to i64, !dbg !58
  %449 = getelementptr float, ptr addrspace(1) %8, i64 %448, !dbg !58
  %450 = sext i32 %443 to i64, !dbg !58
  %451 = getelementptr float, ptr addrspace(1) %8, i64 %450, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %452 = shl i32 %14, 4, !dbg !59
  %453 = and i32 %452, 4080, !dbg !59
  %454 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %453, !dbg !59
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %453, !dbg !59
  %456 = bitcast float %388 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #4, !dbg !59
  %457 = or disjoint i32 %453, 1, !dbg !59
  %458 = getelementptr float, ptr addrspace(3) %454, i32 %457, !dbg !59
  %459 = bitcast float %391 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 true) #4, !dbg !59
  %460 = or disjoint i32 %453, 2, !dbg !59
  %461 = getelementptr float, ptr addrspace(3) %454, i32 %460, !dbg !59
  %462 = bitcast float %394 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %461, <1 x i32> %462, i1 true) #4, !dbg !59
  %463 = or disjoint i32 %453, 3, !dbg !59
  %464 = getelementptr float, ptr addrspace(3) %454, i32 %463, !dbg !59
  %465 = bitcast float %397 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #4, !dbg !59
  %466 = or disjoint i32 %453, 4, !dbg !59
  %467 = getelementptr float, ptr addrspace(3) %454, i32 %466, !dbg !59
  %468 = bitcast float %400 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 true) #4, !dbg !59
  %469 = or disjoint i32 %453, 5, !dbg !59
  %470 = getelementptr float, ptr addrspace(3) %454, i32 %469, !dbg !59
  %471 = bitcast float %403 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %470, <1 x i32> %471, i1 true) #4, !dbg !59
  %472 = or disjoint i32 %453, 6, !dbg !59
  %473 = getelementptr float, ptr addrspace(3) %454, i32 %472, !dbg !59
  %474 = bitcast float %406 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %473, <1 x i32> %474, i1 true) #4, !dbg !59
  %475 = or disjoint i32 %453, 7, !dbg !59
  %476 = getelementptr float, ptr addrspace(3) %454, i32 %475, !dbg !59
  %477 = bitcast float %409 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %476, <1 x i32> %477, i1 true) #4, !dbg !59
  %478 = or disjoint i32 %453, 8, !dbg !59
  %479 = getelementptr float, ptr addrspace(3) %454, i32 %478, !dbg !59
  %480 = bitcast float %412 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %479, <1 x i32> %480, i1 true) #4, !dbg !59
  %481 = or disjoint i32 %453, 9, !dbg !59
  %482 = getelementptr float, ptr addrspace(3) %454, i32 %481, !dbg !59
  %483 = bitcast float %415 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #4, !dbg !59
  %484 = or disjoint i32 %453, 10, !dbg !59
  %485 = getelementptr float, ptr addrspace(3) %454, i32 %484, !dbg !59
  %486 = bitcast float %418 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #4, !dbg !59
  %487 = or disjoint i32 %453, 11, !dbg !59
  %488 = getelementptr float, ptr addrspace(3) %454, i32 %487, !dbg !59
  %489 = bitcast float %421 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 true) #4, !dbg !59
  %490 = or disjoint i32 %453, 12, !dbg !59
  %491 = getelementptr float, ptr addrspace(3) %454, i32 %490, !dbg !59
  %492 = bitcast float %424 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %491, <1 x i32> %492, i1 true) #4, !dbg !59
  %493 = or disjoint i32 %453, 13, !dbg !59
  %494 = getelementptr float, ptr addrspace(3) %454, i32 %493, !dbg !59
  %495 = bitcast float %427 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %494, <1 x i32> %495, i1 true) #4, !dbg !59
  %496 = or disjoint i32 %453, 14, !dbg !59
  %497 = getelementptr float, ptr addrspace(3) %454, i32 %496, !dbg !59
  %498 = bitcast float %430 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %497, <1 x i32> %498, i1 true) #4, !dbg !59
  %499 = or disjoint i32 %453, 15, !dbg !59
  %500 = getelementptr float, ptr addrspace(3) %454, i32 %499, !dbg !59
  %501 = bitcast float %433 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %502 = and i32 %14, 252, !dbg !59
  %503 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %502, !dbg !59
  %504 = getelementptr inbounds float, ptr addrspace(3) %503, i32 %188, !dbg !59
  %505 = or disjoint i32 %188, 1024, !dbg !59
  %506 = lshr exact i32 %505, 2, !dbg !59
  %507 = and i32 %506, 508, !dbg !59
  %508 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %507, !dbg !59
  %509 = getelementptr inbounds float, ptr addrspace(3) %508, i32 %505, !dbg !59
  %510 = load <4 x i32>, ptr addrspace(3) %509, align 16, !dbg !59
  %511 = or disjoint i32 %188, 2048, !dbg !59
  %512 = lshr exact i32 %511, 2, !dbg !59
  %513 = and i32 %512, 764, !dbg !59
  %514 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %513, !dbg !59
  %515 = getelementptr inbounds float, ptr addrspace(3) %514, i32 %511, !dbg !59
  %516 = load <4 x i32>, ptr addrspace(3) %515, align 16, !dbg !59
  %517 = or disjoint i32 %188, 3072, !dbg !59
  %518 = lshr exact i32 %517, 2, !dbg !59
  %519 = and i32 %518, 1020, !dbg !59
  %520 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %519, !dbg !59
  %521 = getelementptr inbounds float, ptr addrspace(3) %520, i32 %517, !dbg !59
  %522 = load <4 x i32>, ptr addrspace(3) %521, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %504, align 16, !dbg !59
  %523 = getelementptr inbounds i8, ptr addrspace(3) %504, i32 4, !dbg !59
  %.extract20 = load i32, ptr addrspace(3) %523, align 4, !dbg !59
  %524 = getelementptr inbounds i8, ptr addrspace(3) %504, i32 8, !dbg !59
  %.extract21 = load i32, ptr addrspace(3) %524, align 8, !dbg !59
  %525 = getelementptr inbounds i8, ptr addrspace(3) %504, i32 12, !dbg !59
  %.extract22 = load i32, ptr addrspace(3) %525, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %445, i1 %335) #4, !dbg !59
  %.extract23 = extractelement <4 x i32> %510, i64 0, !dbg !59
  %.extract24 = extractelement <4 x i32> %510, i64 1, !dbg !59
  %.extract25 = extractelement <4 x i32> %510, i64 2, !dbg !59
  %.extract26 = extractelement <4 x i32> %510, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %447, i1 %334) #4, !dbg !59
  %.extract27 = extractelement <4 x i32> %516, i64 0, !dbg !59
  %.extract28 = extractelement <4 x i32> %516, i64 1, !dbg !59
  %.extract29 = extractelement <4 x i32> %516, i64 2, !dbg !59
  %.extract30 = extractelement <4 x i32> %516, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %449, i1 %332) #4, !dbg !59
  %.extract31 = extractelement <4 x i32> %522, i64 0, !dbg !59
  %.extract32 = extractelement <4 x i32> %522, i64 1, !dbg !59
  %.extract33 = extractelement <4 x i32> %522, i64 2, !dbg !59
  %.extract34 = extractelement <4 x i32> %522, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %451, i1 %330) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cge2kbyrwyviiu5bmbeem2jvw7un3yezuodm625bgxa3udt5v6ap.py", directory: "inductor_cache/ge")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 45, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 45, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 45, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 31, scope: !7)
!34 = !DILocation(line: 38, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 36, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 44, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 20, scope: !7)
!40 = !DILocation(line: 48, column: 27, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 30, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 19, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 58, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 59, column: 35, scope: !7)
!55 = !DILocation(line: 59, column: 48, scope: !7)
!56 = !DILocation(line: 59, column: 30, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 59, column: 25, scope: !7)
!59 = !DILocation(line: 59, column: 60, scope: !7)
!60 = !DILocation(line: 59, column: 4, scope: !7)
