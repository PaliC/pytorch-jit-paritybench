; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 64, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 4096, !dbg !17
  %19 = srem i32 %18, 128, !dbg !18
  %20 = sext i32 %16 to i64, !dbg !19
  %21 = getelementptr i64, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %23 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %24 = sext i32 %.decomposed to i64, !dbg !21
  %25 = getelementptr i64, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !22
  %27 = extractvalue { i64, i64 } %26, 0, !dbg !22
  %28 = extractvalue { i64, i64 } %26, 1, !dbg !22
  %29 = sext i32 %19 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %44 = lshr i64 %22, 58, !dbg !31
  %45 = and i64 %44, 32, !dbg !31
  %46 = add i64 %45, %22, !dbg !31
  %47 = lshr i64 %27, 58, !dbg !32
  %48 = and i64 %47, 32, !dbg !32
  %49 = lshr i64 %28, 58, !dbg !32
  %50 = and i64 %49, 32, !dbg !32
  %51 = shl i64 %46, 5, !dbg !33
  %52 = shl nsw i32 %18, 10, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %48, !dbg !36
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %51, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %56, i64 %53, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %50, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %51, !dbg !36
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %53, !dbg !36
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !37
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !37
  %64 = fadd float %35, 0x3EE4F8B580000000, !dbg !38
  %65 = fadd float %37, 0x3EE4F8B580000000, !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %66, 0, !dbg !39
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %67, 0, !dbg !39
  br i1 %.not.i, label %73, label %68, !dbg !39

68:                                               ; preds = %8
  br i1 %.not1.i, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

73:                                               ; preds = %8
  br i1 %.not1.i, label %76, label %74, !dbg !39

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !39
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %78, 0, !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %79, 0, !dbg !39
  br i1 %.not.i1, label %85, label %80, !dbg !39

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %83, label %81, !dbg !39

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !39

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %81, %83, %86, %88
  %.0.i3 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !39
  %90 = bitcast i32 %63 to float, !dbg !37
  %91 = bitcast i32 %32 to float, !dbg !24
  %92 = fsub float %90, %91, !dbg !40
  %93 = bitcast i32 %62 to float, !dbg !37
  %94 = bitcast i32 %31 to float, !dbg !24
  %95 = fsub float %93, %94, !dbg !40
  %96 = bitcast i32 %43 to float, !dbg !30
  %97 = bitcast i32 %42 to float, !dbg !30
  %98 = bitcast i32 %40 to float, !dbg !28
  %99 = bitcast i32 %39 to float, !dbg !28
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %102 = fmul float %95, %100, !dbg !42
  %103 = fmul float %92, %101, !dbg !42
  %104 = fmul float %102, %99, !dbg !43
  %105 = fmul float %103, %98, !dbg !43
  %106 = fadd float %104, %97, !dbg !44
  %107 = fadd float %105, %96, !dbg !44
  %108 = fcmp olt float %106, 0.000000e+00, !dbg !45
  %109 = fcmp olt float %107, 0.000000e+00, !dbg !45
  %110 = select i1 %108, float 0.000000e+00, float %106, !dbg !49
  %111 = select i1 %109, float 0.000000e+00, float %107, !dbg !49
  %112 = sext i32 %14 to i64, !dbg !50
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !50
  %114 = bitcast float %110 to i32, !dbg !51
  %115 = bitcast float %111 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %114, i32 %115, ptr addrspace(1) %113, i1 true) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cygyy6kpawrxjxp6hwmfedgijg4mjztgsvny3mobfi7grk25pdej.py", directory: "inductor_cache/yg")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_relu_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 32, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 52, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 42, column: 30, scope: !7)
!37 = !DILocation(line: 42, column: 57, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 27, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 55, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 56, column: 25, scope: !7)
!51 = !DILocation(line: 56, column: 37, scope: !7)
!52 = !DILocation(line: 56, column: 4, scope: !7)
