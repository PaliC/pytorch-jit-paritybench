; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_view_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %12, 8, !dbg !12
  %14 = or disjoint i32 %12, 16, !dbg !12
  %15 = or disjoint i32 %12, 24, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 5, !dbg !15
  %23 = lshr i32 %8, 3, !dbg !16
  %24 = and i32 %23, 15, !dbg !16
  %25 = shl i32 %8, 1, !dbg !16
  %26 = and i32 %25, 30, !dbg !16
  %27 = or disjoint i32 %22, %24, !dbg !17
  %28 = or disjoint i32 %27, 16, !dbg !17
  %29 = or disjoint i32 %22, %26, !dbg !17
  %30 = icmp slt i32 %27, 30, !dbg !18
  %31 = icmp slt i32 %28, 30, !dbg !18
  %32 = icmp slt i32 %29, 30, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %33 = sdiv i32 %.frozen, 4096, !dbg !19
  %34 = mul i32 %33, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %27, 12, !dbg !21
  %36 = shl i32 %28, 12, !dbg !21
  %37 = mul i32 %33, 122880, !dbg !22
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = add i32 %38, %35, !dbg !24
  %40 = add i32 %38, %36, !dbg !24
  %41 = sext i32 %39 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %30) #2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %31) #2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = bitcast i32 %56 to float, !dbg !26
  %61 = bitcast i32 %57 to float, !dbg !26
  %62 = bitcast i32 %58 to float, !dbg !26
  %63 = sext i32 %27 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !27
  %65 = sext i32 %28 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !28
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !28
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %30) #2, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #2, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #2, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #2, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #2, !dbg !28
  %76 = bitcast i32 %75 to float, !dbg !28
  %77 = fadd float %50, %71, !dbg !29
  %78 = fadd float %51, %71, !dbg !29
  %79 = fadd float %52, %71, !dbg !29
  %80 = fadd float %53, %71, !dbg !29
  %81 = fadd float %59, %76, !dbg !29
  %82 = fadd float %60, %76, !dbg !29
  %83 = fadd float %61, %76, !dbg !29
  %84 = fadd float %62, %76, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %85 = mul i32 %17, 30, !dbg !31
  %86 = mul i32 %18, 30, !dbg !31
  %87 = mul i32 %19, 30, !dbg !31
  %88 = mul i32 %20, 30, !dbg !31
  %89 = add i32 %29, %85, !dbg !32
  %90 = add i32 %29, %86, !dbg !32
  %91 = add i32 %29, %87, !dbg !32
  %92 = add i32 %29, %88, !dbg !32
  %93 = sext i32 %89 to i64, !dbg !33
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !33
  %95 = sext i32 %90 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !33
  %97 = sext i32 %91 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !33
  %99 = sext i32 %92 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !33
  %101 = shl i32 %8, 7, !dbg !34
  %102 = and i32 %101, 896, !dbg !34
  %103 = or disjoint i32 %102, %24, !dbg !34
  %104 = and i32 %25, 254, !dbg !34
  %105 = lshr exact i32 %102, 5, !dbg !34
  %106 = add nuw nsw i32 %105, %103, !dbg !34
  %107 = zext nneg i32 %106 to i64, !dbg !34
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !34
  %109 = bitcast float %77 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !34
  %110 = or disjoint i32 %103, 32, !dbg !34
  %111 = lshr i32 %110, 5, !dbg !34
  %112 = add nuw nsw i32 %111, %110, !dbg !34
  %113 = zext nneg i32 %112 to i64, !dbg !34
  %114 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %113, !dbg !34
  %115 = bitcast float %78 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !34
  %116 = or disjoint i32 %103, 64, !dbg !34
  %117 = lshr i32 %116, 5, !dbg !34
  %118 = add nuw nsw i32 %117, %116, !dbg !34
  %119 = zext nneg i32 %118 to i64, !dbg !34
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !34
  %121 = bitcast float %79 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !34
  %122 = or disjoint i32 %103, 96, !dbg !34
  %123 = lshr i32 %122, 5, !dbg !34
  %124 = add nuw nsw i32 %123, %122, !dbg !34
  %125 = zext nneg i32 %124 to i64, !dbg !34
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !34
  %127 = bitcast float %80 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !34
  %128 = or disjoint i32 %103, 16, !dbg !34
  %129 = add nuw nsw i32 %128, %105, !dbg !34
  %130 = zext nneg i32 %129 to i64, !dbg !34
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !34
  %132 = bitcast float %81 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !34
  %133 = or disjoint i32 %103, 48, !dbg !34
  %134 = lshr i32 %133, 5, !dbg !34
  %135 = add nuw nsw i32 %134, %133, !dbg !34
  %136 = zext nneg i32 %135 to i64, !dbg !34
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %136, !dbg !34
  %138 = bitcast float %82 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !34
  %139 = or disjoint i32 %103, 80, !dbg !34
  %140 = lshr i32 %139, 5, !dbg !34
  %141 = add nuw nsw i32 %140, %139, !dbg !34
  %142 = zext nneg i32 %141 to i64, !dbg !34
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %142, !dbg !34
  %144 = bitcast float %83 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !34
  %145 = or disjoint i32 %103, 112, !dbg !34
  %146 = lshr i32 %145, 5, !dbg !34
  %147 = add nuw nsw i32 %146, %145, !dbg !34
  %148 = zext nneg i32 %147 to i64, !dbg !34
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %148, !dbg !34
  %150 = bitcast float %84 to <1 x i32>, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %151 = lshr i32 %104, 5, !dbg !34
  %152 = add nuw nsw i32 %151, %104, !dbg !34
  %153 = zext nneg i32 %152 to i64, !dbg !34
  %154 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %153, !dbg !34
  %155 = load i32, ptr addrspace(3) %154, align 4, !dbg !34
  %156 = or disjoint i32 %104, 1, !dbg !34
  %157 = add nuw nsw i32 %156, %151, !dbg !34
  %158 = zext nneg i32 %157 to i64, !dbg !34
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %158, !dbg !34
  %160 = load i32, ptr addrspace(3) %159, align 4, !dbg !34
  %161 = or disjoint i32 %104, 256, !dbg !34
  %162 = lshr i32 %161, 5, !dbg !34
  %163 = add nuw nsw i32 %162, %161, !dbg !34
  %164 = zext nneg i32 %163 to i64, !dbg !34
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %164, !dbg !34
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !34
  %167 = or disjoint i32 %104, 257, !dbg !34
  %168 = lshr i32 %167, 5, !dbg !34
  %169 = add nuw nsw i32 %168, %167, !dbg !34
  %170 = zext nneg i32 %169 to i64, !dbg !34
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %170, !dbg !34
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !34
  %173 = or disjoint i32 %104, 512, !dbg !34
  %174 = lshr i32 %173, 5, !dbg !34
  %175 = add nuw nsw i32 %174, %173, !dbg !34
  %176 = zext nneg i32 %175 to i64, !dbg !34
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %176, !dbg !34
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !34
  %179 = or disjoint i32 %104, 513, !dbg !34
  %180 = lshr i32 %179, 5, !dbg !34
  %181 = add nuw nsw i32 %180, %179, !dbg !34
  %182 = zext nneg i32 %181 to i64, !dbg !34
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %182, !dbg !34
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !34
  %185 = or disjoint i32 %104, 768, !dbg !34
  %186 = lshr i32 %185, 5, !dbg !34
  %187 = add nuw nsw i32 %186, %185, !dbg !34
  %188 = zext nneg i32 %187 to i64, !dbg !34
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %188, !dbg !34
  %190 = load i32, ptr addrspace(3) %189, align 4, !dbg !34
  %191 = or disjoint i32 %104, 769, !dbg !34
  %192 = lshr i32 %191, 5, !dbg !34
  %193 = add nuw nsw i32 %192, %191, !dbg !34
  %194 = zext nneg i32 %193 to i64, !dbg !34
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !34
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %160, ptr addrspace(1) %94, i1 %32) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %172, ptr addrspace(1) %96, i1 %32) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %178, i32 %184, ptr addrspace(1) %98, i1 %32) #2, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %190, i32 %196, ptr addrspace(1) %100, i1 %32) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5bjpbddbrlxa42ykuf3p3bm3kg2xnbe37r4dqmwxg6hgmeffcn5.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused_clone_view_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_view_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_view_1", linkageName: "triton_poi_fused_clone_view_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 52, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 57, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 36, column: 33, scope: !7)
!33 = !DILocation(line: 36, column: 28, scope: !7)
!34 = !DILocation(line: 36, column: 47, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
