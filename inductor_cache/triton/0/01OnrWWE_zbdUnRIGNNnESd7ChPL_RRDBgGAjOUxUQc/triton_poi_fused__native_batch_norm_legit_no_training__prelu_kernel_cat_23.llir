; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = mul i32 %17, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = sext i32 %.decomposed to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %19, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !24
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = icmp slt i32 %.decomposed, 128, !dbg !26
  %39 = shl nsw i32 %17, 7, !dbg !27
  %40 = add nsw i32 %39, %.decomposed, !dbg !28
  %41 = sext i32 %40 to i64, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !29
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %44 = icmp sgt i32 %.decomposed, 127, !dbg !31
  %45 = sext i32 %40 to i64, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !32
  %47 = getelementptr i8, ptr addrspace(1) %46, i64 -512, !dbg !32
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !33
  %49 = fadd float %28, 0x3F50624DE0000000, !dbg !34
  %50 = fadd float %29, 0x3F50624DE0000000, !dbg !34
  %51 = fadd float %30, 0x3F50624DE0000000, !dbg !34
  %52 = fadd float %31, 0x3F50624DE0000000, !dbg !34
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %53, 0, !dbg !35
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %54, 0, !dbg !35
  br i1 %.not.i, label %60, label %55, !dbg !35

55:                                               ; preds = %10
  br i1 %.not1.i, label %58, label %56, !dbg !35

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

60:                                               ; preds = %10
  br i1 %.not1.i, label %63, label %61, !dbg !35

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !35
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i4 = icmp eq i32 %65, 0, !dbg !35
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i7 = icmp eq i32 %66, 0, !dbg !35
  br i1 %.not.i4, label %72, label %67, !dbg !35

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %70, label %68, !dbg !35

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit8, !dbg !35

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit8, !dbg !35

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %75, label %73, !dbg !35

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit8, !dbg !35

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !35
  br label %__nv_sqrtf.exit8, !dbg !35

__nv_sqrtf.exit8:                                 ; preds = %68, %70, %73, %75
  %.0.i6 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !35
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i9 = icmp eq i32 %77, 0, !dbg !35
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i12 = icmp eq i32 %78, 0, !dbg !35
  br i1 %.not.i9, label %84, label %79, !dbg !35

79:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %82, label %80, !dbg !35

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

84:                                               ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %87, label %85, !dbg !35

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

__nv_sqrtf.exit13:                                ; preds = %80, %82, %85, %87
  %.0.i11 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !35
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i14 = icmp eq i32 %89, 0, !dbg !35
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i17 = icmp eq i32 %90, 0, !dbg !35
  br i1 %.not.i14, label %96, label %91, !dbg !35

91:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %94, label %92, !dbg !35

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

96:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %99, label %97, !dbg !35

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

__nv_sqrtf.exit18:                                ; preds = %92, %94, %97, %99
  %.0.i16 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !35
  %101 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !30
  %102 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !33
  %103 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %104 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !33
  %106 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %107 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %110 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !30
  %111 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %113 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %123 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %125 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !21
  %126 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !21
  %127 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !21
  %128 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !21
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !36
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !36
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !36
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !36
  %133 = insertelement <4 x i1> poison, i1 %38, i64 0, !dbg !37
  %134 = shufflevector <4 x i1> %133, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !37
  %135 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !37
  %136 = insertelement <4 x i32> %135, i32 %104, i64 1, !dbg !37
  %137 = insertelement <4 x i32> %136, i32 %107, i64 2, !dbg !37
  %138 = insertelement <4 x i32> %137, i32 %110, i64 3, !dbg !37
  %139 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !37
  %140 = insertelement <4 x i32> %139, i32 %105, i64 1, !dbg !37
  %141 = insertelement <4 x i32> %140, i32 %108, i64 2, !dbg !37
  %142 = insertelement <4 x i32> %141, i32 %111, i64 3, !dbg !37
  %143 = select <4 x i1> %134, <4 x i32> %138, <4 x i32> %142, !dbg !37
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !37
  %145 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !17
  %146 = insertelement <4 x i32> %145, i32 %106, i64 1, !dbg !17
  %147 = insertelement <4 x i32> %146, i32 %109, i64 2, !dbg !17
  %148 = insertelement <4 x i32> %147, i32 %112, i64 3, !dbg !17
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !17
  %150 = fsub <4 x float> %144, %149, !dbg !38
  %151 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !23
  %152 = insertelement <4 x i32> %151, i32 %122, i64 1, !dbg !23
  %153 = insertelement <4 x i32> %152, i32 %123, i64 2, !dbg !23
  %154 = insertelement <4 x i32> %153, i32 %124, i64 3, !dbg !23
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !23
  %156 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !21
  %157 = insertelement <4 x i32> %156, i32 %126, i64 1, !dbg !21
  %158 = insertelement <4 x i32> %157, i32 %127, i64 2, !dbg !21
  %159 = insertelement <4 x i32> %158, i32 %128, i64 3, !dbg !21
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !21
  %161 = insertelement <4 x float> poison, float %132, i64 0, !dbg !39
  %162 = insertelement <4 x float> %161, float %131, i64 1, !dbg !39
  %163 = insertelement <4 x float> %162, float %130, i64 2, !dbg !39
  %164 = insertelement <4 x float> %163, float %129, i64 3, !dbg !39
  %165 = fmul <4 x float> %150, %164, !dbg !39
  %166 = fmul <4 x float> %165, %160, !dbg !40
  %167 = fadd <4 x float> %166, %155, !dbg !41
  %168 = fcmp ogt <4 x float> %167, zeroinitializer, !dbg !42
  %169 = extractelement <4 x float> %167, i64 3, !dbg !43
  %170 = fmul float %169, %120, !dbg !44
  %171 = extractelement <4 x float> %167, i64 2, !dbg !43
  %172 = fmul float %171, %118, !dbg !44
  %173 = extractelement <4 x float> %167, i64 1, !dbg !43
  %174 = fmul float %173, %116, !dbg !44
  %175 = extractelement <4 x float> %167, i64 0, !dbg !43
  %176 = fmul float %175, %114, !dbg !44
  %177 = extractelement <4 x i1> %168, i64 3, !dbg !43
  %178 = select i1 %177, float %169, float %170, !dbg !43
  %179 = extractelement <4 x i1> %168, i64 2, !dbg !43
  %180 = select i1 %179, float %171, float %172, !dbg !43
  %181 = extractelement <4 x i1> %168, i64 1, !dbg !43
  %182 = select i1 %181, float %173, float %174, !dbg !43
  %183 = extractelement <4 x i1> %168, i64 0, !dbg !43
  %184 = select i1 %183, float %175, float %176, !dbg !43
  %185 = sext i32 %16 to i64, !dbg !45
  %186 = getelementptr float, ptr addrspace(1) %8, i64 %185, !dbg !45
  %187 = extractelement <4 x i32> %143, i64 0, !dbg !46
  %188 = extractelement <4 x i32> %143, i64 1, !dbg !46
  %189 = extractelement <4 x i32> %143, i64 2, !dbg !46
  %190 = extractelement <4 x i32> %143, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %190, i32 %189, i32 %188, i32 %187, ptr addrspace(1) %186, i1 true) #3, !dbg !46
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !47
  %192 = bitcast float %178 to i32, !dbg !48
  %193 = bitcast float %180 to i32, !dbg !48
  %194 = bitcast float %182 to i32, !dbg !48
  %195 = bitcast float %184 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %191, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdeejvnbiiq5z7yz36glbz2f723ohxtuh5ovykm4hqcrlf3mtlgn.py", directory: "inductor_cache/de")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 40, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 55, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 27, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 33, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 20, scope: !7)
!43 = !DILocation(line: 57, column: 35, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 25, scope: !7)
!46 = !DILocation(line: 58, column: 37, scope: !7)
!47 = !DILocation(line: 59, column: 28, scope: !7)
!48 = !DILocation(line: 59, column: 40, scope: !7)
!49 = !DILocation(line: 59, column: 4, scope: !7)
