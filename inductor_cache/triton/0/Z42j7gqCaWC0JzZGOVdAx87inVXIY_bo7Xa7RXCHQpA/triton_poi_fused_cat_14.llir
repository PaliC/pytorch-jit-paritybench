; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = icmp slt i32 %14, 688, !dbg !14
  %16 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %17 = insertelement <2 x i32> %16, i32 %10, i64 1, !dbg !15
  %18 = ashr exact <2 x i32> %17, splat (i32 1), !dbg !15
  %19 = or disjoint <2 x i32> %17, <i32 poison, i32 1>, !dbg !15
  %20 = shufflevector <2 x i32> %18, <2 x i32> %19, <2 x i32> <i32 0, i32 3>, !dbg !15
  %21 = srem <2 x i32> %20, <i32 86, i32 2>, !dbg !16
  %.frozen = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen, 172, !dbg !17
  %23 = extractelement <2 x i32> %21, i64 0, !dbg !18
  %24 = icmp slt i32 %23, 84, !dbg !19
  %25 = shl nsw i32 %23, 1, !dbg !20
  %26 = mul i32 %22, 172, !dbg !21
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = extractelement <2 x i32> %21, i64 1, !dbg !21
  %28 = add nsw i32 %25, %27, !dbg !21
  %.lhs.trunc = trunc nsw i32 %srem.decomposed to i16, !dbg !22
  %29 = sdiv i16 %.lhs.trunc, 42, !dbg !23
  %30 = mul i16 %29, 42, !dbg !22
  %.decomposed = sub i16 %.lhs.trunc, %30, !dbg !22
  %.sext = sext i16 %.decomposed to i32, !dbg !22
  %.lhs.trunc1 = trunc nsw i32 %28 to i16, !dbg !22
  %.lhs.trunc1.frozen = freeze i16 %.lhs.trunc1, !dbg !23
  %31 = sdiv i16 %.lhs.trunc1.frozen, 42, !dbg !23
  %32 = mul i16 %31, 42, !dbg !22
  %.decomposed11 = sub i16 %.lhs.trunc1.frozen, %32, !dbg !22
  %.sext2 = sext i16 %.decomposed11 to i32, !dbg !22
  %33 = shl nsw i32 %.sext, 2, !dbg !24
  %34 = shl nsw i32 %.sext2, 2, !dbg !24
  %35 = mul nsw i32 %22, 168, !dbg !25
  %36 = add nsw i32 %35, %srem.decomposed, !dbg !26
  %37 = add nsw i32 %28, %35, !dbg !26
  %38 = sdiv i32 %36, 168, !dbg !27
  %39 = sdiv i32 %37, 168, !dbg !27
  %40 = srem i32 %38, 4, !dbg !28
  %41 = srem i32 %39, 4, !dbg !28
  %42 = mul nsw i32 %40, 168, !dbg !29
  %43 = mul nsw i32 %41, 168, !dbg !29
  %44 = add nsw i32 %42, %33, !dbg !30
  %45 = add nsw i32 %34, %43, !dbg !30
  %.lhs.trunc7 = trunc nsw i16 %29 to i8, !dbg !31
  %46 = srem i8 %.lhs.trunc7, 4, !dbg !31
  %.sext8 = sext i8 %46 to i32, !dbg !31
  %.lhs.trunc9 = trunc nsw i16 %31 to i8, !dbg !31
  %47 = srem i8 %.lhs.trunc9, 4, !dbg !31
  %.sext10 = sext i8 %47 to i32, !dbg !31
  %48 = add nsw i32 %44, %.sext8, !dbg !32
  %49 = add nsw i32 %45, %.sext10, !dbg !32
  %50 = sext i32 %48 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !33
  %52 = sext i32 %49 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !33
  %54 = and i1 %15, %24, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %56 = bitcast i32 %55 to float, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %58 = bitcast i32 %57 to float, !dbg !35
  %59 = sext i16 %.decomposed to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !36
  %61 = sext i16 %.decomposed11 to i64, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !36
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %54, i32 0, i1 %54) #1, !dbg !37
  %64 = bitcast i32 %63 to float, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %54, i32 0, i1 %54) #1, !dbg !37
  %66 = bitcast i32 %65 to float, !dbg !37
  %67 = fadd float %56, %64, !dbg !38
  %68 = fadd float %58, %66, !dbg !38
  %69 = icmp eq i32 %23, 84, !dbg !39
  %70 = shl nsw i32 %22, 1, !dbg !40
  %71 = sext i32 %70 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !41
  %73 = and i1 %15, %69, !dbg !42
  %74 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !43
  %75 = extractvalue { i32, i32 } %74, 0, !dbg !43
  %76 = extractvalue { i32, i32 } %74, 1, !dbg !43
  %77 = bitcast i32 %75 to float, !dbg !43
  %78 = bitcast i32 %76 to float, !dbg !43
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %3, i1 %73, i32 0, i1 %73, i32 0, i1 %73) #1, !dbg !44
  %80 = extractvalue { i32, i32 } %79, 0, !dbg !44
  %81 = extractvalue { i32, i32 } %79, 1, !dbg !44
  %82 = bitcast i32 %80 to float, !dbg !44
  %83 = bitcast i32 %81 to float, !dbg !44
  %84 = fadd float %77, %82, !dbg !45
  %85 = fadd float %78, %83, !dbg !45
  %86 = icmp sgt i32 %23, 84, !dbg !18
  %87 = getelementptr float, ptr addrspace(1) %4, i64 %71, !dbg !46
  %88 = and i1 %15, %86, !dbg !47
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %87, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !48
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !48
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !48
  %92 = bitcast i32 %90 to float, !dbg !48
  %93 = bitcast i32 %91 to float, !dbg !48
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %5, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !49
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !49
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !49
  %97 = bitcast i32 %95 to float, !dbg !49
  %98 = bitcast i32 %96 to float, !dbg !49
  %99 = fadd float %92, %97, !dbg !50
  %100 = fadd float %93, %98, !dbg !50
  %101 = select i1 %86, float %99, float 0.000000e+00, !dbg !51
  %102 = select i1 %86, float %100, float 0.000000e+00, !dbg !51
  %103 = select i1 %69, float %84, float %101, !dbg !52
  %104 = select i1 %69, float %85, float %102, !dbg !52
  %105 = select i1 %24, float %67, float %103, !dbg !52
  %106 = select i1 %24, float %68, float %104, !dbg !52
  %107 = sext i32 %14 to i64, !dbg !53
  %108 = getelementptr float, ptr addrspace(1) %6, i64 %107, !dbg !53
  %109 = bitcast float %105 to i32, !dbg !54
  %110 = bitcast float %106 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %108, i1 %15) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccryoifyipp6grbkjwux4bm7yu77r2tl7devza4xgiv3gvmfeyf.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 47, column: 20, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 40, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 123, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 83, scope: !7)
!26 = !DILocation(line: 33, column: 79, scope: !7)
!27 = !DILocation(line: 33, column: 90, scope: !7)
!28 = !DILocation(line: 33, column: 97, scope: !7)
!29 = !DILocation(line: 33, column: 63, scope: !7)
!30 = !DILocation(line: 33, column: 57, scope: !7)
!31 = !DILocation(line: 33, column: 129, scope: !7)
!32 = !DILocation(line: 33, column: 105, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 142, scope: !7)
!35 = !DILocation(line: 33, column: 135, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 53, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 20, scope: !7)
!40 = !DILocation(line: 42, column: 38, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 51, scope: !7)
!43 = !DILocation(line: 42, column: 43, scope: !7)
!44 = !DILocation(line: 43, column: 36, scope: !7)
!45 = !DILocation(line: 44, column: 20, scope: !7)
!46 = !DILocation(line: 50, column: 31, scope: !7)
!47 = !DILocation(line: 50, column: 51, scope: !7)
!48 = !DILocation(line: 50, column: 43, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 35, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 37, scope: !7)
!55 = !DILocation(line: 57, column: 4, scope: !7)
