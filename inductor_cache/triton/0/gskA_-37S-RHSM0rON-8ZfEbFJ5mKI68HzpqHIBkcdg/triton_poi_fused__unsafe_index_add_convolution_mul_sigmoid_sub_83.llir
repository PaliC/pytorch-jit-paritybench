; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sigmoid_sub_83(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 64, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %17, 4096, !dbg !17
  %22 = sext i32 %19 to i64, !dbg !18
  %23 = getelementptr i64, ptr addrspace(1) %0, i64 %22, !dbg !18
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !19
  %25 = sext i32 %.decomposed to i64, !dbg !20
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !22
  %29 = getelementptr i64, ptr addrspace(1) %4, i64 %25, !dbg !23
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !26
  %33 = getelementptr i64, ptr addrspace(1) %6, i64 %22, !dbg !27
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !30
  %37 = bitcast i32 %36 to float, !dbg !30
  %38 = lshr i64 %24, 62, !dbg !31
  %39 = and i64 %38, 2, !dbg !31
  %40 = add i64 %39, %24, !dbg !31
  %41 = lshr i64 %27, 62, !dbg !32
  %42 = and i64 %41, 2, !dbg !32
  %43 = shl i64 %40, 1, !dbg !33
  %44 = shl nsw i32 %21, 2, !dbg !34
  %45 = sext i32 %44 to i64, !dbg !35
  %46 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %46, i64 %42, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %47, i64 %43, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %45, !dbg !36
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !37
  %51 = lshr i64 %30, 62, !dbg !38
  %52 = and i64 %51, 2, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %53, i64 %52, !dbg !39
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %43, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %45, !dbg !39
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !40
  %58 = lshr i64 %34, 62, !dbg !41
  %59 = and i64 %58, 2, !dbg !41
  %60 = add i64 %59, %34, !dbg !41
  %61 = shl i64 %60, 1, !dbg !42
  %62 = getelementptr float, ptr addrspace(1) %47, i64 %61, !dbg !43
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %45, !dbg !43
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !44
  %65 = getelementptr float, ptr addrspace(1) %54, i64 %61, !dbg !45
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %45, !dbg !45
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !46
  %68 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !44
  %69 = insertelement <2 x i32> %68, i32 %50, i64 1, !dbg !44
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !44
  %71 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !47
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !47
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %74 = fadd <2 x float> %73, %70, !dbg !47
  %75 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !46
  %76 = insertelement <2 x i32> %75, i32 %57, i64 1, !dbg !46
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !46
  %78 = fadd <2 x float> %73, %77, !dbg !48
  %79 = fsub <2 x float> %78, %74, !dbg !49
  %80 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !50
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !50
  %82 = shufflevector <2 x float> %81, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %83 = fmul <2 x float> %79, %82, !dbg !50
  %84 = fadd <2 x float> %74, %83, !dbg !51
  %85 = extractelement <2 x float> %84, i64 0, !dbg !52
  %86 = extractelement <2 x float> %84, i64 1, !dbg !53
  %87 = fsub float %85, %86, !dbg !52
  %88 = fmul float %87, %37, !dbg !54
  %89 = fadd float %86, %88, !dbg !55
  %90 = fsub float 0.000000e+00, %89, !dbg !56
  %91 = fmul float %90, 0x3FF7154760000000, !dbg !60
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !60
  %93 = fadd float %92, 1.000000e+00, !dbg !61
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !62
  %95 = sext i32 %17 to i64, !dbg !63
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %95, !dbg !63
  %97 = bitcast float %86 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %96, i1 true) #1, !dbg !53
  %98 = getelementptr float, ptr addrspace(1) %9, i64 %95, !dbg !64
  %99 = bitcast float %88 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %98, i1 true) #1, !dbg !65
  %100 = getelementptr float, ptr addrspace(1) %10, i64 %95, !dbg !66
  %101 = bitcast float %94 to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %100, i1 true) #1, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4z7qprnp5ltfbvnhieqqcnk6h6v2dwpmaukdps6tjv7vaimo4kt.py", directory: "inductor_cache/4z")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sigmoid_sub_83, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sigmoid_sub_83, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sigmoid_sub_83", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sigmoid_sub_83", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 20, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 31, scope: !7)
!28 = !DILocation(line: 34, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 42, column: 32, scope: !7)
!33 = !DILocation(line: 43, column: 39, scope: !7)
!34 = !DILocation(line: 43, column: 48, scope: !7)
!35 = !DILocation(line: 43, column: 46, scope: !7)
!36 = !DILocation(line: 43, column: 30, scope: !7)
!37 = !DILocation(line: 43, column: 53, scope: !7)
!38 = !DILocation(line: 47, column: 35, scope: !7)
!39 = !DILocation(line: 48, column: 31, scope: !7)
!40 = !DILocation(line: 48, column: 55, scope: !7)
!41 = !DILocation(line: 55, column: 35, scope: !7)
!42 = !DILocation(line: 56, column: 40, scope: !7)
!43 = !DILocation(line: 56, column: 31, scope: !7)
!44 = !DILocation(line: 56, column: 55, scope: !7)
!45 = !DILocation(line: 58, column: 31, scope: !7)
!46 = !DILocation(line: 58, column: 56, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 67, column: 37, scope: !7)
!54 = !DILocation(line: 64, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 47, column: 30, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!59 = !DILocation(line: 66, column: 23, scope: !7)
!60 = !DILocation(line: 47, column: 29, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 47, column: 20, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 47, column: 16, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 67, column: 25, scope: !7)
!64 = !DILocation(line: 68, column: 25, scope: !7)
!65 = !DILocation(line: 68, column: 37, scope: !7)
!66 = !DILocation(line: 69, column: 25, scope: !7)
!67 = !DILocation(line: 69, column: 37, scope: !7)
!68 = !DILocation(line: 69, column: 4, scope: !7)
