; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 5, !dbg !12
  %15 = and i32 %14, 7, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %15, 16, !dbg !12
  %18 = or disjoint i32 %15, 24, !dbg !12
  %19 = and i32 %13, 31, !dbg !12
  %20 = or disjoint i32 %12, %15, !dbg !13
  %21 = or disjoint i32 %12, %16, !dbg !13
  %22 = or disjoint i32 %12, %17, !dbg !13
  %23 = or disjoint i32 %12, %18, !dbg !13
  %24 = icmp slt i32 %20, 1024, !dbg !14
  %25 = icmp slt i32 %21, 1024, !dbg !14
  %26 = icmp slt i32 %22, 1024, !dbg !14
  %27 = icmp slt i32 %23, 1024, !dbg !14
  %28 = shl i32 %13, 2, !dbg !15
  %29 = and i32 %28, 124, !dbg !15
  %30 = icmp samesign ult i32 %29, 96, !dbg !16
  %31 = mul i32 %20, 96, !dbg !17
  %32 = mul i32 %21, 96, !dbg !17
  %33 = mul i32 %22, 96, !dbg !17
  %34 = mul i32 %23, 96, !dbg !17
  %35 = add i32 %31, %29, !dbg !18
  %36 = add i32 %32, %29, !dbg !18
  %37 = add i32 %33, %29, !dbg !18
  %38 = add i32 %34, %29, !dbg !18
  %39 = sext i32 %35 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = sext i32 %36 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = sext i32 %37 to i64, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !19
  %45 = sext i32 %38 to i64, !dbg !19
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !19
  %47 = and i1 %30, %24, !dbg !20
  %48 = and i1 %30, %25, !dbg !20
  %49 = and i1 %30, %26, !dbg !20
  %50 = and i1 %30, %27, !dbg !20
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !21
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !21
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !21
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !21
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !21
  %56 = bitcast i32 %52 to float, !dbg !21
  %57 = bitcast i32 %53 to float, !dbg !21
  %58 = bitcast i32 %54 to float, !dbg !21
  %59 = bitcast i32 %55 to float, !dbg !21
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #5, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !21
  %65 = bitcast i32 %61 to float, !dbg !21
  %66 = bitcast i32 %62 to float, !dbg !21
  %67 = bitcast i32 %63 to float, !dbg !21
  %68 = bitcast i32 %64 to float, !dbg !21
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #5, !dbg !21
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !21
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !21
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !21
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !21
  %74 = bitcast i32 %70 to float, !dbg !21
  %75 = bitcast i32 %71 to float, !dbg !21
  %76 = bitcast i32 %72 to float, !dbg !21
  %77 = bitcast i32 %73 to float, !dbg !21
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !21
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !21
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !21
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !21
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !21
  %83 = bitcast i32 %79 to float, !dbg !21
  %84 = bitcast i32 %80 to float, !dbg !21
  %85 = bitcast i32 %81 to float, !dbg !21
  %86 = bitcast i32 %82 to float, !dbg !21
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !22
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #5, !dbg !23
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !23
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !23
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !23
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !23
  %96 = bitcast i32 %92 to float, !dbg !23
  %97 = bitcast i32 %93 to float, !dbg !23
  %98 = bitcast i32 %94 to float, !dbg !23
  %99 = bitcast i32 %95 to float, !dbg !23
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %88, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #5, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !23
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !23
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !23
  %105 = bitcast i32 %101 to float, !dbg !23
  %106 = bitcast i32 %102 to float, !dbg !23
  %107 = bitcast i32 %103 to float, !dbg !23
  %108 = bitcast i32 %104 to float, !dbg !23
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #5, !dbg !23
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !23
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !23
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !23
  %114 = bitcast i32 %110 to float, !dbg !23
  %115 = bitcast i32 %111 to float, !dbg !23
  %116 = bitcast i32 %112 to float, !dbg !23
  %117 = bitcast i32 %113 to float, !dbg !23
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %90, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #5, !dbg !23
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !23
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !23
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !23
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !23
  %123 = bitcast i32 %119 to float, !dbg !23
  %124 = bitcast i32 %120 to float, !dbg !23
  %125 = bitcast i32 %121 to float, !dbg !23
  %126 = bitcast i32 %122 to float, !dbg !23
  %127 = zext nneg i32 %29 to i64, !dbg !24
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !24
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !25
  %134 = bitcast i32 %130 to float, !dbg !25
  %135 = bitcast i32 %131 to float, !dbg !25
  %136 = bitcast i32 %132 to float, !dbg !25
  %137 = bitcast i32 %133 to float, !dbg !25
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %127, !dbg !26
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !27
  %140 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !28
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #5, !dbg !29
  %142 = fadd float %96, %134, !dbg !30
  %143 = fadd float %97, %135, !dbg !30
  %144 = fadd float %98, %136, !dbg !30
  %145 = fadd float %99, %137, !dbg !30
  %146 = fadd float %105, %134, !dbg !30
  %147 = fadd float %106, %135, !dbg !30
  %148 = fadd float %107, %136, !dbg !30
  %149 = fadd float %108, %137, !dbg !30
  %150 = fadd float %114, %134, !dbg !30
  %151 = fadd float %115, %135, !dbg !30
  %152 = fadd float %116, %136, !dbg !30
  %153 = fadd float %117, %137, !dbg !30
  %154 = fadd float %123, %134, !dbg !30
  %155 = fadd float %124, %135, !dbg !30
  %156 = fadd float %125, %136, !dbg !30
  %157 = fadd float %126, %137, !dbg !30
  %158 = fadd float %142, %56, !dbg !31
  %159 = fadd float %143, %57, !dbg !31
  %160 = fadd float %144, %58, !dbg !31
  %161 = fadd float %145, %59, !dbg !31
  %162 = fadd float %146, %65, !dbg !31
  %163 = fadd float %147, %66, !dbg !31
  %164 = fadd float %148, %67, !dbg !31
  %165 = fadd float %149, %68, !dbg !31
  %166 = fadd float %150, %74, !dbg !31
  %167 = fadd float %151, %75, !dbg !31
  %168 = fadd float %152, %76, !dbg !31
  %169 = fadd float %153, %77, !dbg !31
  %170 = fadd float %154, %83, !dbg !31
  %171 = fadd float %155, %84, !dbg !31
  %172 = fadd float %156, %85, !dbg !31
  %173 = fadd float %157, %86, !dbg !31
  %174 = fadd float %158, %159, !dbg !32
  %175 = fadd float %160, %174, !dbg !32
  %176 = fadd float %161, %175, !dbg !32
  %177 = select i1 %47, float %176, float 0.000000e+00, !dbg !32
  %178 = fadd float %162, %163, !dbg !32
  %179 = fadd float %164, %178, !dbg !32
  %180 = fadd float %165, %179, !dbg !32
  %181 = select i1 %48, float %180, float 0.000000e+00, !dbg !32
  %182 = fadd float %166, %167, !dbg !32
  %183 = fadd float %168, %182, !dbg !32
  %184 = fadd float %169, %183, !dbg !32
  %185 = select i1 %49, float %184, float 0.000000e+00, !dbg !32
  %186 = fadd float %170, %171, !dbg !32
  %187 = fadd float %172, %186, !dbg !32
  %188 = fadd float %173, %187, !dbg !32
  %189 = select i1 %50, float %188, float 0.000000e+00, !dbg !32
  %190 = bitcast float %177 to i32, !dbg !37
  %191 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %190, i32 16, i32 31), !dbg !37
  %192 = bitcast i32 %191 to float, !dbg !37
  %193 = fadd float %177, %192, !dbg !32
  %194 = bitcast float %193 to i32, !dbg !37
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !37
  %196 = bitcast i32 %195 to float, !dbg !37
  %197 = fadd float %193, %196, !dbg !32
  %198 = bitcast float %197 to i32, !dbg !37
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !37
  %200 = bitcast i32 %199 to float, !dbg !37
  %201 = fadd float %197, %200, !dbg !32
  %202 = bitcast float %201 to i32, !dbg !37
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !37
  %204 = bitcast i32 %203 to float, !dbg !37
  %205 = fadd float %201, %204, !dbg !32
  %206 = bitcast float %205 to i32, !dbg !37
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !37
  %208 = bitcast i32 %207 to float, !dbg !37
  %209 = fadd float %205, %208, !dbg !32
  %210 = bitcast float %181 to i32, !dbg !37
  %211 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %210, i32 16, i32 31), !dbg !37
  %212 = bitcast i32 %211 to float, !dbg !37
  %213 = fadd float %181, %212, !dbg !32
  %214 = bitcast float %213 to i32, !dbg !37
  %215 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 8, i32 31), !dbg !37
  %216 = bitcast i32 %215 to float, !dbg !37
  %217 = fadd float %213, %216, !dbg !32
  %218 = bitcast float %217 to i32, !dbg !37
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 4, i32 31), !dbg !37
  %220 = bitcast i32 %219 to float, !dbg !37
  %221 = fadd float %217, %220, !dbg !32
  %222 = bitcast float %221 to i32, !dbg !37
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !37
  %224 = bitcast i32 %223 to float, !dbg !37
  %225 = fadd float %221, %224, !dbg !32
  %226 = bitcast float %225 to i32, !dbg !37
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 1, i32 31), !dbg !37
  %228 = bitcast i32 %227 to float, !dbg !37
  %229 = fadd float %225, %228, !dbg !32
  %230 = bitcast float %185 to i32, !dbg !37
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 16, i32 31), !dbg !37
  %232 = bitcast i32 %231 to float, !dbg !37
  %233 = fadd float %185, %232, !dbg !32
  %234 = bitcast float %233 to i32, !dbg !37
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !37
  %236 = bitcast i32 %235 to float, !dbg !37
  %237 = fadd float %233, %236, !dbg !32
  %238 = bitcast float %237 to i32, !dbg !37
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 4, i32 31), !dbg !37
  %240 = bitcast i32 %239 to float, !dbg !37
  %241 = fadd float %237, %240, !dbg !32
  %242 = bitcast float %241 to i32, !dbg !37
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !37
  %244 = bitcast i32 %243 to float, !dbg !37
  %245 = fadd float %241, %244, !dbg !32
  %246 = bitcast float %245 to i32, !dbg !37
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !37
  %248 = bitcast i32 %247 to float, !dbg !37
  %249 = fadd float %245, %248, !dbg !32
  %250 = bitcast float %189 to i32, !dbg !37
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !37
  %252 = bitcast i32 %251 to float, !dbg !37
  %253 = fadd float %189, %252, !dbg !32
  %254 = bitcast float %253 to i32, !dbg !37
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !37
  %256 = bitcast i32 %255 to float, !dbg !37
  %257 = fadd float %253, %256, !dbg !32
  %258 = bitcast float %257 to i32, !dbg !37
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !37
  %260 = bitcast i32 %259 to float, !dbg !37
  %261 = fadd float %257, %260, !dbg !32
  %262 = bitcast float %261 to i32, !dbg !37
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 2, i32 31), !dbg !37
  %264 = bitcast i32 %263 to float, !dbg !37
  %265 = fadd float %261, %264, !dbg !32
  %266 = bitcast float %265 to i32, !dbg !37
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 1, i32 31), !dbg !37
  %268 = bitcast i32 %267 to float, !dbg !37
  %269 = fadd float %265, %268, !dbg !32
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float 9.600000e+01) #5, !dbg !38
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %229, float 9.600000e+01) #5, !dbg !38
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 9.600000e+01) #5, !dbg !38
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float 9.600000e+01) #5, !dbg !38
  %274 = fsub float %158, %270, !dbg !39
  %275 = fsub float %159, %270, !dbg !39
  %276 = fsub float %160, %270, !dbg !39
  %277 = fsub float %161, %270, !dbg !39
  %278 = fsub float %162, %271, !dbg !39
  %279 = fsub float %163, %271, !dbg !39
  %280 = fsub float %164, %271, !dbg !39
  %281 = fsub float %165, %271, !dbg !39
  %282 = fsub float %166, %272, !dbg !39
  %283 = fsub float %167, %272, !dbg !39
  %284 = fsub float %168, %272, !dbg !39
  %285 = fsub float %169, %272, !dbg !39
  %286 = fsub float %170, %273, !dbg !39
  %287 = fsub float %171, %273, !dbg !39
  %288 = fsub float %172, %273, !dbg !39
  %289 = fsub float %173, %273, !dbg !39
  %290 = fmul float %274, %274, !dbg !40
  %291 = fmul float %275, %275, !dbg !40
  %292 = fmul float %276, %276, !dbg !40
  %293 = fmul float %277, %277, !dbg !40
  %294 = fmul float %278, %278, !dbg !40
  %295 = fmul float %279, %279, !dbg !40
  %296 = fmul float %280, %280, !dbg !40
  %297 = fmul float %281, %281, !dbg !40
  %298 = fmul float %282, %282, !dbg !40
  %299 = fmul float %283, %283, !dbg !40
  %300 = fmul float %284, %284, !dbg !40
  %301 = fmul float %285, %285, !dbg !40
  %302 = fmul float %286, %286, !dbg !40
  %303 = fmul float %287, %287, !dbg !40
  %304 = fmul float %288, %288, !dbg !40
  %305 = fmul float %289, %289, !dbg !40
  %306 = fadd float %290, %291, !dbg !41
  %307 = fadd float %292, %306, !dbg !41
  %308 = fadd float %293, %307, !dbg !41
  %309 = select i1 %47, float %308, float 0.000000e+00, !dbg !41
  %310 = fadd float %294, %295, !dbg !41
  %311 = fadd float %296, %310, !dbg !41
  %312 = fadd float %297, %311, !dbg !41
  %313 = select i1 %48, float %312, float 0.000000e+00, !dbg !41
  %314 = fadd float %298, %299, !dbg !41
  %315 = fadd float %300, %314, !dbg !41
  %316 = fadd float %301, %315, !dbg !41
  %317 = select i1 %49, float %316, float 0.000000e+00, !dbg !41
  %318 = fadd float %302, %303, !dbg !41
  %319 = fadd float %304, %318, !dbg !41
  %320 = fadd float %305, %319, !dbg !41
  %321 = select i1 %50, float %320, float 0.000000e+00, !dbg !41
  %322 = bitcast float %309 to i32, !dbg !43
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 16, i32 31), !dbg !43
  %324 = bitcast i32 %323 to float, !dbg !43
  %325 = fadd float %309, %324, !dbg !41
  %326 = bitcast float %325 to i32, !dbg !43
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 8, i32 31), !dbg !43
  %328 = bitcast i32 %327 to float, !dbg !43
  %329 = fadd float %325, %328, !dbg !41
  %330 = bitcast float %329 to i32, !dbg !43
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 4, i32 31), !dbg !43
  %332 = bitcast i32 %331 to float, !dbg !43
  %333 = fadd float %329, %332, !dbg !41
  %334 = bitcast float %333 to i32, !dbg !43
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 2, i32 31), !dbg !43
  %336 = bitcast i32 %335 to float, !dbg !43
  %337 = fadd float %333, %336, !dbg !41
  %338 = bitcast float %337 to i32, !dbg !43
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 1, i32 31), !dbg !43
  %340 = bitcast i32 %339 to float, !dbg !43
  %341 = fadd float %337, %340, !dbg !41
  %342 = bitcast float %313 to i32, !dbg !43
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 16, i32 31), !dbg !43
  %344 = bitcast i32 %343 to float, !dbg !43
  %345 = fadd float %313, %344, !dbg !41
  %346 = bitcast float %345 to i32, !dbg !43
  %347 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %346, i32 8, i32 31), !dbg !43
  %348 = bitcast i32 %347 to float, !dbg !43
  %349 = fadd float %345, %348, !dbg !41
  %350 = bitcast float %349 to i32, !dbg !43
  %351 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 4, i32 31), !dbg !43
  %352 = bitcast i32 %351 to float, !dbg !43
  %353 = fadd float %349, %352, !dbg !41
  %354 = bitcast float %353 to i32, !dbg !43
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 2, i32 31), !dbg !43
  %356 = bitcast i32 %355 to float, !dbg !43
  %357 = fadd float %353, %356, !dbg !41
  %358 = bitcast float %357 to i32, !dbg !43
  %359 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %358, i32 1, i32 31), !dbg !43
  %360 = bitcast i32 %359 to float, !dbg !43
  %361 = fadd float %357, %360, !dbg !41
  %362 = bitcast float %317 to i32, !dbg !43
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 16, i32 31), !dbg !43
  %364 = bitcast i32 %363 to float, !dbg !43
  %365 = fadd float %317, %364, !dbg !41
  %366 = bitcast float %365 to i32, !dbg !43
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 8, i32 31), !dbg !43
  %368 = bitcast i32 %367 to float, !dbg !43
  %369 = fadd float %365, %368, !dbg !41
  %370 = bitcast float %369 to i32, !dbg !43
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !43
  %372 = bitcast i32 %371 to float, !dbg !43
  %373 = fadd float %369, %372, !dbg !41
  %374 = bitcast float %373 to i32, !dbg !43
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 2, i32 31), !dbg !43
  %376 = bitcast i32 %375 to float, !dbg !43
  %377 = fadd float %373, %376, !dbg !41
  %378 = bitcast float %377 to i32, !dbg !43
  %379 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %378, i32 1, i32 31), !dbg !43
  %380 = bitcast i32 %379 to float, !dbg !43
  %381 = fadd float %377, %380, !dbg !41
  %382 = bitcast float %321 to i32, !dbg !43
  %383 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %382, i32 16, i32 31), !dbg !43
  %384 = bitcast i32 %383 to float, !dbg !43
  %385 = fadd float %321, %384, !dbg !41
  %386 = bitcast float %385 to i32, !dbg !43
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 8, i32 31), !dbg !43
  %388 = bitcast i32 %387 to float, !dbg !43
  %389 = fadd float %385, %388, !dbg !41
  %390 = bitcast float %389 to i32, !dbg !43
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 4, i32 31), !dbg !43
  %392 = bitcast i32 %391 to float, !dbg !43
  %393 = fadd float %389, %392, !dbg !41
  %394 = bitcast float %393 to i32, !dbg !43
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 2, i32 31), !dbg !43
  %396 = bitcast i32 %395 to float, !dbg !43
  %397 = fadd float %393, %396, !dbg !41
  %398 = bitcast float %397 to i32, !dbg !43
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 1, i32 31), !dbg !43
  %400 = bitcast i32 %399 to float, !dbg !43
  %401 = fadd float %397, %400, !dbg !41
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !44
  %403 = bitcast float %341 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #5, !dbg !44
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !44
  %405 = bitcast float %361 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #5, !dbg !44
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !44
  %407 = bitcast float %381 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #5, !dbg !44
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !44
  %409 = bitcast float %401 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %410 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !44
  %411 = load float, ptr addrspace(3) %410, align 4, !dbg !44
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %411, float 9.600000e+01) #5, !dbg !45
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %341, float 9.600000e+01) #5, !dbg !45
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float 9.600000e+01) #5, !dbg !45
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float 9.600000e+01) #5, !dbg !45
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %401, float 9.600000e+01) #5, !dbg !45
  %417 = fadd float %412, 0x3EB0C6F7A0000000, !dbg !46
  %418 = fadd float %413, 0x3EB0C6F7A0000000, !dbg !46
  %419 = fadd float %414, 0x3EB0C6F7A0000000, !dbg !46
  %420 = fadd float %415, 0x3EB0C6F7A0000000, !dbg !46
  %421 = fadd float %416, 0x3EB0C6F7A0000000, !dbg !46
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i = icmp eq i32 %422, 0, !dbg !47
  br i1 %.not.i, label %425, label %423, !dbg !47

423:                                              ; preds = %10
  %424 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %417), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

425:                                              ; preds = %10
  %426 = tail call float @llvm.nvvm.rsqrt.approx.f(float %417), !dbg !47
  br label %__nv_rsqrtf.exit, !dbg !47

__nv_rsqrtf.exit:                                 ; preds = %423, %425
  %.0.i = phi float [ %424, %423 ], [ %426, %425 ], !dbg !47
  %427 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %428 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i10 = icmp eq i32 %430, 0, !dbg !47
  br i1 %.not.i10, label %433, label %431, !dbg !47

431:                                              ; preds = %__nv_rsqrtf.exit
  %432 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %418), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

433:                                              ; preds = %__nv_rsqrtf.exit
  %434 = tail call float @llvm.nvvm.rsqrt.approx.f(float %418), !dbg !47
  br label %__nv_rsqrtf.exit12, !dbg !47

__nv_rsqrtf.exit12:                               ; preds = %431, %433
  %.0.i11 = phi float [ %432, %431 ], [ %434, %433 ], !dbg !47
  %435 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %436 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i22 = icmp eq i32 %438, 0, !dbg !47
  br i1 %.not.i22, label %441, label %439, !dbg !47

439:                                              ; preds = %__nv_rsqrtf.exit12
  %440 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %419), !dbg !47
  br label %__nv_rsqrtf.exit24, !dbg !47

441:                                              ; preds = %__nv_rsqrtf.exit12
  %442 = tail call float @llvm.nvvm.rsqrt.approx.f(float %419), !dbg !47
  br label %__nv_rsqrtf.exit24, !dbg !47

__nv_rsqrtf.exit24:                               ; preds = %439, %441
  %.0.i23 = phi float [ %440, %439 ], [ %442, %441 ], !dbg !47
  %443 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %444 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i34 = icmp eq i32 %446, 0, !dbg !47
  br i1 %.not.i34, label %449, label %447, !dbg !47

447:                                              ; preds = %__nv_rsqrtf.exit24
  %448 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %420), !dbg !47
  br label %__nv_rsqrtf.exit36, !dbg !47

449:                                              ; preds = %__nv_rsqrtf.exit24
  %450 = tail call float @llvm.nvvm.rsqrt.approx.f(float %420), !dbg !47
  br label %__nv_rsqrtf.exit36, !dbg !47

__nv_rsqrtf.exit36:                               ; preds = %447, %449
  %.0.i35 = phi float [ %448, %447 ], [ %450, %449 ], !dbg !47
  %451 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %452 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !47
  %.not.i46 = icmp eq i32 %454, 0, !dbg !47
  br i1 %.not.i46, label %457, label %455, !dbg !47

455:                                              ; preds = %__nv_rsqrtf.exit36
  %456 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %421), !dbg !47
  br label %__nv_rsqrtf.exit48, !dbg !47

457:                                              ; preds = %__nv_rsqrtf.exit36
  %458 = tail call float @llvm.nvvm.rsqrt.approx.f(float %421), !dbg !47
  br label %__nv_rsqrtf.exit48, !dbg !47

__nv_rsqrtf.exit48:                               ; preds = %455, %457
  %.0.i47 = phi float [ %456, %455 ], [ %458, %457 ], !dbg !47
  %459 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !29
  %460 = bitcast i32 %459 to float, !dbg !29
  %461 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !29
  %462 = bitcast i32 %461 to float, !dbg !29
  %463 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !29
  %464 = bitcast i32 %463 to float, !dbg !29
  %465 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !29
  %466 = bitcast i32 %465 to float, !dbg !29
  %467 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !27
  %468 = bitcast i32 %467 to float, !dbg !27
  %469 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !27
  %470 = bitcast i32 %469 to float, !dbg !27
  %471 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !27
  %472 = bitcast i32 %471 to float, !dbg !27
  %473 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !27
  %474 = bitcast i32 %473 to float, !dbg !27
  %475 = or disjoint i32 %12, %19, !dbg !13
  %476 = icmp slt i32 %475, 1024, !dbg !14
  %477 = fmul float %274, %.0.i11, !dbg !48
  %478 = fmul float %275, %.0.i11, !dbg !48
  %479 = fmul float %276, %.0.i11, !dbg !48
  %480 = fmul float %277, %.0.i11, !dbg !48
  %481 = fmul float %278, %.0.i23, !dbg !48
  %482 = fmul float %279, %.0.i23, !dbg !48
  %483 = fmul float %280, %.0.i23, !dbg !48
  %484 = fmul float %281, %.0.i23, !dbg !48
  %485 = fmul float %282, %.0.i35, !dbg !48
  %486 = fmul float %283, %.0.i35, !dbg !48
  %487 = fmul float %284, %.0.i35, !dbg !48
  %488 = fmul float %285, %.0.i35, !dbg !48
  %489 = fmul float %286, %.0.i47, !dbg !48
  %490 = fmul float %287, %.0.i47, !dbg !48
  %491 = fmul float %288, %.0.i47, !dbg !48
  %492 = fmul float %289, %.0.i47, !dbg !48
  %493 = fmul float %477, %474, !dbg !49
  %494 = fmul float %478, %472, !dbg !49
  %495 = fmul float %479, %470, !dbg !49
  %496 = fmul float %480, %468, !dbg !49
  %497 = fmul float %481, %474, !dbg !49
  %498 = fmul float %482, %472, !dbg !49
  %499 = fmul float %483, %470, !dbg !49
  %500 = fmul float %484, %468, !dbg !49
  %501 = fmul float %485, %474, !dbg !49
  %502 = fmul float %486, %472, !dbg !49
  %503 = fmul float %487, %470, !dbg !49
  %504 = fmul float %488, %468, !dbg !49
  %505 = fmul float %489, %474, !dbg !49
  %506 = fmul float %490, %472, !dbg !49
  %507 = fmul float %491, %470, !dbg !49
  %508 = fmul float %492, %468, !dbg !49
  %509 = fadd float %493, %466, !dbg !50
  %510 = fadd float %494, %464, !dbg !50
  %511 = fadd float %495, %462, !dbg !50
  %512 = fadd float %496, %460, !dbg !50
  %513 = fadd float %497, %466, !dbg !50
  %514 = fadd float %498, %464, !dbg !50
  %515 = fadd float %499, %462, !dbg !50
  %516 = fadd float %500, %460, !dbg !50
  %517 = fadd float %501, %466, !dbg !50
  %518 = fadd float %502, %464, !dbg !50
  %519 = fadd float %503, %462, !dbg !50
  %520 = fadd float %504, %460, !dbg !50
  %521 = fadd float %505, %466, !dbg !50
  %522 = fadd float %506, %464, !dbg !50
  %523 = fadd float %507, %462, !dbg !50
  %524 = fadd float %508, %460, !dbg !50
  %525 = fmul float %.0.i, 0x3F85555560000000, !dbg !44
  %526 = bitcast float %158 to i32, !dbg !51
  %527 = bitcast float %159 to i32, !dbg !51
  %528 = bitcast float %160 to i32, !dbg !51
  %529 = bitcast float %161 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %526, i32 %527, i32 %528, i32 %529, ptr addrspace(1) %40, i1 %47) #5, !dbg !51
  %530 = bitcast float %162 to i32, !dbg !51
  %531 = bitcast float %163 to i32, !dbg !51
  %532 = bitcast float %164 to i32, !dbg !51
  %533 = bitcast float %165 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %530, i32 %531, i32 %532, i32 %533, ptr addrspace(1) %42, i1 %48) #5, !dbg !51
  %534 = bitcast float %166 to i32, !dbg !51
  %535 = bitcast float %167 to i32, !dbg !51
  %536 = bitcast float %168 to i32, !dbg !51
  %537 = bitcast float %169 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %534, i32 %535, i32 %536, i32 %537, ptr addrspace(1) %44, i1 %49) #5, !dbg !51
  %538 = bitcast float %170 to i32, !dbg !51
  %539 = bitcast float %171 to i32, !dbg !51
  %540 = bitcast float %172 to i32, !dbg !51
  %541 = bitcast float %173 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %538, i32 %539, i32 %540, i32 %541, ptr addrspace(1) %46, i1 %50) #5, !dbg !51
  %542 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !52
  %543 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !52
  %544 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !52
  %545 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !52
  %546 = bitcast float %477 to i32, !dbg !53
  %547 = bitcast float %478 to i32, !dbg !53
  %548 = bitcast float %479 to i32, !dbg !53
  %549 = bitcast float %480 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %546, i32 %547, i32 %548, i32 %549, ptr addrspace(1) %542, i1 %47) #5, !dbg !53
  %550 = bitcast float %481 to i32, !dbg !53
  %551 = bitcast float %482 to i32, !dbg !53
  %552 = bitcast float %483 to i32, !dbg !53
  %553 = bitcast float %484 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %550, i32 %551, i32 %552, i32 %553, ptr addrspace(1) %543, i1 %48) #5, !dbg !53
  %554 = bitcast float %485 to i32, !dbg !53
  %555 = bitcast float %486 to i32, !dbg !53
  %556 = bitcast float %487 to i32, !dbg !53
  %557 = bitcast float %488 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %554, i32 %555, i32 %556, i32 %557, ptr addrspace(1) %544, i1 %49) #5, !dbg !53
  %558 = bitcast float %489 to i32, !dbg !53
  %559 = bitcast float %490 to i32, !dbg !53
  %560 = bitcast float %491 to i32, !dbg !53
  %561 = bitcast float %492 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %558, i32 %559, i32 %560, i32 %561, ptr addrspace(1) %545, i1 %50) #5, !dbg !53
  %562 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !54
  %563 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !54
  %564 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !54
  %565 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !54
  %566 = bitcast float %509 to i32, !dbg !55
  %567 = bitcast float %510 to i32, !dbg !55
  %568 = bitcast float %511 to i32, !dbg !55
  %569 = bitcast float %512 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %566, i32 %567, i32 %568, i32 %569, ptr addrspace(1) %562, i1 %47) #5, !dbg !55
  %570 = bitcast float %513 to i32, !dbg !55
  %571 = bitcast float %514 to i32, !dbg !55
  %572 = bitcast float %515 to i32, !dbg !55
  %573 = bitcast float %516 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %570, i32 %571, i32 %572, i32 %573, ptr addrspace(1) %563, i1 %48) #5, !dbg !55
  %574 = bitcast float %517 to i32, !dbg !55
  %575 = bitcast float %518 to i32, !dbg !55
  %576 = bitcast float %519 to i32, !dbg !55
  %577 = bitcast float %520 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %574, i32 %575, i32 %576, i32 %577, ptr addrspace(1) %564, i1 %49) #5, !dbg !55
  %578 = bitcast float %521 to i32, !dbg !55
  %579 = bitcast float %522 to i32, !dbg !55
  %580 = bitcast float %523 to i32, !dbg !55
  %581 = bitcast float %524 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %578, i32 %579, i32 %580, i32 %581, ptr addrspace(1) %565, i1 %50) #5, !dbg !55
  %582 = sext i32 %475 to i64, !dbg !56
  %583 = getelementptr float, ptr addrspace(1) %7, i64 %582, !dbg !56
  %584 = and i32 %13, 224, !dbg !57
  %585 = icmp eq i32 %584, 0, !dbg !57
  %586 = bitcast float %525 to i32, !dbg !57
  %587 = and i1 %585, %476, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %586, ptr addrspace(1) %583, i1 %587) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7dea26b4zzczuuaqlsgwhj7eloag26ymcuissvjp564xtccycgp.py", directory: "inductor_cache/7d")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 42, scope: !7)
!18 = !DILocation(line: 31, column: 39, scope: !7)
!19 = !DILocation(line: 31, column: 34, scope: !7)
!20 = !DILocation(line: 31, column: 55, scope: !7)
!21 = !DILocation(line: 31, column: 47, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 42, column: 26, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 50, column: 26, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 61, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 28, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 62, column: 47, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 45, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 45, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 37, scope: !7)
!58 = !DILocation(line: 65, column: 4, scope: !7)
