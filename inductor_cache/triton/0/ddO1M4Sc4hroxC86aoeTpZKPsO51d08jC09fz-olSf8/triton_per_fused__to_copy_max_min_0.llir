; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused__to_copy_max_min_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = or disjoint i32 %6, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = lshr i32 %7, 5, !dbg !15
  %12 = and i32 %11, 7, !dbg !15
  %13 = or disjoint i32 %12, 32, !dbg !15
  %14 = icmp samesign ult i32 %13, 36, !dbg !16
  %.frozen = freeze i32 %9, !dbg !17
  %15 = sdiv i32 %.frozen, 16, !dbg !17
  %16 = mul i32 %15, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !19
  %17 = sdiv i8 %.lhs.trunc, 4, !dbg !19
  %.lhs.trunc1 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %18 = udiv i8 %.lhs.trunc1, 3, !dbg !20
  %.zext = zext nneg i8 %18 to i32, !dbg !20
  %19 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc2 = or disjoint i8 %19, 8, !dbg !20
  %20 = udiv i8 %.lhs.trunc2, 3, !dbg !20
  %.zext3 = zext nneg i8 %20 to i32, !dbg !20
  %21 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc4 = or disjoint i8 %21, 16, !dbg !20
  %22 = udiv i8 %.lhs.trunc4, 3, !dbg !20
  %23 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc6 = or disjoint i8 %23, 24, !dbg !20
  %24 = udiv i8 %.lhs.trunc6, 3, !dbg !20
  %.lhs.trunc8 = trunc nuw nsw i32 %13 to i8, !dbg !20
  %25 = udiv i8 %.lhs.trunc8, 3, !dbg !20
  %26 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc10 = or disjoint i8 %26, 40, !dbg !20
  %27 = udiv i8 %.lhs.trunc10, 3, !dbg !20
  %28 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc12 = or disjoint i8 %28, 48, !dbg !20
  %29 = udiv i8 %.lhs.trunc12, 3, !dbg !20
  %30 = trunc nuw nsw i32 %12 to i8, !dbg !20
  %.lhs.trunc14 = or disjoint i8 %30, 56, !dbg !20
  %31 = udiv i8 %.lhs.trunc14, 3, !dbg !20
  %.urem = add nsw i32 %.zext3, -3, !dbg !21
  %.cmp = icmp eq i32 %12, 0, !dbg !21
  %32 = select i1 %.cmp, i32 %.zext3, i32 %.urem, !dbg !21
  %33 = urem i8 %27, 3, !dbg !21
  %34 = urem i8 %29, 3, !dbg !21
  %35 = urem i8 %31, 3, !dbg !21
  %36 = mul i8 %18, 3, !dbg !22
  %.decomposed60 = sub i8 %.lhs.trunc1, %36, !dbg !22
  %.zext29 = zext nneg i8 %.decomposed60 to i32, !dbg !22
  %37 = mul i8 %20, 3, !dbg !22
  %.decomposed61 = sub i8 %.lhs.trunc2, %37, !dbg !22
  %.zext31 = zext nneg i8 %.decomposed61 to i32, !dbg !22
  %38 = mul i8 %27, 3, !dbg !22
  %.decomposed62 = sub i8 %.lhs.trunc10, %38, !dbg !22
  %.zext39 = zext nneg i8 %.decomposed62 to i32, !dbg !22
  %39 = mul i8 %29, 3, !dbg !22
  %.decomposed63 = sub i8 %.lhs.trunc12, %39, !dbg !22
  %.zext41 = zext nneg i8 %.decomposed63 to i32, !dbg !22
  %40 = mul i8 %31, 3, !dbg !22
  %.decomposed64 = sub i8 %.lhs.trunc14, %40, !dbg !22
  %.zext43 = zext nneg i8 %.decomposed64 to i32, !dbg !22
  %41 = mul i8 %17, 4, !dbg !23
  %.decomposed65 = sub i8 %.lhs.trunc, %41, !dbg !23
  %42 = insertelement <2 x i8> poison, i8 %17, i64 0, !dbg !24
  %43 = insertelement <2 x i8> %42, i8 %.decomposed65, i64 1, !dbg !24
  %44 = add nsw <2 x i8> %43, splat (i8 -1), !dbg !24
  %45 = insertelement <2 x i8> poison, i8 %25, i64 0, !dbg !21
  %46 = insertelement <2 x i8> %45, i8 %.lhs.trunc8, i64 1, !dbg !21
  %47 = urem <2 x i8> %46, splat (i8 3), !dbg !21
  %48 = insertelement <2 x i8> poison, i8 %24, i64 0, !dbg !21
  %49 = insertelement <2 x i8> %48, i8 %.lhs.trunc6, i64 1, !dbg !21
  %50 = urem <2 x i8> %49, splat (i8 3), !dbg !21
  %51 = zext nneg <2 x i8> %50 to <2 x i16>, !dbg !21
  %52 = sext <2 x i8> %44 to <2 x i16>, !dbg !25
  %53 = insertelement <2 x i8> poison, i8 %22, i64 0, !dbg !21
  %54 = insertelement <2 x i8> %53, i8 %.lhs.trunc4, i64 1, !dbg !21
  %55 = urem <2 x i8> %54, splat (i8 3), !dbg !21
  %56 = zext nneg <2 x i8> %55 to <2 x i16>, !dbg !21
  %57 = extractelement <2 x i16> %52, i64 0, !dbg !25
  %58 = sext i16 %57 to i32, !dbg !25
  %59 = add nsw i32 %58, %.zext, !dbg !25
  %60 = add nsw i32 %32, %58, !dbg !25
  %61 = extractelement <2 x i16> %52, i64 1, !dbg !26
  %62 = sext i16 %61 to i32, !dbg !26
  %63 = add nsw i32 %62, %.zext29, !dbg !26
  %64 = add nsw i32 %62, %.zext31, !dbg !26
  %65 = add nsw <2 x i16> %52, %56, !dbg !25
  %66 = add nsw <2 x i16> %52, %51, !dbg !25
  %67 = add <2 x i8> %44, %47, !dbg !25
  %68 = or i32 %59, %63, !dbg !27
  %69 = icmp ult i32 %68, 4, !dbg !27
  %70 = or i32 %60, %64, !dbg !27
  %71 = icmp ult i32 %70, 4, !dbg !27
  %72 = extractelement <2 x i16> %65, i64 0, !dbg !27
  %73 = extractelement <2 x i16> %65, i64 1, !dbg !27
  %74 = or i16 %72, %73, !dbg !27
  %75 = icmp ult i16 %74, 4, !dbg !27
  %76 = extractelement <2 x i16> %66, i64 0, !dbg !27
  %77 = extractelement <2 x i16> %66, i64 1, !dbg !27
  %78 = or i16 %76, %77, !dbg !27
  %79 = icmp ult i16 %78, 4, !dbg !27
  %80 = extractelement <2 x i8> %67, i64 0, !dbg !27
  %81 = extractelement <2 x i8> %67, i64 1, !dbg !27
  %82 = or i8 %80, %81, !dbg !27
  %83 = icmp ult i8 %82, 4, !dbg !27
  %84 = add nsw i32 %.decomposed, -5, !dbg !28
  %85 = shl nuw nsw i32 %.zext, 2, !dbg !29
  %86 = shl nuw nsw i32 %32, 2, !dbg !29
  %87 = extractelement <2 x i16> %56, i64 0, !dbg !29
  %88 = shl nuw nsw i16 %87, 2, !dbg !29
  %89 = zext nneg i16 %88 to i32, !dbg !29
  %90 = extractelement <2 x i16> %51, i64 0, !dbg !29
  %91 = shl nuw nsw i16 %90, 2, !dbg !29
  %92 = zext nneg i16 %91 to i32, !dbg !29
  %93 = extractelement <2 x i8> %47, i64 0, !dbg !29
  %94 = shl nuw nsw i8 %93, 2, !dbg !29
  %95 = zext nneg i8 %94 to i32, !dbg !29
  %96 = shl nuw nsw i8 %33, 2, !dbg !29
  %97 = zext nneg i8 %96 to i32, !dbg !29
  %98 = shl nuw nsw i8 %34, 2, !dbg !29
  %99 = zext nneg i8 %98 to i32, !dbg !29
  %100 = shl nuw nsw i8 %35, 2, !dbg !29
  %101 = zext nneg i8 %100 to i32, !dbg !29
  %102 = udiv i8 %.lhs.trunc4, 9, !dbg !30
  %103 = udiv i8 %.lhs.trunc6, 9, !dbg !30
  %104 = udiv i8 %.lhs.trunc8, 9, !dbg !30
  %105 = udiv i8 %.lhs.trunc10, 9, !dbg !30
  %106 = udiv i8 %.lhs.trunc12, 9, !dbg !30
  %107 = udiv i8 %.lhs.trunc14, 9, !dbg !30
  %108 = select i1 %.cmp, i32 0, i32 16, !dbg !31
  %109 = shl nuw nsw i8 %102, 4, !dbg !31
  %110 = zext nneg i8 %109 to i32, !dbg !31
  %111 = shl nuw nsw i8 %103, 4, !dbg !31
  %112 = zext nneg i8 %111 to i32, !dbg !31
  %113 = shl nuw nsw i8 %104, 4, !dbg !31
  %114 = zext nneg i8 %113 to i32, !dbg !31
  %115 = shl nuw nsw i8 %105, 4, !dbg !31
  %116 = zext nneg i8 %115 to i32, !dbg !31
  %117 = shl nuw nsw i8 %106, 4, !dbg !31
  %118 = zext nneg i8 %117 to i32, !dbg !31
  %119 = shl nuw nsw i8 %107, 4, !dbg !31
  %120 = zext nneg i8 %119 to i32, !dbg !31
  %121 = shl i32 %15, 6, !dbg !32
  %122 = add i32 %121, %84, !dbg !33
  %123 = add i32 %122, %.zext29, !dbg !34
  %124 = add i32 %123, %85, !dbg !35
  %125 = add i32 %122, %108, !dbg !36
  %126 = add i32 %125, %.zext31, !dbg !34
  %127 = add i32 %126, %86, !dbg !35
  %128 = extractelement <2 x i16> %56, i64 1, !dbg !36
  %129 = zext nneg i16 %128 to i32, !dbg !36
  %130 = add i32 %122, %129, !dbg !36
  %131 = add i32 %130, %110, !dbg !34
  %132 = add i32 %131, %89, !dbg !35
  %133 = extractelement <2 x i16> %51, i64 1, !dbg !36
  %134 = zext nneg i16 %133 to i32, !dbg !36
  %135 = add i32 %122, %134, !dbg !36
  %136 = add i32 %135, %112, !dbg !34
  %137 = add i32 %136, %92, !dbg !35
  %138 = extractelement <2 x i8> %47, i64 1, !dbg !36
  %139 = zext nneg i8 %138 to i32, !dbg !36
  %140 = add i32 %122, %139, !dbg !36
  %141 = add i32 %140, %114, !dbg !34
  %142 = add i32 %141, %95, !dbg !35
  %143 = add i32 %122, %.zext39, !dbg !36
  %144 = add i32 %143, %116, !dbg !34
  %145 = add i32 %144, %97, !dbg !35
  %146 = add i32 %122, %.zext41, !dbg !36
  %147 = add i32 %146, %118, !dbg !34
  %148 = add i32 %147, %99, !dbg !35
  %149 = add i32 %122, %.zext43, !dbg !36
  %150 = add i32 %149, %120, !dbg !34
  %151 = add i32 %150, %101, !dbg !35
  %152 = sext i32 %124 to i64, !dbg !37
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !37
  %154 = sext i32 %127 to i64, !dbg !37
  %155 = getelementptr float, ptr addrspace(1) %1, i64 %154, !dbg !37
  %156 = sext i32 %132 to i64, !dbg !37
  %157 = getelementptr float, ptr addrspace(1) %1, i64 %156, !dbg !37
  %158 = sext i32 %137 to i64, !dbg !37
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !37
  %160 = sext i32 %142 to i64, !dbg !37
  %161 = getelementptr float, ptr addrspace(1) %1, i64 %160, !dbg !37
  %162 = sext i32 %145 to i64, !dbg !37
  %163 = getelementptr float, ptr addrspace(1) %1, i64 %162, !dbg !37
  %164 = sext i32 %148 to i64, !dbg !37
  %165 = getelementptr float, ptr addrspace(1) %1, i64 %164, !dbg !37
  %166 = sext i32 %151 to i64, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %1, i64 %166, !dbg !37
  %168 = and i1 %14, %83, !dbg !38
  %169 = and i1 %10, %69, !dbg !39
  %170 = and i1 %10, %71, !dbg !39
  %171 = and i1 %10, %75, !dbg !39
  %172 = and i1 %10, %79, !dbg !39
  %173 = and i1 %10, %168, !dbg !39
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %169, i32 0, i1 %169) #3, !dbg !40
  %175 = bitcast i32 %174 to float, !dbg !40
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %170, i32 0, i1 %170) #3, !dbg !40
  %177 = bitcast i32 %176 to float, !dbg !40
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %171, i32 0, i1 %171) #3, !dbg !40
  %179 = bitcast i32 %178 to float, !dbg !40
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %172, i32 0, i1 %172) #3, !dbg !40
  %181 = bitcast i32 %180 to float, !dbg !40
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %173, i32 0, i1 %173) #3, !dbg !40
  %183 = bitcast i32 %182 to float, !dbg !40
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 false, i32 0, i1 false) #3, !dbg !40
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 false, i32 0, i1 false) #3, !dbg !40
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 false, i32 0, i1 false) #3, !dbg !40
  %187 = and i1 %14, %10, !dbg !41
  %188 = select i1 %10, float %175, float 0x7FF0000000000000, !dbg !42
  %189 = select i1 %10, float %177, float 0x7FF0000000000000, !dbg !42
  %190 = select i1 %10, float %179, float 0x7FF0000000000000, !dbg !42
  %191 = select i1 %10, float %181, float 0x7FF0000000000000, !dbg !42
  %192 = select i1 %187, float %183, float 0x7FF0000000000000, !dbg !42
  %193 = fcmp olt float %188, %189, !dbg !43
  %194 = fcmp uno float %188, 0.000000e+00, !dbg !48
  %195 = or i1 %193, %194, !dbg !49
  %196 = select i1 %195, float %188, float %189, !dbg !50
  %197 = fcmp olt float %196, %190, !dbg !43
  %198 = fcmp uno float %196, 0.000000e+00, !dbg !48
  %199 = or i1 %197, %198, !dbg !49
  %200 = select i1 %199, float %196, float %190, !dbg !50
  %201 = fcmp olt float %200, %191, !dbg !43
  %202 = fcmp uno float %200, 0.000000e+00, !dbg !48
  %203 = or i1 %201, %202, !dbg !49
  %204 = select i1 %203, float %200, float %191, !dbg !50
  %205 = fcmp olt float %204, %192, !dbg !43
  %206 = fcmp uno float %204, 0.000000e+00, !dbg !48
  %207 = or i1 %205, %206, !dbg !49
  %208 = select i1 %207, float %204, float %192, !dbg !50
  %209 = shl nuw nsw i32 %8, 3, !dbg !51
  %210 = or disjoint i32 %209, %12, !dbg !51
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !51
  %212 = bitcast float %208 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %213 = icmp slt i32 %7, 256, !dbg !51
  %214 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !51
  %215 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %213) #3, !dbg !51
  %216 = bitcast i32 %215 to float, !dbg !51
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 4, i32 31), !dbg !51
  %218 = bitcast i32 %217 to float, !dbg !51
  %219 = fcmp olt float %216, %218, !dbg !43
  %220 = fcmp uno float %216, 0.000000e+00, !dbg !48
  %221 = or i1 %220, %219, !dbg !49
  %222 = select i1 %221, float %216, float %218, !dbg !50
  %223 = bitcast float %222 to i32, !dbg !51
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 2, i32 31), !dbg !51
  %225 = bitcast i32 %224 to float, !dbg !51
  %226 = fcmp olt float %222, %225, !dbg !43
  %227 = fcmp uno float %222, 0.000000e+00, !dbg !48
  %228 = or i1 %226, %227, !dbg !49
  %229 = select i1 %228, float %222, float %225, !dbg !50
  %230 = bitcast float %229 to i32, !dbg !51
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !51
  %232 = bitcast i32 %231 to float, !dbg !51
  %233 = fcmp olt float %229, %232, !dbg !43
  %234 = fcmp uno float %229, 0.000000e+00, !dbg !48
  %235 = or i1 %233, %234, !dbg !49
  %236 = and i32 %7, 7, !dbg !51
  %237 = icmp eq i32 %236, 0, !dbg !51
  %238 = and i1 %213, %237, !dbg !51
  %239 = select i1 %235, i32 %230, i32 %231, !dbg !50
  %240 = insertelement <1 x i32> poison, i32 %239, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %240, i1 %238) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !51
  %242 = load float, ptr addrspace(3) %241, align 16, !dbg !51
  %243 = select i1 %10, float %175, float 0xFFF0000000000000, !dbg !52
  %244 = select i1 %10, float %177, float 0xFFF0000000000000, !dbg !52
  %245 = select i1 %10, float %179, float 0xFFF0000000000000, !dbg !52
  %246 = select i1 %10, float %181, float 0xFFF0000000000000, !dbg !52
  %247 = select i1 %187, float %183, float 0xFFF0000000000000, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %248 = fcmp ogt float %243, %244, !dbg !55
  %249 = fcmp uno float %243, 0.000000e+00, !dbg !56
  %250 = or i1 %248, %249, !dbg !57
  %251 = select i1 %250, float %243, float %244, !dbg !58
  %252 = fcmp ogt float %251, %245, !dbg !55
  %253 = fcmp uno float %251, 0.000000e+00, !dbg !56
  %254 = or i1 %252, %253, !dbg !57
  %255 = select i1 %254, float %251, float %245, !dbg !58
  %256 = fcmp ogt float %255, %246, !dbg !55
  %257 = fcmp uno float %255, 0.000000e+00, !dbg !56
  %258 = or i1 %256, %257, !dbg !57
  %259 = select i1 %258, float %255, float %246, !dbg !58
  %260 = fcmp ogt float %259, %247, !dbg !55
  %261 = fcmp uno float %259, 0.000000e+00, !dbg !56
  %262 = or i1 %260, %261, !dbg !57
  %263 = select i1 %262, float %259, float %247, !dbg !58
  %264 = bitcast float %263 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %264, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %265 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %214, i1 %213) #3, !dbg !53
  %266 = bitcast i32 %265 to float, !dbg !53
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 4, i32 31), !dbg !53
  %268 = bitcast i32 %267 to float, !dbg !53
  %269 = fcmp ogt float %266, %268, !dbg !55
  %270 = fcmp uno float %266, 0.000000e+00, !dbg !56
  %271 = or i1 %270, %269, !dbg !57
  %272 = select i1 %271, float %266, float %268, !dbg !58
  %273 = bitcast float %272 to i32, !dbg !53
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !53
  %275 = bitcast i32 %274 to float, !dbg !53
  %276 = fcmp ogt float %272, %275, !dbg !55
  %277 = fcmp uno float %272, 0.000000e+00, !dbg !56
  %278 = or i1 %276, %277, !dbg !57
  %279 = select i1 %278, float %272, float %275, !dbg !58
  %280 = bitcast float %279 to i32, !dbg !53
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 1, i32 31), !dbg !53
  %282 = bitcast i32 %281 to float, !dbg !53
  %283 = fcmp ogt float %279, %282, !dbg !55
  %284 = fcmp uno float %279, 0.000000e+00, !dbg !56
  %285 = or i1 %283, %284, !dbg !57
  %286 = select i1 %285, i32 %280, i32 %281, !dbg !58
  %287 = insertelement <1 x i32> poison, i32 %286, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %287, i1 %238) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %288 = load float, ptr addrspace(3) %241, align 16, !dbg !53
  %289 = fsub float %288, %242, !dbg !59
  %290 = fcmp ogt float %289, 4.000000e+00, !dbg !60
  %291 = uitofp i1 %290 to float, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %292 = sext i32 %9 to i64, !dbg !63
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !63
  %294 = bitcast float %291 to i32, !dbg !64
  %295 = and i1 %.cmp, %10, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %294, ptr addrspace(1) %293, i1 %295) #3, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgdua4vc53scmbo2kiaajignh3rrosbwhk2ruhwcuh7ngfkpeyrs.py", directory: "inductor_cache/gd")
!4 = !{ptr @triton_per_fused__to_copy_max_min_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy_max_min_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy_max_min_0", linkageName: "triton_per_fused__to_copy_max_min_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 25, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 38, column: 25, scope: !7)
!23 = !DILocation(line: 38, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 32, scope: !7)
!26 = !DILocation(line: 38, column: 33, scope: !7)
!27 = !DILocation(line: 43, column: 19, scope: !7)
!28 = !DILocation(line: 44, column: 38, scope: !7)
!29 = !DILocation(line: 44, column: 47, scope: !7)
!30 = !DILocation(line: 44, column: 75, scope: !7)
!31 = !DILocation(line: 44, column: 69, scope: !7)
!32 = !DILocation(line: 44, column: 83, scope: !7)
!33 = !DILocation(line: 44, column: 43, scope: !7)
!34 = !DILocation(line: 44, column: 80, scope: !7)
!35 = !DILocation(line: 44, column: 90, scope: !7)
!36 = !DILocation(line: 44, column: 65, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 109, scope: !7)
!39 = !DILocation(line: 44, column: 117, scope: !7)
!40 = !DILocation(line: 44, column: 101, scope: !7)
!41 = !DILocation(line: 46, column: 29, scope: !7)
!42 = !DILocation(line: 46, column: 43, scope: !7)
!43 = !DILocation(line: 110, column: 15, scope: !44, inlinedAt: !47)
!44 = distinct !DILexicalBlockFile(scope: !46, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!47 = !DILocation(line: 47, column: 39, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !44, inlinedAt: !47)
!49 = !DILocation(line: 112, column: 16, scope: !44, inlinedAt: !47)
!50 = !DILocation(line: 113, column: 29, scope: !44, inlinedAt: !47)
!51 = !DILocation(line: 126, column: 29, scope: !46, inlinedAt: !47)
!52 = !DILocation(line: 48, column: 43, scope: !7)
!53 = !DILocation(line: 131, column: 29, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 49, column: 39, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 21, scope: !44, inlinedAt: !54)
!57 = !DILocation(line: 120, column: 16, scope: !44, inlinedAt: !54)
!58 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !54)
!59 = !DILocation(line: 50, column: 20, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 53, column: 21, scope: !7)
!62 = !DILocation(line: 54, column: 4, scope: !7)
!63 = !DILocation(line: 55, column: 28, scope: !7)
!64 = !DILocation(line: 55, column: 40, scope: !7)
!65 = !DILocation(line: 55, column: 4, scope: !7)
