; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %.lobit3 = lshr i32 %7, 5, !dbg !12
  %10 = and i32 %.lobit3, 3, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %11, 16, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %11, 3844, !dbg !14
  %22 = icmp slt i32 %12, 3844, !dbg !14
  %23 = icmp slt i32 %13, 3844, !dbg !14
  %24 = icmp slt i32 %14, 3844, !dbg !14
  %25 = icmp slt i32 %15, 3844, !dbg !14
  %26 = icmp slt i32 %16, 3844, !dbg !14
  %27 = icmp slt i32 %17, 3844, !dbg !14
  %28 = icmp slt i32 %18, 3844, !dbg !14
  %29 = icmp slt i32 %19, 3844, !dbg !14
  %30 = icmp slt i32 %20, 3844, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 5, !dbg !16
  %33 = shl i32 %7, 2, !dbg !17
  %34 = and i32 %33, 28, !dbg !17
  %35 = and i32 %7, 31, !dbg !17
  %36 = or disjoint i32 %32, %34, !dbg !18
  %37 = or disjoint i32 %32, %35, !dbg !18
  %38 = icmp slt i32 %36, 384, !dbg !19
  %39 = icmp slt i32 %37, 384, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %40 = sdiv i32 %.frozen, 31, !dbg !20
  %41 = mul i32 %40, 31, !dbg !21
  %.decomposed = sub i32 %.frozen, %41, !dbg !21
  %42 = sdiv i32 %12, 31, !dbg !20
  %43 = srem i32 %40, 31, !dbg !22
  %44 = sdiv i32 %11, 961, !dbg !23
  %45 = sdiv i32 %12, 961, !dbg !23
  %.frozen4 = freeze i32 %13, !dbg !23
  %46 = sdiv i32 %.frozen4, 961, !dbg !23
  %.frozen6 = freeze i32 %14, !dbg !23
  %47 = sdiv i32 %.frozen6, 961, !dbg !23
  %.frozen8 = freeze i32 %15, !dbg !23
  %48 = sdiv i32 %.frozen8, 961, !dbg !23
  %.frozen10 = freeze i32 %16, !dbg !23
  %49 = sdiv i32 %.frozen10, 961, !dbg !23
  %.frozen12 = freeze i32 %17, !dbg !23
  %50 = sdiv i32 %.frozen12, 961, !dbg !23
  %.frozen14 = freeze i32 %18, !dbg !23
  %51 = sdiv i32 %.frozen14, 961, !dbg !23
  %.frozen16 = freeze i32 %19, !dbg !23
  %52 = sdiv i32 %.frozen16, 961, !dbg !23
  %.frozen18 = freeze i32 %20, !dbg !23
  %53 = sdiv i32 %.frozen18, 961, !dbg !23
  %54 = mul i32 %46, 961, !dbg !24
  %.decomposed5 = sub i32 %.frozen4, %54, !dbg !24
  %55 = mul i32 %47, 961, !dbg !24
  %.decomposed7 = sub i32 %.frozen6, %55, !dbg !24
  %56 = mul i32 %48, 961, !dbg !24
  %.decomposed9 = sub i32 %.frozen8, %56, !dbg !24
  %57 = mul i32 %49, 961, !dbg !24
  %.decomposed11 = sub i32 %.frozen10, %57, !dbg !24
  %58 = mul i32 %50, 961, !dbg !24
  %.decomposed13 = sub i32 %.frozen12, %58, !dbg !24
  %59 = mul i32 %51, 961, !dbg !24
  %.decomposed15 = sub i32 %.frozen14, %59, !dbg !24
  %60 = mul i32 %52, 961, !dbg !24
  %.decomposed17 = sub i32 %.frozen16, %60, !dbg !24
  %61 = mul i32 %53, 961, !dbg !24
  %.decomposed19 = sub i32 %.frozen18, %61, !dbg !24
  %62 = mul nsw i32 %.decomposed, 768, !dbg !25
  %63 = mul nsw i32 %43, 49152, !dbg !26
  %64 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !21
  %65 = insertelement <2 x i32> %64, i32 %42, i64 1, !dbg !21
  %66 = srem <2 x i32> %65, splat (i32 31), !dbg !21
  %67 = mul nsw <2 x i32> %66, <i32 768, i32 49152>, !dbg !25
  %68 = mul i32 %44, 1572864, !dbg !27
  %69 = mul i32 %45, 1572864, !dbg !27
  %70 = add i32 %68, %62, !dbg !28
  %71 = add i32 %70, %36, !dbg !29
  %72 = add i32 %71, %63, !dbg !30
  %73 = extractelement <2 x i32> %67, i64 0, !dbg !28
  %74 = add i32 %69, %73, !dbg !28
  %75 = extractelement <2 x i32> %67, i64 1, !dbg !29
  %76 = add i32 %74, %75, !dbg !29
  %77 = add i32 %76, %36, !dbg !30
  %78 = sext i32 %72 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !31
  %80 = sext i32 %77 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = and i1 %21, %38, !dbg !32
  %83 = and i1 %22, %38, !dbg !32
  %84 = and i1 %23, %39, !dbg !32
  %85 = and i1 %24, %39, !dbg !32
  %86 = and i1 %25, %39, !dbg !32
  %87 = and i1 %26, %39, !dbg !32
  %88 = and i1 %27, %39, !dbg !32
  %89 = and i1 %28, %39, !dbg !32
  %90 = and i1 %29, %39, !dbg !32
  %91 = and i1 %30, %39, !dbg !32
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %82) #2, !dbg !33
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !33
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !33
  %97 = bitcast i32 %93 to float, !dbg !33
  %98 = bitcast i32 %94 to float, !dbg !33
  %99 = bitcast i32 %95 to float, !dbg !33
  %100 = bitcast i32 %96 to float, !dbg !33
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %83) #2, !dbg !33
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !33
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !33
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !33
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !33
  %106 = bitcast i32 %102 to float, !dbg !33
  %107 = bitcast i32 %103 to float, !dbg !33
  %108 = bitcast i32 %104 to float, !dbg !33
  %109 = bitcast i32 %105 to float, !dbg !33
  %110 = add i32 %36, 384, !dbg !34
  %111 = add i32 %70, %110, !dbg !35
  %112 = add i32 %111, %63, !dbg !36
  %113 = add i32 %76, %110, !dbg !36
  %114 = sext i32 %112 to i64, !dbg !37
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !37
  %116 = sext i32 %113 to i64, !dbg !37
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !37
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %82) #2, !dbg !38
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !38
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !38
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !38
  %123 = bitcast i32 %119 to float, !dbg !38
  %124 = bitcast i32 %120 to float, !dbg !38
  %125 = bitcast i32 %121 to float, !dbg !38
  %126 = bitcast i32 %122 to float, !dbg !38
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %83) #2, !dbg !38
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !38
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !38
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !38
  %132 = bitcast i32 %128 to float, !dbg !38
  %133 = bitcast i32 %129 to float, !dbg !38
  %134 = bitcast i32 %130 to float, !dbg !38
  %135 = bitcast i32 %131 to float, !dbg !38
  %136 = add i32 %36, 768, !dbg !39
  %137 = add i32 %70, %136, !dbg !40
  %138 = add i32 %137, %63, !dbg !41
  %139 = add i32 %76, %136, !dbg !41
  %140 = sext i32 %138 to i64, !dbg !42
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !42
  %142 = sext i32 %139 to i64, !dbg !42
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !42
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %141, i1 %82) #2, !dbg !43
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !43
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !43
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !43
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !43
  %149 = bitcast i32 %145 to float, !dbg !43
  %150 = bitcast i32 %146 to float, !dbg !43
  %151 = bitcast i32 %147 to float, !dbg !43
  %152 = bitcast i32 %148 to float, !dbg !43
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %83) #2, !dbg !43
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !43
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !43
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !43
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !43
  %158 = bitcast i32 %154 to float, !dbg !43
  %159 = bitcast i32 %155 to float, !dbg !43
  %160 = bitcast i32 %156 to float, !dbg !43
  %161 = bitcast i32 %157 to float, !dbg !43
  %162 = add i32 %36, 24576, !dbg !44
  %163 = add i32 %70, %162, !dbg !45
  %164 = add i32 %163, %63, !dbg !46
  %165 = add i32 %76, %162, !dbg !46
  %166 = sext i32 %164 to i64, !dbg !47
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !47
  %168 = sext i32 %165 to i64, !dbg !47
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !47
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %167, i1 %82) #2, !dbg !48
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !48
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !48
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !48
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !48
  %175 = bitcast i32 %171 to float, !dbg !48
  %176 = bitcast i32 %172 to float, !dbg !48
  %177 = bitcast i32 %173 to float, !dbg !48
  %178 = bitcast i32 %174 to float, !dbg !48
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 %83) #2, !dbg !48
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !48
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !48
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !48
  %184 = bitcast i32 %180 to float, !dbg !48
  %185 = bitcast i32 %181 to float, !dbg !48
  %186 = bitcast i32 %182 to float, !dbg !48
  %187 = bitcast i32 %183 to float, !dbg !48
  %188 = add i32 %36, 24960, !dbg !49
  %189 = add i32 %70, %188, !dbg !50
  %190 = add i32 %189, %63, !dbg !51
  %191 = add i32 %76, %188, !dbg !51
  %192 = sext i32 %190 to i64, !dbg !52
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !52
  %194 = sext i32 %191 to i64, !dbg !52
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !52
  %196 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %193, i1 %82) #2, !dbg !53
  %197 = extractvalue { i32, i32, i32, i32 } %196, 0, !dbg !53
  %198 = extractvalue { i32, i32, i32, i32 } %196, 1, !dbg !53
  %199 = extractvalue { i32, i32, i32, i32 } %196, 2, !dbg !53
  %200 = extractvalue { i32, i32, i32, i32 } %196, 3, !dbg !53
  %201 = bitcast i32 %197 to float, !dbg !53
  %202 = bitcast i32 %198 to float, !dbg !53
  %203 = bitcast i32 %199 to float, !dbg !53
  %204 = bitcast i32 %200 to float, !dbg !53
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %83) #2, !dbg !53
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !53
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !53
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !53
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !53
  %210 = bitcast i32 %206 to float, !dbg !53
  %211 = bitcast i32 %207 to float, !dbg !53
  %212 = bitcast i32 %208 to float, !dbg !53
  %213 = bitcast i32 %209 to float, !dbg !53
  %214 = add i32 %36, 25344, !dbg !54
  %215 = add i32 %70, %214, !dbg !55
  %216 = add i32 %215, %63, !dbg !56
  %217 = add i32 %76, %214, !dbg !56
  %218 = sext i32 %216 to i64, !dbg !57
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !57
  %220 = sext i32 %217 to i64, !dbg !57
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !57
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %82) #2, !dbg !58
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !58
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !58
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !58
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !58
  %227 = bitcast i32 %223 to float, !dbg !58
  %228 = bitcast i32 %224 to float, !dbg !58
  %229 = bitcast i32 %225 to float, !dbg !58
  %230 = bitcast i32 %226 to float, !dbg !58
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %83) #2, !dbg !58
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !58
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !58
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !58
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !58
  %236 = bitcast i32 %232 to float, !dbg !58
  %237 = bitcast i32 %233 to float, !dbg !58
  %238 = bitcast i32 %234 to float, !dbg !58
  %239 = bitcast i32 %235 to float, !dbg !58
  %240 = add i32 %36, 49152, !dbg !59
  %241 = add i32 %70, %240, !dbg !60
  %242 = add i32 %241, %63, !dbg !61
  %243 = add i32 %76, %240, !dbg !61
  %244 = sext i32 %242 to i64, !dbg !62
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !62
  %246 = sext i32 %243 to i64, !dbg !62
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !62
  %248 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %245, i1 %82) #2, !dbg !63
  %249 = extractvalue { i32, i32, i32, i32 } %248, 0, !dbg !63
  %250 = extractvalue { i32, i32, i32, i32 } %248, 1, !dbg !63
  %251 = extractvalue { i32, i32, i32, i32 } %248, 2, !dbg !63
  %252 = extractvalue { i32, i32, i32, i32 } %248, 3, !dbg !63
  %253 = bitcast i32 %249 to float, !dbg !63
  %254 = bitcast i32 %250 to float, !dbg !63
  %255 = bitcast i32 %251 to float, !dbg !63
  %256 = bitcast i32 %252 to float, !dbg !63
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %247, i1 %83) #2, !dbg !63
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !63
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !63
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !63
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !63
  %262 = bitcast i32 %258 to float, !dbg !63
  %263 = bitcast i32 %259 to float, !dbg !63
  %264 = bitcast i32 %260 to float, !dbg !63
  %265 = bitcast i32 %261 to float, !dbg !63
  %266 = add i32 %36, 49536, !dbg !64
  %267 = add i32 %70, %266, !dbg !65
  %268 = add i32 %267, %63, !dbg !66
  %269 = add i32 %76, %266, !dbg !66
  %270 = sext i32 %268 to i64, !dbg !67
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !67
  %272 = sext i32 %269 to i64, !dbg !67
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !67
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %271, i1 %82) #2, !dbg !68
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !68
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !68
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !68
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !68
  %279 = bitcast i32 %275 to float, !dbg !68
  %280 = bitcast i32 %276 to float, !dbg !68
  %281 = bitcast i32 %277 to float, !dbg !68
  %282 = bitcast i32 %278 to float, !dbg !68
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %83) #2, !dbg !68
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !68
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !68
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !68
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !68
  %288 = bitcast i32 %284 to float, !dbg !68
  %289 = bitcast i32 %285 to float, !dbg !68
  %290 = bitcast i32 %286 to float, !dbg !68
  %291 = bitcast i32 %287 to float, !dbg !68
  %292 = add i32 %36, 49920, !dbg !69
  %293 = add i32 %70, %292, !dbg !70
  %294 = add i32 %293, %63, !dbg !71
  %295 = add i32 %76, %292, !dbg !71
  %296 = sext i32 %294 to i64, !dbg !72
  %297 = getelementptr float, ptr addrspace(1) %0, i64 %296, !dbg !72
  %298 = sext i32 %295 to i64, !dbg !72
  %299 = getelementptr float, ptr addrspace(1) %0, i64 %298, !dbg !72
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %297, i1 %82) #2, !dbg !73
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !73
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !73
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !73
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !73
  %305 = bitcast i32 %301 to float, !dbg !73
  %306 = bitcast i32 %302 to float, !dbg !73
  %307 = bitcast i32 %303 to float, !dbg !73
  %308 = bitcast i32 %304 to float, !dbg !73
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %299, i1 %83) #2, !dbg !73
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !73
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !73
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !73
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !73
  %314 = bitcast i32 %310 to float, !dbg !73
  %315 = bitcast i32 %311 to float, !dbg !73
  %316 = bitcast i32 %312 to float, !dbg !73
  %317 = bitcast i32 %313 to float, !dbg !73
  %318 = fcmp ogt float %123, %97, !dbg !74
  %319 = fcmp ogt float %124, %98, !dbg !74
  %320 = fcmp ogt float %125, %99, !dbg !74
  %321 = fcmp ogt float %126, %100, !dbg !74
  %322 = fcmp ogt float %132, %106, !dbg !74
  %323 = fcmp ogt float %133, %107, !dbg !74
  %324 = fcmp ogt float %134, %108, !dbg !74
  %325 = fcmp ogt float %135, %109, !dbg !74
  %326 = fcmp uno float %123, 0.000000e+00, !dbg !78
  %327 = fcmp uno float %124, 0.000000e+00, !dbg !78
  %328 = fcmp uno float %125, 0.000000e+00, !dbg !78
  %329 = fcmp uno float %126, 0.000000e+00, !dbg !78
  %330 = fcmp uno float %132, 0.000000e+00, !dbg !78
  %331 = fcmp uno float %133, 0.000000e+00, !dbg !78
  %332 = fcmp uno float %134, 0.000000e+00, !dbg !78
  %333 = fcmp uno float %135, 0.000000e+00, !dbg !78
  %334 = or i1 %318, %326, !dbg !79
  %335 = or i1 %319, %327, !dbg !79
  %336 = or i1 %320, %328, !dbg !79
  %337 = or i1 %321, %329, !dbg !79
  %338 = or i1 %322, %330, !dbg !79
  %339 = or i1 %323, %331, !dbg !79
  %340 = or i1 %324, %332, !dbg !79
  %341 = or i1 %325, %333, !dbg !79
  %342 = select i1 %334, float %123, float %97, !dbg !80
  %343 = select i1 %335, float %124, float %98, !dbg !80
  %344 = select i1 %336, float %125, float %99, !dbg !80
  %345 = select i1 %337, float %126, float %100, !dbg !80
  %346 = select i1 %338, float %132, float %106, !dbg !80
  %347 = select i1 %339, float %133, float %107, !dbg !80
  %348 = select i1 %340, float %134, float %108, !dbg !80
  %349 = select i1 %341, float %135, float %109, !dbg !80
  %350 = fcmp olt float %342, %149, !dbg !81
  %351 = fcmp olt float %343, %150, !dbg !81
  %352 = fcmp olt float %344, %151, !dbg !81
  %353 = fcmp olt float %345, %152, !dbg !81
  %354 = fcmp olt float %346, %158, !dbg !81
  %355 = fcmp olt float %347, %159, !dbg !81
  %356 = fcmp olt float %348, %160, !dbg !81
  %357 = fcmp olt float %349, %161, !dbg !81
  %358 = fcmp uno float %149, 0.000000e+00, !dbg !83
  %359 = fcmp uno float %150, 0.000000e+00, !dbg !83
  %360 = fcmp uno float %151, 0.000000e+00, !dbg !83
  %361 = fcmp uno float %152, 0.000000e+00, !dbg !83
  %362 = fcmp uno float %158, 0.000000e+00, !dbg !83
  %363 = fcmp uno float %159, 0.000000e+00, !dbg !83
  %364 = fcmp uno float %160, 0.000000e+00, !dbg !83
  %365 = fcmp uno float %161, 0.000000e+00, !dbg !83
  %366 = or i1 %358, %350, !dbg !84
  %367 = or i1 %359, %351, !dbg !84
  %368 = or i1 %360, %352, !dbg !84
  %369 = or i1 %361, %353, !dbg !84
  %370 = or i1 %362, %354, !dbg !84
  %371 = or i1 %363, %355, !dbg !84
  %372 = or i1 %364, %356, !dbg !84
  %373 = or i1 %365, %357, !dbg !84
  %374 = select i1 %366, float %149, float %342, !dbg !85
  %375 = select i1 %367, float %150, float %343, !dbg !85
  %376 = select i1 %368, float %151, float %344, !dbg !85
  %377 = select i1 %369, float %152, float %345, !dbg !85
  %378 = select i1 %370, float %158, float %346, !dbg !85
  %379 = select i1 %371, float %159, float %347, !dbg !85
  %380 = select i1 %372, float %160, float %348, !dbg !85
  %381 = select i1 %373, float %161, float %349, !dbg !85
  %382 = fcmp olt float %374, %175, !dbg !86
  %383 = fcmp olt float %375, %176, !dbg !86
  %384 = fcmp olt float %376, %177, !dbg !86
  %385 = fcmp olt float %377, %178, !dbg !86
  %386 = fcmp olt float %378, %184, !dbg !86
  %387 = fcmp olt float %379, %185, !dbg !86
  %388 = fcmp olt float %380, %186, !dbg !86
  %389 = fcmp olt float %381, %187, !dbg !86
  %390 = fcmp uno float %175, 0.000000e+00, !dbg !88
  %391 = fcmp uno float %176, 0.000000e+00, !dbg !88
  %392 = fcmp uno float %177, 0.000000e+00, !dbg !88
  %393 = fcmp uno float %178, 0.000000e+00, !dbg !88
  %394 = fcmp uno float %184, 0.000000e+00, !dbg !88
  %395 = fcmp uno float %185, 0.000000e+00, !dbg !88
  %396 = fcmp uno float %186, 0.000000e+00, !dbg !88
  %397 = fcmp uno float %187, 0.000000e+00, !dbg !88
  %398 = or i1 %390, %382, !dbg !89
  %399 = or i1 %391, %383, !dbg !89
  %400 = or i1 %392, %384, !dbg !89
  %401 = or i1 %393, %385, !dbg !89
  %402 = or i1 %394, %386, !dbg !89
  %403 = or i1 %395, %387, !dbg !89
  %404 = or i1 %396, %388, !dbg !89
  %405 = or i1 %397, %389, !dbg !89
  %406 = select i1 %398, float %175, float %374, !dbg !90
  %407 = select i1 %399, float %176, float %375, !dbg !90
  %408 = select i1 %400, float %177, float %376, !dbg !90
  %409 = select i1 %401, float %178, float %377, !dbg !90
  %410 = select i1 %402, float %184, float %378, !dbg !90
  %411 = select i1 %403, float %185, float %379, !dbg !90
  %412 = select i1 %404, float %186, float %380, !dbg !90
  %413 = select i1 %405, float %187, float %381, !dbg !90
  %414 = fcmp olt float %406, %201, !dbg !91
  %415 = fcmp olt float %407, %202, !dbg !91
  %416 = fcmp olt float %408, %203, !dbg !91
  %417 = fcmp olt float %409, %204, !dbg !91
  %418 = fcmp olt float %410, %210, !dbg !91
  %419 = fcmp olt float %411, %211, !dbg !91
  %420 = fcmp olt float %412, %212, !dbg !91
  %421 = fcmp olt float %413, %213, !dbg !91
  %422 = fcmp uno float %201, 0.000000e+00, !dbg !93
  %423 = fcmp uno float %202, 0.000000e+00, !dbg !93
  %424 = fcmp uno float %203, 0.000000e+00, !dbg !93
  %425 = fcmp uno float %204, 0.000000e+00, !dbg !93
  %426 = fcmp uno float %210, 0.000000e+00, !dbg !93
  %427 = fcmp uno float %211, 0.000000e+00, !dbg !93
  %428 = fcmp uno float %212, 0.000000e+00, !dbg !93
  %429 = fcmp uno float %213, 0.000000e+00, !dbg !93
  %430 = or i1 %422, %414, !dbg !94
  %431 = or i1 %423, %415, !dbg !94
  %432 = or i1 %424, %416, !dbg !94
  %433 = or i1 %425, %417, !dbg !94
  %434 = or i1 %426, %418, !dbg !94
  %435 = or i1 %427, %419, !dbg !94
  %436 = or i1 %428, %420, !dbg !94
  %437 = or i1 %429, %421, !dbg !94
  %438 = select i1 %430, float %201, float %406, !dbg !95
  %439 = select i1 %431, float %202, float %407, !dbg !95
  %440 = select i1 %432, float %203, float %408, !dbg !95
  %441 = select i1 %433, float %204, float %409, !dbg !95
  %442 = select i1 %434, float %210, float %410, !dbg !95
  %443 = select i1 %435, float %211, float %411, !dbg !95
  %444 = select i1 %436, float %212, float %412, !dbg !95
  %445 = select i1 %437, float %213, float %413, !dbg !95
  %446 = fcmp olt float %438, %227, !dbg !96
  %447 = fcmp olt float %439, %228, !dbg !96
  %448 = fcmp olt float %440, %229, !dbg !96
  %449 = fcmp olt float %441, %230, !dbg !96
  %450 = fcmp olt float %442, %236, !dbg !96
  %451 = fcmp olt float %443, %237, !dbg !96
  %452 = fcmp olt float %444, %238, !dbg !96
  %453 = fcmp olt float %445, %239, !dbg !96
  %454 = fcmp uno float %227, 0.000000e+00, !dbg !98
  %455 = fcmp uno float %228, 0.000000e+00, !dbg !98
  %456 = fcmp uno float %229, 0.000000e+00, !dbg !98
  %457 = fcmp uno float %230, 0.000000e+00, !dbg !98
  %458 = fcmp uno float %236, 0.000000e+00, !dbg !98
  %459 = fcmp uno float %237, 0.000000e+00, !dbg !98
  %460 = fcmp uno float %238, 0.000000e+00, !dbg !98
  %461 = fcmp uno float %239, 0.000000e+00, !dbg !98
  %462 = or i1 %454, %446, !dbg !99
  %463 = or i1 %455, %447, !dbg !99
  %464 = or i1 %456, %448, !dbg !99
  %465 = or i1 %457, %449, !dbg !99
  %466 = or i1 %458, %450, !dbg !99
  %467 = or i1 %459, %451, !dbg !99
  %468 = or i1 %460, %452, !dbg !99
  %469 = or i1 %461, %453, !dbg !99
  %470 = select i1 %462, float %227, float %438, !dbg !100
  %471 = select i1 %463, float %228, float %439, !dbg !100
  %472 = select i1 %464, float %229, float %440, !dbg !100
  %473 = select i1 %465, float %230, float %441, !dbg !100
  %474 = select i1 %466, float %236, float %442, !dbg !100
  %475 = select i1 %467, float %237, float %443, !dbg !100
  %476 = select i1 %468, float %238, float %444, !dbg !100
  %477 = select i1 %469, float %239, float %445, !dbg !100
  %478 = fcmp olt float %470, %253, !dbg !101
  %479 = fcmp olt float %471, %254, !dbg !101
  %480 = fcmp olt float %472, %255, !dbg !101
  %481 = fcmp olt float %473, %256, !dbg !101
  %482 = fcmp olt float %474, %262, !dbg !101
  %483 = fcmp olt float %475, %263, !dbg !101
  %484 = fcmp olt float %476, %264, !dbg !101
  %485 = fcmp olt float %477, %265, !dbg !101
  %486 = fcmp uno float %253, 0.000000e+00, !dbg !103
  %487 = fcmp uno float %254, 0.000000e+00, !dbg !103
  %488 = fcmp uno float %255, 0.000000e+00, !dbg !103
  %489 = fcmp uno float %256, 0.000000e+00, !dbg !103
  %490 = fcmp uno float %262, 0.000000e+00, !dbg !103
  %491 = fcmp uno float %263, 0.000000e+00, !dbg !103
  %492 = fcmp uno float %264, 0.000000e+00, !dbg !103
  %493 = fcmp uno float %265, 0.000000e+00, !dbg !103
  %494 = or i1 %486, %478, !dbg !104
  %495 = or i1 %487, %479, !dbg !104
  %496 = or i1 %488, %480, !dbg !104
  %497 = or i1 %489, %481, !dbg !104
  %498 = or i1 %490, %482, !dbg !104
  %499 = or i1 %491, %483, !dbg !104
  %500 = or i1 %492, %484, !dbg !104
  %501 = or i1 %493, %485, !dbg !104
  %502 = select i1 %494, float %253, float %470, !dbg !105
  %503 = select i1 %495, float %254, float %471, !dbg !105
  %504 = select i1 %496, float %255, float %472, !dbg !105
  %505 = select i1 %497, float %256, float %473, !dbg !105
  %506 = select i1 %498, float %262, float %474, !dbg !105
  %507 = select i1 %499, float %263, float %475, !dbg !105
  %508 = select i1 %500, float %264, float %476, !dbg !105
  %509 = select i1 %501, float %265, float %477, !dbg !105
  %510 = fcmp olt float %502, %279, !dbg !106
  %511 = fcmp olt float %503, %280, !dbg !106
  %512 = fcmp olt float %504, %281, !dbg !106
  %513 = fcmp olt float %505, %282, !dbg !106
  %514 = fcmp olt float %506, %288, !dbg !106
  %515 = fcmp olt float %507, %289, !dbg !106
  %516 = fcmp olt float %508, %290, !dbg !106
  %517 = fcmp olt float %509, %291, !dbg !106
  %518 = fcmp uno float %279, 0.000000e+00, !dbg !108
  %519 = fcmp uno float %280, 0.000000e+00, !dbg !108
  %520 = fcmp uno float %281, 0.000000e+00, !dbg !108
  %521 = fcmp uno float %282, 0.000000e+00, !dbg !108
  %522 = fcmp uno float %288, 0.000000e+00, !dbg !108
  %523 = fcmp uno float %289, 0.000000e+00, !dbg !108
  %524 = fcmp uno float %290, 0.000000e+00, !dbg !108
  %525 = fcmp uno float %291, 0.000000e+00, !dbg !108
  %526 = or i1 %518, %510, !dbg !109
  %527 = or i1 %519, %511, !dbg !109
  %528 = or i1 %520, %512, !dbg !109
  %529 = or i1 %521, %513, !dbg !109
  %530 = or i1 %522, %514, !dbg !109
  %531 = or i1 %523, %515, !dbg !109
  %532 = or i1 %524, %516, !dbg !109
  %533 = or i1 %525, %517, !dbg !109
  %534 = select i1 %526, float %279, float %502, !dbg !110
  %535 = select i1 %527, float %280, float %503, !dbg !110
  %536 = select i1 %528, float %281, float %504, !dbg !110
  %537 = select i1 %529, float %282, float %505, !dbg !110
  %538 = select i1 %530, float %288, float %506, !dbg !110
  %539 = select i1 %531, float %289, float %507, !dbg !110
  %540 = select i1 %532, float %290, float %508, !dbg !110
  %541 = select i1 %533, float %291, float %509, !dbg !110
  %542 = fcmp olt float %534, %305, !dbg !111
  %543 = fcmp olt float %535, %306, !dbg !111
  %544 = fcmp olt float %536, %307, !dbg !111
  %545 = fcmp olt float %537, %308, !dbg !111
  %546 = fcmp olt float %538, %314, !dbg !111
  %547 = fcmp olt float %539, %315, !dbg !111
  %548 = fcmp olt float %540, %316, !dbg !111
  %549 = fcmp olt float %541, %317, !dbg !111
  %550 = fcmp uno float %305, 0.000000e+00, !dbg !113
  %551 = fcmp uno float %306, 0.000000e+00, !dbg !113
  %552 = fcmp uno float %307, 0.000000e+00, !dbg !113
  %553 = fcmp uno float %308, 0.000000e+00, !dbg !113
  %554 = fcmp uno float %314, 0.000000e+00, !dbg !113
  %555 = fcmp uno float %315, 0.000000e+00, !dbg !113
  %556 = fcmp uno float %316, 0.000000e+00, !dbg !113
  %557 = fcmp uno float %317, 0.000000e+00, !dbg !113
  %558 = or i1 %550, %542, !dbg !114
  %559 = or i1 %551, %543, !dbg !114
  %560 = or i1 %552, %544, !dbg !114
  %561 = or i1 %553, %545, !dbg !114
  %562 = or i1 %554, %546, !dbg !114
  %563 = or i1 %555, %547, !dbg !114
  %564 = or i1 %556, %548, !dbg !114
  %565 = or i1 %557, %549, !dbg !114
  %566 = mul i32 %37, 961, !dbg !115
  %567 = add i32 %566, %.decomposed5, !dbg !116
  %568 = mul i32 %46, 1107072, !dbg !117
  %569 = mul i32 %47, 1107072, !dbg !117
  %570 = mul i32 %48, 1107072, !dbg !117
  %571 = mul i32 %49, 1107072, !dbg !117
  %572 = mul i32 %50, 1107072, !dbg !117
  %573 = mul i32 %51, 1107072, !dbg !117
  %574 = mul i32 %52, 1107072, !dbg !117
  %575 = mul i32 %53, 1107072, !dbg !117
  %576 = add i32 %567, %568, !dbg !118
  %577 = add i32 %569, %.decomposed7, !dbg !116
  %578 = add i32 %577, %566, !dbg !118
  %579 = add i32 %570, %.decomposed9, !dbg !116
  %580 = add i32 %579, %566, !dbg !118
  %581 = add i32 %571, %.decomposed11, !dbg !116
  %582 = add i32 %581, %566, !dbg !118
  %583 = add i32 %572, %.decomposed13, !dbg !116
  %584 = add i32 %583, %566, !dbg !118
  %585 = add i32 %573, %.decomposed15, !dbg !116
  %586 = add i32 %585, %566, !dbg !118
  %587 = add i32 %574, %.decomposed17, !dbg !116
  %588 = add i32 %587, %566, !dbg !118
  %589 = add i32 %575, %.decomposed19, !dbg !116
  %590 = add i32 %589, %566, !dbg !118
  %591 = sext i32 %576 to i64, !dbg !119
  %592 = getelementptr float, ptr addrspace(1) %1, i64 %591, !dbg !119
  %593 = sext i32 %578 to i64, !dbg !119
  %594 = getelementptr float, ptr addrspace(1) %1, i64 %593, !dbg !119
  %595 = sext i32 %580 to i64, !dbg !119
  %596 = getelementptr float, ptr addrspace(1) %1, i64 %595, !dbg !119
  %597 = sext i32 %582 to i64, !dbg !119
  %598 = getelementptr float, ptr addrspace(1) %1, i64 %597, !dbg !119
  %599 = sext i32 %584 to i64, !dbg !119
  %600 = getelementptr float, ptr addrspace(1) %1, i64 %599, !dbg !119
  %601 = sext i32 %586 to i64, !dbg !119
  %602 = getelementptr float, ptr addrspace(1) %1, i64 %601, !dbg !119
  %603 = sext i32 %588 to i64, !dbg !119
  %604 = getelementptr float, ptr addrspace(1) %1, i64 %603, !dbg !119
  %605 = sext i32 %590 to i64, !dbg !119
  %606 = getelementptr float, ptr addrspace(1) %1, i64 %605, !dbg !119
  %607 = and i32 %33, 508, !dbg !120
  %608 = and i32 %7, 127, !dbg !120
  %609 = lshr i32 %33, 3, !dbg !120
  %610 = and i32 %609, 60, !dbg !120
  %611 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %610, !dbg !120
  %612 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %607, !dbg !120
  %613 = bitcast float %534 to i32, !dbg !120
  %614 = select i1 %558, i32 %301, i32 %613, !dbg !121
  %615 = insertelement <1 x i32> poison, i32 %614, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %615, i1 true) #2, !dbg !120
  %616 = or disjoint i32 %607, 1, !dbg !120
  %617 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %616, !dbg !120
  %618 = bitcast float %535 to i32, !dbg !120
  %619 = select i1 %559, i32 %302, i32 %618, !dbg !121
  %620 = insertelement <1 x i32> poison, i32 %619, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %620, i1 true) #2, !dbg !120
  %621 = or disjoint i32 %607, 2, !dbg !120
  %622 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %621, !dbg !120
  %623 = bitcast float %536 to i32, !dbg !120
  %624 = select i1 %560, i32 %303, i32 %623, !dbg !121
  %625 = insertelement <1 x i32> poison, i32 %624, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %625, i1 true) #2, !dbg !120
  %626 = or disjoint i32 %607, 3, !dbg !120
  %627 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %626, !dbg !120
  %628 = bitcast float %537 to i32, !dbg !120
  %629 = select i1 %561, i32 %304, i32 %628, !dbg !121
  %630 = insertelement <1 x i32> poison, i32 %629, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %630, i1 true) #2, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %631 = lshr i32 %608, 5, !dbg !120
  %632 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %631, !dbg !120
  %633 = getelementptr inbounds float, ptr addrspace(3) %632, i32 %608, !dbg !120
  %634 = load i32, ptr addrspace(3) %633, align 4, !dbg !120
  %635 = or disjoint i32 %608, 128, !dbg !120
  %636 = lshr i32 %635, 5, !dbg !120
  %637 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %636, !dbg !120
  %638 = getelementptr inbounds float, ptr addrspace(3) %637, i32 %635, !dbg !120
  %639 = load i32, ptr addrspace(3) %638, align 4, !dbg !120
  %640 = or disjoint i32 %608, 256, !dbg !120
  %641 = lshr i32 %640, 5, !dbg !120
  %642 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %641, !dbg !120
  %643 = getelementptr inbounds float, ptr addrspace(3) %642, i32 %640, !dbg !120
  %644 = load i32, ptr addrspace(3) %643, align 4, !dbg !120
  %645 = or disjoint i32 %608, 384, !dbg !120
  %646 = lshr i32 %645, 5, !dbg !120
  %647 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %646, !dbg !120
  %648 = getelementptr inbounds float, ptr addrspace(3) %647, i32 %645, !dbg !120
  %649 = load i32, ptr addrspace(3) %648, align 4, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %650 = bitcast float %538 to i32, !dbg !120
  %651 = select i1 %562, i32 %310, i32 %650, !dbg !121
  %652 = insertelement <1 x i32> poison, i32 %651, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %612, <1 x i32> %652, i1 true) #2, !dbg !120
  %653 = bitcast float %539 to i32, !dbg !120
  %654 = select i1 %563, i32 %311, i32 %653, !dbg !121
  %655 = insertelement <1 x i32> poison, i32 %654, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %617, <1 x i32> %655, i1 true) #2, !dbg !120
  %656 = bitcast float %540 to i32, !dbg !120
  %657 = select i1 %564, i32 %312, i32 %656, !dbg !121
  %658 = insertelement <1 x i32> poison, i32 %657, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %622, <1 x i32> %658, i1 true) #2, !dbg !120
  %659 = bitcast float %541 to i32, !dbg !120
  %660 = select i1 %565, i32 %313, i32 %659, !dbg !121
  %661 = insertelement <1 x i32> poison, i32 %660, i64 0, !dbg !120
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %627, <1 x i32> %661, i1 true) #2, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !120
  %662 = load i32, ptr addrspace(3) %633, align 4, !dbg !120
  %663 = load i32, ptr addrspace(3) %638, align 4, !dbg !120
  %664 = load i32, ptr addrspace(3) %643, align 4, !dbg !120
  %665 = load i32, ptr addrspace(3) %648, align 4, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %634, ptr addrspace(1) %592, i1 %84) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %639, ptr addrspace(1) %594, i1 %85) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %644, ptr addrspace(1) %596, i1 %86) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %649, ptr addrspace(1) %598, i1 %87) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %662, ptr addrspace(1) %600, i1 %88) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %663, ptr addrspace(1) %602, i1 %89) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %664, ptr addrspace(1) %604, i1 %90) #2, !dbg !120
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %665, ptr addrspace(1) %606, i1 %91) #2, !dbg !120
  ret void, !dbg !122
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyb7ouz5fuqsd27onrifdk5dldk5pswhrr4fhcm6a7pmpcxtsyuo.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 50, scope: !7)
!27 = !DILocation(line: 33, column: 63, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 33, column: 55, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 76, scope: !7)
!33 = !DILocation(line: 33, column: 68, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 34, column: 50, scope: !7)
!36 = !DILocation(line: 34, column: 61, scope: !7)
!37 = !DILocation(line: 34, column: 30, scope: !7)
!38 = !DILocation(line: 34, column: 74, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 35, column: 50, scope: !7)
!41 = !DILocation(line: 35, column: 61, scope: !7)
!42 = !DILocation(line: 35, column: 30, scope: !7)
!43 = !DILocation(line: 35, column: 74, scope: !7)
!44 = !DILocation(line: 36, column: 38, scope: !7)
!45 = !DILocation(line: 36, column: 52, scope: !7)
!46 = !DILocation(line: 36, column: 63, scope: !7)
!47 = !DILocation(line: 36, column: 30, scope: !7)
!48 = !DILocation(line: 36, column: 76, scope: !7)
!49 = !DILocation(line: 37, column: 38, scope: !7)
!50 = !DILocation(line: 37, column: 52, scope: !7)
!51 = !DILocation(line: 37, column: 63, scope: !7)
!52 = !DILocation(line: 37, column: 30, scope: !7)
!53 = !DILocation(line: 37, column: 76, scope: !7)
!54 = !DILocation(line: 38, column: 38, scope: !7)
!55 = !DILocation(line: 38, column: 52, scope: !7)
!56 = !DILocation(line: 38, column: 63, scope: !7)
!57 = !DILocation(line: 38, column: 30, scope: !7)
!58 = !DILocation(line: 38, column: 76, scope: !7)
!59 = !DILocation(line: 39, column: 39, scope: !7)
!60 = !DILocation(line: 39, column: 53, scope: !7)
!61 = !DILocation(line: 39, column: 64, scope: !7)
!62 = !DILocation(line: 39, column: 31, scope: !7)
!63 = !DILocation(line: 39, column: 77, scope: !7)
!64 = !DILocation(line: 40, column: 39, scope: !7)
!65 = !DILocation(line: 40, column: 53, scope: !7)
!66 = !DILocation(line: 40, column: 64, scope: !7)
!67 = !DILocation(line: 40, column: 31, scope: !7)
!68 = !DILocation(line: 40, column: 77, scope: !7)
!69 = !DILocation(line: 41, column: 39, scope: !7)
!70 = !DILocation(line: 41, column: 53, scope: !7)
!71 = !DILocation(line: 41, column: 64, scope: !7)
!72 = !DILocation(line: 41, column: 31, scope: !7)
!73 = !DILocation(line: 41, column: 77, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 42, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 43, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 44, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 45, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 46, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 47, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 48, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 49, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 50, column: 34, scope: !7)
!116 = !DILocation(line: 50, column: 30, scope: !7)
!117 = !DILocation(line: 50, column: 47, scope: !7)
!118 = !DILocation(line: 50, column: 39, scope: !7)
!119 = !DILocation(line: 50, column: 25, scope: !7)
!120 = !DILocation(line: 50, column: 59, scope: !7)
!121 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!122 = !DILocation(line: 50, column: 4, scope: !7)
