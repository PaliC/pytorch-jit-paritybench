; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = shl i32 %6, 10, !dbg !13
  %11 = and i32 %8, 896, !dbg !13
  %12 = or disjoint i32 %10, %11, !dbg !13
  %13 = or disjoint i32 %12, %9, !dbg !14
  %14 = sext i32 %13 to i64, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !15
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #4, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !16
  %21 = bitcast i32 %17 to float, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = zext nneg i32 %9 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #4, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %32 = bitcast i32 %28 to float, !dbg !18
  %33 = bitcast i32 %29 to float, !dbg !18
  %34 = bitcast i32 %30 to float, !dbg !18
  %35 = bitcast i32 %31 to float, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = bitcast i32 %38 to float, !dbg !20
  %43 = bitcast i32 %39 to float, !dbg !20
  %44 = bitcast i32 %40 to float, !dbg !20
  %45 = bitcast i32 %41 to float, !dbg !20
  %46 = fadd float %21, %32, !dbg !21
  %47 = fadd float %22, %33, !dbg !21
  %48 = fadd float %23, %34, !dbg !21
  %49 = fadd float %24, %35, !dbg !21
  %50 = fcmp olt float %46, 0.000000e+00, !dbg !22
  %51 = fcmp olt float %47, 0.000000e+00, !dbg !22
  %52 = fcmp olt float %48, 0.000000e+00, !dbg !22
  %53 = fcmp olt float %49, 0.000000e+00, !dbg !22
  %54 = select i1 %50, float 0.000000e+00, float %46, !dbg !26
  %55 = select i1 %51, float 0.000000e+00, float %47, !dbg !26
  %56 = select i1 %52, float 0.000000e+00, float %48, !dbg !26
  %57 = select i1 %53, float 0.000000e+00, float %49, !dbg !26
  %58 = fadd float %32, %42, !dbg !27
  %59 = fadd float %33, %43, !dbg !27
  %60 = fadd float %34, %44, !dbg !27
  %61 = fadd float %35, %45, !dbg !27
  %62 = fcmp olt float %58, 0.000000e+00, !dbg !28
  %63 = fcmp olt float %59, 0.000000e+00, !dbg !28
  %64 = fcmp olt float %60, 0.000000e+00, !dbg !28
  %65 = fcmp olt float %61, 0.000000e+00, !dbg !28
  %66 = select i1 %62, float 0.000000e+00, float %58, !dbg !30
  %67 = select i1 %63, float 0.000000e+00, float %59, !dbg !30
  %68 = select i1 %64, float 0.000000e+00, float %60, !dbg !30
  %69 = select i1 %65, float 0.000000e+00, float %61, !dbg !30
  %70 = fmul float %54, %54, !dbg !31
  %71 = fmul float %55, %55, !dbg !31
  %72 = fmul float %56, %56, !dbg !31
  %73 = fmul float %57, %57, !dbg !31
  %74 = fadd float %70, %71, !dbg !32
  %75 = fadd float %72, %74, !dbg !32
  %76 = fadd float %73, %75, !dbg !32
  %77 = bitcast float %76 to i32, !dbg !37
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !37
  %79 = bitcast i32 %78 to float, !dbg !37
  %80 = fadd float %76, %79, !dbg !32
  %81 = bitcast float %80 to i32, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fadd float %80, %83, !dbg !32
  %85 = bitcast float %84 to i32, !dbg !37
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 4, i32 31), !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = fadd float %84, %87, !dbg !32
  %89 = bitcast float %88 to i32, !dbg !37
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 2, i32 31), !dbg !37
  %91 = bitcast i32 %90 to float, !dbg !37
  %92 = fadd float %88, %91, !dbg !32
  %93 = bitcast float %92 to i32, !dbg !37
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 1, i32 31), !dbg !37
  %95 = bitcast i32 %94 to float, !dbg !37
  %96 = fadd float %92, %95, !dbg !32
  %97 = fmul float %66, %66, !dbg !38
  %98 = fmul float %67, %67, !dbg !38
  %99 = fmul float %68, %68, !dbg !38
  %100 = fmul float %69, %69, !dbg !38
  %101 = fadd float %97, %98, !dbg !39
  %102 = fadd float %99, %101, !dbg !39
  %103 = fadd float %100, %102, !dbg !39
  %104 = bitcast float %103 to i32, !dbg !41
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 16, i32 31), !dbg !41
  %106 = bitcast i32 %105 to float, !dbg !41
  %107 = fadd float %103, %106, !dbg !39
  %108 = bitcast float %107 to i32, !dbg !41
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !41
  %110 = bitcast i32 %109 to float, !dbg !41
  %111 = fadd float %107, %110, !dbg !39
  %112 = bitcast float %111 to i32, !dbg !41
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !41
  %114 = bitcast i32 %113 to float, !dbg !41
  %115 = fadd float %111, %114, !dbg !39
  %116 = bitcast float %115 to i32, !dbg !41
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !41
  %118 = bitcast i32 %117 to float, !dbg !41
  %119 = fadd float %115, %118, !dbg !39
  %120 = bitcast float %119 to i32, !dbg !41
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !41
  %122 = bitcast i32 %121 to float, !dbg !41
  %123 = fadd float %119, %122, !dbg !39
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i11 = icmp eq i32 %130, 0, !dbg !42
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i14 = icmp eq i32 %131, 0, !dbg !42
  br i1 %.not.i11, label %137, label %132, !dbg !42

132:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %135, label %133, !dbg !42

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

137:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i14, label %140, label %138, !dbg !42

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #4, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %133, %135, %138, %140
  %.0.i13 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !42
  %142 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !43
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %142) #4, !dbg !44
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %142) #4, !dbg !44
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %142) #4, !dbg !44
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %142) #4, !dbg !44
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i31 = icmp eq i32 %153, 0, !dbg !45
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i34 = icmp eq i32 %154, 0, !dbg !45
  br i1 %.not.i31, label %160, label %155, !dbg !45

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %158, label %156, !dbg !45

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

160:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i34, label %163, label %161, !dbg !45

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !45
  br label %__nv_sqrtf.exit35, !dbg !45

__nv_sqrtf.exit35:                                ; preds = %156, %158, %161, %163
  %.0.i33 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !45
  %165 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !46
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float %165) #4, !dbg !47
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float %165) #4, !dbg !47
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %165) #4, !dbg !47
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %69, float %165) #4, !dbg !47
  %170 = fsub float %143, %166, !dbg !48
  %171 = fsub float %144, %167, !dbg !48
  %172 = fsub float %145, %168, !dbg !48
  %173 = fsub float %146, %169, !dbg !48
  %174 = fmul float %170, %170, !dbg !49
  %175 = fmul float %171, %171, !dbg !49
  %176 = fmul float %172, %172, !dbg !49
  %177 = fmul float %173, %173, !dbg !49
  %178 = bitcast float %54 to i32, !dbg !50
  %179 = bitcast float %55 to i32, !dbg !50
  %180 = bitcast float %56 to i32, !dbg !50
  %181 = bitcast float %57 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %178, i32 %179, i32 %180, i32 %181, ptr addrspace(1) %15, i1 true) #4, !dbg !50
  %182 = bitcast float %66 to i32, !dbg !51
  %183 = bitcast float %67 to i32, !dbg !51
  %184 = bitcast float %68 to i32, !dbg !51
  %185 = bitcast float %69 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %182, i32 %183, i32 %184, i32 %185, ptr addrspace(1) %36, i1 true) #4, !dbg !51
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !52
  %187 = bitcast float %174 to i32, !dbg !53
  %188 = bitcast float %175 to i32, !dbg !53
  %189 = bitcast float %176 to i32, !dbg !53
  %190 = bitcast float %177 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %187, i32 %188, i32 %189, i32 %190, ptr addrspace(1) %186, i1 true) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czis5by4mjhtu7sxzklep434catysk7efeyqdayxi7iveiqovenz.py", directory: "inductor_cache/zi")
!4 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9", linkageName: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 44, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 43, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 48, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !29)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !36)
!33 = distinct !DILexicalBlockFile(scope: !35, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!36 = !DILocation(line: 41, column: 25, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !36)
!38 = !DILocation(line: 42, column: 19, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !40)
!40 = !DILocation(line: 44, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !35, inlinedAt: !40)
!42 = !DILocation(line: 45, column: 27, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 19, scope: !7)
!45 = !DILocation(line: 49, column: 27, scope: !7)
!46 = !DILocation(line: 50, column: 20, scope: !7)
!47 = !DILocation(line: 51, column: 19, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 54, column: 48, scope: !7)
!51 = !DILocation(line: 55, column: 48, scope: !7)
!52 = !DILocation(line: 56, column: 25, scope: !7)
!53 = !DILocation(line: 56, column: 46, scope: !7)
!54 = !DILocation(line: 56, column: 4, scope: !7)
