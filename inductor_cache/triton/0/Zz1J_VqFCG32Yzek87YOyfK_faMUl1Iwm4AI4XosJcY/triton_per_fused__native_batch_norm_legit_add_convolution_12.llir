; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_rsqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %12 = and i32 %11, 31, !dbg !11
  %13 = lshr i32 %11, 5, !dbg !11
  %14 = shl i32 %11, 2, !dbg !11
  %15 = and i32 %14, 252, !dbg !11
  %16 = srem i32 %10, 256, !dbg !12
  %17 = shl i32 %10, 8, !dbg !13
  %18 = or disjoint i32 %17, %15, !dbg !14
  %19 = sext i32 %18 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = bitcast i32 %22 to float, !dbg !16
  %27 = bitcast i32 %23 to float, !dbg !16
  %28 = bitcast i32 %24 to float, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = sext i32 %16 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !18
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #5, !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !22
  %41 = sext i32 %10 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #5, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !26
  %53 = bitcast i32 %52 to float, !dbg !26
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !26
  %55 = bitcast i32 %54 to float, !dbg !26
  %56 = fadd float %26, %36, !dbg !27
  %57 = fadd float %27, %36, !dbg !27
  %58 = fadd float %28, %36, !dbg !27
  %59 = fadd float %29, %36, !dbg !27
  %60 = fadd float %56, %57, !dbg !28
  %61 = fadd float %58, %60, !dbg !28
  %62 = fadd float %59, %61, !dbg !28
  %63 = bitcast float %62 to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fadd float %62, %65, !dbg !28
  %67 = bitcast float %66 to i32, !dbg !33
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !33
  %69 = bitcast i32 %68 to float, !dbg !33
  %70 = fadd float %66, %69, !dbg !28
  %71 = bitcast float %70 to i32, !dbg !33
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 4, i32 31), !dbg !33
  %73 = bitcast i32 %72 to float, !dbg !33
  %74 = fadd float %70, %73, !dbg !28
  %75 = bitcast float %74 to i32, !dbg !33
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 2, i32 31), !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = fadd float %74, %77, !dbg !28
  %79 = bitcast float %78 to i32, !dbg !33
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 1, i32 31), !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = fadd float %78, %81, !dbg !28
  %83 = icmp eq i32 %12, 0, !dbg !33
  %84 = and i32 %13, 1, !dbg !33
  %85 = zext nneg i32 %84 to i64, !dbg !33
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i64 %85, !dbg !33
  %87 = bitcast float %82 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 %83) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %88 = icmp slt i32 %11, 2, !dbg !33
  %89 = sext i32 %11 to i64, !dbg !33
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i64 %89, !dbg !33
  %91 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %88) #5, !dbg !33
  %92 = bitcast i32 %91 to float, !dbg !33
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !33
  %94 = bitcast i32 %93 to float, !dbg !33
  %95 = fadd float %92, %94, !dbg !28
  %96 = and i32 %11, 1, !dbg !33
  %97 = icmp eq i32 %96, 0, !dbg !33
  %98 = and i1 %88, %97, !dbg !33
  %99 = bitcast float %95 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %99, i1 %98) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %100 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !33
  %101 = fadd float %100, 0.000000e+00, !dbg !34
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 2.560000e+02) #5, !dbg !38
  %103 = fsub float %56, %102, !dbg !39
  %104 = fsub float %57, %102, !dbg !39
  %105 = fsub float %58, %102, !dbg !39
  %106 = fsub float %59, %102, !dbg !39
  %107 = fmul float %103, %103, !dbg !40
  %108 = fmul float %104, %104, !dbg !40
  %109 = fmul float %105, %105, !dbg !40
  %110 = fmul float %106, %106, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %111 = fadd float %107, %108, !dbg !43
  %112 = fadd float %109, %111, !dbg !43
  %113 = fadd float %110, %112, !dbg !43
  %114 = bitcast float %113 to i32, !dbg !41
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 16, i32 31), !dbg !41
  %116 = bitcast i32 %115 to float, !dbg !41
  %117 = fadd float %113, %116, !dbg !43
  %118 = bitcast float %117 to i32, !dbg !41
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !41
  %120 = bitcast i32 %119 to float, !dbg !41
  %121 = fadd float %117, %120, !dbg !43
  %122 = bitcast float %121 to i32, !dbg !41
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 4, i32 31), !dbg !41
  %124 = bitcast i32 %123 to float, !dbg !41
  %125 = fadd float %121, %124, !dbg !43
  %126 = bitcast float %125 to i32, !dbg !41
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 2, i32 31), !dbg !41
  %128 = bitcast i32 %127 to float, !dbg !41
  %129 = fadd float %125, %128, !dbg !43
  %130 = bitcast float %129 to i32, !dbg !41
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !41
  %132 = bitcast i32 %131 to float, !dbg !41
  %133 = fadd float %129, %132, !dbg !43
  %134 = bitcast float %133 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %134, i1 %83) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %135 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %90, i1 %88) #5, !dbg !41
  %136 = bitcast i32 %135 to float, !dbg !41
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 1, i32 31), !dbg !41
  %138 = bitcast i32 %137 to float, !dbg !41
  %139 = fadd float %136, %138, !dbg !43
  %140 = bitcast float %139 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %140, i1 %98) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %141 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %142 = fadd float %141, 0.000000e+00, !dbg !44
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 2.560000e+02) #5, !dbg !46
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.560000e+02) #5, !dbg !46
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.560000e+02) #5, !dbg !46
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float 2.560000e+02) #5, !dbg !46
  %147 = fadd float %146, 0x3EE4F8B580000000, !dbg !47
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !48
  %.not.i7 = icmp eq i32 %151, 0, !dbg !48
  br i1 %.not.i7, label %154, label %152, !dbg !48

152:                                              ; preds = %__nv_rsqrtf.exit
  %153 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %147), !dbg !48
  br label %__nv_rsqrtf.exit9, !dbg !48

154:                                              ; preds = %__nv_rsqrtf.exit
  %155 = tail call float @llvm.nvvm.rsqrt.approx.f(float %147), !dbg !48
  br label %__nv_rsqrtf.exit9, !dbg !48

__nv_rsqrtf.exit9:                                ; preds = %152, %154
  %.0.i8 = phi float [ %153, %152 ], [ %155, %154 ], !dbg !48
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 2.560000e+02) #5, !dbg !49
  %157 = fadd float %156, 0x3EE4F8B580000000, !dbg !50
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i10 = icmp eq i32 %158, 0, !dbg !51
  br i1 %.not.i10, label %161, label %159, !dbg !51

159:                                              ; preds = %__nv_rsqrtf.exit9
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !51
  br label %__nv_rsqrtf.exit12, !dbg !51

161:                                              ; preds = %__nv_rsqrtf.exit9
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !51
  br label %__nv_rsqrtf.exit12, !dbg !51

__nv_rsqrtf.exit12:                               ; preds = %159, %161
  %.0.i11 = phi float [ %160, %159 ], [ %162, %161 ], !dbg !51
  %163 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %164 = bitcast i32 %163 to float, !dbg !22
  %165 = bitcast i32 %46 to float, !dbg !24
  %166 = fsub float %164, %165, !dbg !52
  %167 = fmul float %166, %.0.i8, !dbg !53
  %168 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %169 = bitcast i32 %168 to float, !dbg !20
  %170 = fadd float %167, %169, !dbg !54
  %171 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %172 = bitcast i32 %171 to float, !dbg !22
  %173 = fsub float %172, %165, !dbg !52
  %174 = fmul float %173, %.0.i8, !dbg !53
  %175 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %176 = bitcast i32 %175 to float, !dbg !20
  %177 = fadd float %174, %176, !dbg !54
  %178 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %179 = bitcast i32 %178 to float, !dbg !22
  %180 = fsub float %179, %165, !dbg !52
  %181 = fmul float %180, %.0.i8, !dbg !53
  %182 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %183 = bitcast i32 %182 to float, !dbg !20
  %184 = fadd float %181, %183, !dbg !54
  %185 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %186 = bitcast i32 %185 to float, !dbg !22
  %187 = fsub float %186, %165, !dbg !52
  %188 = fmul float %187, %.0.i8, !dbg !53
  %189 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %190 = bitcast i32 %189 to float, !dbg !20
  %191 = fadd float %188, %190, !dbg !54
  %192 = fmul float %103, %.0.i11, !dbg !55
  %193 = fmul float %104, %.0.i11, !dbg !55
  %194 = fmul float %105, %.0.i11, !dbg !55
  %195 = fmul float %106, %.0.i11, !dbg !55
  %196 = fadd float %191, %192, !dbg !56
  %197 = fadd float %184, %193, !dbg !56
  %198 = fadd float %177, %194, !dbg !56
  %199 = fadd float %170, %195, !dbg !56
  %200 = bitcast float %56 to i32, !dbg !57
  %201 = bitcast float %57 to i32, !dbg !57
  %202 = bitcast float %58 to i32, !dbg !57
  %203 = bitcast float %59 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %20, i1 true) #5, !dbg !57
  %204 = bitcast float %196 to i32, !dbg !58
  %205 = bitcast float %197 to i32, !dbg !58
  %206 = bitcast float %198 to i32, !dbg !58
  %207 = bitcast float %199 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %37, i1 true) #5, !dbg !58
  %208 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !59
  %urem = and i32 %11, 63, !dbg !60
  %209 = icmp eq i32 %urem, 0, !dbg !60
  %210 = bitcast float %.0.i11 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %210, ptr addrspace(1) %208, i1 %209) #5, !dbg !60
  %211 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !61
  %212 = bitcast float %102 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %212, ptr addrspace(1) %211, i1 %209) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celshxadz66nerl5ieqyoyoljgzg3zno6vszypzcafngxaijhadi.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_12", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 43, scope: !7)
!14 = !DILocation(line: 33, column: 39, scope: !7)
!15 = !DILocation(line: 33, column: 34, scope: !7)
!16 = !DILocation(line: 33, column: 48, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 31, scope: !7)
!22 = !DILocation(line: 36, column: 45, scope: !7)
!23 = !DILocation(line: 37, column: 31, scope: !7)
!24 = !DILocation(line: 37, column: 36, scope: !7)
!25 = !DILocation(line: 38, column: 31, scope: !7)
!26 = !DILocation(line: 38, column: 36, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 42, column: 57, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !32)
!34 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 42, column: 44, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !42)
!42 = !DILocation(line: 49, column: 59, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !42)
!44 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !45)
!45 = !DILocation(line: 49, column: 45, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 28, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 28, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 48, scope: !7)
!58 = !DILocation(line: 65, column: 49, scope: !7)
!59 = !DILocation(line: 66, column: 25, scope: !7)
!60 = !DILocation(line: 66, column: 37, scope: !7)
!61 = !DILocation(line: 67, column: 25, scope: !7)
!62 = !DILocation(line: 67, column: 37, scope: !7)
!63 = !DILocation(line: 67, column: 4, scope: !7)
