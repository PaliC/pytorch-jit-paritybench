; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 1115136, !dbg !14
  %18 = icmp slt i32 %15, 1115136, !dbg !14
  %19 = icmp slt i32 %16, 1115136, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %20 = sdiv i32 %.frozen, 256, !dbg !15
  %21 = mul i32 %20, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %14, 256, !dbg !16
  %23 = srem i32 %20, 33, !dbg !17
  %24 = sdiv i32 %13, 8448, !dbg !18
  %25 = shl nsw i32 %23, 9, !dbg !19
  %26 = mul i32 %24, 33792, !dbg !20
  %27 = add i32 %25, %26, !dbg !21
  %28 = add i32 %27, %.decomposed, !dbg !22
  %29 = add i32 %27, %22, !dbg !22
  %30 = sext i32 %28 to i64, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !23
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %17) #2, !dbg !24
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #2, !dbg !24
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %44 = or disjoint i32 %27, 256, !dbg !25
  %45 = add nsw i32 %44, %.decomposed, !dbg !26
  %46 = add nsw i32 %44, %22, !dbg !26
  %47 = sext i32 %45 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %46 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %17) #2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %17) #2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = add i32 %27, 16896, !dbg !29
  %62 = add i32 %61, %.decomposed, !dbg !30
  %63 = add i32 %61, %22, !dbg !30
  %64 = sext i32 %62 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !31
  %66 = sext i32 %63 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %17) #2, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %17) #2, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !32
  %78 = add i32 %27, 17152, !dbg !33
  %79 = add nsw i32 %78, %.decomposed, !dbg !34
  %80 = add nsw i32 %78, %22, !dbg !34
  %81 = sext i32 %79 to i64, !dbg !35
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !35
  %83 = sext i32 %80 to i64, !dbg !35
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !35
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %17) #2, !dbg !36
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !36
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !36
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !36
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !36
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %17) #2, !dbg !36
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !36
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !36
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !36
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !36
  %95 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !24
  %96 = insertelement <4 x i32> %95, i32 %36, i64 1, !dbg !24
  %97 = insertelement <4 x i32> %96, i32 %37, i64 2, !dbg !24
  %98 = insertelement <4 x i32> %97, i32 %38, i64 3, !dbg !24
  %99 = bitcast <4 x i32> %98 to <4 x float>, !dbg !24
  %100 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !28
  %101 = insertelement <4 x i32> %100, i32 %53, i64 1, !dbg !28
  %102 = insertelement <4 x i32> %101, i32 %54, i64 2, !dbg !28
  %103 = insertelement <4 x i32> %102, i32 %55, i64 3, !dbg !28
  %104 = bitcast <4 x i32> %103 to <4 x float>, !dbg !28
  %105 = insertelement <4 x i32> poison, i32 %69, i64 0, !dbg !32
  %106 = insertelement <4 x i32> %105, i32 %70, i64 1, !dbg !32
  %107 = insertelement <4 x i32> %106, i32 %71, i64 2, !dbg !32
  %108 = insertelement <4 x i32> %107, i32 %72, i64 3, !dbg !32
  %109 = bitcast <4 x i32> %108 to <4 x float>, !dbg !32
  %110 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !36
  %111 = insertelement <4 x i32> %110, i32 %87, i64 1, !dbg !36
  %112 = insertelement <4 x i32> %111, i32 %88, i64 2, !dbg !36
  %113 = insertelement <4 x i32> %112, i32 %89, i64 3, !dbg !36
  %114 = bitcast <4 x i32> %113 to <4 x float>, !dbg !36
  %115 = fcmp ogt <4 x float> %104, %99, !dbg !37
  %116 = fcmp uno <4 x float> %104, zeroinitializer, !dbg !41
  %117 = or <4 x i1> %115, %116, !dbg !42
  %.v = select <4 x i1> %117, <4 x i32> %103, <4 x i32> %98, !dbg !43
  %118 = bitcast <4 x i32> %.v to <4 x float>, !dbg !43
  %119 = fcmp olt <4 x float> %118, %109, !dbg !44
  %120 = fcmp uno <4 x float> %109, zeroinitializer, !dbg !46
  %121 = or <4 x i1> %120, %119, !dbg !47
  %.v15 = select <4 x i1> %121, <4 x i32> %108, <4 x i32> %.v, !dbg !48
  %122 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !48
  %123 = fcmp olt <4 x float> %122, %114, !dbg !49
  %124 = extractelement <4 x i1> %123, i64 0, !dbg !51
  %125 = extractelement <4 x i1> %123, i64 1, !dbg !51
  %126 = extractelement <4 x i1> %123, i64 2, !dbg !51
  %127 = extractelement <4 x i1> %123, i64 3, !dbg !51
  %128 = zext <4 x i1> %115 to <4 x i8>, !dbg !52
  %129 = select <4 x i1> %119, <4 x i8> splat (i8 2), <4 x i8> %128, !dbg !53
  %130 = select <4 x i1> %123, <4 x i8> splat (i8 3), <4 x i8> %129, !dbg !54
  %131 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !24
  %132 = insertelement <4 x i32> %131, i32 %41, i64 1, !dbg !24
  %133 = insertelement <4 x i32> %132, i32 %42, i64 2, !dbg !24
  %134 = insertelement <4 x i32> %133, i32 %43, i64 3, !dbg !24
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !24
  %136 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !28
  %137 = insertelement <4 x i32> %136, i32 %58, i64 1, !dbg !28
  %138 = insertelement <4 x i32> %137, i32 %59, i64 2, !dbg !28
  %139 = insertelement <4 x i32> %138, i32 %60, i64 3, !dbg !28
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !28
  %141 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !32
  %142 = insertelement <4 x i32> %141, i32 %75, i64 1, !dbg !32
  %143 = insertelement <4 x i32> %142, i32 %76, i64 2, !dbg !32
  %144 = insertelement <4 x i32> %143, i32 %77, i64 3, !dbg !32
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !32
  %146 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !36
  %147 = insertelement <4 x i32> %146, i32 %92, i64 1, !dbg !36
  %148 = insertelement <4 x i32> %147, i32 %93, i64 2, !dbg !36
  %149 = insertelement <4 x i32> %148, i32 %94, i64 3, !dbg !36
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !36
  %151 = fcmp ogt <4 x float> %140, %135, !dbg !37
  %152 = fcmp uno <4 x float> %140, zeroinitializer, !dbg !41
  %153 = or <4 x i1> %151, %152, !dbg !42
  %.v16 = select <4 x i1> %153, <4 x i32> %139, <4 x i32> %134, !dbg !43
  %154 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !43
  %155 = fcmp olt <4 x float> %154, %145, !dbg !44
  %156 = fcmp uno <4 x float> %145, zeroinitializer, !dbg !46
  %157 = or <4 x i1> %156, %155, !dbg !47
  %.v17 = select <4 x i1> %157, <4 x i32> %144, <4 x i32> %.v16, !dbg !48
  %158 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !48
  %159 = fcmp olt <4 x float> %158, %150, !dbg !49
  %160 = shufflevector <4 x float> %150, <4 x float> %114, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !55
  %161 = fcmp uno <8 x float> %160, zeroinitializer, !dbg !55
  %162 = extractelement <8 x i1> %161, i64 7, !dbg !51
  %163 = or i1 %162, %124, !dbg !51
  %164 = extractelement <8 x i1> %161, i64 6, !dbg !51
  %165 = or i1 %164, %125, !dbg !51
  %166 = extractelement <8 x i1> %161, i64 5, !dbg !51
  %167 = or i1 %166, %126, !dbg !51
  %168 = extractelement <8 x i1> %161, i64 4, !dbg !51
  %169 = or i1 %168, %127, !dbg !51
  %170 = extractelement <4 x i1> %159, i64 0, !dbg !51
  %171 = extractelement <8 x i1> %161, i64 3, !dbg !51
  %172 = or i1 %171, %170, !dbg !51
  %173 = extractelement <4 x i1> %159, i64 1, !dbg !51
  %174 = extractelement <8 x i1> %161, i64 2, !dbg !51
  %175 = or i1 %174, %173, !dbg !51
  %176 = extractelement <4 x i1> %159, i64 2, !dbg !51
  %177 = extractelement <8 x i1> %161, i64 1, !dbg !51
  %178 = or i1 %177, %176, !dbg !51
  %179 = extractelement <4 x i1> %159, i64 3, !dbg !51
  %180 = extractelement <8 x i1> %161, i64 0, !dbg !51
  %181 = or i1 %180, %179, !dbg !51
  %182 = zext <4 x i1> %151 to <4 x i8>, !dbg !52
  %183 = select <4 x i1> %155, <4 x i8> splat (i8 2), <4 x i8> %182, !dbg !53
  %184 = select <4 x i1> %159, <4 x i8> splat (i8 3), <4 x i8> %183, !dbg !54
  %185 = sext i32 %15 to i64, !dbg !56
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !56
  %187 = sext i32 %16 to i64, !dbg !56
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %187, !dbg !56
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !57
  %190 = extractelement <4 x i32> %.v15, i64 0, !dbg !57
  %191 = select i1 %163, i32 %86, i32 %190, !dbg !58
  %192 = extractelement <4 x i32> %.v15, i64 1, !dbg !57
  %193 = select i1 %165, i32 %87, i32 %192, !dbg !58
  %194 = extractelement <4 x i32> %.v15, i64 2, !dbg !57
  %195 = select i1 %167, i32 %88, i32 %194, !dbg !58
  %196 = extractelement <4 x i32> %.v15, i64 3, !dbg !57
  %197 = select i1 %169, i32 %89, i32 %196, !dbg !58
  %198 = extractelement <4 x i32> %.v17, i64 0, !dbg !57
  %199 = select i1 %172, i32 %91, i32 %198, !dbg !58
  %200 = extractelement <4 x i32> %.v17, i64 1, !dbg !57
  %201 = select i1 %175, i32 %92, i32 %200, !dbg !58
  %202 = extractelement <4 x i32> %.v17, i64 2, !dbg !57
  %203 = select i1 %178, i32 %93, i32 %202, !dbg !58
  %204 = extractelement <4 x i32> %.v17, i64 3, !dbg !57
  %205 = select i1 %181, i32 %94, i32 %204, !dbg !58
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %189, i32 %191, i32 %193, i32 %195, i32 %197, i1 true) #2, !dbg !57
  %206 = getelementptr inbounds i8, ptr addrspace(3) %189, i32 16, !dbg !57
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %206, i32 %199, i32 %201, i32 %203, i32 %205, i1 true) #2, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !57
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !57
  %209 = load <4 x i32>, ptr addrspace(3) %208, align 16, !dbg !57
  %.extract = load i32, ptr addrspace(3) %207, align 16, !dbg !57
  %210 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 4, !dbg !57
  %.extract8 = load i32, ptr addrspace(3) %210, align 4, !dbg !57
  %211 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 8, !dbg !57
  %.extract9 = load i32, ptr addrspace(3) %211, align 8, !dbg !57
  %212 = getelementptr inbounds i8, ptr addrspace(3) %207, i32 12, !dbg !57
  %.extract10 = load i32, ptr addrspace(3) %212, align 4, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %186, i1 %18) #2, !dbg !57
  %.extract11 = extractelement <4 x i32> %209, i64 0, !dbg !57
  %.extract12 = extractelement <4 x i32> %209, i64 1, !dbg !57
  %.extract13 = extractelement <4 x i32> %209, i64 2, !dbg !57
  %.extract14 = extractelement <4 x i32> %209, i64 3, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %188, i1 %19) #2, !dbg !57
  %213 = sext i32 %13 to i64, !dbg !59
  %214 = getelementptr i8, ptr addrspace(1) %2, i64 %213, !dbg !59
  %215 = bitcast <4 x i8> %130 to i32, !dbg !60
  %216 = bitcast <4 x i8> %184 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %215, i32 %216, ptr addrspace(1) %214, i1 %17) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd26vuyawl5iol53kgxrvbfkhjkhn4ryucgpnoq2nsfhnirve3mv.py", directory: "inductor_cache/d2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 50, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 55, scope: !7)
!25 = !DILocation(line: 29, column: 41, scope: !7)
!26 = !DILocation(line: 29, column: 50, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 61, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 52, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 63, scope: !7)
!33 = !DILocation(line: 31, column: 43, scope: !7)
!34 = !DILocation(line: 31, column: 52, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 63, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 32, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !45)
!45 = !DILocation(line: 33, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !50)
!50 = !DILocation(line: 34, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !50)
!52 = !DILocation(line: 38, column: 33, scope: !7)
!53 = !DILocation(line: 41, column: 35, scope: !7)
!54 = !DILocation(line: 44, column: 35, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !50)
!56 = !DILocation(line: 45, column: 25, scope: !7)
!57 = !DILocation(line: 45, column: 36, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !50)
!59 = !DILocation(line: 46, column: 25, scope: !7)
!60 = !DILocation(line: 46, column: 37, scope: !7)
!61 = !DILocation(line: 46, column: 4, scope: !7)
