; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_threshold_backward_28(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %8, 128, !dbg !12
  %10 = shl i32 %7, 3, !dbg !12
  %11 = and i32 %10, 248, !dbg !12
  %12 = or disjoint i32 %6, %8, !dbg !13
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %.lobit1 = lshr i32 %7, 5, !dbg !16
  %17 = and i32 %.lobit1, 3, !dbg !16
  %18 = or disjoint i32 %16, %17, !dbg !17
  %19 = icmp slt i32 %16, 4, !dbg !18
  %20 = icmp slt i32 %18, 4, !dbg !18
  %.frozen = freeze i32 %14, !dbg !19
  %21 = sdiv i32 %.frozen, 512, !dbg !19
  %22 = mul i32 %21, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = add i32 %12, %15, !dbg !21
  %24 = shl i32 %23, 2, !dbg !21
  %25 = add i32 %13, %15, !dbg !21
  %26 = shl i32 %25, 2, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %19) #2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %19) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = insertelement <8 x i32> poison, i32 %40, i64 0, !dbg !23
  %42 = insertelement <8 x i32> %41, i32 %39, i64 1, !dbg !23
  %43 = insertelement <8 x i32> %42, i32 %38, i64 2, !dbg !23
  %44 = insertelement <8 x i32> %43, i32 %37, i64 3, !dbg !23
  %45 = insertelement <8 x i32> %44, i32 %35, i64 4, !dbg !23
  %46 = insertelement <8 x i32> %45, i32 %34, i64 5, !dbg !23
  %47 = insertelement <8 x i32> %46, i32 %33, i64 6, !dbg !23
  %48 = insertelement <8 x i32> %47, i32 %32, i64 7, !dbg !23
  %49 = bitcast <8 x i32> %48 to <8 x float>, !dbg !23
  %50 = fcmp ole <8 x float> %49, zeroinitializer, !dbg !24
  %51 = shl i32 %18, 9, !dbg !25
  %52 = add i32 %51, %.decomposed, !dbg !26
  %53 = shl i32 %21, 11, !dbg !27
  %54 = add i32 %52, %53, !dbg !28
  %55 = sext i32 %54 to i64, !dbg !29
  %56 = getelementptr i1, ptr addrspace(1) %1, i64 %55, !dbg !29
  %57 = extractelement <8 x i1> %50, i64 7, !dbg !30
  %58 = zext i1 %57 to i8, !dbg !30
  %59 = extractelement <8 x i1> %50, i64 6, !dbg !30
  %60 = zext i1 %59 to i8, !dbg !30
  %61 = extractelement <8 x i1> %50, i64 5, !dbg !30
  %62 = zext i1 %61 to i8, !dbg !30
  %63 = extractelement <8 x i1> %50, i64 4, !dbg !30
  %64 = zext i1 %63 to i8, !dbg !30
  %65 = extractelement <8 x i1> %50, i64 3, !dbg !30
  %66 = zext i1 %65 to i8, !dbg !30
  %67 = extractelement <8 x i1> %50, i64 2, !dbg !30
  %68 = zext i1 %67 to i8, !dbg !30
  %69 = extractelement <8 x i1> %50, i64 1, !dbg !30
  %70 = zext i1 %69 to i8, !dbg !30
  %71 = extractelement <8 x i1> %50, i64 0, !dbg !30
  %72 = zext i1 %71 to i8, !dbg !30
  %73 = and i32 %10, 1016, !dbg !30
  %74 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %75 = insertelement <1 x i8> poison, i8 %58, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %74, <1 x i8> %75, i1 true) #2, !dbg !30
  %76 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 264, !dbg !30
  %77 = insertelement <1 x i8> poison, i8 %60, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %76, <1 x i8> %77, i1 true) #2, !dbg !30
  %78 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 528, !dbg !30
  %79 = insertelement <1 x i8> poison, i8 %62, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %78, <1 x i8> %79, i1 true) #2, !dbg !30
  %80 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 792, !dbg !30
  %81 = insertelement <1 x i8> poison, i8 %64, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %80, <1 x i8> %81, i1 true) #2, !dbg !30
  %82 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  %83 = insertelement <1 x i8> poison, i8 %66, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %82, <1 x i8> %83, i1 true) #2, !dbg !30
  %84 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 392, !dbg !30
  %85 = insertelement <1 x i8> poison, i8 %68, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %84, <1 x i8> %85, i1 true) #2, !dbg !30
  %86 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 656, !dbg !30
  %87 = insertelement <1 x i8> poison, i8 %70, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %86, <1 x i8> %87, i1 true) #2, !dbg !30
  %88 = getelementptr inbounds i8, ptr addrspace(3) %74, i32 920, !dbg !30
  %89 = insertelement <1 x i8> poison, i8 %72, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %88, <1 x i8> %89, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %90 = lshr i32 %10, 5, !dbg !30
  %91 = and i32 %90, 24, !dbg !30
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !30
  %93 = getelementptr i8, ptr addrspace(3) %92, i32 %73, !dbg !30
  %94 = load <2 x i32>, ptr addrspace(3) %93, align 8, !dbg !30
  %95 = bitcast <2 x i32> %94 to <64 x i1>, !dbg !30
  %96 = extractelement <64 x i1> %95, i64 24, !dbg !30
  %97 = extractelement <64 x i1> %95, i64 56, !dbg !30
  %98 = bitcast <2 x i32> %94 to <8 x i8>, !dbg !30
  %99 = extractelement <8 x i8> %98, i64 0, !dbg !30
  %100 = and i8 %99, 1, !dbg !30
  %101 = shufflevector <8 x i8> %98, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !30
  %102 = and <2 x i8> %101, splat (i8 1), !dbg !30
  %103 = zext i1 %96 to i8, !dbg !30
  %104 = extractelement <8 x i8> %98, i64 4, !dbg !30
  %105 = and i8 %104, 1, !dbg !30
  %106 = shufflevector <8 x i8> %98, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !30
  %107 = and <2 x i8> %106, splat (i8 1), !dbg !30
  %108 = zext i1 %97 to i8, !dbg !30
  %109 = insertelement <4 x i8> poison, i8 %100, i64 0, !dbg !30
  %110 = shufflevector <2 x i8> %102, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !30
  %111 = shufflevector <4 x i8> %109, <4 x i8> %110, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !30
  %112 = insertelement <4 x i8> %111, i8 %103, i64 3, !dbg !30
  %113 = bitcast <4 x i8> %112 to i32, !dbg !30
  %114 = insertelement <4 x i8> poison, i8 %105, i64 0, !dbg !30
  %115 = shufflevector <2 x i8> %107, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !30
  %116 = shufflevector <4 x i8> %114, <4 x i8> %115, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !30
  %117 = insertelement <4 x i8> %116, i8 %108, i64 3, !dbg !30
  %118 = bitcast <4 x i8> %117 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %118, ptr addrspace(1) %56, i1 %20) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7hn2zhzmjbqm6dggei77uelouwc2xffptrty2w7uedgslvxwnl7.py", directory: "inductor_cache/7h")
!4 = !{ptr @triton_poi_fused_threshold_backward_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_threshold_backward_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_threshold_backward_28", linkageName: "triton_poi_fused_threshold_backward_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 42, scope: !7)
!24 = !DILocation(line: 34, column: 19, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 39, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 55, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
