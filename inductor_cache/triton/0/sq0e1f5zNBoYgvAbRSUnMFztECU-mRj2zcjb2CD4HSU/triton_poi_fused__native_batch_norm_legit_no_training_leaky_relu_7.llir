; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %10, %12, !dbg !13
  %21 = or disjoint i32 %10, %13, !dbg !13
  %22 = or disjoint i32 %10, %14, !dbg !13
  %23 = or disjoint i32 %10, %15, !dbg !13
  %24 = or disjoint i32 %10, %16, !dbg !13
  %25 = or disjoint i32 %10, %17, !dbg !13
  %26 = or disjoint i32 %10, %18, !dbg !13
  %27 = or disjoint i32 %10, %19, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %29 = icmp slt i32 %28, 128, !dbg !15
  %30 = shl i32 %20, 7, !dbg !16
  %31 = shl i32 %21, 7, !dbg !16
  %32 = shl i32 %22, 7, !dbg !16
  %33 = shl i32 %23, 7, !dbg !16
  %34 = shl i32 %24, 7, !dbg !16
  %35 = shl i32 %25, 7, !dbg !16
  %36 = shl i32 %26, 7, !dbg !16
  %37 = shl i32 %27, 7, !dbg !16
  %38 = add i32 %30, %28, !dbg !17
  %39 = add i32 %31, %28, !dbg !17
  %40 = add i32 %32, %28, !dbg !17
  %41 = add i32 %33, %28, !dbg !17
  %42 = add i32 %34, %28, !dbg !17
  %43 = add i32 %35, %28, !dbg !17
  %44 = add i32 %36, %28, !dbg !17
  %45 = add i32 %37, %28, !dbg !17
  %46 = sext i32 %38 to i64, !dbg !18
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !18
  %48 = sext i32 %39 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !18
  %50 = sext i32 %40 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !18
  %52 = sext i32 %41 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !18
  %54 = sext i32 %42 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !18
  %56 = sext i32 %43 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !18
  %58 = sext i32 %44 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !18
  %60 = sext i32 %45 to i64, !dbg !18
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !18
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %29) #4, !dbg !19
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %29) #4, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %29) #4, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %29) #4, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %29) #4, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %29) #4, !dbg !19
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %29) #4, !dbg !19
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %29) #4, !dbg !19
  %70 = sext i32 %28 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !20
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %29) #4, !dbg !21
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %29) #4, !dbg !23
  %75 = bitcast i32 %74 to float, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %29) #4, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !26
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %29) #4, !dbg !27
  %80 = fadd float %75, 0x3EE4F8B580000000, !dbg !28
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !29
  %.not.i = icmp eq i32 %81, 0, !dbg !29
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !29
  %.not1.i = icmp eq i32 %82, 0, !dbg !29
  br i1 %.not.i, label %88, label %83, !dbg !29

83:                                               ; preds = %8
  br i1 %.not1.i, label %86, label %84, !dbg !29

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

88:                                               ; preds = %8
  br i1 %.not1.i, label %91, label %89, !dbg !29

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !29
  %93 = insertelement <8 x i32> poison, i32 %69, i64 0, !dbg !19
  %94 = insertelement <8 x i32> %93, i32 %68, i64 1, !dbg !19
  %95 = insertelement <8 x i32> %94, i32 %67, i64 2, !dbg !19
  %96 = insertelement <8 x i32> %95, i32 %66, i64 3, !dbg !19
  %97 = insertelement <8 x i32> %96, i32 %65, i64 4, !dbg !19
  %98 = insertelement <8 x i32> %97, i32 %64, i64 5, !dbg !19
  %99 = insertelement <8 x i32> %98, i32 %63, i64 6, !dbg !19
  %100 = insertelement <8 x i32> %99, i32 %62, i64 7, !dbg !19
  %101 = bitcast <8 x i32> %100 to <8 x float>, !dbg !19
  %102 = shl i32 %11, 2, !dbg !12
  %103 = and i32 %102, 508, !dbg !12
  %104 = or disjoint i32 %103, %10, !dbg !13
  %105 = or disjoint i32 %104, 512, !dbg !13
  %106 = sdiv i32 %105, 256, !dbg !30
  %.frozen = freeze i32 %104, !dbg !30
  %107 = sdiv i32 %.frozen, 256, !dbg !30
  %108 = mul i32 %107, 256, !dbg !31
  %.decomposed = sub i32 %.frozen, %108, !dbg !31
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !32
  %110 = insertelement <8 x i32> poison, i32 %72, i64 0, !dbg !33
  %111 = bitcast <8 x i32> %110 to <8 x float>, !dbg !33
  %112 = shufflevector <8 x float> %111, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !33
  %113 = fsub <8 x float> %101, %112, !dbg !33
  %114 = insertelement <8 x float> poison, float %109, i64 0, !dbg !34
  %115 = shufflevector <8 x float> %114, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !34
  %116 = fmul <8 x float> %113, %115, !dbg !34
  %117 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !35
  %118 = bitcast <8 x i32> %117 to <8 x float>, !dbg !35
  %119 = shufflevector <8 x float> %118, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !35
  %120 = fmul <8 x float> %116, %119, !dbg !35
  %121 = insertelement <8 x i32> poison, i32 %79, i64 0, !dbg !36
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !36
  %123 = shufflevector <8 x float> %122, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !36
  %124 = fadd <8 x float> %120, %123, !dbg !36
  %125 = fcmp ogt <8 x float> %124, zeroinitializer, !dbg !37
  %126 = extractelement <8 x float> %124, i64 7, !dbg !38
  %127 = fmul float %126, 0x3FC99999A0000000, !dbg !39
  %128 = extractelement <8 x float> %124, i64 6, !dbg !38
  %129 = fmul float %128, 0x3FC99999A0000000, !dbg !39
  %130 = extractelement <8 x float> %124, i64 5, !dbg !38
  %131 = fmul float %130, 0x3FC99999A0000000, !dbg !39
  %132 = extractelement <8 x float> %124, i64 4, !dbg !38
  %133 = fmul float %132, 0x3FC99999A0000000, !dbg !39
  %134 = extractelement <8 x float> %124, i64 3, !dbg !38
  %135 = fmul float %134, 0x3FC99999A0000000, !dbg !39
  %136 = extractelement <8 x float> %124, i64 2, !dbg !38
  %137 = fmul float %136, 0x3FC99999A0000000, !dbg !39
  %138 = extractelement <8 x float> %124, i64 1, !dbg !38
  %139 = fmul float %138, 0x3FC99999A0000000, !dbg !39
  %140 = extractelement <8 x float> %124, i64 0, !dbg !38
  %141 = fmul float %140, 0x3FC99999A0000000, !dbg !39
  %142 = extractelement <8 x i1> %125, i64 7, !dbg !38
  %143 = select i1 %142, float %126, float %127, !dbg !38
  %144 = extractelement <8 x i1> %125, i64 6, !dbg !38
  %145 = select i1 %144, float %128, float %129, !dbg !38
  %146 = extractelement <8 x i1> %125, i64 5, !dbg !38
  %147 = select i1 %146, float %130, float %131, !dbg !38
  %148 = extractelement <8 x i1> %125, i64 4, !dbg !38
  %149 = select i1 %148, float %132, float %133, !dbg !38
  %150 = extractelement <8 x i1> %125, i64 3, !dbg !38
  %151 = select i1 %150, float %134, float %135, !dbg !38
  %152 = extractelement <8 x i1> %125, i64 2, !dbg !38
  %153 = select i1 %152, float %136, float %137, !dbg !38
  %154 = extractelement <8 x i1> %125, i64 1, !dbg !38
  %155 = select i1 %154, float %138, float %139, !dbg !38
  %156 = extractelement <8 x i1> %125, i64 0, !dbg !38
  %157 = select i1 %156, float %140, float %141, !dbg !38
  %158 = shl i32 %28, 8, !dbg !40
  %159 = add i32 %.decomposed, %158, !dbg !41
  %160 = shl i32 %107, 15, !dbg !42
  %161 = shl i32 %106, 15, !dbg !42
  %162 = add i32 %159, %160, !dbg !43
  %163 = add i32 %159, %161, !dbg !43
  %164 = sext i32 %162 to i64, !dbg !44
  %165 = getelementptr float, ptr addrspace(1) %5, i64 %164, !dbg !44
  %166 = sext i32 %163 to i64, !dbg !44
  %167 = getelementptr float, ptr addrspace(1) %5, i64 %166, !dbg !44
  %168 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !45
  %169 = bitcast float %143 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #4, !dbg !45
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !45
  %171 = bitcast float %145 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #4, !dbg !45
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !45
  %173 = bitcast float %147 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #4, !dbg !45
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !45
  %175 = bitcast float %149 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %103, !dbg !45
  %177 = load <4 x i32>, ptr addrspace(3) %176, align 16, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %178 = bitcast float %151 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %178, i1 true) #4, !dbg !45
  %179 = bitcast float %153 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %179, i1 true) #4, !dbg !45
  %180 = bitcast float %155 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %180, i1 true) #4, !dbg !45
  %181 = bitcast float %157 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %181, i1 true) #4, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %182 = load <4 x i32>, ptr addrspace(3) %176, align 16, !dbg !45
  %.extract = extractelement <4 x i32> %177, i64 0, !dbg !45
  %.extract8 = extractelement <4 x i32> %177, i64 1, !dbg !45
  %.extract9 = extractelement <4 x i32> %177, i64 2, !dbg !45
  %.extract10 = extractelement <4 x i32> %177, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %165, i1 %29) #4, !dbg !45
  %.extract11 = extractelement <4 x i32> %182, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %182, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %182, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %182, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %167, i1 %29) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvuntf7ysnzxietj7vkhlagekhjgslkfricdz4mmuouar35pcgyn.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_leaky_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 32, column: 39, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 44, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 31, scope: !7)
!25 = !DILocation(line: 35, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 31, column: 19, scope: !7)
!31 = !DILocation(line: 30, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 45, column: 19, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 35, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 34, scope: !7)
!41 = !DILocation(line: 53, column: 30, scope: !7)
!42 = !DILocation(line: 53, column: 45, scope: !7)
!43 = !DILocation(line: 53, column: 39, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 53, column: 57, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
