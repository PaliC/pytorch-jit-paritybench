; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 255, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = or disjoint i32 %8, 256, !dbg !13
  %10 = icmp slt i32 %8, 424000, !dbg !14
  %11 = icmp slt i32 %9, 424000, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %12 = sdiv i32 %.frozen, 6625, !dbg !15
  %13 = mul i32 %12, 6625, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %.frozen1 = freeze i32 %9, !dbg !15
  %14 = sdiv i32 %.frozen1, 6625, !dbg !15
  %15 = mul i32 %14, 6625, !dbg !16
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !16
  %16 = sdiv i32 %8, 26500, !dbg !17
  %17 = sdiv i32 %9, 26500, !dbg !17
  %18 = mul i32 %12, 6656, !dbg !18
  %19 = mul i32 %14, 6656, !dbg !18
  %20 = add i32 %18, %.decomposed, !dbg !19
  %21 = add i32 %19, %.decomposed2, !dbg !19
  %22 = sext i32 %20 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = sext i32 %21 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %10) #1, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #1, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = mul i32 %16, 26624, !dbg !22
  %31 = mul i32 %17, 26624, !dbg !22
  %32 = add i32 %30, %.decomposed, !dbg !23
  %33 = add i32 %31, %.decomposed2, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %10) #1, !dbg !25
  %39 = bitcast i32 %38 to float, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = add i32 %32, 6656, !dbg !26
  %43 = add i32 %33, 6656, !dbg !26
  %44 = sext i32 %42 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !27
  %46 = sext i32 %43 to i64, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %10) #1, !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = add i32 %32, 13312, !dbg !29
  %53 = add i32 %33, 13312, !dbg !29
  %54 = sext i32 %52 to i64, !dbg !30
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !30
  %56 = sext i32 %53 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !30
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %10) #1, !dbg !31
  %59 = bitcast i32 %58 to float, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = add i32 %32, 19968, !dbg !32
  %63 = add i32 %33, 19968, !dbg !32
  %64 = sext i32 %62 to i64, !dbg !33
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !33
  %66 = sext i32 %63 to i64, !dbg !33
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !33
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %10) #1, !dbg !34
  %69 = bitcast i32 %68 to float, !dbg !34
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #1, !dbg !34
  %71 = bitcast i32 %70 to float, !dbg !34
  %72 = fcmp ogt float %39, %49, !dbg !35
  %73 = fcmp ogt float %41, %51, !dbg !35
  %74 = fcmp uno float %39, 0.000000e+00, !dbg !39
  %75 = fcmp uno float %41, 0.000000e+00, !dbg !39
  %76 = or i1 %74, %72, !dbg !40
  %77 = or i1 %75, %73, !dbg !40
  %78 = select i1 %76, float %39, float %49, !dbg !41
  %79 = select i1 %77, float %41, float %51, !dbg !41
  %80 = fcmp ogt float %78, %59, !dbg !42
  %81 = fcmp ogt float %79, %61, !dbg !42
  %82 = fcmp uno float %78, 0.000000e+00, !dbg !44
  %83 = fcmp uno float %79, 0.000000e+00, !dbg !44
  %84 = or i1 %80, %82, !dbg !45
  %85 = or i1 %81, %83, !dbg !45
  %86 = select i1 %84, float %78, float %59, !dbg !46
  %87 = select i1 %85, float %79, float %61, !dbg !46
  %88 = fcmp ogt float %86, %69, !dbg !47
  %89 = fcmp ogt float %87, %71, !dbg !47
  %90 = fcmp uno float %86, 0.000000e+00, !dbg !49
  %91 = fcmp uno float %87, 0.000000e+00, !dbg !49
  %92 = or i1 %88, %90, !dbg !50
  %93 = or i1 %89, %91, !dbg !50
  %94 = select i1 %92, float %86, float %69, !dbg !51
  %95 = select i1 %93, float %87, float %71, !dbg !51
  %96 = fsub float %27, %94, !dbg !52
  %97 = fsub float %29, %95, !dbg !52
  %98 = fmul float %96, 0x3FF7154760000000, !dbg !53
  %99 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %98) #1, !dbg !53
  %100 = fmul float %97, 0x3FF7154760000000, !dbg !53
  %101 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %100) #1, !dbg !53
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !54
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !54
  %104 = bitcast float %99 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %102, i1 %10) #1, !dbg !55
  %105 = bitcast float %101 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %103, i1 %11) #1, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp6dczcsxrxvptoxdgvnf7rqyqliognqh62hjjao632ot6npu6ic.py", directory: "inductor_cache/p6")
!4 = !{ptr @triton_poi_fused__softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_0", linkageName: "triton_poi_fused__softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 40, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 35, scope: !7)
!24 = !DILocation(line: 28, column: 30, scope: !7)
!25 = !DILocation(line: 28, column: 46, scope: !7)
!26 = !DILocation(line: 29, column: 42, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 53, scope: !7)
!29 = !DILocation(line: 30, column: 43, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 54, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 30, scope: !7)
!34 = !DILocation(line: 31, column: 54, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 32, column: 40, scope: !7)
!39 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !38)
!41 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!42 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !43)
!43 = !DILocation(line: 33, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !48)
!48 = !DILocation(line: 34, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !48)
!52 = !DILocation(line: 35, column: 18, scope: !7)
!53 = !DILocation(line: 36, column: 23, scope: !7)
!54 = !DILocation(line: 37, column: 25, scope: !7)
!55 = !DILocation(line: 37, column: 46, scope: !7)
!56 = !DILocation(line: 37, column: 4, scope: !7)
