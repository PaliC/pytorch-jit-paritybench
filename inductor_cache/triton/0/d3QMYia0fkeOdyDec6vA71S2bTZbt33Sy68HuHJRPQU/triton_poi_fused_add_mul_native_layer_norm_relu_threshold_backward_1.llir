; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_native_layer_norm_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 8, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 254, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen, 4, !dbg !15
  %23 = mul i32 %22, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %23, !dbg !16
  %24 = sext i32 %20 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %21) #1, !dbg !18
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !18
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %21) #1, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %33 = sext i32 %22 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #1, !dbg !22
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %21) #1, !dbg !22
  %37 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %38 = insertelement <2 x i32> %37, i32 %36, i64 1, !dbg !22
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #1, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #1, !dbg !24
  %43 = sext i32 %.decomposed to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !25
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %21) #1, !dbg !26
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !26
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !27
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %21) #1, !dbg !28
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !29
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %21) #1, !dbg !30
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !30
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #1, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %21) #1, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !33
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %21) #1, !dbg !34
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %21) #1, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %43, !dbg !35
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %62, i1 %21) #1, !dbg !36
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !36
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %11, i64 %43, !dbg !37
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %66, i1 %21) #1, !dbg !38
  %68 = extractvalue { i32, i32 } %67, 0, !dbg !38
  %69 = extractvalue { i32, i32 } %67, 1, !dbg !38
  %70 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %71 = insertelement <2 x i32> %70, i32 %32, i64 1, !dbg !20
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !20
  %73 = fcmp olt <2 x float> %72, zeroinitializer, !dbg !39
  %74 = select <2 x i1> %73, <2 x float> zeroinitializer, <2 x float> %72, !dbg !43
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !44
  %76 = getelementptr i1, ptr addrspace(1) %12, i64 %24, !dbg !45
  %77 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !18
  %78 = insertelement <2 x i32> %77, i32 %28, i64 1, !dbg !18
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !18
  %80 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %81 = insertelement <2 x i32> %80, i32 %42, i64 1, !dbg !24
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !24
  %83 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !26
  %84 = insertelement <2 x i32> %83, i32 %47, i64 1, !dbg !26
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !26
  %86 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !28
  %87 = insertelement <2 x i32> %86, i32 %51, i64 1, !dbg !28
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !28
  %89 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !30
  %90 = insertelement <2 x i32> %89, i32 %55, i64 1, !dbg !30
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !30
  %92 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !32
  %93 = insertelement <2 x i32> %92, i32 %58, i64 1, !dbg !32
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !32
  %95 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !34
  %96 = insertelement <2 x i32> %95, i32 %61, i64 1, !dbg !34
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !34
  %98 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !36
  %99 = insertelement <2 x i32> %98, i32 %65, i64 1, !dbg !36
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !36
  %101 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !38
  %102 = insertelement <2 x i32> %101, i32 %69, i64 1, !dbg !38
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !38
  %104 = fsub <2 x float> %74, %39, !dbg !46
  %105 = fmul <2 x float> %104, %82, !dbg !47
  %106 = fmul <2 x float> %105, %85, !dbg !48
  %107 = fadd <2 x float> %106, %88, !dbg !49
  %108 = fadd <2 x float> %107, splat (float 1.000000e+00), !dbg !50
  %109 = fmul <2 x float> %108, %79, !dbg !51
  %110 = fcmp olt <2 x float> %91, zeroinitializer, !dbg !52
  %111 = select <2 x i1> %110, <2 x float> zeroinitializer, <2 x float> %91, !dbg !54
  %112 = fsub <2 x float> %111, %94, !dbg !55
  %113 = fmul <2 x float> %112, %97, !dbg !56
  %114 = fmul <2 x float> %113, %100, !dbg !57
  %115 = fadd <2 x float> %114, %103, !dbg !58
  %116 = fadd <2 x float> %109, %115, !dbg !59
  %117 = fcmp olt <2 x float> %116, zeroinitializer, !dbg !60
  %118 = select <2 x i1> %117, <2 x float> zeroinitializer, <2 x float> %116, !dbg !62
  %119 = fcmp ole <2 x float> %118, zeroinitializer, !dbg !63
  %bc = bitcast <2 x float> %118 to <2 x i32>, !dbg !64
  %120 = extractelement <2 x i32> %bc, i64 0, !dbg !64
  %bc1 = bitcast <2 x float> %118 to <2 x i32>, !dbg !64
  %121 = extractelement <2 x i32> %bc1, i64 1, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %120, i32 %121, ptr addrspace(1) %75, i1 %21) #1, !dbg !64
  %122 = zext <2 x i1> %119 to <2 x i8>, !dbg !65
  %123 = bitcast <2 x i8> %122 to i16, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %123, ptr addrspace(1) %76, i1 %21) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj63t6p4uq6vix2y6s4ykadklohpmujek23ef5tiab3shmldbgcz.py", directory: "inductor_cache/j6")
!4 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_native_layer_norm_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_native_layer_norm_relu_threshold_backward_1", linkageName: "triton_poi_fused_add_mul_native_layer_norm_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 32, scope: !7)
!38 = !DILocation(line: 37, column: 37, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 39, column: 40, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 56, column: 28, scope: !7)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 40, column: 18, scope: !7)
!47 = !DILocation(line: 41, column: 18, scope: !7)
!48 = !DILocation(line: 42, column: 18, scope: !7)
!49 = !DILocation(line: 43, column: 19, scope: !7)
!50 = !DILocation(line: 45, column: 20, scope: !7)
!51 = !DILocation(line: 46, column: 19, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !53)
!53 = !DILocation(line: 47, column: 41, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !53)
!55 = !DILocation(line: 48, column: 20, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 50, column: 20, scope: !7)
!58 = !DILocation(line: 51, column: 20, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !61)
!61 = !DILocation(line: 53, column: 41, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !61)
!63 = !DILocation(line: 55, column: 21, scope: !7)
!64 = !DILocation(line: 56, column: 40, scope: !7)
!65 = !DILocation(line: 57, column: 37, scope: !7)
!66 = !DILocation(line: 57, column: 4, scope: !7)
