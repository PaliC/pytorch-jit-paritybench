; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 1, !dbg !13
  %22 = icmp slt i32 %20, 394496, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %23 = sdiv i32 %.frozen, 4, !dbg !15
  %24 = srem i32 %23, 24656, !dbg !16
  %25 = mul i32 %23, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %25, !dbg !17
  %26 = srem i32 %21, 4, !dbg !17
  %.frozen46 = freeze i32 %20, !dbg !18
  %27 = sdiv i32 %.frozen46, 98624, !dbg !18
  %28 = icmp slt i32 %24, 16384, !dbg !19
  %29 = shl nsw i32 %24, 2, !dbg !20
  %30 = mul i32 %27, 98624, !dbg !21
  %srem.decomposed = sub i32 %.frozen46, %30, !dbg !21
  %31 = add nsw i32 %29, %26, !dbg !21
  %32 = shl nsw i32 %27, 16, !dbg !22
  %33 = add nsw i32 %32, %srem.decomposed, !dbg !23
  %34 = add nsw i32 %31, %32, !dbg !23
  %35 = sdiv i32 %33, 65536, !dbg !24
  %36 = sdiv i32 %34, 65536, !dbg !24
  %.lhs.trunc = trunc nsw i32 %35 to i16, !dbg !25
  %37 = srem i16 %.lhs.trunc, 4, !dbg !25
  %.sext = sext i16 %37 to i32, !dbg !25
  %.lhs.trunc1 = trunc nsw i32 %36 to i16, !dbg !25
  %38 = srem i16 %.lhs.trunc1, 4, !dbg !25
  %.sext2 = sext i16 %38 to i32, !dbg !25
  %39 = shl nsw i32 %.sext, 16, !dbg !26
  %40 = shl nsw i32 %.sext2, 16, !dbg !26
  %41 = srem i32 %srem.decomposed, 65536, !dbg !27
  %42 = srem i32 %31, 65536, !dbg !27
  %43 = add nsw i32 %39, %41, !dbg !28
  %44 = add nsw i32 %40, %42, !dbg !28
  %45 = sext i32 %43 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = sext i32 %44 to i64, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !29
  %49 = and i1 %22, %28, !dbg !30
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49) #1, !dbg !31
  %51 = bitcast i32 %50 to float, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %49, i32 0, i1 %49) #1, !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = sdiv i32 %srem.decomposed, 4096, !dbg !32
  %55 = sdiv i32 %31, 4096, !dbg !32
  %.lhs.trunc3 = trunc nsw i32 %54 to i8, !dbg !33
  %56 = srem i8 %.lhs.trunc3, 16, !dbg !33
  %.lhs.trunc5 = trunc nsw i32 %55 to i8, !dbg !33
  %57 = srem i8 %.lhs.trunc5, 16, !dbg !33
  %58 = sext i8 %56 to i64, !dbg !34
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !34
  %60 = sext i8 %57 to i64, !dbg !34
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !34
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %49, i32 0, i1 %49) #1, !dbg !35
  %63 = bitcast i32 %62 to float, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %49, i32 0, i1 %49) #1, !dbg !35
  %65 = bitcast i32 %64 to float, !dbg !35
  %66 = fadd float %51, %63, !dbg !36
  %67 = fadd float %53, %65, !dbg !36
  %68 = add nsw i32 %24, -16384, !dbg !37
  %69 = icmp ult i32 %68, 6144, !dbg !37
  %70 = add nsw i32 %29, -65536, !dbg !38
  %71 = add nsw i32 %70, %.decomposed, !dbg !39
  %72 = add nsw i32 %70, %26, !dbg !39
  %73 = mul nsw i32 %27, 24576, !dbg !40
  %74 = add nsw i32 %71, %73, !dbg !41
  %75 = add nsw i32 %72, %73, !dbg !41
  %76 = sdiv i32 %74, 24576, !dbg !42
  %77 = sdiv i32 %75, 24576, !dbg !42
  %.lhs.trunc7 = trunc nsw i32 %76 to i16, !dbg !43
  %78 = srem i16 %.lhs.trunc7, 4, !dbg !43
  %.sext8 = sext i16 %78 to i32, !dbg !43
  %.lhs.trunc9 = trunc nsw i32 %77 to i16, !dbg !43
  %79 = srem i16 %.lhs.trunc9, 4, !dbg !43
  %.sext10 = sext i16 %79 to i32, !dbg !43
  %80 = mul nsw i32 %.sext8, 24576, !dbg !44
  %81 = mul nsw i32 %.sext10, 24576, !dbg !44
  %82 = srem i32 %71, 24576, !dbg !45
  %83 = srem i32 %72, 24576, !dbg !45
  %84 = add nsw i32 %80, %82, !dbg !46
  %85 = add nsw i32 %81, %83, !dbg !46
  %86 = sext i32 %84 to i64, !dbg !47
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !47
  %88 = sext i32 %85 to i64, !dbg !47
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %88, !dbg !47
  %90 = and i1 %22, %69, !dbg !48
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %90, i32 0, i1 %90) #1, !dbg !49
  %92 = bitcast i32 %91 to float, !dbg !49
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90) #1, !dbg !49
  %94 = bitcast i32 %93 to float, !dbg !49
  %95 = sdiv i32 %71, 1024, !dbg !50
  %96 = sdiv i32 %72, 1024, !dbg !50
  %.lhs.trunc11 = trunc nsw i32 %95 to i16, !dbg !51
  %97 = srem i16 %.lhs.trunc11, 24, !dbg !51
  %.lhs.trunc13 = trunc nsw i32 %96 to i16, !dbg !51
  %98 = srem i16 %.lhs.trunc13, 24, !dbg !51
  %99 = sext i16 %97 to i64, !dbg !52
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !52
  %101 = sext i16 %98 to i64, !dbg !52
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !52
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %90, i32 0, i1 %90) #1, !dbg !53
  %104 = bitcast i32 %103 to float, !dbg !53
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %90, i32 0, i1 %90) #1, !dbg !53
  %106 = bitcast i32 %105 to float, !dbg !53
  %107 = fadd float %92, %104, !dbg !54
  %108 = fadd float %94, %106, !dbg !54
  %109 = add nsw i32 %24, -22528, !dbg !55
  %110 = icmp ult i32 %109, 1536, !dbg !55
  %111 = add nsw i32 %29, -90112, !dbg !56
  %112 = add nsw i32 %111, %.decomposed, !dbg !57
  %113 = add nsw i32 %111, %26, !dbg !57
  %114 = mul nsw i32 %27, 6144, !dbg !58
  %115 = add nsw i32 %112, %114, !dbg !59
  %116 = add nsw i32 %113, %114, !dbg !59
  %117 = sdiv i32 %115, 6144, !dbg !60
  %118 = sdiv i32 %116, 6144, !dbg !60
  %.lhs.trunc15 = trunc nsw i32 %117 to i16, !dbg !61
  %119 = srem i16 %.lhs.trunc15, 4, !dbg !61
  %.lhs.trunc17 = trunc nsw i32 %118 to i16, !dbg !61
  %120 = srem i16 %.lhs.trunc17, 4, !dbg !61
  %narrow = mul nsw i16 %119, 6144, !dbg !62
  %121 = sext i16 %narrow to i32, !dbg !62
  %narrow41 = mul nsw i16 %120, 6144, !dbg !62
  %122 = sext i16 %narrow41 to i32, !dbg !62
  %123 = srem i32 %112, 6144, !dbg !63
  %124 = srem i32 %113, 6144, !dbg !63
  %125 = add nsw i32 %123, %121, !dbg !64
  %126 = add nsw i32 %124, %122, !dbg !64
  %127 = sext i32 %125 to i64, !dbg !65
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %127, !dbg !65
  %129 = sext i32 %126 to i64, !dbg !65
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !65
  %131 = and i1 %22, %110, !dbg !66
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %131, i32 0, i1 %131) #1, !dbg !67
  %133 = bitcast i32 %132 to float, !dbg !67
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %131, i32 0, i1 %131) #1, !dbg !67
  %135 = bitcast i32 %134 to float, !dbg !67
  %136 = sdiv i32 %112, 256, !dbg !68
  %137 = sdiv i32 %113, 256, !dbg !68
  %.lhs.trunc19 = trunc nsw i32 %136 to i16, !dbg !69
  %138 = srem i16 %.lhs.trunc19, 24, !dbg !69
  %.lhs.trunc21 = trunc nsw i32 %137 to i16, !dbg !69
  %139 = srem i16 %.lhs.trunc21, 24, !dbg !69
  %140 = sext i16 %138 to i64, !dbg !70
  %141 = getelementptr float, ptr addrspace(1) %5, i64 %140, !dbg !70
  %142 = sext i16 %139 to i64, !dbg !70
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !70
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %131, i32 0, i1 %131) #1, !dbg !71
  %145 = bitcast i32 %144 to float, !dbg !71
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %131, i32 0, i1 %131) #1, !dbg !71
  %147 = bitcast i32 %146 to float, !dbg !71
  %148 = fadd float %133, %145, !dbg !72
  %149 = fadd float %135, %147, !dbg !72
  %150 = add nsw i32 %24, -24064, !dbg !73
  %151 = icmp ult i32 %150, 384, !dbg !73
  %152 = add nsw i32 %29, -96256, !dbg !74
  %153 = add nsw i32 %152, %.decomposed, !dbg !75
  %154 = add nsw i32 %152, %26, !dbg !75
  %155 = mul nsw i32 %27, 1536, !dbg !76
  %156 = add nsw i32 %153, %155, !dbg !77
  %157 = add nsw i32 %154, %155, !dbg !77
  %158 = sdiv i32 %156, 1536, !dbg !78
  %159 = sdiv i32 %157, 1536, !dbg !78
  %.lhs.trunc23 = trunc nsw i32 %158 to i16, !dbg !79
  %160 = srem i16 %.lhs.trunc23, 4, !dbg !79
  %.lhs.trunc25 = trunc nsw i32 %159 to i16, !dbg !79
  %161 = srem i16 %.lhs.trunc25, 4, !dbg !79
  %narrow42 = mul nsw i16 %160, 1536, !dbg !80
  %162 = sext i16 %narrow42 to i32, !dbg !80
  %narrow43 = mul nsw i16 %161, 1536, !dbg !80
  %163 = sext i16 %narrow43 to i32, !dbg !80
  %164 = srem i32 %153, 1536, !dbg !81
  %165 = srem i32 %154, 1536, !dbg !81
  %166 = add nsw i32 %164, %162, !dbg !82
  %167 = add nsw i32 %165, %163, !dbg !82
  %168 = sext i32 %166 to i64, !dbg !83
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %168, !dbg !83
  %170 = sext i32 %167 to i64, !dbg !83
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !83
  %172 = and i1 %22, %151, !dbg !84
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %172, i32 0, i1 %172) #1, !dbg !85
  %174 = bitcast i32 %173 to float, !dbg !85
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %172, i32 0, i1 %172) #1, !dbg !85
  %176 = bitcast i32 %175 to float, !dbg !85
  %177 = sdiv i32 %153, 64, !dbg !86
  %178 = sdiv i32 %154, 64, !dbg !86
  %.lhs.trunc27 = trunc nsw i32 %177 to i16, !dbg !87
  %179 = srem i16 %.lhs.trunc27, 24, !dbg !87
  %.lhs.trunc29 = trunc nsw i32 %178 to i16, !dbg !87
  %180 = srem i16 %.lhs.trunc29, 24, !dbg !87
  %181 = sext i16 %179 to i64, !dbg !88
  %182 = getelementptr float, ptr addrspace(1) %7, i64 %181, !dbg !88
  %183 = sext i16 %180 to i64, !dbg !88
  %184 = getelementptr float, ptr addrspace(1) %7, i64 %183, !dbg !88
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %182, i1 %172, i32 0, i1 %172) #1, !dbg !89
  %186 = bitcast i32 %185 to float, !dbg !89
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %172, i32 0, i1 %172) #1, !dbg !89
  %188 = bitcast i32 %187 to float, !dbg !89
  %189 = fadd float %174, %186, !dbg !90
  %190 = fadd float %176, %188, !dbg !90
  %191 = add nsw i32 %24, -24448, !dbg !91
  %192 = icmp ult i32 %191, 144, !dbg !91
  %193 = add nsw i32 %29, -97792, !dbg !92
  %194 = add nsw i32 %193, %.decomposed, !dbg !93
  %195 = add nsw i32 %193, %26, !dbg !93
  %196 = mul nsw i32 %27, 576, !dbg !94
  %197 = add nsw i32 %194, %196, !dbg !95
  %198 = add nsw i32 %195, %196, !dbg !95
  %199 = sdiv i32 %197, 576, !dbg !96
  %200 = sdiv i32 %198, 576, !dbg !96
  %.lhs.trunc31 = trunc nsw i32 %199 to i16, !dbg !97
  %201 = srem i16 %.lhs.trunc31, 4, !dbg !97
  %.lhs.trunc33 = trunc nsw i32 %200 to i16, !dbg !97
  %202 = srem i16 %.lhs.trunc33, 4, !dbg !97
  %narrow44 = mul nsw i16 %201, 576, !dbg !98
  %203 = sext i16 %narrow44 to i32, !dbg !98
  %narrow45 = mul nsw i16 %202, 576, !dbg !98
  %204 = sext i16 %narrow45 to i32, !dbg !98
  %205 = srem i32 %194, 576, !dbg !99
  %206 = srem i32 %195, 576, !dbg !99
  %207 = add nsw i32 %205, %203, !dbg !100
  %208 = add nsw i32 %206, %204, !dbg !100
  %209 = sext i32 %207 to i64, !dbg !101
  %210 = getelementptr float, ptr addrspace(1) %8, i64 %209, !dbg !101
  %211 = sext i32 %208 to i64, !dbg !101
  %212 = getelementptr float, ptr addrspace(1) %8, i64 %211, !dbg !101
  %213 = and i1 %22, %192, !dbg !102
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %213, i32 0, i1 %213) #1, !dbg !103
  %215 = bitcast i32 %214 to float, !dbg !103
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %213, i32 0, i1 %213) #1, !dbg !103
  %217 = bitcast i32 %216 to float, !dbg !103
  %218 = sdiv i32 %194, 36, !dbg !104
  %219 = sdiv i32 %195, 36, !dbg !104
  %.lhs.trunc35 = trunc nsw i32 %218 to i16, !dbg !105
  %220 = srem i16 %.lhs.trunc35, 16, !dbg !105
  %.lhs.trunc37 = trunc nsw i32 %219 to i16, !dbg !105
  %221 = srem i16 %.lhs.trunc37, 16, !dbg !105
  %222 = sext i16 %220 to i64, !dbg !106
  %223 = getelementptr float, ptr addrspace(1) %9, i64 %222, !dbg !106
  %224 = sext i16 %221 to i64, !dbg !106
  %225 = getelementptr float, ptr addrspace(1) %9, i64 %224, !dbg !106
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %213, i32 0, i1 %213) #1, !dbg !107
  %227 = bitcast i32 %226 to float, !dbg !107
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %213, i32 0, i1 %213) #1, !dbg !107
  %229 = bitcast i32 %228 to float, !dbg !107
  %230 = fadd float %215, %227, !dbg !108
  %231 = fadd float %217, %229, !dbg !108
  %232 = icmp sgt i32 %24, 24591, !dbg !109
  %233 = add nsw i32 %24, -24592, !dbg !110
  %234 = srem i32 %233, 64, !dbg !111
  %235 = shl nsw i32 %234, 2, !dbg !112
  %236 = shl nsw i32 %27, 8, !dbg !113
  %237 = add nsw i32 %236, %.decomposed, !dbg !114
  %238 = add nsw i32 %237, %235, !dbg !115
  %239 = sext i32 %238 to i64, !dbg !116
  %240 = getelementptr float, ptr addrspace(1) %10, i64 %239, !dbg !116
  %241 = and i1 %22, %232, !dbg !117
  %242 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %240, i1 %241, i32 0, i1 %241, i32 0, i1 %241) #1, !dbg !118
  %243 = extractvalue { i32, i32 } %242, 0, !dbg !118
  %244 = extractvalue { i32, i32 } %242, 1, !dbg !118
  %245 = bitcast i32 %243 to float, !dbg !118
  %246 = bitcast i32 %244 to float, !dbg !118
  %247 = sdiv i32 %233, 4, !dbg !119
  %.lhs.trunc39 = trunc nsw i32 %247 to i16, !dbg !120
  %248 = srem i16 %.lhs.trunc39, 16, !dbg !120
  %249 = sext i16 %248 to i64, !dbg !121
  %250 = getelementptr float, ptr addrspace(1) %11, i64 %249, !dbg !121
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %241, i32 0, i1 %241) #1, !dbg !122
  %252 = bitcast i32 %251 to float, !dbg !122
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %250, i1 %241, i32 0, i1 %241) #1, !dbg !122
  %254 = bitcast i32 %253 to float, !dbg !122
  %255 = fadd float %245, %252, !dbg !123
  %256 = fadd float %246, %254, !dbg !123
  %257 = select i1 %232, float %255, float 0.000000e+00, !dbg !124
  %258 = select i1 %232, float %256, float 0.000000e+00, !dbg !124
  %259 = select i1 %192, float %230, float %257, !dbg !125
  %260 = select i1 %192, float %231, float %258, !dbg !125
  %261 = select i1 %151, float %189, float %259, !dbg !125
  %262 = select i1 %151, float %190, float %260, !dbg !125
  %263 = select i1 %110, float %148, float %261, !dbg !125
  %264 = select i1 %110, float %149, float %262, !dbg !125
  %265 = select i1 %69, float %107, float %263, !dbg !125
  %266 = select i1 %69, float %108, float %264, !dbg !125
  %267 = select i1 %28, float %66, float %265, !dbg !125
  %268 = select i1 %28, float %67, float %266, !dbg !125
  %269 = sext i32 %20 to i64, !dbg !126
  %270 = getelementptr float, ptr addrspace(1) %12, i64 %269, !dbg !126
  %271 = bitcast float %267 to i32, !dbg !127
  %272 = bitcast float %268 to i32, !dbg !127
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %271, i32 %272, ptr addrspace(1) %270, i1 %22) #1, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66bmkifn6ps4bpn7pldviqipcjxb7vne764ewmhq4two6ugviiw.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_poi_fused_cat_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_19", linkageName: "triton_poi_fused_cat_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 60, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 67, scope: !7)
!25 = !DILocation(line: 33, column: 76, scope: !7)
!26 = !DILocation(line: 33, column: 38, scope: !7)
!27 = !DILocation(line: 33, column: 100, scope: !7)
!28 = !DILocation(line: 33, column: 84, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 117, scope: !7)
!31 = !DILocation(line: 33, column: 110, scope: !7)
!32 = !DILocation(line: 34, column: 49, scope: !7)
!33 = !DILocation(line: 34, column: 57, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 63, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 49, scope: !7)
!39 = !DILocation(line: 42, column: 46, scope: !7)
!40 = !DILocation(line: 42, column: 72, scope: !7)
!41 = !DILocation(line: 42, column: 66, scope: !7)
!42 = !DILocation(line: 42, column: 79, scope: !7)
!43 = !DILocation(line: 42, column: 88, scope: !7)
!44 = !DILocation(line: 42, column: 39, scope: !7)
!45 = !DILocation(line: 42, column: 123, scope: !7)
!46 = !DILocation(line: 42, column: 96, scope: !7)
!47 = !DILocation(line: 42, column: 31, scope: !7)
!48 = !DILocation(line: 42, column: 141, scope: !7)
!49 = !DILocation(line: 42, column: 133, scope: !7)
!50 = !DILocation(line: 43, column: 61, scope: !7)
!51 = !DILocation(line: 43, column: 69, scope: !7)
!52 = !DILocation(line: 43, column: 32, scope: !7)
!53 = !DILocation(line: 43, column: 75, scope: !7)
!54 = !DILocation(line: 44, column: 20, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 48, scope: !7)
!57 = !DILocation(line: 51, column: 45, scope: !7)
!58 = !DILocation(line: 51, column: 70, scope: !7)
!59 = !DILocation(line: 51, column: 65, scope: !7)
!60 = !DILocation(line: 51, column: 77, scope: !7)
!61 = !DILocation(line: 51, column: 85, scope: !7)
!62 = !DILocation(line: 51, column: 38, scope: !7)
!63 = !DILocation(line: 51, column: 120, scope: !7)
!64 = !DILocation(line: 51, column: 93, scope: !7)
!65 = !DILocation(line: 51, column: 31, scope: !7)
!66 = !DILocation(line: 51, column: 137, scope: !7)
!67 = !DILocation(line: 51, column: 129, scope: !7)
!68 = !DILocation(line: 52, column: 61, scope: !7)
!69 = !DILocation(line: 52, column: 68, scope: !7)
!70 = !DILocation(line: 52, column: 32, scope: !7)
!71 = !DILocation(line: 52, column: 74, scope: !7)
!72 = !DILocation(line: 53, column: 20, scope: !7)
!73 = !DILocation(line: 59, column: 20, scope: !7)
!74 = !DILocation(line: 60, column: 48, scope: !7)
!75 = !DILocation(line: 60, column: 45, scope: !7)
!76 = !DILocation(line: 60, column: 70, scope: !7)
!77 = !DILocation(line: 60, column: 65, scope: !7)
!78 = !DILocation(line: 60, column: 77, scope: !7)
!79 = !DILocation(line: 60, column: 85, scope: !7)
!80 = !DILocation(line: 60, column: 38, scope: !7)
!81 = !DILocation(line: 60, column: 120, scope: !7)
!82 = !DILocation(line: 60, column: 93, scope: !7)
!83 = !DILocation(line: 60, column: 31, scope: !7)
!84 = !DILocation(line: 60, column: 137, scope: !7)
!85 = !DILocation(line: 60, column: 129, scope: !7)
!86 = !DILocation(line: 61, column: 61, scope: !7)
!87 = !DILocation(line: 61, column: 67, scope: !7)
!88 = !DILocation(line: 61, column: 32, scope: !7)
!89 = !DILocation(line: 61, column: 73, scope: !7)
!90 = !DILocation(line: 62, column: 20, scope: !7)
!91 = !DILocation(line: 68, column: 20, scope: !7)
!92 = !DILocation(line: 69, column: 47, scope: !7)
!93 = !DILocation(line: 69, column: 44, scope: !7)
!94 = !DILocation(line: 69, column: 68, scope: !7)
!95 = !DILocation(line: 69, column: 64, scope: !7)
!96 = !DILocation(line: 69, column: 75, scope: !7)
!97 = !DILocation(line: 69, column: 82, scope: !7)
!98 = !DILocation(line: 69, column: 37, scope: !7)
!99 = !DILocation(line: 69, column: 117, scope: !7)
!100 = !DILocation(line: 69, column: 90, scope: !7)
!101 = !DILocation(line: 69, column: 31, scope: !7)
!102 = !DILocation(line: 69, column: 133, scope: !7)
!103 = !DILocation(line: 69, column: 125, scope: !7)
!104 = !DILocation(line: 70, column: 61, scope: !7)
!105 = !DILocation(line: 70, column: 67, scope: !7)
!106 = !DILocation(line: 70, column: 32, scope: !7)
!107 = !DILocation(line: 70, column: 73, scope: !7)
!108 = !DILocation(line: 71, column: 20, scope: !7)
!109 = !DILocation(line: 74, column: 20, scope: !7)
!110 = !DILocation(line: 77, column: 53, scope: !7)
!111 = !DILocation(line: 77, column: 59, scope: !7)
!112 = !DILocation(line: 77, column: 41, scope: !7)
!113 = !DILocation(line: 77, column: 70, scope: !7)
!114 = !DILocation(line: 77, column: 37, scope: !7)
!115 = !DILocation(line: 77, column: 66, scope: !7)
!116 = !DILocation(line: 77, column: 32, scope: !7)
!117 = !DILocation(line: 77, column: 83, scope: !7)
!118 = !DILocation(line: 77, column: 75, scope: !7)
!119 = !DILocation(line: 78, column: 53, scope: !7)
!120 = !DILocation(line: 78, column: 58, scope: !7)
!121 = !DILocation(line: 78, column: 33, scope: !7)
!122 = !DILocation(line: 78, column: 64, scope: !7)
!123 = !DILocation(line: 79, column: 20, scope: !7)
!124 = !DILocation(line: 81, column: 35, scope: !7)
!125 = !DILocation(line: 0, scope: !7)
!126 = !DILocation(line: 87, column: 25, scope: !7)
!127 = !DILocation(line: 87, column: 37, scope: !7)
!128 = !DILocation(line: 87, column: 4, scope: !7)
