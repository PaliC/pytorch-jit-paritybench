; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %13 = sdiv i32 %.frozen, 16, !dbg !14
  %14 = sdiv i32 %12, 16, !dbg !14
  %15 = srem i32 %13, 16, !dbg !15
  %16 = srem i32 %14, 16, !dbg !15
  %17 = mul i32 %13, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = srem i32 %11, 16, !dbg !16
  %19 = sdiv i32 %10, 256, !dbg !17
  %20 = sdiv i32 %12, 256, !dbg !17
  %21 = srem i32 %19, 128, !dbg !18
  %22 = srem i32 %20, 128, !dbg !18
  %.frozen1 = freeze i32 %10, !dbg !19
  %23 = sdiv i32 %.frozen1, 32768, !dbg !19
  %.frozen3 = freeze i32 %12, !dbg !19
  %24 = sdiv i32 %.frozen3, 32768, !dbg !19
  %25 = mul i32 %23, 32768, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %25, !dbg !20
  %26 = mul i32 %24, 32768, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %26, !dbg !20
  %27 = sext i32 %15 to i64, !dbg !21
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %16 to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %39 = sext i32 %.decomposed to i64, !dbg !23
  %40 = getelementptr i64, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %18 to i64, !dbg !23
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !24
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !24
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !24
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !24
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !24
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !24
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !24
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !24
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !24
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !24
  %55 = lshr i64 %31, 60, !dbg !25
  %56 = and i64 %55, 8, !dbg !25
  %57 = add i64 %56, %31, !dbg !25
  %58 = lshr i64 %35, 60, !dbg !25
  %59 = and i64 %58, 8, !dbg !25
  %60 = add i64 %59, %35, !dbg !25
  %61 = lshr i64 %44, 60, !dbg !26
  %62 = and i64 %61, 8, !dbg !26
  %63 = lshr i64 %45, 60, !dbg !26
  %64 = and i64 %63, 8, !dbg !26
  %65 = lshr i64 %47, 60, !dbg !26
  %66 = and i64 %65, 8, !dbg !26
  %67 = lshr i64 %48, 60, !dbg !26
  %68 = and i64 %67, 8, !dbg !26
  %69 = lshr i64 %50, 60, !dbg !26
  %70 = and i64 %69, 8, !dbg !26
  %71 = lshr i64 %51, 60, !dbg !26
  %72 = and i64 %71, 8, !dbg !26
  %73 = lshr i64 %53, 60, !dbg !26
  %74 = and i64 %73, 8, !dbg !26
  %75 = lshr i64 %54, 60, !dbg !26
  %76 = and i64 %75, 8, !dbg !26
  %77 = shl i64 %57, 3, !dbg !27
  %78 = shl i64 %60, 3, !dbg !27
  %79 = shl nsw i32 %21, 6, !dbg !28
  %80 = shl nsw i32 %22, 6, !dbg !28
  %81 = sext i32 %79 to i64, !dbg !29
  %82 = sext i32 %80 to i64, !dbg !29
  %83 = shl nsw i32 %23, 15, !dbg !30
  %84 = shl nsw i32 %24, 15, !dbg !30
  %85 = sext i32 %83 to i64, !dbg !31
  %86 = sext i32 %84 to i64, !dbg !31
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !32
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %62, !dbg !32
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %77, !dbg !32
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %81, !dbg !32
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %85, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !32
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %64, !dbg !32
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %77, !dbg !32
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %81, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %85, !dbg !32
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !32
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %66, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %77, !dbg !32
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %81, !dbg !32
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %85, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %68, !dbg !32
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %77, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %104, i64 %81, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %85, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %70, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %78, !dbg !32
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %82, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %86, !dbg !32
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %72, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %78, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %82, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %86, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %74, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %78, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %82, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %86, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !32
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %76, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %123, i64 %78, !dbg !32
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %82, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %86, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !33
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 true) #1, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #1, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #1, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !33
  %135 = shl i32 %23, 16, !dbg !34
  %136 = shl i32 %24, 16, !dbg !34
  %137 = add i32 %135, %.decomposed2, !dbg !35
  %138 = add i32 %136, %.decomposed4, !dbg !35
  %139 = sext i32 %137 to i64, !dbg !36
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !36
  %141 = sext i32 %138 to i64, !dbg !36
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %127, i32 %128, i32 %129, i32 %130, ptr addrspace(1) %140, i1 true) #1, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %132, i32 %133, i32 %134, ptr addrspace(1) %142, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6xzaojxoyc4mxhvx4eeq57ekngotjgpe6br5mgz5z7hnw4qc4wb.py", directory: "inductor_cache/6x")
!4 = !{ptr @triton_poi_fused__unsafe_index_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_28", linkageName: "triton_poi_fused__unsafe_index_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 28, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 37, column: 32, scope: !7)
!27 = !DILocation(line: 38, column: 39, scope: !7)
!28 = !DILocation(line: 38, column: 49, scope: !7)
!29 = !DILocation(line: 38, column: 46, scope: !7)
!30 = !DILocation(line: 38, column: 60, scope: !7)
!31 = !DILocation(line: 38, column: 54, scope: !7)
!32 = !DILocation(line: 38, column: 30, scope: !7)
!33 = !DILocation(line: 38, column: 65, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 30, scope: !7)
!36 = !DILocation(line: 39, column: 25, scope: !7)
!37 = !DILocation(line: 39, column: 47, scope: !7)
!38 = !DILocation(line: 39, column: 4, scope: !7)
