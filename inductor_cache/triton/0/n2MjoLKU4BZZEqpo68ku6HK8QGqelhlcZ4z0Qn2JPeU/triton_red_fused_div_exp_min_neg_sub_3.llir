; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_div_exp_min_neg_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = shl i32 %6, 12, !dbg !13
  %invariant.op = or disjoint i32 %11, %12, !dbg !14
  %13 = zext nneg i32 %11 to i64, !dbg !14
  %14 = insertelement <2 x i1> poison, i1 %7, i64 0, !dbg !15
  %15 = shufflevector <2 x i1> %14, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !15
  %16 = insertelement <4 x i1> poison, i1 %7, i64 0, !dbg !15
  %17 = shufflevector <4 x i1> %16, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !15
  %18 = shufflevector <4 x i1> %16, <4 x i1> poison, <2 x i32> zeroinitializer, !dbg !16
  %19 = or disjoint i64 %13, 1, !dbg !17
  %20 = insertelement <2 x i64> poison, i64 %13, i64 0, !dbg !17
  %21 = shufflevector <2 x i64> %20, <2 x i64> poison, <2 x i32> zeroinitializer, !dbg !17
  %22 = or disjoint <2 x i64> %21, <i64 3, i64 2>, !dbg !17
  %23 = sext i32 %invariant.op to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i25 = icmp eq i32 %34, 0, !dbg !20
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i28 = icmp eq i32 %35, 0, !dbg !20
  br i1 %.not.i25, label %41, label %36, !dbg !20

36:                                               ; preds = %5
  br i1 %.not1.i28, label %39, label %37, !dbg !20

37:                                               ; preds = %36
  %38 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit29, !dbg !20

39:                                               ; preds = %36
  %40 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit29, !dbg !20

41:                                               ; preds = %5
  br i1 %.not1.i28, label %44, label %42, !dbg !20

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit29, !dbg !20

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit29, !dbg !20

__nv_sqrtf.exit29:                                ; preds = %37, %39, %42, %44
  %.0.i27 = phi float [ %38, %37 ], [ %40, %39 ], [ %43, %42 ], [ %45, %44 ], !dbg !20
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i30 = icmp eq i32 %46, 0, !dbg !20
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i33 = icmp eq i32 %47, 0, !dbg !20
  br i1 %.not.i30, label %53, label %48, !dbg !20

48:                                               ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %51, label %49, !dbg !20

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit34, !dbg !20

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit34, !dbg !20

53:                                               ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %56, label %54, !dbg !20

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit34, !dbg !20

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit34, !dbg !20

__nv_sqrtf.exit34:                                ; preds = %49, %51, %54, %56
  %.0.i32 = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !20
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i35 = icmp eq i32 %58, 0, !dbg !20
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i38 = icmp eq i32 %59, 0, !dbg !20
  br i1 %.not.i35, label %65, label %60, !dbg !20

60:                                               ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %63, label %61, !dbg !20

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %32) #5, !dbg !20
  br label %__nv_sqrtf.exit39, !dbg !20

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %32) #5, !dbg !20
  br label %__nv_sqrtf.exit39, !dbg !20

65:                                               ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %68, label %66, !dbg !20

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %32) #5, !dbg !20
  br label %__nv_sqrtf.exit39, !dbg !20

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %32) #5, !dbg !20
  br label %__nv_sqrtf.exit39, !dbg !20

__nv_sqrtf.exit39:                                ; preds = %61, %63, %66, %68
  %.0.i37 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !20
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i40 = icmp eq i32 %70, 0, !dbg !20
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i43 = icmp eq i32 %71, 0, !dbg !20
  br i1 %.not.i40, label %77, label %72, !dbg !20

72:                                               ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %75, label %73, !dbg !20

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #5, !dbg !20
  br label %__nv_sqrtf.exit44, !dbg !20

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #5, !dbg !20
  br label %__nv_sqrtf.exit44, !dbg !20

77:                                               ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %80, label %78, !dbg !20

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #5, !dbg !20
  br label %__nv_sqrtf.exit44, !dbg !20

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #5, !dbg !20
  br label %__nv_sqrtf.exit44, !dbg !20

__nv_sqrtf.exit44:                                ; preds = %73, %75, %78, %80
  %.0.i42 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !20
  %82 = insertelement <2 x float> poison, float %.0.i42, i64 0, !dbg !21
  %83 = insertelement <2 x float> %82, float %.0.i37, i64 1, !dbg !21
  %84 = select i1 %7, float %.0.i27, float 0x7FF0000000000000, !dbg !25
  %85 = select i1 %7, float %.0.i32, float 0x7FF0000000000000, !dbg !25
  %86 = insertelement <2 x float> poison, float %.0.i27, i64 0, !dbg !26
  %87 = insertelement <2 x float> %86, float %.0.i32, i64 1, !dbg !26
  %88 = insertelement <2 x i64> %21, i64 %19, i64 1, !dbg !28
  %89 = shufflevector <2 x float> %83, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %90 = select <2 x i1> %15, <2 x float> %87, <2 x float> splat (float 0x7FF0000000000000), !dbg !15
  %91 = select <4 x i1> %17, <4 x float> %89, <4 x float> splat (float 0x7FF0000000000000), !dbg !15
  %92 = select <2 x i1> %15, <2 x i64> %88, <2 x i64> splat (i64 9223372036854775807), !dbg !16
  %93 = select <2 x i1> %18, <2 x i64> %22, <2 x i64> splat (i64 9223372036854775807), !dbg !16
  %94 = or disjoint i64 %13, 2048, !dbg !17
  %95 = or disjoint i64 %13, 2049, !dbg !17
  %96 = insertelement <2 x i64> poison, i64 %94, i64 0, !dbg !17
  %97 = shufflevector <2 x i64> %96, <2 x i64> poison, <2 x i32> zeroinitializer, !dbg !17
  %98 = or disjoint <2 x i64> %97, <i64 3, i64 2>, !dbg !17
  %.reass.1 = or disjoint i32 %invariant.op, 2048
  %99 = sext i32 %.reass.1 to i64, !dbg !18
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !18
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !19
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !19
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !19
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !19
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !19
  %106 = bitcast i32 %102 to float, !dbg !19
  %107 = bitcast i32 %103 to float, !dbg !19
  %108 = bitcast i32 %104 to float, !dbg !19
  %109 = bitcast i32 %105 to float, !dbg !19
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i25.1 = icmp eq i32 %110, 0, !dbg !20
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i28.1 = icmp eq i32 %111, 0, !dbg !20
  br i1 %.not.i25.1, label %117, label %112, !dbg !20

112:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i28.1, label %115, label %113, !dbg !20

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #5, !dbg !20
  br label %__nv_sqrtf.exit29.1, !dbg !20

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #5, !dbg !20
  br label %__nv_sqrtf.exit29.1, !dbg !20

117:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i28.1, label %120, label %118, !dbg !20

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #5, !dbg !20
  br label %__nv_sqrtf.exit29.1, !dbg !20

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #5, !dbg !20
  br label %__nv_sqrtf.exit29.1, !dbg !20

__nv_sqrtf.exit29.1:                              ; preds = %120, %118, %115, %113
  %.0.i27.1 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !20
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i30.1 = icmp eq i32 %122, 0, !dbg !20
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i33.1 = icmp eq i32 %123, 0, !dbg !20
  br i1 %.not.i30.1, label %129, label %124, !dbg !20

124:                                              ; preds = %__nv_sqrtf.exit29.1
  br i1 %.not1.i33.1, label %127, label %125, !dbg !20

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #5, !dbg !20
  br label %__nv_sqrtf.exit34.1, !dbg !20

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #5, !dbg !20
  br label %__nv_sqrtf.exit34.1, !dbg !20

129:                                              ; preds = %__nv_sqrtf.exit29.1
  br i1 %.not1.i33.1, label %132, label %130, !dbg !20

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #5, !dbg !20
  br label %__nv_sqrtf.exit34.1, !dbg !20

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #5, !dbg !20
  br label %__nv_sqrtf.exit34.1, !dbg !20

__nv_sqrtf.exit34.1:                              ; preds = %132, %130, %127, %125
  %.0.i32.1 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !20
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i35.1 = icmp eq i32 %134, 0, !dbg !20
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i38.1 = icmp eq i32 %135, 0, !dbg !20
  br i1 %.not.i35.1, label %141, label %136, !dbg !20

136:                                              ; preds = %__nv_sqrtf.exit34.1
  br i1 %.not1.i38.1, label %139, label %137, !dbg !20

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #5, !dbg !20
  br label %__nv_sqrtf.exit39.1, !dbg !20

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #5, !dbg !20
  br label %__nv_sqrtf.exit39.1, !dbg !20

141:                                              ; preds = %__nv_sqrtf.exit34.1
  br i1 %.not1.i38.1, label %144, label %142, !dbg !20

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #5, !dbg !20
  br label %__nv_sqrtf.exit39.1, !dbg !20

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #5, !dbg !20
  br label %__nv_sqrtf.exit39.1, !dbg !20

__nv_sqrtf.exit39.1:                              ; preds = %144, %142, %139, %137
  %.0.i37.1 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !20
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i40.1 = icmp eq i32 %146, 0, !dbg !20
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i43.1 = icmp eq i32 %147, 0, !dbg !20
  br i1 %.not.i40.1, label %153, label %148, !dbg !20

148:                                              ; preds = %__nv_sqrtf.exit39.1
  br i1 %.not1.i43.1, label %151, label %149, !dbg !20

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #5, !dbg !20
  br label %__nv_sqrtf.exit44.1, !dbg !20

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #5, !dbg !20
  br label %__nv_sqrtf.exit44.1, !dbg !20

153:                                              ; preds = %__nv_sqrtf.exit39.1
  br i1 %.not1.i43.1, label %156, label %154, !dbg !20

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #5, !dbg !20
  br label %__nv_sqrtf.exit44.1, !dbg !20

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #5, !dbg !20
  br label %__nv_sqrtf.exit44.1, !dbg !20

__nv_sqrtf.exit44.1:                              ; preds = %156, %154, %151, %149
  %.0.i42.1 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !20
  %158 = fcmp olt float %84, %.0.i27.1, !dbg !21
  %159 = fcmp olt float %85, %.0.i32.1, !dbg !21
  %160 = shufflevector <4 x float> %91, <4 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !21
  %161 = insertelement <2 x float> poison, float %.0.i42.1, i64 0, !dbg !21
  %162 = insertelement <2 x float> %161, float %.0.i37.1, i64 1, !dbg !21
  %163 = fcmp olt <2 x float> %160, %162, !dbg !21
  %164 = fcmp uno float %84, 0.000000e+00, !dbg !30
  %165 = fcmp uno float %85, 0.000000e+00, !dbg !30
  %166 = fcmp uno <4 x float> %91, zeroinitializer, !dbg !31
  %167 = or i1 %164, %158, !dbg !32
  %168 = or i1 %165, %159, !dbg !32
  %169 = select i1 %167, float %84, float %.0.i27.1, !dbg !33
  %170 = select i1 %168, float %85, float %.0.i32.1, !dbg !33
  %171 = select i1 %7, float %169, float 0x7FF0000000000000, !dbg !25
  %172 = select i1 %7, float %170, float 0x7FF0000000000000, !dbg !25
  %173 = insertelement <2 x float> poison, float %.0.i27.1, i64 0, !dbg !26
  %174 = insertelement <2 x float> %173, float %.0.i32.1, i64 1, !dbg !26
  %175 = fcmp olt <2 x float> %90, %174, !dbg !26
  %176 = shufflevector <4 x float> %91, <4 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !26
  %177 = fcmp olt <2 x float> %176, %162, !dbg !26
  %178 = fcmp oeq <2 x float> %90, %174, !dbg !34
  %179 = fcmp oeq <2 x float> %176, %162, !dbg !34
  %180 = fcmp uno <2 x float> %90, zeroinitializer, !dbg !31
  %181 = fcmp uno <2 x float> %174, zeroinitializer, !dbg !35
  %182 = fcmp uno <2 x float> %162, zeroinitializer, !dbg !35
  %183 = icmp samesign ult <2 x i64> %92, %97, !dbg !36
  %184 = icmp samesign ule <2 x i64> %92, %97, !dbg !36
  %185 = shufflevector <2 x i1> %183, <2 x i1> %184, <2 x i32> <i32 0, i32 3>, !dbg !36
  %186 = icmp samesign ult <2 x i64> %93, %98, !dbg !36
  %187 = xor <2 x i1> %181, splat (i1 true), !dbg !37
  %188 = and <2 x i1> %180, %187, !dbg !38
  %189 = or <2 x i1> %175, %188, !dbg !39
  %190 = and <2 x i1> %180, %181, !dbg !40
  %191 = or <2 x i1> %178, %190, !dbg !41
  %192 = and <2 x i1> %185, %191, !dbg !42
  %193 = or <2 x i1> %189, %192, !dbg !43
  %194 = select <2 x i1> %193, <2 x float> %90, <2 x float> %174, !dbg !29
  %195 = insertelement <2 x i64> %97, i64 %95, i64 1, !dbg !28
  %196 = select <2 x i1> %193, <2 x i64> %92, <2 x i64> %195, !dbg !28
  %197 = xor <2 x i1> %182, splat (i1 true), !dbg !37
  %198 = shufflevector <4 x i1> %166, <4 x i1> poison, <2 x i32> <i32 2, i32 3>, !dbg !38
  %199 = and <2 x i1> %198, %197, !dbg !38
  %200 = or <2 x i1> %177, %199, !dbg !39
  %201 = and <2 x i1> %198, %182, !dbg !40
  %202 = or <2 x i1> %179, %201, !dbg !41
  %203 = and <2 x i1> %186, %202, !dbg !42
  %204 = shufflevector <2 x i1> %200, <2 x i1> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !43
  %205 = shufflevector <4 x i1> %166, <4 x i1> %204, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !43
  %206 = shufflevector <2 x i1> %163, <2 x i1> %203, <4 x i32> <i32 0, i32 1, i32 2, i32 3>, !dbg !43
  %207 = or <4 x i1> %205, %206, !dbg !43
  %208 = shufflevector <2 x float> %162, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !29
  %209 = select <4 x i1> %207, <4 x float> %91, <4 x float> %208, !dbg !29
  %210 = shufflevector <4 x i1> %207, <4 x i1> poison, <2 x i32> <i32 2, i32 3>, !dbg !28
  %211 = select <2 x i1> %210, <2 x i64> %93, <2 x i64> %98, !dbg !28
  %212 = select <2 x i1> %15, <2 x float> %194, <2 x float> splat (float 0x7FF0000000000000), !dbg !15
  %213 = select <4 x i1> %17, <4 x float> %209, <4 x float> splat (float 0x7FF0000000000000), !dbg !15
  %214 = select <2 x i1> %15, <2 x i64> %196, <2 x i64> splat (i64 9223372036854775807), !dbg !16
  %215 = select <2 x i1> %18, <2 x i64> %211, <2 x i64> splat (i64 9223372036854775807), !dbg !16
  %216 = lshr i32 %8, 5, !dbg !12
  %217 = fcmp olt float %171, %172, !dbg !44
  %218 = fcmp uno float %171, 0.000000e+00, !dbg !47
  %219 = or i1 %217, %218, !dbg !48
  %220 = select i1 %219, float %171, float %172, !dbg !49
  %221 = extractelement <4 x float> %213, i64 1, !dbg !44
  %222 = fcmp olt float %220, %221, !dbg !44
  %223 = fcmp uno float %220, 0.000000e+00, !dbg !47
  %224 = or i1 %222, %223, !dbg !48
  %225 = select i1 %224, float %220, float %221, !dbg !49
  %226 = extractelement <4 x float> %213, i64 0, !dbg !44
  %227 = fcmp olt float %225, %226, !dbg !44
  %228 = fcmp uno float %225, 0.000000e+00, !dbg !47
  %229 = or i1 %227, %228, !dbg !48
  %230 = select i1 %229, float %225, float %226, !dbg !49
  %231 = bitcast float %230 to i32, !dbg !50
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 16, i32 31), !dbg !50
  %233 = bitcast i32 %232 to float, !dbg !50
  %234 = fcmp olt float %230, %233, !dbg !44
  %235 = fcmp uno float %230, 0.000000e+00, !dbg !47
  %236 = or i1 %235, %234, !dbg !48
  %237 = select i1 %236, float %230, float %233, !dbg !49
  %238 = bitcast float %237 to i32, !dbg !50
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !50
  %240 = bitcast i32 %239 to float, !dbg !50
  %241 = fcmp olt float %237, %240, !dbg !44
  %242 = fcmp uno float %237, 0.000000e+00, !dbg !47
  %243 = or i1 %241, %242, !dbg !48
  %244 = select i1 %243, float %237, float %240, !dbg !49
  %245 = bitcast float %244 to i32, !dbg !50
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !50
  %247 = bitcast i32 %246 to float, !dbg !50
  %248 = fcmp olt float %244, %247, !dbg !44
  %249 = fcmp uno float %244, 0.000000e+00, !dbg !47
  %250 = or i1 %248, %249, !dbg !48
  %251 = select i1 %250, float %244, float %247, !dbg !49
  %252 = bitcast float %251 to i32, !dbg !50
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 2, i32 31), !dbg !50
  %254 = bitcast i32 %253 to float, !dbg !50
  %255 = fcmp olt float %251, %254, !dbg !44
  %256 = fcmp uno float %251, 0.000000e+00, !dbg !47
  %257 = or i1 %255, %256, !dbg !48
  %258 = select i1 %257, float %251, float %254, !dbg !49
  %259 = bitcast float %258 to i32, !dbg !50
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !50
  %261 = bitcast i32 %260 to float, !dbg !50
  %262 = fcmp olt float %258, %261, !dbg !44
  %263 = fcmp uno float %258, 0.000000e+00, !dbg !47
  %264 = or i1 %262, %263, !dbg !48
  %265 = icmp eq i32 %9, 0, !dbg !50
  %266 = and i32 %216, 15, !dbg !50
  %267 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !50
  %268 = select i1 %264, i32 %259, i32 %260, !dbg !49
  %269 = insertelement <1 x i32> poison, i32 %268, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %269, i1 %265) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %270 = icmp slt i32 %8, 16, !dbg !50
  %271 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !50
  %272 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %271, i1 %270) #5, !dbg !50
  %273 = bitcast i32 %272 to float, !dbg !50
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %272, i32 8, i32 31), !dbg !50
  %275 = bitcast i32 %274 to float, !dbg !50
  %276 = fcmp olt float %273, %275, !dbg !44
  %277 = fcmp uno float %273, 0.000000e+00, !dbg !47
  %278 = or i1 %277, %276, !dbg !48
  %279 = select i1 %278, float %273, float %275, !dbg !49
  %280 = bitcast float %279 to i32, !dbg !50
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !50
  %282 = bitcast i32 %281 to float, !dbg !50
  %283 = fcmp olt float %279, %282, !dbg !44
  %284 = fcmp uno float %279, 0.000000e+00, !dbg !47
  %285 = or i1 %283, %284, !dbg !48
  %286 = select i1 %285, float %279, float %282, !dbg !49
  %287 = bitcast float %286 to i32, !dbg !50
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 2, i32 31), !dbg !50
  %289 = bitcast i32 %288 to float, !dbg !50
  %290 = fcmp olt float %286, %289, !dbg !44
  %291 = fcmp uno float %286, 0.000000e+00, !dbg !47
  %292 = or i1 %290, %291, !dbg !48
  %293 = select i1 %292, float %286, float %289, !dbg !49
  %294 = bitcast float %293 to i32, !dbg !50
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !50
  %296 = bitcast i32 %295 to float, !dbg !50
  %297 = fcmp olt float %293, %296, !dbg !44
  %298 = fcmp uno float %293, 0.000000e+00, !dbg !47
  %299 = or i1 %297, %298, !dbg !48
  %300 = and i32 %8, 15, !dbg !50
  %301 = icmp eq i32 %300, 0, !dbg !50
  %302 = and i1 %270, %301, !dbg !50
  %303 = select i1 %299, i32 %294, i32 %295, !dbg !49
  %304 = insertelement <1 x i32> poison, i32 %303, i64 0, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %304, i1 %302) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %305 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %306 = shufflevector <2 x float> %212, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !53
  %307 = fcmp olt <2 x float> %212, %306, !dbg !53
  %308 = fcmp oeq <2 x float> %212, %306, !dbg !53
  %309 = shufflevector <2 x i1> %307, <2 x i1> %308, <2 x i32> <i32 0, i32 3>, !dbg !53
  %310 = extractelement <2 x float> %212, i64 0, !dbg !54
  %311 = fcmp uno float %310, 0.000000e+00, !dbg !54
  %312 = extractelement <2 x float> %212, i64 1, !dbg !55
  %313 = fcmp uno float %312, 0.000000e+00, !dbg !55
  %314 = xor i1 %313, true, !dbg !56
  %315 = insertelement <2 x i1> poison, i1 %311, i64 0, !dbg !57
  %316 = shufflevector <2 x i1> %315, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !57
  %317 = insertelement <2 x i1> poison, i1 %314, i64 0, !dbg !57
  %318 = insertelement <2 x i1> %317, i1 %313, i64 1, !dbg !57
  %319 = and <2 x i1> %316, %318, !dbg !57
  %320 = or <2 x i1> %309, %319, !dbg !58
  %321 = extractelement <2 x i64> %214, i64 0, !dbg !59
  %322 = extractelement <2 x i64> %214, i64 1, !dbg !59
  %323 = icmp slt i64 %321, %322, !dbg !59
  %324 = extractelement <2 x i1> %320, i64 1, !dbg !60
  %325 = and i1 %323, %324, !dbg !60
  %326 = extractelement <2 x i1> %320, i64 0, !dbg !61
  %327 = or i1 %326, %325, !dbg !61
  %328 = select i1 %327, float %310, float %312, !dbg !62
  %329 = select i1 %327, i64 %321, i64 %322, !dbg !63
  %330 = extractelement <4 x float> %213, i64 3, !dbg !53
  %331 = fcmp olt float %328, %330, !dbg !53
  %332 = fcmp oeq float %328, %330, !dbg !64
  %333 = fcmp uno float %328, 0.000000e+00, !dbg !54
  %334 = fcmp uno float %330, 0.000000e+00, !dbg !55
  %335 = xor i1 %334, true, !dbg !56
  %336 = and i1 %333, %335, !dbg !57
  %337 = or i1 %331, %336, !dbg !58
  %338 = and i1 %334, %333, !dbg !65
  %339 = or i1 %332, %338, !dbg !66
  %340 = extractelement <2 x i64> %215, i64 1, !dbg !59
  %341 = icmp slt i64 %329, %340, !dbg !59
  %342 = and i1 %341, %339, !dbg !60
  %343 = or i1 %337, %342, !dbg !61
  %344 = select i1 %343, float %328, float %330, !dbg !62
  %345 = select i1 %343, i64 %329, i64 %340, !dbg !63
  %346 = extractelement <4 x float> %213, i64 2, !dbg !53
  %347 = fcmp olt float %344, %346, !dbg !53
  %348 = fcmp oeq float %344, %346, !dbg !64
  %349 = fcmp uno float %344, 0.000000e+00, !dbg !54
  %350 = fcmp uno float %346, 0.000000e+00, !dbg !55
  %351 = xor i1 %350, true, !dbg !56
  %352 = and i1 %349, %351, !dbg !57
  %353 = or i1 %347, %352, !dbg !58
  %354 = and i1 %350, %349, !dbg !65
  %355 = or i1 %348, %354, !dbg !66
  %356 = extractelement <2 x i64> %215, i64 0, !dbg !59
  %357 = icmp slt i64 %345, %356, !dbg !59
  %358 = and i1 %357, %355, !dbg !60
  %359 = or i1 %353, %358, !dbg !61
  %360 = select i1 %359, float %344, float %346, !dbg !62
  %361 = select i1 %359, i64 %345, i64 %356, !dbg !63
  %362 = bitcast float %360 to i32, !dbg !51
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 16, i32 31), !dbg !51
  %364 = bitcast i32 %363 to float, !dbg !51
  %extelt.offset = lshr i64 %361, 32, !dbg !51
  %365 = trunc nuw i64 %extelt.offset to i32, !dbg !51
  %366 = trunc i64 %361 to i32, !dbg !51
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 16, i32 31), !dbg !51
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 16, i32 31), !dbg !51
  %369 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !51
  %370 = insertelement <2 x i32> %369, i32 %368, i64 1, !dbg !51
  %371 = bitcast <2 x i32> %370 to i64, !dbg !51
  %372 = fcmp olt float %360, %364, !dbg !53
  %373 = fcmp oeq float %360, %364, !dbg !64
  %374 = fcmp uno float %360, 0.000000e+00, !dbg !54
  %375 = fcmp uno float %364, 0.000000e+00, !dbg !55
  %376 = xor i1 %375, true, !dbg !56
  %377 = and i1 %374, %376, !dbg !57
  %378 = or i1 %372, %377, !dbg !58
  %379 = and i1 %374, %375, !dbg !65
  %380 = or i1 %373, %379, !dbg !66
  %381 = icmp slt i64 %361, %371, !dbg !59
  %382 = and i1 %380, %381, !dbg !60
  %383 = or i1 %378, %382, !dbg !61
  %384 = select i1 %383, float %360, float %364, !dbg !62
  %385 = select i1 %383, i64 %361, i64 %371, !dbg !63
  %386 = bitcast float %384 to i32, !dbg !51
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 8, i32 31), !dbg !51
  %388 = bitcast i32 %387 to float, !dbg !51
  %extelt.offset2 = lshr i64 %385, 32, !dbg !51
  %389 = trunc nuw i64 %extelt.offset2 to i32, !dbg !51
  %390 = trunc i64 %385 to i32, !dbg !51
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 8, i32 31), !dbg !51
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %389, i32 8, i32 31), !dbg !51
  %393 = insertelement <2 x i32> poison, i32 %391, i64 0, !dbg !51
  %394 = insertelement <2 x i32> %393, i32 %392, i64 1, !dbg !51
  %395 = bitcast <2 x i32> %394 to i64, !dbg !51
  %396 = fcmp olt float %384, %388, !dbg !53
  %397 = fcmp oeq float %384, %388, !dbg !64
  %398 = fcmp uno float %384, 0.000000e+00, !dbg !54
  %399 = fcmp uno float %388, 0.000000e+00, !dbg !55
  %400 = xor i1 %399, true, !dbg !56
  %401 = and i1 %398, %400, !dbg !57
  %402 = or i1 %396, %401, !dbg !58
  %403 = and i1 %399, %398, !dbg !65
  %404 = or i1 %397, %403, !dbg !66
  %405 = icmp slt i64 %385, %395, !dbg !59
  %406 = and i1 %405, %404, !dbg !60
  %407 = or i1 %402, %406, !dbg !61
  %408 = select i1 %407, float %384, float %388, !dbg !62
  %409 = select i1 %407, i64 %385, i64 %395, !dbg !63
  %410 = bitcast float %408 to i32, !dbg !51
  %411 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %410, i32 4, i32 31), !dbg !51
  %412 = bitcast i32 %411 to float, !dbg !51
  %extelt.offset3 = lshr i64 %409, 32, !dbg !51
  %413 = trunc nuw i64 %extelt.offset3 to i32, !dbg !51
  %414 = trunc i64 %409 to i32, !dbg !51
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !51
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %413, i32 4, i32 31), !dbg !51
  %417 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !51
  %418 = insertelement <2 x i32> %417, i32 %416, i64 1, !dbg !51
  %419 = bitcast <2 x i32> %418 to i64, !dbg !51
  %420 = fcmp olt float %408, %412, !dbg !53
  %421 = fcmp oeq float %408, %412, !dbg !64
  %422 = fcmp uno float %408, 0.000000e+00, !dbg !54
  %423 = fcmp uno float %412, 0.000000e+00, !dbg !55
  %424 = xor i1 %423, true, !dbg !56
  %425 = and i1 %422, %424, !dbg !57
  %426 = or i1 %420, %425, !dbg !58
  %427 = and i1 %423, %422, !dbg !65
  %428 = or i1 %421, %427, !dbg !66
  %429 = icmp slt i64 %409, %419, !dbg !59
  %430 = and i1 %429, %428, !dbg !60
  %431 = or i1 %426, %430, !dbg !61
  %432 = select i1 %431, float %408, float %412, !dbg !62
  %433 = select i1 %431, i64 %409, i64 %419, !dbg !63
  %434 = bitcast float %432 to i32, !dbg !51
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 2, i32 31), !dbg !51
  %436 = bitcast i32 %435 to float, !dbg !51
  %extelt.offset4 = lshr i64 %433, 32, !dbg !51
  %437 = trunc nuw i64 %extelt.offset4 to i32, !dbg !51
  %438 = trunc i64 %433 to i32, !dbg !51
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !51
  %440 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %437, i32 2, i32 31), !dbg !51
  %441 = insertelement <2 x i32> poison, i32 %439, i64 0, !dbg !51
  %442 = insertelement <2 x i32> %441, i32 %440, i64 1, !dbg !51
  %443 = bitcast <2 x i32> %442 to i64, !dbg !51
  %444 = fcmp olt float %432, %436, !dbg !53
  %445 = fcmp oeq float %432, %436, !dbg !64
  %446 = fcmp uno float %432, 0.000000e+00, !dbg !54
  %447 = fcmp uno float %436, 0.000000e+00, !dbg !55
  %448 = xor i1 %447, true, !dbg !56
  %449 = and i1 %446, %448, !dbg !57
  %450 = or i1 %444, %449, !dbg !58
  %451 = and i1 %447, %446, !dbg !65
  %452 = or i1 %445, %451, !dbg !66
  %453 = icmp slt i64 %433, %443, !dbg !59
  %454 = and i1 %453, %452, !dbg !60
  %455 = or i1 %450, %454, !dbg !61
  %456 = select i1 %455, float %432, float %436, !dbg !62
  %457 = select i1 %455, i64 %433, i64 %443, !dbg !63
  %458 = bitcast float %456 to i32, !dbg !51
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 1, i32 31), !dbg !51
  %460 = bitcast i32 %459 to float, !dbg !51
  %extelt.offset5 = lshr i64 %457, 32, !dbg !51
  %461 = trunc nuw i64 %extelt.offset5 to i32, !dbg !51
  %462 = trunc i64 %457 to i32, !dbg !51
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %462, i32 1, i32 31), !dbg !51
  %464 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 1, i32 31), !dbg !51
  %465 = insertelement <2 x i32> poison, i32 %463, i64 0, !dbg !51
  %466 = insertelement <2 x i32> %465, i32 %464, i64 1, !dbg !51
  %467 = bitcast <2 x i32> %466 to i64, !dbg !51
  %468 = fcmp olt float %456, %460, !dbg !53
  %469 = fcmp oeq float %456, %460, !dbg !64
  %470 = fcmp uno float %456, 0.000000e+00, !dbg !54
  %471 = fcmp uno float %460, 0.000000e+00, !dbg !55
  %472 = xor i1 %471, true, !dbg !56
  %473 = and i1 %470, %472, !dbg !57
  %474 = or i1 %468, %473, !dbg !58
  %475 = and i1 %471, %470, !dbg !65
  %476 = or i1 %469, %475, !dbg !66
  %477 = icmp slt i64 %457, %467, !dbg !59
  %478 = and i1 %477, %476, !dbg !60
  %479 = or i1 %474, %478, !dbg !61
  %480 = select i1 %479, i64 %457, i64 %467, !dbg !63
  %481 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %266, !dbg !51
  %482 = select i1 %479, i32 %458, i32 %459, !dbg !62
  %483 = insertelement <1 x i32> poison, i32 %482, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %481, <1 x i32> %483, i1 %265) #5, !dbg !51
  %484 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %266, !dbg !51
  %485 = insertelement <1 x i64> poison, i64 %480, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %484, <1 x i64> %485, i1 %265) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %486 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %8, !dbg !51
  %487 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %486, i1 %270) #5, !dbg !51
  %488 = bitcast i32 %487 to float, !dbg !51
  %489 = getelementptr i64, ptr addrspace(3) @global_smem, i32 %8, !dbg !51
  %490 = tail call i64 asm sideeffect "@$2 ld.shared.b64 $0, [ $1 + 0 ];", "=l,r,b"(ptr addrspace(3) %489, i1 %270) #5, !dbg !51
  %491 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 8, i32 31), !dbg !51
  %492 = bitcast i32 %491 to float, !dbg !51
  %extelt.offset6 = lshr i64 %490, 32, !dbg !51
  %493 = trunc nuw i64 %extelt.offset6 to i32, !dbg !51
  %494 = trunc i64 %490 to i32, !dbg !51
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 8, i32 31), !dbg !51
  %496 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %493, i32 8, i32 31), !dbg !51
  %497 = insertelement <2 x i32> poison, i32 %495, i64 0, !dbg !51
  %498 = insertelement <2 x i32> %497, i32 %496, i64 1, !dbg !51
  %499 = bitcast <2 x i32> %498 to i64, !dbg !51
  %500 = fcmp olt float %488, %492, !dbg !53
  %501 = fcmp oeq float %488, %492, !dbg !64
  %502 = fcmp uno float %488, 0.000000e+00, !dbg !54
  %503 = fcmp uno float %492, 0.000000e+00, !dbg !55
  %504 = xor i1 %503, true, !dbg !56
  %505 = and i1 %502, %504, !dbg !57
  %506 = or i1 %500, %505, !dbg !58
  %507 = and i1 %502, %503, !dbg !65
  %508 = or i1 %501, %507, !dbg !66
  %509 = icmp slt i64 %490, %499, !dbg !59
  %510 = and i1 %508, %509, !dbg !60
  %511 = or i1 %506, %510, !dbg !61
  %512 = select i1 %511, float %488, float %492, !dbg !62
  %513 = select i1 %511, i64 %490, i64 %499, !dbg !63
  %514 = bitcast float %512 to i32, !dbg !51
  %515 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %514, i32 4, i32 31), !dbg !51
  %516 = bitcast i32 %515 to float, !dbg !51
  %extelt.offset7 = lshr i64 %513, 32, !dbg !51
  %517 = trunc nuw i64 %extelt.offset7 to i32, !dbg !51
  %518 = trunc i64 %513 to i32, !dbg !51
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 4, i32 31), !dbg !51
  %520 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %517, i32 4, i32 31), !dbg !51
  %521 = insertelement <2 x i32> poison, i32 %519, i64 0, !dbg !51
  %522 = insertelement <2 x i32> %521, i32 %520, i64 1, !dbg !51
  %523 = bitcast <2 x i32> %522 to i64, !dbg !51
  %524 = fcmp olt float %512, %516, !dbg !53
  %525 = fcmp oeq float %512, %516, !dbg !64
  %526 = fcmp uno float %512, 0.000000e+00, !dbg !54
  %527 = fcmp uno float %516, 0.000000e+00, !dbg !55
  %528 = xor i1 %527, true, !dbg !56
  %529 = and i1 %526, %528, !dbg !57
  %530 = or i1 %524, %529, !dbg !58
  %531 = and i1 %527, %526, !dbg !65
  %532 = or i1 %525, %531, !dbg !66
  %533 = icmp slt i64 %513, %523, !dbg !59
  %534 = and i1 %533, %532, !dbg !60
  %535 = or i1 %530, %534, !dbg !61
  %536 = select i1 %535, float %512, float %516, !dbg !62
  %537 = select i1 %535, i64 %513, i64 %523, !dbg !63
  %538 = bitcast float %536 to i32, !dbg !51
  %539 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %538, i32 2, i32 31), !dbg !51
  %540 = bitcast i32 %539 to float, !dbg !51
  %extelt.offset8 = lshr i64 %537, 32, !dbg !51
  %541 = trunc nuw i64 %extelt.offset8 to i32, !dbg !51
  %542 = trunc i64 %537 to i32, !dbg !51
  %543 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %542, i32 2, i32 31), !dbg !51
  %544 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %541, i32 2, i32 31), !dbg !51
  %545 = insertelement <2 x i32> poison, i32 %543, i64 0, !dbg !51
  %546 = insertelement <2 x i32> %545, i32 %544, i64 1, !dbg !51
  %547 = bitcast <2 x i32> %546 to i64, !dbg !51
  %548 = fcmp olt float %536, %540, !dbg !53
  %549 = fcmp oeq float %536, %540, !dbg !64
  %550 = fcmp uno float %536, 0.000000e+00, !dbg !54
  %551 = fcmp uno float %540, 0.000000e+00, !dbg !55
  %552 = xor i1 %551, true, !dbg !56
  %553 = and i1 %550, %552, !dbg !57
  %554 = or i1 %548, %553, !dbg !58
  %555 = and i1 %551, %550, !dbg !65
  %556 = or i1 %549, %555, !dbg !66
  %557 = icmp slt i64 %537, %547, !dbg !59
  %558 = and i1 %557, %556, !dbg !60
  %559 = or i1 %554, %558, !dbg !61
  %560 = select i1 %559, float %536, float %540, !dbg !62
  %561 = select i1 %559, i64 %537, i64 %547, !dbg !63
  %562 = bitcast float %560 to i32, !dbg !51
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %562, i32 1, i32 31), !dbg !51
  %564 = bitcast i32 %563 to float, !dbg !51
  %extelt.offset9 = lshr i64 %561, 32, !dbg !51
  %565 = trunc nuw i64 %extelt.offset9 to i32, !dbg !51
  %566 = trunc i64 %561 to i32, !dbg !51
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 1, i32 31), !dbg !51
  %568 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %565, i32 1, i32 31), !dbg !51
  %569 = insertelement <2 x i32> poison, i32 %567, i64 0, !dbg !51
  %570 = insertelement <2 x i32> %569, i32 %568, i64 1, !dbg !51
  %571 = bitcast <2 x i32> %570 to i64, !dbg !51
  %572 = fcmp olt float %560, %564, !dbg !53
  %573 = fcmp oeq float %560, %564, !dbg !64
  %574 = fcmp uno float %560, 0.000000e+00, !dbg !54
  %575 = fcmp uno float %564, 0.000000e+00, !dbg !55
  %576 = xor i1 %575, true, !dbg !56
  %577 = and i1 %574, %576, !dbg !57
  %578 = or i1 %572, %577, !dbg !58
  %579 = and i1 %575, %574, !dbg !65
  %580 = or i1 %573, %579, !dbg !66
  %581 = icmp slt i64 %561, %571, !dbg !59
  %582 = and i1 %581, %580, !dbg !60
  %583 = or i1 %578, %582, !dbg !61
  %584 = select i1 %583, i64 %561, i64 %571, !dbg !63
  %585 = select i1 %583, i32 %562, i32 %563, !dbg !62
  %586 = insertelement <1 x i32> poison, i32 %585, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %586, i1 %302) #5, !dbg !51
  %587 = insertelement <1 x i64> poison, i64 %584, i64 0, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %489, <1 x i64> %587, i1 %302) #5, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %588 = load i64, ptr addrspace(3) @global_smem, align 16, !dbg !51
  %589 = sext i32 %6 to i64, !dbg !67
  %590 = getelementptr i64, ptr addrspace(1) %1, i64 %589, !dbg !67
  %urem = and i32 %8, 511, !dbg !68
  %591 = icmp eq i32 %urem, 0, !dbg !68
  %592 = and i1 %591, %7, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %588, ptr addrspace(1) %590, i1 %592) #5, !dbg !68
  %593 = sext i32 %invariant.op to i64, !dbg !69
  %594 = getelementptr float, ptr addrspace(1) %0, i64 %593, !dbg !69
  %595 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %594, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !70
  %596 = extractvalue { i32, i32, i32, i32 } %595, 0, !dbg !70
  %597 = extractvalue { i32, i32, i32, i32 } %595, 1, !dbg !70
  %598 = extractvalue { i32, i32, i32, i32 } %595, 2, !dbg !70
  %599 = extractvalue { i32, i32, i32, i32 } %595, 3, !dbg !70
  %600 = bitcast i32 %596 to float, !dbg !70
  %601 = bitcast i32 %597 to float, !dbg !70
  %602 = bitcast i32 %598 to float, !dbg !70
  %603 = bitcast i32 %599 to float, !dbg !70
  %604 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i = icmp eq i32 %604, 0, !dbg !71
  %605 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i = icmp eq i32 %605, 0, !dbg !71
  br i1 %.not.i, label %611, label %606, !dbg !71

606:                                              ; preds = %__nv_sqrtf.exit44.1
  br i1 %.not1.i, label %609, label %607, !dbg !71

607:                                              ; preds = %606
  %608 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %600) #5, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

609:                                              ; preds = %606
  %610 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %600) #5, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

611:                                              ; preds = %__nv_sqrtf.exit44.1
  br i1 %.not1.i, label %614, label %612, !dbg !71

612:                                              ; preds = %611
  %613 = tail call float @llvm.nvvm.sqrt.rn.f(float %600) #5, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

614:                                              ; preds = %611
  %615 = tail call float @llvm.nvvm.sqrt.approx.f(float %600) #5, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

__nv_sqrtf.exit:                                  ; preds = %607, %609, %612, %614
  %.0.i = phi float [ %608, %607 ], [ %610, %609 ], [ %613, %612 ], [ %615, %614 ], !dbg !71
  %616 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i10 = icmp eq i32 %616, 0, !dbg !71
  %617 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i13 = icmp eq i32 %617, 0, !dbg !71
  br i1 %.not.i10, label %623, label %618, !dbg !71

618:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %621, label %619, !dbg !71

619:                                              ; preds = %618
  %620 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %601) #5, !dbg !71
  br label %__nv_sqrtf.exit14, !dbg !71

621:                                              ; preds = %618
  %622 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %601) #5, !dbg !71
  br label %__nv_sqrtf.exit14, !dbg !71

623:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %626, label %624, !dbg !71

624:                                              ; preds = %623
  %625 = tail call float @llvm.nvvm.sqrt.rn.f(float %601) #5, !dbg !71
  br label %__nv_sqrtf.exit14, !dbg !71

626:                                              ; preds = %623
  %627 = tail call float @llvm.nvvm.sqrt.approx.f(float %601) #5, !dbg !71
  br label %__nv_sqrtf.exit14, !dbg !71

__nv_sqrtf.exit14:                                ; preds = %619, %621, %624, %626
  %.0.i12 = phi float [ %620, %619 ], [ %622, %621 ], [ %625, %624 ], [ %627, %626 ], !dbg !71
  %628 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i15 = icmp eq i32 %628, 0, !dbg !71
  %629 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i18 = icmp eq i32 %629, 0, !dbg !71
  br i1 %.not.i15, label %635, label %630, !dbg !71

630:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %633, label %631, !dbg !71

631:                                              ; preds = %630
  %632 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %602) #5, !dbg !71
  br label %__nv_sqrtf.exit19, !dbg !71

633:                                              ; preds = %630
  %634 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %602) #5, !dbg !71
  br label %__nv_sqrtf.exit19, !dbg !71

635:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %638, label %636, !dbg !71

636:                                              ; preds = %635
  %637 = tail call float @llvm.nvvm.sqrt.rn.f(float %602) #5, !dbg !71
  br label %__nv_sqrtf.exit19, !dbg !71

638:                                              ; preds = %635
  %639 = tail call float @llvm.nvvm.sqrt.approx.f(float %602) #5, !dbg !71
  br label %__nv_sqrtf.exit19, !dbg !71

__nv_sqrtf.exit19:                                ; preds = %631, %633, %636, %638
  %.0.i17 = phi float [ %632, %631 ], [ %634, %633 ], [ %637, %636 ], [ %639, %638 ], !dbg !71
  %640 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i20 = icmp eq i32 %640, 0, !dbg !71
  %641 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i23 = icmp eq i32 %641, 0, !dbg !71
  br i1 %.not.i20, label %647, label %642, !dbg !71

642:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %645, label %643, !dbg !71

643:                                              ; preds = %642
  %644 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %603) #5, !dbg !71
  br label %__nv_sqrtf.exit24, !dbg !71

645:                                              ; preds = %642
  %646 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %603) #5, !dbg !71
  br label %__nv_sqrtf.exit24, !dbg !71

647:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %650, label %648, !dbg !71

648:                                              ; preds = %647
  %649 = tail call float @llvm.nvvm.sqrt.rn.f(float %603) #5, !dbg !71
  br label %__nv_sqrtf.exit24, !dbg !71

650:                                              ; preds = %647
  %651 = tail call float @llvm.nvvm.sqrt.approx.f(float %603) #5, !dbg !71
  br label %__nv_sqrtf.exit24, !dbg !71

__nv_sqrtf.exit24:                                ; preds = %643, %645, %648, %650
  %.0.i22 = phi float [ %644, %643 ], [ %646, %645 ], [ %649, %648 ], [ %651, %650 ], !dbg !71
  %652 = fsub float %305, %.0.i, !dbg !72
  %653 = fadd float %652, 0.000000e+00, !dbg !72
  %654 = fsub float %305, %.0.i12, !dbg !72
  %655 = fadd float %654, 0.000000e+00, !dbg !72
  %656 = fsub float %305, %.0.i17, !dbg !72
  %657 = fadd float %656, 0.000000e+00, !dbg !72
  %658 = fsub float %305, %.0.i22, !dbg !72
  %659 = fadd float %658, 0.000000e+00, !dbg !72
  %660 = fmul float %653, 0x3FC99999A0000000, !dbg !73
  %661 = fmul float %655, 0x3FC99999A0000000, !dbg !73
  %662 = fmul float %657, 0x3FC99999A0000000, !dbg !73
  %663 = fmul float %659, 0x3FC99999A0000000, !dbg !73
  %664 = fmul float %660, 0x3FF7154760000000, !dbg !74
  %665 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %664) #5, !dbg !74
  %666 = fmul float %661, 0x3FF7154760000000, !dbg !74
  %667 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %666) #5, !dbg !74
  %668 = fmul float %662, 0x3FF7154760000000, !dbg !74
  %669 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %668) #5, !dbg !74
  %670 = fmul float %663, 0x3FF7154760000000, !dbg !74
  %671 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %670) #5, !dbg !74
  %672 = getelementptr float, ptr addrspace(1) %2, i64 %593, !dbg !75
  %673 = bitcast float %665 to i32, !dbg !76
  %674 = bitcast float %667 to i32, !dbg !76
  %675 = bitcast float %669 to i32, !dbg !76
  %676 = bitcast float %671 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %673, i32 %674, i32 %675, i32 %676, ptr addrspace(1) %672, i1 %7) #5, !dbg !76
  %677 = or disjoint i32 %invariant.op, 2048, !dbg !77
  %678 = sext i32 %677 to i64, !dbg !69
  %679 = getelementptr float, ptr addrspace(1) %0, i64 %678, !dbg !69
  %680 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %679, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !70
  %681 = extractvalue { i32, i32, i32, i32 } %680, 0, !dbg !70
  %682 = extractvalue { i32, i32, i32, i32 } %680, 1, !dbg !70
  %683 = extractvalue { i32, i32, i32, i32 } %680, 2, !dbg !70
  %684 = extractvalue { i32, i32, i32, i32 } %680, 3, !dbg !70
  %685 = bitcast i32 %681 to float, !dbg !70
  %686 = bitcast i32 %682 to float, !dbg !70
  %687 = bitcast i32 %683 to float, !dbg !70
  %688 = bitcast i32 %684 to float, !dbg !70
  %689 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i.1 = icmp eq i32 %689, 0, !dbg !71
  %690 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i.1 = icmp eq i32 %690, 0, !dbg !71
  br i1 %.not.i.1, label %696, label %691, !dbg !71

691:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i.1, label %694, label %692, !dbg !71

692:                                              ; preds = %691
  %693 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %685) #5, !dbg !71
  br label %__nv_sqrtf.exit.1, !dbg !71

694:                                              ; preds = %691
  %695 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %685) #5, !dbg !71
  br label %__nv_sqrtf.exit.1, !dbg !71

696:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i.1, label %699, label %697, !dbg !71

697:                                              ; preds = %696
  %698 = tail call float @llvm.nvvm.sqrt.rn.f(float %685) #5, !dbg !71
  br label %__nv_sqrtf.exit.1, !dbg !71

699:                                              ; preds = %696
  %700 = tail call float @llvm.nvvm.sqrt.approx.f(float %685) #5, !dbg !71
  br label %__nv_sqrtf.exit.1, !dbg !71

__nv_sqrtf.exit.1:                                ; preds = %699, %697, %694, %692
  %.0.i.1 = phi float [ %693, %692 ], [ %695, %694 ], [ %698, %697 ], [ %700, %699 ], !dbg !71
  %701 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i10.1 = icmp eq i32 %701, 0, !dbg !71
  %702 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i13.1 = icmp eq i32 %702, 0, !dbg !71
  br i1 %.not.i10.1, label %708, label %703, !dbg !71

703:                                              ; preds = %__nv_sqrtf.exit.1
  br i1 %.not1.i13.1, label %706, label %704, !dbg !71

704:                                              ; preds = %703
  %705 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %686) #5, !dbg !71
  br label %__nv_sqrtf.exit14.1, !dbg !71

706:                                              ; preds = %703
  %707 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %686) #5, !dbg !71
  br label %__nv_sqrtf.exit14.1, !dbg !71

708:                                              ; preds = %__nv_sqrtf.exit.1
  br i1 %.not1.i13.1, label %711, label %709, !dbg !71

709:                                              ; preds = %708
  %710 = tail call float @llvm.nvvm.sqrt.rn.f(float %686) #5, !dbg !71
  br label %__nv_sqrtf.exit14.1, !dbg !71

711:                                              ; preds = %708
  %712 = tail call float @llvm.nvvm.sqrt.approx.f(float %686) #5, !dbg !71
  br label %__nv_sqrtf.exit14.1, !dbg !71

__nv_sqrtf.exit14.1:                              ; preds = %711, %709, %706, %704
  %.0.i12.1 = phi float [ %705, %704 ], [ %707, %706 ], [ %710, %709 ], [ %712, %711 ], !dbg !71
  %713 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i15.1 = icmp eq i32 %713, 0, !dbg !71
  %714 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i18.1 = icmp eq i32 %714, 0, !dbg !71
  br i1 %.not.i15.1, label %720, label %715, !dbg !71

715:                                              ; preds = %__nv_sqrtf.exit14.1
  br i1 %.not1.i18.1, label %718, label %716, !dbg !71

716:                                              ; preds = %715
  %717 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %687) #5, !dbg !71
  br label %__nv_sqrtf.exit19.1, !dbg !71

718:                                              ; preds = %715
  %719 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %687) #5, !dbg !71
  br label %__nv_sqrtf.exit19.1, !dbg !71

720:                                              ; preds = %__nv_sqrtf.exit14.1
  br i1 %.not1.i18.1, label %723, label %721, !dbg !71

721:                                              ; preds = %720
  %722 = tail call float @llvm.nvvm.sqrt.rn.f(float %687) #5, !dbg !71
  br label %__nv_sqrtf.exit19.1, !dbg !71

723:                                              ; preds = %720
  %724 = tail call float @llvm.nvvm.sqrt.approx.f(float %687) #5, !dbg !71
  br label %__nv_sqrtf.exit19.1, !dbg !71

__nv_sqrtf.exit19.1:                              ; preds = %723, %721, %718, %716
  %.0.i17.1 = phi float [ %717, %716 ], [ %719, %718 ], [ %722, %721 ], [ %724, %723 ], !dbg !71
  %725 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !71
  %.not.i20.1 = icmp eq i32 %725, 0, !dbg !71
  %726 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !71
  %.not1.i23.1 = icmp eq i32 %726, 0, !dbg !71
  br i1 %.not.i20.1, label %732, label %727, !dbg !71

727:                                              ; preds = %__nv_sqrtf.exit19.1
  br i1 %.not1.i23.1, label %730, label %728, !dbg !71

728:                                              ; preds = %727
  %729 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %688) #5, !dbg !71
  br label %__nv_sqrtf.exit24.1, !dbg !71

730:                                              ; preds = %727
  %731 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %688) #5, !dbg !71
  br label %__nv_sqrtf.exit24.1, !dbg !71

732:                                              ; preds = %__nv_sqrtf.exit19.1
  br i1 %.not1.i23.1, label %735, label %733, !dbg !71

733:                                              ; preds = %732
  %734 = tail call float @llvm.nvvm.sqrt.rn.f(float %688) #5, !dbg !71
  br label %__nv_sqrtf.exit24.1, !dbg !71

735:                                              ; preds = %732
  %736 = tail call float @llvm.nvvm.sqrt.approx.f(float %688) #5, !dbg !71
  br label %__nv_sqrtf.exit24.1, !dbg !71

__nv_sqrtf.exit24.1:                              ; preds = %735, %733, %730, %728
  %.0.i22.1 = phi float [ %729, %728 ], [ %731, %730 ], [ %734, %733 ], [ %736, %735 ], !dbg !71
  %737 = fsub float %305, %.0.i.1, !dbg !72
  %738 = fadd float %737, 0.000000e+00, !dbg !72
  %739 = fsub float %305, %.0.i12.1, !dbg !72
  %740 = fadd float %739, 0.000000e+00, !dbg !72
  %741 = fsub float %305, %.0.i17.1, !dbg !72
  %742 = fadd float %741, 0.000000e+00, !dbg !72
  %743 = fsub float %305, %.0.i22.1, !dbg !72
  %744 = fadd float %743, 0.000000e+00, !dbg !72
  %745 = fmul float %738, 0x3FC99999A0000000, !dbg !73
  %746 = fmul float %740, 0x3FC99999A0000000, !dbg !73
  %747 = fmul float %742, 0x3FC99999A0000000, !dbg !73
  %748 = fmul float %744, 0x3FC99999A0000000, !dbg !73
  %749 = fmul float %745, 0x3FF7154760000000, !dbg !74
  %750 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %749) #5, !dbg !74
  %751 = fmul float %746, 0x3FF7154760000000, !dbg !74
  %752 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %751) #5, !dbg !74
  %753 = fmul float %747, 0x3FF7154760000000, !dbg !74
  %754 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %753) #5, !dbg !74
  %755 = fmul float %748, 0x3FF7154760000000, !dbg !74
  %756 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %755) #5, !dbg !74
  %757 = getelementptr float, ptr addrspace(1) %2, i64 %678, !dbg !75
  %758 = bitcast float %750 to i32, !dbg !76
  %759 = bitcast float %752 to i32, !dbg !76
  %760 = bitcast float %754 to i32, !dbg !76
  %761 = bitcast float %756 to i32, !dbg !76
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %758, i32 %759, i32 %760, i32 %761, ptr addrspace(1) %757, i1 %7) #5, !dbg !76
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ca4gg7rycr5td24khip3bmnofq2vwlj6atjoumd5csha5pumvzzv.py", directory: "inductor_cache/a4")
!4 = !{ptr @triton_red_fused_div_exp_min_neg_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_exp_min_neg_sub_3, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_exp_min_neg_sub_3", linkageName: "triton_red_fused_div_exp_min_neg_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 42, column: 52, scope: !7)
!16 = !DILocation(line: 43, column: 64, scope: !7)
!17 = !DILocation(line: 31, column: 27, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 49, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 110, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 37, column: 45, scope: !7)
!25 = !DILocation(line: 38, column: 46, scope: !7)
!26 = !DILocation(line: 136, column: 21, scope: !22, inlinedAt: !27)
!27 = !DILocation(line: 40, column: 38, scope: !7)
!28 = !DILocation(line: 147, column: 69, scope: !22, inlinedAt: !27)
!29 = !DILocation(line: 147, column: 35, scope: !22, inlinedAt: !27)
!30 = !DILocation(line: 112, column: 21, scope: !22, inlinedAt: !24)
!31 = !DILocation(line: 139, column: 29, scope: !22, inlinedAt: !27)
!32 = !DILocation(line: 112, column: 16, scope: !22, inlinedAt: !24)
!33 = !DILocation(line: 113, column: 29, scope: !22, inlinedAt: !24)
!34 = !DILocation(line: 137, column: 23, scope: !22, inlinedAt: !27)
!35 = !DILocation(line: 140, column: 29, scope: !22, inlinedAt: !27)
!36 = !DILocation(line: 146, column: 31, scope: !22, inlinedAt: !27)
!37 = !DILocation(line: 141, column: 32, scope: !22, inlinedAt: !27)
!38 = !DILocation(line: 141, column: 28, scope: !22, inlinedAt: !27)
!39 = !DILocation(line: 141, column: 16, scope: !22, inlinedAt: !27)
!40 = !DILocation(line: 143, column: 29, scope: !22, inlinedAt: !27)
!41 = !DILocation(line: 143, column: 17, scope: !22, inlinedAt: !27)
!42 = !DILocation(line: 146, column: 21, scope: !22, inlinedAt: !27)
!43 = !DILocation(line: 146, column: 12, scope: !22, inlinedAt: !27)
!44 = !DILocation(line: 110, column: 15, scope: !45, inlinedAt: !46)
!45 = distinct !DILexicalBlockFile(scope: !22, file: !23, discriminator: 0)
!46 = !DILocation(line: 44, column: 38, scope: !7)
!47 = !DILocation(line: 112, column: 21, scope: !45, inlinedAt: !46)
!48 = !DILocation(line: 112, column: 16, scope: !45, inlinedAt: !46)
!49 = !DILocation(line: 113, column: 29, scope: !45, inlinedAt: !46)
!50 = !DILocation(line: 126, column: 29, scope: !22, inlinedAt: !46)
!51 = !DILocation(line: 168, column: 42, scope: !22, inlinedAt: !52)
!52 = !DILocation(line: 45, column: 75, scope: !7)
!53 = !DILocation(line: 136, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 139, column: 29, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 140, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 141, column: 32, scope: !45, inlinedAt: !52)
!57 = !DILocation(line: 141, column: 28, scope: !45, inlinedAt: !52)
!58 = !DILocation(line: 141, column: 16, scope: !45, inlinedAt: !52)
!59 = !DILocation(line: 146, column: 31, scope: !45, inlinedAt: !52)
!60 = !DILocation(line: 146, column: 21, scope: !45, inlinedAt: !52)
!61 = !DILocation(line: 146, column: 12, scope: !45, inlinedAt: !52)
!62 = !DILocation(line: 147, column: 35, scope: !45, inlinedAt: !52)
!63 = !DILocation(line: 147, column: 69, scope: !45, inlinedAt: !52)
!64 = !DILocation(line: 137, column: 23, scope: !45, inlinedAt: !52)
!65 = !DILocation(line: 143, column: 29, scope: !45, inlinedAt: !52)
!66 = !DILocation(line: 143, column: 17, scope: !45, inlinedAt: !52)
!67 = !DILocation(line: 47, column: 25, scope: !7)
!68 = !DILocation(line: 47, column: 36, scope: !7)
!69 = !DILocation(line: 52, column: 34, scope: !7)
!70 = !DILocation(line: 52, column: 49, scope: !7)
!71 = !DILocation(line: 53, column: 30, scope: !7)
!72 = !DILocation(line: 55, column: 16, scope: !7)
!73 = !DILocation(line: 57, column: 23, scope: !7)
!74 = !DILocation(line: 58, column: 28, scope: !7)
!75 = !DILocation(line: 59, column: 29, scope: !7)
!76 = !DILocation(line: 59, column: 51, scope: !7)
!77 = !DILocation(line: 52, column: 39, scope: !7)
!78 = !DILocation(line: 48, column: 4, scope: !7)
