; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__safe_softmax_5(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 2, !dbg !12
  %8 = and i32 %7, 63, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 64, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = icmp slt i32 %10, 256, !dbg !14
  %13 = shl i32 %6, 2, !dbg !15
  %14 = and i32 %13, 12, !dbg !15
  %15 = shl i32 %9, 4, !dbg !16
  %16 = shl i32 %10, 4, !dbg !16
  %17 = or disjoint i32 %15, %14, !dbg !17
  %18 = or disjoint i32 %16, %14, !dbg !17
  %19 = sext i32 %17 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !18
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11, i32 0, i1 %11) #2, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12, i32 0, i1 %12) #2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !19
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !19
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !19
  %33 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !19
  %34 = insertelement <4 x i32> %33, i32 %25, i64 1, !dbg !19
  %35 = insertelement <4 x i32> %34, i32 %26, i64 2, !dbg !19
  %36 = insertelement <4 x i32> %35, i32 %27, i64 3, !dbg !19
  %37 = bitcast <4 x i32> %36 to <4 x float>, !dbg !19
  %38 = bitcast i32 %24 to float, !dbg !20
  %39 = select i1 %11, float %38, float 0xFFF0000000000000, !dbg !20
  %40 = bitcast i32 %25 to float, !dbg !20
  %41 = select i1 %11, float %40, float 0xFFF0000000000000, !dbg !20
  %42 = bitcast i32 %26 to float, !dbg !20
  %43 = select i1 %11, float %42, float 0xFFF0000000000000, !dbg !20
  %44 = bitcast i32 %27 to float, !dbg !20
  %45 = select i1 %11, float %44, float 0xFFF0000000000000, !dbg !20
  %46 = fcmp ogt float %39, %41, !dbg !21
  %47 = fcmp uno float %39, 0.000000e+00, !dbg !26
  %48 = or i1 %46, %47, !dbg !27
  %49 = select i1 %48, float %39, float %41, !dbg !28
  %50 = fcmp ogt float %49, %43, !dbg !21
  %51 = fcmp uno float %49, 0.000000e+00, !dbg !26
  %52 = or i1 %50, %51, !dbg !27
  %53 = select i1 %52, float %49, float %43, !dbg !28
  %54 = fcmp ogt float %53, %45, !dbg !21
  %55 = fcmp uno float %53, 0.000000e+00, !dbg !26
  %56 = or i1 %54, %55, !dbg !27
  %57 = select i1 %56, float %53, float %45, !dbg !28
  %58 = bitcast float %57 to i32, !dbg !29
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !29
  %60 = bitcast i32 %59 to float, !dbg !29
  %61 = fcmp ogt float %57, %60, !dbg !21
  %62 = fcmp uno float %57, 0.000000e+00, !dbg !26
  %63 = or i1 %61, %62, !dbg !27
  %64 = select i1 %63, float %57, float %60, !dbg !28
  %65 = bitcast float %64 to i32, !dbg !29
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = fcmp ogt float %64, %67, !dbg !21
  %69 = fcmp uno float %64, 0.000000e+00, !dbg !26
  %70 = or i1 %68, %69, !dbg !27
  %71 = select i1 %70, float %64, float %67, !dbg !28
  %72 = fsub float %38, %71, !dbg !30
  %73 = fsub float %40, %71, !dbg !30
  %74 = fsub float %42, %71, !dbg !30
  %75 = fsub float %44, %71, !dbg !30
  %76 = fmul float %72, 0x3FF7154760000000, !dbg !31
  %77 = fmul float %73, 0x3FF7154760000000, !dbg !31
  %78 = fmul float %74, 0x3FF7154760000000, !dbg !31
  %79 = fmul float %75, 0x3FF7154760000000, !dbg !31
  %80 = fcmp une <4 x float> %37, splat (float 0xFFF0000000000000), !dbg !32
  %81 = insertelement <4 x i32> poison, i32 %29, i64 0, !dbg !19
  %82 = insertelement <4 x i32> %81, i32 %30, i64 1, !dbg !19
  %83 = insertelement <4 x i32> %82, i32 %31, i64 2, !dbg !19
  %84 = insertelement <4 x i32> %83, i32 %32, i64 3, !dbg !19
  %85 = bitcast <4 x i32> %84 to <4 x float>, !dbg !19
  %86 = bitcast i32 %29 to float, !dbg !20
  %87 = select i1 %12, float %86, float 0xFFF0000000000000, !dbg !20
  %88 = bitcast i32 %30 to float, !dbg !20
  %89 = select i1 %12, float %88, float 0xFFF0000000000000, !dbg !20
  %90 = bitcast i32 %31 to float, !dbg !20
  %91 = select i1 %12, float %90, float 0xFFF0000000000000, !dbg !20
  %92 = bitcast i32 %32 to float, !dbg !20
  %93 = select i1 %12, float %92, float 0xFFF0000000000000, !dbg !20
  %94 = fcmp ogt float %87, %89, !dbg !21
  %95 = fcmp uno float %87, 0.000000e+00, !dbg !26
  %96 = or i1 %94, %95, !dbg !27
  %97 = select i1 %96, float %87, float %89, !dbg !28
  %98 = fcmp ogt float %97, %91, !dbg !21
  %99 = fcmp uno float %97, 0.000000e+00, !dbg !26
  %100 = or i1 %98, %99, !dbg !27
  %101 = select i1 %100, float %97, float %91, !dbg !28
  %102 = fcmp ogt float %101, %93, !dbg !21
  %103 = fcmp uno float %101, 0.000000e+00, !dbg !26
  %104 = or i1 %102, %103, !dbg !27
  %105 = select i1 %104, float %101, float %93, !dbg !28
  %106 = bitcast float %105 to i32, !dbg !29
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 2, i32 31), !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = fcmp ogt float %105, %108, !dbg !21
  %110 = fcmp uno float %105, 0.000000e+00, !dbg !26
  %111 = or i1 %109, %110, !dbg !27
  %112 = select i1 %111, float %105, float %108, !dbg !28
  %113 = bitcast float %112 to i32, !dbg !29
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 1, i32 31), !dbg !29
  %115 = bitcast i32 %114 to float, !dbg !29
  %116 = fcmp ogt float %112, %115, !dbg !21
  %117 = fcmp uno float %112, 0.000000e+00, !dbg !26
  %118 = or i1 %116, %117, !dbg !27
  %119 = select i1 %118, float %112, float %115, !dbg !28
  %120 = fsub float %86, %119, !dbg !30
  %121 = fsub float %88, %119, !dbg !30
  %122 = fsub float %90, %119, !dbg !30
  %123 = fsub float %92, %119, !dbg !30
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #2, !dbg !31
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #2, !dbg !31
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #2, !dbg !31
  %127 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #2, !dbg !31
  %128 = fmul float %120, 0x3FF7154760000000, !dbg !31
  %129 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %128) #2, !dbg !31
  %130 = fmul float %121, 0x3FF7154760000000, !dbg !31
  %131 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %130) #2, !dbg !31
  %132 = fmul float %122, 0x3FF7154760000000, !dbg !31
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #2, !dbg !31
  %134 = fmul float %123, 0x3FF7154760000000, !dbg !31
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #2, !dbg !31
  %136 = fadd float %124, %125, !dbg !33
  %137 = fadd float %136, %126, !dbg !33
  %138 = fadd float %137, %127, !dbg !33
  %139 = select i1 %11, float %138, float 0.000000e+00, !dbg !33
  %140 = fadd float %129, %131, !dbg !33
  %141 = fadd float %140, %133, !dbg !33
  %142 = fadd float %141, %135, !dbg !33
  %143 = select i1 %12, float %142, float 0.000000e+00, !dbg !33
  %144 = bitcast float %139 to i32, !dbg !38
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !38
  %146 = bitcast i32 %145 to float, !dbg !38
  %147 = fadd float %139, %146, !dbg !33
  %148 = bitcast float %147 to i32, !dbg !38
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !38
  %150 = bitcast i32 %149 to float, !dbg !38
  %151 = fadd float %147, %150, !dbg !33
  %152 = bitcast float %143 to i32, !dbg !38
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !38
  %154 = bitcast i32 %153 to float, !dbg !38
  %155 = fadd float %143, %154, !dbg !33
  %156 = bitcast float %155 to i32, !dbg !38
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !38
  %158 = bitcast i32 %157 to float, !dbg !38
  %159 = fadd float %155, %158, !dbg !33
  %160 = fcmp une <4 x float> %85, splat (float 0xFFF0000000000000), !dbg !32
  %161 = bitcast <4 x i1> %80 to i4, !dbg !39
  %162 = icmp ne i4 %161, 0, !dbg !39
  %163 = select i1 %11, i1 %162, i1 false, !dbg !39
  %164 = zext i1 %163 to i32, !dbg !39
  %165 = bitcast <4 x i1> %160 to i4, !dbg !39
  %166 = icmp ne i4 %165, 0, !dbg !39
  %167 = select i1 %12, i1 %166, i1 false, !dbg !39
  %168 = zext i1 %167 to i32, !dbg !39
  %169 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 2, i32 31), !dbg !41
  %170 = or i32 %169, %164, !dbg !39
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !41
  %172 = or i32 %170, %171, !dbg !39
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 2, i32 31), !dbg !41
  %174 = or i32 %173, %168, !dbg !39
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !41
  %176 = or i32 %174, %175, !dbg !39
  %177 = icmp eq i32 %172, 0, !dbg !42
  %178 = icmp eq i32 %176, 0, !dbg !42
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %151) #2, !dbg !43
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %151) #2, !dbg !43
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %151) #2, !dbg !43
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %151) #2, !dbg !43
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float %159) #2, !dbg !43
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float %159) #2, !dbg !43
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float %159) #2, !dbg !43
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %159) #2, !dbg !43
  %187 = bitcast float %179 to i32, !dbg !44
  %188 = select i1 %177, i32 0, i32 %187, !dbg !45
  %189 = bitcast float %180 to i32, !dbg !44
  %190 = select i1 %177, i32 0, i32 %189, !dbg !45
  %191 = bitcast float %181 to i32, !dbg !44
  %192 = select i1 %177, i32 0, i32 %191, !dbg !45
  %193 = bitcast float %182 to i32, !dbg !44
  %194 = select i1 %177, i32 0, i32 %193, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %190, i32 %192, i32 %194, ptr addrspace(1) %20, i1 %11) #2, !dbg !44
  %195 = bitcast float %183 to i32, !dbg !44
  %196 = select i1 %178, i32 0, i32 %195, !dbg !45
  %197 = bitcast float %184 to i32, !dbg !44
  %198 = select i1 %178, i32 0, i32 %197, !dbg !45
  %199 = bitcast float %185 to i32, !dbg !44
  %200 = select i1 %178, i32 0, i32 %199, !dbg !45
  %201 = bitcast float %186 to i32, !dbg !44
  %202 = select i1 %178, i32 0, i32 %201, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %198, i32 %200, i32 %202, ptr addrspace(1) %22, i1 %12) #2, !dbg !44
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuf27ur6wlwf2ldw3avgylm2nvplvqhutxbe275wev72zm3g35et.py", directory: "inductor_cache/uf")
!4 = !{ptr @triton_per_fused__safe_softmax_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__safe_softmax_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__safe_softmax_5", linkageName: "triton_per_fused__safe_softmax_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 33, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 34, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 23, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 227, column: 15, scope: !22, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 38, scope: !7)
!41 = !DILocation(line: 232, column: 29, scope: !24, inlinedAt: !40)
!42 = !DILocation(line: 48, column: 21, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 52, column: 48, scope: !7)
!45 = !DILocation(line: 51, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 4, scope: !7)
