; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %5, 1, !dbg !13
  %11 = icmp slt i32 %9, 64, !dbg !14
  %12 = srem i32 %10, 2, !dbg !15
  %13 = ashr exact i32 %9, 1, !dbg !16
  %14 = srem i32 %13, 2, !dbg !17
  %15 = sdiv i32 %9, 4, !dbg !18
  %16 = shl nsw i32 %14, 2, !dbg !19
  %17 = shl i32 %15, 4, !dbg !20
  %18 = add i32 %16, %17, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %11) #1, !dbg !23
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !23
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !23
  %24 = bitcast i32 %22 to float, !dbg !23
  %25 = bitcast i32 %23 to float, !dbg !23
  %26 = or disjoint i32 %18, 1, !dbg !24
  %27 = add nsw i32 %26, %12, !dbg !24
  %28 = sext i32 %26 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = sext i32 %27 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %11) #1, !dbg !26
  %35 = bitcast i32 %34 to float, !dbg !26
  %36 = or disjoint i32 %18, 2, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !28
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %11) #1, !dbg !29
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !29
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !29
  %42 = bitcast i32 %40 to float, !dbg !29
  %43 = bitcast i32 %41 to float, !dbg !29
  %44 = add i32 %18, 4, !dbg !30
  %45 = sext i32 %44 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !31
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %11) #1, !dbg !32
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !32
  %50 = bitcast i32 %48 to float, !dbg !32
  %51 = bitcast i32 %49 to float, !dbg !32
  %52 = add i32 %18, 5, !dbg !33
  %53 = add nsw i32 %52, %12, !dbg !33
  %54 = sext i32 %52 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !34
  %56 = sext i32 %53 to i64, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !34
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #1, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !35
  %61 = bitcast i32 %60 to float, !dbg !35
  %62 = add i32 %18, 6, !dbg !36
  %63 = sext i32 %62 to i64, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !37
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %64, i1 %11) #1, !dbg !38
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !38
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !38
  %68 = bitcast i32 %66 to float, !dbg !38
  %69 = bitcast i32 %67 to float, !dbg !38
  %70 = add i32 %18, 8, !dbg !39
  %71 = sext i32 %70 to i64, !dbg !40
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !40
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %11) #1, !dbg !41
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !41
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !41
  %76 = bitcast i32 %74 to float, !dbg !41
  %77 = bitcast i32 %75 to float, !dbg !41
  %78 = add i32 %18, 9, !dbg !42
  %79 = add nsw i32 %78, %12, !dbg !42
  %80 = sext i32 %78 to i64, !dbg !43
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !43
  %82 = sext i32 %79 to i64, !dbg !43
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !43
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %11) #1, !dbg !44
  %85 = bitcast i32 %84 to float, !dbg !44
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %11) #1, !dbg !44
  %87 = bitcast i32 %86 to float, !dbg !44
  %88 = add i32 %18, 10, !dbg !45
  %89 = sext i32 %88 to i64, !dbg !46
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !46
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %90, i1 %11) #1, !dbg !47
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !47
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !47
  %94 = bitcast i32 %92 to float, !dbg !47
  %95 = bitcast i32 %93 to float, !dbg !47
  %96 = fcmp ogt float %33, %24, !dbg !48
  %97 = fcmp ogt float %35, %25, !dbg !48
  %98 = fcmp uno float %33, 0.000000e+00, !dbg !52
  %99 = fcmp uno float %35, 0.000000e+00, !dbg !52
  %100 = or i1 %96, %98, !dbg !53
  %101 = or i1 %97, %99, !dbg !53
  %102 = select i1 %100, float %33, float %24, !dbg !54
  %103 = select i1 %101, float %35, float %25, !dbg !54
  %104 = fcmp olt float %102, %42, !dbg !55
  %105 = fcmp olt float %103, %43, !dbg !55
  %106 = fcmp uno float %42, 0.000000e+00, !dbg !57
  %107 = fcmp uno float %43, 0.000000e+00, !dbg !57
  %108 = or i1 %104, %106, !dbg !58
  %109 = or i1 %107, %105, !dbg !58
  %110 = select i1 %108, float %42, float %102, !dbg !59
  %111 = select i1 %109, float %43, float %103, !dbg !59
  %112 = fcmp olt float %110, %50, !dbg !60
  %113 = fcmp olt float %111, %51, !dbg !60
  %114 = fcmp uno float %50, 0.000000e+00, !dbg !62
  %115 = fcmp uno float %51, 0.000000e+00, !dbg !62
  %116 = or i1 %114, %112, !dbg !63
  %117 = or i1 %115, %113, !dbg !63
  %118 = select i1 %116, float %50, float %110, !dbg !64
  %119 = select i1 %117, float %51, float %111, !dbg !64
  %120 = fcmp olt float %118, %59, !dbg !65
  %121 = fcmp olt float %119, %61, !dbg !65
  %122 = fcmp uno float %59, 0.000000e+00, !dbg !67
  %123 = fcmp uno float %61, 0.000000e+00, !dbg !67
  %124 = or i1 %122, %120, !dbg !68
  %125 = or i1 %123, %121, !dbg !68
  %126 = select i1 %124, float %59, float %118, !dbg !69
  %127 = select i1 %125, float %61, float %119, !dbg !69
  %128 = fcmp olt float %126, %68, !dbg !70
  %129 = fcmp olt float %127, %69, !dbg !70
  %130 = fcmp uno float %68, 0.000000e+00, !dbg !72
  %131 = fcmp uno float %69, 0.000000e+00, !dbg !72
  %132 = or i1 %130, %128, !dbg !73
  %133 = or i1 %131, %129, !dbg !73
  %134 = select i1 %132, float %68, float %126, !dbg !74
  %135 = select i1 %133, float %69, float %127, !dbg !74
  %136 = fcmp olt float %134, %76, !dbg !75
  %137 = fcmp olt float %135, %77, !dbg !75
  %138 = fcmp uno float %76, 0.000000e+00, !dbg !77
  %139 = fcmp uno float %77, 0.000000e+00, !dbg !77
  %140 = or i1 %138, %136, !dbg !78
  %141 = or i1 %139, %137, !dbg !78
  %142 = select i1 %140, float %76, float %134, !dbg !79
  %143 = select i1 %141, float %77, float %135, !dbg !79
  %144 = fcmp olt float %142, %85, !dbg !80
  %145 = fcmp olt float %143, %87, !dbg !80
  %146 = fcmp uno float %85, 0.000000e+00, !dbg !82
  %147 = fcmp uno float %87, 0.000000e+00, !dbg !82
  %148 = or i1 %146, %144, !dbg !83
  %149 = or i1 %147, %145, !dbg !83
  %150 = select i1 %148, float %85, float %142, !dbg !84
  %151 = select i1 %149, float %87, float %143, !dbg !84
  %152 = fcmp olt float %150, %94, !dbg !85
  %153 = fcmp olt float %151, %95, !dbg !85
  %154 = fcmp uno float %94, 0.000000e+00, !dbg !87
  %155 = fcmp uno float %95, 0.000000e+00, !dbg !87
  %156 = or i1 %154, %152, !dbg !88
  %157 = or i1 %155, %153, !dbg !88
  %158 = sext i32 %9 to i64, !dbg !89
  %159 = getelementptr float, ptr addrspace(1) %1, i64 %158, !dbg !89
  %160 = bitcast float %150 to i32, !dbg !90
  %161 = select i1 %156, i32 %92, i32 %160, !dbg !91
  %162 = bitcast float %151 to i32, !dbg !90
  %163 = select i1 %157, i32 %93, i32 %162, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %163, ptr addrspace(1) %159, i1 %11) #1, !dbg !90
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccf362hazolu4mybxfl6ooluf2atuocovywv5gwtzd4gqzqimzy3.py", directory: "inductor_cache/cf")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 37, scope: !7)
!20 = !DILocation(line: 28, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 42, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 50, scope: !7)
!24 = !DILocation(line: 29, column: 46, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 54, scope: !7)
!27 = !DILocation(line: 30, column: 46, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 54, scope: !7)
!30 = !DILocation(line: 31, column: 46, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 54, scope: !7)
!33 = !DILocation(line: 32, column: 46, scope: !7)
!34 = !DILocation(line: 32, column: 30, scope: !7)
!35 = !DILocation(line: 32, column: 54, scope: !7)
!36 = !DILocation(line: 33, column: 46, scope: !7)
!37 = !DILocation(line: 33, column: 30, scope: !7)
!38 = !DILocation(line: 33, column: 54, scope: !7)
!39 = !DILocation(line: 34, column: 47, scope: !7)
!40 = !DILocation(line: 34, column: 31, scope: !7)
!41 = !DILocation(line: 34, column: 55, scope: !7)
!42 = !DILocation(line: 35, column: 47, scope: !7)
!43 = !DILocation(line: 35, column: 31, scope: !7)
!44 = !DILocation(line: 35, column: 55, scope: !7)
!45 = !DILocation(line: 36, column: 48, scope: !7)
!46 = !DILocation(line: 36, column: 31, scope: !7)
!47 = !DILocation(line: 36, column: 56, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 37, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !56)
!56 = !DILocation(line: 38, column: 40, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !56)
!60 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !61)
!61 = !DILocation(line: 39, column: 40, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !61)
!65 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !66)
!66 = !DILocation(line: 40, column: 40, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !71)
!71 = !DILocation(line: 41, column: 41, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !76)
!76 = !DILocation(line: 42, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !81)
!81 = !DILocation(line: 43, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !86)
!86 = !DILocation(line: 44, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !86)
!89 = !DILocation(line: 45, column: 25, scope: !7)
!90 = !DILocation(line: 45, column: 37, scope: !7)
!91 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !86)
!92 = !DILocation(line: 45, column: 4, scope: !7)
