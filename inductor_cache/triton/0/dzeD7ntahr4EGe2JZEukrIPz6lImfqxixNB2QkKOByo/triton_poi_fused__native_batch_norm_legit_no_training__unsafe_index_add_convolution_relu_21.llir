; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 8, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = shl i32 %23, 1, !dbg !12
  %25 = and i32 %24, 254, !dbg !12
  %26 = or disjoint i32 %22, %25, !dbg !13
  %27 = sdiv i32 %26, 256, !dbg !14
  %28 = srem i32 %27, 16, !dbg !15
  %.frozen = freeze i32 %26, !dbg !16
  %29 = sdiv i32 %.frozen, 16, !dbg !16
  %30 = srem i32 %29, 16, !dbg !17
  %31 = mul i32 %29, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %31, !dbg !18
  %32 = sext i32 %26 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !20
  %35 = sext i32 %28 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %44 = bitcast i32 %43 to float, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !27
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %35, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !30
  %53 = sext i32 %30 to i64, !dbg !31
  %54 = getelementptr i64, ptr addrspace(1) %7, i64 %53, !dbg !31
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !32
  %57 = sext i32 %.decomposed to i64, !dbg !33
  %58 = getelementptr i64, ptr addrspace(1) %7, i64 %57, !dbg !33
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !34
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !34
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %9, i64 %35, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %35, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = getelementptr float, ptr addrspace(1) %11, i64 %35, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !40
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !40
  %73 = getelementptr float, ptr addrspace(1) %12, i64 %35, !dbg !41
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !42
  %76 = getelementptr i64, ptr addrspace(1) %13, i64 %53, !dbg !43
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !44
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !44
  %79 = getelementptr i64, ptr addrspace(1) %13, i64 %57, !dbg !45
  %80 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !46
  %81 = extractvalue { i64, i64 } %80, 0, !dbg !46
  %82 = extractvalue { i64, i64 } %80, 1, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %15, i64 %35, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !48
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !48
  %86 = getelementptr float, ptr addrspace(1) %16, i64 %35, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !50
  %88 = bitcast i32 %87 to float, !dbg !50
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !50
  %90 = bitcast i32 %89 to float, !dbg !50
  %91 = getelementptr float, ptr addrspace(1) %17, i64 %35, !dbg !51
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !52
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !52
  %94 = getelementptr float, ptr addrspace(1) %18, i64 %35, !dbg !53
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !54
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #3, !dbg !54
  %97 = fadd float %44, 0x3EE4F8B580000000, !dbg !55
  %98 = fadd float %46, 0x3EE4F8B580000000, !dbg !55
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i = icmp eq i32 %99, 0, !dbg !56
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i = icmp eq i32 %100, 0, !dbg !56
  br i1 %.not.i, label %106, label %101, !dbg !56

101:                                              ; preds = %20
  br i1 %.not1.i, label %104, label %102, !dbg !56

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

106:                                              ; preds = %20
  br i1 %.not1.i, label %109, label %107, !dbg !56

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !56
  br label %__nv_sqrtf.exit, !dbg !56

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !56
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !56
  %.not.i1 = icmp eq i32 %111, 0, !dbg !56
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !56
  %.not1.i4 = icmp eq i32 %112, 0, !dbg !56
  br i1 %.not.i1, label %118, label %113, !dbg !56

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !56

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !56

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !56
  br label %__nv_sqrtf.exit5, !dbg !56

__nv_sqrtf.exit5:                                 ; preds = %114, %116, %119, %121
  %.0.i3 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !56
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !57
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !57
  %125 = lshr i64 %55, 60, !dbg !58
  %126 = and i64 %125, 8, !dbg !58
  %127 = add i64 %126, %55, !dbg !58
  %128 = lshr i64 %60, 60, !dbg !59
  %129 = and i64 %128, 8, !dbg !59
  %130 = lshr i64 %61, 60, !dbg !59
  %131 = and i64 %130, 8, !dbg !59
  %132 = shl i64 %127, 3, !dbg !60
  %133 = shl nsw i32 %27, 6, !dbg !61
  %134 = sext i32 %133 to i64, !dbg !62
  %135 = getelementptr float, ptr addrspace(1) %8, i64 %60, !dbg !63
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %129, !dbg !63
  %137 = getelementptr float, ptr addrspace(1) %136, i64 %132, !dbg !63
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %134, !dbg !63
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %61, !dbg !63
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %131, !dbg !63
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %132, !dbg !63
  %142 = getelementptr float, ptr addrspace(1) %141, i64 %134, !dbg !63
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #3, !dbg !64
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %142, i1 true) #3, !dbg !64
  %145 = fadd float %67, 0x3EE4F8B580000000, !dbg !65
  %146 = fadd float %69, 0x3EE4F8B580000000, !dbg !65
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i6 = icmp eq i32 %147, 0, !dbg !66
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i9 = icmp eq i32 %148, 0, !dbg !66
  br i1 %.not.i6, label %154, label %149, !dbg !66

149:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %152, label %150, !dbg !66

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

154:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %157, label %155, !dbg !66

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

__nv_sqrtf.exit10:                                ; preds = %150, %152, %155, %157
  %.0.i8 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !66
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i11 = icmp eq i32 %159, 0, !dbg !66
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i14 = icmp eq i32 %160, 0, !dbg !66
  br i1 %.not.i11, label %166, label %161, !dbg !66

161:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %164, label %162, !dbg !66

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

166:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %169, label %167, !dbg !66

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !66
  br label %__nv_sqrtf.exit15, !dbg !66

__nv_sqrtf.exit15:                                ; preds = %162, %164, %167, %169
  %.0.i13 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !66
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !67
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !67
  %173 = lshr i64 %77, 61, !dbg !68
  %174 = and i64 %173, 4, !dbg !68
  %175 = add i64 %174, %77, !dbg !68
  %176 = lshr i64 %81, 61, !dbg !69
  %177 = and i64 %176, 4, !dbg !69
  %178 = lshr i64 %82, 61, !dbg !69
  %179 = and i64 %178, 4, !dbg !69
  %180 = shl i64 %175, 2, !dbg !70
  %181 = shl nsw i32 %27, 4, !dbg !71
  %182 = sext i32 %181 to i64, !dbg !72
  %183 = getelementptr float, ptr addrspace(1) %14, i64 %81, !dbg !73
  %184 = getelementptr float, ptr addrspace(1) %183, i64 %177, !dbg !73
  %185 = getelementptr float, ptr addrspace(1) %184, i64 %180, !dbg !73
  %186 = getelementptr float, ptr addrspace(1) %185, i64 %182, !dbg !73
  %187 = getelementptr float, ptr addrspace(1) %14, i64 %82, !dbg !73
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %179, !dbg !73
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %180, !dbg !73
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %182, !dbg !73
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %186, i1 true) #3, !dbg !74
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %190, i1 true) #3, !dbg !74
  %193 = fadd float %88, 0x3EE4F8B580000000, !dbg !75
  %194 = fadd float %90, 0x3EE4F8B580000000, !dbg !75
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i16 = icmp eq i32 %195, 0, !dbg !76
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i19 = icmp eq i32 %196, 0, !dbg !76
  br i1 %.not.i16, label %202, label %197, !dbg !76

197:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %200, label %198, !dbg !76

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

202:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %205, label %203, !dbg !76

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !76
  br label %__nv_sqrtf.exit20, !dbg !76

__nv_sqrtf.exit20:                                ; preds = %198, %200, %203, %205
  %.0.i18 = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !76
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !76
  %.not.i21 = icmp eq i32 %207, 0, !dbg !76
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !76
  %.not1.i24 = icmp eq i32 %208, 0, !dbg !76
  br i1 %.not.i21, label %214, label %209, !dbg !76

209:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %212, label %210, !dbg !76

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

214:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %217, label %215, !dbg !76

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !76
  br label %__nv_sqrtf.exit25, !dbg !76

__nv_sqrtf.exit25:                                ; preds = %210, %212, %215, %217
  %.0.i23 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !76
  %219 = insertelement <2 x i32> poison, i32 %144, i64 0, !dbg !64
  %220 = insertelement <2 x i32> %219, i32 %192, i64 1, !dbg !64
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !64
  %222 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !36
  %223 = insertelement <2 x i32> %222, i32 %85, i64 1, !dbg !36
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !36
  %225 = insertelement <2 x i32> poison, i32 %143, i64 0, !dbg !64
  %226 = insertelement <2 x i32> %225, i32 %191, i64 1, !dbg !64
  %227 = bitcast <2 x i32> %226 to <2 x float>, !dbg !64
  %228 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !36
  %229 = insertelement <2 x i32> %228, i32 %84, i64 1, !dbg !36
  %230 = bitcast <2 x i32> %229 to <2 x float>, !dbg !36
  %231 = extractvalue { i32, i32 } %34, 1, !dbg !20
  %232 = bitcast i32 %231 to float, !dbg !20
  %233 = bitcast i32 %38 to float, !dbg !22
  %234 = fadd float %232, %233, !dbg !77
  %235 = bitcast i32 %41 to float, !dbg !24
  %236 = fsub float %234, %235, !dbg !78
  %237 = fmul float %236, %124, !dbg !79
  %238 = bitcast i32 %49 to float, !dbg !28
  %239 = fmul float %237, %238, !dbg !80
  %240 = bitcast i32 %52 to float, !dbg !30
  %241 = fadd float %239, %240, !dbg !81
  %242 = fcmp olt float %241, 0.000000e+00, !dbg !82
  %243 = select i1 %242, float 0.000000e+00, float %241, !dbg !86
  %244 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !40
  %245 = insertelement <2 x i32> %244, i32 %93, i64 1, !dbg !40
  %246 = bitcast <2 x i32> %245 to <2 x float>, !dbg !40
  %247 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !42
  %248 = insertelement <2 x i32> %247, i32 %96, i64 1, !dbg !42
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !42
  %250 = extractvalue { i32, i32 } %34, 0, !dbg !20
  %251 = bitcast i32 %250 to float, !dbg !20
  %252 = bitcast i32 %37 to float, !dbg !22
  %253 = fadd float %251, %252, !dbg !77
  %254 = bitcast i32 %40 to float, !dbg !24
  %255 = fsub float %253, %254, !dbg !78
  %256 = fmul float %255, %123, !dbg !79
  %257 = bitcast i32 %48 to float, !dbg !28
  %258 = fmul float %256, %257, !dbg !80
  %259 = bitcast i32 %51 to float, !dbg !30
  %260 = fadd float %258, %259, !dbg !81
  %261 = fcmp olt float %260, 0.000000e+00, !dbg !82
  %262 = select i1 %261, float 0.000000e+00, float %260, !dbg !86
  %263 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !40
  %264 = insertelement <2 x i32> %263, i32 %92, i64 1, !dbg !40
  %265 = bitcast <2 x i32> %264 to <2 x float>, !dbg !40
  %266 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !42
  %267 = insertelement <2 x i32> %266, i32 %95, i64 1, !dbg !42
  %268 = bitcast <2 x i32> %267 to <2 x float>, !dbg !42
  %269 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !87
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !87
  %271 = fsub <2 x float> %227, %230, !dbg !88
  %272 = insertelement <2 x float> poison, float %171, i64 0, !dbg !89
  %273 = insertelement <2 x float> %272, float %269, i64 1, !dbg !89
  %274 = fmul <2 x float> %271, %273, !dbg !89
  %275 = fmul <2 x float> %274, %265, !dbg !90
  %276 = fadd <2 x float> %275, %268, !dbg !91
  %277 = extractelement <2 x float> %276, i64 0, !dbg !92
  %278 = fadd float %262, %277, !dbg !92
  %279 = fsub <2 x float> %221, %224, !dbg !88
  %280 = insertelement <2 x float> poison, float %172, i64 0, !dbg !89
  %281 = insertelement <2 x float> %280, float %270, i64 1, !dbg !89
  %282 = fmul <2 x float> %279, %281, !dbg !89
  %283 = fmul <2 x float> %282, %246, !dbg !90
  %284 = fadd <2 x float> %283, %249, !dbg !91
  %285 = extractelement <2 x float> %284, i64 0, !dbg !92
  %286 = fadd float %243, %285, !dbg !92
  %287 = extractelement <2 x float> %276, i64 1, !dbg !93
  %288 = fadd float %278, %287, !dbg !93
  %289 = extractelement <2 x float> %284, i64 1, !dbg !93
  %290 = fadd float %286, %289, !dbg !93
  %291 = bitcast float %253 to i32, !dbg !94
  %292 = bitcast float %234 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %291, i32 %292, ptr addrspace(1) %33, i1 true) #3, !dbg !94
  %293 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !95
  %294 = bitcast float %288 to i32, !dbg !96
  %295 = bitcast float %290 to i32, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %294, i32 %295, ptr addrspace(1) %293, i1 true) #3, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrsxhwxkgnk4j7o6sdnxv3lhdk5cojsegk7q242oehiqnpseiv7.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 46, column: 32, scope: !7)
!54 = !DILocation(line: 46, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 18, scope: !7)
!56 = !DILocation(line: 51, column: 26, scope: !7)
!57 = !DILocation(line: 53, column: 19, scope: !7)
!58 = !DILocation(line: 64, column: 35, scope: !7)
!59 = !DILocation(line: 67, column: 35, scope: !7)
!60 = !DILocation(line: 68, column: 41, scope: !7)
!61 = !DILocation(line: 68, column: 52, scope: !7)
!62 = !DILocation(line: 68, column: 49, scope: !7)
!63 = !DILocation(line: 68, column: 31, scope: !7)
!64 = !DILocation(line: 68, column: 57, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 27, scope: !7)
!67 = !DILocation(line: 72, column: 19, scope: !7)
!68 = !DILocation(line: 81, column: 35, scope: !7)
!69 = !DILocation(line: 84, column: 35, scope: !7)
!70 = !DILocation(line: 85, column: 42, scope: !7)
!71 = !DILocation(line: 85, column: 53, scope: !7)
!72 = !DILocation(line: 85, column: 50, scope: !7)
!73 = !DILocation(line: 85, column: 32, scope: !7)
!74 = !DILocation(line: 85, column: 58, scope: !7)
!75 = !DILocation(line: 87, column: 20, scope: !7)
!76 = !DILocation(line: 88, column: 27, scope: !7)
!77 = !DILocation(line: 47, column: 18, scope: !7)
!78 = !DILocation(line: 48, column: 18, scope: !7)
!79 = !DILocation(line: 56, column: 19, scope: !7)
!80 = !DILocation(line: 57, column: 20, scope: !7)
!81 = !DILocation(line: 58, column: 20, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !83, inlinedAt: !85)
!83 = distinct !DILexicalBlockFile(scope: !7, file: !84, discriminator: 0)
!84 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !83, inlinedAt: !85)
!87 = !DILocation(line: 89, column: 19, scope: !7)
!88 = !DILocation(line: 69, column: 20, scope: !7)
!89 = !DILocation(line: 74, column: 20, scope: !7)
!90 = !DILocation(line: 75, column: 20, scope: !7)
!91 = !DILocation(line: 76, column: 20, scope: !7)
!92 = !DILocation(line: 77, column: 20, scope: !7)
!93 = !DILocation(line: 94, column: 20, scope: !7)
!94 = !DILocation(line: 95, column: 39, scope: !7)
!95 = !DILocation(line: 96, column: 28, scope: !7)
!96 = !DILocation(line: 96, column: 40, scope: !7)
!97 = !DILocation(line: 96, column: 4, scope: !7)
