; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_hardswish_mean_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 384, !dbg !14
  %15 = icmp slt i32 %13, 384, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = lshr i32 %7, 3, !dbg !15
  %18 = and i32 %17, 15, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 96, !dbg !16
  %20 = mul i32 %19, 96, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul nuw nsw i32 %18, 96, !dbg !18
  %22 = add nsw i32 %.decomposed, %21, !dbg !19
  %23 = mul i32 %19, 1536, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = sext i32 %24 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !23
  %32 = insertelement <4 x i32> poison, i32 %31, i64 0, !dbg !23
  %33 = insertelement <4 x i32> %32, i32 %30, i64 1, !dbg !23
  %34 = insertelement <4 x i32> %33, i32 %29, i64 2, !dbg !23
  %35 = insertelement <4 x i32> %34, i32 %28, i64 3, !dbg !23
  %36 = bitcast <4 x i32> %35 to <4 x float>, !dbg !23
  %37 = fadd <4 x float> %36, splat (float 3.000000e+00), !dbg !24
  %38 = fcmp ole <4 x float> %37, zeroinitializer, !dbg !25
  %39 = select <4 x i1> %38, <4 x float> zeroinitializer, <4 x float> %37, !dbg !25
  %40 = fcmp olt <4 x float> %39, splat (float 6.000000e+00), !dbg !29
  %41 = extractelement <4 x float> %39, i64 3, !dbg !31
  %42 = fcmp uno float %41, 0.000000e+00, !dbg !31
  %43 = extractelement <4 x float> %39, i64 2, !dbg !31
  %44 = fcmp uno float %43, 0.000000e+00, !dbg !31
  %45 = extractelement <4 x float> %39, i64 1, !dbg !31
  %46 = fcmp uno float %45, 0.000000e+00, !dbg !31
  %47 = extractelement <4 x float> %39, i64 0, !dbg !31
  %48 = fcmp uno float %47, 0.000000e+00, !dbg !31
  %49 = extractelement <4 x i1> %40, i64 3, !dbg !32
  %50 = or i1 %49, %42, !dbg !32
  %51 = extractelement <4 x i1> %40, i64 2, !dbg !32
  %52 = or i1 %51, %44, !dbg !32
  %53 = extractelement <4 x i1> %40, i64 1, !dbg !32
  %54 = or i1 %53, %46, !dbg !32
  %55 = extractelement <4 x i1> %40, i64 0, !dbg !32
  %56 = or i1 %55, %48, !dbg !32
  %57 = select i1 %50, float %41, float 6.000000e+00, !dbg !33
  %58 = select i1 %52, float %43, float 6.000000e+00, !dbg !33
  %59 = select i1 %54, float %45, float 6.000000e+00, !dbg !33
  %60 = select i1 %56, float %47, float 6.000000e+00, !dbg !33
  %61 = bitcast i32 %28 to float, !dbg !34
  %62 = fmul float %57, %61, !dbg !34
  %63 = bitcast i32 %29 to float, !dbg !34
  %64 = fmul float %58, %63, !dbg !34
  %65 = bitcast i32 %30 to float, !dbg !34
  %66 = fmul float %59, %65, !dbg !34
  %67 = bitcast i32 %31 to float, !dbg !34
  %68 = fmul float %60, %67, !dbg !34
  %69 = fmul float %62, 0x3FC5555560000000, !dbg !35
  %70 = fmul float %64, 0x3FC5555560000000, !dbg !35
  %71 = fmul float %66, 0x3FC5555560000000, !dbg !35
  %72 = fmul float %68, 0x3FC5555560000000, !dbg !35
  %73 = select i1 %14, float %69, float 0.000000e+00, !dbg !36
  %74 = select i1 %14, float %70, float 0.000000e+00, !dbg !36
  %75 = select i1 %14, float %71, float 0.000000e+00, !dbg !36
  %76 = select i1 %14, float %72, float 0.000000e+00, !dbg !36
  %77 = bitcast float %73 to i32, !dbg !37
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 16, i32 31), !dbg !37
  %79 = bitcast i32 %78 to float, !dbg !37
  %80 = fadd float %73, %79, !dbg !41
  %81 = bitcast float %80 to i32, !dbg !37
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 8, i32 31), !dbg !37
  %83 = bitcast i32 %82 to float, !dbg !37
  %84 = fadd float %80, %83, !dbg !41
  %85 = bitcast float %74 to i32, !dbg !37
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 16, i32 31), !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = fadd float %74, %87, !dbg !41
  %89 = bitcast float %88 to i32, !dbg !37
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 8, i32 31), !dbg !37
  %91 = bitcast i32 %90 to float, !dbg !37
  %92 = fadd float %88, %91, !dbg !41
  %93 = bitcast float %75 to i32, !dbg !37
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 16, i32 31), !dbg !37
  %95 = bitcast i32 %94 to float, !dbg !37
  %96 = fadd float %75, %95, !dbg !41
  %97 = bitcast float %96 to i32, !dbg !37
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 8, i32 31), !dbg !37
  %99 = bitcast i32 %98 to float, !dbg !37
  %100 = fadd float %96, %99, !dbg !41
  %101 = bitcast float %76 to i32, !dbg !37
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 16, i32 31), !dbg !37
  %103 = bitcast i32 %102 to float, !dbg !37
  %104 = fadd float %76, %103, !dbg !41
  %105 = bitcast float %104 to i32, !dbg !37
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 8, i32 31), !dbg !37
  %107 = bitcast i32 %106 to float, !dbg !37
  %108 = fadd float %104, %107, !dbg !41
  %109 = icmp eq i32 %8, 0, !dbg !37
  %110 = and i32 %16, 3, !dbg !37
  %111 = shl nuw nsw i32 %10, 2, !dbg !37
  %112 = or disjoint i32 %111, %110, !dbg !37
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !37
  %114 = bitcast float %84 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 %109) #3, !dbg !37
  %115 = or disjoint i32 %111, 4, !dbg !37
  %116 = or disjoint i32 %115, %110, !dbg !37
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !37
  %118 = bitcast float %92 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %118, i1 %109) #3, !dbg !37
  %119 = or disjoint i32 %111, 8, !dbg !37
  %120 = or disjoint i32 %119, %110, !dbg !37
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !37
  %122 = bitcast float %100 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 %109) #3, !dbg !37
  %123 = or disjoint i32 %111, 12, !dbg !37
  %124 = or disjoint i32 %123, %110, !dbg !37
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !37
  %126 = bitcast float %108 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 %109) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %127 = icmp slt i32 %7, 128, !dbg !37
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !37
  %129 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %128, i1 %127) #3, !dbg !37
  %130 = bitcast i32 %129 to float, !dbg !37
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 2, i32 31), !dbg !37
  %132 = bitcast i32 %131 to float, !dbg !37
  %133 = fadd float %130, %132, !dbg !41
  %134 = bitcast float %133 to i32, !dbg !37
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = fadd float %133, %136, !dbg !41
  %138 = and i32 %7, 3, !dbg !37
  %139 = icmp eq i32 %138, 0, !dbg !37
  %140 = and i1 %127, %139, !dbg !37
  %141 = bitcast float %137 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %141, i1 %140) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !37
  %143 = load i32, ptr addrspace(3) %142, align 16, !dbg !37
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !37
  %145 = load i32, ptr addrspace(3) %144, align 16, !dbg !37
  %146 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !37
  %147 = load i32, ptr addrspace(3) %146, align 16, !dbg !37
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !37
  %149 = load i32, ptr addrspace(3) %148, align 16, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !43
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %150, i32 %143, i32 %145, i32 %147, i32 %149, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !43
  %152 = load float, ptr addrspace(3) %151, align 4, !dbg !43
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float 1.600000e+01) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %154 = sext i32 %13 to i64, !dbg !45
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !45
  %156 = icmp eq i32 %110, 0, !dbg !46
  %157 = bitcast float %153 to i32, !dbg !46
  %158 = and i1 %156, %15, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %157, ptr addrspace(1) %155, i1 %158) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5xof3c6ewxjv5ojnpb4pbgdt6kfk47poww6bnblk7sba255pgzk.py", directory: "inductor_cache/5x")
!4 = !{ptr @triton_per_fused_hardswish_mean_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_hardswish_mean_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_hardswish_mean_18", linkageName: "triton_per_fused_hardswish_mean_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 37, column: 40, scope: !7)
!29 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !30)
!30 = !DILocation(line: 39, column: 40, scope: !7)
!31 = !DILocation(line: 112, column: 21, scope: !26, inlinedAt: !30)
!32 = !DILocation(line: 112, column: 16, scope: !26, inlinedAt: !30)
!33 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !30)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 44, column: 35, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!40 = !DILocation(line: 45, column: 26, scope: !7)
!41 = !DILocation(line: 256, column: 15, scope: !42, inlinedAt: !40)
!42 = distinct !DILexicalBlockFile(scope: !38, file: !39, discriminator: 0)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 4, scope: !7)
!45 = !DILocation(line: 49, column: 28, scope: !7)
!46 = !DILocation(line: 49, column: 40, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
