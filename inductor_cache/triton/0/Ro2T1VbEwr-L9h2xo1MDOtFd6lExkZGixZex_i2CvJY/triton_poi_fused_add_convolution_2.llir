; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %.lobit1 = lshr i32 %9, 6, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %12, 8, !dbg !12
  %15 = or disjoint i32 %12, 12, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 8, !dbg !15
  %23 = lshr i32 %9, 2, !dbg !16
  %24 = and i32 %23, 63, !dbg !16
  %25 = or disjoint i32 %24, 64, !dbg !16
  %26 = or disjoint i32 %24, 128, !dbg !16
  %27 = or disjoint i32 %24, 192, !dbg !16
  %28 = and i32 %10, 252, !dbg !16
  %29 = or disjoint i32 %22, %24, !dbg !17
  %30 = or disjoint i32 %22, %25, !dbg !17
  %31 = or disjoint i32 %22, %26, !dbg !17
  %32 = or disjoint i32 %22, %27, !dbg !17
  %33 = or disjoint i32 %22, %28, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %34 = sdiv i32 %.frozen, 256, !dbg !18
  %35 = mul i32 %34, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %35, !dbg !19
  %36 = shl i32 %29, 8, !dbg !20
  %37 = shl i32 %30, 8, !dbg !20
  %38 = shl i32 %31, 8, !dbg !20
  %39 = shl i32 %32, 8, !dbg !20
  %40 = shl i32 %34, 20, !dbg !21
  %41 = add i32 %40, %.decomposed, !dbg !22
  %42 = add i32 %41, %36, !dbg !23
  %43 = add i32 %41, %37, !dbg !23
  %44 = add i32 %41, %38, !dbg !23
  %45 = add i32 %41, %39, !dbg !23
  %46 = sext i32 %42 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %43 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %44 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %45 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !25
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !25
  %77 = bitcast i32 %73 to float, !dbg !25
  %78 = bitcast i32 %74 to float, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !25
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !25
  %86 = bitcast i32 %82 to float, !dbg !25
  %87 = bitcast i32 %83 to float, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = sext i32 %.decomposed to i64, !dbg !26
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %91, i1 true) #2, !dbg !27
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !27
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !27
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !27
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !27
  %97 = bitcast i32 %93 to float, !dbg !27
  %98 = bitcast i32 %94 to float, !dbg !27
  %99 = bitcast i32 %95 to float, !dbg !27
  %100 = bitcast i32 %96 to float, !dbg !27
  %101 = shl i32 %17, 12, !dbg !28
  %102 = shl i32 %18, 12, !dbg !28
  %103 = shl i32 %19, 12, !dbg !28
  %104 = shl i32 %20, 12, !dbg !28
  %105 = add i32 %33, %101, !dbg !29
  %106 = add i32 %33, %102, !dbg !29
  %107 = add i32 %33, %103, !dbg !29
  %108 = add i32 %33, %104, !dbg !29
  %109 = sext i32 %105 to i64, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !30
  %111 = sext i32 %106 to i64, !dbg !30
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !30
  %113 = sext i32 %107 to i64, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !30
  %115 = sext i32 %108 to i64, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !30
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #2, !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !31
  %122 = bitcast i32 %118 to float, !dbg !31
  %123 = bitcast i32 %119 to float, !dbg !31
  %124 = bitcast i32 %120 to float, !dbg !31
  %125 = bitcast i32 %121 to float, !dbg !31
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 true) #2, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !31
  %131 = bitcast i32 %127 to float, !dbg !31
  %132 = bitcast i32 %128 to float, !dbg !31
  %133 = bitcast i32 %129 to float, !dbg !31
  %134 = bitcast i32 %130 to float, !dbg !31
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #2, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !31
  %140 = bitcast i32 %136 to float, !dbg !31
  %141 = bitcast i32 %137 to float, !dbg !31
  %142 = bitcast i32 %138 to float, !dbg !31
  %143 = bitcast i32 %139 to float, !dbg !31
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 true) #2, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !31
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !31
  %149 = bitcast i32 %145 to float, !dbg !31
  %150 = bitcast i32 %146 to float, !dbg !31
  %151 = bitcast i32 %147 to float, !dbg !31
  %152 = bitcast i32 %148 to float, !dbg !31
  %153 = fadd float %59, %97, !dbg !32
  %154 = fadd float %60, %98, !dbg !32
  %155 = fadd float %61, %99, !dbg !32
  %156 = fadd float %62, %100, !dbg !32
  %157 = fadd float %68, %97, !dbg !32
  %158 = fadd float %69, %98, !dbg !32
  %159 = fadd float %70, %99, !dbg !32
  %160 = fadd float %71, %100, !dbg !32
  %161 = fadd float %77, %97, !dbg !32
  %162 = fadd float %78, %98, !dbg !32
  %163 = fadd float %79, %99, !dbg !32
  %164 = fadd float %80, %100, !dbg !32
  %165 = fadd float %86, %97, !dbg !32
  %166 = fadd float %87, %98, !dbg !32
  %167 = fadd float %88, %99, !dbg !32
  %168 = fadd float %89, %100, !dbg !32
  %169 = shl i32 %9, 10, !dbg !32
  %170 = and i32 %169, 3072, !dbg !32
  %171 = or disjoint i32 %170, %24, !dbg !32
  %172 = and i32 %10, 1020, !dbg !32
  %173 = lshr exact i32 %170, 6, !dbg !32
  %174 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %173, !dbg !32
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !32
  %176 = bitcast float %153 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !32
  %177 = or disjoint i32 %171, 256, !dbg !32
  %178 = lshr i32 %177, 8, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !32
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !32
  %181 = bitcast float %154 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !32
  %182 = or disjoint i32 %171, 512, !dbg !32
  %183 = lshr i32 %182, 8, !dbg !32
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !32
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !32
  %186 = bitcast float %155 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !32
  %187 = or disjoint i32 %171, 768, !dbg !32
  %188 = lshr i32 %187, 8, !dbg !32
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !32
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %187, !dbg !32
  %191 = bitcast float %156 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !32
  %192 = or disjoint i32 %171, 64, !dbg !32
  %193 = getelementptr float, ptr addrspace(3) %174, i32 %192, !dbg !32
  %194 = bitcast float %157 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !32
  %195 = or disjoint i32 %171, 320, !dbg !32
  %196 = lshr i32 %195, 8, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !32
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !32
  %199 = bitcast float %158 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !32
  %200 = or disjoint i32 %171, 576, !dbg !32
  %201 = lshr i32 %200, 8, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !32
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !32
  %204 = bitcast float %159 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !32
  %205 = or disjoint i32 %171, 832, !dbg !32
  %206 = lshr i32 %205, 8, !dbg !32
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !32
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %205, !dbg !32
  %209 = bitcast float %160 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !32
  %210 = or disjoint i32 %171, 128, !dbg !32
  %211 = getelementptr float, ptr addrspace(3) %174, i32 %210, !dbg !32
  %212 = bitcast float %161 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !32
  %213 = or disjoint i32 %171, 384, !dbg !32
  %214 = lshr i32 %213, 8, !dbg !32
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !32
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !32
  %217 = bitcast float %162 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !32
  %218 = or disjoint i32 %171, 640, !dbg !32
  %219 = lshr i32 %218, 8, !dbg !32
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !32
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !32
  %222 = bitcast float %163 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !32
  %223 = or disjoint i32 %171, 896, !dbg !32
  %224 = lshr i32 %223, 8, !dbg !32
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !32
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %223, !dbg !32
  %227 = bitcast float %164 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !32
  %228 = or disjoint i32 %171, 192, !dbg !32
  %229 = getelementptr float, ptr addrspace(3) %174, i32 %228, !dbg !32
  %230 = bitcast float %165 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !32
  %231 = or disjoint i32 %171, 448, !dbg !32
  %232 = lshr i32 %231, 8, !dbg !32
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !32
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !32
  %235 = bitcast float %166 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !32
  %236 = or disjoint i32 %171, 704, !dbg !32
  %237 = lshr i32 %236, 8, !dbg !32
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !32
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !32
  %240 = bitcast float %167 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !32
  %241 = or disjoint i32 %171, 960, !dbg !32
  %242 = lshr i32 %241, 8, !dbg !32
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !32
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !32
  %245 = bitcast float %168 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %246 = lshr i32 %172, 8, !dbg !32
  %247 = or disjoint i32 %246, %172, !dbg !32
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !32
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !32
  %250 = or disjoint i32 %172, 1, !dbg !32
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !32
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %250, !dbg !32
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !32
  %254 = or disjoint i32 %172, 2, !dbg !32
  %255 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %254, !dbg !32
  %256 = load float, ptr addrspace(3) %255, align 4, !dbg !32
  %257 = or disjoint i32 %172, 3, !dbg !32
  %258 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %257, !dbg !32
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !32
  %260 = or disjoint i32 %172, 1024, !dbg !32
  %261 = lshr i32 %260, 8, !dbg !32
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !32
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %260, !dbg !32
  %264 = load float, ptr addrspace(3) %263, align 4, !dbg !32
  %265 = or disjoint i32 %172, 1025, !dbg !32
  %266 = lshr i32 %265, 8, !dbg !32
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !32
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !32
  %269 = load float, ptr addrspace(3) %268, align 4, !dbg !32
  %270 = or disjoint i32 %172, 1026, !dbg !32
  %271 = lshr i32 %270, 8, !dbg !32
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !32
  %273 = getelementptr inbounds float, ptr addrspace(3) %272, i32 %270, !dbg !32
  %274 = load float, ptr addrspace(3) %273, align 4, !dbg !32
  %275 = or disjoint i32 %172, 1027, !dbg !32
  %276 = lshr i32 %275, 8, !dbg !32
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !32
  %278 = getelementptr inbounds float, ptr addrspace(3) %277, i32 %275, !dbg !32
  %279 = load float, ptr addrspace(3) %278, align 4, !dbg !32
  %280 = or disjoint i32 %172, 2048, !dbg !32
  %281 = lshr i32 %280, 8, !dbg !32
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !32
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !32
  %284 = load float, ptr addrspace(3) %283, align 4, !dbg !32
  %285 = or disjoint i32 %172, 2049, !dbg !32
  %286 = lshr i32 %285, 8, !dbg !32
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !32
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !32
  %289 = load float, ptr addrspace(3) %288, align 4, !dbg !32
  %290 = or disjoint i32 %172, 2050, !dbg !32
  %291 = lshr i32 %290, 8, !dbg !32
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !32
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !32
  %294 = load float, ptr addrspace(3) %293, align 4, !dbg !32
  %295 = or disjoint i32 %172, 2051, !dbg !32
  %296 = lshr i32 %295, 8, !dbg !32
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !32
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !32
  %299 = load float, ptr addrspace(3) %298, align 4, !dbg !32
  %300 = or disjoint i32 %172, 3072, !dbg !32
  %301 = lshr i32 %300, 8, !dbg !32
  %302 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %301, !dbg !32
  %303 = getelementptr inbounds float, ptr addrspace(3) %302, i32 %300, !dbg !32
  %304 = load float, ptr addrspace(3) %303, align 4, !dbg !32
  %305 = or disjoint i32 %172, 3073, !dbg !32
  %306 = lshr i32 %305, 8, !dbg !32
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !32
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %305, !dbg !32
  %309 = load float, ptr addrspace(3) %308, align 4, !dbg !32
  %310 = or disjoint i32 %172, 3074, !dbg !32
  %311 = lshr i32 %310, 8, !dbg !32
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %311, !dbg !32
  %313 = getelementptr inbounds float, ptr addrspace(3) %312, i32 %310, !dbg !32
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !32
  %315 = or disjoint i32 %172, 3075, !dbg !32
  %316 = lshr i32 %315, 8, !dbg !32
  %317 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %316, !dbg !32
  %318 = getelementptr inbounds float, ptr addrspace(3) %317, i32 %315, !dbg !32
  %319 = load float, ptr addrspace(3) %318, align 4, !dbg !32
  %320 = fadd float %249, %122, !dbg !33
  %321 = fadd float %253, %123, !dbg !33
  %322 = fadd float %256, %124, !dbg !33
  %323 = fadd float %259, %125, !dbg !33
  %324 = fadd float %264, %131, !dbg !33
  %325 = fadd float %269, %132, !dbg !33
  %326 = fadd float %274, %133, !dbg !33
  %327 = fadd float %279, %134, !dbg !33
  %328 = fadd float %284, %140, !dbg !33
  %329 = fadd float %289, %141, !dbg !33
  %330 = fadd float %294, %142, !dbg !33
  %331 = fadd float %299, %143, !dbg !33
  %332 = fadd float %304, %149, !dbg !33
  %333 = fadd float %309, %150, !dbg !33
  %334 = fadd float %314, %151, !dbg !33
  %335 = fadd float %319, %152, !dbg !33
  %336 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !34
  %337 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !34
  %338 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !34
  %339 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !34
  %340 = bitcast float %320 to i32, !dbg !35
  %341 = bitcast float %321 to i32, !dbg !35
  %342 = bitcast float %322 to i32, !dbg !35
  %343 = bitcast float %323 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %336, i1 true) #2, !dbg !35
  %344 = bitcast float %324 to i32, !dbg !35
  %345 = bitcast float %325 to i32, !dbg !35
  %346 = bitcast float %326 to i32, !dbg !35
  %347 = bitcast float %327 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %337, i1 true) #2, !dbg !35
  %348 = bitcast float %328 to i32, !dbg !35
  %349 = bitcast float %329 to i32, !dbg !35
  %350 = bitcast float %330 to i32, !dbg !35
  %351 = bitcast float %331 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %338, i1 true) #2, !dbg !35
  %352 = bitcast float %332 to i32, !dbg !35
  %353 = bitcast float %333 to i32, !dbg !35
  %354 = bitcast float %334 to i32, !dbg !35
  %355 = bitcast float %335 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %353, i32 %354, i32 %355, ptr addrspace(1) %339, i1 true) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhxr5ldvh2o7fan7xvkhp5bggmj2bfszo5w7y35dkjxcsniz4ns.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused_add_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_2", linkageName: "triton_poi_fused_add_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 57, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 40, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 45, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 25, scope: !7)
!35 = !DILocation(line: 37, column: 46, scope: !7)
!36 = !DILocation(line: 37, column: 4, scope: !7)
