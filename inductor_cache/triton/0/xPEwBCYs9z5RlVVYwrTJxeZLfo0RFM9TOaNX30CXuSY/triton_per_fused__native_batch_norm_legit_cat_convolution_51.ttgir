#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0)
#loc1 = loc(unknown)
#loc16 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":40:24)
#loc23 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":48:26)
#loc46 = loc(callsite(#loc1 at #loc16))
#loc49 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_cat_convolution_51(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c17408_i32 = arith.constant 17408 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %7 = arith.divsi %0, %c64_i32 : i32 loc(#loc6)
    %8 = arith.muli %0, %c16_i32 : i32 loc(#loc7)
    %9 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked> loc(#loc8)
    %10 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc8)
    %11 = arith.addi %4, %9 : tensor<1x16xi32, #blocked> loc(#loc8)
    %12 = arith.addi %5, %10 : tensor<1x16xi32, #blocked1> loc(#loc8)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %15 = tt.addptr %13, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %16 = tt.addptr %14, %12 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc9)
    %17 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc10)
    %18 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc10)
    %19 = tt.load %15, %17, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %20 = tt.load %16, %18, %cst_4 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %21 = tt.addptr %arg2, %6 : !tt.ptr<f32>, i32 loc(#loc11)
    %22 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %23 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %24 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc12)
    %25 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc12)
    %26 = tt.load %22, %24 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %27 = tt.load %23, %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc12)
    %28 = tt.broadcast %26 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc13)
    %29 = tt.broadcast %27 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc13)
    %30 = arith.addf %19, %28 : tensor<1x16xf32, #blocked> loc(#loc13)
    %31 = arith.addf %20, %29 : tensor<1x16xf32, #blocked1> loc(#loc13)
    %32 = arith.select %17, %30, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc14)
    %33 = arith.select %18, %31, %cst_4 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc14)
    %34 = "tt.reduce"(%32) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc16)), %arg8: f32 loc(callsite(#loc1 at #loc16))):
      %74 = arith.addf %arg7, %arg8 : f32 loc(#loc52)
      tt.reduce.return %74 : f32 loc(#loc45)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc45)
    %35 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc16)), %arg8: f32 loc(callsite(#loc1 at #loc16))):
      %74 = arith.addf %arg7, %arg8 : f32 loc(#loc52)
      tt.reduce.return %74 : f32 loc(#loc45)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc45)
    %36 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc18)
    %37 = tt.expand_dims %35 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc18)
    %38 = arith.divf %36, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc19)
    %39 = arith.divf %37, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc19)
    %40 = tt.broadcast %38 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc20)
    %41 = tt.broadcast %39 : tensor<1x1xf32, #blocked1> -> tensor<1x16xf32, #blocked1> loc(#loc20)
    %42 = arith.subf %30, %40 : tensor<1x16xf32, #blocked> loc(#loc20)
    %43 = arith.subf %31, %41 : tensor<1x16xf32, #blocked1> loc(#loc20)
    %44 = arith.mulf %42, %42 : tensor<1x16xf32, #blocked> loc(#loc21)
    %45 = arith.mulf %43, %43 : tensor<1x16xf32, #blocked1> loc(#loc21)
    %46 = arith.select %17, %44, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc22)
    %47 = arith.select %18, %45, %cst_4 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc22)
    %48 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc23)), %arg8: f32 loc(callsite(#loc1 at #loc23))):
      %74 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %74 : f32 loc(#loc48)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %49 = "tt.reduce"(%47) <{axis = 1 : i32}> ({
    ^bb0(%arg7: f32 loc(callsite(#loc1 at #loc23)), %arg8: f32 loc(callsite(#loc1 at #loc23))):
      %74 = arith.addf %arg7, %arg8 : f32 loc(#loc53)
      tt.reduce.return %74 : f32 loc(#loc48)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc48)
    %50 = tt.expand_dims %48 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc24)
    %51 = tt.expand_dims %49 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc24)
    %52 = arith.divf %50, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc25)
    %53 = arith.divf %51, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc25)
    %54 = arith.addf %52, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc26)
    %55 = arith.addf %53, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc26)
    %56 = tt.extern_elementwise %54 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc27)
    %57 = tt.extern_elementwise %55 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %58 = tt.broadcast %56 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc28)
    %59 = arith.mulf %42, %58 : tensor<1x16xf32, #blocked> loc(#loc28)
    %60 = arith.cmpf ogt, %cst, %59 : tensor<1x16xf32, #blocked> loc(#loc50)
    %61 = arith.select %60, %cst, %59 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc51)
    tt.store %15, %30, %17 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc32)
    gpu.barrier loc(#loc33)
    %62 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc34)
    %63 = tt.splat %62 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %63, %57, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    %64 = arith.muli %6, %c16_i32 : i32 loc(#loc36)
    %65 = tt.splat %64 : i32 -> tensor<1x16xi32, #blocked> loc(#loc37)
    %66 = arith.addi %4, %65 : tensor<1x16xi32, #blocked> loc(#loc37)
    %67 = arith.muli %7, %c17408_i32 : i32 loc(#loc38)
    %68 = tt.splat %67 : i32 -> tensor<1x16xi32, #blocked> loc(#loc39)
    %69 = arith.addi %66, %68 : tensor<1x16xi32, #blocked> loc(#loc39)
    %70 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc40)
    %71 = tt.addptr %70, %69 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc40)
    tt.store %71, %61, %17 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc41)
    %72 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc42)
    %73 = tt.splat %72 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    tt.store %73, %39, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc43)
    tt.return loc(#loc44)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":23:28)
#loc3 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":25:21)
#loc4 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":26:34)
#loc5 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":31:19)
#loc6 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":32:19)
#loc7 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":33:42)
#loc8 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":33:39)
#loc9 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":33:34)
#loc10 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":33:47)
#loc11 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":34:30)
#loc12 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":34:35)
#loc13 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":35:18)
#loc14 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":39:33)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc18 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":40:27)
#loc19 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":43:19)
#loc20 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":44:19)
#loc21 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":45:20)
#loc22 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":47:35)
#loc24 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":48:29)
#loc25 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":50:20)
#loc26 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":52:20)
#loc27 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":53:28)
#loc28 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":55:20)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc30 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":57:42)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc32 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":58:47)
#loc33 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":59:4)
#loc34 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":60:28)
#loc35 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":60:40)
#loc36 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:33)
#loc37 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:30)
#loc38 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:44)
#loc39 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:38)
#loc40 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:25)
#loc41 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":61:56)
#loc42 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":62:25)
#loc43 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":62:37)
#loc44 = loc("inductor_cache/ef/cefrehsvotqeflf75o5jfjnvf5pr7nlawsf6fpc2lywxh4ges7hy.py":62:4)
#loc45 = loc(callsite(#loc15 at #loc16))
#loc47 = loc(callsite(#loc17 at #loc15))
#loc48 = loc(callsite(#loc15 at #loc23))
#loc50 = loc(callsite(#loc29 at #loc30))
#loc51 = loc(callsite(#loc31 at #loc30))
#loc52 = loc(callsite(#loc47 at #loc16))
#loc53 = loc(callsite(#loc47 at #loc23))
