; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) nocapture readnone %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) nocapture readnone %9, ptr addrspace(1) nocapture readnone %10, ptr addrspace(1) %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) nocapture readnone %16, ptr addrspace(1) nocapture readnone %17, ptr addrspace(1) %18, ptr addrspace(1) nocapture readnone %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) nocapture readnone %23, ptr addrspace(1) nocapture readnone %24, ptr addrspace(1) %25, ptr addrspace(1) nocapture readnone %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %33 = shl i32 %32, 9, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = shl i32 %34, 1, !dbg !12
  %36 = and i32 %35, 510, !dbg !12
  %37 = or disjoint i32 %33, %36, !dbg !13
  %38 = or disjoint i32 %37, 1, !dbg !13
  %39 = icmp slt i32 %37, 131328, !dbg !14
  %40 = sdiv i32 %37, 16, !dbg !15
  %41 = srem i32 %40, 2052, !dbg !16
  %.frozen1 = freeze i32 %37, !dbg !17
  %42 = sdiv i32 %.frozen1, 32832, !dbg !17
  %.frozen = freeze i32 %37, !dbg !18
  %43 = sdiv i32 %.frozen, 4, !dbg !18
  %44 = mul i32 %43, 4, !dbg !19
  %.decomposed = sub i32 %.frozen, %44, !dbg !19
  %45 = srem i32 %38, 4, !dbg !19
  %46 = srem i32 %43, 4, !dbg !20
  %47 = icmp slt i32 %41, 4, !dbg !21
  %48 = mul i32 %42, 32832, !dbg !22
  %srem.decomposed = sub i32 %.frozen1, %48, !dbg !22
  %49 = shl nsw i32 %42, 6, !dbg !23
  %50 = add nsw i32 %49, %srem.decomposed, !dbg !24
  %51 = sext i32 %50 to i64, !dbg !25
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !25
  %53 = and i1 %39, %47, !dbg !26
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %53, i32 0, i1 %53, i32 0, i1 %53) #1, !dbg !27
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !27
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !27
  %57 = add nsw i32 %41, -4, !dbg !28
  %58 = icmp ult i32 %57, 512, !dbg !28
  %59 = mul nsw i32 %46, 10, !dbg !29
  %60 = mul nsw i32 %57, 100, !dbg !30
  %61 = mul i32 %42, 51200, !dbg !31
  %62 = or disjoint i32 %61, 33, !dbg !32
  %63 = add nsw i32 %62, %.decomposed, !dbg !33
  %64 = add i32 %63, %59, !dbg !34
  %65 = add i32 %64, %60, !dbg !35
  %66 = add nsw i32 %62, %45, !dbg !33
  %67 = add i32 %66, %59, !dbg !34
  %68 = add i32 %67, %60, !dbg !35
  %69 = sext i32 %65 to i64, !dbg !36
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !36
  %71 = sext i32 %68 to i64, !dbg !36
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !36
  %73 = and i1 %39, %58, !dbg !37
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %73, i32 0, i1 %73) #1, !dbg !38
  %75 = bitcast i32 %74 to float, !dbg !38
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %73, i32 0, i1 %73) #1, !dbg !38
  %77 = bitcast i32 %76 to float, !dbg !38
  %78 = shl nsw i32 %42, 9, !dbg !39
  %79 = add nsw i32 %57, %78, !dbg !40
  %80 = sext i32 %79 to i64, !dbg !41
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !41
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %73, i32 0, i1 %73) #1, !dbg !42
  %83 = bitcast i32 %82 to float, !dbg !42
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %73, i32 0, i1 %73) #1, !dbg !42
  %85 = bitcast i32 %84 to float, !dbg !42
  %86 = fsub float %83, %83, !dbg !43
  %87 = fsub float %85, %85, !dbg !43
  %88 = sext i32 %.decomposed to i64, !dbg !44
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %88, !dbg !44
  %90 = getelementptr i8, ptr addrspace(1) %89, i64 12, !dbg !44
  %91 = sext i32 %45 to i64, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %6, i64 %91, !dbg !44
  %93 = getelementptr i8, ptr addrspace(1) %92, i64 12, !dbg !44
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %73, i32 0, i1 %73) #1, !dbg !45
  %95 = bitcast i32 %94 to float, !dbg !45
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %73, i32 0, i1 %73) #1, !dbg !45
  %97 = bitcast i32 %96 to float, !dbg !45
  %98 = fmul float %86, %95, !dbg !46
  %99 = fmul float %87, %97, !dbg !46
  %100 = fadd float %98, %83, !dbg !47
  %101 = fadd float %99, %85, !dbg !47
  %102 = fsub float %100, %75, !dbg !48
  %103 = fsub float %101, %77, !dbg !48
  %104 = sext i32 %46 to i64, !dbg !49
  %105 = getelementptr float, ptr addrspace(1) %7, i64 %104, !dbg !49
  %106 = getelementptr i8, ptr addrspace(1) %105, i64 12, !dbg !49
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %73, i32 0, i1 %73) #1, !dbg !50
  %108 = bitcast i32 %107 to float, !dbg !50
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %73, i32 0, i1 %73) #1, !dbg !50
  %110 = bitcast i32 %109 to float, !dbg !50
  %111 = fmul float %102, %108, !dbg !51
  %112 = fmul float %103, %110, !dbg !51
  %113 = fadd float %111, %75, !dbg !52
  %114 = fadd float %112, %77, !dbg !52
  %115 = add nsw i32 %41, -516, !dbg !53
  %116 = icmp ult i32 %115, 512, !dbg !53
  %117 = add nsw i32 %.decomposed, 168, !dbg !54
  %118 = mul nsw i32 %46, 20, !dbg !55
  %119 = mul nsw i32 %115, 400, !dbg !56
  %120 = mul i32 %42, 204800, !dbg !57
  %121 = add i32 %117, %120, !dbg !58
  %122 = add i32 %121, %118, !dbg !59
  %123 = add i32 %122, %119, !dbg !60
  %124 = sext i32 %123 to i64, !dbg !61
  %125 = getelementptr float, ptr addrspace(1) %8, i64 %124, !dbg !61
  %126 = and i1 %39, %116, !dbg !62
  %127 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %125, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !63
  %128 = extractvalue { i32, i32 } %127, 0, !dbg !63
  %129 = extractvalue { i32, i32 } %127, 1, !dbg !63
  %130 = bitcast i32 %128 to float, !dbg !63
  %131 = bitcast i32 %129 to float, !dbg !63
  %132 = add nsw i32 %115, %78, !dbg !64
  %133 = sext i32 %132 to i64, !dbg !65
  %134 = getelementptr float, ptr addrspace(1) %11, i64 %133, !dbg !65
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %126, i32 0, i1 %126) #1, !dbg !66
  %136 = bitcast i32 %135 to float, !dbg !66
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %126, i32 0, i1 %126) #1, !dbg !66
  %138 = bitcast i32 %137 to float, !dbg !66
  %139 = fsub float %136, %136, !dbg !67
  %140 = fsub float %138, %138, !dbg !67
  %141 = getelementptr float, ptr addrspace(1) %13, i64 %88, !dbg !68
  %142 = getelementptr i8, ptr addrspace(1) %141, i64 32, !dbg !68
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %142, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !69
  %144 = extractvalue { i32, i32 } %143, 0, !dbg !69
  %145 = extractvalue { i32, i32 } %143, 1, !dbg !69
  %146 = bitcast i32 %144 to float, !dbg !69
  %147 = bitcast i32 %145 to float, !dbg !69
  %148 = fmul float %139, %146, !dbg !70
  %149 = fmul float %140, %147, !dbg !70
  %150 = fadd float %148, %136, !dbg !71
  %151 = fadd float %149, %138, !dbg !71
  %152 = fsub float %150, %130, !dbg !72
  %153 = fsub float %151, %131, !dbg !72
  %154 = getelementptr float, ptr addrspace(1) %14, i64 %104, !dbg !73
  %155 = getelementptr i8, ptr addrspace(1) %154, i64 32, !dbg !73
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %126, i32 0, i1 %126) #1, !dbg !74
  %157 = bitcast i32 %156 to float, !dbg !74
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %126, i32 0, i1 %126) #1, !dbg !74
  %159 = bitcast i32 %158 to float, !dbg !74
  %160 = fmul float %152, %157, !dbg !75
  %161 = fmul float %153, %159, !dbg !75
  %162 = fadd float %160, %130, !dbg !76
  %163 = fadd float %161, %131, !dbg !76
  %164 = add nsw i32 %41, -1028, !dbg !77
  %165 = icmp ult i32 %164, 512, !dbg !77
  %166 = mul nsw i32 %46, 30, !dbg !78
  %167 = mul nsw i32 %164, 900, !dbg !79
  %168 = mul i32 %42, 460800, !dbg !80
  %169 = or disjoint i32 %168, 403, !dbg !81
  %170 = add nsw i32 %169, %.decomposed, !dbg !82
  %171 = add i32 %170, %166, !dbg !83
  %172 = add i32 %171, %167, !dbg !84
  %173 = add nsw i32 %169, %45, !dbg !82
  %174 = add i32 %173, %166, !dbg !83
  %175 = add i32 %174, %167, !dbg !84
  %176 = sext i32 %172 to i64, !dbg !85
  %177 = getelementptr float, ptr addrspace(1) %15, i64 %176, !dbg !85
  %178 = sext i32 %175 to i64, !dbg !85
  %179 = getelementptr float, ptr addrspace(1) %15, i64 %178, !dbg !85
  %180 = and i1 %39, %165, !dbg !86
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %180, i32 0, i1 %180) #1, !dbg !87
  %182 = bitcast i32 %181 to float, !dbg !87
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %180, i32 0, i1 %180) #1, !dbg !87
  %184 = bitcast i32 %183 to float, !dbg !87
  %185 = add nsw i32 %164, %78, !dbg !88
  %186 = sext i32 %185 to i64, !dbg !89
  %187 = getelementptr float, ptr addrspace(1) %18, i64 %186, !dbg !89
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %180, i32 0, i1 %180) #1, !dbg !90
  %189 = bitcast i32 %188 to float, !dbg !90
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %187, i1 %180, i32 0, i1 %180) #1, !dbg !90
  %191 = bitcast i32 %190 to float, !dbg !90
  %192 = fsub float %189, %189, !dbg !91
  %193 = fsub float %191, %191, !dbg !91
  %194 = getelementptr float, ptr addrspace(1) %20, i64 %88, !dbg !92
  %195 = getelementptr i8, ptr addrspace(1) %194, i64 52, !dbg !92
  %196 = getelementptr float, ptr addrspace(1) %20, i64 %91, !dbg !92
  %197 = getelementptr i8, ptr addrspace(1) %196, i64 52, !dbg !92
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %180, i32 0, i1 %180) #1, !dbg !93
  %199 = bitcast i32 %198 to float, !dbg !93
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %180, i32 0, i1 %180) #1, !dbg !93
  %201 = bitcast i32 %200 to float, !dbg !93
  %202 = fmul float %192, %199, !dbg !94
  %203 = fmul float %193, %201, !dbg !94
  %204 = fadd float %202, %189, !dbg !95
  %205 = fadd float %203, %191, !dbg !95
  %206 = fsub float %204, %182, !dbg !96
  %207 = fsub float %205, %184, !dbg !96
  %208 = getelementptr float, ptr addrspace(1) %21, i64 %104, !dbg !97
  %209 = getelementptr i8, ptr addrspace(1) %208, i64 52, !dbg !97
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %180, i32 0, i1 %180) #1, !dbg !98
  %211 = bitcast i32 %210 to float, !dbg !98
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %209, i1 %180, i32 0, i1 %180) #1, !dbg !98
  %213 = bitcast i32 %212 to float, !dbg !98
  %214 = fmul float %206, %211, !dbg !99
  %215 = fmul float %207, %213, !dbg !99
  %216 = fadd float %214, %182, !dbg !100
  %217 = fadd float %215, %184, !dbg !100
  %218 = icmp sgt i32 %41, 1539, !dbg !101
  %219 = add nsw i32 %.decomposed, 1708, !dbg !102
  %220 = mul nsw i32 %46, 60, !dbg !103
  %221 = add nsw i32 %41, -1540, !dbg !104
  %222 = mul nsw i32 %221, 3616, !dbg !105
  %223 = mul i32 %42, 1851392, !dbg !106
  %224 = add i32 %219, %223, !dbg !107
  %225 = add i32 %224, %220, !dbg !108
  %226 = add i32 %225, %222, !dbg !109
  %227 = sext i32 %226 to i64, !dbg !110
  %228 = getelementptr float, ptr addrspace(1) %22, i64 %227, !dbg !110
  %229 = and i1 %39, %218, !dbg !111
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %228, i1 %229, i32 0, i1 %229, i32 0, i1 %229) #1, !dbg !112
  %231 = extractvalue { i32, i32 } %230, 0, !dbg !112
  %232 = extractvalue { i32, i32 } %230, 1, !dbg !112
  %233 = bitcast i32 %231 to float, !dbg !112
  %234 = bitcast i32 %232 to float, !dbg !112
  %235 = add nsw i32 %221, %78, !dbg !113
  %236 = sext i32 %235 to i64, !dbg !114
  %237 = getelementptr float, ptr addrspace(1) %25, i64 %236, !dbg !114
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %229, i32 0, i1 %229) #1, !dbg !115
  %239 = bitcast i32 %238 to float, !dbg !115
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %229, i32 0, i1 %229) #1, !dbg !115
  %241 = bitcast i32 %240 to float, !dbg !115
  %242 = fsub float %239, %239, !dbg !116
  %243 = fsub float %241, %241, !dbg !116
  %244 = getelementptr float, ptr addrspace(1) %27, i64 %88, !dbg !117
  %245 = getelementptr i8, ptr addrspace(1) %244, i64 112, !dbg !117
  %246 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %245, i1 %229, i32 0, i1 %229, i32 0, i1 %229) #1, !dbg !118
  %247 = extractvalue { i32, i32 } %246, 0, !dbg !118
  %248 = extractvalue { i32, i32 } %246, 1, !dbg !118
  %249 = bitcast i32 %247 to float, !dbg !118
  %250 = bitcast i32 %248 to float, !dbg !118
  %251 = fmul float %242, %249, !dbg !119
  %252 = fmul float %243, %250, !dbg !119
  %253 = fadd float %251, %239, !dbg !120
  %254 = fadd float %252, %241, !dbg !120
  %255 = fsub float %253, %233, !dbg !121
  %256 = fsub float %254, %234, !dbg !121
  %257 = getelementptr float, ptr addrspace(1) %28, i64 %104, !dbg !122
  %258 = getelementptr i8, ptr addrspace(1) %257, i64 112, !dbg !122
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %229, i32 0, i1 %229) #1, !dbg !123
  %260 = bitcast i32 %259 to float, !dbg !123
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %229, i32 0, i1 %229) #1, !dbg !123
  %262 = bitcast i32 %261 to float, !dbg !123
  %263 = fmul float %255, %260, !dbg !124
  %264 = fmul float %256, %262, !dbg !124
  %265 = fadd float %263, %233, !dbg !125
  %266 = fadd float %264, %234, !dbg !125
  %267 = select i1 %218, float %265, float 0.000000e+00, !dbg !126
  %268 = select i1 %218, float %266, float 0.000000e+00, !dbg !126
  %269 = select i1 %165, float %216, float %267, !dbg !127
  %270 = select i1 %165, float %217, float %268, !dbg !127
  %271 = select i1 %116, float %162, float %269, !dbg !127
  %272 = select i1 %116, float %163, float %270, !dbg !127
  %273 = select i1 %58, float %113, float %271, !dbg !127
  %274 = select i1 %58, float %114, float %272, !dbg !127
  %275 = sext i32 %37 to i64, !dbg !128
  %276 = getelementptr float, ptr addrspace(1) %29, i64 %275, !dbg !128
  %277 = bitcast float %273 to i32, !dbg !129
  %278 = select i1 %47, i32 %55, i32 %277, !dbg !130
  %279 = bitcast float %274 to i32, !dbg !129
  %280 = select i1 %47, i32 %56, i32 %279, !dbg !130
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %278, i32 %280, ptr addrspace(1) %276, i1 %39) #1, !dbg !129
  ret void, !dbg !131
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czjfrcealjdp6mmjaiwtofifyypv6ajkwzsu3huasugasn3jbrsi.py", directory: "inductor_cache/zj")
!4 = !{ptr @triton_poi_fused_cat_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_18", linkageName: "triton_poi_fused_cat_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 26, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 48, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 60, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 44, scope: !7)
!30 = !DILocation(line: 40, column: 54, scope: !7)
!31 = !DILocation(line: 40, column: 73, scope: !7)
!32 = !DILocation(line: 40, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 41, scope: !7)
!34 = !DILocation(line: 40, column: 49, scope: !7)
!35 = !DILocation(line: 40, column: 67, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 85, scope: !7)
!38 = !DILocation(line: 40, column: 78, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 41, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 54, scope: !7)
!43 = !DILocation(line: 55, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 40, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 31, scope: !7)
!50 = !DILocation(line: 60, column: 40, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 20, scope: !7)
!53 = !DILocation(line: 68, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 37, scope: !7)
!55 = !DILocation(line: 69, column: 45, scope: !7)
!56 = !DILocation(line: 69, column: 55, scope: !7)
!57 = !DILocation(line: 69, column: 77, scope: !7)
!58 = !DILocation(line: 69, column: 42, scope: !7)
!59 = !DILocation(line: 69, column: 50, scope: !7)
!60 = !DILocation(line: 69, column: 70, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 90, scope: !7)
!63 = !DILocation(line: 69, column: 82, scope: !7)
!64 = !DILocation(line: 79, column: 42, scope: !7)
!65 = !DILocation(line: 79, column: 32, scope: !7)
!66 = !DILocation(line: 79, column: 57, scope: !7)
!67 = !DILocation(line: 84, column: 20, scope: !7)
!68 = !DILocation(line: 85, column: 32, scope: !7)
!69 = !DILocation(line: 85, column: 41, scope: !7)
!70 = !DILocation(line: 86, column: 20, scope: !7)
!71 = !DILocation(line: 87, column: 20, scope: !7)
!72 = !DILocation(line: 88, column: 20, scope: !7)
!73 = !DILocation(line: 89, column: 32, scope: !7)
!74 = !DILocation(line: 89, column: 41, scope: !7)
!75 = !DILocation(line: 90, column: 20, scope: !7)
!76 = !DILocation(line: 91, column: 20, scope: !7)
!77 = !DILocation(line: 97, column: 20, scope: !7)
!78 = !DILocation(line: 98, column: 46, scope: !7)
!79 = !DILocation(line: 98, column: 56, scope: !7)
!80 = !DILocation(line: 98, column: 79, scope: !7)
!81 = !DILocation(line: 98, column: 38, scope: !7)
!82 = !DILocation(line: 98, column: 43, scope: !7)
!83 = !DILocation(line: 98, column: 51, scope: !7)
!84 = !DILocation(line: 98, column: 72, scope: !7)
!85 = !DILocation(line: 98, column: 32, scope: !7)
!86 = !DILocation(line: 98, column: 92, scope: !7)
!87 = !DILocation(line: 98, column: 84, scope: !7)
!88 = !DILocation(line: 108, column: 42, scope: !7)
!89 = !DILocation(line: 108, column: 32, scope: !7)
!90 = !DILocation(line: 108, column: 58, scope: !7)
!91 = !DILocation(line: 113, column: 20, scope: !7)
!92 = !DILocation(line: 114, column: 32, scope: !7)
!93 = !DILocation(line: 114, column: 42, scope: !7)
!94 = !DILocation(line: 115, column: 20, scope: !7)
!95 = !DILocation(line: 116, column: 20, scope: !7)
!96 = !DILocation(line: 117, column: 20, scope: !7)
!97 = !DILocation(line: 118, column: 32, scope: !7)
!98 = !DILocation(line: 118, column: 42, scope: !7)
!99 = !DILocation(line: 119, column: 20, scope: !7)
!100 = !DILocation(line: 120, column: 20, scope: !7)
!101 = !DILocation(line: 123, column: 20, scope: !7)
!102 = !DILocation(line: 126, column: 39, scope: !7)
!103 = !DILocation(line: 126, column: 47, scope: !7)
!104 = !DILocation(line: 126, column: 68, scope: !7)
!105 = !DILocation(line: 126, column: 58, scope: !7)
!106 = !DILocation(line: 126, column: 82, scope: !7)
!107 = !DILocation(line: 126, column: 44, scope: !7)
!108 = !DILocation(line: 126, column: 52, scope: !7)
!109 = !DILocation(line: 126, column: 74, scope: !7)
!110 = !DILocation(line: 126, column: 32, scope: !7)
!111 = !DILocation(line: 126, column: 95, scope: !7)
!112 = !DILocation(line: 126, column: 87, scope: !7)
!113 = !DILocation(line: 136, column: 43, scope: !7)
!114 = !DILocation(line: 136, column: 33, scope: !7)
!115 = !DILocation(line: 136, column: 59, scope: !7)
!116 = !DILocation(line: 141, column: 22, scope: !7)
!117 = !DILocation(line: 142, column: 33, scope: !7)
!118 = !DILocation(line: 142, column: 43, scope: !7)
!119 = !DILocation(line: 143, column: 22, scope: !7)
!120 = !DILocation(line: 144, column: 22, scope: !7)
!121 = !DILocation(line: 145, column: 22, scope: !7)
!122 = !DILocation(line: 146, column: 33, scope: !7)
!123 = !DILocation(line: 146, column: 43, scope: !7)
!124 = !DILocation(line: 147, column: 22, scope: !7)
!125 = !DILocation(line: 148, column: 21, scope: !7)
!126 = !DILocation(line: 150, column: 37, scope: !7)
!127 = !DILocation(line: 0, scope: !7)
!128 = !DILocation(line: 155, column: 25, scope: !7)
!129 = !DILocation(line: 155, column: 38, scope: !7)
!130 = !DILocation(line: 154, column: 34, scope: !7)
!131 = !DILocation(line: 155, column: 4, scope: !7)
